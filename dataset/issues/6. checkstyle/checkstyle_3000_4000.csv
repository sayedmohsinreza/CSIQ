"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","8907","Issue #6346: add var to list of ignored types for ClassFanOutComplexi…","…ty and ClassDataAbstractionCouplingCheck  Closes #6346  Diff Regression config: https://gist.githubusercontent.com/strkkk/a6e04b73158d1ef6f563dd5aab753361/raw/beab75bbe0fe2eb5233ac9c3488e4d1637ac8925/constant_name  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties","closed","","strkkk","2020-10-20T09:03:14Z","2020-10-31T06:54:36Z"
"","8273","Issue #8266: fix false positive for MissingMethodCheck for private in…","…terface methods  Resolves #8266   Reg report: https://strkkk.github.io/checkstyle/8266/checkstyle/index.html  It looks like that fix is also discovered and fixed another false positives like https://strkkk.github.io/checkstyle/8266/checkstyle/xref/checkstyle/contribution/checkstyle-tester/repositories/checkstyle/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java9/InputAdvanceJava9TryWithResources.java.html#L9","closed","","strkkk","2020-05-29T14:46:23Z","2021-01-29T11:43:52Z"
"","8250","Issue #8249: resolve Sonar's 'Refactor the body of this try/catch to …","…have only one invocation throwing an exception.'  Issue #8249  some violations I already marked and ""Wontfix"" or ""False positive"" in Sonar.","closed","","romani","2020-05-23T23:58:54Z","2020-11-07T15:59:24Z"
"","8992","Issue #8537: add additional classes to default exclude list in Abstra…","…ctClassCouplingCheck  Closes #8537  Diff Regression projects: https://gist.githubusercontent.com/strkkk/5eb3b0069ecd438af73bf045c24a855c/raw/d568ee6c30a91e3f721c37b4883ef3264b6203b7/all-projects Diff Regression config: https://gist.githubusercontent.com/strkkk/a6e04b73158d1ef6f563dd5aab753361/raw/beab75bbe0fe2eb5233ac9c3488e4d1637ac8925/constant_name","closed","","strkkk","2020-11-17T11:28:08Z","2020-11-21T21:03:47Z"
"","8253","Issue #8249: fix Sonar's 'Refactor the body of this try/catch to have…","… only one invocation throwing an exception.'  Issue #8249 leftovers  src/.../puppycrawl/tools/checkstyle/DefaultLoggerTest.java Refactor the body of this try/catch to have only one invocation throwing an exception.Why is this an issue? L93 L108  src/.../puppycrawl/tools/checkstyle/JavadocPropertiesGeneratorTest.java Refactor the body of this try/catch to have only one invocation throwing an exception.Why is this an issue? L241  src/.../puppycrawl/tools/checkstyle/XMLLoggerTest.java Refactor the body of this try/catch to have only one invocation throwing an exception.Why is this an issue? L355  src/.../tools/checkstyle/ant/CheckstyleAntTaskTest.java Refactor the body of this try/catch to have only one invocation throwing an exception.Why is this an issue? L445","closed","","romani","2020-05-24T22:36:17Z","2020-11-07T15:59:23Z"
"","8155","XdocsJavaDocsTest fails to detect the absence of class javadoc","XdocsJavaDocsTest only validates the `xdocs` file description and corresponding class javadoc when it is non empty. If someone is adding a new check and adds the description in xdocs only, no error is reported","closed","","gaurabdg","2020-04-21T19:56:45Z","2020-04-21T20:51:42Z"
"","8572","minor: fix wrong Chinese translation of override","Wrong Chinese translation: `override` was translated as `overload`. It's very confusing. BTW, happened to find a typo - fixed too!","closed","","shiliyu","2020-07-28T14:59:05Z","2020-07-28T19:40:12Z"
"","8117","False negative with validateThrows in JavadocMethod","While designing additional UTs for #7955 I came across some unexpected behavior.  Check documentation: https://checkstyle.org/config_javadoc.html#JavadocMethod  ``` D:\checkstyletest>type config.xml                                                       D:\checkstyletest>type test\*.java  class Test {      /**      * No throws tags.      *      * @param x some input      */     void foo(int x) {         if (x > 0) {             throw new IllegalArgumentException(""bar1""); // violation         }         if (x < 0) {             throw new UnsupportedOperationException(""bar2""); // violation?         }     }  }  D:\checkstyletest>set RUN_LOCALE=""-Duser.language=en -Duser.country=US""   D:\checkstyletest>java -jar ""-Duser.language=en -Duser.country=US"" checkstyle-8.31-all.jar -c config.xml test\*.java  Starting audit... [ERROR] D:\checkstyletest\test\Test.java:10:23: Expected @throws tag for 'IllegalArgumentException'. [JavadocMethod] Audit done.  ```   Expected: There should be 2 violations, one for `IllegalArgumentException` and another for `UnsupportedOperationException`.  This is a different issue from #7473 which is dealing with false positives. This is a false negative.  ---  While I haven't figured out the exact conditions necessary to cause this, I suspect that it is due to a bug in this method, as it is simply not returning all the tokens that are necessary to check: https://github.com/checkstyle/checkstyle/blob/0294924e4066aaa00080a876ab1268a4c8fd7cb3/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java#L728-L755  I'll start working on a fix once this is approved.","closed","approved,","wltan","2020-04-17T13:18:14Z","2021-03-18T14:36:27Z"
"","8133","Travis execution of nondex is not failing when plugin is failed to even run","when nondex plugin did not run we mark build as passed, that created leak of failure to master.   This failure doesn't show any `.nondex` folders not being created. Original PR failure (at download of artifactt) at https://travis-ci.org/github/checkstyle/checkstyle/jobs/675825399#L532 had a folder failure because nondex didn't even run since maven failure was with downloading dependencies. https://travis-ci.org/github/checkstyle/checkstyle/jobs/675825399#L504  ``` (14 kB at 332 kB/s) Downloaded from central: https://repo.maven.apache.org/maven2/ org/codehaus/mojo/maven-metadata.xml (20 kB at 241 kB/s) [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  3.738 s [INFO] Finished at: 2020-04-16T16:58:17Z [INFO] ------------------------------------------------------------------------ [ERROR] No plugin found for prefix 'nondex' in the current project  and in the plugin groups [org.apache.maven.plugins, org.codehaus.mojo]  available from the repositories [local (/home/travis/.m2/repository),  nexus-codehaus-snapshot  (https://oss.sonatype.org/content/repositories/codehaus-snapshots/),  central (https://repo.maven.apache.org/maven2)] -> [Help 1] org.apache.maven.plugin.prefix.NoPluginFoundForPrefixException:  No plugin found for prefix 'nondex' in the current project and in the  plugin groups [org.apache.maven.plugins, org.codehaus.mojo] available  from the repositories [local (/home/travis/.m2/repository),  nexus-codehaus-snapshot  (https://oss.sonatype.org/content/repositories/codehaus-snapshots/),  central (https://repo.maven.apache.org/maven2)]     at org.apache.maven.plugin.prefix.internal.DefaultPluginPrefixResolver.resolve (DefaultPluginPrefixResolver.java:95)     at org.apache.maven.lifecycle.internal.MojoDescriptorCreator.findPluginForPrefix (MojoDescriptorCreator.java:266)     at org.apache.maven.lifecycle.internal.MojoDescriptorCreator.getMojoDescriptor (MojoDescriptorCreator.java:220)     at org.apache.maven.lifecycle.internal.DefaultLifecycleTaskSegmentCalculator.calculateTaskSegments (DefaultLifecycleTaskSegmentCalculator.java:104)     at org.apache.maven.lifecycle.internal.DefaultLifecycleTaskSegmentCalculator.calculateTaskSegments (DefaultLifecycleTaskSegmentCalculator.java:83)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:89)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347) [ERROR]  [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoPluginFoundForPrefixException [INFO] Build failures were ignored. grep: .nondex/: No such file or directory Size of output:0 ```  issue is taken from discussion at https://github.com/checkstyle/checkstyle/pull/8119 .  we should use `--fail-never` untill https://github.com/TestingResearchIllinois/NonDex/issues/97","open","CI,","romani","2020-04-19T12:57:56Z","2022-06-14T13:54:42Z"
"","8788","skip jacoco with maven test skipped","when `-Dmaven.test.skip` is set, there is no reason of `-DskipTests` to have different value, AND jacoco plugin goal should be skipped.  https://stackoverflow.com/a/21933970/1015848","closed","awaiting response,","qxo","2020-09-05T03:28:52Z","2020-10-04T13:51:44Z"
"","8325","Use JDK11 for wercker","Wercker build are failing with ``` Detected JDK Version: 1.8.0-232 is not in the allowed range [11,). ``` example build: https://app.wercker.com/checkstyle/checkstyle/runs/build/5eeb7b817b63df001a1e91a2?step=5eeb7bbf1ccc980008b812b3  This is due to Hibernate team recently [set 11 as minimal Java version](https://github.com/hibernate/hibernate-search/commit/d1d5243f59fb8bdb6f3150551c9e9cfa178f5357)  The wercker is already compatible with Java 11, we should update maven image to `3.6.3-jdk-11` in the config.","closed","CI,","pbludov","2020-06-19T08:46:22Z","2020-06-21T08:37:59Z"
"","8397","Ability to keep mobile mode when mobie phone is vertical position","web site in horizontal layout of mobile phone should be in mobile mode (left panel should be on top). Here is how it looks like: ![Screenshot_20200704-151539](https://user-images.githubusercontent.com/812984/86521727-64012080-be09-11ea-80c5-8ad789975291.png)  table content is cut: ![Screenshot_20200704-152004](https://user-images.githubusercontent.com/812984/86521791-146f2480-be0a-11ea-8391-3068625688f1.png) code is cut: ![Screenshot_20200704-152035](https://user-images.githubusercontent.com/812984/86521792-15a05180-be0a-11ea-8b10-33b8a7bdc664.png)   Reason: I do a lot of answers from phone. Almost always I need to consult documentation and examples of behavior. in vertical layout it good for simple doc check, but when it comes to examples and tables vertical is not enough and I try to use horizontal layout, but it switch back to normal web site rendering and left panel takes all space that I expected to reuse to see whole table or example.  My phone is 6-inch (2880 × 1440) is it like laptop screen ? :)","closed","miscellaneous,","romani","2020-07-04T22:28:30Z","2020-07-09T13:20:04Z"
"","8274","Update java.g to allow new tokens to be added","We need to update java.g `tokens` block to reflect last tokens added.  This must be done to preserve the ordering of tokens and correctly allow new tokens to be added.    ### Tokens to add to the end of the list:   - `SINGLE_LINE_COMMENT_CONTENT` - `BLOCK_COMMENT_CONTENT` - `STD_ESC` - `BINARY_DIGIT` - `ID_START` - `ID_PART` - `INT_LITERAL` -  `LONG_LITERAL` - `FLOAT_LITERAL` - `DOUBLE_LITERAL` - `HEX_FLOAT_LITERAL` - `HEX_DOUBLE_LITERAL` - `SIGNED_INTEGER` - `BINARY_EXPONENT`","closed","miscellaneous,","nick-mancuso","2020-05-29T17:22:35Z","2020-06-04T20:39:28Z"
"","8631","Proof of Java 14 syntax by new CI build item","We need to prove that our java 14 grammar can parse all compilable code in https://github.com/openjdk/jdk14u.  To do this, we need to create a new build item in CI (probably Travis) that prints ASTs for all compilable code in the jdk14 repository. But, due to the many non-compilable files, we must find a solution to parse only those that are compilable. Here are some ideas:  ### Include List _________________  **This is not an ideal solution, because we would be missing thousands of files that we should be testing on**.  I have found a list of test files from the `langtools/` directory here: https://download.java.net/openjdk/testresults/15/archives/24/langtools-24-summary.txt  While this is not a comprehensive list, after removing the non-compilable files, there are 2,543 inputs that we can test on.  That list of files is here: https://gist.github.com/nmancus1/9c3be05a00278774d7879d8f5b6578fb     ### Exclude List ______________________  **It would be better to exclude those files that are non-compilable and parse all compilable code in JDK14. Here are some ways that we can do that:**  We can exclude files with the `@compile/fail/ref=` javadoc tag. Here is a list of all files containing the `@compile/fail/ref=` tag.   - List here: https://gist.github.com/nmancus1/8a4be76cb733691e0a6ef7096c3069e6   - Shown here:  https://github.com/openjdk/jdk/blob/b5d775f115e4274d8f0c221a8eb4a92d17a9f579/test/langtools/tools/javac/failover/FailOver15.java#L6  Another way to find files that should be excluded is to grep files with `compiler.err` comments.   - List here: https://gist.github.com/nmancus1/155c860be9c130b69cf74e384ae5979f   - Shown here: https://github.com/openjdk/jdk14/blob/abc56193174dd6a11a8453bd5036fc8618ecca61/test/langtools/tools/javac/diags/examples/RecordsCantDeclareComponentModifiers.java#L24   We can build an excludes file from these lists.","closed","miscellaneous,","nick-mancuso","2020-08-09T02:24:24Z","2020-08-12T14:07:44Z"
"","8748","Create New Check RecordComponentNumberCheck","We need to create a new check, RecordComponentNumbercheck, to check the number of record components listed in the record component list within the header of a record declaration.   It is also important to allow users to specify different maximum numbers of record compnents based on the scope of the record declaration, i.e., more components allowed in a private record declaration than those allowed in a public record declaration.   From https://github.com/checkstyle/checkstyle/issues/8521:  we need new check on this, because: - number of parameters are actually number of ""fields""  - users might not use Builder like patterns - it might no workarounds for users - ParameterNumber has `ignoreOverriddenMethods` that is not applicable  - there might be different requirements for private records(no limits) and public records.  confusion might be is why  ``` record MyTestRecord2() {     MyTestRecord2(String one, String two, String three){ // violation ParameterNumber ...  //components record MyTestRecord34(String one, String two, String three) { //  ok ParameterNumber ... ``` but I hope it is ok, as reference in ctor of record does not create record field. And new Check will mostly be validator of amount of fields in record.  Is all this make sense ?    AST has new token for such parameters: https://github.com/checkstyle/checkstyle/blob/8e82c6cf0131875fa0a4f3912ad4169aa57ff5e1/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java#L3617-L3638  _Originally posted by @romani in https://github.com/checkstyle/checkstyle/issues/8521#issuecomment-667130908_","closed","new module,","nick-mancuso","2020-08-21T16:11:07Z","2020-08-26T05:50:43Z"
"","8774","Create UT for validating the metadata present in a module's class level javadoc","We need to cover all code 100%. All code should be covered in same way as all other classes in more functional way - parsing of special javadocs and xmls","open","approved,","gaurabdg","2020-08-28T21:39:47Z","2020-08-30T07:04:52Z"
"","8228","Update CIs to validate empty outpu of 'git status' after execution","we discussed this a lot but never made any action on this. It become problem at https://github.com/checkstyle/checkstyle/pull/8136#discussion_r419466250 again. We wasting time in updates and conversations that can be caught at the very begining.  Rationale: We execute CIs commands on local for testing, pollution in git repo make it ease to put in commit/PR unwanted changes, extra files, ......  It is required to update all CIs to have validation that `git status` is empty. If some files are created they should be moved to `.ci-temp` or added to `.gitignore` (as last option)","closed","CI,","romani","2020-05-09T17:07:16Z","2020-05-20T09:17:41Z"
"","8543","Check that all xml sources are well formed","We already have `xml-maven-plugin` in our configuration for checking schemas in XML files. This plugin can be used to check that XML files are [well formed](https://www.mojohaus.org/xml-maven-plugin/check-format-mojo.html)  We don't need an additional step in the CI, we just need to specify the set of files to check and the desired level of indentation.  Some files (pom.xml for example) already well formed (with minor violations), other should be ignored for now an reformatted in an extra issue.","closed","miscellaneous,","pbludov","2020-07-22T06:51:46Z","2020-07-25T13:40:34Z"
"","8548","Sonar violation: ""Character classes should be preferred over reluctant quantifiers in regular expressions""","violation https://sonarcloud.io/code?id=org.checkstyle%3Acheckstyle&selected=org.checkstyle%3Acheckstyle%3Asrc%2Fmain%2Fjava%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2FJavadocPropertiesGenerator.java&line=60  https://github.com/checkstyle/checkstyle/blob/4a0cda92dfd50b1f8533ab7940e8abaedec30d7a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocPropertiesGenerator.java#L60  ```      private static final Pattern END_OF_SENTENCE_PATTERN = Pattern.compile(""(.*?[.?!])(\\s|$)""); ```  Sonar proposal `Replace this use of a reluctant quantifier with ""[^.?!]*+"".`  [doc](https://sonarcloud.io/organizations/checkstyle/rules?open=java%3AS5857&rule_key=java%3AS5857).  ATTENTION: after fix merge remove ""Wontfix"" from in Sonar UI.","closed","miscellaneous,","romani","2020-07-23T14:13:27Z","2021-03-16T03:30:25Z"
"","8400","minor: sort the property types in xdoc","Update webpage: ![Screenshot_20200706_013655](https://user-images.githubusercontent.com/23253816/86541469-d7e71a00-bf2a-11ea-9268-014e403fd2a9.png)","closed","","gaurabdg","2020-07-05T20:19:14Z","2020-07-06T00:20:15Z"
"","8138","Issue #7892: clean up after shippable","Update for #7892: clean up after Shippable runs.","closed","","nick-mancuso","2020-04-19T15:48:19Z","2020-04-25T14:30:41Z"
"","8226","Issue #7892: add empty .ci-temp validation for travis","Update for #7892: Add validation for empty .ci-temp folder after CI runs  Travis cut logs if scripts finish execution abnormally:  https://travis-ci.community/t/log-are-truncated-when-my-script-exits-abnormally/5878/4 Note that the OP is stating that this happens when script exits normally or with error.","closed","","nick-mancuso","2020-05-05T05:14:42Z","2020-05-28T14:06:56Z"
"","8040","Issue #7892: add empty .ci-temp validation","Update for #7892: Add validation for empty .ci-temp folder after CI runs","closed","","nick-mancuso","2020-04-06T04:23:37Z","2020-04-25T12:38:38Z"
"","8136","Issue #3786: enable JOSM in Travis CI","Try to enable Ant-based JOSM build in Travis CI, as per #3786 comments","closed","","don-vip","2020-04-19T14:58:41Z","2020-05-17T22:28:55Z"
"","8534","minor: move long travis job to execute it earlier","Travis is executing jobs from top to bottom. The ""no error test on pmd"" job is taking a long time to execute (e.g. [here](https://travis-ci.org/github/checkstyle/checkstyle/builds/709174867) it is 16 minutes, two times slower than second longest job) and it is in the bottom of the job list, so it is often left as last job to finish travis build for PR. By moving it up, it will help to get travis status for PR quicker.","closed","","strkkk","2020-07-17T14:49:50Z","2021-01-29T11:43:58Z"
"","8942","infra: update spring-cloud-gcp to use maven-checkstyle-plugin 3.1.1","to pass on checkstyle snapshot version  reproduced in local even on master code.  failure - https://app.wercker.com/checkstyle/checkstyle/runs/build/5f9aca9c237ec900081ffd52?step=5f9acae1fddfc1000855aa55   detected at https://github.com/checkstyle/checkstyle/pull/8939#issuecomment-719579267","closed","","romani","2020-10-30T14:28:42Z","2020-10-30T14:41:02Z"
"","8822","infra: use stable version of pgjdbc","to not be affected by their build failures between releases  master build failure - https://app.wercker.com/checkstyle/checkstyle/runs/build/5f5a28d17e996800080b09e4?step=5f5a294a16cb6b0007e48909","closed","","romani","2020-09-11T14:13:27Z","2020-11-07T15:59:07Z"
"","8132","new Check: NoCodeInFile","to cover functionality that we removed from PackgeDeclaration Check at https://github.com/checkstyle/checkstyle/issues/8110  We need new Check to cover cases where all content is commented out. So file is not empty, but there is no java code .  It should print violations on files like the following: ```` $ cat TestClass.java  $ cat TestClass2.java // violation  $ cat TestClass3.java /* violation */ ````","closed","new module,","romani","2020-04-19T12:46:21Z","2020-05-23T20:25:24Z"
"","8037","ci: fix failure in codeship to recognize multiline commands","to address https://app.codeship.com/projects/124310/builds/541d9e46-3936-48e2-8c92-f5ecc9c772ce  ``` 2020-04-04 23:22:30 system build/pull started 2020-04-04 23:22:41 system build/pull finished successfully 2020-04-04 23:22:42 system ls: unrecognized option:  2020-04-04 23:22:42 system  2020-04-04 23:22:42 system BusyBox v1.27.2 (2018-01-29 15:48:57 GMT) multi-call binary. 2020-04-04 23:22:42 system  2020-04-04 23:22:42 system Usage: ls [-1AaCxdLHRFplinshrSXvctu] [-w WIDTH] [FILE]... 2020-04-04 23:22:42 system  2020-04-04 23:22:42 system List directory contents 2020-04-04 23:22:42 system  2020-04-04 23:22:42 system   -1  One column output 2020-04-04 23:22:42 system   -a  Include entries which start with . 2020-04-04 23:22:42 system   -A  Like -a, but exclude . and .. 2020-04-04 23:22:42 system   -x  List by lines 2020-04-04 23:22:42 system   -d  List directory entries instead of contents 2020-04-04 23:22:42 system   -L  Follow symlinks 2020-04-04 23:22:42 system   -H  Follow symlinks on command line 2020-04-04 23:22:42 system   -R  Recurse 2020-04-04 23:22:42 system   -p  Append / to dir entries 2020-04-04 23:22:42 system   -F  Append indicator (one of */=@|) to entries 2020-04-04 23:22:42 system   -l  Long listing format 2020-04-04 23:22:42 system   -i  List inode numbers 2020-04-04 23:22:42 system   -n  List numeric UIDs and GIDs instead of names 2020-04-04 23:22:42 system   -s  List allocated blocks 2020-04-04 23:22:42 system   -lc List ctime 2020-04-04 23:22:42 system   -lu List atime 2020-04-04 23:22:42 system   --full-time List full date and time 2020-04-04 23:22:42 system   -h  Human readable sizes (1K 243M 2G) 2020-04-04 23:22:42 system   --group-directories-first 2020-04-04 23:22:42 system   -S  Sort by size 2020-04-04 23:22:42 system   -X  Sort by extension 2020-04-04 23:22:42 system   -v  Sort by version 2020-04-04 23:22:42 system   -t  Sort by mtime 2020-04-04 23:22:42 system   -tc Sort by ctime 2020-04-04 23:22:42 system   -tu Sort by atime 2020-04-04 23:22:42 system   -r  Reverse sort order 2020-04-04 23:22:42 system   -w N  Format N columns wide 2020-04-04 23:22:42 system   --color[={always,never,auto}] Control coloring ```","closed","","romani","2020-04-05T00:37:48Z","2020-04-12T20:46:20Z"
"","8009","Issue #7987: use RegexpSingleline Check to validate amount of tests in Xpath tests","This resolves #7987   ### Description use ```@Test``` occurrences in the test files in suppressionxpathfilter directory to validate the number of test cases written.  ### sample ``` public class XpathRegressionAnonInnerLengthTest extends AbstractXpathTestSupport {      private final String checkName = AnonInnerLengthCheck.class.getSimpleName();      @Override     protected String getCheckName() {         return checkName;     }      @Test     public void testMaxLength() throws Exception {         final int maxLen = 5;         final File fileToProcess =                 new File(getPath(""SuppressionXpathRegressionAnonInnerLength.java""));          final DefaultConfiguration moduleConfig =                 createModuleConfig(AnonInnerLengthCheck.class);         moduleConfig.addAttribute(""max"", String.valueOf(maxLen));          final String[] expectedViolation = {             ""7:41: "" + getCheckMessage(AnonInnerLengthCheck.class,                     AnonInnerLengthCheck.MSG_KEY, 6, maxLen),         };          final List expectedXpathQueries = Arrays.asList(                 ""/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionAnonInnerLength']]""                         + ""/OBJBLOCK/METHOD_DEF[./IDENT[@text='compare']]/SLIST""                         + ""/VARIABLE_DEF[./IDENT[@text='comparator']]/ASSIGN/EXPR"",                 ""/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionAnonInnerLength']]""                         + ""/OBJBLOCK/METHOD_DEF[./IDENT[@text='compare']]/SLIST""                         + ""/VARIABLE_DEF[./IDENT[@text='comparator']]/ASSIGN/EXPR""                         + ""/LITERAL_NEW[./IDENT[@text='Comparator']]""         );          runVerifications(moduleConfig, fileToProcess, expectedViolation,                 expectedXpathQueries);     }  } ``` #### output ``` [checkstyle] [ERROR] /home/malintha/Documents/projects/checkstyle/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAnonInnerLengthTest.java:1: Two or more test cases are required [numberOfTestCases] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 01:17 min [INFO] Finished at: 2020-04-01T20:38:09+05:30 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.8:run (ant-phase-verify) on project checkstyle: An Ant BuildException has occured: The following error occurred while executing this line: [ERROR] /home/malintha/Documents/projects/checkstyle/config/ant-phase-verify.xml:64: Got 1 errors and 0 warnings. [ERROR] around Ant part ...... @ 8:47 in /home/malintha/Documents/projects/checkstyle/target/antrun/build-main.xml [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException  ```","closed","","malinthar","2020-04-01T15:38:33Z","2020-04-22T04:17:02Z"
"","8391","Validation of All Checks Related to Addition of Java14 Enhanced instanceof Grammar","This issue will be the main tracker of all work related to checks impacted by merging https://github.com/checkstyle/checkstyle/pull/8401.   ## SUMMARY Possibly affected checks, and those that should apply to this syntax, are listed below. Since we have created a new token, we will need to add this token to specific checks that do apply.  The below list was determined by grep'ing the checks directory for checks that use VARIABLE_DEF. The logic here is that since we have a new variable, PATTERN_VARIABLE_DEF, we should examine all checks that have VARIABLE_DEF as a required or acceptable token, to determine relevance to our new token.   ## AFFECTED CHECKS  ``` ➜  checks git:(initial-pattern-def-grammar) grep -l -H ""TokenTypes.VARIABLE_DEF"" **/**/*.* | sort -u                        annotation/AnnotationLocationCheck.java annotation/AnnotationOnSameLineCheck.java annotation/SuppressWarningsCheck.java coding/DeclarationOrderCheck.java coding/EqualsAvoidNullCheck.java coding/ExplicitInitializationCheck.java coding/FinalLocalVariableCheck.java coding/HiddenFieldCheck.java coding/IllegalTypeCheck.java coding/InnerAssignmentCheck.java coding/MagicNumberCheck.java coding/ModifiedControlVariableCheck.java coding/MultipleVariableDeclarationsCheck.java coding/RequireThisCheck.java coding/UnnecessarySemicolonAfterTypeMemberDeclarationCheck.java coding/VariableDeclarationUsageDistanceCheck.java design/HideUtilityClassConstructorCheck.java design/InnerTypeLastCheck.java design/InterfaceIsTypeCheck.java design/MutableExceptionCheck.java design/VisibilityModifierCheck.java FinalParametersCheck.java imports/UnusedImportsCheck.java indentation/BlockParentHandler.java indentation/HandlerFactory.java indentation/MemberDefHandler.java javadoc/AtclauseOrderCheck.java javadoc/JavadocStyleCheck.java javadoc/JavadocTagInfo.java javadoc/JavadocVariableCheck.java metrics/JavaNCSSCheck.java modifier/InterfaceMemberImpliedModifierCheck.java modifier/ModifierOrderCheck.java modifier/RedundantModifierCheck.java naming/AbbreviationAsWordInNameCheck.java naming/ConstantNameCheck.java naming/LocalFinalVariableNameCheck.java naming/LocalVariableNameCheck.java naming/MemberNameCheck.java naming/StaticVariableNameCheck.java whitespace/EmptyLineSeparatorCheck.java  ``` Aside from the above checks, we will also create a new check, called `BestPracticeInstanceOfWithPatternVar`  **Background Information** From [JEP](https://openjdk.java.net/jeps/305):  The instanceof grammar is extended accordingly:  _RelationalExpression:_      _..._      _RelationalExpression instanceof ReferenceType_      _RelationalExpression instanceof Pattern_  _Pattern:_      _ReferenceType Identifier_","closed","approved,","nick-mancuso","2020-06-30T12:25:47Z","2020-07-26T22:15:17Z"
"","8658","Validation of All Checks Related to Addition of Java 14 Switch Expression Syntax","This issue will be the main tracker of all work related to checks impacted by merging #8449.  ### SUMMARY ____________  Possibly affected checks, and those that should apply to this syntax, are listed below. Since we have created several new tokens, and modified existing structures (switch statement)  we will need to add these tokens to specific checks that apply, and adapt the checks to deal with the inclusion of the new structure.  ### POSSIBLY AFFECTED CHECKS __________________  ``` ➜  checks git:(enhanced-switch) ✗  grep -l -H ""TokenTypes.LITERAL_DEFAULT"" **/**/*.* | sort -u >> affected.checks ➜  checks git:(enhanced-switch) ✗  grep -l -H ""TokenTypes.LITERAL_CASE"" **/**/*.* | sort -u >> affected.checks ➜  checks git:(enhanced-switch) ✗  grep -l -H ""TokenTypes.LITERAL_SWITCH"" **/**/*.* | sort -u >> affected.checks ➜  checks git:(enhanced-switch) ✗  grep -l -H ""TokenTypes.CASE_GROUP"" **/**/*.* | sort -u >> affected.checks ➜  checks git:(enhanced-switch) ✗  grep -l -H ""TokenTypes.LAMBDA"" **/**/*.* | sort -u >> affected.checks  ➜  checks git:(enhanced-switch) ✗ cat affected.checks | sort -u blocks/EmptyBlockCheck.java blocks/LeftCurlyCheck.java blocks/NeedBracesCheck.java coding/DefaultComesLastCheck.java coding/EqualsAvoidNullCheck.java coding/FallThroughCheck.java coding/FinalLocalVariableCheck.java coding/HiddenFieldCheck.java coding/InnerAssignmentCheck.java coding/MagicNumberCheck.java coding/MissingSwitchDefaultCheck.java coding/OneStatementPerLineCheck.java coding/RequireThisCheck.java coding/ReturnCountCheck.java coding/UnnecessaryParenthesesCheck.java coding/VariableDeclarationUsageDistanceCheck.java indentation/CaseHandler.java indentation/CommentsIndentationCheck.java indentation/HandlerFactory.java indentation/SlistHandler.java javadoc/JavadocMethodCheck.java metrics/CyclomaticComplexityCheck.java metrics/JavaNCSSCheck.java metrics/NPathComplexityCheck.java modifier/InterfaceMemberImpliedModifierCheck.java naming/LambdaParameterNameCheck.java naming/ParameterNameCheck.java whitespace/OperatorWrapCheck.java whitespace/ParenPadCheck.java whitespace/WhitespaceAroundCheck.java   ``` In addition to the above, the following checks/ utilities caused exception during regression:  ``` AbstractNameCheck.java AbstractExpressionHandler.java UnnecessaryParenthesesCheck.java HiddenFieldCheck.java  ```","closed","miscellaneous,","nick-mancuso","2020-08-11T18:01:38Z","2020-08-26T20:34:15Z"
"","8452","Validation of All Checks Related to Addition of Java 14 Full Record Syntax Support","This issue will be the main tracker of all work related to checks impacted by merging #8422.  ## SUMMARY Possibly affected checks, and those that should apply to this syntax, are listed below. Since we have created several new tokens, a new constructor, and a new ""block"" structure,  we will need to add these tokens to specific checks that apply, and adapt the checks to deal with the inclusion of the new structure.   ## NEW CHECKS  as we created new tokens, we need to make sure we have validation for them at least for names style.  ## AFFECTED CHECKS ``` ➜  checks git:(master) grep -l -H ""TokenTypes.CLASS_DEF"" **/**/*.* | sort -u >> affected.checks ➜  checks git:(master) ✗ grep -l -H ""TokenTypes.INTERFACE_DEF"" **/**/*.* | sort -u >> affected.checks ➜  checks git:(master) ✗ grep -l -H ""TokenTypes.ENUM_DEF"" **/**/*.* | sort -u >> affected.checks ➜  checks git:(master) ✗ grep -l -H ""TokenTypes.CTOR_DEF"" **/**/*.* | sort -u >> affected.checks  ➜  checks git:(master) ✗ cat affected.checks | sort -u annotation/AnnotationLocationCheck.java annotation/AnnotationOnSameLineCheck.java annotation/SuppressWarningsCheck.java blocks/LeftCurlyCheck.java blocks/RightCurlyCheck.java coding/AbstractSuperCheck.java coding/CovariantEqualsCheck.java coding/DeclarationOrderCheck.java coding/EqualsAvoidNullCheck.java coding/FinalLocalVariableCheck.java coding/HiddenFieldCheck.java coding/IllegalInstantiationCheck.java coding/IllegalTypeCheck.java coding/MagicNumberCheck.java coding/MissingCtorCheck.java coding/OverloadMethodsDeclarationOrderCheck.java coding/ParameterAssignmentCheck.java coding/RequireThisCheck.java coding/ReturnCountCheck.java coding/UnnecessarySemicolonAfterOuterTypeDeclarationCheck.java coding/UnnecessarySemicolonAfterTypeMemberDeclarationCheck.java coding/UnnecessarySemicolonInEnumerationCheck.java design/DesignForExtensionCheck.java design/FinalClassCheck.java design/HideUtilityClassConstructorCheck.java design/InnerTypeLastCheck.java design/InterfaceIsTypeCheck.java design/MutableExceptionCheck.java design/OneTopLevelClassCheck.java design/VisibilityModifierCheck.java FinalParametersCheck.java imports/UnusedImportsCheck.java indentation/ClassDefHandler.java indentation/CommentsIndentationCheck.java indentation/HandlerFactory.java indentation/MethodDefHandler.java indentation/SlistHandler.java javadoc/AtclauseOrderCheck.java javadoc/JavadocMethodCheck.java javadoc/JavadocStyleCheck.java javadoc/JavadocTagInfo.java javadoc/JavadocTypeCheck.java javadoc/MissingJavadocMethodCheck.java javadoc/MissingJavadocTypeCheck.java javadoc/WriteTagCheck.java metrics/AbstractClassCouplingCheck.java metrics/BooleanExpressionComplexityCheck.java metrics/ClassDataAbstractionCouplingCheck.java metrics/ClassFanOutComplexityCheck.java metrics/CyclomaticComplexityCheck.java metrics/JavaNCSSCheck.java metrics/NPathComplexityCheck.java modifier/ClassMemberImpliedModifierCheck.java modifier/InterfaceMemberImpliedModifierCheck.java modifier/ModifierOrderCheck.java modifier/RedundantModifierCheck.java naming/AbbreviationAsWordInNameCheck.java naming/AbstractClassNameCheck.java naming/ClassTypeParameterNameCheck.java naming/InterfaceTypeParameterNameCheck.java naming/TypeNameCheck.java OuterTypeFilenameCheck.java sizes/ExecutableStatementCountCheck.java sizes/MethodCountCheck.java sizes/MethodLengthCheck.java sizes/OuterTypeNumberCheck.java sizes/ParameterNumberCheck.java UncommentedMainCheck.java whitespace/EmptyLineSeparatorCheck.java whitespace/GenericWhitespaceCheck.java whitespace/MethodParamPadCheck.java whitespace/NoLineWrapCheck.java whitespace/ParenPadCheck.java whitespace/WhitespaceAroundCheck.java ```","closed","approved,","nick-mancuso","2020-07-15T01:24:59Z","2020-08-26T02:33:17Z"
"","8601","Validation of All Checks Related to Addition of Java 14 Text Blocks Syntax Support","This issue will be the main tracker of all work related to checks impacted by merging #8327  ## SUMMARY Possibly affected checks, and those that should apply to this syntax, are listed below. Since we have created several new tokens, one of which has mutable content.  We will need to add these tokens to specific checks that apply, and adapt the checks to deal with the inclusion of the new structure.  ____________________ ## AFFECTED CHECKS  ``` ➜  checks git:(full-records-grammar-patch) ✗ grep -l -H ""TokenTypes.STRING_LITERAL"" **/**/*.* | sort -u annotation/SuppressWarningsCheck.java AvoidEscapedUnicodeCharactersCheck.java coding/EqualsAvoidNullCheck.java coding/IllegalTokenTextCheck.java coding/MultipleStringLiteralsCheck.java coding/StringLiteralEqualityCheck.java coding/UnnecessaryParenthesesCheck.java SuppressWarningsHolder.java  ```","closed","approved,","nick-mancuso","2020-08-04T00:16:59Z","2020-08-26T02:34:53Z"
"","8306","Javadoc Modification for Metadata Generation Support","This issue is to keep track of the changes made to the class level javadocs of checks and filters.  ### The corresponding PRs(having 10 checks each) will add - Datatype of each property  - Parent module of the check/filter - Violation message keys - Modified javadoc UTs  ### Changes in javadoc HTML pages  - Datatypes ![Screenshot_20200608_054808](https://user-images.githubusercontent.com/23253816/83983404-c0c50480-a94b-11ea-8d6e-df8d4fbfb27c.png) - Parent Module and Violation Messages ![Screenshot_20200605_235037](https://user-images.githubusercontent.com/23253816/83910065-8b6fb980-a787-11ea-9267-336ee306397c.png)   # Task Breakup - [x] UT addition for the modified javadocs - [x] Modification 1 - [ ] Modification 2 - [ ] Modification 3 - [ ] Modification 4 - [ ] Modification 5 - [ ] Modification 6 - [ ] Modification 7 - [ ] Modification 8 - [ ] Modification 9 - [ ] Modification 10 - [ ] Modification 11 - [ ] Modification 12 - [ ] Modification 13 - [ ] Modification 14 - [ ] Modification 15 - [ ] Modification 16 - [ ] Modification 17 - [ ] Modification 18","closed","miscellaneous,","gaurabdg","2020-06-06T23:48:41Z","2020-07-13T00:02:22Z"
"","8088","minor: update test inputs for JDK15","This is the only change required to compile Checkstyle with JDK15.  One test input should be updated since `java.lang.reflect.Modifier` ctor was removed in https://bugs.java.com/bugdatabase/view_bug.do?bug_id=8230723","closed","","pbludov","2020-04-13T08:07:41Z","2020-04-14T04:42:08Z"
"","8446","Change comment action for report generation pipeline","this is ok for now , but should be changed in next PRs  _Originally posted by @romani in https://github.com/_render_node/MDExOlB1bGxSZXF1ZXN0NDQ4Nzk5NjYz/pull_requests/unread_timeline_  For now action for posting comment is hosted in user repository, it should be transferred to contribution repo and pipeline should use contribution repo action to avoid external repo deletion or other unexpected changes","closed","miscellaneous,","strkkk","2020-07-14T14:14:43Z","2020-07-15T15:43:54Z"
"","8258","IntegerEqualityCheck","This is a feature request. There is already a StringLiteralEqualityCheck, I'd like to propose a similar rule for Integers. For those, it is specially tricky because of cache:           Integer a = 10;         Integer b = 10;         System.out.println(a.equals(b));         > true           Integer a = 155;         Integer b = 155;         System.out.println(a.equals(b));         > false  If there is interest I could implement it myself.","open","","furstenheim","2020-05-27T06:26:32Z","2021-03-14T06:42:47Z"
"","8318","[GSoC-PatchFilter] This is a demo PR of adding patch-filter to checkstyle","This is a demo PR of adding patch-filter to checkstyle, please do not close.","closed","","HuGanghui","2020-06-15T12:39:19Z","2020-07-25T15:01:12Z"
"","8185","Issue #6615: Add support for Java 14 switch","This includes allowing switch as an expression, i.e. switch expressions, and allowing mutliple expressions in both labels and rules as according to the JLS.  Relevant JLS sections: [14.11 The `switch` Statement](https://docs.oracle.com/javase/specs/jls/se14/html/jls-14.html#jls-14.11), [15.28 `switch` Expressions](https://docs.oracle.com/javase/specs/jls/se14/html/jls-15.html#jls-15.28)  Of note is that I'm not too familiar with how ANTLR 2 works, so I did some ""close enough"" grammar that accepts invalid Java (allows mixed labels + rules). I'm not sure if this is OK or not.  This fixes #6615.","closed","","octylFractal","2020-04-25T03:39:57Z","2020-08-11T13:44:18Z"
"","8846","minor: fix control does not return to idea_inspection.bat after calli…","This fixes the issue with idea_inspection.bat on Windows 7. After successful completion of `mvn compile` Idea was not launched.","closed","","basinilya","2020-09-21T17:27:00Z","2020-09-22T12:31:03Z"
"","8310","[[Feature]] Allow for use of DO_WHILE, LITERAL_CATCH, LITERAL_FOR, LITERAL_IF, and LITERAL_WHILE with NoWhitespaceAfter","There wasn't an issue I saw for this, any; I just prefer for these keywords to not have a space between themselves and the following open parenthesis and always had to remind myself that wasn't possible. So I figured I'd get things setup for such use to be added.","closed","abandoned,","WammKD","2020-06-10T07:45:31Z","2021-02-07T22:51:56Z"
"","8345","Add TokenUtil.isTypeDeclaration method","There is number of code fragments like ```  if (type == TokenTypes.CLASS_DEF     || type == TokenTypes.INTERFACE_DEF     || type == TokenTypes.ANNOTATION_DEF     || type == TokenTypes.ENUM_DEF) ``` This becomes clearer if we wrap such checks in a utility method. Something like `TokenUtil.isTypeDeclaration(tokenType)` After #8267 there should be a check for `TokenTypes.RECORD_DEF` too.  _Originally posted by @pbludov in https://github.com/checkstyle/checkstyle/pull/8175_","closed","miscellaneous,","pbludov","2020-06-27T16:47:58Z","2020-07-18T13:40:46Z"
"","8885","Make NonEmptyAtclauseDescription check @return","There is NonEmptyAtclauseDescription check, which checks that `@param` tags have something in them, it fails for `@param blah` if there is no text that follows that. However it doesn't seem to fail on naked `@return`. Would it be possible to change that, or add a new check for that?  ``` /**  * @param foo // error, good  * @return // no error here, bad  */ void foo(int foo) { } ```","closed","","muntyan","2020-10-09T18:06:00Z","2020-10-10T18:31:18Z"
"","8048","Extract logic for token type checking to separate method","There is a recurring pattern throughout Checkstyle's code: https://github.com/checkstyle/checkstyle/blob/a830b92f5ed1f9d2ed3b88440ba4d494105de89d/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java#L232-L235 https://github.com/checkstyle/checkstyle/blob/a830b92f5ed1f9d2ed3b88440ba4d494105de89d/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java#L141-L145 https://github.com/checkstyle/checkstyle/blob/a830b92f5ed1f9d2ed3b88440ba4d494105de89d/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java#L182-L185 https://github.com/checkstyle/checkstyle/blob/a830b92f5ed1f9d2ed3b88440ba4d494105de89d/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java#L208-L212 https://github.com/checkstyle/checkstyle/blob/8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java#L409-L417 https://github.com/checkstyle/checkstyle/blob/8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java#L424-L430 https://github.com/checkstyle/checkstyle/blob/bd45909e6345b2d3ef5c5472d35a3ad926a31eb9/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java#L738-L741  The main idea is that the AST node is being compared against a list of allowed types. What we can do is abstract away all of the `||` and `==` logic, into a new method that handles the comparisons for us. I see two ways of achieving this:  1. A static method under `TokenUtil`, `TokenUtil.isOfType(DetailAST ast, TokenTypes... types)` https://github.com/checkstyle/checkstyle/blob/a830b92f5ed1f9d2ed3b88440ba4d494105de89d/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java#L232-L235 will become: ```java if (TokenUtil.isOfType(parent, TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF, TokenTypes.ANNOTATION_DEF, TokenTypes.ENUM_DEF)) { ``` 2. An instance method under `DetailAST`/`DetailASTImpl`, `ast.isOfType(TokenTypes... types)` ```java if (parent.isOfType(TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF, TokenTypes.ANNOTATION_DEF, TokenTypes.ENUM_DEF)) { ```","closed","miscellaneous,","wltan","2020-04-08T09:50:56Z","2020-08-10T19:50:57Z"
"","8978","Feature request: Checks for local variable type inference","There are multiple style issues that are related to the use of local variable type inference, that is, the `var` keyword. Many of these issues are related to the fact that code using the feature risks being harder to read. This is because it is no longer immediately apparent which types local variables have.   It would be nice with a Checkstyle module that could check for a couple of the issues with local variable type inference.  Such a module could be called, for example, LocalVariableTypeInference.  ### Examples of code which could be checked for  The following is a list of hard-to-read expression which could be checked for by such a module.   Expression is method call:  ``` var b = a.someMethod(); var b = SomeClass.someMethod(); ```  It should be possible to white-list methods using patterns. This to allow well-known factory methods such as `LocalDate.of`. A default list of factories in the standard library would be useful.  Expression is a literal:  ``` var i = 1; var d = 1.0; var s = ""a""; ```  Expression is an operator:  ``` var v = a + o.someMethod(); ```  The name of some methods indicate strongly which type they return. There could be an option to allow such methods even if methods in general are disallowed:  ``` // If the method contains the name of the return type it could be allowed var customer = o.getCustomer(); ``` (I have no idea if such a thing is possible to implement in Checkstyle.)  Another option could be to *require* the use of `var` in some cases. For example:  ``` // It is very clear what the type is, the explicit type is mostly noise, var could be required SomeObject o = new SomeObject(); var o = new SomeObject();  // It is very clear what the type is, the explicit type is mostly noise, var could be required LocalDateTime d = LocalDateTime.of(2020, 11, 10); var d = LocalDateTime.of(2020, 11, 10); ```  ### Style guideline  This is a semi-official guideline document for the usage of this feature: https://openjdk.java.net/projects/amber/LVTIstyle.html  I myself think these guidelines are a bit too liberal. I'd prefer to restrict the usage to constructor calls and well-known factories only.","open","","jensli","2020-11-10T19:57:42Z","2022-05-28T14:04:20Z"
"","8236","JavadocMissingWhitespaceAfterAsteriskCheck property violateExecutionOnNonTightHtml missing","The new check `JavadocMissingWhitespaceAfterAsteriskCheck` defines a property `violateExecutionOnNonTightHtml ` in the documentation: https://checkstyle.sourceforge.io/config_javadoc.html#JavadocMissingWhitespaceAfterAsterisk  However, while adding this check to the SQ plugin, no property is defined on the check implementation, also #7775 does not define it, except in the documentation.","open","","muhlba91","2020-05-14T07:17:42Z","2020-05-18T01:18:25Z"
"","8186","new Check: NoWhitespaceBeforeCaseDefaultColon","The idea of this check originates from https://github.com/checkstyle/checkstyle/issues/8045 This check should report whitespaces before colon token of switch cases and default. ``` cat Test.java class Test { 	{ 		switch(1) { 			case 1 : // expected violation 				break;                         case 2:                                 break; 			default : // expected violation 				break; 		} 	} }  $ cat config.xml                            /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.31-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /var/tmp/Test.java:4: ':' is preceded with whitespace. [NoWhitespaceBeforeCaseDefaultColon] [ERROR] /var/tmp/Test.java:6: ':' is preceded with whitespace. [NoWhitespaceBeforeCaseDefaultColon] Audit done. Checkstyle ends with 2 errors. ```  Rationale:  The official [google java style guide](https://google.github.io/styleguide/javaguide.html#s4.6-whitespace) does not allow whitespaces before the colon of switch cases and default. Adding this check will improve checkstyle's support for google's java style guide. Also, we can see in comments of https://github.com/checkstyle/checkstyle/issues/8045 that users are well receptive to the check.","closed","google style,","wilcoln","2020-04-25T08:39:11Z","2021-07-02T03:31:54Z"
"","8991","Unexpected Token:Interface","The doc says(https://checkstyle.org/config_design.html#FinalClass_Description) Doesn't check for classes nested in interfaces.  $ cat config.xml               		         $ cat CheckInterface.java Interface CheckInterface { class MyClass { void m1(){ System.out.println(""inside m1""); } void m2(){ System.out.println(""inside m2""); } } }  $ java -jar ""-Duser.language=en -Duser.country=US"" checkstyle-8.37-all.jar -c config.xml CheckInterface.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing CheckInterface.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: NoViableAltException occurred while parsing file /home/ehtesham/CheckInterface.java. 	at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:149) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Caused by: /home/ehtesham/CheckInterface.java:1:1: unexpected token: Interface 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:191) 	at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114) 	... 9 more Checkstyle ends with 1 errors.  **The output is same when I run** $ java -jar ""-Duser.language=en -Duser.country=US"" checkstyle-8.37-all.jar -c config.xml CheckInterface$MyClass.java  **Checkstyle ended with error. It should provide  code style is OK or it should skip it as it doesn't check for classes nested in interfaces.**","closed","","ek08","2020-11-17T08:06:59Z","2020-11-17T09:27:05Z"
"","8113","Issue #7977: Resolve Pitest Issues - JavadocMethodCheck (5)","The details are as follows that is the same in #7977  **Pitest report**  Link: https://huganghui.github.io/7977-JavadocMethodCheck-5/before-pitest-reports/com.puppycrawl.tools.checkstyle.checks.javadoc/JavadocMethodCheck.java.html#grouporg.pitest.mutationtest.report.html.SourceFile@1353848a_1077  Surviving mutations: on line 1077: negated conditional → SURVIVED  **Hardcoded mutation**  mutation cs branch: https://github.com/HuGanghui/checkstyle/commit/f5642b33b1ecaa93af1f8e62403233d7b615149f comment: Looking at the pitest report, we can see that the surviving mutation is negated conditional → SURVIVED, so I change != -> == .  **Regression diff report**  https://huganghui.github.io//7977-JavadocMethodCheck-5/hardcoded-reports/diff/ there is no diff found.  **Code Logic Analysis**  Although there is no diff found in Regression diff report, I find that containing class ClassAlias and its relevant code is redundant, which also is mentioned in issue #7980 by @rnveach. So I do a diff report https://huganghui.github.io//7977-JavadocMethodCheck-5/remove-redundant-reports/diff/ on a branch(https://github.com/HuGanghui/checkstyle/commit/20ad567272d6ff3ac0d410fc09be4d049c7e2ab4) that remove class ClassAlias and its relevant code and result is no diff found. I also do Pitest after removing redundant code report show that it doesn't introduce new surviving mutations and solve all JavadocMethodCheck Pitest mutations including #7923, #7924, #7925, this issue, #7979,  #7980 and Based on this result, I think maybe we can remove redundant code～","closed","","HuGanghui","2020-04-17T08:00:27Z","2020-05-29T14:33:59Z"
"","8016","Improve option `allowMissingPropertyJavadoc` in `MissingJavadocMethod` for Builders","The check  `MissingJavadocMethod` provides a property `allowMissingPropertyJavadoc`, so that setters like  ``` public void setNumber(final int number) {     mNumber = number; } ```  do not require a documentation.   I'm very often using the Builder pattern for my classes (and IntelliJ provides a simple refactoring to create builders.) and they create slightly modified setters that allow method chaining.   ``` public T setNumber(final int number) {     mNumber = number;     return this; } ``` It would be nice if CheckStyle would allow a suppression of comments for these type of setters as well.   I'm not sure if it makes sense to add an additional property or if the existing check in https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java#L329 should be updated.","open","","uhafner","2020-04-03T08:46:47Z","2020-04-22T22:08:20Z"
"","8215","AvoidDoubleBraceInitialization Documentation Link Incorrect","The [main checks page](https://checkstyle.org/checks.html) links to AvoidDoubleBraceInitialization in the config_misc.html but it actually exists in the config_coding.html.   Bad link (existing): https://checkstyle.org/config_misc.html#AvoidDoubleBraceInitialization Good link (correct): https://checkstyle.org/config_coding.html#AvoidDoubleBraceInitialization  I would have opened this issue on the [checkstyle.github.io](https://github.com/checkstyle/checkstyle.github.io/) repo but it doesn't appear that Issues are enabled there. Hopefully it's fine to put this here.","closed","","mttjj","2020-04-30T20:14:09Z","2020-05-01T06:54:08Z"
"","8800","Java 14 Inner Records indentation level check faulty","Thanks for the great work on getting Java 14 features working! @nmancus1 👏    However, the indentation level check seems a bit broken when using inner records in classes: `/var/tmp $ javac --enable-preview -source 14 Example.java`  ``` Note: Example.java uses preview language features. Note: Recompile with -Xlint:preview for details. ```  `/var/tmp $ cat rules.xml`  ```xml                                                                                                               ```  `/var/tmp $ cat Example.java` ```java import java.util.List;  public class Example {     public record InnerRecord(         List errors     ) {         public boolean isSuccess() {             return errors.isEmpty();         }     }      public static class InnerClass {         public boolean isSuccess() {             return true;         }     } } ```  `/var/tmp $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.36-all.jar -c rules.xml Example.java`  ``` Starting audit... [ERROR] /var/tmp/Example.java:7:9: 'method def modifier' has incorrect indentation level 8, expected level should be 4. [Indentation] [ERROR] /var/tmp/Example.java:8:13: 'method def' child has incorrect indentation level 12, expected level should be 8. [Indentation] [ERROR] /var/tmp/Example.java:9:9: 'method def rcurly' has incorrect indentation level 8, expected level should be 4. [Indentation] Audit done. Checkstyle ends with 3 errors. ```  ---------------  **Describe what you expect in detail.** I expect the indentation level to be 8 for methods inside inner records, just as they are in the case of inner classes methods. Or do I have a misconfigured check?  --------------","closed","","robinjhector","2020-09-07T07:24:09Z","2020-09-08T05:58:32Z"
"","8761","Move metadata generation code to main from test folder","Temporary quality skip list:  - [ ] UT coverage - [ ] Pitests","closed","miscellaneous,","gaurabdg","2020-08-26T11:35:23Z","2020-09-03T14:18:53Z"
"","8118","Enforce -e for all maven commands","Talked about in https://github.com/checkstyle/checkstyle/pull/8102#issuecomment-614658046 and identified in https://github.com/checkstyle/checkstyle/pull/8099#issuecomment-613768780 ,  We need to enforce all maven commands use `-e` to ensure we get stack trace of issue as it happens to ensure we can debug the issue. It is all too common an issue only happens once and we can never reproduce it again, as was seen in this case.  Only scripts and YML files are expected to be enforced. I used the following expression when I did my own manual update: `(mvn [^-])|(mvn \-[^e])`","closed","CI,","rnveach","2020-04-17T15:02:12Z","2020-04-24T11:24:09Z"
"","8036","update test inputs to avoid long lines that violate 100 limit","taken from https://github.com/checkstyle/checkstyle/pull/7997  we need to remove all introduced suppressions. All Inputs need to be updated to wrap long lines is possible.","closed","easy,","romani","2020-04-04T23:53:59Z","2020-05-03T19:30:02Z"
"","8990","New Check to validate method parameter order in javadoc to match parameter order in method","taken from https://github.com/checkstyle/checkstyle/issues/2810  TestClass.java  ``` package test;  public class TestClass {     /**      * Description.      *       * @param p2      *            Parameter 2 desc.      * @param p1      *            Parameter 1 desc.      * @param       *            Parameter T desc.      * @param p3      *            Parameter 3 desc.      */     public  void test(String p1, String p2, T p3) {     } } ```  config.xml  ```                                  ```  To add less confusion between the javadoc order and the method when reading, I would like the at parameters to be validated in the javadoc so they both agree in terms of order. This will give new readers less headaches as they try to read and understand the method and what it's parameters mean.  With this new Check, I am expecting the javadocs for parameters 1 and T to produce errors that they are out of order in my example. If 2 and/or 3 produce errors that is fine, but I expect the main ones that go backwards in the list to definitely be there. The preferred order, imo, should be T, 1, 2, 3 like they are defined in the method definition.  ========  We need to come to agreement in names and behavior/design to make issue approved.","open","new module,","romani","2020-11-14T23:48:45Z","2021-06-03T03:53:40Z"
"","8137","new Check: RegExpComment","summary from #7388  Although spaces after slashes are optional in the comments, their absence makes the documentation difficult to read. It is the de facto standard to put at least one whitespace after the leading two slashes like so:  `// comment`  and it is style violation to omit the space like so:  `//comment`  This convention is implied in Section 3.7 ""Comments"" of the [Java Language Specification](https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.7):  >    3.7. Comments >  > There are two kinds of comments: >  >     /* text */ >  >     A traditional comment: all the text from the ASCII characters /* to the ASCII characters */ is ignored (as in C and C++). >  >     // text >  >     An end-of-line comment: all the text from the ASCII characters // to the end of the line is ignored (as in C++).  It appears to be *de rigueur* in Java itself, for example in http://hg.openjdk.java.net/jdk7u/jdk7u6/jdk/file/8c2c5d63a17e/src/share/classes/java/lang/String.java   ``` /var/tmp $ javac TestClass.java  public class TestClass {     //no whitespace after double slash here. } ```  **Expected violation:** TestClass.java:2:5 Missing a whitespace after the leading double slash.  Check will NOT run on javadocs   So imaginary beharior could be like: ``` $ cat config.xml                                                               $ cat Test.java  //////////////////////////////////////// // above line is ok public class Test {   /** ok */   public Test() {} //violation   /**violation */   public Test(int a) {;} // ok   public Test(char a) {;} /*violation*/   public Test(String a) {;} /* violation*/  }  $ java -jar /var/tmp/checkstyle-8.29-all.jar -c config.xml Test.java  Starting audit... [ERROR] /var/tmp/Test.java:2: Comment should start with space. [RegExpComment] [ERROR] /var/tmp/Test.java:4: Comment should start with space. [RegExpComment] Audit done. Checkstyle ends with 2 errors.  ```","open","new module,","romani","2020-04-19T15:47:52Z","2021-07-18T05:21:40Z"
"","8948","config: codeql-analysis.yml is generated by Github","suggestion from https://github.com/checkstyle/checkstyle/security  I just removed javascript language and removed some comments.  https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code  https://github.com/checkstyle/checkstyle/security/code-scanning - 0 alerts found.","closed","","romani","2020-10-31T22:47:28Z","2020-11-01T20:29:18Z"
"","8079","Suppress few links to make codeship green","such violations become stable - https://app.codeship.com/projects/124310/builds/9e4691e7-7cc7-4797-8609-7df2a52cae60?line=fc257935-fc3d-490c-9a0b-ce08e96fbbfb&step=parallel_.ci%2Frun-link-check-plugin.sh  ``` 2020-04-12 10:14:35  system ------------ grep of linkcheck.html--BEGIN 2020-04-12 10:14:35  system  https://www.bountysource.com/: java.net.SocketTimeoutException :   Read timed out 2020-04-12 10:14:35  system  https://api.bountysource.com/badge/team?team_id=3568&amp;style=bounties_posted: java.net.SocketTimeoutException : Read timed out 2020-04-12 10:14:35  system  https://img.shields.io/bountysource/team/checkstyle/activity.svg?label=salt.bountysource: java.net.SocketTimeoutException : Read timed out 2020-04-12 10:14:35  system  https://salt.bountysource.com/teams/checkstyle: java.net.SocketTimeoutException : Read timed out 2020-04-12 10:14:35  system  https://www.bountysource.com/teams/checkstyle/issues: java.net.SocketTimeoutException : Read timed out 2020-04-12 10:14:35  system  https://bitbucket.org/atlassian/bamboo-checkstyle-plugin: 302 Found 2020-04-12 10:14:35  system ------------ grep of linkcheck.html--END  ```  we need green CI, without false positives.","closed","","romani","2020-04-12T14:19:28Z","2020-04-12T17:55:41Z"
"","8227","Resolve Pitest Issues - AbstractJavadocCheck","Sub-issue of #7797/#6295  This issue is to discuss possible methods of resolving the 4 surviving mutations in `AbstractJavadocCheck`.  https://github.com/checkstyle/checkstyle/blob/9fa7233f42c1ed96e849b1d8d6cb9a7cab1cb52e/.ci/pitest.sh#L171-L174  Pitest report: https://wltan.github.io/checkstyle-reports/2020-05-09/pitest-abstractjavadoccheck/com.puppycrawl.tools.checkstyle.checks.javadoc/AbstractJavadocCheck.java.html  It is not as simple as the others where we can design additional UTs from regression to increase coverage, as the problems are with the code itself and not from a lack of testing.  As a supplementary note, there are only 8 `AbstractJavadocCheck`s that I am aware of. 1. [`MissingDeprecatedCheck`](https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java) 2. [`JavadocMissingWhitespaceAfterAsteriskCheck`](https://github.com/checkstyle/checkstyle/blob/1cc84e8b8f052249b10a11400a5571cfdaa30e21/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMissingWhitespaceAfterAsteriskCheck.java) 3. [`NonEmptyAtclauseDescriptionCheck`](https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java) 4. [`SingleLineJavadocCheck`](https://github.com/checkstyle/checkstyle/blob/8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java) 5. [`JavadocTagContinuationIndentationCheck`](https://github.com/checkstyle/checkstyle/blob/a781a6608e270210c9ed07cc3d7fa465eb3c319e/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheck.java) 6. [`JavadocBlockTagLocationCheck`](https://github.com/checkstyle/checkstyle/blob/ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocBlockTagLocationCheck.java) 7. [`JavadocParagraphCheck`](https://github.com/checkstyle/checkstyle/blob/ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java) 8. [`SummaryJavadocCheck`](https://github.com/checkstyle/checkstyle/blob/32ea7c4bc1f5c16838fa568f395ebcb26bbf05b1/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java)  ## 1 https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java#L189-L191  Mutation: `189 1. removed call to java/util/Arrays::sort → SURVIVED`  Though I haven't verified it rigorously yet, I believe that the root cause is most likely that each check already has all tokens in a sorted order to begin with, so `Arrays.sort` does nothing and can be removed.  The sort is done to speed up future queries on the array with binary search. A possible improvement might be to use a `HashSet` or similar data structure, removing the need for sorting at all.  ## 2, 3 https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java#L350-L354  Mutations:  1. `351 1. removed call to com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck::beginJavadocTree → SURVIVED` 2. `353 1. removed call to com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck::finishJavadocTree → SURVIVED`  None of the subclasses ever need to use `beginJavadocTree` or `finishJavadocTree`. Hence when they are removed, behavior does not change at all, so the mutations survive.  https://github.com/checkstyle/checkstyle/search?q=beginjavadoctree&unscoped_q=beginjavadoctree https://github.com/checkstyle/checkstyle/search?q=finishjavadoctree&unscoped_q=finishjavadoctree  This case does not have a very clear solution. Obviously we can just remove the methods entirely, but that is likely not good for future development. Another way would be to artificially modify some of the checks to make use of the two extra methods so that unit tests will fail if they are not called.  ## 4 https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java#L168-L178  Mutation: `174 1. removed call to java/util/Set::clear → SURVIVED`  Interestingly, there are no code references to this method at all, so I am not sure where the UT coverage is coming from in the first place.  https://github.com/checkstyle/checkstyle/search?q=setjavadoctokens  In any case, I believe that the line can be removed (after regression testing of course). Note that the similar method for `AbstractCheck` does not contain the `clear()` either.  https://github.com/checkstyle/checkstyle/blob/911afa5cdae2baa93c90d3ae2de7c6f2326cd491/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java#L84-L91","open","approved,","wltan","2020-05-09T07:01:53Z","2022-08-02T17:52:29Z"
"","8925","Anchor links for active and inactive tools on front page are broken","Steps to reproduce 1. Go to https://checkstyle.org/index.html 2. Navigate to Active Tools or Inactive / Old Tools section 3. Click on anchor link  Actual link is https://checkstyle.org/index.html#undefined  But it should not be like this ![image](https://user-images.githubusercontent.com/8901354/97159690-4a0a9580-178c-11eb-887d-2051856d5b67.png)","closed","miscellaneous,","strkkk","2020-10-26T10:04:49Z","2020-10-26T14:42:19Z"
"","8279","Sonar API Token has no access rights","stable problem in master https://app.wercker.com/checkstyle/checkstyle/runs/build/5ed253e4765d2a000768c16c?step=5ed25409ee64ed0008c45405 reproduced on local. I regeneraetd new token but problem is still the same ``` organization=checkstyle projectKey=org.checkstyle:checkstyle serverUrl=https://sonarcloud.io serverVersion=8.0.0.8394 dashboardUrl=https://sonarcloud.io/dashboard?id=org.checkstyle%3Acheckstyle ceTaskId=AXJlv7Evb4VcGeMaMYcz ceTaskUrl=https://sonarcloud.io/api/ce/task?id=AXJlv7Evb4VcGeMaMYcz Verification of sonar gate status Target project blog-sonar-build-breaker is already cloned, latest changes will be fetched Sonar API Token has no access rights ```","closed","miscellaneous,","romani","2020-05-30T13:26:07Z","2020-05-30T14:58:21Z"
"","8182","JavadocTagContinuationIndentation: add strict enforcement of indentation","Split from https://github.com/checkstyle/checkstyle/issues/2813#issue-125702063 ,  https://checkstyle.org/config_javadoc.html#JavadocTagContinuationIndentation  TestClass.java  ``` package test;  public class TestClass {     /**      * Desc.      *       * @param s      * Desc.      * Desc 2.      * Desc 3.      *                         Desc 4. Line 11. violation is expected      */     public void test(String s) {     } } ```  config.xml  ```                                         ```  output from: `java -jar checkstyle-6.14.1-all.jar -c config.xml TestClass.java`  ``` Starting audit... [ERROR] TestClass.java:9: Line continuation have incorrect indentation level,      expected level should be 4. [JavadocTagContinuationIndentation] [ERROR] TestClass.java:10: Line continuation have incorrect indentation level,       expected level should be 4. [JavadocTagContinuationIndentation] Audit done. Checkstyle ends with 2 errors. ```  Expected **extra** output:  ``` [ERROR] TestClass.java:8: Line continuation have incorrect indentation level,      expected level should be 4. [JavadocTagContinuationIndentation] [ERROR] TestClass.java:11: Line continuation have incorrect indentation level,      expected level should be 4. [JavadocTagContinuationIndentation] ```  Line 8 is covered in https://github.com/checkstyle/checkstyle/issues/2813#issue-125702063 , this issue is about line 11 only.  I would like Line 11 to be required to be at the same position as previous indented lines, but it seems `JavadocTagContinuationIndentation` ignores it once it is indented past its minimum, required position.  We should create a new property called `forceStrictCondition` ( same is in https://checkstyle.org/config_misc.html#Indentation_Properties ) with a default value of false to not conflict with google style. Property should enforce indentation of continuation lines regardless if they are above or below the requested indentation.","open","approved,","rnveach","2020-04-24T17:16:10Z","2021-03-15T01:53:17Z"
"","8179","EmptyLineSeparator: Inability to use xpath for violation on empty line","Split from #7956 https://github.com/checkstyle/checkstyle/blob/a8a90cf2423c27fb3fe227fc1906fdfc255f5d9b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java#L419 There is no AST node associated an empty line for which the violations are logged. This results the inability of such violations to be xpath suppressed. We may need to change the violation a bit to make it compliant with xpath.  ``` C:\Users\Shashwat\Documents>cat config.xml                                               C:\Users\Shashwat\Documents>cat Test.java class A {        void foo() { // line 5        } // line 9 } C:\Users\Shashwat\Documents>java -jar checkstyle-8.31-all.jar -c config.xml Test.java Starting audit... [ERROR] C:\Users\Shashwat\Documents\Test.java:5: 'METHOD_DEF' has more than 1 empty lines before. [EmptyLineSeparator] [ERROR] C:\Users\Shashwat\Documents\Test.java:7: There is more than 1 empty line one after another. [EmptyLineSeparator] [ERROR] C:\Users\Shashwat\Documents\Test.java:8: There is more than 1 empty line one after another. [EmptyLineSeparator] Audit done. Checkstyle ends with 3 errors. ```  In the above example it is clear that when we have to log violation for a similar case, outside the class members, we do it in a single go. ```Test.java:5: 'METHOD_DEF' has more than 1 empty lines before. [EmptyLineSeparator]``` This can be extended to solve this issue as well, where instead of logging for every empty line, we can log violation for the above example as follows: ```Test.java:9: There is more than 1 empty line above. [EmptyLineSeparator]``` However, the node to be logged is a bit uncertain. This needs to be dicussed.","closed","approved,","shashwatj07","2020-04-24T14:47:39Z","2021-04-01T14:05:10Z"
"","8642","Enhance French translation","spelling: Correct French translation of design.forExtension message","closed","","olivier-maury","2020-08-11T10:06:55Z","2020-08-28T02:34:21Z"
"","8336","Resolve Sonar violation 'This branch's code block is the same as the block for the branch on line'","Sonar violation https://sonarcloud.io/project/issues?id=org.checkstyle%3Acheckstyle&open=AXLiCslKkpVZ0x1TON5t&resolved=false&severities=MAJOR  ![image](https://user-images.githubusercontent.com/812984/85576306-27554e00-b5ed-11ea-827b-c114472a0c03.png)  Code looks very strange, lets investigate it.  code was recently added in https://github.com/checkstyle/checkstyle/blame/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java#L428","closed","miscellaneous,","romani","2020-06-24T14:35:51Z","2020-06-28T23:43:03Z"
"","8531","minor: rename and swap of steps in diff_report.yml","Some improving of diff_report.yml.","closed","","kate2513","2020-07-17T07:23:03Z","2020-07-17T10:00:25Z"
"","8732","Removal of examples from property description","Some checks have examples in the property descriptions which make HTML rendering a bit unreadable. We need to remove those. Detected in sonar plugin.","closed","miscellaneous,","gaurabdg","2020-08-20T19:46:47Z","2020-08-21T02:05:38Z"
"","8726","Mofication of module property default values to reflect actual working data","Some check properties have default values which wont work when copy-pasted in module configurations. For example: `null`: https://github.com/checkstyle/checkstyle/blob/6f58247b85ff4d74eb22dbd8c51d72b69fe51839/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java#L72 `charset of parent module`: https://github.com/checkstyle/checkstyle/blob/6f58247b85ff4d74eb22dbd8c51d72b69fe51839/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java#L64  We need to fix all such instances.","closed","miscellaneous,","gaurabdg","2020-08-20T07:40:56Z","2020-08-20T18:33:35Z"
"","8075","Issue #7889: add UT to validate URL is correct in config.xml and fix a typo","solve a typo which is mentioned in #7889 Broken link - AvoidDoubleBraceInitialization, and I add UT to validate URL is correct.  And I find that there are three special cases:  CommentsIndentation:  java file in **src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation** but in checks.xml belongs to misc https://github.com/checkstyle/checkstyle/blob/90ba1b8a82a20afcd45c89591dea49a7d0dc45bb/src/xdocs/checks.xml#L142  Indentation:  java file in **src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation** but in checks.xml belongs to misc https://github.com/checkstyle/checkstyle/blob/90ba1b8a82a20afcd45c89591dea49a7d0dc45bb/src/xdocs/checks.xml#L350  SuppressWarningsHolder:  java file in **src/main/java/com/puppycrawl/tools/checkstyle/checks** but in checks.xml belongs to annotation https://github.com/checkstyle/checkstyle/blob/90ba1b8a82a20afcd45c89591dea49a7d0dc45bb/src/xdocs/checks.xml#L951  I am not sure they are special cases or mistakes, I take them as special cases temporarily.","closed","","HuGanghui","2020-04-12T04:40:19Z","2020-05-21T11:34:49Z"
"","8794","PropertiesExpander init support property resolver","so we an using expression (ie:${basedir}) in checkstyle.properties","closed","","qxo","2020-09-06T08:39:39Z","2021-01-18T00:56:48Z"
"","8821","make checkstyle.xml inheritable","so we  can reuse the IT asset(checkstyle.xml) , and  just add module need modify.  ie: base google_checks.xml  ```                                                                                                      ```  ------  Related discussion: #2873","closed","abandoned,","qxo","2020-09-11T11:54:59Z","2020-10-24T15:25:43Z"
"","8597","minor: move module config javadoc to examples section","Site screenshot: ![Screenshot_20200808_014245](https://user-images.githubusercontent.com/23253816/89684711-a0e49980-d918-11ea-8c8c-93d5fee8f028.png)","closed","","gaurabdg","2020-08-03T15:23:06Z","2020-08-09T00:35:05Z"
"","8859","Add SpongePowered/Configurate Checkstyle run to CI to improve coverage of Java14 syntax","Since parsing all of OpenJDK14 has proven difficult due to the large number of non-compilable files, we need to add more projects that use Java14 syntax.  We have identified a new project to test on in issue #8856:  >@zml2008 , can you share how to run checkstyle on whole your project by gradle ? we will verify that all other code is parse-able before releasing a fix.  _Originally posted by @romani in https://github.com/checkstyle/checkstyle/issues/8856#issuecomment-700747488_  > thank you for your help! >  > I've worked around the issue since the test works either way, but the reproduction has been pushed to a branch. > Normally I use the gradle plugin ([configured here](https://github.com/SpongePowered/Configurate/blob/bug/checkstyle-record/buildSrc/src/main/kotlin/org/spongepowered/configurate/build/ConfigurateDevPlugin.kt#L84)) -- but from cli you can run: >  > ``` > $ git switch bug/checkstyle-record > $ java -jar checkstyle-8.36.2-all.jar -c ./etc/checkstyle/checkstyle.xml ./core/src > ``` >  > to reproduce the issue. It looks like there are a few other formatting issues printed, but those are from checkstyle working correctly >  > let me know if you need anything else :)  We should create a new CI item that tests on this repo.","closed","miscellaneous,","nick-mancuso","2020-09-29T19:54:44Z","2020-10-04T22:32:11Z"
"","8871","minor: remove redundant spotbugs excludes","Since https://github.com/spotbugs/spotbugs/issues/259 is closed, some excludes have become redundant. And it looks like some other false positives are gone too.","closed","","pbludov","2020-10-02T10:09:15Z","2020-10-02T14:36:05Z"
"","8248","CustomImportOrder should allow for a newline between java.* and javax.* imports","Since checkstyle 8.28, due #7119, CustomImportOrder ensures that there is no superflous separation between import groups. While this is sensible, there is an issue: Eclipse's ""Organize Imports"" feature does not allow regex when specifying groups. This means that java.* and javax.* imports are always different groups and hence separated by newlines in eclipse. Checkstyle versions < 8.28 did not complain about that.  Now my codebase, where I provide a eclipse importorder configuration file, can not be upgraded easily to checkstyle 8.28 or higher: I can not (easily) split java.* and javax.* into two groups in checkstyle, nor can I tell eclipse that 'java(x?)' are the same group.  One solution would be that CustomImportOrder has a setting which allows a newline between the java.* and javax.* import groups.","open","","Flowdalic","2020-05-23T21:35:50Z","2021-04-02T19:53:37Z"
"","8151","Update Xpath unit tests to have at least two test methods","see list of Tests at fix for https://github.com/checkstyle/checkstyle/issues/7987  It make sense to create separate PRs for each check.  #### Suppressed Checks - [x] XpathRegressionAnonInnerLengthTest - [x] XpathRegressionAvoidDoubleBraceInitializationTest - [x] XpathRegressionAvoidNoArgumentSuperConstructorCallTest - [x] XpathRegressionJavadocStyleTest - [x] XpathRegressionNestedForDepthTest - [x] XpathRegressionNestedIfDepthTest - [x] XpathRegressionUnnecessarySemicolonInEnumerationTest - [x] XpathRegressionNestedTryDepthTest - [x] XpathRegressionNoWhitespaceAfterTest - [x] XpathRegressionNoWhitespaceBeforeTest - [x] XpathRegressionOneTopLevelClassTest - [x] XpathRegressionOuterTypeNumberTest - [x] XpathRegressionSingleSpaceSeparatorTest - [x] XpathRegressionUnnecessarySemicolonInTryWithResourcesTest - [x] XpathRegressionUpperEllTest","closed","miscellaneous,","romani","2020-04-21T13:53:07Z","2022-04-29T05:12:04Z"
"","8775","Create some ability to execute metadata file generation before test phase","Right now metadata files are being generated through an UT. We should implement a better solution. Creating an ANT task is a possible solution.  alternative solution is maven exec plugin - http://www.vineetmanohar.com/2009/11/3-ways-to-run-java-main-from-maven/","open","approved,","gaurabdg","2020-08-28T21:41:09Z","2020-08-29T14:38:54Z"
"","8171","Issue #8122: Google style should enforce space around enhanced for colon","Resolves partially #8122  Fixes point 1 of https://github.com/checkstyle/checkstyle/issues/8122#issuecomment-617849138  Diff Regression projects: https://gist.githubusercontent.com/shashwatj07/61f92a65743199b114ade179f1d113b0/raw/5bf68867fe066cacc3b7743669217f2f6e7f1c27/projects-to-test-on.properties Diff Regression config: https://gist.githubusercontent.com/shashwatj07/4b4387bc73a204c6d59dda2f7dc9fd2a/raw/7520658954923b30aeb1b157a6e5cf4dc7ccfc19/config.xml","closed","","shashwatj07","2020-04-22T18:34:14Z","2020-09-05T14:31:49Z"
"","8260","Issue #8227: Resolve Pitest Issues - AbstractJavadocCheck (1)","Resolves one of the items in #8227   Regression report: https://wltan.github.io/checkstyle-reports/2020-05-21/abstractjavadoc-diff/ New pitest report: https://wltan.github.io/checkstyle-reports/2020-05-21/abstractjavadoc-pitest/  Some notes about performance: - It is not clear if there will be any performance difference with these changes. This is because `Collectors.toSet()` does not guarantee the type and hence implementation of the set. - Regardless of implementation, I highly doubt that there will be any noticeable difference, as the amount of tokens to be processed is very small. - Nevertheless, if we really want to be confident of our performance bound I can make an easy change to use a `HashSet` supplier instead of `Collectors.toSet()` at the cost of slightly more complex code.","closed","","wltan","2020-05-28T06:46:25Z","2020-10-06T14:58:08Z"
"","8338","Issue #8336: resolve sonar violation caused due to PR #8038","Resolves Issue #8336   conflict: https://sonarcloud.io/project/issues?fileUuids=AW9t2waOYD2QG1pPXIEf&id=org.checkstyle%3Acheckstyle&open=AXLiCslKkpVZ0x1TON5t&resolved=false","closed","","Abhishek-kumar09","2020-06-24T16:56:43Z","2020-06-28T23:42:25Z"
"","8271","Issue #8270: Pitest Issue: Indentation - ArrayInitHandler","Resolves Issue #8270  idea: `getNextFirstNonBlankOnLineAfter(int,int)` return first non-blank column on the same line after the position of the second argument provided. Its a private class and its scope is only `ArrayInitHandler.java` and thus it is used only at one place inside `getChildrenExpectedIndent()`  The pupose of use is to get first non-blank cloumn number after lcurly position. It should return -1 if there are only blank lines after lcurly.  Practically it is not possible to have any column after lcurly to be at 0th position(being on the same line for lcurly). Thus the contional mutation is survived on `>= 0` clause.  Modifying it to check condition for `!= -1` kills the mutation.","closed","","Abhishek-kumar09","2020-05-29T08:34:32Z","2020-06-14T14:58:34Z"
"","8152","Issue #8151: Update XpathRegressionAnonInnerLengthTest to have atleast 2 tests","Resolves issue #8151   Added a defaul config test in `XpathRegressionAnonInnerLengthTest`.","closed","","Gaurav-Punjabi","2020-04-21T17:16:13Z","2020-04-22T14:39:24Z"
"","8163","Issue #8151: Update XpathRegressionUnnecessarySemicolonInTryWithResou…","Resolves issue #8151","closed","","Gaurav-Punjabi","2020-04-21T23:30:17Z","2020-04-23T07:31:54Z"
"","8162","Issue #8151: Update XpathRegressionUnnecessarySemicolonAfterTypeMembr to have atleast 2 tests","Resolves issue #8151","closed","","Gaurav-Punjabi","2020-04-21T23:10:27Z","2020-04-26T13:30:34Z"
"","8160","Issue #8151: Update XpathRegressionSingleWhiteSpace to have atleast 2 tests","Resolves issue #8151","closed","","Gaurav-Punjabi","2020-04-21T22:50:22Z","2020-04-26T14:49:49Z"
"","8159","Issue #8151: Update XpathRegressionOuterTypeNumber to have atleast 2 tests","Resolves issue #8151","closed","","Gaurav-Punjabi","2020-04-21T22:42:28Z","2020-04-28T05:31:05Z"
"","8158","Issue #8151: Update XpathRegressionNoWhitespaceBefore to have atleast 2 tests","Resolves issue #8151","closed","","Gaurav-Punjabi","2020-04-21T20:52:35Z","2020-04-27T10:33:41Z"
"","8157","Issue #8151: Update XpathRegressionNoWhitespaceAfter to have atleast 2 tests","Resolves issue #8151","closed","","Gaurav-Punjabi","2020-04-21T20:42:16Z","2020-04-27T13:57:18Z"
"","8156","Issue #8151: Update XpathRegressionNestedTryDepthTest to have atleat 2 tests.","Resolves issue #8151","closed","","Gaurav-Punjabi","2020-04-21T20:09:21Z","2020-05-01T12:53:15Z"
"","8154","Issue #8151: Update XpathRegressionNestedIfDepthTest to have atleast 2 tests","Resolves issue #8151","closed","","Gaurav-Punjabi","2020-04-21T19:51:22Z","2020-04-28T18:17:25Z"
"","8153","Issue #8151: Update XpathRegressionNestedForDepthTest to have atleast 2 tests.","Resolves issue #8151","closed","","Gaurav-Punjabi","2020-04-21T19:40:59Z","2020-04-30T15:09:19Z"
"","8038","Issue #7734: Update AbstractChecks to log DetailAST - Indentation","Resolves Issue #7734  [Diff Report:](https://abhishek-kumar09.github.io/IndentaionReport/reports/diff/index.html)","closed","","Abhishek-kumar09","2020-04-05T16:52:00Z","2020-10-05T13:17:07Z"
"","8217","Issue #3135: Indentation support for non-list child of block elements(if/else/for/while/switch/case)","Resolves Issue #3135 Diff Regression projects: https://gist.githubusercontent.com/Abhishek-kumar09/717190a7e2e06f4747b9c622692d4b99/raw/93fe7739cbdc52d7d17273a12d2b92328812c504/projects-to-test-on.properties Diff Regression config: https://gist.githubusercontent.com/Abhishek-kumar09/0745ecf11934e0214b9187f9d4896e4a/raw/d52f23ee4f0db3d0b685d036c4321333a8e66ca5/my_check.xml","closed","","Abhishek-kumar09","2020-05-02T06:22:05Z","2020-10-15T13:30:28Z"
"","8919","Issue #8918: update Cirrus CI to not print download progress in logs","Resolves #8918","closed","","shashwatj07","2020-10-23T17:36:03Z","2021-06-09T10:08:24Z"
"","8878","Issue #8790: All Regexp Checks that has few instances should have id property","Resolves #8790","closed","hacktoberfest-accepted,","shashwatj07","2020-10-05T04:20:41Z","2021-06-09T10:13:58Z"
"","8419","Issue #8399: fix NPE for SuperClone and SuperFinalize checks","Resolves #8399  Reg report (no diff) https://strkkk.github.io/checkstyle/8399/index.html  Diff Regression projects: https://raw.githubusercontent.com/checkstyle/contribution/master/checkstyle-tester/projects-to-test-on.properties Diff Regression config: https://raw.githubusercontent.com/strkkk/strkkk.github.io/master/checkstyle/check.xml Diff Regression patch config: https://raw.githubusercontent.com/strkkk/strkkk.github.io/master/checkstyle/check.xml","closed","","strkkk","2020-07-08T08:54:01Z","2020-07-19T16:26:20Z"
"","8420","Issue #8394: extend InnerTypeLast to work with ctors and init blocks","Resolves #8394  Reg report (generated manually) - https://strkkk.github.io/checkstyle/8394/index.html Reg report (generated by github action) - https://checkstyle-diff-reports.s3.us-east-2.amazonaws.com/8394_InnerTypeLast_2020215146/reports/diff/index.html Reg report 2 (after message change) - https://checkstyle-diff-reports.s3.us-east-2.amazonaws.com/8394_InnerTypeLast_2020094050/reports/diff/index.html  Diff Regression config: https://raw.githubusercontent.com/strkkk/strkkk.github.io/master/checkstyle/check.xml Diff Regression projects: https://raw.githubusercontent.com/strkkk/strkkk.github.io/master/checkstyle/full_list.properties","closed","","strkkk","2020-07-08T15:11:33Z","2021-10-15T09:24:06Z"
"","8319","Fix NPE in RedundantModifierCheck","Resolves #8299  Reg report (no diff): https://strkkk.github.io/checkstyle/8299/index.html","closed","","strkkk","2020-06-15T13:11:15Z","2021-01-29T11:43:57Z"
"","8207","Issue #8198: Fixed beginning development instructions","Resolves #8198","closed","","shashwatj07","2020-04-28T19:02:06Z","2020-04-29T20:20:30Z"
"","8180","Issue #8181: Remove cli options -C and -W","Resolves #8181  Discussion at https://github.com/checkstyle/checkstyle/pull/8035#discussion_r414608281  @romani @rnveach Please review and merge this as the parent PR dependts on this and I cant push changes till then.","closed","","gaurabdg","2020-04-24T14:48:26Z","2020-04-25T16:00:51Z"
"","8161","Issue #8132: Add NoCodeInFileCheck","Resolves #8132   Diff Report: https://gaurabdg.github.io/checkstyle-tester-reports/regression/NoCodeInFile/diff/ Contribution PR: https://github.com/checkstyle/contribution/pull/468","closed","","gaurabdg","2020-04-21T22:53:01Z","2020-05-23T22:59:52Z"
"","8109","Issue #8104: Excluded redundancy from ant-phase-verify.xml","Resolves #8104","closed","incomplete,","shashwatj07","2020-04-16T11:52:07Z","2021-06-09T10:06:33Z"
"","8175","Issue #8048: Extract logic for token type checking to separate method","Resolves #8048","closed","","shashwatj07","2020-04-23T18:49:38Z","2020-08-11T03:46:40Z"
"","8022","Issue #8020: resolve Trailing whitespace violations in test resources","Resolves #8020: resolve Trailing whitespace violations in test resources","closed","","shashwatj07","2020-04-03T14:13:30Z","2020-04-05T22:43:22Z"
"","8100","Issue #8019: resolve FileTabCharacter violations in test resources","Resolves #8019  Out of the 105 violating files, 58 have been fixed and the rest suppressed. Some suppressions are inevitable as they are required for testing. The others have been suppressed because fixing them leads to build failures. However, these can be fixed with some tweaking and these fixes will follow in subsequent PRs by me, once this is merged.","closed","","shashwatj07","2020-04-14T07:02:36Z","2021-06-09T10:18:13Z"
"","8032","Issue #8011: Wrong tag usage in NeedBraces Check","Resolves #8011: Wrong tag usage in NeedBraces Check Generated site: https://shashwat70.github.io//site/config_blocks.html","closed","","shashwatj07","2020-04-04T15:20:42Z","2021-06-09T10:19:24Z"
"","8008","Issue #7980: Resolve Pitest Issues - JavadocMethodCheck (8)","Resolves #7980  Resolves #7923  Resolves #7924  Resolves #7925  Pitest reports and UT explanation is available at https://github.com/checkstyle/checkstyle/issues/7980#issuecomment-607199640 **Pitest report after UT addition**: https://gaurabdg.github.io/checkstyle-tester-reports/pitest/JavadocMethodCheck-fixed/com.puppycrawl.tools.checkstyle.checks.javadoc/JavadocMethodCheck.java.html  The addition of this UT also resolves the survived mutations of #7923 #7924 #7925  Diff Report: https://gaurabdg.github.io/checkstyle-tester-reports/regression/JavadocMethod/diff/","closed","","gaurabdg","2020-04-01T11:46:37Z","2020-05-19T15:49:40Z"
"","8782","Issue #7872: fixes Resolve Pitest Issues - ImportOrderCheck (1)","Resolves #7872  Regression didn't find a case. https://github.com/checkstyle/checkstyle/issues/7872#issuecomment-686426768","closed","","shashwatj07","2020-09-03T11:40:15Z","2020-09-05T14:28:55Z"
"","8055","Issue #7834: Issue template updated to new format","Resolves #7834   I've updated the issue template for this repository as the issue expects. I've added two types namely, a bug report and a feature request. Moreover, I've also enabled the provision for a blank issue. Please let me know if this fine.  Looking at this might be helpful: https://github.com/nodejs/node/tree/master/.github/ISSUE_TEMPLATE  Updated doc look like: https://shashwat70.github.io/site/report_issue.html","closed","","shashwatj07","2020-04-09T03:44:31Z","2020-08-11T03:46:03Z"
"","8070","Issue #7767: Moved WriteTag to list of javadoc checks in SuppressionXpathFilter doc","Resolves #7767","closed","","shashwatj07","2020-04-10T21:34:09Z","2021-06-09T10:18:47Z"
"","8143","Issue #7765: XpathRegression tests added for UnnecessaryParentheses","Resolves #7765","closed","","shashwatj07","2020-04-20T18:45:35Z","2021-06-09T10:15:41Z"
"","8069","Issue #7745: Integration tests added for MissingJavadocMethod","Resolves #7745  Diff report: https://shashwat70.github.io/diff3/index.html Diff is empty as the check was already logging DetailAST node.","closed","","shashwatj07","2020-04-10T20:40:14Z","2021-06-09T10:10:27Z"
"","8103","Issue #7736: Integration tests added for InterfaceMemberImpliedModifier","Resolves #7736","closed","","shashwatj07","2020-04-15T08:21:15Z","2020-08-11T03:47:31Z"
"","8112","Issue #7469: Use ArchUnit library to control source code","Resolves #7469","closed","","gaurabdg","2020-04-16T21:28:08Z","2020-06-02T12:10:00Z"
"","8202","Issue #7452: OBJBLOCK token support added to RightCurlyCheck","Resolves #7452","closed","","shashwatj07","2020-04-27T18:40:41Z","2021-02-07T22:29:47Z"
"","8028","Issue #7175: INTERFACE_DEF token support in RightCurlyCheck","Resolves #7175  Diff report:  - `alone_or_singleline` - https://gaurabdg.github.io/checkstyle-tester-reports/regression/rcurly/diff/ - `alone` -  https://gaurabdg.github.io/checkstyle-tester-reports/regression/rcurly-alone/diff/","closed","","gaurabdg","2020-04-03T22:21:55Z","2020-06-02T12:53:40Z"
"","8035","Issue #6216: sync content of cli tool in xdoc and cli tool help output","Resolves #6216   - Adds UT for manual sync with both way ignore lists( if we want to ignore an `option` present in xdoc from putting in `Main.java` and vice-versa).  - I added the UT in a new class because `XdocsPagesTest.java` already had a `ClassFanOut` of 25, and adding `picocli.Commandline` made it 26.  - Another UT has been added to check the validity and consistency of the parameters/options present in the `` description.","closed","","gaurabdg","2020-04-04T21:42:35Z","2020-05-20T22:21:22Z"
"","8192","Issue #4930: LocalizedMessage should use ModuleName in compareTo method","Resolves #4930","closed","awaiting changes,","shashwatj07","2020-04-26T12:30:47Z","2021-03-15T01:57:16Z"
"","8042","Issue #4921: OverloadMethodsDeclarationOrderCheck: warning messages fixed","Resolves #4921","closed","","shashwatj07","2020-04-06T07:10:05Z","2020-04-08T09:41:36Z"
"","8203","Issue #4358: DesignForExtension: Special comment","Resolves #4358  Diff report: https://gaurabdg.github.io/checkstyle-tester-reports/regression/DesignForExtension/diff/ Note: For the patch config, I didn't set `requiredJavadocPhrase` to `.*` since there would have been a lot of errors because every repo has different method javadocs. An example has been shown in the new UT.","closed","","gaurabdg","2020-04-27T20:29:43Z","2020-12-03T13:29:38Z"
"","8062","Issue #4356: JavadocStyle - Check one line empty before tags in javadoc","Resolves #4356   Diff report - https://gaurabdg.github.io/checkstyle-tester-reports/regression/JavadocStyle-lineBeforeTag/diff/","closed","","gaurabdg","2020-04-09T21:33:07Z","2020-05-20T22:20:44Z"
"","8131","Issue #4219: UnusedImports doesn't recognize imports shadowed by inne…","Resolves #4219   Diff Report: https://gaurabdg.github.io/checkstyle-tester-reports/regression/UnusedImports/diff/  The additional condition covers the cases mentioned in the issue description(the inner classes/interfaces). Please let me know if I am missing some cases.","closed","incomplete,","gaurabdg","2020-04-19T11:29:28Z","2020-12-06T16:44:12Z"
"","8058","Issue #3812: Fixed google_checks.xml to disallow abbreviations in identifier names","Resolves #3812  Diff report: https://shashwatj07.github.io/diff4/index.html","closed","","shashwatj07","2020-04-09T14:01:38Z","2020-08-11T10:47:46Z"
"","8071","Issue #2408: Updated warning messages for JavadocMethod","Resolves #2408","closed","","shashwatj07","2020-04-11T10:08:57Z","2020-08-11T10:47:27Z"
"","8187","Issue #8186: add NoWhitespaceBeforeCaseDefaultColonCheck","Resolve #8186   - Diff report : https://wilcoln.github.io/checkstyle-reports/8186/diff/index.html - Contrib repo PR : https://github.com/checkstyle/contribution/pull/471","closed","awaiting changes,","wilcoln","2020-04-25T11:01:46Z","2021-03-27T14:08:15Z"
"","8049","Issue #8126: Extract reusable code from RequireThisCheck","Resolve #8126","closed","","wilcoln","2020-04-08T14:27:49Z","2021-03-15T01:57:46Z"
"","8125","Issue #8124: Add LABELED_STAT token support to NoWhitespaceBefore","Resolve #8124  Diff report : https://wilcoln.github.io/checkstyle-reports/8124/diff/index.html NB: https://github.com/checkstyle/checkstyle/pull/8123 should be merged before this PR.","closed","","wilcoln","2020-04-18T17:24:52Z","2020-04-22T13:48:09Z"
"","8065","Issue #8045: Add COLON token support to NoWhitespaceBefore","Resolve #8045 Diff report : https://wilcoln.github.io/checkstyle-reports/8045/diff/index.html","closed","","wilcoln","2020-04-10T15:00:13Z","2020-04-21T12:58:11Z"
"","8030","Issue #7957: Add annotation type definition for OneTopLevelClass","Resolve #7957: Add annotation type definition  Regression: https://wltan.github.io/checkstyle-reports/2020-04-04/onetoplevel-annotation/","closed","","wltan","2020-04-04T08:49:40Z","2020-04-24T14:12:19Z"
"","8013","Issue #7895: add RedundantThisCheck","Resolve #7895   - Diff report : [https://wilcoln.github.io/checkstyle-reports/redundant-this/diff/index.html](https://wilcoln.github.io/checkstyle-reports/redundant-this/diff/index.html) - Contrib repo PR : https://github.com/checkstyle/contribution/pull/465  - `RequireThisCheck` diff report: https://wilcoln.github.io/checkstyle-reports/require-this/diff/index.html  NB: This PR can't be merged before https://github.com/checkstyle/checkstyle/pull/8049","closed","","wilcoln","2020-04-02T21:31:17Z","2021-03-15T01:59:33Z"
"","8056","Issue #7741: Update AbstractChecks to log DetailAST - JavadocType","Resolve #7741: Update AbstractChecks to log DetailAST - JavadocType  Regression: http://wltan.github.io/checkstyle-reports/2020-04-09/javadoctype-detailast/index.html","closed","","wltan","2020-04-09T12:05:13Z","2020-04-18T14:53:50Z"
"","8076","Issue #2622: Update documentation for windows users","Resolve #2622: Update documentation for windows users  Notes: - The example for linux was already patched so I couldn't replicate it. I used a different case, adapted from #5685. - To accommodate both linux and windows report examples, I moved around some of the text a bit so it looks better (in my opinion). - I also added the variation for Windows to the issue template, in #7926 the user had problems running the issue template commands due to Windows command line. - I'm open to further improvements/suggestions for wording and formatting, so far this is just my take on what needs to be done.  New site looks like this: ![image](https://user-images.githubusercontent.com/53135010/79066383-184b4900-7cea-11ea-9f02-9e01aec4d43e.png)","closed","","wltan","2020-04-12T10:26:18Z","2020-04-26T12:26:53Z"
"","8756","doc: rectify RequireEmptyLineBeforeBlockTagGroupCheck javadoc","RequireEmptyLineBeforeBlockTagGroupCheck property javadoc didnt follow the template required for metadata generation.","closed","","gaurabdg","2020-08-23T20:57:16Z","2020-08-23T21:34:36Z"
"","8757","minor: update xwiki to latest commit","required for https://github.com/checkstyle/checkstyle/pull/8743 as we will do patch for xwiki as next step","closed","","romani","2020-08-23T22:59:46Z","2020-08-23T23:34:21Z"
"","8947","minor: remove invalid bitbucket plugin from list of active tools","Remove bitbucket plugin from list of active tools.  Original link https://marketplace.atlassian.com/apps/1214095/checkstyles-for-bitbucket-server leads to 404 page, also there is no plugin in list of bitbucket apps. ![изображение](https://user-images.githubusercontent.com/8901354/97785713-cf8cac00-1bb7-11eb-888d-2b3d3db9c6dd.png)","closed","","strkkk","2020-10-31T17:31:59Z","2021-01-29T11:42:29Z"
"","8021","minor: update comments over suppression to clearly define until issue","related to #8019 and #8020","closed","","romani","2020-04-03T13:04:06Z","2020-04-03T13:27:49Z"
"","8225","Add check to verify all files start with SuppressionXpathRegression in suppressionxpathfilter","RegexpOnFilename should be used to ensure all files follow the naming convention in https://github.com/checkstyle/checkstyle/tree/master/src/it/resources/org/checkstyle/suppressionxpathfilter","open","","shashwatj07","2020-05-04T18:12:47Z","2020-05-04T18:12:47Z"
"","8418","Specify Xpath and regex suppressions through CLI option while executing check","Referenced from:  https://github.com/checkstyle/checkstyle/issues/8340#issuecomment-654912227  **Is your feature request related to a problem? Please describe.** The CLI does not have options to specify usage of suppressions file while running the check. This is currently configured in the config file but not exposed to be altered through the command line. The Maven plugin allows this file value to be overridden.   http://maven.apache.org/plugins/maven-checkstyle-plugin/check-mojo.html#suppressionsLocation  **Describe the solution you'd like** The CLI must provide an option to specify suppressions file as a set that can include both Xpath suppressions and regex ones. More than one suppression file can be specified; only one of each type. (This is to match the current configuration in the rules file. Will it be possible to allow more than one  of each type?)  The CLI must be smart enough to recognise the type of suppression file provided.  ``` /var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c config.xml \     -S suppressions.xml:suppressions-xpath.xml src   # Checkstyle ends with # errors ```","open","discussion ongoing,","Fernal73","2020-07-08T03:55:16Z","2020-07-18T00:13:58Z"
"","8742","Introduction of modules metadata files generator","Proposal and Design: [Metadata-Files-for-all-Modules_Checkstyle-GSoC'20-Proposal-GaurabDasgupta.pdf](https://github.com/checkstyle/checkstyle/files/5470012/Metadata-Files-for-all-Modules_Checkstyle-GSoC.20-Proposal-GaurabDasgupta.pdf) Group Chat:  [messages.html.txt](https://github.com/checkstyle/checkstyle/files/5470014/messages.html.txt) [messages2.html.txt](https://github.com/checkstyle/checkstyle/files/5470015/messages2.html.txt)   The whole migration will be done step by step. 1. At first it will be hosted in `test`, to avoid coverage and pitest. All other violations such as checkstyle, pmd will be resolved and UTs modified.  Reflection library was introduced because it has functionality to load all resources that match specific pattern in classpath.","closed","miscellaneous,","gaurabdg","2020-08-21T10:35:23Z","2020-11-01T00:22:29Z"
"","8396","Indent issue with multiline method call","properly reported by @Vyom-Yadav . I have read check documentation: https://checkstyle.sourceforge.io/config_misc.html#Indentation I have downloaded the latest checkstyle from: https://checkstyle.org/cmdline.html#Download_and_Run I have executed the cli and showed it below, as cli describes the problem better than 1,000 words  ```bash /var/tmp $ javac Test.java  /var/tmp $ cat config.xml                         /var/tmp $ cat Test.java public class Test {     Test[] arr = {this};      Test getCurr() {         return this;     }      Test[] getCurrArr() {         return arr;     }      void method() {         Test obj = new Test();          obj             .getCurrArr()[0]             .getCurr()             .getCurr(); // violation, but expected no violation          obj             .getCurr()             .getCurr()             .getCurr();     } }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-9.3-all.jar -c config.xml Test.java Starting audit... [ERROR] /var/tmp/Test.java:18:13: 'method call' child has incorrect indentation level 12,       expected level should be 16. [Indentation] Audit done. Checkstyle ends with 1 errors. ``` ---  **Describe what you expect in detail.** ``` /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-9.3-all.jar -c config.xml Test.java Starting audit... Audit done. ``` ---  Indentation is absolutely correct, no error was expected.","open","indentation,","trbehera","2020-07-04T19:22:07Z","2022-02-25T03:54:17Z"
"","8877","minor: fix releasenotes 8.36 to clearly mention new check","problem was found at https://github.com/checkstyle/sonar-checkstyle/pull/338/files#r499291408","closed","","romani","2020-10-04T22:19:36Z","2021-01-18T00:41:17Z"
"","8206","Resolve PMD warning deprecated attribute 'ClassOrInterfaceDeclaration/@Image'","PMD issues a warnings for each suppression: ``` [WARNING] Use of deprecated attribute 'ClassOrInterfaceDeclaration/@Image' in a findChildNodesWithXPath navigation, please use @SimpleName instead java.lang.RuntimeException: Use of deprecated attribute 'ClassOrInterfaceDeclaration/@Image' in a findChildNodesWithXPath navigation, please use @SimpleName instead ```  PMD configuration files should be updated to illuminate these warnings.","closed","CI,","pbludov","2020-04-28T18:27:44Z","2020-05-03T02:37:37Z"
"","8898","Improved Docs","PLEASE READ before removing!!  Rules: 1) The issue you are trying to fix/resolve has to have the ""approved"" label. 2) Put in the description of Pull Request the reference to an issue if it exists.    Example: ""Issue: #XXXXXX"" 3) Commit message should adhere to the following rules:    a) MUST match one of the following patterns:       ^Issue #\\d+: .*$       ^Pull #\\d+: .*$       ^(minor|config|infra|doc|spelling|dependency): .*$    b) MUST contain only one line of text    c) MUST NOT end with a period, space, or tab    d) MUST be less than or equal to 200 characters  To avoid multiple iterations of fixes and CIs failures, please read https://checkstyle.org/contributing.html  ATTENTION: We are not merging Pull Requests that are not passing our CIs, but we will help to resolve issues.  Thanks for reading, remove whole this message and type what you need.","closed","","Varun11940","2020-10-13T16:35:54Z","2020-10-31T17:18:25Z"
"","8204","Update OrderedPropertiesCheck.java","PLEASE READ before removing!!  Rules: 1) The issue you are trying to fix/resolve has to have the ""approved"" label. 2) Put in the description of Pull Request the reference to an issue if it exists.    Example: ""Issue: #XXXXXX"" 3) Commit message should adhere to the following rules:    a) MUST match one of the following patterns:       ^Issue #\\d+: .*$       ^Pull #\\d+: .*$       ^(minor|config|infra|doc|spelling|dependency): .*$    b) MUST contain only one line of text    c) MUST NOT end with a period, space, or tab    d) MUST be less than or equal to 200 characters  To avoid multiple iterations of fixes and CIs failures, please read https://checkstyle.org/contributing.html  ATTENTION: We are not merging Pull Requests that are not passing our CIs, but we will help to resolve issues.  Thanks for reading, remove whole this message and type what you need.","closed","awaiting changes,","minshi123","2020-04-28T08:27:46Z","2020-06-29T00:19:40Z"
"","8596","minor: fix PatternVariableNameCheck code example indentation","Per discussion at https://github.com/checkstyle/checkstyle/pull/8586#discussion_r464095811, indentation needs to be fixed in code examples for PatternVariableNameCheck.   Site link: https://nmancus1.github.io/site_PatternVariableNameCheck","closed","","nick-mancuso","2020-08-03T13:16:04Z","2020-08-08T23:52:40Z"
"","8567","minor: fix indentation in InputJava14Records.java","Per discussion at https://github.com/checkstyle/checkstyle/pull/8422#issuecomment-664442034, we need to fix the indentation in this input file.","closed","","nick-mancuso","2020-07-27T18:15:41Z","2020-07-28T05:37:26Z"
"","8267","Implement full records support","Per discussion at https://github.com/checkstyle/checkstyle/issues/8023#issuecomment-634424931 and https://github.com/checkstyle/checkstyle/issues/8023#issuecomment-634628277. While a superficial implementation of Java 14 records will close Issue #8023, we need to make an issue for full records support, extending our support of records to build the full AST under the RECORD_DEF token.    ### Topics of discussion:  1. Which checks should be extended to support records 2. How to handle constructors.  While a new compact constructor for records must be defined, records must also support canonical constructors with some restrictions (see [JLS](https://docs.oracle.com/javase/specs/jls/se14/preview/specs/records-jls.html#jls-8.10.4)).  Should this compact constructor be added to `field` grammar?   3. New tokens to introduce.  Per https://github.com/checkstyle/checkstyle/issues/8023#issuecomment-634628277 we will be introducing `RECORD_COMPONENT_DEF` and `RECORD_CTOR_DEF`, is this all? 4. ...   http://cr.openjdk.java.net/~gbierman/jep359/jep359-20191031/specs/records-jls.html#jls-8.10.5  Group Chats: [messages1.pdf](https://github.com/checkstyle/checkstyle/files/5470032/messages1.pdf) [messages2.pdf](https://github.com/checkstyle/checkstyle/files/5470033/messages2.pdf)","closed","new feature,","nick-mancuso","2020-05-28T14:13:40Z","2020-11-01T00:42:04Z"
"","8210","Issue #8151: Update XpathRegressionAvoidNoArgumentSuperConstructorCallCheckTest to have at least 2 tests","Partially resolves issue #8151","closed","","Gaurav-Punjabi","2020-04-29T08:41:27Z","2020-05-01T12:51:58Z"
"","8209","Issue #8151: Update XpathRegressionAvoidDoubleBraceInitializationTest to have atleast 2 tests","Partially resolves issue #8151","closed","","Gaurav-Punjabi","2020-04-29T08:31:39Z","2020-04-29T14:06:21Z"
"","8314","Issue #8311: Change name of checkstyle types to be close to real java types - stringCollection","Partially resolves #8311","closed","","gaurabdg","2020-06-11T19:18:04Z","2020-06-27T13:56:00Z"
"","8305","Issue #8306: Javadoc Modification for Metadata Generation Support - 1","Partially resolves #8306   Added relevant metadata required for metadata generation project for 10 checks. - Datatypes ![Screenshot_20200605_235021](https://user-images.githubusercontent.com/23253816/83910058-8874c900-a787-11ea-9627-0fbb330b5d58.png) - Parent Module and Violation Messages ![Screenshot_20200605_235037](https://user-images.githubusercontent.com/23253816/83910065-8b6fb980-a787-11ea-9267-336ee306397c.png)","closed","","gaurabdg","2020-06-04T16:47:38Z","2020-07-01T13:51:34Z"
"","8165","Issue #8122: Added SINGLE_LINE_COMMENT to WhitespaceAround and Google Config","Partially resolves #8122","closed","","shashwatj07","2020-04-22T08:01:50Z","2021-02-07T22:31:07Z"
"","8891","OSX CI fails with unit.parallel.mode=concurrent","OSX fails with ``` ERROR] Errors:   [ERROR]   java.util.concurrent.RejectedExecutionException: Thread limit exceeded replacing blocked worker ``` Example build: https://travis-ci.org/github/checkstyle/checkstyle/jobs/734693767#L437  _Originally posted by @pbludov in https://github.com/checkstyle/checkstyle/issues/6916#issuecomment-706665672_","open","approved,","pbludov","2020-10-11T07:51:02Z","2020-10-12T19:15:31Z"
"","8240","Java Grammar: module-info.java support","Original issue https://github.com/checkstyle/checkstyle/issues/3059  We should extend our grammar to support module-info.java  - there are may be comments and Javadoc. We should validate them. - there may be annotations. We have checks for annotations. - we may add checks specifically for modules. For example, `ModuleName` check.","open","antlr,","pbludov","2020-05-16T07:28:58Z","2022-03-29T03:14:22Z"
"","9001","To top button - different behavior and text on different pages","Open https://checkstyle.org/index.html - no button on initial screen, button text is ""To Top"", it appears only after 2-3 scrolls down ![image](https://user-images.githubusercontent.com/8901354/99776853-88dd0280-2b22-11eb-8de4-f63aa1744c1b.png)  Open some other page from Project Documentation section, e.g. https://checkstyle.org/ci-management.html - button is shown on initial screen without any scrolling, text is ""toTop"" ![image](https://user-images.githubusercontent.com/8901354/99776926-a0b48680-2b22-11eb-8b53-e75bcbb3c1d0.png)","closed","miscellaneous,","strkkk","2020-11-20T08:22:48Z","2021-01-16T14:51:10Z"
"","8212","Issue #8151: Update XpathRegressionUnnecessarySemicolonInEnumerationTest to have atleasts 2 tests","One more fix for  #8151","closed","","Gaurav-Punjabi","2020-04-29T19:17:36Z","2020-05-01T11:06:50Z"
"","8495","Add trigger to diff generation pipeline for comment editing","Now pipeline for diff report generation can be triggered by comment, but if there is a typo or some other mistake, user only can add comment again to trigger execution.  Pipeline should be able to be triggered by editing of the comment to correct format.","closed","miscellaneous,","strkkk","2020-07-16T12:46:03Z","2020-07-16T14:31:55Z"
"","8843","infra: activate josm again","not for merge ...  testing what is wrong with this validation item","closed","","romani","2020-09-21T13:49:55Z","2020-11-07T15:59:06Z"
"","8557","missing the release jar in checkstyle-8.35","Missing the release jar, `checkstyle-8.35-all.jar`","closed","approved,","chenrui333","2020-07-26T19:16:43Z","2020-07-26T23:19:03Z"
"","8563","minor: update PATTERN_VARIABLE_DEF with since tag","minor: update PATTERN_VARIABLE_DEF with `since` tag  Per discussion with @romani, we will be adding the `since` tag to all token types documentation in TokenTypes.java.","closed","","nick-mancuso","2020-07-27T13:17:10Z","2020-07-27T18:17:23Z"
"","8621","minor: remove exclude for records input(#8023)","minor: remove exclude for records input(#8023)  After merging support for records, we forgot to remove this exclude.","closed","","nick-mancuso","2020-08-07T14:31:17Z","2020-08-07T19:39:48Z"
"","8649","minor: remove already covered check PatternVariableName(#8407)","minor: remove already covered check PatternVariableName(#8407)  Identified at https://github.com/checkstyle/checkstyle/pull/8586#discussion_r467624665  This check already has pitest coverage by https://github.com/checkstyle/checkstyle/blob/ebee876080d594ed64dcaba6f56441d05d08643e/pom.xml#L2462 , so we can remove it from here.","closed","","nick-mancuso","2020-08-11T13:53:59Z","2020-08-12T06:57:10Z"
"","8605","minor: master build failure due to leaked pitest coverage(#8604)","minor: master build failure due to leaked pitest coverage(#8604)","closed","","nick-mancuso","2020-08-05T10:44:03Z","2020-08-05T14:30:12Z"
"","8427","minor: Input for Java 14 switch expression(#6615)","minor: Input for Java 14 switch expression(#6615)  Input consists of code from #8185, in addition to lots of code from openjdk14's `langtools/` directory.","closed","","nick-mancuso","2020-07-09T12:05:53Z","2020-07-17T18:33:20Z"
"","8278","minor: fix nonsense message in travis output","minor: fix nonsense message in travis output","closed","","nick-mancuso","2020-05-30T13:10:59Z","2020-05-30T14:51:50Z"
"","8320","minor: add text blocks input (#7103)","minor: add text blocks input  In reference to #7103, this PR is for the input file to test the implementation of Java 14 text blocks. Credit for most of the inputs goes to @strkkk, I also found a few more examples from https://www.baeldung.com/java-text-blocks and #7103.","closed","","nick-mancuso","2020-06-15T15:18:02Z","2020-06-23T23:53:42Z"
"","8321","minor: add ""until"" comment for records input (#8023)","minor: add ""until"" comment for records input   We need to add a link to issue #8023 to explain why this can't be parsed yet.","closed","","nick-mancuso","2020-06-15T16:03:56Z","2020-06-17T12:24:39Z"
"","8114","minor: Fix typo in JavadocMethodCheck","Minor spelling fix `expectionInfo` -> `exceptionInfo`  From https://github.com/checkstyle/checkstyle/pull/7955#discussion_r409555197","closed","","wltan","2020-04-17T09:21:07Z","2020-04-22T15:19:53Z"
"","8139","minor: Incorrect javadoc for JavadocStyleCheck's message property keys","Mentioned at #8062 https://github.com/checkstyle/checkstyle/pull/8062#discussion_r410964302","closed","","gaurabdg","2020-04-19T19:56:26Z","2020-05-20T22:20:22Z"
"","8448","Enhance diff generation pipeline to create report for different configs for branches","Maybe thoughts for the future, to start a discussion:  What about handling PRs where only patch regression (no comparison to master)? This is for things like new checks. What about handling PRs where base config is different from patch config? This is for things like where we split properties, change property types, add a new property, etc...  Originally posted by @rnveach in #8445  Pipeline is now only creating diff report for base branch and original branch based on same config, but it should be able to use different configs for patch and for base branch https://github.com/checkstyle/contribution/tree/master/checkstyle-tester#difference-report-with-different-base-and-patch-config","closed","miscellaneous,","strkkk","2020-07-14T14:22:54Z","2020-07-17T20:16:24Z"
"","8447","Enhance diff generation pipeline to create report for new check","Maybe thoughts for the future, to start a discussion:  What about handling PRs where only patch regression (no comparison to master)? This is for things like new checks. What about handling PRs where base config is different from patch config? This is for things like where we split properties, change property types, add a new property, etc...  _Originally posted by @rnveach in https://github.com/checkstyle/checkstyle/pull/8445_  Pipeline is now only creating diff report for base branch and original branch based on same config, but it should be able to create report only for pathc branch (for example, for new checks)  https://github.com/checkstyle/contribution/tree/master/checkstyle-tester#basic-single-report","closed","miscellaneous,","strkkk","2020-07-14T14:21:35Z","2020-07-17T06:40:39Z"
"","8249","Sonar violations: Refactor the body of this try/catch to have only one invocation throwing an exception","master bulid failure - https://sonarcloud.io/organizations/checkstyle/rules?open=java%3AS5778&rule_key=java%3AS5778  https://rules.sonarsource.com/java/RSPEC-5778  When verifying that code raises a runtime exception, a good practice is to avoid having multiple method calls inside the tested code, to be explicit about which method call is expected to raise the exception. It increases the clarity of the test, and avoid incorrect testing when another method is actually raising the exception.  src/.../puppycrawl/tools/checkstyle/DefaultLoggerTest.java src/.../puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java src/.../puppycrawl/tools/checkstyle/JavadocPropertiesGeneratorTest.java src/.../puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java src/.../puppycrawl/tools/checkstyle/PropertyCacheFileTest.java src/.../puppycrawl/tools/checkstyle/XMLLoggerTest.java src/.../tools/checkstyle/ant/CheckstyleAntTaskTest.java src/.../tools/checkstyle/api/AbstractFileSetCheckTest.java src/.../tools/checkstyle/api/FileTextTest.java src/.../tools/checkstyle/checks/TrailingCommentCheckTest.java src/.../tools/checkstyle/checks/header/RegexpHeaderCheckTest.java src/.../checkstyle/checks/javadoc/AbstractJavadocCheckTest.java src/.../tools/checkstyle/filters/SuppressWithPlainTextCommentFilterTest.java src/.../tools/checkstyle/gui/ParseTreeTablePresentationTest.java src/.../checkstyle/internal/powermock/MainFrameModelPowerTest.java src/.../tools/checkstyle/utils/AnnotationUtilTest.java src/.../tools/checkstyle/utils/CheckUtilTest.java src/.../tools/checkstyle/xpath/RootNodeTest.java","closed","miscellaneous,","romani","2020-05-23T22:52:05Z","2020-05-28T07:35:52Z"
"","8604","master build failure due to leaked pitest coverage","master build failure due to leaked pitest coverage  https://app.circleci.com/pipelines/github/checkstyle/checkstyle/2521/workflows/73ca5697-019b-4bba-b27b-bb3407eeb116/jobs/57749  https://57749-12499251-gh.circle-artifacts.com/0/target/pit-reports/202008040448/com.puppycrawl.tools.checkstyle/JavaParser.java.html  `mutationCoverage (default-cli) on project checkstyle: Mutation score of 99 is below threshold of 100 ->`  ![image](https://user-images.githubusercontent.com/812984/89319714-5b348200-d635-11ea-89ac-ddf4f60d8fcb.png)  ``` 93 |   | 1. removed call to com/puppycrawl/tools/checkstyle/grammar/GeneratedTextBlockLexer::setTokenObjectClass → SURVIVED 102 |   | 1. removed call to antlr/TokenStreamSelector::addInputStream → SURVIVED 103 |   | 1. removed call to antlr/TokenStreamSelector::addInputStream → SURVIVED ```  TODO:  - provide urgent fix to make CI pass by allowing 99 - cover code to satisfy 100%","closed","miscellaneous,","romani","2020-08-04T16:29:51Z","2020-08-09T05:39:45Z"
"","8805","Load Semaphore CI with more work","Load Semaphore CI with more work (mostly from Travis)   original setup was done at https://github.com/checkstyle/checkstyle/issues/8051","closed","CI,","romani","2020-09-07T16:32:00Z","2020-10-02T02:44:49Z"
"","8222","doc: update link to moved javadoc-tool page","Linkcheck fails with ```xml   https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html: 301 Moved Permanently ``` Updated location is: ``` GET /technetwork/java/javase/documentation/index-137868.html HTTP/1.1  HTTP/1.1 301 Moved Permanently Server: Oracle-HTTP-Server Location: https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html Content-Length: 7551 ```  (Another links for javadoc-tool not fixed in #8221)","closed","","pbludov","2020-05-03T08:21:30Z","2020-05-03T15:38:09Z"
"","8823","Sonar issue: A ""NullPointerException"" could be thrown; ""getParent()"" can return null.","link: https://sonarcloud.io/project/issues?id=org.checkstyle%3Acheckstyle&open=AXQyIiCEO9Zy9AxkQRc7&resolved=false&types=BUG  ![image](https://user-images.githubusercontent.com/812984/92996479-bcffcb80-f4c0-11ea-92ec-5062dcf5ba9e.png)","closed","miscellaneous,","romani","2020-09-12T13:26:34Z","2020-09-12T17:42:46Z"
"","8122","Google style has improper enforcement of horizontal whitespace","Leftover from #7988  Reference: https://github.com/checkstyle/checkstyle/pull/7988#discussion_r410706795  Add all tokens left to be added and make ```google_checks``` adhere to Google style's chapter 4.6.2 https://google.github.io/styleguide/javaguide.html#s4.6.2-horizontal-whitespace  The following code should show violations wherever pointed.  ``` class A {     public static void main(String args[]) {         for (int i:ll) { // violation as per 4.6.2.4             int k;         }         Listlist; // violation as per 4.6.2.7         String g = ""Google""; //google         // the line above: violation as per 4.6.2.6, should be ""// google"", space after ""//""     } } ```  ``` C:\Users\Shashwat\Documents>java -jar checkstyle-8.31-all.jar -c config.xml Test.java Starting audit... Audit done. ```","open","google style,","shashwatj07","2020-04-18T15:51:20Z","2020-10-24T15:51:35Z"
"","8019","resolve FileTabCharacter violations in test resources","leftover from #4100 , detected at https://github.com/checkstyle/checkstyle/pull/7775#discussion_r402314244  FileTabCharacter is still disabled at `checkstyle_resources_checks.xml`  When activated there bunch violations `File contains tab characters (this is the first instance). [FileTabCharacter]`  Some Inputs are created with tabs by design, so such files should be placed to suppress at `checkstyle_resources_suppressions.xml` but better to have `Tab` in name.  ``` src/it/resources/com/google/checkstyle/test/chapter2filebasic/rule231filetab/InputFileTabCharacter.java:8:25:  src/it/resources/org/checkstyle/suppressionxpathfilter/importorder/SuppressionXpathRegressionImportOrderFive.java:8:1:  src/it/resources/org/checkstyle/suppressionxpathfilter/importorder/SuppressionXpathRegressionImportOrderFour.java:8:1:  src/it/resources/org/checkstyle/suppressionxpathfilter/importorder/SuppressionXpathRegressionImportOrderOne.java:7:1:  src/it/resources/org/checkstyle/suppressionxpathfilter/importorder/SuppressionXpathRegressionImportOrderTwo.java:8:1:  src/it/resources/org/checkstyle/suppressionxpathfilter/invalidjavadocposition/SuppressionXpathRegressionInvalidJavadocPositionSix.java:4:1:  src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/coding/illegalinstantiation/InputIllegalInstantiationLang.java:13:1:  src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/imports/customimportorder/InputCustomImportOrderViolationsSameLine.java:10:1:  src/test/resources/com/puppycrawl/tools/checkstyle/asttreestringprinter/InputAstTreeStringPrinterComments.java:5:1:  src/test/resources/com/puppycrawl/tools/checkstyle/asttreestringprinter/InputAstTreeStringPrinterFullOfBlockComments.java:4:1:  src/test/resources/com/puppycrawl/tools/checkstyle/asttreestringprinter/InputAstTreeStringPrinterJavadocPosition.java:5:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checker/InputCheckerTabCharacter.txt:2:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/magicnumber/InputMagicNumberAnnotationElement.java:7:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/InputVariableDeclarationUsageDistance.java:5:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/innertypelast/InputInnerTypeLastClass.java:4:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/commentsindentation/InputCommentsIndentationCommentIsAtTheEndOfBlock.java:214:3:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationAnonymousClassInMethod.java:19:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationCustomAnnotation.java:100:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationFromGuava.java:48:5:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationInvalidSwitchIndent.java:99:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationLambda3.java:14:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationLambda4.java:13:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationLambda5.java:5:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationMethodCallLineWrap.java:34:5:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationUseTabs.java:19:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationValidMethodIndent.java:198:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/abstractjavadoc/InputAbstractJavadocCorrectParagraph.java:82:5:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/abstractjavadoc/InputAbstractJavadocPosition.java:14:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/abstractjavadoc/InputAbstractJavadocPositionWithSinglelineComments.java:14:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocblocktaglocation/InputJavadocBlockTagLocationIncorrect.java:14:6:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocstyle/InputJavadocStyle.java:322:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/abbreviationaswordinname/InputAbbreviationAsWordInNameOverridableMethod.java:6:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/abbreviationaswordinname/InputAbbreviationAsWordInNameType.java:38:5:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/methodname/InputMethodNameExtra.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/linelength/InputLineLengthSimple.java:19:25:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/todocomment/InputTodoCommentSimple.java:19:25:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/filetabcharacter/InputFileTabCharacterSimple.java:19:25:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/methodparampad/InputMethodParamPadWhitespaceAround.java:26:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/nolinewrap/InputNoLineWrapBad.java:11:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/nolinewrap/InputNoLineWrapGood.java:12:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/nowhitespaceafter/InputNoWhitespaceAfter.java:226:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/nowhitespacebefore/InputNoWhitespaceBeforeDot.java:226:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/nowhitespacebefore/InputNoWhitespaceBeforeDotAllowLineBreaks.java:226:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/parenpad/InputParenPadLeftRightAndNoSpace.java:161:9:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/parenpad/InputParenPadWhitespace.java:226:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/singlespaceseparator/InputSingleSpaceSeparatorComments.java:13:20:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/singlespaceseparator/InputSingleSpaceSeparatorErrors.java:14:8:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/typecastparenpad/InputTypecastParenPadWhitespace.java:226:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/typecastparenpad/InputTypecastParenPadWhitespaceAround.java:26:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/whitespaceafter/InputWhitespaceAfterAround.java:26:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/whitespaceafter/InputWhitespaceAfterDefaultConfig.java:19:25:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/whitespaceafter/InputWhitespaceAfterTypeCast.java:226:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/whitespacearound/InputWhitespaceAround.java:26:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/whitespacearound/InputWhitespaceAroundArrayInitialization.java:18:9:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/whitespacearound/InputWhitespaceAroundEmptyTypesAndCycles.java:19:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/whitespacearound/InputWhitespaceAroundKeywordsAndOperators.java:226:1:  src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/whitespacearound/InputWhitespaceAroundSimple.java:19:25:  src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppresswithnearbycommentfilter/InputSuppressWithNearbyCommentFilter.java:67:21:  src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppresswithplaintextcommentfilter/InputSuppressWithPlainTextCommentFilter.sql:2:1:  src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppresswithplaintextcommentfilter/InputSuppressWithPlainTextCommentFilter.xml:7:1:  src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppresswithplaintextcommentfilter/InputSuppressWithPlainTextCommentFilterCustomMessageFormat.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppresswithplaintextcommentfilter/InputSuppressWithPlainTextCommentFilterSuppressById.java:9:1:  src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppresswithplaintextcommentfilter/InputSuppressWithPlainTextCommentFilterWithCustomOnAndOffComments.java:5:7:  src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppresswithplaintextcommentfilter/InputSuppressWithPlainTextCommentFilterWithDefaultCfg.java:5:7:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/InputJava7Diamond.java:6:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/InputRegressionJavaClass1.java:25:14:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/comments/InputComments2.java:12:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/comments/InputFullOfBlockComments.java:4:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputAnnotations1.java:7:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputAnnotations10.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputAnnotations12.java:15:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputAnnotations3.java:10:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputAnnotations4.java:9:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputAnnotations5.java:10:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputAnnotations6.java:10:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputAnnotations7.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputAnnotations8.java:9:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputAnnotations9.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputDefaultMethods.java:5:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputDefaultMethods2.java:5:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda1.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda10.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda11.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda12.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda13.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda14.java:10:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda16.java:10:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda2.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda3.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda4.java:9:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda5.java:10:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda6.java:9:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda7.java:9:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda8.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputLambda9.java:8:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/java8/InputMethodReferences.java:13:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/javadoc/InputJavadocWithCrAsNewline.javadoc:4:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/javadoc/InputLeadingAsterisksExtended.javadoc:4:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/javadoc/htmlTags/InputListWithUnclosedItemInUnclosedParagraph.javadoc:3:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/javadoc/htmlTags/InputMixedCaseOfHtmlTags.javadoc:7:1:  src/test/resources/com/puppycrawl/tools/checkstyle/grammar/javadoc/htmlTags/InputUnclosedParagraphFollowedByJavadocTag.javadoc:2:1:  src/test/resources/com/puppycrawl/tools/checkstyle/main/InputMainGenerateXpathSuppressionsTabWidth.java:4:1:  src/test/resources/com/puppycrawl/tools/checkstyle/main/InputMainSuppressionsStringPrinter.java:4:1:  src/test/resources/com/puppycrawl/tools/checkstyle/xpath/xpathquerygenerator/InputXpathQueryGeneratorTabWidth.java:4:1:  src/test/resources/com/puppycrawl/tools/checkstyle/xpathfilegeneratorastfilter/InputXpathFileGeneratorAstFilter.java:6:1:   ```","closed","easy,","romani","2020-04-03T12:56:31Z","2020-05-28T14:29:21Z"
"","8020","resolve Trailing whitespace violations in test resources","leftover from #4100 , detected at https://github.com/checkstyle/checkstyle/pull/7775#discussion_r402314244  FileTabCharacter is still disabled at `checkstyle_resources_checks.xml`  When activated there bunch violations ` Trailing whitespace [RegexpSingleline]`  ``` src/it/resources/org/checkstyle/suppressionxpathfilter/nolinewrap/SuppressionXpathRegressionNoLineWrap2.java:6: src/test/resources/com/puppycrawl/tools/checkstyle/grammar/InputRegressionJava8Class2.java:22: src/test/resources/com/puppycrawl/tools/checkstyle/grammar/InputRegressionJava8Class2.java:31: src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoctagcontinuationindentation/InputJavadocTagContinuationIndentationGuavaFalsePositive.java:9: src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoctagcontinuationindentation/InputJavadocTagContinuationIndentationGuavaFalsePositive.java:11: src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoccontentlocation/InputJavadocContentLocationTrailingSpace.java:11: src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoccontentlocation/InputJavadocContentLocationTrailingSpace.java:27: src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoccontentlocation/InputJavadocContentLocationTrailingSpace.java:33: src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoccontentlocation/InputJavadocContentLocationTrailingSpace.java:52: src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoccontentlocation/InputJavadocContentLocationTrailingSpace.java:59: src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoccontentlocation/InputJavadocContentLocationTrailingSpace.java:67: src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoccontentlocation/InputJavadocContentLocationTrailingSpace.java:74: src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoccontentlocation/InputJavadocContentLocationTrailingSpace.java:75: src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocparagraph/InputJavadocParagraphCorrect.java:13: src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocparagraph/InputJavadocParagraphCorrect.java:93: ```","closed","easy,","romani","2020-04-03T12:59:29Z","2020-04-05T22:43:47Z"
"","8768","Sonar violation: Disable access to external entities in XML parsing.","Leak of violations from https://github.com/checkstyle/checkstyle/pull/8762 in master https://sonarcloud.io/organizations/checkstyle/rules?open=java%3AS2755&rule_key=java%3AS2755  from PR where CI is passed: https://sonarcloud.io/dashboard?id=org.checkstyle%3Acheckstyle&pullRequest=8762 - gate is passed, but there were violations.  ![image](https://user-images.githubusercontent.com/812984/91511406-6f664a80-e894-11ea-8591-4949835bd145.png)","open","miscellaneous,","romani","2020-08-28T01:38:26Z","2020-10-22T13:22:11Z"
"","8149","Issue #7571: Update doc AnnotationUseStyle","just update for default example","closed","","ImmortalRabbit","2020-04-21T10:55:51Z","2020-11-13T05:39:05Z"
"","8148","Doc: Update doc AtclauseOrderCheck","just update for default config","closed","","ImmortalRabbit","2020-04-21T09:39:29Z","2020-11-13T06:38:15Z"
"","8778","Update JavadocVariable, MissingJavadocMethod, MissingOverride checks to use comment nodes from AST (isCommentNodesRequired=true)","JavadocVariable, MissingJavadocMethod, MissingOverride checks use FileContents object instead of AST nodes (like BLOCK_COMMENT_*) to access comments/javadocs. These checks should override isCommentNodesRequired() method and use AST comment nodes.  Proposed solution: 1. Override isCommentNodesRequired() method in these Checks and return `true`.  2. Modify the Checks to use BLOCK_COMMENT_* nodes instead of FileContents.getJavadocBefore().  This fix will be usefull for path-filter project, because violation's AST will include comment nodes, so patch-filter can detect changed lines in the comments as well. See https://github.com/checkstyle/patch-filters/issues/302#issuecomment-679174563 and https://github.com/checkstyle/patch-filters/issues/302#issuecomment-683308729.","open","","baratali","2020-08-31T13:30:38Z","2020-08-31T13:30:38Z"
"","8795","add jacoco.exec to .gitignore","jacoco.exec should be ignored","closed","incomplete,","qxo","2020-09-06T12:16:10Z","2020-09-11T14:19:32Z"
"","8281","Execution of spell shecker on ubuntu 16.04 is failing","it works in CI , but on my local always failing ``` ./.ci/test-spelling-unknown-words.sh  Retrieve cached english.words from checkstyle.sourceforge.io   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100 4837k  100 4837k    0     0   609k      0  0:00:07  0:00:07 --:--:--  507k Clean up from previous run Run w Review results New misspellings found, please review: Don''t n'th  If you are ok with the output of this run, you will need to patch .ci/jsoref-spellchecker/whitelist.words","open","miscellaneous,","romani","2020-05-30T14:04:50Z","2020-05-30T15:34:42Z"
"","8119","WIP: Update nondex - do not merge","it was green at https://travis-ci.org/github/checkstyle/checkstyle/jobs/675825399#L499 but failed inside","closed","","romani","2020-04-17T15:12:39Z","2020-04-19T12:58:34Z"
"","8847","Issue #7640: add examples for FallThrough","Issus #7640  ![1](https://user-images.githubusercontent.com/54651212/94700903-e017e100-02f0-11eb-9c16-a7ad7d806646.PNG)  ------------------------------------------------------------------------------ ------------------------------------------------------------------------------  ![2](https://user-images.githubusercontent.com/54651212/94700901-ddb58700-02f0-11eb-884b-4c35c9152857.PNG)  ------------------------------------------------------------------------------ ------------------------------------------------------------------------------  ![3](https://user-images.githubusercontent.com/54651212/94700919-e4dc9500-02f0-11eb-9bbc-b949cf79257c.PNG)  Default config ``` cat config.xml                            cat Test.java  public class Test {   public void foo() throws Exception {     int i = 0;     while (i >= 0) {       switch (i) {         case 1:           i++;         case 2: // violation, case 1 contains code but lacks break, return, throw or continue                 // statement           i++;           break;         case 3: // OK           i++;           return;         case 4: // OK           i++;           throw new Exception();         case 5: // OK           i++;           continue;         case 6: // OK         case 7: // OK, case 6 does not contain code           i++;           // OK, by default the last case is not checked       }     }   } } java -jar .\checkstyle-8.36.1-all.jar -c config.xml Test.java Starting audit... [ERROR] E:\checkstyle-playground\Test.java:8:9: Fall through from previous branch of the switch statement. [FallThrough] Audit done. Checkstyle ends with 1 errors.  cat Test.java public class Test {   public void foo() {     int i = 0;     switch (i) {       default:         return;       case 1:         i++; // unreachable       case 2: // violation         return;     }   } } java -jar .\checkstyle-8.36.1-all.jar -c config.xml Test.java Starting audit... [ERROR] E:\checkstyle-playground\Test.java:9:7: Fall through from previous branch of the switch statement. [FallThrough] Audit done. Checkstyle ends with 1 errors.  cat Test.java public class Test {   public void foo() {     int i = 0;     switch (i) {       case 1:         i++; // fall through        case 2: // OK         i++;         // fallthru       case 3: { // OK         i++;       }       /* fall-thru */       case 4: // OK         i++;         // Fallthru       case 5: // violation, ""Fallthru"" in case 4 should be ""fallthru""         i++;         // fall through         i++;       case 6: // violation, the comment must be on the last non-empty line before 'case'         i++;         /* fall through */case 7: // OK, the comment can appear on the same line but before 'case'         i++;     }   } } java -jar .\checkstyle-8.36.1-all.jar -c config.xml Test.java Starting audit... [ERROR] E:\checkstyle-playground\Test.java:18:7: Fall through from previous branch of the switch statement. [FallThrough] [ERROR] E:\checkstyle-playground\Test.java:22:7: Fall through from previous branch of the switch statement. [FallThrough] Audit done. Checkstyle ends with 2 errors. ```  Config with checkLastCaseGroup=true ``` cat config.xml                                         cat Test.java public class Test {   public void foo() {     int i = 0;     switch (i) {       case 1:         break;       case 2: // OK         i++;         // violation, last case group is checked     }   } } java -jar .\checkstyle-8.36.1-all.jar -c config.xml Test.java Starting audit... [ERROR] E:\checkstyle-playground\Test.java:7:7: Fall through from the last branch of the switch statement. [FallThrough] Audit done. Checkstyle ends with 1 errors. ```  Config with custom reliefPattern: ``` cat config.xml                                       cat Test.java  public class Test {   public void foo() {     int i = 0;     switch (i) {       case 1:         i++;         // FALL-THROUGH       case 2: // OK, 'FALL-THROUGH' matches the regular expression ""FALL?[ -]?THROUGH""         i++;         // fall-through       case 3: // violation, 'fall-through' doesn't match         break;     }   } } java -jar .\checkstyle-8.36.1-all.jar -c config.xml Test.java Starting audit... [ERROR] E:\checkstyle-playground\Test.java:11:7: Fall through from previous branch of the switch statement. [FallThrough] Audit done. Checkstyle ends with 1 errors. ```","closed","","anhminhtran235","2020-09-21T21:00:07Z","2020-10-03T20:31:45Z"
"","8994","Update doc for FinalClass:#7609","Issue:#7609","closed","","ek08","2020-11-18T04:07:22Z","2020-11-20T15:16:54Z"
"","8967","Issue #8963: Make output of TranslationCheck deterministic","Issue: #8963   Fixes nondeterministic logging of error messages in Translation Check.","closed","","t-rasmud","2020-11-06T15:50:57Z","2020-11-07T09:59:01Z"
"","8924","doc: Add Mega-Linter in Active Tools list & reorder table","Issue: #8922   With ""Squash & merge"" option , the commit title will follow the contributing rule :)","closed","","nvuillam","2020-10-26T09:44:15Z","2020-10-26T10:21:29Z"
"","8927","doc: Add Mega-Linter to active tools list","Issue: #8922","closed","","nvuillam","2020-10-26T10:19:12Z","2020-10-30T15:03:17Z"
"","8565","Unambiguous limitation about ASCII","Issue: #8551.  Commit message should be: “Issue #8551: Consider relaxing the stated limitation about UTF-8” (sorry, just saw it when opening the PR).  The issue does not have the “approved” label, but I understood the comment there (asking to suggest better wording and referring to the source code of the website) as inviting me to introduce a PR. I hope this is okay.","closed","","oliviercailloux","2020-07-27T16:13:23Z","2020-11-07T20:43:56Z"
"","8491","Issue #8447: add ability to create single report","Issue: #8447  Update diff_report.yml file: added the ability to create report only for patch branch (for example, for new checks).  If issue comment is ""diff report"", then a basic difference report will be generated. If issue comment is ""single report"", then a basic single report will be generated.  Example: https://github.com/OvchinnikovNV/checkstyle/pull/2","closed","","OvchinnikovNV","2020-07-16T11:52:11Z","2020-07-17T06:40:17Z"
"","8172","Issue#8142: create them inside source blocks","Issue: #8142  change two source code sections into bordered blocks for https://checkstyle.sourceforge.io/config_blocks.html#NeedBraces","closed","","am-firnas","2020-04-22T21:34:07Z","2020-05-18T08:41:05Z"
"","8195","Issue: #7728 Update AbstractChecks to log DetailAST - CustomImportOrder","Issue: #7728 Update AbstractChecks to log DetailAST - CustomImportOrder  Diff report https://developerhb.github.io/diff/index.html  Logs Modified - **6**  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java#L576  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java#L619  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java#L633  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java#L717  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java#L720  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java#L723  **One Function Modified** - `logWrongImportGroupOrder`  **One Class Modified** - `ImportDetails`","closed","","developerhb","2020-04-27T04:30:53Z","2020-05-17T07:29:55Z"
"","8150","Issue #7595: Update doc UniqueProperties","Issue: #7595     `$ cat config.xml` ```                      ``` `java -Djava.util.logging.config.file=log.properties -jar checkstyle-8.30-all.jar -c config.xml java_sandbox/src/com/codestyle/sandbox/Test.java`  ``` Starting audit... [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Properties.properties:2: Duplicated property 'key' (2 occurrence(s)). [UniqueProperties] Audit done. Checkstyle ends with 1 errors. ```","closed","abandoned,","ImmortalRabbit","2020-04-21T12:10:20Z","2020-09-07T08:37:58Z"
"","8450","Implement Javadoc Metadata Scraper","Issue to track progress","closed","","gaurabdg","2020-07-14T19:09:07Z","2020-10-31T23:26:53Z"
"","8993","minor : Updated SuperFinalize doc","Issue : #7662  minor : Updated SuperFinalize doc","closed","","harshitmalik03","2020-11-17T15:39:15Z","2020-11-24T15:40:38Z"
"","8949","Issue #8951: Remove Buddy CI config","Issue #8951  We are not using this CI due to limit of 200 builds per month.","closed","","pbludov","2020-11-01T10:23:32Z","2020-11-01T18:24:47Z"
"","8939","Issue #8938: put user content to env variable at workflows/diff_report.yml","Issue #8938","closed","","romani","2020-10-29T13:58:51Z","2020-10-31T14:46:16Z"
"","8962","Issue #8921: Disable ""checkstyle-cli-run-openjdk14"" job in travis.sh","Issue #8921: Disable ""checkstyle-cli-run-openjdk14"" job in travis.sh  ~Reviewers, please note that we must wait until #8920 is merged to merge this PR, so that we maintain coverage of openjdk14.~  I have removed this job completely instead of simply disabling; this was a hack to begin with, and once we have the changes from #8920 merged, there is no reason to keep this job in `travis.sh`.","closed","","nick-mancuso","2020-11-04T20:47:00Z","2020-11-06T08:07:24Z"
"","8917","Issue #8916: use empty string for empty array values of token property","Issue #8916","closed","","romani","2020-10-22T14:36:09Z","2020-10-27T05:41:01Z"
"","8940","Issue 8909 markdownlint","Issue #8909  Almost no changes in the existing .md files.  The one significant change is that now we have a top level header in the each file: * [md041](https://github.com/markdownlint/markdownlint/blob/master/docs/RULES.md#md041---first-line-in-file-should-be-a-top-level-header)  ~~I vote to suppress this rule.~~","closed","","pbludov","2020-10-30T07:46:17Z","2020-10-31T13:54:33Z"
"","8920","Issue #8901: Run regression testing in CI over openjdk14 or newer codebase","Issue #8901: Run regression testing in CI over openjdk14 or newer codebase  This PR will allow us to parse the entire(almost) openjdk14u repo; all excluded files are listed in `openjdk14-excluded.files` in the form of `BeforeExecutionExclusionFileFilter` modules that are appended to the `checks-nonjavadoc-error.xml` config file via `sed` when running Checkstyle over the repo.  TODO list: - [x] After https://github.com/checkstyle/contribution/pull/516 is merged, update `openjdk14-with-checks-nonjavadoc-error` to have the correct contribution repo link  - [x] Create or find applicable issues for excluded files:      - [x] `jdk14u/test/jdk/sun/tools/jhsdb/HeapDumpTest.java`     - [x] `jdk14u/test/jdk/java/lang/String/TranslateEscapes.java`     - [x] `jdk14u/test/hotspot/jtreg/runtime/exceptionMsgs/methodPrinting/TestPrintingMethods.java`     - [x] `jdk14u/test/langtools/tools/javac/annotations/typeAnnotations/failures/T8011722.java`     - [x] `jdk14u/test/langtools/tools/javac/annotations/typeAnnotations/referenceinfos/NestedTypes.java`     - [x] `jdk14u/test/langtools/tools/javac/annotations/typeAnnotations/newlocations/AllLocations.java`     - [x] `jdk14u/test/langtools/tools/javac/enum/TrailingComma.java`     - [x] `jdk14u/test/langtools/tools/javac/treeannotests/AnnoTreeTests.java`     - [x] `jdk14u/test/langtools/tools/javac/lambda/speculative/InferStrict.java`     - [x] `jdk14u/test/langtools/tools/javac/DeepStringConcat.java`     - [x] `jdk14u/test/langtools/tools/javac/switchexpr/ExpressionSwitchBugs.java`        - [x] Create issue to disable/remove `checkstyle-cli-run-openjdk14` in `travis.sh`, as it is superseded by this test.  `checkstyle-cli-run-openjdk14` parsed around 2,000 files; and this new test parses around 46,000 files(this excludes module-info.java files and non-compilables):  ``` ➜  jdk14u git:(master) find . -name ""*.java"" | wc -l 49160  ```","closed","","nick-mancuso","2020-10-24T17:35:18Z","2020-11-05T07:07:17Z"
"","8868","Issue #8864: test .ci/validation.cmd with invalid option","Issue #8864   Not to merge. Windows build should fail.","closed","","pbludov","2020-10-01T06:53:26Z","2020-12-27T12:12:04Z"
"","8865","Issue #8864: use .ci/validation.cmd in appveyor ci","Issue #8864  * appveyor.bat -> validation.cmd * JDK14 build removed (we already have JDK15 build in cirrus ci)","closed","","pbludov","2020-09-30T14:40:29Z","2020-10-01T17:40:47Z"
"","8874","Issue #8859: Add SpongePowered/Configurate Checkstyle run to CI","Issue #8859: Add SpongePowered/Configurate Checkstyle run to CI","closed","","nick-mancuso","2020-10-03T11:54:44Z","2020-10-05T06:52:37Z"
"","8858","Issue #8856: Local records fail to parse when annotated","Issue #8856: Local records fail to parse when annotated  It is tempting to want to modify the grammar to this: ``` |   m:modifiers! ( recordDefinition[#m] | classDefinition[#m] ) ``` But even using syntactic predicates for both definitions, this causes too many ambiguities and issues.   We don't need to do this, though, since modifiers aren't allowed on local records: ``` ➜  src cat MyClass.java                                                                   public class MyClass {     public void doThing() {         private record localRecord(){}     } } ➜  src /usr/lib/jvm/java-14-openjdk/bin/javadoc --enable-preview --source 14 MyClass.java Loading source file MyClass.java... MyClass.java:3: error: illegal start of expression         private record localRecord(){}         ^ MyClass.java:5: error: class, interface, enum, or record expected } ^ 2 errors ``` This is why I didn't originally include modifiers on local records; but I failed to consider that since we have implemented annotations as part of the `modifiers` rule, and that this would affect local records.   At any rate, instead of creating the empty modifers AST, then attaching possible multiple annotations, then calling the `recordDefinition` rule and passing the `modifiers` AST, I simply used the `annotations` AST we already have (empty or not), and renamed it.   Fancy AST regression report: https://nmancus1.github.io/diff/ Fancy AST regression report: https://nmancus1.github.io/diff_configurate/","closed","","nick-mancuso","2020-09-29T18:22:02Z","2020-10-06T13:38:52Z"
"","8857","Issue #8855: set up cirrus ci","Issue #8855 Windows build at Cirrus CI  Notes:  * We need to use custom clone script due to `core.autocrlf` option; * Maven and Chocolatey cache should be under the working directory; * The command `refreshenv` does [not work](https://cirrus-ci.org/guide/windows/#environment-variables), we should set `PATH` variable manually; * The tests `MainTest` and `PrepertiesGeneratorTest` fails since `picocli` is unable to figure out right ANSI mode. Interesting, that Appveyor is not affected by this bug. Solved with `NO_COLOR` environment variable; * During the process I found a nice solution for connection reset problem that appears in all CI's.","closed","","pbludov","2020-09-29T15:41:28Z","2020-09-29T20:34:23Z"
"","8860","Issue #8855: MainTest is broken to prove that CI works","Issue #8855  Not a real PR. This build should fail.","closed","","pbludov","2020-09-29T20:16:11Z","2020-09-30T02:55:01Z"
"","8861","Issue #8855: fix master build on cirrus ci","Issue #8855  * Fix for master build * The tests are the same as for Appveyor.  Appveyor itself will be updated in next PR.","closed","","pbludov","2020-09-30T04:50:44Z","2020-09-30T08:22:40Z"
"","8880","Issue #8849: NoWhitespaceBeforeCheck String index out of range","Issue #8849: NoWhitespaceBeforeCheck String index out of range  Fixed by simple modification to the text block lexer: changing tab width.  No modifications were made to the check, but we will do this anyway: Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config:  https://gist.githubusercontent.com/nmancus1/f5579d1ad36c5ebe441738ad9bf71d4a/raw/74a7356c0a6fc322b11013055046333136f0f3ae/NoWhitespaceBefore.xml  AST regression report: https://nmancus1.github.io/diff_whitespacebefore/","closed","","nick-mancuso","2020-10-05T14:42:15Z","2020-10-07T07:24:56Z"
"","8840","Issue #8839: update eclipse compiler to R17","Issue #8839   ~~All options are sorted (no more dedicated ignore section). This makes it easier to find out which options have been added.~~","closed","","pbludov","2020-09-20T13:12:20Z","2020-09-23T08:13:45Z"
"","8824","Issue #8823: fix sonar violation on null from getParent","Issue #8823","closed","","romani","2020-09-12T13:44:35Z","2020-09-12T17:42:24Z"
"","8815","Issue #8811: FinalClass check crashes CheckStyle","Issue #8811: FinalClass check crashes CheckStyle if there are multiple constructors in a record  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/92731df66f85c542f5f80c160273c981/raw/f9ea36e63bf9fde6f2193eca21fb06c755cc7f7a/FinalClass.xml","closed","","nick-mancuso","2020-09-08T06:02:23Z","2020-09-10T15:09:56Z"
"","8816","Issue #8810: DesignForExtension check crashes CheckStyle","Issue #8810: DesignForExtension check crashes CheckStyle if an undocumented non-final method is present in a record  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/fbfe0d682ec1ff833ad9ebdfa83a80b0/raw/9aec986e9fb822e214e4e7a462c3bb3fcc7b3b8c/DesignForExtension.xml","closed","","nick-mancuso","2020-09-08T06:27:20Z","2020-09-10T15:09:33Z"
"","8836","Issue #8808: false positive with JavadocTypeCheck @param tags for Records","Issue #8808: false positive with JavadocTypeCheck @param tags for Records  Note that the changes in commit https://github.com/checkstyle/checkstyle/commit/df1ae95a1c114ecfd6402781668639cdd6593457 correspond to the following code:  ``` /** @param x */ class Test {} ``` ``` /**  * InputJavadocTypeUnusedParamInJavadocForClass.  *  * @param BAD This is bad.  * @param  This doesn't exist.  * @param  */ public class InputJavadocTypeUnusedParamInJavadocForClass { }  ``` In both of these cases, the check was adding the angle brackets to the output, assuming that they were for type parameters.  Now that the `@param` tag is overloaded for use with record components, there is no way to know the intent of an unused `@param` tag, so it is best to remove these angle brackets.  In any event, the original behavior of the check wasn't optimal anyway, since we really shouldn't be adding characters that don't exist to output.   Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/6e4314ef4f509d6ed5c7e0f59dfc3662/raw/93862649e0dce3fdced263cf3156f96b01ba6a59/JavadocType.xml","closed","","nick-mancuso","2020-09-18T21:12:42Z","2020-09-25T13:59:07Z"
"","8820","Issue #8807: cache in SuppressWithPlainTextCommentFilter","Issue #8807: cache in SuppressWithPlainTextCommentFilter","open","","basinilya","2020-09-11T06:31:58Z","2020-12-05T11:38:13Z"
"","8813","Issue #8806: IndentationCheck false positive with nested records' methods","Issue #8806: false positive with nested records' methods  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/8277e4d4d979cd9745b86048999a20b5/raw/4064b88513abd5ac7f1af27616af47f168d0d1d4/Indentation.xml","closed","","nick-mancuso","2020-09-08T05:11:29Z","2020-09-10T15:09:21Z"
"","8841","Issue #8805: move misc ci stuff to semaphore","issue #8805  The file `.ci/semaphoreci.yaml` renamed back to default name `.semaphore/semaphore.yaml`. Without this change the build is missing from the list of checks.  Checks moved to semaphore: * all-sevntu-checks * no-error-pmd * no-violation-test-josm (disabled) * no-exception-test-*","closed","","pbludov","2020-09-20T13:47:04Z","2020-09-22T17:56:20Z"
"","8825","8790 suppression","Issue #8790","closed","","romani","2020-09-12T15:27:35Z","2020-09-12T17:58:21Z"
"","8796","Issue #8779: Fix false positive for switch expressions in MissingSwitchDefault","Issue #8779: Fix false positive for switch expressions in MissingSwitchDefault  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/dcf15792d9f08da0e573e5bbda2185d0/raw/556901973a29f95b25f3a41e61a466aef4780b2e/MissingSwitchDefault.xml","closed","","nick-mancuso","2020-09-06T14:19:29Z","2020-09-06T20:40:49Z"
"","8769","Issue #8768: resolve Sonar violation","Issue #8768","closed","","romani","2020-08-28T01:46:30Z","2020-08-28T02:24:04Z"
"","8766","Issue #8764: Create new check IllegalIdentifierName","Issue #8764: Create new check IllegalIdentifierName  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/a6d651fb8e00bf39244b85c05ac809b8/raw/25957bb9583e66aaa6d4849838ecfae77eac2070/Base.xml  Diff Regression patch config: https://gist.githubusercontent.com/nmancus1/eb3dfff886148844a5b58523914109e3/raw/a20fbc07b5fd63f33c776fc20a1d2d725e86d735/IllegalIdentifierName.xml  Contribution PR: https://github.com/checkstyle/contribution/pull/503  Link to site: https://nmancus1.github.io/site_illegalidentifiername/config_naming.html#IllegalIdentifierName","closed","","nick-mancuso","2020-08-27T11:54:11Z","2020-08-28T18:52:23Z"
"","8758","Issue #8754: PMD shows WARN during build","Issue #8754: PMD shows WARN during build  This PR fixes the PMD warning produced during execution of the `ShortMethodName` rule while using the using the pmd-test.xml ruleset specified in pom.xml.  Proof of builds failed for PMD processing errors: https://travis-ci.org/github/checkstyle/checkstyle/jobs/721051353 https://travis-ci.org/github/checkstyle/checkstyle/jobs/721051354 https://travis-ci.org/github/checkstyle/checkstyle/jobs/721051355","closed","","nick-mancuso","2020-08-23T23:04:17Z","2020-08-26T05:54:44Z"
"","8595","Issue #8748: Create new check RecordComponentNumberCheck","Issue #8748 : Create new check RecordComponentNumberCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/497dbdc31fe7a09cd960fc255972fb65/raw/c68be9ca06b61e1f279705c8b915386e701803c0/RecordComponentNumberCheckBase.xml  Diff Regression patch config: https://gist.githubusercontent.com/nmancus1/e40c93aa8c632af54f63a8c3347821da/raw/2734393e077ea5f2deb69f3570e0200452ab31fe/RecordComponentNumberCheckPatch.xml  Contribution PR: https://github.com/checkstyle/contribution/pull/500  Link to site: https://nmancus1.github.io/site_recordcomponentnumber/  ~~First check regression report, before modifying ScopeUtil.java: https://checkstyle-diff-reports.s3.us-east-2.amazonaws.com/full-records-RecordComponentNumberCheck_2020133606/reports/diff/index.html~~  Second check regression report, after merging #8598: https://checkstyle-diff-reports.s3.us-east-2.amazonaws.com/full-records-RecordComponentNumberCheck_2020114210/reports/diff/index.html","closed","","nick-mancuso","2020-08-03T12:40:52Z","2020-08-26T05:48:40Z"
"","8759","Issue #8738: Remove BlockCommentPosition test input files from input suppressions","Issue #8738: Remove BlockCommentPosition test input files from input suppressions","closed","","nick-mancuso","2020-08-25T03:13:37Z","2020-08-25T04:25:33Z"
"","8736","Issue #8734: Compact Constructor AST is missing annotations","Issue #8734: Compact Constructor AST is missing annotations  Before grammar change: ``` ➜  src cat TestClass.java  record MyRecord() {     @Deprecated     public MyRecord {     } }  class TestClass {     @Deprecated     public TestClass() {     } }  ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -t TestClass.java RECORD_DEF -> RECORD_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |--LITERAL_RECORD -> record [1:0] |--IDENT -> MyRecord [1:7] |--LPAREN -> ( [1:15] |--RECORD_COMPONENTS -> RECORD_COMPONENTS [1:16] |--RPAREN -> ) [1:16] `--OBJBLOCK -> OBJBLOCK [1:18]     |--LCURLY -> { [1:18]     |--COMPACT_CTOR_DEF -> COMPACT_CTOR_DEF [3:4]     |   |--MODIFIERS -> MODIFIERS [3:4]     |   |   `--LITERAL_PUBLIC -> public [3:4]     |   |--IDENT -> MyRecord [3:11]     |   `--SLIST -> { [3:20]     |       `--RCURLY -> } [4:4]     `--RCURLY -> } [5:0] CLASS_DEF -> CLASS_DEF [7:0] |--MODIFIERS -> MODIFIERS [7:0] |--LITERAL_CLASS -> class [7:0] |--IDENT -> TestClass [7:6] `--OBJBLOCK -> OBJBLOCK [7:16]     |--LCURLY -> { [7:16]     |--CTOR_DEF -> CTOR_DEF [8:4]     |   |--MODIFIERS -> MODIFIERS [8:4]     |   |   |--ANNOTATION -> ANNOTATION [8:4]     |   |   |   |--AT -> @ [8:4]     |   |   |   `--IDENT -> Deprecated [8:5]     |   |   `--LITERAL_PUBLIC -> public [9:4]     |   |--IDENT -> TestClass [9:11]     |   |--LPAREN -> ( [9:20]     |   |--PARAMETERS -> PARAMETERS [9:21]     |   |--RPAREN -> ) [9:21]     |   `--SLIST -> { [9:23]     |       `--RCURLY -> } [10:4]     `--RCURLY -> } [11:0] ```  After grammar change:  ``` ➜  src cat TestClass.java                                                                                     record MyRecord() {     @Deprecated     public MyRecord {     } }  class TestClass {     @Deprecated     public TestClass() {     } } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -t TestClass.java RECORD_DEF -> RECORD_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |--LITERAL_RECORD -> record [1:0] |--IDENT -> MyRecord [1:7] |--LPAREN -> ( [1:15] |--RECORD_COMPONENTS -> RECORD_COMPONENTS [1:16] |--RPAREN -> ) [1:16] `--OBJBLOCK -> OBJBLOCK [1:18]     |--LCURLY -> { [1:18]     |--COMPACT_CTOR_DEF -> COMPACT_CTOR_DEF [2:4]     |   |--MODIFIERS -> MODIFIERS [2:4]     |   |   |--ANNOTATION -> ANNOTATION [2:4]     |   |   |   |--AT -> @ [2:4]     |   |   |   `--IDENT -> Deprecated [2:5]     |   |   `--LITERAL_PUBLIC -> public [3:4]     |   |--IDENT -> MyRecord [3:11]     |   `--SLIST -> { [3:20]     |       `--RCURLY -> } [4:4]     `--RCURLY -> } [5:0] CLASS_DEF -> CLASS_DEF [7:0] |--MODIFIERS -> MODIFIERS [7:0] |--LITERAL_CLASS -> class [7:0] |--IDENT -> TestClass [7:6] `--OBJBLOCK -> OBJBLOCK [7:16]     |--LCURLY -> { [7:16]     |--CTOR_DEF -> CTOR_DEF [8:4]     |   |--MODIFIERS -> MODIFIERS [8:4]     |   |   |--ANNOTATION -> ANNOTATION [8:4]     |   |   |   |--AT -> @ [8:4]     |   |   |   `--IDENT -> Deprecated [8:5]     |   |   `--LITERAL_PUBLIC -> public [9:4]     |   |--IDENT -> TestClass [9:11]     |   |--LPAREN -> ( [9:20]     |   |--PARAMETERS -> PARAMETERS [9:21]     |   |--RPAREN -> ) [9:21]     |   `--SLIST -> { [9:23]     |       `--RCURLY -> } [10:4]     `--RCURLY -> } [11:0] ``` ### AST regression report: https://nmancus1.github.io/diff_antlr_checkstyle_8-21/index.html  ### Check Regression Reports: https://nmancus1.github.io/records-grammar-patch-compact-ctor_check_diff_reports_2020_08_20/diff_checks-nonjavadoc-error/ https://nmancus1.github.io/records-grammar-patch-compact-ctor_check_diff_reports_2020_08_20/diff_checks-only-javadoc-error/ https://nmancus1.github.io/records-grammar-patch-compact-ctor_check_diff_reports_2020_08_20/diff_part1/ https://nmancus1.github.io/records-grammar-patch-compact-ctor_check_diff_reports_2020_08_20/diff_part2/ https://nmancus1.github.io/records-grammar-patch-compact-ctor_check_diff_reports_2020_08_20/diff_part3/ https://nmancus1.github.io/records-grammar-patch-compact-ctor_check_diff_reports_2020_08_20/diff_part4/ https://nmancus1.github.io/records-grammar-patch-compact-ctor_check_diff_reports_2020_08_20/diff_part5/ https://nmancus1.github.io/records-grammar-patch-compact-ctor_check_diff_reports_2020_08_20/diff_part6/ https://nmancus1.github.io/records-grammar-patch-compact-ctor_check_diff_reports_2020_08_20/diff_seventu-check-regression_part_1/ https://nmancus1.github.io/records-grammar-patch-compact-ctor_check_diff_reports_2020_08_20/diff_seventu-check-regression_part_2/","closed","","nick-mancuso","2020-08-20T21:19:13Z","2020-08-22T15:23:16Z"
"","8753","Issue #8691: Switch expression syntax check update for Indentation","Issue #8691: Switch expression syntax check update for Indentation  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/5ce6db326d41df89b5d4f97f7cdb606d/raw/ae0494c000bb7848b75ca7078cb8eab0a767e030/Indentation.xml","closed","","nick-mancuso","2020-08-22T02:29:10Z","2020-08-25T04:28:26Z"
"","8692","Issue #8683: LambdaParameterName throws NPE parsing switch expressions","Issue #8683: LambdaParameterName throws NPE parsing switch expressions  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/5238a707987cd6bfe5dcd2edc7a5de93/raw/92f29f175ad94a844ab5fcfb65faca3157359228/gistfile1.txt","closed","","nick-mancuso","2020-08-13T19:20:30Z","2020-08-21T14:03:48Z"
"","8693","Issue #8681: Switch expression check update for NPathComplexityCheck","Issue #8681: Switch expression check update for NPathComplexityCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/47a829149ed6bb9dd27dd9ee832b6190/raw/586445eb5d49c19649ac07cfdc07758667dd51ba/NPathComplexity.xml","closed","","nick-mancuso","2020-08-13T20:54:22Z","2020-08-16T07:00:09Z"
"","8721","Issue #8676: VariableDeclarationUsageDistance throws a NPE on switch expressions","Issue #8676: VariableDeclarationUsageDistance throws a NPE on switch expressions  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/e3a7aff4509ae0c30831033a980d7a33/raw/d44596e998890689d76261872137429fc985c4d8/VariableDeclarationUsageDistance.xml","closed","","nick-mancuso","2020-08-20T02:06:29Z","2020-08-21T05:49:10Z"
"","8702","Issue #8672: Switch expression syntax check update for MissingSwitchDefault","Issue #8672: Switch expression syntax check update for MissingSwitchDefault  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/dcf15792d9f08da0e573e5bbda2185d0/raw/556901973a29f95b25f3a41e61a466aef4780b2e/MissingSwitchDefault.xml","closed","","nick-mancuso","2020-08-16T20:03:54Z","2020-08-18T07:45:49Z"
"","8701","Issue #8668: Switch expression syntax check update for FinalLocalVariable","Issue #8668: Switch expression syntax check update for FinalLocalVariable  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/b87b768ef35bb8aa647c886f3fd49e7e/raw/fa65c19f8f87ee7ed68d69bd38818d19ebb43b0d/FinalLocalVariable.xml","closed","","nick-mancuso","2020-08-16T18:39:59Z","2020-08-21T13:55:15Z"
"","8698","Issue #8665: Switch expression syntax check update for DefaultComesLast","Issue #8665: Switch expression syntax check update for DefaultComesLast  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/059ef586fdd6e4ab146decd450d5bdc0/raw/5dcd861b1b94b2e92195e6e1b2eb06f62e3bb7f2/DefaultComesLast.txt","closed","","nick-mancuso","2020-08-15T17:54:17Z","2020-08-16T15:44:52Z"
"","8696","Issue #8664: NeedBraces throws a NPE when parsing switch expression syntax","Issue #8664: NeedBraces throws a NPE when parsing switch expression syntax  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/9856763c94e3283016546a6dcd709208/raw/7e2b5b9c4f472f935ea48d958dbdd926e215aa2a/NeedBraces.xml","closed","","nick-mancuso","2020-08-15T14:03:31Z","2020-08-16T16:49:08Z"
"","8699","Issue #8663: Switch expression syntax check update for LeftCurlyCheck","Issue #8663: Switch expression syntax check update for LeftCurlyCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/573e0d598453915a39c69b599523b33a/raw/485809d9a16f82f6f92d575a394da687f1c84aa6/LeftCurly.xml","closed","","nick-mancuso","2020-08-15T18:47:00Z","2020-08-16T16:51:21Z"
"","8697","Issue #8662: Switch expression syntax check update for EmptyBlockCheck","Issue #8662: Switch expression syntax check update for EmptyBlockCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/658282e07a843a40b8136e75c3e95ecc/raw/a0fe890093bb0512ec3f833533da90ce6c8212b8/EmptyBlock.xml","closed","","nick-mancuso","2020-08-15T16:26:16Z","2020-08-21T13:31:17Z"
"","8690","Issue #8661: IndentationCheck throws a NPE on switch expression","Issue #8661: IndentationCheck throws a NPE on switch expression  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/68be3aca702f5825bfa909698e4dea74/raw/1c6320477615ddf0c35ef574994c95e3bffcaa7e/Indentation.xml  Please note that this PR only adds support for switch rules and fixes the NPE for #8661.  Support for yield statements will be handled separately at https://github.com/checkstyle/checkstyle/issues/8691","closed","","nick-mancuso","2020-08-13T15:35:19Z","2020-08-16T15:47:03Z"
"","8689","Issue #8660: UnnecessaryParentheses throws NPE on switch expression syntax","Issue #8660: UnnecessaryParentheses throws NPE on switch exprssion syntax  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/5de2b363978aeb1feb327d52e1247ef9/raw/ef539479d35662261a6672434d0ff4f724fbccb0/UnnecessaryParentheses.xml","closed","","nick-mancuso","2020-08-13T00:50:45Z","2020-08-14T04:50:22Z"
"","8688","Issue #8659: HiddenFieldCheck throws a NPE on switch expression","Issue #8659: HiddenFieldCheck throws a NPE on switch expression  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/ddaa2dc0a3c7185e2400e001e9809907/raw/6b50c4280d997d19dbe689b4fd046ee11edc1cfb/HiddenField.xml","closed","","nick-mancuso","2020-08-13T00:13:10Z","2020-08-14T04:52:18Z"
"","8634","Issue #8631: Proof of Java 14 syntax parsing by new CI build item","Issue #8631: Proof of Java 14 syntax parsing by new CI build item  To prove that we can parse jdk14 syntax, we have taken the list of test files from https://download.java.net/openjdk/testresults/15/archives/24/langtools-24-summary.txt and created a Travis build item that builds the contributor's version of Checkstyle and executes Checkstyle on this list.   The config used is a simple one so that we can execute this build quickly, just to show that we can parse all of these files.  The only module is `ClassTypeParameterName`. Also to speed things up, we will clone the openjdk14 repo with` --depth 1`.  I have added some comments to the list, to show future contributors where we can add more files as we find them.  Reviewers, please note that I have included the commits from https://github.com/checkstyle/checkstyle/pull/8449 so that this build item passes; without switch expression syntax support, it will not.","closed","","nick-mancuso","2020-08-10T17:00:34Z","2020-08-12T14:07:09Z"
"","8703","Issue #8619: Text Blocks syntax check update for SuppressWarningsHolder","Issue #8619: Text Blocks syntax check update for SuppressWarningsHolder  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/33006852faa6fc91e8abccda0e2a98e5/raw/56dcb83c1cb3aecf93b549f39e7b9864d597375f/SuppressWarningsHolder.xml","closed","","nick-mancuso","2020-08-17T12:44:54Z","2020-08-25T20:21:20Z"
"","8712","Issue #8618: Text Blocks syntax check update for UnnecessaryParentheses","Issue #8618: Text Blocks syntax check update for UnnecessaryParentheses  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/867268e2ebbb122e77e1640bee93b8b2/raw/6316c24398eea59d85f9601a3c35c62f362efb76/UnnecessaryParentheses.xml","closed","","nick-mancuso","2020-08-18T19:29:10Z","2020-08-20T15:00:36Z"
"","8708","Issue #8617: Text Blocks syntax check update for StringLiteralEquality","Issue #8617: Text Blocks syntax check update for StringLiteralEquality  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/e04f556bfc30cd0a6d3a99552b9db694/raw/669aa65ecaa1cec614065c547494d357a8fa7655/StringLiteralEquality.xml","closed","","nick-mancuso","2020-08-17T22:35:11Z","2020-08-18T09:00:47Z"
"","8705","Issue #8616: Text Blocks syntax check update for MultipleStringLiterals","Issue #8616: Text Blocks syntax check update for MultipleStringLiterals  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/9e0d7214e926d73067bfc456e5d6ec71/raw/584f0319f0615ca7f2ffffc1585b53a2ef8db88a/MultipleStringLiterals.xml","closed","","nick-mancuso","2020-08-17T19:29:56Z","2020-08-21T16:07:25Z"
"","8706","Issue #8614: Text Blocks syntax check update for EqualsAvoidNullCheck","Issue #8614: Text Blocks syntax check update for EqualsAvoidNullCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/777c681aff07f2107556071b89f79275/raw/21e7cb5be685151d20c6210fc3e7478a60c24c4d/EqualsAvoidNull.xml","closed","","nick-mancuso","2020-08-17T20:20:59Z","2020-08-18T08:53:22Z"
"","8704","Issue #8613: Text Blocks syntax check update for AvoidEscapedUnicodeChars","Issue #8613: Text Blocks syntax check update for AvoidEscapedUnicodeChars  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/89652bf785843ea1deaeaa31839bb001/raw/cfa7c13108a4b07b7954869925c99be3717ea009/AvoidEscapedUnicodeCharacters.xml","closed","","nick-mancuso","2020-08-17T13:35:23Z","2020-08-19T06:36:14Z"
"","8610","Fix #8609: Sort Errors after Warnings","Issue #8609: sort errors after warnings","closed","","jbennett2091","2020-08-05T21:57:11Z","2020-10-25T23:16:51Z"
"","8607","Issue #8606: add .ci-temp to exclude list for xml-maven-plugin:check-format","Issue #8606  tested: ```  $ mvn verify [INFO] Scanning for projects... [INFO] Inspecting build with total of 1 modules... [INFO] Installing Nexus Staging features: [INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin [INFO]  [INFO] ------------------< com.puppycrawl.tools:checkstyle >------------------- [INFO] Building checkstyle 8.36-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- tidy-maven-plugin:1.1.0:check (validate) @ checkstyle --- [INFO]  [INFO] --- maven-enforcer-plugin:3.0.0-M3:enforce (enforce-maven) @ checkstyle --- [INFO]  [INFO] --- maven-enforcer-plugin:3.0.0-M3:enforce (enforce-versions) @ checkstyle --- [INFO]  [INFO] --- xml-maven-plugin:1.0.2:check-format (default) @ checkstyle --- [ERROR] /home/rivanov/java/github/romani/checkstyle/./.ci-temp/pom.xml:4,26:  Delete 9 spaces. Expected 2 found 11 spaces before start element  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  1.353 s [INFO] Finished at: 2020-08-05T07:10:14-07:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.codehaus.mojo:xml-maven-plugin:1.0.2:check-format  (default) on project checkstyle: There are XML formatting violations.  Check the above log for details. -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException ✘-1 ~/java/github/romani/checkstyle [8608-xml L|✔]   # APPLY Change  ~/java/github/romani/checkstyle [8608-xml L|✚ 1]  07:10 $ git diff diff --git a/pom.xml b/pom.xml index 14eb80c..dab7b7f 100644 --- a/pom.xml +++ b/pom.xml @@ -1382,6 +1382,7 @@                  src/xdocs/property_types.xml                                    target/** +                .ci-temp/**                                    src/test/resources/**                    ✔ ~/java/github/romani/checkstyle [8608-xml L|✚ 1]  $ mvn verify [INFO] Scanning for projects... [INFO] Inspecting build with total of 1 modules... [INFO] Installing Nexus Staging features: [INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin [INFO]  [INFO] ------------------< com.puppycrawl.tools:checkstyle >------------------- [INFO] Building checkstyle 8.36-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  [INFO] --- tidy-maven-plugin:1.1.0:check (validate) @ checkstyle --- [INFO]  [INFO] --- maven-enforcer-plugin:3.0.0-M3:enforce (enforce-maven) @ checkstyle --- [INFO]  [INFO] --- maven-enforcer-plugin:3.0.0-M3:enforce (enforce-versions) @ checkstyle --- [INFO]  [INFO] --- xml-maven-plugin:1.0.2:check-format (default) @ checkstyle --- [INFO]  [INFO] --- ..... ```","closed","","romani","2020-08-05T14:12:45Z","2020-08-07T12:47:56Z"
"","8620","Issue #8604: fix master build failure due to leaked pitest coverage","Issue #8604: fix master build failure due to leaked pitest coverage  The issue is that there were no tests included in `pitest-common-2` that exercised the text block lexer code within JavaParser.java.  I simply added a UT to check text block content, and now pitest is happy. Note that I have reverted the previous hack and restored coverage minimum back to 100%.  Five successful pitest-common-2 runs: https://nmancus1.github.io/pitest-common-2/202008070835/ https://nmancus1.github.io/pitest-common-2/202008070836/ https://nmancus1.github.io/pitest-common-2/202008070838/ https://nmancus1.github.io/pitest-common-2/202008070839/ https://nmancus1.github.io/pitest-common-2/202008070841/","closed","","nick-mancuso","2020-08-07T13:01:41Z","2020-08-07T19:41:07Z"
"","8603","Issue #8602: Make getter method for sourceClass in LocalizedMessage","Issue #8602: Make getter method for sourceClass in LocalizedMessage","closed","","HuGanghui","2020-08-04T06:24:51Z","2020-08-10T12:22:26Z"
"","8600","Issue #8598: OuterTypeFileName throws NPE on record definition in method","Issue #8598: OuterTypeFileName throws NPE on record definition in method  Check Regression reports: https://nmancus1.github.io/full-records-grammar-patch_check_diff_reports_2020_08_03/diff_checks-nonjavadoc-error https://nmancus1.github.io/full-records-grammar-patch_check_diff_reports_2020_08_03/diff_checks-only-javadoc-error https://nmancus1.github.io/full-records-grammar-patch_check_diff_reports_2020_08_03/diff_part1 https://nmancus1.github.io/full-records-grammar-patch_check_diff_reports_2020_08_03/diff_part2 https://nmancus1.github.io/full-records-grammar-patch_check_diff_reports_2020_08_03/diff_part3 https://nmancus1.github.io/full-records-grammar-patch_check_diff_reports_2020_08_03/diff_part4 https://nmancus1.github.io/full-records-grammar-patch_check_diff_reports_2020_08_03/diff_part5 https://nmancus1.github.io/full-records-grammar-patch_check_diff_reports_2020_08_03/diff_part6 https://nmancus1.github.io/full-records-grammar-patch_check_diff_reports_2020_08_03/diff_seventu-check-regression_part_1 https://nmancus1.github.io/full-records-grammar-patch_check_diff_reports_2020_08_03/diff_seventu-check-regression_part_2","closed","","nick-mancuso","2020-08-03T20:57:57Z","2020-08-06T13:59:35Z"
"","8578","Issue #8577: Records Support check update for ClassMemberImpliedModifier","Issue #8577: Records Support check update for ClassMemberImpliedModifier  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/862ab46a87aa3d4ffc29309420eac624/raw/8447a3976cfa3cadc15636fcd0d9e257e946796d/ClassMemberImpliedModifierBase.xml","closed","","nick-mancuso","2020-07-29T19:59:03Z","2020-08-19T18:26:03Z"
"","8707","Issue #8576: Text Blocks syntax check update for IllegalTokenText","Issue #8576: Text Blocks syntax check update for IllegalTokenText  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/d90a520a3fb437338ebe3aa8a9d38658/raw/1255542f2554faccc82686fb31a200ce5a321237/IllegalTokenTextBase.xml  Diff Regression patch config: https://gist.githubusercontent.com/nmancus1/f3228845e6fc39bef184da0c2e543017/raw/0ca5929b2da9a056286c5c8a21c0a9a5d4febb4f/IllegalTokenTextPatch.xml","closed","","nick-mancuso","2020-08-17T21:50:38Z","2020-08-18T08:55:54Z"
"","8589","Issue #8552: Removed all ""at-clause""","Issue #8552 :   - [x] Removed all ""at-clause"" terms from source code and documentation as requested.  - [x] NOT updated site/resources/styleguides/google-java-style-20180523/javaguide.html","closed","","ghost","2020-08-01T19:22:37Z","2020-08-02T16:31:43Z"
"","8592","Issue #8552: Removed all ""at-clause""","Issue #8552 :  - [x] Removed all ""at-clause"" terms from source code and documentation as requested.  - [x] NOT updated site/resources/styleguides/google-java-style-20180523/javaguide.html","closed","abandoned,","ghost","2020-08-02T16:54:13Z","2020-11-02T15:31:19Z"
"","8560","Issue #8544: all xdocs for checks are updated to use two spaces for i…","Issue #8544  xdocs for all remaining checks are updated to use two spaces for indentation.","closed","","pbludov","2020-07-26T23:00:45Z","2020-07-27T08:34:05Z"
"","8556","Issue #8544: format xml sources (xdocs checks part one)","Issue #8544  xdocs for all checks except coding, filters and whitespace","closed","","pbludov","2020-07-26T06:38:01Z","2020-07-26T22:35:00Z"
"","8555","Issue #8544: format xml sources (intellij idea configs)","Issue #8544  Intellij IDEA congifs were formatted with two spaces indented. The file `config/intellij-idea-inspections.xml` is not aligned on `=` vertically.","closed","","pbludov","2020-07-25T19:04:58Z","2020-07-26T22:34:28Z"
"","8559","Issue #8544: format xml sources (sun/google styles)","Issue #8544  Google & Sun configs are updated to use two spaces for indentation.","closed","","pbludov","2020-07-26T22:47:12Z","2020-07-27T08:34:02Z"
"","8553","Issue #8544: format xml sources (checkstyle config)","Issue #8544  Checkstyle configuration files were formatted with two spaces indented.","closed","","pbludov","2020-07-25T16:51:30Z","2020-07-25T19:06:24Z"
"","8554","Issue #8544: format xml sources (xdocs non-checks)","Issue #8544  Checkstyle all xdoc files (except the checks) were formatted with two spaces indented.  There is a questionable one: `property_types.xml`. We should discuss this. To satisfy the rules, all `}` tags should be indented __more__ than the enclosing `` tag.  There is at least three options:  * remove `` and keep only the comments * add this file to the exception list (current) * wrap long lines  Formatting for checks will be in in the next PR(s).","closed","","pbludov","2020-07-25T17:09:08Z","2020-07-26T06:20:04Z"
"","8562","Issue #8544: format xml sources (other configs)","Issue #8544  all config files are formatted with two spaces indent. This is the last PR or this issue.","closed","","pbludov","2020-07-27T08:54:28Z","2020-07-29T06:54:38Z"
"","8545","Issue #8543 format xml sources","Issue #8543   The first commit fixes the indentation for some files (whitespace only changes). The second commit turns on checking the format.","closed","","pbludov","2020-07-22T07:17:20Z","2020-07-24T05:47:18Z"
"","8550","Issue #8543: check that all xml sources are well formed","Issue #8543   all xml sources included added goal `check-format`","closed","","pbludov","2020-07-24T05:50:46Z","2020-07-25T19:07:29Z"
"","8573","Issue #8528: Records Support Check update for WhitespaceAroundCheck","Issue #8528: Records Support Check update for WhitespaceAroundCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/f7ecd2a87a5640d64af226ed3ae9ee7d/raw/4e5b8db7d29e9cab21ce0d3781182fe57d962654/whitespacearound.xml","closed","","nick-mancuso","2020-07-28T16:02:50Z","2020-07-29T07:27:56Z"
"","8599","Issue #8527: Records support check update for ParenPadCheck","Issue #8527: Records support check update for ParenPadCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/a6f1587f9fc197f015d524702028682b/raw/0d1ecc614164ae7c533e7e9e4e782be710dbbf13/ParenPadCheckBase.xml","closed","","nick-mancuso","2020-08-03T17:59:36Z","2020-08-05T07:40:22Z"
"","8622","Issue #8526: Records support check update for NoLineWrapCheck","Issue #8526: Records support check update for NoLineWrapCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/c6d77daf759ca9862d798540d001bb4b/raw/efb206b5041a69f10d7e6217b48263d34a83a76b/NoLineWrapCheck.xml","closed","","nick-mancuso","2020-08-07T15:50:56Z","2020-08-08T17:50:56Z"
"","8568","Issue #8525: Records Support Check update for MethodParamPadCheck","Issue #8525: Records Support Check update for MethodParamPadCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/4d8b08c174a597b6173a8ef08205fc53/raw/2b6d9f2983905715d4ec0f9cc8363ab6d99aa319/methodparampad.xml","closed","","nick-mancuso","2020-07-28T02:05:40Z","2020-07-31T07:03:38Z"
"","8626","Issue #8523: Records support check update for EmptyLineSeparatorCheck","Issue #8523: Records support check update for EmptyLineSeparatorCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/bdaeb2e6be6d30243edaeb6f04e44a87/raw/bc4eff061891f13d2ec1cf2beeab87fd96e4cc93/EmptyLineSeparatorCheck.xml","closed","","nick-mancuso","2020-08-07T19:50:31Z","2020-08-09T21:48:22Z"
"","8588","Issue #8522: Records Support check update for UncommentedMainCheck","Issue #8522: Records Support check update for UncommentedMainCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/d5bf0363588dd8ea815a68c47c1d59de/raw/5b94adea37ce596ff6d4174188b15b1e323225ce/UncommentedMainCheck.xml","closed","","nick-mancuso","2020-08-01T17:26:05Z","2020-08-04T04:19:18Z"
"","8587","Issue #8520: Records Support check update for OuterTypeNumberCheck","Issue #8520: Records Support check update for OuterTypeNumberCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/97e0e0b4ab44974b743a891439bc5a54/raw/13a700f73d44d11190b84bf48ac3826727d0d265/OuterTypeNumberCheck.xml","closed","","nick-mancuso","2020-08-01T16:26:02Z","2020-08-08T16:47:39Z"
"","8625","Issue #8519: Records support check update for MethodLengthCheck","Issue #8519: Records support check update for MethodLengthCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/d60f07a8d81a6c21ba2057ede8dc273e/raw/97a2b0dfe57f7b4f848c357141358a74e0ddfc59/MethodLengthCheckBase.xml  Diff Regression patch config: https://gist.githubusercontent.com/nmancus1/4d14b80af490c08a47ffa5d53dd3fb78/raw/71a32d00f44869bb72cc81d779747b3cac76620f/MethodLengthCheckPatch.xml","closed","","nick-mancuso","2020-08-07T17:32:21Z","2020-08-08T17:52:54Z"
"","8624","Issue #8518: Records support check update for MethodCountCheck","Issue #8518: Records support check update for MethodCountCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/c3db490c3255a96a6c18e55727631f54/raw/d7f46e4b1ec131bbd81e32e289c26d592f8aa8e9/MethodCountCheck.xml","closed","","nick-mancuso","2020-08-07T17:03:04Z","2020-08-08T16:52:32Z"
"","8623","Issue #8517: Records support check update for ExecutableStatementCount","Issue #8517: Records support check update for ExecutableStatementCountCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/97ac4dfcac2c99ccac09af59a7edbf53/raw/c8155e44bfb94053b3b4650e61bd1f0716ff5bea/ExecutableStatementCount.xml","closed","","nick-mancuso","2020-08-07T16:09:32Z","2020-08-08T16:57:52Z"
"","8582","Issue #8516: Records Support check update for OuterTypeFilenameCheck","Issue #8516: Records Support check update for OuterTypeFilenameCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/f52e3def2d2cee1831d1bf15b0258d86/raw/6820ccb5294a94cd5fa8b36eac8694639ac20c59/OuterTypeFilenameCheck.xml","closed","","nick-mancuso","2020-07-31T12:16:23Z","2020-08-02T11:11:51Z"
"","8727","Issue #8515: Full Records support check update for TypeNameCheck","Issue #8515: Full Records support check update for TypeNameCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/3ffe471d2d9a1f5271b2727eb09a31d5/raw/86b4d08af5b6410b77c15d1f5b5588f6786fb03e/TypeName.xml","closed","","nick-mancuso","2020-08-20T12:39:43Z","2020-08-22T15:24:58Z"
"","8586","Issue #8513: New check RecordTypeParameterNameCheck","Issue #8513: New check RecordTypeParameterNameCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/fe2c1055db690af06582ed78d9f52dd5/raw/149357483340a42b902ed1715e005cafb90c3a69/RecordTypeParameterNameCheckBase.xml  Diff Regression patch config: https://gist.githubusercontent.com/nmancus1/ed1d63e8e53dff56fd53642c43a66c76/raw/81408cd27482b5ea8a9e7746d5e7e0eb98c96016/RecordTypeParameterNameCheckPatch.xml  Contribution PR: https://github.com/checkstyle/contribution/pull/499  Link to site: https://nmancus1.github.io/site_RecordTypeParameterName _updated 8/3 per https://github.com/checkstyle/checkstyle/pull/8586#discussion_r464095811_  ~~Reviewers, please note that I included the commit from #8516 PR, since I get an OuterTypeFilenameCheck violation for two input files without it.  I didn't want to add a suppression, etc. which would have to be removed later anyway. I hope that's ok.~~","closed","","nick-mancuso","2020-08-01T15:45:32Z","2020-08-12T19:23:26Z"
"","8580","Issue #8511: Records Support check update for AbbreviationAsWordInNameCheck","Issue #8511: Records Support check update for AbbreviationAsWordInNameCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/c7859b6315e09bd45bc70e88abacb33e/raw/f39a8180dda844af0706709481f02cc2433ac37a/AbbreviationAsWordInNameCheck.xml","closed","","nick-mancuso","2020-07-29T23:23:04Z","2020-07-31T05:38:21Z"
"","8581","Issue #8506: Records Support check update for NPathComplexityCheck","Issue #8506: Records Support check update for NPathComplexityCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/7fa5a2abc278d744263c7011b3ff9826/raw/45d12d3398a05aff0046d170c14c3a8d4ac5a4ef/NPathComplexityCheck.xml","closed","","nick-mancuso","2020-07-30T16:00:02Z","2020-07-31T05:28:00Z"
"","8575","Issue #8505: Records Support check update for JavaNCSSCheck","Issue #8505: Records Support check update for JavaNCSSCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/ffc09aff638f88f32ef97514432b0a8b/raw/f66215404c0ae82f14dd1ed304282258f4d1ad36/javaancssbase.xml  Diff Regression patch config: https://gist.githubusercontent.com/nmancus1/8ed0d8354f0f97bd94dd6a8956b3af80/raw/4f176909a2e38f3bdaad51bbe44be721fc869001/javancss.xml","closed","","nick-mancuso","2020-07-29T01:26:41Z","2020-08-12T06:18:06Z"
"","8628","Issue #8504: Records support check update for CyclomaticComplexityCheck","Issue #8504: Records support check update for CyclomaticComplexityCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/dc0a2fb76fe65de2426be1bb0549c3f7/raw/1b7f21d8b6a4908596177cd279b5ca5aa67512d0/CyclomaticComplexity.xml","closed","","nick-mancuso","2020-08-07T23:20:29Z","2020-08-08T17:00:20Z"
"","8713","Issue #8503: Full Records support check update for ClassFanOutComplexity","Issue #8503: Full Records support check update for ClassFanOutComplexity  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/8cf53072e2547c55c803b343bb5c6180/raw/d8cd023a7bd5f0c902c7c2bf356dd9a6213d15c6/ClassFanOutComplexity.xml","closed","","nick-mancuso","2020-08-19T13:17:39Z","2020-08-21T13:58:50Z"
"","8723","Issue #8502: Full Records support check update for ClassDataAbstractionCoupling","Issue #8502: Full Records support check update for ClassDataAbstractionCoupling  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/1e84651a92ee6028a0d669e85c869fbe/raw/18ea8ff7b9f8d809408b2f150d9fb5b59d6cfc56/ClassDataAbstractionCoupling.xml","closed","","nick-mancuso","2020-08-20T02:48:38Z","2020-08-23T02:05:37Z"
"","8629","Issue #8501: Records support check update for BooleanExpressionComplexity","Issue #8501: Records support check update for BooleanExpressionComplexityCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/4b2c936ce7126095e94192bd20b74f20/raw/48cf09835dfbac3b67aa7414b084dc8f2a5e3594/BooleanExpressionComplexityCheck.xml","closed","","nick-mancuso","2020-08-08T00:46:20Z","2020-08-08T17:28:10Z"
"","8728","Issue #8499: Full Records support check update for WriteTagCheck","Issue #8499: Full Records support check update for WriteTagCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/dd7ac625f531dc28e26750a1e8119389/raw/42f1c711b4ddbfaff1793ab9bb517700f4f80f3f/WriteTag.xml","closed","","nick-mancuso","2020-08-20T13:21:28Z","2020-08-22T15:41:44Z"
"","8751","Issue #8498: Full Records support check update for MissingJavadocTypeCheck","Issue #8498: Full Records support check update for MissingJavadocTypeCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/5f84eab1e6c2f1ffef90024fecc0658f/raw/3f0f3e4b677dd27bbe07959b1caba6475d514844/MissingJavadocType.xml","closed","","nick-mancuso","2020-08-21T18:59:55Z","2020-08-22T15:02:58Z"
"","8729","Issue #8497: Full Records support check update for MissingJavadocMethod","Issue #8497: Full Records support check update for MissingJavadocMethod  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/a00a585596295f8ac1fe014cd367c4a9/raw/5ff6133ffa053d5dc738a0499fe343edbc55bc00/MissingJavadocMethod.xml","closed","","nick-mancuso","2020-08-20T13:47:34Z","2020-08-22T15:04:54Z"
"","8532","Issue #8496: failure comment added (for diff/single report generation)","Issue #8496 If something goes wrong during report generation - bot sends comment with description and link to job.  Example: https://github.com/jack1515/checkstyle/pull/4","closed","","kate2513","2020-07-17T10:30:27Z","2020-07-17T14:26:04Z"
"","8500","Issue #8495: added trigger on editing comment for diff report generation","Issue #8495","closed","","kate2513","2020-07-16T13:25:43Z","2020-07-16T14:31:23Z"
"","8730","Issue #8494: Full Records support check update for JavadocTypeCheck","Issue #8494: Full Records support check update for JavadocTypeCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/05d5537a7a3347085535bc8627d23412/raw/0a9bf4f4ac1a674a4d58e5fe10be127385c57119/JavadocType.xml","closed","","nick-mancuso","2020-08-20T14:25:20Z","2020-08-22T15:06:36Z"
"","8717","Issue #8493: Full Records support check update for JavadocStyleCheck","Issue #8493: Full Records support check update for JavadocStyleCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/95d58c64cac571de4688100840caeedf/raw/7b5c7ff8c7f155875b84464fd882927cde6d4e6e/JavadocStyle.xml","closed","","nick-mancuso","2020-08-19T17:51:27Z","2020-08-22T15:01:17Z"
"","8731","Issue #8492: Full Records support check update for JavadocMethodCheck","Issue #8492: Full Records support check update for JavadocMethodCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/fe7e39629a7dce370804c1433e30519e/raw/3eefdc7da830c260414f113bafb1881239c72216/JavadocMethod.xml","closed","","nick-mancuso","2020-08-20T15:40:39Z","2020-08-22T15:12:46Z"
"","8737","Issue #8490: Full Records support check update for AtclauseOrderCheck","Issue #8490: Full Records support check update for AtclauseOrderCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/d2967a1cd1ca512393fad295ceac21ae/raw/792d8e6cd3be4a27777c53d06fa7ae49b04ca930/AtclauseOrderBase.xml  Diff Regression patch config: https://gist.githubusercontent.com/nmancus1/795d95a929b34d12ffefcaaaff3b02fe/raw/bfb376bdbbbd22d254871274b8931ba4f9ace8e4/AtclauseOrderPatch.xml  Please note that the first commit, https://github.com/checkstyle/checkstyle/commit/0cbac0f6af41b0eac5aa483a508d3a58236715b0 is not merged yet, and should not be reviewed here.","closed","","nick-mancuso","2020-08-20T21:49:56Z","2020-08-24T02:08:11Z"
"","8718","Issue #8489: Full Records support check update for CommentsIndentation","Issue #8489: Full Records support check update for CommentsIndentation  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/699d756d592d30634677ae63816bce6d/raw/795e2dc75b7d72ef7aae3ac834b2b5a44186ce20/CommentsIndentation.xml  This check was already working thanks to the `isTypeDeclaration()` utility method we introduced after #8489 was opened, but here is a UT to make sure that this check continues to work.","closed","","nick-mancuso","2020-08-19T18:23:12Z","2020-08-22T15:16:44Z"
"","8564","Issue #8488: Records Support Check update for UnusedImportsCheck","Issue #8488: Records Support Check update for UnusedImportsCheck  This PR updates UnusedImportsCheck to function as intended with Java 14 record definitions and compact constructors.   Diff Regression projects: https://raw.githubusercontent.com/nmancus1/nmancus1.github.io/master/check-update-configs/projects-to-test-on.properties  Diff Regression config: https://raw.githubusercontent.com/nmancus1/nmancus1.github.io/master/check-update-configs/UnusedImports.xml","closed","","nick-mancuso","2020-07-27T14:15:01Z","2020-07-31T05:53:00Z"
"","8735","Issue #8485: Full Records support check update for OneTopLevelClassCheck","Issue #8485: Full Records support check update for OneTopLevelClassCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/691e940210642826eebed0d8b53287df/raw/7911778dd15f17798934f98ccce9f578a4608793/OneTopLevelClass.xml  This check was already working, thanks again to `isTypeDeclaration()`, but here is a UT to make sure that it stays that way.","closed","","nick-mancuso","2020-08-20T21:03:42Z","2020-08-22T15:28:10Z"
"","8745","Issue #8482: Full Records support check update for InnerTypeLastCheck","Issue #8482: Full Records support check update for InnerTypeLastCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/8515857312e9bbece91a4bdfac250eff/raw/318d966bda3e8ce14f72ee3b72bf1b89aebd43e2/InnerTypeLast.xml","closed","","nick-mancuso","2020-08-21T13:17:05Z","2020-08-22T15:33:02Z"
"","8750","Issue #8476: Full Records support check update for UnnecessarySemicolonAfterTypeMember","Issue #8476: Full Records support check update for UnnecessarySemicolonAfterTypeMember  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/9362ea47ae8cdad27f177d6fe273ca07/raw/cdfdd2b26974ace11fe5eaa9c3cf099d0baa737b/UnnecessarySemicolonAfterTypeMemberDeclaration.xml","closed","","nick-mancuso","2020-08-21T18:19:32Z","2020-08-22T15:39:41Z"
"","8749","Issue #8475: Full Records support check update for UnnecessarySemicolonAfterOuterType","Issue #8475: Full Records support check update for UnnecessarySemicolonAfterOuterType  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/e42e92f84144f38a44eb06d66d68b8ac/raw/6adce6c8baf108228d2f0fcf37ea55a27b2cc39d/UnnecessarySemicolonAfterOuterTypeDeclaration.xml","closed","","nick-mancuso","2020-08-21T17:53:37Z","2020-08-22T15:37:46Z"
"","8579","Issue #8473: Records Support check update for RequireThisCheck","Issue #8473: Records Support check update for RequireThisCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/c68d6dc8f36ee2668649b7ce629a6fdb/raw/208d9609dc79c8532f27ba03444cd3f73379e7b7/RequireThisCheck.xml","closed","","nick-mancuso","2020-07-29T22:17:11Z","2020-08-01T09:20:20Z"
"","8746","Issue #8471: Full Records check update for OverloadMethodsDeclarationOrder","Issue #8471: Full Records check update for OverloadMethodsDeclarationOrder  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/8288e98333d2e8c8498918c82a1517de/raw/fe5ae98fd76c60a136073bbfd631fcd39bc93018/OverloadMethodsDeclarationOrder.xml","closed","","nick-mancuso","2020-08-21T13:40:28Z","2020-08-25T20:02:17Z"
"","8744","Issue #8468: Full Records support check update for IllegalTypeCheck","Issue #8468: Full Records support check update for IllegalTypeCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/3f2d52990736809073f8f2d29a9685c4/raw/b7cccb03b25e1e00fc01991311a0bd5402ee35d6/IllegalType.xml","closed","","nick-mancuso","2020-08-21T12:00:52Z","2020-08-22T15:31:09Z"
"","8724","Issue #8466: Full Records support check update for HiddenFieldCheck","Issue #8466: Full Records support check update for HiddenFieldCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/25f5c867dfd034ee753c2be3f1722051/raw/7d7cc888afef35a32403f4c1b95292bdf226aeff/HiddenField.xml","closed","","nick-mancuso","2020-08-20T05:03:56Z","2020-08-22T15:22:52Z"
"","8566","Issue #8464: Records Support Check update for EqualsAvoidNullCheck","Issue #8464: Records Support Check update for EqualsAvoidNullCheck  Diff Regression projects: https://raw.githubusercontent.com/nmancus1/nmancus1.github.io/master/check-update-configs/projects-to-test-on.properties  Diff Regression config: https://raw.githubusercontent.com/nmancus1/nmancus1.github.io/master/check-update-configs/EqualsAvoidNull.xml","closed","","nick-mancuso","2020-07-27T17:56:08Z","2020-08-02T11:12:57Z"
"","8716","Issue #8463: Full Records support check update for DeclarationOrderCheck","Issue #8463: Full Records support check update for DeclarationOrderCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/1882c3059b167406addea3f5dbc0a90f/raw/4bfc754a443796b85b69044768665d898aa71a1c/DeclarationOrder.xml","closed","","nick-mancuso","2020-08-19T16:01:03Z","2020-08-22T09:12:35Z"
"","8574","Issue #8462:  Records Support Check update for CovariantEqualsCheck","Issue #8462:  Records Support Check update for CovariantEqualsCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/cf669c00a1f79c51c7c02f3d67b3faae/raw/0a4e8939e2ca5b6ff648e3be5a0979ffd1182607/covariantequals.xml","closed","","nick-mancuso","2020-07-28T18:37:09Z","2020-07-29T22:17:50Z"
"","8714","Issue #8460: Full Records support check update for RightCurlyCheck","Issue #8460: Full Records support check update for RightCurlyCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/ce849539cf1127e8183f787ac2a19b05/raw/5a757494e4eedf8b7fc0372065487529cb8798d3/RightCurlyBase.xml  Diff Regression patch config: https://gist.githubusercontent.com/nmancus1/94d8fbb171b5cda7a99feccaf1cb73d3/raw/a34a28fc2ab9022a431b7674218e9d294d1a7a69/RightCurlyPatch.xml","closed","","nick-mancuso","2020-08-19T14:33:09Z","2020-08-22T09:06:37Z"
"","8461","Issue #8459: PR trigger removed from report generation action","Issue #8459","closed","","kate2513","2020-07-15T13:22:06Z","2020-07-16T06:18:34Z"
"","8715","Issue #8457: Full Records support check update for LeftCurlyCheck","Issue #8457: Full Records support check update for LeftCurlyCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/a79c4ba878d218c00442fef08adadbc9/raw/5b01515badd240f5319f8ccbfe9f99869fde77f1/LeftCurly.xml","closed","","nick-mancuso","2020-08-19T15:35:18Z","2020-08-22T09:09:46Z"
"","8740","Issue #8455: Full Records support check update for AnnotationOnSameLineCheck","Issue #8455: Full Records support check update for AnnotationOnSameLineCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/edc0e8fd79b3a2cdf8e5786d438d6e47/raw/3a326da3930b6cca86a2ceff8fe2cb8aaedb881c/AnnotationOnSameLine.xml  Please note that commit https://github.com/checkstyle/checkstyle/pull/8740/commits/216fcca1a34b1a47c122323c28f135be7427a3ba is not under review here, but is needed for functionality of this check.","closed","","nick-mancuso","2020-08-21T01:17:18Z","2020-08-23T07:12:35Z"
"","8739","Issue #8454: Full Records support check update for AnnotationLocation","Issue #8454: Full Records support check update for AnnotationLocation  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/a4734fee43d620acb672d07800df9591/raw/ba97fafc153ec37d1ffce47210fbe14fbc772eda/AnnotationLocation.xml  ~~Please note that commit https://github.com/checkstyle/checkstyle/pull/8739/commits/61baa3c6e5d7b2c7ca3f5fdc056fbcdfb117bcb3 is not under review here, but is needed for functionality of this check.~~","closed","","nick-mancuso","2020-08-21T00:37:18Z","2020-08-23T15:33:40Z"
"","8536","Issue #8448: added using different configs to diff report generation pipeline","Issue #8448  Added generation diff report with different (base and patch) configs. The description of PR should contain one more line: Diff Regression patch config: {{URI to patch config file}}  Something like this: Diff Regression projects: https://raw.githubusercontent.com/checkstyle/contribution/master/checkstyle-tester/projects-to-test-on.properties Diff Regression config: https://raw.githubusercontent.com/checkstyle/contribution/master/checkstyle-tester/my_check.xml Diff Regression patch config: https://raw.githubusercontent.com/kate2513/kate2513.github.io/master/patch_config.xml","closed","","kate2513","2020-07-17T18:15:13Z","2020-07-17T20:16:06Z"
"","8458","Issue #8446: changed to using action from contribution repo","Issue #8446","closed","","kate2513","2020-07-15T13:06:51Z","2020-07-15T15:42:58Z"
"","8417","Issue #8407: new Check: PatternVariableName","Issue #8407: new Check: PatternVariableName  We are introducing this check to ensure that pattern variable names conform to a predefined pattern.  Since I could not find mention of pattern variables in the sun or google style guides, I have omitted this check from those configurations.  I have added the check to `checkstyle_checks.xml`, using the default pattern `^[a-z][a-zA-Z0-9]*$`.  Check regression report : https://checkstyle-reports-java14.s3.amazonaws.com/reports/diff_check_patternvariablename/index.html Contribution PR: https://github.com/checkstyle/contribution/pull/492","closed","","nick-mancuso","2020-07-07T23:33:14Z","2020-07-26T20:08:13Z"
"","8415","Issue #8397: update css to treat mobile devices in horizontal layout as mobile","Issue #8397  https://romani.github.io/8397-pixel2xl/site/index.html  ![Screenshot_20200708-064715](https://user-images.githubusercontent.com/812984/86926514-04479580-c0e7-11ea-9ada-f4d9ec3c11ab.png)","closed","","romani","2020-07-07T14:42:44Z","2020-07-10T14:02:17Z"
"","8412","Issue #8387: Add support for enhanced instanceof syntax for AbbreviationAsWordInNameCheck","Issue #8387: enhanced instanceof check validation for AbbreviationAsWordInNameCheck(#7290)  This PR will add support for Java 14 enhanced instanceof syntax to AbbreviationAsWordInNameCheck.  ~~Reviewers, please note that the first commit is from the instanceof PR, #8401.~~ Commit has been dropped since #8401 was merged. Check regression report: https://checkstyle-reports-java14.s3.amazonaws.com/reports/diff_instanceof-AbbreviationAsWordInNameCheck/index.html","closed","","nick-mancuso","2020-07-06T18:04:01Z","2020-07-10T23:46:52Z"
"","8535","Issue #8365: enhanced instanceof check validation: IllegalTypeCheck","Issue #8365: enhanced instanceof check validation: IllegalTypeCheck  This PR will add support for PATTERN_VARIABLE_DEF tokens, and enhanced instanceof syntax,  to IllegalTypeCheck.","closed","","nick-mancuso","2020-07-17T18:13:15Z","2020-07-19T05:10:49Z"
"","8413","Issue #8364: Add support for enhanced instanceof syntax to HiddenFieldCheck(#7290)","Issue #8364: Add support for enhanced instanceof syntax to HiddenFieldCheck(#7290)  ~~Reviewers, please note that the first commit is from the instanceof PR, #8401.~~ Commit has been dropped now that #8401 was merged.  Check regression report: https://checkstyle-reports-java14.s3.amazonaws.com/reports/diff_instanceof-HiddenFieldCheck/index.html","closed","","nick-mancuso","2020-07-07T01:08:35Z","2020-07-19T04:19:01Z"
"","8529","Issue #8362: Enhanced instanceof support for EqualsAvoidNullCheck","Issue #8362: Enhanced instanceof support for EqualsAvoidNullCheck  This PR adds support for PATTERN_VARIABLE_DEF tokens, and therefore enhanced instanceof, for EqualsAvoidNullCheck.","closed","","nick-mancuso","2020-07-17T05:18:05Z","2020-07-19T18:47:55Z"
"","8393","Issue #8355: StaticVariableName check throws NPE when used on Java14 enhanced instanceof syntax","Issue #8355: StaticVariableName check throws NPE when used on Java14 enhanced instanceof syntax  First commit is from #8294 for Issue #7290, which is not merged yet.","closed","","nick-mancuso","2020-07-02T13:54:30Z","2020-07-06T03:53:58Z"
"","8392","Issue #8354: MemberName check throws NPE when parsing enhanced instanceof","Issue #8354:MemberName check throws NPE when used on Java14 enhanced instanceof syntax  **Reviewers, please note:**  **First commit** is from #8294 for Issue #7290, which is not merged yet.  **Second commit** is a new method created in ScopeUtil.java; since almost all the fixes for NPE's caused by the new Java14 enhanced instanceof syntax will use this logic, I introduced a utility method to make it clear that we are checking if a `VARIABLE_DEF` node is a child of a `PATTERN_DEF` node (therefore it is a binding/local variable), instead of simply checking if a node has modifiers or not. This will also make this logic more extensible in the future.","closed","","nick-mancuso","2020-07-01T13:53:56Z","2020-07-06T17:20:10Z"
"","8421","Issue #8345: Add TokenUtil.isTypeDeclaration method","Issue #8345: Add TokenUtil.isTypeDeclaration method  ~~Reviewers, I have added the records support commits to this so we can immediately add `TokenTypes.RECORD_DEF` to `TokenUtil.isTypeDeclaration()`.  I will rebase once we merge #8293.~~  The second commit is the refactoring of `ScopeUtil.java` to use `TokenUtil.isTypeDeclaration()`.","closed","","nick-mancuso","2020-07-08T15:55:55Z","2020-07-18T13:40:24Z"
"","8326","Issue #8325: use maven 3.6.3-jdk-11 for wercker build","Issue #8325","closed","","pbludov","2020-06-19T08:52:47Z","2020-06-21T08:37:26Z"
"","8313","Issue #8308: need to introduce ""id"" rule (#8023)","Issue #8308: need to introduce ""id"" rule to solve keyword as identifier problem.  Per discussion at #8308, in order to solve the ""keyword as identifier"" problem, which is introduced by the inclusion of the ""records"" feature of Java 14, we need to add this rule to Checkstyle's grammar.  Please see Check and AST regression reports here: https://github.com/checkstyle/checkstyle/issues/8308#issuecomment-642053460","closed","","nick-mancuso","2020-06-10T15:21:02Z","2020-06-25T14:05:44Z"
"","8287","Issue #8286: remove rss and sourceforge banners","Issue #8286  all maintainers need to review this PR to be aware of this change.","closed","","romani","2020-05-31T15:22:41Z","2020-06-03T06:03:03Z"
"","8285","Issue 8283 fix import tests","Issue #8283   * Fix import order inputs * Rename test classes with deprecated methods to have Input prefix * Classes `AllChecksTest` and `XdocsPagesTest` are explicitly ignored","closed","","pbludov","2020-05-31T13:02:35Z","2020-06-02T08:39:29Z"
"","8282","Issue #8279: ignore certificate of sonarcloud","Issue #8279  I am not sure I can send PR to project to ignore certificate.","closed","","romani","2020-05-30T14:09:18Z","2020-05-30T14:57:43Z"
"","8276","Issue #8275: verify tests with spotbugs","Issue #8275  This build should fail until #8263 is fixed.","closed","","pbludov","2020-05-30T10:26:50Z","2020-05-30T13:36:48Z"
"","8284","Issue #8274: Update java.g to allow new tokens to be added","Issue #8274: Update java.g to allow new tokens to be added","closed","","nick-mancuso","2020-05-31T01:38:24Z","2020-06-04T20:40:56Z"
"","8272","Issue #8268: Cleanup .ci-temp folder after release notes generation","Issue #8268: Cleanup .ci-temp folder after release notes generation","closed","","nick-mancuso","2020-05-29T14:13:27Z","2020-05-29T14:55:46Z"
"","8422","Issue #8267: Implement full records support","Issue #8267: Implement full records support  This PR will add full support for the Java 14 records syntax.  From [JEP](https://openjdk.java.net/jeps/384): _**Java Grammar**_ _RecordDeclaration:_   _{ClassModifier} `record` TypeIdentifier [TypeParameters]_     _RecordHeader [SuperInterfaces] RecordBody_  _RecordHeader:_  _`(` [RecordComponentList] `)`_  _RecordComponentList:_  _RecordComponent { `,` RecordComponent}_  _RecordComponent:_  _{Annotation} UnannType Identifier_  _VariableArityRecordComponent_  _VariableArityRecordComponent:_  _{Annotation} UnannType {Annotation} `...` Identifier_  _RecordBody:_   _`{` {RecordBodyDeclaration} `}`_  _RecordBodyDeclaration:_   _ClassBodyDeclaration_   _CompactConstructorDeclaration_  _CompactConstructorDeclaration:_  _{Annotation} {ConstructorModifier} SimpleTypeName ConstructorBody_  Note that I've taken some liberties with the java grammar, in order to reuse existing code and reduce extraneous rules in the grammar file.  ~~_Reviewers, please note that the commits from #8293 are temporarily on this PR, since I built from them. Once #8293 is merged, I will rebase._~~","closed","","nick-mancuso","2020-07-08T18:59:50Z","2020-07-27T19:33:16Z"
"","8263","Issue #8262: ignore jacoco internal field in spotbugs validation","Issue #8262  `$jacocoData` is an instrumented field, not a real one.","closed","","pbludov","2020-05-28T08:02:30Z","2020-05-30T10:53:19Z"
"","8257","Issue #8256: convert ant's echo to info level","Issue #8256","closed","","romani","2020-05-26T14:05:58Z","2020-11-07T15:59:21Z"
"","8229","Issue #8228: Update CIs to validate empty output of 'git status' afte…","Issue #8228: Update CIs to validate empty output of 'git status' after execution","closed","","nick-mancuso","2020-05-10T16:32:21Z","2020-05-20T09:17:14Z"
"","8220","Issue #8219: show grammar classe in reports and update minimum values","Issue #8219","closed","","romani","2020-05-02T16:11:04Z","2020-05-02T18:13:58Z"
"","8188","Issue #8169: Making regex to validate missed space in comments in non files","Issue #8169: Making regex to validate missed space in comments in non main files","closed","","HuGanghui","2020-04-25T11:29:49Z","2020-05-21T11:34:24Z"
"","8164","Issue #8118: Enforce -e for all maven commands","Issue #8118: Enforce -e for all maven commands I add RegexpSingleline to finish this task and I change  ```java (mvn [^-])|(mvn \-[^e]) ``` to  ```java (mvn [^-])|(mvn \-[^e\-v]) ``` to avoid false positive on  ```java mvn --version mvn -version ```","closed","","HuGanghui","2020-04-22T06:58:21Z","2020-04-24T13:41:29Z"
"","8060","Issue #8051: set up semaphore CI","Issue #8051   - [x] Badge","closed","","pbludov","2020-04-09T17:01:16Z","2020-04-13T20:22:43Z"
"","8293","Issue #8023: Update grammar for initial record support","Issue #8023: Update grammar for initial record support ### TO DO: - [x] Unit tests (including ASTRegressionTest after https://github.com/checkstyle/checkstyle/pull/8290# is merged)  - [x] Modify grammar to avoid ""record"" in variable declaration: https://github.com/checkstyle/checkstyle/blob/2c33bb063dea4be60b131c8d593d2dc074e90855/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14Records.java#L103-L104   - [x] Modify grammar to handle no arg record constructor: https://github.com/checkstyle/checkstyle/blob/2c33bb063dea4be60b131c8d593d2dc074e90855/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14Records.java#L46-L49   _Mentors, please feel free to edit this post to add more items in TODO, or reply and I will add them._","closed","","nick-mancuso","2020-06-01T19:37:14Z","2020-07-09T07:19:11Z"
"","8290","Issue #8023: Add input file for Java14 records","Issue #8023: Add records input  Examples taken from: https://blogs.oracle.com/javamagazine/records-come-to-java https://alidg.me/blog/2020/2/9/java14-records-in-depth https://openjdk.java.net/jeps/359  compilation is checked by: https://github.com/checkstyle/checkstyle/blob/15ba4ccd6adfa2486658d5b36588831c1a1006d3/.travis.yml#L289-L293","closed","","nick-mancuso","2020-06-01T12:53:16Z","2020-06-10T05:42:21Z"
"","8029","Issue #8014: resolve travis config issues","Issue #8014  https://docs.travis-ci.com/user/build-config-validation/","closed","","rnveach","2020-04-04T01:32:52Z","2020-04-04T13:49:45Z"
"","8041","Issue #7969: drop jdk13 build, add jdk14 build","Issue #7969  JDK13 is no more supported, we are moving to jdk14. Except the OSX build, since an xcode image with jdk14 for OSX is not released yet. We have no files with jdk13 specific syntax, so travis stage javac13 can be safely replaced with javac14.","closed","","pbludov","2020-04-06T06:08:36Z","2020-04-08T17:56:45Z"
"","8046","Issue #7833: Create code of conduct","Issue #7833","closed","","akki111singh","2020-04-06T21:09:11Z","2020-04-28T15:52:58Z"
"","8292","Issue #7766: Update AbstractChecks to log DetailAST - VariableDeclarationUsageDistance","Issue #7766: Update AbstractChecks to log DetailAST - VariableDeclarationUsageDistance","closed","","HuGanghui","2020-06-01T16:49:16Z","2020-06-04T14:25:29Z"
"","8711","Issue #7763: Update AbstractChecks to log DetailAST - TrailingComment","Issue #7763: Update AbstractChecks to log DetailAST - TrailingComment  from Roman: it is not implementation that I would like to have in this Check ideally, but let move refactoring to new issue. https://github.com/checkstyle/checkstyle/issues/9009 https://github.com/checkstyle/checkstyle/issues/9010  Diff Regression projects: https://gist.githubusercontent.com/HuGanghui/709e0a8266eb1656488051b4cfc9161f/raw/5731ab3b42c995e5823e02a34a00c25241bcec1d/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/HuGanghui/d3b892a11fa52287ec1723246f12718f/raw/9576b09b677ea0cf838aa3ae451519597efd46ca/TrailingComment.xml","closed","","HuGanghui","2020-08-18T11:58:40Z","2020-12-02T16:05:45Z"
"","8298","Issue #7762: Update AbstractChecks to log DetailAST - TodoComment","Issue #7762: Update AbstractChecks to log DetailAST - TodoComment","closed","","HuGanghui","2020-06-03T01:42:49Z","2020-06-04T07:43:59Z"
"","8087","Issue #7756: Update AbstractChecks to log DetailAST - OverloadMethods…","Issue #7756: Update AbstractChecks to log DetailAST - OverloadMethodsDeclarationOrder.  Diff report: https://nmancus1.github.io/Issue-7756/diff/index.html","closed","","nick-mancuso","2020-04-13T07:47:28Z","2020-04-15T01:14:44Z"
"","8295","Issue #7747: Update AbstractChecks to log DetailAST - MissingJavadocType","Issue #7747: Update AbstractChecks to log DetailAST - MissingJavadocType","closed","","HuGanghui","2020-06-02T00:19:07Z","2020-06-04T07:45:02Z"
"","8297","Issue #7739: Update AbstractChecks to log DetailAST - JavadocMethod","Issue #7739: Update AbstractChecks to log DetailAST - JavadocMethod  this PR is based on comments in Issue #7739 and PR #8214    diff report: https://huganghui.github.io/7739-JavadocMethod//diff/","closed","","HuGanghui","2020-06-02T06:56:25Z","2020-06-13T06:27:23Z"
"","8304","Issue #7734: Update AbstractChecks to log DetailAST - Indentation","Issue #7734: Update AbstractChecks to log DetailAST - Indentation  this PR is based on comments in Issue #7734 and PR #8038  **ATTENTION:** PR is on hold to while #8038 is active.","closed","blocked,","HuGanghui","2020-06-04T09:19:32Z","2020-07-25T15:00:45Z"
"","8296","Issue #7730: Update AbstractChecks to log DetailAST - EmptyLineSeparator","Issue #7730: Update AbstractChecks to log DetailAST - EmptyLineSeparator       /var/tmp $ javac Test.java ```java package checkstyle_demo.ast_emptylineseparator;  class Test {     private int k; // line 4       private static void foo() {} // line7  } ``` /var/tmp $ cat config.xml ```xml                                                       ``` ATTENTION: `8.34-SNAPSHOT-all.jar` is used so violation got column  ``` /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar /var/tmp/checkstyle-8.34-SNAPSHOT-all.jar -c config.xml Test.java ``` ```sh Starting audit... [ERROR] /var/tmp/src/main/java/checkstyle_demo/ast_emptylineseparator/Test.java:7:5: 'METHOD_DEF' has more than 1 empty lines before. [EmptyLineSeparator] Checkstyle ends with 1 errors. Audit done.  Process finished with exit code 1 ```","closed","","HuGanghui","2020-06-02T03:21:05Z","2020-06-09T06:31:58Z"
"","8870","Issue #7685: Update doc for AvoidStaticImport","Issue #7685  ![exampletwo](https://user-images.githubusercontent.com/23631699/94930385-9b45a300-04c6-11eb-9ef5-53c62617fd5d.PNG)  Output of example 1:      $ cat config.xml                                                     $ cat Test.java     import static java.lang.Math.pow;          // violation     import static java.lang.System.out;        // violation     import java.io.*;                          // OK     import java.util.*;                        // OK      $ java -jar checkstyle-8.36.2-all.jar -c config.xml Test.java     Starting audit...     [ERROR] D:\OpenSource\TestCommit\Test.java:1:29: Using a static member import should be avoided - java.lang.Math.pow. [AvoidStaticImport]     [ERROR] D:\OpenSource\TestCommit\Test.java:2:31: Using a static member import should be avoided - java.lang.System.out. [AvoidStaticImport]     Audit done.     Checkstyle ends with 2 errors.  Output of example 2:      $ cat config.xml                                                                           $ cat Test.java     import static java.lang.Math.*;            // OK     import static java.lang.System.out;        // OK     import static java.lang.Integer.parseInt;  // violation     import java.io.*;                          // OK     import java.util.*;                        // OK      $ java -jar checkstyle-8.36.2-all.jar -c config.xml Test.java     Starting audit...     [ERROR] D:\OpenSource\TestCommit\Test.java:3:32: Using a static member import should be avoided - java.lang.Integer.parseInt. [AvoidStaticImport]     Audit done.     Checkstyle ends with 1 errors.","closed","","AmrDeveloper","2020-10-01T20:19:26Z","2020-10-04T15:05:23Z"
"","8875","Issue #7665: add examples for EmptyStatement","Issue #7665   ![EmptyStatement](https://user-images.githubusercontent.com/54651212/95002374-0a370080-0588-11eb-9fe7-2640b4edc5b6.PNG)  ``` cat config.xml                        cat Test.java public class Test {   public void foo() {     int i = 5;     if (i > 3); // violation, semicolon "";"" right after if statement       i++;     for (i = 0; i < 5; i++); // violation       i++;     while (i < 10) // OK       i++;   } }  java -jar .\checkstyle-8.36.1-all.jar -c config.xml Test.java Starting audit... [ERROR] E:\checkstyle-playground\Test.java:4:15: Empty statement. [EmptyStatement] [ERROR] E:\checkstyle-playground\Test.java:6:32: Empty statement. [EmptyStatement] Audit done. Checkstyle ends with 2 errors. ```","closed","","anhminhtran235","2020-10-03T21:55:49Z","2020-10-04T15:01:11Z"
"","8803","Issue #7651: add examples for NestedForDepth","Issue #7651  ![image](https://user-images.githubusercontent.com/812984/92593456-00a2cd00-f256-11ea-8523-b70c19a61902.png)  ``` $ cat config.xml                          $ cat Test.java  class Test {  public void foo() {     for(int i=0; i","closed","","romani","2020-09-07T16:02:03Z","2020-11-07T15:59:11Z"
"","8812","Issue #7644: Update doc for IllegalThrows","Issue #7644  ![image](https://user-images.githubusercontent.com/812984/92427192-b5e36100-f140-11ea-8fbd-be0dae62e0cd.png)   ``` $ cat config.xml                        $ cat Test.java  public class Test {   public void func1() throws RuntimeException {} // violation   public void func2() throws Exception {}  // ok   public void func3() throws Error {}  // violation   public void func4() throws Throwable {} // violation   public void func5() throws NullPointerException {} // ok   @Override   public void toString() throws Error {} // ok }$ java $RUN_LOCALE -jar /var/tmp/checkstyle-8.33-all.jar -c config.xml Test.java Starting audit... [ERROR] /var/tmp/Test.java:2:30: Throwing 'RuntimeException' is not allowed. [IllegalThrows] [ERROR] /var/tmp/Test.java:4:30: Throwing 'Error' is not allowed. [IllegalThrows] [ERROR] /var/tmp/Test.java:5:30: Throwing 'Throwable' is not allowed. [IllegalThrows] Audit done. Checkstyle ends with 3 errors. $  $  $  $  $ cat config.xml                                        $ cat Test.java  public class Test {   public void func1() throws RuntimeException {} // violation   public void func2() throws Exception {}  // ok   public void func3() throws Error {}  // violation   public void func4() throws Throwable {} // violation   public void func5() throws NullPointerException {} // ok   @Override   public void toString() throws Error {} // ok }$ java $RUN_LOCALE -jar /var/tmp/checkstyle-8.33-all.jar -c config.xml Test.java Starting audit... [ERROR] /var/tmp/Test.java:6:30: Throwing 'NullPointerException' is not allowed. [IllegalThrows] Audit done. Checkstyle ends with 1 errors. $  $  $  $  $  $ cat config.xml                                        $ cat Test.java  public class Test {   public void func1() throws RuntimeException {} // violation   public void func2() throws Exception {}  // ok   public void func3() throws Error {}  // violation   public void func4() throws Throwable {} // violation   public void func5() throws NullPointerException {} // ok   @Override   public void toString() throws Error {} // ok }$ java $RUN_LOCALE -jar /var/tmp/checkstyle-8.33-all.jar -c config.xml Test.java Starting audit... [ERROR] /var/tmp/Test.java:4:30: Throwing 'Error' is not allowed. [IllegalThrows] [ERROR] /var/tmp/Test.java:5:30: Throwing 'Throwable' is not allowed. [IllegalThrows] Audit done. Checkstyle ends with 2 errors. $  $  $  $  $  $  $ cat config.xml                                        $ cat Test.java  public class Test {   public void func1() throws RuntimeException {} // violation   public void func2() throws Exception {}  // ok   public void func3() throws Error {}  // violation   public void func4() throws Throwable {} // violation   public void func5() throws NullPointerException {} // ok   @Override   public void toString() throws Error {} // ok }$ java $RUN_LOCALE -jar /var/tmp/checkstyle-8.33-all.jar -c config.xml Test.java Starting audit... [ERROR] /var/tmp/Test.java:2:30: Throwing 'RuntimeException' is not allowed. [IllegalThrows] [ERROR] /var/tmp/Test.java:4:30: Throwing 'Error' is not allowed. [IllegalThrows] [ERROR] /var/tmp/Test.java:5:30: Throwing 'Throwable' is not allowed. [IllegalThrows] [ERROR] /var/tmp/Test.java:8:33: Throwing 'Error' is not allowed. [IllegalThrows] Audit done. Checkstyle ends with 4 errors. ```","closed","","romani","2020-09-08T02:32:06Z","2020-11-07T15:59:12Z"
"","8061","Issue #7639: updates docs for ExplicitInitialization","Issue #7639: update doc for ExplicitInitialization    Output of default example: $ cat config.xml ```                      ``` $ cat Test.java ``` public class Test {   private int a_int = 0; // violation   private int b_int = 1;   private int c_int;    private char a_char = '\0'; // violation   private char b_char = 'b';   private char c_char;    private boolean a_bool = false; // violation   private boolean b_bool = true;   private boolean c_bool;    private Obj a_O = null; // violation   private Obj b_O = new Obj();   private Obj c_O;    private int ar1[] = null; // violation   private int ar2[] = new int[];   private int ar3[]; } ```  $ java -jar checkstyle/target/checkstyle-8.31-SNAPSHOT-all.jar -c config.xml java_sandbox/src/com/codestyle/sandbox/Test.java  ``` Starting audit... [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:4:17: Variable 'a' explicitly initialized to '0' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:8:18: Variable 'a' explicitly initialized to '\0' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:13:21: Variable 'b' explicitly initialized to 'false' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:15:21: Variable 'd' explicitly initialized to 'false' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:16:21: Variable 'e' explicitly initialized to 'false' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:19:15: Variable 'b' explicitly initialized to 'null' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:20:15: Variable 'c' explicitly initialized to 'null' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:23:9: Variable 'ar1' explicitly initialized to 'null' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:27:25: Variable 'bar' explicitly initialized to 'null' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:28:27: Variable 'barArray' explicitly initialized to 'null' (default value for its type). [ExplicitInitialization] Audit done.  ``` Output of default example: $ cat config.xml ```                                              ``` $ cat Test.java ``` public class Test {   private int a_int = 0;   private int b_int = 1;   private int c_int;    private char a_char = '\0';   private char b_char = 'b';   private char c_char;    private boolean a_bool = false;   private boolean b_bool = true;   private boolean c_bool;    private Obj a_O = null; // violation   private Obj b_O = new Obj();   private Obj c_O;    private int ar1[] = null; // violation   private int ar2[] = new int[];   private int ar3[]; } ```  $ java -jar checkstyle/target/checkstyle-8.31-SNAPSHOT-all.jar -c config.xml java_sandbox/src/com/codestyle/sandbox/Test.java  ``` Starting audit... [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:19:15: Variable 'b' explicitly initialized to 'null' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:20:15: Variable 'c' explicitly initialized to 'null' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:23:9: Variable 'ar1' explicitly initialized to 'null' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:27:25: Variable 'bar' explicitly initialized to 'null' (default value for its type). [ExplicitInitialization] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:28:27: Variable 'barArray' explicitly initialized to 'null' (default value for its type). [ExplicitInitialization] Audit done.  ```","closed","abandoned,","ImmortalRabbit","2020-04-09T19:21:38Z","2020-09-07T08:39:46Z"
"","8888","Issue #7637: Update doc for EqualsAvoidNull","Issue #7637  ![pr1](https://user-images.githubusercontent.com/23631699/95658666-7384b980-0b1c-11eb-9793-458031f3b43c.PNG)  ![pr2](https://user-images.githubusercontent.com/23631699/95658667-74b5e680-0b1c-11eb-8154-b147e2a22ebb.PNG)  Example 1: ``` cat config.xml                        cat Test.java package main;  public class Test {     public static void main(String[] args) {         String nullString = null;         nullString.equals(""My_Sweet_String"");            // violation         ""My_Sweet_String"".equals(nullString);            // OK         nullString.equalsIgnoreCase(""My_Sweet_String"");  // violation         ""My_Sweet_String"".equalsIgnoreCase(nullString);  // OK     } }  java -jar checkstyle-8.36.2-all.jar -c config.xml Test.java Starting audit... [ERROR] D:\OpenSource\TestCommit\Test.java:6:26: String literal expressions should be on the left side of an equals comparison. [EqualsAvoidNull] [ERROR] D:\OpenSource\TestCommit\Test.java:8:36: String literal expressions should be on the left side of an equalsIgnoreCase comparison. [EqualsAvoidNull] Audit done. Checkstyle ends with 2 errors. ``` Example 2:  ``` cat config.xml                                            cat Test.java package main;  public class Test {     public static void main(String[] args) {         String nullString = null;         nullString.equals(""My_Sweet_String"");            // violation         ""My_Sweet_String"".equals(nullString);            // OK         nullString.equalsIgnoreCase(""My_Sweet_String"");  // OK         ""My_Sweet_String"".equalsIgnoreCase(nullString);  // O      } }  java -jar checkstyle-8.36.2-all.jar -c config.xml Test.java Starting audit... [ERROR] D:\OpenSource\TestCommit\Test.java:6:26: String literal expressions should be on the left side of an equals comparison. [EqualsAvoidNull] Audit done. Checkstyle ends with 1 errors. ```  I have removed the example from the Description section and moved it with other examples in the Examples section","closed","","AmrDeveloper","2020-10-10T15:23:55Z","2020-10-12T14:31:03Z"
"","8996","Issue #7609: Update doc for FinalClass #8996","Issue #7609  Updated doc for FinalClass #8996","closed","","ek08","2020-11-19T10:03:26Z","2020-11-22T15:11:50Z"
"","8063","Issue #7606: updates docs for WriteTag","Issue #7606: update doc for WriteTag    Output of first example: `$ cat config.xml` ```                                                       ```  `java -Djava.util.logging.config.file=log.properties -jar checkstyle-8.30-all.jar -c config.xml java_sandbox/src/com/codestyle/sandbox/Test.java` ``` Starting audit... [INFO] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:4: Javadoc tag @author=Author [WriteTag] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:6: Type Javadoc tag @author must match pattern '\S'. [WriteTag] Audit done. Checkstyle ends with 1 errors. ```  Output of second example: `$ cat config.xml` ```                                                       ```  `java -Djava.util.logging.config.file=log.properties -jar checkstyle-8.30-all.jar -c config.xml java_sandbox/src/com/codestyle/sandbox/Test.java` ``` Starting audit... [WARN] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:4: Javadoc tag @incomplete=Incomplete [WriteTag] [ERROR] /Users/demezhanmarikov/IdeaProjects/java_sandbox/src/com/codestyle/sandbox/Test.java:6: Type Javadoc tag @incomplete must match pattern '\S'. [WriteTag] Audit done. Checkstyle ends with 1 errors. ```","closed","","ImmortalRabbit","2020-04-09T22:47:21Z","2020-11-12T14:50:30Z"
"","8120","Issue #7580: Updated docs of EmptyBlock","Issue #7580 : update doc for EmptyBlock","closed","","ImmortalRabbit","2020-04-18T00:19:43Z","2020-11-13T14:06:12Z"
"","8904","Issue #7562: Add default config example for ClassTypeParameterName","Issue #7562  ![pr](https://user-images.githubusercontent.com/23631699/96448942-664e8580-1214-11eb-9853-079e72e63d80.PNG)  ``` $ cat config.xml                                $ cat Test.java class MyClass1 {}   // OK class MyClass2 {}   // violation  $ java -jar checkstyle-8.36.2-all.jar -c config.xml Test.java Starting audit... [ERROR] D:\OpenSource\TestCommit\Test.java:2:16: Name 't' must match pattern '^[A-Z]$'. [ClassTypeParameterName] Audit done. Checkstyle ends with 1 errors. ```","closed","","AmrDeveloper","2020-10-19T12:07:38Z","2020-10-23T02:00:32Z"
"","8401","Issue #7290: Add support for enhanced instanceof","Issue #7290: Add support for ""enhanced instanceof with pattern matching"" grammar  References: https://docs.oracle.com/en/java/javase/14/docs/specs/patterns-instanceof-jls.html#jls-6.3.1 https://openjdk.java.net/jeps/305 http://cr.openjdk.java.net/~gbierman/jep305/jep305-20191021/specs/patterns-instanceof-jls.html#jls-14  Java grammar per JEP: _RelationalExpression:_      _..._      _RelationalExpression instanceof ReferenceType_      _RelationalExpression instanceof Pattern_  _Pattern:_      _ReferenceType Identifier_  Rationale: We cannot reuse Checkstyle's `VARIABLE_DEF` node here; since a pattern variable has no modifiers, we must create a new token and node in the AST.  So, we have decided on `PATERN_VARIABLE_DEF`.","closed","","nick-mancuso","2020-07-06T00:49:04Z","2020-07-07T20:32:34Z"
"","8294","Issue #7290: Add support for enhanced instanceof","Issue #7290: Add support for ""enhanced instanceof with pattern matching"" grammar  https://docs.oracle.com/en/java/javase/14/docs/specs/patterns-instanceof-jls.html#jls-6.3.1  ### TODO: - [x] Unit tests (including ASTRegressionTest after #8289 is merged)  _Mentors, please feel free to edit this post to add more items in TODO, or reply and I will add them._","closed","","nick-mancuso","2020-06-01T19:57:14Z","2020-08-20T08:02:15Z"
"","8289","minor: Add input file for Java14 instanceof with pattern matching (#7290)","Issue #7290: Add input file for Java14 instanceof with pattern matching  Example code taken from: https://jaxenter.com/pattern-matching-for-instanceof-in-java-14-169830.html https://www.baeldung.com/java-pattern-matching-instanceof https://openjdk.java.net/jeps/305  The last three code snippets were troublesome in testing grammar, so I included them even though they really aren't pattern matching examples.","closed","","nick-mancuso","2020-06-01T12:36:10Z","2020-06-04T16:49:38Z"
"","8327","Issue #7103: Add support for Java 14 text block syntax","Issue #7103: Add support for Java 14 text block syntax ____________  ### Java Grammar  **Relevant grammar from [JLS](https://docs.oracle.com/javase/specs/jls/se13/preview/text-blocks.html):**   _A text block consists of zero or more characters enclosed by opening and closing delimiters. Characters may be represented by escape sequences (3.10.7), but the newline and double quote characters that must be represented with escape sequences in a string literal may be represented directly in a text block._  TextBlock: "" "" "" _{ TextBlockWhiteSpace } LineTerminator { TextBlockCharacter }_ "" "" ""  TextBlockWhiteSpace: _WhiteSpace_ but not _LineTerminator_  TextBlockCharacter: _InputCharacter_ but not \ _EscapeSequence_ _LineTerminator_  _________________  ### Lexer multiplexing rationale:  When attempting to build the desired text blocks AST:  ```      `--TEXT_BLOCK_LITERAL_BEGIN -> """"""              |--TEXT_BLOCK_CONTENT -> \n             Hello, world!              /n             `--TEXT_BLOCK_LITERAL_END -> """"""  ``` **Approach 1:**  My first attempt to create the necessary tokens was to simply make a `TEXT_BLOCK_DELIM` token, which was to be used as both the `TEXT_BLOCK_LITERAL_BEGIN` and `TEXT_BLOCK_LITERAL_END`.  While I also tried to make the two tokens separate in the lexer grammar (since a text block must begin with """"""\n), this nearly doubled the list of ambiguities produced upon generation of the lexer. To return the desired tokens, I tried many different approaches to the lexer grammar, but all had the same issue: the lexer would never execute the code in the `TEXT_BLOCK_CONTENT` rule.  Consider: ```     String hello = """"""                 Hello, world!                 """""";  ``` For this example, the lexer would produce the following tokens:  `IDENT` -> `IDENT` -> `ASSIGN` -> `TEXT_BLOCK_DELIM` -> `IDENT` -> `COMMA` -> `exception`  With the lexer having no knowledge of the preceding token, it was lexing the tokens as it would for java code.  I tried several different hacks, such as combining the `TEXT_BLOCK_LITERAL_BEGIN` and `TEXT_BLOCK_CONTENT` into one lexer rule, which did work, but made it difficult to keep track of line numbers, columns, etc.  Remember, in ANTLR2, we can only return one token per iteration of the lexer. I had to create an imaginary token in the parser to make up for the missing TEXT_BLOCK_CONTENT token.  **Approach 2:**  I mimicked the comment implementation, which did work, but was very complicated for such a simple task and required another token stream.  **Details for the current implementation:**  In newer versions of ANTLR, we could have simply emitted the tokens that we needed to within the lexer, or created fragments and used different lexer modes. This is not possible in ANTLR 2,  and the prescribed solution is to use lexer multiplexing. Please see [here](https://www.antlr2.org/doc/streams.html). This solution is what I settled on, and is the clear winner here in my opinion. This approach makes it very simple to correctly track line numbers, columns, etc, and handle the complicated characters allowed in the body of a text block, while adding very little additional code to Checkstyle.   Lexer multiplexing makes it simple to create the necessary tokens to produce the AST that we want, `TEXT_BLOCK_BEGIN`, `TEXT_BLOCK_CONTENT`, and `TEXT_BLOCK_END `while lexing text block syntax. In addition, this secondary lexer makes it trivial to modify the appearance of the `TEXT_BLOCK_CONTENT` or create particular nodes. Example:  ```     |   |   `--IDENT -> String [7:4]     |   |--IDENT -> escape [7:11]     |   |--ASSIGN -> = [7:18]     |   |   `--EXPR -> EXPR [7:20]     |   |       `--TEXT_BLOCK_LITERAL_BEGIN -> """""" [7:20]     |   |           |--TEXT_BLOCK_CONTENT ->                 \u000D\u000A\n [8:0]     |   |           |--NEWLINE -> \n [8:36]     |   |           |--TEXT_BLOCK_CONTENT ->                     \u000D\u000A\n [9:0]     |   |           |--NEWLINE -> \n [9:40]     |   |           |--TEXT_BLOCK_CONTENT ->                         Hello, world\u000D\u000A\n [10:0]     |   |           |--NEWLINE -> \n [10:57]     |   |           |--TEXT_BLOCK_CONTENT ->                     \u000D\u000A\n [11:0]     |   |           |--NEWLINE -> \n [11:41]     |   |           |--TEXT_BLOCK_CONTENT ->                 \u000D\u000A [12:0]     |   |           |--NEWLINE -> \n [12:35]     |   |           |--TEXT_BLOCK_CONTENT ->                  [13:0]     |   |           `--TEXT_BLOCK_LITERAL_END -> """""" [13:16]     |   `--SEMI -> ; [13:19]     `--RCURLY -> } [14:0]  ```  My work is based off of the following sources:  https://github.com/nco/antlr2/tree/master/examples/java/multiLexer  https://www.antlr2.org/doc/streams.html  http://www.eso.org/projects/alma/develop/acs/OnlineDocs/ACS_docs/java/dd/db8/classantlr_1_1TokenStreamSelector.htmlm","closed","","nick-mancuso","2020-06-19T17:27:51Z","2020-08-03T22:35:55Z"
"","8218","Issue #6943: new Check: NullTestAroundInstanceOfCheck","Issue #6943: new Check: NullTestAroundInstanceOfCheck  diff report will update later. Contrib repo PR: https://github.com/checkstyle/contribution/pull/477","closed","awaiting changes,","HuGanghui","2020-05-02T09:06:57Z","2021-03-15T01:48:28Z"
"","8776","Issue #6916: enable parallel execution of unit tests","Issue #6916  Test execution mode set to same_thread (sequential) by default.  (add this to wiki) To enable parallel execution run `mvn verify -Djunit.parallel.mode=concurrent` or `mvn verify -Djunit.parallel.mode.classes=concurrent`  Some tests that changes the global state (and may affect all other tests) are excplicitly marked as `@Isolated`. All powermock-based tests still use JUnit4 and run sequentially.","closed","","pbludov","2020-08-29T08:32:39Z","2020-10-31T10:29:21Z"
"","9006","Issue #6722: new check JavadocMissingLeadingAsteriskCheck","Issue #6722  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/32ddbff9e69986ac2fcbbeff7def2f80/raw/8480445657f1d215e683dbb6b14c1577bbd44e6b/projects-to-test-on.properties New module config: https://gist.githubusercontent.com/pbludov/3a8be5da26a64e2be80b26217d052eb6/raw/fa0bef2587280c80bfa87e18493afe52ca1a5eba/config.xml  Contrib repo PR: https://github.com/checkstyle/contribution/pull/526","closed","","pbludov","2020-11-21T12:20:18Z","2020-12-27T12:10:53Z"
"","8869","Issue #6658: Pitest increase mutation coverage for pitest-imports profile to 100% - PkgImportRule","Issue #6658   **Mutation:**  ```java  boolean pkgMatch;  if (isRegExp()) {          // removed conditional - replaced eqality check with true     pkgMatch = forImport.matches(pkgName + ""\\..*"");      if (pkgMatch && exactMatch) {         pkgMatch = !forImport.matches(pkgName + ""\\..*\\..*"");     } }  else {     pkgMatch = forImport.startsWith(pkgName + ""."");      if (pkgMatch && exactMatch) {         pkgMatch = forImport.indexOf('.',         pkgName.length() + 1) == -1;     } }   return calculateResult(pkgMatch); ```  **Explanation:** There should be a test where `regexp` is **false** but the `pkg name` is given in form of **regexp**.  **Solution:** I added the following test.  ```java @Test     public void testPkgImportRuleNoRegexp() {         final PkgImportRule rule = new PkgImportRule(true, false, ""(pkg|hallo)"", false, false);         assertNotNull(rule, ""Rule must not be null"");         assertEquals(AccessResult.UNKNOWN, rule.verifyImport(""pkga""), ""Invalid access result"");         assertEquals(AccessResult.UNKNOWN, rule.verifyImport(""pkg.a""), ""Invalid access result"");         assertEquals(AccessResult.UNKNOWN, rule.verifyImport(""pkg.a.b""), ""Invalid access result"");         assertEquals(AccessResult.UNKNOWN, rule.verifyImport(""pkg""), ""Invalid access result"");         assertEquals(AccessResult.UNKNOWN, rule.verifyImport(""halloa""), ""Invalid access result"");         assertEquals(AccessResult.UNKNOWN, rule.verifyImport(""hallo.a""), ""Invalid access result"");         assertEquals(AccessResult.UNKNOWN, rule.verifyImport(""hallo.a.b""), ""Invalid access result"");         assertEquals(AccessResult.UNKNOWN, rule.verifyImport(""hallo""), ""Invalid access result"");         assertEquals(AccessResult.ALLOWED, rule.verifyImport(""(pkg|hallo).a""), ""Invalid access result"");     } ```  **Pitest Report:** https://developerhb.github.io/202010021102/com.puppycrawl.tools.checkstyle.checks.imports/index.html","closed","","developerhb","2020-10-01T16:14:50Z","2020-10-05T04:06:33Z"
"","8829","Issue #6658: increase mutation coverage for pitest-imports profile to 100% - IllegalImportCheck","Issue #6658  Diff Regression config: https://gist.githubusercontent.com/developerhb/2ec7d4b5183dfeddd266be7a62aa3542/raw/e6d79a0407122a2798da3a0515fca3782b62e995/my_check.xml Diff Regression projects: https://gist.githubusercontent.com/developerhb/2ec7d4b5183dfeddd266be7a62aa3542/raw/e6d79a0407122a2798da3a0515fca3782b62e995/projects-to-test-on.properties","closed","","developerhb","2020-09-13T11:37:33Z","2020-09-19T16:58:48Z"
"","8449","Issue #6615: Add support for Java 14 switch and yield","Issue #6615: Add support for Java 14 switch and yield  This PR will introduce support for Java 14 switch expressions, and yield statements.  _________________________ ### [Relevant JLS grammar for switch expressions:](https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html#jep354-15.28) UnaryExpression:     _PreIncrementExpression_     _PreDecrementExpression_      _`+` UnaryExpression_      _`-` UnaryExpression_     _UnaryExpressionNotPlusMinus_  PreIncrementExpression:     _`++` UnaryExpression_  PreDecrementExpression:     _`--` UnaryExpression_  UnaryExpressionNotPlusMinus: _PostfixExpression_ _`~` UnaryExpression_ _`!` UnaryExpression_ _CastExpression_ **SwitchExpression**  **SwitchExpression:** _`switch` ( Expression ) SwitchBlock_  SwitchBlock:     _{ SwitchLabeledRule {SwitchLabeledRule} }_     _{ {SwitchLabeledStatementGroup} {SwitchLabel :} }_  SwitchLabeledRule: _SwitchLabeledExpression_ _SwitchLabeledBlock_ _SwitchLabeledThrowStatement_  SwitchLabeledExpression: _SwitchLabel -> Expression ;_  SwitchLabeledBlock: _SwitchLabel -> Block_  SwitchLabeledThrowStatement: _SwitchLabel -> ThrowStatement_  SwitchLabel: _`case` CaseConstant {, CaseConstant}_ _`default`_  CaseConstant: _ConditionalExpression_  SwitchLabeledStatementGroup: _SwitchLabel : {SwitchLabel :} BlockStatements_  _____________________________ ### [Relevant grammar for yield statements:](https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html#jep354-14.21)  YieldStatement: _`yield` Expression ;_  _______________________________  I have introduced the new token, SWITCH_RULE,  for the following reasons:  1. From[ JLS](https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html#jep354-14.11.1): _When a selector expression matches a switch label for a switch labeled rule, the labeled expression or statement is executed and nothing else._      This means that there is no reason to check for fall-through, as in the case of switch case groups.  In checks, we can simply conclude that we are in a switch rule, and know that there will be definite assignment and no fall through.   2. The java grammar differentiates between the two, so we should also.       **_The body of both a switch statement and a switch expression (15.28) is known as a switch block. This block can consist of either:_**      _Switch labeled rules, which use -> to introduce either a switch labeled expression, switch labeled block, or a switch labeled throw statement; or_      _Switch labeled statement groups, which use : to introduce switch labeled block statements._","closed","","nick-mancuso","2020-07-14T16:24:09Z","2020-08-11T22:18:53Z"
"","8017","Issue #6582: static final option for AbbreviationAsWordInName","Issue #6582: static final option for AbbreviationAsWordInName  Currently, we are able to ignore `static` fields and `final` fields separately, but have no way to ignore only variables that are both `static` and `final`, which are usually (but not necessarily) constants.  I have added a new property `ignoreStaticFinal` to the check. The default value is `true` so that anyone running the default configuration (i.e. `ignoreStatic` and `ignoreFinal` both true) will not notice any difference in violations as a result of this change.  Note however that a `static final` variable will only respect `ignoreStaticFinal` and not `ignoreStatic` or `ignoreFinal`. For example, if `ignoreStatic` is false but `ignoreStaticFinal` remains true, only `static` and non-`final` variables will be ignored.  An alternative implementation is to have `ignoreStaticFinal` be overshadowed by `ignoreStatic` and `ignoreFinal` if either is true. This is what I came up with originally, but it felt less intuitive as we would want `ignoreStaticFinal` to be respected when it is explicitly set to false.  Regression (for default configuration): https://wltan.github.io/checkstyle-reports/2020-04-05/abbrword-staticfinal/ Regression for all other cases - https://github.com/checkstyle/checkstyle/pull/8017#issuecomment-609686830  A potential problem is that if existing projects do not want ignores at all, they will have configured `ignoreStatic` and `ignoreFinal` to false but `ignoreStaticFinal` comes with a default value of true, so there will be a lot of missing violations until the config is updated to make `ignoreStaticFinal` false as well.  Sample run: ```D:\checkstyletest>type config.xml                                                                                             D:\checkstyletest>type test\*.java  test\Test.java   public class MyClass {     public int AAAA = 1;              // violation, not ignored     public final int BBBB = 2;        // violation, not ignored     public static int CCCC = 3;       // violation, not ignored     public static final int DDDD = 4; // OK, ignored }  D:\checkstyletest>java -jar -Duser.language=en -Duser.country=US checkstyle-8.32-SNAPSHOT-all.jar -c config.xml test\*.java Starting audit... [ERROR] D:\checkstyletest\test\Test.java:2:16: Abbreviation in name 'AAAA' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] D:\checkstyletest\test\Test.java:3:22: Abbreviation in name 'BBBB' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] D:\checkstyletest\test\Test.java:4:23: Abbreviation in name 'CCCC' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] Audit done. Checkstyle ends with 3 errors. ``` Documentation has been updated as follows:  ![image](https://user-images.githubusercontent.com/53135010/79121170-43f03100-7dc7-11ea-92a8-bfefb47b5ec6.png)  ![image](https://user-images.githubusercontent.com/53135010/79121201-510d2000-7dc7-11ea-9c58-14f9e4b525af.png)","closed","","wltan","2020-04-03T08:50:58Z","2020-04-18T19:33:52Z"
"","8585","Issue #6560: Explicitly specify default encoding to make unit tests more robust","Issue #6560  On platforms that had a default encoding different than UTF-8, some of the unit tests failed. This PR explicitly specifies the encoding for the unit tests so that they'll pass no matter what the platform's encoding is.","closed","","tobiasbaum","2020-08-01T12:56:17Z","2020-08-02T16:00:30Z"
"","8093","Issue #6332: Java9 try-with-resources","Issue #6332 Fix  Reference https://github.com/checkstyle/checkstyle/issues/6332#issuecomment-612523168   Diff report https://harsh-kukreja.github.io/issue-6332/index.html","closed","","harsh-kukreja","2020-04-13T18:33:32Z","2020-06-09T06:00:14Z"
"","8887","Issue #6209: activate no-error-spring-cloud-gcp in wercker","Issue #6209  for googlecloudplatform/spring-cloud-gcp  based on advice at https://github.com/checkstyle/checkstyle/pull/8850#issuecomment-705151362  tested: ``` [INFO]  [INFO] --- maven-checkstyle-plugin:3.1.1:check (checkstyle-validation) @ spring-cloud-gcp-core --- [WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent! [INFO] Starting audit... [ERROR] .ci-temp/spring-cloud-gcp/spring-cloud-gcp-core/src/main/java/com/google/cloud/spring/core/Credentials.java:20: Wrong order for 'java.util.ArrayList' import. [ImportOrder] [ERROR] .ci-temp/spring-cloud-gcp/spring-cloud-gcp-core/src/main/java/com/google/cloud/spring/core/Credentials.java:30:29: '=' is not followed by whitespace. [WhitespaceAround] [ERROR] .ci-temp/spring-cloud-gcp/spring-cloud-gcp-core/src/main/java/com/google/cloud/spring/core/Credentials.java:30:29: '=' is not preceded with whitespace. [WhitespaceAround] [ERROR] .ci-temp/spring-cloud-gcp/spring-cloud-gcp-core/src/main/java/com/google/cloud/spring/core/Credentials.java:45:28: '...' is preceded with whitespace. [NoWhitespaceBefore] [ERROR] .ci-temp/spring-cloud-gcp/spring-cloud-gcp-core/src/main/java/com/google/cloud/spring/core/Credentials.java:46:2: '{' at column 2 should be on the previous line. [LeftCurly] [ERROR] .ci-temp/spring-cloud-gcp/spring-cloud-gcp-core/src/main/java/com/google/cloud/spring/core/Credentials.java:47:51: ';' is not followed by whitespace. [WhitespaceAfter] [ERROR] .ci-temp/spring-cloud-gcp/spring-cloud-gcp-core/src/main/java/com/google/cloud/spring/core/Credentials.java:47:52: '}' is not preceded with whitespace. [WhitespaceAround] Audit done. [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for Spring Cloud GCP 2.0.0-SNAPSHOT: [INFO]  [INFO] Spring Cloud GCP ................................... SUCCESS [  0.645 s] [INFO] Spring Cloud GCP Core Module ....................... FAILURE [  0.364 s]  ```","closed","","romani","2020-10-10T15:02:48Z","2020-10-11T12:07:38Z"
"","8850","Issue #6209: activate no-error-spring-cloud-gcp in wercker","Issue #6209","closed","","romani","2020-09-23T14:00:40Z","2020-10-10T15:08:36Z"
"","8987","Issue #5148: Add MissingJavadocType to google_checks.xml","Issue #5148: Add MissingJavadocType to google_checks.xml  ATTENTION quotes from style guide:  > From https://google.github.io/styleguide/javaguide.html#s1.1-terminology: ""The term class is used inclusively to mean an ""ordinary"" class, enum class, interface or annotation type (`@interface`).""  > From https://google.github.io/styleguide/javaguide.html#s7.3-javadoc-where-required: ""At the minimum, Javadoc is present for every public class, and every public or protected member of such a class, with a few exceptions noted below.""  This PR is a continuation of https://github.com/checkstyle/checkstyle/pull/8105.  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/32ddbff9e69986ac2fcbbeff7def2f80/raw/8480445657f1d215e683dbb6b14c1577bbd44e6b/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/f0a81b257e7f37f23ea4abc2b17ece6f/raw/a5231cef69f0ae909ae0274c2f189b74899c6be8/base.xml  Diff Regression patch config: https://gist.githubusercontent.com/nmancus1/a84775a4bc42a6a3a60899f355d3cf15/raw/76e1c9c783c7160f58c7475ebdded06ceec81f93/patch.xml","closed","","nick-mancuso","2020-11-13T18:24:15Z","2020-11-22T07:21:39Z"
"","8317","Issue #4944: Extend Checkstyle GUI tool to work with Xpath - Generate Xpath Query","Issue #4944: Extend Checkstyle GUI tool to work with Xpath.  **This PR depends on PR https://github.com/checkstyle/checkstyle/pull/8247**  The first commit is not be reviewed. It is of PR https://github.com/checkstyle/checkstyle/pull/8247.  This PR adds the functionality of generating Xpath Query when a node is selected from tree. ### Preview. ![image](https://user-images.githubusercontent.com/53093601/86952865-3dc4e300-c171-11ea-8d0b-9b0cb2c5a968.png)  ![image](https://user-images.githubusercontent.com/53093601/86953014-7795e980-c171-11ea-9993-a04681b8ec4f.png)","closed","","developerhb","2020-06-15T11:40:55Z","2020-07-09T14:35:09Z"
"","8247","Issue #4944: Extend Checkstyle GUI tool to work with Xpath - Layout Changes","Issue #4944: Extend Checkstyle GUI tool to work with Xpath - **Layout Changes**  ### TO-DO List - [x] Implement layout as described in issue - [x] Make Xpath Panel Collapsible  *Actual implementation of functionality is still remainig.* *This is just the layout.*  ## Layout Preview  ### Xpath Panel Collapsed ![image](https://user-images.githubusercontent.com/53093601/83177515-d280fd80-a13c-11ea-8566-049a365a28f3.png)  ### Xpath Panel Expanded ![image](https://user-images.githubusercontent.com/53093601/83177570-eb89ae80-a13c-11ea-90b4-d4850518c03b.png)","closed","","developerhb","2020-05-22T02:53:52Z","2020-06-23T16:16:03Z"
"","8591","Issue #4944: Extend Checkstyle GUI tool to work with Xpath","Issue #4944: Extend Checkstyle GUI tool to work with Xpath  This PR is to Find Node by Xpath.   ### Preview  **Correct Xpath Query:**  **Before**  ![image](https://user-images.githubusercontent.com/53093601/89751164-967af900-daec-11ea-9491-6c3854b83f9d.png)  **After**  ![image](https://user-images.githubusercontent.com/53093601/89751226-dcd05800-daec-11ea-8907-d9919c16ced6.png)   **Incorrect Xpath Query:**  **Before:**  ![image](https://user-images.githubusercontent.com/53093601/89752301-7b5eb800-daf1-11ea-8a4d-eaca4d37b6d2.png)  **After:**  ![image](https://user-images.githubusercontent.com/53093601/89752361-b103a100-daf1-11ea-8882-60c5c0236a76.png)","closed","","developerhb","2020-08-02T04:03:22Z","2020-08-13T11:58:36Z"
"","8242","Issue #3786: enable JOSM in Travis CI","Issue #3786  continuation of #8136","closed","","romani","2020-05-17T22:24:22Z","2020-05-17T23:42:34Z"
"","8135","Issue #3601: MethodParamPad example added","Issue #3601","closed","","ImmortalRabbit","2020-04-19T14:23:24Z","2020-11-11T16:35:47Z"
"","8848","Issue 0001 cirrus","Issue #0001 cirrus ci test","closed","","pbludov","2020-09-23T06:58:47Z","2020-09-23T06:59:11Z"
"","8974","Is there EnumTrailingComma with logic similar to ArrayTrailingComma?","Is there EnumTrailingComma with logic similar to ArrayTrailingComma?","closed","","antonmarin","2020-11-09T10:18:28Z","2020-11-09T16:57:54Z"
"","8439","Check for ""keep indents on empty lines"" equivalent","Is it possible to validate [""keep indents on empty lines"" ](https://stackoverflow.com/questions/33711926/intellij-keep-indents-on-empty-lines-not-working) code style in intellij is enforced using codestyle  Check documentation: https://checkstyle.org/config_misc.html#Indentation ``` /var/tmp $ javac Test.java  /var/tmp $ cat Test.java   public class Test {      private static final int SOMETHING = 1;      //blank line with indentation  //blank line without indentation, line 4      private static final int SOMETHING = 1;  }  /var/tmp $ cat config.xml                                                                                                                                                                      /var/tmp $ java -jar checkstyle-8.33-all.jar -c config.xml Test.java Starting audit... Audit done. ```  Expected: violation on fourth line. has incorrect indentation level 0, expected level should be 4. [Indentation] Audit done. PS. the comments in the java file are not present in the code but just added here in the description to show the difference in the indentation,","closed","discussion ongoing,","sridarshans","2020-07-12T09:20:27Z","2020-11-04T15:52:55Z"
"","8845","Issue #8842: Add rebase github action","Initial version to resolve #8842  Github action is triggered by additing (or editing) comment with content `GitHub, rebase`  There are 2 restrictions that I found during testing so far: 1. It wont work if patch branch name == 'master' 2. If there was changes in github workflows in target branch - `refusing to allow a GitHub App to create or update workflow without workflows permission`, it is a github restriction.  Second case is not very frequent since updates in workflows are not very frequent.","closed","","strkkk","2020-09-21T14:18:11Z","2021-01-29T11:44:03Z"
"","8837","infra: disable josm build","infra: disable josm build  Identified in multiple builds: https://travis-ci.org/github/checkstyle/checkstyle/builds/727817467 https://travis-ci.org/github/checkstyle/checkstyle/builds/725705597 https://travis-ci.org/github/checkstyle/checkstyle/jobs/724495852 ... ``` https://oss.sonatype.org/content/repositories/snapshots/org/jacoco/org.jacoco.ant/0.8.6-SNAPSHOT/org.jacoco.ant-0.8.6-SNAPSHOT-nodeps.jar [ivy:resolve] 		:::::::::::::::::::::::::::::::::::::::::::::: [ivy:resolve] 		::          UNRESOLVED DEPENDENCIES         :: [ivy:resolve] 		:::::::::::::::::::::::::::::::::::::::::::::: [ivy:resolve] 		:: org.jacoco#org.jacoco.ant;0.8.6-SNAPSHOT: not found [ivy:resolve] 		:::::::::::::::::::::::::::::::::::::::::::::: [ivy:resolve]  [ivy:resolve] :: USE VERBOSE OR DEBUG MESSAGE LEVEL FOR MORE DETAILS BUILD FAILED ```  Due to the instability of the josm travis job, we are disabling this for now.","closed","","nick-mancuso","2020-09-18T23:10:02Z","2020-09-19T02:48:35Z"
"","8590","Add to site usage on how to use Checkstyle as a Dependency","In response to https://stackoverflow.com/questions/63178064/why-is-checkstyle-not-in-maven-central ,  I can only find instances of downloading checkstyle , https://checkstyle.org/index.html#Download and https://checkstyle.org/cmdline.html#Download_and_Run , and nothing that states checkstyle is in maven or how to add it as a dependency. I understand maven-checkstyle-plugin is what actually runs checkstyle in maven, but we should atleast mention it is available in maven and how to add it as a dependency.","open","high demand,","rnveach","2020-08-02T01:52:59Z","2020-08-02T02:40:21Z"
"","8912","IllegalType should be able to support forbidding types for fields","In our project we want to forbid declaring java.util.Optional[Int, Double, Long] in fields. I currently found a solution using VARIABLE_DEF. However VARIABLE_DEF also includes local variables (which we want to support for Optional of course). So as a workaround i am able to configure the rule to only look at contexts where modifiers private, protected and public are present (via 'memberModifiers'):  ```               ```  However this still allows declaring package private Optional fields.   Maybe i have overseen something. But if that is not possible it would be great to be able to restrict IllegalType checks only to fields (introducing new TokenType FIELD_DEF). Perhaps like that:  ```           ```","closed","","gb-klein","2020-10-21T09:23:53Z","2020-10-24T13:07:44Z"
"","8308","Java Grammar: need to introduce ""id"" rule to solve keyword as identifier problem","In order to facilitate the proper implementation of records grammar, in addition to mitigating other future ""keyword as identifier"" issues, we need to introduce an ""id"" rule in the parser, which will replace the use of IDENT:  `id: IDENT;`  ### Why? In the case of 'records':  The basic grammar for records will consist of something similar to `classDefinition`: ``` recordDeclaration![AST modifiers]     :   r:""record"" IDENT         (tp:typeParameters)?         recordComponents         implementsClause         recordBodyDeclaration         {#recordDeclaration = #(#[RECORD_DEF, ""RECORD_DEF""],                               modifiers, IDENT);}     ; ``` The inclusion of ""record"" automatically makes an entry in the literal table called ""record"" and the lexer concludes that anytime ""record"" is parsed, it must be a record declaration.  Even in Java 14, with ""preview"" enabled, ""record"" is not a reserved keyword, so no sort of version checking, etc., can or should be implemented to determine whether record should be treated as an identifier or keyword.    It is possible to use logic in the lexer, like in the case of `ENUM` and `ASSERT`, to keep ""record"" out of the literals table, but for records, we must check the following tokens to see if we have a record declaration or else ""record"" is being used as an identifier.   The problem with this approach, besides its inefficiency, is that we must cover all possible permutations of ""record"" as an identifier usage.  This includes: ```     private static void record(LogRecord... logArray) {         for (LogRecord record : logArray) {             record.getLevel();         }     }      private static void checkRecord() {         LogRecord record;         record = new LogRecord(Level.ALL, ""abc"");         assertEquals(Level.INFO, record.getLevel());     }      private static int record = 2;     recordString = recordString.substring(record, 5);  ...  ``` not to mention that we have to consider whitespace too! So this is not a good approach.  Adding the proposed rule to the parser enables us to do this:  `id: IDENT | ""record"" ;`  This keeps unwanted complexity from being added to the lexer, and allows the lexer to pass all keywords to the parser, where the above rule lies.  We can then, in the parser, re-set the type of token (if necessary):  ``` id: IDENT | recordKey ; recordKey: ""record"" {#recordKey.setType(IDENT);}; ```    This method is the preferred method to solve the ""keyword-as-identifier"" problem in ANTLR, and will be much faster (switch statement checking int values) than comparing the text of the token ( `token.getText()`) or using lots of look-ahead and comparing characters.  This change from using IDENT in the parser to the `id` rule will help future proof our grammar and make it more extensible, too.  This grammar could easily be extended to:  ``` // id rule id: IDENT | keyword;  // list of keywords that are also identifiers keyword: ""record'     |  ""otherkeyword1""     |  ""otherkeyword2""     | ... ; ```","closed","miscellaneous,","nick-mancuso","2020-06-09T19:45:38Z","2020-06-25T14:05:04Z"
"","8023","Allow unsupported syntax, like record classes","In a new project we are using Java 14 Record classes (preview feature). The problem is that checkstyle crashes when parsing record classes with methods like:  ```java public record Person(         String firstName,         String lastName,         int age,         String address,         Date birthday ){     public Person{       // record ctor     }      public String fullName(){         return firstName + "" "" + lastName;     } } ```  It sort of works with an error when there are no methods.  While I appreciate that you may not want to add support for a feature that is subject to change, it would be very helpful to have some way of skipping checks for new syntax. I'm aware of the possibility to exclude files using regex, but the great thing about record classes is that you can embed them in classes without the number of lines blowing up.  Preferably I'd like some way of ignoring the record classes but still check the rest of the code in the file.","closed","new feature,","runfalk","2020-04-03T15:27:44Z","2020-07-11T18:28:06Z"
"","8453","minor: improve diff_report.yml file","Improving diff_report.yml for these directions: https://github.com/checkstyle/checkstyle/pull/8445#pullrequestreview-448125816","closed","","OvchinnikovNV","2020-07-15T09:45:58Z","2020-07-15T14:35:08Z"
"","8126","Extract reusable code from RequireThisCheck","If we take a look at source code of `RequireThisCheck`, we can see that it is a very long class with numerous methods and inner classes.  A lot of the code written in that class is not specific to the check and can be reused else where e.g. to solve https://github.com/checkstyle/checkstyle/issues/7895 and https://github.com/checkstyle/checkstyle/issues/7504  Essentially, the elements (methods and inner classes) that need to be extracted are of two types: - Token related `->` should be moved in the already existing utility classes `TokenUtil.java` or `CheckUtil.java` - Frame related `->` should be moved in a new utility class `FrameUtil.java`","open","approved,","wilcoln","2020-04-18T18:33:05Z","2020-04-19T14:39:17Z"
"","8876","Create Github action to generate web site","if any documentation is updated it is become a chore to generate web site on local and share images in PR. author of PR always forget to update images after update of code. Example of PRs with multiple updates - https://github.com/checkstyle/checkstyle/pull/8847  We can reuse github action and make trigger by ""Github, generate web site""  comment (the same as we generate diff report https://github.com/checkstyle/checkstyle/blob/master/.github/workflows/diff_report.yml )","closed","CI,","romani","2020-10-04T14:56:07Z","2020-10-14T14:02:22Z"
"","8884","MetadataGeneratorUtilTest is modifying files in the main folder for Windows hosts","Identified when backporting 8.36.1 . Confirmed this still happens in master.  Running `MetadataGeneratorUtilTest` is modifying 63 files in `src/main/resources/com/puppycrawl/tools/checkstyle/meta/`. This happens when running by itself or as part of the suite.  **No test should ever modify our files controlled by git. Especially production code/resources. This is an accident waiting to be staged and committed.**  Here is the patch of one of the modifications. ```` diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/ArrayTypeStyleCheck.xml b/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/ArrayTypeStyleCheck.xml index 82e64e5..4efd0de 100644 --- a/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/ArrayTypeStyleCheck.xml +++ b/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/ArrayTypeStyleCheck.xml @@ -4,18 +4,18 @@         -         <p> - Checks the style of array type definitions. - Some like Java style: {@code public static void main(String[] args)} - and some like C style: {@code public static void main(String args[])}. - </p> - <p> - By default the Check enforces Java style. - </p> - <p> - This check strictly enforces only Java style for method return types regardless - of the value for 'javaStyle'. For example, {@code byte[] getData()}. - This is because C doesn't compile methods with array declarations on the name. +         <p>
 + Checks the style of array type definitions.
 + Some like Java style: {@code public static void main(String[] args)}
 + and some like C style: {@code public static void main(String args[])}.
 + </p>
 + <p>
 + By default the Check enforces Java style.
 + </p>
 + <p>
 + This check strictly enforces only Java style for method return types regardless
 + of the value for 'javaStyle'. For example, {@code byte[] getData()}.
 + This is because C doesn't compile methods with array declarations on the name.
   </p>                          ````","open","high demand,","rnveach","2020-10-09T01:23:00Z","2020-11-01T20:36:00Z"
"","8700","XPathSyntaxException in master when running PMD","Identified at https://travis-ci.org/github/checkstyle/checkstyle/jobs/717807548#L631  ```` [INFO] --- maven-pmd-plugin:3.13.0:pmd (pmd) @ checkstyle ---  [WARNING] Exception applying rule ShortMethodName on file /home/travis/build/checkstyle/checkstyle/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java, continuing with next rule  java.lang.RuntimeException: XPath expression //ClassOrInterfaceDeclaration[@SimpleName='AssertGeneratedJavaLexer']                         //MethodDeclaration[@Name='LA']                     | //ClassOrInterfaceDeclaration[@SimpleName='AssertGenTextBlockLexer']                      //MethodDeclaration[@Name='LA' failed: Expected: ]      at net.sourceforge.pmd.lang.ast.AbstractNode.hasDescendantMatchingXPath (AbstractNode.java:536)      at net.sourceforge.pmd.lang.rule.ParametricRuleViolation.setSuppression (ParametricRuleViolation.java:75)      at net.sourceforge.pmd.lang.rule.ParametricRuleViolation. (ParametricRuleViolation.java:58)      at net.sourceforge.pmd.lang.java.rule.JavaRuleViolation. (JavaRuleViolation.java:53)      at net.sourceforge.pmd.lang.java.rule.JavaRuleViolationFactory.createRuleViolation (JavaRuleViolationFactory.java:30)      at net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactory.addViolation (AbstractRuleViolationFactory.java:37)      at net.sourceforge.pmd.lang.rule.AbstractRule.addViolation (AbstractRule.java:359)      at net.sourceforge.pmd.lang.rule.XPathRule.evaluate (XPathRule.java:178)      at net.sourceforge.pmd.lang.rule.XPathRule.apply (XPathRule.java:158)      at net.sourceforge.pmd.lang.internal.DefaultRulechainVisitor.visit (DefaultRulechainVisitor.java:26)      at net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.visitAll (AbstractRuleChainVisitor.java:99)      at net.sourceforge.pmd.RuleChain.apply (RuleChain.java:72)      at net.sourceforge.pmd.RuleSets.apply (RuleSets.java:145)      at net.sourceforge.pmd.SourceCodeProcessor.processSource (SourceCodeProcessor.java:194)      at net.sourceforge.pmd.SourceCodeProcessor.processSourceCodeWithoutCache (SourceCodeProcessor.java:107)      at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode (SourceCodeProcessor.java:89)      at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode (SourceCodeProcessor.java:51)      at net.sourceforge.pmd.processor.PmdRunnable.call (PmdRunnable.java:78)      at net.sourceforge.pmd.processor.PmdRunnable.call (PmdRunnable.java:24)      at java.util.concurrent.FutureTask.run (FutureTask.java:266)      at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:511)      at java.util.concurrent.FutureTask.run (FutureTask.java:266)      at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1149)      at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)      at java.lang.Thread.run (Thread.java:748)  Caused by: org.jaxen.XPathSyntaxException: Expected: ]      at org.jaxen.BaseXPath. (BaseXPath.java:121)      at org.jaxen.BaseXPath. (BaseXPath.java:142)      at net.sourceforge.pmd.lang.ast.AbstractNode.findChildNodesWithXPath (AbstractNode.java:527)      at net.sourceforge.pmd.lang.ast.AbstractNode.hasDescendantMatchingXPath (AbstractNode.java:534)      at net.sourceforge.pmd.lang.rule.ParametricRuleViolation.setSuppression (ParametricRuleViolation.java:75)      at net.sourceforge.pmd.lang.rule.ParametricRuleViolation. (ParametricRuleViolation.java:58)      at net.sourceforge.pmd.lang.java.rule.JavaRuleViolation. (JavaRuleViolation.java:53)      at net.sourceforge.pmd.lang.java.rule.JavaRuleViolationFactory.createRuleViolation (JavaRuleViolationFactory.java:30)      at net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactory.addViolation (AbstractRuleViolationFactory.java:37)      at net.sourceforge.pmd.lang.rule.AbstractRule.addViolation (AbstractRule.java:359)      at net.sourceforge.pmd.lang.rule.XPathRule.evaluate (XPathRule.java:178)      at net.sourceforge.pmd.lang.rule.XPathRule.apply (XPathRule.java:158)      at net.sourceforge.pmd.lang.internal.DefaultRulechainVisitor.visit (DefaultRulechainVisitor.java:26)      at net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.visitAll (AbstractRuleChainVisitor.java:99)      at net.sourceforge.pmd.RuleChain.apply (RuleChain.java:72)      at net.sourceforge.pmd.RuleSets.apply (RuleSets.java:145)      at net.sourceforge.pmd.SourceCodeProcessor.processSource (SourceCodeProcessor.java:194)      at net.sourceforge.pmd.SourceCodeProcessor.processSourceCodeWithoutCache (SourceCodeProcessor.java:107)      at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode (SourceCodeProcessor.java:89)      at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode (SourceCodeProcessor.java:51)      at net.sourceforge.pmd.processor.PmdRunnable.call (PmdRunnable.java:78)      at net.sourceforge.pmd.processor.PmdRunnable.call (PmdRunnable.java:24)      at java.util.concurrent.FutureTask.run (FutureTask.java:266)      at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:511)      at java.util.concurrent.FutureTask.run (FutureTask.java:266)      at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1149)      at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)      at java.lang.Thread.run (Thread.java:748)  Caused by: org.jaxen.saxpath.XPathSyntaxException: Expected: ]      at org.jaxen.saxpath.base.XPathReader.createSyntaxException (XPathReader.java:1085)      at org.jaxen.saxpath.base.XPathReader.match (XPathReader.java:1038)      at org.jaxen.saxpath.base.XPathReader.predicate (XPathReader.java:768)      at org.jaxen.saxpath.base.XPathReader.predicates (XPathReader.java:751)      at org.jaxen.saxpath.base.XPathReader.nameTest (XPathReader.java:717)      at org.jaxen.saxpath.base.XPathReader.nodeTest (XPathReader.java:592)      at org.jaxen.saxpath.base.XPathReader.step (XPathReader.java:541)      at org.jaxen.saxpath.base.XPathReader.steps (XPathReader.java:492)      at org.jaxen.saxpath.base.XPathReader.absoluteLocationPath (XPathReader.java:390)      at org.jaxen.saxpath.base.XPathReader.locationPath (XPathReader.java:326)      at org.jaxen.saxpath.base.XPathReader.pathExpr (XPathReader.java:185)      at org.jaxen.saxpath.base.XPathReader.unionExpr (XPathReader.java:1007)      at org.jaxen.saxpath.base.XPathReader.unaryExpr (XPathReader.java:995)      at org.jaxen.saxpath.base.XPathReader.multiplicativeExpr (XPathReader.java:943)      at org.jaxen.saxpath.base.XPathReader.additiveExpr (XPathReader.java:913)      at org.jaxen.saxpath.base.XPathReader.relationalExpr (XPathReader.java:860)      at org.jaxen.saxpath.base.XPathReader.equalityExpr (XPathReader.java:829)      at org.jaxen.saxpath.base.XPathReader.andExpr (XPathReader.java:809)      at org.jaxen.saxpath.base.XPathReader.orExpr (XPathReader.java:787)      at org.jaxen.saxpath.base.XPathReader.expr (XPathReader.java:780)      at org.jaxen.saxpath.base.XPathReader.unionExpr (XPathReader.java:1017)      at org.jaxen.saxpath.base.XPathReader.unaryExpr (XPathReader.java:995)      at org.jaxen.saxpath.base.XPathReader.multiplicativeExpr (XPathReader.java:943)      at org.jaxen.saxpath.base.XPathReader.additiveExpr (XPathReader.java:913)      at org.jaxen.saxpath.base.XPathReader.relationalExpr (XPathReader.java:860)      at org.jaxen.saxpath.base.XPathReader.equalityExpr (XPathReader.java:829)      at org.jaxen.saxpath.base.XPathReader.andExpr (XPathReader.java:809)      at org.jaxen.saxpath.base.XPathReader.orExpr (XPathReader.java:787)      at org.jaxen.saxpath.base.XPathReader.expr (XPathReader.java:780)      at org.jaxen.saxpath.base.XPathReader.parse (XPathReader.java:100)      at org.jaxen.BaseXPath. (BaseXPath.java:116)      at org.jaxen.BaseXPath. (BaseXPath.java:142)      at net.sourceforge.pmd.lang.ast.AbstractNode.findChildNodesWithXPath (AbstractNode.java:527)      at net.sourceforge.pmd.lang.ast.AbstractNode.hasDescendantMatchingXPath (AbstractNode.java:534)      at net.sourceforge.pmd.lang.rule.ParametricRuleViolation.setSuppression (ParametricRuleViolation.java:75)      at net.sourceforge.pmd.lang.rule.ParametricRuleViolation. (ParametricRuleViolation.java:58)      at net.sourceforge.pmd.lang.java.rule.JavaRuleViolation. (JavaRuleViolation.java:53)      at net.sourceforge.pmd.lang.java.rule.JavaRuleViolationFactory.createRuleViolation (JavaRuleViolationFactory.java:30)      at net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactory.addViolation (AbstractRuleViolationFactory.java:37)      at net.sourceforge.pmd.lang.rule.AbstractRule.addViolation (AbstractRule.java:359)      at net.sourceforge.pmd.lang.rule.XPathRule.evaluate (XPathRule.java:178)      at net.sourceforge.pmd.lang.rule.XPathRule.apply (XPathRule.java:158)      at net.sourceforge.pmd.lang.internal.DefaultRulechainVisitor.visit (DefaultRulechainVisitor.java:26)      at net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.visitAll (AbstractRuleChainVisitor.java:99)      at net.sourceforge.pmd.RuleChain.apply (RuleChain.java:72)      at net.sourceforge.pmd.RuleSets.apply (RuleSets.java:145)      at net.sourceforge.pmd.SourceCodeProcessor.processSource (SourceCodeProcessor.java:194)      at net.sourceforge.pmd.SourceCodeProcessor.processSourceCodeWithoutCache (SourceCodeProcessor.java:107)      at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode (SourceCodeProcessor.java:89)      at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode (SourceCodeProcessor.java:51)      at net.sourceforge.pmd.processor.PmdRunnable.call (PmdRunnable.java:78)      at net.sourceforge.pmd.processor.PmdRunnable.call (PmdRunnable.java:24)      at java.util.concurrent.FutureTask.run (FutureTask.java:266)      at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:511)      at java.util.concurrent.FutureTask.run (FutureTask.java:266)      at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1149)      at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)      at java.lang.Thread.run (Thread.java:748)  [INFO] Analysis cache created  [WARNING] There are 1 PMD processing errors:  [WARNING] /home/travis/build/checkstyle/checkstyle/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java: RuntimeException: XPath expression //ClassOrInterfaceDeclaration[@SimpleName='AssertGeneratedJavaLexer']                         //MethodDeclaration[@Name='LA']                     | //ClassOrInterfaceDeclaration[@SimpleName='AssertGenTextBlockLexer']                      //MethodDeclaration[@Name='LA' failed: Expected: ] ````","closed","","rnveach","2020-08-16T01:12:50Z","2020-08-23T06:22:34Z"
"","9003","nondex tool found issue in token ordering at Indentation","Identified at https://travis-ci.org/github/checkstyle/checkstyle/jobs/675893545#L3230 and resulted from merging https://github.com/checkstyle/checkstyle/pull/8099 it was reverted and second PR (https://github.com/checkstyle/checkstyle/pull/8140) stuck in blocking state, initial try to fix was done at https://github.com/checkstyle/checkstyle/pull/8116  I believe the issue is from IndentationCheck and that it generates its list of tokens using a Set, which doesn't guarantee order. Nondex runs could clearly be seen randomizing the list of tokens, so I fixed it by sorting the tokens.  How to debug nondex issues (This is not by all means a detailed guide):  I found that right after the test failures, nondex reports commands that can be used to directly re-run the failure for debugging. Example: https://travis-ci.org/github/checkstyle/checkstyle/jobs/675893545#L3237-L3238 > `mvn nondex:nondex  -DnondexFilter='.*' -DnondexMode=FULL -DnondexSeed=933178 -DnondexStart=0 -DnondexEnd=9223372036854775807 -DnondexPrintstack=false -DnondexDir=""/home/travis/build/checkstyle/checkstyle/.nondex"" -DnondexJarDir=""/home/travis/build/checkstyle/checkstyle/.nondex"" -DnondexExecid=KSFBHLJqhU3VzpVTwCrofpz33iuNv66h8ERN4hf2Zg= -DnondexLogging=CONFIG`  I used this command and added many console print outs to determine how the check was failing and compared it to the normal run without nondex. This is what lead me to the sorting issue. Since many runs always pointed back to IndentationCheck, I could make the deduction that it is because of the Set IndentationCheck uses to build its list of tokens.","closed","miscellaneous,","romani","2020-11-20T15:19:49Z","2021-01-18T00:39:58Z"
"","8116","minor: fix nondex issue in token ordering from Indentation","Identified at https://travis-ci.org/github/checkstyle/checkstyle/jobs/675893545#L3230 and resulted from merging https://github.com/checkstyle/checkstyle/pull/8099 ,  I believe the issue is from IndentationCheck and that it generates its list of tokens using a Set, which doesn't guarantee order. Nondex runs could clearly be seen randomizing the list of tokens, so I fixed it by sorting the tokens.  How to debug nondex issues (This is not by all means a detailed guide):  I found that right after the test failures, nondex reports commands that can be used to directly re-run the failure for debugging. Example: https://travis-ci.org/github/checkstyle/checkstyle/jobs/675893545#L3237-L3238 > `mvn nondex:nondex  -DnondexFilter='.*' -DnondexMode=FULL -DnondexSeed=933178 -DnondexStart=0 -DnondexEnd=9223372036854775807 -DnondexPrintstack=false -DnondexDir=""/home/travis/build/checkstyle/checkstyle/.nondex"" -DnondexJarDir=""/home/travis/build/checkstyle/checkstyle/.nondex"" -DnondexExecid=KSFBHLJqhU3VzpVTwCrofpz33iuNv66h8ERN4hf2Zg= -DnondexLogging=CONFIG`  I used this command and added many console print outs to determine how the check was failing and compared it to the normal run without nondex. This is what lead me to the sorting issue. Since many runs always pointed back to IndentationCheck, I could make the deduction that it is because of the Set IndentationCheck uses to build its list of tokens.","closed","","rnveach","2020-04-17T11:08:56Z","2020-11-20T15:25:39Z"
"","8014","Resolve errors reported by Travis Build Config Validation","Identified at https://travis-ci.org/github/checkstyle/checkstyle/builds/670098380/config when clicking ""View Config"" and expanding the list in ""Build config validation"":  ````  Build config validation — 6 errors, 2 warnings, 4 infos  jobs.include.env: invalid env var DESC=""MacOS JDK13 verify, site ... jobs.include.env: invalid env var DESC=""MacOS JDK11 verify, site ... jobs.include.env: invalid env var DESC=""MacOS JDK8 verify, site, ... jobs.include.env: invalid env var DESC=""MacOS JDK8 verify, site, ... jobs.include.env: invalid env var DESC=""MacOS JDK13 verify, site ... jobs.include.env: invalid env var DESC=""MacOS JDK11 verify, site ... root: deprecated key sudo (The key `sudo` has no effect anymore.) root: deprecated key sudo (The key `sudo` has no effect anymore.) root: key matrix is an alias for jobs, using jobs root: missing dist, using the default xenial root: missing os, using the default linux root: key matrix is an alias for jobs, using jobs ````  We should look into what is being reported and see if we can resolve them.","closed","CI,","rnveach","2020-04-03T00:17:35Z","2020-04-04T13:50:57Z"
"","8224","SuppressionsLoader: misleading file not found message when it is found but internal file is not","Identified at https://stackoverflow.com/questions/61574901/checkstyle-checkstyleexception-unable-to-find-but-file-exists ,  ```` $ cat TestClass.java public class TestClass {     void method() {     } }  $ cat TestConfig.xml                         $ cat suppressions.xml        $ java -jar checkstyle-8.32-all.jar -c TestConfig.xml TestClass.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module SuppressionFilter - Unable to find: TestSuppressions.xml     at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:482)     at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:201)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:404)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)     at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Unable to find: TestSuppressions.xml     at com.puppycrawl.tools.checkstyle.filters.SuppressionsLoader.getSuppressionLoader(SuppressionsLoader.java:287)     at com.puppycrawl.tools.checkstyle.filters.SuppressionsLoader.loadSuppressions(SuppressionsLoader.java:238)     at com.puppycrawl.tools.checkstyle.filters.SuppressionsLoader.loadSuppressions(SuppressionsLoader.java:224)     at com.puppycrawl.tools.checkstyle.filters.SuppressionFilter.finishLocalSetup(SuppressionFilter.java:269)     at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:197)     at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:477)     ... 5 more Caused by: java.io.FileNotFoundException: http://www.puppycrawl.com/dtds/configuration_1_3.dtd     at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1896)     at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)     at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.setupCurrentEntity(XMLEntityManager.java:647)     at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.startEntity(XMLEntityManager.java:1304)     at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.startDTDEntity(XMLEntityManager.java:1270)     at com.sun.org.apache.xerces.internal.impl.XMLDTDScannerImpl.setInputSource(XMLDTDScannerImpl.java:264)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.dispatch(XMLDocumentScannerImpl.java:1161)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.next(XMLDocumentScannerImpl.java:1045)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:959)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:602)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:505)     at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:842)     at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:771)     at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)     at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1213)     at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:643)     at com.puppycrawl.tools.checkstyle.XmlLoader.parseInputSource(XmlLoader.java:86)     at com.puppycrawl.tools.checkstyle.filters.SuppressionsLoader.getSuppressionLoader(SuppressionsLoader.java:283)     ... 10 more Checkstyle ends with 1 errors. ````  The message `Unable to find: TestSuppressions.xml` is misleading. The file was found, it was the internal DTD URL we could not find because it is outdated.  https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java#L287 We default to the config on a file not found exception when we should be basing the message off what is in the exception message.  We should make the message clearer in this circumstance and ensure all XmlLoaders follow suite.","open","","rnveach","2020-05-04T02:23:19Z","2020-05-04T02:24:37Z"
"","8291","Checkstyle freezes on deeply nested lambdas","Identified at https://github.com/checkstyle/contribution/issues/483 ,  ```` $ cat TestClass.java import java.util.concurrent.Callable;  class TestClass {     void test() {         m(null, () -> m(null, () -> m(null, () -> m(null, () -> m(null, () -> m(null, () -> m(null,                 () -> m(null, () -> m(null, () -> m(null, () -> m(null, () -> m(null, () -> m(null,                 () -> m(null, () -> m(null, () -> m(null, () -> m(null, () -> m(null, () -> m(null,                 () -> m(null, () -> m(null, () -> m(null, () -> m(null, () -> m(null, () -> m(null,                 () -> m(null, () -> m(null, () -> m(null, () -> m(null, () -> m(null, () -> m(null,                 (Callable)null)))))))))))))))))))))))))))))));     }     static class A0 { }     static class A1 { }     static class A2 { }     static class A3 { }     static class A4 { }      Z m(A0 t, Callable ct) { return null; }      Z m(A1 t, Callable ct) { return null; }      Z m(A2 t, Callable ct) { return null; }      Z m(A3 t, Callable ct) { return null; }      Z m(A4 t, Callable ct) { return null; }      Z m(Object o, Callable co) { return null; } }  $ cat TestConfig.xml                                                                                                                                                                                          $ java -jar checkstyle-8.33-all.jar -c TestConfig.xml TestClass.java Starting audit... ````  Checkstyle completely freezes after that and does not respond. It does not seem related to the check being run but the AST.","closed","miscellaneous,","rnveach","2020-06-01T14:51:00Z","2021-08-13T05:24:34Z"
"","8656","Checkstyle fails to parse unicode escapes as comment delimiters","Identified at https://github.com/checkstyle/checkstyle/pull/8634#discussion_r468594904 Check documentation: https://checkstyle.sourceforge.io/config_naming.html#ClassTypeParameterName  ``` ➜  IdeaProjects /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 jdk14/test/langtools/tools/javac/unicode/UnicodeCommentDelimiter.java ➜  IdeaProjects cat single-module-config.xml                      ➜  IdeaProjects cat jdk14/test/langtools/tools/javac/unicode/UnicodeCommentDelimiter.java /*  * Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved.  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.  *  * This code is free software; you can redistribute it and/or modify it  * under the terms of the GNU General Public License version 2 only, as  * published by the Free Software Foundation.  *  * This code is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  * version 2 for more details (a copy is included in the LICENSE file that  * accompanied this code).  *  * You should have received a copy of the GNU General Public License version  * 2 along with this work; if not, write to the Free Software Foundation,  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.  *  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA  * or visit www.oracle.com if you need additional information or have any  * questions.  */  /*  * @test  * @summary unicode escapes delimiting and inside of comments  *  * @compile UnicodeCommentDelimiter.java  */  class UnicodeCommentDelimiter {     public static void main(String[] args) {         // no error on the following line because although \u005c         // represents a backslash, that cannot be considered to begin         // a unicode escape sequence.         // \u005c000a xyzzy plugh;          // no error on the following line because there are an even         // number of backslashes before the u, meaning it is not a         // unicode escape sequence.         // \\u000a xyzzy plugh;          // However, unicode escaped characters can delimit comments.         \u002f\u002f xyzzy plugh;          // \u000a class plugh{}         plugh xyzzy;     } } ➜  IdeaProjects java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c single-module-config.xml jdk14/test/langtools/tools/javac/unicode/UnicodeCommentDelimiter.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing jdk14/test/langtools/tools/javac/unicode/UnicodeCommentDelimiter.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: TokenStreamRecognitionException occurred while parsing file /home/nick/IdeaProjects/jdk14/test/langtools/tools/javac/unicode/UnicodeCommentDelimiter.java.         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:149)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Caused by: line 44:9: unexpected char: '\'         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaLexer.nextToken(GeneratedJavaLexer.java:412)         at antlr.TokenStreamHiddenTokenFilter.consume(TokenStreamHiddenTokenFilter.java:38)         at antlr.TokenStreamHiddenTokenFilter.nextToken(TokenStreamHiddenTokenFilter.java:148)         at antlr.TokenStreamSelector.nextToken(TokenStreamSelector.java:65)         at antlr.TokenBuffer.fill(TokenBuffer.java:69)         at antlr.TokenBuffer.LA(TokenBuffer.java:80)         at antlr.LLkParser.LA(LLkParser.java:52)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.declaratorBrackets(GeneratedJavaRecognizer.java:2987)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.parameterDeclaration(GeneratedJavaRecognizer.java:5381)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.parameterDeclarationList(GeneratedJavaRecognizer.java:4376)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3129)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:3416)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:646)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:561)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:402)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:212)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114)         ... 9 more Checkstyle ends with 1 errors.   ```  Checkstyle should be able to parse this file, since it is compilable.","open","antlr,","nick-mancuso","2020-08-11T16:53:23Z","2021-08-13T15:26:17Z"
"","8655","Checkstyle fails to parse unicode escape line terminators","Identified at https://github.com/checkstyle/checkstyle/pull/8634#discussion_r468594904 Check documentation: https://checkstyle.sourceforge.io/config_naming.html#ClassTypeParameterName  ``` ➜  IdeaProjects /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 jdk14/test/langtools/tools/javac/unicode/UnicodeAtEOL.java ➜  IdeaProjects cat single-module-config.xml                      ➜  IdeaProjects cat jdk14/test/langtools/tools/javac/unicode/UnicodeAtEOL.java /*  * Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.  *  * This code is free software; you can redistribute it and/or modify it  * under the terms of the GNU General Public License version 2 only, as  * published by the Free Software Foundation.  *  * This code is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  * version 2 for more details (a copy is included in the LICENSE file that  * accompanied this code).  *  * You should have received a copy of the GNU General Public License version  * 2 along with this work; if not, write to the Free Software Foundation,  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.  *  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA  * or visit www.oracle.com if you need additional information or have any  * questions.  */  /* @test    @bug 4086919    @summary Correct handling of unicode escapes for line termination    @compile UnicodeAtEOL.java */ public class UnicodeAtEOL {    public static void main(String[] args) {        // \u000D        // should end the line; bug doesn't see it as escape        int a; \u000D         // \u000A        // should end the line; bug doesn't see it as escape        int b; \u000A     } } ➜  IdeaProjects java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c single-module-config.xml jdk14/test/langtools/tools/javac/unicode/UnicodeAtEOL.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing jdk14/test/langtools/tools/javac/unicode/UnicodeAtEOL.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: TokenStreamRecognitionException occurred while parsing file /home/nick/IdeaProjects/jdk14/test/langtools/tools/javac/unicode/UnicodeAtEOL.java.         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:149)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Caused by: line 33:15: unexpected char: '\'         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaLexer.nextToken(GeneratedJavaLexer.java:412)         at antlr.TokenStreamHiddenTokenFilter.consume(TokenStreamHiddenTokenFilter.java:38)         at antlr.TokenStreamHiddenTokenFilter.nextToken(TokenStreamHiddenTokenFilter.java:134)         at antlr.TokenStreamSelector.nextToken(TokenStreamSelector.java:65)         at antlr.TokenBuffer.fill(TokenBuffer.java:69)         at antlr.TokenBuffer.LA(TokenBuffer.java:80)         at antlr.LLkParser.LA(LLkParser.java:52)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.declaratorBrackets(GeneratedJavaRecognizer.java:2954)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.variableDeclarator(GeneratedJavaRecognizer.java:5053)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.variableDefinitions(GeneratedJavaRecognizer.java:1766)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.declaration(GeneratedJavaRecognizer.java:1745)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.traditionalStatement(GeneratedJavaRecognizer.java:5909)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.statement(GeneratedJavaRecognizer.java:4815)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compoundStatement(GeneratedJavaRecognizer.java:4544)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3159)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:3416)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:646)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:561)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:402)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:212)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114)         ... 9 more Checkstyle ends with 1 errors.   ```  Checkstyle should be able to parse this file, since it is compilable.","open","antlr,","nick-mancuso","2020-08-11T16:51:22Z","2021-08-13T15:27:58Z"
"","8654","Checkstyle fails on escapes in identifiers","Identified at https://github.com/checkstyle/checkstyle/pull/8634#discussion_r468594904 Check documentation: https://checkstyle.sourceforge.io/config_naming.html#ClassTypeParameterName  ``` ➜  IdeaProjects /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 jdk14/test/langtools/tools/javac/unicode/SupplementaryJavaID1.java ➜  IdeaProjects cat single-module-config.xml                      ➜  IdeaProjects cat jdk14/test/langtools/tools/javac/unicode/SupplementaryJavaID1.java /*  * Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.  *  * This code is free software; you can redistribute it and/or modify it  * under the terms of the GNU General Public License version 2 only, as  * published by the Free Software Foundation.  *  * This code is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  * version 2 for more details (a copy is included in the LICENSE file that  * accompanied this code).  *  * You should have received a copy of the GNU General Public License version  * 2 along with this work; if not, write to the Free Software Foundation,  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.  *  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA  * or visit www.oracle.com if you need additional information or have any  * questions.  */  /*  * @test  * @bug 4914724  * @summary Check that valid supplementary characters can be used as Java identifiers.  * @author Naoto Sato  *  * @compile SupplementaryJavaID1.java  * @run main SupplementaryJavaID1  */  public class SupplementaryJavaID1 {     public static void main(String[] s) {         // U+10400 (\ud801\udc00): DESERET CAPITAL LETTER LONG I (can be start or part)         // U+1D17B (\ud834\udd7b): MUSICAL SYMBOL COMBINING ACCENT (can only be part)         // U+1D100 (\ud834\udd00): MUSICAL SYMBOL SINGLE BARLINE (can be none of start nor part)         int \ud801\udc00abc = 1;         int \ud802\udc00abc = 2;         int \ud801\udc01abc = 3;         int def\ud801\udc00 = 4;         int \ud801\udc00\ud834\udd7b = 5;          if (\ud801\udc00abc != 1 ||             \ud802\udc00abc != 2 ||             \ud801\udc01abc != 3 ||             def\ud801\udc00 != 4 ||             \ud801\udc00\ud834\udd7b != 5) {                 throw new RuntimeException(""test failed"");         }     } } ➜  IdeaProjects java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c single-module-config.xml jdk14/test/langtools/tools/javac/unicode/SupplementaryJavaID1.java  Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing jdk14/test/langtools/tools/javac/unicode/SupplementaryJavaID1.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: TokenStreamRecognitionException occurred while parsing file /home/nick/IdeaProjects/jdk14/test/langtools/tools/javac/unicode/SupplementaryJavaID1.java.         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:149)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Caused by: line 39:13: unexpected char: '\'         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaLexer.nextToken(GeneratedJavaLexer.java:412)         at antlr.TokenStreamHiddenTokenFilter.consume(TokenStreamHiddenTokenFilter.java:38)         at antlr.TokenStreamHiddenTokenFilter.nextToken(TokenStreamHiddenTokenFilter.java:134)         at antlr.TokenStreamSelector.nextToken(TokenStreamSelector.java:65)         at antlr.TokenBuffer.fill(TokenBuffer.java:69)         at antlr.TokenBuffer.LA(TokenBuffer.java:80)         at antlr.LLkParser.LA(LLkParser.java:52)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.declaratorBrackets(GeneratedJavaRecognizer.java:2987)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3134)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:3416)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:646)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:561)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:402)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:212)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114)         ... 9 more Checkstyle ends with 1 errors.   ```  Checkstyle should be able to parse this file, since it is compilable.  Another related file in openjdk14 is `jdk14/test/langtools/tools/javac/unicode/SupplementaryJavaID6.java` and can be used for test inputs when fixing this issue.","open","antlr,","nick-mancuso","2020-08-11T16:47:17Z","2021-08-13T15:28:53Z"
"","8651","Checkstyle fails on escape '\s' character","Identified at https://github.com/checkstyle/checkstyle/pull/8634#discussion_r468594904 Check documentation: https://checkstyle.sourceforge.io/config_naming.html#ClassTypeParameterName  ``` ➜  IdeaProjects /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 jdk14/test/langtools/tools/javac/TextBlockLang.java Note: jdk14/test/langtools/tools/javac/TextBlockLang.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  IdeaProjects cat single-module-config.xml                                                                      ➜  IdeaProjects cat jdk14/test/langtools/tools/javac/TextBlockLang.java /*  * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.  *  * This code is free software; you can redistribute it and/or modify it  * under the terms of the GNU General Public License version 2 only, as  * published by the Free Software Foundation.  *  * This code is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  * version 2 for more details (a copy is included in the LICENSE file that  * accompanied this code).  *  * You should have received a copy of the GNU General Public License version  * 2 along with this work; if not, write to the Free Software Foundation,  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.  *  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA  * or visit www.oracle.com if you need additional information or have any  * questions.  */  /*  * @test  * @bug 8223967  * @summary Unit tests for Text Block language changes  * @compile --enable-preview -source ${jdk.version} -encoding utf8 TextBlockLang.java  * @run main/othervm --enable-preview TextBlockLang  */  public class TextBlockLang {     public static void main(String... args) {         test1();         test2();         test3();     }      /*      * Test basic string functionality.      */     static void test1() {         EQ(""""""            """""", """");         EQ(""""""             abc             """""", ""abc\n"");         EQ(""""""             """""", ""\n"");         EQ(""""""             ""             """""", ""\""\n"");         EQ(""""""             """"             """""", ""\""\""\n"");         EQ(""""""            \""""""            """""", ""\""\""\""\n"");         EQ(""""""            ""\""""            """""", ""\""\""\""\n"");         EQ(""""""            """"\""            """""", ""\""\""\""\n"");         EQ(""""""             \r             """""", ""\r\n"");         EQ(""""""             \u2022             """""", ""\u2022\n"");         EQ(""""""             •             """""", ""\u2022\n"");         LENGTH(""""""             abc             """""", 4);     }      /*      * Test escape-S.      */     static void test2() {         if ('\s' != ' ') {             throw new RuntimeException(""Failed character escape-S"");         }         EQ(""\s"", "" "");         EQ(""""""            \s            """""", "" \n"");     }      /*      * Test escape line terminator.      */     static void test3() {         EQ(""""""            abc \            """""", ""abc "");         EQ(""\\\n"".translateEscapes(), """");         EQ(""\\\r\n"".translateEscapes(), """");         EQ(""\\\r"".translateEscapes(), """");     }      /*      * Raise an exception if the string is not the expected length.      */     static void LENGTH(String string, int length) {         if (string == null || string.length() != length) {             System.err.println(""Failed LENGTH"");             System.err.println(string + "" "" + length);             throw new RuntimeException(""Failed LENGTH"");         }     }      /*      * Raise an exception if the two input strings are not equal.      */     static void EQ(String input, String expected) {         if (input == null || expected == null || !expected.equals(input)) {             System.err.println(""Failed EQ"");             System.err.println();             System.err.println(""Input:"");             System.err.println(input.replaceAll("" "", "".""));             System.err.println();             System.err.println(""Expected:"");             System.err.println(expected.replaceAll("" "", "".""));             throw new RuntimeException();         }     } } ➜  IdeaProjects java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c single-module-config.xml jdk14/test/langtools/tools/javac/TextBlockLang.java  Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing jdk14/test/langtools/tools/javac/TextBlockLang.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: TokenStreamRecognitionException occurred while parsing file /home/nick/IdeaProjects/jdk14/test/langtools/tools/javac/TextBlockLang.java. 	at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:149) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Caused by: line 84:15: unexpected char: 's' 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaLexer.nextToken(GeneratedJavaLexer.java:412) 	at antlr.TokenStreamHiddenTokenFilter.consume(TokenStreamHiddenTokenFilter.java:38) 	at antlr.TokenStreamHiddenTokenFilter.nextToken(TokenStreamHiddenTokenFilter.java:134) 	at antlr.TokenStreamSelector.nextToken(TokenStreamSelector.java:65) 	at antlr.TokenBuffer.fill(TokenBuffer.java:69) 	at antlr.TokenBuffer.LT(TokenBuffer.java:86) 	at antlr.LLkParser.LT(LLkParser.java:56) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.traditionalStatement(GeneratedJavaRecognizer.java:5653) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.statement(GeneratedJavaRecognizer.java:4815) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compoundStatement(GeneratedJavaRecognizer.java:4544) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3159) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:3416) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:646) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:561) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:402) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:212) 	at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114) 	... 9 more Checkstyle ends with 1 errors.  ```  Checkstyle should be able to parse this file, since it is compilable.","closed","antlr,","nick-mancuso","2020-08-11T16:07:50Z","2020-12-27T09:46:10Z"
"","8650","Checkstyle fails to parse unusual parameter names","Identified at https://github.com/checkstyle/checkstyle/pull/8634#discussion_r468594904 Check documentation: https://checkstyle.sourceforge.io/config_naming.html#ClassTypeParameterName  ``` ➜  IdeaProjects /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 jdk14/test/langtools/tools/javac/MethodParameters/UncommonParamNames.java ➜  IdeaProjects cat single-module-config.xml                      ➜  IdeaProjects cat jdk14/test/langtools/tools/javac/MethodParameters/UncommonParamNames.java /*  * Copyright (c) 2013, 2016, Oracle and/or its affiliates. All rights reserved.  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.  *  * This code is free software; you can redistribute it and/or modify it  * under the terms of the GNU General Public License version 2 only, as  * published by the Free Software Foundation.  *  * This code is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  * version 2 for more details (a copy is included in the LICENSE file that  * accompanied this code).  *  * You should have received a copy of the GNU General Public License version  * 2 along with this work; if not, write to the Free Software Foundation,  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.  *  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA  * or visit www.oracle.com if you need additional information or have any  * questions.  */  /*  * @test  * @bug 8006582  * @summary javac should generate method parameters correctly.  * @modules jdk.jdeps/com.sun.tools.classfile  * @build MethodParametersTester ClassFileVisitor ReflectionVisitor  * @compile -parameters UncommonParamNames.java  * @run main MethodParametersTester UncommonParamNames UncommonParamNames.out  */  /** Test uncommon parameter names */ class UncommonParamNames {     public UncommonParamNames(int _x) { }     public UncommonParamNames(short $1) { }     public UncommonParamNames(long \u0061) { }     public UncommonParamNames(char zero\u0000zero\u0000) { }     public UncommonParamNames(String zero\u0000zero\u0000seven\u0007) { }     public UncommonParamNames(Object zero\u0000zero\u0000eight\u0008) { }     public UncommonParamNames(Object aLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongName,                               Object baLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongName,                               Object cbaLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongName) { }     public UncommonParamNames(int a, int ba, int cba, int dcba, int edcba, int fedcba, int gfedcba,                               int hgfedcba, int ihgfedcba, int jihgfedcba, int kjihgfedcba, int lkjihgfedcba,                               int mlkjihgfedcba, int nmlkjihgfedcba, int onmlkjihgfedcba, int ponmlkjihgfedcba,                               int qponmlkjihgfedcba, int rqponmlkjihgfedcba, int srqponmlkjihgfedcba,                               int tsrqponmlkjihgfedcba, int utsrqponmlkjihgfedcba, int vutsrqponmlkjihgfedcba,                               int wvutsrqponmlkjihgfedcba, int xwvutsrqponmlkjihgfedcba,                               int yxwvutsrqponmlkjihgfedcba, int zyxwvutsrqponmlkjihgfedcba) { }      public void foo(int _x) { }     public void foo(short $1) { }     public void foo(long \u0061) { }     public void foo(char zero\u0000zero\u0000) { }     public void foo(String zero\u0000zero\u0000seven\u0007) { }     public void foo(Object zero\u0000zero\u0000eight\u0008) { }     public void foo(Object aLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongName,                     Object baLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongName,                     Object cbaLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongName) { }     public void foo(int a, int ba, int cba, int dcba, int edcba, int fedcba, int gfedcba,                     int hgfedcba, int ihgfedcba, int jihgfedcba, int kjihgfedcba, int lkjihgfedcba,                     int mlkjihgfedcba, int nmlkjihgfedcba, int onmlkjihgfedcba, int ponmlkjihgfedcba,                     int qponmlkjihgfedcba, int rqponmlkjihgfedcba, int srqponmlkjihgfedcba,                     int tsrqponmlkjihgfedcba, int utsrqponmlkjihgfedcba, int vutsrqponmlkjihgfedcba,                     int wvutsrqponmlkjihgfedcba, int xwvutsrqponmlkjihgfedcba,                     int yxwvutsrqponmlkjihgfedcba, int zyxwvutsrqponmlkjihgfedcba) { } } ➜  IdeaProjects java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c single-module-config.xml jdk14/test/langtools/tools/javac/MethodParameters/UncommonParamNames.java  Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing jdk14/test/langtools/tools/javac/MethodParameters/UncommonParamNames.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: TokenStreamRecognitionException occurred while parsing file /home/nick/IdeaProjects/jdk14/test/langtools/tools/javac/MethodParameters/UncommonParamNames.java. 	at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:149) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Caused by: line 38:36: unexpected char: '\' 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaLexer.nextToken(GeneratedJavaLexer.java:412) 	at antlr.TokenStreamHiddenTokenFilter.consume(TokenStreamHiddenTokenFilter.java:38) 	at antlr.TokenStreamHiddenTokenFilter.nextToken(TokenStreamHiddenTokenFilter.java:134) 	at antlr.TokenStreamSelector.nextToken(TokenStreamSelector.java:65) 	at antlr.TokenBuffer.fill(TokenBuffer.java:69) 	at antlr.TokenBuffer.LA(TokenBuffer.java:80) 	at antlr.LLkParser.LA(LLkParser.java:52) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.parameterDeclarationList(GeneratedJavaRecognizer.java:4370) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.ctorHead(GeneratedJavaRecognizer.java:4573) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3106) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:3416) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:646) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:561) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:402) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:212) 	at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114) 	... 9 more Checkstyle ends with 1 errors.   ```  Checkstyle should be able to parse this file, since it is compilable.","open","antlr,","nick-mancuso","2020-08-11T16:01:47Z","2021-08-13T15:29:54Z"
"","8652","Checkstyle fails with unusual annotations","Identified at https://github.com/checkstyle/checkstyle/pull/8634#discussion_r468594904 Check documentation: https://checkstyle.sourceforge.io/config_naming.html#ClassTypeParameterName  ``` ➜  IdeaProjects /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 jdk14/test/langtools/tools/javac/annotations/typeAnnotations/newlocations/AllLocations.java ➜  IdeaProjects cat single-module-config.xml                      ➜  IdeaProjects cat jdk14/test/langtools/tools/javac/annotations/typeAnnotations/newlocations/AllLocations.java /*  * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.  *  * This code is free software; you can redistribute it and/or modify it  * under the terms of the GNU General Public License version 2 only, as  * published by the Free Software Foundation.  *  * This code is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  * version 2 for more details (a copy is included in the LICENSE file that  * accompanied this code).  *  * You should have received a copy of the GNU General Public License version  * 2 along with this work; if not, write to the Free Software Foundation,  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.  *  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA  * or visit www.oracle.com if you need additional information or have any  * questions.  */  /*  * @test  * @bug 8027262  * @summary Stress test for type annotatons  * @compile AllLocations.java  */  import java.util.function.Function; import java.lang.annotation.*; import static java.lang.annotation.RetentionPolicy.*; import static java.lang.annotation.ElementType.*; import java.io.*; import java.lang.ref.WeakReference;  public class AllLocations {      public class ParamStream extends FileOutputStream {         public ParamStream(File f) throws FileNotFoundException { super(f); }     }      public class Inner {         public Inner() {}         public  Inner(@B Object o) {}         public  Object g(Inner this, Object @E [] o) {             return new @F int @G [5];         }     }      public  AllLocations(Object o) {}      public @L Object @M [] @N [] arr = new @O Object @P [5] @Q [5];      public Inner inner;      public Function func(@V AllLocations this) {         try (final ParamStream fs = new ParamStream(new File(""testfile""))) {             return @AA AllLocations.Inner::new;         } catch(@AD Exception ex) {             return null;         }     }      public  Function func2() {         arr[0][0] = new @AI Inner((@AJ Object) arr[0]);         return Ext.f((@AK Object) arr[0]) instanceof @AL Inner @AM [] @AN [] ?             @AO @AP Ext:: f :             @AS @AT Ext:: f;     }      public Object func3(Object @AW [] arr) {         Inner loc;         if (arr[0] instanceof @BB Inner @BC [] @BD [])             return this. func4();         else             return new  @BI Inner(null);     }      public      @BR Inner func4() {         return (@BU Inner)             new  @BZ Inner(null) {};     }    { Inner loc =       new @CG Inner() {};       Ext.func(Ext.func(@CJ WeakReference::new));       Ext.func(Ext.func(@CK Ext::f));       Ext.func((@CM Object a) -> { @CN Object b = a; return b; });   }  }  class Ext {     public static  Object f(Object o) {         return null;     }     public static Function func(Function f) { return f; } }   @Retention(RUNTIME) @Target({TYPE_USE}) @interface A { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface B { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface C { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface D { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface E { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface F { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface G { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface H { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface I { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface J { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface K { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface L { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface M { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface N { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface O { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface P { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface Q { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface R { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface S { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface T { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface U { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface V { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface W { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface X { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface Y { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface Z { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AA { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AB { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AC { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AD { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AE { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AF { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AG { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AH { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AI { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AJ { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AK { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AL { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AM { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AN { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AO { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AP { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AQ { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AR { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AS { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AT { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AU { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AV { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AW { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AX { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AY { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface AZ { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BA { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BB { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BC { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BD { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BE { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BF { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BG { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BH { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BI { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BJ { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BK { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BL { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BM { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BN { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BO { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BP { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BQ { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BR { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BS { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BT { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BU { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BV { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BW { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BX { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BY { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface BZ { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CA { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CB { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CC { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CD { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CE { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CF { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CG { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CH { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CI { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CJ { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CK { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CL { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CM { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CN { } @Retention(RUNTIME) @Target({TYPE_USE}) @interface CO { } ➜  IdeaProjects java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c single-module-config.xml jdk14/test/langtools/tools/javac/annotations/typeAnnotations/newlocations/AllLocations.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing jdk14/test/langtools/tools/javac/annotations/typeAnnotations/newlocations/AllLocations.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: IllegalStateException occurred while parsing file /home/nick/IdeaProjects/jdk14/test/langtools/tools/javac/annotations/typeAnnotations/newlocations/AllLocations.java.         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:149)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Caused by: java.lang.IllegalStateException: /home/nick/IdeaProjects/jdk14/test/langtools/tools/javac/annotations/typeAnnotations/newlocations/AllLocations.java:78:53: expecting LBRACK, found 'Inner'         at com.puppycrawl.tools.checkstyle.JavaParser$1.reportError(JavaParser.java:108)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:424)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:212)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114)         ... 9 more Caused by: /home/nick/IdeaProjects/jdk14/test/langtools/tools/javac/annotations/typeAnnotations/newlocations/AllLocations.java:78:53: expecting LBRACK, found 'Inner'         at antlr.Parser.match(Parser.java:211)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classTypeSpec(GeneratedJavaRecognizer.java:908)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeArgument(GeneratedJavaRecognizer.java:1415)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeArguments(GeneratedJavaRecognizer.java:1326)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.newExpression(GeneratedJavaRecognizer.java:8920)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.primaryExpression(GeneratedJavaRecognizer.java:4895)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.postfixExpression(GeneratedJavaRecognizer.java:8586)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.castExpression(GeneratedJavaRecognizer.java:8522)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.unaryExpressionNotPlusMinus(GeneratedJavaRecognizer.java:8378)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.unaryExpression(GeneratedJavaRecognizer.java:8308)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.multiplicativeExpression(GeneratedJavaRecognizer.java:8169)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.additiveExpression(GeneratedJavaRecognizer.java:8120)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.shiftExpression(GeneratedJavaRecognizer.java:7998)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.relationalExpression(GeneratedJavaRecognizer.java:7886)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.equalityExpression(GeneratedJavaRecognizer.java:7837)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.andExpression(GeneratedJavaRecognizer.java:7808)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.exclusiveOrExpression(GeneratedJavaRecognizer.java:7779)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.inclusiveOrExpression(GeneratedJavaRecognizer.java:7750)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.logicalAndExpression(GeneratedJavaRecognizer.java:7721)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.logicalOrExpression(GeneratedJavaRecognizer.java:7692)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.conditionalExpression(GeneratedJavaRecognizer.java:2356)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.assignmentExpression(GeneratedJavaRecognizer.java:7441)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.expression(GeneratedJavaRecognizer.java:5336)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.traditionalStatement(GeneratedJavaRecognizer.java:5848)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.statement(GeneratedJavaRecognizer.java:4815)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.elseStatement(GeneratedJavaRecognizer.java:6138)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.traditionalStatement(GeneratedJavaRecognizer.java:5666)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.statement(GeneratedJavaRecognizer.java:4815)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compoundStatement(GeneratedJavaRecognizer.java:4544)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3159)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:3416)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:646)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:561)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:402)         ... 11 more Checkstyle ends with 1 errors.   ```  Checkstyle should be able to parse this file, since it is compilable. There are a number of other  openjdk files with annotations that cause exceptions when being parsed by Checkstyle:  ```  jdk14/test/langtools/tools/javac/annotations/typeAnnotations/8013180/QualifiedName.java jdk14/test/langtools/tools/javac/parser/SingleCommaAnnotationValue.java jdk14/test/langtools/tools/javac/annotations/typeAnnotations/failures/CheckErrorsForSource7.java jdk14/test/langtools/tools/javac/annotations/typeAnnotations/failures/T8011722.java jdk14/test/langtools/tools/javac/annotations/typeAnnotations/newlocations/AllLocations.java jdk14/test/langtools/tools/javac/annotations/typeAnnotations/newlocations/NestedTypes.java jdk14/test/langtools/tools/javac/treeannotests/AnnoTreeTests.java  ```  These should be added to any test input related to fixing this issue.","closed","antlr,","nick-mancuso","2020-08-11T16:14:58Z","2021-08-13T02:44:46Z"
"","8653","Checkstyle fails on empty enum with only comma in it","Identified at https://github.com/checkstyle/checkstyle/pull/8634#discussion_r468594904  ``` ➜  IdeaProjects /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 jdk14/test/langtools/tools/javac/enum/TrailingComma.java ➜  IdeaProjects cat single-module-config.xml                      ➜  IdeaProjects cat jdk14/test/langtools/tools/javac/enum/TrailingComma.java /*  * Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.  *  * This code is free software; you can redistribute it and/or modify it  * under the terms of the GNU General Public License version 2 only, as  * published by the Free Software Foundation.  *  * This code is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  * version 2 for more details (a copy is included in the LICENSE file that  * accompanied this code).  *  * You should have received a copy of the GNU General Public License version  * 2 along with this work; if not, write to the Free Software Foundation,  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.  *  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA  * or visit www.oracle.com if you need additional information or have any  * questions.  */  /*  * @test  * @bug 4936392  * @summary enum spec allows trailing comma on enum constant list  * @author gafter  *  * @compile TrailingComma.java  */  class TrailingComma {     enum a { , };     enum b { x , };     enum c { , ; };     enum d { x , ; }; } ➜  IdeaProjects java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c single-module-config.xml jdk14/test/langtools/tools/javac/enum/TrailingComma.java                                    Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing jdk14/test/langtools/tools/javac/enum/TrailingComma.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: IllegalStateException occurred while parsing file /home/nick/IdeaProjects/jdk14/test/langtools/tools/javac/enum/TrailingComma.java.         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:149)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Caused by: java.lang.IllegalStateException: /home/nick/IdeaProjects/jdk14/test/langtools/tools/javac/enum/TrailingComma.java:34:14: unexpected token: ,         at com.puppycrawl.tools.checkstyle.JavaParser$1.reportError(JavaParser.java:108)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:424)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:212)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114)         ... 9 more Caused by: /home/nick/IdeaProjects/jdk14/test/langtools/tools/javac/enum/TrailingComma.java:34:14: unexpected token: ,         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.enumBlock(GeneratedJavaRecognizer.java:3571)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.enumDefinition(GeneratedJavaRecognizer.java:732)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:575)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3062)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:3416)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:646)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:561)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:402)         ... 11 more Checkstyle ends with 1 errors.   ```  Checkstyle should be able to parse this file, since it is compilable.","closed","approved,","nick-mancuso","2020-08-11T16:32:57Z","2021-02-14T19:03:24Z"
"","8102","config: ensured all maven commands print the stack  trace","Identified at https://github.com/checkstyle/checkstyle/pull/8099#issuecomment-613768780 ,  I made sure all maven commands print the stack trace so we can look at and identify any issues in any maven commands.  I ensured all maven commands were covered by running the regular expression `(mvn [^-])|(mvn \-[^e])` and ensure nothing besides `mvn --version` showed up.","closed","","rnveach","2020-04-15T02:09:14Z","2020-04-16T16:14:26Z"
"","8710","Checkstyle: Javadoc not required on private method","Identified at https://github.com/checkstyle/checkstyle/pull/7932#discussion_r471834347 ,  All methods should have a javadoc in main code, including private methods. Somehow our config is broken that it is not reporting this.","closed","miscellaneous,","rnveach","2020-08-18T11:49:25Z","2021-01-06T07:50:29Z"
"","8943","SingleSpaceSeparator Check fails on deeply nested string concatenation","Identified at #8920  Check documentation: https://checkstyle.sourceforge.io/config_whitespace.html#SingleSpaceSeparator  ``` ➜  src cat config.xml                         ➜  src cat ~/testing/jdk14u/test/langtools/tools/javac/DeepStringConcat.java public class DeepStringConcat {     public static void main(String[] args) {         if (X.length() != 32001) throw new Error();     }     public static final String X = ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+ ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+ ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+ ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+ ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+  ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+ ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+ ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+ ... hundreds of lines later ... ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+ ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+  ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+ ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+ ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+ ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+ ""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+""a""+          ""b"";         /**/ }  ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 ~/testing/jdk14u/test/langtools/tools/javac/DeepStringConcat.java  ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.37-SNAPSHOT-all.jar -c config.xml ~/testing/jdk14u/test/langtools/tools/javac/DeepStringConcat.java Starting audit... Exception in thread ""main"" java.lang.Error: Error was thrown while processing /home/nick/testing/jdk14u/test/langtools/tools/javac/DeepStringConcat.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:319)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.StackOverflowError         at com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck.isTextSeparatedCorrectlyFromPrevious(SingleSpaceSeparatorCheck.java:219)         at com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck.visitEachToken(SingleSpaceSeparatorCheck.java:189)         at com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck.visitEachToken(SingleSpaceSeparatorCheck.java:194)         at  ... hundreds of lines later ...         at com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck.visitEachToken(SingleSpaceSeparatorCheck.java:194)         at com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck.visitEachToken(SingleSpaceSeparatorCheck.java:194)  ➜  src   ``` I'm not sure I would expect Checkstyle to parse this, but it is compilable.","closed","approved,","nick-mancuso","2020-10-30T14:53:13Z","2020-12-27T09:49:53Z"
"","8341","New check: LambdaBodyLength","Idea came from https://stackoverflow.com/questions/62565319/how-to-forbid-multi-line-lambdas-by-static-analysis There is no way to control size of lambdas, but long lambdas are hard to read. https://checkstyle.org/config_sizes.html#AnonInnerLength has similar idea.  Options: max - number of max lines to produce violation. By default, it is 10 (?)  ``` $ cat TestClass.java class TestClass { 	{ 		Runnable r0 = () -> {System.out.println(1);}; // ok                 Runnable r1 = () -> System.out.println(1); // ok 		Runnable r2 = () -> {  			System.out.println(1); // ok 		};  		Runnable r3 = () -> {  // violation 			System.out.println(1); 			System.out.println(2); 			System.out.println(3); 			System.out.println(4); 		};  	} }  $ cat config.xml                                             ``` Violation should occur on line with `// violation` comment.","closed","new module,","strkkk","2020-06-25T11:43:14Z","2020-10-28T23:12:05Z"
"","8914","Performance 10 times slower for MissingDeprecated check","I'm having a performance issue with the [MissingDeprecatedCheck](https://checkstyle.sourceforge.io/config_annotation.html#MissingDeprecated) since version 8.24 (possibly because of [#4983](https://github.com/checkstyle/checkstyle/issues/4983))  Previously the check needs only some hundreds of milliseconds. Now it needs many seconds, depending on the amount of javadoc.  --------------- Previous: `Checking 'big.java' needed 785 milliseconds.` `Checking 'medium.java' needed 689 milliseconds.` `Checking 'small.java' needed 607 milliseconds.`  Now: `Checking 'big.java' needed 7448 milliseconds.` `Checking 'medium.java' needed 2373 milliseconds.` `Checking 'small.java' needed 1051 milliseconds.`  -------------- Here the example, which I've used for measuring the times. [checkstylePerformance.zip](https://github.com/checkstyle/checkstyle/files/5420238/checkstylePerformance.zip)","closed","","stegeto22","2020-10-22T05:29:36Z","2020-10-24T04:49:44Z"
"","8793","Share the Eclipse java code formatter settings used to develop Checkstyle","I'd like to have our java code formatter settings for Eclipse in the form of `org.eclipse.jdt.core.prefs` or better an exported xml file, possibly inside the [config](https://github.com/checkstyle/checkstyle/tree/master/config) directory  Also, it would be great to have those mentioned on [checkstyle – Importing and debugging in Eclipse IDE](https://checkstyle.org/eclipse.html)","open","approved,","basinilya","2020-09-06T07:35:56Z","2021-02-06T14:34:02Z"
"","8976","Align call arguments","I would like to use the following style when using multiline lambdas:  ```java import java.util.Arrays;  public class Test {      public void test()     {         Arrays.stream(new int[]{1, 2, 3}).forEach(i ->                                                   {                                                       int result = i + 1;                                                       System.out.println(result);                                                   });     } } ```  In IntelliJ, this can be achieved by activating `Wrapping and Braces -> Method call arguments -> Align when multiline`. Unfortunately, checkstyle wants me to format the block as follows:  ```java import java.util.Arrays;  public class Test {      public void test()     {         Arrays.stream(new int[]{1, 2, 3}).forEach(i ->         {             int result = i + 1;             System.out.println(result);         });     } } ``` This is the corresponding output: ``` Starting audit... [WARN] /.../Test.java:9:51: 'block lcurly' has incorrect indentation level 50, expected level should be 8. [Indentation] [WARN] /.../Test.java:10:55: 'block' child has incorrect indentation level 54, expected level should be 12. [Indentation] [WARN] /.../Test.java:11:55: 'block' child has incorrect indentation level 54, expected level should be 12. [Indentation] [WARN] /.../Test.java:12:51: 'block rcurly' has incorrect indentation level 50, expected level should be 8. [Indentation] Audit done. ``` I haven't found out how to configure Checkstyle in a way that it allows the above formatting. Is this possible at all? My current configuration file is attached here: ```xml```","closed","indentation,","Masrepus","2020-11-10T10:39:53Z","2020-11-15T20:32:26Z"
"","8936","Security policy/contact","I would like to report a potential security vulnerability in the project. However there is no Security Policy with a contact I could write to.","closed","","JarLob","2020-10-29T11:14:36Z","2020-10-31T20:17:03Z"
"","8975","Does EmptyLineSeparator ignore custom tokens (8.36.2) ?","I would like to have `EmptyLineSeparator` without token `STATIC_INIT`.  ``` /var/tmp $ javac Test.java /var/tmp $ cat Test.java package com.test;  public class Test {     private static final int[] FIELD = new int[5];     static {         FIELD[0] = 16;         FIELD[1] = 8;         FIELD[2] = 6;         FIELD[3] = 10;         FIELD[4] = 10;     } } ``` I have configured `checkstyle.xml` with: ```bash /var/tmp $ cat config.xml                                                                           ``` But still seeing that my build is failed, because of :  ```bash /var/tmp $ java -jar checkstyle-8.36.2-all.jar -c config.xml Test.java Starting audit... [ERROR] /Users/mchernyakov/dev/tmp/Test.java:5:5:    'STATIC_INIT' should be separated from previous statement. [EmptyLineSeparator] Audit done. Checkstyle ends with 1 errors. ``` Have I configured it normally? Or have I missed something?  I am expecting no errors.","closed","","mchernyakov","2020-11-09T15:14:42Z","2020-11-16T13:33:26Z"
"","8241","One more group is required for CustomImportOrder","I would like to create an Eclipse-like rule for imports. The documentation has a few examples in that direction, but they are missing that fact that Eclipse also separates `java.*` and `javax.*` packages.  Using this rule from documentation ```xml                  ```  I'm getting the following error ``` Extra separation in import group before 'javax.xml.bind.annotation.XmlAccessType' (6:0) [CustomImportOrder] ```  For that class ```java package mypackage;  import java.util.ArrayList; import java.util.List;  import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlElementWrapper;  @XmlAccessorType(XmlAccessType.FIELD) public class AuthorizationEntity {     // ... } ```  And to fix that, I need to create a separate group for `javax.*` imports, but there are no more groups available. An ability to create more groups if required would be great, but that will require more changes. What about something simple, I guess many people separate `org.` group, so I propose to add `ORG_PACKAGE` with default regexp to `^org\.`, then I can reuse `SPECIAL_IMPORTS` for `javax.`.  Or another solution is to create `SPECIAL_IMPORTS_2`, `SPECIAL_IMPORTS_3`, etc :)  I can create a pull request, but I don't know what solution is preferable.  I also found [another issue](https://github.com/checkstyle/checkstyle/issues/4338) where someone tried to create Eclipse-like rules using `ImportOrder` rule, but I would like to use `CustomImportOrder` because it provides more meaningful messages.","closed","","astappiev","2020-05-16T13:26:33Z","2020-06-13T22:04:34Z"
"","8998","[Question] Are checks evaluated in a single threaded manner ?","I wanted to know if the checks under a TreeWalker module are executed in a serial manner, one after the other ? or is multi threading approach used ? I saw a couple of PR's on multi threading but they are all closed. As per the documentation :  `the TreeWalker initiates a recursive descend from the root of the AST to the leaf nodes and calls the Check methods` Are the check methods all called in parallel ?  I wrote a custom check and it threw an exception, due to which I got another exception : `> Unable to create Root Module: config`  Is there a way, for checkstyle to ignore such exceptions and continue with the other checks, and may be log the exception somewhere ?","closed","","debashisdeb","2020-11-19T18:58:59Z","2020-11-23T01:02:15Z"
"","8347","minor: fix violations from future EmptyLineBeforeAtClauseBlock (#6192)","I took the violations from #7932 and I put together a small script to fix them for me: https://github.com/josephmate/FixAtClauseError . It takes the output from a build, searches for the missing newline checkstyle errors and inserts them.","closed","","josephmate","2020-06-28T20:52:32Z","2020-07-19T20:47:01Z"
"","8312","[[Feature Request]] Allow for use of DO_WHILE, LITERAL_CATCH, LITERAL_FOR, LITERAL_IF, and LITERAL_WHILE with NoWhitespaceAfter","I routinely want to disallow the use of space between the listed tokens and their following open parenthesis but, currently, there's no means to do so.  #2803/#3649 added this ability for LITERAL_SYNCHRONIZED and the addition for these tokens would be more or less the same change.","open","awaiting response,","WammKD","2020-06-10T14:58:50Z","2021-03-17T14:32:49Z"
"","8166","minor: Empty string array replaced","I missed this at #7988 Realized this when I took another look at my recently merged PR. Just a minor consistency issue.","closed","","shashwatj07","2020-04-22T08:27:11Z","2020-04-29T20:27:12Z"
"","8777","doc: Add stickler-ci to the active tool list","I maintain and operate stickler-ci and we offer hosted checkstyle integration with GitHub pull requests, with output being provided as check run annotations.","closed","","markstory","2020-08-30T02:45:18Z","2020-08-31T13:20:50Z"
"","8963","Nondeterministic order of error messages in Translation check","I have noticed that Checksytle produces errors in different order on different executions.  This is annoying when comparing the result of Checkstyle on different versions of a program, or when comparing two versions of Checkstyle on the same program, or just when running Checkstyle twice.  This bug is because `TranslationCheck` uses a `HashSet` to store the input `*.properties` files.  I have created a pull request that fixes the problem #8967 .  To reproduce the bug, note that before and after the bug fix, Checkstyle produces output in different orders.  ---  Check documentation: https://checkstyle.org/config_misc.html#Translation  ``` $ cat messages_de.properties hell=Hallo  $ cat messages.properties hello=Hello  $ cat config.xml                         $ git clone git@github.com:checkstyle/checkstyle.git --depth 1 checkstyle-original && (cd checkstyle-original/ && mvn -P assembly package && java -classpath target/checkstyle-8.38-SNAPSHOT-all.jar com.puppycrawl.tools.checkstyle.Main -c ../config.xml ../messages_de.properties ../messages.properties) Starting audit... [ERROR] messages_de.properties:1: Key 'hello' missing. [Translation] [ERROR] messages.properties:1: Key 'hell' missing. [Translation] Audit done. Checkstyle ends with 2 errors. ```  I modified `TranslationCheck` to use a `TreeSet` for storing `*.properties` files as shown [here](https://github.com/checkstyle/checkstyle/pull/8967/files). After changing `HashSet` to `TreeSet`, I see a different order of output errors (shown below).  ``` $ git clone git@github.com:t-rasmud/checkstyle.git -b pr-det-logging --depth 1 checkstyle-modified && (cd checkstyle-modified && mvn -P assembly package && java -classpath target/checkstyle-8.38-SNAPSHOT-all.jar com.puppycrawl.tools.checkstyle.Main -c ../config.xml ../messages_de.properties ../messages.properties) Starting audit... [ERROR] messages.properties:1: Key 'hell' missing. [Translation] [ERROR] messages_de.properties:1: Key 'hello' missing. [Translation] Audit done. Checkstyle ends with 2 errors. ``` **Input files**: [input-files.zip](https://github.com/t-rasmud/checkstyle/files/5482557/input-files.zip)","closed","miscellaneous,","t-rasmud","2020-11-05T00:14:39Z","2020-11-07T09:59:47Z"
"","8872","minor: applying TokeUtil#forEachChild","I found a code fragment applicable to`TokenUtil#forEachChild` in `FinalParametersCheck.java`, so I modified","closed","","T45K","2020-10-02T17:15:25Z","2020-10-02T18:30:14Z"
"","8890","config: bump ant to 1.10.9","https://travis-ci.org/github/checkstyle/checkstyle/jobs/733779138#L1065","closed","","romani","2020-10-10T22:29:37Z","2020-10-10T23:23:35Z"
"","8277","'travis.sh no-violation-test-josm' is not stable","https://travis-ci.org/github/checkstyle/checkstyle/jobs/692854071#L468 it is not first time I see it. ``` CMD=./.ci/travis/travis.sh no-violation-test-josm CS_version: 8.33-SNAPSHOT JOSM revision: 16391 No output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself. Check the details on how to adjust your build configuration on: https://docs.travis-ci.com/user/common-build-problems/#build-times-out-because-no-output-was-received The build has been terminated ```","open","","romani","2020-05-30T12:47:37Z","2020-05-30T22:58:10Z"
"","8268","Cleanup .ci-temp folder after release notes generation","https://travis-ci.org/github/checkstyle/checkstyle/jobs/692192105#L1082  ``` Directory .ci-temp/ is not empty. Verification failed. Contents of .ci-temp/: checkstyle contribution mailing_list.txt rss.txt twitter.txt xdoc.xml ```","closed","miscellaneous,","romani","2020-05-29T03:41:12Z","2020-05-29T14:56:09Z"
"","8252","Sonar violations: JUnit5 test classes and methods should have default package visibility","https://sonarcloud.io/project/issues?id=org.checkstyle%3Acheckstyle&open=AXItYgyWEeM3Dea7mBcs&resolved=false&severities=INFO  https://rules.sonarsource.com/java/RSPEC-5786  ![image](https://user-images.githubusercontent.com/812984/82742993-96533480-9d19-11ea-9dc5-4fb470ea305e.png)","open","","romani","2020-05-24T00:19:43Z","2020-05-24T14:18:59Z"
"","8946","config: bump guava version to 30.0 to fix security alert","https://snyk.io/test/github/checkstyle/checkstyle?targetFile=pom.xml  we do not use affected method at all, but lets update version.","closed","","romani","2020-10-31T15:13:15Z","2020-10-31T21:59:01Z"
"","8168","remove from configs hardcode caused by MCHECKSTYLE-332","https://issues.apache.org/jira/browse/MCHECKSTYLE-332 is released and we use latest plugin  ``` ✔ ~/java/github/checkstyle/checkstyle [master|✔]  $ ag ""MCHECKSTYLE-332"" config/checkstyle_non_main_files_checks.xml 9:     config/checkstyle_resources_checks.xml 10:     config/checkstyle_sevntu_checks.xml 10:     ```  Expected: remove comment and do changes in config if required.","closed","miscellaneous,","romani","2020-04-22T13:42:50Z","2020-04-24T11:26:43Z"
"","8902","Issue #6481: Generic XPath check","https://github.com/checkstyle/checkstyle/issues/6481  Contribution update: https://github.com/checkstyle/contribution/pull/528","closed","hacktoberfest-accepted,","timurt","2020-10-18T19:29:59Z","2020-12-05T15:52:10Z"
"","8092","Issue #5779: Check conditional operators for unnecessary parentheses","https://github.com/checkstyle/checkstyle/issues/5779","closed","","yaziza","2020-04-13T13:38:44Z","2020-11-09T00:43:46Z"
"","8074","Issue #5779: Check conditional operators for unnecessary parentheses","https://github.com/checkstyle/checkstyle/issues/5779","closed","","yaziza","2020-04-11T19:59:55Z","2020-04-13T13:37:15Z"
"","8835","metadata for RecordComponentNumberCheck.xml has wrong name of Check","https://github.com/checkstyle/checkstyle/blob/69b6ffc3494f0e0081a8d2063c901d6ca84b9b26/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/sizes/RecordComponentNumberCheck.xml#L4-L5  it not clear from where such value is taken https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/RecordComponentNumberCheck.java  in sonar plugin it looks like: ![image](https://user-images.githubusercontent.com/812984/93479351-0f6e2d00-f8b1-11ea-97b4-6e58ec8c2797.png)","closed","","romani","2020-09-17T13:43:25Z","2020-09-17T13:46:25Z"
"","8270","Pitest Issue: Indentation","https://github.com/checkstyle/checkstyle/blob/6275303e6b5fd4d5e9a6504b390efd0e4aee564d/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java#L102","closed","miscellaneous,","Abhishek-kumar09","2020-05-29T08:27:27Z","2020-06-14T14:48:51Z"
"","8309","update dependanbot to use it as github feature","https://github.blog/2020-06-01-keep-all-your-packages-up-to-date-with-dependabot/  migrate config to native Github support.","closed","approved,","romani","2020-06-09T20:22:30Z","2022-01-01T04:08:43Z"
"","8852","use Cirrus CI for some validations","https://cirrus-ci.org/","closed","CI,","romani","2020-09-26T14:19:54Z","2020-09-30T11:57:29Z"
"","8918","update Cirrus CI to not print download progress in logs","https://cirrus-ci.com/task/6125110027354112  logs are hard to scroll, due to download process printed.  Solution: add `--no-progress` to chocolate taken from https://www.reddit.com/r/chocolatey/comments/fcx3yg/best_practice_when_installing_via_packer/  at https://github.com/checkstyle/checkstyle/blob/master/.cirrus.yml#L40","closed","miscellaneous,","romani","2020-10-23T14:56:11Z","2020-10-24T07:05:07Z"
"","8018","OperatorWrapCheck no violation if single line comment after operator","https://checkstyle.sourceforge.io/config_whitespace.html#OperatorWrap  `javac Test.java` No output   config.xml ``` Karunas-MacBook-Pro:checkstyle Harsh$ cat config.xml                        ``` Test.java ``` Karunas-MacBook-Pro:checkstyle Harsh$ cat Test.java class Test {     public static void main(String[] args) {         String s = ""Hello"" + // expected violation, '+' should be on new line                 ""World"";     } } ``` ``` Karunas-MacBook-Pro:checkstyle Harsh$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c config.xml Test.java  Starting audit... Audit done. ```  Expected Behaviour: ``` Karunas-MacBook-Pro:checkstyle Harsh$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c config.xml Test.java  Starting audit... [ERROR] /Users/Harsh/Desktop/checkstyle/Test.java:3:28: '+' should be on a new line. [OperatorWrap] Audit done. Checkstyle ends with 1 errors. ```","closed","approved,","harsh-kukreja","2020-04-03T10:19:48Z","2020-12-28T12:38:41Z"
"","8045","Add COLON token support to NoWhitespaceBefore","https://checkstyle.sourceforge.io/config_whitespace.html#NoWhitespaceBefore  ``` cat TestClass.java class TestClass { 	{                 mylabel :  // expected violation 		switch(1) { 			case 1 : // expected violation 				break; 			default : // expected violation 				break; 		} 	} }  $ cat conf.xml                              /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.31-all.jar -c config.xml TestClass.java Starting audit... Audit done. ``` https://checkstyle.sourceforge.io/config_whitespace.html#NoWhitespaceBefore_Properties Currently list of tokens has no support for COLON, it should be added to report violations at least for labels, `case` and `default`, may be there are some other tokens","closed","","strkkk","2020-04-06T16:39:48Z","2020-04-21T12:54:22Z"
"","8266","MissingJavadocMethod flagging private methods even target scope is public methods only","https://checkstyle.sourceforge.io/config_javadoc.html#MissingJavadocMethod  ``` $ javac CheckstylePrivateMethodTest.java $  ``` ``` $ cat config.xml                                                                         ```  ``` $ cat CheckstylePrivateMethodTest.java public interface CheckstylePrivateMethodTest {   private static void whyIsMissingJavadocMethodBeingFlagged() {     System.out.println();     System.out.println();     System.out.println();     System.out.println();   } } ```  ``` $ java -jar checkstyle-8.32-all.jar -c config.xml CheckstylePrivateMethodTest.java Starting audit... [ERROR] CheckstylePrivateMethodTest.java:2:3: Missing a Javadoc comment. [MissingJavadocMethod] Audit done. Checkstyle ends with 1 errors.  ``` --------------- Expected - no violation.  When an interface has a private static method that goes beyond the line limit, it gets flagged as needing a javadoc comment, even though private methods are supposed to be exempt.  --------------","closed","approved,","ChrisTrenkamp","2020-05-28T13:27:20Z","2020-06-26T13:50:20Z"
"","8394","InnerTypeLast should handle ctors and static init blocks","https://checkstyle.sourceforge.io/config_design.html#InnerTypeLast From the Check description:  >>  Checks nested (internal) classes/interfaces are declared at the bottom of the primary (top-level) class after all method and field declarations.   It is a bit unclear whether **constructors** should be declared before an inner type. I think they should be.  $ javac TestClass.java ``` (no output) ```  $ cat config.xml ```xml                                ```  $ cat TestClass.java ```java class TestClass1 {      public class Inner { // Expected violation     }      public TestClass1(Object x) { // ctor     }  }  class TestClass2 {      public class Inner { // Expected violation     }      static { // static init block     }  } ```  $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" $ java $RUN_LOCALE -jar checkstyle-8.34-all.jar -c config.xml TestClass.java ``` Starting audit... Audit done. ```","closed","approved,","pbludov","2020-07-04T06:38:17Z","2020-07-23T14:36:13Z"
"","8985","minor: fix link for LeftCurlyOption in LeftCurly","https://checkstyle.org/property_types.html%3ESeverityLevel  is result in 404 error  I am not sure why our link validator is not catching this, still open question","closed","","romani","2020-11-13T15:02:07Z","2020-11-14T22:58:26Z"
"","8849","NoWhitespaceBeforeCheck: String index out of range (with Java 15 Text Block) when tabs are used","https://checkstyle.org/config_whitespace.html#NoWhitespaceBefore  $ javac Main.java (no output)  $ cat config.xml ```                             ```  ATTENTION: File contains tabs,  please use Edit mode of issue to copy content, or download attached file $ cat [Main.java](https://github.com/checkstyle/checkstyle/files/5268800/Main.java.txt) ``` package checkstyle.bug;  public class Main {      private void brokenCheck_space_before_tabs() {         String x = """"""             Some Text  		"""""";     }      private void brokenCheck_space_after_tabs() {         String x = """"""             Some Text 		 """""";     }      private void brokenCheck_just_tabs() {         String x = """"""             Some Text 		"""""";     } } ```  $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" $ java $RUN_LOCALE -jar checkstyle-8.36.1-all.jar -c checkstyle.xml Main.java ``` Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing Main.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 18         at java.lang.String.charAt(Unknown Source)         at com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck.visitToken(NoWhitespaceBeforeCheck.java:215)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Checkstyle ends with 1 errors. ```","closed","approved,","dodgex","2020-09-23T13:45:50Z","2020-10-07T07:25:36Z"
"","8916","Value 'empty' in metadata files for 'tokens' property cause problems in plugins","https://checkstyle.org/config_misc.html#DescendantToken_Properties https://checkstyle.org/config_coding.html#IllegalTokenText_Properties  example: ![image](https://user-images.githubusercontent.com/812984/96888503-8b244200-143a-11eb-841c-d4a15732ed15.png)  ![image](https://user-images.githubusercontent.com/812984/96887563-9034c180-1439-11eb-95be-6be3d87051e7.png) but in meta it is: https://github.com/checkstyle/checkstyle/blob/58bae0f3defcf7ba4a9fa69bed97aadcb35eb2ae/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/DescendantTokenCheck.xml#L49-L51 https://github.com/checkstyle/checkstyle/blob/58bae0f3defcf7ba4a9fa69bed97aadcb35eb2ae/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/coding/IllegalTokenTextCheck.xml#L25-L28  both this Checks have empty `tokens` property, in WEB documentation we cannot render empty value, so we put `empty` word. But in metadata and javadoc we should be strict and be more technical, so value should be empty string value.  such problem in metadata caused problems described at https://github.com/checkstyle/sonar-checkstyle/pull/338#issuecomment-705581364","closed","approved,","romani","2020-10-22T14:30:24Z","2020-10-27T05:41:36Z"
"","8010","Java: CommentsIndentation false positive for comments in multiline arguments","https://checkstyle.org/config_misc.html#CommentsIndentation  ```  D:\checkstyletest>type config.xml                           D:\checkstyletest>type test\*.java  class Point {     @SuppressWarnings({""checkstyle:ParenPad"", ""checkstyle:CommentIndentation""})     private static final Set neighborSet = of(             //@formatter:off             P(-1,  1), P( 0,  1), P( 1,  1),             P(-1,  0),            P( 1,  0),             P(-1, -1), P( 0, -1), P( 1, -1)             //@formatter:on   this is line 8 with unexpected violation     );      // … } D:\checkstyletest>java -jar -Duser.language=en -Duser.country=US \      checkstyle-8.31-all.jar -c config.xml test\*.java  Starting audit... [ERROR] Test.java:8: Comment has incorrect indentation level 12,        expected is 4, indentation should be the same level as line 9.        [CommentsIndentation] Audit done. ```  Checkstyle reports that the comment `//@formatter:on` is at a wrong level of indentation, which it isn't.  Expected behavior: comments within round parentheses are expected to be indented the same way as other lines within the round parentheses.  Actual behavior: Checkstyle reports a warning `CommentIndentation` about the comment `//@formatter:on`.  This may be related to #2998 and, from a user perspective, maybe a modification of the fix for #2998 will fix this one as well.","closed","approved,","christianhujer","2020-04-01T19:53:40Z","2021-04-12T21:02:01Z"
"","8183","JavadocTagContinuationIndentation: doesn't report violations for html elements","https://checkstyle.org/config_javadoc.html#JavadocTagContinuationIndentation 1. Test.java: ``` gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ javac Test.java  gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ cat -n Test.java       1  public class Test {      2          /**      3           * Some description here.      4           *      5           * @param a      6           * Text description here. // violation      7           * @param b      8           * Some description in bold // OK      9           */     10          public void test(int a, int b) {}     11  } ``` 2. Config file: ``` gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ cat config.xml                                         ```  3. Output: ``` gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c config.xml Test.java  Starting audit... [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:6: Line continuation have incorrect indentation level, expected level should be 4. [JavadocTagContinuationIndentation] Audit done. Checkstyle ends with 1 errors. ```  #### Expected Line 8 should be reported as a violation, it is not correctly indented.  #### Explaination JavadocTagContinutation does not report indentation violations for `HTML_ELEMENT`. As discussed in here https://github.com/checkstyle/checkstyle/pull/8002#discussion_r414565394 . `HTML_ELEMENT` must also be properly intended to make the docs look good and easily readable.","closed","bug,","Gaurav-Punjabi","2020-04-24T17:47:18Z","2021-02-21T15:55:53Z"
"","8399","super::clone breaks SuperCloneCheck","https://checkstyle.org/config_coding.html#SuperClone https://checkstyle.org/config_coding.html#SuperFinalize  ``` /var/tmp $ javac --release 11 A.java # This only works in Java 11+  /var/tmp $ cat config.xml                       /var/tmp $ cat A.java class A {   @FunctionalInterface   public interface CheckedSupplier {     R get() throws E;   }    public Object clone() {     CheckedSupplier r = super::clone; // NPE consuming this     try {       return r.get();     } catch (CloneNotSupportedException e) {       throw new RuntimeException(e);     }   } }   /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.34-all.jar -c config.xml YOUR_FILE.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing A.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck.hasArguments(AbstractSuperCheck.java:142) 	at com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck.isSuperCall(AbstractSuperCheck.java:106) 	at com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck.visitToken(AbstractSuperCheck.java:85) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Checkstyle ends with 1 errors.  ```  ---------------  **Describe what you expect in detail.** I'm unsure if the built in check should pass when you make a reference to the superclass implementation. I was looking at extending `AbstractSuperCheck` to force calling `super.close()` in implementations of `close`. In my case it is normal and common to do stuff like `IOUtils.close(super::close, other, stuff, here);`. So, at least for me, it'd be best if `AbstractSuperCheck` considered a reference to the superclass implementation to pass. Or if it could be configured to do so.  --------------","closed","approved,","nik9000","2020-07-05T16:37:13Z","2020-07-18T21:43:32Z"
"","8930","IllegalType: update examples to show how to target Check to fields only","https://checkstyle.org/config_coding.html#IllegalType  update documentation to show example of how to limit IllegalType to validate field types only (not a variable), example: https://github.com/checkstyle/checkstyle/issues/8915#issuecomment-715918018  we need it as example as we have design problem in Check, but workaround is good enough to not fix Check.","closed","miscellaneous,","romani","2020-10-28T14:01:51Z","2021-02-12T14:25:09Z"
"","8931","IllegalType: inability to set rules for package-private visibility","https://checkstyle.org/config_coding.html#IllegalType  issue detected at https://github.com/checkstyle/checkstyle/issues/8915 ```  $ cat config.xml                                                                                                      $ cat Test.java  import java.util.Optional;  public class Test {    private Optional field1;     protected Optional field2;     public Optional field3;     Optional field4; // how to configure Check to put violation here ?? }  $ java -jar checkstyle-8.36.2-all.jar -c config.xml Test.java Starting audit... Audit done.  ```  ---------------  usage of tokens flexible but does not work for visibility scopes, as one visibility  scope (package-private) is when no java language keyword is defined.","open","","romani","2020-10-28T14:11:41Z","2020-10-29T13:14:49Z"
"","8630","Array default value should have no curly braces in Check javadoc documentation","https://checkstyle.org/config_coding.html#IllegalType   `legalAbstractClassNames | Define abstract classes that may be used as types. | String[] | {}` vs `ignoredMethodNames | Specify methods that should not be checked. | String[] | getEnvironment, getInitialContext`   attention to `{}`. It might be ok for xdoc to show empty array like this, but not for javadoc (and eventually not good for metafile) as it could be considered as exact value to set in Check.  default value is something that use can copy and put in Check and it should work. Unfortunately ""{}"" is not good value, and It is our visual marker of no content """" it is better value. It was done as we need somehow to show empty content in HTML(xdoc), and such value were copied to javadoc during xdoc->javadoc sync. It is not good value for setter of Check. We need to update javadocs to have """" and update UT that keeps xdoc and javadoc in sync to treat """" as {} to avoid updates in xdoc for now.","closed","miscellaneous,","romani","2020-08-08T13:43:13Z","2020-08-08T13:47:32Z"
"","8011","Wrong tag usage in NeedBraces Check","https://checkstyle.org/config_blocks.html The source tag isn't used in the examples section of NeedBraces Check.  ![2020-04-02](https://user-images.githubusercontent.com/52609734/78216911-8c127800-74d8-11ea-8dac-8c852cd9bb52.png)  Hence, I'm requesting to change the `````` tags to `````` to ensure that they are validated.","closed","miscellaneous,","shashwatj07","2020-04-02T06:28:56Z","2020-04-13T17:18:48Z"
"","8198","Unclear beginning development instructions","https://checkstyle.org/beginning_development.html The point number 6 given in this document results in a ton of commits being pulled from the main master and being pushed to the **current branch**. All these commits are visible and reflect in the PR, if already created.  I think we should make this addition to the 6th point: ``` git checkout master git pull main master git push origin master ``` Then point 7 becomes: ``` git checkout my-new-check git rebase master ``` This will avoid confusion save a lot of time for someone who is new to contributing and git.","closed","miscellaneous,","shashwatj07","2020-04-27T14:27:53Z","2020-04-29T19:52:31Z"
"","8970","IllegalIdentifierName need not be case-insensitive","https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.html  I don't see any reason why the [IllegalIdentifierName](https://checkstyle.sourceforge.io/config_naming.html#IllegalIdentifierName) check has to be case-insensitive by default. Capitalised and all-capitals names are classes and constants respectively (using the naming convention rules).","closed","","Fernal73","2020-11-08T12:39:17Z","2020-11-09T16:20:01Z"
"","8608","ci: move spring integration project validation to stable version","https://app.wercker.com/checkstyle/checkstyle/runs/build/5f2abbebdac5630008ba5d27?step=5f2abc18052291000707439d  problems like: ```  > Task :spring-integration-core:compileJava /pipeline/source/.ci-temp/spring-integration/spring-integration-core/src/main/java/org/springframework/integration/channel/FluxMessageChannel.java:28: error: cannot find symbol import reactor.core.publisher.FluxIdentityProcessor;                              ^   symbol:   class FluxIdentityProcessor   location: package reactor.core.publisher /pipeline/source/.ci-temp/spring-integration/spring-integration-core/src/main/java/org/springframework/integration/channel/FluxMessageChannel.java:30: error: cannot find symbol import reactor.core.publisher.Processors;                              ^   symbol:   class Processors ```","closed","","romani","2020-08-05T14:29:18Z","2020-08-05T14:57:32Z"
"","8221","minor: fix links (link-check-plugin)","https://app.codeship.com/projects/124310/builds/dc4242e3-d374-4c1e-96cb-275dd96d9518?line=029472bc-d43e-4876-b180-2562884ecffd&step=parallel_.ci%2Frun-link-check-plugin.sh  can be merged if codeship does not report problem with 'firstsentence' links, there might be some other problems, will be addressed in some next PR.","closed","","romani","2020-05-02T18:19:31Z","2020-05-02T23:19:15Z"
"","8335","minor: exclude from validation link to sonatype that demand authorization","https://app.codeship.com/projects/124310/builds/70f426fe-f4ce-43c4-baba-c2c14e6caedb?line=c6567587-f064-4101-9934-5c987551d6f0&step=parallel_.ci%2Frun-link-check-plugin.sh   `2020-06-23 23:43:42  system https://oss.sonatype.org/service/local/staging/deploy/maven2/: 405 Not Allowed`  ``` ✔ ~/java/github/romani/checkstyle [master|✔]  $ ag -Q ""https://oss.sonatype.org/service/local/staging/deploy/maven2/"" ✘-1 ~/java/github/romani/checkstyle [master|✔]  $ cd target/site/ ✔ ~/java/github/romani/checkstyle/target/site [master|✔]  $ ag -Q ""https://oss.sonatype.org/service/local/staging/deploy/maven2/"" distribution-management.html 139:Repository - sonatype-nexus-staginghttps://oss.sonatype.org/service/local/staging/deploy/maven2/ ```","closed","","romani","2020-06-24T14:27:00Z","2020-06-24T14:39:17Z"
"","8259","Codecov migration to marketplace app","Hi, Tom from [Codecov](https://codecov.io) here.  We noticed that you are using Codecov with fairly high frequency, and we’re so excited to see that! However, because you are not using our app, you may have experienced issues with uploading reports or viewing coverage information. This is due to rate-limiting issues from GitHub.  **In order to prevent any future outages, we ask that you move over to our [GitHub app integration](https://github.com/apps/codecov).**  The process is extremely simple and shouldn’t require more than a few clicks, and you should not expect any downtime. By moving to our app, you will no longer need an admin or separate account to manage the relationship with GitHub as the team bot.  Let me know if you have any questions, or if I can help at all with this process.","closed","","thomasrockhu","2020-05-27T18:50:18Z","2020-05-29T05:04:53Z"
"","8784","Question: how is it possible to get Checkstyle results on a folder that contains a bad-formed class?","Hi,  I am executing Checkstyle in folders where there might exist some java classes that are not well-formed, i.e., not compilable. The issue is that Checkstyle throws an exception and I don't even get results for the good java classes. Is there a way to get those results?  PS: I already have a workaround, which is to call Checkstyle for every single file, but this takes too long.  Thank you in advance!","closed","","fermadeiral","2020-09-04T16:12:37Z","2020-09-07T11:09:49Z"
"","8184","Add TODOs Badge to README","Hi there! I wanted to propose adding the following badge to the README to indicate how many `TODO` comments are in this codebase:  [![TODOs](https://badgen.net/https/api.tickgit.com/badgen/github.com/checkstyle/checkstyle)](https://www.tickgit.com/browse?repo=github.com/checkstyle/checkstyle)  The badge links to `tickgit.com` which is a free service that indexes and displays TODO comments in public github repos. It can help surface latent work and be a way for contributors to find areas of code to improve, that might not be otherwise documented.  The markdown is:  ``` [![TODOs](https://badgen.net/https/api.tickgit.com/badgen/github.com/checkstyle/checkstyle)](https://www.tickgit.com/browse?repo=github.com/checkstyle/checkstyle) ```  Thanks for considering, feel free to close this issue if it's not appropriate or you prefer not to!  (full disclosure, I am the creator/maintainer of `tickgit`)","closed","","patrickdevivo","2020-04-25T00:49:13Z","2020-04-25T16:33:42Z"
"","8245","Forbid annotations unless class is annotated","Hi This is a feature request. When using Guice there is the annotation ""WithCache"" And ""Cacheable"", first applies to a class and second to a method.  In general, if you forget the first one it is an error because the second one wouldn't take place.  It might be a bit of a stretch, but it might make sense to have a checkstyle rule for this. Something like forbid annotation x, except if class is annotated with y.   Thanks","open","","furstenheim","2020-05-20T12:40:03Z","2020-05-20T12:40:03Z"
"","8966","[FEATURE REQUEST] Enhance LambdaBodyLength to something like LambdaBodyExecutableStatementCount","Hello guys,  Related to the latest introduced functionality https://github.com/checkstyle/checkstyle/issues/8341 . The idea is great and I would definitely vouch for any check styles that favour code readability.  However in that specific scenario, that check isn't applicable to 99% of the violation we could encounter in our code base for the following reasons:  - Counts empty lines (though empty lines usually add in visibility).  ```java myLambda -> {   action1();   action2();   action3();   action4();   action5();   action6();   action7();   action8();   action9();   action10(); } ```  ```java myLambda -> {   action1();    action2();    action3();    action4();    action5();  } ```  - Isn't suitable with the usage of Builder patterns  ```java myLambda -> {   return MyObject.builder()     .attribute1(1)     .attribute2(2)     .attribute3(3)     .attribute4(4)     .attribute5(5)     .attribute6(6)     .attribute7(7)     .attribute8(8)     .attribute9(9)     .attribute10(10)     .build(); } ```  Consequently, would it be possible to have such functionality but *statement* based rather than counting purely the number of lines?  Example:  /var/tmp $ cat config.xml ```xml     	 	  	 		 	   ```  ```java import java.util.function.Supplier;  import lombok.Builder;  public class Test {  	public static void main(String ... args) {  	}  	public void testBuilder() {  		Supplier a = () -> TestClass.builder() 			.attribute1(1) 			.attribute2(2) 			.attribute3(3) 			.attribute4(4) 			.attribute5(5) 			.attribute6(6) 			.attribute7(7) 			.attribute8(8) 			.attribute9(9) 			.attribute10(10) 			.build();  	}  	@Builder 	public static class TestClass {  		private final Integer attribute1; 		private final Integer attribute2; 		private final Integer attribute3; 		private final Integer attribute4; 		private final Integer attribute5; 		private final Integer attribute6; 		private final Integer attribute7; 		private final Integer attribute8; 		private final Integer attribute9; 		private final Integer attribute10;  	}  } ```  ``` [INFO] There is 1 error reported by Checkstyle 8.37 with /Users/gabriel.dinant/Documents/repositories/leshop/order/experimentation/target/classes/config.xml ruleset. [ERROR] src/main/java/Test.java:[14,36] (sizes) LambdaBodyLength: Lambda body length is 12 lines (max allowed is 10). [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  2.568 s [INFO] Finished at: 2020-11-06T16:38:08+01:00 [INFO] ------------------------------------------------------------------------ ```  Expectations:  /var/tmp $ cat config.xml ```xml     	 	  	 		 	   ```  ``` [INFO] --- maven-checkstyle-plugin:3.1.1:check (default) @ experimentation --- [INFO] You have 0 Checkstyle violations. [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time:  2.508 s [INFO] Finished at: 2020-11-06T16:37:50+01:00 [INFO] ------------------------------------------------------------------------ ```    Thanks guys and keep up the good work :).","closed","","gdinant","2020-11-06T10:25:42Z","2020-11-08T23:22:35Z"
"","8956","Issue #8552: change all 'at-clause' terms to 'block tag'","from sourcecode and documentation  Issue #8552  what is left (we do not need to fix it): ``` ✔ ~/java/github/romani/checkstyle [8552-at-clause L|✔]  08:58 $ ag ""at-clauses"" src/test/resources/com/puppycrawl/tools/checkstyle/meta/javadocmetadatascraper/checks/javadoc/InputJavadocMetadataScraperAtclauseOrderCheck.java 41: * Note: Google used the term ""at-clauses"" for block tags in their guide till 2017-02-28.  src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java 41: * Note: Google used the term ""at-clauses"" for block tags in their guide till 2017-02-28.  src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/javadoc/AtclauseOrderCheck.xml 13: Note: Google used the term ""at-clauses"" for block tags in their guide till 2017-02-28.  src/xdocs/config_javadoc.xml 35:          Note: Google used the term ""at-clauses"" for block tags in their guide till 2017-02-28.  src/xdocs/google_style.xml 2064:                    src/xdocs/releasenotes.xml 340:            missing blank line before at-clauses  src/site/resources/styleguides/google-java-style-20180523/javaguide.html 1115:  ```","closed","","romani","2020-11-02T15:30:37Z","2020-11-06T04:13:04Z"
"","9007","Create jdk15 Input files compilation job in Travis","From https://github.com/checkstyle/checkstyle/pull/8972#discussion_r528243906","closed","miscellaneous,","romani","2020-11-22T01:47:14Z","2020-11-27T04:10:39Z"
"","8950","config: make semaphore ci commands easy to run on local","From https://github.com/checkstyle/checkstyle/pull/8920#discussion_r515509604  > one day this execution will fail in CI in PR, contributor might not be very experienced in CI to figureout how to reproduce it on local, so we will share with him link to single line in config for simple copy and paste in terminal, and it works.","closed","","pbludov","2020-11-01T11:31:13Z","2020-11-02T16:39:34Z"
"","8908","Do clean in all Travis maven commands","from https://github.com/checkstyle/checkstyle/pull/8906#issuecomment-712854492  https://travis-ci.org/github/checkstyle/checkstyle/jobs/737307315#L669 ``` [INFO] --- spotbugs-maven-plugin:4.1.4:spotbugs (spotbugs) @ checkstyle --- [INFO] Fork Value is true      [java] The following classes needed for analysis were missing:      [java]   org.jacoco.agent.rt.internal_f3994fa.Offline [INFO] Done SpotBugs ```  The same at master build https://travis-ci.org/github/checkstyle/checkstyle/jobs/736045569#L634  problem is caused by fact that we do build to warm up local maven repo https://travis-ci.org/github/checkstyle/checkstyle/jobs/736045569#L256 (in batch mode to not exceed log size limit), and next maven command with spotbugs doesnot use `mvn clean`, so test jars with jacoco are reused.","closed","miscellaneous,","romani","2020-10-20T13:56:44Z","2020-12-04T05:11:30Z"
"","8334","doc: add example of how to run GUI from snapshot jar","from https://github.com/checkstyle/checkstyle/pull/8247","closed","","romani","2020-06-23T15:20:02Z","2020-06-25T14:20:55Z"
"","8191","OneTopLevelClass: Log violations after annotation modifiers","From https://github.com/checkstyle/checkstyle/pull/8030#issuecomment-608999013:  Check documentation: https://checkstyle.org/config_design.html#OneTopLevelClass  ``` D:\checkstyletest>type config.xml                                         D:\checkstyletest>type test\Test.java import java.lang.annotation.*;  public class Test { // OK, first top level type  }  @SuppressWarnings(""rawtypes"") // violation is here @Retention(RetentionPolicy.RUNTIME) @interface ExtraAnnotation { // expected violation here instead  }  @SuppressWarnings(""unused"") // violation is here class ExtraClass { // expected violation here instead  } D:\checkstyletest>java -jar -Duser.language=en -Duser.country=US checkstyle-8.32-SNAPSHOT-all.jar -c config.xml test\Test.java Starting audit... [ERROR] D:\checkstyletest\test\Test.java:7:1: Top-level class ExtraAnnotation has to reside in its own source file. [OneTopLevelClass] [ERROR] D:\checkstyletest\test\Test.java:13:1: Top-level class ExtraClass has to reside in its own source file. [OneTopLevelClass] Audit done. Checkstyle ends with 2 errors. ``` --------------- When we talk about a type definition, we generally refer to the literal (`class`, `interface`, `enum`, `@interface`) and the identifier (e.g. `MyClass`). However, `OneTopLevelClassCheck` is not logging at this location.  Instead, it includes all the modifiers that come before the definition. Generally, modifiers such as `public` do not cause much issue as they are on the same line as the definition itself, but for annotations like `@SuppressWarnings` they are usually on separate lines from the definition.  The logging should be made closer to the main definition tokens by skipping preceding modifiers. Where exactly the new location to log should be, is open for debate.","open","","wltan","2020-04-26T07:52:54Z","2020-04-26T07:53:26Z"
"","8937","doc: add security policy page","from https://github.com/checkstyle/checkstyle/issues/8936","closed","","romani","2020-10-29T13:45:03Z","2020-10-31T20:16:21Z"
"","8901","Run regression testing in CI over openjdk14 or newer codebase","from https://github.com/checkstyle/checkstyle/issues/8895#issuecomment-707688814  we need to run openjdk14 (latest is ok too) with all Checks enabled (chekcstyle config) but with extra filter for parse errors https://github.com/checkstyle/contribution/blob/master/checkstyle-tester/my_check.xml#L45  it will not find parse errors but it will find exceptions in Checks on weird/test code.","closed","miscellaneous,","romani","2020-10-15T13:35:29Z","2020-11-14T18:00:38Z"
"","8051","Set up Semaphore CI","From https://github.com/checkstyle/checkstyle/issues/7976#issuecomment-609628603_  [Semaphore CI](https://semaphoreci.com/), free for open source projects. Quite fast (with .m2 cache): ![image](https://user-images.githubusercontent.com/900805/78828391-4c262600-79ed-11ea-993f-47e2696a903e.png)  We can move some tasks from Travis to Semaphore to speed up the process.  @romani please set up the organization profile. For now there can be only one admin per project in this CI, so it should be done by you.  Github integration: https://github.com/marketplace/semaphore","closed","CI,","pbludov","2020-04-08T19:58:07Z","2020-09-07T14:36:28Z"
"","8329","minor: exclude links to opencollective","from https://app.codeship.com/projects/124310/builds/a450593b-9563-4355-a204-ca613dbc1440?line=b20e85ed-69fc-493b-8d75-1c1e45dfe6a9&step=parallel_.ci%2Frun-link-check-plugin.sh  ``` 2020-06-21 08:54:24  system https://opencollective.com/checkstyle/: 403 Forbidden 2020-06-21 08:54:24  system https://opencollective.com/checkstyle/backers/badge.svg: 403 Forbidden 2020-06-21 08:54:24  system https://opencollective.com/checkstyle/sponsors/badge.svg: 403 Forbidden 2020-06-21 08:54:24  system ------------ grep of linkcheck.html--END  ```","closed","","romani","2020-06-21T15:35:39Z","2020-06-23T13:34:49Z"
"","8414","Introduce Java14 enhanced instanceof syntax check: BestPracticeInstanceOfWithPatternVar","From discussion related to #8401, we should create a new check called BestPracticeInstanceOfWithPatternVarCheck. It could check that compiler is passing... etc. Let's discuss here.","closed","","nick-mancuso","2020-07-07T02:46:45Z","2020-07-07T12:58:56Z"
"","8435","minor: verify correct format for check UT inputs(#8364)","From discussion at https://github.com/checkstyle/checkstyle/pull/8413#discussion_r452869479, we need to make sure that new input files for check unit tests have a comment at the top of the file specifying what configuration that the contributor used to generate violations, starting with `// config: `. In addition, contributors should have trailing comments after elements that **will** cause violations `// violation`, or those that **will not** cause violations `// ok`.  The second commit is a file that will prove that this check works.  After CI fails, I will post the results in this PR, then drop the commit and rebase so that CI is green.","closed","","nick-mancuso","2020-07-10T19:24:40Z","2020-07-13T22:18:17Z"
"","8437","minor: update AbbreviationAsWordInNameCheckTest.java and inputs (#8412)","From discussion at https://github.com/checkstyle/checkstyle/pull/8412#discussion_r452865287","closed","","nick-mancuso","2020-07-10T22:00:47Z","2020-07-18T21:39:33Z"
"","8971","ExecutableStatementCount should allow LAMBDA token","from discussion at https://github.com/checkstyle/checkstyle/issues/8966  https://checkstyle.org/config_sizes.html#ExecutableStatementCount  ``` $ javac Test.java  $ cat Test.java   public class Test {   java.util.function.Consumer a = (o) -> {     o.toString(); // 1     o.toString(); // 2     o.toString(); // 3     o.toString(); // 4     o.toString(); // 5     o.toString(); // 6   };  }  $ cat config.xml                               $ java -jar checkstyle-8.36.2-all.jar -c config.xml Test.java  Starting audit... Audit done. ```  Expected: violation over lambda on line 2","closed","miscellaneous,","romani","2020-11-08T23:21:51Z","2021-05-09T09:24:06Z"
"","8938","Keep user comment in env variable of git workflow","from #8936","closed","miscellaneous,","romani","2020-10-29T13:56:47Z","2020-10-31T23:19:17Z"
"","8921","Disable ""checkstyle-cli-run-openjdk14"" job in travis.sh","From #8920:  Once #8920 is merged, `checkstyle-cli-run-openjdk14` in `travis.sh` should be removed/disabled.  `checkstyle-cli-run-openjdk14` only parses around 2,000 files; it's replacement, proposed by the changes in #8920, parses around 46,000 files (this excludes `module-info.java` files and non-compilables):  ``` ➜  jdk14u git:(master) find . -name ""*.java"" | wc -l 49160 ``` As we need to pare down the number of jobs for travis anyway, and the test in #8920 covers all files covered by `checkstyle-cli-run-openjdk14` plus many more, I vote that we simply remove `checkstyle-cli-run-openjdk14`.","closed","miscellaneous,","nick-mancuso","2020-10-24T18:48:27Z","2020-11-06T08:08:06Z"
"","8960","Use diff.groovy in openjdk14-with-checks-nonjavadoc-error semaphore job","From #8920:  >If we are to remove JXR from tester's POM to avoid telling it not to run anyways, we need to remove uses of `launch` as I think we are still relying on it generating HTML files since diff-report-tool is what generates the final HTML when `diff` is launched. It was never confirmed on this aspect so I don't know what effect it will have on jobs running `launch` and if they will be ""broken"".  >I am fine with delaying it if we want to, but its just going to be an on-going issue. We need to trim back on JXR and maven-checkstyle-plugin which just hold us back.  _Originally posted by @rnveach in https://github.com/checkstyle/checkstyle/pull/8920#r516722046_  We need to migrate to using `diff.groovy` in semaphore job `openjdk14-with-checks-nonjavadoc-error`, instead of `launch.groovy`.   This will enable us to rely less on JXR and maven-checkstyle-plugin in the future.   This issue relies on a fix for https://github.com/checkstyle/contribution/issues/523, since we must supply additional arguments to maven for `openjdk14-with-checks-nonjavadoc-error`.","closed","miscellaneous,","nick-mancuso","2020-11-04T12:42:21Z","2021-01-16T15:19:21Z"
"","8765","Create new check RecordComponentName","From #8764:  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  src cat config.xml                                                                                                                                                                                    %                                                                                                                     ➜  src cat TestClass.java                                                                                                public class TestClass {     public static void main(String... args) {         var var = 4; // violation, ""var"" should not be used as an identifier.          int record = 15; // violation, ""record"" should not be used as an identifier.          String yield = ""yield""; // violation, ""yield"" should not be used as an identifier.          record Record // violation, ""Record"" should not be used as an idenitifier.                 (Record record) { // should be violation, ""record"" should not be used as an identifier.         }          String yieldString = ""yieldString""; // ok, part of another word         record MyRecord(){} // ok, part of another word         var variable = 2; // ok, part of another word     } } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java\  Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/check-updates/src/TestClass.java:3:13: Name 'var' must match pattern '(?i)^(?!(record|yield|var)$).+$'. [LocalVariableName] [ERROR] /home/nick/Desktop/full-record-grammar/check-updates/src/TestClass.java:5:13: Name 'record' must match pattern '(?i)^(?!(record|yield|var)$).+$'. [LocalVariableName] [ERROR] /home/nick/Desktop/full-record-grammar/check-updates/src/TestClass.java:7:16: Name 'yield' must match pattern '(?i)^(?!(record|yield|var)$).+$'. [LocalVariableName] [ERROR] /home/nick/Desktop/full-record-grammar/check-updates/src/TestClass.java:9:16: Name 'Record' must match pattern '(?i)^(?!(record|yield|var)$).+$'. [TypeName] Audit done. Checkstyle ends with 4 errors.  ``` I would expect there to be a check that allows users to enfore naming conventions on record components; there should be an ability to specify a `format` property, similar to `MemberNameCheck` (after all, record components are essentially member variables).  Simply adding support for record components to `MemberNameCheck` is not a good solution, since there are many other properties in `MemberNameCheck` that do not apply here.   Do we need another new check, `RecordComponentName`?  We have LambdaParameterName, MemberName, and  ParameterName.  Since record components are basically ""members"", we should make it possible for users to enforce naming conventions on them.","closed","new module,","nick-mancuso","2020-08-27T05:17:20Z","2021-01-24T15:29:22Z"
"","8764","Create new check IllegalIdentifierName","From #8308   Adding new keywords to a language is very difficult, since they are probably used as identifiers in the existing code. Our parser should accept such keyword as an identifier, but we need a new check. Something like `AvoidUsingKeywordsAsIdentifiers`.  _Originally posted by @pbludov in https://github.com/checkstyle/checkstyle/issues/8267#issuecomment-641728423_  From https://jaxenter.com/java-14-records-deep-dive-169879.html:  ""However, you should refrain from using record as an identifier because it could be included as a keyword in a future Java version.""  Java already issues the following errors: ``` $ cat TestClass.java  public class record { } public class var { }  $ /usr/lib/jvm/java-14-openjdk-amd64/bin/javac --enable-preview --source 14 TestClass.java  TestClass.java:1: error: 'record' not allowed here public class record {              ^   as of release 13, 'record' is a restricted type name and cannot be used for type declarations TestClass.java:5: error: 'var' not allowed here public class var {              ^   as of release 10, 'var' is a restricted type name and cannot be used for type declarations 2 errors ```  So, the addition of this new check would help remind developers that it is bad practice to use context-sensitive/ restricted keywords as identifiers; this will help to make code more future-proof and easy to read.  I would expect the following:  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  src cat TestClass.java public class TestClass {     public static void main(String... args) {         var var = 4; // violation, ""var"" should not be used as an identifier.          int record = 15; // violation, ""record"" should not be used as an identifier.          String yield = ""yield""; // violation, ""yield"" should not be used as an identifier.          record Record // violation, ""Record"" should not be used as an idenitifier.                 (Record record) { // violation, ""record"" should not be used as an identifier.         }     } }   ```","closed","new module,","nick-mancuso","2020-08-26T21:23:18Z","2020-08-28T18:51:38Z"
"","8928","Add new prefix ""supplemental:"" to commit validation","from  https://github.com/checkstyle/checkstyle/pull/8897#issuecomment-709333159  What about to allow `supplemental: .... for Issue #XXXX`. for cases there we do fixes for issue but it is not functional fix for issue.  NOTE: we need to add it to [release note builder](https://github.com/checkstyle/contribution/tree/master/releasenotes-builder) also to skip , same as ""minor:""","closed","miscellaneous,","romani","2020-10-27T14:50:39Z","2021-03-15T03:00:23Z"
"","8219","Jacoco coverage report should have grammar classes","found during https://github.com/checkstyle/checkstyle/pull/8093#issuecomment-622661127  when  we generate coverage report - https://github.com/checkstyle/checkstyle/wiki/How-to-run-certain-phases-and-validations#how-to-generate-ut-coverage-report  we do not see data on grammar classes, so it is hard to detect improvements.  It should be: ![image](https://user-images.githubusercontent.com/812984/80869166-9e0c4580-8c53-11ea-8afa-dfc22178f337.png)","closed","miscellaneous,","romani","2020-05-02T16:03:39Z","2020-05-02T18:03:03Z"
"","8842","Add a job to automatically rebase PRs","For example, something like https://github.com/marketplace/actions/automatic-rebase In case of custom action, it can be hosted in contribution repo like existing comment action.  This will help to quickly rebase PRs without tedious work of pulling new changes, pushing to branch, etc.","closed","miscellaneous,","strkkk","2020-09-20T18:03:56Z","2020-09-22T13:10:32Z"
"","8941","Default values in meta files for wrapped list of values are incorrect","For example - ClassDataAbstractionCouplingCheck  metadata: https://github.com/checkstyle/checkstyle/blob/604a3130e97d875f230373e6e4bc6b89df8f8ce9/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/metrics/ClassDataAbstractionCouplingCheck.xml#L67 xdoc: https://checkstyle.org/config_metrics.html#ClassDataAbstractionCoupling_Properties ![image](https://user-images.githubusercontent.com/812984/97782993-0b8d2600-1b52-11eb-86fe-9f4d1d43a8ae.png)   or ClassFanOutComplexityCheck  meta: https://github.com/checkstyle/checkstyle/blob/604a3130e97d875f230373e6e4bc6b89df8f8ce9/src/main/resources/com/puppycrawl/tools/checkstyle/meta/checks/metrics/ClassFanOutComplexityCheck.xml#L34 xdoc: https://checkstyle.org/config_metrics.html#ClassFanOutComplexity_Properties  Expected value should be full list of tokens from check descriptions","closed","miscellaneous,","strkkk","2020-10-30T11:55:56Z","2020-11-19T02:15:17Z"
"","8544","Format xml sources","Follow up for #8543  These xml files should be reformatted:  - [x] checkstyle configs - [x] idea configs - [x] other configs - [x] xdocs checks - [x] xdocs other - [x] google/sun styles","closed","miscellaneous,","pbludov","2020-07-22T06:56:16Z","2020-07-29T06:55:19Z"
"","8081","Issue #7873: Resolve Pitest Issues - ImportOrderCheck (2)","fixes: #7873   @rnveach @strkkk  Please review.","closed","","DXTkastb","2020-04-12T19:08:59Z","2020-05-17T03:19:15Z"
"","8012","Issue #7759: Regexp & RegexpSinglelineJava check does not support SuppressionXpathFilter.","Fixes: #7759 & #7760   Website view: ![poi](https://user-images.githubusercontent.com/38028330/79782709-238f1c00-835d-11ea-8515-4b8fda215028.png)   @rnveach @romani Minor issue. please review","closed","","DXTkastb","2020-04-02T19:47:33Z","2020-04-21T14:01:00Z"
"","8024","Issue #7758: Update AbstractChecks to log DetailAST - PackageDeclaration","fixes: #7758   This check partially supports Xpath.  Two log calls: https://github.com/checkstyle/checkstyle/blob/676dc23d4f239e1b3f57b5cdce043067d8c996e5/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheck.java#L147 https://github.com/checkstyle/checkstyle/blob/676dc23d4f239e1b3f57b5cdce043067d8c996e5/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheck.java#L163  Due to certain reason(https://github.com/checkstyle/checkstyle/issues/7758#issuecomment-604070675), I had to provide one more log call when AST is null.  Diff report: https://dxtkastb.github.io/checkstyle/reports/packed/diff2/index.html  **Changes in Documentation:**  Under Check documentation:  ![pckg1](https://user-images.githubusercontent.com/38028330/79490737-faa81780-803a-11ea-816d-479dd4c0e5bb.png)  ---------------------------------------------------------------------------------------------------------------------------------  Under Filter Documentation:  ![pckg2](https://user-images.githubusercontent.com/38028330/79490752-009df880-803b-11ea-8977-f9dd8549085b.png)","closed","","DXTkastb","2020-04-03T17:56:26Z","2020-04-19T12:26:16Z"
"","8981","Issue #7669: Update docs for MultiVaribleDeclaration","Fixes: #7669  ![Checkstyle1](https://user-images.githubusercontent.com/69365878/98984633-7b36e400-2548-11eb-9556-dcbe519f98d2.jpg)  I know my PR os not properly formatted. Please help me on that.","closed","","AkMo3","2020-11-12T19:10:04Z","2020-11-12T19:25:33Z"
"","8033","Issue #7647: Update doc for IllegalType","Fixes: #7647   ![it1](https://user-images.githubusercontent.com/38028330/78893807-93fa8b00-7a89-11ea-8908-4dd22590bab6.png) ![it2](https://user-images.githubusercontent.com/38028330/78893840-a248a700-7a89-11ea-9a7f-8148d731c060.png)   **default:**  ``` kaustubh@dxtk:~$ cat Test.xml               kaustubh@dxtk:~$ cat Test.java public class Test extends TreeSet { // violation   public  void method() { // violation      LinkedHashMap lhmap = new LinkedHashMap(); // violation     TreeMap treemap = new TreeMap(); // violation     Test t; // OK     HashMap hmap; // violation     Queue intqueue; // OK      java.lang.IllegalArgumentException illegalex; // OK     java.util.TreeSet treeset; // violation   }  } kaustubh@dxtk:~$ java -jar checkstyle-8.30-all.jar -c Test.xml Test.java Starting audit... [ERROR] /home/kaustubh/Test.java:1:27: Usage of type 'TreeSet' is not allowed. [IllegalType] [ERROR] /home/kaustubh/Test.java:2:21: Usage of type 'java.util.HashSet' is not allowed. [IllegalType] [ERROR] /home/kaustubh/Test.java:4:5: Usage of type 'LinkedHashMap' is not allowed. [IllegalType] [ERROR] /home/kaustubh/Test.java:6:5: Usage of type 'TreeMap' is not allowed. [IllegalType] [ERROR] /home/kaustubh/Test.java:8:5: Usage of type 'HashMap' is not allowed. [IllegalType] [ERROR] /home/kaustubh/Test.java:12:5: Usage of type 'java.util.TreeSet' is not allowed. [IllegalType] Audit done. Checkstyle ends with 6 errors. kaustubh@dxtk:~$  ``` **Config 1:**  ``` kaustubh@dxtk:~$ cat Test.xml                    kaustubh@dxtk:~$ cat Test.java public class Test extends TreeSet { // OK   public  void method() { // violation       LinkedHashMap lhmap =        new LinkedHashMap(); // OK          java.lang.IllegalArgumentException illegalex; // OK     java.util.TreeSet treeset; // Ok   }    public  void typeParam(T t) {} // violation    public void fullName(TreeSet a) {} // OK  }  kaustubh@dxtk:~$ java -jar checkstyle-8.30-all.jar -c Test.xml Test.java Starting audit... [ERROR] /home/kaustubh/Test.java:2:21: Usage of type 'java.util.HashSet' is not allowed. [IllegalType] [ERROR] /home/kaustubh/Test.java:11:21: Usage of type 'java.util.HashSet' is not allowed. [IllegalType] Audit done. Checkstyle ends with 2 errors.  ```    **Config2:** ``` kaustubh@dxtk:~$ cat Test.xml                   kaustubh@dxtk:~$ cat Test3.java public class Test3 {   public HashMap function(){ // OK     // code   }    public HashMap function1(){ // violation     // code   }  }  kaustubh@dxtk:~$ java -jar checkstyle-8.30-all.jar -c Test.xml Test3.java Starting audit... [ERROR] /home/kaustubh/Test3.java:6:10: Usage of type 'HashMap' is not allowed. [IllegalType] Audit done. Checkstyle ends with 1 errors. ```        **Config 3:**  ``` kaustubh@dxtk:~$ cat Test.xml                       kaustubh@dxtk:~$ cat Test.java class Test extends Gitter{ // violation }  class Test1 extends Github{ // OK }  kaustubh@dxtk:~$ java -jar checkstyle-8.30-all.jar -c Test.xml Test.java Starting audit... [ERROR] /home/kaustubh/Test.java:1:20: Usage of type 'Gitter' is not allowed. [IllegalType] Audit done. Checkstyle ends with 1 errors.  ```     **Config 4:** ``` kaustubh@dxtk:~$ cat Test.xml                   kaustubh@dxtk:~$ cat Test2.java public class Test2 {   public HashMap method1(){ // violation     // code   }    private HashMap method2(){ // OK     // code   }    protected HashMap method3(){ // violation     // code   }    public static TreeMap method4(){ // violation     // code   }  }  kaustubh@dxtk:~$ java -jar checkstyle-8.30-all.jar -c Test.xml Test2.java Starting audit... [ERROR] /home/kaustubh/Test2.java:2:10: Usage of type 'HashMap' is not allowed. [IllegalType] [ERROR] /home/kaustubh/Test2.java:10:13: Usage of type 'HashMap' is not allowed. [IllegalType] [ERROR] /home/kaustubh/Test2.java:14:17: Usage of type 'TreeMap' is not allowed. [IllegalType] Audit done. Checkstyle ends with 3 errors.  ```   @strkkk, please review","closed","","DXTkastb","2020-04-04T18:34:27Z","2020-04-10T12:24:40Z"
"","8034","Issue #7596: Update doc for UpperEll","Fixes: #7596   ![Screenshot from 2020-04-05 00-44-40](https://user-images.githubusercontent.com/38028330/78459522-2fc97700-76d7-11ea-80aa-aec6195445cd.png)   **output:** ``` kaustubh@dxtk:~$ cat Test.xml               kaustubh@dxtk:~$ cat Test.java class Test {   long var1 = 508987; // OK   long var2 = 508987l; // violation   long var3 = 508987L; // OK  }  kaustubh@dxtk:~$ java -jar checkstyle-8.30-all.jar -c Test.xml Test.java Starting audit... [ERROR] /home/kaustubh/Test.java:3:15: Should use uppercase 'L'. [UpperEll] Audit done. Checkstyle ends with 1 errors.  ``` @timurt please review.","closed","","DXTkastb","2020-04-04T19:19:57Z","2020-04-05T06:07:00Z"
"","8193","Issue #7563: Add default config example for CatchParameterName","fixes: #7563   **Website view:** ![cpn21](https://user-images.githubusercontent.com/38028330/80511982-7d659680-899a-11ea-83fd-6b833dae8794.png)    **Output:**  ``` kaustubh@dxtkastb:~$ cat Test.java public class MyTest {   public void myTest() {     try {       // ...     } catch (ArithmeticException e) { // OK       // ...     } catch (ArrayIndexOutOfBoundsException ex) { // OK       // ...     } catch (Throwable t) { // OK       // ...     } catch (IndexOutOfBoundsException e123) { // violation, digits                                                // not allowed       // ...     } catch (NullPointerException ab) { // violation, should have at least                                         // three characters if not e|t|ex       // ...     } catch (ArrayStoreException abc) { // OK       // ...     } catch (InterruptedException aBC) { // violation, first two characters                                          // should be in lowercase       // ...     } catch (RuntimeException abC) { // OK       // ...     } catch (Exception abCD) { // OK       // ...     }   } }  kaustubh@dxtkastb:~$ cat Test.xml                         kaustubh@dxtkastb:~$ java -jar ckm.jar -c Test.xml Test.java Starting audit... [ERROR] /home/kaustubh/Test.java:11:40: Name 'e123' must match pattern '^(e|t|ex|[a-z][a-z][a-zA-Z]+)$'. [CatchParameterName] [ERROR] /home/kaustubh/Test.java:14:35: Name 'ab' must match pattern '^(e|t|ex|[a-z][a-z][a-zA-Z]+)$'. [CatchParameterName] [ERROR] /home/kaustubh/Test.java:19:35: Name 'aBC' must match pattern '^(e|t|ex|[a-z][a-z][a-zA-Z]+)$'. [CatchParameterName] Audit done. Checkstyle ends with 3 errors.  ```","closed","","DXTkastb","2020-04-26T12:49:10Z","2020-04-29T14:03:33Z"
"","8190","Issue #6915: InnerAssignment: false positives on for and do-while loops","fixes: #6915    Diff Regression config: https://gist.github.com/romani/7deac41fe5c1e70af01438d32aabc7eb/raw/57a44c0470584de669575484b20677641ae50bfd/my_check-pr8190.xml Diff Regression projects: https://gist.githubusercontent.com/romani/7deac41fe5c1e70af01438d32aabc7eb/raw/7c7cfa59aef6edc05c91b7f1848881d9afc9cbc9/projects-to-test-on-pr-8190.properties","closed","","DXTkastb","2020-04-26T00:47:23Z","2020-11-22T14:56:59Z"
"","8111","doc: add leading asterisks for javadoc","Fixes the violations that are generated after solving issue #6722  PR Link for Check: [MissingLeadingAsterisk](https://github.com/checkstyle/checkstyle/pull/8085)","closed","","Gaurav-Punjabi","2020-04-16T16:59:16Z","2020-04-18T12:19:33Z"
"","8389","minor: fix pmd warning of deprecated attribute","Fixes PMD warning detected [here](https://github.com/checkstyle/checkstyle/pull/8349#issuecomment-651050383)","closed","","pbludov","2020-06-30T05:28:34Z","2020-06-30T06:49:24Z"
"","8052","Issue #7760: regex singleline java","Fixes Issue: #7760   It's basically, same as this Pull Request #8012. Just wanted to point out my contribution to this issue and maybe writing into separate lines will look better.  I will close this PR, if it's not necessary.","closed","","ImmortalRabbit","2020-04-08T20:49:17Z","2020-05-13T17:55:58Z"
"","8997","Issue #8979: fix for 'array initialization rcurly' has incorrect indentation","Fixes Issue #8979   Diff Regression projects: https://gist.githubusercontent.com/Abhishek-kumar09/0745ecf11934e0214b9187f9d4896e4a/raw/7994fb09f0b5d073f1937e62faecdd5cb3908e64/project-to-test-on.properties Diff Regression config: https://gist.githubusercontent.com/Abhishek-kumar09/0745ecf11934e0214b9187f9d4896e4a/raw/7e9f169832e45c826fb99e72b3ff08f32765243a/my_check.xml","closed","","Abhishek-kumar09","2020-11-19T18:18:19Z","2021-01-22T14:14:53Z"
"","8054","Issue #7872: fixes Resolve Pitest Issues - ImportOrderCheck (1)","Fixes Issue #7872   1) Pitest-report Line 903 - Before: https://immortalrabbit.github.io/pit-reports/202004070645/com.puppycrawl.tools.checkstyle.checks.imports/ImportOrderCheck.java.html - After: https://immortalrabbit.github.io/pit-reports_after/202004070732/com.puppycrawl.tools.checkstyle.checks.imports/ImportOrderCheck.java.html 2) Hardcode: https://github.com/ImmortalRabbit/checkstyle/commit/f78de6e3f05ef3b7559252b418d5cd0177b93e22 3) Diff report: https://immortalrabbit.github.io/reports/diff/","closed","awaiting changes,","ImmortalRabbit","2020-04-09T01:56:28Z","2020-05-13T17:52:51Z"
"","8066","Issue #7651: Update doc for NestedForDepth","Fixes Issue #7651  ![Capture_nestedfor](https://user-images.githubusercontent.com/60020042/79016150-1edb9400-7b23-11ea-9e96-7f9baeb5adc4.PNG)  $ cat config.xml                                               $ cat Test.java public class Test {      public void myTest() {         for(int i=0; i","closed","","Rainy0707","2020-04-10T19:05:33Z","2020-11-09T00:38:29Z"
"","8053","Issue #7651: Update doc for NestedForDepth","Fixes Issue #7651  ![Capture_nestedfor](https://user-images.githubusercontent.com/60020042/78846424-9b099680-79c0-11ea-8740-5a4b35b39870.PNG)  $ cat config.xml                                               $ cat Test.java public class Test {      public void myTest() {         for(int i=0; i","closed","","Rainy0707","2020-04-09T00:45:46Z","2020-04-10T18:14:17Z"
"","8068","Issue #7640: Update doc for FallThrough","Fixes Issue #7640  ![Capture_fallthrough](https://user-images.githubusercontent.com/60020042/79020001-8518e480-7b2c-11ea-8c54-2f19e5203424.PNG)  $ cat config.xml                                               $ cat Test.java public class Test { int i;     public void myTest() {                 switch (i) {                         case 0:                         case 1:                                 i++;                         case 2:                 }                  switch (i) {                         case 0:                         case 1:                                 i++;                                 break;                         case 2:                                 i++;                                 // fall through                 }     }  }  $ java -jar checkstyle-8.30-all.jar -c config.xml Test.java Starting audit... [ERROR] C:\Users\1\Documents\WSU\Software Maintenance\Project\Testing_FallThrough\Test.java:8:25: Fall through from previous branch of the switch statement. [FallThrough] Audit done. Checkstyle ends with 1 errors.","closed","","Rainy0707","2020-04-10T20:10:34Z","2020-09-27T14:27:41Z"
"","8067","Issue #7620: Update doc for FileTabCharacter","Fixes Issue #7620  ![Capture_filetab](https://user-images.githubusercontent.com/60020042/79017704-d45c1680-7b26-11ea-81cb-64bedd9c5d42.PNG)  $ cat config.xml                         $ cat Test.java public class Test { int i;  public void myTest() {         for(int i=0; i","closed","","Rainy0707","2020-04-10T19:29:38Z","2020-11-09T00:39:24Z"
"","8064","Issue #7618: Update doc for EmptyForIteratorPad","Fixes Issue #7618    $ cat config.xml                                              $ cat Test.java public class Test { int i;      public void myTest() { 		for(i=0; i","closed","abandoned,","coraljain","2020-04-10T00:29:25Z","2020-09-07T08:37:43Z"
"","8080","Issue #7617: Update doc for EmptyForInitializerPad","Fixes Issue #7617    $ cat config.xml                                               $ cat Test.java public class Test { 	int i;      public void myTest() {     	for(; i < 10; i++){     	}      	for( ; i < 10; i++){ 		}     }  $ java -jar checkstyle-8.30-all.jar -c config.xml Test.java Starting audit... [ERROR] /Users/coraljain/Downloads/Testing_Emptyforinitializer/Test.java:5:13: ';' is not preceded with whitespace. [EmptyForInitializerPad] Audit done. Checkstyle ends with 1 errors.","closed","","coraljain","2020-04-12T18:39:59Z","2020-09-07T08:44:21Z"
"","8083","Issue #5951: Add indentation Support for Annotation Array Initialisation","Fixes Issue #5951, #8980    https://github.com/pmd/pmd/pull/2925 - merged https://github.com/pgjdbc/pgjdbc/pull/1961  Diff Regression projects: https://gist.githubusercontent.com/Abhishek-kumar09/0745ecf11934e0214b9187f9d4896e4a/raw/7994fb09f0b5d073f1937e62faecdd5cb3908e64/project-to-test-on.properties Diff Regression config: https://gist.githubusercontent.com/Abhishek-kumar09/0745ecf11934e0214b9187f9d4896e4a/raw/2143ba7f21dcafb998019a1ca2c0ee3f1c510646/my_check.xml","closed","","Abhishek-kumar09","2020-04-12T22:55:29Z","2020-12-07T03:27:10Z"
"","8059","Issue #3899: Modify braceAdjustment for support to google-java-format and switch-block-indentation","Fixes Issue #3899 and Issue #6392.  Diff Regression projects: https://raw.githubusercontent.com/checkstyle/contribution/master/checkstyle-tester/projects-to-test-on.properties Diff Regression config: https://raw.githubusercontent.com/Abhishek-kumar09/Configurate/master/etc/checkstyle/checkstyle.xml","closed","","Abhishek-kumar09","2020-04-09T16:03:08Z","2020-10-05T05:47:17Z"
"","8178","Issue #3342: Indentation: lambda don't respect lineWrappingIndentation when forceStrictCondition is false","Fixes Issue #3342","closed","","Abhishek-kumar09","2020-04-24T10:59:54Z","2020-09-04T19:03:06Z"
"","8211","Issue #8206: Resolve PMD warning deprecated attribute 'ClassOrInterfaceDeclaration/@Image","Fixes #8206   #### 1. Solution Needed to replace `@Image` with `@SimpleName` as `@Image` is deprecated now.","closed","","Gaurav-Punjabi","2020-04-29T15:35:38Z","2020-05-03T02:37:04Z"
"","8194","Issue #8182: JavadocTagContinuationIndentation add strict enforcement of indentation","Fixes #8182   #### 1. Site updates   #### Diff Regression Report (Coming Soon)","closed","awaiting changes,","Gaurav-Punjabi","2020-04-26T16:37:06Z","2021-03-15T01:53:24Z"
"","8174","Issue #8168: remove from configs hardcode caused by MCHECKSTYLE-33","Fixes #8168   #### Changes 1. Removed `cacheFile` property from `config/checkstyle_sevntu_checks.xml`. 2. Removed false comments from other configurations, as discussed in this comment https://github.com/checkstyle/checkstyle/issues/8168#issuecomment-617875015 . 3. Modified configuration of plugin to have the name of config file as `cache_sevntu`  #### Output ``` gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ mvn clean install [INFO] Scanning for projects... [INFO] Inspecting build with total of 1 modules... [INFO] Installing Nexus Staging features: [INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin .......... [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time:  03:50 min [INFO] Finished at: 2020-04-23T20:17:43+05:30 [INFO] ------------------------------------------------------------------------ gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ ls target | grep ""cache.*"" cache_non_main_files cache_resources cachefile cachefile-test cachefile_sevntu ```","closed","","Gaurav-Punjabi","2020-04-23T14:55:08Z","2020-04-24T11:26:09Z"
"","8115","Issue #8110: Remove from PackageDeclaration validation for empty files","Fixes #8110   Diff report: https://gaurav-punjabi.github.io/checkstyle/8110/index.html","closed","","Gaurav-Punjabi","2020-04-17T09:55:37Z","2020-04-29T13:30:17Z"
"","8047","Issue #8036: Update test inputs to avoid long lines that violate 100 …","Fixes #8036 : wrapped all the lines longer than 100 characters in the input files.   #### Tested ``` gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ mvn compile antrun:run@ant-phase-verify [INFO] Scanning for projects... [INFO] Inspecting build with total of 1 modules... ....... [INFO] Executed tasks [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time:  10.086 s [INFO] Finished at: 2020-04-15T06:45:39+05:30 [INFO] ------------------------------------------------------------------------  ```","closed","","Gaurav-Punjabi","2020-04-07T15:25:54Z","2020-05-03T19:29:08Z"
"","8883","Issue #7983: Resolve Pitest Issues - RegexpCheck (2)","Fixes #7983   1. Pitest Report  - Link: https://user-images.githubusercontent.com/54651212/95527351-e14cac00-0989-11eb-9f3d-f851614faa7f.PNG - Surviving Mutations: removed conditional - replaced equality check with false → SURVIVED removed conditional - replaced equality check with true → SURVIVED  2. Mutate Branch  - Hardcoded Mutated: https://user-images.githubusercontent.com/54651212/95529357-8cac2f80-098f-11eb-8a57-01830d3acfc9.PNG   3. Regression Report  Not needed due to no main code change  4. Code logic and analysis  Similar to #8001, `(ignore || illegalPattern || checkForDuplicates)` should be removed from  ```   private boolean canContinueValidation(boolean ignore) {         return errorCount  Recursion stack is too deep.  I tried to remove `(ignore || illegalPattern || checkForDuplicates)` and added logic like this to stop early:  ```     final boolean onlyNeedOneMatch = !illegalPattern && !checkForDuplicates;     if (foundOneMatch && onlyNeedOneMatch) return; ```  That doesn't work either, mutations are still alive since mutating `foundOneMatch && onlyNeedOneMatch` to `false` doesn't break the program (only make it slower).  => So in this PR, I **turn the recursive call to a while loop**, hoping to get rid of `timeout` issue.  Pitest report after fix: kill all mutations https://user-images.githubusercontent.com/54651212/95529213-33dc9700-098f-11eb-9edd-3acfaab254c8.PNG","closed","","anhminhtran235","2020-10-09T01:02:28Z","2020-10-12T20:55:06Z"
"","8026","Issue #7978: Resolve Pitest Issues - JavadocMethodCheck (6)","fixes #7978","closed","","DXTkastb","2020-04-03T19:30:09Z","2020-04-04T10:16:29Z"
"","8025","Issue #7804: Resolve Pitest Issues - CustomImportOrderCheck (3)","fixes #7804","closed","","DXTkastb","2020-04-03T18:58:44Z","2020-05-17T03:27:09Z"
"","8167","Issue #7727: Updated ITs for CommentsIndentation","Fixes #7727   Diff report: https://sulkykookie.github.io/commentsIndentation","closed","","sulkykookie","2020-04-22T11:11:50Z","2020-04-30T06:44:31Z"
"","8101","Issue #7724: Update AbstractChecks to log DetailAST - AvoidEscapedUni…","Fixes #7724  #### 1. Site Changes    #### 2. Regression Reports 1. [Default config](https://gaurav-punjabi.github.io/checkstyle/issue-7724/default/index.html) 2. [Tail Comments Config](https://gaurav-punjabi.github.io/checkstyle/issue-7724/tail-comments/index.html) 3. [Control Characters Config](https://gaurav-punjabi.github.io/checkstyle/issue-7724/control-characters/index.html) 4. [Non Printable Characters](https://gaurav-punjabi.github.io/checkstyle/issue-7724/non-printable/index.html) 5. [All Escaped Characters](https://gaurav-punjabi.github.io/checkstyle/issue-7724/escaped-characters/index.html)  #### 3. Goal Update AbstractChecks to log DetailAST - AvoidEscapedUnicodeCharacters.","closed","","Gaurav-Punjabi","2020-04-15T02:03:20Z","2020-04-24T17:31:52Z"
"","8057","Issue #7692: Update doc for CyclomaticComplexity","Fixes #7692 ![pr8_1](https://user-images.githubusercontent.com/43749360/79050059-2004e200-7c45-11ea-875d-e233d4d073f3.PNG) ![pr8_2](https://user-images.githubusercontent.com/43749360/79050060-21cea580-7c45-11ea-86f4-ee4549a91aa7.PNG) ![pr8_3](https://user-images.githubusercontent.com/43749360/79050061-22ffd280-7c45-11ea-9f78-c635184ff338.PNG)   Default Example: ``` $ cat config.xml                     Shrey@PREDATOR-PH315-51 MINGW64 ~/Desktop/Checkstyle jar $ cat test.java class CyclomaticComplexity {   // Cyclomatic Complexity = 11   int a, b, c, d, n;   public void foo() { // 1, function declaration     if (a == 1) { // 2, if       fun1();     } else if (a == b // 3, if       && a == c) { // 4, && operator       if (c == 2) { // 5, if         fun2();       }     } else if (a == d) { // 6, if       try {         fun4();       } catch (Exception e) { // 7, catch       }     } else {       switch(n) {         case 1: // 8, case           fun1();           break;         case 2: // 9, case           fun2();           break;         case 3: // 10, case           fun3();           break;         default:           break;       }     }     d = a < 0 ? -1 : 1; // 11, ternary operator   } } Shrey@PREDATOR-PH315-51 MINGW64 ~/Desktop/Checkstyle jar $ java -jar checkstyle-8.30-all.jar -c config.xml test.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\test.java:4:3: Cyclomatic Complexity is 11 (max allowed is 10). [CyclomaticComplexity] Audit done. Checkstyle ends with 1 errors. ```  Non-Default Example 1: ``` $ cat config2.xml                                       Shrey@PREDATOR-PH315-51 MINGW64 ~/Desktop/Checkstyle jar $ cat test2.java class CyclomaticComplexity {   // Cyclomatic Complexity = 5   int a, b, c, d;   public void foo() { // 1, function declaration     while (a < b // 2, while       && a > c) {       fun();     }     if (a == b) {       do { // 3, do         fun();       } while (d);     } else if (c == d) {       while (c > 0) { // 4, while         fun();       }       do { // 5, while         fun();       } while (a);     }   } } Shrey@PREDATOR-PH315-51 MINGW64 ~/Desktop/Checkstyle jar $ java -jar checkstyle-8.30-all.jar -c config2.xml test2.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\test2.java:4:3: Cyclomatic Complexity is 5 (max allowed is 4). [CyclomaticComplexity] Audit done. Checkstyle ends with 1 errors. ```  Non-Default Example 2: ``` $ cat config3.xml                              Shrey@PREDATOR-PH315-51 MINGW64 ~/Desktop/Checkstyle jar $ cat test3.java class CyclomaticComplexity {   // Cyclomatic Complexity = 11   int a, b, c, d, e, n;   public void foo() { // 1, function declaration     if (a == b) { // 2, if       fun1();     } else if (a == 0 // 3, if       && b == c) { // 4, && operator       if (c == -1) { // 5, if         fun2();       }     } else if (a == c // 6, if       || a == d) { // 7, || operator       fun3();     } else if (d == e) { // 8, if       try {         fun4();       } catch (Exception e) { // 9, catch       }     } else {       switch(n) { // 10, switch         case 1:           fun1();           break;         case 2:           fun2();           break;         default:           break;       }     }     a = a > 0 ? b : c; // 11, ternary operator   } } Shrey@PREDATOR-PH315-51 MINGW64 ~/Desktop/Checkstyle jar $ java -jar checkstyle-8.30-all.jar -c config3.xml test3.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\test3.java:4:3: Cyclomatic Complexity is 11 (max allowed is 10). [CyclomaticComplexity] Audit done. Checkstyle ends with 1 errors. ```","closed","","sulkykookie","2020-04-09T13:10:20Z","2020-04-13T09:22:57Z"
"","8988","Issue #7669: Updated docs for MultipleVaribleDeclaration","Fixes #7669  ![Checkstyle](https://user-images.githubusercontent.com/69365878/99179868-6c6a5000-2747-11eb-9431-9991c2484092.jpg)  ``` PS H:\CheckstyleCheck> cat .\config.xml                     PS H:\CheckstyleCheck> cat .\Test.java public class Test {   public void myTest() {     int mid;     int high;     // ...      int lower, higher; // violation     // ...      int value,         index;  // violation     // ...      int place = mid, number = high; // violation   } } PS H:\CheckstyleCheck> java -jar H:\GitHub\checkstyle\target\checkstyle-8.38-SNAPSHOT-all.jar -c .\config.xml .\Test.java Starting audit... [ERROR] H:\CheckstyleCheck\.\Test.java:7:5: Each variable declaration must be in its own statement. [MultipleVariableDeclarations] [ERROR] H:\CheckstyleCheck\.\Test.java:10:5: Each variable declaration must be in its own statement. [MultipleVariableDeclarations] [ERROR] H:\CheckstyleCheck\.\Test.java:14:5: Each variable declaration must be in its own statement. [MultipleVariableDeclarations] Audit done. Checkstyle ends with 3 errors. ```","closed","","AkMo3","2020-11-14T13:00:25Z","2021-01-11T16:13:36Z"
"","8986","Issue #7669: Update docs for MultiVariableDeclaration","Fixes #7669  ![Checkstyle](https://user-images.githubusercontent.com/69365878/99141600-eb418900-2672-11eb-9489-4ecd087238f3.jpg)  ``` PS H:\CheckstyleCheck> cat .\config.xml                     PS H:\CheckstyleCheck> cat .\Test.java public class Test {   public void myTest() {     int mid;     int high;     // ...      int lower, higher; // violation     // ...      int value,         index;  //Violation     // ...      int place = mid, number = high; // violation, each to be decalared at a new line   } } PS H:\CheckstyleCheck> java -jar H:\GitHub\checkstyle\target\checkstyle-8.38-SNAPSHOT-all.jar -c .\config.xml .\Test.java Starting audit... [ERROR] H:\CheckstyleCheck\.\Test.java:7:5: Each variable declaration must be in its own statement. [MultipleVariableDeclarations] [ERROR] H:\CheckstyleCheck\.\Test.java:10:5: Each variable declaration must be in its own statement. [MultipleVariableDeclarations] [ERROR] H:\CheckstyleCheck\.\Test.java:14:5: Each variable declaration must be in its own statement. [MultipleVariableDeclarations] Audit done. Checkstyle ends with 3 errors. ```","closed","","AkMo3","2020-11-13T17:08:23Z","2020-11-14T12:34:19Z"
"","8982","Issue #7669: Update doccs for MultiVaribleDeclaration","Fixes #7669   Default Example: ``` PS H:\CheckstyleCheck> cat .\config.xml                     PS H:\CheckstyleCheck> cat .\Test.java public class Test {   public void myTest() {      int mid;    //OK      int high;   //OK      // ...      int lower, higher; // violation      // ...      int value;  //OK      int index;  //OK      // ...      int place, number; // violation, each to be decalared at a new line   } } PS H:\CheckstyleCheck> java -jar H:\GitHub\checkstyle\target\checkstyle-8.38-SNAPSHOT-all.jar -c .\config.xml .\Test.java Starting audit... [ERROR] H:\CheckstyleCheck\.\Test.java:6:6: Each variable declaration must be in its own statement. [MultipleVariableDeclarations] [ERROR] H:\CheckstyleCheck\.\Test.java:11:6: Each variable declaration must be in its own statement. [MultipleVariableDeclarations] Audit done. Checkstyle ends with 2 errors. ```","closed","","AkMo3","2020-11-13T02:13:52Z","2020-11-13T16:27:27Z"
"","8201","Issue #7667: Update doc for MissingCtor","Fixes #7667   #### 1. Screenshots   #### 2. Output ``` gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ cat config.xml                        gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$  java -jar target/checkstyle-8.33-SNAPSHOT-all.jar -c config.xml Test.java  Starting audit... [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:8:1: Class should define a constructor. [MissingCtor] Audit done. Checkstyle ends with 1 errors.  ```","closed","","Gaurav-Punjabi","2020-04-27T17:46:13Z","2020-04-29T06:59:33Z"
"","8189","Issue #7664: Update doc for AvoidInlineConditionals","Fixes #7664   #### 1. Screenshot:   #### 2. Output: ``` gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ cat config.xml                        gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c config.xml Test.java  Starting audit... [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:4:35: Avoid inline conditionals. [AvoidInlineConditionals] [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:5:43: Avoid inline conditionals. [AvoidInlineConditionals] [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:5:54: Avoid inline conditionals. [AvoidInlineConditionals] [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:8:14: Avoid inline conditionals. [AvoidInlineConditionals] Audit done. Checkstyle ends with 4 errors.  ```","closed","","Gaurav-Punjabi","2020-04-25T13:12:48Z","2020-04-27T08:49:28Z"
"","8043","Issue #7630: Update doc for TypecastParenPad","Fixes #7630 ![PR7](https://user-images.githubusercontent.com/43749360/78644949-586a9000-78d4-11ea-9db7-bc38652cc7e4.PNG)  Default example: ``` $ cat config.xml                      $ cat Test.java class Foo {    float f1 = 3.14f;    int n = ( int ) f1; // violation, space after left parenthesis and before right parenthesis    double d = 1.234567;    float f2 = (float ) d; // violation, space before right parenthesis    float f3 = (float) d; // OK    float f4 = ( float) d; // violation, space after left parenthesis  }  $ java -jar checkstyle-8.30-all.jar -c config.xml Test.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test.java:5:11: '(' is followed by whitespace. [TypecastParenPad] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test.java:5:17: ')' is preceded with whitespace. [TypecastParenPad] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test.java:9:21: ')' is preceded with whitespace. [TypecastParenPad] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test.java:13:14: '(' is followed by whitespace. [TypecastParenPad] Audit done. Checkstyle ends with 4 errors. ```  Non-default example: ``` $ cat config2.xml                               $ cat Test2.java class Bar {    double d1 = 3.14;    int n = ( int ) d1; // OK    int m = (int ) d1; // violation, no space after left parenthesis    double d2 = 9.8;    int x = (int) d2; // violation, no space after left parenthesis and before right parenthesis    int y = ( int) d2; // violation, no space before right parenthesis  }  $ java -jar checkstyle-8.30-all.jar -c config2.xml Test2.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test2.java:7:11: '(' is not followed by whitespace. [TypecastParenPad] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test2.java:11:11: '(' is not followed by whitespace. [TypecastParenPad] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test2.java:11:15: ')' is not preceded with whitespace. [TypecastParenPad] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test2.java:13:16: ')' is not preceded with whitespace. [TypecastParenPad] Audit done. Checkstyle ends with 4 errors. ```","closed","","sulkykookie","2020-04-06T09:25:12Z","2020-04-09T13:05:55Z"
"","8089","Issue #7628: Update doc for SeparatorWrap","Fixes #7628 ![pr10_1](https://user-images.githubusercontent.com/43749360/79215110-d5fc4600-7e68-11ea-93fe-c3f1a26c344e.PNG) ![pr10_2](https://user-images.githubusercontent.com/43749360/79215126-d8f73680-7e68-11ea-8eb2-1a284c1b5c59.PNG) ![pr10_3](https://user-images.githubusercontent.com/43749360/79215133-d98fcd00-7e68-11ea-9f08-7545c4d49d49.PNG)   Default Example: ``` $ cat config.xml                      $ cat Test.java import java.io.          IOException; // OK  class Test {    String s;    public void foo(int a,                     int b) { // OK   }    public void bar(int p                     , int q) { // violation, separator comma on new line     if (s           .isEmpty()) { // violation, separator dot on new line     }   }  }  $ java -jar checkstyle-8.30-all.jar -c config.xml Test.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test.java:13:21: ',' should be on the previous line. [SeparatorWrap] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test.java:15:11: '.' should be on the previous line. [SeparatorWrap] Audit done. Checkstyle ends with 2 errors. ```  Non-Default Example 1: ``` $ cat config2.xml                                                        $ cat Test2.java import java.util.Arrays;  class Test2 {    String[] stringArray = {""foo"", ""bar""};    void fun() {         Arrays.sort(stringArray, String::       compareToIgnoreCase);  // violation, separator method reference on same line     Arrays.sort(stringArray, String       ::compareTo);  // OK   }  }  $ java -jar checkstyle-8.30-all.jar -c config2.xml Test2.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test2.java:8:40: '::' should be on a new line. [SeparatorWrap] Audit done. Checkstyle ends with 1 errors. ```  Non-Default Example 2: ``` $ cat config3.xml                                                        $ cat Test3.java class Test3 {    String s;    int a,     b;  // violation, separator comma on same line    public void foo(int a,                      int b) {  // violation, separator comma on the same line     int r       , t; // OK   }    public void bar(int p                     , int q) {  // OK   }  }  $ java -jar checkstyle-8.30-all.jar -c config3.xml Test3.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test3.java:5:8: ',' should be on a new line. [SeparatorWrap] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test3.java:8:24: ',' should be on a new line. [SeparatorWrap] Audit done. Checkstyle ends with 2 errors. ```","closed","","sulkykookie","2020-04-13T09:26:39Z","2020-04-19T06:00:44Z"
"","8129","Issue #7627: Update doc for ParenPad","Fixes #7627 ![1](https://user-images.githubusercontent.com/43749360/79980063-22c2cb00-84c0-11ea-8b0e-4673a8bc7657.PNG) ![2](https://user-images.githubusercontent.com/43749360/79979892-e0998980-84bf-11ea-8662-032efff60071.PNG)   Default Example: ``` $ cat config1.xml                      $ cat Test1.java class Foo {    int n;    public void fun() {  // OK     bar( 1);  // violation, space after left parenthesis   }    public void bar(int k ) {  // violation, space before right parenthesis     while (k > 0) {  // OK     }      Test obj = new Test(k);  // OK   }    public void fun2() {  // OK     switch( n) {  // violation, space after left parenthesis       case 2:         bar(n);  // OK       default:         break;     }   }  }  $ java -jar ../checkstyle-8.30-all.jar -c config1.xml Test1.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\parenPad\Test1.java:6:8: '(' is followed by whitespace. [ParenPad] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\parenPad\Test1.java:9:25: ')' is preceded with whitespace. [ParenPad] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\parenPad\Test1.java:17:11: '(' is followed by whitespace. [ParenPad] Audit done. Checkstyle ends with 3 errors. ```  Non-Default Example: ``` $ cat config2.xml                                                $ cat Test2.java class Foo {    int x;    public Foo(int n) {   }    public void fun() {     try {       System.out.println(x);     } catch( IOException e) {  // violation, no space before right parenthesis     } catch( Exception e ) {  // OK     }      for ( int i = 0; i < x; i++ ) {  // OK     }   }  }  class Bar extends Foo {    public Bar() {     super(1 );  // violation, no space after left parenthesis   }    public Bar(int k) {     super( k ); // OK      for ( int i = 0; i < k; i++) {  // violation, no space after before right parenthesis     }   }  }  $ java -jar ../checkstyle-8.30-all.jar -c config2.xml Test2.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\parenPad\Test2.java:11:27: ')' is not preceded with whitespace. [ParenPad] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\parenPad\Test2.java:24:10: '(' is not followed by whitespace. [ParenPad] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\parenPad\Test2.java:30:32: ')' is not preceded with whitespace. [ParenPad] Audit done. Checkstyle ends with 3 errors.  ```","closed","","sulkykookie","2020-04-19T06:25:19Z","2020-04-30T06:44:39Z"
"","8128","Issue #7611: Update doc for InnerTypeLast","Fixes #7611   ### Website Screenshot   ### Console Output ``` gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ cat config.xml                        gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c config.xml Test.java Starting audit... [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:4:5: Fields and methods should be before inner classes. [InnerTypeLast] [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:16:5: Fields and methods should be before inner classes. [InnerTypeLast] [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:18:5: Fields and methods should be before inner classes. [InnerTypeLast] Audit done. Checkstyle ends with 3 errors. ```","closed","","Gaurav-Punjabi","2020-04-19T00:29:42Z","2020-04-23T07:43:18Z"
"","8031","Issue #7610: Update doc for HideUtilityClassConstructor","Fixes #7610 ![PR6](https://user-images.githubusercontent.com/43749360/78544897-7b376e80-7818-11ea-8059-f0124fa9f9a3.PNG)   Default Example: ``` $ cat config3.xml                      $ cat Test3.java class Test { // violation, class only has a static method and a constructor    public Test() {   }    public static void fun() {   } }  class Foo { // OK    private Foo() {   }    static int n; }  class Bar { // OK    protected Bar() {     // prevents calls from subclass     throw new UnsupportedOperationException();   } }  class UtilityClass { // violation, class only has a static field    static float f; }  $ java -jar checkstyle-8.30-all.jar -c config3.xml Test3.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test3.java:1:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\Test3.java:26:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor] Audit done. Checkstyle ends with 2 errors. ```  The check provides no properties.","closed","","sulkykookie","2020-04-04T11:09:43Z","2020-04-09T13:06:00Z"
"","8091","Issue #7603: Update doc for MissingJavadocMethod","Fixes #7603   #### Screenshots      #### Console Output 1. Check with default config ``` gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ cat check.xml                        gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c check.xml Test.java Starting audit... [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:2:3: Missing a Javadoc comment. [MissingJavadocMethod] [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:3:3: Missing a Javadoc comment. [MissingJavadocMethod] Audit done. Checkstyle ends with 2 errors. ```  2. Check with private scope ``` gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ cat check.xml                                              gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c check.xml Test.java Starting audit... [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:2:3: Missing a Javadoc comment. [MissingJavadocMethod] [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:3:3: Missing a Javadoc comment. [MissingJavadocMethod] Audit done. Checkstyle ends with 2 errors. ```  3. Check with private scope, excluding protected scope ``` avpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ cat check.xml                                                           gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c check.xml Test.java Starting audit... [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:2:3: Missing a Javadoc comment. [MissingJavadocMethod] Audit done. Checkstyle ends with 1 errors. ```  4. Check for ignoring methods starting with foo ``` vpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ cat check.xml                                              gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c check.xml Test.java Starting audit... [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:2:3: Missing a Javadoc comment. [MissingJavadocMethod] Audit done. Checkstyle ends with 1 errors. ```  5. Check with allowMissingPropertyJavadoc set to true ``` acBook-Pro:~/Coding/Open Source/checkstyle$ cat check.xml                                              gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c check.xml Test.java Starting audit... [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:4:3: Missing a Javadoc comment. [MissingJavadocMethod] Audit done. Checkstyle ends with 1 errors. ```  6. Check for only validating methods ``` gaurapunjabi@Gauravs-Macbook-Pro:~/Coding/Open Source/checkstyle$ cat check.xml                                              gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c check.xml Test.java Starting audit... [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:3:3: Missing a Javadoc comment. [MissingJavadocMethod] Audit done. Checkstyle ends with 1 errors. ```  7. Check with allowedAnnotations ``` gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ cat config.xml                                                gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c config.xml Test.java Starting audit... [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:2:9: Missing a Javadoc comment. [MissingJavadocMethod] [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:5:9: Missing a Javadoc comment. [MissingJavadocMethod] Audit done. Checkstyle ends with 2 errors. ```","closed","","Gaurav-Punjabi","2020-04-13T12:35:07Z","2020-04-25T12:31:39Z"
"","8090","Issue #7600: Update doc for JavadocTagContinuationIndentation","fixes #7600   Website view:  ![kkkk](https://user-images.githubusercontent.com/38028330/79508763-cd1d9700-8057-11ea-9de3-50df70a71ae9.png)    Default config:  ``` kaustubh@dxtk:~$ cat Test.xml                         kaustubh@dxtk:~$ cat Test.java /**  * @tag comment..  *  Indentation spacing is 1 (violation)  *   Indentation spacing is 2 (violation)  *     Indentation spacing is 4 (OK)  */ public class Test { }        kaustubh@dxtk:~$ java -jar checkstyle-8.30-all.jar -c Test.xml Test.java Starting audit... [ERROR] /home/kaustubh/Test.java:3: Line continuation have incorrect indentation level, expected level should be 4. [JavadocTagContinuationIndentation] [ERROR] /home/kaustubh/Test.java:4: Line continuation have incorrect indentation level, expected level should be 4. [JavadocTagContinuationIndentation] Audit done. Checkstyle ends with 2 errors. ``` Config 1:  ``` kaustubh@dxtk:~$ cat Test.xml                           kaustubh@dxtk:~$ cat Test.java /**  * @tag comment..  * Indentation spacing is 0 (violation)  *   Indentation spacing is 2 (OK)  *  Indentation spacing is 1 (violation)  */ public class Test { }       kaustubh@dxtk:~$ java -jar checkstyle-8.30-all.jar -c Test.xml Test.java Starting audit... [ERROR] /home/kaustubh/Test.java:3: Line continuation have incorrect indentation level, expected level should be 2. [JavadocTagContinuationIndentation] [ERROR] /home/kaustubh/Test.java:5: Line continuation have incorrect indentation level, expected level should be 2. [JavadocTagContinuationIndentation] Audit done. Checkstyle ends with 2 errors. ``` Config 2:  ``` kaustubh@dxtk:~$ cat Test.xml                           kaustubh@dxtk:~$ cat Test.java /**  * HTML tag is unclosed (violation)  * HTML tag is closed (OK)  */ public class Test { }          kaustubh@dxtk:~$ java -jar checkstyle-8.30-all.jar -c Test.xml Test.java Starting audit... [ERROR] /home/kaustubh/Test.java:2: Unclosed HTML tag found: p [JavadocTagContinuationIndentation] Audit done. Checkstyle ends with 1 errors.  ```  @strkkk, please review.","closed","","DXTkastb","2020-04-13T11:47:23Z","2020-04-17T19:30:39Z"
"","8147","Issue #7570: Update doc for AnnotationOnSameLine","Fixes #7570 ![annotation1](https://user-images.githubusercontent.com/43749360/79849156-bbcde500-83df-11ea-837e-950926d1afc6.PNG) ![annotation2](https://user-images.githubusercontent.com/43749360/79849160-bcff1200-83df-11ea-8762-9f348893f284.PNG)   Default Example: ``` $ cat configAnnotation.xml                      $ cat annotation1.java class Foo {    @SuppressWarnings(""deprecation"")  // violation, annotation should be on the same line   public Foo() {   }    public void fun1() {   }    @SuppressWarnings(""unchecked"") public void fun2() {  // OK   }  }  @SuppressWarnings(""unchecked"") class Bar extends Foo {  // OK    @Deprecated public Bar() {  // OK   }    @Override  // violation, annotation should be on the same line   public void fun1() {   }    @Before @Override public void fun2() {  // OK   }    @SuppressWarnings(""deprecation"")  // violation, annotation should be on the same line   @Before public void fun3() {   }  }  $ java -jar checkstyle-8.30-all.jar -c configAnnotation.xml annotation1.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\annotation1.java:3: Annotation 'SuppressWarnings' should be on the same line with its target. [AnnotationOnSameLine] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\annotation1.java:20: Annotation 'Override' should be on the same line with its target. [AnnotationOnSameLine] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\annotation1.java:27: Annotation 'SuppressWarnings' should be on the same line with its target. [AnnotationOnSameLine] Audit done. Checkstyle ends with 3 errors. ```  Non-Default Example: ``` $ cat configAnnotation2.xml                               $ cat annotation2.java @Deprecated interface Foo {  // OK    void doSomething();  }  class Bar implements Foo {    @SuppressWarnings(""deprecation"")  // violation, annotation should be on the same line   public Bar() {   }    @Override   public void doSomething() {   }    @Nullable  // violation, annotation should be on the same line   String s;  }  $ java -jar checkstyle-8.30-all.jar -c configAnnotation2.xml annotation2.java Starting audit... [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\annotation2.java:9: Annotation 'SuppressWarnings' should be on the same line with its target. [AnnotationOnSameLine] [ERROR] C:\Users\Shrey\Desktop\Checkstyle jar\annotation2.java:17: Annotation 'Nullable' should be on the same line with its target. [AnnotationOnSameLine] Audit done. Checkstyle ends with 2 errors. ```","closed","","sulkykookie","2020-04-21T09:23:00Z","2020-04-30T06:44:31Z"
"","8077","Issue #7179: Update docs of filters to indicate level in the tree","Fixes #7179   Updated docs as per the respective parent module of each filter under the ""Notes"" section.  Example of filter which did not have a ""Notes"" section earlier: (contains a typo, which is fixed via commit) ![pr9_1](https://user-images.githubusercontent.com/43749360/79067568-da482800-7cdd-11ea-9c80-233be2e00409.PNG)  Example of filter which had a ""Notes"" section earlier: ![pr9_2](https://user-images.githubusercontent.com/43749360/79067570-e3d19000-7cdd-11ea-82ce-c81833107855.PNG)","closed","","sulkykookie","2020-04-12T11:22:38Z","2020-04-19T06:00:46Z"
"","8085","Issue #6722: new check MissingLeadingAsteriskCheck","Fixes #6722   Contrib repo PR : [checkstyle/contribution#467](https://github.com/checkstyle/contribution/pull/467) Sevntu checkstyle repo PR : [sevntu-checkstyle/sevntu.checkstyle#812](https://github.com/sevntu-checkstyle/sevntu.checkstyle/pull/812) Diff Regression Report: https://gaurav-punjabi.github.io/checkstyle/6722/index.html Fixes for violations: [checkstyle/checkstyle#8111](https://github.com/checkstyle/checkstyle/pull/8111)","closed","abandoned,","Gaurav-Punjabi","2020-04-13T00:07:13Z","2020-11-21T12:25:24Z"
"","8173","Issue #6475: Linked System Properties page to index page","Fixes #6475   - Renamed ```config_reporting.html``` to ```config_system_properties.html```. - Added ```config_system_properties.html``` to the side bar, so that it can be accessed from anywhere in the website. ![1](https://user-images.githubusercontent.com/43749360/80068190-d083b780-855c-11ea-8c5a-a8079feffeb8.PNG) ![2](https://user-images.githubusercontent.com/43749360/80068198-d24d7b00-855c-11ea-8760-32ce9d22a377.PNG)  - Added its link to [Config properties section](https://checkstyle.org/config.html#Properties). ![3](https://user-images.githubusercontent.com/43749360/80068204-d4173e80-855c-11ea-8511-3dab76f5cca4.PNG)","closed","","sulkykookie","2020-04-23T06:51:14Z","2020-04-30T15:21:57Z"
"","8106","Issue #6209: add spring-cloud-gcp project to CIs no errror regresson …","Fixes #6209","closed","","Gaurav-Punjabi","2020-04-16T00:53:07Z","2020-09-22T12:53:11Z"
"","8144","Issue #6036: LeftCurlyCheck: An empty line should not be treated as a…","Fixes #6036   ### Proposed Solution According to my code analysis, the problem was occurring due to this statement: ``` if (startToken.getLineNo() + 1  == brace.getLineNo()) { ``` The problem occurs when one or more empty lines are present between the expression and the LeftCurly, it fails this condition as the LeftCurly is not present on the immediate next line of its expression. We can solve this by changing the condition to `startToken.getLineNo() + 1  < brace.getLineNo()` and checking if the statement before brace is an empty statement or an comment. But this condition fails for this case: ``` case (1            + 2): { ``` This isn't a violation as the expression is being wrapped, so to avoid this we need to check if the statement before LeftCurly is a comment or blank. This can be done using the following condition: ``` fileContents.lineIsBlank(brace.getLineNo() - 2)             || fileContents.lineIsComment(brace.getLineNo() - 2) ```  ##### Final condition ``` if (startToken.getLineNo() + 1 == brace.getLineNo()             || fileContents.lineIsBlank(brace.getLineNo() - 2)             || fileContents.lineIsComment(brace.getLineNo() - 2)) { ```   I have added some new inputs to the test case for this scenario.  ### Reports 1. Diff report with NLOW option: https://gaurav-punjabi.github.io/checkstyle/6036/index.html","closed","","Gaurav-Punjabi","2020-04-21T00:54:59Z","2020-11-30T15:54:58Z"
"","8177","Issue #5711: JavadocTagContinuationIndentation: no violation with block tag starting the line","Fixes #5711, resolves #8183  Similar to #8002, the problem is with the logic behind how a violation is determined. Previously we only checked the `TEXT` node itself. If the `TEXT` is only a short whitespace (not enough indentation), we ignored it when in fact we need to check if there is a non-newline token (such as a `JAVADOC_INLINE_TAG `) immediately after it.  ~~Regression: https://wltan.github.io/checkstyle-reports/2020-05-10/javadoctagcont-blocktag/ There are violations within Checkstyle itself which were not previously detected due to this issue. They can be found in the regression report as well. I've fixed those violations to use the correct indentation, in a separate commit so it's easier to tell from the main changes, and I'll squash it back into one commit if requested after review.~~  Internal violations have been merged, and manual regression report is deprecated.  Diff Regression projects: https://raw.githubusercontent.com/wltan/checkstyle-reports/master/auto-generate/pr-8177/projects-to-test-on.properties Diff Regression config: https://raw.githubusercontent.com/wltan/checkstyle-reports/master/auto-generate/pr-8177/my_check.xml","closed","","wltan","2020-04-24T09:28:29Z","2021-02-21T15:53:50Z"
"","8072","Issue #5573: SuppressWithNearbyCommentFilter NPE","fixes #5573","closed","","DXTkastb","2020-04-11T14:33:16Z","2020-11-15T00:52:40Z"
"","8983","Issue #5362: Fix new keyword and their children not checked correctly.","Fixes #5362  Diff Regression projects: https://raw.githubusercontent.com/checkstyle/contribution/master/checkstyle-tester/projects-to-test-on.properties Diff Regression config: https://gist.githubusercontent.com/Abhishek-kumar09/0745ecf11934e0214b9187f9d4896e4a/raw/7e9f169832e45c826fb99e72b3ff08f32765243a/my_check.xml","closed","","Abhishek-kumar09","2020-11-13T08:13:22Z","2020-11-19T08:00:36Z"
"","8176","Issue #5313: new check EmptLineWrappingInBlock","Fixes #5313   1. Contrib Repo PR: https://github.com/checkstyle/contribution/pull/470 2. Diff Reports (Will add soon)","closed","awaiting changes,","Gaurav-Punjabi","2020-04-23T23:20:02Z","2021-03-15T01:51:55Z"
"","8199","Issue #5303: Extend doc of lcurly and rcurly values by linking styles","Fixes #5303   Added links to the respective styles for the different available options for lcurly and rcurly checks at the end of definitions of each available options.  Site after the update: ![1](https://user-images.githubusercontent.com/43749360/80388263-512d1580-88c7-11ea-9703-067ecbe8f6b6.PNG) ![2](https://user-images.githubusercontent.com/43749360/80388268-51c5ac00-88c7-11ea-8d1e-3559c052b6b7.PNG) ![3](https://user-images.githubusercontent.com/43749360/80388270-525e4280-88c7-11ea-8493-91c68fa9ab72.PNG)","closed","","sulkykookie","2020-04-27T15:11:37Z","2020-05-14T12:48:03Z"
"","8127","Issue #3201: Allow to configure if ArrayTrailingComma should ignore si…","Fixes #3201 .  #### Changes 1. Added a new property `alwaysDemandTrailingComma`. 2. Added UT for the new property. 3. Update the xdocs and java doc of `ArrayTrailingComma`.  Diff Report: https://gaurav-punjabi.github.io/checkstyle/3201/index.html Diff Report with default config : https://gaurav-punjabi.github.io/checkstyle/3201-default/index.html","closed","","Gaurav-Punjabi","2020-04-18T22:33:14Z","2020-04-28T16:08:47Z"
"","8232","Issue #120: Add PreferMethodReferenceCheck","Fixes #120  Reg report: https://strkkk.github.io/checkstyle/120/index.html Contrib PR: https://github.com/checkstyle/contribution/pull/480  Diff Regression projects: https://gist.githubusercontent.com/strkkk/d3768684b59988be83986c9ffb78b11a/raw/97af2f9bd927d9e856f657039df53b5316a441f5/cyclops.properties New module config: https://gist.githubusercontent.com/strkkk/8223ed031064d641a164af451bee584b/raw/f75a2cdd0455262e8eac49473e47f88b1471fc75/PreferMethodReferenceCheck.xml","closed","","strkkk","2020-05-12T08:57:07Z","2020-11-01T14:29:02Z"
"","8246","spelling: Fix broken links in sun_checks.xml","Fix two broken links in sun_checks.xml","closed","","tosi29","2020-05-21T16:20:11Z","2020-05-22T08:11:23Z"
"","8897","minor: refactor long lambdas","Fix of violations from https://github.com/checkstyle/checkstyle/pull/8896 Change lambdas to be not more than 10 lines","closed","","strkkk","2020-10-13T14:21:12Z","2021-01-29T11:44:25Z"
"","8094","Issue 7979  Resolve Pitest Issues - JavadocMethodCheck (7)","Fix Issue #7979   As per my knowledge we can see for each JavadocMethodCheck a new instance will be created so whenever this method is called a new object itself will be created of `currentTypeParams`  Pitest report:  https://harsh-kukreja.github.io/JavadocMethodCheckPitestReport/com.puppycrawl.tools.checkstyle.checks.javadoc/JavadocMethodCheck.java.html#org.pitest.mutationtest.report.html.SourceFile@18b9ce_383   Hardcoded commit:  https://github.com/checkstyle/checkstyle/commit/d2b3b319b15aa9b5efa41fce812e9c533c826f5c  Diff report: https://harsh-kukreja.github.io/issue-7979/index.html","closed","","harsh-kukreja","2020-04-13T18:44:33Z","2020-04-26T15:20:15Z"
"","8958","minor: fix indentation in config examples","Fix indentations ![image](https://user-images.githubusercontent.com/8901354/98002676-dc4f1100-1dfe-11eb-80fd-70499349dae3.png)  ![image](https://user-images.githubusercontent.com/8901354/98002707-e4a74c00-1dfe-11eb-9c5b-137bb64c8f03.png)","closed","","strkkk","2020-11-03T15:03:49Z","2020-11-05T16:06:38Z"
"","8027","Issue #525: Support for Default IntelliJ IDEA Formatting in CustomImportOrder.","Fix for Issue #525 ,  UT coverage report:  https://abhishek-kumar09.github.io/525/jacoco/index.html Xdoc screenshot(with marked changes) : [IMG_20200404_020645](https://user-images.githubusercontent.com/48255244/78404143-6641bc00-761b-11ea-9401-0d519f1850bd.jpg) full xdoc: https://abhishek-kumar09.github.io/525/site/config_imports.html#CustomImportOrder No change in Diff report is observed hence not uploaded.","closed","","Abhishek-kumar09","2020-04-03T20:58:07Z","2020-04-19T15:14:12Z"
"","8627","minor: fix for metadata-gen issue #38 - Array default value should ha…","Fix for https://github.com/checkstyle/metadata-gen/issues/38  https://github.com/checkstyle/checkstyle/issues/8630","closed","","gaurabdg","2020-08-07T19:56:41Z","2020-08-08T13:51:08Z"
"","8095","Issue #8018: OperatorWrapCheck no violation if single line comment","Fix for #8018   DIff report:  https://harsh-kukreja.github.io/issue-8018/diff/","closed","","harsh-kukreja","2020-04-13T20:43:48Z","2020-11-22T11:58:47Z"
"","8234","minor: fix TC violations","Fix CI issue with TeamCity","closed","","strkkk","2020-05-13T12:51:04Z","2020-05-13T15:20:17Z"
"","8959","Issue #8934: FinalLocalVariable throws a NPE on Switch expression in assignment","Fix #8934   Turns out, assigning to `switch` is not the problem. In fact, wrapping `switch` inside a function `foo()` makes the problem disappear. ``` $ cat ExpressionSwitchBugs.java public class ExpressionSwitchBugs {     private static final int staticValue = 2;     private void foo() {         final int someVariable = switch (staticValue) {             case 0 -> -1;             case 2 -> 2;             default -> 3;         };     } }  java -jar .\checkstyle-8.37-all.jar -c config.xml ExpressionSwitchBugs.java Starting audit... Audit done. ```  Here's what went wrong in #8934:  The NPE occurs at line 482, when checkstyle is reading `case 0 -> -1;` https://github.com/checkstyle/checkstyle/blob/3fc9dd98ad6ed963e2cfcd2e630f7031ec5b0c1e/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java#L481-L482  Basically, when executing `line 482`, `currentScopeAssignedVariables` is an empty Deque => `.peek()` returns `null` => accessing `.iterator()` return NPE  `currentScopeAssignedVariables` is empty because **there are no scope yet**. The only place a new scope is added to `currentScopeAssignedVariables` is: https://github.com/checkstyle/checkstyle/blob/3fc9dd98ad6ed963e2cfcd2e630f7031ec5b0c1e/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java#L273-L274   But,  ``` public class ExpressionSwitchBugs { ... } ``` is an `OBJBLOCK`, not a `SLIST` => `line 274` was never executed => there was no scope at the time `line 482` was executing. That explains why wrapping the `switch` inside a function `foo()` makes it work (Because foo() is a scope)  => I fixed this bug by checking `if (!currentScopeAssignedVariables.isEmpty())` before executing `final Iterator iterator = currentScopeAssignedVariables.peek().iterator();`  Test input was added inside the existing test file: `InputFinalLocalVariableCheckSwitchExpressions.java`  Diff Regression config: https://gist.githubusercontent.com/anhminhtran235/c74908614e3465fade5de3c1d33fad5e/raw/ec75fe33dd75befe6b23185b9521c93cebb1c18b/check.xml Diff Regression projects: https://gist.githubusercontent.com/anhminhtran235/2da94f96d35ab9471624c5b6c4421c66/raw/82b014453ca421085199b4635f6a13c26a62941d/projects-to-test-on.properties","closed","","anhminhtran235","2020-11-04T04:37:13Z","2020-11-11T10:20:51Z"
"","8913","Issue #8895: FinalLocalVariable: NPE in records","Fix #8895   As described [here](https://github.com/checkstyle/checkstyle/issues/8895#issuecomment-711096332), adding `&& astTraverse.getType() != TokenTypes.COMPACT_CTOR_DEF` solves the problem.  Diff Regression config: https://gist.githubusercontent.com/anhminhtran235/c74908614e3465fade5de3c1d33fad5e/raw/ec75fe33dd75befe6b23185b9521c93cebb1c18b/check.xml Diff Regression projects: https://gist.githubusercontent.com/romani/cbc85ed26b809064dc260a246666743a/raw/a515faeb85836d1bb9987855cadc23fd3b63abfc/gistfile1.txt","closed","","anhminhtran235","2020-10-21T20:52:22Z","2020-10-26T07:00:03Z"
"","8903","Issue #8895: FinalLocalVariable: NPE in records","Fix #8895   As described [here](https://github.com/checkstyle/checkstyle/issues/8895#issuecomment-711096332), adding `&& astTraverse.getType() != TokenTypes.COMPACT_CTOR_DEF` solves the problem.","closed","","anhminhtran235","2020-10-19T03:09:52Z","2020-10-19T03:23:09Z"
"","8972","Issue #8873: RequireThis: Incorrectly triggers for record fields in compact constructor","Fix #8873  This PR disables `requireThis` in COMPACT_CTOR_DEF, since `this` cannot be used in COMPACT_CTOR_DEF in Java 15 as mentioned [here](https://github.com/checkstyle/checkstyle/issues/8873#issuecomment-720129384).  As mentioned [here](https://github.com/checkstyle/checkstyle/issues/8873#issuecomment-723726379), not printing error message when `ast` is in `COMPACT_CTOR_DEF` solves the problem in #8873  Also, 4 violations in `testRecordsAsTopLevel()` are no longer violations, so I removed them.  Diff Regression config: https://gist.githubusercontent.com/anhminhtran235/bf0e177285c39256dd7e3217d8dae9e1/raw/55ff82d4be5a21d610e83da86dba7835eea2560d/config.xml Diff Regression projects: https://gist.githubusercontent.com/anhminhtran235/2da94f96d35ab9471624c5b6c4421c66/raw/82b014453ca421085199b4635f6a13c26a62941d/projects-to-test-on.properties","closed","","anhminhtran235","2020-11-09T05:37:10Z","2020-11-22T14:35:15Z"
"","8720","Issue #8726: Mofication of module property default values to reflect actual working data","Fix #8726  Fixes default values of properties detected in https://github.com/checkstyle/metadata-gen/issues/54","closed","","gaurabdg","2020-08-19T21:52:51Z","2020-08-20T18:33:02Z"
"","8540","To Top button on website","fix #8533   [preview](https://jo2.github.io/checkstyle-top-button-right/index.html)","closed","","jo2","2020-07-20T19:56:49Z","2020-07-21T13:11:57Z"
"","8541","Issue #8533: add to top button","fix #8533  [preview](https://jo2.github.io/checkstyle-top-button-right/)  I created this PR anew because there were some issues with my git history.","closed","","jo2","2020-07-21T09:11:16Z","2020-07-25T13:31:17Z"
"","8307","Issue #8264: Increase font size of website","fix #8264   preview: [https://jo2.github.io/checkstyle-font-size/](https://jo2.github.io/checkstyle-font-size/)","closed","","jo2","2020-06-09T15:27:31Z","2020-06-30T11:03:49Z"
"","8390","Issue #8264: Increase font size of website","fix #8264  rel: https://github.com/checkstyle/checkstyle/pull/8307  preview: [https://jo2.github.io/checkstyle-font-size/](https://jo2.github.io/checkstyle-font-size/)","closed","","jo2","2020-06-30T11:08:43Z","2020-06-30T15:50:41Z"
"","8213","Issue #8117: False negative with validateThrows in JavadocMethod","Fix #8117   ~~Regression: https://wltan.github.io/checkstyle-reports/2020-04-18/javadocmethod-traverse/~~  Diff Regression projects: https://raw.githubusercontent.com/wltan/checkstyle-reports/master/auto-generate/pr-8213/projects-to-test-on.properties Diff Regression config: https://raw.githubusercontent.com/wltan/checkstyle-reports/master/auto-generate/pr-8213/my_check.xml  There are violations within Checkstyle's own code that were not detected previously. I have fixed those in a separate commit, so that it is easier to tell apart from the main bug fix.","closed","","wltan","2020-04-30T13:29:40Z","2021-03-18T14:35:41Z"
"","8145","Issue #7811: Update doc of AvoidDoubleBraceInitialization","Fix #7811: upadate doc of AvoidDoubleBraceInitialization to make example compilable  ## New site ![image](https://user-images.githubusercontent.com/53135010/79832749-a86d4a80-83dc-11ea-98c6-672567837c2b.png)   ## Additional notes - The old example was using raw type `List` for no apparent reason, so I updated it to a more 'standard' usage. - Examples have been re-indented to +4 spaces per level. Previously there was an inconsistency in the second example some lines were +3 instead. - The explanation comments were moved around or tweaked slightly due to the line length limit.  ## CLI runs Note that import statements were added to make the input files compilable, but it is omitted in documentation for the site.  Example 1: ``` D:\checkstyletest>type config.xml                                          D:\checkstyletest>cd test   D:\checkstyletest\test>type MyClass.java  import java.util.ArrayList; import java.util.List;  class MyClass {     List list1 = new ArrayList() { // violation         {             add(1);         }     };     List list2 = new ArrayList() { // violation         ;         // comments and semicolons are ignored         {             add(""foo"");         }     }; }  D:\checkstyletest\test>javac MyClass.java   D:\checkstyletest\test>cd ..\   D:\checkstyletest>set RUN_LOCALE=""-Duser.language=en -Duser.country=US""   D:\checkstyletest>java -jar ""-Duser.language=en -Duser.country=US"" checkstyle-8.31-all.jar -c config.xml test\MyClass.java  Starting audit... [ERROR] D:\checkstyletest\test\MyClass.java:5:45: Avoid double brace initialization. [AvoidDoubleBraceInitialization] [ERROR] D:\checkstyletest\test\MyClass.java:10:44: Avoid double brace initialization. [AvoidDoubleBraceInitialization] Audit done. ```  Example 2: ``` D:\checkstyletest>type config.xml                                          D:\checkstyletest>cd test   D:\checkstyletest\test>type MyClass.java  import java.util.ArrayList; import java.util.List;  class MyClass {     List list = new ArrayList() { // OK, not pure double brace pattern         private int field;         {             add(new Object());         }     }; }  D:\checkstyletest\test>javac MyClass.java   D:\checkstyletest\test>cd ..\   D:\checkstyletest>set RUN_LOCALE=""-Duser.language=en -Duser.country=US""   D:\checkstyletest>java -jar ""-Duser.language=en -Duser.country=US"" checkstyle-8.31-all.jar -c config.xml test\MyClass.java  Starting audit... Audit done. ```","closed","","wltan","2020-04-21T06:31:23Z","2020-04-21T08:16:09Z"
"","8214","Issue #7739: Update AbstractChecks to log DetailAST - JavadocMethod","Fix #7739  Regression: http://wltan.github.io/checkstyle-reports/2020-05-01/javadocmethod-detailast/index","closed","","wltan","2020-04-30T14:26:22Z","2020-11-03T04:50:11Z"
"","8108","Issue #7566: Add default config example for AbbreviationAsWordInName","Fix #7566   Although the title of the issue only asks for ""default config example"", there is one more property `ignoreOverriddenMethods` that was not covered by existing examples, so I've added that in as well.  The two examples added: ![image](https://user-images.githubusercontent.com/53135010/79638873-872d1400-81ba-11ea-88a7-f2647db2bdee.png)  ``` D:\checkstyletest>type config.xml                                 D:\checkstyletest>type test\*.java  public class MyClass extends SuperClass { // OK, camel case   int CURRENT_COUNTER; // violation, at most 4 consecutive capital letters allowed   static int GLOBAL_COUNTER; // OK, static is ignored   final Set stringsFOUND = new HashSet(); // OK, final is ignored    @Override   void printCOUNTER() { // OK, overridden method is ignored     System.out.println(CURRENT_COUNTER); // OK, only definitions are checked   }    void incrementCOUNTER() { // violation, at most 4 consecutive capital letters allowed     CURRENT_COUNTER++; // OK, only definitions are checked   }    static void incrementGLOBAL() { // violation, static method is not ignored     GLOBAL_COUNTER++; // OK, only definitions are checked   }  }  D:\checkstyletest>set RUN_LOCALE=""-Duser.language=en -Duser.country=US""   D:\checkstyletest>java -jar ""-Duser.language=en -Duser.country=US"" checkstyle-8.31-all.jar -c config.xml test\*.java  Starting audit... [ERROR] D:\checkstyletest\test\Test.java:2:7: Abbreviation in name 'CURRENT_COUNTER' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] D:\checkstyletest\test\Test.java:11:8: Abbreviation in name 'incrementCOUNTER' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] D:\checkstyletest\test\Test.java:15:15: Abbreviation in name 'incrementGLOBAL' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] Audit done. ``` ``` D:\checkstyletest>type config.xml                                                                    D:\checkstyletest>type test\*.java  public class MyClass extends SuperClass { // OK, camel case   int CURRENT_COUNTER; // violation, at most 4 consecutive capital letters allowed   static int GLOBAL_COUNTER; // violation, static is not ignored   final Set stringsFOUND = new HashSet(); // OK, final is ignored    @Override   void printCOUNTER() { // violation, overridden method is not ignored     System.out.println(CURRENT_COUNTER); // OK, only definitions are checked   }    void incrementCOUNTER() { // violation, at most 4 consecutive capital letters allowed     CURRENT_COUNTER++; // OK, only definitions are checked   }    static void incrementGLOBAL() { // violation, at most 4 consecutive capital letters allowed     GLOBAL_COUNTER++; // OK, only definitions are checked   }  }  D:\checkstyletest>set RUN_LOCALE=""-Duser.language=en -Duser.country=US""   D:\checkstyletest>java -jar ""-Duser.language=en -Duser.country=US"" checkstyle-8.31-all.jar -c config.xml test\*.java  Starting audit... [ERROR] D:\checkstyletest\test\Test.java:2:7: Abbreviation in name 'CURRENT_COUNTER' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] D:\checkstyletest\test\Test.java:3:14: Abbreviation in name 'GLOBAL_COUNTER' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] D:\checkstyletest\test\Test.java:7:8: Abbreviation in name 'printCOUNTER' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] D:\checkstyletest\test\Test.java:11:8: Abbreviation in name 'incrementCOUNTER' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] D:\checkstyletest\test\Test.java:15:15: Abbreviation in name 'incrementGLOBAL' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] Audit done. ```","closed","","wltan","2020-04-16T06:58:18Z","2020-04-24T17:43:23Z"
"","8105","Issue #5148: Add MissingJavadocType to google_checks.xml","Fix #5148  I added the following check to the Google Style config: ```xml                                                          ``` Google Style rule for reference: https://google.github.io/styleguide/javaguide.html#s7.3-javadoc-where-required Check documentation for reference: https://checkstyle.org/config_javadoc.html#MissingJavadocType  Some justifications for the properties used: - `scope` - Default is already `public` but the rule specifically says ""public class"" so I thought it'd be best to explicitly state that. - `skipAnnotations` - For **classes**, there is no such rule for exception by annotation. [Rule 7.3.2](https://google.github.io/styleguide/javaguide.html#s7.3.2-javadoc-exception-overrides) does not apply here as it is only for methods. - `tokens` - Only classes are affected by this rule. It is not necessary to check other tokens.","closed","","wltan","2020-04-15T12:31:28Z","2020-11-13T21:07:56Z"
"","8078","Support user list of annotations which should be verified by AnnotationOnSameLineCheck","Documentation: https://checkstyle.sourceforge.io/config_annotation.html#AnnotationOnSameLine  -------------- ## Proposal  I propose to add an additional property to the AnnotationOnSameLine check, so the check will be able to verify only specific annotations from the configured user list. Please, see the examples below.  -------------- ## Current State   #### /tmp/UserMessage.java ``` public class UserMessage extends Message {     @Deprecated // violation     @Nullable @Override public List names() { //ok         return null;     } } ```  #### /tmp/checkstyle.xml ```                       ```  #### Report ``` maxmuz@EUY-MMW-0008833 /tmp % java -Duser.language=en -cp checkstyle-8.31-all.jar com.puppycrawl.tools.checkstyle.Main -c /tmp/checkstyle.xml /tmp/UserMessage.java Starting audit... [ERROR] /tmp/UserMessage.java:6:5: Annotation 'Deprecated' should be on the same line with its target. [AnnotationOnSameLine] Audit done. Checkstyle ends with 1 errors. ```  ## Expected State   #### /tmp/UserMessage.java ``` public class UserMessage extends Message {     @Deprecated // ok     @Nullable @Override public List names() { //ok         return null;     } } ```  #### /tmp/checkstyle.xml ```                                               ```  #### Report ``` maxmuz@EUY-MMW-0008833 /tmp % java -Duser.language=en -cp checkstyle-8.31-all.jar com.puppycrawl.tools.checkstyle.Main -c /tmp/checkstyle.xml /tmp/UserMessage.java Starting audit... Audit done. ```","closed","","Mmuzaf","2020-04-12T13:50:02Z","2020-08-05T14:45:57Z"
"","8181","Remove cli options -C and -W","Discussion at https://github.com/checkstyle/checkstyle/pull/8035#discussion_r410905300","closed","approved,","gaurabdg","2020-04-24T15:09:12Z","2020-04-25T15:16:54Z"
"","8945","Checkstyle fails on nested type parameters","Discovered at #8920 :  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 NestedTypes.java                                    ➜  src cat NestedTypes.java  import java.lang.annotation.*;  class Outer {     class Inner {         class Inner2 {         }     }      class GInner {         class GInner2 {}     }      static class Static {}     static class GStatic {         static class GStatic2 {}     } }  class Test1 {     @A Outer . @B GInner.@G GInner2 @J[] @K[] f4arrtop; }   class MyList { }   @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface A { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface B { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface C { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface D { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface E { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface F { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface G { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface H { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface I { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface J { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface K { } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.37-SNAPSHOT-all.jar -t NestedTypes.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: IllegalStateException occurred while parsing file /home/nick/Desktop/enhanced-switch/src/NestedTypes.java.         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120)         at com.puppycrawl.tools.checkstyle.JavaParser.parseFileText(JavaParser.java:137)         at com.puppycrawl.tools.checkstyle.JavaParser.parseFile(JavaParser.java:157)         at com.puppycrawl.tools.checkstyle.AstTreeStringPrinter.printFileAst(AstTreeStringPrinter.java:65)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:284)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.IllegalStateException:  areLtsAndGtsBalanced(currentLtLevel)         at com.puppycrawl.tools.checkstyle.JavaParser$1.reportError(JavaParser.java:108)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:424)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:212)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114)         ... 6 more Caused by:  areLtsAndGtsBalanced(currentLtLevel)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeArguments(GeneratedJavaRecognizer.java:1374)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classOrInterfaceType(GeneratedJavaRecognizer.java:1148)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classTypeSpec(GeneratedJavaRecognizer.java:887)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeArgument(GeneratedJavaRecognizer.java:1415)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeArguments(GeneratedJavaRecognizer.java:1326)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classOrInterfaceType(GeneratedJavaRecognizer.java:1148)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classTypeSpec(GeneratedJavaRecognizer.java:887)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeSpec(GeneratedJavaRecognizer.java:849)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3119)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:3415)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:646)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:561)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:402)         ... 8 more Checkstyle ends with 1 errors.  ``` I would expect Checkstyle to be able to parse this code.","closed","antlr,","nick-mancuso","2020-10-30T19:31:15Z","2021-08-12T06:44:54Z"
"","8496","Add comment to notify user about failure in diff report generation pipeline","Diff report generation pipeline is not posting any comments in case it is failed during execution for some reason. It should add comment with comment like ""Diff report job has failed"" and link to job.","closed","miscellaneous,","strkkk","2020-07-16T12:48:10Z","2020-07-17T14:26:29Z"
"","8833","For generating regression report and not for merging","Diff Regression config: https://gist.githubusercontent.com/developerhb/2ec7d4b5183dfeddd266be7a62aa3542/raw/e6d79a0407122a2798da3a0515fca3782b62e995/my_check.xml Diff Regression projects: https://gist.githubusercontent.com/developerhb/2ec7d4b5183dfeddd266be7a62aa3542/raw/e6d79a0407122a2798da3a0515fca3782b62e995/projects-to-test-on.properties","closed","","developerhb","2020-09-17T02:33:50Z","2020-09-17T04:16:47Z"
"","8256","Checkstyle verification in printed as WARNING during build","detected: ``` $ mvn compile antrun:run@ant-phase-verify ..... [INFO] --- maven-antrun-plugin:3.0.0:run (ant-phase-verify) @ checkstyle --- [INFO] Executing tasks [WARNING]      [echo] Checkstyle started (checkstyle_checks.xml): 26/05/2020 06:50:26 AM [INFO] [checkstyle] Running Checkstyle  on 1154 files [WARNING]      [echo] Checkstyle finished (checkstyle_checks.xml) : 26/05/2020 06:50:28 AM [WARNING]      [echo] Checkstyle started (checkstyle_non_main_files_checks.xml): 26/05/2020 06:50:26 AM [INFO] [checkstyle] Running Checkstyle  on 2142 files [WARNING]      [echo] Checkstyle finished (checkstyle_non_main_files_checks.xml): 26/05/2020 06:50:28 AM [WARNING]      [echo] Checkstyle started (checkstyle_resources_checks.xml): 26/05/2020 06:50:26 AM [INFO] [checkstyle] Running Checkstyle  on 1848 files [WARNING]      [echo] Checkstyle finished (checkstyle_resources_checks.xml): 26/05/2020 06:50:28 AM [INFO] Executed tasks ```  expected: ``` $ mvn compile antrun:run@ant-phase-verify ..... [INFO] --- maven-antrun-plugin:3.0.0:run (ant-phase-verify) @ checkstyle --- [INFO] Executing tasks [INFO]      [echo] Checkstyle started (checkstyle_checks.xml): 26/05/2020 06:54:17 AM [INFO] [checkstyle] Running Checkstyle  on 1154 files [INFO]      [echo] Checkstyle finished (checkstyle_checks.xml) : 26/05/2020 06:54:18 AM [INFO]      [echo] Checkstyle started (checkstyle_non_main_files_checks.xml): 26/05/2020 06:54:17 AM [INFO] [checkstyle] Running Checkstyle  on 2142 files [INFO]      [echo] Checkstyle finished (checkstyle_non_main_files_checks.xml): 26/05/2020 06:54:18 AM [INFO]      [echo]      [INFO]      [echo] Checkstyle started (checkstyle_resources_checks.xml): 26/05/2020 06:54:17 AM [INFO] [checkstyle] Running Checkstyle  on 1848 files [INFO]      [echo] Checkstyle finished (checkstyle_resources_checks.xml): 26/05/2020 06:54:18 AM [INFO] Executed tasks  ```  https://ant.apache.org/manual/Tasks/echo.html","closed","miscellaneous,","romani","2020-05-26T14:02:29Z","2020-05-26T15:37:38Z"
"","8251","minor: fix links to files in 'travis.sh verify-no-exception-configs'","detected during build failure for https://github.com/checkstyle/checkstyle/commit/eda60ea5b8579abe0babc42435b078b4bc2be67e in master branch.","closed","","romani","2020-05-24T00:12:14Z","2020-11-07T15:59:25Z"
"","8961","investigate why zero indentation for source tags are not required","detected at https://github.com/checkstyle/checkstyle/pull/8958  some `source` blocks are not required to be indented to 0 position to be rendered without indentation. https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui https://github.com/checkstyle/checkstyle/blob/3fc9dd98ad6ed963e2cfcd2e630f7031ec5b0c1e/src/xdocs/writingchecks.xml#L191-L201  but in Checks examples we do not  use DIV. Not clear why ....","open","approved,","romani","2020-11-04T15:23:44Z","2020-11-06T20:39:10Z"
"","8886","Validate sure that all Regexp modules has id property","Detected at https://github.com/checkstyle/checkstyle/pull/8878#discussion_r499356249  All Regexp Checks that we have: https://checkstyle.org/config_regexp.html  We need to make some validation to catch that if Regexp.* module is used it should have ""id"" property. ```","closed","CI,","romani","2020-10-10T14:10:31Z","2021-05-23T17:56:16Z"
"","8790","All Regexp Checks that has few instances should have id property","detected at https://github.com/checkstyle/checkstyle/pull/8783#discussion_r483652466 to make suppression easier and more granular.","closed","easy,","romani","2020-09-05T15:36:14Z","2020-10-11T20:49:43Z"
"","8121","remove SuppressWarningsHolder from CheckUtil.getCheckstyleChecks","detected at https://github.com/checkstyle/checkstyle/pull/7931#discussion_r410255047 and after this PR is merged and #7848 is closed.  we need to remove from CheckUtil.getCheckstyleChecks module SuppressWarningsHolder as it does not report any violation any more, so it is not a Check.","closed","","romani","2020-04-18T14:00:37Z","2020-04-21T12:18:11Z"
"","8894","Exception at InputCyclomaticComplexityRecords.java","Detected at  https://github.com/checkstyle/contribution/blob/529fc836f88e0f88148ab7760a5ec7ba4d100715/checkstyle-tester/projects-for-travis.properties#L9  Todo: report issue properly","closed","","romani","2020-10-12T17:10:05Z","2020-10-13T05:08:58Z"
"","8801","Support for all Token Types as a Property Type for Module Metadata","Details - https://github.com/checkstyle/sonar-checkstyle/pull/330#issuecomment-687815207","closed","approved,","gaurabdg","2020-09-07T15:01:06Z","2020-09-09T23:00:49Z"
"","8785","Set tokenTypesSet as validationType for non base token properties","Details - https://github.com/checkstyle/sonar-checkstyle/issues/328#issuecomment-687168837","closed","approved,","gaurabdg","2020-09-04T22:27:40Z","2020-09-05T16:40:04Z"
"","8547","minor: changes in diff report yml","del","closed","","strkkk","2020-07-23T14:05:20Z","2020-07-23T14:46:58Z"
"","8968","Add FileContents to AuditEvent","Currently, `FileContents` is created in each `AbstractFileSetCheck` descendant. This is redundant, since the file should not change and the result is always the same. This should be done once in the `Checker.processFiles` method. By doing this, we not only speed up the process, but also provide access to the file contents for `AuditListeners`.  _Originally posted by @pbludov in https://github.com/checkstyle/checkstyle/issues/8807#issuecomment-723415882_","open","discussion ongoing,","pbludov","2020-11-07T08:07:53Z","2020-11-07T13:18:23Z"
"","8827","Diff Report should be generated against main checkstyle's master branch","Currently diff report is generated against contributor's master branch which is error prone and may lead to unintentional diff reports. Diff report should be generated against main checkstyle branch instead.","closed","miscellaneous,","Abhishek-kumar09","2020-09-13T11:12:41Z","2020-09-19T14:51:40Z"
"","8955","minor: fix check name in javadoc","Copy-paste leftover","closed","","strkkk","2020-11-02T08:56:22Z","2020-11-02T11:52:05Z"
"","8571","minor: introduction of validationType in javadocs","Contains the remaining modfications of introduction of `validationType`, and changing `int[]` to `String[]` for tokens","closed","","gaurabdg","2020-07-28T13:41:09Z","2020-07-29T04:13:26Z"
"","8984","Fix EmptyLineSeparator for multiple single type variables on line","Closes #8957  Diff Regression projects: https://gist.githubusercontent.com/strkkk/5eb3b0069ecd438af73bf045c24a855c/raw/d568ee6c30a91e3f721c37b4883ef3264b6203b7/all-projects Diff Regression config: https://gist.githubusercontent.com/strkkk/bf10f326cacdf50f8cb67f0023cd972b/raw/0dffdf53db3b7cfd7f57c88618fe871f4f779adf/lambda_body.xml","closed","","strkkk","2020-11-13T11:36:31Z","2020-11-17T19:03:11Z"
"","8995","Issue #8941: fix metadata generation for wrapped default values","Closes #8941   As you see in diff, there were other similar issues for other checks","closed","","strkkk","2020-11-18T09:48:25Z","2020-11-19T06:42:21Z"
"","8926","Issue #8925: fix anchor links for front page subsections","Closes #8925  Subsections were missing their ids, so js code to take link name was returning undefined","closed","","strkkk","2020-10-26T10:06:56Z","2020-10-26T14:40:50Z"
"","8893","Issue #8889: fix NonEmptyAtclauseDescriptionCheck for empty descriptions","Closes #8889   Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/strkkk/a6e04b73158d1ef6f563dd5aab753361/raw/c89894fe9b9c5bd8a3ddc7c17023340806449941/constant_name","closed","hacktoberfest-accepted,","strkkk","2020-10-11T16:18:41Z","2020-10-12T18:10:47Z"
"","8892","Issue #8879: fix local variable detection in resource node","Closes #8879   Issue is in common method for local variable definition detection, thus several checks are affected.  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/strkkk/ac73db2366737f5a2d9ac0b3a39e81fa/raw/88d42f4621b0802ae77b8bc50e20d437afa5b763/8879.xml  Reg report (checks that invoke this method directly or via isClassDeclarationDef method) https://checkstyle-diff-reports.s3.us-east-2.amazonaws.com/8879_local_variable_false_positive_2020151659/reports/diff/index.html  It shows that some other false positives have been fixed and also one NPE","closed","hacktoberfest-accepted,","strkkk","2020-10-11T14:06:23Z","2021-01-29T11:44:09Z"
"","8899","Issue #8876: add github action to generate site","Closes #8876   Triggered by adding comment `GitHub, generate web site` or `GitHub, generate site` to pull request, as other actions Job takes ~4 minutes to run.  Example PR: https://github.com/strkkk/checkstyle/pull/10","closed","hacktoberfest-accepted,","strkkk","2020-10-14T10:57:53Z","2021-01-29T11:44:11Z"
"","8828","Issue #8827: Diff Report should be generated against main checkstyle's branch","Closes #8827   Preview: https://abhishek-kumar09.github.io/github-actions-report-fetch/ ![image](https://user-images.githubusercontent.com/48255244/93016675-ab154a00-f5e0-11ea-90d6-6934a84cb865.png) Commit in my repo: https://github.com/Abhishek-kumar09/checkstyle/commit/0b14959611d0fb1f89fe7ae3308b9efeafa87f72 My repo's diff.yaml file: https://github.com/Abhishek-kumar09/checkstyle/blob/0b14959611d0fb1f89fe7ae3308b9efeafa87f72/.github/workflows/diff_report.yml github-actions Run: https://github.com/Abhishek-kumar09/checkstyle/actions/runs/252306649","closed","","Abhishek-kumar09","2020-09-13T11:20:31Z","2020-09-19T16:30:12Z"
"","8826","Issue #8725: Supress Comments checking for Input files of Indentation","Closes #8725  Supress comments checking for all input files of indentation. https://github.com/checkstyle/checkstyle/issues/8725#issuecomment-691500398","closed","","Abhishek-kumar09","2020-09-12T20:25:53Z","2020-09-13T05:19:19Z"
"","8549","Issue #8539: change diff trigger","Closes #8539  Example of usages (fake config and 1 project is used, only for demo) 1. New module report https://github.com/strkkk/checkstyle/pull/5 2. Diff report https://github.com/strkkk/checkstyle/pull/4 3. Diff report with different patch config https://github.com/strkkk/checkstyle/pull/6  PR for doc update  https://github.com/checkstyle/contribution/pull/497","closed","","strkkk","2020-07-23T14:49:29Z","2020-07-25T14:09:21Z"
"","8896","Issue #8341: add LambdaBodyLengthCheck","Closes #8341   ~~Depends on https://github.com/checkstyle/checkstyle/pull/8897~~  it is new module, so all mentors need to review.  Contrib PR: https://github.com/checkstyle/contribution/pull/512  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties New module config: https://gist.githubusercontent.com/strkkk/bf10f326cacdf50f8cb67f0023cd972b/raw/c9710499bd4d853d8d56b71aa55c10f8ab33a56e/lambda_body.xml","closed","hacktoberfest-accepted,","strkkk","2020-10-13T14:00:34Z","2020-11-14T15:21:00Z"
"","8007","Issue #8005: config_naming has inconsistent tag usage","Closes #8005: config_naming has inconsistent tag usage Generated site: https://shashwat70.github.io//site/config_naming.html","closed","","shashwatj07","2020-04-01T07:10:42Z","2020-04-03T13:21:22Z"
"","8719","Issue #3342: Indentation: Lambda re-implementation","Closes #3342, Covers all the cases described in the discussion thread under #3342,  Diff Regression projects: https://gist.githubusercontent.com/Abhishek-kumar09/717190a7e2e06f4747b9c622692d4b99/raw/e14c56fbb6ca5f77b5bd20da1c9e51f0a99284ee/projects-to-test-on.properties Diff Regression config: https://gist.githubusercontent.com/Abhishek-kumar09/59f7adaffb4eefc379dd29c23227091b/raw/d156d4bc542f4a342be8fe4cccb1dd0e138a4f61/config.xml","closed","","Abhishek-kumar09","2020-08-19T21:00:34Z","2020-09-26T02:39:53Z"
"","8771","Improve code coverage for metadata generator classes","Classes present in https://github.com/checkstyle/checkstyle/tree/master/src/main/java/com/puppycrawl/tools/checkstyle/meta  100% code coverage is required  TODO:  - [x] Initialize and setup UT backbone for JavadocScraper - [ ] Line Cov - 1.00 | Current: 0.98 - [ ] Branch Cov - 1.00 | Current: 0.88","open","miscellaneous,","gaurabdg","2020-08-28T21:37:28Z","2020-09-05T10:05:13Z"
"","8772","Improve pitest coverage for metadata generator classes","Classes present in https://github.com/checkstyle/checkstyle/tree/master/src/main/java/com/puppycrawl/tools/checkstyle/meta","open","","gaurabdg","2020-08-28T21:38:01Z","2020-08-28T21:38:01Z"
"","8664","NeedBracesCheck throws a NPE when parsing switch expression syntax","Child of https://github.com/checkstyle/checkstyle/issues/8658 Check documentation: https://checkstyle.sourceforge.io/config_blocks.html#NeedBraces  _Checks for braces around code blocks._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java ➜  src cat config.xml                                                                                                                                                              ➜  src cat TestClass.java                                                                                                interface MathOperation2 {     int operation(int a, int b); }  public class TestClass {     MathOperation2 tooManyParens(int k) {         return switch (k) {             case 1 -> {                 MathOperation2 case5 = (a, b) ->                         (a + b); // should be violation                 yield case5;             }             case (2) -> { // should be violation                 MathOperation2 case6 = (int a, int b) ->                         (a + b); // should be violation                 yield case6;             }             case 3 -> {                 MathOperation2 case7 = (int a, int b) -> { // ok                     return (a + b);                 };                 yield (case7);             }             case 4 -> {                 Runnable r3 = () -> // should be violation                         String.CASE_INSENSITIVE_ORDER.equals(""Hello world two!"");                 MathOperation2 case10 = (int x, int y) -> { // ok                     return (x + y);                 };                 yield case10;            }             default -> {                 MathOperation2 case8 = (int x, int y) -> { // ok                     return (x + y);                 };                 yield case8;             }         };       } }   ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.getLastLambdaToken(NeedBracesCheck.java:474)         at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.isSingleLineLambda(NeedBracesCheck.java:460)         at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.isSingleLineStatement(NeedBracesCheck.java:344)         at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.isSkipStatement(NeedBracesCheck.java:308)         at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.visitToken(NeedBracesCheck.java:236)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Checkstyle ends with 1 errors.  ``` I would expect the above violations, and would not expect this check to produce a NPE.  We need to update this check.","closed","approved,","nick-mancuso","2020-08-11T20:10:31Z","2020-08-16T16:49:40Z"
"","8687","Java 14 SwitchExpression Check Support validation: WhitespaceAroundCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_whitespace.html#WhitespaceAround  _Checks that a token is surrounded by whitespace._  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                         ➜  src cat TestClass.java  public class TestClass {      int howMany1(int k) {         int x = 2;         int number = 42;         boolean bool = false;         switch (k) {             case 1:                 int y= (2); // violation                 break;             case 2:{ // violation                 int otherNumber = 42;                 int z = x + 2;                 x = z;                 break;             }             case (3 ):{ // violation                 if(bool = true) { // violation                 }                 int a = x + 3;                 x = a;                 break;             }             default:                 int b = 4;                 x = b;         }         return x;     }      int howMany2(int k) {         int x = 2;         int number = 42;         boolean bool = false;         return switch (k) {             case 1 ->{ // violation x2                 int y= (2); // violation                 yield y;             }             case ( 2) ->{ // violation x2                 int otherNumber = 42;                 int z = ( x + 2);                  yield ( otherNumber);              }             case (3 ) ->{ // violation x2                 if(bool = true ) { // violation                 }                 int a = x + 3;                 x = a;                 yield a;             }             default -> {                 int b = (2 );                  yield b;             }         };     }      int howMany3(int x) {         int inner = 8;         boolean bool = false;         return switch (x) {             case 1:                 int y= (2); // violation                 yield y;             case 2:{ // violation                 int otherNumber = 42;                 int z = inner = x + 2;                 x = z;                 yield (otherNumber);             }             case (3 ): //violation                 if(bool = true ) { // violation                 }                 int a = x + 3;                 x = a;                 yield a;             default:                 int b = (2 );                  yield b;         };     }  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:9:22: '=' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:11:20: '{' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:17:23: '{' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:18:17: 'if' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:36:20: '->' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:36:22: '{' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:37:22: '=' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:40:23: '->' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:40:25: '{' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:45:23: '->' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:45:25: '{' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:46:17: 'if' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:64:22: '=' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:66:20: '{' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:73:17: 'if' is not followed by whitespace. [WhitespaceAround] Audit done. Checkstyle ends with 15 errors.   ``` This check works as intended, so I think that we can close this issue.  The switch rule with a LAMBDA should count as two, since unlike the COLON in a regular switch, it should have whitespace around it.","closed","","nick-mancuso","2020-08-12T19:19:09Z","2020-08-13T10:32:48Z"
"","8686","Java 14 SwitchExpression Check Support validation: ParenPadCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_whitespace.html#ParenPad  _Checks the policy on the padding of parentheses; that is whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden. No check occurs at the right parenthesis after an empty for iterator, at the left parenthesis before an empty for initialization, or at the right parenthesis of a try-with-resources resource specification where the last resource variable has a trailing semi-colon._  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java ➜  src cat config.xml                                                                                                                           ➜  src cat TestClass.java                                                                                                public class TestClass {      int howMany1(int k) {         int x = 2;         int number = 42;          boolean bool = false;         switch (k) {             case 1:                 int y = (2);                 break;             case 2:                 int otherNumber = 42;                  int z = ( x + 2); // violation                 x = z;                 break;             case (3 ): // violation                 if (bool = true ) { // violation                 }                 int a = x + 3;                  x = a;                 break;             default:                 int b = 4;                 x = b;         }         return x;     }      int howMany2(int k) {         int x = 2;         int number = 42;          boolean bool = false;         return switch (k) {             case 1 -> {                 int y = (2);                 yield y;             }             case ( 2) -> { // violation                 int otherNumber = 42;                  int z = ( x + 2); // violation                 yield ( otherNumber); // violation             }             case (3 ) -> { // violation                 if (bool = true ) { // violation                 }                 int a = x + 3;                  x = a;                 yield a;             }             default -> {                 int b = (2 ); // violation                 yield b;             }         };     }      int howMany3(int x) {         int inner = 8;          boolean bool = false;         return switch (x) {             case 1:                 int y = (2);                 yield y;             case 2:                 int otherNumber = 42;                   int z = inner = x + 2;                 x = z;                 yield ( otherNumber); // violation             case (3 ): //violation                 if (bool = true ) { // violation                 }                 int a = x + 3;                   x = a;                 yield a;             default:                 int b = (2 ); // violation                 yield b;         };     }      I lambdaCapture2(int i) {         int j = i + 1;          return switch (i) {             case 0 -> ( ) -> ""0"" + i; // violation x2             case 1 -> ( ) -> ""1"" + j; // violation x2             default -> {                 String k = ""D"";                 yield ( ) -> k; // violation x2             }         };     }      interface I {         public T t();     }  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:13:25: '(' is followed by whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:16:21: ')' is preceded with whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:17:33: ')' is preceded with whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:38:18: '(' is followed by whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:40:25: '(' is followed by whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:41:23: '(' is followed by whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:43:21: ')' is preceded with whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:44:33: ')' is preceded with whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:51:28: ')' is preceded with whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:68:23: '(' is followed by whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:69:21: ')' is preceded with whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:70:33: ')' is preceded with whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:76:28: ')' is preceded with whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:85:23: '(' is followed by whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:85:25: ')' is preceded with whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:86:23: '(' is followed by whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:86:25: ')' is preceded with whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:89:23: '(' is followed by whitespace. [ParenPad] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:89:25: ')' is preceded with whitespace. [ParenPad] Audit done. Checkstyle ends with 19 errors.   ``` This check works as intended, and has no issue with lambda parameters, so I think that we can close this issue.","closed","","nick-mancuso","2020-08-12T19:00:15Z","2020-08-13T10:17:10Z"
"","8685","Java 14 SwitchExpression Check Support validation: OperatorWrapCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_whitespace.html#OperatorWrap  _Checks the policy on how to wrap lines on operators._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                                                              ➜  src cat TestClass.java                                                                                                public class TestClass {      public int myIntMethod() {         int a = 4;         int b = 7;         b                 += 10; // violation         a += // ok                 11;         return a + b;     }       boolean method1(Nums k) {         switch (k) {             case ONE:                 int a = 4;                 int b = 7;                 b                         += 10; // violation                 a += // ok                         11;                  if (k                        ==  Nums.ONE) { // violation                     //do stuff                 }                  break;             default: return true;         }         return false;     }      boolean method2(Nums k) {          switch (k) {             case ONE -> {                 int a = 4;                 int b = 7;                 b                         += 10; // violation                 a += // ok                         11;                 if (k                        == Nums.ONE) { // violation                     //do stuff                 }             }              default -> { return false; }         }         return true;     }      boolean method3(Nums k) {          return switch (k) {             case ONE:                 int a = 4;                 int b = 7;                 b                         += 10; // violation                 a += // ok                         11;                 if (k                         == Nums.ONE) { // violation                     //do stuff                 }                 yield a                         + b // violation                         == // violation                         4;              default: yield false;         };     }      boolean method4(Nums k) {          return switch (k) {             case ONE -> {                 int a = 4;                 int b = 7;                 b                         += 10; // violation                 a += // ok                         11;                 if (k ==                         Nums.ONE) { // violation                     //do stuff                 }                 yield a                         + b // violation                         == // violation                         4;             }             default -> { yield false; }         };     }       enum Nums {ONE, TWO, THREE}  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:7:17: '+=' should be on the previous line. [OperatorWrap] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:20:25: '+=' should be on the previous line. [OperatorWrap] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:25:24: '==' should be on the previous line. [OperatorWrap] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:41:25: '+=' should be on the previous line. [OperatorWrap] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:45:24: '==' should be on the previous line. [OperatorWrap] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:61:25: '+=' should be on the previous line. [OperatorWrap] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:65:25: '==' should be on the previous line. [OperatorWrap] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:69:25: '+' should be on the previous line. [OperatorWrap] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:70:25: '==' should be on the previous line. [OperatorWrap] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:83:25: '+=' should be on the previous line. [OperatorWrap] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:91:25: '+' should be on the previous line. [OperatorWrap] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:92:25: '==' should be on the previous line. [OperatorWrap] Audit done. Checkstyle ends with 12 errors.  ```  This check works as intended, so I think that we can close this issue.  The reason that it came up in our search for affected checks is that it checks the parent of the COLON token, and we have not changed that.","closed","","nick-mancuso","2020-08-12T18:39:25Z","2020-08-13T10:32:18Z"
"","8684","Java 14 SwitchExpression Check Support validation: ParameterNameCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#ParameterName  _Checks that method parameter names conform to a specified pattern. By using accessModifiers property it is possible to specify different formats for methods at different visibility levels._   ```  ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java ➜  src cat config.xml                                                                                                                           ➜  src cat TestClass.java                                                                                                import java.util.stream.Stream;  public class TestClass {      boolean method1(Nums k, String STRING) { // violation         switch (k) {             case ONE:                 Stream.of(STRING.split("" ""))                         .map(word -> word.trim())                         .anyMatch(Word -> ""in"".equals(Word)); // ok                 break;             default: ;         }         return false;     }      boolean method2(Nums k, String STRING) { // violation         switch (k) {             case ONE -> {                 Stream.of(STRING.split("" ""))                         .map(word -> word.trim())                         .anyMatch(Word -> ""in"".equals(Word)); // ok                 System.out.println(""case one"");             }             default -> Stream.of(STRING.split("" ""))                     .map(word -> word.trim())                     .anyMatch(Word -> ""in"".equals(Word)); // ok         }         return true;     }      boolean method3(Nums k, String STRING) { // violation         return switch (k) {             case ONE:                 yield Stream.of(STRING.split("" ""))                         .map(word -> word.trim())                         .anyMatch(Word -> ""in"".equals(Word)); // ok             default: yield false;         };     }      boolean method4(Nums k, String STRING) { // violation         return switch (k) {             case ONE -> {                 yield Stream.of(STRING.split("" ""))                         .map(word -> word.trim())                         .anyMatch(Word -> ""in"".equals(Word)); // ok             }             default -> { yield false; }         };     }       enum Nums {ONE, TWO, THREE}  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:5:36: Name 'STRING' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:17:36: Name 'STRING' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:32:36: Name 'STRING' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:42:36: Name 'STRING' must match pattern '^[a-z][a-zA-Z0-9]*$'. [ParameterName] Audit done. Checkstyle ends with 4 errors.  ```  This check works as intended, and isn't affected by the usage of the LAMBDA token in the switch rule, so I think we can close this one.  The reason that this check showed up in the search for affected checks is that it checks to make sure the ancestor of the parameter is not a LAMBDA.  I think that we can close this issue.","closed","","nick-mancuso","2020-08-12T18:18:12Z","2020-08-13T10:30:58Z"
"","8683","LambdaParameterNameCheck throws NPE when parsing switch expressions","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#LambdaParameterName  _Checks lambda parameter names._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java ➜  src cat config.xml                                                                                            ➜  src cat TestClass.java                                                                 import java.util.stream.Stream;  public class TestClass {      boolean method1(Nums k, String string) {          switch (k) {             case ONE:                 Stream.of(string.split("" ""))                         .map(word -> word.trim())                          .anyMatch(Word -> ""in"".equals(Word)); // violation                 break;             default: ;         }         return false;     }      boolean method2(Nums k, String string) {          switch (k) {             case ONE -> {                 Stream.of(string.split("" ""))                         .map(word -> word.trim())                         .anyMatch(Word -> ""in"".equals(Word)); // violation                 System.out.println(""case one"");             }             default -> Stream.of(string.split("" ""))                     .map(word -> word.trim())                     .anyMatch(Word -> ""in"".equals(Word)); // violation         }         return true;     }      boolean method3(Nums k, String string) {         return switch (k) {             case ONE:                 yield Stream.of(string.split("" ""))                         .map(word -> word.trim())                          .anyMatch(Word -> ""in"".equals(Word)); // violation             default: yield false;         };     }      boolean method4(Nums k, String string) {         return switch (k) {             case ONE -> {                 yield Stream.of(string.split("" ""))                         .map(word -> word.trim())                         .anyMatch(Word -> ""in"".equals(Word)); // violation             }             default -> { yield false; }         };     }       enum Nums {ONE, TWO, THREE}  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.visitToken(AbstractNameCheck.java:78)         at com.puppycrawl.tools.checkstyle.checks.naming.LambdaParameterNameCheck.visitToken(LambdaParameterNameCheck.java:117)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Checkstyle ends with 1 errors.  ```  This check should not throw a NPE when parsing this code, we need to update this check.","closed","approved,","nick-mancuso","2020-08-12T18:00:30Z","2020-08-21T14:03:18Z"
"","8682","Java 14 SwitchExpression Check Support validation: InterfaceMemberImpliedModifierCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_modifier.html#InterfaceMemberImpliedModifier  _Checks for implicit modifiers on interface members and nested types._  ``` ➜  src cat TestClass.java                                                                 public class TestClass {     void howMany1(Nums k) { // violation         switch (k) {             case ONE -> {                 System.out.println(""case two"");                 interface innerInterface {}             }             default ->                 throw new IllegalStateException(""Not a nums"");         }     }      enum Nums {ONE, TWO, THREE}  }%                                                                                                                                     ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java TestClass.java:6: error: interface not allowed here                 interface innerInterface {}                 ^ 1 error   ``` Interface definitions are not allowed within the body of a switch rule. Also, since methods can have no implementation within an interface, switch expressions are not allowed there. This check does not apply to switch expressions, and the only reason that it appeared in the search for tokens is the fact that InterfaceMemberImpliedModifierCheck checks for the modifier `default`.   I think we can close this.","closed","","nick-mancuso","2020-08-12T17:39:34Z","2020-08-13T10:29:45Z"
"","8661","IndentationCheck throws a NPE on switch expression syntax","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_misc.html#Indentation  Checks correct indentation of Java code.  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                                                 ➜  src cat TestClass.java                                                                                                public class TestClass {      MathOperation2 tooManyParens(int k) {                     return switch (k) { // violation             case 1 -> {     MathOperation2 case5 = (a, b) -> (a + b); // should be violation                             yield case5; // should be violation             } case (2) -> { // should be violation MathOperation2 case6 = (int a, int b) -> (a + b); // should be violation                 yield case6;             }             case 3 -> {                 MathOperation2 case7 = (int a, int b) -> {     return (a + b); // should be violation                 };     yield (case7); // should be violation             }             default -> {                 MathOperation2 case8 = (int x, int y) -> {     return (x + y); // should be violation                 };                 yield case8;             }         };     }      interface MathOperation2 {         int operation(int a, int b);     }  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getLineStart(AbstractExpressionHandler.java:210)         at com.puppycrawl.tools.checkstyle.checks.indentation.LambdaHandler.checkIndentation(LambdaHandler.java:81)         at com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.visitToken(IndentationCheck.java:534)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Checkstyle ends with 1 errors.  ``` I would expect this code to be parsed by checkstyle and not throw a NPE.","closed","approved,","nick-mancuso","2020-08-11T19:12:02Z","2020-08-16T15:47:24Z"
"","8691","Java 14 SwitchExpression Check Support validation: Indentation","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_misc.html#Indentation  _Checks correct indentation of Java code._  This output was produced from the code in https://github.com/checkstyle/checkstyle/pull/8690 and it subject to change, but it is important that we document it so that we can revisit it later.  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                           ➜  src cat TestClass.java                                                                                                public class TestClass {     public int method(int k){         return switch (k)  {             case 1 -> {                 yield 2;             }             case 2 -> { yield 3; // should be a violation             }             default -> {                 yield 6;             }         };     } } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.  ``` We would expect a warning on line 8, but there is none.  We may need to introduce a new handler, `YieldHandler`, or add support to `SlistHandler`.","closed","indentation,","nick-mancuso","2020-08-13T15:44:08Z","2020-08-25T04:28:51Z"
"","8677","Java 14 SwitchExpression Check Support validation: CommentsIndentationCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_misc.html#CommentsIndentation  Controls the indentation between comments and surrounding code. Comments are indented at the same level as the surrounding code. Detailed info about such convention can be found here  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                           ➜  src cat TestClass.java                                                                                                public class TestClass {     private int a;     private int b;      public boolean equals1(Object obj) {         int i = 1;         switch (i) {                     /* violation                      *                      */             case 1:                 int count;                 a = a + b;                 b = a + a;                 count = b;                     // violation                 break;             case 2:             case 3:             case 4:             case 5:             case 6:         }         return false;     }      public boolean equals2(Object obj) {         int i = 1;         switch (i) {                     /* violation                      *                      */             case 1 -> {                 int count;                 a = a + b;                 b = a + a;                 count = b;                     //violation             }         }         return false;     } }  ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:8:21: Block comment has incorrect indentation level 20, expected is 12, indentation should be the same level as line 11. [CommentsIndentation] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:16:21: Comment has incorrect indentation level 20, expected is 16, indentation should be the same level as line 17. [CommentsIndentation] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:30:21: Block comment has incorrect indentation level 20, expected is 8, 12, indentation should be the same level as line 29, 33. [CommentsIndentation] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:38:21: Comment has incorrect indentation level 20, expected is 16, indentation should be the same level as line 37. [CommentsIndentation] Audit done. Checkstyle ends with 4 errors.  ```  This check works as intended, so I think that we can close this one.","closed","","nick-mancuso","2020-08-12T15:08:17Z","2020-08-12T19:02:31Z"
"","8681","Java 14 SwitchExpression Check Support validation: NPathComplexityCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_metrics.html#NPathComplexity  _Checks the NPATH complexity against a specified limit._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                                                 ➜  src cat TestClass.java                                                                                                public class TestClass {      void howMany1(Nums k) { // violation         switch (k) {             case ONE: {                 System.out.println(""case two"");             }             case TWO: {                 System.out.println(""case two"");             }             case THREE: {                 System.out.println(""case three"");             }             default:                 throw new IllegalStateException(""Not a nums"");         }     }      void howMany2(Nums k) { // violation         switch (k) {             case ONE -> {                 System.out.println(""case one"");             }             case TWO -> {                 System.out.println(""case two"");             }             case THREE -> {                 System.out.println(""case three"");             }             default -> throw new IllegalStateException(""Not a nums"");         }     }      int howMany3(Nums k) { // violation         return switch (k) {             case ONE:                 yield 3;             case TWO: {                 yield 5;             }             case THREE: {                 yield 9;             }             default:                 throw new IllegalStateException(""Not a Nums"");         };     }      int howMany4(Nums k) { // violation         return switch (k) {             case ONE -> {                 yield 4;             }             case TWO -> {                 yield 42;             }             case THREE -> {                 yield 99;             }             default -> throw new IllegalStateException(""Not a Nums"");         };     }       enum Nums {ONE, TWO, THREE}  }%                                                                                                                                     ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:3:5: NPath Complexity is 4 (max allowed is 1). [NPathComplexity] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:19:5: NPath Complexity is 2 (max allowed is 1). [NPathComplexity] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:34:5: NPath Complexity is 5 (max allowed is 1). [NPathComplexity] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:49:5: NPath Complexity is 3 (max allowed is 1). [NPathComplexity] Audit done. Checkstyle ends with 4 errors.   ```  This check is not aware of the SWITCH_RULE token, so it needs to be updated.","closed","approved,","nick-mancuso","2020-08-12T17:01:53Z","2020-08-16T19:05:06Z"
"","8680","Java 14 SwitchExpression Check Support validation: JavaNCSSCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_metrics.html#JavaNCSS  `Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS). This check adheres to the specification for the JavaNCSS-Tool written by Chr. Clemens Lee.`   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java ➜  src cat config.xml                                                                                                                                                 ➜  src cat TestClass.java                                                                                                public class TestClass {      void howMany1(Nums k) { // violation         switch (k) {             case ONE: {                 System.out.println(""case one"");                 switch (k) {                     case ONE:                         System.out.println(""case one"");                     case TWO:                         System.out.println(""case two"");                     case THREE:                         System.out.println(""case three"");                         break;                     default:                         throw new IllegalStateException(""Not a nums"");                 }             }             case TWO: {                 System.out.println(""case two"");             }             case THREE: {                 System.out.println(""case three"");             }             default:                 throw new IllegalStateException(""Not a nums"");         }     }      void howMany2(Nums k) { // violation         switch (k) {             case ONE -> {                 System.out.println(""case one"");                 switch (k) {                     case ONE:                         System.out.println(""case one"");                     case TWO:                         System.out.println(""case two"");                     case THREE:                         System.out.println(""case three"");                         break;                     default:                         throw new IllegalStateException(""Not a nums"");                 }             }             case TWO -> {                 System.out.println(""case two"");             }             case THREE -> {                 System.out.println(""case three"");             }             default -> throw new IllegalStateException(""Not a nums"");         }     }      int howMany3(Nums k) { // violation         return switch (k) {             case ONE -> {                 System.out.println(""case one"");                 switch (k) {                     case ONE, TWO:                         System.out.println(""case two"");                     case THREE:                         System.out.println(""case three"");                         break;                     default:                         throw new IllegalStateException(""Not a nums"");                 }                 yield 4;             }             case TWO -> {                 System.out.println(""case two"");                 yield 42;             }             case THREE -> {                 System.out.println(""case three"");                 yield 99;             }             default -> throw new IllegalStateException(""Not a Nums"");         };     }      int howMany4(Nums k) { // violation         return switch (k) {             case ONE:                 System.out.println(""case one "");                 switch (k) {                     case ONE, TWO:                         System.out.println(""case one"");                     case THREE:                         System.out.println(""case three"");                         break;                     default:                         throw new IllegalStateException(""Not a nums"");                 }                 yield 3;             case TWO: {                 System.out.println(""case two "");                 yield 5;             }             case THREE: {                 System.out.println(""case three "");                 yield 9;             }             default: throw new IllegalStateException(""Not a Nums"");         };     }      enum Nums {ONE, TWO, THREE}  }%                                                                                                                                     ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:3:5: NCSS for this method is 20 (max allowed is 4). [JavaNCSS] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:30:5: NCSS for this method is 20 (max allowed is 4). [JavaNCSS] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:56:5: NCSS for this method is 19 (max allowed is 4). [JavaNCSS] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:83:5: NCSS for this method is 19 (max allowed is 4). [JavaNCSS] Audit done. Checkstyle ends with 4 errors.   ```  This check works as intended, so I think that we can close this one.","closed","","nick-mancuso","2020-08-12T16:40:05Z","2020-08-13T09:38:12Z"
"","8679","Java 14 SwitchExpression Check Support validation: CyclomaticComplexityCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_metrics.html#CyclomaticComplexity  _Checks cyclomatic complexity against a specified limit._  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                                                 ➜  src cat TestClass.java                                                                                                public class TestClass {      enum Nums {ONE, TWO, THREE}      int howMany1(Nums k) { // violation         switch (k) {              case ONE:                 System.out.println(""case one"");                 switch (k) {                     case ONE:                         System.out.println(""case one"");                     case TWO:                         System.out.println(""case two"");                     case THREE:                         System.out.println(""case three"");                         break;                     default:                         throw new IllegalStateException(""Not a nums"");                 }                 return 5;             case TWO:                 System.out.println(""case two"");             case THREE:                 System.out.println(""case three"");                 break;             default: throw new IllegalStateException(""Not a nums"");         }         return 5;     }      int howMany2(Nums k) { // violation         switch (k) {             case ONE -> {                 System.out.println(""case one"");                 switch (k) {                     case ONE:                         System.out.println(""case one"");                     case TWO:                         System.out.println(""case two"");                     case THREE:                         System.out.println(""case three"");                         break;                     default:                         throw new IllegalStateException(""Not a nums"");                 }                 return 5;              }             case TWO -> {                 System.out.println(""case two"");              }             case THREE -> {                 System.out.println(""case three"");              }             default -> {                 throw new IllegalStateException(""Not a nums"");             }         }         return 5;     }      int howMany3(Nums k) { // violation         return switch (k) {              case ONE -> {                 System.out.println(""case one"");                 switch (k) {                     case ONE:                         System.out.println(""case one"");                     case TWO:                         System.out.println(""case two"");                     case THREE:                         System.out.println(""case three"");                         break;                     default:                         throw new IllegalStateException(""Not a nums"");                 }                 yield 4;             }             case TWO -> {                 System.out.println(""case two"");                  yield 42;             }             case THREE -> {                 System.out.println(""case three"");                  yield 99;             }             default -> throw new IllegalStateException(""Not a Nums"");         };     }      int howMany4(Nums k) { // violation         return switch (k) {              case ONE:                 System.out.println(""case one "");                 switch (k) {                     case ONE, TWO:                         System.out.println(""case one"");                     case THREE:                         System.out.println(""case three"");                         break;                     default:                         throw new IllegalStateException(""Not a nums"");                 }                 yield 3;             case TWO:                 System.out.println(""case two "");                 yield 5;             case THREE:                 System.out.println(""case three "");                 yield 9;             default:                 throw new IllegalStateException(""Not a Nums"");         };     }  }%                                                                                                                                    ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:5:5: Cyclomatic Complexity is 7 (max allowed is 1). [CyclomaticComplexity] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:31:5: Cyclomatic Complexity is 7 (max allowed is 1). [CyclomaticComplexity] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:64:5: Cyclomatic Complexity is 7 (max allowed is 1). [CyclomaticComplexity] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:95:5: Cyclomatic Complexity is 6 (max allowed is 1). [CyclomaticComplexity] Audit done. Checkstyle ends with 4 errors.   ```  Since this check counts the `LITERAL_CASE` token , it still functions as expected. I think we can close this one.","closed","","nick-mancuso","2020-08-12T16:17:38Z","2020-08-13T09:30:39Z"
"","8678","Java 14 SwitchExpression Check Support validation: JavadocMethod","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#JavadocMethod  _Checks the Javadoc of a method or constructor. The scope to verify is specified using the Scope class and defaults to Scope.PRIVATE. To verify another scope, set property scope to a different scope._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java ➜  src cat config.xml                                                                                                                                                 ➜  src cat TestClass.java                                                                                                public class TestClass {      enum Nums {ONE, TWO, THREE}      /**      * @param k      * @throws java.io.IOException      */     int howMany1(Nums k) { // violation         switch (k) {              case ONE:             case TWO:             case THREE:                 break;             default: throw new IllegalStateException(""Not a nums""); // violation         }         return 5;     }      /**      *      * @param k      * @throws java.io.IOException      */     int howMany2(Nums k) { // violation         return switch (k) {              case ONE -> {                 yield 4;             }             case TWO -> {                 yield 42;             }             case THREE -> {                 yield 99;             }             default -> throw new IllegalStateException(""Not a Nums""); // violation         };     }      /**      * @param k      * @throws java.io.IOException      */     int howMany3(Nums k) { // violation         return switch (k) {              case ONE:                 yield 3;             case TWO:                 yield 5;             case THREE:                 yield 9;             default:                 throw new IllegalStateException(""Not a Nums""); // violation         };     }      /**      * @param k      * @throws java.io.IOException      */     int howMany4(Nums k) { // violation         int x;         switch (k) {             case ONE -> {                 x = 4;             }             case TWO -> {                 x=  42;             }             case THREE -> {                 x =  99;             }             default -> {                 throw new IllegalStateException(""Not a Nums""); // should be violation             }         }         return 5;     }      /**      * @param k      * @throws IllegalStateException      * @return some random number      */     int howMany5(Nums k) {         int x;         switch (k) {             case ONE -> {                 return 4;             }             case TWO -> {                 x = 42;             }             case THREE -> {                 x = 99;             }             default -> {                 throw new IllegalStateException(""Not a Nums""); // ok             }         }         return 5;     }  }%                                                                                                                                    ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:9: @return tag should be present and have description. [JavadocMethod] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:15:32: Expected @throws tag for 'IllegalStateException'. [JavadocMethod] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:25: @return tag should be present and have description. [JavadocMethod] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:36:34: Expected @throws tag for 'IllegalStateException'. [JavadocMethod] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:44: @return tag should be present and have description. [JavadocMethod] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:53:27: Expected @throws tag for 'IllegalStateException'. [JavadocMethod] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:61: @return tag should be present and have description. [JavadocMethod] Audit done. Checkstyle ends with 7 errors.  ```  This check needs to be updated to support switch rules.","closed","approved,","nick-mancuso","2020-08-12T15:58:31Z","2020-08-16T15:54:41Z"
"","8676","VariableDeclarationUsageDistanceCheck throws a NPE on switch expression syntax","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#VariableDeclarationUsageDistance  _Checks the distance between declaration of variable and its first usage._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                                                                           ➜  src cat TestClass.java                                                                                                public class TestClass {     private int a;     private int b;      public boolean equals1(Object obj) {         int i = 1;         switch (i) {             case 1:                 int count;                 a = a + b;                 b = a + a;                 count = b;                 break;             case 2:             case 3:             case 4:             case 5:             case 6:         }         return false;     }      public boolean equals2(Object obj) {         int i = 1;         switch (i) {             case 1 -> {                 int count;                 a = a + b;                 b = a + a;                 count = b;             }         }         return false;     } }  ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.coding.VariableDeclarationUsageDistanceCheck.getFirstNodeInsideSwitchBlock(VariableDeclarationUsageDistanceCheck.java:749)         at com.puppycrawl.tools.checkstyle.checks.coding.VariableDeclarationUsageDistanceCheck.calculateDistanceBetweenScopes(VariableDeclarationUsageDistanceCheck.java:559)         at com.puppycrawl.tools.checkstyle.checks.coding.VariableDeclarationUsageDistanceCheck.visitToken(VariableDeclarationUsageDistanceCheck.java:318)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Checkstyle ends with 1 errors.  ``` This check throws a NPE, so we need to update it.","closed","approved,","nick-mancuso","2020-08-12T14:57:40Z","2020-08-21T05:49:37Z"
"","8675","Java 14 SwitchExpression Check Support validation: ReturnCountCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#ReturnCount  _Restricts the number of return statements in methods, constructors and lambda expressions. Ignores specified methods (equals by default)._  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                                                 ➜  src cat TestClass.java                                                                                                public class TestClass {     public boolean equals1(Object obj) { // violation         int i = 1;         switch (i) {             case 1:                 return true;             case 2:                 return true;             case 3:                 return true;             case 4:                 return true;             case 5:                 return true;             case 6:                 return true;         }         return false;     }      public boolean equals2(Object obj) { // violation         int i = 1;         switch (i) {             case 1 -> {return true;}             case 2 -> {                 return true;             }             case 3 -> {                 return true;             }             case 4 -> {                 return true;             }             case 5 -> {                 return true;             }             case 6 -> {                 return true;             }         }         return false;     } }  ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:2:5: Return count is 7 (max allowed for non-void methods/lambdas is 3). [ReturnCount] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:21:5: Return count is 7 (max allowed for non-void methods/lambdas is 3). [ReturnCount] Audit done. Checkstyle ends with 2 errors.  ``` This check works as expected, so I think that we can close this issue.","closed","","nick-mancuso","2020-08-12T14:49:23Z","2020-08-12T18:38:58Z"
"","8674","Java 14 SwitchExpression Check Support validation: RequireThisCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#RequireThis  _Checks that references to instance variables and methods of the present object are explicitly of the form ""this.varName"" or ""this.methodName(args)"" and that those references don't rely on the default behavior when ""this."" is absent._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                                                 ➜  src cat TestClass.java                                                                                                public class TestClass {      enum Nums {ONE, TWO , THREE}      private int field1;     private int field2;      int howMany1(Nums k) {         switch (k) {              case ONE:                 field1 = 3; // violation                 field1 = field1; // violation x2                 break;             case TWO: case THREE:          }         return 5;     }      int howMany2(Nums k) {         return switch (k) {             case ONE -> {                 field1 = 3; // violation                 field1 = field1; // violation x2                 yield field1; // violation             }             case TWO -> { yield 42; }             case THREE -> { yield 99; }          };     }      int method1(int k) {         field1 =  switch (k) { // violation             case 1: yield 4;             case 2: yield 5;             default: yield 9;         };         return field1; // violation     }       int method2(int k) {         field1 = switch (k) { // violation             case 1 -> field1; // violation             case 2 -> {yield field1 + 2;} // violation             default -> 9;         };         return field1; // violation     }  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:11:17: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:12:17: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:12:26: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:22:17: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:23:17: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:23:26: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:24:23: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:32:9: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:37:16: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:42:9: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:43:23: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:44:30: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:47:16: Reference to instance variable 'field1' needs ""this."". [RequireThis] Audit done. Checkstyle ends with 13 errors.   ```  This check seems to work as intended, so I think we can close this one.","closed","","nick-mancuso","2020-08-12T13:47:16Z","2020-08-12T18:37:58Z"
"","8673","Java 14 SwitchExpression Check Support validation: OneStatementPerLineCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#OneStatementPerLine  _Checks that there is only one statement per line._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                           ➜  src cat TestClass.java                                                                                                public class TestClass {      enum Nums {ONE, TWO , THREE}      int howMany1(Nums k) {         switch (k) {              case ONE:                 int var1 = 1                 ;int var2 = 2; // violation                 int o = 1, p = 2,                 r = 5;int t; // violation                 break;             case TWO: case THREE: // ok         }         return 5;     }      int howMany2(Nums k) {         return switch (k) {              case ONE -> {                 int var1 = 1                 ;int var2 = 2; // violation                 int o = 1, p = 2,                 r = 5;int t;  // violation                 yield r;             }             case TWO -> { yield 42; }case THREE -> { yield 99; } // ok         };     }      int howMany3(Nums k) {         return switch (k) {             case ONE:                 int var1 = 1                 ;int var2 = 2; // violation                 int o = 1, p = 2,                 r = 5;int t;  // violation             case TWO: int x = 5; yield x; // violation             case THREE: yield 9;         };     }       int howMany4(Nums k) {         return switch (k) {             case ONE -> {                 int var1 = 1                 ;int var2 = 2; // violation                 int o = 1, p = 2,                 r = 5;int t;  // violation                 yield o;             }             case TWO -> {                 int x = 5; yield x; // violation             }             case THREE -> {                 yield 99;             }             default -> {yield 2;}         };     }  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:9:30: Only one statement per line allowed. [OneStatementPerLine] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:11:28: Only one statement per line allowed. [OneStatementPerLine] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:22:30: Only one statement per line allowed. [OneStatementPerLine] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:24:28: Only one statement per line allowed. [OneStatementPerLine] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:35:30: Only one statement per line allowed. [OneStatementPerLine] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:37:28: Only one statement per line allowed. [OneStatementPerLine] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:38:41: Only one statement per line allowed. [OneStatementPerLine] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:48:30: Only one statement per line allowed. [OneStatementPerLine] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:50:28: Only one statement per line allowed. [OneStatementPerLine] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:54:35: Only one statement per line allowed. [OneStatementPerLine] Audit done. Checkstyle ends with 10 errors.  ``` This check works as intended, so I think we can close this one.","closed","","nick-mancuso","2020-08-12T13:18:57Z","2020-08-12T18:11:38Z"
"","8659","HiddenFieldCheck throws a NPE on switch expression syntax","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#HiddenField  _Checks that a local variable or a parameter does not shadow a field that is defined in the same class._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java ➜  src cat config.xml                                                                                            ➜  src cat TestClass.java                                                                 public class TestClass {     private int x;     private int y;     private int z;     private int a;     private int b;       int howMany1(int k) {         int x = 2; // violation         switch (k) {             case 1:                 int y = x + 1; // violation                 x = y;                 break;             case 2:                 int z = x + 2; // violation                 x = z;                 break;             case 3:                 int a = x + 3; // violation                 x = a;                 break;             default:                 int b = x + 4; // violation                 x = b;         }         return x;     }      int howMany2(int k) {         int x = 2; // should be violation         return switch (k) {             case 1 -> {                 int y = x + 1; // should be violation                 yield y;             }             case 2 -> {                 int z = x + 2; // should be violation                 yield z;             }             case 3 -> {                 int a = x + 3; // should be violation                 yield a;             }             default -> {                 int b = x + 4; // should be violation                 yield b;             }         };     }  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck.processLambda(HiddenFieldCheck.java:295)         at com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck.visitToken(HiddenFieldCheck.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Checkstyle ends with 1 errors.  ``` I expect this check to work with switch expressions and not throw a NPE, so we need to update it.","closed","approved,","nick-mancuso","2020-08-11T18:47:12Z","2020-08-14T04:52:47Z"
"","8668","Java 14 SwitchExpression Check Support validation: FinalLocalVariableCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#FinalLocalVariable  _Checks that local variables that never have their values changed are declared final. The check can be configured to also check that unchanged parameters are declared final._  The test case should have an outer variable: ```  public class TestClass {      void foo1() throws Exception {          Exception e; // violation          final int a = (int) Math.random();         final int b = (int) Math.random();          switch (a) {         case 0:             e = new Exception();             break;         case 1:             if (b == 0) {                 e = new Exception();                 break;             }              if (b == 1) {                 e = new Exception();             }             else {                 e = new Exception();             }             break;         case 2:             if (b == 0) {                 return;             }              e = new Exception();             break;         default:             e = new Exception();             break;         }          throw e;     }      void foo2() throws Exception {          Exception e; // should be violation          final int a = (int) Math.random();         final int b = (int) Math.random();          switch (a) {             case 0 -> {                 e = new Exception();             }             case 1 -> {                 if (b == 0) {                     e = new Exception();                     break;                 }                  if (b == 1) {                     e = new Exception();                 }                 else {                     e = new Exception();                 }             }             case 2 -> {                 if (b == 0) {                     return;                 }                  e = new Exception();             }             default -> {                 e = new Exception();             }         }          throw e;     }  } ```  There should be two violations, but only one reported: ``` Starting audit... [ERROR] TestClass.java:7:19: Variable 'e' should be declared final. [FinalLocalVariable] Audit done. ```  _Originally posted by @pbludov in https://github.com/checkstyle/checkstyle/issues/8668#issuecomment-672704335_","closed","approved,","nick-mancuso","2020-08-12T00:09:37Z","2020-08-21T13:55:38Z"
"","8667","Java 14 SwitchExpression Check Support validation: FallThroughCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#FallThrough  _Checks for fall-through in switch statements. Finds locations where a case contains Java code but lacks a break, return, throw or continue statement._   ``` ➜  src cat TestClass.java       public class TestClass {      int howMany1(int k) {         int x = 2; //         switch (k) {             case 1:                 int y = x + 1;                 x = y;             case 2:                 int z = x + 2;                 x = z;             case 3:                 int a = x + 3;                 x = a;             default:                 int b = x + 4;                 x = b;         }         return x;     }      int howMany2(int k) {         int x = 2;         return switch (k) {             case 1 -> {              }             case 2 -> {                 int z = x + 2;                 yield z;             }             case 3 -> {                 int a = x + 3;                 yield a;             }             default -> {                 int b = x + 4;                 yield b;             }         };     }  } ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                TestClass.java:27: error: switch rule completes without providing a value             }             ^   (switch rules in switch expressions must either provide a value or throw) 1 error  ```  Since switch rules MUST provide a value or throw,  and do not need a `break;` this check does not apply. We need to make sure that we have no false positives:  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java ➜  src cat config.xml                                                                                            ➜  src cat TestClass.java  public class TestClass {      int howMany1(int k) {         int x = 2; //         switch (k) {             case 1:                 int y = x + 1;                 x = y;             case 2:                 int z = x + 2;                 x = z;             case 3:                 int a = x + 3;                 x = a;             default:                 int b = x + 4;                 x = b;         }         return x;     }      int howMany2(int k) {         int x = 2;         return switch (k) {             case 1 -> {                 int y = x + 1;                 yield y;             }             case 2 -> {                 int z = x + 2;                 yield z;             }             case 3 -> {                 int a = x + 3;                 yield a;             }             default -> {                 int b = x + 4;                 yield b;             }         };     }  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Error: Unable to access jarfile /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:9:13: Fall through from previous branch of the switch statement. [FallThrough] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:12:13: Fall through from previous branch of the switch statement. [FallThrough] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:15:13: Fall through from previous branch of the switch statement. [FallThrough] Audit done.  ```  This check works as intended, so I think that we can close this one.","closed","","nick-mancuso","2020-08-11T23:55:16Z","2020-08-12T07:37:46Z"
"","8666","Java 14 SwitchExpression Check Support validation: EqualsAvoidNullCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#EqualsAvoidNull  _Checks that any combination of String literals is on the left side of an equals() comparison. Also checks for String literals assigned to some field (such as someString.equals(anotherString = ""text""))._   ``` ➜  src cat TestClass.java                                                                 public class TestClass {     public boolean method3(String s) {         boolean b = false;         switch (s) {             case s.equals(""true"") -> b = true;             case s.equals(""false"") -> b = false;         };         return b;     } }   ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java TestClass.java:5: error: incompatible types: boolean cannot be converted to String             case s.equals(""true"") -> b = true;                          ^ TestClass.java:6: error: incompatible types: boolean cannot be converted to String             case s.equals(""false"") -> b = false;                          ^ 2 errors   ```  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java TestClass.java:5: error: not a statement             case s.equals(""true"") -> true;                                      ^ TestClass.java:6: error: not a statement             case s.equals(""false"") -> false;                                       ^ 2 errors ➜  src cat TestClass.java                                                                                                public class TestClass {     public boolean method3(String s) {         boolean b = false;         switch (b) {             case s.equals(""true"") -> true;             case s.equals(""false"") -> false;         }         ;         return b;     } }  ```  Though these are terrible examples (I couldn't think of a better way to try this), we see that a switch label can not contain a boolean, but we need to make sure that this check works in the body of a switch rule.   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java ➜  src cat config.xml                                                                                                                           ➜  src cat TestClass.java                                                                 public class TestClass {     public String method3(String s, int i) {         return switch (i) {             case 1 -> {                 if (s.equals(""that"")) { // violation                     yield ""other"";                 }                 yield ""not other"";             }             case 2 -> {                 yield switch (s) {                     case ""this"" -> ""that"";                     case ""that"" -> ""other"";                     default -> {                         if (s.equals(""not this"")) { // violation                             int x = 6;                         }                         yield ""other thing"";                     }                 };             }             default -> ""not this or that"";          };     } }   ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:5:29: String literal expressions should be on the left side of an equals comparison. [EqualsAvoidNull] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:15:37: String literal expressions should be on the left side of an equals comparison. [EqualsAvoidNull] Audit done. Checkstyle ends with 2 errors.  ```  And it does. I think we can close this one.","closed","","nick-mancuso","2020-08-11T21:23:31Z","2020-08-12T07:33:26Z"
"","8665","Java 14 SwitchExpression Check Support validation: DefaultComesLastCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#DefaultComesLast  _Check that the default is after all the cases in a switch statement._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java      ➜  src cat config.xml                                                                                                                           ➜  src cat TestClass.java                                                                                                public class TestClass {     public int method1(int i) {         int x = 7;         switch (i) {             case 1:             default: // violation, 'default' before 'case'                 x=9;                 break;             case 2:                 x=8;                 break;         }         return x;     }      public int method2(int i) {         int x = 7;         switch (i) {             case 1 -> {                 x=8;             }             default ->{ // should be violation, 'default' before 'case'                 x = 9;             }             case 2 -> {                 x = 7;             }         }          return x;     }      public int method3(int i) {         return switch (i) {             case 1 -> 8;             default -> 9; // should be violation, 'default' before 'case'             case 2 -> 7;         };     } }   ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:6:13: Default should be last label in the switch. [DefaultComesLast] Audit done. Checkstyle ends with 1 errors.  ``` We need to update this check to support switch rules and expressions.","closed","approved,","nick-mancuso","2020-08-11T20:32:33Z","2020-08-16T19:05:15Z"
"","8663","Java 14 SwitchExpression Check Support validation: LeftCurlyCheck","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_blocks.html#LeftCurly  _Checks for the placement of left curly braces ('{') for code blocks._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java      ➜  src cat config.xml                                                                                            ➜  src cat TestClass.java                                                                 public class TestClass {      int howMany1(int k) {         switch (k)         { // violation             case 1:                 { // violation                  }              case 2:                 { // violation                  }              case 3:                 { // violation                  }             default:             {   // violation              }         }         return k;     }      int howMany2(int k) {         return switch (k)                 { // violation             case 1 ->                     { // should be violation                 yield 2;             }             case 2 ->                     { // should be violation                 yield 3;             }             case 3 ->                     { // should be violation                 yield 4;             }             default ->                     { // should be violation                 yield k;             }         };     }  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:5:9: '{' at column 9 should be on the previous line. [LeftCurly] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:7:17: '{' at column 17 should be on the previous line. [LeftCurly] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:12:17: '{' at column 17 should be on the previous line. [LeftCurly] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:17:17: '{' at column 17 should be on the previous line. [LeftCurly] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:21:13: '{' at column 13 should be on the previous line. [LeftCurly] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:30:17: '{' at column 17 should be on the previous line. [LeftCurly] Audit done. Checkstyle ends with 6 errors.  ``` We can see that we need to add support for switch rules to this check, and verify that switch expressions will continue to keep working.","closed","approved,","nick-mancuso","2020-08-11T19:46:27Z","2020-08-16T16:51:50Z"
"","8662","Java 14 SwitchExpression Check Support validation: EmptyBlock","Child of #8658  Check documentation: https://checkstyle.sourceforge.io/config_blocks.html#EmptyBlock  _Checks for empty blocks. This check does not validate sequential blocks._   ``` ➜  src cat TestClass.java  public class TestClass {      int howMany1(int k) {         switch (k) {             case 1:              case 2:              case 3:              default:          }         return k;     }      int howMany2(int k) {         return switch (k) {             case 1 -> {              }             case 2 -> {              }             case 3 -> {              }             default -> {                 yield k;             }         };     }  }                                                                                                                              ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                TestClass.java:21: error: switch rule completes without providing a value             }             ^   (switch rules in switch expressions must either provide a value or throw) TestClass.java:24: error: switch rule completes without providing a value             }             ^   (switch rules in switch expressions must either provide a value or throw) TestClass.java:27: error: switch rule completes without providing a value             }             ^   (switch rules in switch expressions must either provide a value or throw) 3 errors  ``` Switch rules must provide a definite value, therefore the block of a switch rule cannot be empty.  We need to check for no false positives:  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                                                 ➜  src cat TestClass.java                                                                                                public class TestClass {      int howMany1(int k) {         switch (k) {             case 1:{} // violation              case 2:{} // violation              case 3:{} // violation          }         return k;     }      int howMany2(int k) {         return switch (k) {             case 1 -> {                 yield 2;             }             case 2 -> {                 yield 3;             }             case 3 -> {                 yield 4;             }             default -> {                 yield k;             }         };     }  }%                                                                                                                              ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:5:20: Must have at least one statement. [EmptyBlock] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:7:20: Must have at least one statement. [EmptyBlock] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:9:20: Must have at least one statement. [EmptyBlock] Audit done. Checkstyle ends with 3 errors.  ``` We are good here, let's try this:  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                           ➜  src cat TestClass.java                                                                                                public class TestClass {      int howMany1(int k) {         switch (k) {             case 1:{}              case 2:{}              case 3:{}          }         return k;     }      int howMany2(int k) {         return switch (k) { // should not be a violation             case 1 -> {                 yield 2;             }             case 2 -> {                 yield 3;             }             case 3 -> {                 yield 4;             }             default -> {                 yield k;             }         };     }  }%                                                                                                                              ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:16:27: Must have at least one statement. [EmptyBlock] Audit done. Checkstyle ends with 1 errors.  ``` We need to update this check to avoid this false positive.","closed","approved,","nick-mancuso","2020-08-11T19:31:45Z","2020-08-21T13:25:19Z"
"","8670","Java 14 SwitchExpression Check Support validation: MagicNumberCheck","Child of #8658  Check documentation: https://checkstyle.org/config_xxxxxx.html#NameOfAffectedCheck  _Checks that there are no ""magic numbers"" where a magic number is a numeric literal that is not defined as a constant. By default, -1, 0, 1, and 2 are not considered to be magic numbers._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java ➜  src cat config.xml                                                                                                                           ➜  src cat TestClass.java                                                                 public class TestClass {      int howMany1(int k) {         int x = 2;         int number = 42; // violation         int inner = 33; // violation         boolean bool = false;         switch (k) {             case 1:                 int y = inner = x + number;                  final int finalInt = 2;                 break;             case 2:                 int otherNumber = 42; // violation                 int z = inner = x + 2;                  x = z;                 break;             case 3: // violation                 if (bool = true) {                  }                 int a = x + 3; // violation                 x = a;                 break;             default:                 int b = inner = x + 4;  // violation                 x = b;         }         return x;     }      int howMany2(int k) {         int x = 2;          int number = 42; // violation         int inner = 33; // violation         boolean bool = false;         return switch (k) {             case 1 -> {                 int y = inner = x + number;                  final int finalInt = 2;                 yield y;             }             case 2 -> {                 int otherNumber = 42; // violation                 int z = inner = x + 2;                  x = z;                 yield otherNumber;             }             case 3 -> { // violation                 if (bool = true) {                  }                 int a = x + 3; // violation                 x = a;                 yield a;             }             default -> {                 int b = inner = x + 4;  // violation                 x = b;                 yield b;             }         };     }      int howMany3(int x) {         int inner = 8; // violation         boolean bool = false;         return switch (x) {             case 1:                 int number = 55;  // violation                 int y = inner = x + number;                   final int finalInt = 2;                 yield y;             case 2:                 int otherNumber = 42;  // violation                 int z = inner = x + 2;                   x = z;                 yield otherNumber;             case 3: // violation                 if (bool = true) {                  }                 int a = x + 3;  // violation                 x = a;                 yield a;             default:                 int b = inner = x + 4;  // violation                 x = b;                 yield b;         };     }  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:5:22: '42' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:6:21: '33' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:14:35: '42' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:18:18: '3' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:21:29: '3' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:25:37: '4' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:33:22: '42' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:34:21: '33' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:43:35: '42' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:48:18: '3' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:51:29: '3' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:56:37: '4' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:64:21: '8' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:68:30: '55' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:73:35: '42' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:77:18: '3' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:80:29: '3' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:84:37: '4' is a magic number. [MagicNumber] Audit done. Checkstyle ends with 18 errors.   ```  This check works as intended within switch expressions and switch rules, so I think that we can close this issue.","closed","","nick-mancuso","2020-08-12T00:28:43Z","2020-08-12T08:03:44Z"
"","8669","Java 14 SwitchExpression Check Support validation: InnerAssignmentCheck","Child of #8658  Check documentation: https://checkstyle.org/config_xxxxxx.html#NameOfAffectedCheck  _Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);._   ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                           ➜  src cat TestClass.java                                                                                                public class TestClass {      int howMany1(int k) {         int x = 2;         int number = 42;         int inner = 33;         boolean bool = false;         switch (k) {             case 1:                 int y = inner = x + number; // violation                 final int finalInt = 2;                 break;             case 2:                 int otherNumber = 42;                 int z = inner = x + 2; // violation                 x = z;                 break;             case 3:                 if (bool = true) { // violation                 }                 int a = x + 3;                 x = a;                 break;             default:                 int b = inner = x + 4; // violation                 x = b;         }         return x;     }      int howMany2(int k) {         int x = 2;          int number = 42;         int inner = 33;         boolean bool = false;         return switch (k) {             case 1 -> {                 int y = inner = x + number; // violation                 final int finalInt = 2;                 yield y;             }             case 2 -> {                 int otherNumber = 42;                 int z = inner = x + 2; // violation                 x = z;                 yield otherNumber;             }             case 3 -> {                 if (bool = true) { // violation                 }                 int a = x + 3;                 x = a;                 yield a;             }             default -> {                 int b = inner = x + 4; // violation                 x = b;                 yield b;             }         };     }      int howMany3(int x) {         int inner = 8;         boolean bool = false;         return switch (x) {             case 1:                 int number = 55;                  int y = inner = x + number;  // violation                 final int finalInt = 2;                 yield y;             case 2:                 int otherNumber = 42;                  int z = inner = x + 2;  // violation                 x = z;                 yield otherNumber;             case 3:                 if (bool = true) { // violation                 }                 int a = x + 3;                  x = a;                 yield a;             default:                 int b = inner = x + 4; // violation                 x = b;                 yield b;         };     }  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:10:31: Inner assignments should be avoided. [InnerAssignment] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:15:31: Inner assignments should be avoided. [InnerAssignment] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:19:26: Inner assignments should be avoided. [InnerAssignment] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:25:31: Inner assignments should be avoided. [InnerAssignment] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:38:31: Inner assignments should be avoided. [InnerAssignment] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:44:31: Inner assignments should be avoided. [InnerAssignment] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:49:26: Inner assignments should be avoided. [InnerAssignment] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:56:31: Inner assignments should be avoided. [InnerAssignment] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:69:31: Inner assignments should be avoided. [InnerAssignment] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:74:31: Inner assignments should be avoided. [InnerAssignment] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:78:26: Inner assignments should be avoided. [InnerAssignment] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:84:31: Inner assignments should be avoided. [InnerAssignment] Audit done. Checkstyle ends with 12 errors.  ```  We should also consider assignment within a switch label:  ``` ➜  src cat TestClass.java                                                                                                public class TestClass {      int howMany1(int k) {         int x = 2;         int number = 42;         int inner = 33;         boolean bool = false;         switch (k) {             case 1:                 int y = inner = x + number; // violation                 final int finalInt = 2;                 break;             case 2:                 int otherNumber = 42;                 int z = inner = x + 2; // violation                 x = z;                 break;             case 3:                 if (bool = true) { // violation                 }                 int a = x + 3;                 x = a;                 break;             default:                 int b = inner = x + 4; // violation                 x = b;         }         return x;     }      int howMany2(int k) {         int x = 2;          int number = 42;         int inner = 33;         boolean bool = false;         return switch (k) {             case 1 -> {                 int y = inner = x + number; // violation                 final int finalInt = 2;                 yield y;             }             case (x=2) -> {                 int otherNumber = 42;                 int z = inner = x + 2; // violation                 x = z;                 yield otherNumber;             }             case 3 -> {                 if (bool = true) { // violation                 }                 int a = x + 3;                 x = a;                 yield a;             }             default -> {                 int b = inner = x + 4; // violation                 x = b;                 yield b;             }         };     }      int howMany3(int x) {         int inner = 8;         boolean bool = false;         return switch (x) {             case 1:                 int number = 55;                  int y = inner = x + number;  // violation                 final int finalInt = 2;                 yield y;             case 2:                 int otherNumber = 42;                  int z = inner = x + 2;  // violation                 x = z;                 yield otherNumber;             case 3:                 if (bool = true) { // violation                 }                 int a = x + 3;                  x = a;                 yield a;             default:                 int b = inner = x + 4; // violation                 x = b;                 yield b;         };     }  } ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                TestClass.java:42: error: constant expression required             case (x=2) -> {                  ^ 1 error  ```  This does not compile. Since this check works within the body of a switch expression, I think we can close this issue.","closed","","nick-mancuso","2020-08-12T00:21:30Z","2020-08-12T08:01:45Z"
"","8660","UnnecessaryParenthesesCheck throws a NPE on switch expression syntax","Child of #8658 Check documentation: https://checkstyle.sourceforge.io/config_coding.html#UnnecessaryParentheses  _Checks if unnecessary parentheses are used in a statement or expression._    ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                ➜  src cat config.xml                                                                                                                           ➜  src cat TestClass.java                                                                                                public class TestClass {      MathOperation2 tooManyParens(int k) {         return switch (k) {             case 1 -> {                 MathOperation2 case5 = (a, b) -> (a + b); // should be violation                 yield case5;             }             case (2) -> { // should be violation                 MathOperation2 case6 = (int a, int b) -> (a + b); // should be violation                 yield case6;             }             case 3 -> {                 MathOperation2 case7 = (int a, int b) -> {                     return (a + b); // should be violation                 };                 yield (case7); // should be violation             }             default -> {                 MathOperation2 case8 = (int x, int y) -> {                     return (x + y); // should be violation                 };                 yield case8;             }         };     }      interface MathOperation2 {         int operation(int a, int b);     }  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck.isLambdaSingleParameterSurrounded(UnnecessaryParenthesesCheck.java:426)         at com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck.visitToken(UnnecessaryParenthesesCheck.java:317)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Checkstyle ends with 1 errors.  ``` I expect Checkstyle to parse this code and not throw a NPE.","closed","approved,","nick-mancuso","2020-08-11T19:04:19Z","2020-08-14T04:50:52Z"
"","8672","Java 14 SwitchExpression Check Support validation: MissingSwitchDefaultCheck","Child of #8658 Check documentation: https://checkstyle.sourceforge.io/config_coding.html#MissingSwitchDefault  _Checks that switch statement has a default clause._  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java ➜  src cat config.xml                         ➜  src cat TestClass.java public class TestClass {      enum Nums {ONE, TWO , THREE}      int howMany1(Nums k) {         switch (k) { // violation             case ONE:             case TWO:             case THREE:         }         return 5;     }      int howMany2(Nums k) {         return switch (k) { // violation             case ONE -> {                 yield 4;             }             case TWO -> {                 yield 42;             }             case THREE -> {                 yield 99;             }         };     }      int howMany3(Nums k) {         return switch (k) { // violation             case ONE: yield 3;             case TWO: yield 5;             case THREE: yield 9;         };     }      int howMany4(Nums k) {         return switch (k) { // false positive             case ONE -> {                 yield 4;             }             case TWO -> {                 yield 42;             }             case THREE -> {                 yield 99;             }             default -> {                 yield 67;             }         };     }      int howMany5(Nums k) {         return switch (k) { // ok             case ONE:                 yield 3;             case TWO:                 yield 5;             case THREE:                 yield 9;             default:                 yield 22;         };     }  } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:6:9: switch without ""default"" clause. [MissingSwitchDefault] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:15:16: switch without ""default"" clause. [MissingSwitchDefault] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:29:16: switch without ""default"" clause. [MissingSwitchDefault] [ERROR] /home/nick/Desktop/enhanced-switch/src/TestClass.java:37:16: switch without ""default"" clause. [MissingSwitchDefault] Audit done. Checkstyle ends with 4 errors.  ``` We need to update this check to work with switch rules.","closed","approved,","nick-mancuso","2020-08-12T13:05:04Z","2020-08-18T07:46:26Z"
"","8618","Java 14 Text Blocks Checks Support validation: UnnecessaryParenthesesCheck","Child of #8601  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#UnnecessaryParentheses  Checks if unnecessary parentheses are used in a statement or expression.  ``` ➜  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  text-blocks-grammar cat config.xml                      ➜  text-blocks-grammar cat TestClass.java public class TestClass {     void method() {         String string1 = (""this"") + (""that"") + (""other""); // violation         String string2 = (""""""                 this"""""")                 + (""""""                 that"""""")                 + (""""""                 other""""""); // should be violation     } } ➜  text-blocks-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:3:27: Unnecessary parentheses around string ""this"". [UnnecessaryParentheses] [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:3:38: Unnecessary parentheses around string ""that"". [UnnecessaryParentheses] [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:3:49: Unnecessary parentheses around string ""other"". [UnnecessaryParentheses] Audit done. Checkstyle ends with 3 errors.  ``` We need to add support for text blocks syntax to this check.","closed","approved,","nick-mancuso","2020-08-06T18:24:43Z","2020-08-20T15:01:06Z"
"","8616","Java 14 Text Blocks Checks Support validation: MultipleStringLiteralsCheck","Child of #8601  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#MultipleStringLiterals  _Checks for multiple occurrences of the same string literal within a single file._  ``` ➜  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  text-blocks-grammar cat config.xml                      ➜  text-blocks-grammar cat TestClass.java public class TestClass {     String string1 = ""string"";     String string2 = ""string""; // violation     String string3 = """"""             other string"""""";     String string4 = """"""             other string""""""; // should be violation  } ➜  text-blocks-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:2:22: The String ""string"" appears 2 times in the file. [MultipleStringLiterals] Audit done. Checkstyle ends with 1 errors.  ``` This check needs to be updated to support text block syntax.","closed","approved,","nick-mancuso","2020-08-06T18:10:28Z","2020-08-21T15:25:49Z"
"","8615","Java 14 Text Blocks Checks Support validation: IllegalTokenTextCheck","Child of #8601  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#IllegalTokenText  _Checks specified tokens text for matching an illegal pattern. By default no tokens are specified._  ``` ➜  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  text-blocks-grammar cat config.xml                          ➜  text-blocks-grammar cat TestClass.java public class TestClass {     public void equalsAvoid(String myString) {         if(myString.equals(""stuff"")) { // violation             //do stuff         }         if (myString.equals(""""""                  stuff"""""")) { // should be violation             // do stuff         }     } }%                                                                                                                             ➜  text-blocks-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:3:27: String literal expressions should be on the left side of an equals comparison. [EqualsAvoidNull] Audit done. Checkstyle ends with 1 errors.  ```  This check needs to be updated to support text blocks syntax.","closed","","nick-mancuso","2020-08-06T18:02:08Z","2020-08-07T03:43:45Z"
"","8614","Java 14 Text Blocks Checks Support validation: EqualsAvoidNullCheck","Child of #8601  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#EqualsAvoidNull  _Checks that any combination of String literals is on the left side of an equals() comparison. Also checks for String literals assigned to some field (such as someString.equals(anotherString = ""text""))._ ``` ➜  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  text-blocks-grammar cat config.xml                          ➜  text-blocks-grammar cat TestClass.java public class TestClass {     public void equalsAvoid(String myString) {         if(myString.equals(""stuff"")) { // violation             //do stuff         }         if (myString.equals(""""""                  stuff"""""")) { // should be violation             // do stuff         }     } }                                                                                                                             ➜  text-blocks-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:3:27: String literal expressions should be on the left side of an equals comparison. [EqualsAvoidNull] Audit done. Checkstyle ends with 1 errors.  ``` This check needs to be updated to support text blocks syntax.","closed","approved,","nick-mancuso","2020-08-06T17:47:27Z","2020-08-18T08:54:04Z"
"","8619","Java 14 Text Blocks Checks Support validation: SuppressWarningsHolder","Child of #8601  Check documentation: https://checkstyle.sourceforge.io/config_annotation.html#SuppressWarningsHolder  _Maintains a set of check suppressions from @SuppressWarnings annotations._  ``` ➜  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  text-blocks-grammar cat config.xml                                    ➜  text-blocks-grammar cat TestClass.java class TestClass {         @SuppressWarnings({""membername""})         String STRING1 = ""string""; //ok, suppressed          @SuppressWarnings({""membername""})         String STRING2 = """"""                 string""""""; // ok, suppressed          String STRING3 = ""string""; // not suppressed, violation          String STRING4 = """"""                 string""""""; // not suppressed, violation          @SuppressWarnings({""""""         membername""""""})         String STRING5 = """"""                 string""""""; // should be suppressed, but is violation  } ➜  text-blocks-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:9:16: Name 'STRING3' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MemberName] [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:11:16: Name 'STRING4' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MemberName] [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:16:16: Name 'STRING5' must match pattern '^[a-z][a-zA-Z0-9]*$'. [MemberName] Audit done. Checkstyle ends with 3 errors. .  ```  We need to update this check to support the usage of text blocks in annotations.","closed","approved,","nick-mancuso","2020-08-07T00:40:44Z","2020-08-25T20:20:32Z"
"","8612","Java 14 Text Blocks Checks Support validation: SuppressWarningsCheck","Child of #8601  Check documentation: https://checkstyle.sourceforge.io/config_annotation.html#SuppressWarnings  _Allows to specify what warnings that@SuppressWarnings is not allowed to suppress. You can also specify a list of TokenTypes that the configured warning(s) cannot be suppressed on._  ```  ➜  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                   Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  text-blocks-grammar cat config.xml                                                                                                                                                          ➜  text-blocks-grammar cat TestClass.java                                                                                                   package com.puppycrawl.tools.checkstyle.checks.annotation.suppresswarnings;  import java.lang.annotation.Documented;  @SuppressWarnings(""""""                 unchecked"""""") // should be violation public class TestClass {         @SuppressWarnings(""""""                            """""")         class Empty {                  @SuppressWarnings(""""""                                 """""")                 public Empty() {                  }         }          @SuppressWarnings(""""""                         unused"""""") // should be violation         enum MyEnum {                  @SuppressWarnings(""""""                                 unforgiven"""""")                 D;                  }         }          @SuppressWarnings(""""""                         abcun"""""")         @Documented         @interface CoolInterface {                 int cool();         }          @Documented         @SuppressWarnings(""""""                         abcun"""""") @interface MyInterface {          @SuppressWarnings(""""""                         unchecked"""""") // should be violation         int cool(); }  class Junk {  @SuppressWarnings(""""""                 """""") int a = 1;  }  @SuppressWarnings(""unchecked"") // violation class TestClass2 {         @SuppressWarnings("""")         class Empty {                  @SuppressWarnings("""")                 public Empty() {                  }         }          @SuppressWarnings(""unused"") // violation         enum MyEnum {                  @SuppressWarnings(""unforgiven"")                 D;          } }  @SuppressWarnings(""abcun"") @Documented @interface CoolInterface2 {         int cool(); }  @Documented @SuppressWarnings(""abcun"") @interface MyInterface2 {          @SuppressWarnings(""unchecked"") // violation         int cool(); }  class Junk2 {          @SuppressWarnings("""")         int a = 1;  } ➜  text-blocks-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:56:19: The warning 'unchecked' cannot be suppressed at this location. [SuppressWarnings] [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:68:27: The warning 'unused' cannot be suppressed at this location. [SuppressWarnings] [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:87:27: The warning 'unchecked' cannot be suppressed at this location. [SuppressWarnings] Audit done. Checkstyle ends with 3 errors.  ``` We are missing violations, so this check must be updated.","closed","","nick-mancuso","2020-08-06T17:23:36Z","2020-08-08T17:02:03Z"
"","8617","Java 14 Text Blocks Checks Support validation: StringLiteralEqualityCheck","Child of #8601 Check documentation: https://checkstyle.sourceforge.io/config_coding.html#StringLiteralEquality  _Checks that string literals are not used with == or !=._  ``` ➜  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  text-blocks-grammar cat config.xml                      ➜  text-blocks-grammar cat TestClass.java public class TestClass {     void method() {         String status1 = ""pending"";          if (status1 == ""done"") {} // violation          while (status1 != ""done"") {} // violation          boolean flag1 = (status1 == ""done""); // violation          boolean flag2 = (status1.equals(""done"")); // ok           String status2 = """"""                     pending"""""";          if (status2 == """"""                 done"""""") {} // should be violation          while (status2 != """"""                 done"""""") {} // should be violation          boolean flag3 = (status2 == """"""                 done""""""); // should be violation          boolean flag4 = (status2.equals(""""""                 done"""""")); // ok      }  } ➜  text-blocks-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:5:21: Literal Strings should be compared using equals(), not '=='. [StringLiteralEquality] [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:7:24: Literal Strings should be compared using equals(), not '!='. [StringLiteralEquality] [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:9:34: Literal Strings should be compared using equals(), not '=='. [StringLiteralEquality] Audit done. Checkstyle ends with 3 errors.  ``` This check needs to be updated to support text blocks syntax.","closed","approved,","nick-mancuso","2020-08-06T18:17:45Z","2020-08-20T07:50:48Z"
"","8576","Java 14 Text Blocks Support Check validation: IllegalTokenText","Child of #8601 Check documentation: https://checkstyle.sourceforge.io/config_coding.html#IllegalTokenText  From check documentation: _Checks specified tokens text for matching an illegal pattern. By default no tokens are specified._   ``` ➜  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  text-blocks-grammar cat config.xml            	 	   	   	     ➜  text-blocks-grammar cat TestClass.java  public class TestClass {     String hello = """"""                 Hello, world!                 """""";  } ➜  text-blocks-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Token ""TEXT_BLOCK_CONTENT"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck 	at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:482) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:201) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:404) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Token ""TEXT_BLOCK_CONTENT"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck 	at com.puppycrawl.tools.checkstyle.TreeWalker.registerCheck(TreeWalker.java:220) 	at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:130) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:201) 	at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:477) 	... 5 more Checkstyle ends with 1 errors. ```  I expect this check to check the content of a text block and report illegal patterns.  We need to add support for `TEXT_BLOCK_CONTENT` to IllegalTokenTextCheck","closed","approved,","nick-mancuso","2020-07-29T14:31:08Z","2020-08-20T07:50:57Z"
"","8508","Java14 Full Records Support Check Validation: InterfaceMemberImpliedModifierCheck","Child of #8452  Check documentation: ~~https://checkstyle.sourceforge.io/config_modifier.html#ClassMemberImpliedModifier~~ https://checkstyle.sourceforge.io/config_modifier.html#InterfaceMemberImpliedModifier  From check documentation: _Checks for implicit modifiers on interface members and nested types._  _This check is effectively the opposite of RedundantModifier. It checks the modifiers on interface members, ensuring that certain modifiers are explicitly specified even though they are actually redundant._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                                                                      ➜  full-record-grammar cat TestClass.java                                                                 class TestClass {     public interface RoadFeature {          String STOP = ""Stop"";  // violation x3          final public static String STOP2 = ""Stop2"";  // ok          enum Lights {  // violation x2              RED, YELLOW, GREEN;         }     } }  record MyRecord1(boolean t, boolean f) {     public interface RoadFeature {          String STOP = ""Stop"";  // violation x3          final public static String STOP2 = ""Stop2"";  // ok          enum Lights {  // violation x2              RED, YELLOW, GREEN;         }     } }        ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:4:9: Implied modifier 'final' should be explicit. [InterfaceMemberImpliedModifier] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:4:9: Implied modifier 'public' should be explicit. [InterfaceMemberImpliedModifier] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:4:9: Implied modifier 'static' should be explicit. [InterfaceMemberImpliedModifier] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:8:9: Implied modifier 'public' should be explicit. [InterfaceMemberImpliedModifier] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:8:9: Implied modifier 'static' should be explicit. [InterfaceMemberImpliedModifier] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:18:9: Implied modifier 'final' should be explicit. [InterfaceMemberImpliedModifier] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:18:9: Implied modifier 'public' should be explicit. [InterfaceMemberImpliedModifier] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:18:9: Implied modifier 'static' should be explicit. [InterfaceMemberImpliedModifier] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:22:9: Implied modifier 'public' should be explicit. [InterfaceMemberImpliedModifier] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:22:9: Implied modifier 'static' should be explicit. [InterfaceMemberImpliedModifier] Audit done. Checkstyle ends with 10 errors.  ```  This check works as intended within the body of a record definition, so I think we can close this one.","closed","","nick-mancuso","2020-07-16T15:32:07Z","2020-08-01T13:08:54Z"
"","8528","Java14 Full Records Support Check Validation: WhitespaceAroundCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_whitespace.html#WhitespaceAround  From check documentation: _Checks that a token is surrounded by whitespace. Empty constructor, method, class, enum, interface, loop bodies (blocks), lambdas of the form..._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java class MyClass {} // violation 2x interface Foo {} // violation 2x  //simple record def record MyRecord() {} // violation 2x  //simple record def record MyRecord1() { } // ok  //nested constructs record MyRecord2() {     class MyClass {} // violation 2x     interface Foo {} // violation 2x     record MyRecord() {} // violation 2x }  //method record MyRecord3() {     void method(){ // violation         final int a = 1;         int b= 1; // violation         b=1; // violation 2x     }  }  //ctor record MyRecord4() {     public MyRecord4() {         final int a = 1;         int b= 1; // violation         b=1; // violation 2x     } }  //compact ctor record MyRecord5() {     public MyRecord5 {         final int a = 1;         int b= 1; // violation         b=1; // violation 2x     } }  //static fields record MyRecord6() {     static final int a = 1;     static int b= 1; // violation } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:1:15: '{' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:1:16: '}' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:2:15: '{' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:2:16: '}' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5:19: '{' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5:20: '}' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:12:19: '{' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:12:20: '}' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:13:19: '{' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:13:20: '}' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:14:23: '{' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:14:24: '}' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:19:18: '{' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:21:14: '=' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:22:10: '=' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:22:10: '=' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:31:14: '=' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:32:10: '=' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:32:10: '=' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:40:14: '=' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:41:10: '=' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:41:10: '=' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:48:17: '=' is not preceded with whitespace. [WhitespaceAround] Audit done. Checkstyle ends with 23 errors.  ``` This check works as intended with the new records syntax, so I think we can close this issue.","closed","miscellaneous,","nick-mancuso","2020-07-16T19:57:15Z","2020-07-29T07:30:12Z"
"","8527","Java14 Full Records Support Check Validation: ParenPadCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_whitespace.html#ParenPad  From check documentation:  Checks the policy on the padding of parentheses; that is whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden.  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java class Foo {      int n;      public void fun() {  // OK         bar( 1);  // violation, space after left parenthesis     }      public void bar(int k ) {  // violation, space before right parenthesis         while (k > 0) {  // OK         }     }      public void fun2() {  // OK         switch( n) {  // violation, space after left parenthesis             case 2:                 bar(n);  // OK             default:                 break;         }     }  }  //inside body of record definition record FooRecord() {      static int n;      public void fun() {  // OK         bar( 1);  // violation, space after left parenthesis     }      public void bar(int k ) {  // violation, space before right parenthesis         while (k > 0) {  // OK         }     }      public void fun2() {  // OK         switch( n) {  // violation, space after left parenthesis             case 2:                 bar(n);  // OK             default:                 break;         }     }  }  //record components record MyRecord2( String s){} // should be violation record MyRecord3(String s ){} // should be violation  //in record constructor record MyRecord4(){     MyRecord4( int x){this();} // violation }         %                                                                                                                       ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:6:12: '(' is followed by whitespace. [ParenPad] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:9:27: ')' is preceded with whitespace. [ParenPad] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:15:15: '(' is followed by whitespace. [ParenPad] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:31:12: '(' is followed by whitespace. [ParenPad] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:34:27: ')' is preceded with whitespace. [ParenPad] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:40:15: '(' is followed by whitespace. [ParenPad] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:56:14: '(' is followed by whitespace. [ParenPad] Audit done. Checkstyle ends with 7 errors.  ```  So, this check works well within the body of the record definition, and with constructors, methods, etc.  We just need to add support for record components to this check.  ------  Summary of fix: New token TokenTypes.RECORD_DEF was added to Check","closed","approved,","nick-mancuso","2020-07-16T19:34:00Z","2020-08-20T07:52:16Z"
"","8526","Java14 Full Records Support Check Validation: NoLineWrapCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_whitespace.html#NoLineWrap  From check documentation:  _Checks that chosen statements are not line-wrapped. By default this Check restricts wrapping import and package statements, but it's possible to check any statement._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java class // violation, class definition not wrapped in a single line Foo {     public Foo() { // OK     }     public static void // violation, method definition not wrapped in a single line     doSomething() {     } } class Bar { // OK     public // violation, constructor definition not wrapped in a single line     Bar() {     }     public void fun() { // OK     } } record // should be a violation, record definition not wrapped in a single line FooRecord() {     public FooRecord() { // OK     }     public static void // violation, method definition not wrapped in a single line     doSomething() {     } } record BarRecord() { // OK     public // violation, constructor definition not wrapped in a single line     BarRecord() {     }     public void fun() { // OK     } } record OtherRecord() {     public // should be a violation, constructor definition not wrapped in a single line     OtherRecord{} }       %                                                                                                                       ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:1:1: CLASS_DEF statement should not be line-wrapped. [NoLineWrap] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5:5: METHOD_DEF statement should not be line-wrapped. [NoLineWrap] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:10:5: CTOR_DEF statement should not be line-wrapped. [NoLineWrap] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:20:5: METHOD_DEF statement should not be line-wrapped. [NoLineWrap] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:25:5: CTOR_DEF statement should not be line-wrapped. [NoLineWrap] Audit done. Checkstyle ends with 5 errors. ``` We need to add support for record definitions and compact constructors to this check.","closed","approved,","nick-mancuso","2020-07-16T19:18:28Z","2020-08-08T17:51:25Z"
"","8525","Java14 Full Records Support Check Validation: MethodParamPadCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_whitespace.html#MethodParamPad  From check documentation: _Checks the padding between the identifier of a method definition, constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list. That is, if the identifier and left parenthesis are on the same line, checks whether a space is required immediately after the identifier or such a space is forbidden. If they are not on the same line, reports a violation, unless configured to allow line breaks. To allow linebreaks after the identifier, set property allowLineBreaks to true._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java import java.util.List;  // in record def record MyTestRecord (){ // should this be a violation?  }  //in ctor record MyTestRecord2 () {     MyTestRecord2 (String one, String two, String three){ // violation         this ();// should this be a violation?     } }  //in compact ctor record MyTestRecord3() {     public MyTestRecord3{     } }  //in method def record MyTestRecord4 () { // should this be a violation?     void foo (){} // violation }  //in method def record MyTestRecord5() {     static MyTestRecord mtr = new MyTestRecord (); // violation }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:10:19: '(' is preceded with whitespace. [MethodParamPad] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:23:14: '(' is preceded with whitespace. [MethodParamPad] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:28:48: '(' is preceded with whitespace. [MethodParamPad] Audit done. Checkstyle ends with 3 errors.  ```  Let's discuss the addition of record definition/ record component padding to this check, as well as `this();`.  -------  Summary of fix: New acceptable token was added TokenTypes.RECORD_DEF","closed","new feature,","nick-mancuso","2020-07-16T19:01:24Z","2020-08-02T00:19:27Z"
"","8524","Java14 Full Records Support Check Validation: GenericWhitespaceCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_whitespace.html#GenericWhitespace  From check documentation: _Checks that the whitespace around the Generic tokens (angle brackets) """" are correct to the typical convention. The convention is not configurable._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java import java.util.List;  // in record def record MyTestRecord() {     static List< String> l; // violation, ""","closed","","nick-mancuso","2020-07-16T18:50:17Z","2020-07-18T17:22:02Z"
"","8523","Java14 Full Records Support Check Validation: EmptyLineSeparatorCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_whitespace.html#EmptyLineSeparator  From check documentation:  Checks for empty line separators after header, package, all import declarations, fields, constructors, methods, nested classes, static initializers and instance initializers.   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java package com.puppycrawl.tools.checkstyle.whitespace; import java.io.Serializable; // violation record Foo2() { // violation     public static final int FOO_CONST = 1;     public void foo() {} // should be violation     public Foo2{} // violation     Foo2(String foo){this();} // should be violation     static{} // violation } record InBetween() {} // should be violation class Foo1 {     public static final int FOO_CONST = 1;     public void foo() {} // violation     public Foo1(){} // violation     Foo1(String foo){} // violation     static{} // violation } class Foo3 {} // violation%                                                                                                   ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:2:1: 'import' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:3:1: 'RECORD_DEF' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:6:5: 'COMPACT_CTOR_DEF' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:8:5: 'STATIC_INIT' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:13:5: 'METHOD_DEF' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:14:5: 'CTOR_DEF' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:15:5: 'CTOR_DEF' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:16:5: 'STATIC_INIT' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:18:1: 'CLASS_DEF' should be separated from previous statement. [EmptyLineSeparator] Audit done. Checkstyle ends with 9 errors.  ``` We can see that the compact constructor token is not being checked, but we are checking the body of the record definition.  We need to add support for compact constructors to this check.","closed","approved,","nick-mancuso","2020-07-16T18:38:24Z","2020-08-09T21:49:06Z"
"","8521","Java14 Full Records Support Check Validation: ParameterNumberCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_sizes.html#ParameterNumber  From check documentation: Checks the number of parameters of a method or constructor.  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                                                                                                    ➜  full-record-grammar cat TestClass.java class MyTestClass {     void foo(String one, String two, String three) { // violation      } }  class MyTestClass2 {     MyTestClass2(String one, String two, String three) { // violation      } }  //method record MyTestRecord() {     void foo(String one, String two, String three) { // violation      } }  //ctor record MyTestRecord2() {     MyTestRecord2(String one, String two, String three){ // violation         this();     } }  //compact ctor record MyTestRecord3() {     public MyTestRecord3{ // doesn't apply      }  }  //components record MyTestRecord34(String one, String two, String three) { // should this be a violation?  }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:2:10: More than 2 parameters (found 3). [ParameterNumber] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:8:5: More than 2 parameters (found 3). [ParameterNumber] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:15:10: More than 2 parameters (found 3). [ParameterNumber] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:22:5: More than 2 parameters (found 3). [ParameterNumber] Audit done. Checkstyle ends with 4 errors. ```  This check works as expected within the body of a record declaration, but the question is, since a record component is similar to a parameter, should we check the number of record components in a record definition?  If so, I think this should be a new check, `RecordComponentNumberCheck`.","closed","approved,","nick-mancuso","2020-07-16T18:20:11Z","2020-08-25T19:58:26Z"
"","8519","Java14 Full Records Support Check Validation: MethodLengthCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_sizes.html#MethodLength  From check documentation: _Checks for long methods and constructors._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                                   ➜  full-record-grammar cat TestClass.java class MyTestClass {     void foo(){ // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");     }     MyTestClass() { // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");      }  }  // ctor record MyTestRecord() {     public MyTestRecord(){ // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");     }  }  //compact ctor record MyTestRecord2() {     public MyTestRecord2{ // should be a violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");     } }  //method record MyTestRecord3() {     void foo(){ // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");     } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:2:5: Method length is 5 lines (max allowed is 2). [MethodLength] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:7:5: Method length is 6 lines (max allowed is 2). [MethodLength] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:18:5: Method length is 5 lines (max allowed is 2). [MethodLength] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:37:5: Method length is 5 lines (max allowed is 2). [MethodLength] Audit done. Checkstyle ends with 4 errors.  ```  This check works as intended within the body of a record definition, but we need to add support for compact constructors.","closed","approved,","nick-mancuso","2020-07-16T17:35:43Z","2020-08-08T18:35:08Z"
"","8518","Java14 Full Records Support Check Validation: MethodCountCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_sizes.html#MethodCountheck  From check documentation: _Checks the number of methods declared in each type declaration by access modifier or total count._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java class MyTestClass { // violation     void foo(){}     void foo2(){}     void foo3(){}  }  record MyTestRecord() { // should be violation     void foo(){}     void foo2(){}     void foo3(){} }  //compact ctor record MyTestRecord2() { // should be ok     void foo(){}     void foo2(){}     public MyTestRecord2{ // make sure no false positive here     } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:1:1: Total number of methods is 3 (max allowed is 2). [MethodCount] Audit done. Checkstyle ends with 1 errors.  ``` This check needs to be updated to support counting methods within the body of a record definition.","closed","approved,","nick-mancuso","2020-07-16T17:27:39Z","2020-08-08T16:53:06Z"
"","8517","Java14 Full Records Support Check Validation: ExecutableStatementCountCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_sizes.html#ExecutableStatementCount  From check documentation: _Restricts the number of executable statements to a specified limit._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java class MyTestClass {     MyTestClass() { // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");     }      void foo(){ // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");      }  }  class MyTestClass2 {     static{ // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");      } }  record MyTestRecord() {     static{ // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");      } }  //compact ctor record MyTestRecord2() {     public MyTestRecord2{ // should be violation here         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");      } }  record MyTestRecord3() {     void foo(){ // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");     } }  record MyTestRecord4() {     public MyTestRecord4(){ // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");      } }                                                                                                                             ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:2:5: Executable statement count is 3 (max allowed is 2). [ExecutableStatementCount] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:8:5: Executable statement count is 3 (max allowed is 2). [ExecutableStatementCount] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:18:5: Executable statement count is 3 (max allowed is 2). [ExecutableStatementCount] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:27:5: Executable statement count is 3 (max allowed is 2). [ExecutableStatementCount] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:46:5: Executable statement count is 3 (max allowed is 2). [ExecutableStatementCount] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:54:5: Executable statement count is 3 (max allowed is 2). [ExecutableStatementCount] Audit done. Checkstyle ends with 6 errors.  ``` This check works well in within the record definition body (constructor, method),  but fails to detect the statements within the compact constructor.  We need to update this check.","closed","approved,","nick-mancuso","2020-07-16T17:16:27Z","2020-08-08T16:58:27Z"
"","8515","Java14 Full Records Support Check Validation: TypeNameCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#TypeName  From check documentation:  _Checks that type names conform to a specified pattern._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java interface FirstName {} // OK class SecondName {} // OK enum Third_Name {} // violation class FourthName_ {} // violation record My_Record() {} // should be violation record MyRecord__() {} // should be violation record GoodName() {} // ok class MyClass {     record My_Record2() {} // should be violation     record MyRecord__2() {} // should be violation     record GoodName2() {} // ok }%                                                                                                                            ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:3:6: Name 'Third_Name' must match pattern '^[A-Z][a-zA-Z0-9]*$'. [TypeName] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:4:7: Name 'FourthName_' must match pattern '^[A-Z][a-zA-Z0-9]*$'. [TypeName] Audit done. Checkstyle ends with 2 errors.  ``` We need to add support for record definitions to this check.","closed","approved,","nick-mancuso","2020-07-16T16:36:33Z","2020-08-22T15:25:39Z"
"","8514","Java14 Full Records Support Check Validation: InterfaceTypeParameterNameCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#InterfaceTypeParameterName  From check documentation:  Checks that interface type parameter names conform to a specified pattern.  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java class MyClass{     interface FirstInterface {} // OK     interface SecondInterface {} // violation, name 't' must match pattern '^[A-Z]$' }  record MyRecord() {     interface FirstInterface {} // OK     interface SecondInterface {} // violation, name 't' must match pattern '^[A-Z]$' }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:3:31: Name 't' must match pattern '^[A-Z]$'. [InterfaceTypeParameterName] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:8:31: Name 't' must match pattern '^[A-Z]$'. [InterfaceTypeParameterName] Audit done. Checkstyle ends with 2 errors. ``` This check works as intended inside the body of a record declaration, so I think we can close this issue.","closed","","nick-mancuso","2020-07-16T16:27:56Z","2020-07-18T16:21:08Z"
"","8513","New check RecordTypeParameterNameCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#ClassTypeParameterName  From check documentation: _Checks that class type parameter names conform to a specified pattern._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java class MyClass1 {} // OK class MyClass2 {} // OK class MyClass3 {} // violation, the class type parameter // name should match the regular expression ""^[a-zA-Z]$""  record MyRecord1 (){} // OK record MyRecord2 (){} // OK record MyRecord3() {} // should be a violation, the class type parameter // name should match the regular expression ""^[a-zA-Z]$""  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:3:16: Name 'abc' must match pattern '^[a-zA-Z]$'. [ClassTypeParameterName] Audit done. Checkstyle ends with 1 errors.  ``` We need to add support for record definitions to this check.","closed","new module,","nick-mancuso","2020-07-16T16:19:01Z","2020-08-12T19:23:49Z"
"","8512","Java14 Full Records Support Check Validation: AbstractClassNameCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#AbstractClassName  From check documentation:  _Ensures that the names of abstract classes conforming to some regular expression and check that abstract modifier exists._  ``` ➜  full-record-grammar cat TestClass.java  abstract class AbstractFirstClass {} // OK abstract class SecondClass {} // violation, it should match pattern ""^Abstract.+$"" class AbstractThirdClass {} // violation, must be declared 'abstract' class FourthClass {} // OK abstract record AbstractRecord() {}    ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java TestClass.java:5: error: modifier abstract not allowed here abstract record AbstractRecord() {}          ^ Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. 1 error  ```  So, a record cannot be abstract.  We must check that this check still functions as expected when abstract classes are declared inside of a record definition:  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java                                                                 record AbstractRecord() {     abstract class AbstractFirstClass {} // OK     abstract class SecondClass {} // violation, it should match pattern ""^Abstract.+$""     class AbstractThirdClass {} // violation, must be declared 'abstract'     class FourthClass {} // OK }    ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:3:5: Name 'SecondClass' must match pattern '^Abstract.+$'. [AbstractClassName] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:4:5: Class 'AbstractThirdClass' must be declared as 'abstract'. [AbstractClassName] Audit done. Checkstyle ends with 2 errors.  ``` This check works as expected, so I think we can close this one.","closed","","nick-mancuso","2020-07-16T16:11:10Z","2020-07-18T16:17:05Z"
"","8511","Java14 Full Records Support Check Validation: AbbreviationAsWordInNameCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#AbbreviationAsWordInName  From check documentation: _Validates abbreviations (consecutive capital letters) length in identifier name, it also allows to enforce camel case naming. Please read more at Google Style Guide to get to know how to avoid long abbreviations in names._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java class TestASDFClass { // violation     static int ASDFG = 2; // static ignored     void FOOFOO(){} // violation      public TestASDFClass(String STRING) { // violation for param, but this check does not look at                                           // ctors         int ZXCVG = 6; // violation      }  }  record MyASDFRecord1(String STRING) { // should be violation 2x      void FOOFOO(){} // violation      //ctor     public MyASDFRecord1(){ // this check does not look at ctors         this(""string"");         int ZXCVG = 6; // violation     }  }  record MyASDFRecord2() {     static int ZXCVG = 6; // static ignored, all fields in record must be static      //compact ctor     public MyASDFRecord2{         int ASDFG = 2; // violation     }  }    ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:1:7: Abbreviation in name 'TestASDFClass' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:3:10: Abbreviation in name 'FOOFOO' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5:33: Abbreviation in name 'STRING' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:7:13: Abbreviation in name 'ZXCVG' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:15:10: Abbreviation in name 'FOOFOO' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:20:13: Abbreviation in name 'ZXCVG' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:30:13: Abbreviation in name 'ASDFG' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] Audit done. Checkstyle ends with 7 errors.  ```  This check works well within the body of a record definition, but we need to add support for record components and the actual identifier of a record definition.   --------  Summary of fix: New default tokens  TokenTypes.RECORD_DEF, TokenTypes.RECORD_COMPONENT_DEF","closed","new feature,","nick-mancuso","2020-07-16T16:04:56Z","2020-08-02T00:28:04Z"
"","8510","Java14 Full Records Support Check Validation: RedundantModifierCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_modifier.html#RedundantModifier  From check documentation: _Checks for redundant modifiers._  _Rationale: The Java Language Specification strongly discourages the usage of public and abstract for method declarations in interface definitions as a matter of style._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java class TestClass {     public TestClass() {} // violation  }  record MyRecord1(boolean t, boolean f) {     public MyRecord1(){this(true, true);} // violation  }  record MyRecord2() {     public MyRecord2{} // should be violation  }    ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:2:5: Redundant 'public' modifier. [RedundantModifier] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:7:5: Redundant 'public' modifier. [RedundantModifier] Audit done. Checkstyle ends with 2 errors.  ```  This check works as intended within the body of a record definition, but we need to add support for compact constructors.","closed","","nick-mancuso","2020-07-16T15:48:29Z","2020-08-01T13:04:30Z"
"","8509","Java14 Full Records Support Check Validation: ModifierOrderCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_modifier.html#ModifierOrder  From check documentation: _Checks that the order of modifiers conforms to the suggestions in the Java Language specification, § 8.1.1, 8.3.1, 8.4.3 and 9.4. The correct order is:_  - public - protected - private - abstract - default - static - final - transient - volatile - synchronized - native - strictfp  ```  ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java class TestClass {     /** Illegal order of modifiers for variables */     static private boolean sModifierOrderVar = false;      /**      * Illegal order of modifiers for methods. Make sure that the      * first and last modifier from the JLS sequence is used.      */     strictfp private void doStuff() // violation     {     }      /** Single annotation without other modifiers */     @MyAnnotation2 void someMethod() // violation     {     }      /** Illegal order of annotation - must come first */     private @MyAnnotation2 void someMethod2() // violation     {     }      /** Annotation in middle of other modifiers otherwise in correct order */     private @MyAnnotation2 strictfp void someMethod3() // violation     {     }  }  record MyRecord1(boolean t, boolean f) {     /** Illegal order of modifiers for variables */     static private boolean sModifierOrderVar = false; // violation      /**      * Illegal order of modifiers for methods. Make sure that the      * first and last modifier from the JLS sequence is used.      */     strictfp private void doStuff() // violation     {     }      /** Single annotation without other modifiers */     @MyAnnotation2 void someMethod()     {     }      /** Illegal order of annotation - must come first */     private @MyAnnotation2 void someMethod2() // violation     {     }      /** Annotation in middle of other modifiers otherwise in correct order */     private @MyAnnotation2 strictfp void someMethod3() // violation     {     }  }  @interface MyAnnotation2 { }    ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:3:12: 'private' modifier out of order with the JLS suggestions. [ModifierOrder] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:9:14: 'private' modifier out of order with the JLS suggestions. [ModifierOrder] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:19:13: '@MyAnnotation2' annotation modifier does not precede non-annotation modifiers. [ModifierOrder] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:24:13: '@MyAnnotation2' annotation modifier does not precede non-annotation modifiers. [ModifierOrder] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:32:12: 'private' modifier out of order with the JLS suggestions. [ModifierOrder] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:38:14: 'private' modifier out of order with the JLS suggestions. [ModifierOrder] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:48:13: '@MyAnnotation2' annotation modifier does not precede non-annotation modifiers. [ModifierOrder] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:53:13: '@MyAnnotation2' annotation modifier does not precede non-annotation modifiers. [ModifierOrder] Audit done. Checkstyle ends with 8 errors.  ```  This check works as intended within the body of a record definition, so I think we can close this one.","closed","","nick-mancuso","2020-07-16T15:41:18Z","2020-07-18T16:12:14Z"
"","8577","Java14 Full Records Support Check Validation: ClassMemberImpliedModifierCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_modifier.html#ClassMemberImpliedModifier  Sorry, i've missed this issue.  This check should be updated. The `records` are always `static` as `enums` and `interfaces`: ```java public class TestClass {     int field;     public record x() {         public x {             System.out.println(field); // Non-static variable field cannot be referenced from a static context         }     } } ``` The test case should be ```java public class TestClass {     public static interface GoodInterface {} // OK     public interface BadInterface {} // Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier]      public static enum GoodEnum {} // OK     public enum BadEnum {} // Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier]      public static record GoodRecord() {} // OK     public record BadRecord() {} // expected same violation } ``` The check should be updated to support `TokenTypes.RECPRD_DEF`. Also, a new property `violateImpliedStaticOnNestedRecord` (`true` by default) should be added.  _Originally posted by @pbludov in https://github.com/checkstyle/checkstyle/issues/8508#issuecomment-665197697_  CLI ouput:  ``` ➜  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  text-blocks-grammar cat config.xml                         ➜  text-blocks-grammar cat TestClass.java  public class TestClass {     public static interface GoodInterface {     } // OK      public interface BadInterface {     } // Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier]      public static enum GoodEnum {} // OK      public enum BadEnum {} // Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier]      public static record GoodRecord() {     } // OK      public record BadRecord() {     } // expected same violation }  ➜  text-blocks-grammar java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:5:5: Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier] [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:10:5: Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier] Audit done. Checkstyle ends with 2 errors.  ``` I would expect this check to report the missing `static` modifier for `BadRecord(){}`, but it does not.","closed","approved,","nick-mancuso","2020-07-29T18:12:00Z","2020-08-19T18:26:53Z"
"","8507","Java14 Full Records Support Check Validation: ClassMemberImpliedModifierCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_modifier.html#ClassMemberImpliedModifier  From check documentation: _Checks for implicit modifiers on nested types in classes._  _This check is effectively the opposite of RedundantModifier. It checks the modifiers on nested types in classes, ensuring that certain modifiers are explicitly specified even though they are actually redundant._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java class TestClass {     static interface Address1 {  // ok     }      interface Address2 {  // violation     }      static enum Age1 {  // ok         CHILD, ADULT     }      enum Age2 {  // violation         CHILD, ADULT     } }  record MyRecord1(boolean t, boolean f) {     static interface Address1 {  // ok     }      interface Address2 {  // should be violation     }      static enum Age1 {  // ok         CHILD, ADULT     }      enum Age2 {  // should be violation         CHILD, ADULT     } }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5:5: Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:12:5: Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier] Audit done. Checkstyle ends with 2 errors.  ``` This check needs to have support for record definitions.","closed","approved,","nick-mancuso","2020-07-16T15:22:47Z","2020-08-20T21:07:31Z"
"","8522","Java14 Full Records Support Check Validation: UncommentedMainCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_misc.html#UncommentedMain  From check documentation: _Detects uncommented main methods._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestRecord.java  Note: TestRecord.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestRecord.java                                                                 public record TestRecord() {      public static void main (String... args) { // should be violation         System.out.println(""no comments here!"");     } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.  ```  We need to add support for record defintions to this check.","closed","approved,","nick-mancuso","2020-07-16T18:26:07Z","2020-08-04T04:13:44Z"
"","8516","Java14 Full Records Support Check Validation: OuterTypeFilenameCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_misc.html#OuterTypeFilename  From check documentation: _Checks that the outer type name and the file name match. For example, the class Foo must be in a file named Foo.java._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java record MyTestRecord() {} class MyTestClass {} ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:2:1: The name of the outer type and the file do not match. [OuterTypeFilename] Audit done. Checkstyle ends with 1 errors.  ``` We need to add support for record definitions to this check.","closed","approved,","nick-mancuso","2020-07-16T16:42:12Z","2020-08-02T01:38:20Z"
"","8487","Java14 Full Records Support Check Validation: FinalParametersCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_misc.html#FinalParameters  From check documentation: _Checks that parameters for methods, constructors, catch and for-each blocks are final. Interface, abstract, and native methods are not checked: the final keyword does not make sense for interface, abstract, and native method parameters as there is no code that could modify the parameter._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java import javax.swing.*; import java.awt.event.ActionEvent;  public class TestClass {      record InputFinalParametersRecord() {         /**          * compact constructor          */         public InputFinalParametersRecord{} // has no parameters          /**          * non final param constructor          */         InputFinalParametersRecord(String s) { // violation             this();         }          /**          * non final param constructor          */         InputFinalParametersRecord(final Integer i) { // ok             this();          }          /**          * final param constructor with annotation          */         InputFinalParametersRecord(final @MyAnnotation3 Class i) { // ok             this();          }          /**          * non-final param constructor with annotation          */         InputFinalParametersRecord(@MyAnnotation3 Boolean i) { // violation             this();          }          /**          * mixed          */         InputFinalParametersRecord(String s, final Integer i) { // violation             this();          }          /**          * no param method          */         void method() { // ok         }          /**          * non final param method          */         void method(String s) { // violation         }          /**          * interface methods should not be flagged.          */         interface TestInterface {  // ok             void method(String s);         }          /**          * methods in anonymous inner classes          */         void holder() {             Action a = new AbstractAction() {                 public void actionPerformed(ActionEvent e) { // violation                 }                  void somethingElse(@MyAnnotation3 ActionEvent e) { // violation                 }             };              Action b = new AbstractAction() {                 public void actionPerformed(final ActionEvent e) { // ok                 }                  void somethingElse(@MyAnnotation3 final ActionEvent e) { // ok                 }             };         }          /**          * methods with complicated types of the parameters.          */         void methodA(java.lang.String aParam) { // violation         }          void methodB(String[] args) { // violation         }          void methodC(java.lang.String[] args) { // violation         }      }     @interface MyAnnotation3 {     }   }   ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:15:36: Parameter s should be final. [FinalParameters] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:38:36: Parameter i should be final. [FinalParameters] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:46:36: Parameter s should be final. [FinalParameters] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:60:21: Parameter s should be final. [FinalParameters] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:75:45: Parameter e should be final. [FinalParameters] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:78:36: Parameter e should be final. [FinalParameters] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:94:22: Parameter aParam should be final. [FinalParameters] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:97:22: Parameter args should be final. [FinalParameters] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:100:22: Parameter args should be final. [FinalParameters] Audit done. Checkstyle ends with 9 errors.  ```  We have no need to check record components; they are implicitly final.  This check works as intended, so I think we can close this one.","closed","","nick-mancuso","2020-07-16T01:21:43Z","2020-07-18T19:07:44Z"
"","8489","Java14 Full Records Support Check Validation: CommentsIndentationCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_misc.html#CommentsIndentation  From check documentation: _Controls the indentation between comments and surrounding code. Comments are indented at the same level as the surrounding code._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java class TestClass {     public record MyRecord(int x) {         public void myMethod(){             String breaks = ""J""             // violation (comment should have the same indentation level as line 6)                 + ""A""                 // it is OK                 + ""V""                 + ""A""             // it is OK             ;         }     }      public record MyOtherRecord() {    // comment    //  block    // violation (comment should have the same indentation level as line 19)     }             ///////////// violation, should be same as line 21     public record myOtherOtherRecord () {      } }   ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5:13: Comment has incorrect indentation level 12, expected is 16, indentation should be the same level as line 6. [CommentsIndentation] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:18:4: Comment has incorrect indentation level 3, expected is 4, indentation should be the same level as line 19. [CommentsIndentation] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:20:13: Comment has incorrect indentation level 12, expected is 4, indentation should be the same level as line 21. [CommentsIndentation] Audit done. Checkstyle ends with 3 errors.   ```  This check works as intended, so I think we can close this one.","closed","approved,","nick-mancuso","2020-07-16T03:52:47Z","2020-08-22T15:17:09Z"
"","8506","Java14 Full Records Support Check Validation: NPathComplexityCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_metrics.html#NPathComplexity  From check documentation: Checks the NPATH complexity against a specified limit.  _The NPATH metric computes the number of possible execution paths through a function(method). It takes into account the nesting of conditional statements and multi-part boolean expressions (A && B, C || D, E ? F :G and their combinations)._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java  class TestClass {      // in method, NP=2     public void foo() { // violation         //NP(while-statement) = (while-range=1) + (expr=0) + 1 = 2         while (true) {             Runnable runnable = new Runnable() {                 // NP = 2                 public void run() { // violation                     // NP(while-statement) = (while-range=1) + (expr=0) + 1 = 2                     while (true) {                     }                 }             };              new Thread(runnable).start();         }     }      // in ctor NP=3     public TestClass() { // violation         int i = 1;         // NP = (if-range=1) + (else-range=2) + 0 = 3         if (System.currentTimeMillis() == 0) {             // NP(else-range) = (if-range=1) + (else-range=1) + (expr=0) = 2         } else if (System.currentTimeMillis() == 0) {         } else {         }     }  }  // in compact ctor, NP=3 record MyRecord1(boolean t, boolean f) {     public MyRecord1 { // should be violation         int i = 1;         // NP = (if-range=1) + (else-range=2) + 0 = 3         if (System.currentTimeMillis() == 0) {             // NP(else-range) = (if-range=1) + (else-range=1) + (expr=0) = 2         } else if (System.currentTimeMillis() == 0) {         } else {         }     } }  // in ctor NP=3 record MyRecord2(boolean a, boolean b) {     MyRecord2() { // violation         this(true, false);         int i = 1;         // NP = (if-range=1) + (else-range=2) + 0 = 3         if (System.currentTimeMillis() == 0) {             // NP(else-range) = (if-range=1) + (else-range=1) + (expr=0) = 2         } else if (System.currentTimeMillis() == 0) {         } else {         }     } }  // in method record MyRecord3(boolean a, boolean b) {     // NP = 2     public void foo() { // violation         //NP(while-statement) = (while-range=1) + (expr=0) + 1 = 2         while (true) {             Runnable runnable = new Runnable() {                 // NP = 2                 public void run() { // violation                     // NP(while-statement) = (while-range=1) + (expr=0) + 1 = 2                     while (true) {                     }                 }             };              new Thread(runnable).start();         }     } }        ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5:5: NPath Complexity is 2 (max allowed is 1). [NPathComplexity] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:10:17: NPath Complexity is 2 (max allowed is 1). [NPathComplexity] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:22:5: NPath Complexity is 3 (max allowed is 1). [NPathComplexity] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:49:5: NPath Complexity is 3 (max allowed is 1). [NPathComplexity] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:64:5: NPath Complexity is 2 (max allowed is 1). [NPathComplexity] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:69:17: NPath Complexity is 2 (max allowed is 1). [NPathComplexity] Audit done. Checkstyle ends with 6 errors.   ```  This check functions as intended within record definition bodies, but does not work within compact constructors.  We need to update this check.","closed","approved,","nick-mancuso","2020-07-16T15:17:16Z","2020-08-02T00:21:21Z"
"","8505","Java14 Full Records Support Check Validation: JavaNCSSCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_metrics.html#JavaNCSS  From check documentation: _Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS). This check adheres to the specification for the JavaNCSS-Tool written by Chr. Clemens Lee._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java  class TestClass {      public void foo() { // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test""); // 4      }      public TestClass() { // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test""); // 4      }  }   record MyRecord1(boolean t, boolean f) {     public MyRecord1 { // should be violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test""); // 4      } }  record MyRecord2(boolean a, boolean b) {     MyRecord2() { // violation         this(true, false);         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test""); // 4      } }  record MyRecord3(boolean a, boolean b) {     public void foo() { // violation         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test"");         System.out.println(""test""); // 4      } }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:4:5: NCSS for this method is 5 (max allowed is 3). [JavaNCSS] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:12:5: NCSS for this method is 5 (max allowed is 3). [JavaNCSS] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:34:5: NCSS for this method is 6 (max allowed is 3). [JavaNCSS] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:45:5: NCSS for this method is 5 (max allowed is 3). [JavaNCSS] Audit done. Checkstyle ends with 4 errors.  ``` This check still works inside of record defintions, but we need to add support for compact constructors.  -------  Final fix summary: new property is created","closed","new feature,","nick-mancuso","2020-07-16T15:07:25Z","2020-08-12T06:18:50Z"
"","8504","Java14 Full Records Support Check Validation: CyclomaticComplexityCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_metrics.html#CyclomaticComplexity  From check documentation: _Checks cyclomatic complexity against a specified limit. It is a measure of the minimum number of possible paths through the source and therefore the number of required tests, it is not a about quality of code! It is only applied to methods, c-tors, static initializers and instance initializers._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java  class TestClass {     public void foo() { // violation, method         int a = 1;         int b = 1;         int c = 1;         int d = 1;         int n = 8;         if (a == 1) { // 2, if         } else if (a == b // 3, if                 && a == c) { // 4, && operator             if (c == 2) { // 5, if             }         } else if (a == d) { // 6, if             try {             } catch (Exception e) { // 7, catch             }         } else {             switch (n) {                 case 1: // 8, case                     break;                 case 2: // 9, case                     break;                 case 3: // 10, case                     break;                 default:                     break;             }         }         d = a < 0 ? -1 : 1; // 11, ternary operator     }      public TestClass() { // violation, ctor         int a = 1;         int b = 1;         int c = 1;         int d = 1;         int n = 8;         if (a == 1) { // 2, if         } else if (a == b // 3, if                 && a == c) { // 4, && operator             if (c == 2) { // 5, if             }         } else if (a == d) { // 6, if             try {             } catch (Exception e) { // 7, catch             }         } else {             switch (n) {                 case 1: // 8, case                     break;                 case 2: // 9, case                     break;                 case 3: // 10, case                     break;                 default:                     break;             }         }         d = a < 0 ? -1 : 1; // 11, ternary operator     }  }   record MyRecord1(boolean t, boolean f) {     public MyRecord1 { // should be violation, compact ctor         int a = 1;         int b = 1;         int c = 1;         int d = 1;         int n = 8;         if (a == 1) { // 2, if         } else if (a == b // 3, if                 && a == c) { // 4, && operator             if (c == 2) { // 5, if             }         } else if (a == d) { // 6, if             try {             } catch (Exception e) { // 7, catch             }         } else {             switch (n) {                 case 1: // 8, case                     break;                 case 2: // 9, case                     break;                 case 3: // 10, case                     break;                 default:                     break;             }         }         d = a < 0 ? -1 : 1; // 11, ternary operator     } }  record MyRecord2(boolean a, boolean b) {     MyRecord2() { // violation, ctor         this(true, true);         int a = 1;         int b = 1;         int c = 1;         int d = 1;         int n = 8;         if (a == 1) { // 2, if         } else if (a == b // 3, if                 && a == c) { // 4, && operator             if (c == 2) { // 5, if             }         } else if (a == d) { // 6, if             try {             } catch (Exception e) { // 7, catch             }         } else {             switch (n) {                 case 1: // 8, case                     break;                 case 2: // 9, case                     break;                 case 3: // 10, case                     break;                 default:                     break;             }         }         d = a < 0 ? -1 : 1; // 11, ternary operator     } }  record MyRecord3(boolean a, boolean b) {     public void foo() { // violation, function declaration         int a = 1;         int b = 1;         int c = 1;         int d = 1;         int n = 8;         if (a == 1) { // 2, if         } else if (a == b // 3, if                 && a == c) { // 4, && operator             if (c == 2) { // 5, if             }         } else if (a == d) { // 6, if             try {             } catch (Exception e) { // 7, catch             }         } else {             switch (n) {                 case 1: // 8, case                     break;                 case 2: // 9, case                     break;                 case 3: // 10, case                     break;                 default:                     break;             }         }         d = a < 0 ? -1 : 1; // 11, ternary operator     } }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:3:5: Cyclomatic Complexity is 11 (max allowed is 10). [CyclomaticComplexity] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:33:5: Cyclomatic Complexity is 11 (max allowed is 10). [CyclomaticComplexity] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:99:5: Cyclomatic Complexity is 11 (max allowed is 10). [CyclomaticComplexity] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:132:5: Cyclomatic Complexity is 11 (max allowed is 10). [CyclomaticComplexity] Audit done. Checkstyle ends with 4 errors.  ``` We can see that this check works within the body of a record definition, but we need to add support for compact constructors.","closed","approved,","nick-mancuso","2020-07-16T14:53:37Z","2020-08-08T17:00:52Z"
"","8503","Java14 Full Records Support Check Validation: ClassFanOutComplexityCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_metrics.html#ClassFanOutComplexity  From check documentation: _Checks the number of other classes a given class relies on. Also the square of this has been shown to indicate the amount of maintenance required in functional programs (on a file basis) at least._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java import javax.naming.NamingException; import java.util.ArrayList; import java.util.HashMap; import java.util.HashSet; import java.util.List; import java.util.Map; import java.util.Set;  class TestClass { // violation     private class InnerClass {         public List _list = new ArrayList();     }      private class AnotherInnerClass {         public String _string = """";     }      public Set _set = /*block comment*/new HashSet();     public Map _map = new HashMap();     public String _string = """";     public int[] _intArray = new int[0];     public InnerClass _innerClass;     public AnotherInnerClass _anotherInnerClass;      public void foo() throws NamingException {     } }  record MyRecord1(boolean a, boolean b) { // should be violation     private class InnerClass {         public List _list = new ArrayList();     }      private class AnotherInnerClass {         public String _string = """";     }     public static Set _set = /*block comment*/new HashSet();    public static Map _map = new HashMap();    public static String _string = """";    public static int[] _intArray = new int[0];    public static InnerClass _innerClass;    public static AnotherInnerClass _anotherInnerClass;      public void foo() throws NamingException {     }  }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:9:1: Class Fan-Out Complexity is 3 (max allowed is 2). [ClassFanOutComplexity] Audit done. Checkstyle ends with 1 errors.  ``` This check does not work with record definitions, so we will need to add support for record syntax to this check.   This check is not configurable to target only classes or only interfaces, or enums or annotations. So addition of record is fine.","closed","approved,","nick-mancuso","2020-07-16T14:33:07Z","2020-08-21T13:59:11Z"
"","8502","Java14 Full Records Support Check Validation: ClassDataAbstractionCouplingCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_metrics.html#ClassDataAbstractionCoupling  From check documentation: _Measures the number of instantiations of other classes within the given class. This type of coupling is not caused by inheritance or the object oriented paradigm. Generally speaking, any data type with other data types as members or local variable that is an instantiation (object) of another class has data abstraction coupling (DAC). The higher the DAC, the more complex the structure of the class._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses or overrides a deprecated API. Note: Recompile with -Xlint:deprecation for details. Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java import javax.swing.table.TableCellEditor; import javax.swing.table.TableModel; import java.sql.Time; import java.util.Date; import java.util.HashMap; import java.util.HashSet; import java.util.Map; import java.util.Set;  class TestClass {     Date date = new Date(); // Counted, 1     Time time = new Time(2,2,2); // violation } record MyRecord1(boolean a, boolean b) {      private boolean myBool() {         Date date = new Date(); // Counted, 1         Time time = new Time(2,2,2); // should be violation         return true;         }  }  record MyRecord2(String myString, boolean a, boolean b) {      // in compact ctor     public MyRecord2 {         Date date = new Date(); // Counted, 1         Time time = new Time(2, 2, 2); // should be violation     } }  record MyRecord3(int x) {      // in ctor     MyRecord3(){         this(4);         Date date = new Date(); // Counted, 1         Time time = new Time(2,2,2); // should be violation      } }  record MyRecord4(int y) {     private record MyRecord5(int z) {         static Set set = new HashSet(); // HashSet ignored due to default excludedClasses property         static Map map = new HashMap(); // HashMap ignored due to default excludedClasses property         static Date date = new Date(); // Counted, 1         static Time time = new Time(); // should be violation         static Place place = new Place(); // should be violation      }     static class Time{}     static class Date{}     static class Place{}  }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:10:1: Class Data Abstraction Coupling is 2 (max allowed is 1) classes [Date, Time]. [ClassDataAbstractionCoupling] Audit done. Checkstyle ends with 1 error ``` This check does not work at all with record definitions, so we need to update this check.","closed","approved,","nick-mancuso","2020-07-16T14:19:17Z","2020-08-22T15:20:02Z"
"","8501","Java14 Full Records Support Check Validation: BooleanExpressionComplexityCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_metrics.html#BooleanExpressionComplexity  From check documentation: Restricts the number of boolean operators (&&, ||, &, | and ^) in an expression.   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java // as fields record MyRecord1(boolean a, boolean b) {      private boolean myBool() {        return  (a & b) ^ (a || b) | a; // violation     }  }  record MyRecord2(String myString, boolean a, boolean b) {      // in compact ctor     public MyRecord2{         boolean d = (a & b) ^ (a || b) | a; // should be violation     } }  record MyRecord3(int x) {      // in ctor     MyRecord3(){         this(3);         boolean b = true;         boolean a = true;         boolean d = (a & b) ^ (a || b) | a; // violation     } }  record MyRecord4(int y) {     private record MyRecord5(int z) {         // in nested record in compact ctor         public MyRecord5{             boolean b = false;             boolean a = true;             boolean d = (a & b) ^ (a || b) | a; // should be violation         }     }  }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5:8: Boolean expression complexity is 4 (max allowed is 3). [BooleanExpressionComplexity] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:25:19: Boolean expression complexity is 4 (max allowed is 3). [BooleanExpressionComplexity] Audit done. Checkstyle ends with 2 errors. ```  We just need to add support for compact constructors to this check, since it works well in the body of a record definition.","closed","approved,","nick-mancuso","2020-07-16T13:36:46Z","2020-08-08T18:35:18Z"
"","8497","Java14 Full Records Support Check Validation: MissingJavadocMethodCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#MissingJavadocMethod  From check documentation: _Checks for missing Javadoc comments for a method or constructor. The scope to verify is specified using the Scope class and defaults to Scope.PUBLIC. To verify another scope, set property scope to a different scope._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                                                                       ➜  full-record-grammar cat TestClass.java public class TestClass {     public record MyRecord(Integer number) {         private static int mNumber;          // not javadoc         public void setNumber(final int number)         {             mNumber = number;         } // violation          public int getNumber()         {             return mNumber;         }// violation          public void setNumber1()         {             mNumber = mNumber;         } // violation     }      public record MySecondRecord() {         // not a javadoc comment on compact ctor         public MySecondRecord{} // should be violation     }      public record MyThirdRecord() {         // not a javadoc comment on ctor         public MyThirdRecord(){} // violation     }      public void setNumber1() // violation     {      }  }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:6:9: Missing a Javadoc comment. [MissingJavadocMethod] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:11:9: Missing a Javadoc comment. [MissingJavadocMethod] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:16:9: Missing a Javadoc comment. [MissingJavadocMethod] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:29:9: Missing a Javadoc comment. [MissingJavadocMethod] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:32:5: Missing a Javadoc comment. [MissingJavadocMethod] Audit done. Checkstyle ends with 5 errors. ``` We see that this check works within the body of record definitions, but does not work on compact constructors.  We need to add support for compact constructors to this check.","closed","approved,","nick-mancuso","2020-07-16T12:55:26Z","2020-08-22T15:05:23Z"
"","8493","Java14 Full Records Support Check Validation: JavadocStyleCheck","child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#JavadocStyle  From check documentation: _Validates Javadoc comments to help ensure they are well formed._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java class TestClass {      public record MyRecord() {          /** This Javadoc is missing an ending period */ // violation         private static String second;          /**          * We don't want {@link com.puppycrawl.tools.checkstyle.checks.JavadocStyleCheck}          * tags to stop the scan for the end of sentence.          * @see Something          */         public MyRecord()         {         }          /**          * This is ok!          */         private void method1()         {         }          /** // violation          * This should fail even.though.there are embedded periods          */         private void method4()         {         }          /**          * Test HTML in Javadoc comment          *           * This guy is missing end of bold tag // violation          * The dt and dd don't require end tags.          *           * Extra tag shouldn't be here // violation          * this tag isn't supported in Javadoc // violation          * @param arg1 dummy. // violation          */         private void method5(int arg1)         {         }     }      /**      * @param a A parameter      */     public record MySecondRecord() {         static String props = """";         /** // violation          * Public check should fail // violation and line below, too          * should fail <          */         public void method8()         {         }     }      /**      */     public record MyThirdRecord(String myString) {         // should report empty javadoc // should be violation     }      public record MyFourthRecord(String myString) {         /**          * This Javadoc contains unclosed tag.          * unclosed 'code' tag // violation          */         private static void unclosedTag(){             System.out.println(""stuff"");         }         public MyFourthRecord {             /**              * No period at the end of this sentence // violation              */             String myOtherString = ""mystring"";         }     }      public record MyFifthRecord() {         /**          * No period here on compact ctor // should be violation          */         public MyFifthRecord{}     } }   ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5: First sentence should end with a period. [JavadocStyle] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:24: First sentence should end with a period. [JavadocStyle] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:34:16: Unclosed HTML tag found: This guy is missing end of bold tag // violation [JavadocStyle] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:37:12: Extra HTML tag found: Extra tag shouldn't be here // violation [JavadocStyle] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:38:54: Extra HTML tag found:  // violation [JavadocStyle] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:39:24: Unclosed HTML tag found: dummy. // violation [JavadocStyle] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:51: First sentence should end with a period. [JavadocStyle] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:52:36: Extra HTML tag found:  // violation and line below, too [JavadocStyle] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:53: Incomplete HTML tag found:          * should fail < [JavadocStyle] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:69:37: Unclosed HTML tag found:  // violation [JavadocStyle] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:75: First sentence should end with a period. [JavadocStyle] Audit done. Checkstyle ends with 11 errors.  ``` We can see that this check works in the body of both record definitions and in the body of compact constructors, but does not work **ON** record definitions and compact constructors.  We need to update this check.","closed","approved,","nick-mancuso","2020-07-16T12:26:07Z","2020-08-22T15:01:43Z"
"","8492","Java14 Full Records Support Check Validation: JavadocMethodCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#JavadocMethod  From documentation: _Checks the Javadoc of a method or constructor. The scope to verify is specified using the Scope class and defaults to Scope.PRIVATE. To verify another scope, set property scope to a different scope._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java class TestClass {      // methods     public record MyRecord() {         /**          * exception is explitly thrown in code missed in javadoc // should be violation          * @param properties some value          * @throws java.lang.IllegalStateException when argument is wrong // ok          */         public void doSomething4(String properties) {             // here is NPE possible             if (properties.charAt(0) == 0) {                 throw new IllegalArgumentException(""cannot have char with code 0"");             }         }          /**          * exception is explitly thrown in code missed in javadoc // should be violation          * @param properties some value          * @throws java.lang.IllegalStateException when argument is wrong // ok          */         public void doSomething5(String properties) {             // here is NPE possible             if (properties.charAt(0) == 0) {                 throw new java.lang.IllegalArgumentException(""cannot have char with code 0"");             }         }     }      // static field, compact ctor     public record MySecondRecord() {         static String props = """";          /**          * exception is explitly thrown in code missed in javadoc // should be violation          * @param properties some value          * @throws java.lang.IllegalStateException when argument is wrong // ok          */         public MySecondRecord {             // here is NPE possible             if (props.charAt(0) == 0) {                 throw new IllegalArgumentException(""cannot have char with code 0"");             }         }     }      // Record component, compact ctor     public record MyThirdRecord(String myString) {         /**          * exception is explitly thrown in code missed in javadoc // should be violation          * @param properties some value          * @throws java.lang.IllegalStateException when argument is wrong // ok          */         public MyThirdRecord {             // here is NPE possible             if (myString.charAt(0) == 0) {                 throw new IllegalArgumentException(""cannot have char with code 0"");             }         }     }      // Record component, ctor     public record MyFourthRecord(String myString) {         /**          * exception is explitly thrown in code missed in javadoc // shoiuld be  violation          * @param properties some value // violation          * @throws java.lang.IllegalStateException when argument is wrong // ok          */         public MyFourthRecord(int myInt) { // violation             this(""my string"");             // here is NPE possible             if (myString.charAt(0) == 0) {                 throw new IllegalArgumentException(""cannot have char with code 0"");             }         }     } }   ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:66:12: Unused @param tag for 'properties'. [JavadocMethod] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:69:35: Expected @param tag for 'myInt'. [JavadocMethod] Audit done. Checkstyle ends with 2 errors. ``` So, we can see that this check does not work in record definitions, or for compact constructors, so we will need to add support for records syntax to this check.","closed","approved,","nick-mancuso","2020-07-16T12:04:51Z","2020-08-22T15:13:15Z"
"","8490","Java14 Full Records Support Check Validation: AtclauseOrderCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#AtclauseOrder  From check documentation: _Checks the order of javadoc block-tags or javadoc tags._  Needed the annotation `@deprecated` to compile.  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                                   ➜  full-record-grammar cat TestClass.java import java.io.Serializable;  class TestClass {     public record MyRecord(int x) implements Serializable {         private static final long serialVersionUID = 3928773301716751506L;          /**          * Some text.          * @return Some text.          * @deprecated Some text. // should be a violation, but doesn't work w/ anno          * @param aString Some text. // should be a violation, but doesn't work w/ anno          * @throws Exception Some text.          */         @Deprecated         String method(String aString) throws Exception         {             return ""null"";         }          /**          * Some text.          * @throws Exception Some text.          * @return Some text. // violation          * @param aString Some text. // violation          */         String method1(String aString) throws Exception         {             return ""null"";         }          /**          * Some text.          * @serialData Some javadoc.          * @param aString Some text. // violation          * @throws Exception Some text. // violation          */         void method2(String aString) throws Exception {}          /**          * Some text.          * @deprecated Some text.          * @throws Exception Some text. // should be a violation, but doesn't work w/ anno          */         @Deprecated         void method3() throws Exception {}     }      }     /**      * Some javadoc.      *      * @version 1.0      * @since Some javadoc.      * @author max // should be a violation      */     public record myOtherOtherRecord () {      } }   ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:23: At-clauses have to appear in the order '[@author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated]'. [AtclauseOrder] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:24: At-clauses have to appear in the order '[@author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated]'. [AtclauseOrder] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:34: At-clauses have to appear in the order '[@author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated]'. [AtclauseOrder] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:35: At-clauses have to appear in the order '[@author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated]'. [AtclauseOrder] Audit done. Checkstyle ends with 4 errors.   ``` This check does function as intended when parsing record javadocs (namely the body of the record definition, but the check is not working for javadocs on record definitions so we need to add support for records syntax to this check.","closed","approved,","nick-mancuso","2020-07-16T04:09:46Z","2020-08-24T02:08:33Z"
"","8488","Java14 Full Records Support Check Validation: UnusedImportsCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_imports.html#UnusedImports  From check documentation: _Checks for unused import statements. Checkstyle uses a simple but very reliable algorithm to report on unused import statements. An import statement is considered unused if:_  - It is not referenced in the file. The algorithm does not support wild-card imports like import java.io.*;. Most IDE's provide very sophisticated checks for imports that handle wild-card imports. - It is a duplicate of another import. This is when a class is imported more than once. - The class imported is from the java.lang package. For example importing java.lang.String. - The class imported is from the same package. - Optionally: it is referenced in Javadoc comments. This check is on by default, but it is considered bad practice to introduce a compile time dependency for documentation purposes only. As an example, the import java.util.List would be considered referenced with the Javadoc comment {@link List}. The alternative to avoid introducing a compile time dependency would be to write the Javadoc comment as {@link java.util.List}.  ```  ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat config.xml                  ➜  full-record-grammar cat TestClass.java import java.awt.Component; // ok import java.util.List; // violation import java.lang.*; // ok import java.util.Iterator; // ok import java.util.Enumeration; // violation import java.util.Arrays; // ok import javax.swing.JToolBar; // violation import javax.swing.JToggleButton; // violation  import javax.swing.BorderFactory; // violation  class TestClass {     public record MyRecord() {         private static Object Component; // ok         static Arrays arrays; // ok         static Iterator it; //ok     } }   ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:2:8: Unused import - java.util.List. [UnusedImports] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5:8: Unused import - java.util.Enumeration. [UnusedImports] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:7:8: Unused import - javax.swing.JToolBar. [UnusedImports] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:8:8: Unused import - javax.swing.JToggleButton. [UnusedImports] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:10:8: Unused import - javax.swing.BorderFactory. [UnusedImports] Audit done. Checkstyle ends with 5 errors.  ``` This check works as intended, so I think we can close this issue.","closed","approved,","nick-mancuso","2020-07-16T01:35:00Z","2020-08-02T00:20:16Z"
"","8486","Java14 Full Records Support Check Validation: VisibilityModifierCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_design.html#VisibilityModifier  From check documentation: _Checks visibility of class members. Only static final, immutable or annotated by specified annotation members may be public; other class members must be private unless the property protectedAllowed or packageAllowed is set._   ``` ➜  full-record-grammar cat TestClass.java  import java.math.BigDecimal; import java.util.List;  public class TestClass{     public record MyRecord() {         public final int someIntValue; // violation         public final ImmutableSet includes; // violation         public final java.lang.String notes; // violation         public final BigDecimal value; // violation         public final List list; // violation     }      record MyRecord2() {}     public MyRecord2 myRecord2 = new MyRecord2(); // violation  }%                                                                                                                            ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java TestClass.java:6: error: field declaration must be static         public final int someIntValue; // violation                          ^   (consider replacing field with record component) TestClass.java:7: error: field declaration must be static         public final ImmutableSet includes; // violation                                           ^   (consider replacing field with record component) TestClass.java:8: error: field declaration must be static         public final java.lang.String notes; // violation                                       ^   (consider replacing field with record component) TestClass.java:9: error: field declaration must be static         public final BigDecimal value; // violation                                 ^   (consider replacing field with record component) TestClass.java:10: error: field declaration must be static         public final List list; // violation                           ^   (consider replacing field with record component) Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. 5 errors  ``` All fields in a record must be static, so this check doesn't apply to record definition bodies. Let's check that record declarations work:  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestRecord.java Note: TestRecord.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java  Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                       ➜  full-record-grammar cat TestClass.java                                                                 public class TestClass{      record MyRecord2() {}     public MyRecord2 myRecord2 = new MyRecord2(); // violation  }                                                                                                 ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:4:22: Variable 'myRecord2' must be private and have accessor methods. [VisibilityModifier] Audit done. Checkstyle ends with 1 errors.  ```  So, record declarations as fields work as intended with this check.  I think we can close this one.","closed","","nick-mancuso","2020-07-16T01:04:27Z","2020-07-18T19:10:31Z"
"","8485","Java14 Full Records Support Check Validation: OneTopLevelClassCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_design.html#OneTopLevelClass  From check documentation: _Checks that each top-level class, interface, enum or annotation resides in a source file of its own. Official description of a 'top-level' term: 7.6. Top Level Type Declarations. If file doesn't contains public class, interface, enum or annotation, top-level type is the first type in file._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestRecord.java  Note: TestRecord.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestRecord.java                                                                 public record TestRecord() { // ok  } record TestRecord2() { // should be a violation  }                                                                                                                           ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.  ``` We need to add support for records syntax to this check.","closed","approved,","nick-mancuso","2020-07-16T00:38:30Z","2020-08-22T15:28:38Z"
"","8484","Java14 Full Records Support Check Validation: MutableExceptionCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_design.html#MutableException  From documentation: _Ensures that exception classes (classes with names conforming to some regular expression and explicitly extending classes with names conforming to other regular expression) are immutable, that is, that they have only final fields._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java  public class TestClass {      record MyRecord1(){          public class FooException extends Exception {              private final int finalErrorCode;              private int errorCode = 1; // should be violation              private MyRecord2 myRecord2 = new MyRecord2(""my String""); // should be violation               public FooException() {                  finalErrorCode = 1;              }               public class FooExceptionThisIsNot extends RuntimeException {                  private final int finalErrorCode;                  private int errorCode = 1;                  /** constructor */                  public FooExceptionThisIsNot() {                      finalErrorCode = 1;                  }              }          }           public class BarError extends Throwable {              private int errorCode; // should be violation          }      }       public record MyRecord2(String myString){}   } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5:14: The field 'errorCode' must be declared final. [MutableException] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:6:14: The field 'myRecord2' must be declared final. [MutableException] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:23:14: The field 'errorCode' must be declared final. [MutableException] Audit done. Checkstyle ends with 3 errors.  ```  This check works as intended, both within a record definition, and with record declarations, so I think we can close this issue.","closed","","nick-mancuso","2020-07-15T22:45:16Z","2020-07-18T17:56:16Z"
"","8483","Java14 Full Records Support Check Validation: InterfaceIsTypeCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_design.html#InterfaceIsType  From check documentation: _...Use Interfaces only to define types..._  _... it is therefore inappropriate to define an interface that does not contain any methods but only constants.._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass {     record MyRecord(String myString) {     }     interface MyRecordInterface {         MyRecord MY_RECORD = new MyRecord(""my String""); // violation     }     interface MyRecordInterface2 {         MyRecord MY_RECORD = new MyRecord(""my String""); // ok         void myMethod();     } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:4:5: interfaces should describe a type and hence have methods. [InterfaceIsType] Audit done. Checkstyle ends with 1 errors.  ```  We need to make sure that this check also works within the body of a record:  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java  public class TestClass {      record MyRecord1(String myString){          interface myInterface2 {              int y = 5; // should be a violation          }      }       record MyRecord2(String myString){          interface myInterface2 {              int y = 5; //ok              int getMyInt();          }      }  } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:3:10: interfaces should describe a type and hence have methods. [InterfaceIsType] Audit done. Checkstyle ends with 1 errors.  ``` So it does. I think we can close this issue.","closed","","nick-mancuso","2020-07-15T22:25:12Z","2020-07-18T17:52:23Z"
"","8482","Java14 Full Records Support Check Validation: InnerTypeLastCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_design.html#InnerTypeLast  From check documentation: _Checks nested (internal) classes/interfaces are declared at the bottom of the primary (top-level) class after all method and field declarations._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass{     record Test (){         private static String s; // OK         record InnerTest1() {}         public void test() {} // should be violation, method should be declared before inner types.     }      public void test() {} // should be violation, method should be declared before inner types.      record Test3 (){         private static String s; // ok         class InnerTest1 {}         public void test() {} // violation, method should be declared before inner types.     }      record Test4 (){         private static String s; // ok         record MyInnerRecord(){}         static Test3 innerRecord = new Test3(); //ok         public void test() {}// should be a violation, method should be declared before inner types.     }     record Test5 (){         private static String s; // ok         static Test3 myRecordTest = new Test3(); //ok         public void test() {} // ok     } }%                                                                                                                            ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:13:9: Fields and methods should be before inner classes. [InnerTypeLast] Audit done. Checkstyle ends with 1 errors.   ``` We need to add support for record declarations **and** bodies to this check.","closed","approved,","nick-mancuso","2020-07-15T18:58:03Z","2020-08-22T15:33:26Z"
"","8481","Java14 Full Records Support Check Validation: HideUtilityClassConstructorCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_design.html#HideUtilityClassConstructor  From check documentation: _Makes sure that utility classes (classes that contain only static methods or fields in their API) do not have a public constructor._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java  public class TestClass{     public record MyRecord1() { // ok, no constructor declared         static int myInt = 2;         static void myMethod(){             System.out.println(""my method"");         }     }      public record MyRecord2() {  // should this be a violation?          static int myInt = 2;          public MyRecord2{} // compact public constructor          static void myMethod(){              System.out.println(""my method"");          }      }      public record MyRecord3() { // should this be a violation?         static int myInt = 2;         public MyRecord3(){} // canonical constructor          static void myMethod(){              System.out.println(""my method"");          }      }      public static void main(String... args) {         MyRecord1.myMethod();     } }   ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:1:2: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor] Audit done. Checkstyle ends with 1 errors. ``` I think this check should support record definitions, let's discuss adding support.","closed","","nick-mancuso","2020-07-15T18:28:33Z","2020-07-28T14:20:54Z"
"","8478","Java14 Full Records Support Check Validation: UnnecessarySemicolonInEnumerationCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#UnnecessarySemicolonInEnumeration  From check documentation: _Checks if unnecessary semicolon is in enum definitions. Semicolon is not needed if enum body contains only enum constants._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                   ➜  full-record-grammar cat TestClass.java   public class TestClass{     public record MyRecord1() {         enum One {             A,B; // violation         }         enum Two {             A,B,; // violation         }         enum Three {             A,B(); // violation         }         enum Four {             A,B{}; // violation         }         enum Five {             A,             B             ; // violation         }          enum Normal {             A,             B,             ; // required "";"", no violation             Normal(){}         }         enum NoSemicolon {             A, B // only enum constants, no semicolon required         }     } }   ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java  Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:4:16: Unnecessary semicolon. [UnnecessarySemicolonInEnumeration] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:7:17: Unnecessary semicolon. [UnnecessarySemicolonInEnumeration] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:10:18: Unnecessary semicolon. [UnnecessarySemicolonInEnumeration] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:13:18: Unnecessary semicolon. [UnnecessarySemicolonInEnumeration] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:18:13: Unnecessary semicolon. [UnnecessarySemicolonInEnumeration] Audit done. Checkstyle ends with 5 errors.  ``` This check works as intended, so I think we can close this issue.","closed","","nick-mancuso","2020-07-15T17:49:29Z","2020-07-18T19:29:40Z"
"","8476","Java14 Full Records Support Check Validation: UnnecessarySemicolonAfterTypeMemberDeclarationCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#UnnecessarySemicolonAfterTypeMemberDeclaration  From documentation: _Checks if unnecessary semicolon is used after type member declaration._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 MyRecord.java Note: MyRecord.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat MyRecord.java  public record MyRecord() {      ; // violation, standalone semicolon      static {}; // violation, extra semicolon after init block      static {}; // violation, extra semicolon after static init block      public MyRecord{}; // violation, extra semicolon after compact constructor definition      public MyRecord(Object o){this();}; // violation, extra semicolon after constructor definition      void method() {}; // violation, extra semicolon after method definition      static int field = 10;; // violation, extra semicolon after field declaration       static {          ; // no violation, it is empty statement inside init block      }       static {          ; // no violation, it is empty statement inside static init block      }       void anotherMethod() {          ; // no violation, it is empty statement          if(true); // no violation, it is empty statement      } }; // ok, this check does not apply to outer types   ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml MyRecord.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/MyRecord.java:3:15: Unnecessary semicolon. [UnnecessarySemicolonAfterTypeMemberDeclaration] [ERROR] /home/nick/Desktop/full-record-grammar/MyRecord.java:4:15: Unnecessary semicolon. [UnnecessarySemicolonAfterTypeMemberDeclaration] [ERROR] /home/nick/Desktop/full-record-grammar/MyRecord.java:6:40: Unnecessary semicolon. [UnnecessarySemicolonAfterTypeMemberDeclaration] [ERROR] /home/nick/Desktop/full-record-grammar/MyRecord.java:7:22: Unnecessary semicolon. [UnnecessarySemicolonAfterTypeMemberDeclaration] [ERROR] /home/nick/Desktop/full-record-grammar/MyRecord.java:8:28: Unnecessary semicolon. [UnnecessarySemicolonAfterTypeMemberDeclaration] Audit done. Checkstyle ends with 5 errors.  ``` So, this check works in the body of record definitions, but does not work on compact constructors(line #5).  We need to add support for compact constructors to this check.","closed","approved,","nick-mancuso","2020-07-15T17:31:44Z","2020-08-22T15:40:06Z"
"","8475","Java14 Full Records Support Check Validation: UnnecessarySemicolonAfterOuterTypeDeclarationCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#UnnecessarySemicolonAfterOuterTypeDeclaration  From check documentation: _Checks if unnecessary semicolon is used after type declaration._  ```  ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 MyRecord.java  Note: MyRecord.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat MyRecord.java   public record MyRecord() {          public record MyInnerRecord() {           }; // ok, nested type declarations are ignored in this check }; // should be violation ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml MyRecord.java  Starting audit... Audit done.  ``` This check needs to have support for record definitions added.","closed","approved,","nick-mancuso","2020-07-15T17:21:11Z","2020-08-22T15:38:12Z"
"","8472","Java14 Full Records Support Check Validation: ParameterAssignmentCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#ParameterAssignment  From check documentation: _Disallows assignment of parameters._  This check should not apply to record components, since they are implicitly final. The following does not compile:  ``` ➜  full-record-grammar cat TestClass.java  public class TestClass {     public record MyRecord2(String myString){         public String myString() {             myString = ""my string"";             return myString;         }     } }  ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java TestClass.java:4: error: cannot assign a value to final variable myString             myString = ""my string"";             ^ Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. 1 error ``` Now, we must check the functionality of this check within the body of the record defintion:  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass {     public record MyRecord1() {         static int myInt;         void foo1(int field) {             int i = field; // ok             i++; // ok             field = 0; // violation             field += 1; // violation             field--; // violation         }         void foo3(String field, int field1) {             myInt = (field1 += field.length()); //  violation         }     }      public record MyRecord2(){         public MyRecord2{}         public MyRecord2(String string) {             this();             string = ""my string""; //  violation         }     } }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:7:19: Assignment of parameter 'field' is not allowed. [ParameterAssignment] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:8:19: Assignment of parameter 'field' is not allowed. [ParameterAssignment] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:9:18: Assignment of parameter 'field' is not allowed. [ParameterAssignment] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:12:29: Assignment of parameter 'field1' is not allowed. [ParameterAssignment] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:20:20: Assignment of parameter 'string' is not allowed. [ParameterAssignment] Audit done. Checkstyle ends with 5 errors.  ``` This check does work as intended within the body of a record definition, and does not apply to the new compact constructor (it has no parameters), so I think we can close this issue.","closed","","nick-mancuso","2020-07-15T16:31:26Z","2020-07-18T19:33:39Z"
"","8471","Java14 Full Records Support Check Validation: OverloadMethodsDeclarationOrderCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#OverloadMethodsDeclarationOrder  From check documentation: _Checks that overloaded methods are grouped together. Overloaded methods have the same name but different signatures where the signature can differ by the number of input parameters or type of input parameters or both._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass {     public record MyRecord1() {         public void foo(int i) {} // OK         public void foo(String s) {} // OK         public void notFoo() {} // should be a violation. Has to be after foo(String s, int i)         public void foo(int i, String s) {}         public void foo(String s, int i) {}     }  }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.  ```  This check needs to be updated to support record definitions.","closed","approved,","nick-mancuso","2020-07-15T16:05:36Z","2020-08-25T19:55:57Z"
"","8470","Java14 Full Records Support Check Validation: MissingCtorCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#MissingCtor  From check documentation: _Checks that classes (except abstract ones) define a constructor and don't rely on the default one._  [From JDK issue tracker: ](https://bugs.openjdk.java.net/browse/JDK-8222777)  _It is a common complaint that ""Java is too verbose"" or has too much ""ceremony"". Some of the worst offenders are classes that are nothing more than plain ""data carriers"" that serve as simple aggregates. To write a data carrier class properly, one has to write a lot of low-value, repetitive, error-prone code: constructors, accessors, equals(), hashCode(), toString(), etc..._  So, does it  make sense to apply this check to record declarations, since the aim of the inclusion of records syntax into Java is to eliminate extraneous code, such as constructors? This is the current behavior of this check:  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass { // violation     public record MyRecord1() {         public MyRecord1{ // compact ctor         }     }     public record MyRecord2() {         public MyRecord2(Object o) { // canonical ctor             this();         }     }     public record MyRecord3() { } // no ctor }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:1:1: Class should define a constructor. [MissingCtor] Audit done. Checkstyle ends with 1 errors. ``` I think that this check shouldn't apply to record defintions, and that the current behavior of this check requires no modifications.","closed","","nick-mancuso","2020-07-15T16:00:39Z","2020-07-18T19:49:07Z"
"","8469","Java14 Full Records Support Check Validation: MagicNumberCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#MagicNumber  From check documentation: _Checks that there are no ""magic numbers"" where a magic number is a numeric literal that is not defined as a constant. By default, -1, 0, 1, and 2 are not considered to be magic numbers._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass {     @anno(6) // violation     public record MyRecord() {         private static int myInt = 7; // violation          public MyRecord{             int i = myInt + 1; // no violation, 1 is defined as non-magic             int j = myInt + 8; // violation         }         void foo() {             int i = myInt + 1; // no violation, 1 is defined as non-magic             int j = myInt + 8; // violation         }          public int hashCode() {             return 10;    // violation         }     } } @interface anno {     int value() default 10; // no violation } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:2:11: '6' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:4:36: '7' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:8:29: '8' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:12:29: '8' is a magic number. [MagicNumber] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:16:20: '10' is a magic number. [MagicNumber] Audit done. Checkstyle ends with 5 errors. ``` This check works as intended, I think we can close this issue.","closed","approved,","nick-mancuso","2020-07-15T15:37:03Z","2020-08-20T07:51:53Z"
"","8465","Java14 Full Records Support Check Validation: FinalLocalVariableCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#FinalLocalVariable  From documentation: _Checks that local variables that never have their values changed are declared final. The check can be configured to also check that unchanged parameters are declared final._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass {     public record MyRecord1() {     }     public static void main(String... args){         var record1 = new MyRecord1(); // should be violation         final var record2 = new MyRecord1(); // ok     } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5:13: Variable 'record1' should be declared final. [FinalLocalVariable] Audit done. Checkstyle ends with 1 errors. ``` Also, from Oracle: _The new concept is a record class (usually just called a record). This is an immutable (in the usual “shallow” Java sense) transparent carrier for a fixed set of values known as the record components. Each component gives rise to a final field that holds the provided value and an accessor method to retrieve the value._ So, since record components are final, we have no need to check them like we do with parameters.  I think we can close this one.","closed","","nick-mancuso","2020-07-15T14:17:15Z","2020-07-20T16:49:02Z"
"","8464","Java14 Full Records Support Check Validation: EqualsAvoidNullCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#EqualsAvoidNull  From check  documentation:  Checks that any combination of String literals is on the left side of an equals() comparison. Also checks for String literals assigned to some field (such as someString.equals(anotherString = ""text"")).  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                                                                      ➜  full-record-grammar cat TestClass.java public class TestClass {     public record MyRecord1() {         public boolean stringCheck1 (String toCheck) {             return toCheck.equals(""my string""); // violation         }          public boolean stringCheck2 (String toCheck) {             return ""my string"".equals(toCheck); // ok         }     } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:4:34: String literal expressions should be on the left side of an equals comparison. [EqualsAvoidNull] Audit done. Checkstyle ends with 1 errors.  ``` This check works as intended, i think we can close this issue.","closed","approved,","nick-mancuso","2020-07-15T13:57:17Z","2020-08-01T23:35:16Z"
"","8463","Java14 Full Records Support Check Validation: DeclarationOrderCheck","Child of #8452  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#DeclarationOrder  From check documentation: _Checks that the parts of a class or interface declaration appear in the order suggested by the Code Conventions for the Java Programming Language_  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass {     public record MyRecord1() {             private static int a;             void m(){}             public MyRecord1(){}  // constructor definition in wrong order             private static int b; // instance variable definition in wrong order     }      public record MyRecord2(){         private static int a;         void m(){}         public MyRecord2{}  // compact constructor definition in wrong order, should be violation         private static int b; // instance variable definition in wrong order     } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:5:13: Constructor definition in wrong order. [DeclarationOrder] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:6:13: Static variable definition in wrong order. [DeclarationOrder] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:13:9: Static variable definition in wrong order. [DeclarationOrder] Audit done. Checkstyle ends with 3 errors.  ``` This check works as intended within the body of a record definition, but we need to add support for compact constructors to this check.","closed","approved,","nick-mancuso","2020-07-15T13:44:00Z","2020-08-22T09:13:24Z"
"","8498","Java14 Full Records Support Check Validation: MissingJavadocTypeCheck","Child of #8452  Check documentation: https://checkstyle.org/config_xxxxxx.html#NameOfAffectedCheck  From check documentation: Checks for missing Javadoc comments for class, enum, interface, and annotation interface definitions. The scope to verify is specified using the Scope class and defaults to Scope.PUBLIC. To verify another scope, set property scope to one of the Scope constants.  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java // no javadoc here class TestClass { // violation }  //no javadoc here record MyRecord1() { // should be violation  }  record MyRecord2(String myString) { // should be violation      public MyRecord2{} }  record MyRecord3(int x) { // should be violation     protected record MyRecord4(int y) { // should be violation         private record MyRecord5(int z) { // should be violation          }      } }      ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:2:1: Missing a Javadoc comment. [MissingJavadocType] Audit done. Checkstyle ends with 1 errors.  ``` We see that this check does not work at all on record definitions in any scope, so we need to add support for record syntax to this check.","closed","approved,","nick-mancuso","2020-07-16T13:06:52Z","2020-08-22T15:03:30Z"
"","8499","Java14 Full Records Support Check Validation: WriteTagCheck","Child of #8452  Check documentation: https://checkstyle.org/config_xxxxxx.html#NameOfAffectedCheck  From check documentation: _Requires user defined Javadoc tag to be present in Javadoc comment with defined format. To define the format for a tag, set property tagFormat to a regular expression. Property tagSeverity is used for severity of events when the tag exists._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                                   ➜  full-record-grammar cat TestClass.java /**  * @incomplete  */ class TestClass { // violation }  /**  * @incomplete .// should be violation  */ record MyRecord1() {   }  record MyRecord2(String myString) {      /**      * @incomplete // should be violation      */     public MyRecord2{} }  record MyRecord3(int x) {      /**      * @incomplete // should be violation      */     MyRecord3(){this(3);} }  record MyRecord4(int y) {     private record MyRecord5(int z) {          /**          * @incomplete // should be violation          */         public MyRecord5{}     }  } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:2: Type Javadoc tag @incomplete must match pattern '\S'. [WriteTag] Audit done. Checkstyle ends with 1 errors.  ``` This check does not work at all with record definitions or on compact constructors. We need to update this check.","closed","approved,","nick-mancuso","2020-07-16T13:15:51Z","2020-08-22T15:42:15Z"
"","8520","Java14 Full Records Support Check Validation: OuterTypeNumberCheck","Child of #8452  Check documentation: Checks for the number of types declared at the outer (or root) level in a file.  From check documentation: Checks for the number of types declared at the outer (or root) level in a file.  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java class MyTestClass { }  record MyTestRecord() { }  record MyTestRecord2() { } // should be a violation ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.  ``` This check needs to be updated to support record definitions.","closed","approved,","nick-mancuso","2020-07-16T17:51:33Z","2020-08-08T16:54:49Z"
"","8480","Java14 Full Records Support Check Validation: FinalClassCheck","Child of #8452 Check documentation: https://checkstyle.sourceforge.io/config_design.html#FinalClass  From check documentation: _Checks that a class which has only private constructors is declared as final. Doesn't check for classes nested in interfaces or annotations, as they are always final there._  [From JEP:](https://openjdk.java.net/jeps/384) _A record is implicitly final, and cannot be abstract. These restrictions emphasize that the API of a record is defined solely by its state description, and cannot be enhanced later by another class or record._  So, this check does not apply, but let's check for false positives:  This will not compile, so no need to add compact constructors to this check:  ``` ➜  full-record-grammar cat TestClass.java   public class TestClass{     public record MyRecord1() {         private MyRecord1{}     } }  ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java TestClass.java:3: error: invalid compact constructor in record MyRecord1         private MyRecord1{}                 ^   (canonical constructor must be public) Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. 1 error  ``` Also, compact constructor is always public. So, we need to check canonical constructors: ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java  public class TestClass{     public record MyRecord1() {         private MyRecord1(Object o){this();}     } }   ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:1:2: Class TestClass should be declared as final. [FinalClass] Audit done. Checkstyle ends with 1 errors.  ``` We can see that the only violation is caused by the outer class, as expected.  This check still works as intended, so I think that we can close this issue.","closed","","nick-mancuso","2020-07-15T18:15:37Z","2020-07-18T19:28:07Z"
"","8479","Java14 Full Records Support Check Validation: DesignForExtensionCheck","Child of #8452 Check documentation: https://checkstyle.sourceforge.io/config_design.html#DesignForExtension  From documentation: Checks that classes are designed for extension (subclass creation).  [From JEP:](https://openjdk.java.net/jeps/384) _A record is implicitly final, and cannot be abstract. These restrictions emphasize that the API of a record is defined solely by its state description, and cannot be enhanced later by another class or record._  This check does not apply, but we must make sure that it causes no false posititves:  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java  public class TestClass{     public record MyRecord1() {     } }   ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.  ``` This check causes no false positives, so I think that we can close this issue.","closed","","nick-mancuso","2020-07-15T18:05:31Z","2020-07-18T19:29:16Z"
"","8474","Java14 Full Records Support Check Validation: ReturnCountCheck","Child of #8452 Check documentation: https://checkstyle.sourceforge.io/config_coding.html#ReturnCount  From check documentation: _Restricts the number of return statements in methods, constructors and lambda expressions. Ignores specified methods (equals by default)._  Return statements are not allowed in compact constructors, so this check does not apply to them. ``` ➜  full-record-grammar cat TestClass.java  public class TestClass {     public record MyRecord1() {         public MyRecord1{             return;         }     } }  ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java TestClass.java:3: error: invalid compact constructor in record MyRecord1()         public MyRecord1{                ^   (compact constructor must not have return statements) Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. 1 error ``` Now, to verify that check works:  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                                                                                                                                                                                                                  ➜  full-record-grammar cat TestClass.java import java.util.concurrent.Callable;  public class TestClass {     public record MyRecord1() {         public MyRecord1{} // just here to show that it does not affect check         public boolean equals(Object obj) {             int i = 1;             switch (i) { // ok                 case 1: return true;                 case 2: return true;                 case 3: return true;                 case 4: return true;                 case 5: return true;                 case 6: return true;             }             return false;         }          void foo(int i) { // violation             switch (i) {                 case 1: return;                 case 2: return;                 case 3: return;                 case 4: return;                 case 5: return;                 case 6: return;             }             return;         }         static Runnable fieldWithOneReturnInLambda = () -> { // ok             return;         };          static Callable fieldWithTwoReturnInLambda = () -> { // violation             if (true) return 0;             else return 1;         };          public void method() {             if (true) {                 return; // violation             }         }     } }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:19:9: Return count is 7 (max allowed for void methods/constructors/lambdas is 0). [ReturnCount] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:19:9: Return count is 7 (max allowed for void methods/constructors/lambdas is 1). [ReturnCount] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:30:57: Return count is 1 (max allowed for void methods/constructors/lambdas is 0). [ReturnCount] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:34:66: Return count is 2 (max allowed for non-void methods/lambdas is 1). [ReturnCount] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:39:9: Return count is 1 (max allowed for void methods/constructors/lambdas is 0). [ReturnCount] Audit done. Checkstyle ends with 5 errors. ```  This check works as intended, so I think we can close this issue.","closed","","nick-mancuso","2020-07-15T17:11:54Z","2020-07-18T19:32:07Z"
"","8473","Java14 Full Records Support Check Validation: RequireThisCheck","Child of #8452 Check documentation: https://checkstyle.sourceforge.io/config_coding.html#RequireThis  From documentation: _Checks that references to instance variables and methods of the present object are explicitly of the form ""this.varName"" or ""this.methodName(args)"" and that those references don't rely on the default behavior when ""this."" is absent._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass {     public record MyRecord1() {         static int i; // must be static in record         void method1() {             i = 3; // ok, 'i' is static         }          void method2(int i) {             i++;             this.i = i;             method1(); // should be violation             try {                 this.method1(); // ok, per check documentation             }             catch (RuntimeException e) {                 e.toString();             }             this.i--;              Integer.toString(10);         }           void method3()         {             i = 3; // ok, 'i' is static         }          void method4() {             this.method3(); // ok         }     } }  ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.  ``` We need to add support for record definitions to this check.","closed","approved,","nick-mancuso","2020-07-15T16:46:56Z","2020-08-20T07:52:00Z"
"","8468","Java14 Full Records Support Check Validation: IllegalTypeCheck","Child of #8452 Check documentation: https://checkstyle.sourceforge.io/config_coding.html#IllegalType  From check documentation: _Checks that particular classes or interfaces are never used._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java import java.util.HashMap; import java.util.LinkedHashMap; import java.util.Queue; import java.util.TreeMap;  public class TestClass {     public record MyRecord1() {         static LinkedHashMap lhmap =                 new LinkedHashMap(); // violation         static TreeMap treemap = new TreeMap(); // violation         static HashMap hmap; // violation         static Queue intqueue; // OK         // not allowed in records: java.lang.IllegalArgumentException illegalex;        // not allowed in records: java.util.TreeSet treeset;     }  } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:8:16: Usage of type 'LinkedHashMap' is not allowed. [IllegalType] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:10:16: Usage of type 'TreeMap' is not allowed. [IllegalType] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:11:16: Usage of type 'HashMap' is not allowed. [IllegalType] Audit done. Checkstyle ends with 3 errors. ``` This check works as intended, I think we can close this issue.","closed","approved,","nick-mancuso","2020-07-15T15:20:18Z","2020-08-22T15:31:37Z"
"","8466","Java14 Full Records Support Check Validation: HiddenFieldCheck","child of #8452 Check documentation: https://checkstyle.sourceforge.io/config_coding.html#HiddenField  From check documentation: _Checks that a local variable or a parameter does not shadow a field that is defined in the same class._  A few considerations: ``` ➜  full-record-grammar cat TestClass.java  public class TestClass {     public record MyRecord1(String hiddenField) {         public MyRecord1{             String hiddenField = ""hidden"";         }     } } ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java TestClass.java:4: error: variable hiddenField is already defined in constructor MyRecord1(String)             String hiddenField = ""hidden"";                    ^ Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. 1 error  ```  So, we don't need to check record components.  Then: ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass {     public record MyRecord1() {         private static int myHiddenInt = 2;         public MyRecord1{             int myHiddenInt = 5; // should be violation         }         MyRecord1(String string) {             this();             int myHiddenInt = 6; // should be violation         }     }      static class MyClass{         private static int hiddenField = 5;         MyClass(String string) {             int hiddenField = 10; // violation         }     } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:16:17: 'hiddenField' hides a field. [HiddenField] Audit done. Checkstyle ends with 1 errors.  ``` We need to add support for record definitions to this check.","closed","approved,","nick-mancuso","2020-07-15T14:44:29Z","2020-08-22T15:23:23Z"
"","8462","Java14 Full Records Support Check Validation: CovariantEqualsCheck","Child of #8452 Check documentation: https://checkstyle.sourceforge.io/config_coding.html#CovariantEquals  From the documentation: _Checks that classes which define a covariant equals() method also override method equals(Object)._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass {     public record MyRecord1() {         public boolean equals(String str) { // should be violation             return str.equals(this);         }     }     public record MyRecord2() {         public boolean equals(String str) { // ok             return str.equals(this);         }         public boolean equals(Object obj) {             return false;         }     } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.  ``` This check must be updated to add support for record definitions.","closed","miscellaneous,","nick-mancuso","2020-07-15T13:33:51Z","2020-07-29T22:14:24Z"
"","8460","Java14 Full Records Support Check Validation: RightCurlyCheck","Child of #8452 Check documentation: https://checkstyle.sourceforge.io/config_blocks.html#RightCurly  From the documentation:  _Checks the placement of right curly braces ('}') for code blocks._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass {     public record MyRecord1(){         public MyRecord1{             if (true) {              } //should be violation             else {              }              if (true) { ; } int i = 0;  // violation                       // ^^^ statement is not allowed on same line after curly right brace             try {                 ;             }           // violation, rightCurly must be in the same line as 'catch' keyword             catch (Exception e) {                 ;             }         }     } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:6:13: '}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally). [RightCurly] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:11:27: '}' at column 27 should be alone on a line. [RightCurly] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:15:13: '}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally). [RightCurly] Audit done. Checkstyle ends with 3 errors. ``` Since record defintion bodies still use the OBJ_BLOCK token, this check still works _inside_ of a record declaration, but we need to add RECORD_DEF to the allowable tokens so that we can check placement of right curlies after a record definition.","closed","approved,","nick-mancuso","2020-07-15T13:14:07Z","2020-08-22T09:07:05Z"
"","8457","Java14 Full Records Support Check Validation: LeftCurlyCheck","Child of #8452 Check documentation: https://checkstyle.sourceforge.io/config_blocks.html#LeftCurly  From the documentation:  _Checks for the placement of left curly braces ('{') for code blocks._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                                   ➜  full-record-grammar cat TestClass.java public class TestClass {     public record MyRecord1(){} // should be violation } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Token ""RECORD_DEF"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck 	at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:482) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:201) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:404) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Token ""RECORD_DEF"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck 	at com.puppycrawl.tools.checkstyle.TreeWalker.registerCheck(TreeWalker.java:220) 	at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:130) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:201) 	at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:477) 	... 5 more Checkstyle ends with 1 errors.  ``` The RECORD_DEF token needs to be added to this check.","closed","approved,","nick-mancuso","2020-07-15T13:02:48Z","2020-08-22T09:10:19Z"
"","8456","Java14 Full Records Support Check Validation: SuppressWarningsCheck","Child of #8452 Check documentation: https://checkstyle.sourceforge.io/config_annotation.html#SuppressWarnings  Check description: _Allows to specify what warnings that@SuppressWarnings is not allowed to suppress. You can also specify a list of TokenTypes that the configured warning(s) cannot be suppressed on._  Also: _By default, any warning specified will be disallowed on all legal TokenTypes unless otherwise specified via the tokens property._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass {     @SuppressWarnings(""deprecation"") public record MyRecord1(){} // should be violation } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.  ``` We need to add support for record definitions to this check.","closed","approved,","nick-mancuso","2020-07-15T12:57:14Z","2020-08-25T03:21:00Z"
"","8455","Java14 Full Records Support Check Validation: AnnotationOnSameLineCheck","Child of #8452 Check documentation: https://checkstyle.sourceforge.io/config_annotation.html#AnnotationOnSameLine  Check Description: _Checks that annotations are located on the same line with their targets. Verifying with this check is not good practice, but it is using by some style guides._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar  ➜  full-record-grammar cat TestClass.java public class TestClass {     @SuppressWarnings(""deprecation"") public record MyRecord1(){} //ok     @SuppressWarnings(""deprecation"") // should be violation     public record MyRecord2(){      }     @SuppressWarnings(""deprecation"") public record MyRecord3(){ //ok      } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.  ``` This check needs to be updated to support record definitions.","closed","approved,","nick-mancuso","2020-07-15T12:50:15Z","2020-08-23T07:12:56Z"
"","8454","Java14 Full Records Support Check Validation: AnnotationLocationCheck","Child of #8452 Check documentation: [AnnotationLocation](https://checkstyle.sourceforge.io/config_annotation.html#AnnotationLocation)  From the documentation: _Checks location of annotation on language elements. By default, Check enforce to locate annotations immediately after documentation block and before target element, annotation should be located on separate line from target element._   ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                      ➜  full-record-grammar cat TestClass.java public class TestClass {     public @interface NonNull1 {}     @NonNull1 public record MyRecord1(){} //ok     @SuppressWarnings(""deprecation"") public record MyRecord2(){} // should be violation     @SuppressWarnings(""deprecation"") public record MyRecord3(){} // should be violation }                                                                                                                             ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.  ``` So, this check needs to be updated to support record declarations.","closed","approved,","nick-mancuso","2020-07-15T12:44:02Z","2020-08-23T15:34:15Z"
"","8407","new Check: PatternVariableName","Child of #8391  Similar Check: https://checkstyle.sourceforge.io/config_naming.html#LocalVariableName  This check applies to the variable defined in the pattern definition. From [JLS](https://docs.oracle.com/en/java/javase/14/docs/specs/patterns-instanceof-jls.html#jls-6.3.1): _Pattern variables are implicitly final by design._  This check should not apply to pattern variable definitions, but since it is still a variable definition, we should make UT to make sure that it stays that way.","closed","new module,","nick-mancuso","2020-07-06T13:10:39Z","2020-07-26T19:49:23Z"
"","8388","Java14 enhanced instanceof check validation: EmptyLineSeparatorCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_whitespace.html#EmptyLineSeparator Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  From check documentation:  _Checks for empty line separators after header, package, all import declarations, fields, constructors, methods, nested classes, static initializers and instance initializers._  This check should not apply to Java14 enhanced instanceof syntax, since it is nested in a construct.","closed","approved,","nick-mancuso","2020-06-29T19:41:13Z","2020-07-07T01:39:07Z"
"","8355","StaticVariableName check throws NPE when used on Java14 enhanced instanceof syntax","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#StaticVariableName Identified at #8294  ``` ➜  initial-pattern-def-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  initial-pattern-def-grammar cat config.xml            	     ➜  initial-pattern-def-grammar cat TestClass.java  public class TestClass {     {         Object obj = ""string"";         if (obj instanceof String str) { }     } } ➜  initial-pattern-def-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.naming.StaticVariableNameCheck.mustCheckName(StaticVariableNameCheck.java:137) 	at com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.visitToken(AbstractNameCheck.java:76) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Checkstyle ends with 1 errors.  ```  ---------------  I expect this code to be successfully parsed by checkstyle. The issue is that since the `VARIABLE_DEF` child of the `PATTERN_DEF` AST has no modifiers AST (unlike a typical variable definition), when `mustCheckName()` tries to reference the modifiers AST, it is null.","closed","approved,","nick-mancuso","2020-06-29T14:47:01Z","2020-07-06T03:50:21Z"
"","8410","Java14 enhanced instanceof check validation: StaticVariableNameCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#StaticVariableName  From check documentation: _Checks that static, non-final variable names conform to a specified pattern._  From [JLS](https://docs.oracle.com/en/java/javase/14/docs/specs/patterns-instanceof-jls.html#jls-6.3.1): _Pattern variables are implicitly final by design._  Since pattern variables are final, and are not static, this check does not apply; but we should make a UT since check does look at variable defs, to ensure no false positives, etc.","closed","","nick-mancuso","2020-07-06T13:34:45Z","2020-07-07T01:52:54Z"
"","8354","MemberName check throws NPE when used on Java14 enhanced instanceof syntax","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#MemberName Identified at #8294   ``` ➜  initial-pattern-def-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  initial-pattern-def-grammar cat config.xml            	     ➜  initial-pattern-def-grammar cat TestClass.java public class TestClass {     {         Object obj = ""string"";         if (obj instanceof String str) { }     } } ➜  initial-pattern-def-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck.mustCheckName(MemberNameCheck.java:155) 	at com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.visitToken(AbstractNameCheck.java:76) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Checkstyle ends with 1 errors.  ```  ---------------  I expect this code to be successfully parsed by checkstyle, and a violation shown for `Object obj = ""string""`. The issue is that since the `VARIABLE_DEF` child of the `PATTERN_DEF` AST has no modifiers AST (unlike a typical variable definition), when `mustCheckName()` tries to reference the modifiers AST, it is null.","closed","approved,","nick-mancuso","2020-06-29T14:45:07Z","2020-07-06T03:50:43Z"
"","8411","Java14 enhanced instanceof check validation: MemberNameCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#MemberName  From documentation: _Checks that instance variable names conform to a specified pattern._  Since pattern variables are not instance variables, this check does not apply, but we should create UT to ensure that we have no false positives.","closed","","nick-mancuso","2020-07-06T13:39:41Z","2020-07-06T15:37:45Z"
"","8353","LocalVariableName check throws NPE when used on Java14 enhanced instanceof syntax","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#LocalVariableName Identified at #8294   ``` ➜  initial-pattern-def-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  initial-pattern-def-grammar cat config.xml           	     ➜  initial-pattern-def-grammar cat TestClass.java public class TestClass {     {         Object obj = ""string"";         if (obj instanceof String str) { }     } } ➜  initial-pattern-def-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.naming.LocalVariableNameCheck.mustCheckName(LocalVariableNameCheck.java:251) 	at com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.visitToken(AbstractNameCheck.java:76) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Checkstyle ends with 1 errors.  ```  ---------------  I expect this code to be successfully parsed by checkstyle. The issue is that since the `VARIABLE_DEF` child of the `PATTERN_DEF` AST has no modifiers AST (unlike a typical variable definition), when `mustCheckName()` tries to reference the modifiers AST, it is null.  This check applies to the variable defined in the pattern definition. From [JLS](https://docs.oracle.com/en/java/javase/14/docs/specs/patterns-instanceof-jls.html#jls-6.3.1): _A variable declared in a pattern is known as a pattern variable (14.30). Pattern variables differ from other local variables in that they can only be assigned a value by pattern matching (14.30.3). This process is conditional; a pattern variable is only assigned a value if the pattern match succeeds._","closed","approved,","nick-mancuso","2020-06-29T14:42:05Z","2020-07-06T03:49:40Z"
"","8356","LocalFinalVariableName check throws NPE when used on Java14 enhanced instanceof syntax","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#LocalFinalVariableName Identified at #8294   ``` ➜  initial-pattern-def-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java caNote: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  initial-pattern-def-grammar cat config.xml            	     ➜  initial-pattern-def-grammar cat TestClass.java  public class TestClass {     {         Object obj = ""string"";         if (obj instanceof String str) { }     } } ➜  initial-pattern-def-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.naming.LocalFinalVariableNameCheck.mustCheckName(LocalFinalVariableNameCheck.java:138) 	at com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.visitToken(AbstractNameCheck.java:76) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Checkstyle ends with 1 errors. ```  ---------------  I expect this code to be successfully parsed by checkstyle. The issue is that since the `VARIABLE_DEF` child of the` PATTERN_DEF` AST has no modifiers AST (unlike a typical variable definition), when `mustCheckName()` tries to reference the modifiers AST, it is null.","closed","approved,","nick-mancuso","2020-06-29T14:50:15Z","2020-07-06T03:51:00Z"
"","8409","Java14 enhanced instanceof check validation: LocalFinalVariableNameCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#LocalFinalVariableName  From documentation: _Checks that local final variable names conform to a specified pattern. A catch parameter and resources in try statements are considered to be a local, final variables._   From [JLS](https://docs.oracle.com/en/java/javase/14/docs/specs/patterns-instanceof-jls.html#jls-6.3.1): _Pattern variables are implicitly final by design._  Also from [JLS](https://docs.oracle.com/en/java/javase/14/docs/specs/patterns-instanceof-jls.html#jls-6.3.1): _A declaration introduces an entity into a program and includes an identifier (3.8) that can be used in a name to refer to this entity. The identifier is constrained to be a type identifier when the entity being introduced is a class, interface, or type parameter._  _A declared entity is one of the following:_  _..._ _A local variable, one of the following:_  _- A local variable declared in a block (14.4)_  _- A local variable declared in a for statement (14.14)_  _A pattern variable, declared in a pattern (14.30)._   **So, are we considering a pattern variable local, or should it have it's own name check?**","closed","","nick-mancuso","2020-07-06T13:28:45Z","2020-07-07T01:52:16Z"
"","8352","ConstantName check throws NPE when used on Java14 enhanced instanceof syntax","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#ConstantName Identified at #8294   ``` ➜  initial-pattern-def-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  initial-pattern-def-grammar cat config.xml           	     ➜  initial-pattern-def-grammar cat TestClass.java  public class TestClass {     {         Object obj = ""string"";         if (obj instanceof String str) { }     } } ➜  initial-pattern-def-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.naming.ConstantNameCheck.mustCheckName(ConstantNameCheck.java:140) 	at com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.visitToken(AbstractNameCheck.java:76) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Checkstyle ends with 1 errors. ``` ---------------  I expect this code to be successfully parsed by checkstyle. The issue is that since the `VARIABLE_DEF` child of the `PATTERN_DEF` AST has no modifiers AST (unlike a typical variable definition), when `mustCheckName()` tries to reference the modifiers AST, it is null.  This check does not apply to variables defined in pattern definitions, since even though these variables ARE final, pattern variables are not static.  From [JLS](https://docs.oracle.com/en/java/javase/14/docs/specs/patterns-instanceof-jls.html#jls-6.3.1): _A variable declared in a pattern is known as a pattern variable (14.30). Pattern variables differ from other local variables in that they can only be assigned a value by pattern matching (14.30.3). This process is conditional; a pattern variable is only assigned a value if the pattern match succeeds._","closed","approved,","nick-mancuso","2020-06-29T14:38:03Z","2020-07-06T03:49:17Z"
"","8404","Java14 enhanced instaceof check validation: ConstantNameCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#ConstantName  From documentation: _Checks that constant names conform to a specified pattern. A constant is a static and final field or an interface/annotation field, except serialVersionUID and serialPersistentFields._  Since a pattern variable is not a field, nor is it static, this check should not apply, but we should make a UT to ensure that we avoid false positives since this check looks at variable definitions.  After #8401 , this check works as intended:  ``` ➜  instanceof-pattern-var-def /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  instanceof-pattern-var-def cat config.xml                                           ➜  instanceof-pattern-var-def cat TestClass.java    public class TestClass {     Integer magicNumber = 42;     {        if (magicNumber instanceof Integer x) {             System.out.println(x);        }      } }  ➜  instanceof-pattern-var-def java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.  ```","closed","","nick-mancuso","2020-07-06T04:44:49Z","2020-07-06T15:26:00Z"
"","8387","Java14 enhanced instanceof check validation: AbbreviationAsWordInNameCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_naming.html#AbbreviationAsWordInName  From check documentation: _Validates abbreviations (consecutive capital letters) length in identifier name, it also allows to enforce camel case naming._  This check should apply to enhanced instanceof syntax, but currently, PATTERN_VARIABLE_DEF is not an acceptable token. ``` ➜  instanceof-pattern-var-def /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java                                   Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  instanceof-pattern-var-def cat config.xml                      ➜  instanceof-pattern-var-def cat TestClass.java public class TestClass {     Integer y = 42;     {         //should be a violation, max consecutive capital letters is 3        if (y instanceof Integer xINTNUM) {            System.out.println(xINTNUM);        }      } }  ➜  instanceof-pattern-var-def java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... Audit done.   ```  ------  **FIX SUMMARY**: new token was added to Check.","closed","new feature,","nick-mancuso","2020-06-29T19:39:45Z","2020-07-26T13:44:57Z"
"","8386","Java14 enhanced instanceof check validation: RedundantModifierCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_modifier.html#RedundantModifier Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that RedundantModifierCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:38:15Z","2020-07-06T18:04:57Z"
"","8385","Java14 enhanced instanceof check validation: ModifierOrderCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_modifier.html#ModifierOrder Identifed at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  From [JEP](https://openjdk.java.net/jeps/305): _RelationalExpression:_      _..._      _RelationalExpression_ instanceof _ReferenceType_      _RelationalExpression_ instanceof _Pattern_  _Pattern:_      _ReferenceType Identifier_  Since a pattern does not have modifiers, this check should not apply to enhanced instanceof syntax.","closed","approved,","nick-mancuso","2020-06-29T19:36:31Z","2020-07-07T01:14:32Z"
"","8384","Java14 enhanced instanceof check validation: InterfaceMemberImpliedModifierCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_modifier.html#InterfaceMemberImpliedModifier Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  From check documentation: _This check is effectively the opposite of RedundantModifier. It checks the modifiers on interface members, ensuring that certain modifiers are explicitly specified even though they are actually redundant._  From [JEP](https://openjdk.java.net/jeps/305): _RelationalExpression:_      _..._      _RelationalExpression_ instanceof _ReferenceType_      _RelationalExpression_ instanceof _Pattern_  _Pattern:_      _ReferenceType Identifier_   Since a pattern variable is a local variable, and has no modifiers, this check does not apply.","closed","approved,","nick-mancuso","2020-06-29T19:34:01Z","2020-07-07T01:38:38Z"
"","8378","Java14 enhanced instanceof check validation: FinalParametersCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_misc.html#FinalParameters Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that FinalParametersCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:22:38Z","2020-07-07T01:25:52Z"
"","8383","Java14 enhanced instanceof check validation: JavaNCSSCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_metrics.html#JavaNCSS Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  From check documentation: _Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS)...  the NCSS metric is calculated by counting the source lines which are not comments, (nearly) equivalent to counting the semicolons and opening curly braces._  This check does apply to enhanced instanceof, since this line must be counted. We need to validate that JavaNCSSCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:32:44Z","2020-07-07T01:31:22Z"
"","8382","Java14 enhanced instanceof check validation: JavadocVariableCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#JavadocVariable Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  From documentation: _Checks that a variable has a Javadoc comment. Ignores serialVersionUID fields._ _..._ _subset of tokens ENUM_CONSTANT_DEF_  This check should not apply to pattern variables.","closed","approved,","nick-mancuso","2020-06-29T19:31:44Z","2020-07-07T01:37:52Z"
"","8381","Java14 enhanced instanceof check validation: JavadocStyleCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#JavadocStyle Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  From documentation: _Validates Javadoc comments to help ensure they are well formed._  This check does not apply to pattern variables.","closed","approved,","nick-mancuso","2020-06-29T19:26:23Z","2020-07-07T01:37:27Z"
"","8380","Java14 enhanced instanceof check validation: AtclauseOrderCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#AtclauseOrder Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  From the documentation: _Checks the order of javadoc block-tags or javadoc tags._  This check should not apply to pattern variables.","closed","approved,","nick-mancuso","2020-06-29T19:25:17Z","2020-07-07T01:36:49Z"
"","8379","Java14 enhanced instanceof check validation: UnusedImportsCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_imports.html#UnusedImports Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  From check documentation: _Checks for unused import statements_  This check should not apply to pattern variables.","closed","","nick-mancuso","2020-06-29T19:24:06Z","2020-07-08T01:17:33Z"
"","8377","Java14 enhanced instanceof check validation: VisibilityModifierCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_design.html#VisibilityModifier Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that VisibilityModifierCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:18:58Z","2020-07-07T01:26:43Z"
"","8376","Java14 enhanced instanceof check validation: MutableExceptionCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_design.html#MutableException Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023   We need to validate that MutableExceptionCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:17:56Z","2020-07-07T01:27:29Z"
"","8375","Java14 enhanced instanceof check validation: InterfaceIsTypeCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_design.html#InterfaceIsType Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that InterfaceIsTypeCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:16:43Z","2020-07-07T01:18:16Z"
"","8374","Java14 enhanced instanceof check validation: InnerTypeLastCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_design.html#InnerTypeLast Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that InnerTypeLastCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:15:34Z","2020-07-04T06:10:42Z"
"","8373","Java14 enhanced instanceof check validation: HideUtilityClassConstructorCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_design.html#HideUtilityClassConstructor Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that HideUtilityClassConstructorCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:14:25Z","2020-07-07T01:14:06Z"
"","8372","Java14 enhanced instanceof check validation: VariableDeclarationUsageDistanceCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#VariableDeclarationUsageDistance Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that VariableDeclarationUsageDistanceCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:13:10Z","2020-07-07T01:35:54Z"
"","8371","Java14 enhanced instanceof check validation: UnnecessarySemicolonAfterTypeMemberDeclarationCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#UnnecessarySemicolonAfterTypeMemberDeclaration Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that UnnecessarySemicolonAfterTypeMemberDeclarationCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:11:57Z","2020-07-07T01:32:16Z"
"","8370","Java14 enhanced instanceof check validation: RequireThisCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#RequireThis Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that RequireThisCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:10:35Z","2020-07-07T01:00:08Z"
"","8369","Java14 enhanced instanceof check validation: MultipleVariableDeclarationsCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#MultipleVariableDeclarations Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that MultipleVariableDeclarationsCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:09:03Z","2020-07-07T13:23:32Z"
"","8368","Java14 enhanced instanceof check validation: ModifiedControlVariableCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#ModifiedControlVariable Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that ModifiedControlVariableCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T19:07:17Z","2020-07-07T00:59:10Z"
"","8367","Java14 enhanced instanceof check validation: MagicNumberCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#MagicNumber Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that MagicNumberCheck works as intended once #8294 is merged.  From [JLS](https://docs.oracle.com/javase/specs/jls/se14/preview/specs/patterns-instanceof-jls.html):  _Four kinds of variable are implicitly declared final: a field of an interface (9.3), a local variable declared as a resource of a try-with-resources statement (14.20.3), and an exception parameter of a multi-catch clause (14.20), and a pattern variable (14.30.1)._  and  _Each pattern variable (14.30.1) is assigned a value after the pattern matching process has succeeded (14.30.3)._   Since a pattern variable is only assigned when the pattern matches, and a pattern variable is final, I do not think that this check applies.  Here is output to verify that it still works as expected with grammar change: ``` ➜  initial-pattern-def-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  initial-pattern-def-grammar cat TestClass.java  public class TestClass {     Integer magicNumber = 42;     {        if (magicNumber instanceof Integer x) {            System.out.println(x);        }     } }  ➜  initial-pattern-def-grammar cat config.xml           	     ➜  initial-pattern-def-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/initial-pattern-def-grammar/TestClass.java:1: Missing package-info.java file. [JavadocPackage] [ERROR] /home/nick/Desktop/initial-pattern-def-grammar/TestClass.java:2:27: '42' is a magic number. [MagicNumber] Audit done. Checkstyle ends with 2 errors. ``` What do you think, @pbludov @esilkensen ?","closed","approved,","nick-mancuso","2020-06-29T19:05:53Z","2020-07-02T13:11:11Z"
"","8366","Java14 enhanced instanceof check validation: InnerAssignmentCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#InnerAssignment Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that InnerAssignmentCheck works as intended once #8294 is merged. ``` ➜  initial-pattern-def-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  initial-pattern-def-grammar cat TestClass.java  public class TestClass {     String someString = ""some String"";     public TestClass(Object x) {         if (x instanceof String innerAssignment && (someString = innerAssignment) != null) {             System.out.println(innerAssignment);         }     } } ➜  initial-pattern-def-grammar cat config.xml        	     ➜  initial-pattern-def-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/initial-pattern-def-grammar/TestClass.java:4:64: Inner assignments should be avoided. [InnerAssignment] Audit done. Checkstyle ends with 2 errors. ``` InnerAssignment check seems to be working as intended, I think we can close this one @pbludov @esilkensen","closed","approved,","nick-mancuso","2020-06-29T19:04:20Z","2020-07-06T17:12:53Z"
"","8365","Java14 enhanced instanceof check validation: IllegalTypeCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#IllegalType Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that IllegalTypeCheck works as intended once #8294 is merged.  Fix summary: New token was added to Check","closed","new feature,","nick-mancuso","2020-06-29T19:02:34Z","2020-07-19T05:12:43Z"
"","8364","Java14 enhanced instanceof check validation: HiddenFieldCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#HiddenField Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that HiddenFieldCheck works as intended once #8294 is merged.  From check documentation: _Checks that a local variable or a parameter does not shadow a field that is defined in the same class._  Note that a pattern variable is considered a  binding variable, and not a local variable.  Does this check apply?   ``` ➜  initial-pattern-def-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  initial-pattern-def-grammar cat config.xml               	 	   	     ➜  initial-pattern-def-grammar cat TestClass.java public class TestClass {     private String hidden = ""hidden"";      public TestClass(Object x) {         if (x instanceof String hidden) {             System.out.println(hidden);         }     } } ➜  initial-pattern-def-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/initial-pattern-def-grammar/TestClass.java:1: Missing package-info.java file. [JavadocPackage] Audit done. Checkstyle ends with 1 errors.  ```  Should `(x instanceof String hidden)`  cause a violation? ``` [ERROR] /home/nick/Desktop/initial-pattern-def-grammar/TestClass.java:5:33: 'hidden' hides a field. [HiddenField] ```  New token is introduced to Check.","closed","new feature,","nick-mancuso","2020-06-29T19:00:55Z","2020-07-19T04:20:23Z"
"","8357","FinalLocalVariable check throws NPE when used on Java14 enhanced instanceof syntax","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#FinalLocalVariable Identified at #8294  ``` ➜  initial-pattern-def-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  initial-pattern-def-grammar cat config.xml            	     ➜  initial-pattern-def-grammar cat TestClass.java  public class TestClass {     {         Object obj = ""string"";         if (obj instanceof String str) { }     } } ➜  initial-pattern-def-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.visitToken(FinalLocalVariableCheck.java:278) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Checkstyle ends with 1 errors. ```  ---------------  I expect this code to be successfully parsed by checkstyle. The issue is that since the `VARIABLE_DEF` child of the `PATTERN_DEF` AST has no modifiers AST (unlike a typical variable definition), when `visitToken()` tries to reference the modifiers AST, it is null.","closed","approved,","nick-mancuso","2020-06-29T15:01:58Z","2020-07-08T14:40:02Z"
"","8408","Java14 enhanced instanceof check validation: FinalLocalVariableCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#FinalLocalVariable  From documentation: _Checks that local variables that never have their values changed are declared final. The check can be configured to also check that unchanged parameters are declared final._  From [JLS](https://docs.oracle.com/en/java/javase/14/docs/specs/patterns-instanceof-jls.html#jls-6.3.1): _Pattern variables are implicitly final by design._  This check does not apply to pattern variables, but we should make a UT to avoid false positives.","closed","","nick-mancuso","2020-07-06T13:18:50Z","2020-07-26T13:54:15Z"
"","8363","Java14 enhanced instanceof check validation: ExplicitInitializationCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#ExplicitInitialization Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that ExplicitInitializationCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T18:59:38Z","2020-07-07T00:43:01Z"
"","8362","Java14 enhanced instanceof check validation: EqualsAvoidNullCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#EqualsAvoidNull Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that EqualsAvoidNullCheck works as intended once #8294 is merged.  Fix summary: New token PATTERN_VARIABLE_DEF was introduced to Check","closed","new feature,","nick-mancuso","2020-06-29T18:58:31Z","2020-07-19T15:30:01Z"
"","8361","Java14 enhanced instanceof check validation: DeclarationOrderCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_coding.html#DeclarationOrder Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that DeclarationOrderCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T18:56:49Z","2020-07-07T00:28:36Z"
"","8350","SuppressWarnings throws NPE when used on Java14 enhanced instanceof syntax","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_annotation.html#SuppressWarnings Identified at #8294  ``` ➜  initial-pattern-def-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  initial-pattern-def-grammar cat config.xml                                                                               	     ➜  initial-pattern-def-grammar cat TestClass.java  public class TestClass {     {         Object obj = ""string"";         if (obj instanceof String str) { }     } } ➜  initial-pattern-def-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.utils.AnnotationUtil.findFirstAnnotation(AnnotationUtil.java:221) 	at com.puppycrawl.tools.checkstyle.utils.AnnotationUtil.getAnnotation(AnnotationUtil.java:195) 	at com.puppycrawl.tools.checkstyle.checks.annotation.SuppressWarningsCheck.getSuppressWarnings(SuppressWarningsCheck.java:258) 	at com.puppycrawl.tools.checkstyle.checks.annotation.SuppressWarningsCheck.visitToken(SuppressWarningsCheck.java:189) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Checkstyle ends with 1 errors.  ```  ---------------  I expect this code to be successfully parsed by checkstyle.  The issue is that since the `VARIABLE_DEF` child of the `PATTERN_DEF` AST has no modifiers AST (unlike a typical variable definition), when `findFirstAnnotation()` tries to reference the modifiers AST, it is null.","closed","approved,","nick-mancuso","2020-06-29T14:28:41Z","2020-07-06T03:46:00Z"
"","8402","Java14 enhanced instanceof check validation: SuppressWarningsCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_annotation.html#SuppressWarnings  From the documentation: _Allows to specify what warnings that@SuppressWarnings is not allowed to suppress. You can also specify a list of TokenTypes that the configured warning(s) cannot be suppressed on._  Currently, the subset of tokens is:  `CLASS_DEF` , `INTERFACE_DEF` , `ENUM_DEF` , `ANNOTATION_DEF` , `ANNOTATION_FIELD_DEF` , `ENUM_CONSTANT_DEF` , `PARAMETER_DEF` , `VARIABLE_DEF` , `METHOD_DEF` , `CTOR_DEF` .  Should we add the PATTERN_VARIABLE_DEF token to this check?","closed","","nick-mancuso","2020-07-06T04:12:13Z","2020-07-06T15:22:07Z"
"","8359","Java14 enhanced instanceof check validation: AnnotationOnSameLineCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_annotation.html#AnnotationOnSameLine Identified at #8294 (comment)  We need to validate that AnnotationOnSameLineCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T18:55:00Z","2020-07-07T13:43:10Z"
"","8360","Java14 enhanced instanceof check validation: AnnotationLocationCheck","Child of #8391  Check documentation: https://checkstyle.sourceforge.io/config_annotation.html#AnnotationLocation Identified at https://github.com/checkstyle/checkstyle/pull/8294#issuecomment-650896023  We need to validate that AnnotationLocationCheck works as intended once #8294 is merged.","closed","approved,","nick-mancuso","2020-06-29T18:55:15Z","2020-07-07T13:20:47Z"
"","8351","Indentation check throws NPE when used on Java14 enhanced instanceof syntax","Child of #8391  Check documentation: https://checkstyle.org/config_misc.html#Indentation Identified at #8294   ``` ➜  initial-pattern-def-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  initial-pattern-def-grammar cat config.xml            	     ➜  initial-pattern-def-grammar cat TestClass.java  public class TestClass {     {         Object obj = ""string"";         if (obj instanceof String str) { }     } } ➜  initial-pattern-def-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.indentation.MemberDefHandler.checkIndentation(MemberDefHandler.java:47) 	at com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.visitToken(IndentationCheck.java:505) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Checkstyle ends with 1 errors. ``` --------------- I expect this code to be successfully parsed by checkstyle. The issue is that since the `VARIABLE_DEF` child of the `PATTERN_DEF` AST has no modifiers AST (unlike a typical variable definition), when `checkIndentation()` tries to reference the modifiers AST, it is null.","closed","approved,","nick-mancuso","2020-06-29T14:33:43Z","2020-07-07T20:30:47Z"
"","8403","Java14 enhanced instanceof check validation: Indentation","Child of #8391  Check documentation: https://checkstyle.org/config_misc.html#Indentation  ``` ➜  instanceof-pattern-var-def /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  instanceof-pattern-var-def cat config.xml                                                ➜  instanceof-pattern-var-def cat TestClass.java  public class TestClass {     Integer magicNumber = 42;     {        if (magicNumber instanceof Integer x) { // 7 spaces, should be 8            System.out.println(x); // 11, should be 12        } // matches above bad indentation, is 7, should be 8.     } }  ➜  instanceof-pattern-var-def !6002 ➜  instanceof-pattern-var-def java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/instanceof-pattern-var-def/TestClass.java:4:8: 'if' has incorrect indentation level 7, expected level should be 8. [Indentation] [ERROR] /home/nick/Desktop/instanceof-pattern-var-def/TestClass.java:5:12: 'if' child has incorrect indentation level 11, expected level should be 12. [Indentation] [ERROR] /home/nick/Desktop/instanceof-pattern-var-def/TestClass.java:6:8: 'if rcurly' has incorrect indentation level 7, expected level should be 8. [Indentation] Audit done. Checkstyle ends with 3 errors.  ```  This check works as intended after #8401, and isn't directly related to PATTERN_VARIABLE_DEF, but since the check looks at variable definitions, we should make a UT to make sure we don't get false positives.","closed","","nick-mancuso","2020-07-06T04:32:19Z","2020-07-08T14:45:39Z"
"","8613","Java 14 Text Blocks Checks Support validation: AvoidEscapedUnicodeCharacters","Child of  #8601  Check documentation: https://checkstyle.sourceforge.io/config_misc.html#AvoidEscapedUnicodeCharacters  ``` ➜  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  text-blocks-grammar cat config.xml                          ➜  text-blocks-grammar cat TestClass.java public class TestClass {     public void multiplyString1() {         String unitAbbrev2 = ""asd\u03bcsasd""; // violation         String unitAbbrev3 = ""aBc\u03bcssdf\u03bc""; // violation         String unitAbbrev4 = ""\u03bcaBc\u03bcssdf\u03bc""; // violation         String allCharactersEscaped = ""\u03bc\u03bc""; // violation     }      public void multiplyString2() {         String unitAbbrev2 = """"""                 asd\u03bcsasd""""""; // should be violation         String unitAbbrev3 = """"""                 aBc\u03bcssdf\u03bc""""""; // should be violation         String unitAbbrev4 = """"""                 \u03bcaBc\u03bcssdf\u03bc""""""; // should be violation         String allCharactersEscaped = """"""                 \u03bc\u03bc""""""; // should be violation     } }%                                                                                                                             ➜  text-blocks-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:3:30: Unicode escape(s) usage should be avoided. [AvoidEscapedUnicodeCharacters] [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:4:30: Unicode escape(s) usage should be avoided. [AvoidEscapedUnicodeCharacters] [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:5:30: Unicode escape(s) usage should be avoided. [AvoidEscapedUnicodeCharacters] [ERROR] /home/nick/Desktop/text-blocks-grammar/TestClass.java:6:39: Unicode escape(s) usage should be avoided. [AvoidEscapedUnicodeCharacters] Audit done. Checkstyle ends with 4 errors.   ``` This check needs to be updated to support text blocks.","closed","approved,","nick-mancuso","2020-08-06T17:38:50Z","2020-08-20T07:51:05Z"
"","8494","Java14 Full Records Support Check Validation: JavadocTypeCheck","Child  of #8452  Check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#JavadocType  From check documentation: _Checks the Javadoc comments for annotation/enum/class/interface definitions. By default, does not check for author or version tags. The scope to verify is specified using the Scope class and defaults to Scope.PRIVATE. To verify another scope, set property scope to one of the Scope constants. To define the format for an author tag or a version tag, set property authorFormat or versionFormat respectively to a regular expression._   ``` ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:6:1: Type Javadoc tag @author must match pattern 'ABC'. [JavadocType] Audit done. Checkstyle ends with 1 errors. ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java /**  * Testing author and version tag patterns  ****    @author  Nick Mancuso  * @version 8.35  */ class TestClass { // violation }  /**  * Testing author and version tag patterns  ****    @author  Nick Mancuso  * @version 8.35  */ record MyRecord1() { // should be violation  } /**  * Testing author and version tag patterns (there are not tags :)  * SomeText @author  Nick Mancuso  * *@version 8.35  */ record MyRecord2() { // should be violation      public MyRecord2{} } /**  * Testing author and version tag patterns.  * tags are multi line ones  * @author  Nick Mancuso  * @version 8.35 */ record MyRecord3() { // should be violation  }  /**  * Testing author and version tag patterns  ****    @author  Nick Mancuso  * @version 8.35  */ record MyRecord4() { // should be violation  }  record MyRecord5() { // ok  } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:6:1: Type Javadoc tag @author must match pattern 'ABC'. [JavadocType] Audit done. Checkstyle ends with 1 errors.   ``` This check doesn't work at all with record definitions, so we need to update this check.","closed","approved,","nick-mancuso","2020-07-16T12:39:07Z","2020-08-22T15:07:01Z"
"","8558","Checkstyle 8.35 fails with NullPointerException when processing RequireThis check on record classes","Checkstyle `8.35` fails with `NullPointerException` when processing [RequireThis check](https://checkstyle.org/config_coding.html#RequireThis) on Java 14 record classes. Disabling the `RequireThis` check causes the `NullPointerException` failure to go away.  ``` org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':checkstyleMain'.         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.lambda$executeIfValid$1(ExecuteActionsTaskExecuter.java:207)         at org.gradle.internal.Try$Failure.ifSuccessfulOrElse(Try.java:263)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:205)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:186)         at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:114)         at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)         at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:62)         at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)         at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:56)         at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)         at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:77)         at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:55)         at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)         at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:409)         at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:399)         at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:157)         at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:242)         at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:150)         at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:94)         at org.gradle.internal.operations.DelegatingBuildOperationExecutor.call(DelegatingBuildOperationExecutor.java:36)         at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:52)         at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:41)         at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:356)         at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:343)         at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:336)         at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:322)         at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.lambda$run$0(DefaultPlanExecutor.java:127)         at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:191)         at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.executeNextNode(DefaultPlanExecutor.java:182)         at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:124)         at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)         at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)         at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56) Caused by: : Unable to process files: []         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.processFiles(CheckstyleAntTask.java:371)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.realExecute(CheckstyleAntTask.java:331)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.execute(CheckstyleAntTask.java:302)         at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)         at org.gradle.api.internal.project.ant.BasicAntBuilder.nodeCompleted(BasicAntBuilder.java:80)         at jdk.internal.reflect.GeneratedMethodAccessor345.invoke(Unknown Source)         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at org.gradle.internal.metaobject.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:484)         at org.gradle.internal.metaobject.BeanDynamicObject.tryInvokeMethod(BeanDynamicObject.java:196)         at org.gradle.internal.metaobject.AbstractDynamicObject.invokeMethod(AbstractDynamicObject.java:163)         at org.gradle.api.internal.project.antbuilder.AntBuilderDelegate.nodeCompleted(AntBuilderDelegate.java:124)         at org.gradle.api.plugins.quality.internal.CheckstyleInvoker$_invoke_closure1.doCall(CheckstyleInvoker.groovy:58)         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at org.gradle.util.ClosureBackedAction.execute(ClosureBackedAction.java:71)         at org.gradle.util.ClosureBackedAction.execute(ClosureBackedAction.java:52)         at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder$2.execute(DefaultIsolatedAntBuilder.java:154)         at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder$2.execute(DefaultIsolatedAntBuilder.java:136)         at org.gradle.api.internal.project.antbuilder.ClassPathToClassLoaderCache.withCachedClassLoader(ClassPathToClassLoaderCache.java:135)         at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder.execute(DefaultIsolatedAntBuilder.java:130)         at org.gradle.api.internal.project.IsolatedAntBuilder$execute$0.call(Unknown Source)         at org.gradle.api.plugins.quality.internal.CheckstyleInvoker.invoke(CheckstyleInvoker.groovy:51)         at org.gradle.api.plugins.quality.Checkstyle.run(Checkstyle.java:151)         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:104)         at org.gradle.api.internal.project.taskfactory.StandardTaskAction.doExecute(StandardTaskAction.java:49)         at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:42)         at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:28)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:726)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:693)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$3.run(ExecuteActionsTaskExecuter.java:569)         at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:395)         at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:387)         at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:157)         at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:242)         at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:150)         at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:84)         at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:554)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:537)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.access$300(ExecuteActionsTaskExecuter.java:108)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.executeWithPreviousOutputFiles(ExecuteActionsTaskExecuter.java:278)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.execute(ExecuteActionsTaskExecuter.java:267)         at org.gradle.internal.execution.steps.ExecuteStep.lambda$execute$1(ExecuteStep.java:33)         at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:33)         at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:26)         at org.gradle.internal.execution.steps.CleanupOutputsStep.execute(CleanupOutputsStep.java:67)         at org.gradle.internal.execution.steps.CleanupOutputsStep.execute(CleanupOutputsStep.java:36)         at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:49)         at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:34)         at org.gradle.internal.execution.steps.CancelExecutionStep.execute(CancelExecutionStep.java:43)         at org.gradle.internal.execution.steps.TimeoutStep.executeWithoutTimeout(TimeoutStep.java:73)         at org.gradle.internal.execution.steps.TimeoutStep.execute(TimeoutStep.java:54)         at org.gradle.internal.execution.steps.CatchExceptionStep.execute(CatchExceptionStep.java:34)         at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:44)         at org.gradle.internal.execution.steps.SnapshotOutputsStep.execute(SnapshotOutputsStep.java:54)         at org.gradle.internal.execution.steps.SnapshotOutputsStep.execute(SnapshotOutputsStep.java:38)         at org.gradle.internal.execution.steps.BroadcastChangingOutputsStep.execute(BroadcastChangingOutputsStep.java:49)         at org.gradle.internal.execution.steps.CacheStep.executeWithoutCache(CacheStep.java:159)         at org.gradle.internal.execution.steps.CacheStep.execute(CacheStep.java:72)         at org.gradle.internal.execution.steps.CacheStep.execute(CacheStep.java:43)         at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:44)         at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:33)         at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:38)         at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:24)         at org.gradle.internal.execution.steps.SkipUpToDateStep.executeBecause(SkipUpToDateStep.java:92)         at org.gradle.internal.execution.steps.SkipUpToDateStep.lambda$execute$0(SkipUpToDateStep.java:85)         at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:55)         at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:39)         at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:76)         at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:37)         at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:36)         at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:26)         at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:94)         at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:49)         at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:79)         at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:53)         at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:74)         at org.gradle.internal.execution.steps.SkipEmptyWorkStep.lambda$execute$2(SkipEmptyWorkStep.java:78)         at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:78)         at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:34)         at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsStartedStep.execute(MarkSnapshottingInputsStartedStep.java:39)         at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute(LoadExecutionStateStep.java:40)         at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute(LoadExecutionStateStep.java:28)         at org.gradle.internal.execution.impl.DefaultWorkExecutor.execute(DefaultWorkExecutor.java:33)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:194)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:186)         at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:114)         at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)         at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:62)         at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)         at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:56)         at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)         at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:77)         at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:55)         at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)         at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:409)         at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:399)         at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:157)         at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:242)         at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:150)         at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:94)         at org.gradle.internal.operations.DelegatingBuildOperationExecutor.call(DelegatingBuildOperationExecutor.java:36)         at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:52)         at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:41)         at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:356)         at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:343)         at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:336)         at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:322)         at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.lambda$run$0(DefaultPlanExecutor.java:127)         at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:191)         at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.executeNextNode(DefaultPlanExecutor.java:182)         at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:124)         at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)         at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)         at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing          at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.processFiles(CheckstyleAntTask.java:365)         ... 122 more Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.findFrame(RequireThisCheck.java:1101)         at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.findClassFrame(RequireThisCheck.java:1068)         at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.getFieldWithoutThis(RequireThisCheck.java:485)         at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.processIdent(RequireThisCheck.java:441)         at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.visitToken(RequireThisCheck.java:377)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 124 more ```","closed","","gravitation1","2020-07-26T19:42:17Z","2020-08-01T19:02:42Z"
"","8980","Indentation check gives false positive: '@' has incorrect indentation level 4","Checkstyle 8.37, google-java-format 1.9 config (taken from google_checks.xml - https://github.com/checkstyle/checkstyle/blob/checkstyle-8.37/src/main/resources/google_checks.xml#L243): ```xml                                                               ``` code: ```java interface Test {   @ApiResponses({     @ApiResponse(         code = 200,         message = ""Successfully found resource"",         reference = ""https://www.hl7.org/fhir/bundle.html"")   })   void foo(); } ``` Checkstyle gives indentation violation: ```bash $ java -jar checkstyle-8.37-all.jar -c config.xml Test.java Starting audit... [ERROR] /home/rdiachenko/work/workspace/checkstyle-playground/Test.java:3:5: '@' has incorrect indentation level 4, expected level should be 6. [Indentation] Audit done. Checkstyle ends with 1 errors. ``` but there is an empty diff when applying google-java-format: ```bash $ java -jar google-java-format-1.9-all-deps.jar Test.java > /tmp/FormattedTest.java && diff -Naru Test.java /tmp/FormattedTest.java $ ``` **Note:** empty diff when applying google-java-format means it's not expected to have code formatted in a different way, however Indentation check gives false positive and requires the code to be formatted differently.","closed","google style,","rdiachenko","2020-11-11T19:50:14Z","2021-01-11T08:14:13Z"
"","8965","Indentation check doesn't give violation when google formatter does","Checkstyle 8.37, google-java-format 1.9 config (taken from google_checks.xml - https://github.com/checkstyle/checkstyle/blob/checkstyle-8.37/src/main/resources/google_checks.xml#L243): ```xml                                                               ``` code: ```java class Test {   public Object foo() {     return Optional.empty()         .orElseThrow(           () -> new IllegalArgumentException( ""Something wrong 1, something wrong 2, something wrong 3""));   } } ``` none violations given by Checkstyle: ```bash $ java -jar checkstyle-8.37-all.jar -c config.xml Test.java  Starting audit... Audit done. ``` but there is a non-empty diff when applying google-java-format (which leads to errors when using https://github.com/coveooss/fmt-maven-plugin): ```bash $ java -jar google-java-format-1.9-all-deps.jar Test.java > /tmp/FormattedTest.java && diff -Naru Test.java /tmp/FormattedTest.java --- Test.java	2020-11-05 06:46:28.027335639 +0000 +++ /tmp/FormattedTest.java	2020-11-05 07:13:01.536163532 +0000 @@ -2,8 +2,8 @@    public Object foo() {      return Optional.empty()          .orElseThrow( -          () -> -new IllegalArgumentException( -""Something wrong 1, something wrong 2, something wrong 3"")); +            () -> +                new IllegalArgumentException( +                    ""Something wrong 1, something wrong 2, something wrong 3""));    }  } ```","open","google style,","rdiachenko","2020-11-05T07:08:41Z","2022-03-10T06:15:09Z"
"","8979","Indentation check gives false positive: 'array initialization rcurly' has incorrect indentation","Checkstyle 8.37, google-java-format 1.9 config (taken from google_checks.xml - https://github.com/checkstyle/checkstyle/blob/checkstyle-8.37/src/main/resources/google_checks.xml#L243): ```xml                                                               ``` code: ```java class Test {   private static final String[] UNSECURED_PATHS = {     ""/health"",     ""/version"",     ""/metrics"",     ""/docs"",     ""/swagger*"",     ""/webjars/springfox-swagger-ui/**"",     ""/swagger-resources/**"",     ""/openapi.json""   }; } ``` Checkstyle gives indentation violation: ```bash $ java -jar checkstyle-8.37-all.jar -c config.xml Test.java  Starting audit... [ERROR] /tmp/Test.java:11:3: 'array initialization rcurly' has incorrect indentation level 2,       expected level should be one of the following: 4, 8. [Indentation] Audit done. Checkstyle ends with 1 errors. ``` but there is an empty diff when applying google-java-format: ```bash $ java -jar google-java-format-1.9-all-deps.jar Test.java > /tmp/FormattedTest.java \    && diff -Naru Test.java /tmp/FormattedTest.java $ ``` **Note:** empty diff when applying google-java-format means it's not expected to have code formatted in a different way, however Indentation check gives false positive and requires the code to be formatted differently.","closed","google style,","rdiachenko","2020-11-10T22:48:17Z","2021-03-17T17:38:51Z"
"","8633","LineLengthCheck.fileExtensions default value and similar usages should be changed to empty string","Checks which have `fileExtension` like property, `all files` is not good default value. We need to fix such javadocs and replace with empty string `""""`.  For example: https://github.com/checkstyle/checkstyle/blob/810aef5c42ed4f17a9b025f9de8262c6fadb5703/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java#L55","closed","miscellaneous,","gaurabdg","2020-08-09T13:43:41Z","2020-08-21T13:26:24Z"
"","8124","Add LABELED_STAT token support to NoWhitespaceBefore","Check documentation:https://checkstyle.sourceforge.io/config_whitespace.html#NoWhitespaceBefore  ``` cat TestClass.java class TestClass { 	{                 mylabel :  // expected violation                 System.out.println(); 	} }  $ cat conf.xml                              /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.31-all.jar -c config.xml TestClass.java Starting audit... Audit done. ``` see example - https://checkstyle.sourceforge.io/config_whitespace.html#NoWhitespaceBefore_Properties Currently list of tokens has no support for LABELED_STAT, it should be added to report violations for labels.  Rationale: The official [google java style guide](https://google.github.io/styleguide/javaguide.html#s4.6-whitespace) does not allow whitespaces before the colon of label definition. More precisely, the section below lists all of the situations where horizontal whitespaces are allowed. Since colon of label is not mentioned in the list, no whitespace before it should be allowed. ![Screenshot from 2020-04-19 17-44-45](https://user-images.githubusercontent.com/24209192/79692455-93ba7680-8265-11ea-808f-38c61186ca43.png)","closed","google style,","wilcoln","2020-04-18T17:10:47Z","2020-04-22T13:49:33Z"
"","8569","Java interface constants treated as non-public by ConstantName check","Check documentation: https://checkstyle.sourceforge.io/config_naming.html#ConstantName  ``` C:\Amit\Study\IntelliJ_Projects\Test_Checkstyle>type checkstyle.xml                                                                                                                                                            C:\Amit\Study\IntelliJ_Projects\Test_Checkstyle>type MyInterface.java package com.test.checkstyle;  public interface MyInterface {     int MAX_SIZE = 1024;      //methods }   C:\Amit\Study\IntelliJ_Projects\Test_Checkstyle>set RUN_LOCALE=""-Duser.language=en -Duser.country=US""  C:\Amit\Study\IntelliJ_Projects\Test_Checkstyle>java %RUN_LOCALE% -jar checkstyle-8.35-all.jar -c checkstyle.xml MyInterface.java Starting audit... [ERROR] C:\Amit\Study\IntelliJ_Projects\Test_Checkstyle\MyInterface.java:4:9: Name 'MAX_SIZE' must match pattern '^_[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. [Private-Field-Should-Start-With-Underscore] Audit done. Checkstyle ends with 1 errors. ```  --------------- Expected: There should not be any Error as Interface field should be treated as public. MAX_SIZE should match with id - 'Non-Private-Field-Check' and succeed. ---------------","closed","approved,","amitchitale","2020-07-28T07:39:06Z","2020-09-25T19:13:36Z"
"","8255","`allowedAbbreviations` property in `AbbreviationAsWordInNameCheck` does not support abbreviations that contain digit(s)","Check documentation: https://checkstyle.sourceforge.io/config_naming.html#AbbreviationAsWordInName  ``` $ javac InputAbbreviationAsWordInNameAllowedAbbreviationsWithDigits.java  $ cat config.xml                             $ cat YOUR_FILE.java package com.puppycrawl.tools.checkstyle.checks.naming.abbreviationaswordinname;  public class InputAbbreviationAsWordInNameAllowedAbbreviationsWithDigits {     void createPBKDF2() {}      void createPBKDF2Hash() {} }  $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" $ java $RUN_LOCALE -jar checkstyle-8.32-all.jar -c config.xml InputAbbreviationAsWordInNameAllowedAbbreviationsWithDigits.java Starting audit... [ERROR] InputAbbreviationAsWordInNameAllowedAbbreviationsWithDigits.java:4:10: Abbreviation in name 'createPBKDF2' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] InputAbbreviationAsWordInNameAllowedAbbreviationsWithDigits.java:6:10: Abbreviation in name 'createPBKDF2Hash' must contain no more than '4' consecutive capital letters. [AbbreviationAsWordInName] Audit done. Checkstyle ends with 2 errors. ```  ---------------  `allowedAbbreviations` does not support abbreviations that contain digit(s). In the example above, checkstyle flags `createPBKDF2` and `createPBKDF2Hash` even though PBKDF2 is listed in `allowedAbbreviations` property.  IIUC, the reason is the check only looks for the uppercase characters.   https://github.com/checkstyle/checkstyle/blob/f23d13eabc4c2060eb180b0da49899fb32f40573/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java#L537  I came with the solution below to cover abbreviations with numbers but it doesn't cover abbreviations start with digits like `2FA`. The reason I exclude that case is that it might create so many false positives such as `Class3Factory` in `InputAbbreviationAsWordInNameType`, especially if `allowedAbbreviationLength` is set to 1.  ```diff diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java index a90897bea..bbfdef381 100644 --- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java +++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java @@ -532,9 +532,7 @@ public class AbbreviationAsWordInNameCheck extends AbstractCheck {          String result = null;            for (int index = 0; index < str.length(); index++) { -            final char symbol = str.charAt(index); - -            if (Character.isUpperCase(symbol) || Character.isDigit(symbol)) { +            if (isPartOfAbbreviation(str, index)) {                  if (!abbrStarted) {                      abbrStarted = true;                      beginIndex = index; @@ -559,6 +557,20 @@ public class AbbreviationAsWordInNameCheck extends AbstractCheck {          return result;      }   +    private boolean isPartOfAbbreviation(String str, int index) { +        final char symbol = str.charAt(index); + +        if (Character.isUpperCase(symbol)) { +            return true; +        } + +        if (Character.isDigit(symbol)) { +            return Character.isUpperCase(str.charAt(index - 1)); +        } + +        return false; +    } +      /**       * Get Abbreviation if it is illegal, where {@code beginIndex} and {@code endIndex} are       * inclusive indexes of a sequence of consecutive upper-case characters. ```  Let me know what you think, I could create a PR, as well.","closed","","hisener","2020-05-25T12:02:03Z","2020-05-25T13:11:12Z"
"","8598","OuterTypeFileName throws NPE on record definition in method","Check documentation: https://checkstyle.sourceforge.io/config_misc.html#OuterTypeFilename  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                       ➜  full-record-grammar cat TestClass.java  public class TestClass {     class LocalRecordHelper {         Class m(int x) {             record R76 (int x) { }             return R76.class;         }     } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.OuterTypeFilenameCheck.visitToken(OuterTypeFilenameCheck.java:142) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Checkstyle ends with 1 errors.  ```  Relevant grammar from ` java.g`: https://github.com/checkstyle/checkstyle/blob/86e27543209734aba972691e018289095e5a6851/src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g#L1121-L1122  Since the modifiers AST is null when a record definition is inside of a method, a NPE is thrown here:  https://github.com/checkstyle/checkstyle/blob/86e27543209734aba972691e018289095e5a6851/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java#L142","closed","approved,","nick-mancuso","2020-08-03T15:57:55Z","2020-08-06T14:00:05Z"
"","8695","Continuous indentation on nested method call","Check documentation: https://checkstyle.sourceforge.io/config_misc.html#Indentation  CheckStyle Version: `8.35` Java Version: `11.0.6`  Config: ``````  The file: ``` /*----------------------------------------------------------------------------*/ /* Copyright (c) 2019-2020 FIRST. All Rights Reserved.                        */ /* Open Source Software - may be modified and shared by FRC teams. The code   */ /* must be accompanied by the FIRST BSD license file in the root directory of */ /* the project.                                                               */ /*----------------------------------------------------------------------------*/  package edu.wpi.first.math;  import org.ejml.simple.SimpleMatrix;  import edu.wpi.first.wpiutil.math.Matrix; import edu.wpi.first.wpiutil.math.Num;  public final class Drake {   private Drake() {   }    /**    * Solves the discrete alegebraic Riccati equation.    *    * @param A System matrix.    * @param B Input matrix.    * @param Q State cost matrix.    * @param R Input cost matrix.    * @return Solution of DARE.    */   @SuppressWarnings({""LocalVariableName"", ""ParameterName""})   public static SimpleMatrix discreteAlgebraicRiccatiEquation(           SimpleMatrix A,           SimpleMatrix B,           SimpleMatrix Q,           SimpleMatrix R) {     var S = new SimpleMatrix(A.numRows(), A.numCols());     WPIMathJNI.discreteAlgebraicRiccatiEquation(A.getDDRM().getData(), B.getDDRM().getData(),             Q.getDDRM().getData(), R.getDDRM().getData(), A.numCols(), B.numCols(),             S.getDDRM().getData());     return S;   }    /**    * Solves the discrete alegebraic Riccati equation.    *    * @param A System matrix.    * @param B Input matrix.    * @param Q State cost matrix.    * @param R Input cost matrix.    * @return Solution of DARE.    */   @SuppressWarnings({""ParameterName"", ""MethodTypeParameterName""})   public static  Matrix       discreteAlgebraicRiccatiEquation(Matrix A,                                    Matrix B,                                    Matrix Q,                                    Matrix R) {     return new Matrix( discreteAlgebraicRiccatiEquation(A.getStorage(),  // ?Violation B.getStorage(), // ?Violation Q.getStorage(), // ?Violation R.getStorage()) // ?Violation );   } } ```  I am running with the Gradle plugin and it is detecting my config because if I make a change to the file (like extra space before the class definition, Checkstyle will warn appropriately).  I expect lines 57-61 of the file to report an indentation error because they all have 0 indent. I have marked these lines with `// ?Violation`.","open","indentation,","AustinShalit","2020-08-14T19:22:42Z","2020-10-05T08:58:18Z"
"","8537","Exclude Stream, Optional, and additional collection types from ClassFanOutComplexityCheck","Check documentation: https://checkstyle.sourceforge.io/config_metrics.html#ClassFanOutComplexity  Checkstyle currently automatically excludes a number of classes from the class fan-out complexity check, per the default value of the ""excludedClasses"" property of ClassFanOutComplexity.  This includes a number of base collection classes (List, HashMap, TreeSet, etc.) which were added per issue #31 in PR [#69](../pull/69).  Java 8's stream-based classes feel like they are similarly ""core"" as the standard collection classes, and more functionally-written code may end up using these as much if not more than the base collection classes already excluded.  There are some other core collection classes that also seem similarly basic and very ""core"".  My proposal is that the list of excluded classes gets expanded to include these classes.  Here is a proposed list, based on personal experience with real-life projects and some quick looking through the Java API:  * `java.util.Collection` * `java.util.EnumSet` * `java.util.LinkedHashMap` * `java.util.LinkedHashSet` * `java.util.Optional` * `java.util.OptionalDouble` * `java.util.OptionalInt` * `java.util.OptionalLong` * `java.util.stream.DoubleStream` * `java.util.stream.IntStream` * `java.util.stream.LongStream` * `java.util.stream.Stream`  ``` $ javac Test.java  $ cat config.xml                             $ cat Test.java import java.util.*; import java.util.stream.*;  public class Test {     public void fanOutComplexityUsage() {         // Collections         Collection collection = new LinkedHashSet(List.of(""A"", ""B""));         EnumSet enumSet =                 EnumSet.of(Character.UnicodeScript.COMMON, Character.UnicodeScript.LATIN);         Map map = new LinkedHashMap();          // Streams & optionals         Stream stream = Stream.of(""A"", ""B"");         Optional optional = stream.findAny();         IntStream intStream = IntStream.range(0, 10);         OptionalInt optionalInt = intStream.findAny();         LongStream longStream = LongStream.range(0, 10);         OptionalLong optionalLong = longStream.findAny();         DoubleStream doubleStream = DoubleStream.iterate(1.1, d -> d * 2).limit(5);         OptionalDouble optionalDouble = doubleStream.average();     } }  $ java -jar checkstyle-8.34-all.jar -c config.xml Test.java Starting audit... [ERROR] /var/tmp/Test.java:4:1: Class Fan-Out Complexity is 12 (max allowed is 5). [ClassFanOutComplexity] Audit done. Checkstyle ends with 1 errors. ```","closed","miscellaneous,","mjustin","2020-07-18T07:30:46Z","2020-11-21T05:49:02Z"
"","8889","NonEmptyAtclauseDescription does not work for @return","Check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#NonEmptyAtclauseDescription  ``` D:\dev\checkstyle>javac Sample.java  D:\dev\checkstyle>cat Sample.java class Sample {     // Bug: `@return` does not produce an error.      /**      * @param a xxx      * @return      */     int foo(int a) {         return a;     } }  D:\dev\checkstyle>cat config.xml                                                                                                                                                                                                                                          D:\dev\checkstyle>java -Duser.language=en -Duser.country=US -jar checkstyle-8.36.2-all.jar -c config.xml Sample.java Starting audit... Audit done.  D:\dev\checkstyle> ```  ---------------  Problem: empty `@return` clause is not reported as an error. In the test file above, if you change `@param a xxx` to `@param a`, then it reports an error there, as expected. However `@return` line produces no error.","closed","approved,","muntyan","2020-10-10T18:30:47Z","2020-10-12T17:06:30Z"
"","8141","MissingJavadocMethod: unexpected violation when scope is private","Check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#MissingJavadocMethod  ``` gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ javac Test.java  gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ cat config.xml                                              gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ cat Test.java  public class Test {   public void test() {} // should be OK, but violation is thrown   private void test1() {} // violation (expected) } gauravpunjabi@Gauravs-MacBook-Pro:~/Coding/Open Source/checkstyle$ java -jar target/checkstyle-8.32-SNAPSHOT-all.jar -c config.xml Test.java  Starting audit... [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:2:3: Missing a Javadoc comment. [MissingJavadocMethod] [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:3:3: Missing a Javadoc comment. [MissingJavadocMethod] Audit done. Checkstyle ends with 2 errors. ```   #### Description When the `scope` of `MissingJavadocMethod` is set to private, it throws a violation for public methods as well. As specified in its documentation, it must only check the fields/methods with the given scope.  #### Expected Output The check must throw violation only for the given scope. In this example, it must throw only one violation: ``` [ERROR] /Users/gauravpunjabi/Coding/Open Source/checkstyle/Test.java:3:3: Missing a Javadoc comment. [MissingJavadocMethod] ```","closed","","Gaurav-Punjabi","2020-04-20T09:37:14Z","2020-04-20T18:06:20Z"
"","8811","FinalClass check crashes CheckStyle if there are multiple constructors in a record (Java 14 + Java 15)","Check documentation: https://checkstyle.sourceforge.io/config_design.html#FinalClass  ``` /var/tmp $ javac WhatsThis.java --enable-preview --release=15 Note: WhatsThis.java uses preview language features. Note: Recompile with -Xlint:preview for details.   /var/tmp $ cat config.xml                  /var/tmp $ cat WhatsThis.java public record WhatsThis(     String whatever ) {     public WhatsThis {         assert whatever != null;     }      public WhatsThis(int x) {         this(String.valueOf(x));     } }   /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.36-all.jar -c config.xml WhatsThis.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing WhatsThis.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException: Cannot invoke ""com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck$ClassDesc.registerNonPrivateCtor()"" because ""x0"" is null         at com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck$ClassDesc.access$000(FinalClassCheck.java:269)         at com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.visitToken(FinalClassCheck.java:123)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Checkstyle ends with 1 errors. ```  ---------------  **Since records are implicitly final, the FinalClass check should ignore records completely.**  --------------","closed","approved,","vovkss","2020-09-07T22:16:38Z","2020-09-10T13:21:28Z"
"","8810","DesignForExtension check crashes CheckStyle if an undocumented non-final method is present in a record (Java 14 + Java 15)","Check documentation: https://checkstyle.sourceforge.io/config_design.html#DesignForExtension  ``` /var/tmp $ javac WhatsThis.java --enable-preview --release=15 Note: WhatsThis.java uses preview language features. Note: Recompile with -Xlint:preview for details.   /var/tmp $ cat config.xml                  /var/tmp $ cat WhatsThis.java public record WhatsThis(     String whatever ) {     @Override     public String toString() {         return ""Whatever "" + whatever;     } }   /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.36-all.jar -c config.xml WhatsThis.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing WhatsThis.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException: Cannot invoke ""com.puppycrawl.tools.checkstyle.api.DetailAST.getType()"" because ""searchAST"" is null         at com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck.getNearestClassOrEnumDefinition(DesignForExtensionCheck.java:437)         at com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck.visitToken(DesignForExtensionCheck.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:155)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Checkstyle ends with 1 errors. ```  ---------------  **Since records are implicitly `final`, the `DesignForExtension` check should ignore records completely.**","closed","approved,","vovkss","2020-09-07T21:52:58Z","2020-09-10T13:23:58Z"
"","8779","MissingSwitchDefault to exclude Java 14 switch expressions","Check documentation: https://checkstyle.sourceforge.io/config_coding.html#MissingSwitchDefault  ``` > javac Sample.java  > type config.xml                                > type Sample.java public class Sample {     public enum Options {         ONE,         TWO,         THREE     }      public int foo(Options option) {         switch (option) { // violation             case ONE:                 return 1;             case TWO:                 return 2;             case THREE:                 return 3;         }          return 0;     }      public int bar(Options option) {         return switch (option) { // violation, but not expected              case ONE -> 1;             case TWO -> 2;             case THREE -> 3;         };     } }  > set RUN_LOCALE=""-Duser.language=en -Duser.country=US"" > java %RUN_LOCALE% -jar checkstyle-8.36-all.jar -c config.xml Sample.java Starting audit... [ERROR] C:\temp\Sample.java:9:9: switch without ""default"" clause. [MissingSwitchDefault] [ERROR] C:\temp\Sample.java:22:16: switch without ""default"" clause. [MissingSwitchDefault] Audit done. Checkstyle ends with 2 errors. ```  ---------------  **Expected:** no violation on line 22 as compiler will validate this and cause compiler error, so no need for additional static analysis.   **Describe what you expect in detail.** The changes related to https://github.com/checkstyle/checkstyle/issues/8672 allow Java 14 switch expressions to be parsed by Checkstyle now 👍. However, the compiler enforces exhaustive branches for switch _expressions_, and ideally there'd be a way to only have this check apply to the original switch statement syntax.  The original rationale behind the `MissingSwitchDefault` check stated in the docs makes sense for the original switch statements: > Rationale: It's usually a good idea to introduce a default case in every switch statement. Even if the developer is sure that all currently possible cases are covered, this should be expressed in the default branch, e.g. by using an assertion. This way the code is protected against later changes, e.g. introduction of new types in an enumeration type.  However, Java 14 switch expressions must be exhaustive otherwise there will be a compilation error. If the logic isn't exhaustive, a `default` case is already mandatory in order for the expression to be valid. And if there is no `default` case, adding a new element to the enumeration in the future requires an update to the expression in order to compile. For example, removing the `case THREE -> 3;` line yields: ``` > javac Sample.java Sample.java:22: error: the switch expression does not cover all possible input values         return switch (option) {                ^ 1 error ```  In the example code above, the desired state is for the syntax in the `foo` method to remain a violation as part of the check, and the `bar` method to not be a violation as the compiler is enforcing a stronger guarantee than adding a `default` would provide. This seems like a better default behavior to me, but adding a property to configure the behavior of whether or not switch _expressions_ are evaluated by the check would also be reasonable.","closed","approved,","eggilbert","2020-08-31T15:05:22Z","2021-09-12T05:15:32Z"
"","8467","Java14 Full Records Support Check Validation: IllegalInstantiationCheck","Check documentation: https://checkstyle.sourceforge.io/config_coding.html#IllegalInstantiation  From check documentation: _Checks for illegal instantiations where a factory method is preferred._  ``` ➜  full-record-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java Note: TestClass.java uses or overrides a deprecated API. Note: Recompile with -Xlint:deprecation for details. Note: TestClass.java uses preview language features. Note: Recompile with -Xlint:preview for details. ➜  full-record-grammar cat config.xml                                        ➜  full-record-grammar cat TestClass.java public class TestClass {     public record MyRecord1() {         static Boolean obj1 = new Boolean(true); // violation         static String obj2 = new String(); // ok     }      static class MyClass{         Boolean obj1 = new Boolean(true); // violation         String obj2 = new String(); // ok     } } ➜  full-record-grammar java $RUN_LOCALE -jar ~/IdeaProjects/checkstyle/target/checkstyle-8.35-SNAPSHOT-all.jar -c config.xml TestClass.java Starting audit... [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:3:31: Instantiation of java.lang.Boolean should be avoided. [IllegalInstantiation] [ERROR] /home/nick/Desktop/full-record-grammar/TestClass.java:8:24: Instantiation of java.lang.Boolean should be avoided. [IllegalInstantiation] Audit done. Checkstyle ends with 2 errors. ```  This check works as intended, so I think we can close this issue.","closed","","nick-mancuso","2020-07-15T15:13:51Z","2020-07-20T17:36:07Z"
"","8934","FinalLocalVariable throws a NPE on Switch expression in assignment","Check documentation: https://checkstyle.sourceforge.io/config_coding.html#FinalLocalVariable  Discovered at https://github.com/checkstyle/checkstyle/pull/8920#pullrequestreview-518815743  FinalLocalVariable is throwing a NPE when a switch expression is used on the RHS of an assignment expression:  ``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 ExpressionSwitchBugs.java ➜  src cat config.xml                                                                                                       ➜  src cat ExpressionSwitchBugs.java  public class ExpressionSwitchBugs {     private static final int staticValue = 2;     private static final int staticField = switch(staticValue) {         case 0 -> -1;         case 2 -> 2;         default -> 3;     }; } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.37-SNAPSHOT-all.jar -c config.xml ExpressionSwitchBugs.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing ExpressionSwitchBugs.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.updateUninitializedVariables(FinalLocalVariableCheck.java:482)         at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.updateAllUninitializedVariables(FinalLocalVariableCheck.java:471)         at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.leaveToken(FinalLocalVariableCheck.java:345)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyLeave(TreeWalker.java:357)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:454)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Checkstyle ends with 1 errors.  ``` I would expect FinalLocalVariable to be able to successfully check this file.","closed","approved,","nick-mancuso","2020-10-28T20:21:59Z","2020-11-11T10:21:30Z"
"","8142","NeedBraces: xdoc rendering issue in examples","Check documentation: https://checkstyle.sourceforge.io/config_blocks.html#NeedBraces  One of the example in xdocs of `NeedBracesCheck` has some rendering issue as shown in the screenshot below:","closed","","Gaurav-Punjabi","2020-04-20T18:21:47Z","2020-04-24T10:03:09Z"
"","8237","WhitespaceAround ignores empty constructor whitespaces","Check documentation: https://checkstyle.org/config_whitespace.html#WhitespaceAround ``` >javac Test.java >cat Test.java  package com.example;  public class Test {     private Test(){} // Does not worn about absent space between "")"" and ""{"" }  >cat config.xml                                               >java $RUN_LOCALE -jar checkstyle-8.32-all.jar -c config.xml Test.java Starting audit... Audit done ``` Expected: violation on the 4th line (constructor declaration). There should be space between `){`  Note, that this violation works Ok without `allowEmptyConstructors` option, but an extra violation is reported about empty constructors: ``` >cat config.xml                                   >java $RUN_LOCALE -jar checkstyle-8.32-all.jar -c config.xml Test.java Starting audit... [ERROR] /Users/pavel/tmp/17/Test.java:4:19: '{' is not followed by whitespace. [WhitespaceAround] [ERROR] /Users/pavel/tmp/17/Test.java:4:19: '{' is not preceded with whitespace. [WhitespaceAround] [ERROR] /Users/pavel/tmp/17/Test.java:4:20: '}' is not preceded with whitespace. [WhitespaceAround] Audit done. Checkstyle ends with 3 errors. ```  I tested on Chekcstyle 8.32","closed","approved,","pbaranchikov","2020-05-14T10:06:12Z","2021-04-13T13:53:29Z"
"","8200","Add trailing asterisk(*) to folderPattern in RegexpOnFilename doc","Check documentation: https://checkstyle.org/config_regexp.html#RegexpOnFilename  The below given configuration is taken from above given link to documentation  *This is to configure the check to only allow Java and XML files only in your source folder and ignore any other folders* #### config.xml  ```xml                                                          	 		 		 		 	  ``` *This check tests the name of test file. So, contents of test file are not provided*  #### Current Output  ``` F:\College\Checkstyle Jar>set RUN_LOCALE=""-Duser.language=en -Duser.country=US""  F:\College\Checkstyle Jar>java %RUN_LOCALE% -jar checkstyle-8.30-all.jar -c config.xml src\NewClass.java Starting audit... Audit done.  F:\College\Checkstyle Jar>java %RUN_LOCALE% -jar checkstyle-8.30-all.jar -c config.xml src\config.xml Starting audit... Audit done.  F:\College\Checkstyle Jar>java %RUN_LOCALE% -jar checkstyle-8.30-all.jar -c config.xml src\hello.md Starting audit... Audit done. ```  #### Expected Output  ``` F:\College\Checkstyle Jar>set RUN_LOCALE=""-Duser.language=en -Duser.country=US""  F:\College\Checkstyle Jar>java %RUN_LOCALE% -jar checkstyle-8.30-all.jar -c config.xml src\NewClass.java Starting audit... Audit done.  F:\College\Checkstyle Jar>java %RUN_LOCALE% -jar checkstyle-8.30-all.jar -c config.xml src\config.xml Starting audit... Audit done.  F:\College\Checkstyle Jar>java %RUN_LOCALE% -jar checkstyle-8.30-all.jar -c config.xml src\hello.md Starting audit... [ERROR] F:\College\Checkstyle Jar\src\hello.md:1: File not match folder pattern '[\\/]src[\\/]*' and file pattern '\.(java|xml)$'. [RegexpOnFilename] Audit done. Checkstyle ends with 1 errors. ```  ------------  While I was trying different configurations, I found errors in the configurations which contains attribute **folderPattern**. It was not working as expected. So, I had a look at the Java code in RegexpOnFilename.java file and I found this.  Consider this configuration, ```xml            ```  Consider this file, `F:\examples\src\main_properties.properties`  The code which gets the folder pattern of the file is, ```java File file = new File(""main_properties.properties""); file.getCanonicalFile().getParent(); ``` *Consider this java file to be in src folder.*  The return value of the statement file.getCanonicalFile().getParent(); in this case is **F:\examples\src**. But the regular expression in the configuration is [\\/]src[\\/]. So, it tries to find a match for \src\ which leads to unexpected behavior.  I am working on windows. So, this can also be problem of operating system.  ------------  We can perform following changes `[\\/]src[\\/]` ---> `[\\/]src[\\/]*`  It will try to match 0 or more occurrences of the last slash(/ or \).  **We need to perform this change in each and every example provided in documentation(link provided at the starting of description) which contains property _folderPattern_**.","open","","developerhb","2020-04-27T17:03:59Z","2020-04-28T03:38:13Z"
"","8546","Chain call methods with lamdba, indentation check wrong","Check documentation: https://checkstyle.org/config_misc.html#Indentation  D:\>type config.xml ```xml                                                               ```   D:\>type CheckStyleTest.java ```java import java.util.concurrent.CompletableFuture;  public class CheckStyleTest {   public static void main(String[] args) {     CompletableFuture.runAsync(         () -> {           System.out.println();           System.out.println();         });      CompletableFuture.runAsync(             () -> {  // line 12               System.out.println();               System.out.println();             })   // line 15         .exceptionally(             (throwable) -> {               return null;             });   } } ``` ```bash D:\>set RUN_LOCALE=""-Duser.language=en -Duser.country=US"" D:\>java %RUN_LOCALE% -jar checkstyle-8.34-all.jar -c config.xml CheckStyleTest.java ``` Starting audit... [ERROR] D:\CheckStyleTest.java:12:13: 'lambda arguments' has incorrect indentation level 12, expected level should be one of the following: 6, 8. [Indentation] [ERROR] D:\CheckStyleTest.java:13:15: 'block' child has incorrect indentation level 14, expected level should be one of the following: 8, 10, 12. [Indentation] [ERROR] D:\CheckStyleTest.java:14:15: 'block' child has incorrect indentation level 14, expected level should be one of the following: 8, 10, 12. [Indentation] [ERROR] D:\CheckStyleTest.java:15:13: 'block rcurly' has incorrect indentation level 12, expected level should be one of the following: 6, 8. [Indentation] Audit done. Checkstyle ends with 4 errors.  --------------- ### Details: - Format tools: Intellij + plugin: **google-java-format** - When I call methods using a chain with lambda params, checkstyle check failed that the first lambda indentation is wrong. Is that a bug? Does is not support it? Or just my config is lack?","closed","indentation,","Jay-Zou","2020-07-22T07:52:42Z","2021-02-17T12:48:43Z"
"","8323","'Optional.ifPresentOrElse()' else block produces  Indentation error","Check documentation: https://checkstyle.org/config_misc.html#Indentation  D:\>type config.xml ```                                                                 ```  D:\>type IsPresentOrElseIndenTest.java ``` import java.util.Optional; public class IsPresentOrElseIndenTest {     void method() {           Optional.of(""Is Present"").ifPresentOrElse(text -> {             firstMethod();             someOtherMethod();         }, () -> {             firstMethod();             someOtherMethod();         });     }     private void firstMethod() {     }     private void someOtherMethod() {     } } ```  `D:\>java -jar checkstyle-8.29-all.jar -c config.xml IsPresentOrElseIndenTest.java` Starting audit... ``` [ERROR] D:\IsPresentOrElseIndenTest.java:8: 'block' child has incorrect indentation level 12, expected level should be one of the following: 16, 20, 24. (8:0) [Indentation] [ERROR] D:\IsPresentOrElseIndenTest.java:9: 'block' child has incorrect indentation level 12, expected level should be one of the following: 16, 20, 24. (9:0) [Indentation] [ERROR] D:\IsPresentOrElseIndenTest.java:10: 'block rcurly' has incorrect indentation level 8, expected level should be one of the following: 12, 16. (10:0) [Indentation] ``` Audit done.  Expected: Else block of Optional.ifPresentOrElse() with the same indentation shouldn't  produce an error","open","indentation,","Strontsitskyi","2020-06-17T17:29:50Z","2020-06-17T19:00:39Z"
"","8806","IndentationCheck: false positive with nested records' methods (Java 14 + Java 15)","Check documentation: https://checkstyle.org/config_misc.html#Indentation  ``` /var/tmp $ javac OuterClass.java --enable-preview --release=15 Note: OuterClass.java uses preview language features. Note: Recompile with -Xlint:preview for details.   /var/tmp $ cat config.xml                                                                       /var/tmp $ cat OuterClass.java public final class OuterClass {      private record InnerRecord(         String value     ) {         @Override         public boolean equals(final Object obj) {             return                 obj instanceof InnerRecord theObj                 && value.equals(theObj.value);         }          @Override         public int hashCode() {             return value.hashCode();         }     }  }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.36-all.jar -c config.xml OuterClass.java Starting audit... [ERROR] C:\Users\vovks\Desktop\xx\OuterClass.java:6:9: 'method def modifier' has incorrect indentation level 8, expected level should be 4. [Indentation] [ERROR] C:\Users\vovks\Desktop\xx\OuterClass.java:8:13: 'method def' child has incorrect indentation level 12, expected level should be 8. [Indentation] [ERROR] C:\Users\vovks\Desktop\xx\OuterClass.java:11:9: 'method def rcurly' has incorrect indentation level 8, expected level should be 4. [Indentation] [ERROR] C:\Users\vovks\Desktop\xx\OuterClass.java:13:9: 'method def modifier' has incorrect indentation level 8, expected level should be 4. [Indentation] [ERROR] C:\Users\vovks\Desktop\xx\OuterClass.java:15:13: 'method def' child has incorrect indentation level 12, expected level should be 8. [Indentation] [ERROR] C:\Users\vovks\Desktop\xx\OuterClass.java:16:9: 'method def rcurly' has incorrect indentation level 8, expected level should be 4. [Indentation] Audit done. Checkstyle ends with 6 errors. ```  ---------------  This issue reproduces on both JDK 14 and on JDK 15 early-access build.   My expectation was that no errors are emitted by Checkstyle in this case.  If I replace the nested record with a nested static class, there are no errors.   It seems that `IndentationCheck` is not aware of records and treats their contents as if they were the contents of the enclosing class.","closed","indentation,","vovkss","2020-09-07T18:42:37Z","2020-09-10T11:32:07Z"
"","8929","Indentation: Java14 switch expressions[JEP-361] fails indentation checks when lineWrappingIndentation property of Indentation module is a non-default value","Check documentation: https://checkstyle.org/config_misc.html#Indentation  ``` /var/tmp $ javac Main.java  /var/tmp $ cat config.xml                                                                      /var/tmp $ cat Main.java class Main {      public static void main(String...args) {          if(args.length < 2) {             return;         }          String requestId = switch (args[0]) {             case ""CREATE"" -> ""RANDOM"";                 case ""UPDATE"" -> args[1];                 default -> ""DEFAULT"";         };         System.out.println(requestId);     } }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.36.2-all.jar -c config.xml Main.java Starting audit... [ERROR] /Users/ajith.km/checkstyle/Main.java:10:13: 'case' has incorrect indentation level 12, expected level should be 16. [Indentation] [ERROR] /Users/ajith.km/checkstyle/Main.java:11:17: 'case' child has incorrect indentation level 16, expected level should be 12. [Indentation] [ERROR] /Users/ajith.km/checkstyle/Main.java:12:17: 'case' child has incorrect indentation level 16, expected level should be 12. [Indentation] Audit done. Checkstyle ends with 3 errors. ```  ---------------  With Java14 switch expressions[JEP-361], when `lineWrappingIndentation` property of `Indentation` module is set to `8`, checkstyles suggests lower indentation level `case` statements to move to a higher indentation level and at the same time suggests higher indentation level `case` to move to a lower indentation level. In the example presented above, we could see that checkstyle fails for both the indentation levels 12 and 16. The `case` statements now have no valid indentation level.  --------------","closed","indentation,","ajithalbus","2020-10-27T16:03:09Z","2021-08-01T20:49:58Z"
"","8808","JavadocTypeCheck: false positive with JavaDoc @param tags for Records (Java 14 + Java 15)","Check documentation: https://checkstyle.org/config_javadoc.html#JavadocType  ``` /var/tmp $ javac MyRecord.java --enable-preview --release=15 Note: MyRecord.java uses preview language features. Note: Recompile with -Xlint:preview for details.   /var/tmp $ cat config.xml                                            /var/tmp $ cat MyRecord.java /**  * My new record.  *  * @param value Sponge Bob rules the world!  */ public record MyRecord(     String value ) { }   /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.36-all.jar -c config.xml MyRecord.java Starting audit... [ERROR] C:\Users\vovks\Desktop\xx\MyRecord.java:4:4: Unused @param tag for ''. [JavadocType] Audit done. Checkstyle ends with 1 errors. ```  ---------------  **The expectation is that no errors are reported** — `@param` is the way to document record fields. See https://stackoverflow.com/a/61451046/2170192 https://bugs.openjdk.java.net/browse/JDK-8225055","closed","approved,","vovkss","2020-09-07T20:53:14Z","2020-09-25T14:00:43Z"
"","8807","SuppressWithPlainTextCommentFilter is slow on files with multiple errors","Check documentation: https://checkstyle.org/config_filters.html#SuppressWithPlainTextCommentFilter  ``` > javac BigJava.java >  > type ..\checkstyle\checkstyle.xml                                                            > type BigJava.java public interface BigJava {     int XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0 = 0; ... full file attached     int XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX2999 = 0; }   > set ""RUN_LOCALE=-Duser.language=en -Duser.country=US"" > java %RUN_LOCALE% -jar checkstyle-8.36-all.jar -c config.xml BigJava.java Starting audit... [WARN] C:\11\eclipse-cs-254-bad\src\BigJava.java:3: Line is longer than 120 characters (found 134). [LineLength] ... [WARN] C:\11\eclipse-cs-254-bad\src\BigJava.java:3002: Line is longer than 120 characters (found 137). [LineLength] Audit done. ```  ---------------  I expect the command above to run in roughly 2 seconds on a mobile 2GHz i7. However, it takes not less than 16 seconds. It becomes a pain when my IDE waits for the checkstyle plugin during the full build.  The filter SuppressWithPlainTextCommentFilter re-reads the file from disk on each error instead of reading it just one time.  I'm willing to create a pull request that will add caching to the filter.  -------------- [BigJava.java.txt](https://github.com/checkstyle/checkstyle/files/5184721/BigJava.java.txt)","open","approved,","basinilya","2020-09-07T19:07:21Z","2020-11-07T08:03:01Z"
"","8269","Update documentation for BeforeExecutionExclusionFileFilter","Check documentation: https://checkstyle.org/config_filefilters.html#BeforeExecutionExclusionFileFilter  We need to have example of how user can exclude test folders in projects.  Detected at https://github.com/checkstyle/eclipse-cs/issues/132","closed","easy,","romani","2020-05-29T03:47:41Z","2021-04-06T15:04:33Z"
"","8239","Unnecessary Parentheses does not report violation on assignment within conditional","Check documentation: https://checkstyle.org/config_coding.html#UnnecessaryParentheses  ``` C:\Users\Shashwat\Documents>cat config.xml                      C:\Users\Shashwat\Documents>cat Test.java public class Test {         public static void main(String[] args) {                 int n=2;                 if(((n=n%2))==0) // warning expected                 System.out.println(""yes"");         } }  C:\Users\Shashwat\Documents>javac Test.java // no output  C:\Users\Shashwat\Documents>java -jar checkstyle-8.31-all.jar -c config.xml Test.java Starting audit... Audit done. ```  ---------------  There is a redundant set of parentheses on line 5 which should have been reported.","open","","shashwatj07","2020-05-16T05:51:16Z","2020-05-16T06:25:26Z"
"","8973","RequireThis: Incorrectly locates errors for final instance variable","Check documentation: https://checkstyle.org/config_coding.html#RequireThis Discovered in #8873 ``` $ cat Test.java public class Test {   final int x = 0;   public Test(int x) {     x = x; // wrong error message   } }  $ cat config.xml                         java -jar .\checkstyle-8.37-all.jar -c config.xml Test.java Starting audit... [ERROR] E:\checkstyle-playground\Test.java:5:5: Reference to instance variable 'x' needs ""this."". [RequireThis] Audit done. Checkstyle ends with 1 errors. ```  Since `x` is a `final` instance variable, assigning `this.x = x` will give an error. Therefore, the error should be at 5:9, instead of 5:5 (which would make the code: `x = this.x`)  Similar problems happen for instance variable in `record` (which is `private final` by default) **in java 15**: ``` $ cat InputRequireThis.java public record InputRequireThis(int x, int y) {   InputRequireThis(int x) {     this(x, 42);     x = x; // wrong error message   } }  $ cat config.xml                         java -jar .\checkstyle-8.37-all.jar -c config.xml InputRequireThis.java Starting audit... [ERROR] E:\checkstyle-playground\InputRequireThis.java:4:5: Reference to instance variable 'x' needs ""this."". [RequireThis] Audit done. Checkstyle ends with 1 errors. ``` The error should be at 4:9 instead of 4:5.","open","approved,","anhminhtran235","2020-11-09T05:58:41Z","2020-11-20T02:06:58Z"
"","8999","RequireThis: Disable the check when inside Records (except when also inside a normal constructor)","Check documentation: https://checkstyle.org/config_coding.html#RequireThis  Records in java 15: ``` $ cat Test.java public record Test(int x, int y) {   public Test {     this.x = 2; // compile error   }    public Test(int x) {     this(x, 1);            this.x = x; // ok   }    public void foo() {        this.x = 1; // compile error   } }  $ javac --source 15 --enable-preview Test.java Test.java:3: error: cannot assign a value to final variable x     this.x = 2;         ^ Test.java:12: error: cannot assign a value to final variable x     this.x = 1;         ^ Note: Test.java uses preview language features. Note: Recompile with -Xlint:preview for details. 2 errors ```  We can almost never write `this.variable = [value]` since all variables in Records are `private final` by default. There's 1 case where we can assign `this.variable` to a value: inside a normal `constructor` (not `compact constructor`).  When someone writes `x = x`, what they mean is `this.x = x`. Most people would never write `x = this.x`. Since `this.x = [anything]` is a compile error in Records (except when it's inside a normal constructor), I believe we should disable ALL requireThis check inside Records EXCEPT when it's inside a normal constructor.","open","","anhminhtran235","2020-11-20T01:19:07Z","2020-11-20T01:20:46Z"
"","8873","RequireThis: Incorrectly triggers for record fields in compact constructor","Check documentation: https://checkstyle.org/config_coding.html#RequireThis  ``` /var/tmp $ javac --enable-preview --release 14 RequireThisRecord.java Note: RequireThisRecord.java uses preview language features. Note: Recompile with -Xlint:preview for details. ```  `/var/tmp $ cat checkstyle-recordthis.xml` ```xml                                                                                              ```  `/var/tmp $ cat RequireThisRecord.java` ```java import java.util.Map;  record RequireThisRecord(String name, Map items) {      public RequireThisRecord {         if (name == null) {             name = """";         }         items = Map.copyOf(items);     }  } ```  ``` /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.36.2-all.jar -c checkstyle-recordthis.xml RequireThisRecord.java Starting audit... [WARN] RequireThisRecord.java:6:13: Reference to instance variable 'name' needs ""this."". [RequireThis] [WARN] RequireThisRecord.java:7:13: Reference to instance variable 'name' needs ""this."". [RequireThis] [WARN] RequireThisRecord.java:9:9: Reference to instance variable 'items' needs ""this."". [RequireThis] [WARN] RequireThisRecord.java:9:28: Reference to instance variable 'items' needs ""this."". [RequireThis] Audit done.  ``` ---------------  I'm back again :) been playing with records some more in Configurate, and came across this issue. The `RequireThis` check seems to treat accesses in the record constructor as acting on the backing fields, not the (implicit) constructor parameters, so it expects them to be qualified with `this.`. However, adding `this.` to the variables results in a compile-time error, so this check should not trigger an error.  From [the JLS section on records](https://docs.oracle.com/javase/specs/jls/se15/preview/specs/records-jls.html#jls-8.10), section 8.10.4:  > It is a compile-time error if an assignment occurs (16) to a field corresponding to a record component of the record class in the body of the compact constructor. > > All fields corresponding to the record components of the record class are implicitly initialized to the value of the corresponding formal parameter after the body of the compact constructor. These fields are implicitly initialized in the order that they are declared in the record component list.  I came across this as part of some work I'm doing locally to validate the API -- the full original class that caused the error is at https://gist.github.com/zml2008/5f6de6484eed5b9d8451c5e1625f8572","closed","approved,","zml2008","2020-10-03T10:04:09Z","2020-11-22T14:36:23Z"
"","8110","Remove from PackageDeclaration validation for empty files","Check documentation: https://checkstyle.org/config_coding.html#PackageDeclaration  ``` /var/tmp $ javac Test.java /var/tmp$ cat Test.java       /var/tmp$ cat config.xml                / var/tmp$ java -jar /var/tmp/checkstyle-8.29-all.jar -c config.xml Test.java  Starting audit... [ERROR] /var/tmp/Test.java:1: Missing package declaration. [PackageDeclaration] Audit done. Checkstyle ends with 1 errors. ```  ---------------  problem is detected at https://github.com/checkstyle/checkstyle/pull/8024/files#r404829803 We need to  1) remove validation from Check, as we would like to have this Check complete support of Xpath suppression. 2) add in our config with RegexpMultiline Check that do this validation  3) update xdoc of https://checkstyle.org/config_regexp.html#RegexpMultiline to have it as example. 4) remove temporal notes that PackageDeclaration is not completely supported by Xpath that we did at https://github.com/checkstyle/checkstyle/pull/8024 ```                             ```  -----  We will lose validation on files where whole content is commented out, see example at #1149 . To make such validation we need to create some Check that will have AST, if we make Generic Xpath Check (#6481) , it we can do validation without specific Check implementation.","closed","approved,","romani","2020-04-16T14:48:53Z","2020-04-29T13:22:11Z"
"","8809","MissingSwitchDefault: false positive with exhaustive switch expressions on enums (Java 14 + Java 15)","Check documentation: https://checkstyle.org/config_coding.html#MissingSwitchDefault  ``` /var/tmp $ javac Switcher.java   /var/tmp $ cat config.xml                  /var/tmp $ cat Switcher.java public class Switcher {      public enum Fruit {         APPLE,         PEAR     }      public int theSwitcher(final Fruit fruit) {         return switch (fruit) {             case APPLE -> 1;             case PEAR -> 2;         };     } }   /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.36-all.jar -c config.xml Switcher.java Starting audit... [ERROR] C:\Users\vovks\Desktop\xx\Switcher.java:9:16: switch without ""default"" clause. [MissingSwitchDefault] Audit done. Checkstyle ends with 1 errors. ```  ---------------  **Expecting no error,** since the cases of the `switch` expression are exhaustive.   In fact, including a `default` clause would actually **harm** in this case: the compile wouldn't emit a compilation error if a new enum constant is introduced.   It would possibly make sense to include a new separate check which ensures that the `default` clause is **not** included in exhaustive enum-based `switch` expressions.","closed","","vovkss","2020-09-07T21:26:02Z","2020-09-08T00:31:36Z"
"","8933","IllegalType: inability to set default value for property memberModifiers","Check documentation: https://checkstyle.org/config_coding.html#IllegalType  ```  $ cat Test.java  public class Test {    private Optional field1; }  $ cat config.xml                                                                          $ java -jar checkstyle-8.36.2-all.jar -c config.xml Test.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - cannot initialize module IllegalType - Cannot set property 'memberModifiers' to ''   at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:482)   at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:201)   at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:404)   at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)   at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)   at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module IllegalType - Cannot set property 'memberModifiers' to ''   at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:125)   at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:201)   at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:477)   ... 5 more Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Cannot set property 'memberModifiers' to ''   at com.puppycrawl.tools.checkstyle.api.AutomaticBean.tryCopyProperty(AutomaticBean.java:241)   at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:194)   at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:120)   ... 7 more Caused by: java.lang.reflect.InvocationTargetException   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   at java.lang.reflect.Method.invoke(Method.java:498)   at org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod(PropertyUtilsBean.java:2128)   at org.apache.commons.beanutils.PropertyUtilsBean.setSimpleProperty(PropertyUtilsBean.java:2109)   at org.apache.commons.beanutils.BeanUtilsBean.copyProperty(BeanUtilsBean.java:437)   at com.puppycrawl.tools.checkstyle.api.AutomaticBean.tryCopyProperty(AutomaticBean.java:231)   ... 9 more Caused by: java.lang.IllegalArgumentException: given name    at com.puppycrawl.tools.checkstyle.utils.TokenUtil.getTokenId(TokenUtil.java:174)   at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.setMemberModifiers(IllegalTypeCheck.java:828)   ... 17 more Checkstyle ends with 1 errors. ```  Expected: work as `memberModifiers` is not mentioned in config.","closed","miscellaneous,","romani","2020-10-28T14:22:02Z","2020-11-30T06:10:47Z"
"","8915","Support for a checkstyle rule, that allows restricting IllegalType(s) to fields only","Check documentation: https://checkstyle.org/config_coding.html#IllegalType  /var/tmp $ javac ClassWithOptionalFields.java ``` No output ```  /var/tmp $ cat config.xml ```                                                                                                  ```  /var/tmp $ cat ClassWithOptionalFields.java ``` import java.util.Optional;  class ClassWithOptionalFields {    //checkstyle violation reported- OK!    private Optional field1;     //checkstyle violation reported - OK!    protected Optional field2;     //checkstyle violation reported - OK!    public Optional field3;     //no checkstyle violation reported - BAD!    Optional field4; } ```  set RUN_LOCALE=""-Duser.language=en -Duser.country=US"" java %RUN_LOCALE% -jar checkstyle-8.36.2-all.jar -c config.xml ClassWithOptionalFields.java ``` Starting audit... [ERROR] C:\Users\klgun\Downloads\ClassWithOptionalFields.java:5:13: Using 'Optional' as a field is considered bad practice! [optionalAsField] [ERROR] C:\Users\klgun\Downloads\ClassWithOptionalFields.java:8:15: Using 'Optional' as a field is considered bad practice! [optionalAsField] [ERROR] C:\Users\klgun\Downloads\ClassWithOptionalFields.java:11:12: Using 'Optional' as a field is considered bad practice! [optionalAsField] Checkstyle ends with 3 errors. ``` ---------------  This issue represents rather a FR than a bug. The above output is correct behaviour. However what I expect is to be able to receive 4 warnings, the package private field4 should also be able to be expressed as a violation - as with current checkstyle it is not possible to restrict the IllegalType check to fields (and all fields - independent of modifiers) only. The mentioned workaround uses VARIABLE_DEF. However VARIABLE_DEF also includes local variables (which we want to support for Optional of course). So as a workaround i am able to configure the rule to only look at contexts where modifiers private, protected and public are present (via 'memberModifiers'). In https://github.com/checkstyle/checkstyle/issues/8912 it was suggested to implement that feature with a new check instead of introducing a new TokenType. So please add support for a checkstyle rule, that allows restricting IllegalType(s) to fields only.  --------------","closed","","gb-klein","2020-10-22T08:23:57Z","2020-10-28T14:23:22Z"
"","8770","While using HiddenField, ignoreSetter fails if setter returns a parameterized class","Check documentation: https://checkstyle.org/config_coding.html#HiddenField  A configuration defined in config.xml : ```                            ``` still raises errors with the following code ``` public abstract class AbstractMyClass {  private String myAttribute;  public  T setMyAttribute(String myAttribute) {         this.myAttribute = myAttribute;         return (T) this;     } } ```  ---------------   The setMyAttribute() method should be recognized as a setter, it is not : checkstyle raises an error on this method instead of ignoring setter. Note that this kind of setter is used while we want to avoid casting return value while using sub classes of AbstractMyClass.  --------------","open","discussion ongoing,","alugan","2020-08-28T08:21:31Z","2020-09-14T14:38:45Z"
"","8895","FinalLocalVariable: NPE in records","Check documentation: https://checkstyle.org/config_coding.html#FinalLocalVariable  problem was detected during https://github.com/checkstyle/contribution/commit/529fc836f88e0f88148ab7760a5ec7ba4d100715 `**/resources-noncompilable/**/checks/metrics/cyclomaticcomplexity/InputCyclomaticComplexityRecords.java` is name of file in our repo that cause problem.  ``` $ cat MyRecord2.java  //non-compiled with javac: Compilable with Java14  public record MyRecord2(boolean t, boolean f) {     public MyRecord2 { // violation         int a = 1;         int b = 1;         int c = 1;         int d = 1;         int n = 8;         if (a == 1) { // 2, if         } else if (a == b // 3, if                 && a == c) { // 4, && operator             if (c == 2) { // 5, if             }         } else if (a == d) { // 6, if             try {             } catch (Exception e) { // 7, catch             }         } else {             switch (n) {                 case 1: // 8, case                     break;                 case 2: // 9, case                     break;                 case 3: // 10, case                     break;                 default:                     break;             }         }         d = a < 0 ? -1 : 1; // 11, ternary operator     } }  $ cat config.xml                          $ java -jar checkstyle-8.36.2-all.jar -c config.xml MyRecord2.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing MyRecord2.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.findFirstUpperNamedBlock(FinalLocalVariableCheck.java:781) 	at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.isSameVariables(FinalLocalVariableCheck.java:800) 	at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.access$700(FinalLocalVariableCheck.java:142) 	at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck$ScopeData.findFinalVariableCandidateForAst(FinalLocalVariableCheck.java:863) 	at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.getFinalCandidate(FinalLocalVariableCheck.java:444) 	at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.visitToken(FinalLocalVariableCheck.java:304) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Checkstyle ends with 1 errors ```  after fix we should remove this exclude from contribution repo.","closed","approved,","romani","2020-10-12T21:51:08Z","2020-10-26T07:00:49Z"
"","8315","Improve violation message of ImportOrder","Check documentation:  https://checkstyle.org/config_imports.html#CustomImportOrder https://checkstyle.org/config_imports.html#ImportOrder  detected at https://github.com/checkstyle/checkstyle/issues/8241#issuecomment-629688932  ``` $ cat config.xml                                                                                                   $ cat Test.java  import static java.lang.Math.abs; // violation import static java.lang.Math.PI;  public class SomeClass { }  $ java $RUN_LOCALE -jar /var/tmp/checkstyle-8.33-all.jar -c config.xml Test.java Starting audit... [ERROR] /var/tmp/Test.java:2:1: Wrong lexicographical order for 'java.lang.Math.PI' import.  Should be before 'java.lang.Math.abs'. [CustomImportOrder] [ERROR] /var/tmp/Test.java:2:1: Wrong order for 'java.lang.Math.PI' import. [ImportOrder] Audit done. Checkstyle ends with 2 errors. ```  ImportOrder message is very obscure. Should be close/similar to CustomImportOrder message.","open","approved,","romani","2020-06-13T22:03:56Z","2020-10-31T19:22:29Z"
"","8299","RedundantModifierCheck throws NullPointerException","Check documentation:  [RedundantModifier](https://checkstyle.sourceforge.io/config_modifier.html#RedundantModifier)   ```` $ cat TestClass.java import java.io.IOException; import java.io.OutputStreamWriter; import java.io.Writer; import java.net.Socket; import java.nio.charset.StandardCharsets; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Locale; import java.util.concurrent.Callable;  public class DaytimeTask implements Runnable, Callable {   private static final String UTF_8 = StandardCharsets.UTF_8.name();   private final Socket connection;    DaytimeTask(Socket connection) {     this.connection = connection;   }    @Override   public Void call() {     run();     return null;   }    @Override   @SuppressWarnings(""PMD.LawOfDemeter"")   public void run() {     try (Writer out =              new OutputStreamWriter(connection.getOutputStream(), UTF_8);          connection;) {       Date now = new Date();       SimpleDateFormat format =           new SimpleDateFormat(""yy-MM-dd hh:mm:ss Z"", Locale.getDefault());       out.write(ProcessHandle.current().pid() + "" "" + format.format(now)                 + ""\r\n"");       out.flush();     } catch (IOException ex) {       System.err.println(ex);     }   } }  $ cat TestConfig.xml                            $ java -jar checkstyle-8.33-all.jar -c TestConfig.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)     at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck.checkForRedundantModifier(RedundantModifierCheck.java:424)     at com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck.processResources(RedundantModifierCheck.java:413)     at com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck.visitToken(RedundantModifierCheck.java:237)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:340)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:451)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:278)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:151)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)     ... 5 more Checkstyle ends with 1 errors. ````   ---------------  Describe what you expect in detail.  Checkstyle should complete successfully either emitting violations or no error messages when there are none. No NullPointerException as above must occur.  --------------  First reported at Checkstyle Google group:  https://groups.google.com/forum/m/#!topic/checkstyle/OZvmwJypxvI  Links to additional files throwing similar exception in Google Group post.","closed","high demand,","Fernal73","2020-06-03T02:21:13Z","2020-07-01T07:47:39Z"
"","8348","doc: change ""nmancus1"" to ""Nick Mancuso"" in release notes","Change username  ""nmancus1""  to ""Nick Mancuso"" in release notes.","closed","","nick-mancuso","2020-06-29T05:15:52Z","2020-06-29T14:20:38Z"
"","8552","change all ""at-clause"" terms to ""block tag"" from source code and documentation","change all ""at-clause"" terms to ""block tag"" from source code and documentation ..  all places.  identified at https://github.com/checkstyle/checkstyle/issues/6192#issuecomment-663861910.  current cases: ``` ✔ ~/java/github/romani/checkstyle/src [master L|✔]  $ ag ""at-clause"" main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java 242:     * @param atNode at-clause node.  main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java 36: * Checks that a Javadoc block can fit in a single line and doesn't contain at-clauses. 37: * Javadoc comment that contains at least one at-clause should be formatted in a few lines. 48: * Property {@code ignoredTags} - Specify at-clauses which are ignored by the check. 65: * To configure the check with a list of ignored at-clauses 66: * and make inline at-clauses not ignored: 107:     * Specify at-clauses which are ignored by the check. 115:     * Setter to specify at-clauses which are ignored by the check.  main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheck.java 33: * Checks the indentation of the continuation lines in at-clauses. That is whether the continued  main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java 41: * Note: Google used the term ""at-clauses"" for block tags in their guide till 2017-02-28. 53: * Property {@code target} - Specify the list of targets to check at-clauses. 133:     * Specify the list of targets to check at-clauses. 150:     * Setter to specify the list of targets to check at-clauses.  main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java 37: * and one blank line before the at-clauses block if it is present.  main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java 29: * Checks that the at-clause tag is followed by description. 121:     * Tests if at-clause tag is empty. 123:     * @param tagNode at-clause tag. 124:     * @return true, if at-clause tag is empty.  main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages.properties 1:at.clause.order=At-clauses have to appear in the order ''{0}''. 31:non.empty.atclause=At-clause should have a non-empty description.  xdocs/config_javadoc.xml 35:          Note: Google used the term ""at-clauses"" for block tags in their guide till 2017-02-28. 61:              Specify the list of targets to check at-clauses. 1159:            at-clauses block if it is present. 1688:          Checks the indentation of the continuation lines in at-clauses. That is whether the 2787:          Checks that the at-clause tag is followed by description. 2921:           contain at-clauses. Javadoc comment that contains at least one at-clause 2948:              Specify at-clauses which are ignored by the check. 2972:          To configure the check with a list of ignored at-clauses and make 2973:          inline at-clauses not ignored:  xdocs/google_style.xml 2032:                    xdocs/checks.xml 428:            Checks the indentation of the continuation lines in at-clauses. 632:            Checks that the at-clause tag is followed by description. 800:              at-clauses.  site/resources/styleguides/google-java-style-20180523/javaguide.html 1115: ```  **Attention** we should NOT update `site/resources/styleguides/google-java-style-20180523/javaguide.html` as it is not our file, it is copy from Google page.","closed","easy,","romani","2020-07-25T14:38:40Z","2020-11-05T21:01:03Z"
"","8879","LocalFinalVariableName false-positive","cat config.xml ```xml                ```  cat Test.java ```java import java.util.concurrent.Semaphore;  public class Test { 	private static final Lock LOCK = new Lock();  	public void foo() { 		LOCK.lock(); 		try (LOCK) { // violation 		} 	} }  class Lock implements AutoCloseable { 	private final Semaphore semaphore;  	public Lock() { 		this.semaphore = new Semaphore(1); 	}  	public void lock() { 		try { 			semaphore.acquire(); 		} catch (InterruptedException exception) { 			Thread.currentThread().interrupt(); 		} 	}  	public void unlock() { 		semaphore.release(); 	}  	@Override 	public void close() { 		unlock(); 	} } ```  java -Duser.language=en -Duser.country=US -jar checkstyle-8.36.2-all.jar -c config.xml Test.java ``` Starting audit... [ERROR] /home/boris/Test.java:8:22: Name 'LOCK' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalFinalVariableName] Audit done. Checkstyle ends with 1 errors. ```  ---------------  `try (LOCK)` should be valid and no warning should be emitted.","closed","approved,","boris-petrov","2020-10-05T09:36:29Z","2020-10-12T20:42:54Z"
"","8989","Checkstyle 8.37 parser crashes processing sealed classes or interfaces","C:\checkstyle-8.37>type checkstyle.xml                                                 C:\checkstyle-8.37>type DeliveryService.java public sealed interface DeliveryService permits MJTExpressWarehouse {  }  C:\checkstyle-8.37>java -jar checkstyle-8.37-all.jar -c checkstyle.xml DeliveryService.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing DeliveryService.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: IllegalStateException occurred while parsing file C:\checkstyle-8.37\DeliveryService.java.         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:149)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Caused by: java.lang.IllegalStateException: C:\checkstyle-8.37\DeliveryService.java:1:8: unexpected token: sealed         at com.puppycrawl.tools.checkstyle.JavaParser$1.reportError(JavaParser.java:108)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:424)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:212)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114)         ... 9 more Caused by: C:\checkstyle-8.37\DeliveryService.java:1:8: unexpected token: sealed         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:596)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:402)         ... 11 more Checkstyle ends with 1 errors.","closed","new feature,","100yo","2020-11-14T23:02:50Z","2021-04-13T08:23:08Z"
"","8954","dependency: bump sevntu-checks from 1.37.1 to 1.38.0","Bumps sevntu-checks from 1.37.1 to 1.38.0.   [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.github.sevntu-checkstyle:sevntu-checks&package-manager=maven&previous-version=1.37.1&new-version=1.38.0)](https://dependabot.com/compatibility-score/?dependency-name=com.github.sevntu-checkstyle:sevntu-checks&package-manager=maven&previous-version=1.37.1&new-version=1.38.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-11-02T05:51:38Z","2020-11-02T14:39:55Z"
"","8798","dependency: bump Saxon-HE from 9.9.1-7 to 10.2","Bumps Saxon-HE from 9.9.1-7 to 10.2.   [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=net.sf.saxon:Saxon-HE&package-manager=maven&previous-version=9.9.1-7&new-version=10.2)](https://dependabot.com/compatibility-score/?dependency-name=net.sf.saxon:Saxon-HE&package-manager=maven&previous-version=9.9.1-7&new-version=10.2)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-07T05:59:43Z","2020-09-07T14:12:00Z"
"","8814","dependency: bump Saxon-HE from 9.9.1-7 to 10.1","Bumps Saxon-HE from 9.9.1-7 to 10.1.   [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=net.sf.saxon:Saxon-HE&package-manager=maven&previous-version=9.9.1-7&new-version=10.1)](https://dependabot.com/compatibility-score/?dependency-name=net.sf.saxon:Saxon-HE&package-manager=maven&previous-version=9.9.1-7&new-version=10.1)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-08T05:49:56Z","2020-09-08T05:54:29Z"
"","8755","dependency: bump Saxon-HE from 9.9.1-7 to 10.0","Bumps Saxon-HE from 9.9.1-7 to 10.0.  Signed-off-by: dependabot-preview[bot]","closed","","HuGanghui","2020-08-23T15:26:23Z","2020-09-06T22:21:06Z"
"","8935","dependency: bump Saxon-HE from 10.2 to 10.3","Bumps Saxon-HE from 10.2 to 10.3.   [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=net.sf.saxon:Saxon-HE&package-manager=maven&previous-version=10.2&new-version=10.3)](https://dependabot.com/compatibility-score/?dependency-name=net.sf.saxon:Saxon-HE&package-manager=maven&previous-version=10.2&new-version=10.3)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-10-29T05:49:16Z","2020-10-31T05:44:32Z"
"","8819","dependency: bump org.eclipse.jgit from 5.8.1.202007141445-r to 5.9.0.202009080501-r","Bumps org.eclipse.jgit from 5.8.1.202007141445-r to 5.9.0.202009080501-r.   [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.eclipse.jgit:org.eclipse.jgit&package-manager=maven&previous-version=5.8.1.202007141445-r&new-version=5.9.0.202009080501-r)](https://dependabot.com/compatibility-score/?dependency-name=org.eclipse.jgit:org.eclipse.jgit&package-manager=maven&previous-version=5.8.1.202007141445-r&new-version=5.9.0.202009080501-r)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-11T05:54:02Z","2020-09-12T13:56:20Z"
"","8530","dependency: bump org.eclipse.jgit from 5.8.0.202006091008-r to 5.8.1.202007141445-r","Bumps org.eclipse.jgit from 5.8.0.202006091008-r to 5.8.1.202007141445-r.   [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.eclipse.jgit:org.eclipse.jgit&package-manager=maven&previous-version=5.8.0.202006091008-r&new-version=5.8.1.202007141445-r)](https://dependabot.com/compatibility-score/?dependency-name=org.eclipse.jgit:org.eclipse.jgit&package-manager=maven&previous-version=5.8.0.202006091008-r&new-version=5.8.1.202007141445-r)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-07-17T06:41:04Z","2020-07-18T16:27:18Z"
"","8332","dependency: bump org.eclipse.jgit from 5.7.0.202003110725-r to 5.8.0.202006091008-r","Bumps org.eclipse.jgit from 5.7.0.202003110725-r to 5.8.0.202006091008-r.   [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.eclipse.jgit:org.eclipse.jgit&package-manager=maven&previous-version=5.7.0.202003110725-r&new-version=5.8.0.202006091008-r)](https://dependabot.com/compatibility-score/?dependency-name=org.eclipse.jgit:org.eclipse.jgit&package-manager=maven&previous-version=5.7.0.202003110725-r&new-version=5.8.0.202006091008-r)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-22T07:06:57Z","2020-06-24T14:54:30Z"
"","8324","dependency: bump org.eclipse.jdt.annotation from 2.2.400 to 2.2.600","Bumps org.eclipse.jdt.annotation from 2.2.400 to 2.2.600.   [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.eclipse.jdt:org.eclipse.jdt.annotation&package-manager=maven&previous-version=2.2.400&new-version=2.2.600)](https://dependabot.com/compatibility-score/?dependency-name=org.eclipse.jdt:org.eclipse.jdt.annotation&package-manager=maven&previous-version=2.2.400&new-version=2.2.600)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-18T06:43:39Z","2020-06-21T15:25:34Z"
"","8099","dependency: bump nondex-maven-plugin from 1.1.1 to 1.1.2","Bumps nondex-maven-plugin from 1.1.1 to 1.1.2.   [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=edu.illinois:nondex-maven-plugin&package-manager=maven&previous-version=1.1.1&new-version=1.1.2)](https://dependabot.com/compatibility-score/?dependency-name=edu.illinois:nondex-maven-plugin&package-manager=maven&previous-version=1.1.1&new-version=1.1.2)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-04-14T06:46:53Z","2020-04-16T19:08:24Z"
"","8817","dependency: bump commons-io from 2.7 to 2.8.0","Bumps commons-io from 2.7 to 2.8.0.   [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=commons-io:commons-io&package-manager=maven&previous-version=2.7&new-version=2.8.0)](https://dependabot.com/compatibility-score/?dependency-name=commons-io:commons-io&package-manager=maven&previous-version=2.7&new-version=2.8.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-10T05:56:02Z","2020-09-10T13:19:29Z"
"","8261","dependency: bump commons-io from 2.6 to 2.7","Bumps commons-io from 2.6 to 2.7.   [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=commons-io:commons-io&package-manager=maven&previous-version=2.6&new-version=2.7)](https://dependabot.com/compatibility-score/?dependency-name=commons-io:commons-io&package-manager=maven&previous-version=2.6&new-version=2.7)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-05-28T06:50:51Z","2020-05-29T13:52:27Z"
"","8235","dependency: bump ant from 1.10.7 to 1.10.8","Bumps ant from 1.10.7 to 1.10.8.   [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.apache.ant:ant&package-manager=maven&previous-version=1.10.7&new-version=1.10.8)](https://dependabot.com/compatibility-score/?dependency-name=org.apache.ant:ant&package-manager=maven&previous-version=1.10.7&new-version=1.10.8)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-05-14T06:45:28Z","2020-05-14T13:18:24Z"
"","8953","dependency: bump powermock.version from 2.0.7 to 2.0.9","Bumps `powermock.version` from 2.0.7 to 2.0.9. Updates `powermock-api-mockito2` from 2.0.7 to 2.0.9  Release notes Sourced from powermock-api-mockito2's releases.  powermock-2.0.8 Release notes were automatically generated by Shipkit 2.0.8  2020-11-01 - 6 commits by 4 authors - published to  Commits: Sean C. Sullivan (2), Valery Yatsynovich (2), dependabot[bot] (1), Improver (1) [Travis CI] Remove deprecated keyword sudo [(#1069)](powermock/powermock#1069) Upgrade [(#1049)](powermock/powermock#1049)     Commits  42c72da 2.0.9 release (previous 2.0.8) + release notes updated by CI build 878 bc49a5d [ci maven-central-release] PowerMockitoStubberImpl.when throws exceptions wit... 72849cf Merge pull request #1068 from valfirst/bump-byte-buddy-1-10-14 86e1f6e 2.0.8 release (previous 2.0.7) + release notes updated by CI build 876 22da862 Fix Mockito 3 compatibility 287ec73 Bump shipkit from 2.0.31 to 2.3.4 bf54805 Merge branch 'release/2.x' into bump-byte-buddy-1-10-14 4f33d9a enable Dependabot v2 af3c8b9 add Gradle wrapper validation 43d7b29 Upgrade ByteBuddy and Mockito versions (#1049) Additional commits viewable in compare view     Updates `powermock-module-junit4` from 2.0.7 to 2.0.9  Release notes Sourced from powermock-module-junit4's releases.  powermock-2.0.8 Release notes were automatically generated by Shipkit 2.0.8  2020-11-01 - 6 commits by 4 authors - published to  Commits: Sean C. Sullivan (2), Valery Yatsynovich (2), dependabot[bot] (1), Improver (1) [Travis CI] Remove deprecated keyword sudo [(#1069)](powermock/powermock#1069) Upgrade [(#1049)](powermock/powermock#1049)     Commits  42c72da 2.0.9 release (previous 2.0.8) + release notes updated by CI build 878 bc49a5d [ci maven-central-release] PowerMockitoStubberImpl.when throws exceptions wit... 72849cf Merge pull request #1068 from valfirst/bump-byte-buddy-1-10-14 86e1f6e 2.0.8 release (previous 2.0.7) + release notes updated by CI build 876 22da862 Fix Mockito 3 compatibility 287ec73 Bump shipkit from 2.0.31 to 2.3.4 bf54805 Merge branch 'release/2.x' into bump-byte-buddy-1-10-14 4f33d9a enable Dependabot v2 af3c8b9 add Gradle wrapper validation 43d7b29 Upgrade ByteBuddy and Mockito versions (#1049) Additional commits viewable in compare view      Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-11-02T05:50:22Z","2020-11-02T14:39:19Z"
"","8923","dependency: bump pmd.version from 6.26.0 to 6.29.0","Bumps `pmd.version` from 6.26.0 to 6.29.0. Updates `pmd-java` from 6.26.0 to 6.29.0  Release notes Sourced from pmd-java's releases.  PMD 6.29.0 (24-October-2020) 24-October-2020 - 6.29.0 The PMD team is pleased to announce PMD 6.29.0. This is a minor release. Table Of Contents  New and noteworthy  Updated Apex Support New Rules Renamed Rules Deprecated Rules   Fixed Issues External Contributions Stats  New and noteworthy Updated Apex Support  The Apex language support has been bumped to version 50 (Winter '21). All new language features are now properly parsed and processed. Especially the Safe Navigation Operator is now supported. See also Salesforce Winter '21 Release Notes  New Rules  The new Apex rule OperationWithLimitsInLoop (apex-performance) finds operations in loops that may hit governor limits such as DML operations, SOQL queries and more. The rule replaces the three rules ""AvoidDmlStatementsInLoops"", ""AvoidSoqlInLoops"", and ""AvoidSoslInLoops"".  Renamed Rules  The Java rule DoNotCallSystemExit has been renamed to DoNotTerminateVM, since it checks for all the following calls: System.exit(int), Runtime.exit(int), Runtime.halt(int). All these calls terminate the Java VM, which is bad, if the VM runs an application server which many independent applications.  Deprecated Rules  The Apex rules AvoidDmlStatementsInLoops, AvoidSoqlInLoops and AvoidSoslInLoops (apex-performance) are deprecated in favour of the new rule OperationWithLimitsInLoop. The deprecated rules will be removed with PMD 7.0.0.  Fixed Issues     Commits  81f12d3 [maven-release-plugin] prepare release pmd_releases/6.29.0 561e7a8 Prepare pmd release 6.29.0 df957ad Merge branch 'pr-2863' into master cfb21d2 Merge branch 'pr-2866' into master 0aafd30 Merge branch 'pr-2865' into master ccb7fd2 Programming correction in docs 151400d Update ExcessiveImports example code for clarity b0f3f37 [doc] Update release notes, refs #2839 e7738e2 [apex] Add support and test for parsing SafeNavigationOperator 9eeea47 [apex] Update apex-jorje to 2020-09-10-5a5192 (Winter 21, Version 50) Additional commits viewable in compare view     Updates `pmd-core` from 6.26.0 to 6.29.0  Release notes Sourced from pmd-core's releases.  PMD 6.29.0 (24-October-2020) 24-October-2020 - 6.29.0 The PMD team is pleased to announce PMD 6.29.0. This is a minor release. Table Of Contents  New and noteworthy  Updated Apex Support New Rules Renamed Rules Deprecated Rules   Fixed Issues External Contributions Stats  New and noteworthy Updated Apex Support  The Apex language support has been bumped to version 50 (Winter '21). All new language features are now properly parsed and processed. Especially the Safe Navigation Operator is now supported. See also Salesforce Winter '21 Release Notes  New Rules  The new Apex rule OperationWithLimitsInLoop (apex-performance) finds operations in loops that may hit governor limits such as DML operations, SOQL queries and more. The rule replaces the three rules ""AvoidDmlStatementsInLoops"", ""AvoidSoqlInLoops"", and ""AvoidSoslInLoops"".  Renamed Rules  The Java rule DoNotCallSystemExit has been renamed to DoNotTerminateVM, since it checks for all the following calls: System.exit(int), Runtime.exit(int), Runtime.halt(int). All these calls terminate the Java VM, which is bad, if the VM runs an application server which many independent applications.  Deprecated Rules  The Apex rules AvoidDmlStatementsInLoops, AvoidSoqlInLoops and AvoidSoslInLoops (apex-performance) are deprecated in favour of the new rule OperationWithLimitsInLoop. The deprecated rules will be removed with PMD 7.0.0.  Fixed Issues     Commits  81f12d3 [maven-release-plugin] prepare release pmd_releases/6.29.0 561e7a8 Prepare pmd release 6.29.0 df957ad Merge branch 'pr-2863' into master cfb21d2 Merge branch 'pr-2866' into master 0aafd30 Merge branch 'pr-2865' into master ccb7fd2 Programming correction in docs 151400d Update ExcessiveImports example code for clarity b0f3f37 [doc] Update release notes, refs #2839 e7738e2 [apex] Add support and test for parsing SafeNavigationOperator 9eeea47 [apex] Update apex-jorje to 2020-09-10-5a5192 (Winter 21, Version 50) Additional commits viewable in compare view     Updates `pmd-javascript` from 6.26.0 to 6.29.0  Release notes Sourced from pmd-javascript's releases.  PMD 6.29.0 (24-October-2020) 24-October-2020 - 6.29.0 The PMD team is pleased to announce PMD 6.29.0. This is a minor release. Table Of Contents  New and noteworthy  Updated Apex Support New Rules Renamed Rules Deprecated Rules   Fixed Issues External Contributions Stats  New and noteworthy Updated Apex Support  The Apex language support has been bumped to version 50 (Winter '21). All new language features are now properly parsed and processed. Especially the Safe Navigation Operator is now supported. See also Salesforce Winter '21 Release Notes  New Rules  The new Apex rule OperationWithLimitsInLoop (apex-performance) finds operations in loops that may hit governor limits such as DML operations, SOQL queries and more. The rule replaces the three rules ""AvoidDmlStatementsInLoops"", ""AvoidSoqlInLoops"", and ""AvoidSoslInLoops"".  Renamed Rules  The Java rule DoNotCallSystemExit has been renamed to DoNotTerminateVM, since it checks for all the following calls: System.exit(int), Runtime.exit(int), Runtime.halt(int). All these calls terminate the Java VM, which is bad, if the VM runs an application server which many independent applications.  Deprecated Rules  The Apex rules AvoidDmlStatementsInLoops, AvoidSoqlInLoops and AvoidSoslInLoops (apex-performance) are deprecated in favour of the new rule OperationWithLimitsInLoop. The deprecated rules will be removed with PMD 7.0.0.  Fixed Issues     Commits  81f12d3 [maven-release-plugin] prepare release pmd_releases/6.29.0 561e7a8 Prepare pmd release 6.29.0 df957ad Merge branch 'pr-2863' into master cfb21d2 Merge branch 'pr-2866' into master 0aafd30 Merge branch 'pr-2865' into master ccb7fd2 Programming correction in docs 151400d Update ExcessiveImports example code for clarity b0f3f37 [doc] Update release notes, refs #2839 e7738e2 [apex] Add support and test for parsing SafeNavigationOperator 9eeea47 [apex] Update apex-jorje to 2020-09-10-5a5192 (Winter 21, Version 50) Additional commits viewable in compare view     Updates `pmd-jsp` from 6.26.0 to 6.29.0  Release notes Sourced from pmd-jsp's releases.  PMD 6.29.0 (24-October-2020) 24-October-2020 - 6.29.0 The PMD team is pleased to announce PMD 6.29.0. This is a minor release. Table Of Contents  New and noteworthy  Updated Apex Support New Rules Renamed Rules Deprecated Rules   Fixed Issues External Contributions Stats  New and noteworthy Updated Apex Support  The Apex language support has been bumped to version 50 (Winter '21). All new language features are now properly parsed and processed. Especially the Safe Navigation Operator is now supported. See also Salesforce Winter '21 Release Notes  New Rules  The new Apex rule OperationWithLimitsInLoop (apex-performance) finds operations in loops that may hit governor limits such as DML operations, SOQL queries and more. The rule replaces the three rules ""AvoidDmlStatementsInLoops"", ""AvoidSoqlInLoops"", and ""AvoidSoslInLoops"".  Renamed Rules  The Java rule DoNotCallSystemExit has been renamed to DoNotTerminateVM, since it checks for all the following calls: System.exit(int), Runtime.exit(int), Runtime.halt(int). All these calls terminate the Java VM, which is bad, if the VM runs an application server which many independent applications.  Deprecated Rules  The Apex rules AvoidDmlStatementsInLoops, AvoidSoqlInLoops and AvoidSoslInLoops (apex-performance) are deprecated in favour of the new rule OperationWithLimitsInLoop. The deprecated rules will be removed with PMD 7.0.0.  Fixed Issues     Commits  81f12d3 [maven-release-plugin] prepare release pmd_releases/6.29.0 561e7a8 Prepare pmd release 6.29.0 df957ad Merge branch 'pr-2863' into master cfb21d2 Merge branch 'pr-2866' into master 0aafd30 Merge branch 'pr-2865' into master ccb7fd2 Programming correction in docs 151400d Update ExcessiveImports example code for clarity b0f3f37 [doc] Update release notes, refs #2839 e7738e2 [apex] Add support and test for parsing SafeNavigationOperator 9eeea47 [apex] Update apex-jorje to 2020-09-10-5a5192 (Winter 21, Version 50) Additional commits viewable in compare view      Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-10-26T05:52:50Z","2020-10-31T14:45:08Z"
"","8853","dependency: bump pmd.version from 6.26.0 to 6.28.0","Bumps `pmd.version` from 6.26.0 to 6.28.0. Updates `pmd-java` from 6.26.0 to 6.28.0  Release notes Sourced from pmd-java's releases.  PMD 6.28.0 (26-September-2020) 26-September-2020 - 6.28.0 The PMD team is pleased to announce PMD 6.28.0. This is a minor release. Table Of Contents  New and noteworthy  CPD's AnyTokenizer has been improved   Fixed Issues API Changes  Deprecated API  For removal     External Contributions Stats  New and noteworthy CPD's AnyTokenizer has been improved The AnyTokenizer is used for languages, that don't have an own lexer/grammar based tokenizer. AnyTokenizer now handles string literals and end-of-line comments. Fortran, Perl and Ruby have been updated to use AnyTokenizer instead of their old custom tokenizer based on AbstractTokenizer. See #2758 for details. AbstractTokenizer and the custom tokenizers of Fortran, Perl and Ruby are deprecated now. Fixed Issues   cpd  #2758: [cpd] Improve AnyTokenizer #2760: [cpd] AnyTokenizer doesn't count columns correctly    apex-security  #2774: [apex] ApexSharingViolations does not correlate sharing settings with class that contains data access    java  #2738: [java] Custom rule with @ExhaustiveEnumSwitch throws NPE #2755: [java] [6.27.0] Exception applying rule CloseResource on file ... java.lang.NullPointerException #2756: [java] TypeTestUtil fails with NPE for anonymous class #2767: [java] IndexOutOfBoundsException when parsing an initializer BlockStatement #2783: [java] Error while parsing with lambda of custom interface    java-bestpractices  #2759: [java] False positive in UnusedAssignment    java-design  #2708: [java] False positive FinalFieldCouldBeStatic when using lombok Builder.Default        Commits  722f3ca [maven-release-plugin] prepare release pmd_releases/6.28.0 d2d4ce2 Prepare pmd release 6.28.0 d74f22b Merge branch 'issue-2755' into master d3ca031 Merge branch 'master' into issue-2755 f1e9a23 [doc] Update release notes - group fixes by category 250501a Merge branch 'pr-2791' into master eb0f7e4 [doc] Update release notes, refs #2791, fixes #2774 5429ceb Add issue reproducers as standard rule tests 54a5b03 Merge branch 'pr-2792' into master f046268 [java] CloseResource: add simple test case for var Additional commits viewable in compare view     Updates `pmd-core` from 6.26.0 to 6.28.0  Release notes Sourced from pmd-core's releases.  PMD 6.28.0 (26-September-2020) 26-September-2020 - 6.28.0 The PMD team is pleased to announce PMD 6.28.0. This is a minor release. Table Of Contents  New and noteworthy  CPD's AnyTokenizer has been improved   Fixed Issues API Changes  Deprecated API  For removal     External Contributions Stats  New and noteworthy CPD's AnyTokenizer has been improved The AnyTokenizer is used for languages, that don't have an own lexer/grammar based tokenizer. AnyTokenizer now handles string literals and end-of-line comments. Fortran, Perl and Ruby have been updated to use AnyTokenizer instead of their old custom tokenizer based on AbstractTokenizer. See #2758 for details. AbstractTokenizer and the custom tokenizers of Fortran, Perl and Ruby are deprecated now. Fixed Issues   cpd  #2758: [cpd] Improve AnyTokenizer #2760: [cpd] AnyTokenizer doesn't count columns correctly    apex-security  #2774: [apex] ApexSharingViolations does not correlate sharing settings with class that contains data access    java  #2738: [java] Custom rule with @ExhaustiveEnumSwitch throws NPE #2755: [java] [6.27.0] Exception applying rule CloseResource on file ... java.lang.NullPointerException #2756: [java] TypeTestUtil fails with NPE for anonymous class #2767: [java] IndexOutOfBoundsException when parsing an initializer BlockStatement #2783: [java] Error while parsing with lambda of custom interface    java-bestpractices  #2759: [java] False positive in UnusedAssignment    java-design  #2708: [java] False positive FinalFieldCouldBeStatic when using lombok Builder.Default        Commits  722f3ca [maven-release-plugin] prepare release pmd_releases/6.28.0 d2d4ce2 Prepare pmd release 6.28.0 d74f22b Merge branch 'issue-2755' into master d3ca031 Merge branch 'master' into issue-2755 f1e9a23 [doc] Update release notes - group fixes by category 250501a Merge branch 'pr-2791' into master eb0f7e4 [doc] Update release notes, refs #2791, fixes #2774 5429ceb Add issue reproducers as standard rule tests 54a5b03 Merge branch 'pr-2792' into master f046268 [java] CloseResource: add simple test case for var Additional commits viewable in compare view     Updates `pmd-javascript` from 6.26.0 to 6.28.0  Release notes Sourced from pmd-javascript's releases.  PMD 6.28.0 (26-September-2020) 26-September-2020 - 6.28.0 The PMD team is pleased to announce PMD 6.28.0. This is a minor release. Table Of Contents  New and noteworthy  CPD's AnyTokenizer has been improved   Fixed Issues API Changes  Deprecated API  For removal     External Contributions Stats  New and noteworthy CPD's AnyTokenizer has been improved The AnyTokenizer is used for languages, that don't have an own lexer/grammar based tokenizer. AnyTokenizer now handles string literals and end-of-line comments. Fortran, Perl and Ruby have been updated to use AnyTokenizer instead of their old custom tokenizer based on AbstractTokenizer. See #2758 for details. AbstractTokenizer and the custom tokenizers of Fortran, Perl and Ruby are deprecated now. Fixed Issues   cpd  #2758: [cpd] Improve AnyTokenizer #2760: [cpd] AnyTokenizer doesn't count columns correctly    apex-security  #2774: [apex] ApexSharingViolations does not correlate sharing settings with class that contains data access    java  #2738: [java] Custom rule with @ExhaustiveEnumSwitch throws NPE #2755: [java] [6.27.0] Exception applying rule CloseResource on file ... java.lang.NullPointerException #2756: [java] TypeTestUtil fails with NPE for anonymous class #2767: [java] IndexOutOfBoundsException when parsing an initializer BlockStatement #2783: [java] Error while parsing with lambda of custom interface    java-bestpractices  #2759: [java] False positive in UnusedAssignment    java-design  #2708: [java] False positive FinalFieldCouldBeStatic when using lombok Builder.Default        Commits  722f3ca [maven-release-plugin] prepare release pmd_releases/6.28.0 d2d4ce2 Prepare pmd release 6.28.0 d74f22b Merge branch 'issue-2755' into master d3ca031 Merge branch 'master' into issue-2755 f1e9a23 [doc] Update release notes - group fixes by category 250501a Merge branch 'pr-2791' into master eb0f7e4 [doc] Update release notes, refs #2791, fixes #2774 5429ceb Add issue reproducers as standard rule tests 54a5b03 Merge branch 'pr-2792' into master f046268 [java] CloseResource: add simple test case for var Additional commits viewable in compare view     Updates `pmd-jsp` from 6.26.0 to 6.28.0  Release notes Sourced from pmd-jsp's releases.  PMD 6.28.0 (26-September-2020) 26-September-2020 - 6.28.0 The PMD team is pleased to announce PMD 6.28.0. This is a minor release. Table Of Contents  New and noteworthy  CPD's AnyTokenizer has been improved   Fixed Issues API Changes  Deprecated API  For removal     External Contributions Stats  New and noteworthy CPD's AnyTokenizer has been improved The AnyTokenizer is used for languages, that don't have an own lexer/grammar based tokenizer. AnyTokenizer now handles string literals and end-of-line comments. Fortran, Perl and Ruby have been updated to use AnyTokenizer instead of their old custom tokenizer based on AbstractTokenizer. See #2758 for details. AbstractTokenizer and the custom tokenizers of Fortran, Perl and Ruby are deprecated now. Fixed Issues   cpd  #2758: [cpd] Improve AnyTokenizer #2760: [cpd] AnyTokenizer doesn't count columns correctly    apex-security  #2774: [apex] ApexSharingViolations does not correlate sharing settings with class that contains data access    java  #2738: [java] Custom rule with @ExhaustiveEnumSwitch throws NPE #2755: [java] [6.27.0] Exception applying rule CloseResource on file ... java.lang.NullPointerException #2756: [java] TypeTestUtil fails with NPE for anonymous class #2767: [java] IndexOutOfBoundsException when parsing an initializer BlockStatement #2783: [java] Error while parsing with lambda of custom interface    java-bestpractices  #2759: [java] False positive in UnusedAssignment    java-design  #2708: [java] False positive FinalFieldCouldBeStatic when using lombok Builder.Default        Commits  722f3ca [maven-release-plugin] prepare release pmd_releases/6.28.0 d2d4ce2 Prepare pmd release 6.28.0 d74f22b Merge branch 'issue-2755' into master d3ca031 Merge branch 'master' into issue-2755 f1e9a23 [doc] Update release notes - group fixes by category 250501a Merge branch 'pr-2791' into master eb0f7e4 [doc] Update release notes, refs #2791, fixes #2774 5429ceb Add issue reproducers as standard rule tests 54a5b03 Merge branch 'pr-2792' into master f046268 [java] CloseResource: add simple test case for var Additional commits viewable in compare view      Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-28T05:55:47Z","2020-10-26T05:53:02Z"
"","8780","dependency: bump pmd.version from 6.26.0 to 6.27.0","Bumps `pmd.version` from 6.26.0 to 6.27.0. Updates `pmd-java` from 6.26.0 to 6.27.0  Release notes Sourced from pmd-java's releases.  PMD 6.27.0 (31-August-2020) 31-August-2020 - 6.27.0 The PMD team is pleased to announce PMD 6.27.0. This is a minor release. Table Of Contents  New and noteworthy  Java 15 Support Changes in how tab characters are handled Updated PMD Designer New Rules Modified Rules Deprecated Rules   Fixed Issues API Changes  Deprecated API  For removal     External Contributions Stats  New and noteworthy Java 15 Support This release of PMD brings support for Java 15. PMD can parse Text Blocks which have been promoted to be a standard language feature of Java. PMD also supports Pattern Matching for instanceof, Records, and Sealed Classes. Note: The Pattern Matching for instanceof, Records, and Sealed Classes are all preview language features of OpenJDK 15 and are not enabled by default. In order to analyze a project with PMD that uses these language features, you'll need to enable it via the environment variable PMD_JAVA_OPTS and select the new language version 15-preview: export PMD_JAVA_OPTS=--enable-preview ./run.sh pmd -language java -version 15-preview ...  Note: Support for Java 13 preview language features have been removed. The version ""13-preview"" is no longer available. Changes in how tab characters are handled In the past, tab characters in source files has been handled differently in different languages by PMD. For instance in Java, tab characters had a width of 8 columns, while C# used only 1 column. Visualforce instead used 4 columns.     Commits  856950f [maven-release-plugin] prepare release pmd_releases/6.27.0 e198a61 Prepare pmd release 6.27.0 b55a227 Merge branch 'pr-2745' into master d82c9f1 [doc] Update release notes, refs #2745 4559e35 Merge branch 'cpd_dart_escaped_dollar' into master af9770a Update release notes 13146b5 Merge branch 'master' into cpd_dart_escaped_dollar 81c8272 Merge branch 'cpd_dart_string_interpolation' into master 2cff5dd Update release notes e95c90a Merge branch 'master' into cpd_dart_string_interpolation Additional commits viewable in compare view     Updates `pmd-core` from 6.26.0 to 6.27.0  Release notes Sourced from pmd-core's releases.  PMD 6.27.0 (31-August-2020) 31-August-2020 - 6.27.0 The PMD team is pleased to announce PMD 6.27.0. This is a minor release. Table Of Contents  New and noteworthy  Java 15 Support Changes in how tab characters are handled Updated PMD Designer New Rules Modified Rules Deprecated Rules   Fixed Issues API Changes  Deprecated API  For removal     External Contributions Stats  New and noteworthy Java 15 Support This release of PMD brings support for Java 15. PMD can parse Text Blocks which have been promoted to be a standard language feature of Java. PMD also supports Pattern Matching for instanceof, Records, and Sealed Classes. Note: The Pattern Matching for instanceof, Records, and Sealed Classes are all preview language features of OpenJDK 15 and are not enabled by default. In order to analyze a project with PMD that uses these language features, you'll need to enable it via the environment variable PMD_JAVA_OPTS and select the new language version 15-preview: export PMD_JAVA_OPTS=--enable-preview ./run.sh pmd -language java -version 15-preview ...  Note: Support for Java 13 preview language features have been removed. The version ""13-preview"" is no longer available. Changes in how tab characters are handled In the past, tab characters in source files has been handled differently in different languages by PMD. For instance in Java, tab characters had a width of 8 columns, while C# used only 1 column. Visualforce instead used 4 columns.     Commits  856950f [maven-release-plugin] prepare release pmd_releases/6.27.0 e198a61 Prepare pmd release 6.27.0 b55a227 Merge branch 'pr-2745' into master d82c9f1 [doc] Update release notes, refs #2745 4559e35 Merge branch 'cpd_dart_escaped_dollar' into master af9770a Update release notes 13146b5 Merge branch 'master' into cpd_dart_escaped_dollar 81c8272 Merge branch 'cpd_dart_string_interpolation' into master 2cff5dd Update release notes e95c90a Merge branch 'master' into cpd_dart_string_interpolation Additional commits viewable in compare view     Updates `pmd-javascript` from 6.26.0 to 6.27.0  Release notes Sourced from pmd-javascript's releases.  PMD 6.27.0 (31-August-2020) 31-August-2020 - 6.27.0 The PMD team is pleased to announce PMD 6.27.0. This is a minor release. Table Of Contents  New and noteworthy  Java 15 Support Changes in how tab characters are handled Updated PMD Designer New Rules Modified Rules Deprecated Rules   Fixed Issues API Changes  Deprecated API  For removal     External Contributions Stats  New and noteworthy Java 15 Support This release of PMD brings support for Java 15. PMD can parse Text Blocks which have been promoted to be a standard language feature of Java. PMD also supports Pattern Matching for instanceof, Records, and Sealed Classes. Note: The Pattern Matching for instanceof, Records, and Sealed Classes are all preview language features of OpenJDK 15 and are not enabled by default. In order to analyze a project with PMD that uses these language features, you'll need to enable it via the environment variable PMD_JAVA_OPTS and select the new language version 15-preview: export PMD_JAVA_OPTS=--enable-preview ./run.sh pmd -language java -version 15-preview ...  Note: Support for Java 13 preview language features have been removed. The version ""13-preview"" is no longer available. Changes in how tab characters are handled In the past, tab characters in source files has been handled differently in different languages by PMD. For instance in Java, tab characters had a width of 8 columns, while C# used only 1 column. Visualforce instead used 4 columns.     Commits  856950f [maven-release-plugin] prepare release pmd_releases/6.27.0 e198a61 Prepare pmd release 6.27.0 b55a227 Merge branch 'pr-2745' into master d82c9f1 [doc] Update release notes, refs #2745 4559e35 Merge branch 'cpd_dart_escaped_dollar' into master af9770a Update release notes 13146b5 Merge branch 'master' into cpd_dart_escaped_dollar 81c8272 Merge branch 'cpd_dart_string_interpolation' into master 2cff5dd Update release notes e95c90a Merge branch 'master' into cpd_dart_string_interpolation Additional commits viewable in compare view     Updates `pmd-jsp` from 6.26.0 to 6.27.0  Release notes Sourced from pmd-jsp's releases.  PMD 6.27.0 (31-August-2020) 31-August-2020 - 6.27.0 The PMD team is pleased to announce PMD 6.27.0. This is a minor release. Table Of Contents  New and noteworthy  Java 15 Support Changes in how tab characters are handled Updated PMD Designer New Rules Modified Rules Deprecated Rules   Fixed Issues API Changes  Deprecated API  For removal     External Contributions Stats  New and noteworthy Java 15 Support This release of PMD brings support for Java 15. PMD can parse Text Blocks which have been promoted to be a standard language feature of Java. PMD also supports Pattern Matching for instanceof, Records, and Sealed Classes. Note: The Pattern Matching for instanceof, Records, and Sealed Classes are all preview language features of OpenJDK 15 and are not enabled by default. In order to analyze a project with PMD that uses these language features, you'll need to enable it via the environment variable PMD_JAVA_OPTS and select the new language version 15-preview: export PMD_JAVA_OPTS=--enable-preview ./run.sh pmd -language java -version 15-preview ...  Note: Support for Java 13 preview language features have been removed. The version ""13-preview"" is no longer available. Changes in how tab characters are handled In the past, tab characters in source files has been handled differently in different languages by PMD. For instance in Java, tab characters had a width of 8 columns, while C# used only 1 column. Visualforce instead used 4 columns.     Commits  856950f [maven-release-plugin] prepare release pmd_releases/6.27.0 e198a61 Prepare pmd release 6.27.0 b55a227 Merge branch 'pr-2745' into master d82c9f1 [doc] Update release notes, refs #2745 4559e35 Merge branch 'cpd_dart_escaped_dollar' into master af9770a Update release notes 13146b5 Merge branch 'master' into cpd_dart_escaped_dollar 81c8272 Merge branch 'cpd_dart_string_interpolation' into master 2cff5dd Update release notes e95c90a Merge branch 'master' into cpd_dart_string_interpolation Additional commits viewable in compare view      Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-01T05:54:09Z","2020-09-01T07:06:49Z"
"","8561","dependency: bump pmd.version from 6.25.0 to 6.26.0","Bumps `pmd.version` from 6.25.0 to 6.26.0. Updates `pmd-java` from 6.25.0 to 6.26.0  Release notes Sourced from pmd-java's releases.  PMD 6.26.0 (25-July-2020) 25-July-2020 - 6.26.0 The PMD team is pleased to announce PMD 6.26.0. This is a minor release. Table Of Contents  New and noteworthy  New Rules Modified rules   Fixed Issues API Changes  Deprecated API  For removal     External Contributions Stats  New and noteworthy New Rules  The new Java rule UnusedAssignment (java-bestpractices) finds assignments to variables, that are never used and are useless. The new rule is supposed to entirely replace DataflowAnomalyAnalysis.  Modified rules  The Java rule ArrayIsStoredDirectly (java-bestpractices) now ignores by default private methods and constructors. You can restore the old behavior by setting the new property allowPrivate to ""false"".  Fixed Issues  apex  #2610: [apex] Support top-level enums in rules   apex-bestpractices  #2626: [apex] UnusedLocalVariable - false positive on case insensitivity allowed in Apex   apex-performance  #2598: [apex] AvoidSoqlInLoops false positive for SOQL with in For-Loop   apex-security  #2620: [visualforce] False positive on VfUnescapeEl with new Message Channel feature   core  #710: [core] Review used dependencies #2594: [core] Update exec-maven-plugin and align it in all project #2615: [core] PMD/CPD produces invalid XML (insufficient escaping/wrong encoding)   java-bestpractices  #2543: [java] UseCollectionIsEmpty can not detect the case this.foo.size()        Commits  a9632e2 [maven-release-plugin] prepare release pmd_releases/6.26.0 aba1b33 Prepare pmd release 6.26.0 8a6975f [apex] Improve AST for try-catch-finally statements 6464b34 [jsp] Remove usage of deprecated ImportWrapper (#2658) 900635b [apex] Update jorje lib to 2020-06-04-ba31c0 0738797 Merge branch 'pr-2658' e4b2c4c Merge branch 'pr-2632' 4444ef2 Merge branch 'pr-2631' b2418a9 Update guava fb6ec96 Merge branch 'issue-2546' Additional commits viewable in compare view     Updates `pmd-core` from 6.25.0 to 6.26.0  Release notes Sourced from pmd-core's releases.  PMD 6.26.0 (25-July-2020) 25-July-2020 - 6.26.0 The PMD team is pleased to announce PMD 6.26.0. This is a minor release. Table Of Contents  New and noteworthy  New Rules Modified rules   Fixed Issues API Changes  Deprecated API  For removal     External Contributions Stats  New and noteworthy New Rules  The new Java rule UnusedAssignment (java-bestpractices) finds assignments to variables, that are never used and are useless. The new rule is supposed to entirely replace DataflowAnomalyAnalysis.  Modified rules  The Java rule ArrayIsStoredDirectly (java-bestpractices) now ignores by default private methods and constructors. You can restore the old behavior by setting the new property allowPrivate to ""false"".  Fixed Issues  apex  #2610: [apex] Support top-level enums in rules   apex-bestpractices  #2626: [apex] UnusedLocalVariable - false positive on case insensitivity allowed in Apex   apex-performance  #2598: [apex] AvoidSoqlInLoops false positive for SOQL with in For-Loop   apex-security  #2620: [visualforce] False positive on VfUnescapeEl with new Message Channel feature   core  #710: [core] Review used dependencies #2594: [core] Update exec-maven-plugin and align it in all project #2615: [core] PMD/CPD produces invalid XML (insufficient escaping/wrong encoding)   java-bestpractices  #2543: [java] UseCollectionIsEmpty can not detect the case this.foo.size()        Commits  a9632e2 [maven-release-plugin] prepare release pmd_releases/6.26.0 aba1b33 Prepare pmd release 6.26.0 8a6975f [apex] Improve AST for try-catch-finally statements 6464b34 [jsp] Remove usage of deprecated ImportWrapper (#2658) 900635b [apex] Update jorje lib to 2020-06-04-ba31c0 0738797 Merge branch 'pr-2658' e4b2c4c Merge branch 'pr-2632' 4444ef2 Merge branch 'pr-2631' b2418a9 Update guava fb6ec96 Merge branch 'issue-2546' Additional commits viewable in compare view     Updates `pmd-javascript` from 6.25.0 to 6.26.0  Release notes Sourced from pmd-javascript's releases.  PMD 6.26.0 (25-July-2020) 25-July-2020 - 6.26.0 The PMD team is pleased to announce PMD 6.26.0. This is a minor release. Table Of Contents  New and noteworthy  New Rules Modified rules   Fixed Issues API Changes  Deprecated API  For removal     External Contributions Stats  New and noteworthy New Rules  The new Java rule UnusedAssignment (java-bestpractices) finds assignments to variables, that are never used and are useless. The new rule is supposed to entirely replace DataflowAnomalyAnalysis.  Modified rules  The Java rule ArrayIsStoredDirectly (java-bestpractices) now ignores by default private methods and constructors. You can restore the old behavior by setting the new property allowPrivate to ""false"".  Fixed Issues  apex  #2610: [apex] Support top-level enums in rules   apex-bestpractices  #2626: [apex] UnusedLocalVariable - false positive on case insensitivity allowed in Apex   apex-performance  #2598: [apex] AvoidSoqlInLoops false positive for SOQL with in For-Loop   apex-security  #2620: [visualforce] False positive on VfUnescapeEl with new Message Channel feature   core  #710: [core] Review used dependencies #2594: [core] Update exec-maven-plugin and align it in all project #2615: [core] PMD/CPD produces invalid XML (insufficient escaping/wrong encoding)   java-bestpractices  #2543: [java] UseCollectionIsEmpty can not detect the case this.foo.size()        Commits  a9632e2 [maven-release-plugin] prepare release pmd_releases/6.26.0 aba1b33 Prepare pmd release 6.26.0 8a6975f [apex] Improve AST for try-catch-finally statements 6464b34 [jsp] Remove usage of deprecated ImportWrapper (#2658) 900635b [apex] Update jorje lib to 2020-06-04-ba31c0 0738797 Merge branch 'pr-2658' e4b2c4c Merge branch 'pr-2632' 4444ef2 Merge branch 'pr-2631' b2418a9 Update guava fb6ec96 Merge branch 'issue-2546' Additional commits viewable in compare view     Updates `pmd-jsp` from 6.25.0 to 6.26.0  Release notes Sourced from pmd-jsp's releases.  PMD 6.26.0 (25-July-2020) 25-July-2020 - 6.26.0 The PMD team is pleased to announce PMD 6.26.0. This is a minor release. Table Of Contents  New and noteworthy  New Rules Modified rules   Fixed Issues API Changes  Deprecated API  For removal     External Contributions Stats  New and noteworthy New Rules  The new Java rule UnusedAssignment (java-bestpractices) finds assignments to variables, that are never used and are useless. The new rule is supposed to entirely replace DataflowAnomalyAnalysis.  Modified rules  The Java rule ArrayIsStoredDirectly (java-bestpractices) now ignores by default private methods and constructors. You can restore the old behavior by setting the new property allowPrivate to ""false"".  Fixed Issues  apex  #2610: [apex] Support top-level enums in rules   apex-bestpractices  #2626: [apex] UnusedLocalVariable - false positive on case insensitivity allowed in Apex   apex-performance  #2598: [apex] AvoidSoqlInLoops false positive for SOQL with in For-Loop   apex-security  #2620: [visualforce] False positive on VfUnescapeEl with new Message Channel feature   core  #710: [core] Review used dependencies #2594: [core] Update exec-maven-plugin and align it in all project #2615: [core] PMD/CPD produces invalid XML (insufficient escaping/wrong encoding)   java-bestpractices  #2543: [java] UseCollectionIsEmpty can not detect the case this.foo.size()        Commits  a9632e2 [maven-release-plugin] prepare release pmd_releases/6.26.0 aba1b33 Prepare pmd release 6.26.0 8a6975f [apex] Improve AST for try-catch-finally statements 6464b34 [jsp] Remove usage of deprecated ImportWrapper (#2658) 900635b [apex] Update jorje lib to 2020-06-04-ba31c0 0738797 Merge branch 'pr-2658' e4b2c4c Merge branch 'pr-2632' 4444ef2 Merge branch 'pr-2631' b2418a9 Update guava fb6ec96 Merge branch 'issue-2546' Additional commits viewable in compare view      Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-07-27T06:56:21Z","2020-08-12T12:46:04Z"
"","8349","dependency: bump pmd.version from 6.24.0 to 6.25.0","Bumps `pmd.version` from 6.24.0 to 6.25.0. Updates `pmd-java` from 6.24.0 to 6.25.0  Release notes Sourced from pmd-java's releases.  PMD 6.25.0 (27-June-2020) 27-June-2020 - 6.25.0 The PMD team is pleased to announce PMD 6.25.0. This is a minor release. Table Of Contents  New and noteworthy  Scala cross compilation New Rules Modified rules   Fixed Issues API Changes  Deprecated APIs  Internal API For removal     External Contributions Stats  New and noteworthy Scala cross compilation Up until now the PMD Scala module has been compiled against scala 2.13 only by default. However, this makes it impossible to use pmd as a library in scala projects, that use scala 2.12, e.g. in sbt plugins. Therefore PMD now provides cross compiled pmd-scala modules for both versions: scala 2.12 and scala 2.13. The new modules have new maven artifactIds. The old artifactId net.sourceforge.pmd:pmd-scala:6.25.0 is still available, but is deprecated from now on. It has been demoted to be just a delegation to the new pmd-scala_2.13 module and will be removed eventually. The coordinates for the new modules are: <dependency>     <groupId>net.sourceforge.pmd</groupId>     <artifactId>pmd-scala_2.12</artifactId>     <version>6.25.0</version> </dependency> <dependency> <groupId>net.sourceforge.pmd</groupId> <artifactId>pmd-scala_2.13</artifactId> <version>6.25.0</version> </dependency>      Commits  a219b2e [maven-release-plugin] prepare release pmd_releases/6.25.0 820a43f Prepare pmd release 6.25.0 842bdb0 Merge branch 'pr-2609' acbbbee Merge branch 'pr-2608' 3831a85 Merge branch 'pr-2574' 91868f3 Deprecations for #2490 9508a92 [java] Change rule priority of new rules to 3 6fded20 Merge branch 'master' into perf-UseIOStreamsWithApacheCommonsFileItem 6143163 [doc] Multivalued rule properties are still supported for xpath 2.0. c098936 [core] Use DeprecatedAttribute.NO_REPLACEMENT for List attributes Additional commits viewable in compare view     Updates `pmd-core` from 6.24.0 to 6.25.0  Release notes Sourced from pmd-core's releases.  PMD 6.25.0 (27-June-2020) 27-June-2020 - 6.25.0 The PMD team is pleased to announce PMD 6.25.0. This is a minor release. Table Of Contents  New and noteworthy  Scala cross compilation New Rules Modified rules   Fixed Issues API Changes  Deprecated APIs  Internal API For removal     External Contributions Stats  New and noteworthy Scala cross compilation Up until now the PMD Scala module has been compiled against scala 2.13 only by default. However, this makes it impossible to use pmd as a library in scala projects, that use scala 2.12, e.g. in sbt plugins. Therefore PMD now provides cross compiled pmd-scala modules for both versions: scala 2.12 and scala 2.13. The new modules have new maven artifactIds. The old artifactId net.sourceforge.pmd:pmd-scala:6.25.0 is still available, but is deprecated from now on. It has been demoted to be just a delegation to the new pmd-scala_2.13 module and will be removed eventually. The coordinates for the new modules are: <dependency>     <groupId>net.sourceforge.pmd</groupId>     <artifactId>pmd-scala_2.12</artifactId>     <version>6.25.0</version> </dependency> <dependency> <groupId>net.sourceforge.pmd</groupId> <artifactId>pmd-scala_2.13</artifactId> <version>6.25.0</version> </dependency>      Commits  a219b2e [maven-release-plugin] prepare release pmd_releases/6.25.0 820a43f Prepare pmd release 6.25.0 842bdb0 Merge branch 'pr-2609' acbbbee Merge branch 'pr-2608' 3831a85 Merge branch 'pr-2574' 91868f3 Deprecations for #2490 9508a92 [java] Change rule priority of new rules to 3 6fded20 Merge branch 'master' into perf-UseIOStreamsWithApacheCommonsFileItem 6143163 [doc] Multivalued rule properties are still supported for xpath 2.0. c098936 [core] Use DeprecatedAttribute.NO_REPLACEMENT for List attributes Additional commits viewable in compare view     Updates `pmd-javascript` from 6.24.0 to 6.25.0  Release notes Sourced from pmd-javascript's releases.  PMD 6.25.0 (27-June-2020) 27-June-2020 - 6.25.0 The PMD team is pleased to announce PMD 6.25.0. This is a minor release. Table Of Contents  New and noteworthy  Scala cross compilation New Rules Modified rules   Fixed Issues API Changes  Deprecated APIs  Internal API For removal     External Contributions Stats  New and noteworthy Scala cross compilation Up until now the PMD Scala module has been compiled against scala 2.13 only by default. However, this makes it impossible to use pmd as a library in scala projects, that use scala 2.12, e.g. in sbt plugins. Therefore PMD now provides cross compiled pmd-scala modules for both versions: scala 2.12 and scala 2.13. The new modules have new maven artifactIds. The old artifactId net.sourceforge.pmd:pmd-scala:6.25.0 is still available, but is deprecated from now on. It has been demoted to be just a delegation to the new pmd-scala_2.13 module and will be removed eventually. The coordinates for the new modules are: <dependency>     <groupId>net.sourceforge.pmd</groupId>     <artifactId>pmd-scala_2.12</artifactId>     <version>6.25.0</version> </dependency> <dependency> <groupId>net.sourceforge.pmd</groupId> <artifactId>pmd-scala_2.13</artifactId> <version>6.25.0</version> </dependency>      Commits  a219b2e [maven-release-plugin] prepare release pmd_releases/6.25.0 820a43f Prepare pmd release 6.25.0 842bdb0 Merge branch 'pr-2609' acbbbee Merge branch 'pr-2608' 3831a85 Merge branch 'pr-2574' 91868f3 Deprecations for #2490 9508a92 [java] Change rule priority of new rules to 3 6fded20 Merge branch 'master' into perf-UseIOStreamsWithApacheCommonsFileItem 6143163 [doc] Multivalued rule properties are still supported for xpath 2.0. c098936 [core] Use DeprecatedAttribute.NO_REPLACEMENT for List attributes Additional commits viewable in compare view     Updates `pmd-jsp` from 6.24.0 to 6.25.0  Release notes Sourced from pmd-jsp's releases.  PMD 6.25.0 (27-June-2020) 27-June-2020 - 6.25.0 The PMD team is pleased to announce PMD 6.25.0. This is a minor release. Table Of Contents  New and noteworthy  Scala cross compilation New Rules Modified rules   Fixed Issues API Changes  Deprecated APIs  Internal API For removal     External Contributions Stats  New and noteworthy Scala cross compilation Up until now the PMD Scala module has been compiled against scala 2.13 only by default. However, this makes it impossible to use pmd as a library in scala projects, that use scala 2.12, e.g. in sbt plugins. Therefore PMD now provides cross compiled pmd-scala modules for both versions: scala 2.12 and scala 2.13. The new modules have new maven artifactIds. The old artifactId net.sourceforge.pmd:pmd-scala:6.25.0 is still available, but is deprecated from now on. It has been demoted to be just a delegation to the new pmd-scala_2.13 module and will be removed eventually. The coordinates for the new modules are: <dependency>     <groupId>net.sourceforge.pmd</groupId>     <artifactId>pmd-scala_2.12</artifactId>     <version>6.25.0</version> </dependency> <dependency> <groupId>net.sourceforge.pmd</groupId> <artifactId>pmd-scala_2.13</artifactId> <version>6.25.0</version> </dependency>      Commits  a219b2e [maven-release-plugin] prepare release pmd_releases/6.25.0 820a43f Prepare pmd release 6.25.0 842bdb0 Merge branch 'pr-2609' acbbbee Merge branch 'pr-2608' 3831a85 Merge branch 'pr-2574' 91868f3 Deprecations for #2490 9508a92 [java] Change rule priority of new rules to 3 6fded20 Merge branch 'master' into perf-UseIOStreamsWithApacheCommonsFileItem 6143163 [doc] Multivalued rule properties are still supported for xpath 2.0. c098936 [core] Use DeprecatedAttribute.NO_REPLACEMENT for List attributes Additional commits viewable in compare view      Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-29T06:58:20Z","2020-06-30T05:21:15Z"
"","8254","dependency: bump pmd.version from 6.23.0 to 6.24.0","Bumps `pmd.version` from 6.23.0 to 6.24.0. Updates `pmd-java` from 6.23.0 to 6.24.0  Release notes Sourced from pmd-java's releases.  PMD 6.24.0 (24-May-2020) 24-May-2020 - 6.24.0 The PMD team is pleased to announce PMD 6.24.0. This is a minor release. Table Of Contents  New and noteworthy  CPD now supports XML as well Updated PMD Designer New Rules Deprecated Rules   Fixed Issues API Changes  Deprecated APIs Experimental APIs   External Contributions Stats  New and noteworthy CPD now supports XML as well Thanks to Fernando Cosso CPD can now find duplicates in XML files as well. This is useful to find duplicated sections in XML files. Updated PMD Designer This PMD release ships a new version of the pmd-designer. For the changes, see PMD Designer Changelog. New Rules   The new Java Rule LiteralsFirstInComparisons (java-bestpractices) find String literals, that are used in comparisons and are not positioned first. Using the String literal as the receiver of e.g. equals helps to avoid NullPointerExceptions. This rule is replacing the two old rules PositionLiteralsFirstInComparisons and PositionLiteralsFirstInCaseInsensitiveComparisons and extends the check for the methods compareTo, compareToIgnoreCase and contentEquals in addition to equals and equalsIgnoreCase. Note: This rule also replaces the two mentioned rules in Java's quickstart ruleset.   Deprecated Rules  The two Java rules PositionLiteralsFirstInComparisons   ... (truncated)    Commits  229cb2b [maven-release-plugin] prepare release pmd_releases/6.24.0 f2b8d21 Prepare pmd release 6.24.0 ff33cf0 Update pmd-designer to 6.24.0 a3a292d Remove unnecessary source-type tags in rule tests 5618257 [doc] Fix rule tags in the rule docs 6edd6c3 [doc] Update gems bc7328f [doc] Support nested classes when generating jdoc links d21e309 [java] AvoidPrintStackTrace - fix tests and deprecation warning 4899d04 Merge branch 'pr-2522' db88d03 [doc] Update release notes, fixes #2437 Additional commits viewable in compare view     Updates `pmd-core` from 6.23.0 to 6.24.0  Release notes Sourced from pmd-core's releases.  PMD 6.24.0 (24-May-2020) 24-May-2020 - 6.24.0 The PMD team is pleased to announce PMD 6.24.0. This is a minor release. Table Of Contents  New and noteworthy  CPD now supports XML as well Updated PMD Designer New Rules Deprecated Rules   Fixed Issues API Changes  Deprecated APIs Experimental APIs   External Contributions Stats  New and noteworthy CPD now supports XML as well Thanks to Fernando Cosso CPD can now find duplicates in XML files as well. This is useful to find duplicated sections in XML files. Updated PMD Designer This PMD release ships a new version of the pmd-designer. For the changes, see PMD Designer Changelog. New Rules   The new Java Rule LiteralsFirstInComparisons (java-bestpractices) find String literals, that are used in comparisons and are not positioned first. Using the String literal as the receiver of e.g. equals helps to avoid NullPointerExceptions. This rule is replacing the two old rules PositionLiteralsFirstInComparisons and PositionLiteralsFirstInCaseInsensitiveComparisons and extends the check for the methods compareTo, compareToIgnoreCase and contentEquals in addition to equals and equalsIgnoreCase. Note: This rule also replaces the two mentioned rules in Java's quickstart ruleset.   Deprecated Rules  The two Java rules PositionLiteralsFirstInComparisons   ... (truncated)    Commits  229cb2b [maven-release-plugin] prepare release pmd_releases/6.24.0 f2b8d21 Prepare pmd release 6.24.0 ff33cf0 Update pmd-designer to 6.24.0 a3a292d Remove unnecessary source-type tags in rule tests 5618257 [doc] Fix rule tags in the rule docs 6edd6c3 [doc] Update gems bc7328f [doc] Support nested classes when generating jdoc links d21e309 [java] AvoidPrintStackTrace - fix tests and deprecation warning 4899d04 Merge branch 'pr-2522' db88d03 [doc] Update release notes, fixes #2437 Additional commits viewable in compare view     Updates `pmd-javascript` from 6.23.0 to 6.24.0  Release notes Sourced from pmd-javascript's releases.  PMD 6.24.0 (24-May-2020) 24-May-2020 - 6.24.0 The PMD team is pleased to announce PMD 6.24.0. This is a minor release. Table Of Contents  New and noteworthy  CPD now supports XML as well Updated PMD Designer New Rules Deprecated Rules   Fixed Issues API Changes  Deprecated APIs Experimental APIs   External Contributions Stats  New and noteworthy CPD now supports XML as well Thanks to Fernando Cosso CPD can now find duplicates in XML files as well. This is useful to find duplicated sections in XML files. Updated PMD Designer This PMD release ships a new version of the pmd-designer. For the changes, see PMD Designer Changelog. New Rules   The new Java Rule LiteralsFirstInComparisons (java-bestpractices) find String literals, that are used in comparisons and are not positioned first. Using the String literal as the receiver of e.g. equals helps to avoid NullPointerExceptions. This rule is replacing the two old rules PositionLiteralsFirstInComparisons and PositionLiteralsFirstInCaseInsensitiveComparisons and extends the check for the methods compareTo, compareToIgnoreCase and contentEquals in addition to equals and equalsIgnoreCase. Note: This rule also replaces the two mentioned rules in Java's quickstart ruleset.   Deprecated Rules  The two Java rules PositionLiteralsFirstInComparisons   ... (truncated)    Commits  229cb2b [maven-release-plugin] prepare release pmd_releases/6.24.0 f2b8d21 Prepare pmd release 6.24.0 ff33cf0 Update pmd-designer to 6.24.0 a3a292d Remove unnecessary source-type tags in rule tests 5618257 [doc] Fix rule tags in the rule docs 6edd6c3 [doc] Update gems bc7328f [doc] Support nested classes when generating jdoc links d21e309 [java] AvoidPrintStackTrace - fix tests and deprecation warning 4899d04 Merge branch 'pr-2522' db88d03 [doc] Update release notes, fixes #2437 Additional commits viewable in compare view     Updates `pmd-jsp` from 6.23.0 to 6.24.0  Release notes Sourced from pmd-jsp's releases.  PMD 6.24.0 (24-May-2020) 24-May-2020 - 6.24.0 The PMD team is pleased to announce PMD 6.24.0. This is a minor release. Table Of Contents  New and noteworthy  CPD now supports XML as well Updated PMD Designer New Rules Deprecated Rules   Fixed Issues API Changes  Deprecated APIs Experimental APIs   External Contributions Stats  New and noteworthy CPD now supports XML as well Thanks to Fernando Cosso CPD can now find duplicates in XML files as well. This is useful to find duplicated sections in XML files. Updated PMD Designer This PMD release ships a new version of the pmd-designer. For the changes, see PMD Designer Changelog. New Rules   The new Java Rule LiteralsFirstInComparisons (java-bestpractices) find String literals, that are used in comparisons and are not positioned first. Using the String literal as the receiver of e.g. equals helps to avoid NullPointerExceptions. This rule is replacing the two old rules PositionLiteralsFirstInComparisons and PositionLiteralsFirstInCaseInsensitiveComparisons and extends the check for the methods compareTo, compareToIgnoreCase and contentEquals in addition to equals and equalsIgnoreCase. Note: This rule also replaces the two mentioned rules in Java's quickstart ruleset.   Deprecated Rules  The two Java rules PositionLiteralsFirstInComparisons   ... (truncated)    Commits  229cb2b [maven-release-plugin] prepare release pmd_releases/6.24.0 f2b8d21 Prepare pmd release 6.24.0 ff33cf0 Update pmd-designer to 6.24.0 a3a292d Remove unnecessary source-type tags in rule tests 5618257 [doc] Fix rule tags in the rule docs 6edd6c3 [doc] Update gems bc7328f [doc] Support nested classes when generating jdoc links d21e309 [java] AvoidPrintStackTrace - fix tests and deprecation warning 4899d04 Merge branch 'pr-2522' db88d03 [doc] Update release notes, fixes #2437 Additional commits viewable in compare view      Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-05-25T07:04:50Z","2020-06-01T05:38:59Z"
"","8196","dependency: bump pmd.version from 6.22.0 to 6.23.0","Bumps `pmd.version` from 6.22.0 to 6.23.0. Updates `pmd-java` from 6.22.0 to 6.23.0  Release notes Sourced from pmd-java's releases.  PMD 6.23.0 (24-April-2020) 24-April-2020 - 6.23.0 The PMD team is pleased to announce PMD 6.23.0. This is a minor release. Table Of Contents  New and noteworthy  PMD adopts Contributor Code of Conduct Performance improvements for XPath 2.0 rules Javascript improvements for ES6 New JSON renderer New Rules   Fixed Issues API Changes  Deprecated APIs  Internal API In ASTs For removal     External Contributions Stats  New and noteworthy PMD adopts Contributor Code of Conduct To facilitate healthy and constructive community behavior PMD adopts Contributor Convenant as its code of conduct. Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. You can find the code of conduct in the file code_of_conduct.md in our repository. Performance improvements for XPath 2.0 rules XPath rules written with XPath 2.0 now support conversion to a rulechain rule, which improves their performance. The rulechain is a mechanism that allows several rules to be executed in a single tree traversal. Conversion to the rulechain is possible if your XPath expression looks like //someNode/... | //someOtherNode/...  | ..., that is, a union of one or more path expressions that start with //. Instead of traversing the whole tree once per path expression (and per rule), a single traversal executes all rules in your ruleset as needed. This conversion is performed automatically and cannot be disabled. *The conversion should  ... (truncated)    Commits  921c65f [maven-release-plugin] prepare release pmd_releases/6.23.0 96d542c Prepare pmd release 6.23.0 7f154e1 [doc] Exclude and remove unnecessary files baef99d [doc] Update gems 0e40a06 Merge branch 'pr-2432' eb68732 [doc] Update release notes, closes #2432 a82e8e4 Close data sources even if a runtime exception or error is thrown in processF... cf8aa3b Merge branch 'pr-2434' 292ad4a [core] More explicit deprecations on AbstractNode e2e5715 Add a verify step in do-release.sh Additional commits viewable in compare view     Updates `pmd-core` from 6.22.0 to 6.23.0  Release notes Sourced from pmd-core's releases.  PMD 6.23.0 (24-April-2020) 24-April-2020 - 6.23.0 The PMD team is pleased to announce PMD 6.23.0. This is a minor release. Table Of Contents  New and noteworthy  PMD adopts Contributor Code of Conduct Performance improvements for XPath 2.0 rules Javascript improvements for ES6 New JSON renderer New Rules   Fixed Issues API Changes  Deprecated APIs  Internal API In ASTs For removal     External Contributions Stats  New and noteworthy PMD adopts Contributor Code of Conduct To facilitate healthy and constructive community behavior PMD adopts Contributor Convenant as its code of conduct. Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. You can find the code of conduct in the file code_of_conduct.md in our repository. Performance improvements for XPath 2.0 rules XPath rules written with XPath 2.0 now support conversion to a rulechain rule, which improves their performance. The rulechain is a mechanism that allows several rules to be executed in a single tree traversal. Conversion to the rulechain is possible if your XPath expression looks like //someNode/... | //someOtherNode/...  | ..., that is, a union of one or more path expressions that start with //. Instead of traversing the whole tree once per path expression (and per rule), a single traversal executes all rules in your ruleset as needed. This conversion is performed automatically and cannot be disabled. *The conversion should  ... (truncated)    Commits  921c65f [maven-release-plugin] prepare release pmd_releases/6.23.0 96d542c Prepare pmd release 6.23.0 7f154e1 [doc] Exclude and remove unnecessary files baef99d [doc] Update gems 0e40a06 Merge branch 'pr-2432' eb68732 [doc] Update release notes, closes #2432 a82e8e4 Close data sources even if a runtime exception or error is thrown in processF... cf8aa3b Merge branch 'pr-2434' 292ad4a [core] More explicit deprecations on AbstractNode e2e5715 Add a verify step in do-release.sh Additional commits viewable in compare view     Updates `pmd-javascript` from 6.22.0 to 6.23.0  Release notes Sourced from pmd-javascript's releases.  PMD 6.23.0 (24-April-2020) 24-April-2020 - 6.23.0 The PMD team is pleased to announce PMD 6.23.0. This is a minor release. Table Of Contents  New and noteworthy  PMD adopts Contributor Code of Conduct Performance improvements for XPath 2.0 rules Javascript improvements for ES6 New JSON renderer New Rules   Fixed Issues API Changes  Deprecated APIs  Internal API In ASTs For removal     External Contributions Stats  New and noteworthy PMD adopts Contributor Code of Conduct To facilitate healthy and constructive community behavior PMD adopts Contributor Convenant as its code of conduct. Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. You can find the code of conduct in the file code_of_conduct.md in our repository. Performance improvements for XPath 2.0 rules XPath rules written with XPath 2.0 now support conversion to a rulechain rule, which improves their performance. The rulechain is a mechanism that allows several rules to be executed in a single tree traversal. Conversion to the rulechain is possible if your XPath expression looks like //someNode/... | //someOtherNode/...  | ..., that is, a union of one or more path expressions that start with //. Instead of traversing the whole tree once per path expression (and per rule), a single traversal executes all rules in your ruleset as needed. This conversion is performed automatically and cannot be disabled. *The conversion should  ... (truncated)    Commits  921c65f [maven-release-plugin] prepare release pmd_releases/6.23.0 96d542c Prepare pmd release 6.23.0 7f154e1 [doc] Exclude and remove unnecessary files baef99d [doc] Update gems 0e40a06 Merge branch 'pr-2432' eb68732 [doc] Update release notes, closes #2432 a82e8e4 Close data sources even if a runtime exception or error is thrown in processF... cf8aa3b Merge branch 'pr-2434' 292ad4a [core] More explicit deprecations on AbstractNode e2e5715 Add a verify step in do-release.sh Additional commits viewable in compare view     Updates `pmd-jsp` from 6.22.0 to 6.23.0  Release notes Sourced from pmd-jsp's releases.  PMD 6.23.0 (24-April-2020) 24-April-2020 - 6.23.0 The PMD team is pleased to announce PMD 6.23.0. This is a minor release. Table Of Contents  New and noteworthy  PMD adopts Contributor Code of Conduct Performance improvements for XPath 2.0 rules Javascript improvements for ES6 New JSON renderer New Rules   Fixed Issues API Changes  Deprecated APIs  Internal API In ASTs For removal     External Contributions Stats  New and noteworthy PMD adopts Contributor Code of Conduct To facilitate healthy and constructive community behavior PMD adopts Contributor Convenant as its code of conduct. Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. You can find the code of conduct in the file code_of_conduct.md in our repository. Performance improvements for XPath 2.0 rules XPath rules written with XPath 2.0 now support conversion to a rulechain rule, which improves their performance. The rulechain is a mechanism that allows several rules to be executed in a single tree traversal. Conversion to the rulechain is possible if your XPath expression looks like //someNode/... | //someOtherNode/...  | ..., that is, a union of one or more path expressions that start with //. Instead of traversing the whole tree once per path expression (and per rule), a single traversal executes all rules in your ruleset as needed. This conversion is performed automatically and cannot be disabled. *The conversion should  ... (truncated)    Commits  921c65f [maven-release-plugin] prepare release pmd_releases/6.23.0 96d542c Prepare pmd release 6.23.0 7f154e1 [doc] Exclude and remove unnecessary files baef99d [doc] Update gems 0e40a06 Merge branch 'pr-2432' eb68732 [doc] Update release notes, closes #2432 a82e8e4 Close data sources even if a runtime exception or error is thrown in processF... cf8aa3b Merge branch 'pr-2434' 292ad4a [core] More explicit deprecations on AbstractNode e2e5715 Add a verify step in do-release.sh Additional commits viewable in compare view      Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-04-27T07:12:15Z","2020-05-05T07:08:04Z"
"","8832","dependency: bump maven.jacoco.plugin.version from 0.8.5 to 0.8.6","Bumps `maven.jacoco.plugin.version` from 0.8.5 to 0.8.6. Updates `org.jacoco.agent` from 0.8.5 to 0.8.6  Release notes Sourced from org.jacoco.agent's releases.  0.8.6 New Features  JaCoCo now officially supports Java 14. Experimental support for Java 15 class files (GitHub #992). Experimental support for Java 16 class files (GitHub #1059). Methods toString, hashCode and equals generated by compiler for records are filtered out during generation of report (GitHub #990). Bridge methods are filtered out during generation of report (GitHub #1010). Methods generated by Kotlin compiler for non-overridden non-abstract methods of interfaces are filtered out during generation of report (GitHub #1012). Branches added by the Kotlin compiler version 1.3.60 for suspending functions with tail call optimization are filtered out during generation of report (GitHub #1016).  Fixed bugs  Compression method of zip entries is now preserved when instrumenting archives. This allows to use JaCoCo with frameworks that expect uncompressed entries (GitHub #1018).  Non-functional Changes  Support for Pack200 was removed in JDK 14. JaCoCo will now throw a detailed exception when Pack200 archives are processed with the latest JDKs (GitHub #984). JaCoCo now depends on ASM 8.0.1 (GitHub #1032, #1043).  API Changes  URLStreamHandlerRuntime removed (GitHub #471).     Commits  492f421 Prepare release 0.8.6 b404a6b improve english grammer (#1068) 6ceb019 Visual cleanup of JDK/compilation target table (#1034) 2a75e0d Remove URLStreamHandlerRuntime (#471) 1485a41 Add experimental support for Java 16 (#1059) d60a5b2 Fix validation test for Java 15 (#1052) c53d987 Upgrade ASM to 8.0.1 (#1043) 1c5601b Happy birthday JDK 14! (#1033) ed4653e Upgrade ASM to 8.0 (#1032) bbff1f5 Add link about integration of JaCoCo into Codacy (#1028) Additional commits viewable in compare view     Updates `jacoco-maven-plugin` from 0.8.5 to 0.8.6  Release notes Sourced from jacoco-maven-plugin's releases.  0.8.6 New Features  JaCoCo now officially supports Java 14. Experimental support for Java 15 class files (GitHub #992). Experimental support for Java 16 class files (GitHub #1059). Methods toString, hashCode and equals generated by compiler for records are filtered out during generation of report (GitHub #990). Bridge methods are filtered out during generation of report (GitHub #1010). Methods generated by Kotlin compiler for non-overridden non-abstract methods of interfaces are filtered out during generation of report (GitHub #1012). Branches added by the Kotlin compiler version 1.3.60 for suspending functions with tail call optimization are filtered out during generation of report (GitHub #1016).  Fixed bugs  Compression method of zip entries is now preserved when instrumenting archives. This allows to use JaCoCo with frameworks that expect uncompressed entries (GitHub #1018).  Non-functional Changes  Support for Pack200 was removed in JDK 14. JaCoCo will now throw a detailed exception when Pack200 archives are processed with the latest JDKs (GitHub #984). JaCoCo now depends on ASM 8.0.1 (GitHub #1032, #1043).  API Changes  URLStreamHandlerRuntime removed (GitHub #471).     Commits  492f421 Prepare release 0.8.6 b404a6b improve english grammer (#1068) 6ceb019 Visual cleanup of JDK/compilation target table (#1034) 2a75e0d Remove URLStreamHandlerRuntime (#471) 1485a41 Add experimental support for Java 16 (#1059) d60a5b2 Fix validation test for Java 15 (#1052) c53d987 Upgrade ASM to 8.0.1 (#1043) 1c5601b Happy birthday JDK 14! (#1033) ed4653e Upgrade ASM to 8.0 (#1032) bbff1f5 Add link about integration of JaCoCo into Codacy (#1028) Additional commits viewable in compare view      Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-16T05:55:16Z","2020-09-19T14:36:19Z"
"","8831","dependency: bump junit.version from 5.6.2 to 5.7.0","Bumps `junit.version` from 5.6.2 to 5.7.0. Updates `junit-jupiter-api` from 5.6.2 to 5.7.0  Release notes Sourced from junit-jupiter-api's releases.  JUnit 5.7.0 = Platform 1.7.0 + Jupiter 5.7.0 + Vintage 5.7.0 See Release Notes. JUnit 5.7.0-RC1 = Platform 1.7.0-RC1 + Jupiter 5.7.0-RC1 + Vintage 5.7.0-RC1 See Release Notes. JUnit 5.7.0-M1 = Platform 1.7.0-M1 + Jupiter 5.7.0-M1 + Vintage 5.7.0-M1 See Release Notes.    Commits  a352875 Release 5.7 5c00088 Document arguments passed to MessageFormat 0c2876b Remove usage of JetBrains' NotNull annotation and forbid future usage 7afbe90 Polish test kit Events 44c6742 Polish TestableAnnotationTests a962d5a Polish Javadoc for @Testable a245da0 Let Testable annotation target any element type 23e824f Upgradle to 6.6.1 68bb2e3 Close resource in inverse order of addition (#2387) 10aef49 Fix link to milestone page Additional commits viewable in compare view     Updates `junit-jupiter-engine` from 5.6.2 to 5.7.0  Release notes Sourced from junit-jupiter-engine's releases.  JUnit 5.7.0 = Platform 1.7.0 + Jupiter 5.7.0 + Vintage 5.7.0 See Release Notes. JUnit 5.7.0-RC1 = Platform 1.7.0-RC1 + Jupiter 5.7.0-RC1 + Vintage 5.7.0-RC1 See Release Notes. JUnit 5.7.0-M1 = Platform 1.7.0-M1 + Jupiter 5.7.0-M1 + Vintage 5.7.0-M1 See Release Notes.    Commits  a352875 Release 5.7 5c00088 Document arguments passed to MessageFormat 0c2876b Remove usage of JetBrains' NotNull annotation and forbid future usage 7afbe90 Polish test kit Events 44c6742 Polish TestableAnnotationTests a962d5a Polish Javadoc for @Testable a245da0 Let Testable annotation target any element type 23e824f Upgradle to 6.6.1 68bb2e3 Close resource in inverse order of addition (#2387) 10aef49 Fix link to milestone page Additional commits viewable in compare view     Updates `junit-vintage-engine` from 5.6.2 to 5.7.0  Release notes Sourced from junit-vintage-engine's releases.  JUnit 5.7.0 = Platform 1.7.0 + Jupiter 5.7.0 + Vintage 5.7.0 See Release Notes. JUnit 5.7.0-RC1 = Platform 1.7.0-RC1 + Jupiter 5.7.0-RC1 + Vintage 5.7.0-RC1 See Release Notes. JUnit 5.7.0-M1 = Platform 1.7.0-M1 + Jupiter 5.7.0-M1 + Vintage 5.7.0-M1 See Release Notes.    Commits  a352875 Release 5.7 5c00088 Document arguments passed to MessageFormat 0c2876b Remove usage of JetBrains' NotNull annotation and forbid future usage 7afbe90 Polish test kit Events 44c6742 Polish TestableAnnotationTests a962d5a Polish Javadoc for @Testable a245da0 Let Testable annotation target any element type 23e824f Upgradle to 6.6.1 68bb2e3 Close resource in inverse order of addition (#2387) 10aef49 Fix link to milestone page Additional commits viewable in compare view      Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-14T05:58:35Z","2020-09-14T09:37:18Z"
"","8086","dependency: bump junit.version from 5.6.1 to 5.6.2","Bumps `junit.version` from 5.6.1 to 5.6.2. Updates `junit-jupiter-api` from 5.6.1 to 5.6.2  Release notes Sourced from junit-jupiter-api's releases.  JUnit 5.6.2 = Platform 1.6.2 + Jupiter 5.6.2 + Vintage 5.6.2 See Release Notes.    Commits  4e7a087 Release 5.6.2 0be02cf Determine releaseBranch automatically based on version 11ddd87 Avoid inner class cycle detection for non-matching predicate 5cbfed5 Remove irrelevant sections 648121d Document #2248 in release notes ef6e842 Add release notes for 5.6.2 794ce24 Fall back to display name if method name is blank b0f54b1 Back to snapshots for further development See full diff in compare view     Updates `junit-jupiter-engine` from 5.6.1 to 5.6.2  Release notes Sourced from junit-jupiter-engine's releases.  JUnit 5.6.2 = Platform 1.6.2 + Jupiter 5.6.2 + Vintage 5.6.2 See Release Notes.    Commits  4e7a087 Release 5.6.2 0be02cf Determine releaseBranch automatically based on version 11ddd87 Avoid inner class cycle detection for non-matching predicate 5cbfed5 Remove irrelevant sections 648121d Document #2248 in release notes ef6e842 Add release notes for 5.6.2 794ce24 Fall back to display name if method name is blank b0f54b1 Back to snapshots for further development See full diff in compare view     Updates `junit-vintage-engine` from 5.6.1 to 5.6.2  Release notes Sourced from junit-vintage-engine's releases.  JUnit 5.6.2 = Platform 1.6.2 + Jupiter 5.6.2 + Vintage 5.6.2 See Release Notes.    Commits  4e7a087 Release 5.6.2 0be02cf Determine releaseBranch automatically based on version 11ddd87 Avoid inner class cycle detection for non-matching predicate 5cbfed5 Remove irrelevant sections 648121d Document #2248 in release notes ef6e842 Add release notes for 5.6.2 794ce24 Fall back to display name if method name is blank b0f54b1 Back to snapshots for further development See full diff in compare view      Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-04-13T07:11:26Z","2020-04-13T09:08:24Z"
"","8635","dependency: bump versions-maven-plugin from 2.7 to 2.8.1","Bumps [versions-maven-plugin](https://github.com/mojohaus/versions-maven-plugin) from 2.7 to 2.8.1.  Release notes Sourced from versions-maven-plugin's releases.  2.8.1 :star: New Features  Remove cobertura-maven-plugin  #409 Removed plexus-i18n #405 Fixes #82 ensure version change affects only the current directory (and child directories), not the parent or sibling directories #400 Fixes #321 fail the build when parsing XML of child modules fails due to invalid XML #399 Upgrade GitHub Actions #398 Ensure display output is order, only order at point of printing #394 use-latest-versions ignores dependencies with versions defined as properties #340 make build reproducible #424  :beetle: Bug Fixes  Downgrade commons-lang3 to 3.8.1 to keep JDK7 promise #411 Warning if plugin is executed in parallel #373 display-plugin-updates fails if non-local parent is present in POM #422  :hammer: Dependency Upgrades  Upgrade maven-invoker-plugin to 3.2.1 #420 Upgrade modello-maven-plugin from 1.9.1 to 1.11 #410 Upgrade plugin version for versions-maven-plugin from 2.4 to 2.7 #408 Upgrade doxia from 1.7 to 1.9.1 #407 Upgrade wagon from 2.12 to 3.4.0 #406 Upgrade plexus-interactivity-api from 1.0-alpha-6 to 1.0 #404 Upgrade plexus-container-default from 1.7.1 to 2.1.0 #403 Upgrade hamcrest-library from 1.3 to hamcrest-core 2.2 #402 Upgrade mockito 1.9.5 to 2.28.2 #401 Upgrade woodstox-core-asl from 4.2.0 to 4.4.1 #397 Upgrade maven-common-artifact-filters to 3.1.0 #389 Upgrade plexus-utils to 3.3.0 #388 commons-lang3 v3.9 #380  :heart: Contributors We'd like to thank all the contributors who worked on this release!  @stefanseifert @nhojpatrick     Commits  2bd95c9 [maven-release-plugin] prepare release versions-maven-plugin-2.8.1 f4b555b Merge pull request #423 from stefanseifert/issue/422-plugin-updates-parent-npe 979e363 make build reproducible #424 29b368d Fixes #422 Avoid NPE when non-local parent POM is present a6432f9 [maven-release-plugin] prepare for next development iteration db78f72 [maven-release-plugin] prepare release versions-maven-plugin-2.8 76f95b4 Fixed #420 - Upgrade maven-invoker-plugin to 3.2.1 0b90014 Fixes #413 - fix maven site generation (#414) 9915931 Fix #306: Adjust rules schemaLocation (#330) 6d91fe0 Fixed #411 - Downgrade commons-lang3 to 3.8.1 to keep JDK7 promise Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.codehaus.mojo:versions-maven-plugin&package-manager=maven&previous-version=2.7&new-version=2.8.1)](https://dependabot.com/compatibility-score/?dependency-name=org.codehaus.mojo:versions-maven-plugin&package-manager=maven&previous-version=2.7&new-version=2.8.1)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-08-11T06:47:39Z","2020-08-11T11:49:54Z"
"","8910","dependency: bump truth from 1.0.1 to 1.1","Bumps [truth](https://github.com/google/truth) from 1.0.1 to 1.1.  Release notes Sourced from truth's releases.  1.1  Fixed (we think :)) R8 compilation failure: Error: com.android.tools.r8.errors.b: Compilation can't be completed because `org.objectweb.asm.ClassVisitor` and 1 other classes are missing. (0bfa285fa) Added unpackingAnyUsing(TypeRegistry, ExtensionRegistry). If you call this method, ProtoTruth will attempt to unpack Any messages before comparing them. (b50d878b) Added formattingDiffsUsing methods to IterableSubject and MapSubject. This allows you to get failure messages which show diffs between the actual and expected elements (like you get with comparingElementsUsing) while still comparing them using object equality. (ae997be77) Added null checks to StringSubject. (3481ab0af) Included ASM as a dependency (non-<optional>) by default. It is still safe to exclude if you want to minimize dependencies, but by including it, you may see better failure messages. (aea78e81c) Changed Checker Framework annotations from checker-qual to qual. (e71b57b9f) Removed dependency on gwt-user. (b54e9ef50fe670bf93dd3b2b6851423be631b429) API documentation for Truth classes is now easier to reach. For example, for StringSubject, visit truth.dev/StringSubject. Also, more easily access the index at truth.dev/api.     Commits  See full diff in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.google.truth:truth&package-manager=maven&previous-version=1.0.1&new-version=1.1)](https://dependabot.com/compatibility-score/?dependency-name=com.google.truth:truth&package-manager=maven&previous-version=1.0.1&new-version=1.1)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-10-21T05:51:54Z","2020-10-21T12:13:39Z"
"","8906","dependency: bump spotbugs-maven-plugin from 4.1.3 to 4.1.4","Bumps [spotbugs-maven-plugin](https://github.com/spotbugs/spotbugs-maven-plugin) from 4.1.3 to 4.1.4.  Commits  b3dfcdc [maven-release-plugin] prepare release spotbugs-maven-plugin-4.1.4 d9a0fcb Merge pull request #270 from hazendaz/spotbugs 1036d31 [pom] Bump spotbugs to 4.1.4 fb010c9 Merge pull request #267 from spotbugs/dependabot/maven/org.codehaus.gmavenplu... dedf1c5 Bump gmavenplus-plugin from 1.10.1 to 1.11.0 0acb3c8 Merge pull request #265 from spotbugs/dependabot/maven/org.apache.ant-ant-1.10.9 e9a541e Bump ant from 1.10.8 to 1.10.9 abcddd8 [maven-release-plugin] prepare for next development iteration See full diff in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.github.spotbugs:spotbugs-maven-plugin&package-manager=maven&previous-version=4.1.3&new-version=4.1.4)](https://dependabot.com/compatibility-score/?dependency-name=com.github.spotbugs:spotbugs-maven-plugin&package-manager=maven&previous-version=4.1.3&new-version=4.1.4)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-10-20T05:50:40Z","2020-10-20T13:58:32Z"
"","8867","dependency: bump spotbugs-maven-plugin from 4.0.4 to 4.1.3","Bumps [spotbugs-maven-plugin](https://github.com/spotbugs/spotbugs-maven-plugin) from 4.0.4 to 4.1.3.  Release notes Sourced from spotbugs-maven-plugin's releases.  Spotbugs-maven-plugin 4.1.3  Aligment with spotbugs 4.1.3 Jdk 15/16 support Fixes copy of repo being put until target (ie C_...) per #238 Reduces logging output below threshold per #237     Commits  17aa082 [maven-release-plugin] prepare release spotbugs-maven-plugin-4.1.3 11c2d9e Merge pull request #264 from hazendaz/spotbugs c7a00fa Merge branch 'master' into spotbugs to sync it as 'empty' merge (we don't wan... 34d2b28 Merge pull request #262 from hazendaz/spotbugs 085c57b [ci] Add openjdk16 9e33482 [groovy] Bump to 3.0.6 for jdk 16 support 7a15809 Merge pull request #261 from hazendaz/spotbugs c69dab0 [pom] Added jgit support module 1328f9c [pom] Fix version string - not period ffeca08 [pom] Bump jgit to 5.9.0.x Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.github.spotbugs:spotbugs-maven-plugin&package-manager=maven&previous-version=4.0.4&new-version=4.1.3)](https://dependabot.com/compatibility-score/?dependency-name=com.github.spotbugs:spotbugs-maven-plugin&package-manager=maven&previous-version=4.0.4&new-version=4.1.3)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-10-01T05:58:19Z","2020-10-02T03:43:18Z"
"","8331","dependency: bump spotbugs-maven-plugin from 4.0.0 to 4.0.4","Bumps [spotbugs-maven-plugin](https://github.com/spotbugs/spotbugs-maven-plugin) from 4.0.0 to 4.0.4.  Release notes Sourced from spotbugs-maven-plugin's releases.  Spotbugs-maven-plugin 4.0.4  Introduce failThreshold Alignment with spotbugs 4.0.4 Remove old left over maven 2.2.1 classloader logic library cleanup with groovy Various library updates     Commits  0842114 [maven-release-plugin] prepare release spotbugs-maven-plugin-4.0.4 ff24cee [pom] Bump spotbugs tag to 4.0.4 / version to 4.0.4 snapshot 4c91322 Merge pull request #226 from spotbugs/dependabot/maven/com.github.spotbugs-sp... 6cdd684 Bump spotbugs from 4.0.3 to 4.0.4 46b84f1 Merge pull request #222 from famod/issue-219-failThreshold d60412c Merge pull request #225 from hazendaz/spotbugs 045bdf1 [pom] Exclude groovy testng as we do not use it 95642af Merge pull request #224 from spotbugs/dependabot/maven/org.apache.maven.plugi... f409ca2 Bump maven-project-info-reports-plugin from 3.0.0 to 3.1.0 07e4abb Merge pull request #223 from spotbugs/dependabot/maven/commons-io-commons-io-2.7 Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.github.spotbugs:spotbugs-maven-plugin&package-manager=maven&previous-version=4.0.0&new-version=4.0.4)](https://dependabot.com/compatibility-score/?dependency-name=com.github.spotbugs:spotbugs-maven-plugin&package-manager=maven&previous-version=4.0.0&new-version=4.0.4)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-22T07:06:35Z","2020-06-24T14:53:27Z"
"","8900","dependency: bump picocli from 4.5.1 to 4.5.2","Bumps [picocli](https://github.com/remkop/picocli) from 4.5.1 to 4.5.2.  Release notes Sourced from picocli's releases.  Picocli 4.5.2  Picocli 4.5.2 The picocli community is pleased to announce picocli 4.5.2. This release contains bug fixes and enhancements:  Auto-enable ANSI colors on MSYS2 terminals. Abbreviated options are now matched correctly even when value attached with '=' separator. The built-in HelpCommand now respects subcommands case-sensitivity and abbreviations. Required parameters no longer consume negated options. Positional parameters in Argument Groups no longer result in ArithmeticException: / by zero exceptions. The user manual now has tabs showing examples in languages other than Java. This is a work in progress: many examples still only have a Java version. Contributions welcome! Many, many documentation enhancements, most of which contributed by the community.  Many thanks to the picocli community who contributed 28 pull requests in this release! Please see the Fixed Issues section below for the individual contributors. Great work! This is the seventy-fourth public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy Fixed issues Deprecations Potential breaking changes   New and Noteworthy The user manual now has tabs showing examples in languages other than Java. This is a work in progress: many examples still only have a Java version. Contributions welcome!  Fixed issues  #1186 Enhancement: Auto-enable ANSI colors on MSYS2 (Git for Windows, MSYS2-based Windows Terminal shells, etc.). Thanks to Sysmat for raising this. #1162 Bugfix: Abbreviated options are not matched if value attached with '=' separator (like -x=3). Thanks to Chris Laprun for raising this. #1156#1172 Bugfix: the built-in HelpCommand now respects subcommands case-sensitivity and abbreviations. Thanks to NewbieOrange for the pull request. #1197 Bugfix: required parameters should not consume negated options. Thanks to Kevin Turner for raising this. #1213 Bugfix: @Parameters in @ArgGroup should not result in ArithmeticException: / by zero. Thanks to Loren Keagle for raising this. #1158 DOC: Fix broken links to GraalVM repo. Thanks to Andreas Deininger for the pull request. #1155 DOC: Fix sample code in chapter ""Validation"". Thanks to Andreas Deininger for the pull request. #1157 DOC: Fix typo ""a argument group"" in user manual. Thanks to sabrina for raising this. #1160 DOC: Added section Was a Value Defaulted? to the user manual. #1161 DOC: Fix typo ""4,2"" (should be 4.2) in user manual. Thanks to sabrina for raising this. #1165 DOC: Fix jline3 example: add AnsiConsole::systemUninstall in finally clause. Thanks to David Walluck for raising this. #1168#1169 DOC: Ensure org.jline.terminal.Terminal is closed when done. Thanks to David Walluck for the pull request. #1167 DOC: Fix broken links in Quick Guide. Thanks to Andreas Deininger for the pull request. #1171 DOC: Various documentation improvements. Thanks to Andreas Deininger for the pull request. #1173 DOC: Improve example applications for the user manual and Quick Guide. Thanks to Andreas Deininger for the pull request. #1175 DOC: section on compatible versions to picocli-shell-jline3/README.md. Thanks to Nick Cross for raising this.      Changelog Sourced from picocli's changelog.   Picocli 4.5.2 The picocli community is pleased to announce picocli 4.5.2. This release contains bug fixes and enhancements:  Auto-enable ANSI colors on MSYS2 terminals. Abbreviated options are now matched correctly even when value attached with '=' separator. The built-in HelpCommand now respects subcommands case-sensitivity and abbreviations. Required parameters no longer consume negated options. Positional parameters in Argument Groups no longer result in ArithmeticException: / by zero exceptions. The user manual now has tabs showing examples in languages other than Java. This is a work in progress: many examples still only have a Java version. Contributions welcome! Many, many documentation enhancements, most of which contributed by the community.  Many thanks to the picocli community who contributed 28 pull requests in this release! Please see the Fixed Issues section below for the individual contributors. Great work! This is the seventy-fourth public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy Fixed issues Deprecations Potential breaking changes   New and Noteworthy The user manual now has tabs showing examples in languages other than Java. This is a work in progress: many examples still only have a Java version. Contributions welcome!  Fixed issues  #1186 Enhancement: Auto-enable ANSI colors on MSYS2 (Git for Windows, MSYS2-based Windows Terminal shells, etc.). Thanks to Sysmat for raising this. #1162 Bugfix: Abbreviated options are not matched if value attached with '=' separator (like -x=3). Thanks to Chris Laprun for raising this. #1156#1172 Bugfix: the built-in HelpCommand now respects subcommands case-sensitivity and abbreviations. Thanks to NewbieOrange for the pull request. #1197 Bugfix: required parameters should not consume negated options. Thanks to Kevin Turner for raising this. #1213 Bugfix: @Parameters in @ArgGroup should not result in ArithmeticException: / by zero. Thanks to Loren Keagle for raising this. #1158 DOC: Fix broken links to GraalVM repo. Thanks to Andreas Deininger for the pull request. #1155 DOC: Fix sample code in chapter ""Validation"". Thanks to Andreas Deininger for the pull request. #1157 DOC: Fix typo ""a argument group"" in user manual. Thanks to sabrina for raising this. #1160 DOC: Added section Was a Value Defaulted? to the user manual. #1161 DOC: Fix typo ""4,2"" (should be 4.2) in user manual. Thanks to sabrina for raising this. #1165 DOC: Fix jline3 example: add AnsiConsole::systemUninstall in finally clause. Thanks to David Walluck for raising this. #1168#1169 DOC: Ensure org.jline.terminal.Terminal is closed when done. Thanks to David Walluck for the pull request. #1167 DOC: Fix broken links in Quick Guide. Thanks to Andreas Deininger for the pull request. #1171 DOC: Various documentation improvements. Thanks to Andreas Deininger for the pull request. #1173 DOC: Improve example applications for the user manual and Quick Guide. Thanks to Andreas Deininger for the pull request. #1175 DOC: section on compatible versions to picocli-shell-jline3/README.md. Thanks to Nick Cross for raising this. #1176 DOC: Update JLine picocli-shell-jline3 example to 3.16.0. Thanks to Nick Cross for the pull request.      Commits  3410dd8 Release picocli version 4.5.2 c5dbdc9 BUILD update paths for asciidoc new output directory 16a651b DOC update RELEASE-NOTES 4.5.2 summary a2a4902 DOC add japanese example 70fbde7 #1182#1212 DOC caution in user manual: inherited options can't be used wi... e425465 #1213 Bugfix: ""ArithmeticException: / by zero"" when ArgGroup has positional... 0b6429b #1211 additional small highlighting improvement ccf3c0d #1211 additional minor improvements 2d7cc5d #1211 add tabs with Kotlin source to user manual c7e1dab Manual, section subcommands: add several tabs with Kotlin source code Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.5.1&new-version=4.5.2)](https://dependabot.com/compatibility-score/?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.5.1&new-version=4.5.2)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-10-15T05:51:59Z","2020-10-15T07:25:06Z"
"","8760","dependency: bump picocli from 4.5.0 to 4.5.1","Bumps [picocli](https://github.com/remkop/picocli) from 4.5.0 to 4.5.1.  Release notes Sourced from picocli's releases.  Picocli 4.5.1  Picocli 4.5.1 The picocli community is pleased to announce picocli 4.5.1. This release contains bug fixes and enhancements. Fixed bug in the picocli-codegen annotation processor that resulted in errors in native images that used ManPageGenerator as subcommand. Suppress generation of Gradle Module Metadata, to fix Gradle build failures for projects using picocli 4.4.0 or 4.5.0. Fixed terminal width detection on macOS. The user manual now has a new section on Validation. Various other documentation improvements. This is the seventy-third public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy Fixed issues Deprecations Potential breaking changes   New and Noteworthy  Fixed issues  #1151 Bugfix: ManPageGenerator as subcommand with native-image throws exception. Thanks to Sebastian Hoß for raising this. #1152 Bugfix: Gradle build fail when using picocli 4.4.0 or 4.5.0: Gradle Module Metadata for picocli 4.4.0+ missing from Maven Central. Thanks to Frank Pavageau for reporting this. #1150 Bugfix: Fix terminal width detection on macOS. Thanks to David Phillips for the pull request. #1142 DOC: Update Kotlin GraalVM native image example - Update native image gradle plugin. Now supports jdk 11. Thanks to OndrejMalek for the pull request. #1153 DOC: Fix documentation leading code quote. Thanks to sabrina at exchange.culturesky.com for raising this. #1147 DOC: Add documentation on how to do custom parameter validation. Thanks to Loren Keagle for raising this.   Deprecations No features were deprecated in this release.  Potential breaking changes This release has no breaking changes.    Changelog Sourced from picocli's changelog.   Picocli 4.5.1 The picocli community is pleased to announce picocli 4.5.1. This release contains bug fixes and enhancements. Fixed bug in the picocli-codegen annotation processor that resulted in errors in native images that used ManPageGenerator as subcommand. Suppress generation of Gradle Module Metadata, to fix Gradle build failures for projects using picocli 4.4.0 or 4.5.0. Fixed terminal width detection on macOS. The user manual now has a new section on Validation. Various other documentation improvements. This is the seventy-third public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy Fixed issues Deprecations Potential breaking changes   New and Noteworthy  Fixed issues  #1151 Bugfix: ManPageGenerator as subcommand with native-image throws exception. Thanks to Sebastian Hoß for raising this. #1152 Bugfix: Gradle build fail when using picocli 4.4.0 or 4.5.0: Gradle Module Metadata for picocli 4.4.0+ missing from Maven Central. Thanks to Frank Pavageau for reporting this. #1150 Bugfix: Fix terminal width detection on macOS. Thanks to David Phillips for the pull request. #1142 DOC: Update Kotlin GraalVM native image example - Update native image gradle plugin. Now supports jdk 11. Thanks to OndrejMalek for the pull request. #1153 DOC: Fix documentation leading code quote. Thanks to sabrina at exchange.culturesky.com for raising this. #1147 DOC: Add documentation on how to do custom parameter validation. Thanks to Loren Keagle for raising this.   Deprecations No features were deprecated in this release.  Potential breaking changes This release has no breaking changes.    Commits  e27cee6 Release picocli version 4.5.1 (revert javadoc style) d5ed13e Release picocli version 4.5.1 d556672 #1147 Added section on Validation to the user manual eaf47f9 Update RELEASE-NOTES.md for 4.5.1 368e7c2 #1151 Fix broken test on Java9+ b210f74 DOC add programmatic API example c6e19b4 #1151 Fix reflect-config generator to include options from compiled sources 5f35c3b #1152 update RELEASE-NOTES.md for Gradle build fail missing Module Metadata 399e92f #1150 Update RELEASE-NOTES.md for macOS terminal width detection fix 53eda39 #1142 Update RELEASE-NOTES.md for updated Kotlin GraalVM native image example Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.5.0&new-version=4.5.1)](https://dependabot.com/compatibility-score/?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.5.0&new-version=4.5.1)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-08-26T05:53:27Z","2020-08-26T13:39:29Z"
"","8594","dependency: bump picocli from 4.4.0 to 4.5.0","Bumps [picocli](https://github.com/remkop/picocli) from 4.4.0 to 4.5.0.  Release notes Sourced from picocli's releases.  Picocli 4.5.0  Picocli 4.5.0 The picocli community is pleased to announce picocli 4.5.0. This release contains bug fixes and enhancements. The ColorScheme class now has new methods stackTraceText and richStackTraceString, which can be convenient when creating custom error handlers with colors. Various bugfixes in the picocli-codegen annotation processor. The user manual now has anchor links before all section titles. This is the seventy-second public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy Fixed issues Deprecations Potential breaking changes   New and Noteworthy  Fixed issues  #1129 API: Add methods ColorScheme::stackTraceText(Throwable) and ColorScheme::richStackTraceString(Throwable). #1124 Enhancement: automatically generate a better summary in the AutoComplete.GenerateCompletion generated man page. #1126 Enhancement: Make picocli trace levels case-insensitive. #1128 Enhancement: ParameterException caused by TypeConversionException now have their cause exception set. #1137 Bugfix: The picocli-codegen annotation processor causes the build to fail with a ClassCastException when an option has completionCandidates defined. #1134 Bugfix: The picocli-codegen annotation processor should allow @Spec-annotated field in classes implementing IVersionProvider. #1138 Bugfix: The picocli-codegen annotation processor no longer gives FATAL ERROR: picocli.CommandLine$InitializationException: ArgGroup has no options or positional parameters, and no subgroups during incremental compilation in Intelli/J IDEA. #1127 DOC: Custom ShortErrorMessageHandler manual example should use bold red for error message. #1130 DOC: Clarify how to run picocli-based applications. #1131 DOC: Add anchor links before section titles in user manual.   Deprecations No features were deprecated in this release.  Potential breaking changes This release has no breaking changes.    Changelog Sourced from picocli's changelog.   Picocli 4.5.0 The picocli community is pleased to announce picocli 4.5.0. This release contains bug fixes and enhancements. The ColorScheme class now has new methods stackTraceText and richStackTraceString, which can be convenient when creating custom error handlers with colors. Various bugfixes in the picocli-codegen annotation processor. The user manual now has anchor links before all section titles. This is the seventy-second public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy Fixed issues Deprecations Potential breaking changes   New and Noteworthy  Fixed issues  #1129 API: Add methods ColorScheme::stackTraceText(Throwable) and ColorScheme::richStackTraceString(Throwable). #1124 Enhancement: automatically generate a better summary in the AutoComplete.GenerateCompletion generated man page. #1126 Enhancement: Make picocli trace levels case-insensitive. #1128 Enhancement: ParameterException caused by TypeConversionException now have their cause exception set. #1137 Bugfix: The picocli-codegen annotation processor causes the build to fail with a ClassCastException when an option has completionCandidates defined. #1134 Bugfix: The picocli-codegen annotation processor should allow @Spec-annotated field in classes implementing IVersionProvider. #1138 Bugfix: The picocli-codegen annotation processor no longer gives FATAL ERROR: picocli.CommandLine$InitializationException: ArgGroup has no options or positional parameters, and no subgroups during incremental compilation in Intelli/J IDEA. #1127 DOC: Custom ShortErrorMessageHandler manual example should use bold red for error message. #1130 DOC: Clarify how to run picocli-based applications. #1131 DOC: Add anchor links before section titles in user manual.   Deprecations No features were deprecated in this release.  Potential breaking changes This release has no breaking changes.    Commits  8e17976 Release picocli version 4.5.0 7eec117 #1129 update release notes and user manual a4fa239 #1138 process the class of @ArgGroup-annotated field for annotations 3c7a243 #1138 try to enable logging in annotation processor 63065d7 #1134 Bugfix: annotation processor should allow @Spec-annotated field in ... 6731959 #1137 Fix ClassCastException in annotation processor when an option has com... 40e2a52 #1127 similarly improve the IExecutionExceptionHandler manual example 36fce09 #1131 DOC: Add anchor links before section titles in user manual c5a5310 #639 update manual section Variable Arity Options and Unknown Options bccad0d #1130 use colon as path separator instead of semicolon Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.4.0&new-version=4.5.0)](https://dependabot.com/compatibility-score/?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.4.0&new-version=4.5.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-08-03T07:09:50Z","2020-08-03T09:36:39Z"
"","8405","dependency: bump picocli from 4.3.2 to 4.4.0","Bumps [picocli](https://github.com/remkop/picocli) from 4.3.2 to 4.4.0.  Release notes Sourced from picocli's releases.  Picocli 4.4.0  Picocli 4.4.0 The picocli community is pleased to announce picocli 4.4.0. This release contains over 45 bugfixes, enhancements, and new features. A major new feature in this release is support for abbreviated options and subcommands. When abbreviations are enabled, users can specify the initial letter(s) of the first ""component"" and optionally of one or more subsequent components of an option or subcommand name. ""Components"" are parts of a name, separated by - dash characters or by upper/lower case. So for example, both --CamelCase and --kebab-case have two components. For details see the New and Noteworthy section below. Another important change are parser fixes and improvements: the parser will no longer assign values that match an option name to options that take a parameter, unless the value is in quotes. Also, values that resemble, but not exactly match, option names are now treated more consistently and parser behaviour for such values is configurable. Also worth hightlighting: from this release, the ManPageGenerator tool can be used as a subcommand in your application. There are many more improvements in this release: it is now easier to customize the usage help message, there are JANSI fixes, and other bugfixes and enhancements. See the Fixed Issues list for details. This is the seventy-first public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy  Abbreviated Options and Subcommands Parser Fixes and Improvements ManPageGenerator as Subcommand in Your App   Fixed issues Deprecations Potential breaking changes   New and Noteworthy  Abbreviated Options and Subcommands Since picocli 4.4, the parser can recognize abbreviated options and subcommands. This needs to be enabled explicitly with CommandLine::setAbbreviatedOptionsAllowed and CommandLine::setAbbreviatedSubcommandsAllowed. Recognized Abbreviations When abbreviations are enabled, users can specify the initial letter(s) of the first component and optionally of one or more subsequent components of an option or subcommand name. ""Components"" are separated by - dash characters or by case, so for example, both --CamelCase and --kebab-case have two components. NOTE: When case sensitivity is disabled, only the - dash character can be used to separate components. Examples of valid abbreviations: Option or Subcommand | Recognized Abbreviations -------------------- | ------------------------ --veryLongCamelCase  | --very, --vLCC  --vCase --super-long-option  | --sup, --sLO, --s-l-o, --s-lon, --s-opt, --sOpt some-long-command    | so, sLC, s-l-c, soLoCo, someCom      Changelog Sourced from picocli's changelog.   Picocli 4.4.0 The picocli community is pleased to announce picocli 4.4.0. This release contains over 45 bugfixes, enhancements, and new features. A major new feature in this release is support for abbreviated options and subcommands. When abbreviations are enabled, users can specify the initial letter(s) of the first ""component"" and optionally of one or more subsequent components of an option or subcommand name. ""Components"" are parts of a name, separated by - dash characters or by upper/lower case. So for example, both --CamelCase and --kebab-case have two components. For details see the New and Noteworthy section below. Another important change are parser fixes and improvements: the parser will no longer assign values that match an option name to options that take a parameter, unless the value is in quotes. Also, values that resemble, but not exactly match, option names are now treated more consistently and parser behaviour for such values is configurable. Also worth hightlighting: from this release, the ManPageGenerator tool can be used as a subcommand in your application. This release has many more improvements for customizing the usage help message, JANSI fixes, and other bugfixes and improvements. See the Fixed Issues list for details. This is the seventy-first public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy  Abbreviated Options and Subcommands Parser Fixes and Improvements ManPageGenerator as Subcommand in Your App   Fixed issues Deprecations Potential breaking changes   New and Noteworthy  Abbreviated Options and Subcommands Since picocli 4.4, the parser can recognize abbreviated options and subcommands. This needs to be enabled explicitly with CommandLine::setAbbreviatedOptionsAllowed and CommandLine::setAbbreviatedSubcommandsAllowed. Recognized Abbreviations When abbreviations are enabled, users can specify the initial letter(s) of the first component and optionally of one or more subsequent components of an option or subcommand name. ""Components"" are separated by - dash characters or by case, so for example, both --CamelCase and --kebab-case have two components. NOTE: When case sensitivity is disabled, only the - dash character can be used to separate components. Examples of valid abbreviations: Option or Subcommand | Recognized Abbreviations -------------------- | ------------------------ --veryLongCamelCase  | --very, --vLCC  --vCase --super-long-option  | --sup, --sLO, --s-l-o, --s-lon, --s-opt, --sOpt some-long-command    | so, sLC, s-l-c, soLoCo, someCom      Commits  9f1de2f Release picocli version 4.4.0 c4b6b7e #1109 TEST use $VERSION variable 031a88a DOC update release notes 9758f5f DOC fix javadoc links e13e510 #1098#1117 Update RELEASE-NOTES for improved JLine 3 documentation 28a2de8 #1098 DOC: move old JLine 3 example to wiki 59b4299 #1076 Bugfix: Don't generate Autocomplete for hidden commands ef78707 #1083 @Command-annotated methods no longer need enclosing class to have `... 3fbc36b #1121 Link to alternative in @deprecated Javadoc tag for Help::addSubcommand 20da7e4 #1120 Clean up compiler warnings Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.3.2&new-version=4.4.0)](https://dependabot.com/compatibility-score/?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.3.2&new-version=4.4.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-07-06T06:56:02Z","2020-07-06T22:30:00Z"
"","8243","dependency: bump picocli from 4.3.1 to 4.3.2","Bumps [picocli](https://github.com/remkop/picocli) from 4.3.1 to 4.3.2.  Release notes Sourced from picocli's releases.  Picocli 4.3.2  Picocli 4.3.2 The picocli community is pleased to announce picocli 4.3.2. This release fixes a bug where the stack trace of an exception in the business logic would omit nested cause exceptions. This is the seventieth public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy Fixed issues Deprecations Potential breaking changes   New and Noteworthy  Fixed issues #1048#1049 Bugfix: Cause exception not printed by default execution exception handler. Thanks to Neko Null for the pull request.  Deprecations No features were deprecated in this release.  Potential breaking changes This release has no breaking changes.    Changelog Sourced from picocli's changelog.   Picocli 4.3.2 The picocli community is pleased to announce picocli 4.3.2. This release fixes a bug where the stack trace of an exception in the business logic would omit nested cause exceptions. This is the seventieth public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy Fixed issues Deprecations Potential breaking changes   New and Noteworthy  Fixed issues #1048#1049 Bugfix: Cause exception not printed by default execution exception handler. Thanks to Neko Null for the pull request.  Deprecations No features were deprecated in this release.  Potential breaking changes This release has no breaking changes.    Commits  434394f Release picocli version 4.3.2 18187a1 #1048#1049 update release notes a35031e #1048#1049 minor improvements 9b724a9 add new tests 783493b omit unused initializer 3265261 update write according to request e42995b Revert ""fix failing tests"" 49710c3 fix failing tests 14819af removed unused line bad6791 add test for #1048 Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.3.1&new-version=4.3.2)](https://dependabot.com/compatibility-score/?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.3.1&new-version=4.3.2)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-05-18T07:04:06Z","2020-06-01T05:39:26Z"
"","8238","dependency: bump picocli from 4.2.0 to 4.3.1","Bumps [picocli](https://github.com/remkop/picocli) from 4.2.0 to 4.3.1.  Release notes Sourced from picocli's releases.  Picocli 4.3.1  Picocli 4.3.1 The picocli community is slightly embarrassed to announce picocli 4.3.1. :-) This release fixes some critical bugs:  an IllegalArgumentException: wrong number of arguments was thrown when the @Option(scope = INHERIT) feature is used in a command that has subcommands defined in @Command-annotated methods a NullPointerException was thrown in DefaultParamLabelRenderer.renderParameterLabel for programmatically built models that have a non-null split regex and do not have a splitSynopsisLabel removed a call to the String.isEmpty method, which prevented picocli from running on Java 5: this method was introduced in Java 6  See Fixed issues for the full list of changes. This is the sixty-nineth public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy Fixed issues Deprecations Potential breaking changes   New and Noteworthy  Fixed issues #1042 Bugfix: ""wrong number of arguments"" exception when using inherited options with @Command-annotated methods. Thanks to Garret Wilson for raising this. #1043 Bugfix: NullPointerException thrown in DefaultParamLabelRenderer.renderParameterLabel for programmatically built models that have a non-null split regex and do not have a splitSynopsisLabel. #1044 Bugfix: only display splitSynopsisLabel in usage help message if the option has a split regex. Thanks to Andreas Deininger for raising this. #1045 Bugfix: replace use of Java 6 API String.isEmpty with picocli-internal Java 5 equivalent. #1046 DOC: mention picocli's programmatic API and link to the programmatic API documentation from the user manual.  Deprecations No features were deprecated in this release.  Potential breaking changes This release has no breaking changes. Picocli 4.3.0  Picocli 4.3.0 The picocli community is pleased to announce picocli 4.3.0. This is a fairly big release with 70 tickets closed, and over 50 bugfixes and enhancements. Many thanks to the picocli community who contributed 21 pull requests! A major theme of this release is sharing options between commands:  New feature: ""inherited"" options. Options defined with scope = ScopeType.INHERIT are shared with all subcommands (and sub-subcommands, to any level of depth). Applications can define an inherited option on the top-level command, in one place, to allow end users to specify this option anywhere: not only on the top-level command, but also on any of the subcommands and nested sub-subcommands. More powerful mixins. Mixin classes can declare a @Spec(MIXEE)-annotated field, and picocli will inject the CommandSpec of the command receiving this mixin (the ""mixee"") into this field. This is useful for mixins containing shared logic, in addition to shared options and parameters.  Another major theme is improved support for positional parameters:  Automatic indexes for positional parameters. Single-value positional parameters without an explicit index = ""..."" attribute are now automatically assigned an index based on the other positional parameters in the command. One use case is mixins with positional parameters. Repeatable ArgGroups can now define positional parameters.   ... (truncated)    Changelog Sourced from picocli's changelog.   Picocli 4.3.1 The picocli community is slightly embarrassed to announce picocli 4.3.1. :-) This release fixes some critical bugs:  an IllegalArgumentException: wrong number of arguments was thrown when the @Option(scope = INHERIT) feature is used in a command that has subcommands defined in @Command-annotated methods a NullPointerException was thrown in DefaultParamLabelRenderer.renderParameterLabel for programmatically built models that have a non-null split regex and do not have a splitSynopsisLabel removed call to a String method introduced in Java 6, which prevented picocli from running on Java 5  See Fixed issues for the full list of changes. This is the sixty-nineth public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy Fixed issues Deprecations Potential breaking changes   New and Noteworthy  Fixed issues #1042 Bugfix: ""wrong number of arguments"" exception when using inherited options with @Command-annotated methods. Thanks to Garret Wilson for raising this. #1043 Bugfix: NullPointerException thrown in DefaultParamLabelRenderer.renderParameterLabel for programmatically built models that have a non-null split regex and do not have a splitSynopsisLabel. #1044 Bugfix: only display splitSynopsisLabel in usage help message if the option has a split regex. Thanks to Andreas Deininger for raising this. #1045 Bugfix: replace use of Java 6 API String.isEmpty with picocli-internal Java 5 equivalent. #1046 DOC: mention picocli's programmatic API and link to the programmatic API documentation from the user manual.  Deprecations No features were deprecated in this release.  Potential breaking changes This release has no breaking changes.  Picocli 4.3.0 The picocli community is pleased to announce picocli 4.3.0. This is a fairly big release with 70 tickets closed, and over 50 bugfixes and enhancements. Many thanks to the picocli community who contributed 21 pull requests! A major theme of this release is sharing options between commands:  New feature: ""inherited"" options. Options defined with scope = ScopeType.INHERIT are shared with all subcommands (and sub-subcommands, to any level of depth). Applications can define an inherited option on the top-level command, in one place, to allow end users to specify this option anywhere: not only on the top-level command, but also on any of the subcommands and nested sub-subcommands. More powerful mixins. Mixin classes can declare a @Spec(MIXEE)-annotated field, and picocli will inject the CommandSpec of the command receiving this mixin (the ""mixee"") into this field. This is useful for mixins containing shared logic, in addition to shared options and parameters.  Another major theme is improved support for positional parameters:  Automatic indexes for positional parameters. Single-value positional parameters without an explicit index = ""..."" attribute are now automatically assigned an index based on the other positional parameters in the command. One use case is mixins with positional parameters. Repeatable ArgGroups can now define positional parameters.   ... (truncated)    Commits  629b66c Release picocli version 4.3.1 0e17102 #1046 DOC: mention picocli's programmatic API and link to the programmatic ... da8455b #1045 update release notes 042c56b TEST moved parameterized test into separate class 52d273c TEST use only TimeUnit enum values supported in Java 5 f588912 TEST use variable to get TimeUnit enum values at runtime 78d405f TEST more informative output when test fails d176753 #1044 Bugfix: only display splitSynopsisLabel in usage help message if th... 45a3cdc #1043 Bugfix: NullPointerException thrown in `DefaultParamLabelRenderer.ren... f9d1dc7 #1042 Bugfix: ""wrong number of arguments"" exception when using inherited op... Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.2.0&new-version=4.3.1)](https://dependabot.com/compatibility-score/?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.2.0&new-version=4.3.1)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-05-15T06:47:07Z","2020-05-16T04:30:11Z"
"","8233","dependency: bump picocli from 4.2.0 to 4.3.0","Bumps [picocli](https://github.com/remkop/picocli) from 4.2.0 to 4.3.0.  Release notes Sourced from picocli's releases.  Picocli 4.3.0  Picocli 4.3.0 The picocli community is pleased to announce picocli 4.3.0. This is a fairly big release with 70 tickets closed, and over 50 bugfixes and enhancements. Many thanks to the picocli community who contributed 21 pull requests! A major theme of this release is sharing options between commands:  New feature: ""inherited"" options. Options defined with scope = ScopeType.INHERIT are shared with all subcommands (and sub-subcommands, to any level of depth). Applications can define an inherited option on the top-level command, in one place, to allow end users to specify this option anywhere: not only on the top-level command, but also on any of the subcommands and nested sub-subcommands. More powerful mixins. Mixin classes can declare a @Spec(MIXEE)-annotated field, and picocli will inject the CommandSpec of the command receiving this mixin (the ""mixee"") into this field. This is useful for mixins containing shared logic, in addition to shared options and parameters.  Another major theme is improved support for positional parameters:  Automatic indexes for positional parameters. Single-value positional parameters without an explicit index = ""..."" attribute are now automatically assigned an index based on the other positional parameters in the command. One use case is mixins with positional parameters. Repeatable ArgGroups can now define positional parameters.  Other improvements:  The parser now supports case-insensitive mode for options and subcommands. Error handlers now use ANSI colors and styles. The default styles are bold red for the error message, and italic for stack traces. Applications can customize with the new Help.ColorScheme methods errors and stackTraces. The usage help message can now show an entry for -- in the options list with the @Command(showEndOfOptionsDelimiterInUsageHelp = true) annotation. Easily make subcommands mandatory by making the top-level command a class that does not implement Runnable or Callable.  This is the sixty-eighth public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy  Inherited Options Case-insensitive mode Automatic Indexes for Positional Parameters Repeatable ArgGroups with Positional Parameters @Spec(MIXEE) Annotation Showing -- End of Options in usage help   Fixed issues Deprecations Potential breaking changes   New and Noteworthy  Inherited Options This release adds support for ""inherited"" options. Options defined with scope = ScopeType.INHERIT are shared with all subcommands (and sub-subcommands, to any level of depth). Applications can define an inherited option on the top-level command, in one place, to allow end users to specify this option anywhere: not only on the top-level command, but also on any of the subcommands and nested sub-subcommands. Below is an example where an inherited option is used to configure logging. @Command(name = ""app"", subcommands = Sub.class) class App implements Runnable {     private static Logger logger = LogManager.getLogger(App.class); @Option(names = &quot;-x&quot;, scope = ScopeType.LOCAL) // option is not shared: this is the default int x;  </tr></table> ... (truncated)     Changelog Sourced from picocli's changelog.   Picocli 4.3.0 The picocli community is pleased to announce picocli 4.3.0. This is a fairly big release with 70 tickets closed, and over 50 bugfixes and enhancements. Many thanks to the picocli community who contributed 21 pull requests! A major theme of this release is sharing options between commands:  New feature: ""inherited"" options. Options defined with scope = ScopeType.INHERIT are shared with all subcommands (and sub-subcommands, to any level of depth). Applications can define an inherited option on the top-level command, in one place, to allow end users to specify this option anywhere: not only on the top-level command, but also on any of the subcommands and nested sub-subcommands. More powerful mixins. Mixin classes can declare a @Spec(MIXEE)-annotated field, and picocli will inject the CommandSpec of the command receiving this mixin (the ""mixee"") into this field. This is useful for mixins containing shared logic, in addition to shared options and parameters.  Another major theme is improved support for positional parameters:  Automatic indexes for positional parameters. Single-value positional parameters without an explicit index = ""..."" attribute are now automatically assigned an index based on the other positional parameters in the command. One use case is mixins with positional parameters. Repeatable ArgGroups can now define positional parameters.  Other improvements:  The parser now supports case-insensitive mode for options and subcommands. Error handlers now use ANSI colors and styles. The default styles are bold red for the error message, and italic for stack traces. Applications can customize with the new Help.ColorScheme methods errors and stackTraces. The usage help message can now show an entry for -- in the options list with the @Command(showEndOfOptionsDelimiterInUsageHelp = true) annotation. Easily make subcommands mandatory by making the top-level command a class that does not implement Runnable or Callable.  This is the sixty-eighth public release. Picocli follows semantic versioning.  Table of Contents  New and noteworthy  Inherited Options Case-insensitive mode Automatic Indexes for Positional Parameters Repeatable ArgGroups with Positional Parameters @Spec(MIXEE) Annotation Showing -- End of Options in usage help   Fixed issues Deprecations Potential breaking changes   New and Noteworthy  Inherited Options This release adds support for ""inherited"" options. Options defined with scope = ScopeType.INHERIT are shared with all subcommands (and sub-subcommands, to any level of depth). Applications can define an inherited option on the top-level command, in one place, to allow end users to specify this option anywhere: not only on the top-level command, but also on any of the subcommands and nested sub-subcommands. Below is an example where an inherited option is used to configure logging. @Command(name = ""app"", subcommands = Sub.class) class App implements Runnable {     private static Logger logger = LogManager.getLogger(App.class); @Option(names = &quot;-x&quot;, scope = ScopeType.LOCAL) // option is not shared: this is the default int x;  </tr></table> ... (truncated)     Commits  3bc1a90 Release picocli version 4.3 5fd7460 DOC update release notes 7445dbf #1027 DOC simplified example 954547c #1027 DOC update user manual 9563205 #1027 update example 265cc65 #1027 added test: nested groups with positionals not supported 624927d #1038 added test 4154f51 #1027 more robust implementation of repeatable ArgGroups with positional pa... 2f7e36a #1040 update RELEASE-NOTES.md bb892e9 Revert Map iteration and String concatenation changes Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.2.0&new-version=4.3.0)](https://dependabot.com/compatibility-score/?dependency-name=info.picocli:picocli&package-manager=maven&previous-version=4.2.0&new-version=4.3.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-05-13T06:51:03Z","2020-05-15T06:47:20Z"
"","8140","dependency: bump nondex-maven-plugin from 1.1.1 to 1.1.2","Bumps [nondex-maven-plugin](https://github.com/TestingResearchIllinois/NonDex) from 1.1.1 to 1.1.2.  Commits  d0cd1e8 Updating version in preparation for release dbc8418 Removing lengths list because it is not actually used and also can cause conc... ea79dbe Updating checkstyle version for security purposes, and updating configuration... 96169d0 Revert ""Introducing option to reset Surefire configuration as to only reset d... a447744 Introducing option to reset Surefire configuration as to only reset during de... e7fce41 Add test child if does not exist before configuring 6c0deca Reset the surefire configuration between runs 712cf3b Updating checkstyle due to security vulnerabilities, and updating configurati... 88d710b Fix the out-of-date help text for mode of debug in the maven plugin (#122) 38b6993 Fixing Travis build (#124) Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=edu.illinois:nondex-maven-plugin&package-manager=maven&previous-version=1.1.1&new-version=1.1.2)](https://dependabot.com/compatibility-score/?dependency-name=edu.illinois:nondex-maven-plugin&package-manager=maven&previous-version=1.1.1&new-version=1.1.2)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-04-20T07:10:32Z","2020-11-20T15:23:26Z"
"","8339","dependency: bump maven-site-plugin from 3.8.2 to 3.9.1","Bumps [maven-site-plugin](https://github.com/apache/maven-site-plugin) from 3.8.2 to 3.9.1.  Commits  854e6a0 [maven-release-plugin] prepare release maven-site-plugin-3.9.1 ec954c8 [MSITE-856] - NullPointer on org.apache.maven.plugins.site.render.SiteMap.rel... d4160ab fix javadoc issues with JDK 8 963cbcb remove unused plugins da10917 remove enforce bytecode now inherited from maven-parent e033328 [MSITE-757] remove shading not used any more 5179a4d [MSITE-863] fix Maven < 3.6.1 compatibility issue 028119f Github Actions 77c7cff [MSITE-863] upgrade m-reporting-exec to show that MSHARED-921 is fixed 36b11f4 [MSITE-863] revert ae9c132, not caused by Java 7 but Maven 3.6.0- Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-site-plugin&package-manager=maven&previous-version=3.8.2&new-version=3.9.1)](https://dependabot.com/compatibility-score/?dependency-name=org.apache.maven.plugins:maven-site-plugin&package-manager=maven&previous-version=3.8.2&new-version=3.9.1)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-25T06:48:35Z","2020-06-29T05:17:45Z"
"","8300","dependency: bump maven-shade-plugin from 3.2.3 to 3.2.4","Bumps [maven-shade-plugin](https://github.com/apache/maven-shade-plugin) from 3.2.3 to 3.2.4.  Commits  768092f [maven-release-plugin] prepare release maven-shade-plugin-3.2.4 4f83ae6 [MSHADE-363] IT to check new Reproducible transformer with old plugin 229f4d7 [MSHADE-363] add ReproducibleResourceTransformer to keep compatibility 51bbf72 [MSHADE-363] add IT showing broken compatibility 3691f60 Merge pull request #48 from apache/MSHADE-364 34736cc [MSHADE-364] drop duplicate resource warning when the resource is handled by ... 830d71a [MSHADE-365] put Properties transformers in separate table ecaa5ee README improvement 9a5b0f8 replace deprecated method (#46) c02f7d6 [MSHADE-360] avoid PrintWriter (#44) Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-shade-plugin&package-manager=maven&previous-version=3.2.3&new-version=3.2.4)](https://dependabot.com/compatibility-score/?dependency-name=org.apache.maven.plugins:maven-shade-plugin&package-manager=maven&previous-version=3.2.3&new-version=3.2.4)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-03T06:58:00Z","2020-06-03T13:35:25Z"
"","8097","dependency: bump maven-shade-plugin from 3.2.2 to 3.2.3","Bumps [maven-shade-plugin](https://github.com/apache/maven-shade-plugin) from 3.2.2 to 3.2.3.  Commits  6e9a386 [maven-release-plugin] prepare release maven-shade-plugin-3.2.3 0d7bfb5 [MSHADE-352] make timestamp of transformed resources reproducible 0e729d4 [MSHADE-357] - Upgrade asm to 8.0 1579fe2 [MSHADE-355] Upgrade JDependency to 2.4.0 (uses ASM 8.0) 02671af [maven-release-plugin] prepare for next development iteration See full diff in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-shade-plugin&package-manager=maven&previous-version=3.2.2&new-version=3.2.3)](https://dependabot.com/compatibility-score/?dependency-name=org.apache.maven.plugins:maven-shade-plugin&package-manager=maven&previous-version=3.2.2&new-version=3.2.3)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-04-14T06:46:00Z","2020-04-14T16:05:19Z"
"","8671","dependency: bump maven-resources-plugin from 3.1.0 to 3.2.0","Bumps [maven-resources-plugin](https://github.com/apache/maven-resources-plugin) from 3.1.0 to 3.2.0.  Commits  61096d9 [maven-release-plugin] prepare release maven-resources-plugin-3.2.0 fa28224 Rollback to make a new release attempt. 22120e9 [maven-release-plugin] prepare for next development iteration 6bf362e [maven-release-plugin] prepare release maven-resources-plugin-3.2.0 0f26239 [MRESOURCES-263] Update to maven-filtering 3.2.0 6624e45 future proof method that is marked for incompatible change (#6) b974fb2 try with resources (#5) b42cd5a [MRESOURCES-232] Resource copy filtering should use different encoding for so... 4b46898 [MRESOURCES-257] property from list element in pom model a2fb8d4 Bump version to a new minor version, since we have added functionality. Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-resources-plugin&package-manager=maven&previous-version=3.1.0&new-version=3.2.0)](https://dependabot.com/compatibility-score/?dependency-name=org.apache.maven.plugins:maven-resources-plugin&package-manager=maven&previous-version=3.1.0&new-version=3.2.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-08-12T06:43:44Z","2020-08-12T13:10:46Z"
"","8799","dependency: bump maven-project-info-reports-plugin from 3.1.0 to 3.1.1","Bumps [maven-project-info-reports-plugin](https://github.com/apache/maven-project-info-reports-plugin) from 3.1.0 to 3.1.1.  Commits  269bb2a [maven-release-plugin] prepare release maven-project-info-reports-plugin-3.1.1 0a50ac6 Add missing import 8abd4d0 [MPIR-398] Non-sense links created for mailing lists when mailto is empty 392aa9c update ASF CI url d8e1e15 update ASF CI url cff719c add Reproducible Builds ok badge 7843b22 [MPIR-394] jenkins-ci.org -> jenkins.io 3e139cd [MPIR-374] No logging of stacktrace in non debug mode 9ed6e57 Update dependencies (#19) 113668f [MPIR-393] Cleanup getArchiveServer Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-project-info-reports-plugin&package-manager=maven&previous-version=3.1.0&new-version=3.1.1)](https://dependabot.com/compatibility-score/?dependency-name=org.apache.maven.plugins:maven-project-info-reports-plugin&package-manager=maven&previous-version=3.1.0&new-version=3.1.1)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-07T06:00:16Z","2020-09-07T09:58:55Z"
"","8302","dependency: bump maven-project-info-reports-plugin from 3.0.0 to 3.1.0","Bumps [maven-project-info-reports-plugin](https://github.com/apache/maven-project-info-reports-plugin) from 3.0.0 to 3.1.0.  Commits  7b3e994 [maven-release-plugin] prepare release maven-project-info-reports-plugin-3.1.0 25ee2e7 fixed typo 1dee6fd README improvement 2211965 added README 2670a2e fixed old file names ee5a2bd fixed broken links (MPIR 3) d276fbf added README f28d6bf [MPIR-387] remove (unused) non-reproducible jar signing 7e188e9 Bump maven-jarsigner-plugin from 1.4 to 3.0.0 310e3aa update a couple of test dependencies Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-project-info-reports-plugin&package-manager=maven&previous-version=3.0.0&new-version=3.1.0)](https://dependabot.com/compatibility-score/?dependency-name=org.apache.maven.plugins:maven-project-info-reports-plugin&package-manager=maven&previous-version=3.0.0&new-version=3.1.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-03T06:58:57Z","2020-06-03T13:35:04Z"
"","8216","dependency: bump maven-assembly-plugin from 3.2.0 to 3.3.0","Bumps [maven-assembly-plugin](https://github.com/apache/maven-assembly-plugin) from 3.2.0 to 3.3.0.  Commits  5a48193 [maven-release-plugin] prepare release maven-assembly-plugin-3.3.0 1dc87ea Fix Javadoc error 6e67eeb [MASSEMBLY-765] add property groupIdPath 919d189 [MASSEMBLY-765] add property groupIdPath cfe0355 Apply try-with-resources 0a1aaad [MASSEMBLY-927] Support for properties mapping on executions of maven-assembl... 8054f50 [MASSEMBLY-879] useDefaultExcludes has no effect in dependencySet/unpack 52a84fe [MASSEMBLYE-849] Add nonFilteredFileExtensions to avoid filtering of binary f... 2c44462 Replace EasyMock with Mockito 3a58218 [MASSEMBLY-932] resource filtering skipped for resources in the current project Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-assembly-plugin&package-manager=maven&previous-version=3.2.0&new-version=3.3.0)](https://dependabot.com/compatibility-score/?dependency-name=org.apache.maven.plugins:maven-assembly-plugin&package-manager=maven&previous-version=3.2.0&new-version=3.3.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-05-01T06:47:24Z","2020-05-01T12:54:35Z"
"","8107","dependency: bump maven-antrun-plugin from 1.8 to 3.0.0","Bumps [maven-antrun-plugin](https://github.com/apache/maven-antrun-plugin) from 1.8 to 3.0.0.  Commits  c37168c [maven-release-plugin] prepare release maven-antrun-plugin-3.0.0 d5d1dc6 fixed typo 1745675 added ASF Jira badge fd52fce fixed link to mailing lists 3c9012e replace deprecated method (#3) 86793e6 [MNGSITE-393] assume Maven 3.0 or later (#5) 8db3afd docs: https c7e1096 [MANTRUN-219] Bump xmlunit from 2.6.3 to 2.6.4 abed7fb [MANTRUN-218] Bump junit from 4.12 to 4.13 f5f0d0b add checkstyle to .gitignore Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-antrun-plugin&package-manager=maven&previous-version=1.8&new-version=3.0.0)](https://dependabot.com/compatibility-score/?dependency-name=org.apache.maven.plugins:maven-antrun-plugin&package-manager=maven&previous-version=1.8&new-version=3.0.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-04-16T06:48:34Z","2020-04-17T01:17:43Z"
"","8882","dependency: bump junit-pioneer from 0.9.2 to 1.0.0","Bumps [junit-pioneer](https://github.com/junit-pioneer/junit-pioneer) from 0.9.2 to 1.0.0.  Release notes Sourced from junit-pioneer's releases.  v1.0.0 Release notes were automatically generated by Shipkit 1.0.0  2020-10-06 - 7 commits by 4 authors - published to  Commits: Matthias Bünger (3), Nicolai Parlog (2), Daniel Kraus (1), Mihály Verhás (1) Update version to 1.0.0 (#352 / #353) [(#353)](junit-pioneer/junit-pioneer#353) Update version.properties for major release 1.0.0 [(#352)](junit-pioneer/junit-pioneer#352) Add note in documentation to use JUnit's BOM (#343 / #351) [(#351)](junit-pioneer/junit-pioneer#351) Clean up module build [(#350)](junit-pioneer/junit-pioneer#350) NoClassDefError with JUnit Jupiter 5.7.0 [(#343)](junit-pioneer/junit-pioneer#343) Update contribution guidelines to non-zero major versions [(#333)](junit-pioneer/junit-pioneer#333) Road towards better @TempDir [(#327)](junit-pioneer/junit-pioneer#327) CartesianProductTestExtension from JUnit examples [(#321)](junit-pioneer/junit-pioneer#321) Limit docs code snippets line length to max 60 chars (#317 / #318) [(#318)](junit-pioneer/junit-pioneer#318) Limit line length to max 60 chars in site documentation code snippets [(#317)](junit-pioneer/junit-pioneer#317) Where's the module-info.java file? [(#314)](junit-pioneer/junit-pioneer#314) Evaluate and possible improve TempDir [(#277)](junit-pioneer/junit-pioneer#277) Update docs before releasing version 1.0.0 [(#225)](junit-pioneer/junit-pioneer#225) @CartesianProductTest extension [(#68)](junit-pioneer/junit-pioneer#68)     Changelog Sourced from junit-pioneer's changelog.  1.0.0  2020-10-06 - 7 commits by 4 authors - published to  Commits: Matthias Bünger (3), Nicolai Parlog (2), Daniel Kraus (1), Mihály Verhás (1) Update version to 1.0.0 (#352 / #353) [(#353)](junit-pioneer/junit-pioneer#353) Update version.properties for major release 1.0.0 [(#352)](junit-pioneer/junit-pioneer#352) Add note in documentation to use JUnit's BOM (#343 / #351) [(#351)](junit-pioneer/junit-pioneer#351) Clean up module build [(#350)](junit-pioneer/junit-pioneer#350) NoClassDefError with JUnit Jupiter 5.7.0 [(#343)](junit-pioneer/junit-pioneer#343) Update contribution guidelines to non-zero major versions [(#333)](junit-pioneer/junit-pioneer#333) Road towards better @TempDir [(#327)](junit-pioneer/junit-pioneer#327) CartesianProductTestExtension from JUnit examples [(#321)](junit-pioneer/junit-pioneer#321) Limit docs code snippets line length to max 60 chars (#317 / #318) [(#318)](junit-pioneer/junit-pioneer#318) Limit line length to max 60 chars in site documentation code snippets [(#317)](junit-pioneer/junit-pioneer#317) Where's the module-info.java file? [(#314)](junit-pioneer/junit-pioneer#314) Evaluate and possible improve TempDir [(#277)](junit-pioneer/junit-pioneer#277) Update docs before releasing version 1.0.0 [(#225)](junit-pioneer/junit-pioneer#225) @CartesianProductTest extension [(#68)](junit-pioneer/junit-pioneer#68)     Commits  74623a9 1.0.0 release (previous 0.9.2) + release notes updated [ci skip] 2d95093 Update version to 1.0.0 (#352 / #353) 2764bc7 Update contribution guideline to non-zero major versions (#225 / #333) 9fe8b17 Add note in documentation to use JUnit's BOM (#343 / #351) 9eb8e26 Introduce @CartesianProductText extension (#68 / #321) 7950e65 Clean up module build (#314 / #350) ffc5506 Limit docs code snippets line length to max 60 chars (#317 / #318) 5c47d6c Remove @TempDir extension (#277 / #327) See full diff in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.9.2&new-version=1.0.0)](https://dependabot.com/compatibility-score/?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.9.2&new-version=1.0.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-10-07T05:48:18Z","2020-10-07T13:10:37Z"
"","8862","dependency: bump junit-pioneer from 0.9.1 to 0.9.2","Bumps [junit-pioneer](https://github.com/junit-pioneer/junit-pioneer) from 0.9.1 to 0.9.2.  Release notes Sourced from junit-pioneer's releases.  v0.9.2 Release notes were automatically generated by Shipkit 0.9.2  2020-09-29 - 2 commits by David Walluck (1), Nicolai Parlog (1) - published to  Configure Git to normalize line endings to LF [(#347)](junit-pioneer/junit-pioneer#347) Use junit-bom to set versions of junit dependencies [(#346)](junit-pioneer/junit-pioneer#346) Adding .gitattributes [(#341)](junit-pioneer/junit-pioneer#341)     Changelog Sourced from junit-pioneer's changelog.  0.9.2  2020-09-29 - 2 commits by David Walluck (1), Nicolai Parlog (1) - published to  Configure Git to normalize line endings to LF [(#347)](junit-pioneer/junit-pioneer#347) Use junit-bom to set versions of junit dependencies [(#346)](junit-pioneer/junit-pioneer#346) Adding .gitattributes [(#341)](junit-pioneer/junit-pioneer#341)     Commits  ce5fc53 0.9.2 release (previous 0.9.1) + release notes updated [ci skip] 61f8839 Use junit-bom to set JUnit dependency versions (#343 / #346) 7693f39 Configure Git to normalize line endings to LF (#341 / #347) See full diff in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.9.1&new-version=0.9.2)](https://dependabot.com/compatibility-score/?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.9.1&new-version=0.9.2)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-30T05:50:49Z","2020-10-04T13:50:35Z"
"","8854","dependency: bump junit-pioneer from 0.9.0 to 0.9.1","Bumps [junit-pioneer](https://github.com/junit-pioneer/junit-pioneer) from 0.9.0 to 0.9.1.  Release notes Sourced from junit-pioneer's releases.  v0.9.1 Release notes were automatically generated by Shipkit 0.9.1  2020-09-26 - 12 commits by 6 authors - published to  Commits: Daniel Kraus (4), Matthias Bünger (3), Mihály Verhás (2), hovinen (1), Nicolai Parlog (1), sullis (1) Temporarily disable windows builds (#324 / #342) [(#342)](junit-pioneer/junit-pioneer#342) Add an explanatory comment about the order of operations in setting environment variables on Windows. [(#340)](junit-pioneer/junit-pioneer#340) Re-enable Gradle wrapper cache [(#338)](junit-pioneer/junit-pioneer#338) Add Dependabot v2 config [(#337)](junit-pioneer/junit-pioneer#337) Fixed faulty Namespace creation. [(#332)](junit-pioneer/junit-pioneer#332) Add timeout to Github Actions (#322 / #330) [(#330)](junit-pioneer/junit-pioneer#330) Gradle 6.6.1 [(#328)](junit-pioneer/junit-pioneer#328) Add java module-info (#314 / #326) [(#326)](junit-pioneer/junit-pioneer#326) Add timeout to main build (#322) [(#323)](junit-pioneer/junit-pioneer#323) Provide timeout for Github Actions [(#322)](junit-pioneer/junit-pioneer#322) Clean up GitHub Actions scripts [(#316)](junit-pioneer/junit-pioneer#316) Add dependabot where it's convenient? [(#315)](junit-pioneer/junit-pioneer#315) Where's the module-info.java file? [(#314)](junit-pioneer/junit-pioneer#314) Added variables to ReportEntry [(#294)](junit-pioneer/junit-pioneer#294) Builds brake due caching problems [(#290)](junit-pioneer/junit-pioneer#290) @SetEnvironmentVariable corrupts JDK-internal structures in some cases [(#287)](junit-pioneer/junit-pioneer#287) Correct automatic module name of pioneer [(#251)](junit-pioneer/junit-pioneer#251) Implement @DisabledOnOs [(#9)](junit-pioneer/junit-pioneer#9)     Changelog Sourced from junit-pioneer's changelog.  0.9.1  2020-09-26 - 12 commits by 6 authors - published to  Commits: Daniel Kraus (4), Matthias Bünger (3), Mihály Verhás (2), hovinen (1), Nicolai Parlog (1), sullis (1) Temporarily disable windows builds (#324 / #342) [(#342)](junit-pioneer/junit-pioneer#342) Add an explanatory comment about the order of operations in setting environment variables on Windows. [(#340)](junit-pioneer/junit-pioneer#340) Re-enable Gradle wrapper cache [(#338)](junit-pioneer/junit-pioneer#338) Add Dependabot v2 config [(#337)](junit-pioneer/junit-pioneer#337) Fixed faulty Namespace creation. [(#332)](junit-pioneer/junit-pioneer#332) Add timeout to Github Actions (#322 / #330) [(#330)](junit-pioneer/junit-pioneer#330) Gradle 6.6.1 [(#328)](junit-pioneer/junit-pioneer#328) Add java module-info (#314 / #326) [(#326)](junit-pioneer/junit-pioneer#326) Add timeout to main build (#322) [(#323)](junit-pioneer/junit-pioneer#323) Provide timeout for Github Actions [(#322)](junit-pioneer/junit-pioneer#322) Clean up GitHub Actions scripts [(#316)](junit-pioneer/junit-pioneer#316) Add dependabot where it's convenient? [(#315)](junit-pioneer/junit-pioneer#315) Where's the module-info.java file? [(#314)](junit-pioneer/junit-pioneer#314) Added variables to ReportEntry [(#294)](junit-pioneer/junit-pioneer#294) Builds brake due caching problems [(#290)](junit-pioneer/junit-pioneer#290) @SetEnvironmentVariable corrupts JDK-internal structures in some cases [(#287)](junit-pioneer/junit-pioneer#287) Correct automatic module name of pioneer [(#251)](junit-pioneer/junit-pioneer#251) Implement @DisabledOnOs [(#9)](junit-pioneer/junit-pioneer#9)     Commits  ca0e792 0.9.1 release (previous 0.9.0) + release notes updated [ci skip] 1618f50 Temporarily disable windows builds (#324 / #342) be539f8 Publish test parameters with @ReportEntry (#179 / #294) 3b67f16 Turn artifact into a modular JAR (#314 / #326) b467a2b Improve documentation of EnvironmentVariableUtils (#287 / #340) e52cb8c Re-enable Gradle wrapper cache (#290 / #338) 5eb8c34 Add Dependabot v2 config (#315 / #337) 642141a Fix namespace of ExpectedExceptionExtension (N/A / #332) a41f954 Add timeout to Github Actions (#322 / #330) 91d4bad Upgrade to Gradle 6.6.1 (N/A / #328) Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.9.0&new-version=0.9.1)](https://dependabot.com/compatibility-score/?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.9.0&new-version=0.9.1)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-28T05:56:10Z","2020-09-29T02:53:01Z"
"","8611","dependency: bump junit-pioneer from 0.8.0 to 0.9.0","Bumps [junit-pioneer](https://github.com/junit-pioneer/junit-pioneer) from 0.8.0 to 0.9.0.  Release notes Sourced from junit-pioneer's releases.  v0.9.0 Release notes were automatically generated by Shipkit 0.9.0  2020-08-06 - 5 commits by Matthias Bünger (2), Mihály Verhás (2), Simon Schrottner (1) - published to  Renamed documentation pages [(#312)](junit-pioneer/junit-pioneer#312) Align documentation headers and ToC entries [(#311)](junit-pioneer/junit-pioneer#311) GithubAction to manually start a release (#309) [(#310)](junit-pioneer/junit-pioneer#310) GithubAction to manually start a release [(#309)](junit-pioneer/junit-pioneer#309) DefaultLocaleExtension/DefaultTimeZoneExtension do not need BeforeAllCallback or AfterAllCallback [(#308)](junit-pioneer/junit-pioneer#308) The extensions work without BeforeAllCallback and AfterAllCallback [(#307)](junit-pioneer/junit-pioneer#307) Provide additional PioneerTestKit methods to create ExecutionResults (283) [(#285)](junit-pioneer/junit-pioneer#285) Refactor PioneerTestKit::executeTestMethodWithParameterTypes to accept Class<?>[] [(#283)](junit-pioneer/junit-pioneer#283) Improvements to StdIOExtension [(#274)](junit-pioneer/junit-pioneer#274) Improve thread safety / parallel execution of extensions [(#253)](junit-pioneer/junit-pioneer#253) Basic implementation of the StdIO extension for catching stdin/out [(#227)](junit-pioneer/junit-pioneer#227) DefaultLocale/DefaultTimeZone - ExecutionMode [(#131)](junit-pioneer/junit-pioneer#131)     Changelog Sourced from junit-pioneer's changelog.  0.9.0  2020-08-06 - 5 commits by Matthias Bünger (2), Mihály Verhás (2), Simon Schrottner (1) - published to  Renamed documentation pages [(#312)](junit-pioneer/junit-pioneer#312) Align documentation headers and ToC entries [(#311)](junit-pioneer/junit-pioneer#311) GithubAction to manually start a release (#309) [(#310)](junit-pioneer/junit-pioneer#310) GithubAction to manually start a release [(#309)](junit-pioneer/junit-pioneer#309) DefaultLocaleExtension/DefaultTimeZoneExtension do not need BeforeAllCallback or AfterAllCallback [(#308)](junit-pioneer/junit-pioneer#308) The extensions work without BeforeAllCallback and AfterAllCallback [(#307)](junit-pioneer/junit-pioneer#307) Provide additional PioneerTestKit methods to create ExecutionResults (283) [(#285)](junit-pioneer/junit-pioneer#285) Refactor PioneerTestKit::executeTestMethodWithParameterTypes to accept Class<?>[] [(#283)](junit-pioneer/junit-pioneer#283) Improvements to StdIOExtension [(#274)](junit-pioneer/junit-pioneer#274) Improve thread safety / parallel execution of extensions [(#253)](junit-pioneer/junit-pioneer#253) Basic implementation of the StdIO extension for catching stdin/out [(#227)](junit-pioneer/junit-pioneer#227) DefaultLocale/DefaultTimeZone - ExecutionMode [(#131)](junit-pioneer/junit-pioneer#131)     Commits  0c5c852 0.9.0 release (previous 0.8.0) + release notes updated [ci skip] d398911 Configure Github Action to manually release Pioneer (#309 / #310) 2a10cd8 Align documentation headers, page descriptions and ToC entries (#311 / #312) 73418cf Select parameterized methods with Class instances (#283 / #285) 2b93d88 Improve thread safety / parallel execution of extensions (#131 / #253) 6aa7c9a Remove before/afterAll from Default Locale/TimeZone (#308 / #307) See full diff in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.8.0&new-version=0.9.0)](https://dependabot.com/compatibility-score/?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.8.0&new-version=0.9.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-08-06T06:33:04Z","2020-08-07T12:52:53Z"
"","8593","dependency: bump junit-pioneer from 0.7.0 to 0.8.0","Bumps [junit-pioneer](https://github.com/junit-pioneer/junit-pioneer) from 0.7.0 to 0.8.0.  Release notes Sourced from junit-pioneer's releases.  v0.8.0  2020-07-30 - 7 commits by 5 authors - published to  Commits: Matthias Bünger (2), Simon Schrottner (2), Mihály Verhás (1), Nicolai Parlog (1), sullis (1) Fixing gradle-wrapper-validation action [(#304)](junit-pioneer/junit-pioneer#304) enable Gradle wrapper validation [(#302)](junit-pioneer/junit-pioneer#302) Provide proposal for new PR template (#286) [(#301)](junit-pioneer/junit-pioneer#301) Add Bradford Hovinen to list of contributors [(#300)](junit-pioneer/junit-pioneer#300) Adding experimental build for multiple JUnit5 versions (#296) [(#297)](junit-pioneer/junit-pioneer#297) Multiversion build with different JUnit versions [(#296)](junit-pioneer/junit-pioneer#296) Do not corrupt ProcessEnvironment.theEnvironment on non-Windows platforms. [(#288)](junit-pioneer/junit-pioneer#288) @SetEnvironmentVariable corrupts JDK-internal structures in some cases [(#287)](junit-pioneer/junit-pioneer#287) Update PR-Template [(#286)](junit-pioneer/junit-pioneer#286) Revamp/improvement of StdIoExtension [(#275)](junit-pioneer/junit-pioneer#275) Improvements to StdIOExtension [(#274)](junit-pioneer/junit-pioneer#274)     Changelog Sourced from junit-pioneer's changelog.  0.8.0  2020-07-30 - 7 commits by 5 authors - published to  Commits: Matthias Bünger (2), Simon Schrottner (2), Mihály Verhás (1), Nicolai Parlog (1), sullis (1) Fixing gradle-wrapper-validation action [(#304)](junit-pioneer/junit-pioneer#304) enable Gradle wrapper validation [(#302)](junit-pioneer/junit-pioneer#302) Provide proposal for new PR template (#286) [(#301)](junit-pioneer/junit-pioneer#301) Add Bradford Hovinen to list of contributors [(#300)](junit-pioneer/junit-pioneer#300) Adding experimental build for multiple JUnit5 versions (#296) [(#297)](junit-pioneer/junit-pioneer#297) Multiversion build with different JUnit versions [(#296)](junit-pioneer/junit-pioneer#296) Do not corrupt ProcessEnvironment.theEnvironment on non-Windows platforms. [(#288)](junit-pioneer/junit-pioneer#288) @SetEnvironmentVariable corrupts JDK-internal structures in some cases [(#287)](junit-pioneer/junit-pioneer#287) Update PR-Template [(#286)](junit-pioneer/junit-pioneer#286) Revamp/improvement of StdIoExtension [(#275)](junit-pioneer/junit-pioneer#275) Improvements to StdIOExtension [(#274)](junit-pioneer/junit-pioneer#274)     Commits  184a406 0.8.0 release (previous 0.7.0) + release notes updated [ci skip] 16913a5 Replace erroneous space indentation with tabs ac723c6 Improve the StdIoExtension (#274 / #275) dda732a Fixing gradle-wrapper-validation action (#304) d985a0d Build on multiple JUnit5 versions (#296 / #297) 7f46270 Add a checklist to the PULL_REQUEST_TEMPLATE.MD (#286 / #301) edc4c46 Adding Gradle Wrapper Validation Check to our GitHub Actions.  (#302) 2bc0cbf Add Bradford Hovinen to list of contributors (#287 / #288, #300) See full diff in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.7.0&new-version=0.8.0)](https://dependabot.com/compatibility-score/?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.7.0&new-version=0.8.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-08-03T07:09:20Z","2020-08-03T09:35:34Z"
"","8542","dependency: bump junit-pioneer from 0.6.0 to 0.7.0","Bumps [junit-pioneer](https://github.com/junit-pioneer/junit-pioneer) from 0.6.0 to 0.7.0.  Release notes Sourced from junit-pioneer's releases.  v0.6.1-beta.6 Release notes were automatically generated by Shipkit 0.6.1-beta.6  2020-05-02 - 3 commits by Simon Schrottner - published to  No pull requests referenced in commit messages.  v0.6.1-beta.4 Release notes were automatically generated by Shipkit 0.6.1-beta.4  2020-05-01 - 3 commits by Simon Schrottner - published to  No pull requests referenced in commit messages.  v0.6.1-beta.3 Release notes were automatically generated by Shipkit 0.6.1-beta.3  2020-05-01 - 2 commits by Simon Schrottner - published to  No pull requests referenced in commit messages.  v0.6.1-beta.2 Release notes were automatically generated by Shipkit 0.6.1-beta.2  2020-05-01 - 2 commits by Simon Schrottner - published to  No pull requests referenced in commit messages.  v0.6.1-beta.1 Release notes were automatically generated by Shipkit 0.6.1-beta.1  2020-05-01 - 14 commits by Simon Schrottner - published to  No pull requests referenced in commit messages.     Changelog Sourced from junit-pioneer's changelog.  0.7.0  2020-07-14 - 30 commits by 10 authors - published to  Commits: Mihály Verhás (6), Nicolai Parlog (6), Daniel Kraus (5), Simon Schrottner (4), Matthias Bünger (3), Dirk Wetzel (2), Allon Murienik (1), Hancho2009 (1), hovinen (1), Nishant Vashisth (1) Improving and fixing releasing process (#284) [(#295)](junit-pioneer/junit-pioneer#295) New behaviour for RetryingTest for Assumptions [(#293)](junit-pioneer/junit-pioneer#293) Temporarily remove caching (#290) [(#292)](junit-pioneer/junit-pioneer#292) RepeatFailedTest fails if assumptions are invalid [(#291)](junit-pioneer/junit-pioneer#291) Minor import statement fix [(#289)](junit-pioneer/junit-pioneer#289) Do not corrupt ProcessEnvironment.theEnvironment on non-Windows platforms. [(#288)](junit-pioneer/junit-pioneer#288) @SetEnvironmentVariable corrupts JDK-internal structures in some cases [(#287)](junit-pioneer/junit-pioneer#287) Release action for releasing version 0.7 failed [(#284)](junit-pioneer/junit-pioneer#284) Fix @Test timeout to actually time out [(#280)](junit-pioneer/junit-pioneer#280) Update dependency on JUnit to 5.5.2 [(#279)](junit-pioneer/junit-pioneer#279) Update JUnit 5 to 5.5 [(#278)](junit-pioneer/junit-pioneer#278) Reinstate rule that requires issue and PR number in title [(#273)](junit-pioneer/junit-pioneer#273) Added ExtensionConfigurationException to DefaultTimeZoneExtension [(#272)](junit-pioneer/junit-pioneer#272) Add project site links to javadoc [(#271)](junit-pioneer/junit-pioneer#271) Enforce UTF-8 encoding when reading source files (fixes build on Windows) [(#270)](junit-pioneer/junit-pioneer#270) Bump cache action from v1 to v2 [(#269)](junit-pioneer/junit-pioneer#269) Run SonarCloud analysis with Java 11 [(#268)](junit-pioneer/junit-pioneer#268) SonarCloud update to Java 11 [(#267)](junit-pioneer/junit-pioneer#267) Fix typo in docs [(#266)](junit-pioneer/junit-pioneer#266) Shall the issue number be mentioned in commit title? [(#264)](junit-pioneer/junit-pioneer#264) Typo in documentation: assertThat().isEqual_s_To() [(#263)](junit-pioneer/junit-pioneer#263) Creating IDE Specific configuration with gradle [(#262)](junit-pioneer/junit-pioneer#262) Finishing last clean up / alignments work [(#260)](junit-pioneer/junit-pioneer#260) Renamed adoc file to fix typo - now in line with docs-nav [(#259)](junit-pioneer/junit-pioneer#259) Documentation about SystemEnvironment not available [(#258)](junit-pioneer/junit-pioneer#258) Fix sorting of 2020's contributors [(#257)](junit-pioneer/junit-pioneer#257) Trigger Release with tag 'releaseTrigger' [(#256)](junit-pioneer/junit-pioneer#256) Add links to Open Source Guide [(#254)](junit-pioneer/junit-pioneer#254) Replace deprecated checkstyle setDir with new one [(#250)](junit-pioneer/junit-pioneer#250) Reduce duplication [(#248)](junit-pioneer/junit-pioneer#248) Add PublishCondition feature to the ReportEntryExtension [(#247)](junit-pioneer/junit-pioneer#247) Create assertions for Pioneer (#232) [(#245)](junit-pioneer/junit-pioneer#245) Extend Beginner Guide in CONTRIBUTING.md [(#243)](junit-pioneer/junit-pioneer#243) Environmentvariableextension securitymanager tests [(#242)](junit-pioneer/junit-pioneer#242) No EnvironmentVariableUtils Tests if a SecurityManager is set [(#241)](junit-pioneer/junit-pioneer#241) Rename/clarify RepeatFailedTest (#233) [(#236)](junit-pioneer/junit-pioneer#236) AppVeyor's caching mechanism throws error [(#234)](junit-pioneer/junit-pioneer#234) RepeatFailedTest causes sporadically PreconditionViolationException [(#233)](junit-pioneer/junit-pioneer#233) Provide pioneer own AssertJ assertions [(#232)](junit-pioneer/junit-pioneer#232) Providing features for specific IDE [(#229)](junit-pioneer/junit-pioneer#229) Basic implementation of the StdIO extension for catching stdin/out [(#227)](junit-pioneer/junit-pioneer#227) Create team of maintainers [(#226)](junit-pioneer/junit-pioneer#226) Implement PioneerTestKit and PioneerEngineExecutionResults (#6) [(#218)](junit-pioneer/junit-pioneer#218) Clean up / align internal structure, names, etc. [(#215)](junit-pioneer/junit-pioneer#215) GitHub Action for Deployments [(#213)](junit-pioneer/junit-pioneer#213) Github Actions for Deployments [(#199)](junit-pioneer/junit-pioneer#199) Evaluate ShipKit [(#193)](junit-pioneer/junit-pioneer#193)      Commits  cd71d50 0.7.0 release (previous 0.6.0) + release notes updated [ci skip] bc4d50b Add tests with enabled SecurityManager to env extension (#241 / #242) c869d7b Improving and fixing releasing process (#284 / #295) 0691375 Create assertions for Pioneer (#232 / #245) d90f1a2 Ensure OS independence of EnvironmentVariableUtils (#287 / #288) 6ebf5eb Skip test execution on @RetryingTest when Assumption fails (#291 / #293) 59bd08e Fix import of PreconditionViolationException ( -  / #289) 921d096 Temporarily remove Gradle wrapper caching (#290 / #292) 02881b5 Prepare 0.7 release 6c4056d Disable parameterized test invocations by display name (#163 / #175) Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.6.0&new-version=0.7.0)](https://dependabot.com/compatibility-score/?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.6.0&new-version=0.7.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-07-22T06:39:33Z","2020-07-25T13:28:10Z"
"","8208","dependency: bump junit-pioneer from 0.5.6 to 0.6.0","Bumps [junit-pioneer](https://github.com/junit-pioneer/junit-pioneer) from 0.5.6 to 0.6.0.  Release notes Sourced from junit-pioneer's releases.  v0.6.0 Release notes were automatically generated by Shipkit 0.6.0  2020-04-28 - 17 commits by 6 authors - published to  Commits: Nicolai Parlog (6), Matthias Bünger (5), Hancho2009 (2), Simon Schrottner (2), Daniel Kraus (1), Mihály Verhás (1) Add PublishCondition feature to the ReportEntryExtension [(#247)](junit-pioneer/junit-pioneer#247) Fix enviornmentvariablesextension documentation [(#240)](junit-pioneer/junit-pioneer#240) Document maintainer team in CONTRIBUTING [(#239)](junit-pioneer/junit-pioneer#239) List maintainers and contributors [(#238)](junit-pioneer/junit-pioneer#238) EnvironmentVariable annotations/extension documentation problems [(#237)](junit-pioneer/junit-pioneer#237) Removing sitebuild as it is broken anyways. [(#235)](junit-pioneer/junit-pioneer#235) Discord inivite link is invalid [(#230)](junit-pioneer/junit-pioneer#230) Clean up / align internal structure, names [(#228)](junit-pioneer/junit-pioneer#228) Add link to GitHub help about fork and PR basics [(#224)](junit-pioneer/junit-pioneer#224) Fixed a typo, minor cleanup of utility method [(#223)](junit-pioneer/junit-pioneer#223) Fix sonarqube violations [(#221)](junit-pioneer/junit-pioneer#221) Checkstyle improvements [(#220)](junit-pioneer/junit-pioneer#220) Enable Checkstyle for the whole codebase [(#219)](junit-pioneer/junit-pioneer#219) Implement PioneerTestKit and PioneerEngineExecutionResults (#6) [(#218)](junit-pioneer/junit-pioneer#218) Added PublishCondition feature to the ReportEntryExtension. [(#216)](junit-pioneer/junit-pioneer#216) Improve GitHub Actions workflow [(#214)](junit-pioneer/junit-pioneer#214) Document underlying tools and processes for new contributors [(#205)](junit-pioneer/junit-pioneer#205) Add Discord channel to readme [(#194)](junit-pioneer/junit-pioneer#194) Prevent faulty/redundant annotation search [(#187)](junit-pioneer/junit-pioneer#187) Tests for the Util class [(#186)](junit-pioneer/junit-pioneer#186) Add Annotation for System Environment Variables [(#174)](junit-pioneer/junit-pioneer#174) Add Annotation for System Environment Variables [(#167)](junit-pioneer/junit-pioneer#167) Performance optimization for DefaultLocale and DefaultTimeZone [(#115)](junit-pioneer/junit-pioneer#115) Replace Upstream Test Code With Dependency [(#6)](junit-pioneer/junit-pioneer#6) Create Test Infrastructure [(#5)](junit-pioneer/junit-pioneer#5)     Changelog Sourced from junit-pioneer's changelog.  0.6.0  2020-04-28 - 17 commits by 6 authors - published to  Commits: Nicolai Parlog (6), Matthias Bünger (5), Hancho2009 (2), Simon Schrottner (2), Daniel Kraus (1), Mihály Verhás (1) Add PublishCondition feature to the ReportEntryExtension [(#247)](junit-pioneer/junit-pioneer#247) Fix enviornmentvariablesextension documentation [(#240)](junit-pioneer/junit-pioneer#240) Document maintainer team in CONTRIBUTING [(#239)](junit-pioneer/junit-pioneer#239) List maintainers and contributors [(#238)](junit-pioneer/junit-pioneer#238) EnvironmentVariable annotations/extension documentation problems [(#237)](junit-pioneer/junit-pioneer#237) Removing sitebuild as it is broken anyways. [(#235)](junit-pioneer/junit-pioneer#235) Discord inivite link is invalid [(#230)](junit-pioneer/junit-pioneer#230) Clean up / align internal structure, names [(#228)](junit-pioneer/junit-pioneer#228) Add link to GitHub help about fork and PR basics [(#224)](junit-pioneer/junit-pioneer#224) Fixed a typo, minor cleanup of utility method [(#223)](junit-pioneer/junit-pioneer#223) Fix sonarqube violations [(#221)](junit-pioneer/junit-pioneer#221) Checkstyle improvements [(#220)](junit-pioneer/junit-pioneer#220) Enable Checkstyle for the whole codebase [(#219)](junit-pioneer/junit-pioneer#219) Implement PioneerTestKit and PioneerEngineExecutionResults (#6) [(#218)](junit-pioneer/junit-pioneer#218) Added PublishCondition feature to the ReportEntryExtension. [(#216)](junit-pioneer/junit-pioneer#216) Improve GitHub Actions workflow [(#214)](junit-pioneer/junit-pioneer#214) Document underlying tools and processes for new contributors [(#205)](junit-pioneer/junit-pioneer#205) Add Discord channel to readme [(#194)](junit-pioneer/junit-pioneer#194) Prevent faulty/redundant annotation search [(#187)](junit-pioneer/junit-pioneer#187) Tests for the Util class [(#186)](junit-pioneer/junit-pioneer#186) Add Annotation for System Environment Variables [(#174)](junit-pioneer/junit-pioneer#174) Add Annotation for System Environment Variables [(#167)](junit-pioneer/junit-pioneer#167) Performance optimization for DefaultLocale and DefaultTimeZone [(#115)](junit-pioneer/junit-pioneer#115) Replace Upstream Test Code With Dependency [(#6)](junit-pioneer/junit-pioneer#6) Create Test Infrastructure [(#5)](junit-pioneer/junit-pioneer#5)     Commits  1a29a36 0.6.0 release (previous 0.5.6) + release notes updated [ci skip] 5264aee Add PublishCondition to the ReportEntryExtension 8325c9c Remove empty lines from \<dl> block 9852a62 Document maintainer team in CONTRIBUTING d26a97f List maintainers and contributors 3a655e7 Fix Javadoc of EnvironmentVariableExtension 0b79db8 Implement PioneerTestKit and PioneerEngineExecutionResults b919d15 Fix some SonarQube violations e88aaab Deactivate broken site build (again) 3098dcb Apply code style re type names and locations Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.5.6&new-version=0.6.0)](https://dependabot.com/compatibility-score/?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.5.6&new-version=0.6.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-04-29T06:49:44Z","2020-04-29T12:26:54Z"
"","8006","dependency: bump junit-pioneer from 0.5.5 to 0.5.6","Bumps [junit-pioneer](https://github.com/junit-pioneer/junit-pioneer) from 0.5.5 to 0.5.6.  Release notes Sourced from junit-pioneer's releases.  v0.5.6 Release notes were automatically generated by Shipkit 0.5.6  2020-03-31 - 4 commits by Matthias (3), Simon Schrottner (1) - published to  Update JUnit and test frameworks dependencies [(#210)](junit-pioneer/junit-pioneer#210) Upgrade JUnit version to 5.4.2 [(#209)](junit-pioneer/junit-pioneer#209) Bogus PR for Sonar experiments [(#207)](junit-pioneer/junit-pioneer#207) Fixing sonarcloud [(#206)](junit-pioneer/junit-pioneer#206) Updating docs with notes about documentation. [(#203)](junit-pioneer/junit-pioneer#203) Moving gradle wrapper to default location [(#200)](junit-pioneer/junit-pioneer#200) Extend contributor docs about writing 1sentence per line [(#191)](junit-pioneer/junit-pioneer#191) Config files are not discovered by tools [(#190)](junit-pioneer/junit-pioneer#190)     Changelog Sourced from junit-pioneer's changelog.  0.5.6  2020-03-31 - 4 commits by Matthias (3), Simon Schrottner (1) - published to  Update JUnit and test frameworks dependencies [(#210)](junit-pioneer/junit-pioneer#210) Upgrade JUnit version to 5.4.2 [(#209)](junit-pioneer/junit-pioneer#209) Bogus PR for Sonar experiments [(#207)](junit-pioneer/junit-pioneer#207) Fixing sonarcloud [(#206)](junit-pioneer/junit-pioneer#206) Updating docs with notes about documentation. [(#203)](junit-pioneer/junit-pioneer#203) Moving gradle wrapper to default location [(#200)](junit-pioneer/junit-pioneer#200) Extend contributor docs about writing 1sentence per line [(#191)](junit-pioneer/junit-pioneer#191) Config files are not discovered by tools [(#190)](junit-pioneer/junit-pioneer#190)     Commits  1b45e22 0.5.6 release (previous 0.5.5) + release notes updated [ci skip] 936aac6 Update JUnit and test frameworks dependencies f62b769 Update CONTRIBUTING.md with notes about documentation 6fe755b Fix SonarCloud integration 0150796 Move gradle wrapper to default location See full diff in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.5.5&new-version=0.5.6)](https://dependabot.com/compatibility-score/?dependency-name=org.junit-pioneer:junit-pioneer&package-manager=maven&previous-version=0.5.5&new-version=0.5.6)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-04-01T06:48:58Z","2020-04-04T02:56:22Z"
"","8098","dependency: bump guava from 28.2-jre to 29.0-jre","Bumps [guava](https://github.com/google/guava) from 28.2-jre to 29.0-jre.  Release notes Sourced from guava's releases.  29.0 Maven <dependency>   <groupId>com.google.guava</groupId>   <artifactId>guava</artifactId>   <version>29.0-jre</version>   <!-- or, for Android: -->   <version>29.0-android</version> </dependency>  Javadoc  29.0-jre 29.0-android  JDiff  29.0-jre vs. 28.2-jre 29.0-android vs. 28.2-android 29.0-android vs. 29.0-jre  Changelog  Guava types can no longer be sent over GWT-RPC. To temporarily reenable support, set the guava.gwt.emergency_reenable_rpc system property to true. (5214a10b1e)  This is the only breaking change in this release, and it affects only users of the guava-gwt artifact, not people who use only the guava artifact. This release contains no changes that break binary compatibility for any users.   API documentation for Guava classes is now easier to reach. For example, for ImmutableList, visit guava.dev/ImmutableList. Also, more easily access the index at guava.dev/api. collect: Annotated FluentIterable.from(FluentIterable) with @DoNotCall. (b1c77b7df3) collect: Made ceiling, floor, headSet(E, boolean), and tailSet(E, boolean) methods available in the GWT-emulated ImmutableSortedSet. (7e0fe90ca8, 5f2fbf27b2) graph: Made it possible to set a stable incident edge order by calling the newly added method [Value]Graph.Builder.incidentEdgeOrder(ElementOrder.stable()). (70164025a8) graph: Added incidentEdgeOrder() to the [Value]Graph interfaces. (cde576ec00) util.concurrent: Added Duration-based default methods to ListeningScheduledExecutorService. (931e83f969) util.concurrent: Added immediateVoidFuture. (9f3bae5853) util.concurrent: Removed @Beta from Service and related classes. (dc46627fea) util.concurrent: Deprecated the 1-arg overload of ServiceManager.addListener. (86e3620125) util.concurrent: Changed the return type of ServiceManager.servicesByState() to ImmutableSetMultimap (but also retained a method with the old signature for binary compatibility). (31999ae6f5) util.concurrent: Made it safe to load the AbstractFuture class from a ForkJoinPool thread under a security manager. (6e0c5b5d50)     Commits  See full diff in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.google.guava:guava&package-manager=maven&previous-version=28.2-jre&new-version=29.0-jre)](https://dependabot.com/compatibility-score/?dependency-name=com.google.guava:guava&package-manager=maven&previous-version=28.2-jre&new-version=29.0-jre)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-04-14T06:46:25Z","2020-04-15T00:52:02Z"
"","8851","dependency: bump forbiddenapis from 3.0.1 to 3.1","Bumps [forbiddenapis](https://github.com/policeman-tools/forbidden-apis) from 3.0.1 to 3.1.  Commits  359654b Release version 3.1 e958252 Revert some additions to forbiddenapis (commons-io 2.8.0), see https://issues... bfe6696 Improve documentation and fix typo in test mojo 62e52d3 Fix test to respect new error message from last commit 6b7b8d7 Add support for maven.compiler.release/testRelease (#167) be66380 Exclude new methods added to FileUtils, as all of them are broken with local ... 6d7dcc3 Add commons-io-unsafe-2.8.0 bundled signatures 33c2ab2 Add support for Java 15; upgrade ASM to 9.0 87125db Merge pull request #174 from policeman-tools/issues/173 f9b80d9 Add better reporting if ASM fails to parse a class with an unspecified Runtim... Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=de.thetaphi:forbiddenapis&package-manager=maven&previous-version=3.0.1&new-version=3.1)](https://dependabot.com/compatibility-score/?dependency-name=de.thetaphi:forbiddenapis&package-manager=maven&previous-version=3.0.1&new-version=3.1)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-24T05:50:54Z","2020-09-24T12:36:44Z"
"","8303","dependency: bump forbiddenapis from 3.0 to 3.0.1","Bumps [forbiddenapis](https://github.com/policeman-tools/forbidden-apis) from 3.0 to 3.0.1.  Commits  See full diff in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=de.thetaphi:forbiddenapis&package-manager=maven&previous-version=3.0&new-version=3.0.1)](https://dependabot.com/compatibility-score/?dependency-name=de.thetaphi:forbiddenapis&package-manager=maven&previous-version=3.0&new-version=3.0.1)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-04T06:47:33Z","2020-06-04T20:57:45Z"
"","8197","dependency: bump forbiddenapis from 2.7 to 3.0","Bumps [forbiddenapis](https://github.com/policeman-tools/forbidden-apis) from 2.7 to 3.0.  Commits  1f41b49 Newer versions of Maven do not show deprecation warning so add it back (its n... 7be999b Release v3.0 fb656e1 Allow to silently ignore signatures if the class is not found (#164) 5dda144 Fix javadocs error c64f14b Java 7: Replace hardcoded charsets to use StandardCharsets class 711174b Fix documentation efd76d4 Don't completely swallow exception when closing the checker's classloader b3bfa4c Merge pull request #163 from policeman-tools/dev/emptyclasseswarning 8c5bb00 Hides the warning if the classes directory/fileset is missing (Ant, Maven). T... 4416a82 Use Objects.requireNonNull (supported since Java 7) Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=de.thetaphi:forbiddenapis&package-manager=maven&previous-version=2.7&new-version=3.0)](https://dependabot.com/compatibility-score/?dependency-name=de.thetaphi:forbiddenapis&package-manager=maven&previous-version=2.7&new-version=3.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-04-27T07:12:36Z","2020-04-28T17:21:41Z"
"","8301","dependency: bump exec-maven-plugin from 1.6.0 to 3.0.0","Bumps [exec-maven-plugin](https://github.com/mojohaus/exec-maven-plugin) from 1.6.0 to 3.0.0.  Commits  9705839 [maven-release-plugin] prepare release exec-maven-plugin-3.0.0 66563e6 get this working with java11 13d1369 Merge pull request #153 from hankolerd/master 7935062 152 - Adds option to redirect program output of exec:exec to the maven logger. dbe2c73 use mojo parent 50 c7c3fe3 Merge pull request #142 from elharo/patch-1 1bb7838 Merge pull request #140 from britter/patch-1 0a9b9cb Merge pull request #147 from gaurav9822/master 581e6ed Added OpenJDK 14 52d75dc Update Property.java Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.codehaus.mojo:exec-maven-plugin&package-manager=maven&previous-version=1.6.0&new-version=3.0.0)](https://dependabot.com/compatibility-score/?dependency-name=org.codehaus.mojo:exec-maven-plugin&package-manager=maven&previous-version=1.6.0&new-version=3.0.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-03T06:58:22Z","2020-06-03T15:18:13Z"
"","8911","dependency: bump equalsverifier from 3.4.3 to 3.5","Bumps [equalsverifier](https://github.com/jqno/equalsverifier) from 3.4.3 to 3.5.  Changelog Sourced from equalsverifier's changelog.  [3.5] - 2020-10-20 Added  Updated support for Java 15's records.     Commits  2d4eded [maven-release-plugin] prepare release equalsverifier-3.5 4491072 Records: fixes broken Javadoc b02f9cf Records: updtes changelog fda982e Updates to Spotless plugin for formatting to have more control over google-ja... b10e788 Adds tests to cover private constructors, to avoid clobbering up the PITest r... e883958 Adds additional.argLine parameter to PITest 5ab89da Introduces Rethrow e45cacc Merge branch 'records-java-15' into main a061e8b Records: restores coverage threshold to 94% 48c8375 Records: adds RecordObjectAccessorModificationTest Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=nl.jqno.equalsverifier:equalsverifier&package-manager=maven&previous-version=3.4.3&new-version=3.5)](https://dependabot.com/compatibility-score/?dependency-name=nl.jqno.equalsverifier:equalsverifier&package-manager=maven&previous-version=3.4.3&new-version=3.5)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-10-21T05:52:05Z","2020-10-21T12:13:07Z"
"","8834","dependency: bump equalsverifier from 3.4.2 to 3.4.3","Bumps [equalsverifier](https://github.com/jqno/equalsverifier) from 3.4.2 to 3.4.3.  Changelog Sourced from equalsverifier's changelog.  [3.4.3] - 2020-09-08 Changed  Added more helpful error message explaining why EqualsVerifier can't verify subclasses of java.util.ArrayList. (Issue 341) Changes order of processing fields (non-statics first, statics later) so static fields don't obscure issues that are really in non-static fields. (Issue 159)  Fixed  Added prefab values for java.net.URL. (Issue 340) Fixed support for records with static fields in JDK 14. (Issue 346; thanks Edgar!) ByteBuddy experimental support (needed for Java 16 support) can now be accessed via -Dnet.bytebuddy.experimental=true again instead of -Dnl.jqno.equalsverifier.internal.lib.bytebuddy.experimental=true. (Issue 339; thanks Stefano!)     Commits  17d929f [maven-release-plugin] prepare release equalsverifier-3.4.3 6c854f2 Fixes CI for all JDK versions 9c3337c Fixes build on JDK15 by enabling experimental flag there 90d0620 #159 Processes non-static fields before static fields so static fields don't ... 50ae101 Fixes test that fails only on JDK15 cc078c6 Fixes flaky test that depended on hashCode being stable 472dc92 #341 Adds helpful error message when testing a subclass of ArrayList a53f0e2 Updates CHANGELOG c44c31b Lowers coverage threshold (temporarily?) because Records code won't get execu... 6d44361 Merge pull request #347 from nstdio/issue-346 Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=nl.jqno.equalsverifier:equalsverifier&package-manager=maven&previous-version=3.4.2&new-version=3.4.3)](https://dependabot.com/compatibility-score/?dependency-name=nl.jqno.equalsverifier:equalsverifier&package-manager=maven&previous-version=3.4.2&new-version=3.4.3)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-09-17T05:49:55Z","2020-09-19T14:43:18Z"
"","8741","dependency: bump equalsverifier from 3.4.1 to 3.4.2","Bumps [equalsverifier](https://github.com/jqno/equalsverifier) from 3.4.1 to 3.4.2.  Changelog Sourced from equalsverifier's changelog.  [3.4.2] - 2020-08-20 Fixed  Added prefab values for java.net.InetSocketAddress. (Issue 336)     Commits  17d22ee [maven-release-plugin] prepare release equalsverifier-3.4.2 f88f81f Updates README link to CircleCI 90f80e8 Updates changelog and bumps version c6b97d9 #336 Adds prefab value for InetSocketAddress 2e549cb Merge pull request #335 from jqno/dependabot/maven/spotbugs.version-4.1.1 1acb033 Merge pull request #334 from jqno/dependabot/maven/net.bytebuddy-byte-buddy-1... c7c7357 Bump spotbugs.version from 4.0.6 to 4.1.1 2fcf9a0 Bump byte-buddy from 1.10.13 to 1.10.14 d181703 Merge pull request #331 from jqno/dependabot/maven/org.openjfx-javafx-base-14... 6d0b74e Merge pull request #330 from jqno/dependabot/maven/com.puppycrawl.tools-check... Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=nl.jqno.equalsverifier:equalsverifier&package-manager=maven&previous-version=3.4.1&new-version=3.4.2)](https://dependabot.com/compatibility-score/?dependency-name=nl.jqno.equalsverifier:equalsverifier&package-manager=maven&previous-version=3.4.1&new-version=3.4.2)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-08-21T05:52:05Z","2020-08-21T10:58:15Z"
"","8322","dependency: bump equalsverifier from 3.3 to 3.4.1","Bumps [equalsverifier](https://github.com/jqno/equalsverifier) from 3.3 to 3.4.1.  Changelog Sourced from equalsverifier's changelog.  [3.4.1] - 2020-06-15 Fixed  Warning.STRICT_INHERITANCE doesn't take away the requirement to call #usingGetClass() when superclass has fields. (Issue 316)  [3.4] - 2020-06-13 Added  EqualsVerifier.simple(), which gives you an EqualsVerifier that's not so strict and will immediately approve an equals method generated by your IDE. Under the hood, it suppresses Warning.STRICT_INHERITANCE and Warning.NONFINAL_FIELDS. Initial support for Java 14's records and their new equality invariant. Support for JSR305's ParametersAreNonnullByDefault annotation. (Issue 308)  Changed  Renames the project's main branch to main. Replaces all references to the word 'black' to 'blue', including those in internal (but accessible) API's. Warning.STRICT_INHERITANCE now also takes away the requirement to call #usingGetClass()  Fixed  Testing a class with that has fields but doesn't override equals causes ""Mutability: equals depends on mutable field"" error. (Issue 315)     Commits  d8ea681 [maven-release-plugin] prepare release equalsverifier-3.4.1 189de07 #316 Expands Warning.STRICT_INHERITANCE further to include superclass checks d09142e Restores execution of JavaFX tests b20eccd Cleans up some test code d698561 Cleans up awkwardly auto-formatted code ad82e84 Updates version number in README 3c7593e Updates changelog e3819c0 Merge branch 'release-3.4' into main b2d5960 [maven-release-plugin] prepare for next development iteration 041f0a1 [maven-release-plugin] prepare release equalsverifier-3.4 Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=nl.jqno.equalsverifier:equalsverifier&package-manager=maven&previous-version=3.3&new-version=3.4.1)](https://dependabot.com/compatibility-score/?dependency-name=nl.jqno.equalsverifier:equalsverifier&package-manager=maven&previous-version=3.3&new-version=3.4.1)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-16T06:44:51Z","2020-06-16T20:17:19Z"
"","8316","dependency: bump equalsverifier from 3.3 to 3.4","Bumps [equalsverifier](https://github.com/jqno/equalsverifier) from 3.3 to 3.4.  Changelog Sourced from equalsverifier's changelog.  [3.4] - 2020-06-13 Added  EqualsVerifier.simple(), which gives you an EqualsVerifier that's not so strict and will immediately approve an equals method generated by your IDE. Under the hood, it suppresses Warning.STRICT_INHERITANCE and Warning.NONFINAL_FIELDS. Initial support for Java 14's records and their new equality invariant. Support for JSR305's ParametersAreNonnullByDefault annotation. (Issue 308)  Changed  Renames the project's main branch to main. Replaces all references to the word 'black' to 'blue', including those in internal (but accessible) API's. Warning.STRICT_INHERITANCE now also takes away the requirement to call #usingGetClass()  Fixed  Testing a class with that has fields but doesn't override equals causes ""Mutability: equals depends on mutable field"" error. (Issue 315)     Commits  041f0a1 [maven-release-plugin] prepare release equalsverifier-3.4 04704b7 Version bump 72c8178 Removes .editorconfig; it's superseded by google-java-format 48a9bea Introduces EqualsVerifier.simple() 26bda8c Adds Javadoc reference to Warning.STRICT_INHERITANCE af33695 Expands Warning.STRICT_INHERITANCE to remove the need to call usingGetClass() 770f77b #315: fixes transient field error in JDK 11 and up 7c85ef3 #315: support classes that have fields but don't override equals 503babb #308: adds support for JSR305's ParametersAreNonnullByDefault annotation bd5e969 Terminology: replaces black with blue Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=nl.jqno.equalsverifier:equalsverifier&package-manager=maven&previous-version=3.3&new-version=3.4)](https://dependabot.com/compatibility-score/?dependency-name=nl.jqno.equalsverifier:equalsverifier&package-manager=maven&previous-version=3.3&new-version=3.4)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-15T06:56:15Z","2020-06-16T06:45:01Z"
"","8230","dependency: bump equalsverifier from 3.1.13 to 3.2","Bumps [equalsverifier](https://github.com/jqno/equalsverifier) from 3.1.13 to 3.2.  Changelog Sourced from equalsverifier's changelog.  [3.2] - 2020-05-10 Added  Support for test multiple classes at once, through #forClasses() and #forPackage(). See the manual entry for more information. (Issue 271)     Commits  400844a [maven-release-plugin] prepare release equalsverifier-3.2 874821c Version bump 7233cb7 Fixes formatting cb67cbe Multiple types: fixes Javadoc references b45f7bf Merge branch 'support-multiple-types-at-once' d0f4dda Multiple types: updates changelog 696c03e Adds missing assertion c69632e Multiple types: don't repeat 'For more information, go to ...' message 6284a8e Multiple types: removes unnecessary imports 069b855 Multiple types: mentions possible slowness in Javadoc Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=nl.jqno.equalsverifier:equalsverifier&package-manager=maven&previous-version=3.1.13&new-version=3.2)](https://dependabot.com/compatibility-score/?dependency-name=nl.jqno.equalsverifier:equalsverifier&package-manager=maven&previous-version=3.1.13&new-version=3.2)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-05-11T07:02:24Z","2020-05-16T04:28:19Z"
"","8333","dependency: bump build-helper-maven-plugin from 3.1.0 to 3.2.0","Bumps [build-helper-maven-plugin](https://github.com/mojohaus/build-helper-maven-plugin) from 3.1.0 to 3.2.0.  Release notes Sourced from build-helper-maven-plugin's releases.  build-helper-maven-plugin-3.2.0 Changelog: https://github.com/mojohaus/build-helper-maven-plugin/milestone/6?closed=1    Commits  46de6e1 [maven-release-plugin] prepare release build-helper-maven-plugin-3.2.0 2728bdc Remove unused private fields a5b414f Remove description of missing parameter 9f3d182 Merge pull request #32 from JeneJasper/master 0fd59ec Set a property based on the maven.build.timestamp e557609 Merge pull request #92 from mojohaus/issue/48 bfb998d cosmetic: remove unused import 777b058 Fixes #93 Add profile to avoid showing warnings for maven plugin plugin goals... f9585af Merge pull request #76 from gmatheu/site_regex-properties_value 933dccf [Issue #48] detect root project location also in special cases: Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.codehaus.mojo:build-helper-maven-plugin&package-manager=maven&previous-version=3.1.0&new-version=3.2.0)](https://dependabot.com/compatibility-score/?dependency-name=org.codehaus.mojo:build-helper-maven-plugin&package-manager=maven&previous-version=3.1.0&new-version=3.2.0)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-23T06:49:35Z","2020-06-28T23:45:01Z"
"","8288","dependency: bump archunit-junit5 from 0.13.1 to 0.14.1","Bumps [archunit-junit5](https://github.com/TNG/ArchUnit) from 0.13.1 to 0.14.1.  Release notes Sourced from archunit-junit5's releases.  ArchUnit 0.14.1 Bug Fixes  Fix broken Gradle metadata: Migrating the legacy Maven Plugin to the Publish Plugin caused some broken Gradle metadata published to Maven Central by accident. While 0.14.0 should work fine with any other build tool like Maven, Gradle will complain about a missing artifact archunit-junit, which does in fact not exist. This release fixes this by removing the broken metadata.  ArchUnit 0.14.0 Breaking Changes  All methods that have been deprecated up to ArchUnit 0.12.0 have been removed. It might make sense to look through your code for usage of deprecated methods and follow the advice in the Javadoc before upgrading (see #329; thanks a lot to @rweisleder for removing the old deprecations)  Bug Fixes  Fix for Android where some classes were not imported correctly when run from the command line (see #319; also thanks a lot to @rweisleder for fixing the subsequent URI problems on Windows) Fixed surprising behavior when using only{Call/Access}...That()... where the target of the call could not be resolved from the imported classes (see #340)  Enhancements Core  JavaPackage now offers methods to retrieve the annotations of the respective package-info (see #263; thanks a lot to @rweisleder) ClassFileImporter.importClasspath() now respects any ImportOptions passed via withImportOption(..) (see #296; thanks a lot to @rweisleder) JavaMethod and JavaConstructor now have a heuristic line number instead of constant 0 (see #344; thanks a lot to @hankem)  Library  The algorithm to detect cycles between slices has been improved from BFS to Johnson/Tarjan (see #138; thanks a lot to @torfmaster) Cycle detection now has a configurable limit for the max number of cycles to detect (by default 100) and a max number of violations reported (by default 20 dependencies per edge). This can be reconfigured according to the user guide (see #326) onionArchitecture() now supports to ignoreDependency(..) analogously to layeredArchitecture() (see #318; thanks a lot to @hankem) There now is a rule to forbid field injection in favor of constructor injection (see #288; thanks a lot to @rweisleder) There now is a rule to forbid dependencies on upper packages (see #151; thanks a lot to @qoomon for the initiative and POC)  JUnit  @ArchIgnore, @ArchTag and @ArchTags are now usable as meta-annotations to compose custom annotations that inherit the behavior (analogous to https://junit.org/junit5/docs/current/user-guide/#writing-tests-meta-annotations; see #282; thanks a lot to @daniel-shuy) Upgraded dependencies junit-platform-* from 1.5.2 to 1.6.2  Further Acknowledgement  Thanks a lot to @aaschmid for extensive work to upgrade Gradle to the current version and to @jangalinski for the original initiative and draft (see #192, #284, #306 and #345)     Commits  00ea9ed fix split repos when publishing to Sonatype Nexus 2b84aaf prepare release 0.14.1 fb5fbb9 disable Gradle meta-data for releases f86b87a prepare release 0.14.0 #364 c8363d2 prepare release 0.14.0 6a2de78 Fix classpath scanning #363 0c3eb53 adjust workflow to only run on either ""push to master"" or PR 8f882df restore the old way of resolving classes from the classpath bc353f4 avoid calling getClass().getSimpleName() repeatedly e6d9d35 fix broken classpath scanning for manifest classpaths Additional commits viewable in compare view      [![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.tngtech.archunit:archunit-junit5&package-manager=maven&previous-version=0.13.1&new-version=0.14.1)](https://dependabot.com/compatibility-score/?dependency-name=com.tngtech.archunit:archunit-junit5&package-manager=maven&previous-version=0.13.1&new-version=0.14.1)  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---   Dependabot commands and options   You can trigger Dependabot actions by commenting on this PR: - `@dependabot rebase` will rebase this PR - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it - `@dependabot merge` will merge this PR after your CI passes on it - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it - `@dependabot cancel merge` will cancel a previously requested merge and block automerging - `@dependabot reopen` will reopen this PR if it is closed - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself) - `@dependabot badge me` will comment on this PR with code to add a ""Dependabot enabled"" badge to your readme  Additionally, you can set the following in the `.dependabot/config.yml` file in this repo: - Update frequency - Out-of-range updates (receive only lockfile updates, if desired) - Security updates (receive only security updates, if desired)","closed","dependencies,","dependabot-preview[bot]","2020-06-01T07:08:17Z","2020-06-07T07:57:39Z"
"","8754","PMD shows WARN during build","build WARN https://travis-ci.org/github/checkstyle/checkstyle/jobs/720219106#L630  ``` [INFO] --- maven-pmd-plugin:3.13.0:pmd (pmd) @ checkstyle --- [WARNING] Exception applying rule ShortMethodName on file  /home/travis/build/checkstyle/checkstyle/src/test/java/com/puppycrawl /tools/checkstyle/grammar/AstRegressionTest.java, continuing with next rule java.lang.RuntimeException: XPath expression  //ClassOrInterfaceDeclaration[@SimpleName='AssertGeneratedJavaLexer']                         //MethodDeclaration[@Name='LA']                     | //ClassOrInterfaceDeclaration[@SimpleName='AssertGenTextBlockLexer']                      //MethodDeclaration[@Name='LA' failed: Expected: ]     at net.sourceforge.pmd.lang.ast.AbstractNode.hasDescendantMatchingXPath (AbstractNode.java:536)     at net.sourceforge.pmd.lang.rule.ParametricRuleViolation.setSuppression (ParametricRuleViolation.java:75)     at net.sourceforge.pmd.lang.rule.ParametricRuleViolation. (ParametricRuleViolation.java:58)     at net.sourceforge.pmd.lang.java.rule.JavaRuleViolation. (JavaRuleViolation.java:53)     at net.sourceforge.pmd.lang.java.rule.JavaRuleViolationFactory.createRuleViolation (JavaRuleViolationFactory.java:30)     at net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactory.addViolation (AbstractRuleViolationFactory.java:37)     at net.sourceforge.pmd.lang.rule.AbstractRule.addViolation (AbstractRule.java:359)     at net.sourceforge.pmd.lang.rule.XPathRule.evaluate (XPathRule.java:178)     at net.sourceforge.pmd.lang.rule.XPathRule.apply (XPathRule.java:158)     at net.sourceforge.pmd.lang.internal.DefaultRulechainVisitor.visit (DefaultRulechainVisitor.java:26)     at net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.visitAll (AbstractRuleChainVisitor.java:99)     at net.sourceforge.pmd.RuleChain.apply (RuleChain.java:72)     at net.sourceforge.pmd.RuleSets.apply (RuleSets.java:145)     at net.sourceforge.pmd.SourceCodeProcessor.processSource (SourceCodeProcessor.java:194)     at net.sourceforge.pmd.SourceCodeProcessor.processSourceCodeWithoutCache (SourceCodeProcessor.java:107)     at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode (SourceCodeProcessor.java:89)     at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode (SourceCodeProcessor.java:51)     at net.sourceforge.pmd.processor.PmdRunnable.call (PmdRunnable.java:78)     at net.sourceforge.pmd.processor.PmdRunnable.call (PmdRunnable.java:24)     at java.util.concurrent.FutureTask.run (FutureTask.java:266)     at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:511)     at java.util.concurrent.FutureTask.run (FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1149)     at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)     at java.lang.Thread.run (Thread.java:748) Caused by: org.jaxen.XPathSyntaxException: Expected: ]     at org.jaxen.BaseXPath. (BaseXPath.java:121)     at org.jaxen.BaseXPath. (BaseXPath.java:142)     at net.sourceforge.pmd.lang.ast.AbstractNode.findChildNodesWithXPath (AbstractNode.java:527)     at net.sourceforge.pmd.lang.ast.AbstractNode.hasDescendantMatchingXPath (AbstractNode.java:534)     at net.sourceforge.pmd.lang.rule.ParametricRuleViolation.setSuppression (ParametricRuleViolation.java:75)     at net.sourceforge.pmd.lang.rule.ParametricRuleViolation. (ParametricRuleViolation.java:58)     at net.sourceforge.pmd.lang.java.rule.JavaRuleViolation. (JavaRuleViolation.java:53)     at net.sourceforge.pmd.lang.java.rule.JavaRuleViolationFactory.createRuleViolation (JavaRuleViolationFactory.java:30)     at net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactory.addViolation (AbstractRuleViolationFactory.java:37)     at net.sourceforge.pmd.lang.rule.AbstractRule.addViolation (AbstractRule.java:359)     at net.sourceforge.pmd.lang.rule.XPathRule.evaluate (XPathRule.java:178)     at net.sourceforge.pmd.lang.rule.XPathRule.apply (XPathRule.java:158)     at net.sourceforge.pmd.lang.internal.DefaultRulechainVisitor.visit (DefaultRulechainVisitor.java:26)     at net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.visitAll (AbstractRuleChainVisitor.java:99)     at net.sourceforge.pmd.RuleChain.apply (RuleChain.java:72)     at net.sourceforge.pmd.RuleSets.apply (RuleSets.java:145)     at net.sourceforge.pmd.SourceCodeProcessor.processSource (SourceCodeProcessor.java:194)     at net.sourceforge.pmd.SourceCodeProcessor.processSourceCodeWithoutCache (SourceCodeProcessor.java:107)     at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode (SourceCodeProcessor.java:89)     at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode (SourceCodeProcessor.java:51)     at net.sourceforge.pmd.processor.PmdRunnable.call (PmdRunnable.java:78)     at net.sourceforge.pmd.processor.PmdRunnable.call (PmdRunnable.java:24)     at java.util.concurrent.FutureTask.run (FutureTask.java:266)     at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:511)     at java.util.concurrent.FutureTask.run (FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1149)     at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)     at java.lang.Thread.run (Thread.java:748) Caused by: org.jaxen.saxpath.XPathSyntaxException: Expected: ]     at org.jaxen.saxpath.base.XPathReader.createSyntaxException (XPathReader.java:1085)     at org.jaxen.saxpath.base.XPathReader.match (XPathReader.java:1038)     at org.jaxen.saxpath.base.XPathReader.predicate (XPathReader.java:768)     at org.jaxen.saxpath.base.XPathReader.predicates (XPathReader.java:751)     at org.jaxen.saxpath.base.XPathReader.nameTest (XPathReader.java:717)     at org.jaxen.saxpath.base.XPathReader.nodeTest (XPathReader.java:592)     at org.jaxen.saxpath.base.XPathReader.step (XPathReader.java:541)     at org.jaxen.saxpath.base.XPathReader.steps (XPathReader.java:492)     at org.jaxen.saxpath.base.XPathReader.absoluteLocationPath (XPathReader.java:390)     at org.jaxen.saxpath.base.XPathReader.locationPath (XPathReader.java:326)     at org.jaxen.saxpath.base.XPathReader.pathExpr (XPathReader.java:185)     at org.jaxen.saxpath.base.XPathReader.unionExpr (XPathReader.java:1007)     at org.jaxen.saxpath.base.XPathReader.unaryExpr (XPathReader.java:995)     at org.jaxen.saxpath.base.XPathReader.multiplicativeExpr (XPathReader.java:943)     at org.jaxen.saxpath.base.XPathReader.additiveExpr (XPathReader.java:913)     at org.jaxen.saxpath.base.XPathReader.relationalExpr (XPathReader.java:860)     at org.jaxen.saxpath.base.XPathReader.equalityExpr (XPathReader.java:829)     at org.jaxen.saxpath.base.XPathReader.andExpr (XPathReader.java:809)     at org.jaxen.saxpath.base.XPathReader.orExpr (XPathReader.java:787)     at org.jaxen.saxpath.base.XPathReader.expr (XPathReader.java:780)     at org.jaxen.saxpath.base.XPathReader.unionExpr (XPathReader.java:1017)     at org.jaxen.saxpath.base.XPathReader.unaryExpr (XPathReader.java:995)     at org.jaxen.saxpath.base.XPathReader.multiplicativeExpr (XPathReader.java:943)     at org.jaxen.saxpath.base.XPathReader.additiveExpr (XPathReader.java:913)     at org.jaxen.saxpath.base.XPathReader.relationalExpr (XPathReader.java:860)     at org.jaxen.saxpath.base.XPathReader.equalityExpr (XPathReader.java:829)     at org.jaxen.saxpath.base.XPathReader.andExpr (XPathReader.java:809)     at org.jaxen.saxpath.base.XPathReader.orExpr (XPathReader.java:787)     at org.jaxen.saxpath.base.XPathReader.expr (XPathReader.java:780)     at org.jaxen.saxpath.base.XPathReader.parse (XPathReader.java:100)     at org.jaxen.BaseXPath. (BaseXPath.java:116)     at org.jaxen.BaseXPath. (BaseXPath.java:142)     at net.sourceforge.pmd.lang.ast.AbstractNode.findChildNodesWithXPath (AbstractNode.java:527)     at net.sourceforge.pmd.lang.ast.AbstractNode.hasDescendantMatchingXPath (AbstractNode.java:534)     at net.sourceforge.pmd.lang.rule.ParametricRuleViolation.setSuppression (ParametricRuleViolation.java:75)     at net.sourceforge.pmd.lang.rule.ParametricRuleViolation. (ParametricRuleViolation.java:58)     at net.sourceforge.pmd.lang.java.rule.JavaRuleViolation. (JavaRuleViolation.java:53)     at net.sourceforge.pmd.lang.java.rule.JavaRuleViolationFactory.createRuleViolation (JavaRuleViolationFactory.java:30)     at net.sourceforge.pmd.lang.rule.AbstractRuleViolationFactory.addViolation (AbstractRuleViolationFactory.java:37)     at net.sourceforge.pmd.lang.rule.AbstractRule.addViolation (AbstractRule.java:359)     at net.sourceforge.pmd.lang.rule.XPathRule.evaluate (XPathRule.java:178)     at net.sourceforge.pmd.lang.rule.XPathRule.apply (XPathRule.java:158)     at net.sourceforge.pmd.lang.internal.DefaultRulechainVisitor.visit (DefaultRulechainVisitor.java:26)     at net.sourceforge.pmd.lang.rule.AbstractRuleChainVisitor.visitAll (AbstractRuleChainVisitor.java:99)     at net.sourceforge.pmd.RuleChain.apply (RuleChain.java:72)     at net.sourceforge.pmd.RuleSets.apply (RuleSets.java:145)     at net.sourceforge.pmd.SourceCodeProcessor.processSource (SourceCodeProcessor.java:194)     at net.sourceforge.pmd.SourceCodeProcessor.processSourceCodeWithoutCache (SourceCodeProcessor.java:107)     at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode (SourceCodeProcessor.java:89)     at net.sourceforge.pmd.SourceCodeProcessor.processSourceCode (SourceCodeProcessor.java:51)     at net.sourceforge.pmd.processor.PmdRunnable.call (PmdRunnable.java:78)     at net.sourceforge.pmd.processor.PmdRunnable.call (PmdRunnable.java:24)     at java.util.concurrent.FutureTask.run (FutureTask.java:266)     at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:511)     at java.util.concurrent.FutureTask.run (FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1149)     at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)     at java.lang.Thread.run (Thread.java:748) [INFO] Analysis cache created [WARNING] There are 1 PMD processing errors: [WARNING] /home/travis/build/checkstyle/checkstyle/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java: RuntimeException: XPath expression //ClassOrInterfaceDeclaration[@SimpleName='AssertGeneratedJavaLexer']                         //MethodDeclaration[@Name='LA']                     | //ClassOrInterfaceDeclaration[@SimpleName='AssertGenTextBlockLexer']                      //MethodDeclaration[@Name='LA' failed: Expected: ] ```","closed","miscellaneous,","romani","2020-08-23T00:12:20Z","2020-08-26T05:55:33Z"
"","8606","xml-maven-plugin validation should not validate '.ci-temp' folder","Build might fail at xml-maven-plugin validation if there is some untracked xml files in repo in my case it was `.ci-temp` folder that is leftover from regression execution.  ``` ✔ ~/java/github/romani/checkstyle [master L|✔]  $ ./.ci/pitest.sh pitest-common-2 [INFO] Error stacktraces are turned on. [INFO] Scanning for projects... [INFO] Inspecting build with total of 1 modules... [INFO] Installing Nexus Staging features: [INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin [INFO]  [INFO] ------------------< com.puppycrawl.tools:checkstyle >------------------- [INFO] Building checkstyle 8.36-SNAPSHOT [INFO] --------------------------------[ jar ]--------------------------------- [INFO]  ...... [INFO]  [INFO] --- xml-maven-plugin:1.0.2:check-format (default) @ checkstyle --- [ERROR] /home/rivanov/java/github/romani/checkstyle/./.ci-temp/checks-only-javadoc-error.xml:14,70:  Delete 2 spaces. Expected 4 found 6 spaces before start element  [ERROR] /home/rivanov/java/github/romani/checkstyle/./.ci-temp/trunk/native/linux/ latest/usr/share/mime/packages/josm-latest.xml:3,49:  Delete 6 spaces. Expected 2 found 8 spaces before start element  .... ```","closed","miscellaneous,","romani","2020-08-05T13:33:31Z","2020-08-07T06:29:39Z"
"","8969","remove commit rules from PR description","based on conversation at https://github.com/checkstyle/checkstyle/pull/8565#issuecomment-723452621  We can try experimental reduction of text in PR description to be less verbose. I see trend that it does not work, I might forgot how bad it was without it :),  but it is true that it is too late to warn user on commit message as all is done by user, and he can change it after PR creation.","open","","romani","2020-11-07T15:47:22Z","2020-11-07T20:10:49Z"
"","8286","Remove rss and sourceforge banners from website","base on https://github.com/checkstyle/checkstyle/issues/7521#issuecomment-636481431 we need to remove from our web site badges to sourceforge and rss.  Sourceforge banner is removed because we moving from sourceforge to github, after RSS is deprecared, Sourceforge is backup hosting of website only. We still have historic web sites (for each version) on sourceforege, but only this, till we decide how to move it to github.  TODO:  - remove banners - update release notes generator in CI to not generate mail-thread content. We might keep RSS output (it is the same as mail-thread) to easy to read view of release notes as I sometime change issue titles to make them more reasonable on what is changed. - remove rss/mail-list from https://github.com/checkstyle/checkstyle/wiki/How-to-make-a-release#announcements [DONE]","closed","miscellaneous,","romani","2020-05-31T15:07:09Z","2020-06-04T14:06:14Z"
"","8838","Bad name of modules in metadata for JavaNCSS and NPathComplexity","Bad names of Checks in metadata files: ![image](https://user-images.githubusercontent.com/812984/93668807-f47ff200-fa43-11ea-951b-679b71c9670a.png)  Expected names same as in html doc: Java NCSS NPath Complexity  https://checkstyle.org/config_metrics.html#NPathComplexity https://checkstyle.org/config_metrics.html#JavaNCSS","closed","","romani","2020-09-19T13:49:57Z","2020-09-19T13:53:19Z"
"","8459","Remove pull request trigger from diff report generation action","At the moment, github action for diff report generation is triggered by PR changes and comment addition. Pull request trigger for report generation causes failure in job - no aws credentials found, because github secrets are not shared with forks. Comment trigger works fine. Pull request should be removed and only comment trigger is left.","closed","miscellaneous,","strkkk","2020-07-15T13:12:23Z","2020-07-16T06:20:35Z"
"","8539","Change diff report generation pipeline logic to trigger to single comment","At the moment there are 2 triggers diff report - triggers generation of diff report for one or two configs single report - triggers generation of report only for patch branch  Desired behavior 1. Trigger is changed to only one, with text ""GitHub, generate report"" 2. Report logic should be changed to if description has   - ""New module config:"" - than this config is taken to generate report only for patch branch - ""Diff Regression config:"" - than config is taken to generate usual diff report - ""Diff Regression config:"" and ""Diff Regression patch config"": - than first config is taken for master branch, second is for patch branch.  Also update of [documentation](https://github.com/checkstyle/contribution/tree/master/checkstyle-tester#executing-generation) is necessary","closed","miscellaneous,","strkkk","2020-07-20T11:37:04Z","2020-07-25T13:35:03Z"
"","8328","Change name of checkstyle types to match real java types","as we agreed at https://github.com/checkstyle/checkstyle/pull/8305#discussion_r436750608 discussed at https://github.com/checkstyle/checkstyle/issues/8311  we need to change names of our types in html(xdoc) documentations, it will not be change in functionality, just make naming for exact.  https://checkstyle.org/property_types.html  **Types:** | old name  | new name  | Comment  | |---        |---        |---        | | integer   |  int,Integer,float,.....   | we create bunch of new types that we actually support, all primitives and their java types.    | | string    | String    | in javadoc name is java.lang.String, in xdoc should be short `String`  | | boolean   | boolean,Boolean   | in javadoc name should java.lang.Boolean, in xdoc should be `Boolean`  | | stringSet  | String[]  | It is comma separated and trimmed Strings. [RelaxedStringArrayConverter](https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L358)  | |  intSet | char[], byte[], short[], int[], float[],double[]  | we should be be clear what Check is actually using in its setter  | | regexp   | Pattern  | there special [converter](https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L298), but does simple `java.util.regex.Pattern` instantiation. in javadoc `java.util.regex.Pattern` in xdoc `Pattern`  | | uri   |  Uri | in description of type .... as there is special [converter](https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L331) with custom logic on priority to match resource, details are at [doc](https://checkstyle.org/property_types.html#uri)  | |  file |  File |  let's keep it, we can not come to agreement on it, it is used only ones at Checker.cacheFile, and actual type of this property is `String`, [code](https://github.com/checkstyle/checkstyle/blob/c42a0e1b63c33400e05c98b62179cf303724e525/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L148) | | lineSeparator  |  LineSeparatorOption | Check do conversion to enum LineSeparatorOption by 'Enum.valueOf', javadoc should have fully qualified name, xdoc short name of enum  | | parenPad   |  PadOption | com.puppycrawl.tools.checkstyle.checks.whitespace.PadOption name is javadoc and short name in xdoc  | | wrapOp  | WrapOption  |  com.puppycrawl.tools.checkstyle.checks.whitespace.WrapOption name in javadoc and short name in Xdoc | | block  | BlockOption  | com.puppycrawl.tools.checkstyle.checks.blocks.BlockOption name in javadoc and BlockOption in xdoc  | | lcurly  | LeftCurlyOption  |  com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyOption name in javadoc and BlockOption in xdoc | | rcurly  | RightCurlyOption  | com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption name in javadoc and BlockOption in xdoc  | | scope  |  Scope | in javadoc new name `com.puppycrawl.tools.checkstyle.api.Scope` in xdoc `Scope`. even there is custom converter, it does simple instantiation of Scope enum.  | | access_modifiers  | AccessModifierOption[]  |  [special convert](https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L383) is used  | | severity  | SeverityLevel  | in javadoc `com.puppycrawl.tools.checkstyle.api.SeverityLevel` in xdoc SeverityLevel. there is custom converter, it does simple instantiation of SeverityLevel enum. | | importOrder  |  ImportOrderOption |  com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderOption name is javadoc and short name in xdoc | | elementStyle | ElementStyleOption  |  com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.ElementStyle name is javadoc and short name in xdoc | | closingParens  | ClosingParensOption  |  com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.ClosingParens name is javadoc and short name in xdoc | | trailingArrayComma  | TrailingArrayCommaOption  | com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.TrailingArrayComma name is javadoc and short name in xdoc  | | javadocContentLocation  |  JavadocContentLocationOption | com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocContentLocationOption name is javadoc and short name in xdoc |  We should update https://checkstyle.org/property_types.html to mention exact name of classes and probably event provide link to source.  We should sort type alphabetically to ease search by users (as last PR)  For enums we will be honest  - type is `String. Value of ClosingParens`. `tokens` - `String[]. Subset of tokens .....` [code](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java#L95).  In metadata we can put extra property `values-provider` and set it as enum type fully qualified name, to let plugins get all possible values. Property `tokens` should be special property and plugins should know about it and get all values from Check instance.  **Attention**: AnnotationUseStyleCheck has 3 inner enums that are listed here.  converters are at https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L117  custom types converters - https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L163","closed","miscellaneous,","romani","2020-06-20T22:36:10Z","2020-07-29T04:15:01Z"
"","8311","Change name of checkstyle types to be close to real java types","as we agreed at https://github.com/checkstyle/checkstyle/pull/8305#discussion_r436750608  we need to change names of our types in html(xdoc) documentations, it will not be change in functionality, just make naming for exact.  https://checkstyle.org/property_types.html  **Types:** | old name  | new name  | Comment  | |---        |---        |---        | | integer   |  numeric  | it is **not** Integer, it is all numerical types (byte,short,int,long,float, double, and their class type analogs), there is NO BigDecimal, BigInteger support.    | | string    | String    | in javadoc name is java.lang.String, in xdoc should be short `String`  | | boolean   | Boolean   | in javadoc name should java.lang.Boolean, in xdoc should be `Boolean`  | | stringSet  | stringColllection  | It is comma separated and trimmed Strings. [RelaxedStringArrayConverter](https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L358)  | |  intSet | numericCollection  | It is primitive type arrays only byte[], short[], ......., no array of types support.  | | regexp   | Pattern  | there special [converter](https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L298), but does simple `java.util.regex.Pattern` instantiation. in javadoc `java.util.regex.Pattern` in xdoc `Pattern`  | | uri   |  uri | should stay the same, as there is special [converter](https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L331) with custom logic on priority to match resource, details are at [doc](https://checkstyle.org/property_types.html#uri)  | |  file |  -- |  this type need to be removed as it is used only ones at Checker.cacheFile, and actual type of this property is `String`, [code](https://github.com/checkstyle/checkstyle/blob/c42a0e1b63c33400e05c98b62179cf303724e525/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L148) | | lineSeparator  |  LineSeparatorOption | Check do conversion to enum LineSeparatorOption by 'Enum.valueOf', javadoc should have fully qualified name, xdoc short name of enum  | | parenPad   |  PadOption | com.puppycrawl.tools.checkstyle.checks.whitespace.PadOption name is javadoc and short name in xdoc  | | wrapOp  | WrapOption  |  com.puppycrawl.tools.checkstyle.checks.whitespace.WrapOption name in javadoc and short name in Xdoc | | block  | BlockOption  | com.puppycrawl.tools.checkstyle.checks.blocks.BlockOption name in javadoc and BlockOption in xdoc  | | lcurly  | LeftCurlyOption  |  com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyOption name in javadoc and BlockOption in xdoc | | rcurly  | RightCurlyOption  | com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption name in javadoc and BlockOption in xdoc  | | scope  |  Scope | in javadoc new name `com.puppycrawl.tools.checkstyle.api.Scope` in xdoc `Scope`. even there is custom converter, it does simple instantiation of Scope enum.  | | access_modifiers  | accessModifierCollection  |  [special convert](https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L383) is used  | | severity  | SeverityLevel  | in javadoc `com.puppycrawl.tools.checkstyle.api.SeverityLevel` in xdoc SeverityLevel. there is custom converter, it does simple instantiation of SeverityLevel enum. | | importOrder  |  ImportOrderOption |  com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderOption name is javadoc and short name in xdoc | | elementStyle | ElementStyle  |  com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.ElementStyle name is javadoc and short name in xdoc | | closingParens  | ClosingParens  |  com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.ClosingParens name is javadoc and short name in xdoc | | trailingArrayComma  | TrailingArrayComma  | com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.TrailingArrayComma name is javadoc and short name in xdoc  | | javadocContentLocation  |  JavadocContentLocationOption | com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocContentLocationOption name is javadoc and short name in xdoc |  We should update https://checkstyle.org/property_types.html to mention exact name of classes and probably event provide link to source.  We should sort type alphabetically to ease search by users (as last PR)  **Attention**: AnnotationUseStyleCheck has 3 inner enums that are listed here.  converters are at https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L117  custom types converters - https://github.com/checkstyle/checkstyle/blob/2e8c277c181487d81231170ff4b959edc008114e/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L163","closed","","romani","2020-06-10T13:25:55Z","2020-06-20T22:43:54Z"
"","8264","Increase font size for website","As menttioned [here](https://github.com/checkstyle/checkstyle/issues/8244#issuecomment-632704253) the general font size fo the documentation is an issue. If this issue is approved I can start a PR.","closed","miscellaneous,","jo2","2020-05-28T10:43:57Z","2020-06-30T15:51:18Z"
"","8169","Making regex to validate missed space in comments in non main files","As mentioned in https://github.com/checkstyle/checkstyle/pull/8164#discussion_r412945036. Like","closed","miscellaneous,","HuGanghui","2020-04-22T14:38:24Z","2020-05-21T10:06:47Z"
"","8533","To Top Button on website","As mentioned in #8244 a button which scrolls to the top of the page would be nice.","closed","miscellaneous,","jo2","2020-07-17T13:30:16Z","2020-07-25T13:31:52Z"
"","8244","Expandable menu for mobile website","As mentioned below, during the implementation of the mobile version of the checkstyle website there were thoughts about having the menu being expandable. Is this stil something wanted? If so, I can take a look at it.  ""Let's think about expandable menu in separate issue""  _Originally posted by @romani in https://github.com/checkstyle/checkstyle/issues/7083#issuecomment-554383874_  Demo: https://jo2.github.io/checkstyle-menu-suggestion/","open","approved,","jo2","2020-05-18T07:33:50Z","2020-09-01T11:27:44Z"
"","8864","Use .ci/validation.cmd in appveyor ci","Appveyor and Cirrus should share one script for validation. Cirrus already uses `.ci/validation.cmd`, we need to update Appveyour only.  Wiki (and xdocs?) should be updated with some readme for this script.   Based on https://github.com/checkstyle/checkstyle/pull/8841#discussion_r492023797","closed","CI,","pbludov","2020-09-30T14:31:27Z","2020-10-01T14:10:52Z"
"","8789","support force load config on classpath by ""classpath:"" prefix (like spring)","and if start with '/' then skip URL logic","closed","","qxo","2020-09-05T04:08:07Z","2021-01-16T16:22:13Z"
"","8881","Allow single-line if blocks with curly brackets","Allow single-line if blocks with curly brackets  ``` $ javac CheckStyle8881.java  $  $ cat checkstyle-8881.xml                                                                 $ cat CheckStyle8881.java  /**  * There isn't a configuration combination that allows for a simple single-line  *   * if (condition) { statement; }  *   * While also requiring LeftCurly eol for method definitions.  */ class CheckStyle8881 {      void method0() { System.out.println(""method""); } // ""should have line break after. [LeftCurly]"", ""should be alone on a line. [RightCurly]""      void method1() {         if (System.out == null) { return; }     }      void method2() {         if (System.out == null) { int i = 0; return; // ""should have line break after. [LeftCurly]""         } else {             System.out.println();             System.out.println();         }     } }  # with LeftCurly=eol : $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.36.2-all.jar -c checkstyle-8881.xml CheckStyle8881.java  Starting audit... [ERROR] ~/tmp/CheckStyle8881.java:10:20: '{' at column 20 should have line break after. [LeftCurly] [ERROR] ~/tmp/CheckStyle8881.java:10:52: '}' at column 52 should be alone on a line. [RightCurly] [ERROR] ~/tmp/CheckStyle8881.java:13:33: '{' at column 33 should have line break after. [LeftCurly] [ERROR] ~/tmp/CheckStyle8881.java:17:33: '{' at column 33 should have line break after. [LeftCurly] Audit done. Checkstyle ends with 4 errors.  # with LeftCurly=nlow $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.36.2-all.jar -c checkstyle-8881.xml CheckStyle8881.java  Starting audit... [ERROR] ~/tmp/CheckStyle8881.java:10:52: '}' at column 52 should be alone on a line. [RightCurly] Audit done. Checkstyle ends with 1 errors. ``` ---------------  I seek a configuration that allows for simple single-line condition while also requiring While also requiring LeftCurly eol for method definitions.  --------------  # Earlier feature request content  **Is your feature request related to a problem? Please describe.** I would like checkstyle (perhaps the `LeftCurly` check) to permit an if-block to accept a one-line then-block that is encased in curly brackets.  **Describe the solution you'd like** This is an extension conceptually to the single-line if statement. I'm not sure how it would be described, maybe as an option to the `LeftCurly` check.  As an example, ```java if (condition) { statement; } ```  The above solicits a complaint from the `LeftCurly` check, saying an EOL was expected after the `{` character.  **Additional context** This style is useful for some situations where an early return is desired (if indeed you subscribe to that philosophy). For example, a [double-checked lock](https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java) with early exit instead of deep-nesting could be more concise using single-line conditional as described above.","closed","","ndimiduk","2020-10-05T23:53:18Z","2022-03-28T07:06:39Z"
"","8657","Modification of javadoc example markers to support metadata generation","All the markers will be modified to  - `To configure the check...` or  - `To configure the default check...` to satisfy the javadoc scraper.","open","miscellaneous,","gaurabdg","2020-08-11T17:17:27Z","2020-08-12T03:20:38Z"
"","8951","Remove Buddy CI config","all details on why this CI does not work for us at https://github.com/checkstyle/checkstyle/issues/5473  unfortunately we are development mode to be ready for release at any commit (as soon as fix merged to master we can do release, almost done CI/CD), so we need to validate all by CIs in PR.  with our level of PR rate, we will quickly use quote.  so it might be good CI for master only build. I did not find for 2 years light tasks (keep in mind limit of memory) that we can execute periodically after merge is done.  We might come back to this CI but for now lets remove it.","closed","miscellaneous,","romani","2020-11-01T14:13:28Z","2020-11-07T06:14:00Z"
"","8792","minor: fix validationType for memberModifiers in IllegalType","additional fix for #8785","closed","","gaurabdg","2020-09-05T23:49:07Z","2020-09-06T03:23:20Z"
"","8738","Remove BlockCommentPosition test input files from checkstyle_input_suppressions.xml","Adding this exclude here will allow us to remove all `**/blockcommentposition/**.*` suppressions from `checkstyle_input_suppressions.xml`.  _Originally posted by @nmancus1 in https://github.com/checkstyle/checkstyle/pull/8737/review_comment/create_  Since we have added all input files for `BlockCommentPosition` to the excludes for `ant-phase-verify.xml ` checkstyle input file run, we can remove these files from `checkstyle_input_suppressions.xml`.  These input files require no configuration or ""ok"" and ""violation"" comments, so this test does not apply to them.","closed","miscellaneous,","nick-mancuso","2020-08-20T21:57:51Z","2020-08-25T04:25:51Z"
"","9000","Issue #8973: RequireThis: Add input for final instance variable","Add input as discussed in #8973","closed","","anhminhtran235","2020-11-20T02:05:57Z","2020-11-22T15:58:09Z"
"","8146","Issue #7604: Update doc NonEmptyAtclauseDescriptionCheck","add default example","closed","","ImmortalRabbit","2020-04-21T08:59:08Z","2020-11-13T21:35:22Z"
"","8787","force compile package-info.java which will make build fast by Incremental Compilation","add compilerArg `-Xpkginfo:always` for useIncrementalCompilation which make build fast  useIncrementalCompilation will not work for some java not compiled (package-info.java). try `mvn package -X ` will find thest files by key word ""recompiling the module!""  maven will not compile package-info.java without any annotation with Retention=RUNTIME  ref: https://stackoverflow.com/questions/6770455/maven-compiling-package-info-java-to-package-info-class https://github.com/jenkinsci/jenkins/pull/4759","closed","awaiting response,","qxo","2020-09-05T03:27:10Z","2020-10-04T13:53:47Z"
"","8830","doc: add checkstyle github action to related tools","Add checkstyle github actions to related tools. ![image](https://user-images.githubusercontent.com/48255244/93020659-e1ac8e00-f5fb-11ea-9ab4-d4648375678a.png)","closed","","Abhishek-kumar09","2020-09-13T13:39:08Z","2020-09-19T14:45:02Z"
"","8205","fix all false-negatives about there is no single space between a type annotation and [] or .... for Google Style","According to the latest Google Style  https://checkstyle.org/styleguides/google-java-style-20180523/javaguide.html#s4.6.2-horizontal-whitespace,   > Between a type annotation and [] or ....  So valid cases are: `String...` `String[]`, `String @NotNull []`, `String @NotNull ...` Invalid cases: `String ...` `String []`, `String @NotNull[]`, `String @NotNull...`  As we removing ELIPSIS token from config in #6707 to avoid false-positives (unwanted violations) We need to make new Check to address cases above and do not make any false-positives, as general Check `NoWhitespaceBefore` should not be over complicated with nuances of annotations before token.  $ cat Test.java  ```java import java.lang.annotation.ElementType; import java.lang.annotation.Target;  public class Test {    @Target(ElementType.TYPE_USE)   @interface NonNull {   }    @NonNull int @NonNull[] @NonNull[] fiel1; // false-negative   @NonNull int @NonNull [] @NonNull [] field2;   //@NonNull int @NonNull ... field3; // non-compilable   //@NonNull int @NonNull... field4; // non-compilable     public void foo2(final char[] param) {   }    public void foo1(final char [] param) {   }    public void foo3(final char @NonNull[] param) { // false-negative   }    public void foo4(final char @NonNull [] param) {   }    void test4(String... param) {    }    void test3(String ... param) { // violation on 8.32, no violation is #6707 fixes   }    void test2(String @NonNull... param) { // false-negative   }    void test1(String @NonNull ... param) { // violation on 8.32, no violation aft #6707   } } ``` $ java -jar /var/tmp/checkstyle-8.32-all.jar -c /google_checks.xml Test.java  Starting audit... [WARN] /var/tmp/Test.java:31:21: '...' is preceded with whitespace. [NoWhitespaceBefore] [WARN] /var/tmp/Test.java:37:30: '...' is preceded with whitespace. [NoWhitespaceBefore] Audit done.","open","","HuGanghui","2020-04-28T16:00:37Z","2021-04-25T13:53:48Z"
"","8725","Comments in indentation is failing ci/phase-verification/unit-tests","According to new rules:  `All check input files in the 'src/(it|test)/resources*/' folder must have trailing comments ""// ok"" and/or ""// violation"". [Regexp]` Not doing it, creates problems in `checkstyle:ant-phase-verify` with the warning above.  **Also** Every line under indentation test should end with `actual and expected indent (like: // indent:20 exp:20)`.  This is creating conflicts with each other.  --------------------------------------------------------------------------------- When I **put** indentation comment after `// ok`, `ant-phase-verify` is reporting errors, and when I **remove** the indentation comments from trailing comment (`// ok`), then `IndentationCheckTest` is raising issue with warning message below. `java.lang.IllegalStateException: File ""checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationLambda6.java"" has no indentation comment or its format malformed. Error on line: 92`    **code reference**  https://github.com/checkstyle/checkstyle/blob/3ee42d3deb541e191cf270aa6027a5cec137649e/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java#L99","closed","miscellaneous,","Abhishek-kumar09","2020-08-20T05:47:27Z","2020-09-13T05:19:56Z"
"","8050","Would it be possible to support non-ASCII characters in identifiers?","According to [Checkstyle's limitations](https://checkstyle.org/writingchecks.html#Limitations), checkstyle does not support UTF-8 characters, and indeed [the grammar](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammar/javadoc/JavadocLexer.g4#L267-L269) defines an overly simple regex for recognizing identifiers.  But it's not quite true that checkstyle doesn't support _any_ UTF-8 though, since UTF-8 characters in strings or comments are matched by the `.` regex and are therefore silently accepted.  Per [the JLS, section 3.8](https://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.8), identifiers are richer than the simple `[A-Za-z_$][0-9A-Za-z_$]*` regex defined in JavadocLexer.g4.  I think a closer regex that's compatible with Antlr's [Lexer rule elements](https://github.com/antlr/antlr4/blob/master/doc/lexer-rules.md#lexer-rule-elements) would be  ``` fragment JavaIdentStart: [\p{N}\p{L}\p{Sc}\p{Pc}]; fragment JavaIdentPart: [\p{N}\p{L}\p{Sc}\p{Pc}\p{M}]; fragment Identifier: JavaIdentStart (JavaIdentPart)*; ```  I see that there are prior issues similar to this (mainly #4562), but I guess my question is, if it's technically feasible and not too difficult to fix the definition of `Identifier` above to be more faithful to the JLS, why should this limitation continue?  If this is simply a hard rule that checkstyle insists upon, feel free to close this issue as a duplicate, but it seems like an odd inconsistency to enforce.","closed","miscellaneous,","blerner","2020-04-08T18:43:35Z","2021-08-14T13:56:26Z"
"","8096","It is impossible to get sorted import grouping with separation","A very simple import policy that was previously possible to enforce in older versions of Checkstyle is seemingly no longer possible.  Here's the policy: * Normal imports before static imports * Imports sorted alphabetically (case-sensitive/ASCII) * Group imports by first domain component * Single blank line between groups  I used to have a recipe for this that worked. With newer checkstyle, it seems impossible.  I've tried both `ImportOrder` and `CustomImportOrder`.  ``` $ cat Class1.java package io.foobar;  import com.sun.org.apache.xpath.internal.operations.Bool;  import io.foobar.janfu.Class2;  import java.util.Map; import java.util.Set;  public class Class1 { } ``` ``` $ cat Class2.java package io.foobar.janfu;  public class Class2 { } ``` ``` $ cat config1.xml                                                                                  ``` ``` $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.31-all.jar -c=config1.xml Class*.java Starting audit... [ERROR] /Users/archie/checkstyle-bug/Class1.java:5:1: Extra separation in import group before 'io.foobar.janfu.Class2' [ImportOrder] [ERROR] /Users/archie/checkstyle-bug/Class1.java:7:1: Extra separation in import group before 'java.util.Map' [ImportOrder] Audit done. Checkstyle ends with 2 errors. ``` ``` $ cat config2.xml                                                                                   ``` ``` $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.31-all.jar -c=config2.xml Class*.java Starting audit... [ERROR] /Users/archie/checkstyle-bug/Class1.java:5: Import statement for 'io.foobar.janfu.Class2' is in the wrong order. Should be in the 'SAME_PACKAGE' group, expecting not assigned imports on this line. [CustomImportOrder] [ERROR] /Users/archie/checkstyle-bug/Class1.java:7: Extra separation in import group before 'java.util.Map' [CustomImportOrder] Audit done. Checkstyle ends with 2 errors. ```  Expected: both runs to pass.  Actual: both runs fail.","open","","archiecobbs","2020-04-13T23:29:26Z","2020-04-25T23:08:12Z"
"","8839","Update eclipse compiler to R17","A new version of the Eclipse compiler was recently [released](https://www.eclipse.org/eclipse/news/4.17/jdt.php)  Now with full support for java 15 features including records and sealed classes.  Commands to get new options https://github.com/checkstyle/checkstyle/pull/8840#issuecomment-695817569  The build will fail as `R-4.11-201903070500` was removed from the repo: http://ftp-stud.fht-esslingen.de/pub/Mirrors/eclipse/eclipse/downloads/drops4/  ```   | R-4.15-202003050155/ | 2020-03-18 14:29 | - |     | R-4.16-202006040540/ | 2020-08-06 09:42 | - |     | R-4.17-202009021800/ | 2020-09-16 16:00 | - |     | index.html | 2015-03-16 23:21 | 60 |   ```","closed","CI,","pbludov","2020-09-20T13:01:42Z","2020-09-22T12:00:30Z"
"","8134","no-exception-test-guava should be removed from travis.sh","`no-exception-test-guava` option should be removed from `travis.sh` script,  since it has now been split into two other options: `no-exception-test-guava-with-google-checks` and `no-exception-test-guava-with-sun-checks` and is no longer called from `.travis.yml`.","closed","","nick-mancuso","2020-04-19T13:49:05Z","2021-12-19T23:05:56Z"
"","8039","Xpath-Suppression is not working for Indentation","`generate-xpath-suppression` is not working for Indentation. ```xml $ cat config.xml                                                 ``` ```java $ cat Test.java class Test {     void indentationTest() {     int indent = 0;      } } ``` ``` $ java -jar checkstyle-8.30-all.jar -g -c config.xml Test.java Checkstyle ends with 1 errors. ```  All modules except Indentation can generate their `xpath-suppression` as usual. A correctly generated XPath-suppression looks like : ```xml $ cat config.xml                                                 ``` ```java $ Test.java class Test {   void otherTestIsWorking() {     int whitespace = 0  ;   } } ``` ```bash $ java -jar checkstyle-8.30-all.jar -g -c config.xml Test.java      Checkstyle ends with 1 errors. ```","closed","","Abhishek-kumar09","2020-04-05T17:45:20Z","2020-04-16T19:40:51Z"
"","8104","Redundant checking of file in ant task","```mvn compile antrun:run@ant-phase-verify``` ``` main:  execute:      [echo] Checkstyle started (checkstyle_checks.xml): 15/04/2020 02:04:21 PM [checkstyle] Running Checkstyle  on 1145 files [checkstyle] [ERROR] C:\Users\Shashwat\checkstyle\src\it\java\org\checkstyle \suppressionxpathfilter\XpathRegressionInterfaceMemberImpliedModifierTest.java:1:  File does not end with a newline. [NewlineAtEndOfFile]      [echo] Checkstyle finished (checkstyle_checks.xml) : 15/04/2020 02:04:23 PM      [echo] Checkstyle started (checkstyle_non_main_files_checks.xml): 15/04/2020  02:04:21 PM [checkstyle] Running Checkstyle  on 2070 files [checkstyle] [ERROR] C:\Users\Shashwat\checkstyle\src\it\java\org\checkstyle\ suppressionxpathfilter\XpathRegressionInterfaceMemberImpliedModifierTest.java:1:  File does not end with a newline. [NewlineAtEndOfFile] [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ ```  The same file, namely ```XpathRegressionInterfaceMemberImpliedModifierTest.java``` is being checked for the same violation twice. This is inefficient and redundant.","closed","","shashwatj07","2020-04-15T08:38:14Z","2020-11-14T16:39:17Z"
"","8734","Compact Constructor AST is missing annotations","``` ➜  src cat TestClass.java  record MyRecord() {     @Deprecated     public MyRecord {     } }  class TestClass {     @Deprecated     public TestClass() {     } }  ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.36-SNAPSHOT-all.jar -t TestClass.java RECORD_DEF -> RECORD_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |--LITERAL_RECORD -> record [1:0] |--IDENT -> MyRecord [1:7] |--LPAREN -> ( [1:15] |--RECORD_COMPONENTS -> RECORD_COMPONENTS [1:16] |--RPAREN -> ) [1:16] `--OBJBLOCK -> OBJBLOCK [1:18]     |--LCURLY -> { [1:18]     |--COMPACT_CTOR_DEF -> COMPACT_CTOR_DEF [3:4]     |   |--MODIFIERS -> MODIFIERS [3:4]     |   |   `--LITERAL_PUBLIC -> public [3:4]     |   |--IDENT -> MyRecord [3:11]     |   `--SLIST -> { [3:20]     |       `--RCURLY -> } [4:4]     `--RCURLY -> } [5:0] CLASS_DEF -> CLASS_DEF [7:0] |--MODIFIERS -> MODIFIERS [7:0] |--LITERAL_CLASS -> class [7:0] |--IDENT -> TestClass [7:6] `--OBJBLOCK -> OBJBLOCK [7:16]     |--LCURLY -> { [7:16]     |--CTOR_DEF -> CTOR_DEF [8:4]     |   |--MODIFIERS -> MODIFIERS [8:4]     |   |   |--ANNOTATION -> ANNOTATION [8:4]     |   |   |   |--AT -> @ [8:4]     |   |   |   `--IDENT -> Deprecated [8:5]     |   |   `--LITERAL_PUBLIC -> public [9:4]     |   |--IDENT -> TestClass [9:11]     |   |--LPAREN -> ( [9:20]     |   |--PARAMETERS -> PARAMETERS [9:21]     |   |--RPAREN -> ) [9:21]     |   `--SLIST -> { [9:23]     |       `--RCURLY -> } [10:4]     `--RCURLY -> } [11:0]  ``` I would expect the AST of the COMPACT_CTOR_DEF to resemble that of the CTOR_DEF AST, where the ANNOTATION node is a child of the MODIFIERS node.  This issue stems form the fact that our grammar catches the annotations and does not allow the modifiers rule to handle them:   https://github.com/checkstyle/checkstyle/blob/c4d29ecde83c60628bb7510fdaa0bb7bbfd31264/src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g#L613  This reference to the `annotations` rule needs to be removed.  I discovered this bug when working on the check update for `AtclauseOrder`.","closed","antlr,","nick-mancuso","2020-08-20T20:20:09Z","2020-08-22T15:23:43Z"
"","8944","Checkstyle fails on Nested","``` ➜  src /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 NestedTypes.java                                    ➜  src cat NestedTypes.java  import java.lang.annotation.*;  class Outer {     class Inner {         class Inner2 {         }     }      class GInner {         class GInner2 {}     }      static class Static {}     static class GStatic {         static class GStatic2 {}     } }  class Test1 {     @A Outer . @B GInner.@G GInner2 @J[] @K[] f4arrtop; }   class MyList { }   @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface A { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface B { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface C { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface D { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface E { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface F { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface G { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface H { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface I { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface J { } @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER}) @interface K { } ➜  src java -jar /home/nick/IdeaProjects/checkstyle/target/checkstyle-8.37-SNAPSHOT-all.jar -t NestedTypes.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: IllegalStateException occurred while parsing file /home/nick/Desktop/enhanced-switch/src/NestedTypes.java.         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120)         at com.puppycrawl.tools.checkstyle.JavaParser.parseFileText(JavaParser.java:137)         at com.puppycrawl.tools.checkstyle.JavaParser.parseFile(JavaParser.java:157)         at com.puppycrawl.tools.checkstyle.AstTreeStringPrinter.printFileAst(AstTreeStringPrinter.java:65)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:284)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: java.lang.IllegalStateException:  areLtsAndGtsBalanced(currentLtLevel)         at com.puppycrawl.tools.checkstyle.JavaParser$1.reportError(JavaParser.java:108)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:424)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:212)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114)         ... 6 more Caused by:  areLtsAndGtsBalanced(currentLtLevel)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeArguments(GeneratedJavaRecognizer.java:1374)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classOrInterfaceType(GeneratedJavaRecognizer.java:1148)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classTypeSpec(GeneratedJavaRecognizer.java:887)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeArgument(GeneratedJavaRecognizer.java:1415)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeArguments(GeneratedJavaRecognizer.java:1326)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classOrInterfaceType(GeneratedJavaRecognizer.java:1148)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classTypeSpec(GeneratedJavaRecognizer.java:887)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeSpec(GeneratedJavaRecognizer.java:849)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3119)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:3415)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:646)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:561)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:402)         ... 8 more Checkstyle ends with 1 errors.  ```","closed","","nick-mancuso","2020-10-30T19:29:03Z","2020-10-30T19:51:45Z"
"","8231","[IndentCheck] check for wrapped method calls is broken when forceStrictCondition is enabled","``` /var/tmp/ $ javac Test.java  /var/tmp/ $ cat config.xml                             /var/tmp $ cat Test.java import java.util.*; import java.util.function.*; import java.util.stream.*;  public final class Test {      public static void main(final String[] args) {          final BinaryOperator appendString             = (a, b) -> a + b;          // valid on single call (correct)         final String valid = String.format(""some text to force wrapping: %s"",             appendString);          // valid on single call (should be invalid)         final String invalidIsValid = String             .format(""some text to force wrapping: %s"",             appendString);          // invalid on single call (should be valid)         final String invalid = String             .format(""some text to force wrapping: %s"",                 appendString);          final List list = new ArrayList();          // valid on chain (correct)         list.stream().reduce(""a long string to force wrapping for the 2nd arg"",             appendString);          // invalid on chain (correct)         list.stream()             .reduce(""a long string to force wrapping for the 2nd arg"",             appendString);          // invalid on chain (should be correct)         list.stream()             .reduce(""a long string to force wrapping for the 2nd arg"",                 appendString);     }  }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.32-all.jar -c config.xml Test.java Starting audit... [ERROR] /private/var/tmp/checkstyle/Test.java:24: 'appendString' has incorrect indentation level 16, expected level should be 12. [Indentation] [ERROR] /private/var/tmp/checkstyle/Test.java:35: 'method call' child has incorrect indentation level 12, expected level should be 16. [Indentation] [ERROR] /private/var/tmp/checkstyle/Test.java:40: 'appendString' has incorrect indentation level 16, expected level should be 12. [Indentation] Audit done. Checkstyle ends with 3 errors. ```  ---------------  Enabling the `forceStrictCondition` of the `IndentationCheck` breaks the check of wrapped method calls when the call is the first statement on the line. In such a case, the rule wants the wrapped part of the call to start at the same indentation level as the call itself. For a chained method call, the rule somehow recovers and detects that the wrapped part of a method call should not have a higher indentation as the method call. Unfortunately, this creates a loop of contradicting results which cannot be satisfied by the developer other than making the method call not the first statement of the line.  I would expect the checks to give the results annotated in the comments of the source.  --------------","open","","jgerken","2020-05-11T20:47:09Z","2020-05-24T04:33:58Z"
"","8082","New check: RegexRepetitionCheck","``` /var/tmp $ javac Main.java  /var/tmp $ cat config.xml          /var/tmp $ cat Main.java  public class Main {     public static void main(String...args){         String regexOneOrMore = ""a{1,}"";  //violation         String regexZeroOrMore = ""a{0,}""; //violation          String regexPlus = ""a+"";  //OK         String regexStar = ""a*"";  //OK     } }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.32-all.jar -c config.xml Main.java Starting audit... [ERROR] D:\OpenSource\TestCommit\Test.java:3: You should use Regex Repetition like * or + [RegexRepetition] [ERROR] D:\OpenSource\TestCommit\Test.java:4: You should use Regex Repetition like * or + [RegexRepetition] Audit done. Checkstyle ends with 2 errors. ```  ---------------  New Check to report violation when regex contains {1,} or {0,} because it should be replaced by + or * The idea of this check comes from IntelliJ IDE  ![regex r check](https://user-images.githubusercontent.com/23631699/79077440-15f4e900-7d02-11ea-9d6a-f0296fb5181a.PNG)  We can use this feature in GSoC Auto Fix idea, Once it's approved I can start working on it  --------------","open","","AmrDeveloper","2020-04-12T19:28:21Z","2020-04-12T21:21:58Z"
"","8856","Local records fail to parse when annotated","``` /var/tmp $ javac --enable-preview --release 14 LocalRecordFailure.java Note: LocalRecordFailure.java uses preview language features. Note: Recompile with -Xlint:preview for details. ```  `/var/tmp $ cat config.xml` ```xml                                                                                 ```  `/var/tmp $ cat YOUR_FILE.java` ```java class LocalRecordFailure {      public void doThing() {         // No error unless an annotation is present         @ProblemCauser         record Test(String hello, int world) {}          final var item = new Test(""hi there"", 22);         System.out.println(item);     }  }  @interface ProblemCauser { } ``` ``` /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.36.2-all.jar -c config.xml LocalRecordFailure.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing LocalRecordFailure.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331)         at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: IllegalStateException occurred while parsing file /home/zml/dev/checkstyle-localrecord-error/LocalRecordFailure.java.         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:149)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         ... 5 more Caused by: java.lang.IllegalStateException: /home/zml/dev/checkstyle-localrecord-error/LocalRecordFailure.java:7:9: expecting ""class"", found 'record'         at com.puppycrawl.tools.checkstyle.JavaParser$1.reportError(JavaParser.java:108)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:424)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:212)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114)         ... 9 more Caused by: /home/zml/dev/checkstyle-localrecord-error/LocalRecordFailure.java:7:9: expecting ""class"", found 'record'         at antlr.Parser.match(Parser.java:211)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:619)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.traditionalStatement(GeneratedJavaRecognizer.java:5985)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.statement(GeneratedJavaRecognizer.java:4814)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compoundStatement(GeneratedJavaRecognizer.java:4543)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3158)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:3415)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:646)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:561)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:402)         ... 11 more Checkstyle ends with 1 errors.  ```   I'd expect this file to parse successfully, but it doesn't. This is a minimal test case based on code from [a test in my project](https://github.com/SpongePowered/Configurate/blob/100e27a1c0c9a57e7f31acce9ea2fd50d52939d3/core/src/test/java14/org/spongepowered/configurate/objectmapping/RecordDiscovererTest.java#L65). It seems to be triggered by the annotation on the local record -- the file parses fine without.","closed","antlr,","zml2008","2020-09-29T12:10:10Z","2020-10-06T13:39:24Z"
"","8283","Make test inputs compatible with Java 10+","``` $ mvn -Djava.version=10 clean verify [ERROR] customimportorder/InputCustomImportOrderSingleLine.java:[9] error: package com.puppycrawl.tools does not exist [ERROR] InputImportOrderStaticGroupOrderBottom_Negative2.java:[3] error: package org does not exist [ERROR] InputIllegalTypeStarImports.java:[3] error: package java does not exist [ERROR] InputIllegalTypeStarImports.java:[6] error: package com does not exist ```  There is minor incompatibility introduced in Java9. A star import, i.e. `import org.*;` will fail, if such package contains no classes at that level.  All test inputs should be updated to be compatible with all Java versions up to the latest available. We can use semathoreci to configure builds.","closed","miscellaneous,","pbludov","2020-05-30T19:21:28Z","2020-06-01T19:24:59Z"
"","8932","Exception message for invalid token is unclear","``` $ cat Test.java  public class Test {    private Optional field1; }  $ cat config.xml                                                                          $ java -jar checkstyle-8.36.2-all.jar -c config.xml Test.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - cannot initialize module IllegalType - Cannot set property 'memberModifiers' to '' 	at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:482) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:201) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:404) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module IllegalType - Cannot set property 'memberModifiers' to '' 	at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:125) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:201) 	at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:477) 	... 5 more Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Cannot set property 'memberModifiers' to '' 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.tryCopyProperty(AutomaticBean.java:241) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:194) 	at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:120) 	... 7 more Caused by: java.lang.reflect.InvocationTargetException 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod(PropertyUtilsBean.java:2128) 	at org.apache.commons.beanutils.PropertyUtilsBean.setSimpleProperty(PropertyUtilsBean.java:2109) 	at org.apache.commons.beanutils.BeanUtilsBean.copyProperty(BeanUtilsBean.java:437) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.tryCopyProperty(AutomaticBean.java:231) 	... 9 more Caused by: java.lang.IllegalArgumentException: given name  	at com.puppycrawl.tools.checkstyle.utils.TokenUtil.getTokenId(TokenUtil.java:174) 	at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.setMemberModifiers(IllegalTypeCheck.java:828) 	... 17 more Checkstyle ends with 1 errors. ```  one more case - https://github.com/checkstyle/sonar-checkstyle/pull/338#issuecomment-705581364   Expected: `java.lang.IllegalArgumentException: unknown TokenTypes value '' `","closed","approved,","romani","2020-10-28T14:18:15Z","2021-01-22T18:07:03Z"
"","9004","GUI can not find node by simple xpath","``` $ cat Test.java  public class Test {     int i; // warn     int[] arr = {       40, // ok magic reason       47, // ok magic reason     }; }  $ java -jar checkstyle-8.36.2-all.jar -b ""/CLASS_DEF"" Test.java  CLASS_DEF -> CLASS_DEF [1:0] ```  `java -cp checkstyle-8.36.2-all.jar com.puppycrawl.tools.checkstyle.gui.Main Test.java` Xpath is reported as `^ wrong xpath query`  ![image](https://user-images.githubusercontent.com/812984/99819544-73f17680-2b04-11eb-9a30-b74e9624a064.png)","closed","approved,","romani","2020-11-20T15:46:15Z","2022-04-04T04:27:16Z"
"","8073","New check: PreferSeparatedLiterals","``` $ cat config.xml                              $ cat TestClass.java class Test {     int f = 100000000; // violation     int ab = 100_000_000; // OK, ignore value if there is already at least one separator    long c = 123456789012; // violation    long d = 1000L; // violation    int e = 100; // OK, enable only for length > 3    int g = 0xDADA; // OK, ignore hex, binary and octal    double h = 101010.0202 // OK, skip double literals }  /var/tmp $ java  -jar checkstyle-8.32-all.jar -c config.xml TestClass.java Starting audit...  Here are violations with // violation comment ``` Rationale: it is a bit difficult to read long numbers, separators are really helpful. May be there can be some property like ""minimalLength"", which sets min length of literal, with default value of 4","closed","","strkkk","2020-04-11T15:15:29Z","2020-04-23T07:37:16Z"
"","8909","Add markdown lint validation for .md files to CI","[Markdown lint tool](https://github.com/markdownlint/markdownlint) A tool to check markdown files and flag style issues.  We don't have a lot of md files, but if there is a tool to validate them, it makes sense to use it.  Current state: ```bash $ sudo gem install mdl $ mdl -g . .github/CODE_OF_CONDUCT.md:64: MD034 Bare URL used .github/CODE_OF_CONDUCT.md:120: MD034 Bare URL used .github/CODE_OF_CONDUCT.md:128: MD034 Bare URL used .github/CODE_OF_CONDUCT.md:129: MD034 Bare URL used .github/CONTRIBUTING.md:4: MD001 Header levels should only increment by one level at a time .github/CONTRIBUTING.md:13: MD012 Multiple consecutive blank lines .github/CONTRIBUTING.md:8: MD013 Line length .github/CONTRIBUTING.md:15: MD013 Line length .github/CONTRIBUTING.md:1: MD022 Headers should be surrounded by blank lines .github/CONTRIBUTING.md:4: MD022 Headers should be surrounded by blank lines .github/CONTRIBUTING.md:6: MD022 Headers should be surrounded by blank lines .github/CONTRIBUTING.md:14: MD022 Headers should be surrounded by blank lines .github/CONTRIBUTING.md:16: MD022 Headers should be surrounded by blank lines .github/CONTRIBUTING.md:19: MD022 Headers should be surrounded by blank lines .github/CONTRIBUTING.md:20: MD022 Headers should be surrounded by blank lines .github/CONTRIBUTING.md:23: MD022 Headers should be surrounded by blank lines .github/CONTRIBUTING.md:24: MD022 Headers should be surrounded by blank lines .github/CONTRIBUTING.md:25: MD022 Headers should be surrounded by blank lines .github/CONTRIBUTING.md:14: MD025 Multiple top level headers in the same document .github/ISSUE_TEMPLATE/bug_report.md:27: MD009 Trailing spaces .github/ISSUE_TEMPLATE/bug_report.md:28: MD031 Fenced code blocks should be surrounded by blank lines .github/ISSUE_TEMPLATE/bug_report.md:31: MD031 Fenced code blocks should be surrounded by blank lines .github/ISSUE_TEMPLATE/bug_report.md:10: MD034 Bare URL used .github/ISSUE_TEMPLATE/bug_report.md:41: MD034 Bare URL used .github/ISSUE_TEMPLATE/bug_report.md:34: MD035 Horizontal rule style .github/ISSUE_TEMPLATE/bug_report.md:38: MD035 Horizontal rule style .github/ISSUE_TEMPLATE/feature_request.md:14: MD013 Line length .github/ISSUE_TEMPLATE/feature_request.md:20: MD013 Line length .github/ISSUE_TEMPLATE/feature_request.md:14: MD034 Bare URL used .github/ISSUE_TEMPLATE/feature_request.md:20: MD034 Bare URL used .github/PULL_REQUEST_TEMPLATE.md:17: MD034 Bare URL used README.md:24: MD012 Multiple consecutive blank lines README.md:70: MD012 Multiple consecutive blank lines README.md:83: MD012 Multiple consecutive blank lines README.md:33: MD013 Line length README.md:161: MD013 Line length README.md:52: MD022 Headers should be surrounded by blank lines README.md:35: MD034 Bare URL used README.md:57: MD034 Bare URL used README.md:64: MD034 Bare URL used README.md:68: MD034 Bare URL used README.md:92: MD034 Bare URL used README.md:96: MD034 Bare URL used README.md:99: MD034 Bare URL used README.md:104: MD034 Bare URL used README.md:109: MD034 Bare URL used  A detailed description of the rules is available at https://github.com/markdownlint/markdownlint/blob/master/docs/RULES.md ```","closed","miscellaneous,","pbludov","2020-10-21T04:48:45Z","2020-10-31T14:01:57Z"
"","8434","minor: commented check list for mod-6","@strkkk Please have a look at this approach. Merging ""comment"" PRs before modification PRs should resolve the conflict issue","closed","","gaurabdg","2020-07-10T14:59:36Z","2020-07-10T16:12:19Z"
"","8977","Update TranslationCheck.Java","2 Typos corrected .","closed","","harshitmalik03","2020-11-10T12:33:42Z","2020-11-17T13:57:56Z"
"","8722","Error in generic comment in Javadoc","/**      * this is a comment.      *      * @param dataList {@link ArrayList}      */","open","","734839030","2020-08-20T02:48:30Z","2020-08-22T12:37:59Z"
"","8265","List of checks in checkstyle.org has incorrect link for AvoidDoubleBraceInitialization","**Problem description:** https://checkstyle.org/checks.html contains a list of checks. This list includes `AvoidDoubleBraceInitialization`.  Clicking on the respective link takes the user to https://checkstyle.org/config_misc.html#AvoidDoubleBraceInitialization  But the check is documented under https://checkstyle.org/config_coding.html#AvoidDoubleBraceInitialization  (**config_misc** vs **config_coding**)  **Expected behavior:** Clicking the `AvoidDoubleBraceInitialization` link in https://checkstyle.org/checks.html takes the user to the documentation for that check.  **Actual behavior:** Clicking the `AvoidDoubleBraceInitialization` link in https://checkstyle.org/checks.html takes the user to a page where documentation for that check is not found.","closed","","binoternary","2020-05-28T13:07:09Z","2020-05-28T14:11:09Z"
"","8781","Enforce case sensitivity for rule configuration values","**Is your feature request related to a problem? Please describe.** There are rules with default values in lowercase, e.g.   ```        ```  https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocContentLocationCheck.html  But looking at the code these values are in fact enums in capital case (this is from  com.puppycrawl.tools.checkstyle.checks.javado.JavadocContentLocationOption.java):  ``` /**  * Represents the locations for the javadoc content.  */ public enum JavadocContentLocationOption {      /**      * Represents a policy for the location of content starting from      * the same line as {@code /**}.      * Example:      *       * /** Summary text.      *   * More details.      *   */      * public void method();      *       * This style is also known as ""scala"" style.      */     FIRST_LINE,      /**      * Represents a policy for the location of content starting from      * the next line after {@code /**}.      * Example:      *       * /**      *  * Summary text.      *  * More details.      *  */      * public void method();      *       * This style is common to java projects.      */     SECOND_LINE,  }  ```  **Describe the solution you'd like** I think you should stick to capital case letters for all values to avoid problems in other libraries relying on Checkstyle, such as the Checkstyle SonarQube plugin where I have reported a related issue: https://github.com/checkstyle/sonar-checkstyle/issues/328","closed","","alixwar","2020-09-02T19:35:34Z","2020-09-03T14:49:12Z"
"","8551","Relaxing the stated limitation about UTF-8 in documentation","**Is your feature request related to a problem? Please describe.** The web site [states](https://checkstyle.org/writingchecks.html#Limitations): “Java code should be written with ASCII characters only, no UTF-8 support.” This is ambiguous. I suppose that it means _at least_ that identifiers must be in pure ASCII, but does it also mean that _all_ file content must be in pure ASCII? Can I use UTF-8 in //comments? Can I use UTF-8 in Strings?  In supplement of being ambiguous, it is a strong restriction, if it is meant in the wide sense of all file content being restricted to pure ASCII. For example, Google Java Style [writes](https://google.github.io/styleguide/javaguide.html#s2.3-special-characters): “Tip: Never make your code less readable simply out of fear that some programs might not handle non-ASCII characters properly. If that should happen, those programs are broken and they must be fixed.”  **Describe the solution you'd like** Please consider allowing UTF-8 in comments and Strings, and update the sentence referenced above accordingly.  If this is not considered possible / adequate, please change the sentence anyway to make the limitation unambiguous.  **Additional context** From this [discussion](https://github.com/checkstyle/checkstyle/issues/8050) and this [question](https://github.com/checkstyle/checkstyle/issues/4748), I suspect that Checkstyle already supports UTF-8 in comments and strings. So I suspect this feature request would be easily implemented. And it would bring important value to those who (like me) agree with the quote from Google Java Style here above.  Other (vaguely) related issue: #2784.","closed","miscellaneous,","oliviercailloux","2020-07-24T16:12:25Z","2020-11-07T20:45:03Z"
"","8406","Checkstyle CLI return code must return 0 when failOnViolations is false","**Is your feature request related to a problem? Please describe.** The CLI returns the number of errors as return code breaking the maven exec plugin  when it wants to continue with the next execution.   Sample output: (with option -g) for file(s) with 42 violations. ```  Checkstyle ends with 42 errors. $ echo $? 42 ```  **Describe the solution you'd like** It should return 0 when property failOnViolations is set to false.  ``` /var/tmp $ javac Test.java  /var/tmp $ cat config.xml                                    /var/tmp $ cat Test.java public class Test {   @Override public boolean equals(Object o) { return true; }    @Override   public int hashCode() {     return 31;   } }  /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.25-all.jar -c config.xml Test.java Starting audit... [ERROR] D:\Test.java:9: ... [MagicNumber] Audit done. Checkstyle ends with 1 errors  /var/tmp $ echo $? 0 ``` With property failOnViolations set to true:  ``` /var/temp $ echo $? 1 ```  **Additional context** PMD provides something similar.  https://pmd.github.io/latest/pmd_userdocs_cli_reference.html#options  The ant Checkstyle task has a parameter (https://checkstyle.sourceforge.io/anttask.html#Parameters) failOnViolation. The CLI could be modified to either check for such a property in the config file or have a command line option that changes the return code to 0 when it is set.   The exec maven plugin does have an integer array option successCodes that can be used for executables that don't return 0 on sucess but that's not a right fit for the Checkstyle CLI unless the return code is changed to something other than the number of violations. Secondly, it applies only to the exec goal; the java goal does not have that parameter.  https://www.mojohaus.org/exec-maven-plugin/exec-mojo.html#successCodes","open","","Fernal73","2020-07-06T10:06:31Z","2020-07-09T02:56:07Z"
"","8344","Checkstyle CLI should accept directories as input","**Is your feature request related to a problem? Please describe.** The CLI does not accept directories as input. This must be allowed.   **Describe the solution you'd like** Process all files under the directories specified. The input can be a mix of directories and files.   Referred from:  https://github.com/checkstyle/checkstyle/issues/8340#issuecomment-649640571  http://maven.40175.n5.nabble.com/Access-or-generate-a-classpath-for-dependency-not-in-any-scope-but-attached-to-plugin-td6005018.html","closed","","Fernal73","2020-06-26T02:31:29Z","2020-07-06T06:29:22Z"
"","8844","Make checkstyle.xml support inherit/extend, so we can resuse the same base rule xml","**Is your feature request related to a problem? Please describe.** POC code: #8821 (By now  was: ``, it easy to change to ``)  **Describe the solution you'd like** We need resuse the same base checkstyl.xml.   ie: we should define different level of the checkstyle standard, such as  level1=custom-L1,   level2=custom-L2 and level3=custom-L3 L1","closed","","qxo","2020-09-21T14:04:06Z","2020-10-24T15:24:47Z"
"","8905","Add SARIF as a supported output format","**Is your feature request related to a problem? Please describe.** No, it's not related to any existing problems.  **Describe the solution you'd like**  Github's new [code scanning](https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/about-code-scanning) product allows for teams to integrate third party static analysis and linting tools.  They use the [SARIF format](https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/uploading-a-sarif-file-to-github) for uploading and reporting the output of these analyses/linters.  It would be very useful if checkstyle was able to output SARIF results directly along with the already existing formats.  **Additional context** Some resources that might be useful: - [SARIF description](https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/sarif-support-for-code-scanning)  - [SARIF website](https://sarifweb.azurewebsites.net/) - [SARIF tutorials](https://github.com/microsoft/sarif-tutorials) - [Specification](https://docs.oasis-open.org/sarif/sarif/v2.1.0/sarif-v2.1.0.html)  -----  To avoid problems in schema validation for urls to files, user should use system property https://checkstyle.org/config_system_properties.html#Base_directory_support `java -jar target/checkstyle-8.42-SNAPSHOT-all.jar -f sarif -c src/main/resources/sun_checks.xml src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java` and setting `basedir` using `` in config.","closed","new module,","adverma98","2020-10-20T02:58:57Z","2021-04-29T16:34:29Z"
"","8922","Add Mega-Linter in ""Active Tools"" section","**Is your feature request related to a problem? Please describe.** No problem :)  **Describe the solution you'd like** On [Active Tools doc](https://checkstyle.sourceforge.io/#undefined)I'd like to add [Mega-Linter](https://github.com/nvuillam/mega-linter) to the list of tools embedding CheckStyle URL: https://github.com/nvuillam/mega-linter#readme  Values are the following: - name: Mega-Linter - author: Nicolas Vuillamy - available from: Mega-Linter checkstyle plugin - https://github.com/nvuillam/mega-linter/blob/master/docs/descriptors/java_checkstyle.md#readme - remarks: 100% open-source linters aggregator, usable as Github action, in other CI tools, and locally  **Additional context** Nope","closed","miscellaneous,","nvuillam","2020-10-25T21:15:55Z","2020-10-30T15:03:42Z"
"","8602","Make getter method for sourceClass in LocalizedMessage","**Is your feature request related to a problem? Please describe.** In GSoC project patch-filter, we will introduce two new filters, Checker filter (SuppressionPatchFilter) and TreeWalker Checks (SuppressionPatchXapthFilter), but one problem is that SuppressionPatchFilter will suppress all violations that a might pass SuppressionPatchXapthFilter(in case of context strategy, or mismatch of strategies between SuppressionPatchFilter and SuppressionPatchXapthFilter), and we find a solution that all TreeWalker checks extend AbstractCheck class and LocalizedMessage has sourceClass property. So inside SuppressionsPatchFilter we can check, if event is from AbstractCheck subclasses or not.   But  now `sourceClass` property is private, so if we want to use this solution, we should make getter method for sourceClass in LocalizedMessage. https://github.com/checkstyle/checkstyle/blob/6ba98dfc7c513d3b2b5bd8706197d2eb69d8ed1f/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java#L95  **Describe the solution you'd like** Add a `getSourceClass` method in `LocalizedMessage`","closed","","HuGanghui","2020-08-04T05:37:49Z","2020-08-09T00:37:43Z"
"","8609","Make it easier to find errors mixed among the warnings","**Is your feature request related to a problem? Please describe.** Checkstyle output can be spammy and make it hard to find errors mixed in with dozens of warnings.   We have a legacy project with a large number of checkstyle rules enabled (in info mode) which tends to generate a lot of output.   We leave the output on as a matter of course so that the warnings are highly visible and get attention (in the long run).   However, when a new error is introduced, this error gets mixed in with all the warnings, and is difficult to identify.   It is VERY difficult to spot ""[ERROR]"" within pages of ""[INFO]""  **Describe the solution you'd like** Ideally, just sort the errors and infos separately such that errors appear at the end (or inline, and then duplicated again at the end).  A number of tools do this, and that is acceptable as developers know where to look for errors and they are easy to find.    Alternate solution would be to make ""[ERROR]"" more visible - e.g.  ""[ ******* ERROR *********** ]"" just so it is easier to spot when visually scanning.  This could even be configurable (for backward compatibility) with a property like ""checkstyle.errormarker=""*** ERROR ***"" allowing people to use their own text.","closed","","jbennett2091","2020-08-05T20:19:47Z","2020-10-25T23:14:39Z"
"","8340","Allow Ant task to support generation of Xpath suppressions.","**Is your feature request related to a problem? Please describe.** Ant task does not support generation of Xpath suppressions.   **Describe the solution you'd like**  It would be nice to have the [Ant task](https://checkstyle.sourceforge.io/anttask.html) modified to generate Xpath suppressions as currently possible through the CLI using the -g switch.   https://checkstyle.sourceforge.io/cmdline.html#Command_line_usage  https://checkstyle.sourceforge.io/anttask.html#Parameters   Added:  Link to discussion on Maven User Group:  http://maven.40175.n5.nabble.com/Access-or-generate-a-classpath-for-dependency-not-in-any-scope-but-attached-to-plugin-td6005018.html  Link to Maven issue :  https://issues.apache.org/jira/plugins/servlet/mobile#issue/MCHECKSTYLE-396/comment/17146092  This explains the workflow that's possible for Xpath suppressions.","closed","","Fernal73","2020-06-25T10:10:46Z","2020-07-08T14:22:05Z"
"","8767","Allow no new line before paragraph tag in JavaDoc","**Is your feature request related to a problem? Please describe.**  I'm trying to make the checkstyle JavaDoc verification match my team's coding style, but there is still one option that is not possible. I can't disable the rule that requires a new line before the `` tag.  **Describe the solution you'd like**  I would like to request to allow the following paragraph style on JavaDocs:  ```java     /**      * My description.      *       * My class details.      */     public MyClass() {         ...     } ```  A simple suggestion for the config file:  ```xml                                              ```  This new rule should make sure the `` tag is in a new line, but should not require a new line before it.  **Additional context**  When I try to use the java doc using the following configuration, I get this error message:  ```xml                                ```  ```bash [ERROR] /my/path/to/my/class/MyClass.java:34:  tag should be preceded with an empty line. [JavadocParagraph] ```  Thanks!","open","","LucasHagen","2020-08-27T14:27:41Z","2020-08-27T20:40:15Z"
"","8709","Implement a new file filter whose function is opposite to BeforeExecutionExclusionFileFilter","**Is your feature request related to a problem? Please describe.**  As mentioned in https://github.com/checkstyle/checkstyle/issues/6689#issuecomment-565762529, we can implement a new file filter whose function is opposite to BeforeExecutionExclusionFileFilter, and it will only process files that appeared in patch file or files that match a given regular expression or list of files defined by property (user can use system  variable in config to pass checkstyle list of files).  we also can improve BeforeExecutionExclusionFileFilter, add these new function in it.  **Describe the solution you'd like**  When we use this new function, only specific files will be processed, which will speed checkstyle when the open source project is large.","open","","HuGanghui","2020-08-18T08:45:54Z","2020-08-18T12:08:03Z"
"","8084","minor: fix violations from future EmptyLineBeforeAtClauseBlock (#6192)","**How I inserted a newline before existing violating at-clauses in the code base:** I believe it would be extremely difficult for me to fix all the violations manually and error prone. There were about **1900 violation**s. As a result, I took the violations from https://github.com/checkstyle/checkstyle/pull/7932 and I put together a small script to fix them for me: https://github.com/josephmate/FixAtClauseError","closed","","josephmate","2020-04-12T23:45:43Z","2020-06-28T19:51:10Z"
"","9002","Apply checkstyle rule only to specific module","**Goal:** apply a checkstyle rule only in a specific module  ___  I tried apply a the following checkstyle rule only with a specific module  ```java ...                                           ... ``` I set the id and in the suppression.xml file the name of the module that I want to exclude with the following regex  ```java ...      ```  it doesn't work as expected it works only if I explicitly add all the others module names and excluding `mymodulename`, but this is something that I don't like because is not future proof if someone else add a new module in the codebase  could someone please help me?","open","","pigliamosche","2020-11-20T13:26:31Z","2020-11-21T03:19:07Z"
"","8044","Issue #7922: Resolve Pitest Issues - JavadocMethodCheck (1)","**Fixes** #7922  **Reports:** https://github.com/checkstyle/checkstyle/issues/7922#issuecomment-604274485  The only property requiring the ```currentClassName``` variable is ```validateThrows```. As can be seen in the code: https://github.com/checkstyle/checkstyle/blob/834b505b9938e93f6950dd20a13e39e295e5ac86/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java#L485  which further calls ```getThrows``` and ```getThrowed``` method both requiring the ```currentClassName``` variable. However, once we get the ```classInfo``` by this ```currentClassName``` variable, it calls ```checkThrowsTags``` method: https://github.com/checkstyle/checkstyle/blob/834b505b9938e93f6950dd20a13e39e295e5ac86/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java#L486  which further needs ```currentClassName``` in: https://github.com/checkstyle/checkstyle/blob/834b505b9938e93f6950dd20a13e39e295e5ac86/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java#L925  which just checks whether the class names are same or not: https://github.com/checkstyle/checkstyle/blob/834b505b9938e93f6950dd20a13e39e295e5ac86/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java#L953  **Bottom Line:** It shouldn't matter what the class name is, at the moment, that is, even the outer class' name can have a $ before its name in the ```currentClassName``` variable and it should not matter as it's just going to check the equality of the class names as shown above. That is why that ```if``` can be removed from the check's java files, keeping its body only.","closed","","sulkykookie","2020-04-06T09:59:29Z","2020-04-19T06:00:45Z"
"","8330","Add granularity to switch -g when generating Xpath suppressions.","**Checkstyle Xpath suppression generation with -g outputs suppressions for all existing violations.**  The -g option to output Xpath suppressions covers all existing violations. No granularity exists to specify that suppressions for only a single rule or set of specific, multiple rules be targeted.   **Describe the solution you'd like** Another switch that allows user to specify set of rules for which suppressions are to be generated. This could be in the format ""Rule1|Rule2|....|Rulen"". This could also accept an input file or have another switch that does.","open","","Fernal73","2020-06-22T03:13:14Z","2020-06-22T03:14:19Z"
"","8957","EmptyLineSeparator flags commas for multiple single type variables on line","**Check documentation:** https://checkstyle.org/config_whitespace.html#EmptyLineSeparator  ```  /var/tmp $ javac Test.java  /var/tmp $ cat Test.java public class Test {     int readOnly;     int p01;     int p11;     int q01, q02, q03, q04, q05, q06, q07, q08;  }   /var/tmp $ cat config.xml                             /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.36.jar -c config.xml Test.java Starting audit... [ERROR] /var/temp/Test.java:5:10: ',' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /var/temp/Test.java:5:15: ',' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /var/temp/Test.java:5:20: ',' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /var/temp/Test.java:5:25: ',' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /var/temp/Test.java:5:30: ',' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /var/temp/Test.java:5:35: ',' should be separated from previous statement. [EmptyLineSeparator] [ERROR] /var/temp/Test.java:5:40: ',' should be separated from previous statement. [EmptyLineSeparator] Audit done. ```  **Expected:** No violations.","closed","approved,","Fernal73","2020-11-02T17:10:13Z","2020-11-17T23:29:40Z"
"","8791","CheckstyleAntTask support force localeLanguage so the tests can passed on os with non-english locale(ie:zh_CN)","* without the feature, before build, we should set ENV by  `_JAVA_OPTIONS=-Duser.language=en` or `MAVEN_OPTS=-Duser.language=en`  on non-english os, otherwise the ant-phase-verify will failed(cause the default locale is not english)  * `-Duser.language=en` on mvn commandline will not work, but on _JAVA_OPTIONS OR MAVEN_OPTS will work.","closed","","qxo","2020-09-05T15:45:44Z","2021-12-20T22:51:17Z"
"","8275","Spotbugs should validate tests",">[WARNING] Auxclasspath entry file:/home/travis/build/checkstyle/checkstyle/target/test-classes doesn't exist, ignoring it  Sounds suspicious, we need to make sure that tests are not ignored  _Originally posted by @romani in https://github.com/checkstyle/checkstyle/pull/8254#issuecomment-633796675_","closed","miscellaneous,","pbludov","2020-05-30T09:59:12Z","2020-05-30T13:03:07Z"
"","8855","Set up Cirrus CI","> We can append new CIs: > Azure Pipelines > https://cirrus-ci.org/features/  Cirrus CI supports Windows, it looks like we can move some appveyor builds to this CI.  _Originally posted by @pbludov in https://github.com/checkstyle/checkstyle/issues/8805#issuecomment-697166475_","closed","CI,","pbludov","2020-09-29T04:26:18Z","2020-09-30T11:54:58Z"
"","8262","Suppress Spotbugs violation for internal JaCoCo field","> > [WARNING] Auxclasspath entry file:/home/travis/build/checkstyle/checkstyle/target/test-classes doesn't exist, ignoring it >  > Sounds suspicious, we need to make sure that tests are not ignored  Confirmed. The command line should be `mvn -e clean test-compile pmd:check spotbugs:check`  But this command fails with `[ERROR] The field com.puppycrawl.tools.checkstyle.DefaultConfiguration.$jacocoData is transient but isn't set by deserialization [com.puppycrawl.tools.checkstyle.DefaultConfiguration] In DefaultConfiguration.java SE_TRANSIENT_FIELD_NOT_RESTORED`  There should be exception for the field injected by JaCoCo.  _Originally posted by @pbludov in https://github.com/checkstyle/checkstyle/pull/8254#issuecomment-635175448_","closed","miscellaneous,","pbludov","2020-05-28T07:53:23Z","2020-05-30T10:53:27Z"
"","8818","parsing error: try-with-resources on instance of outer class","$ javac Test.java ``` No output ```  $ cat config.xml ```     	 		 		 	  ``` $ cat Test.java ``` public class Test implements AutoCloseable {      public static void main(String[] args) {         var t = new Test();         t.test();     }      private void test() {         var a = new Abstract() {             @Override             void test() {                 try (Test.this) {                     System.out.println(""Unable to process"");                 }             }         };         a.test();     }      @Override     public void close() {      } }  abstract class Abstract {     abstract void test(); } ```  $ java $RUN_LOCALE -jar checkstyle-8.36-all.jar -c config.xml Test.java ``` Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing Test.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:311) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:408) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:331) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:190) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: IllegalStateException occurred while parsing file /home/nick/Downloads/Test.java. 	at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:120) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:149) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:337) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298) 	... 5 more Caused by: java.lang.IllegalStateException: /home/nick/Downloads/Test.java:9:13: unexpected token: a 	at com.puppycrawl.tools.checkstyle.JavaParser$1.reportError(JavaParser.java:108) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:424) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:212) 	at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:114) 	... 9 more Caused by: /home/nick/Downloads/Test.java:9:13: unexpected token: a 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.traditionalStatement(GeneratedJavaRecognizer.java:6023) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.statement(GeneratedJavaRecognizer.java:4814) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compoundStatement(GeneratedJavaRecognizer.java:4543) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3158) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:3415) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:646) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:561) 	at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:402) 	... 11 more Checkstyle ends with 1 errors. ``` ---------------  Expected behaviour: completion without error.","closed","antlr,","N1cOs","2020-09-10T17:57:52Z","2021-08-12T14:45:01Z"
"","8804","Issue #8801: Support for all Token Types as a Property Type for Module Metadata","#8801","closed","","gaurabdg","2020-09-07T16:24:00Z","2020-09-09T23:00:02Z"
"","8802","Support for all Token Types as a Property Type for Module Metadata","#8801","closed","","gaurabdg","2020-09-07T15:02:17Z","2020-09-07T16:26:40Z"
"","8786","Issue #8785: Set tokenTypesSet as validationType for non base token properties","#8785   `AtclauseOrderCheck` is now working in Sonarqube plugin:","closed","","gaurabdg","2020-09-04T22:30:07Z","2020-09-05T16:39:38Z"
"","8783","Issue #8771: Improve code coverage for metadata generator classes - 1","#8771   - PR to setup UT backbone - Improved branch cov from 0.84 to 0.88","closed","","gaurabdg","2020-09-03T21:50:04Z","2020-09-09T14:42:30Z"
"","8762","Issue #8761: Move metadata generation code to main from test folder","#8761","closed","","gaurabdg","2020-08-26T11:36:46Z","2020-08-27T22:21:08Z"
"","8747","Issue #8742: Metadata-gen code migration - metadata files","#8742","closed","","gaurabdg","2020-08-21T13:52:05Z","2020-08-25T04:21:27Z"
"","8743","Issue #8742: Metadata-gen code migration","#8742","closed","","gaurabdg","2020-08-21T10:37:28Z","2020-08-26T07:35:01Z"
"","8733","Issue #8732: Removal of examples from property description","#8732","closed","","gaurabdg","2020-08-20T20:08:12Z","2020-08-21T02:05:08Z"
"","8648","Issue #8657: Modification of javadoc example markers to support metadata generation - whitespace","#8657","closed","","gaurabdg","2020-08-11T10:11:57Z","2020-08-13T01:28:18Z"
"","8647","Issue #8657: Modification of javadoc example markers to support metadata generation - sizes","#8657","closed","","gaurabdg","2020-08-11T10:11:29Z","2020-08-12T03:21:44Z"
"","8646","Issue #8657: Modification of javadoc example markers to support metadata generation - regexp","#8657","closed","","gaurabdg","2020-08-11T10:10:55Z","2020-08-12T19:20:48Z"
"","8645","Issue #8657: Modification of javadoc example markers to support metadata generation - naming","#8657","closed","","gaurabdg","2020-08-11T10:10:30Z","2020-08-12T04:34:44Z"
"","8644","Issue #8657: Modification of javadoc example markers to support metadata generation - modifier","#8657","closed","","gaurabdg","2020-08-11T10:09:56Z","2020-08-13T02:34:08Z"
"","8643","Issue #8657: Modification of javadoc example markers to support metadata generation - misc","#8657","closed","","gaurabdg","2020-08-11T10:09:30Z","2020-08-12T17:42:46Z"
"","8641","Issue #8657: Modification of javadoc example markers to support metadata generation - javadoc","#8657","closed","","gaurabdg","2020-08-11T10:05:51Z","2020-08-13T03:22:54Z"
"","8639","Issue #8657: Modification of javadoc example markers to support metadata generation - header","#8657","closed","","gaurabdg","2020-08-11T10:04:11Z","2020-08-12T04:15:15Z"
"","8638","Issue #8657: Modification of javadoc example markers to support metadata generation - coding","#8657","closed","","gaurabdg","2020-08-11T10:02:38Z","2020-08-12T03:20:20Z"
"","8636","Issue #8657: Modification of javadoc example markers to support metadata generation - annotation","#8657","closed","","gaurabdg","2020-08-11T10:01:07Z","2020-08-12T03:18:16Z"
"","8632","Issue #8633: LineLengthCheck.fileExtensions default value and similar usages should be changed to empty string","#8633  ```               ``` `all files` is not good default value. We need to fix javadoc. It is what we mean and how it will be interpreted, but it is not a value  So, we need to replace it with `""""`","closed","","gaurabdg","2020-08-09T10:56:25Z","2020-08-09T14:02:55Z"
"","8583","Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces","#8569  Fixed ConstantName check to correctly detect constants + MethodName check is extended with test case for private methods in interface  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties Diff Regression config: https://gist.githubusercontent.com/strkkk/a6e04b73158d1ef6f563dd5aab753361/raw/74f66fa883a25f37a0689fbe4ab293d66c236417/constant_name","closed","","strkkk","2020-07-31T12:35:08Z","2020-09-26T07:49:55Z"
"","8570","Issue #8469: Records Support Check update for MagicNumberCheck","#8469: Records Support Check update for MagicNumberCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/3f0f3a5861e24078f5841af67df17d7d/raw/bcac82e66915786c33820d0043aa9595ece7eb04/MagicNumberCheck.xml","closed","","nick-mancuso","2020-07-28T13:29:57Z","2020-07-31T06:55:26Z"
"","8752","#8456: Full Records support check update for SuppressWarningsCheck","#8456: Full Records support check update for SuppressWarningsCheck  Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties  Diff Regression config: https://gist.githubusercontent.com/nmancus1/539720a55feafa162cbecaa3175d7304/raw/237081cd7f8d93520e16563a387f1500894024be/SuppressWarnings.xml  Please note that commit https://github.com/checkstyle/checkstyle/pull/8752/commits/9794dca69cf8d8ab5645f6ec23c80191065ff6d6 is not under review here, but is needed for functionality of this check.","closed","","nick-mancuso","2020-08-21T20:12:06Z","2020-08-25T03:20:34Z"
"","8451","Issue #8450: Implement Javadoc Metadata Scraper","#8450   Draft PR. Work in progress  Implemented:  - [x]  Creation of text block from a node's subtree(required for description property) - [x]  Creation of scraper utility for module properties - [x] Creation of the rest of scraer util, except packageName","closed","","gaurabdg","2020-07-14T19:13:17Z","2020-07-17T12:28:06Z"
"","8342","Issue #8328: Change name of checkstyle types to be close to real java types - misc","#8328   Types Refactored in first commit -  1. Pattern 2. URI 3. File 4. Scope 5. AccessModifierOption[]","closed","","gaurabdg","2020-06-25T12:29:26Z","2020-07-02T15:19:53Z"
"","8395","Issue #8328: Change name of checkstyle types to be close to real java types - other types","#8328   Types added to `property_types.xml`:  -  byte, byte[] - char, char[] - float, float[] - long, long[] - short, short[]","closed","","gaurabdg","2020-07-04T12:06:17Z","2020-07-04T17:09:00Z"
"","8343","Issue #8328: Change name of checkstyle types to be close to real java types - basic types","#8328   Refactored 1. `integer -> Integer` 2. `boolean -> Boolean` 3. `integerSet -> int[]` 4. create `Double` and `double[]` 5. `stringSet -> String[]`","closed","","gaurabdg","2020-06-25T19:09:19Z","2020-07-02T15:17:40Z"
"","8398","Issue #8328: Change name of checkstyle types to be close to real java types - regexp","#8328   - Introuduced `Pattern` and `Pattern[]` for types where it is used in setter method.","closed","","gaurabdg","2020-07-05T12:19:21Z","2020-07-06T14:48:29Z"
"","8337","Issue #8328: Change name of checkstyle types to be close to real java types - enums","#8328  Refactored -  1. `ClosingParensOption` 2. `ElementStyleOption` 3. `TrailingArrayCommaOption`  All other enums already have `Option` suffix already and just required a bit of renaming in `property_types.html` related files","closed","","gaurabdg","2020-06-24T16:22:45Z","2020-06-28T19:20:54Z"
"","8428","Issue #8306: Javadoc Modification for Metadata Generation Support - 6","#8306   Modifield Files: 	                ""UnnecessaryParentheses"",                 ""MultipleStringLiterals"",                 ""MultipleVariableDeclarations"",                 ""AvoidDoubleBraceInitialization"",                 ""ReturnCount"",                 ""CovariantEquals"",                 ""EqualsAvoidNull"",                 ""HiddenField"",                 ""NoClone"",                 ""IllegalInstantiation""","closed","","gaurabdg","2020-07-09T12:17:45Z","2020-07-10T13:56:37Z"
"","8442","Issue #8306: Javadoc Modification for Metadata Generation Support - 16","#8306   Modified Files:                 ""MissingJavadocType"",                 ""JavadocMethod"",                 ""JavadocBlockTagLocation"",                 ""OrderedProperties"",                 ""UpperEll"",                 ""FinalClass"",                 ""HideUtilityClassConstructor"",                 ""InterfaceIsType"",                 ""OneTopLevelClass"",                 ""MutableException"",","closed","","gaurabdg","2020-07-12T15:39:58Z","2020-07-12T17:53:16Z"
"","8440","Issue #8306: Javadoc Modification for Metadata Generation Support - 14","#8306   Modified Files:                 ""InterfaceMemberImpliedModifier"",                 ""ClassMemberImpliedModifier"",                 ""ModifierOrder"",                 ""RedundantModifier"",                 ""JavadocTagContinuationIndentation"",                 ""JavadocStyle"",                 ""JavadocVariable"",                 ""AtclauseOrder"",                 ""JavadocParagraph"",                 ""MissingJavadocMethod"",","closed","","gaurabdg","2020-07-12T09:42:11Z","2020-07-12T15:58:05Z"
"","8438","Issue #8306: Javadoc Modification for Metadata Generation Support - 13","#8306   Modified Files:                 ""FileTabCharacter"",                 ""NoWhitespaceBefore"",                 ""NoLineWrap"",                 ""EmptyLineSeparator"",                 ""OperatorWrap"",                 ""ParenPad"",                 ""NoWhitespaceAfter"",                 ""EmptyForInitializerPad"",                 ""WhitespaceAfter"",                 ""SingleSpaceSeparator"",","closed","","gaurabdg","2020-07-12T09:13:31Z","2020-07-12T15:47:24Z"
"","8426","Issue #8306: Javadoc Modification for Metadata Generation Support - 5","#8306   Modified Files:                 ""ExecutableStatementCount"",                 ""MethodLength"",                 ""RegexpHeader"",                 ""Header"",                 ""ExplicitInitialization"",                 ""InnerAssignment"",                 ""UnnecessarySemicolonAfterTypeMemberDeclaration"",                 ""UnnecessarySemicolonInTryWithResources"",                 ""FinalLocalVariable"",                 ""MissingSwitchDefault""","closed","","gaurabdg","2020-07-09T11:59:13Z","2020-07-10T10:28:35Z"
"","8423","Issue #8306: Javadoc Modification for Metadata Generation Support - 2","#8306   Modified Files:                 ""ClassTypeParameterName"",                 ""StaticVariableName"",                 ""LocalVariableName"",                 ""MethodTypeParameterName"",                 ""AbbreviationAsWordInName"",                 ""MethodName"",                 ""ParameterName"",                 ""MemberName"",                 ""CatchParameterName"",                 ""LambdaParameterName""","closed","","gaurabdg","2020-07-09T10:07:52Z","2020-07-09T14:13:53Z"
"","8433","Issue #8306: Javadoc Modification for Metadata Generation Support - 11","#8306   Modified Files: 	                ""UnusedImports"",                 ""IllegalImport"",                 ""RedundantImport"",                 ""Indentation"",                 ""CommentsIndentation"",                 ""MissingOverride"",                 ""AnnotationUseStyle"",                 ""AnnotationLocation"",                 ""PackageAnnotation"",                 ""MissingDeprecated""","closed","","gaurabdg","2020-07-10T13:06:57Z","2020-07-11T22:20:32Z"
"","8425","Issue #8306: Javadoc Modification for Metadata Generation Support - 4","#8306   Modified Files: 	                ""Translation"",                 ""NewlineAtEndOfFile"",                 ""FinalParameters"",                 ""TodoComment"",                 ""AnonInnerLength"",                 ""ParameterNumber"",                 ""LineLength"",                 ""OuterTypeNumber"",                 ""FileLength"",                 ""MethodCount""","closed","","gaurabdg","2020-07-09T11:10:30Z","2020-07-10T08:05:12Z"
"","8424","Issue #8306: Javadoc Modification for Metadata Generation Support - 3","#8306   Modified Files: 	                ""PackageName"",                 ""EmptyCatchBlock"",                 ""AvoidNestedBlocks"",                 ""LeftCurly"",                 ""NeedBraces"",                 ""EmptyBlock"",                 ""RightCurly"",                 ""DescendantToken"",                 ""UniqueProperties"",                 ""UncommentedMain""","closed","","gaurabdg","2020-07-09T10:53:21Z","2020-07-09T19:29:14Z"
"","8431","Issue #8306: Javadoc Modification for Metadata Generation Support - 9","#8306   Modified Files: 	                ""ModifiedControlVariable"",                 ""FallThrough"",                 ""SuperClone"",                 ""EqualsHashCode"",                 ""StringLiteralEquality"",                 ""NestedIfDepth"",                 ""UnnecessarySemicolonAfterOuterTypeDeclaration"",                 ""IllegalType"",                 ""SimplifyBooleanReturn"",                 ""DeclarationOrder""","closed","","gaurabdg","2020-07-10T11:05:42Z","2020-07-11T20:12:15Z"
"","8416","Issue #8306: Javadoc Modification for Metadata Generation Support - 1","#8306   Added modified `XdocsJavadoc` UT. Modified Files: - `NoCodeInFileCheck` - `RightCurlyCheck` - `BooleanExpressionComplexityCheck` - `ClassFanOutComplexityCheck` - `CyclomaticComplexityCheck` - `JavaNCSSCheck` - `NPathComplexityCheck` - `ConstantNameCheck` - `InterfaceTypeParamterNameCheck` - `LocalFinalVariableNameCheck` - `TypeNameCheck` Javadoc of `RightCurlyCheck` Before: ![Screenshot_20200707_223928](https://user-images.githubusercontent.com/23253816/86817762-19023a00-c0a3-11ea-9db3-51a3f9b683fc.png) After: ![Screenshot_20200707_223000](https://user-images.githubusercontent.com/23253816/86817691-fc660200-c0a2-11ea-908a-ad0c0004f25e.png)","closed","","gaurabdg","2020-07-07T16:07:29Z","2020-07-09T07:21:14Z"
"","8441","Issue #8306: Javadoc Modification for Metadata Generation Support - 15","#8306 Modified Files:                 ""SingleLineJavadoc"",                 ""NonEmptyAtclauseDescription"",                 ""JavadocMissingWhitespaceAfterAsterisk"",                 ""JavadocPackage"",                 ""MissingJavadocPackage"",                 ""JavadocType"",                 ""SummaryJavadoc"",                 ""JavadocContentLocation"",                 ""WriteTag"",                 ""InvalidJavadocPosition"",","closed","","gaurabdg","2020-07-12T14:17:18Z","2020-07-12T15:56:15Z"
"","8444","Issue #8306: Javadoc Modification for Metadata Generation Support - final","#8306  Modified Filter files. This is the final PR for Javadoc Modification.","closed","","gaurabdg","2020-07-12T22:27:49Z","2020-07-13T00:01:38Z"
"","8432","Issue #8306: Javadoc Modification for Metadata Generation Support - 10","#8306  Modified Files:                 ""ArrayTrailingComma"",                 ""NoEnumTrailingComma"",                 ""IllegalCatch"",                 ""AvoidNoArgumentSuperConstructorCall"",                 ""NoArrayTrailingComma"",                 ""ImportOrder"",                 ""CustomImportOrder"",                 ""AvoidStaticImport"",                 ""ImportControl"",                 ""AvoidStarImport""","closed","","gaurabdg","2020-07-10T11:42:48Z","2020-07-12T08:06:55Z"
"","8443","Issue #8306: Javadoc Modification for Metadata Generation Support - 17","#8306  Modified Files: 	                ""VisibilityModifier"",                 ""InnerTypeLast"",                 ""DesignForExtension"",                 ""ThrowsCount"",                 ""OuterTypeFilename"",                 ""TrailingComment"",                 ""RegexpMultiline"",                 ""RegexpSinglelineJava"",                 ""Regexp"",                 ""RegexpSingleline"",                 ""RegexpOnFilename"",","closed","","gaurabdg","2020-07-12T16:07:31Z","2020-07-12T20:09:54Z"
"","8436","Issue #8306: Javadoc Modification for Metadata Generation Support - 12","#8306  Modified Files: 	                ""SuppressWarnings"",                 ""AnnotationOnSameLine"",                 ""ArrayTypeStyle"",                 ""AvoidEscapedUnicodeCharacters"",                 ""SeparatorWrap"",                 ""GenericWhitespace"",                 ""EmptyForIteratorPad"",                 ""WhitespaceAround"",                 ""MethodParamPad"",                 ""TypecastParenPad""","closed","","gaurabdg","2020-07-10T21:29:07Z","2020-07-11T08:03:51Z"
"","8429","Issue #8306: Javadoc Modification for Metadata Generation Support - 7","#8306  Modified Files: 	                ""MagicNumber"",                 ""MissingCtor"",                 ""ParameterAssignment"",                 ""DefaultComesLast"",                 ""NestedTryDepth"",                 ""SimplifyBooleanExpression"",                 ""RequireThis"",                 ""UnnecessarySemicolonInEnumeration"",                 ""AvoidInlineConditionals"",                 ""OverloadMethodsDeclarationOrder""","closed","","gaurabdg","2020-07-09T13:36:52Z","2020-07-11T16:54:08Z"
"","8430","Issue #8306: Javadoc Modification for Metadata Generation Support - 8","#8306  Modified Files: 	                ""IllegalTokenText"",                 ""NestedForDepth"",                 ""OneStatementPerLine"",                 ""SuperFinalize"",                 ""EmptyStatement"",                 ""IllegalToken"",                 ""IllegalThrows"",                 ""NoFinalizer"",                 ""VariableDeclarationUsageDistance"",                 ""PackageDeclaration""","closed","","gaurabdg","2020-07-09T14:34:31Z","2020-07-11T18:31:49Z"
"","8445","Issue #7498: add github actions file to generate diff report","#7498 Adding .yml file, which generates diff report for every pull request.  Triggers on opening, reopening, editing and new commit of pull request and when someone write comment ""report"". Also, the body of pull request should contain two lines: Diff Regression projects: {{URI to file like projects-to-test-on.properties}} Diff Regression config: {{URI to file like my_checks.xml}}  Result: new comment from github-actions bot with link on generated diff report  Requirements: As it push reports to aws bucket you will need: 1) secrets.AWS_ACCESS_KEY_ID - access key for AWS S3 service user 2) secrets.AWS_SECRET_ACCESS_KEY - security access key for AWS S3 service user  3) secrets.GITHUB_TOKEN - to sent new comment by github-actions bot [built-in github token] 4) .yml file start working only when it is located on master branch, so you need to merge it to master.  An example of how it works I created on my second account: https://github.com/jack1515/checkstyle/pull/1 Example of pr with no links: https://github.com/jack1515/checkstyle/pull/3","closed","","kate2513","2020-07-14T10:41:37Z","2020-07-14T14:23:51Z"
"","8223","Issue #7469: Use ArchUnit library to control source code - FreezingRule Experiment","#7469   This experimental PR is the child of #8112 .  @romani Removal of `Class  extends class  in (AbbreviationAsWordInNameCheck.java:0)\` (line 5 of `archunit_store/6822fb17-971a-4a6d-9985-0cef743990a1` in first commit) removes the parent error message `Cycle detected: Slice api -> Slice checks.naming -> Slice api\` (since line 5 is one of the cyclic dependency, so removing it breaks the cycle `Slice api -> Slice checks.naming -> Slice api`) found in the diff and the UT `packageCyclicDependencyTest` fails.","closed","abandoned,","gaurabdg","2020-05-03T21:09:40Z","2021-02-07T22:45:56Z"
"","9005","Phantom description for last ""see"" tag","## Source ```java class TokenTypes {      /**      * @see #IMPORT Some description      * @see #CLASS_DEF      * @see #INTERFACE_DEF      **/     public static final int EOF; } ``` ## AST ``` `--JAVADOC -> JAVADOC [3:7]     |--NEWLINE -> \n [3:7]     |--LEADING_ASTERISK ->      * [4:0]     |--WS ->   [4:6]     |--JAVADOC_TAG -> JAVADOC_TAG [4:7]     |   |--SEE_LITERAL -> @see [4:7]     |   |--WS ->   [4:11]     |   |--REFERENCE -> REFERENCE [4:12]     |   |   |--HASH -> # [4:12]     |   |   `--MEMBER -> IMPORT [4:13]     |   |--WS ->   [4:19]     |   `--DESCRIPTION -> DESCRIPTION [4:20]        // OK, DESCRIPTION expected here     |       |--TEXT -> Some description [4:20]     |       `--NEWLINE -> \n [4:36]     |--LEADING_ASTERISK ->      * [5:0]     |--WS ->   [5:6]     |--JAVADOC_TAG -> JAVADOC_TAG [5:7]     |   |--SEE_LITERAL -> @see [5:7]     |   |--WS ->   [5:11]     |   |--REFERENCE -> REFERENCE [5:12]     |   |   |--HASH -> # [5:12]     |   |   `--MEMBER -> CLASS_DEF [5:13]     |   `--NEWLINE -> \n [5:22]                     // OK, no DESCRIPTION     |--LEADING_ASTERISK ->      * [6:0]     |--WS ->   [6:6]     |--JAVADOC_TAG -> JAVADOC_TAG [6:7]     |   |--SEE_LITERAL -> @see [6:7]     |   |--WS ->   [6:11]     |   |--REFERENCE -> REFERENCE [6:12]     |   |   |--HASH -> # [6:12]     |   |   `--MEMBER -> INTERFACE_DEF [6:13]     |   |--NEWLINE -> \n [6:26]     |   `--DESCRIPTION -> DESCRIPTION [7:0]        // ERROR, asterisk from the next line treated as DESCRIPTION     |       `--LEADING_ASTERISK ->      * [7:0]     `--EOF ->  [7:6] ```  There is no description for the last `@see` tag. And there should be no `DESCRIPTION` node in the AST. Discovered while working in #6722","open","antlr-javadoc,","pbludov","2020-11-21T10:15:32Z","2020-11-23T16:19:40Z"
"","8863","AbbreviationAsWordInName check   middle row and the last row are inconsistent","""fristXML"" and ""fristXMLt"" use the getAbbreviation method to return ""XML"" and ""XM"" respectively","open","","ellien-lucky-monkey","2020-09-30T08:13:25Z","2020-10-04T16:17:00Z"
"","8964","Issue #8963: Make output of TranslationCheck deterministic","","closed","","t-rasmud","2020-11-05T00:16:32Z","2020-11-06T15:51:48Z"
"","8952","config: bump senvntu to 1.38.0","","closed","","romani","2020-11-01T21:45:51Z","2020-11-02T14:41:36Z"
"","8797","Pull #8797: bump Saxon-HE from 9.9.1-7 to 10.2","","closed","miscellaneous,","timurt","2020-09-06T14:32:03Z","2020-09-20T12:59:59Z"
"","8773","UT for enforcing a template on the class level javadocs to prevent the JavadocMetadataScraper from breaking","","open","","gaurabdg","2020-08-28T21:38:58Z","2020-08-28T21:38:58Z"
"","8763","minor: add RecordComponentNumberCheck metadata file","","closed","","gaurabdg","2020-08-26T15:52:35Z","2020-08-26T16:08:21Z"
"","8694","doc: Modify PatternVariableNameCheck and RecordTypeParameterNameCheck to adhere to new template for metadata scraping","","closed","","gaurabdg","2020-08-13T21:35:14Z","2020-08-13T22:55:09Z"
"","8640","minor: edit javadodc example marker for metadata-gen - imports","","closed","","gaurabdg","2020-08-11T10:05:18Z","2020-08-11T18:22:46Z"
"","8637","minor: edit javadodc example marker for metadata-gen - blocks","","closed","","gaurabdg","2020-08-11T10:01:58Z","2020-08-11T16:56:19Z"
"","8584","minor: fix inconsistent javadoc for metadata scraper","","closed","","gaurabdg","2020-07-31T14:53:30Z","2020-07-31T14:59:43Z"
"","8538","minor: fix violations from future EmptyLineBeforeAtClauseBlock (#6192)","","closed","","josephmate","2020-07-19T21:27:43Z","2021-04-27T01:06:39Z"
"","8477","Issue8447 diff report","","closed","","OvchinnikovNV","2020-07-15T17:49:21Z","2020-07-15T17:49:40Z"
"","8358","Create task1.yml","","closed","","OvchinnikovNV","2020-06-29T16:52:40Z","2020-06-29T16:54:38Z"
"","8346","minor: modify boolean doc in property_types.xml","","closed","","gaurabdg","2020-06-27T18:01:13Z","2020-06-27T20:08:30Z"
"","8280","minor: extend comment on how to execute 'wercker.sh sonarqube' on local","","closed","","romani","2020-05-30T13:30:40Z","2020-05-30T14:52:21Z"
"","8130","Issue #7582: Update doc LeftCurly","","closed","","ImmortalRabbit","2020-04-19T10:49:12Z","2020-11-14T22:59:28Z"
"","8123","minor: Remove whitespaces before colon of switch cases and default","","closed","","wilcoln","2020-04-18T17:02:04Z","2020-04-19T11:38:25Z"
"","8015","minor: correct an inconsistency in comments of RequireThisCheck","","closed","","wilcoln","2020-04-03T07:25:58Z","2020-04-03T11:14:11Z"