"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","3994","mvn checkstyle:check 报错","执行 mvn checkstyle:check 报下列异常  ---------------  [INFO] Scanning for projects... [WARNING] The POM for org.apache.maven.plugins:maven-checkstyle-plugin:jar:2.17 is missing, no dependency information available [INFO] [INFO] ------------------------------------------------------------------------ [INFO] Building checkstyle-test 0.0.1-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO] [INFO] --- maven-checkstyle-plugin:2.17:checkstyle (default-cli) @ checkstyle-test --- [WARNING] The POM for org.apache.maven.plugins:maven-checkstyle-plugin:jar:2.17 is missing, no dependency information available [WARNING] The POM for org.codehaus.plexus:plexus-resources:jar:1.0.1 is missing, no dependency information available [WARNING] Error injecting: org.apache.maven.plugin.checkstyle.CheckstyleReport java.lang.TypeNotPresentException: Type org.apache.maven.plugin.checkstyle.CheckstyleReport not present         at org.eclipse.sisu.space.URLClassSpace.loadClass(URLClassSpace.java:147)         at org.eclipse.sisu.space.NamedClass.load(NamedClass.java:46)         at org.eclipse.sisu.space.AbstractDeferredClass.get(AbstractDeferredClass.java:48)         at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)         at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)         at com.google.inject.internal.ProviderInternalFactory$1.call(ProviderInternalFactory.java:65)         at com.google.inject.internal.ProvisionListenerStackCallback$Provision.provision(ProvisionListenerStackCallback.java:115)         at org.eclipse.sisu.bean.BeanScheduler$Activator.onProvision(BeanScheduler.java:176)         at com.google.inject.internal.ProvisionListenerStackCallback$Provision.provision(ProvisionListenerStackCallback.java:126)         at com.google.inject.internal.ProvisionListenerStackCallback.provision(ProvisionListenerStackCallback.java:68)         at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:63)         at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)         at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)         at com.google.inject.internal.InjectorImpl.__callInContext(InjectorImpl.java:1092)         at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java)         at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)         at org.eclipse.sisu.inject.Guice4$1.get(Guice4.java:162)         at org.eclipse.sisu.inject.LazyBeanEntry.getValue(LazyBeanEntry.java:81)         at org.eclipse.sisu.plexus.LazyPlexusBean.getValue(LazyPlexusBean.java:51)         at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:263)         at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:255)         at org.apache.maven.plugin.internal.DefaultMavenPluginManager.getConfiguredMojo(DefaultMavenPluginManager.java:517)         at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:121)         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)         at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)         at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)         at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)         at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)         at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)         at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.__invoke(DelegatingMethodAccessorImpl.java:43)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java)         at java.lang.reflect.Method.invoke(Method.java:497)         at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)         at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)         at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)         at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) Caused by: java.lang.NoClassDefFoundError: org/apache/maven/reporting/AbstractMavenReport         at java.lang.ClassLoader.defineClass1(ClassLoader.java)         at java.lang.ClassLoader.defineClass(ClassLoader.java:760)         at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)         at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)         at java.net.URLClassLoader.access$100(URLClassLoader.java:73)         at java.net.URLClassLoader$1.run(URLClassLoader.java:368)         at java.net.URLClassLoader$1.run(URLClassLoader.java:362)         at java.security.AccessController.doPrivileged(Native Method)         at java.net.URLClassLoader.findClass(URLClassLoader.java:361)         at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClassFromSelf(ClassRealm.java:401)         at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:42)         at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)         at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)         at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)         at java.lang.ClassLoader.defineClass1(ClassLoader.java)         at java.lang.ClassLoader.defineClass(ClassLoader.java:760)         at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)         at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)         at java.net.URLClassLoader.access$100(URLClassLoader.java:73)         at java.net.URLClassLoader$1.run(URLClassLoader.java:368)         at java.net.URLClassLoader$1.run(URLClassLoader.java:362)         at java.security.AccessController.doPrivileged(Native Method)         at java.net.URLClassLoader.findClass(URLClassLoader.java:361)         at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClassFromSelf(ClassRealm.java:401)         at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:42)         at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)         at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)         at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)         at org.eclipse.sisu.space.URLClassSpace.loadClass(URLClassSpace.java:139)         ... 45 more Caused by: java.lang.ClassNotFoundException: org.apache.maven.reporting.AbstractMavenReport         at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)         at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)         at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)         at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)         ... 74 more [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 0.375 s [INFO] Finished at: 2017-03-13T19:01:19+08:00 [INFO] Final Memory: 22M/156M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:checkstyle (default-cli) on project checkstyle-test: Execution default-cli of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:checkstyle failed: Unable to load the mojo 'checkstyle' in the plugin 'org.apache.maven.plugins:maven-checkstyle-plugin:2.17'. A required class is missing: org/apache/maven/reporting/AbstractMavenReport [ERROR] ----------------------------------------------------- [ERROR] realm =    plugin>org.apache.maven.plugins:maven-checkstyle-plugin:2.17 [ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy [ERROR] urls[0] = file:/C:/Users/DC/.m2/repository/org/apache/maven/plugins/maven-checkstyle-plugin/2.17/maven-checkstyle-plugin-2.17.jar [ERROR] urls[1] = file:/C:/Users/DC/.m2/repository/org/codehaus/plexus/plexus-resources/1.0.1/plexus-resources-1.0.1.jar [ERROR] urls[2] = file:/C:/Users/DC/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar [ERROR] Number of foreign imports: 1 [ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]] [ERROR] [ERROR] -----------------------------------------------------: org.apache.maven.reporting.AbstractMavenReport [ERROR] -> [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException  --------------","closed","","SchuckBeta","2017-03-13T11:04:40Z","2017-03-13T14:45:39Z"
"","3788","config: enforce strict version of htmlunit code to prevent build fail…","…ures in our CI while htmlunit  have build failures  failure build on our side:  https://app.wercker.com/checkstyle/checkstyle/runs/build/5892509b7062f40100fb5a60?step=589250abe3159e000111bb93  failure on htmlunit side: https://ci.canoo.com/teamcity/viewLog.html?buildId=256892&tab=buildResultsDiv&buildTypeId=HtmlUnit_FastBuild  stable build: https://ci.canoo.com/teamcity/viewLog.html?buildId=256893&buildTypeId=HtmlUnit_FastBuild&tab=buildChangesDiv  issue with project : https://sourceforge.net/p/htmlunit/feature-requests/244/  so we will use strict revision for checkout","closed","","romani","2017-02-02T02:50:37Z","2017-02-03T00:39:40Z"
"","3295","config: sonar execution is only for master, to avoid authentication p…","…roblem on PR builds","closed","","romani","2016-06-21T01:36:51Z","2016-06-21T02:18:44Z"
"","3296","Issue #3229: fix for 'OpenJDK 64-Bit Server VM warning: ignoring opti…","…on UseSplitVerifier; support was removed in 8.0' #3229","closed","","romani","2016-06-21T13:10:01Z","2016-06-21T15:45:39Z"
"","3894","Issue #3700: Control Characters are not skipped with google_checks co…","…nfig  #3700   Changes are according to https://en.wiktionary.org/wiki/Appendix:Control_characters.  Apart from changing 1 to 9 to cover [C0 (ASCII and derivatives)](https://en.wiktionary.org/wiki/Appendix:Control_characters#C0_.28ASCII_and_derivatives.29), I add a missing `00AD` from first row of [Unicode control characters](https://en.wiktionary.org/wiki/Appendix:Control_characters#Unicode_control_characters).  Diff report http://www.luolc.com/checkstyle-diff-report/issue3700/","closed","","Luolc","2017-03-02T07:13:00Z","2017-03-28T08:49:31Z"
"","3945","Issue #3933:Modified the NoLineWrapCheck method to take input from fi…","…les from a subfolder in the directory and also added the input files to that subfolder","closed","","divsidhu-26","2017-03-06T21:49:17Z","2017-03-07T11:04:45Z"
"","3941","Issue: ""#3933"":Modified the NoLineWrapCheck method to take input from fi…","…les from a subfolder in the directory and also added the input files to that subfolder","closed","","divsidhu-26","2017-03-06T13:25:12Z","2017-03-06T21:52:01Z"
"","3942","Issue #3896: Test failed due to locale message settings. (with non-En…","…glish locale settings)  #3896   http://www.luolc.com/checkstyle-diff-report/issue3896/ No difference. It is an issue about localization which can only be reproduced on a non-English environment.","closed","","Luolc","2017-03-06T16:13:24Z","2017-03-13T07:11:47Z"
"","3940","Issue:#3993 :- Modified the NoLineWrapCheck method to take input from files …","…from a subfolder in the directory and also added the input files to that subfolder  Mandatory to understand and do: 0) Issue you are trying to fix/resolve has to have ""approved"" label. 1) Put in description of Pull Request reference to issue if it exists. Example: ""Issue: #XXXXXX"" 2) Commit message should adhere to the following rules:    a) Must match one of the following patterns:\n""       ^Issue #\\d+: .*$       ^Pull #\\d+: .*$       ^(minor|config|infra|doc|spelling): .*$    b) It contains only one line of text    c) Must not end with a period, space, or tab","closed","","divsidhu-26","2017-03-06T12:56:41Z","2017-03-06T13:16:21Z"
"","3947","Issue #3933: Modified the NoLineWrapCheck method to take input from...","…files from a subfolder in the directory and also added the input files to that subfolder(Issue #3933 )","closed","incomplete,","divsidhu-26","2017-03-07T11:14:47Z","2017-05-01T20:26:50Z"
"","3019","config: NumericLiteralNeedsUnderscoreCheck used from sevntu.checkstyl…","…e 1.19.0  https://github.com/checkstyle/checkstyle/pull/3019","closed","","cypai","2016-03-08T23:14:19Z","2016-03-09T13:18:18Z"
"","3196","minor: travis: fix for PR validation - 'set -e' was added to fail on …","…any problem instead of being green","closed","","romani","2016-05-19T13:19:27Z","2016-05-20T16:48:33Z"
"","3077","Allow for an ""ignorePattern"" option for the RequireThis check","Would like to be able to ignore certain fields by this check, such as ""logger""","closed","","mmoayyed","2016-04-04T19:12:35Z","2016-04-07T13:23:47Z"
"","3896","Test failed due to locale message settings. (with non-English locale settings)","With a non-English locale settings (in my case is zh-CN), running [CheckerTest#testHaltOnExceptionOff](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java#L756) will assert an error as following: ``` org.junit.ComparisonFailure: error message 0  Expected :path/to/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/InputMain.java:0: Got an exception - java.lang.IndexOutOfBoundsException: test Actual   :path/to/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/InputMain.java:0: 异常 - java.lang.IndexOutOfBoundsException: test  // something else... ``` The difference is between `Got an exception` and `异常`, while `异常` is a Chinese translation of `Got an exception`.   I find that these two words are defined in [messages.properties](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/messages.properties#L2) and [messages_zh.properties](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/messages_zh.properties#L2).  In messages.properties ``` general.exception=Got an exception - {0} ``` In messages_zh.properties ``` general.exception=异常 - {0} ```  And the configuration is loaded by [LocalizedMessage](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java#L43). We can set the locale manually by [LocalizedMessage#setLocale](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java#L363) and this method is called by [Checker](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L407). I thought setting the locale in the test method should solve the bug. ``` @Override     public void finishLocalSetup() throws CheckstyleException {         final Locale locale = new Locale(localeLanguage, localeCountry);         LocalizedMessage.setLocale(locale); ```  So back to the error itself. In method `CheckerTest#testHaltOnExceptionOff`, I set the locale by adding  ``` checker.setLocaleLanguage(Locale.ENGLISH.getLanguage()); checker.finishLocalSetup(); ``` and the test in Intellij turns green after that.  But the same error still occurs when I run `mvn clean verify` in Terminal: ``` Failed tests:   CheckerTest.testHaltOnExceptionOff:780->BaseCheckTestSupport.verify:231->BaseCheckTestSupport.verify:262 error message 0 expected: but was: ```  That's the most effort I could do by now. I don't know what to do next. The bug bothers me a lot for I could not use `mvn clean verify` to ensure my change is valid before sending a PR. It's really sad :(","closed","easy,","Luolc","2017-03-02T10:07:15Z","2017-03-13T04:18:20Z"
"","3351","JavadocStyle: Don’t validate HTML tags in {@code} blocks","With [this code](https://github.com/square/wire/pull/611) checkstyle incorrectly reported “Extra HTML tag found:”.  ``` $ cat TestClass.java public class TestClass { /**  * A custom type adapter as configured in a pom.xml file.  *  *    {@code  *  *     *     squareup.wire.exemplar.Locale  *     java.util.Locale  *     com.squareup.wire.exemplar.Exemplar#LOCALE_ADAPTER  *     * }  */     void method() {     } }  $ cat TestConfig.xml                                 $ java -jar checkstyle-7.0-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:8:48: Extra HTML tag found:  [JavadocStyle] [ERROR] TestClass.java:9:34: Extra HTML tag found:  [JavadocStyle] [ERROR] TestClass.java:10:67: Extra HTML tag found:  [JavadocStyle] [ERROR] TestClass.java:11:6: Extra HTML tag found:  [JavadocStyle] Audit done. Checkstyle ends with 4 errors. ```  Checkstyle shouldn’t attempt to interpret HTML tags inside of `{@code}` blocks. For example, I might use a `{@code}` block to give an example of malformed HTML. In this case the XML is well formed regardless, but that’s irrelevant. ##","open","javadoc,","swankjesse","2016-07-15T15:59:49Z","2020-03-11T03:54:13Z"
"","3778","PackageObjectFactory hides real exception","While upgrading backport to 7.5, running Checkstyle on the project resulted in `AtclauseOrderCheck` to not be able to be instantiated. ```` com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Unable to instantiate 'AtclauseOrder' class, it is also not possible to instantiate it as com.puppycrawl.tools.checkstyle.checks.annotation.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.blocks.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.coding.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.design.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.header.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.imports.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.indentation.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.javadoc.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.metrics.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.modifier.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.naming.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.regexp.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.sizes.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.whitespace.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.AtclauseOrder, com.puppycrawl.tools.checkstyle.filefilters.AtclauseOrder, com.puppycrawl.tools.checkstyle.filters.AtclauseOrder, com.puppycrawl.tools.checkstyle.AtclauseOrder, AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.annotation.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.blocks.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.coding.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.design.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.header.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.imports.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.indentation.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.javadoc.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.metrics.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.modifier.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.naming.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.regexp.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.sizes.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.whitespace.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.filefilters.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.filters.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.AtclauseOrderCheck. Please recheck that class name is specified as canonical name or read how to configure short name usage http://checkstyle.sourceforge.net/config.html#Packages. Please also recheck that provided ClassLoader to Checker is configured correctly. 	at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:455) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:171) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:423) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:361) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:176) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Unable to instantiate 'AtclauseOrder' class, it is also not possible to instantiate it as com.puppycrawl.tools.checkstyle.checks.annotation.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.blocks.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.coding.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.design.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.header.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.imports.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.indentation.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.javadoc.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.metrics.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.modifier.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.naming.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.regexp.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.sizes.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.whitespace.AtclauseOrder, com.puppycrawl.tools.checkstyle.checks.AtclauseOrder, com.puppycrawl.tools.checkstyle.filefilters.AtclauseOrder, com.puppycrawl.tools.checkstyle.filters.AtclauseOrder, com.puppycrawl.tools.checkstyle.AtclauseOrder, AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.annotation.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.blocks.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.coding.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.design.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.header.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.imports.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.indentation.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.javadoc.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.metrics.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.modifier.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.naming.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.regexp.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.sizes.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.whitespace.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.checks.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.filefilters.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.filters.AtclauseOrderCheck, com.puppycrawl.tools.checkstyle.AtclauseOrderCheck. Please recheck that class name is specified as canonical name or read how to configure short name usage http://checkstyle.sourceforge.net/config.html#Packages. Please also recheck that provided ClassLoader to Checker is configured correctly. 	at com.puppycrawl.tools.checkstyle.PackageObjectFactory.createModule(PackageObjectFactory.java:139) 	at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:152) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:171) 	at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:450) 	... 4 more Checkstyle ends with 1 errors. ````  There was no good reason for the problem given in the exception log so I had to dig into the problem manually. When debugging the problem, I found that the module was found in the `Map` and was located using `Class.for` but it failed to instantiate the check. No exception was being printed or reported because it was being ignored via https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#L221 . When adding a `printStackTrace` the reason for the problem was shown. ```` java.lang.reflect.InvocationTargetException 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:513) 	at com.puppycrawl.tools.checkstyle.PackageObjectFactory.createObject(PackageObjectFactory.java:223) 	at com.puppycrawl.tools.checkstyle.PackageObjectFactory.createObjectFromMap(PackageObjectFactory.java:160) 	at com.puppycrawl.tools.checkstyle.PackageObjectFactory.createModule(PackageObjectFactory.java:124) 	at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:152) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:171) 	at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:450) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:171) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:423) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:361) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:176) Caused by: java.lang.UnsupportedClassVersionError: org/antlr/v4/runtime/misc/ParseCancellationException : Unsupported major.minor version 51.0 ```` Reason for exception was antlr upgraded to Java 7 in 4.6 .  I think this error should have been reported in the console. The original reason for ignoring the exception was because `Class.for` could fail while we search for the module. In this case, it wasn't failing to find it. IMO, we should report any exception after `Class.for` succeeds when we fail to work with the constructor or instantiating. We found the class, no other work or searching we do will get it to instantiate correctly.","closed","approved,","rnveach","2017-01-30T00:28:48Z","2017-02-01T21:18:38Z"
"","3507","Javadoc: Column number of DetailNode is always 0 for first line","While transforming ANTRL4 ParseTree to our Checkstyle DetailNode tree, column number is copied as is. However, if DetailNode object matches an object in first line of Javadoc comment, there is no any offset appended. https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java#L290  For example: test.java  ``` java class A {     /** This is         a method */     void method(){} } ```  ``` $ java -jar checkstyle-7.2-SNAPSHOT-all.jar -J test.java CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |--LITERAL_CLASS -> class [1:0] |--IDENT -> A [1:6] `--OBJBLOCK -> OBJBLOCK [1:8]     |--LCURLY -> { [1:8]     |--METHOD_DEF -> METHOD_DEF [4:4]     |   |--MODIFIERS -> MODIFIERS [4:4]     |   |--TYPE -> TYPE [4:4]     |   |   |--JAVADOC ->  This is\n        a method  [2:0]     |   |   |   |--TEXT ->  This is [2:0]     |   |   |   |   |--WS ->   [2:0]     |   |   |   |   |--CHAR -> T [2:1]     |   |   |   |   |--CHAR -> h [2:2]     |   |   |   |   |--CHAR -> i [2:3]     |   |   |   |   |--CHAR -> s [2:4]     |   |   |   |   |--WS ->   [2:5]     |   |   |   |   |--CHAR -> i [2:6]     |   |   |   |   `--CHAR -> s [2:7]     |   |   |   |--NEWLINE -> \n [2:8]     |   |   |   |--TEXT ->         a method  [3:0]     |   |   |   |   |--WS ->          [3:0]     |   |   |   |   |--CHAR -> a [3:8]     |   |   |   |   |--WS ->   [3:9]     |   |   |   |   |--CHAR -> m [3:10]     |   |   |   |   |--CHAR -> e [3:11]     |   |   |   |   |--CHAR -> t [3:12]     |   |   |   |   |--CHAR -> h [3:13]     |   |   |   |   |--CHAR -> o [3:14]     |   |   |   |   |--CHAR -> d [3:15]     |   |   |   |   `--WS ->   [3:16]     |   |   |   `--EOF ->  [3:17]     |   |   `--LITERAL_VOID -> void [4:4]     |   |--IDENT -> method [4:9]     |   |--LPAREN -> ( [4:15]     |   |--PARAMETERS -> PARAMETERS [4:16]     |   |--RPAREN -> ) [4:16]     |   `--SLIST -> { [4:17]     |       `--RCURLY -> } [4:18]     `--RCURLY -> } [5:0] ```  Attention to `JAVADOC ->  This is\n        a method  [2:0]`. Line number is 2, however column number is 0 despite it is actually on 7th column. So expected column number is 7. ##","closed","approved,","baratali","2016-10-20T13:09:09Z","2017-01-17T20:07:16Z"
"","3493","Checker Cache and TranslationCheck conflict","While looking into #3487 with fix #3489, I noticed there is an issue with skipping certain files in checks that require all files to be passed to them to make final determinations on if there was any violations. The cache prevents a file from being passed at all to a check, as the cache is checked before sending it to the checks via `Checker.processFile`. https://github.com/checkstyle/checkstyle/blob/4b7adec5ae396e24d3d0bf0d790919a45bac5421/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L261 `TranslationCheck` looks at multiple files, and only does any validation after all the files are given to it: https://github.com/checkstyle/checkstyle/blob/4b7adec5ae396e24d3d0bf0d790919a45bac5421/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java#L245-L246 and https://github.com/checkstyle/checkstyle/blob/4b7adec5ae396e24d3d0bf0d790919a45bac5421/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java#L250-L259  Processing 1 file and skipping others will cause it to falsely believe that files are missing and report excess violations, even when no violations on a non-cache run exist. This is because we don't guess were the files are, we use the files reported to the check to know where they are and if they exist.  Steps to reproduce on CS locally: **0) Fixes for the above referenced issues need to be applied for proper reproduction** 1) Clean target directory of any cache file. 2) Run checkstyle's ant-phase-verify with cache on. No violations are produced but cache file is created 3) Open the cache file in a standard text editor and delete one property file from the cache. This will simulate that one file is being modified and the others staying the same without actually changing any files. For this example, I choose `\src\main\resources\com\puppycrawl\tools\checkstyle\checks\naming\messages_es.properties`. 4) Run checkstyle again and this time 8 violations are reported, even though no files were modified and we got no violations on our first run in step 2. Below is the output:  ``` Starting audit... [ERROR] M:\checkstyleWorkspaceEclipse\checkstyle\src\main\resources\com\puppycrawl\tools\checkstyle\checks\naming:0: Properties file 'messages.properties' is missing. [Translation] [ERROR] M:\checkstyleWorkspaceEclipse\checkstyle\src\main\resources\com\puppycrawl\tools\checkstyle\checks\naming:0: Properties file 'messages_de.properties' is missing. [Translation] [ERROR] M:\checkstyleWorkspaceEclipse\checkstyle\src\main\resources\com\puppycrawl\tools\checkstyle\checks\naming:0: Properties file 'messages_fi.properties' is missing. [Translation] [ERROR] M:\checkstyleWorkspaceEclipse\checkstyle\src\main\resources\com\puppycrawl\tools\checkstyle\checks\naming:0: Properties file 'messages_pt.properties' is missing. [Translation] [ERROR] M:\checkstyleWorkspaceEclipse\checkstyle\src\main\resources\com\puppycrawl\tools\checkstyle\checks\naming:0: Properties file 'messages_ja.properties' is missing. [Translation] [ERROR] M:\checkstyleWorkspaceEclipse\checkstyle\src\main\resources\com\puppycrawl\tools\checkstyle\checks\naming:0: Properties file 'messages_fr.properties' is missing. [Translation] [ERROR] M:\checkstyleWorkspaceEclipse\checkstyle\src\main\resources\com\puppycrawl\tools\checkstyle\checks\naming:0: Properties file 'messages_tr.properties' is missing. [Translation] [ERROR] M:\checkstyleWorkspaceEclipse\checkstyle\src\main\resources\com\puppycrawl\tools\checkstyle\checks\naming:0: Properties file 'messages_zh.properties' is missing. [Translation] Audit done. Checkstyle ends with 8 errors. ``` ##  Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/38057260-checker-cache-and-translationcheck-conflict?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","hard,","rnveach","2016-10-03T01:47:37Z","2018-06-29T17:21:55Z"
"","3566","Cache conflict between Maven/Ant and Eclipse/CLI run","While finishing up #3487, I noticed that running Checkstyle through Maven and CLI kept causing the cache to be erased. When looking into it, the main differences was the hash for the configuration.  Since I am using the exact same configuration, properties, settings, etc on the same workspace, I am expecting the 2 to work together, generate the same hash, and not keep erasing the cache when running the 2.  By default, when CLI runs a check with the check's severity as `ignore`, the check is still processed but [violations are not printed by the `DefaultLogger`](https://github.com/checkstyle/checkstyle/blob/5e0ab75777985f056715f6d9dc5e4667b1a0dfa2/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java#L121) (which is also [the same as `XMLLogger`](https://github.com/checkstyle/checkstyle/blob/5e0ab75777985f056715f6d9dc5e4667b1a0dfa2/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java#L120)). This is why they still appear as part of the configuration hash. `maven-checkstyle-plugin` currently uses it's own version of the CLI so it still processes ignored checks like our CLI. Ant run skips ignored checks because of `omitIgnoredModules` which is the heart of the problem. https://github.com/checkstyle/checkstyle/blob/fbf3f95c2273be23b966cba6e6ef89390a6fb020/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java#L111  Users don't expect checks with a configured severity of `ignore` on the check itself to be run, so this is how our CLI and Ant should be by default.  In terms of what this issue should do:  1) We should add the option `omitIgnoredModules` to the CLI. It should default to on (TRUE) (like Ant), but can be turned off. 2) All our uses in our ANT configs of `omitIgnoredModules` should be turned off (FALSE). We want to run every check to be a sort-of no-exception validation. 3) We should make a request to `maven-checkstyle-plugin` to add the property `omitIgnoredModules` so users can specify it, and so we can make sure it stays off (FALSE) by default. 4) Do similar requests to Eclipse-CS and IntelijIdea plugins.","closed","breaking compatibility,","rnveach","2016-11-19T03:01:05Z","2017-06-19T21:54:10Z"
"","3391","JavadocParagraph with lines breaks","When writing a javadoc like  ``` /**  * This is a class that does anything.  *   * This is a paragraph.  * It contains a line break.  *   */ ```  The Checkstyle rule JavadocParagraph shows two warnings:  `Javadoc Paragraph:  tag should be placed immediately before the first word, with no space after.` and `Javadoc Paragraph:  tag should be preceded with an empty line.`  If the `` tag is removed, no warning is shown, as expected, but the javadoc looks not as I want it.  ---  I expect, that in this case no warning is shown, since the paragraph tag is correctly inserted and closed. ##","closed","javadoc,","Schalli1987","2016-08-04T12:55:40Z","2017-03-02T02:10:06Z"
"","3041","RequireThisCheck doesn't see outer classes for anonymous classes","When we use properties from the outer class in the anonymous class the report ends up only with `this.`. For example:  ``` java public class Foo {      private final String foo = ""foo"";      public static void main(String[] args) {         new Foo().run();     }      private void run() {         Runnable task = new Runnable() {              @Override             public void run() {                 System.out.println(foo);             }          };         task.run();     }  } ```  The report looks like:  ``` xml    ```  Although, when we move that `Runnable` to the normal inner class:  ``` java private void run() {     Runnable task = new MyRunnable();     task.run(); }  private class MyRunnable implements Runnable {      @Override     public void run() {         System.out.println(foo);     }  } ```  everything looks good:  ``` xml    ```  Thanks and sorry if it duplicates something existing already. ##","closed","approved,","artembilan","2016-03-17T21:22:23Z","2017-01-28T13:04:11Z"
"","3796","Remove unnecessary text from Javadoc tokens","When looking at some example Javadoc trees, I noticed if the javadoc is pretty big, we almost duplicate the entire contents multiple times in various nodes. We don't see this in the Java tree but this is mostly because of the differences between antlr2 and antlr4. One example of simplicity is `CLASS_DEF` in java where we just repeat the token name as the text. I still think there is too much being displayed in Javadoc tree and that we should limit this text by following the Java version and just repeating the token name.  Example: Javadoc: `/** Test Test. */` Tree: ````     |  |  |  |  `--JAVADOC ->  Test Test.  [2:3]     |  |  |  |      |--TEXT ->  [2:3]     |  |  |  |      |--HTML_ELEMENT -> Test [2:4]     |  |  |  |      |  `--PARAGRAPH -> Test [2:4]     |  |  |  |      |      |--P_TAG_OPEN ->  [2:4]     |  |  |  |      |      |  |--OPEN -> < [2:4]     |  |  |  |      |      |  |--P_HTML_TAG_NAME -> p [2:5]     |  |  |  |      |      |  `--CLOSE -> > [2:6]     |  |  |  |      |      |--TEXT -> Test [2:7]     |  |  |  |      |      `--P_TAG_CLOSE ->  [2:11]     |  |  |  |      |          |--OPEN -> < [2:11]     |  |  |  |      |          |--SLASH -> / [2:12]     |  |  |  |      |          |--P_HTML_TAG_NAME -> p [2:13]     |  |  |  |      |          `--CLOSE -> > [2:14]     |  |  |  |      |--TEXT ->  Test.  [2:15]     |  |  |  |      `--EOF ->  [2:22] ````  In this example, I would say the following tokens have unnecessary text: JAVADOC (a complete repeat of the entire javadoc), HTML_ELEMENT, PARAGRAPH, P_TAG_OPEN, P_TAG_CLOSE We would have to review the all the tokens and find a common rule to how we should apply this, especially for future tokens.  Right now, it might look like that any token that has children shouldn't have text.","closed","breaking compatibility,","rnveach","2017-02-03T23:59:32Z","2017-06-21T13:09:41Z"
"","3147","NonEmptyAtclauseDescription does not support tokens property correctly","When I attempt to customize the NonEmptyAtclauseDescription and select only specific javadoc tokens, the check fails.  NonEmptyAtClause.xml  ``` xml                                       ```  JavaDocTest.java:  ``` Java public class JavaDocTest {     /**      * sample javadoc.      *      * @param p1      *  Some param.      * @throws Exception      */     public void javaDocFailsCheck(int p1) throws Exception     {      } } ```  Command line:  `java -jar checkstyle-6.17-all.jar -c NonEmptyAtClause.xml JavaDocTest.java`  Result:  ``` Exception in thread ""main"" java.lang.IllegalArgumentException: given name RETURN_LITERAL         at com.puppycrawl.tools.checkstyle.utils.TokenUtils.getTokenId(TokenUtils.java:136)         at com.puppycrawl.tools.checkstyle.TreeWalker.registerCheck(TreeWalker.java:219)         at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:162)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138)         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:176)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:326)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:159) ```  The 'tokens' property is generated by the eclipse-cs plugin:  ![capture](https://cloud.githubusercontent.com/assets/11553559/14922029/93e5d576-0e35-11e6-969c-7cd79a68809e.JPG)  Ticking the 'Throws literal' option changes the configuration by removing the custom property (as all the default tokens are then selected) - at which point checkstyle runs without failing.","closed","","andrew-g-za","2016-04-29T15:32:06Z","2016-05-03T15:26:15Z"
"","3798","wercker ci should have most of testing launches on real code to shorten time of Travis execution","wercker CI become quick in executions (as it share the same running  instance and launches are sequential, so caching of checkstyle build helps a lot) - 7 min for all launches. Travis CI is slow and takes about 30min.  Todo: - move all NoExceptiontest and NoErrorTest to wercker.","closed","miscellaneous,","romani","2017-02-04T14:20:34Z","2017-02-10T01:14:19Z"
"","3739","Indentation: Allow customization for instance initializers (feature request)","We use the default Indentation module configuration.  We have thousands of JMockit expectation blocks. We’d like to format them in [the canonical way](http://jmockit.org/tutorial/Mocking.html#expectation), but we get a checkstyle error:  ```java     @Test     public void testFoo(@Mocked Object mock) {         new Expectations() {{             mock.toString(); //  'block' child have incorrect indentation level 12, expected level should be one of the following: 16, 20.  As a workaround, we could simply indent the block contents an extra level, but then they appear to be indented too far—not just to our eyes, but to our IDEs as well.  So instead, we currently waste 2 lines (in addition to the extra indentation level) and write:  ```java     @Test     public void testFoo(@Mocked Object mock) {         new Expectations() {             {                 mock.toString(); // passes             }         };     } ```  I don’t know the best way to solve this. One way that wouldn’t require any new configuration options would be to always expect the indentation within an instance initializer block to be one level deeper than the line that opens the block. That way both of the code snippets above would pass.  If you’ve never seen instance initializer blocks before, you can read more about them [here](https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html) and [here](http://www.programcreek.com/2011/10/java-class-instance-initializers/).","open","indentation,","2is10","2017-01-18T20:54:57Z","2017-02-03T17:50:03Z"
"","3211","Regex checks: could matching groups be made available for violation messages","We use a number of RegexSingleline, RegexSinglelinJava, and RegexMultiline checks to look for a wide variety of different small-scale best practices.  One enhancement that would be very helpful would be to allow the matching group values to be available for inclusion in violation messages.  Right now, the {0} message param yields the regex itself, which can be quite long and hard to understand.  Here is one example:  ```                                                                       ```  The regex matches on an annotation with an extra ""value="".  The first matching group holds the name of the annotation and the second, the full attribute name-value pair.  It could be useful to have {1} be the first matching group value, {2} the second and so on.  Then the message could be something like `Superflous ''value='' should be removed from annotation {1}`.  This could provide clarity if there were more annotations on the same line and also if there are a lot of violations in a project. ##","open","","eric-milles","2016-05-22T19:31:45Z","2016-12-14T18:17:17Z"
"","3199","Use slf4j for logging","We should use slf4j for our logging needs and switch all logging by sl4j api that does not demand wrapping by extra IF.  Taken from Issue #3086  > But switching to slf4j will mean extra dependency to our library. For now we have almost no logging. So for now lets stay with apache common logging till amount of logs become significant and verbose format  Offline discussion:  rnveach:  > all log usages should be wrapped for now > if (log.isDebugEnabled()) {  I don't disagree, I just want to make sure we want to go down this path. This will require testing to do multiple runs to get true and false of condition for Code Coverage. Not to mention complexity complaints from our other checks.  romani: you raise a good point, such IF-expression will trigger all complexity/metrics Checks to yell on us. If previously I did not have enough points to switch to SLF4J, so now I have. We will switch to slf4j in Checkstyle 8. ##","open","approved,","rnveach","2016-05-20T14:39:54Z","2021-12-22T04:50:47Z"
"","3763","try to avoid non jdk runtime exceptions in code","We should avoid usage of non-jdk exceptions that could be thrown from our code. `org.apache.commons.beanutils.ConversionException` should be changed to IllegalArgumentException. Whole code should be reviewed to fins similar cases. Try to forbid this by ImportControl check.  ``` import org.apache.commons.beanutils.ConversionException; ..... public class RightCurlyCheck extends AbstractCheck { .....     public void setOption(String optionStr) {         try {             option = RightCurlyOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));         }         catch (IllegalArgumentException iae) {             throw new ConversionException(""unable to parse "" + optionStr, iae);         } } ```","closed","approved,","romani","2017-01-27T14:37:29Z","2017-04-12T23:29:32Z"
"","3660","Remove checkstyle_packages.xml from checkstyle","We know where our classes are located, we should continue to support that in other jars","closed","approved,","romani","2016-12-16T04:24:02Z","2017-08-08T13:13:38Z"
"","3667","Module term and usage is confusing in test area","We have a utility method [getCheckstyleModules](https://github.com/checkstyle/checkstyle/blob/62926b6106cbc22cb73f08c32b964c9e6e8d8b45/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java#L152), which I thought would return every module we have in checkstyle. Isn't everything we do a module?  [isCheckstyleModule](https://github.com/checkstyle/checkstyle/blob/62926b6106cbc22cb73f08c32b964c9e6e8d8b45/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java#L193) does not define `AbstractFileSetCheck`. Isn't that a module? We define filters, filefilters, and checks. Why isn't `AbstractFileSetCheck` a module? We also don't define root module `Checker`.  [isCheckstyleNonAbstractCheck](https://github.com/checkstyle/checkstyle/blob/62926b6106cbc22cb73f08c32b964c9e6e8d8b45/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java#L181) limits only checks that end with `Check`, but we have checks that don't end with that. Example is `FileContentsHolder` and `SuppressWarningsHolder`.  In [testAllCheckstyleModulesInCheckstyleConfig](https://github.com/checkstyle/checkstyle/blob/62926b6106cbc22cb73f08c32b964c9e6e8d8b45/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java#L179-L181) we are trying to compare checks to modules. The test is named module so we should be checking all modules, right? Not all checks.  In [testAllCheckstyleModulesHaveMessage](https://github.com/checkstyle/checkstyle/blob/62926b6106cbc22cb73f08c32b964c9e6e8d8b45/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java#L189) we are checking only checks but we named the test module.  http://checkstyle.sourceforge.net/config.html#Modules > Root module Checker has child FileSetChecks JavadocPackage and TreeWalker. > Module TreeWalker has submodules AvoidStarImport, ConstantName, and EmptyBlock.  Everything we do is a module by these definitions. So `getCheckstyleModules` should return everything, and all tests that rely on it should be changed to better suite what they are testing.","closed","miscellaneous,","rnveach","2016-12-19T03:33:55Z","2016-12-20T01:23:28Z"
"","3720","Verify tokens in checkstyle config","We have a test to verify all modules are used in our config file. We don't have a test to verify we are using all tokens. Some of our check specify a limited amount of tokens to be used on in our configuration. It is not clear if this is on purpose, we don't want to use the token, or if we forgot to add the token in a PR when it was introduced. Some checks are also split into 2 or more instances, so it makes it harder to verify that all tokens are being used.  We need a test to verify this. New test should verify all acceptable tokens for all checks are being used. If we don't want a token to be used at all, it should be listed in an override section. If one check is split into multiple instances, the tokens from those instances should be combined into one and verified that way. We don't care how the tokens are being used in those split instances, just that we are using them all.","closed","miscellaneous,","rnveach","2017-01-12T15:42:47Z","2017-01-18T20:26:40Z"
"","3464","New rule: OneStreamAPICommandPerLine","We found that writing one Stream API command per line is very readable.  /var/tmp $ javac Test.java  ``` class Test { public static void main(String[] args) { List myList =     Arrays.asList(""a1"", ""a2"", ""b1"", ""c2"", ""c1"");  myList.stream()     .filter(s -> s.startsWith(""c""))     .map(String::toUpperCase)     .sorted()     .forEach(System.out::println); } } ```  It's much better than writing: /var/tmp $ javac Tes2t.java  ``` class Test2 { public static void main(String[] args) { List myList =     Arrays.asList(""a1"", ""a2"", ""b1"", ""c2"", ""c1"");  myList.stream().filter(s -> s.startsWith(""c""))     .map(String::toUpperCase).sorted()     .forEach(System.out::println); } } ```  We would like to have  a rule to notify developer about best practices.  So that: /var/tmp $ java -jar checkstyle-all.jar -c config.xml .  ```                         ```  Should shows violation for Test2: ""Use one command per line for Stream API"" The rule should check that there is only one command per line after stream().","closed","","ychulovskyy","2016-09-23T14:05:42Z","2016-09-26T12:12:13Z"
"","3465","New rule: UseStaticImport","We found that using static import for Stream API collectors is very readable.  ``` ... List list = people.stream()     .map(Person::getName)     .collect(toList()); .... ```  It's much better than writing:  ``` ... List list = people.stream()     .map(Person::getName)     .collect(Collectors.toList()); .... ```  We would like to have  a rule to notify developer about best practices.  So that: /var/tmp $ java -jar checkstyle-all.jar -c config.xml .  ```                                                                  ```  Should show violation: ""Use static import for Collectors.toList()"" ##","closed","new module,","ychulovskyy","2016-09-23T14:12:20Z","2017-01-11T20:56:11Z"
"","3208","Indentation: incorrect expectation for wrapped arguments of chained calls","We are seeing warnings for wrapped lines of our builder calls. For eaxmple:  ```     public static final ResultType WHATEVER = ResultType.builder(""WHATEVER"") //$NON-NLS-1$         .passThrough(true)         .contentType(""WHATEVER"") //$NON-NLS-1$         .supportedMetadataTasks(             TaskOne.RESULT,             TaskTwo.RESULT,             TaskThree.RESULT)         .build(); ```  This results in warnings for each line of the varargs method call.  The warning is seeking the lines to be indented at the same level as the methods (one less tab each).  We use the indentation check in this way:  ```                                                                                                 ```","closed","indentation,","eric-milles","2016-05-22T17:29:20Z","2020-01-24T19:20:01Z"
"","3531","config: bump maven compiler version","version bump","closed","","rnveach","2016-11-08T12:45:25Z","2016-11-08T14:17:30Z"
"","3168","Some PullRequests validation for commit mesage miss some cases","UTs are green - https://travis-ci.org/checkstyle/checkstyle/jobs/129464987 after merge: failure - https://travis-ci.org/checkstyle/checkstyle/jobs/129475961#L794  validation for ""."" is unstable.","closed","miscellaneous,","romani","2016-05-11T20:19:43Z","2016-05-29T13:02:39Z"
"","3302","Indentation check incorrectly marks constants defined in an annotation as having the wrong indentation level","Using the IndentationCheck defined as:  ``` xml        ```  The following code will fail the indentation check  ``` java public class OuterClass {     public @interface InnerInterface {         int CONSTANT = 1;     } } ```  This is using 6.8 but I've also tried 6.19 and it's still reproducible. ##","open","indentation,","kcoppock","2016-06-23T16:06:59Z","2021-02-26T17:39:38Z"
"","3089","EmptyLineSeparator check not enforcing empty line after class def, enum def or interface def tokens","Using checkstyle 6.17, I'm trying to enforce that code should be formatted with a single whitespace after the class, enum or interface definition eg.  ``` public class Sample {      private String test; } ```  I believe the EmptyLineSeparator should be enforcing this for me, code and config sample below :-)  ``` E:\>javac *.java  E:\>cat Sample.java public class Sample { //EmptyLineSeparator should check for empty line after CLASS_DEF token     private String test; }  E:\>cat SampleEnum.java public enum SampleEnum { //EmptyLineSeparator should check for empty line after ENUM_DEF token     HELLO, WORLD; }  E:\>cat ISample.java public interface ISample { //EmptyLineSeparator should check for empty line after INTERFACE_DEF token     void blah(); }  E:\>cat checkstyle.xml                                                            E:\>java -jar checkstyle-6.17-all.jar -c checkstyle.xml *.java Starting audit... Audit done. ```  Expectation:  ``` Starting audit... [ERROR] E:\Sample.java:2: 'VARIABLE_DEF' should be separated from previous statement. [EmptyLineSeparator] [ERROR] E:\SampleEnum.java:2: 'VARIABLE_DEF' should be separated from previous statement. [EmptyLineSeparator] [ERROR] E:\ISample.java:2: 'VARIABLE_DEF' should be separated from previous statement. [EmptyLineSeparator] Audit done. ``` ##","closed","miscellaneous,","embee1981","2016-04-10T01:08:31Z","2017-03-10T05:14:15Z"
"","3013","Bad german translation of summary.first.sentence","Using checkstyle (german language), i got a warning ""Satz Javadoc ist unvollständig (Zeitraum fehlt) oder nicht vorhanden."" I did not understand that info untill i found the english message ""period symbol at the end of first javadoc sentence"". Period is mistranslated as ""time intervall"", while there is said ""period symbol"", and the german word is ""Punkt"" instead of ""Zeitraum"".","closed","approved,","MrQNo","2016-03-07T13:25:21Z","2016-03-22T01:01:00Z"
"","3672","update documentation about getAcceptableTokens for javadoc Checks","Update http://checkstyle.sourceforge.net/writingjavadocchecks.html  to explain that javadoc tokens can be customize listening behavior of java tree, but it is not conveniet and recommended way.  AbstractJavadocCheck define only default javadoc Checks is `TokenTypes.BLOCK_COMMENT_BEGIN` only All checks should run on all comments withtout consideration to what java token it is belong to.  each check need to be filtering himself. Example: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java#L106 http://checkstyle.sourceforge.net/config_javadoc.html#AtclauseOrder","closed","miscellaneous,","romani","2016-12-21T00:20:58Z","2016-12-29T20:01:18Z"
"","3034","FileText should not extends AbstractList","triggered by https://github.com/checkstyle/checkstyle/pull/3028#issuecomment-195837519  problem is  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java#L57  ``` public final class FileText extends AbstractList { ```  FileText do override of two methods only in AbstractList and never use `super`, do we ever do `remove` as AbstractList allow ? Investigate a bit more and remove change class to avoid `extends AbstractList` in checkstyle 8 version.  ##","closed","breaking compatibility,","romani","2016-03-13T12:56:32Z","2017-07-06T20:23:16Z"
"","3159","Reduce the number of tasks performed by Travis CI","Travis CI has too many tasks  (33) to perform now. This increases the server load and is time consuming as we have to wait until all tasks are finished.   ![default](https://cloud.githubusercontent.com/assets/7242568/15055542/da44b02a-1315-11e6-8be9-537c669856e2.PNG)  From my point of view, it will be reasonable to reduce the amount of tasks which are performed by Travis CI. For example, we can move a part of them to [Wercker CI](http://devcenter.wercker.com/index.html).   **Wercker's characteristics:** - Supported languages: java, javascript, PHP, Python, Ruby, Goland - GitHub integration - support of shell scripts - .yml support - webhooks","closed","miscellaneous,","MEZk","2016-05-05T20:06:07Z","2016-06-26T16:59:03Z"
"","3539","Checker Cache and TranslationCheck conflict","TranslationCheck looks at multiple files, and only does validation ONLY after all the files are given to it. If some file was in cache and so skipped by Checker(non of  Checks is called to consider it), it creates and situation that TranslationCheck does not see some files - so report violation.  Processing 1 file and skipping others will cause it to falsely believe that files are missing and report excess violations, even when no violations on a non-cache run exist. This is because we don't guess were the files are, we use the files reported to the check to know where they are and if they exist.  Steps to reproduce on CS locally: 1) Clean target directory of any cache file. 2) Run checkstyle's ant-phase-verify with cache on. No violations are produced but cache file is created 3) Add '.' to any value at `\src\main\resources\com\puppycrawl\tools\checkstyle\checks\naming\messages_es.properties`. 4) Run checkstyle again and this time 8 violations are reported, even though no files were modified and we got no violations on our first run in step 2. Below is the output:  ``` Starting audit... [ERROR] ...\checks\naming:0: Properties file 'messages.properties' is missing. [Translation] [ERROR] ...\checks\naming:0: Properties file 'messages_de.properties' is missing. [Translation] [ERROR] ...\checks\naming:0: Properties file 'messages_fi.properties' is missing. [Translation] [ERROR] ...\checks\naming:0: Properties file 'messages_pt.properties' is missing. [Translation] [ERROR] ...\checks\naming:0: Properties file 'messages_ja.properties' is missing. [Translation] [ERROR] ...\checks\naming:0: Properties file 'messages_fr.properties' is missing. [Translation] [ERROR] ...\checks\naming:0: Properties file 'messages_tr.properties' is missing. [Translation] [ERROR] ...\checks\naming:0: Properties file 'messages_zh.properties' is missing. [Translation] Audit done. Checkstyle ends with 8 errors. ```   Expected: no violations.  Commit 441d2d37005afb7e2104d5de36cfa818ff884d85 need to be reverted as fix for issue is provided.   Original problem was reported and discussed at: #3493","open","hard,","romani","2016-11-10T20:17:36Z","2018-07-09T07:30:04Z"
"","3378","Add NonDex tool to pom.xml and .travis.yml","tool: https://github.com/TestingResearchIllinois/NonDex  need to be used as it help to find problems that hard to catch and reproduce.","closed","miscellaneous,","romani","2016-07-29T14:52:04Z","2016-08-05T04:27:55Z"
"","3818","travis should skip execution if configs of other CIs are changed","To speed up Travis   files: .github appveyor.yml circle.yml distelli-manifest.yml fast-forward-merge.sh LICENSE LICENSE.apache20 README.md release.sh RIGHTS.antlr shippable.yml wercker.yml  Command to test: `git diff --name-only HEAD HEAD~1 | grep -vE ""wercker\.yml|shippable.yml................"" | cat | wc -c`","closed","miscellaneous,","romani","2017-02-10T23:41:47Z","2017-02-13T02:19:53Z"
"","3990","find a reason why Travis localized UTs are passed but failed on local","to reproduce revert fix of https://github.com/checkstyle/checkstyle/commit/7caba87cc7113bf4484ca6046483a7a9bad58ec8  if build if failing on local it should fail on Travis.  some hints for investigation: - recheck order of Tests on local and Travis - make system.out printing to find out what is different (may be localization is not passed to UT correctly from command line or .................). - as it will be debuging on remote - Travis. PR should have last commit in it contains changes only at "".travis.yml"" that will skip majority other CIs to do builds.","closed","hard,","romani","2017-03-13T04:33:15Z","2018-03-19T21:18:06Z"
"","3070","Pull #3070: Speed up google_check validation test","This test runs all checks in google_checks.xml over all checkstyle sources for over 12 seconds although its aim is to validate that configuration is well formed, what can be done just by Checker#configure(). Now the test takes less than 2 seconds. https://github.com/checkstyle/checkstyle/issues/1275","closed","miscellaneous,","Vladlis","2016-03-27T20:20:26Z","2016-03-31T23:15:39Z"
"","3606","100% UT coverage for ParseTreeTablePModel.java","this task is good for newbies.  http://checkstyle.sourceforge.net/cobertura/com.puppycrawl.tools.checkstyle.gui.ParseTreeTablePModel.html  we need to update UTs to have 100% coverage.  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModelTest.java   --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39798788-100-ut-coverage-for-parsetreetablepmodel-java?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","romani","2016-12-02T21:06:15Z","2016-12-09T19:43:00Z"
"","3251","Revert ""Pull #3189: changed xwiki travis testing to fork""","This reverts commit 52131dd4ed72b55a415c1f88a77ae9f9a17b75cb.","closed","","romani","2016-06-07T12:40:09Z","2016-06-24T03:18:25Z"
"","3448","Issue #3398 False positive for ImportOrder for default IntelliJ Idea settings","This pull request fixes Issue #3398. Notes: - add field ""useIntellijIdeaOrderingImportStyle"" in ImportOrderCheck.java  We can add this property to config file, for example:  ``` `                                          ` ```","closed","","linelect","2016-09-19T15:10:18Z","2016-09-20T13:17:39Z"
"","3438","Issue #2999: allow regex in importcontrol and subpackage element","This pull request fixes Issue #2999. Notes: - I have added the possibility to define packages not only to the `subpackage` element but also to the root element `importcontrol`. - The travis will continue to fail until the new DTD [import_control_1_2.dtd](https://github.com/vboerchers/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/checks/imports/import_control_1_2.dtd) is available as http://www.puppycrawl.com/dtds/import_control_1_2.dtd","closed","","vboerchers","2016-09-11T15:38:31Z","2016-10-19T10:42:28Z"
"","3620","Issue #3606: Test coverage boost for ParseTreeTablePModel.java","This PR is for Issue #3606  Made some edits for bugs found during testing. The class now has 100% UT coverage","closed","","ssdeep","2016-12-07T03:14:18Z","2016-12-13T07:04:19Z"
"","3417","API: make api not depend on antlr by splitting DetailAST between implementation and interface","this issue is for major version bump release.  api should be clean and do not depend on any thirdparty libraries.  antlr dependency was beneficial for quick development , but now it cause a problems during embedding checkstyle in other systems. Antlr classes could conflict with another dependencies of application. Dependencies to any other third party is also not desirable.  from discussion with eclipse-cs author: "" Checkstyle itself gains little to nothing from restricting packages. However in OSGI context a bundle (e.g. checkstyle-core) needs declare which of it's packages are visible to extensions. Today this includes all of Checkstyle's packages and Checkstyle's own dependenceis (antlr, guava, commons-*).  The downside of this in OSGI realm is that those packages are now visible not just to Checkstyle extensions but also do unrelated plugins, which potentially import one of the 3rd-party packages. This can lead to nasty class version conflicts in unexpected places, e.g. the Checkstyle plugin can potentially break a different plugin.  The main problem is in fact that 3rd-party dependencies today need to be exported in order for (some) checkstyle extensions to work. ""  ------  MIGRATION NOTES: all extensions of Checkstyle has to be recompiled with 8.21 version of checkstyle . Example of failure - https://github.com/checkstyle/checkstyle/issues/3417#issuecomment-495998320","closed","breaking compatibility,","romani","2016-08-26T12:45:30Z","2019-05-26T17:49:38Z"
"","3844","Issue #3546: add lambda in a rightcurlycheck","this is continuation of #3680   Original Author @MaksimP , allowed us to continue his work. I had a problems during patch transferring, so I copied all changes to our repo.  If smb have time - please proceed.","closed","abandoned,","romani","2017-02-18T18:31:45Z","2017-04-17T19:37:26Z"
"","3015","NPE in CheckUtil#getCheckMessage","This is all about test area of our code and how `AllChecksTest.testAllCheckstyleMessages` method works.  'getCheckMessages' method from 'CheckUtil' (from test area of code) class uses 'getResourceAsStream' from Class (java's native library) which loads resource ('messages.properties') as a stream as it is described at http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/lang/Class.java#2215  It means that if we use messages from resource bundle which is not in the same package as the target class, 'getResourceAsStream' does not load the bundle's content (it loads only the content of resource bundle associated with the current class loader). It leads to NPE in 'CheckUtil#getCheckMessage' here:  ``` java public static String getCheckMessage(Class module, String messageKey, Object... arguments) {   ...   final MessageFormat formatter = new MessageFormat(pr.getProperty(messageKey), Locale.ROOT);   ... } ```  Example: there are two property keys ('general.fileNotFound' and 'general.exception') which are used in Tranlation#logIoException. The message resources for the keys are inside `src/main/resources/com/puppycrawl/tools/checkstyle/messages.properties` resource bundle. In the current implementation of TranslationCheck we use the keys as string literals, because we cannot extract them to the constants due to NPE in CheckUtil#getCheckMessage and failing of 'testAllCheckstyleMessages' as a result.","closed","","MEZk","2016-03-08T08:01:12Z","2016-03-23T12:49:27Z"
"","3770","OverloadMethodsDeclarationOrder: new property to allow few groups of overloaded methods","This is a summary of #3698 . Successor for: #2652, #3235 .  property ""ModifiersThatCreateGroup"" = list of RegExp for modifiers. It is ok to provide better name for property.   Examples :  `ModifiersThatCreateGroup` = ""static"" - all static methods should be separate (should cover request of this issue),  ""ModifiersThatCreateGroup"" = ""public, private, protected, package"" - 4 groups, each visibility modifier in its own. There will be 'package' artificial visibility modifier. ""ModifiersThatCreateGroup"" = ""static final , public native, private static, protected abstract"" - 4 groups it will keep method with ""static final"" , ""public native"", ""private static"", ""protected abstract"" is separate groups, modifiers are completely matching , order is matter  Examples: ``` // ModifiersThatCreateGroup = ""static"" public class Test {     void foo() {}     void foo(String baz) {}     void bar() {} // OK, bar group     static void foo() {} // OK, as ""static foo"" is separate group }  // ModifiersThatCreateGroup = ""static"" public class Test {     static private void foo() {  }     void foo() {  } // OK     void foo(String baz) {  } //OK     void bar() {  }     static void foo() {  } // WARN - ""static foo"" methods are not groupped }   // ModifiersThatCreateGroup = ""static"" public class Test {     public void foo() {  } //OK     public void bar(String baz) {  } //OK     private void foo(String baz) {  } //VIOLATION private foo(String) should be next to foo()     void bar() {  } // VIOLATION bar should be next to bar(String)     static public void foo() {  } // OK, ""static foo"" is separate group. }  // ModifiersThatCreateGroup = ""static"" public class Test {     public void foo() {  } //OK     private void bar(String baz) {  } //OK     private void foo(String baz) {  } //VIOLATION private foo(String) should be next to foo()     void bar() {  } // VIOLATION bar should be next to bar(String)     static protected final void foo() {  } // OK, static foo is it's own group.  }  ================  //ModifiersThatCreateGroup = ""protected, private, package"" public class Test {     private void foo() {  } //OK, 2nd group     void bar() {  }     public void foo(String baz) {  } //OK, ""public foo"" does not match special groups so it is default group     public void foo(String baz) {  } //OK     private static void foo(int i) {  } // VIOLATION, matches 2nd group, should be close to first method     private final void foo(int i) {  } // VIOLATION, matches 2nd group, should be close to first method }  //ModifiersThatCreateGroup = ""protected, private, package"" public class Test {     protected void foo() {  } //OK, matches 1st group     void bar() {  }     protected abstract void foo() {  } //VIOlATION, matches 1st group     void foo(int i) {  } //OK, matches 3rd group     public final void foo(int i) {  } // OK, ""public final "" does not match special groups so it is default group }   ================  //ModifiersThatCreateGroup = ""public, public final, static"" public class Test {     private void foo() {  } // default group     void bar() {  } // defaut group     static foo() {} // OK, 3rd group     static final foo() {} // OK, matches to 3rd group     final void foo(String baz) {  } //VIOLATION, matching to default group     final public void foo(String baz) {  } //OK, 1st group, Attention: does not match second group, as strict order of modifiers is in regexp     private void foo(int i) {  } // VIOLATION, default group, should be close to first method     public final void foo(int i) {  } // OK, 2nd group     abstract foo() {} //VIOLATION, matches to default, should be close to first method }   //ModifiersThatCreateGroup = RegExp[] = ""^public .*, (protected|package), private, ^static$"" public class Test {     private void foo() {  } // 3rd group     void bar() {  } // second group     static foo() {} // OK, 4th group     static final foo() {} // OK, matches to default group     final void foo(String baz) {  } //OK, matching to default group     public void foo(String baz) {  } //OK, first group     private void foo(int i) {  } // VIOLATION, 3rd group, should be close to first method     public final void foo(int i) {  } // VIOLATION, matches to first group     abstract foo() {} //VIOLATION, matches to default } ```","open","new feature,","romani","2017-01-28T14:57:23Z","2018-05-07T14:11:41Z"
"","3428","Fix grammar in issue templates","This is a mets issue in the github templates, not in checkstyle itself:  YOU --> YOUR detail --> details trying to trying etc.","closed","miscellaneous,","elharo","2016-09-05T13:20:22Z","2016-09-06T00:08:46Z"
"","3277","minor: fixed debug option bleeding into other tests","This fixes the issue seen running pitest on CS in Windows.  The 3 tests that were causing the problem for me were, in the specific order: -    com.puppycrawl.tools.checkstyle.MainTest.testDebugOption -    com.puppycrawl.tools.checkstyle.internal.XDocsPagesTest.testAllCheckSections -    com.puppycrawl.tools.checkstyle.internal.XDocsPagesTest.testAllXmlExamples  Which caused the following exception in Windows, but not on Linux: `FINE : MINION : FAIL Description [testClass=com.puppycrawl.tools.checkstyle.internal.XDocsPagesTest, name=testAllXmlExamples(com.puppycrawl.tools.checkstyle.internal.XDocsPagesTest)] -> java.lang.OutOfMemoryError: Java heap space`  Basically our junit testing the debug option is bleeding into other tests, leaving logging on the highest. `XDocsPages` test run alot of code that logs a lot of ignorable exceptions which is why it is the point of failure.  Pitest uses its own custom ordering for junits, so that coupled with the modifications it makes to the code is probably why travis or I haven't run into this before.  Full discussion on pitest: https://github.com/hcoles/pitest/issues/272","closed","","rnveach","2016-06-15T17:18:34Z","2016-06-16T13:41:21Z"
"","3868","Travis faliure: ""sonatype-nexus-staging not found"" during release","This failure should be avoided https://travis-ci.org/checkstyle/checkstyle/jobs/205508035#L2724  Extra logic in travis should be added to skip build in case of version bump commit, as we do not do publishing from Travis yet (it is done from my local pc).  ``` [INFO] Installing /home/travis/build/checkstyle/checkstyle/pom.xml to /home/travis/.m2/repository/com/puppycrawl/tools/checkstyle/7.6/checkstyle-7.6.pom [INFO] Installing /home/travis/build/checkstyle/checkstyle/target/checkstyle-7.6-tests.jar to /home/travis/.m2/repository/com/puppycrawl/tools/checkstyle/7.6/checkstyle-7.6-tests.jar [INFO]  [INFO] --- nexus-staging-maven-plugin:1.6.7:deploy (injected-nexus-deploy) @ checkstyle --- [INFO] Performing local staging (local stagingDirectory=""/home/travis/build/checkstyle/checkstyle/target/nexus-staging/staging"")... [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 57.508 s [INFO] Finished at: 2017-02-26T13:30:52+00:00 [INFO] Final Memory: 55M/399M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.7:deploy (injected-nexus-deploy) on project checkstyle: Execution injected-nexus-deploy of goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.7:deploy failed: Server credentials with ID ""sonatype-nexus-staging"" not found! -> [Help 1] ```","closed","miscellaneous,","romani","2017-02-26T14:33:21Z","2017-02-26T14:42:36Z"
"","3273","Wrong indentation warning for single parameter lambdas without braces in try…catch blocks","this code:  ``` java return Files.find(folder, Integer.MAX_VALUE, (path, fileOpts) -> ""pom.xml"".equals(path.getFileName()))     .map(pomXml -> folder.getParent().relativize(pomXml)); ```  Produces the warning  > lambda bei Einrücktiefe 16 nicht an korrekter Einrücktiefe 17  (Rough translation: “Expected lambda at indentation level 16 to be at indentation level 17”)  However, this code does not:  ``` java return Files.find(folder, Integer.MAX_VALUE, (path, fileOpts) -> ""pom.xml"".equals(path.getFileName()))     .map((pomXml) -> folder.getParent().relativize(pomXml)); ```  The code is correctly indented for my configuration, so I’d expect not to see a warning in both cases.  I could observe this behaviour at other places, too. Adding braces around the lambda parameter always fixed the warning.  My indentation configuration:  ``` xml         ``` ##","open","indentation,","jGleitz","2016-06-14T07:16:20Z","2016-12-14T18:17:08Z"
"","3573","remove FileContentsHolder module as FileContents object is available for filters on TreeWalker in TreeWalkerAudit Event","This class - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/FileContentsHolder.java  The only reason of FileContentsHolder is to keep FileContents. This is a HACK to keep file content as global variable to be accessible from all other places (class that wrap one field and provide simple getter for it).  **Migration note for checkstyle users:** So FileContentsHolder is not required any more and just need to be removed from clients configurations. In scope of  #4714 , we moved FileContents object to [TreeWalkerAuditEvent](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalkerAuditEvent.java#L34).","closed","breaking compatibility,","romani","2016-11-23T21:40:10Z","2017-08-01T12:01:47Z"
"","3797","NPathComplexityCheck: set of tokens should not be customizable by user","This check can not work with reliably if user can change set of TokenTypes, if user miss QUESTION in config, algorithm will work incorrectly. So user should now have ability to change this.  Current code is: ```      public int[] getRequiredTokens() {          return new int[] {              TokenTypes.CTOR_DEF,              TokenTypes.METHOD_DEF,              TokenTypes.INSTANCE_INIT,              TokenTypes.STATIC_INIT,          };      } ```  Looks like the intend was to let user control on what blocks of code to run Check: on methods, on ctors, on static initializations, or instance init. But in this case all other tokens should be hardcoded in Check and Check need to walk on them itself.  We should not continue that intend (code is not doing this even now) and user should not have ability to control tokens set, so all methods should call getAcceptableTokens.","closed","new feature,","romani","2017-02-04T13:51:09Z","2017-02-09T20:57:33Z"
"","3557","Forbid Windows End of Line (EOL)","This automatically detects, and would prevent future fallback, of what I fixed one off in https://github.com/sevntu-checkstyle/sevntu.checkstyle/pull/479, but which without this will come back, of course.  If it's ""too late"" to do this enforcement in this file, then perhaps.. the same shold be done just for sevntu?  I don't see how.  Signed-off-by: Michael Vorburger","closed","","vorburger","2016-11-16T20:55:21Z","2016-11-18T23:10:28Z"
"","3771","NullPointerException in AbstractHeaderCheck when cache file specified and no header file","This affects Checkstyle 6.19, which is currently the last JDK 1.7 compatible version, and every version in the 7.x line. It was discovered trying to fix [MCHECKSTYLE-322](https://issues.apache.org/jira/browse/MCHECKSTYLE-322) for the Maven Checkstyle Plugin.  http://checkstyle.sourceforge.net/config_header.html#RegexpHeader#RegexpHeader  Given the following Java class  ```java public class Main {     public static void main(String[] args) { } } ```  and the following `config.xml` Checkstyle configuration, making use of a cache file and a regexp header:  ```xml                   ```  With this set-up, and launching an audit:  ``` $ java -jar checkstyle-6.19-all.jar -c config.xml Main.java Exception in thread ""main"" java.lang.NullPointerException     at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:212)     at com.google.common.collect.SingletonImmutableSet.(SingletonImmutableSet.java:43)     at com.google.common.collect.ImmutableSet.of(ImmutableSet.java:60)     at com.puppycrawl.tools.checkstyle.checks.header.AbstractHeaderCheck.getExternalResourceLocations(AbstractHeaderCheck.java:197)     at com.puppycrawl.tools.checkstyle.Checker.getExternalResourceLocations(Checker.java:225)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:187)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:396)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:330)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:161) ```  A similar `NullPointerException` is thrown with current latest Checkstyle 7.4.  ``` $ java -jar checkstyle-7.4-all.jar -c config.xml Main.java Exception in thread ""main"" java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.header.AbstractHeaderCheck.getExternalResourceLocations(AbstractHeaderCheck.java:196)     at com.puppycrawl.tools.checkstyle.Checker.lambda$getExternalResourceLocations$1(Checker.java:236)     at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Unknown Source)     at java.util.stream.ReferencePipeline$2$1.accept(Unknown Source)     at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source)     at java.util.stream.AbstractPipeline.copyInto(Unknown Source)     at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)     at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Unknown Source)     at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Unknown Source)     at java.util.stream.AbstractPipeline.evaluate(Unknown Source)     at java.util.stream.ReferencePipeline.forEach(Unknown Source)     at com.puppycrawl.tools.checkstyle.Checker.getExternalResourceLocations(Checker.java:234)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:202)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) ```  The audit should not fail with a `NullPointerException`, but instead complete succesfully. The issue seems to be that `Checker` [starts by populating the cache if present](https://github.com/checkstyle/checkstyle/blob/checkstyle-6.19/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L186-L188), which in turn invokes `getExternalResourceLocations()` on the `RegexpHeaderCheck`, but [this fails with NPE](https://github.com/checkstyle/checkstyle/blob/checkstyle-6.19/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java#L197) because there was no configured `headerFile` and `ImmutableSet.of` requires non-null objects.  Is it possible to fix this issue and also backport it on the 6.x line? It would otherwise block a Checkstyle upgrade by the Maven Checkstyle Plugin to 6.18 at most.","closed","approved,","Tunaki","2017-01-28T15:53:37Z","2017-01-28T20:00:01Z"
"","3886","Erroneous 'Equals Avoid Null' reported when argument to equals(Object) is not a string literal","There's no point reporting 'Equals Avoid Null' if transposing the equals() receiver and argument would result in the same error being reported. This error should **only** be reported for expressions of the form `variable.equals(""string literal"")`.  For example:  `return a.equals(b + c);`  gets flagged with an error, despite the fact that transposing the expression to:  `return (b + c).equals(a);`  would also get flagged with the same error.","closed","","demonfiddler","2017-03-01T09:57:25Z","2019-02-27T14:54:25Z"
"","3664","create xdoc for FileContentsHolder","there is no information about FileContentsHolder and what is it for.  Some notes are at: http://checkstyle.sourceforge.net/config_filters.html#SuppressionCommentFilter http://checkstyle.sourceforge.net/config_filters.html#SuppressWithNearbyCommentFilter  but this module should have its own documentation, and should be referenced at http://checkstyle.sourceforge.net/checks.html as it is similar to SuppressWarningsHolder","closed","miscellaneous,","romani","2016-12-16T20:44:21Z","2017-01-05T17:02:01Z"
"","3800","Typo in website documentation for JavadocMethod.","There is a typo in this sentence  	whether to ignore errors when a method declares that it throws exceptions but does have matching throws tags in the javadoc.  on this page  http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod  Replace ""does have"" with ""does not have"".  Thanks.","closed","miscellaneous,","NickButcher1","2017-02-04T19:38:17Z","2017-02-09T20:44:43Z"
"","3577","ImportOrder: checkstyle_checks.xml does not have separate ""java"" group","There are two problems: 1) http://checkstyle.sourceforge.net/eclipse.html#Organize_Imports  http://checkstyle.sourceforge.net/idea.html#Organize_Imports http://checkstyle.sourceforge.net/netbeans.html#Organize_Imports   Eclipse have group ""com"" that non of others have. Should be removed.  2) https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L257 ```               ``` there should be separate group ""java"".","closed","miscellaneous,","romani","2016-11-24T15:25:50Z","2016-11-25T05:06:56Z"
"","3669","Write Tag severity configuration is inconsistent with ConfigurationLoader","The Write Tag check is expected to output warnings even if the severity is set to ignore. See the example in the documentation on flagging warnings on @incomplete tags: http://checkstyle.sourceforge.net/config_javadoc.html#WriteTag  However, downstream projects like eclipse-cs rely on checking the severity for performance reasons: https://sourceforge.net/p/eclipse-cs/bugs/413/  ConfigurationLoader within checkstyle as well assumes that the severity is an on/off switch: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java#L103  Write Tag is the only check in checkstyle where the severity is not regarded as a global ignore switch. The workaround is to just use RegexpSingleline, but it might be a good idea to make it the severity for Write Tag an on/off switch as well for consistency's sake (though backwards compatibility will be broken).","open","","cypai","2016-12-19T21:14:08Z","2016-12-22T14:19:00Z"
"","3172","Regression false-positive FinalLocalVariable","The variable `s` in the following code cannot be made final, yet recent versions of checkstyle claims that it can.  $ java -jar ~/java/cvscheck/lib/checkstyle-6.18-all.jar -c myconfig.xml Bug.java Starting audit... [WARN] /home/sean/Bug.java:13:15: Variable 's' should be declared final. [FinalLocalVariable] Audit done.  ``` java import java.util.Arrays; import java.util.ArrayList;  public final class Bug {    Bug() { }    private static boolean f() {     return Math.random() > 0;   }    public static void main(final String[] args) {     Integer[] s;     if (f()) {       s = new Integer[0];     } else {       s = new Integer[5];       if (f()) {         final ArrayList retain = new ArrayList();         for (final Integer c : s) {           if (f()) {             retain.add(c);           }         }         s = retain.toArray(new Integer[retain.size()]);       }       if (f() && s.length > 0) {         s = new Integer[] {s[0]};       }     }     System.out.println(Arrays.toString(s));   } } ```  Content of config:  ```                                                   ``` ##","closed","medium,","archmageirvine","2016-05-13T00:05:04Z","2017-03-23T18:13:10Z"
"","3369","IndentationCheckTest makes assumption about the order of HashMap","The tests `IndentationCheckTest.testGetRequiredTokens` and `IndentationCheckTest.testGetAcceptableTokens` both use `handlerFactory.getHandledTypes` which internally uses a `HashMap`. HashMap does not guarantee any order of iteration. In these tests however,  the code is assuming that the order of iteration will be the same twice in a row, which can result in test failures.","closed","miscellaneous,","azy2","2016-07-25T22:23:58Z","2016-08-09T18:44:25Z"
"","3445","GUI: Inconsistency in AST structure for block-comments","The same as https://github.com/checkstyle/checkstyle/issues/3431, but in Checkstyle SDK GUI.  Now, if ""Java with comments and Javadocs"" mode is selected, there is `JAVADOC`node instead of `BLOCK_COMMENT_BEGIN`, however it should replace `COMMENT_CONTENT` and be like this:  ``` BLOCK_COMMENT_BEGIN |--JAVADOC `--BLOCK_COMMENT_END ```  there is still problem in GUI part.  ![screenshot from 2016-10-29 13-56-57](https://cloud.githubusercontent.com/assets/812984/19832691/ab9b5940-9ddf-11e6-8fd3-20e7c9ada3a3.png)  please provide the fix and update http://checkstyle.sourceforge.net/writingjavadocchecks.html#Checkstyle_SDK_GUI with new picture , to build web site you can do ""mvn clean site -Dlinkcheck.skip=true"". ##","closed","approved,","baratali","2016-09-15T14:23:23Z","2016-11-11T21:05:13Z"
"","3437","PackageDeclaration: new property matchDirectoryStructure to match the package name to directory name of source file","The PackageDeclaration check should allow you to check whether the package name matches the directory name for the source file as stated in the [documentation](http://checkstyle.sourceforge.net/config_coding.html#PackageDeclaration).  Maven compiles classes with non-matching package name just fine and I would like to prevent having such classes. After searching for this feature, I found out it was removed (#209). I think this change should be reverted, since [the Java language specification doesn't force files to be in a certain directory](http://stackoverflow.com/a/8395934). ##","closed","medium,","pepri","2016-09-11T10:21:09Z","2017-04-21T13:29:57Z"
"","3820","Pull #3820: Rename method in CheckUtil","The method returns token names, not text.","closed","miscellaneous,","Vladlis","2017-02-11T14:49:17Z","2017-02-16T21:34:34Z"
"","3613","Issue #3612: Fix LCurly on nl in Annon Inner Class Wrapped","The location of the `LCURLY` when wrapped was not being added as an acceptable indent location.  This prevented this rule from being combined with:  ```xml      ```  This solve this (I think) by adding the indentation for the `LCURLY` as valid the same way that it is done for the `RCURLY`.  This should close: #3612","closed","abandoned,","JLLeitschuh","2016-12-06T00:38:52Z","2017-03-10T13:50:09Z"
"","3338","doc: Fix JavaDoc comments","The JavaDoc contained invalid XML syntax. This commit fixes it.","closed","miscellaneous,","michael-simons","2016-07-04T07:54:40Z","2016-07-04T18:10:21Z"
"","3736","config: Remove redundant and incorrect rules from import control configuration","The import control configuration has become a bit out of sync and has to be updated in several places. I will list the issues here as I go through the configuration and find more.  Please comment on how to handle these individual issues.  - `java.lang.reflect` is redundantly allowed: it is listed non-locally in the top package but also under the `checks.indentation` package. Should `java.lang.reflect` be allowed anywhere? I think not, so I suggest we make it local-only in the top package (it is used in `PackageObjectFactory`) and add other local-only allowance only where needed.  - `java.nio.charset.Charset` is redundantly allowed in `checks.header`: `java.nio `is already globally allowed in the top package. I assume we want to allow `java.nio` everywhere and can simply remove the redundant allow?  - Thanks to #3724 we can remove allowances for imports only used in test code. This will be done in #3724 for Guava, but other unnecessary rules might also be left over. I will find them all and remove them if possible.","closed","miscellaneous,","jochenvdv","2017-01-18T15:18:51Z","2017-02-13T03:38:39Z"
"","3742","Google Style Checks","The following line excludes using `e` as an exception name. Though the google style guide, I cannot find any reference to this claim.  https://github.com/checkstyle/checkstyle/blob/258c440a011f1845a2095e5b6361ae9639849f1f/src/main/resources/google_checks.xml#L125  Should this line be updated to match the current google style guide?","closed","","icirellik","2017-01-19T14:51:58Z","2017-01-19T15:42:20Z"
"","3779","Indentation: Checkstyle reports errors on correctly formatted nested / fluent code","The following is correctly formatted (in my opinion): ``` { cs }  » javac Temp.java { cs }  » cat Temp.java import java.util.List;  /**  * Test  */ public class Temp {     /**      * test      *      * @param strings test      */     private void test(final List strings) {         final StringBuilder sb1 = new StringBuilder();         final StringBuilder sb2 = new StringBuilder();         strings.add(             2,             sb1.append(""a"")                 .append(""b"") //violation                 .append(sb2 //violation                     .append(""a2"") //violation                     .append(""b2"") //violation                     .toString()) //violation                 .toString()); //violation     } }  { cs }  » cat config.xml                                                                                                                                               { cs }  » java -jar checkstyle-7.5.1-all.jar -c config.xml Temp.java Starting audit... [ERROR] ...\Temp.java:18: '.' have incorrect indentation level 16, expected level should be 12. [Indentation] [ERROR] ...\Temp.java:19: '.' have incorrect indentation level 16, expected level should be 12. [Indentation] [ERROR] ...\Temp.java:20: '.' have incorrect indentation level 20, expected level should be 12. [Indentation] [ERROR] ...\Temp.java:21: '.' have incorrect indentation level 20, expected level should be 12. [Indentation] [ERROR] ...\Temp.java:22: '.' have incorrect indentation level 20, expected level should be 12. [Indentation] [ERROR] ...\Temp.java:23: '.' have incorrect indentation level 16, expected level should be 12. [Indentation] Audit done. Checkstyle ends with 6 errors. ```  Expected: no errors","open","indentation,","davelane","2017-01-30T08:36:38Z","2019-05-30T08:56:59Z"
"","3062","Uncatch exception using maven-checkstyle-plugin 2.17 if divide is the last character in comments including javadocs","The following comment is silently crashing the maven checkstyle  reporting :  > ``` > /** >  * Incrément le nombre de OG ou OGI dans le contexte et retourne la valeur / >  * >  * @param type >  * @param String type de guillemet (OG ou OGI) / >  * @return String contenant le numéro courant (ex: 12.1 pour 1er OGI du >  * 12èem OG) >  * >  */ > ``` ##","closed","","pcolot01","2016-03-24T08:52:57Z","2016-11-11T00:00:07Z"
"","3515","CLI: Cannot override default Checker","The first thing we define in any configuration file is the top level module, which is usually `Checker`. https://github.com/checkstyle/checkstyle/blob/fbf3f95c2273be23b966cba6e6ef89390a6fb020/config/checkstyle_checks.xml#L6 I thought if I changed this to something else, I could override the default `Checker` and use my own custom class. Unfortunately, it is not possible to override `Checker` as the CLI hardcodes `Checker` as the class to run. https://github.com/checkstyle/checkstyle/blob/fbf3f95c2273be23b966cba6e6ef89390a6fb020/src/main/java/com/puppycrawl/tools/checkstyle/Main.java#L414  It was already implied this was possible [here](https://github.com/checkstyle/checkstyle/issues/2221#issuecomment-254015954), but it is actually not.  > If logic is complicated and does not satisfy already configured Checker, create a new Checker and custom Check and do whatever user want.  I think we should get the main module to run from the configuration XML so it can be customized without having to also rewrite the CLI.  Example override configuration: ````      ````  Example override class: ```` package com.company.test;  import java.io.File; import java.util.List;  import com.puppycrawl.tools.checkstyle.api.AuditListener; import com.puppycrawl.tools.checkstyle.api.AutomaticBean; import com.puppycrawl.tools.checkstyle.api.CheckstyleException; import com.puppycrawl.tools.checkstyle.api.RootModule;  public class CustomChecker extends AutomaticBean implements RootModule {     @Override     public void destroy() {         // example     }      @Override     public int process(List files) throws CheckstyleException {         // example         return 0;     }      @Override     public void addListener(AuditListener listener) {         // example     }      @Override     public void setModuleClassLoader(ClassLoader moduleClassLoader) {         // example     } } ````  The main module will also need an interface (or base class) for **atleast** the following method calls that all main modules will need to implement, [as required by the CLI](https://github.com/checkstyle/checkstyle/blob/fbf3f95c2273be23b966cba6e6ef89390a6fb020/src/main/java/com/puppycrawl/tools/checkstyle/Main.java#L419-L428): - public int process(List files) throws CheckstyleException - public void setModuleClassLoader(ClassLoader moduleClassLoader) - public void addListener(AuditListener listener) - public void destroy() ##    --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/38671941-cli-cannot-override-default-checker?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","new feature,","rnveach","2016-10-25T17:52:57Z","2016-11-09T17:03:31Z"
"","3153","IllegalTokenTextCheck and IllegalTokenCheck does not work with COMMENT_CONTENT token","The error message says it all.  ``` $ cat TestConfig.xml                                               ```  ``` com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Check 'com.puppycrawl.tools.checkstyle.check s.coding.IllegalTokenTextCheck' waits for comment type token ('COMMENT_CONTENT') and should override 'isCommentNodesRequired()' method to r eturn 'true'         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:181)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:326)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:159) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Check 'com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCh eck' waits for comment type token ('COMMENT_CONTENT') and should override 'isCommentNodesRequired()' method to return 'true'         at com.puppycrawl.tools.checkstyle.TreeWalker.registerCheck(TreeWalker.java:266)         at com.puppycrawl.tools.checkstyle.TreeWalker.registerCheck(TreeWalker.java:221)         at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:162)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138)         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:176)         ... 3 more Checkstyle ends with 1 errors. ```  Definitely a bug :) Currently can't check comment contents for potentially insecure content at my company!","closed","approved,","Qix-","2016-05-03T07:32:04Z","2016-05-08T12:36:40Z"
"","3548","Typos and grammer errors in DesignForExtensionCheck description","The description of DesignForExtensionCheck contains many typos, and should be reworked by someone with a better understanding of English.  Examples:  - ""founded""  - ""sence""  - ""deside""","closed","","C-Otto","2016-11-12T15:05:39Z","2016-11-12T15:07:02Z"
"","3689","doc: Fix incorrect documentation for SuppressWithNearbyCommentFilter","The configuration specified in the documentation for SuppressWithNearbyCommentFilter does not do what it says. This fixes it.","closed","","cypai","2017-01-05T02:19:54Z","2017-01-05T13:57:29Z"
"","3047","UnnecessaryParenthesesCheck: allow parentheses around non-identifier return values","The `UnnecessaryParenthesesCheck` will flag lines like:  ``` return (x + 1); // parens around return value ... return (x == 1); // parens around return value ... ```  And so forth.  However, the parentheses in this case can improve readability, as they make it immediately clear that the return type is, say, a `boolean`, rather than the type of `x`.  Ideally, the check would provide an option to allow parentheses around expressions that are being `return`ed (but would still flag parentheses around identifiers, e.g., `return (x)`).  P.S. Happy to submit a PR for this if others agree that it would be useful. ##","closed","","charliermarsh","2016-03-20T20:16:09Z","2016-11-11T00:00:45Z"
"","3119","Documentation for ANT property config is incorrect","The `config` parameter of `` is [documented](http://checkstyle.sourceforge.net/anttask.html#Parameters) as supporting either a file or a resource on the classpath, however [`CheckStyleAntTask.setConfig()`](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java#L221) assumes the input is a `File` and converts it to an absolute path, thereby breaking resource loading. By coincidence this works on Linux (as long as there isn't a file with the same name as the resolved path) but on Windows this fails, since the absolute path starts with the drive letter.  Partial Ant build file:  ```                          ```  On Linux this passes. On Windows it reports an error:  ``` $ ant checkstyle ... checkstyle:  BUILD FAILED E:\workspace\project\build.xml:104: Unable to create a Checker: configLocation {E:\google_checks.xml}, classpath {null}.  Total time: 0 seconds ```  Copying [`google_checks.xml`](https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/google_checks.xml) to `E:\google_checks.xml` is a workaround, but obviously isn't desirable.","closed","miscellaneous,","dimo414","2016-04-19T05:16:34Z","2017-06-13T16:27:17Z"
"","3804","ParameterNameCheck documentation out of date","The [ParameterName](http://checkstyle.sourceforge.net/config_naming.html#ParameterName) documentation does not mention the scope and excludeScope properties introduced in #3473","closed","","marschall","2017-02-07T10:01:51Z","2017-02-07T10:22:32Z"
"","3699","doc: fix the escaping of AvoidEscapedUnicodeCharactersCheck's javadocs","The [`AvoidEscapedUnicodeCharactersCheck`](http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.html) incorrectly renders the example unicode escapes as their unicode characters, which is confusing.  I found [this question](http://stackoverflow.com/q/32020170) trying to fix this problem, but (as discussed) `\\` doesn't work and `\u005c` (escaped backslash) is confusing when reading the source.  However the HTML escape `\` works, rendering as a backslash in the HTML while remaining (fairly) readable in the source. This change swaps the examples to use the HTML escape, and also corrects the first sentence of the docs which are truncated in the [package view](http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/checks/package-summary.html) due to the early `.` in `e.g.`.","closed","","dimo414","2017-01-08T08:41:09Z","2017-01-08T23:24:54Z"
"","3263","Pull #3263: corrected alphabetical order of the checks","The ""Checks"" page lists the available checks in alphabetical order and even says that it does. Therefore I corrected the order of some checks, because they have not been in the right place.","closed","miscellaneous,","f05fk","2016-06-10T06:13:00Z","2016-06-16T12:02:40Z"
"","3262","Pull #3262: corrected alphabetical order of the checks in checks.xml","The ""Checks"" page lists the available checks in alphabetical order and even says that it does. Therefore I corrected the order of some checks, because they have not been in the right place.","closed","","f05fk","2016-06-09T12:56:49Z","2016-06-09T21:21:59Z"
"","3622","XDoc: extend validation to Checker and TreeWalker","Thanks to [XDocsPagesTest](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/internal/XDocsPagesTest.java) all our Checks follow a similar pattern and we get notified when it is out of date with the actual class (new property, type change, etc).  Currently [Checker](http://checkstyle.sourceforge.net/config.html#Checker) and [TreeWalker](http://checkstyle.sourceforge.net/config.html#TreeWalker) are not included in this validation, and also missing sub-sections that our other checks have (description, examples, example of usage, package).  We should look into extending the test to these 2, and identify if we wish to add any of the missing sub-sections. Description, properties, and examples should definitely be listed.   --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39827606-xdoc-extend-validation-to-checker-and-treewalker?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","rnveach","2016-12-07T19:53:03Z","2017-01-05T17:08:07Z"
"","3170","Javadoc grammar: Delete child nodes in Javadoc TEXT node","TEXT node has children of CHAR and WS types. Those children are redundant and make AST more complicated. I don't see any cases when such nodes can be useful.  There are two ways to solve this: - edit ANTLR grammar for Javadoc comments - OR do post-processing of the Javadoc parse tree and clear all TEXT nodes  **Example** Javadoc comment:  ``` Represents a Javadoc tag. Provides methods to query what type of tag it is. @author Oliver Burn ```  AST:  ``` JAVADOC -> Represents a Javadoc tag. Provides methods to query what type of tag it is.\r\n@author Oliver Burn [0:0] |--TEXT -> Represents a Javadoc tag. Provides methods to query what type of tag it is. [0:0] |   |--CHAR -> R [0:0] |   |--CHAR -> e [0:1] |   |--CHAR -> p [0:2] |   |--CHAR -> r [0:3] |   |--CHAR -> e [0:4] |   |--CHAR -> s [0:5] |   |--CHAR -> e [0:6] |   |--CHAR -> n [0:7] |   |--CHAR -> t [0:8] |   |--CHAR -> s [0:9] |   |--WS ->   [0:10] |   |--CHAR -> a [0:11] |   |--WS ->   [0:12] |   |--CHAR -> J [0:13] |   |--CHAR -> a [0:14] |   |--CHAR -> v [0:15] |   |--CHAR -> a [0:16] |   |--CHAR -> d [0:17] |   |--CHAR -> o [0:18] |   |--CHAR -> c [0:19] |   |--WS ->   [0:20] |   |--CHAR -> t [0:21] |   |--CHAR -> a [0:22] |   |--CHAR -> g [0:23] |   |--CHAR -> . [0:24] |   |--WS ->   [0:25] |   |--CHAR -> P [0:26] |   |--CHAR -> r [0:27] |   |--CHAR -> o [0:28] |   |--CHAR -> v [0:29] |   |--CHAR -> i [0:30] |   |--CHAR -> d [0:31] |   |--CHAR -> e [0:32] |   |--CHAR -> s [0:33] |   |--WS ->   [0:34] |   |--CHAR -> m [0:35] |   |--CHAR -> e [0:36] |   |--CHAR -> t [0:37] |   |--CHAR -> h [0:38] |   |--CHAR -> o [0:39] |   |--CHAR -> d [0:40] |   |--CHAR -> s [0:41] |   |--WS ->   [0:42] |   |--CHAR -> t [0:43] |   |--CHAR -> o [0:44] |   |--WS ->   [0:45] |   |--CHAR -> q [0:46] |   |--CHAR -> u [0:47] |   |--CHAR -> e [0:48] |   |--CHAR -> r [0:49] |   |--CHAR -> y [0:50] |   |--WS ->   [0:51] |   |--CHAR -> w [0:52] |   |--CHAR -> h [0:53] |   |--CHAR -> a [0:54] |   |--CHAR -> t [0:55] |   |--WS ->   [0:56] |   |--CHAR -> t [0:57] |   |--CHAR -> y [0:58] |   |--CHAR -> p [0:59] |   |--CHAR -> e [0:60] |   |--WS ->   [0:61] |   |--CHAR -> o [0:62] |   |--CHAR -> f [0:63] |   |--WS ->   [0:64] |   |--CHAR -> t [0:65] |   |--CHAR -> a [0:66] |   |--CHAR -> g [0:67] |   |--WS ->   [0:68] |   |--CHAR -> i [0:69] |   |--CHAR -> t [0:70] |   |--WS ->   [0:71] |   |--CHAR -> i [0:72] |   |--CHAR -> s [0:73] |   `--CHAR -> . [0:74] |--NEWLINE -> \r\n [0:75] |--JAVADOC_TAG -> @author Oliver Burn [1:0] |   |--AUTHOR_LITERAL -> @author [1:0] |   |--WS ->   [1:7] |   `--DESCRIPTION -> Oliver Burn [1:8] |       `--TEXT -> Oliver Burn [1:8] |           |--CHAR -> O [1:8] |           |--CHAR -> l [1:9] |           |--CHAR -> i [1:10] |           |--CHAR -> v [1:11] |           |--CHAR -> e [1:12] |           |--CHAR -> r [1:13] |           |--WS ->   [1:14] |           |--CHAR -> B [1:15] |           |--CHAR -> u [1:16] |           |--CHAR -> r [1:17] |           `--CHAR -> n [1:18] `--EOF ->  [1:19] ``` ##","closed","breaking compatibility,","baratali","2016-05-12T22:22:01Z","2016-11-19T00:16:28Z"
"","3467","building v5.7 unable to find https://raw.github.com/checkstyle/checkstyle/master/src/testinputs/com/puppycrawl/tools/checkstyle/suppressions_none.xml","Tests in error:  ##   testLoadFromURL(com.puppycrawl.tools.checkstyle.filters.SuppressionsLoaderTest): unable to find https://raw.github.com/checkstyle/checkstyle/master/src/testinputs/com/puppycrawl/tools/checkstyle/suppressions_none.xml  Attempting to build v5.7 (sorry I know it's old) and it's looking for an online resource. Not a big deal since i can skip the tests. Just reporting the condition as an FYI  ---","closed","","spyhunter99","2016-09-25T22:18:00Z","2016-09-26T12:02:59Z"
"","3526","Testing new intellij inspections","Testing.","closed","","rnveach","2016-11-04T02:19:01Z","2017-12-17T23:45:17Z"
"","3819","infra: update orekit commit","testing moving commit to latest fix","closed","","rnveach","2017-02-11T14:03:10Z","2017-02-11T17:56:41Z"
"","3501","Add context to the error message for RightCurlyOption.SAME","Test.java 1: if { 2:   // code  3: } 4: else { 5:    // code 6: }  checkstyle rule: RightCurlyOption SAME http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyOption.html  /var/tmp $ java -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java Test.java:3: '}' should be on the same line.  ---  Error message would be more helpful if it said "" '}' should be on the same line as the next block""  ---","closed","","jacalata","2016-10-11T21:19:08Z","2016-10-14T15:22:13Z"
"","3733","Indentation: Annotation with RParen on new line when followed by other annotations causes invalid expectation","temp $ javac CheckstyleRightParenBug.java  temp $ cat CheckstyleRightParenBug.java ``` @interface RightParenBug {     String value(); } @interface RightParenNoBug {     String value(); } @RightParenBug(     ""Check out that warning on the next line"" ) // Error on this line: ')' have incorrect indentation level 0, expected level should be 4. (3:0) @RightParenNoBug(     ""Check out that not-warning on the next line"" ) // But no bug here.  This is what is expected. public class CheckstyleRightParenBug {} ```  temp $ cat config.xml ```                        ```  temp $ java -jar checkstyle-7.4-all.jar -c config.xml CheckstyleRightParenBug.java Starting audit... [ERROR] /temp/CheckstyleRightParenBug.java:9: ')' have incorrect indentation level 0, expected level should be 4. [Indentation] Audit done. Checkstyle ends with 1 errors.  ---------------  I expect the closing parenthesis to be at the same level as the start of the annotation, but this is only enforced on the last annotation before the class declaration.  This error also occurs on annotations of other elements as well (class variables, methods, etc.).  They are all erroneously expected to be one basic offset deeper than they should be.  --------------  I suspect that this might be related to issues #3134, #3130, and #553 as well.","closed","indentation,","bamapookie","2017-01-17T14:56:35Z","2017-02-15T14:13:14Z"
"","3225","Block Comments: CR lines not handled the same as LF lines","Taken from problems in PR #3179 with file `InputNewlineCrAtEndOfFile.java`.  ``` /**  * Test case for detection of an existing CR newline at EOF, using the   * NewlineAtEndOfFileCheck.  * @author Martin Steiger  **/ ```  when Tree is printed with LF:  ``` |--MODIFIERS -> MODIFIERS [12:0] |  |--BLOCK_COMMENT_BEGIN -> /* [7:0] |  |  |--COMMENT_CONTENT -> *\n * Test case for detection of an existing CR newline at EOF, using the \n * NewlineAtEndOfFileCheck.\n * @author Martin Steiger\n * [7:2] |  |  `--BLOCK_COMMENT_END -> */ [11:2] |  `--LITERAL_PUBLIC -> public [12:0] ```  when Tree is printed with CR:  ``` |--MODIFIERS -> MODIFIERS [12:0] |   |--BLOCK_COMMENT_BEGIN -> /* [7:0] |   |   |--COMMENT_CONTENT -> *\r * Test case for detection of an existing CR newline at EOF, using the \r * NewlineAtEndOfFileCheck.\r * @author Martin Steiger\r * [7:2] |   |   `--BLOCK_COMMENT_END -> */ [7:131] |   `--LITERAL_PUBLIC -> public [12:0] ```  LF is [11:2] but CR is [7:131]. CR doesn't start and end on the same line which is what is wrong. The whole file has CR and we treat them as new lines, so we should do the same for comments.","closed","approved,","rnveach","2016-05-28T02:50:57Z","2016-05-28T12:47:49Z"
"","3752","reevaluate tokens in google config for SeparatorWrapCheck","Taken from PR #3743, When reviewing the tokens of SeparatorWrapCheck, we would like more time to review the following tokens before adding them.  http://checkstyle.sourceforge.net/config_whitespace.html#SeparatorWrap  > ""RBRACK"", ""AT"", ""ELLIPSIS"", ""SEMI"", ""ARRAY_DECLARATOR""  Right now we ignore usage of these tokens in [google config validator](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java#L181): ```         GOOGLE_TOKENS_IN_CONFIG_TO_IGNORE.put(""SeparatorWrap"", Stream.of(                 // state of configuration until                 // https://github.com/checkstyle/checkstyle/issues/3752                 ""RBRACK"", ""AT"", ""ELLIPSIS"", ""SEMI"", ""ARRAY_DECLARATOR"", ```  We need to review https://google.github.io/styleguide/javaguide.html and make a decision: - to use this tokens (remove from GOOGLE_TOKENS_IN_CONFIG_TO_IGNORE, update google_checks.xml, update google's ITs to have inputs with such code)  - do NOT use (keep as is and update ignore comment at AllChecksTest ). If google style is not clear on this use cases - we could open issue on style guide to clarify.","closed","miscellaneous,","rnveach","2017-01-24T14:31:45Z","2017-07-09T21:50:23Z"
"","3749","reevaluate tokens in google config for OperatorWrapCheck","Taken from PR #3743, When reviewing the tokens of OperatorWrapCheck, it is unclear if we should add the following tokens to google configuration.  > ""DIV_ASSIGN"", ""BOR_ASSIGN"", ""SL_ASSIGN"", ""ASSIGN"", ""BSR_ASSIGN"", ""BAND_ASSIGN"", ""PLUS_ASSIGN"", ""MINUS_ASSIGN"", ""SR_ASSIGN"", ""STAR_ASSIGN"", ""BXOR_ASSIGN"", ""MOD_ASSIGN""  We should review them and ask google for clarification.","closed","miscellaneous,","rnveach","2017-01-23T16:13:35Z","2017-02-16T04:07:38Z"
"","3753","reevaluate tokens in google config for NeedBracesCheck","Taken from PR #3743, When reviewing the tokens of NeedBracesCheck, we would like more time to review the following tokens before adding them.  > LAMBDA","closed","miscellaneous,","rnveach","2017-01-24T14:33:25Z","2017-01-28T03:34:20Z"
"","3748","reevaluate 'default' and 'case' in google config for EmptyBlock","Taken from PR #3743 ,  The tokens `default` and `case` shouldn't be empty according to http://checkstyle.sourceforge.net/reports/google-java-style-20160712.html#s4.8.4-switch . We should review and decide if tokens should be added to google configuration.","closed","miscellaneous,","rnveach","2017-01-23T15:56:16Z","2017-02-18T00:34:39Z"
"","3729","reevaluate tokens in IllegalTokenText","Taken from PR #3723 , When reviewing the tokens of IllegalTokenText, it was noticed that some tokens have no text that users can change, they are constants. It doesn't make sense to leave these tokens for the purpose of this check. If user wants to disallow a token, they should IllegalToken instead.  We need to identify these constant value tokens and remove them from the check. We should try to make a UT for this for when any new tokens are added.","closed","miscellaneous,","rnveach","2017-01-15T02:09:24Z","2017-02-18T22:17:17Z"
"","3735","reevaluate tokens in checkstyle config for NeedBraces","Taken from PR #3723 ,  When reviewing the tokens of NeedBraces, it is unclear if we should add the token `LAMBDA` to our configuration. Our style demand braces in all case for IF, FOR, etc. so it seems LAMBDA should follow this rule too.  New configuration item created for this token: ````                         ````  When testing this out and fixing violations from adding the token, TeamCity failed with violations like: ```` Statement lambda can be replaced with expression lambda (7)  EqualsHashCodeCheck.java (1) 162: finishTree() Statement lambda can be replaced with expression lambda ```` for code like: ```` -            .entrySet().stream().filter(detailASTDetailASTEntry -> -                objBlockWithHashCode.remove(detailASTDetailASTEntry.getKey()) == null) -            .forEach(detailASTDetailASTEntry -> { +            .entrySet().stream().filter(detailASTDetailASTEntry -> { +                return objBlockWithHashCode.remove(detailASTDetailASTEntry.getKey()) == null; +            }).forEach(detailASTDetailASTEntry -> { ````","closed","miscellaneous,","rnveach","2017-01-18T13:59:03Z","2017-02-16T04:39:02Z"
"","3731","expand documentation on METHOD_REF token","Taken from PR #3723 ,  Documentation for METHOD_REF at http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_REF needs to be expanded, preferably with an example of it used in java code like some of the other tokens.","closed","miscellaneous,","rnveach","2017-01-15T03:23:14Z","2017-03-02T18:02:45Z"
"","3730","reevaluate tokens in checkstyle and google config for AnnotationLocationCheck","Taken from PR #3723  and PR #4120 , When reviewing the tokens of AnnotationLocationCheck, it is unclear if we should add the following tokens to checkstyle and google configuration.  > ""TYPECAST"", ""DOT"", ""TYPE_ARGUMENT"", ""LITERAL_NEW"", ""LITERAL_THROWS"", ""IMPLEMENTS_CLAUSE"", ""CLASS_DEF"", ""CTOR_DEF"", ""ENUM_DEF"", ""INTERFACE_DEF"", ""METHOD_DEF"", ""VARIABLE_DEF""  We should review them and provide more examples in our xdocs for this check as it is not easy to understand what the tokens are being referred to.","open","easy,","rnveach","2017-01-15T02:25:23Z","2020-02-22T18:38:46Z"
"","3239","Java 8 Grammar: Parsing of explicit receiver parameters","Taken from PR #3230 when working on Issue #3033 from a run on OpenJDK 8/9.  ``` $ javac TestClass.java  $ cat TestClass.java public class TestClass {     public void m4(TestClass this) {}     private class Inner {         public Inner(TestClass TestClass.this) {}     } }  $ cat TestConfig.xml                       $ java -jar checkstyle-6.19-all.jar -c TestConfig.xml TestClass.java Starting audit... TestClass.java:2:20: unexpected token: TestClass TestClass.java:4:41: unexpected token: . Audit done. ```  Input is compilable with java 8 javac.  JLS8 calls this a `Receiver Parameter` in 8.4.1.  > ReceiverParameter: > {Annotation} UnannType [Identifier .] this  http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1-220  http://blog.joda.org/2015/12/explicit-receiver-parameters.html  ATTENTION: Custom Checks need to be aware of new syntax possibilities in parameters, for example of how to fix them easily please look at 40a0b5dcf7f9b45ae98ddcb1dec6e9e7c4eec676","closed","antlr,","rnveach","2016-06-02T11:13:53Z","2016-06-16T21:35:52Z"
"","3238","Java 8 Grammar: annotations on varargs parameters","Taken from PR #3230 when working on Issue #3033 from a run on OpenJDK 8/9.  ``` $ cat TestClass.java import java.lang.annotation.ElementType; import java.lang.annotation.Target;  public class TestClass {     public void m5(@Nullable String @Nullable ... vararg) {} }  @Target(ElementType.TYPE_USE) @interface Nullable { }  $ cat TestConfig.xml                       $ java -jar checkstyle-6.19-all.jar -c TestConfig.xml TestClass.java Starting audit... TestClass.java:5:47: unexpected token: ... Audit done. ```  Input is compilable with java 8 javac. ##","closed","antlr,","rnveach","2016-06-02T11:10:28Z","2020-02-24T01:11:49Z"
"","3237","Java 8 Grammar: annotation on throws types","Taken from PR #3230 when working on Issue #3033 from a run on OpenJDK 8/9.  ``` $ cat TestClass.java import java.lang.annotation.ElementType; import java.lang.annotation.Target;  public class TestClass {     public void m3() throws NullPointerException, @Nullable ArrayIndexOutOfBoundsException {} }  @Target(ElementType.TYPE_USE) @interface Nullable { }  $ cat TestConfig.xml                       $ java -jar checkstyle-6.19-all.jar -c TestConfig.xml TestClass.java Starting audit... TestClass.java:5:51: expecting IDENT, found '@' Audit done. ```  Input is compilable with java 8 javac.","closed","antlr,","rnveach","2016-06-02T11:08:03Z","2016-06-03T13:04:52Z"
"","3240","Java 8 Grammar: annotation on generic type","Taken from PR #3230 when working on Issue #3033 from a run on OpenJDK 8/9.  ``` $ cat TestClass.java import java.lang.annotation.ElementType; import java.lang.annotation.Target;  class TestClass  { }  @Target(ElementType.TYPE_USE) @interface Nullable { }  $ cat TestConfig.xml                       $ java -jar checkstyle-6.19-all.jar -c TestConfig.xml TestClass.java Starting audit... TestClass.java:4:18: expecting IDENT, found '@' Audit done. ```  Input is compilable with java 8 javac.","closed","antlr,","rnveach","2016-06-02T11:26:12Z","2016-06-03T12:21:34Z"
"","3236","Java Grammar: annotation before variable declaration","Taken from PR #3230 when working on Issue #3033 from a run on OpenJDK 8 in `test/tools/pack200/typeannos/TypeUseTarget.java`.  ``` $ cat TestClass.java package test;  import java.lang.annotation.Target; import java.lang.annotation.ElementType;  public class TestClass {     void method() {         @B Object o = new @B String @B [3];     } } @Target(ElementType.TYPE_USE) @interface B { }  $ cat TestConfig.xml                        $ java -jar checkstyle-6.19-all.jar -c TestConfig.xml TestClass.java Starting audit... TestClass.java:8:12: expecting ""class"", found 'Object' TestClass.java:8:30: unexpected token: String TestClass.java:8:40: unexpected token: [ com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:281)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:196)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:396)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:330)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:161) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: MismatchedTokenException occurred during the analysis of file TestClass.java.     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:193)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:301)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:271)     ... 4 more Caused by: TestClass.java:9:5: expecting EOF, found '}'     at antlr.Parser.match(Parser.java:211)     at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:211)     at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:440)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:175)     ... 7 more Checkstyle ends with 1 errors. ```  Input is compilable with java 8 javac.  -----  https://github.com/wcm-io looks like using this syntax, all projects should be used to validate grammar update.","closed","antlr,","rnveach","2016-06-02T10:59:02Z","2020-01-25T18:30:36Z"
"","3122","Indentation: issue with double brace on the same line","Taken from PR #3118 from `spring-framework` file `PropertySourcesPlaceholderConfigurerTests.java` line 147.  ``` $ cat TestClass.java public class TestClass {     void method() {         PropertySourcesPlaceholderConfigurer pc = new PropertySourcesPlaceholderConfigurer();         pc.setPropertySources(propertySources);         pc.setProperties(new Properties() {{                 put(""my.name"", ""local"");         }});     } }  $ cat TestConfig.xml                                                                                                                                      $ java -jar checkstyle-6.17-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:7: '}' have incorrect indentation level 9, expected level should be 8. [Indentation] Audit done. Checkstyle ends with 1 errors. ```  Line 7 is the code and violation before the PR change. With the PR change, the violation changes to:  ``` 'block rcurly' have incorrect indentation level 8, expected level should be one of the following: 12, 16. ``` ##","open","indentation,","rnveach","2016-04-22T03:00:55Z","2017-02-03T13:57:36Z"
"","3160","Indentation: expand documentation","Taken from PR #2940  We need to expand documentation for Indentation as it is small and add where code is considered `line wrapping` if it spans multiple lines.  Some rules that should be said: - We don't force user to split/join lines. We can only complain about indentation for code that is first on the line. - Every line of java code (minus comments) must have some form of indentation requirement. Many issues show this is not always the case.  We also need to extend examples to show how all properties affects validation.  That is all I can think about right now. Add anything I missed. ##","open","indentation,","rnveach","2016-05-07T13:51:21Z","2016-12-14T18:16:58Z"
"","3145","Java Grammar: improper method def line and column position for methods with ARRAY_DECLARATOR","Taken from PR #2940  Example 1 with brackets:  ``` double[] computeDerivatives()     |--METHOD_DEF -> METHOD_DEF [85:10] // expected column 4, not 10     |   |--MODIFIERS -> MODIFIERS [85:10]     |   |--TYPE -> TYPE [85:10]     |   |   `--ARRAY_DECLARATOR -> [ [85:10]     |   |       |--LITERAL_DOUBLE -> double [85:4]     |   |       `--RBRACK -> ] [85:11] ```  Example 2 with no brackets:  ``` double computeDerivatives()     |--METHOD_DEF -> METHOD_DEF [90:4] // correct line and column     |   |--MODIFIERS -> MODIFIERS [90:4]     |   |--TYPE -> TYPE [90:4]     |   |   `--LITERAL_DOUBLE -> double [90:4] ```  Example 3 with brackets on seperate lines:  ``` double [] computeDerivatives()     |--METHOD_DEF -> METHOD_DEF [88:4] // expected line 87, not 88     |   |--MODIFIERS -> MODIFIERS [88:4]     |   |--TYPE -> TYPE [88:4]     |   |   `--ARRAY_DECLARATOR -> [ [88:4]     |   |       |--LITERAL_DOUBLE -> double [87:4]     |   |       `--RBRACK -> ] [88:5] ```  I expected `METHOD_DEF` to signify the exact line and column position of the start of the method definition. In this case, example 1's column position 10 is wrong and it should be 4, which we see for when there is no brackets in example 2. Even if we go by the line number and find the start of the line, the 3rd example shows it can be wrong too.  Full Example:  ``` $ cat TestClass.java public class TestClass {     double[] computeDerivatives() { return null; } }  $ java -jar checkstyle-6.17-all.jar TestClass.java -T CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |  `--LITERAL_PUBLIC -> public [1:0] |--LITERAL_CLASS -> class [1:7] |--IDENT -> TestClass [1:13] `--OBJBLOCK -> OBJBLOCK [1:23]     |--LCURLY -> { [1:23]     |--METHOD_DEF -> METHOD_DEF [2:10] // expected 2:4      |  |--MODIFIERS -> MODIFIERS [2:10]     |  |--TYPE -> TYPE [2:10]     |  |  `--ARRAY_DECLARATOR -> [ [2:10]     |  |      |--LITERAL_DOUBLE -> double [2:4] // as seen here     |  |      `--RBRACK -> ] [2:11]     |  |--IDENT -> computeDerivatives [2:13]     |  |--LPAREN -> ( [2:31]     |  |--PARAMETERS -> PARAMETERS [2:32]     |  |--RPAREN -> ) [2:32]     |  `--SLIST -> { [2:34]     |      |--LITERAL_RETURN -> return [2:36]     |      |  |--EXPR -> EXPR [2:43]     |      |  |  `--LITERAL_NULL -> null [2:43]     |      |  `--SEMI -> ; [2:47]     |      `--RCURLY -> } [2:49]     `--RCURLY -> } [3:0] ``` -------  **Migration notes**: please read at https://github.com/checkstyle/checkstyle/issues/3145#issuecomment-850996021","closed","breaking compatibility,","rnveach","2016-04-29T12:51:19Z","2021-06-05T14:56:54Z"
"","3255","Modules and XDocs: changed setter methods to recieve similar types with field type for easier xdoc validation","Taken from Issue #3212  To create a JUnit for module's default types we need to know the type we are dealing with to display it correctly. Unfortunately, We use String in the setter for everything, from regular expressions, file locations, to custom enumerations. It might be better if we could align the setter type to the bean's type, using https://github.com/checkstyle/checkstyle/blob/20506e1ceb2de74c9a85367135be714f8208643f/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L65.  This issue is specifically to change all `setProperty(String)` methods to `setProject(Type)`, where type are patterns or custom enumerations. I counted around 10 different types that would need to be added.  ```         cub.register(new PatternConverter(), Pattern.class);         cub.register(new FileConverter(), File.class);         cub.register(new UriConverter(), URI.class);         cub.register(new ServerityLevelConverter(), SeverityLevel.class);         cub.register(new ScopeConverter(), Scope.class); ``` ##","closed","new feature,","rnveach","2016-06-07T13:38:43Z","2016-12-14T06:37:37Z"
"","3254","XDoc Config: create unit test to verify property types and default values for Strings","Taken from Issue #3187  We have started validating XDoc types and default values, but not yet for Strings.  This issue is to expand on the current tests to include Strings and remove any current overrides.  These are the current overrides that need to be removed for full validation: https://github.com/checkstyle/checkstyle/blob/c58874e1ede888709e54871b297287e56e68432b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XDocsPagesTest.java#L541 https://github.com/checkstyle/checkstyle/blob/c58874e1ede888709e54871b297287e56e68432b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XDocsPagesTest.java#L586 ##","closed","miscellaneous,","rnveach","2016-06-07T13:36:13Z","2018-01-04T01:31:35Z"
"","3910","CommitValidationTest: add character limit to line","Taken from https://github.com/checkstyle/checkstyle/pull/3905#issuecomment-284103522:  We restrict commit messages to be 1 line to be concise, but we don't limit how long that line can be allowing users to create 400+ character messages.  `CommitValidationTest` needs to be modified to restrict the line length to 200 characters.  Rules message needs to be updated to show this new rule with it's own number when validation fails so users know how to correct the issue.","closed","easy,","rnveach","2017-03-04T01:22:15Z","2017-03-08T18:29:42Z"
"","3961","DetailASTTest: 'checkTree' failing on deep AST tree","Taken from https://github.com/checkstyle/checkstyle/pull/3894#issuecomment-285104957 and seen at https://travis-ci.org/checkstyle/checkstyle/jobs/208912195#L254 ,  > java.lang.StackOverflowError 	at com.puppycrawl.tools.checkstyle.api.DetailASTTest.checkTree(DetailASTTest.java:158)  We should find a way to re-write this test, if possible, so it doesn't use the stack for each child. When we run this on a deeply nested tree, we get a stackoverflow. We should be able to walk through the tree like we do in other areas, see https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L495-L508  Any file skips in this test should be removed as proof the fix works.","closed","easy,","rnveach","2017-03-08T20:28:09Z","2017-03-14T19:40:00Z"
"","3891","Split and Organize Checkstyle inputs by Test","Taken from https://github.com/checkstyle/checkstyle/pull/3887#discussion_r103765963  It makes it hard to review changes to one Check when multiple Checks are using the same input file and users modify that one file. It makes sense, imo, to add new stuff to an existing input file for simple fixes instead of always creating a new one.  We already restrict inputs to only be used by tests in a single folder. We should take this further and restrict inputs to a single test so no 2 tests use the same input file.  **Each PR should be one single Test class and it's inputs for quicker review, unless an admin has specified otherwise.**  We should start by renaming all inputs to `Input[SimpleTestName].*` (`[]`s are just for separation and should not be in final file name),  that are used by a test. If test is named `ParenPadCheckTest`, simple name would be `ParenPad` and input would start with `InputParenPad`. Any text can be appended to the end to make the input file name unique among others for the same test.  Each test's inputs should be alone in their own directory. If Test was in directory `.../checks/design` then inputs should be located in `.../checks/design/[SimpleTestName]` (`[]`s are just for separation and should not be in final file name). Folder names should be in all lowercase. Files should be moved to their new locations unless they are used by other checks. If that is the case, then the files should be copied over until all tests have their inputs separated. No input should be left without a test.  We expect no changes to the test's expected violation positions (line or column number). If that does happen because of any of the requested changes, then some of the changes need to be undone. If violation changes because of class rename, then class name and file name must be left unchanged but package rename and moving to new folder can still be done. These type of problems will be handled in the final commits.  Once all inputs are renamed, we should see if we can use sevntu's Test to verify all current and future inputs are named after their tests and we have no isolated inputs. https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/test/java/com/github/sevntu/checkstyle/internal/AllChecksTest.java#L111","closed","easy,","rnveach","2017-03-01T20:10:04Z","2017-09-23T13:52:36Z"
"","3974","NPathComplexity: find a way to calculate nested ""?:""","taken from https://github.com/checkstyle/checkstyle/pull/3785#issuecomment-281185031  apache-jsecurity/xref/home/zenigata/workspace/contribution/checkstyle-tester/repositories/apache-jsecurity/samples/spring-hibernate/src/org/jsecurity/samples/sprhib/party/Person.java.html#L194  ``` public boolean onEquals(Entity e) {       if (e instanceof Person) {         Person p = (Person) e;         return (givenName == null ? p.getGivenName() == null : givenName.equals(p.getGivenName())) &&                 (surname == null ? p.getSurname() == null : surname.equals(p.getSurname())) &&                 (middleNames == null ? p.getMiddleNames() == null : middleNames.equals(p.getMiddleNames())) &&                 (dateOfBirth == null ? p.getDateOfBirth() == null : dateOfBirth.equals(p.getDateOfBirth())) &&                 (gender == null ? p.getGender() == null : gender.equals(p.getGender())) &&                 (nameSalutation == null ? p.getNameSalutation() == null : nameSalutation.equals(p.getNameSalutation())) &&                 (nameSuffix == null ? p.getNameSuffix() == null : nameSuffix.equals(p.getNameSuffix())) &&                 (title == null ? p.getTitle() == null : title.equals(p.getTitle()));     }       return false; } ```  Find a correct way to calculate Npath value for such structures.","open","approved,","romani","2017-03-10T14:37:50Z","2017-03-12T17:22:28Z"
"","3542","Move AutomaticBean out of API package","Taken from https://github.com/checkstyle/checkstyle/pull/3541#issuecomment-259830261 and Issue #3255.  `AutomaticBean` needs to understand check's beans to be able to determine how to convert them and send them as simple setters. It is needed to complete #3255.  `[ERROR] src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java:[47] (extension) ForbidCertainImports: Import 'com.puppycrawl.tools.checkstyle.checks.whitespace.PadOption' should not match '.+\.checks\..+' pattern, it is forbidden.`  While it remains in API package, it is not possible to complete the desired issue as checks can't be referenced in API.  It should also be considered to allow checks to specify these bean conversions themselves so custom checks can make use of them.","closed","approved,","rnveach","2016-11-11T02:42:16Z","2017-12-29T03:36:20Z"
"","3987","Google style report: put it under git control","Taken from https://github.com/checkstyle/checkstyle/issues/3755#issuecomment-285870120 and https://github.com/checkstyle/checkstyle/issues/3755#issuecomment-285911703 :  Everytime we update our compliance with google's style, romani has to manually update our snapshot of the google style report, see http://checkstyle.sourceforge.net/reports/google-java-style-20160712.html . Every update requires to have a new URL with a date attached to the end.  We should drop this person-specific, manual process and find a way so anyone can do it with a PR.  I am recommending we put the HTML file under Git control, somewhere probably in our `site` directory so it is naturally deployed with each release. It should remain as a pure HTML file. It shouldn't require a rename every release, so the URL never needs to be changed. Since it is under Git, we can just look in the history to look at old versions if we need to and easily see what has changed.  Additionally we need to resolve potential problems of missed updates , see example https://github.com/checkstyle/checkstyle/pull/4053#pullrequestreview-27761092 . We should have only one version of guide html file - reports/google-java-style.html .  Ideal solution will be to keep absolute copy of html file from google repo (with all their css and other stuff)","closed","easy,","rnveach","2017-03-12T01:42:21Z","2020-02-23T01:01:36Z"
"","3839","EmptyBlock: can't get violation from case token","Taken from https://github.com/checkstyle/checkstyle/issues/3748#issuecomment-279396341  ```` $ cat TestClass.java public class TestClass {     void method(int a) {                 switch (a) {}                 switch (a) {case 1:}                 switch (a) {case 1:{}}                 switch (a) {                     case 1:                 }                 switch (a) {                     case 1:                     {}                 }                 switch (a) {                     case 1: { }                 }     } }  $ cat TestConfig.xml                                                      $ java -jar checkstyle-7.5.1-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  http://checkstyle.sourceforge.net/config_blocks.html#EmptyBlock `LITERAL_CASE` is an allowed token, but I can NOT produce a violation for it.  Our tests for the check makes no reference to cases. https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java Even though blocks are mostly considered curlies, it makes sense that we treat `case` and `default` as blocks since the case is grouping code under it. I assume a `case` that just contains `break` should still be considered empty.  We need to find the issue with the check and expand all our tests to every acceptable token for the check to verify we have no issues with any other tokens.","closed","medium,","rnveach","2017-02-17T19:32:15Z","2017-04-21T12:44:53Z"
"","3503","Checker: split Checker.fireErrors into fireErrors and fireViolations","Taken from https://github.com/checkstyle/checkstyle/issues/3488#issuecomment-253603328  In the code of Checker there is problem of wrong reusage of fireErrors mehod. Most violations are received from `final SortedSet fileMessages = processFile(file);` https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L266 fireErrors execution is wrong as it is how Exceptions from Checks should be printed. fireErrors should be continued to be used by abstract Checks to deliver ERROR to Checker. Check log/report violations , Check do not know severity level. For Check, ERROR is exceptional state that need to be reported.  Current implementation of Checker.fireError need to splt between fireViolations(with suppressions) and fireErrors(that is only for exceptional Errors).  fireViolation should receive list of messages that need to be printed. All filtering should be done out of fireViolation methods. ##    --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/38301107-checker-split-checker-fireerrors-into-fireerrors-and-fireviolations?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","open","","rnveach","2016-10-13T20:22:23Z","2016-11-09T13:37:31Z"
"","3175","Sevntu CS not running on all CS code","Taken from https://github.com/checkstyle/checkstyle/issues/3173#issuecomment-219083845  While implementing a Sevntu Check in CS, I noticed it was giving violations on our master code. It shouldn't have been since we supposedly run all Sevntu Checks on CS through `checkstyle_sevntu_checks.xml`. Also running `mvn checkstyle:checkstyle` produced no errors and passed.","closed","miscellaneous,","rnveach","2016-05-13T17:42:12Z","2016-05-14T13:12:28Z"
"","3582","RedundantModifier: no violation on final enum field methods","Taken from https://github.com/checkstyle/checkstyle/issues/2068#issuecomment-142972301 : ```` $ cat TestClass.java public enum TestEnum {     E1,      E2 {         @Override         public final void v() {         }     };      public void v() {     } }  $ cat TestConfig.xml                                         $ java -jar checkstyle-7.2-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  Expecting a violation on line 6. Final is redundant because enum like a final class in that it can't be inherited.","closed","approved,","rnveach","2016-11-24T19:54:23Z","2017-01-05T21:34:19Z"
"","3066","FileContents confused about number of lines in comment separated by '\r'","Taken from [PR #3060](https://github.com/checkstyle/checkstyle/pull/3060#issuecomment-201306771)  When the java lexer is given the comment `/* \r\u0000\u0000 */` it throws an ArrayIndexOutOfBoundsException.  Code in AstRegressionTest:  ``` verifyAstRaw(getPath(""InputRegressionEmptyAst.txt""), ""/* \r\u0000\u0000 */"", true); ```  Exception:  ``` java.lang.ArrayIndexOutOfBoundsException: 1     at com.puppycrawl.tools.checkstyle.api.FileText.get(FileText.java:324)     at com.puppycrawl.tools.checkstyle.api.FileContents.line(FileContents.java:224)     at com.puppycrawl.tools.checkstyle.api.FileContents.extractCComment(FileContents.java:189)     at com.puppycrawl.tools.checkstyle.api.FileContents.reportCComment(FileContents.java:136)     at com.puppycrawl.tools.checkstyle.api.FileContents.reportBlockComment(FileContents.java:102)     at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaLexer.mBLOCK_COMMENT_BEGIN(GeneratedJavaLexer.java:1204) ```  Some of the cause: Basically `FileContents.extractCComment` retrieved start and ends positions for the comment saying this was a 2 line comment. `FileContents.line` on the other hand says this is only a 1 line comment. So the exception occurs when `FileContents.extractCComment` tries to retrieve the non-existent second line of the comment.","closed","miscellaneous,","rnveach","2016-03-26T15:44:52Z","2016-05-29T12:42:45Z"
"","3611","Checker: option to allow printing exception as violation and continue execution","Taken from [here](https://github.com/sevntu-checkstyle/sevntu.checkstyle/pull/514#issuecomment-264748898).  An option in Checker is needed to prevent exceptions from checks/checkstyle from stopping execution of regression reports. Since regression uses maven-checkstyle plugin, this type of option would have to be in the configuration file as a property of Checker. I propose the property `haltOnException` which is either `true`/`false` (defaults to `true`): ````        ````  --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39791030-checker-option-to-allow-printing-exception-as-violation-and-continue-execution?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","new feature,","rnveach","2016-12-05T23:36:28Z","2016-12-07T23:21:55Z"
"","3650","Expand missing testing for PropertyCacheFile tests","Taken from #3594.  The reason why our tests passed but our coverage failed is because we are calling methods and not verifying any type of result. There were only some minor comments that eluded to what was being tested. Example:  The test before the fix: https://github.com/checkstyle/checkstyle/blob/56cc11416ebdf52dd299d11424fb04fda42fa63f/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java#L617-L638 The test after the fix: https://github.com/checkstyle/checkstyle/blob/94a7d07b64fbd646f0c6be61e34f80ae90a3187f/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java#L133-L161  There are more tests like this for the cache in `CheckerTest` that could cause the same type of failure. These tests should be fixed to actually test their results to make sure they are working correctly. Some examples: https://github.com/checkstyle/checkstyle/blob/56cc11416ebdf52dd299d11424fb04fda42fa63f/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java#L661-L664 https://github.com/checkstyle/checkstyle/blob/56cc11416ebdf52dd299d11424fb04fda42fa63f/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java#L682-L684 https://github.com/checkstyle/checkstyle/blob/56cc11416ebdf52dd299d11424fb04fda42fa63f/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java#L712-L718","closed","medium,","rnveach","2016-12-12T16:13:52Z","2017-05-25T02:09:58Z"
"","3923","Rule to enforce blank lines as wrap of class declaration","taken from #3379   ``` $ cat config.xml                                             $ cat MyClass.java  public class MyClass {     void blah(); }  $ java -jar checkstyle-7.5-all.jar -c config.xml MyClass.java  Starting audit... Audit done. ```  Expected: with some new option(s) (to let compatibility with previous behavior) raise violation on ""void blah();"" that it does not separated from following ""}"". in other words make rule to demand empty line after strict (without consideration of next sibling existance).  How to enforce empty line after ""{"" is still not clear (from design stand point ) ..... is this update for this  Check of new Check is required.","closed","","romani","2017-03-05T00:21:19Z","2018-11-13T05:19:27Z"
"","3543","Modules and XDocs: change setter methods to recieve similar types with field type for easier xdoc validation (more)","Taken from #3255. This can only be started once #3542 is complete.  These beans are taken from #3255 because they are check's custom properties and can't be referenced in `AutomaticBean` since it is in the API package.  ````         cub.register(new PadOptionConverter(), PadOption.class);         cub.register(new WrapOptionConverter(), WrapOption.class);         cub.register(new LineSeparatorConverter(), LineSeparatorOption.class);         cub.register(new ImportOrderConverter(), ImportOrderOption.class);         cub.register(new RightCurlyConverter(), RightCurlyOption.class);         cub.register(new LeftCurlyConverter(), LeftCurlyOption.class);         cub.register(new BlockOptionConverter(), BlockOption.class); ````","closed","approved,","rnveach","2016-11-11T02:49:21Z","2017-12-29T04:18:47Z"
"","3575","Modules and XDocs: change setter methods to recieve similar types with field type for easier xdoc validation (more 2)","Taken from #3255. These can be done at any time.  These types still need to be added to the `AutomaticBean` class.  ````         cub.register(new FileConverter(), File.class);         cub.register(new UriConverter(), URI.class);         cub.register(new ServerityLevelConverter(), SeverityLevel.class);         cub.register(new ScopeConverter(), Scope.class); ````  --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39498616-modules-and-xdocs-change-setter-methods-to-recieve-similar-types-with-field-type-for-easier-xdoc-validation-more-2?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","rnveach","2016-11-24T00:38:08Z","2016-12-05T21:01:59Z"
"","3907","SummaryJavadoc: no violation on absent summary and on javadoc where '.' is used not as end of sentense","taken from #3014  ``` $ cat config.xml                                  $ cat Test.java  public class Test {      /**      * JAXB 1.0 only default validation event handler      */     public static final byte NUL = 0;      /**      * @throws Exception if an error occurs.      */     public void foo1() throws Exception {      }      /**       * @return 1.       */     public int foo2(){         return 1;     }      /**       *        */     public void foo3() {      }     /**      *  A {@code Foo.  Foo}      */     public void foo(){      }  }  $ java -jar checkstyle-7.6-all.jar -c config.xml Test.java  Starting audit... Audit done. ```  Expected: violations for each javadocs","closed","medium,","romani","2017-03-03T19:09:39Z","2017-07-22T18:24:17Z"
"","3908","SummaryJavadoc: need special processing of inheritDoc tag","taken from #3014  ``` $ cat config.xml                                  $ cat Test.java  public class Test extends Exception {      /**       * {@inheritDoc} */     public String toString(){         return """";     } }  $ java -jar checkstyle-7.6-all.jar -c config.xml Test.java  Starting audit... [ERROR] /home/rivanov/nfs/tests/Test.java:3: First sentence of Javadoc is incomplete (period is missing) or not present. [SummaryJavadoc] Audit done. Checkstyle ends with 1 errors.  ```  Expected no error.  generated javadoc html is: ``` Method Detail      toString      public java.lang.String toString()      Overrides:         toString in class java.lang.Throwable   ```","closed","easy,","romani","2017-03-03T19:19:27Z","2017-03-25T13:45:02Z"
"","3523","Add support for excluding violations/files on negative regular expression match","Taken from #220. User wants an option to specifically specify the list of files Checkstyle will check for violations by a regular expression. He wants to specify a regular expression that will ignore files if they don't match.   ---","open","","rnveach","2016-11-02T21:46:56Z","2021-01-30T14:51:05Z"
"","3898","Split and Organize Checkstyle inputs by Test for WhitespaceAround","subtask of #3891 .  do a copy of all test input files to separate folder for WhitespaceAround. Not any other Check should use new inputs.","closed","easy,","romani","2017-03-02T17:17:29Z","2017-04-13T16:55:38Z"
"","3897","Split and Organize Checkstyle inputs by Test for WhitespaceAfterCheck","subtask of #3891 .  do a copy of all test input files to separate folder for WhitespaceAfterCheck . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-02T13:46:38Z","2017-03-08T21:14:56Z"
"","3900","Split and Organize Checkstyle inputs by Test for TypecastParenPad","subtask of #3891 .  do a copy of all test input files to separate folder for TypecastParenPad. Not any other Check should use new inputs.","closed","easy,","romani","2017-03-02T23:50:23Z","2017-03-13T04:34:38Z"
"","3904","Split and Organize Checkstyle inputs by Test for SeparatorWrap","subtask of #3891 .  do a copy of all test input files to separate folder for SeparatorWrap . Not any other Check should use new inputs.","closed","miscellaneous,","romani","2017-03-03T17:42:59Z","2017-03-09T01:46:56Z"
"","3929","Split and Organize Checkstyle inputs by Test for OperatorWrap","subtask of #3891 .  do a copy of all test input files to separate folder for OperatorWrap . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-05T13:13:18Z","2017-03-09T01:46:09Z"
"","3930","Split and Organize Checkstyle inputs by Test for NoWhitespaceBefore","subtask of #3891 .  do a copy of all test input files to separate folder for NoWhitespaceBefore . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-05T13:28:57Z","2017-04-29T17:42:48Z"
"","3931","Split and Organize Checkstyle inputs by Test for NoWhitespaceAfter","subtask of #3891 .  do a copy of all test input files to separate folder for NoWhitespaceAfter . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-05T13:36:45Z","2017-04-17T17:46:30Z"
"","3933","Split and Organize Checkstyle inputs by Test for NoLineWrap","subtask of #3891 .  do a copy of all test input files to separate folder for NoLineWrap . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-05T14:34:49Z","2017-04-20T01:53:28Z"
"","3954","Split and Organize Checkstyle inputs by Test for MethodParamPad","subtask of #3891 .  do a copy of all test input files to separate folder for MethodParamPad  Not any other Check should use new inputs.","closed","easy,","romani","2017-03-07T23:08:27Z","2017-03-14T00:23:12Z"
"","3958","Split and Organize Checkstyle inputs by Test for GenericWhitespace","subtask of #3891 .  do a copy of all test input files to separate folder for GenericWhitespace Not any other Check should use new inputs.","closed","easy,","romani","2017-03-08T16:41:41Z","2017-03-14T04:36:39Z"
"","3959","Split and Organize Checkstyle inputs by Test for FileTabCharacter","subtask of #3891 .  do a copy of all test input files to separate folder for FileTabCharacter Not any other Check should use new inputs.","closed","easy,","romani","2017-03-08T16:47:26Z","2017-04-12T05:44:58Z"
"","3999","Split and Organize Checkstyle inputs by Test for FileLength","subtask of #3891 .  do a copy of all test input files to separate folder for FileLength . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-13T20:41:05Z","2017-03-15T02:40:39Z"
"","3991","Split and Organize Checkstyle inputs by Test for ExecutableStatementCount","subtask of #3891 .  do a copy of all test input files to separate folder for ExecutableStatementCount . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-13T04:43:20Z","2017-03-16T23:54:32Z"
"","3985","Split and Organize Checkstyle inputs by Test for EmptyLineSeparator","subtask of #3891 .  do a copy of all test input files to separate folder for EmptyLineSeparator . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-11T19:37:59Z","2017-03-18T17:04:55Z"
"","3976","Split and Organize Checkstyle inputs by Test for EmptyForIteratorPad","subtask of #3891 .  do a copy of all test input files to separate folder for EmptyForIteratorPad . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-10T17:56:20Z","2017-03-16T17:55:37Z"
"","3970","Split and Organize Checkstyle inputs by Test for EmptyForInitializerPadCheck","subtask of #3891 .  do a copy of all test input files to separate folder for EmptyForInitializerPad. Not any other Check should use new inputs.","closed","easy,","sabaka","2017-03-09T22:18:29Z","2017-03-16T23:57:36Z"
"","3986","Split and Organize Checkstyle inputs by Test for AnonInnerLength","subtask of #3891 .  do a copy of all test input files to separate folder for AnonInnerLength . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-11T19:56:02Z","2017-03-19T12:15:10Z"
"","3381","Update Google style coverage to state of 12 July 2016","Style guide is changed - https://github.com/google/styleguide/commits/gh-pages/javaguide.html  Our version: http://checkstyle.sourceforge.net/reports/google-java-style.html (March 21, 2014) New version: https://google.github.io/styleguide/javaguide.html (July 12, 2016)  Text variants for web comparison (https://www.diffchecker.com/si5nrlfh): [google-style-12-July-2016.txt](https://github.com/checkstyle/checkstyle/files/392215/google-style-12-July-2016.txt) [google-style-21-March-2014.txt](https://github.com/checkstyle/checkstyle/files/392216/google-style-21-March-2014.txt)  Issue is created base on : #3363 , #941 ##","closed","new feature,","romani","2016-07-31T02:42:28Z","2016-11-12T00:16:13Z"
"","3022","Ignored file extensions will output unterminated  tags in XML","Starting with checkstyle 6.16, the xml report has unterminated `` tags for ignored file extensions. The root cause is Checker fires the file-started event before checking the file extension: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L303  ``` $ ls checkstyle-6.11.2.jar  checkstyle-6.13.jar  checkstyle-6.14.jar  checkstyle-6.15.jar  checkstyle-6.16.1-all.jar  checkstyle-6.16.1.jar  config.xml $ cat config.xml                                                     $ java -jar checkstyle-6.16.1-all.jar -c config.xml -f xml .           ```  expected  ``` $ java -jar checkstyle-6.16.1-all.jar -c config.xml -f xml .    ```","closed","approved,","idarmans","2016-03-09T19:30:36Z","2016-03-25T00:49:33Z"
"","3980","field check and splits done for whitespaceAround","Splitting done for whitespaceAround : #3898   I have created the general class for Field which can be later changed to necessary FieldNames.","closed","","nikshinde1996","2017-03-11T05:19:18Z","2017-03-11T13:55:01Z"
"","3981","Issue: #3898 field check and splits done for whitespaceAround","Splitting done for whitespaceAround : #3898  I have created the general class for Field which can be later changed to necessary FieldNames.","closed","","nikshinde1996","2017-03-11T05:30:08Z","2017-03-11T09:40:36Z"
"","3287","new CLI option: exclude directories","Split from https://github.com/checkstyle/checkstyle/issues/2866#issuecomment-226901806  Add a new option to the CLI to exclude one or more directories from being scanned for files by CheckStyle. Many common directories in a project's base (bin, .git, .metadata, etc) can be picked up in a directory scan and almost never contain anything relevant to CheckStyle. Though we usually don't use any files from these scans, just scanning them and holding these files in memory can slow CheckStyle down.  Examples of new exclude option: **Full Path Exclude**: `java -jar checkstyle-6.19-all.jar -c config.xml -e /excludeDirectory inputs...` **Relative Path Exclude**: `/some/project$ java -jar checkstyle-6.19-all.jar -c config.xml -e path/excludeDirectory inputs...` (Exlcudes the absolute path `/some/project/path/excludeDirectory`) **Regular Expression Exclude**: `java -jar checkstyle-6.19-all.jar -c config.xml -x ""[\\/]excludeDirectory[\\/]"" inputs...`  `-x` and `-e` can be used multiple times in 1 command.  more examples: Without expression: `java -jar checkstyle-6.19-all.jar -c config.xml D:\project -e D:\project\.metadata -e D:\project\.git -e D:\project\bin` With expression: `java -jar checkstyle-6.19-all.jar -c config.xml D:\project -x ""[\\\/](.metadata|.git|bin)[\\\/]`""","closed","new feature,","rnveach","2016-06-18T20:38:14Z","2016-07-27T20:18:56Z"
"","3484","Cut down on Checkstyle's dependencies on Guava, phase II","split from #3433 ## Remaining dependencies:  **com.google.common.collect.HashMultimap, com.google.common.collect.HashMultiset, com.google.common.collect.SetMultimap, com.google.common.collect.Multimap, com.google.common.collect.Multiset, com.google.common.collect.MapDifference**  > MEZk: do not have easy to use analogs in Java. > romani: yes, for now no analogs.  **com.google.common.collect.***  **ImmutableCollection** Checkstyle's API which uses ImmutableCollection (should be resolved in future - #3455): 1) com.puppycrawl.tools.checkstyle.DefaultContext 2) com.puppycrawl.tools.checkstyle.api.AutomaticBean 3) com.puppycrawl.tools.checkstyle.api.Context  **ImmutableList** Checkstyle's API which uses ImmutableList (should be resolved in future - #3455): 1) com.puppycrawl.tools.checkstyle.DefaultContext  **ImmutableMap** Checkstyle's API which uses ImmutableMap (should be resolved in future - #3455) 1) com.puppycrawl.tools.checkstyle.DefaultConfiguration 2) com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter 3) com.puppycrawl.tools.checkstyle.api.Configuration 4)com.puppycrawl.tools.checkstyle.api.FileContents  Uses **ImmutableMap** by accessing Checkstyle's API (should be resolved in future - #3455) 1) com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck 2) com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck 3) com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter 4) com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter 5) com.puppycrawl.tools.checkstyle.ConfigurationLoaderTest 6) com.google.checkstyle.test.chapter5naming.rule528typevariablenames.ClassTypeParameterNameTest 7) com.google.checkstyle.test.chapter5naming.rule528typevariablenames.InterfaceTypeParameterNameTest 8) com.google.checkstyle.test.chapter5naming.rule528typevariablenames.MethodTypeParameterNameTest 9) com.google.checkstyle.test.chapter5naming.rule526parameternames.ParameterNameTest 10) com.google.checkstyle.test.chapter5naming.rule525nonconstantfieldnames.MemberNameTest 11) com.google.checkstyle.test.chapter5naming.rule523methodnames.MethodNameTest 12) com.google.checkstyle.test.chapter5naming.rule522typenames.TypeNameTest 13) com.google.checkstyle.test.chapter5naming.rule521packagenames.PackageNameTest 14) com.google.checkstyle.test.chapter5naming.rule51identifiernames.CatchParameterNameTest 15) com.google.checkstyle.test.chapter4formatting.rule462horizontalwhitespace.GenericWhitespaceTest 16) com.google.checkstyle.test.chapter4formatting.rule462horizontalwhitespace.WhitespaceAroundTest  Uses **ImmutableMap.Builder**: 1) com.puppycrawl.tools.checkstyle.utils.TokenUtils uses ImmutableMap builder. If we replace it with unmodifiable map it will not allow to change the content of the map. 2) com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo 3) com.puppycrawl.tools.checkstyle.utils.TokenUtils  **ImmutableSet** Uses ImmutableSet for testing. Can be checked separately after https://github.com/checkstyle/checkstyle/issues/3462 . 1) com.puppycrawl.tools.checkstyle.checks.design.InputImmutable 2) com.puppycrawl.tools.checkstyle.checks.design.InputVisibilityModifierGenerics  Uses Guava's classes which return **ImmutableSet** 1) com.puppycrawl.tools.checkstyle.internal.CheckUtil  Used in test scope (input file). Can be checked separately after https://github.com/checkstyle/checkstyle/issues/3462 . **com.google.common.annotations.VisibleForTesting**  **com.google.common.base.Ascii**   **com.google.common.base.CaseFormat** and **com.google.common.base.CharMatcher**  > romani: If that become again the only reason to use Guava - it is usage is small, and we can copy-paste only required code to our utils, I am ok.  **com.google.common.reflect.ClassPath.**  > it could stay as ""test"" scope dependency.  **com.google.common.io.Flushables** and **com.google.common.io.Closables**.   > MEZk: If we get rid of the dependency it will require additional UTs and decrease readibility of the code as we will need to use additional try-catch block.  > romani: yes, but that syntax cobertura does not support, so we avoid try-with-resources on purpose. > If that class be last , we could do copy-paste of required methods to our utils package. ##","closed","miscellaneous,","romani","2016-09-30T17:52:29Z","2019-03-10T06:50:14Z"
"","3740","Verify tokens in google config","Spinoff of Issue #3720  We are now verifying if tokens should or shouldn't be in our checkstyle configuration and we found some missing ones that we added in the mentioned issue.  We should extend this to check tokens in google's configuration.  > New test should verify all acceptable tokens for all checks are being used. If we don't want a token to be used at all, it should be listed in an override section.","closed","miscellaneous,","rnveach","2017-01-18T21:08:38Z","2017-01-24T16:18:08Z"
"","3054","False positive on CommentsIndentationCheck","Something strange, for some reason it only happens when the lines look like this.  ``` package test;  import java.util.ArrayList;  public class Test {     public void foo() {         ArrayList list = new ArrayList();         // foo          // bar         list.size();         // baz     } } ```  Message is: Comments Indentation: Comment has incorrect indentation level 2, expected is 11, indentation should be the same level as line 11.","closed","","cypai","2016-03-22T23:49:29Z","2016-03-23T12:22:23Z"
"","3661","minor: correct Javadoc for AbstractImportRule","Some left-over reference to `Guard` from before refactoring and also a typo.","closed","","jochenvdv","2016-12-16T19:36:18Z","2016-12-16T19:58:07Z"
"","3728","Intorduce Snap CI as a new CI Server for Checkstyle","Snap CI web site https://www.snap-ci.com  It is free for Open Source projects.  **Features** https://www.snap-ci.com/features/  **Note**, Snap CI may not have yml-based configuration.  **Rationale** We can move a part of pitest tests from Shippable CI to Snap CI in order to reduce the time of the build.","closed","approved,","MEZk","2017-01-14T16:37:55Z","2017-02-15T02:23:15Z"
"","3711","doc: Fix typo in config_imports.xml","Small typo I spotted while adding documentation for the new attribute.","closed","","jochenvdv","2017-01-11T19:59:23Z","2017-01-11T20:33:44Z"
"","3433","Cut down on Checkstyle's dependencies on Guava","Since now we use Java 1.8, it worth cutting down on Checkstyle's dependencies on Guava library:  1) Guava's Optional replaced with Java's native. 2) Guava's Predicate and Iterables should be replaced with Java's Predicate and streams. We cannot do this until we resolve or find workaround for Cobertura report generation problem on Java 1.8. (#3269 (comment), mojohaus/cobertura-maven-plugin#21) 3) ...  as we go in minimizing of thirdparty dependencies we need to restrict its usage now.  Please create separate PR and move all general allowances of guava usage https://github.com/checkstyle/checkstyle/blob/master/config/import-control.xml#L10 to certain package/class.  As soon as we/you do refactoring to remove some class usage - it should be removed from config too to never let others easily introduce it back.","closed","miscellaneous,","romani","2016-09-07T00:16:45Z","2016-10-05T12:31:34Z"
"","3536","Checkstyle tests should not require internet","Since moving the import DTD to sourceforge, we have been getting intermittent 403 errors on PRs, master builds, and locally (for me personally). Example: https://travis-ci.org/checkstyle/checkstyle/jobs/174479836#L497 ```` checkstyle.checks.imports.ImportControlCheckTest.testTwoRegExp(ImportControlCheckTest.java:177) Caused by: java.lang.reflect.InvocationTargetException 	at com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheckTest.testTwoRegExp(ImportControlCheckTest.java:177) Caused by: org.apache.commons.beanutils.ConversionException: Unable to load /home/travis/build/checkstyle/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_two-re.xml 	at com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheckTest.testTwoRegExp(ImportControlCheckTest.java:177) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: unable to read file:/home/travis/build/checkstyle/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_two-re.xml 	at com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheckTest.testTwoRegExp(ImportControlCheckTest.java:177) Caused by: java.io.IOException: Server returned HTTP response code: 403 for URL: http://checkstyle.sourceforge.net/dtds/import_control_1_2.dtd 	at com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheckTest.testTwoRegExp(ImportControlCheckTest.java:177) ```` and `[ERROR] around Ant part ...... @ 7:47 in /home/travis/build/checkstyle/checkstyle/target/antrun/build-main.xml: cannot initialize module TreeWalker - Cannot set property 'file' to '/home/travis/build/checkstyle/checkstyle/config/import-control.xml' in module ImportControl: InvocationTargetException: Unable to load /home/travis/build/checkstyle/checkstyle/config/import-control.xml: unable to read file:/home/travis/build/checkstyle/checkstyle/config/import-control.xml: Server returned HTTP response code: 403 for URL: http://checkstyle.sourceforge.net/dtds/import_control_1_2.dtd`  We should either create our own proxy on tests and override connections to the internet (to simulate being online) and have an offline mode for DTD validation (or skip it entirely). The second will require changes to the CLI and the Ant task.","closed","miscellaneous,","rnveach","2016-11-09T22:53:06Z","2018-05-03T20:33:15Z"
"","3922","RightCurlyCheck: false positive with SAME and double brace map initializer","Similar to https://github.com/checkstyle/checkstyle/issues/3920 .  ```` $ cat TestClass.java public class TestClass {         java.util.Map map2 = new java.util.LinkedHashMap() {{             put(""Hello"", ""World"");             put(""first"", ""second"");             put(""polygene"", ""lubricants"");             put(""alpha"", ""betical"");}  //violation         }; }  $ cat TestConfig.xml                                                                                 $ java -jar checkstyle-7.6-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:6:37: '}' at column 37 should have line break before. [RightCurly] [ERROR] TestClass.java:8:1: '}' at column 1 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally). [RightCurly] Audit done. Checkstyle ends with 2 errors. ````  The first violation message is incorrect. If I put line break before '}' on line 6 ```java public class TestClass {         java.util.Map map2 = new java.util.LinkedHashMap() {{             put(""Hello"", ""World"");             put(""first"", ""second"");             put(""polygene"", ""lubricants"");             put(""alpha"", ""betical"");         }         }; } ``` there will be a violation: ``` [ERROR] TestClass.java:7:1: '}' at column 1 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally). [RightCurly] ```","closed","","MEZk","2017-03-04T21:37:56Z","2017-03-18T20:19:00Z"
"","3486","DetailAST should invalidate childCount cache","Similar to https://github.com/checkstyle/checkstyle/issues/3466#issue-179024433 and the existing issue described at https://github.com/checkstyle/checkstyle/issues/3466#issuecomment-250868051, we must erase the cache stored inside DetailAST between the non-comment trees and comment trees as the extra nodes being added make the cache values wrong.  The fix in the previous issue invalidated `branchTokenTypes` cache but it did not invalidate `childCount` which was also in issue's description. Since we also cache `childCount` and don't reset it on add/set children/siblings methods, it will keep count from non-comment trees into comment trees, as long as we don't call `setFirstChild` which is the only method to invalidate it currently. To avoid calling `setFirstChild`, issue can be seen with code samples like `public /* comment */ static void method () {}` where a comment/javadoc is between 2 other similar nodes.  In previous issue's fix, `getChildCount` was called on `METHOD_DEF` in UT while the comments are located as a child of `MODIFIERS` in input. So the UT in that fix isn't directed at the correct location to showcase the `getChildCount` issue.  Showcase of issue at: https://github.com/checkstyle/checkstyle/pull/3485#issuecomment-250883463","closed","approved,","rnveach","2016-10-01T11:51:07Z","2016-10-05T02:13:15Z"
"","3161","New check: Trailing comma in enum similar to array initializer","Similar to [ArrayTrailingComma](http://checkstyle.sourceforge.net/config_coding.html#ArrayTrailingComma) there should be a check for trailing commas in enum constants. A lot of enums are used to map to values from somewhere else and it might be necessary to adapt them often.  The check verifies that the last element of a multi-line enum constant definition has a comma:  Check ok:  ``` java enum MovieTypes {   GOOD,   BAD,   UGLY,   ; } ```  Check failed  ``` java enum ErrorMessages {   USER_DOES_NOT_EXIST,   INVALID_USER_PASS,   EVERYTHING_ELSE; } ```  I stumbled across this while [writing](http://kariem.github.io/2016/05/04/trailing-comma-java/) how to check for trailing commas in arrays and enums based on an article discussion JavaScript. ##","open","new module,","kariem","2016-05-07T16:48:29Z","2016-12-14T18:16:42Z"
"","3530","Ant: Cannot override default Checker","Similar to #3515, Ant hardcodes Checker and doesn't allow user to set custom RootModule. https://github.com/checkstyle/checkstyle/blob/fbf3f95c2273be23b966cba6e6ef89390a6fb020/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java#L422-L430","closed","new feature,","rnveach","2016-11-08T02:10:06Z","2017-01-28T22:54:37Z"
"","3325","RightCurly: Add support for ARRAY_INIT token type","Similar problem with LeftCurly was moved to #3424   $ cat ArrayInit.java  ``` java class ArrayInit {     String[] compact = {""value""}; // no violations -- want simple initializer to be compact      String[] wantCompacted =     {         ""value""}; // want simple initializer to be compact, but that may be a stretch for given config      String[] wantAddOrReorderAsOneLineChange =     {         ""value1"",         ""value2"",}; // VIOLATION -- want the closing brace of multi-line init to be on new line       // more examples using the more verbose form of array init:      String[] verboseButCompact = new String[] {""value""}; // no violations -- want simple initializer to be compact      String[] verboseButWantCompacted = new String[]     {         ""value""}; // want simple initializer to be compact, but that may be a stretch for given config      String[] verboseButWantBracesInDifferentPositions = new String[]     {         ""value1"",         ""value2"",}; // VIOLATION -- want the closing brace of multi-line init to be on new line } ```  $ cat config.xml  ``` xml                                                                                     ```  $ java -jar checkstyle-7.0-all.jar -c config.xml ArrayInit.java Starting audit... Audit done.  ---  Can ARRAY_INIT be added to the supported list of token types for RightCurly?  If supported, I could create a module like   ```         ```  to allow compact array initializers for simple cases and well-formed multi-line initializers when wrapped by the formatter.  That is, when wrapped we want to see:  ``` java String[] strings = {   ""one"",   ""two"",   ""three"", };  and  Arrays.asList(new String[] {   ""one"",   ""two"",   ""three"", }); ```  _I know Arrays.asList is variadic, but I wanted a familiar example to show passing an inline array._ ##","closed","","eric-milles","2016-06-28T16:51:38Z","2018-06-19T05:44:36Z"
"","3286","config: set -source for maven-javadoc-plugin to 1.8","Should be set for maven-javadoc-plugin as it blocks usage of Java 1.8 features. https://travis-ci.org/checkstyle/checkstyle/jobs/138544588#L464","closed","","MEZk","2016-06-18T08:35:50Z","2016-06-18T21:02:12Z"
"","3553","no blank line between import groups in google style","should be      in google_checks.xml  per https://google.github.io/styleguide/javaguide.html#s3.3-import-statements","closed","","elharo","2016-11-14T18:50:14Z","2016-11-14T20:45:12Z"
"","3177","6 tests in Checkstyle master branch fail at clean Ubuntu 14.04 Docker container (Java 8, Maven 3)","See more at https://groups.google.com/forum/#!topic/checkstyle-devel/MXmSM98XdfU  Here is the Dockerfile for Checkstyle master branch compilation inside Ubuntu 14.04 container (Java 8, Maven 3.3.9): https://gist.github.com/daniilyar/278fd9023f2a665134308eb07ac1f170  Maven build inside this container fails with (6 test failures):  ``` Failed tests:    CheckerTest.testDestroyCacheFileWithInvalidPath:399 Exception did not happen   MainTest.testExistingFilePlainOutputToFileWithoutReadAndRwPermissions System.exit has not been called.   MainTest.testExistingTargetFilePlainOutputToFileWithoutRwPermissions System.exit has not been called.   MainTest.testLoadPropertiesIoException:508 Exception was expected   PropertyCacheFileTest.testNonAccessibleDirectory:189 AccessDeniedException is expected since directory is readonly.   PropertyCacheFileTest.testNonAccessibleFile:73 FileNotFoundException is expected, since access to the file was denied! Tests in error:    CommitValidationTest.setUp:106->getCommitsToCheck:142 ? IllegalArgument One of...  Tests run: 1798, Failures: 6, Errors: 1, Skipped: 1 ```","closed","miscellaneous,","daniilyar","2016-05-14T13:28:34Z","2016-06-17T17:48:43Z"
"","3584","ImportControl: Deprecate 'url' property in favor of the 'file' property","See issue #3450 and PR #3583.  The `file` property of `ImportControlCheck` should now be used to load configuration from regular files, URLs and resources in the classpath.  In scope of this issue, we need to put deprecation annotation on setter and somehow mark it in xdoc documentation.   --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39535809-importcontrol-deprecate-url-property-in-favor-of-the-file-property?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","jochenvdv","2016-11-25T16:20:33Z","2016-11-29T19:02:21Z"
"","3191","Developers on Macs are hitting a problem due to tools.jar when using Checkstyle (not even when developing on/contributing to Checkstyle)","See https://lists.opendaylight.org/pipermail/odlparent-dev/2016-May/000321.html .. in a project using Checkstyle, we're seeing developers on Macs hitting a problem due to tools.jar:  ``` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.16:check (check-license) on project root: Execution check-license of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.16:check failed: Plugin org.apache.maven.plugins:maven-checkstyle-plugin:2.16 or one of its dependencies could not be resolved: Could not find artifact com.sun:tools:jar:1.7.0 at specified path /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/../lib/tools.jar -> [Help 1] ```  To me this seems a fairly major problem, do you agree? Note that appears simply when using Checkstyle as a normal dependency (of maven-checkstyle-plugin, but that's not the main point), and NOT just when developing on/contributing to Checkstyle's own code base (which would be minor, if none of you use Macs; I don't either!).  I'll just have a look at the checkstyle pom.xml and see if something could be done about this.  @romani would you potentially consider releasing a 6.16.x maintenance release with a fix, if I contribute one for master? The FLOSS project I'm involved in cannot easily upgrade to 6.19-SNAPSHOT just yet (we're held back because of eCS); and perhaps this fix would be useful for other users as well?","closed","","vorburger","2016-05-18T13:45:01Z","2016-05-19T14:34:09Z"
"","3193","Fix issue 3191 related to tools.jar problem when using Checkstyle on Mac","see https://github.com/checkstyle/checkstyle/issues/3191  Signed-off-by: Michael Vorburger mike@vorburger.ch","closed","","vorburger","2016-05-18T14:40:53Z","2016-05-19T14:34:27Z"
"","3578","ImportControl: Remove deprecated 'url' property","See #3450.  The `url` property for `ImportControlCheck` should be removed. The `file` property will be used to load files, URLs and resources instead. This will make it consistent with other external resource loaders.","closed","breaking compatibility,","jochenvdv","2016-11-24T15:52:06Z","2017-07-10T04:57:33Z"
"","3233","Resolve IntelijIdea inspection violations for java8","second step from #3229 .  commit to revert - https://github.com/checkstyle/checkstyle/commit/015fa7f3e7a58cb15e43577099616d372358217b commit to revert - 6c1a0e1f0cbe1b1f79267ee06385a74c93d21298  IntelijIdea violations:  ``` Class structure: Interface may be annotated @FunctionalInterface (9)  Java language level migration aids : Anonymous type can be replaced with lambda (Errors) (39) Anonymous type can be replaced with method reference (Errors) (1) Explicit type can be replaced with  (Errors) (17) foreach loop can be collapsed with stream api (Errors) (27)  Java language level migration aids Guava's functional primitives can be replaced by Java (17) ```","closed","miscellaneous,","romani","2016-05-30T13:25:12Z","2016-09-08T12:32:19Z"
"","3975","Issue #3954 MethodParamPadCheckTest input files replaced to methopara…","Second commit solves problems and all 7 out of 7 tests are passed","closed","","GitToasterhub","2017-03-10T16:38:25Z","2017-03-10T19:56:28Z"
"","3511","Refactoring of Scope class in API","scopes - https://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.3 ""public, protected, and private"" are called as ""access modifiers"" - https://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.6  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/Scope.java  contains ""access modifiers"" and scope level (anoninner). Two separate terms are in one class ....... and even in API class ... .  scope - http://checkstyle.sourceforge.net/property_types.html#scope Scope was added at far history, https://github.com/checkstyle/checkstyle/commit/17d3b314bbb0f23622b719c089c1b3ca1607c1da  TODO: 1) break API and make new enum/class - AccessModifier . That have only access modifiers. 2) Scope should be moved our of API and contain anoninner only. It might be used for other scopes in future or removed completely from sources to be util method `booelan isInAnnoiousInnerClass(ast)`  issue is good candidate for checkstyle8 version.    usage of Scope enum: ![image](https://user-images.githubusercontent.com/812984/72022567-a4e6f680-3225-11ea-9cf9-9eff42ef4258.png)","open","breaking compatibility,","romani","2016-10-23T00:25:29Z","2022-04-10T08:23:45Z"
"","3685","Refactiring for RightCurlyCheck.java","RightCurlyCheck.java  ``` final String violation;             if (shouldStartLine) {                 final String targetSourceLine = getLines()[rcurly.getLineNo() - 1];                 violation = validate(details, option, true, targetSourceLine);             }             else {                 violation = validate(details, option, false, """");             } ```  Validate method should be only one (no overloads), targetSourceLine is depended on shouldStartLine It should be also good to move this part of validation out of `valudate` method","closed","easy,","romani","2017-01-02T18:29:49Z","2017-03-13T03:29:13Z"
"","3854","AbstractJavadocCheck: more control over which javadocs to process","Right now when a Javadoc is found via `visitToken` for an `AbstractJavadocCheck`, [as long as it is a Javadoc comment and in the correct position](https://github.com/checkstyle/checkstyle/blob/0de913bf4d7bca3ddbbf1657d651370002536bf0/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java#L254-L255), it will be processed by the check.  The problem is if I want to create a new check that specifically looks at only methods, there is no way to override the parser to exclude non-methods. `visitToken` is declared `final`, which is the only way to intercept the parsing. [The xdoc examples also show the only way to process just methods is to do the work inside `visitJavadocToken`](http://checkstyle.sourceforge.net/writingjavadocchecks.html#Access_Java_AST_from_Javadoc_Check). Depending on the javdoc tokens being used and how many occurrences there are, this could be a lot of wasted CPU skipping unwanted Javadocs. Not to mention any wasted time just creating the Javadoc tree if this was the only check in the config.  IMO, I think we should make `isCorrectJavadocPosition` non-static and allow it to be overridden by the check implementation. We should rename it to something like `shouldProcessJavadoc` so it is clear this is how you control what javadocs to process. We should also show this in the xdoc, and show examples on how to check each specific member (class, method, field, etc.).","open","","rnveach","2017-02-23T15:15:49Z","2017-02-23T15:16:10Z"
"","3540","Support multi-file validation FileSet Modules in Checkstyle","Right now Checkstyle is single-file validation tool, with cache that heavily depends on this design pattern.  We need to find solution to support multi-file validation Checks.","open","hard,","romani","2016-11-10T20:24:05Z","2019-01-02T18:46:48Z"
"","3007","Issue #2973: removed unused FLOAT_SUFFIX from java.g","Rework of PR #2977. Issue #2973. Removed rule, left in token.","closed","","rnveach","2016-03-05T02:15:58Z","2016-03-05T23:12:59Z"
"","3404","Issue #3403: Improve German translation","Resolves #3403.  Note: I'm fixing both major and minor flaws to improve usability, partly even beyond the understandability of their english equivalent, which could and should be adressed separately.","closed","","caugner","2016-08-07T15:31:07Z","2016-08-08T04:20:26Z"
"","3150","minor: fixed ScopeUtils.isClassFieldDef checking for variables","requested from PR #3146  Regression of  all checks that call the changed method: http://rnveach.github.io/checkstyle/minor_3146/ No differences reported.","closed","","rnveach","2016-05-01T16:53:15Z","2016-05-03T01:46:00Z"
"","3173","new Check: SingleSpaceSeparator","Requested from https://github.com/spring-projects/spring-framework/pull/898#issuecomment-219041538  Implement check in CS: https://github.com/sevntu-checkstyle/sevntu.checkstyle/commit/0ebb67094362e2db9e927233aceb9e1133ed40db#diff-ebf8f89095ef0428ddd5e7e4975135b5  Author shared a python script for auto-fix of such violations: https://github.com/spring-projects/spring-framework/pull/898#issuecomment-150975260  **ATTENTION:** for sevntu-checkstyle users: there might be problem with loading of class by Checkstyle if both `checkstyle` and `sevntu-checkstyle` jars are used in validation. To resolve a problem please use fully qualified names in configurations, see fix at https://github.com/checkstyle/contribution/commit/232ad78f57f3b3adbdc9641b8dd043e9eb0abb80","closed","new feature,","rnveach","2016-05-13T14:35:17Z","2016-05-29T13:00:16Z"
"","3073","links to old releases in web are damaged","release notes page is too big - http://checkstyle.sourceforge.net/releasenotes.html  so we move all releases to http://checkstyle.sourceforge.net/releasenotes_old.html and break all existing links in web to release notes.  https://maven.apache.org/plugins/maven-checkstyle-plugin/history.html we need to find a way to keep links alive.  Example of bad link: http://checkstyle.sourceforge.net/releasenotes.html#Release_5.5  As second step we also need to move more more release notes to ""releasenotes_old.html"" and make ""Old releasenotes"" be more visually separated at releasenotes.html page ##","open","approved,","romani","2016-04-01T02:13:01Z","2016-12-14T18:16:50Z"
"","3142","Proper support for generics in visibility modifier check","Related to https://github.com/checkstyle/checkstyle/issues/61  Affects: VisibilityModifierCheck  Rationale: Current implementation is not strict enough and would allow to expose some mutable date by wrapping it into immutable class.  Requested: - Type of generics should be also checked against known immutable classes   - For example, `Optional keyword` or `ImmutableMap perfValues` or `ImmutableMap perfSeries` should be considered OK, while `ImmutableMap perfSeries` should not be considered as immutable field. - Currently if you add immutable class which happens to have generic type (like `java.util.Optional`) check allows you to create public fields with mutable type (although mutability is slightly restricted by container, i.e. `ImmutableSet` or `Optional`) - It will be nice to have TextArea with automatical word-wrapping instead of TextField in check's configuration window","closed","approved,","KTannenberg","2016-04-28T12:55:26Z","2016-06-10T17:38:45Z"
"","3678","RightCurly was misconfigured in google_checks.xml for do-while blocks","Regression in RightCurly from 6.19 to 7.0 , still present in 7.4. in do-while blocks, checkstyle demand while to be on new line. But this is against Google's style - https://google.github.io/styleguide/javaguide.html#s4.1.2-blocks-k-r-style , `Line break after the closing brace, only if that brace terminates a statement or terminates the body of a method, constructor, or named class. For example, there is no line break after the brace if it is followed by ELSE or a comma.`  ``` $ cat config.xml                                                        $ cat MyClass.java  public final class MyClass {     public void foo(String publicPar){       do {         // do smth       } while (publicPar != null);     } }  $ java -jar checkstyle-7.4-SNAPSHOT-all.jar -c config.xml MyClass.java  Starting audit... [WARN] /var/tmp/MyClass.java:5:7: '}' at column 7 should be alone on a line. [RightCurly] Audit done. rivanov@p5510:/var/tmp$ java -jar checkstyle-6.19-all.jar -c config.xml MyClass.java  Starting audit... Audit done. rivanov@p5510:/var/tmp$ java -jar checkstyle-7.0-all.jar -c config.xml MyClass.java  Starting audit... [WARN] /var/tmp/MyClass.java:5:7: '}' at column 7 should be alone on a line. [RightCurly] Audit done. ```  http://checkstyle.sourceforge.net/releasenotes.html#Release_7.0 caused by: https://github.com/checkstyle/checkstyle/issues/3090","closed","approved,","romani","2016-12-29T20:57:25Z","2016-12-30T16:13:48Z"
"","3072","Enforce EndOfLine symbols at the end of  all files in checkstyle repository","reason: http://checkstyle.sourceforge.net/config_misc.html#NewlineAtEndOfFile  I still see it Input files, mostlikely all other non-main files also have them.  I it is ok to create new checkstyle config to cover all files. ##","closed","medium,","romani","2016-03-29T16:41:16Z","2017-04-21T13:26:58Z"
"","3279","""NoExceptiontest - Checkstyle, sevntu-checkstyle"" should test chekcstyle's code from PR","Reason: After merge of https://github.com/checkstyle/checkstyle/pull/3260 , master build is failed.  Cause: https://github.com/checkstyle/checkstyle/blob/40a0b5dcf7f9b45ae98ddcb1dec6e9e7c4eec676/.travis.yml#L125 testing checkstyle sources from main repo, NOT from forked code, NOT from PR.  Unfortunately there is no variable in Travis that could give us branch at forked repo that is in PR.  So we need to update checkstyle-tester to support new format of tag to checkout - ""GITHUB-PR-XXXXX"" that will trigger special processing of checkout :   ``` git fetch origin +refs/pull/XXXXX/merge: git checkout -qf FETCH_HEAD ```  Some links: How github do checkout to pull request - https://travis-ci.org/checkstyle/checkstyle/jobs/138064317#L107 Validation of $TRAVIS_PULL_REQUEST - https://github.com/checkstyle/checkstyle/blob/master/.travis.yml#L336 All Travis variables - https://docs.travis-ci.com/user/environment-variables/ ##","closed","miscellaneous,","romani","2016-06-16T13:16:35Z","2019-09-26T15:26:26Z"
"","3653","Using the SPDX identifier for the license name","Pull #3653   SPDX is a standard for licenses - https://spdx.org/licenses/.","closed","miscellaneous,","reiz","2016-12-13T15:18:53Z","2017-01-07T18:09:51Z"
"","3278","Improve French translation for annotations warnings","Pull #3278: improve French translation for annotations warnings","closed","miscellaneous,","don-vip","2016-06-15T23:27:01Z","2016-06-17T00:18:21Z"
"","3773","remove functionality of Checker.setClassLoader and TreeWalker.setClassLoader","Problem is detected at #3750 .  functionality of `Checker.setClassLoader` and `TreeWalker.setClassLoader` should be completely removed from as it is required only for deprecated approach of class loading in deprecated JavadocMethodCheck implementation.  we can not remove it earlier:  - it is causing validation problems at JavadocMethodCheck (failed UTs) - it is used by eclipse-cs and maven plugin  So it is chekcstyle8 fix.  We can not easily re-implement JavadocMethodCheck due to non implemneted http://checkstyle.sourceforge.net/writingjavadocchecks.html#Boolean_flag_indicating_the_presence_of_unclosed_HTML_tags without this flag we will never pass regression testing.  Methods will be completely removed once maven-checkstyle-plugin stops its usage of it.","closed","breaking compatibility,","romani","2017-01-28T20:03:49Z","2020-08-18T12:05:17Z"
"","3673","Issue #3655: Fix NPE in NeedBraces on single line default stmt","Problem in #3655 was that isSingleLineDefault assumed that default stmt has slist. This commit fixes this by checking if slist exists.","closed","","liscju","2016-12-21T07:04:08Z","2016-12-31T01:36:59Z"
"","3662","Duplicated Checks in google_checks.xml config should have ""id""","problem described at checkstyle/sonar-checkstyle#3  all duplicate rules should got ``  This could result is suppressions mismatch as ""id"" of the Checks is changed. User suppressions need to be update to reference actual id of Check.","closed","approved,","romani","2016-12-16T19:48:11Z","2016-12-16T20:56:39Z"
"","3040","Make CLI option to print full parsing tree (java + comments + javadoc comments)","Print all possible nodes Checkstyle can process. Need to combine output of `--treeComments` and `--javadocTree` options.  Following option should be added: `-J, --treeWithJavadoc` - print Abstract Syntax Tree(AST) with Javadoc comment nodes of the checked file.  See #652","closed","new feature,","baratali","2016-03-17T13:36:11Z","2016-04-10T21:09:41Z"
"","3023","Localed UTs are failing at CheckstyleAntTaskTest.testXmlOutput","PR validation was passed - https://travis-ci.org/checkstyle/checkstyle/builds/114880282 , problem happen after merge - https://travis-ci.org/checkstyle/checkstyle/jobs/114900664#L783  ``` Failed tests:     CheckstyleAntTaskTest.testOmitIgnoredModules:212    CheckstyleAntTaskTest.testXmlOutput:302 expected:  Tests run: 1770, Failures: 2, Errors: 0, Skipped: 1 ```","closed","miscellaneous,","romani","2016-03-10T00:18:44Z","2016-03-10T15:57:02Z"
"","3707","PR validation for ""approved"" label does not work","PR validation for ""approved"" label does not work. In PR there is no requied variables that are defined in TRAVIS  ``` { ""message"": ""Bad credentials"", ""documentation_url"": ""https://developer.github.com/v3"" } jq: error: Cannot index object with number Messages from github:... Issue number: PR validation succeed. ```  todo: for PRs we need to send request without auth token (I hope we will not quickly run into limit of free requests). for master commit validation, auth token should be used it will help to catch accidental merge of unapproved issue.","open","CI,","romani","2017-01-10T02:39:23Z","2022-05-12T20:31:04Z"
"","3833","Issue #3831: fixed funny messages in messages_ja.properties","PR for #3831 .","closed","","satob","2017-02-15T04:34:33Z","2017-02-15T06:25:09Z"
"","3028","Issue #652: New CLI option to print Javadoc comment parse tree","Part of #652  New option was added `-j` or `--javadocTree`. Allows to print parse tree of the javadoc comment. Input file should contain only content of the javadoc comment (that is described in 'Command Line' web-page). Example. Input file:  ``` html  My {@code Class}  @see never ```  Output:  ``` JAVADOC -> \r\nMy {@code Class}\r\n\r\n@see never [0:0] |--HTML_ELEMENT -> \r\nMy {@code Class}\r\n [0:0] |   `--PARAGRAPH -> \r\nMy {@code Class}\r\n [0:0] |       |--P_TAG_OPEN ->  [0:0] |       |   |--OPEN -> < [0:0] |       |   |--P_HTML_TAG_NAME -> p [0:1] |       |   `--CLOSE -> > [0:2] |       |--NEWLINE -> \r\n [0:3] |       |--TEXT -> My  [1:0] |       |   |--CHAR -> M [1:0] |       |   |--CHAR -> y [1:1] |       |   `--WS ->   [1:2] |       |--JAVADOC_INLINE_TAG -> {@code Class} [1:3] |       |   |--JAVADOC_INLINE_TAG_START -> { [1:3] |       |   |--CODE_LITERAL -> @code [1:4] |       |   |--WS ->   [1:9] |       |   |--TEXT -> Class [1:10] |       |   |   |--CHAR -> C [1:10] |       |   |   |--CHAR -> l [1:11] |       |   |   |--CHAR -> a [1:12] |       |   |   |--CHAR -> s [1:13] |       |   |   `--CHAR -> s [1:14] |       |   `--JAVADOC_INLINE_TAG_END -> } [1:16] |       |--NEWLINE -> \r\n [1:17] |       `--P_TAG_CLOSE ->  [2:0] |           |--OPEN -> < [2:0] |           |--SLASH -> / [2:1] |           |--P_HTML_TAG_NAME -> p [2:2] |           `--CLOSE -> > [2:3] |--NEWLINE -> \r\n [2:4] |--JAVADOC_TAG -> @see never [3:0] |   |--SEE_LITERAL -> @see [3:0] |   |--WS ->   [3:4] |   `--REFERENCE -> never [3:5] |       `--PACKAGE -> never [3:5] `--EOF ->  [3:10] ```","closed","","baratali","2016-03-11T14:00:02Z","2016-03-17T13:20:46Z"
"","3459","Import:  Missing imported classes.","package com.puppycrawl.tools.checkstyle;  import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocLexer;// missing import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser;//missing  public class JavadocDetailNodeParser   --- ## Expexted: in com.puppycrawl.tools.checkstyle.grammars should exists javadoc.JavadocLexer and javadoc.JavadocParser (see import on the top), they are don't exists. ##","closed","","ATsurkanu","2016-09-22T13:39:44Z","2016-12-14T18:16:27Z"
"","3569","zh-cn ,,,,  cmd gbk encode","OS: Windows 7 Professional with Service Pack 1 Build 7601 x64 zh-cn  **the right result with 'utf-8' encode output** ![image](https://cloud.githubusercontent.com/assets/5050994/20468154/7a537f42-afce-11e6-8c1e-7f4be7efcaa0.png)  **but run it on Windows cmd.exe:** ![image](https://cloud.githubusercontent.com/assets/5050994/20468204/15338228-afcf-11e6-8897-8ea4cf7aa2a3.png) **use ""chcp 65001"" also don't fixed** ![image](https://cloud.githubusercontent.com/assets/5050994/20468182/de61d2d6-afce-11e6-8064-e36d9e457734.png)","open","","gMan1990","2016-11-20T19:18:54Z","2017-11-12T01:00:47Z"
"","3925","SummaryJavadoc: configuration to skip check for simple @return javadoc","Originally posted in #3908, it would be interesting to have a configuration option to skip the SummaryJavadoc check for certain fragments. Specifically, I'm interested in enabling this check but for trivial getters I want to allow just having a concise `@return blabla` javadoc:  ```java /**  * @return the category the article belongs to  */  public Category getCategory() {    return category;  } ```  I could imagine that this can be made configurable by having a whitelisted javadoc tags config (if the javadoc just has a `@return`, it's fine) or maybe a regex pattern may be provided (if javadoc comment is `^@return .*`, skip the check).","open","","ljacqu","2017-03-05T08:59:56Z","2017-03-05T16:54:02Z"
"","3025","java9: try structure is not parsable when only name is used","original source is from openjdk9 jdk9/src/java.base/windows/classes/java/io/FileDescriptor.java this file(FileDescriptor.java) does not use that structure of try in jdk7 and jdk8 sources. This is smth new from jdk9.  ``` /var/tmp $ java -jar checkstyle-6.17-SNAPSHOT-all.jar -c my_check.xml TestClass.java  Starting audit... /var/tmp/TestClass.java:4:20: expecting IDENT, found ')' Audit done.  /var/tmp $ cat TestClass.java  public class TestClass {    public void foo(){             final InputStream in;             try (in) { } finally { }    } }  /var/tmp $ cat my_check.xml                     ```  compilable only with java9, not compilable by java7 and java8  ``` $ JAVA_HOME=/usr/lib/jvm/jdk1.9.0_build_109/ $ PATH=$JAVA_HOME/bin:$PATH $ javac  checkstyle/checkstyle/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammars/java9/InputJava9TryWithResources.java $ $ javac TestClass.java  $ cat TestClass.java  public class TestClass {     public static class MyResource implements AutoCloseable {         @Override         public void close() throws Exception { }     }     public void foo() throws Exception {             final MyResource in = new MyResource();             final MyResource in1 = new MyResource();             try (in;in1) { } finally { }    } } ```  this is pure feature of jdk9 - https://bugs.openjdk.java.net/browse/JDK-7196163","closed","new feature,","romani","2016-03-10T17:41:36Z","2016-03-12T19:51:00Z"
"","3435","activate IntellijIdea inspection InterfaceMayBeAnnotatedFunctional","original discussion was at https://github.com/checkstyle/checkstyle/pull/3434#issuecomment-245462497  we need to review interfaces and confirm that they will stay functional.  https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html  > However, the compiler will treat any interface meeting the definition of a functional interface as a functional interface regardless of whether or not a FunctionalInterface annotation is present on the interface declaration.  so there is no rush to activate this inspection.  Interfaces in API part should be specially investigated, as we will not be able to revert changes in them easily.  Good task for Checkstyle 8.X releases. ##","closed","miscellaneous,","romani","2016-09-08T12:29:39Z","2017-07-27T13:54:05Z"
"","3379","Rule to enforce blank lines as wrap of class declaration","Oracle, IBM, Google, and Mozilla Java code often inserts a blank line between the opening curly brace of a class declaration and the class contents, as well as a blank line between the contents and the closing class curly brace. For example:  https://github.com/oracle/atg-build-tools/blob/master/atg-maven-plugin/src/main/java/com/oracle/atg/ateam/RunAssemblerMojo.java  Classes with no contents require no blank lines:  ``` public class SomeClass {} ```  Could Checkstyle please feature a rule that enforces n (0, 1, 2, ...) blank lines in this context?  There appears to be a rule for enforcing a blank line at the beginning of class declarations, but I can't find one to enforce a blank line at the end as well. ##","closed","","mcandre","2016-07-29T20:03:00Z","2022-01-14T12:04:36Z"
"","3708","Strive for 100% mutation coverage","Now that we implemented `pitest` in #3271, we should try to increase [the mutation coverage for our different checks](https://github.com/checkstyle/checkstyle/blob/fde083d175b6032b1bc9c9e08e01e109739ff820/pom.xml#L1473-L1784).  Currently, `header` package has the lowest percentage at 78%, followed by `metrics` package at 83%.  FYI: Mutation coverage means a test should prove a line of production code exists. Mutation fails if a line or production code is distorted but no unchanged tests fail. At least one test should fail if production code is changed somehow.  Attention: it is recommended to start with the most easy to fix cases to raise level close to 100%. Only as we reach 100% we could guaranty no leak in testing. It would be better ti finish packages that executed less in time make them 100% and group them in one profile.  To run report on `blocks` package (profiles are exists for all packages): `mvn clean verify -Ppitest-checks-blocks org.pitest:pitest-maven:mutationCoverage`  Current state: ``` $ grep -E ""pitest-checks|mutationThreshold"" pom.xml | sed -E ""s/(|)//g""       pitest-checks-blocks               97       pitest-checks-coding               93       pitest-checks-design               98       pitest-checks-header               78       pitest-checks-imports               94       pitest-checks-indentation               94       pitest-checks-javadoc               95       pitest-checks-metrics               83       pitest-checks-modifier               100       pitest-checks-naming               98       pitest-checks-regexp               93       pitest-checks-sizes               94       pitest-checks-whitespace               96 ```","closed","medium,","rnveach","2017-01-10T16:05:44Z","2018-12-17T14:11:48Z"
"","3408","Improve check messages","Note: This is a follow-up of PR #3404 in which I improved the German translation (and for which I have thoroughly read all messages not only in German, but also in English).  **Context**: Checkstyle displays warnings for occurrences in the checked code that don't fulfill the requirement of a check. These warnings are constructed from messages that are local to checks (and defined in [/src/main/resources/com/puppycrawl/tools/checkstyle/checks/](https://github.com/checkstyle/checkstyle/tree/master/src/main/resources/com/puppycrawl/tools/checkstyle/checks)). A message may have one or more parameters in order to better reflect the precise instance of a check violation.  **Problem**: The messages vary in the degree to which they satisfy certain desirable quality criteria: 1. **Understandability** – A user should be able to understand what is wrong about his code with as little previous knowledge as possible. 2. **Guidance** – A user should be able to understand what he needs to do in order to fix his code with as little further knowledge as possible. 3. **Accuracy** – The message should accurately reflect what the check verifies.  In general, it is also noteworthy to check when to use ""must"" vs ""should"" and ""must not"" vs ""should not"".  **Solution**: Messages should be improved where necessary and possible. An improvement can refer to: - Making a message **more concise** by removing superfluous information. - Making a message **more complete** by giving hints about background, consequence and/or fix. - Making a message **easier to understand** by framing it in a sentence. - Making a message **more accurate** by synchronizing with what the check actually/currently does. - Making a message **more specific** by introducing additional message parameters.  **Examples**: To give you an idea of what I'm talking about, here are some examples of messages that I reckon could be enhanced in order to significantly improve usability:  ``` properties # There could be one message per style. annotation.incorrect.style=Annotation style must be ''{0}''.  # This means: ""The last value of an annotation array element should not have a trailing comma."" annotation.trailing.comma.present=Annotation array values cannot contain trailing comma.  # This means: ""Always use @Foo() instead of @Foo for annotations"". annotation.parens.missing=Annotation must have closing parenthesis.  # This means: ""If you implement a custom #equals method, you should always override #equals(Object) [to avoid confusion]."" covariant.equals=covariant equals without overriding equals(java.lang.Object).  # This means: ""If you compare a String with a String literal, always put the literal on the left side of the equals comparison."" equals.avoid.null=String literal expressions should be on the left side of an equals comparison.  # This means: ""Always use the uppercase ""L"" when defining long values."" upperEll=Should use uppercase ''L''.  # This means: ""(Class Fan-Out Complexity) Class {2} depends on {0} other classes (max allowed is {1})."" classFanOutComplexity=Class Fan-Out Complexity is {0} (max allowed is {1}).  # This means: ""Method {2} has {0} Non Commenting Source Statements (NCSS) (max allowed is {1})."" ncss.method=NCSS for this method is {0} (max allowed is {1}). ... ```  **Proposal**: If you agree that the checkstyle messages could bear some overhaul, I would volunteer and start to assemble a list of suggestions in a commit (e.g. in a PR or in a fork branch), so that people can comment on it, before we make any preliminary or final decision.","closed","","caugner","2016-08-08T22:54:35Z","2016-08-18T14:13:28Z"
"","3885","FallThrough check doesn't handle infinite loops","None of the statement groups in this switch can complete normally, so checkstyle shouldn't warn about fall through.  ```java class T {   void main(int i) {     switch (i) {       case 1:         for (;;) {}       case 2:         while (true) {}       case 3:         do {         } while (true);       default:         break;     }   } } ```  [config](https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Agoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+FallThrough).  ``` java -jar checkstyle-7.6-all.jar -c google_checks.xml T.java Starting audit... [WARN] T.java:6:7: Fall through from previous branch of the switch statement. [FallThrough] [WARN] T.java:8:7: Fall through from previous branch of the switch statement. [FallThrough] [WARN] T.java:11:7: Fall through from previous branch of the switch statement. [FallThrough] Audit done. ```","open","google style,","cushon","2017-03-01T05:33:12Z","2020-03-12T13:52:18Z"
"","3814","NPathComplexity: clarify calculation for try-catch-finally and try-with-resources","No information at documentation about try-catch-finally and try-with-resources blocks but Checks is running on them.  http://checkstyle.sourceforge.net/config_metrics.html#NPathComplexity  current behavior: ``` $ cat config.xml                                                          $ cat Demo.java  public class Demo {   public void foo() {     try {       int i;     } catch (IllegalStateException | IllegalArgumentException ex) {     }   } }  $ java -jar checkstyle-7.4-all.jar -c config.xml Demo.java Starting audit... [WARN] /var/tmp/Demo.java:2:3: NPath Complexity is 2 (max allowed is 1). [NPathComplexity] Audit done. ```  TODO: 1) all users will be NOT happy with real calculation of all possible paths (the same problem with code coverage by UTs). With special option Try-catch should be calculated by simple formula as ""NP(try-range) + NP(catch-range) + 2"". So minimal Npath will be 2 is try and catch has no conditions inside. Multiple Exceptions in `catch` does not affect calculation. 2) Update code and documentation (make a note that it is not present in original Npath algorithm description). 3) add support for try-catch-finally -  ""NP(try-range) + NP(catch-range) + NP(finally-range) + 2"" 4) add support for try-with-resources  - the same as try-catch-finally formula.","open","approved,","romani","2017-02-10T01:06:40Z","2017-03-10T14:28:51Z"
"","3035","upgrade equalsverifier to version 2.0","new version is detected by versioneye.  ``` Failed tests:    LocalizedMessageTest.testEqualsAndHashCode:47 Recursive datastructure. Add prefab values for one of the following types: Map, ResourceBundle. For more information, go to: http://www.jqno.nl/equalsverifier/errormessages   SuppressElementTest.testEqualsAndHashCode:191 Significant fields: equals does not use fileRegexp, or it is stateless. For more information, go to: http://www.jqno.nl/equalsverifier/errormessages   SuppressionCommentFilterTest.testEqualsAndHashCodeOfTagClass:251 Significant fields: equals does not use tagCheckRegexp, or it is stateless. For more information, go to: http://www.jqno.nl/equalsverifier/errormessages   SuppressionFilterTest.testEqualsAndHashCode:57 Significant fields: equals does not use file, or it is stateless. For more information, go to: http://www.jqno.nl/equalsverifier/errormessages  Tests run: 1775, Failures: 4, Errors: 0, Skipped: 1 ```","closed","miscellaneous,","romani","2016-03-13T14:13:37Z","2016-03-21T00:34:36Z"
"","3219","CLI Javadoc tree printer doesn't show errors","myjavadoc.txt:  ```  ```  Output:  ``` git\checkstyle>java -jar target\checkstyle-6.18-SNAPSHOT-all.jar -j myjavadoc.txt  git\checkstyle> ``` ##","closed","approved,","baratali","2016-05-26T09:42:40Z","2017-05-03T16:26:19Z"
"","3331","AbstractFileSetCheck: Ability to limit checks to files within path","My use case is that I would like to be able to have separate checkstyle rules for my normal code and my test code. I use maven, so that code is under src/main/java, and src/test/java respectively.  Currently I can configure my build to run checkstyle twice... once for `src/main/java`, and once for `src/test/java` with separate checkstyle configuration files.    But, it would be nice to be able to have a single configuration file.  Especially, because checkstyle plugins for IDEs tend not to give the option to specify different checkstyle configurations for different folders within a module.  Also, when generating reports it would be nice to have just the one report coming out of checkstyle; instead of two reports as a result of running it twice.  It looks to me like the simplest way to achieve this would be to add a `folderPattern` property to `AbstractFileSetCheck`, which would contain a regex that each file's path would need to match. The if condition in `AbstractFileSetCheck.processFiltered()` would be changed to filter based on the `folderPattern` as well as the existing `fileExtensions` property.  Then I would be able to write something like:  ``` xml                                                          ```  I suggest adding it to `AbstractFileSetCheck` rather than `TreeWalker`, so that this could also be used on other `FileSetCheck`s. I am suggesting the name `folderPattern` and that it be a regex for consistency with the `RegexpOnFilename` check. ##","open","","ntdaley","2016-06-29T17:14:57Z","2016-12-14T18:16:59Z"
"","3300","whitespace after Array type when using a type annotation","My Method has the following signature:  `public  void setKeystorePassword(final char @NonNull [] aKeyStorePassword) ;`  Checkstyle now complains about ""NoWhitespaceAfter"" and ""'char' is followed by whitespace."".  Sadly, I think char@NonNull[] reads terribly ;) However, the meaning of `@NonNull char[] something` is different from `char @NonNull [] something` (the first meaning even is stupid, because a `char` cannot hold `null` values, whereas the array can.)  I don't see a good  method to allow configuration in this case. Is this case somehow missing?  ``` /var/tmp $ java -jar checkstyle-7.0-all.jar -c my_check.xml TestClass.java  Starting audit... [ERROR] /var/tmp/TestClass.java:2:29: 'char' is followed by whitespace. [NoWhitespaceAfter] Audit done. Checkstyle ends with 1 errors.  /var/tmp $ cat TestClass.java  public class TestClass {   public void foo(final char @NonNull [] param) { } }  /var/tmp $ cat my_check.xml                         ``` ##","closed","easy,","ctolkmit","2016-06-23T11:56:15Z","2017-09-12T17:41:11Z"
"","3552","Error:Execution failed for task ':app:checkstyle'. > Unable to create a Checker: configLocation{path}, classpath {null}.","My gradle file: ```groovy apply plugin: 'checkstyle' check.dependsOn 'checkstyle'  def configDir = ""${project.rootDir}/quality""  checkstyle {     toolVersion = '7.2' }  task checkstyle(type: Checkstyle) {     configFile file(""$configDir/checkstyle/checkstyle.xml"")     configProperties.checkstyleSuppressionsPath = file(""$configDir/checkstyle/suppressions.xml"").absolutePath     source 'src'     include '**/*.java'     exclude '**/gen/**'     classpath = files() } ```  I'm using this version of the google java style guide: https://github.com/checkstyle/checkstyle/commit/a1e1403df4478e161a1c9c5daf7607c362eca1f5  Gradle version: 3.3  checkstyle version 6.9 and lower: `Error:Execution failed for task ':app:checkstyle'. > Unable to create a Checker: cannot initialize module TreeWalker - Property 'scope' in module ParameterName does not exist, please check the documentation`  checkstyle version 6.10 and higher: `Error:Execution failed for task ':app:checkstyle'. > Unable to create a Checker: configLocation{path}, classpath {null}.`","closed","","SUPERCILEX","2016-11-14T06:37:55Z","2017-04-26T08:47:16Z"
"","3421","Issue #3381: add ""default"" to list of method modifiers","Moved ""default""  parameter to the right place, according to Google (and Oracle) guidelines","closed","","agcuda","2016-09-01T08:02:09Z","2016-09-01T08:58:56Z"
"","3971","Split and Organize Checkstyle inputs by Test for NoWhitespaceAfter #3931","Modified NoWhiteapceAfterCheckTest.java and moved its test files to subdir","closed","incomplete,","bansalayush","2017-03-10T05:54:40Z","2017-05-01T20:26:40Z"
"","3382","(minor) Comment Change","Minor comment fix in Main.java.","closed","","Mebibyte","2016-07-31T09:32:36Z","2016-08-02T14:24:00Z"
"","3956","StackOverflowError on lengthy if/else cascade","Minimal test case: http://odi.ch/download/issue83.tar.gz  Originally reported against the Sonar-Checkstyle plugin: https://github.com/checkstyle/sonar-checkstyle/issues/83","closed","","oglueck","2017-03-08T08:35:09Z","2017-03-08T13:40:11Z"
"","3384","Minor Code Style Fixes Found By Eclipse","Methods can be static Exceptions not actually thrown Unnecessary casts  No actual logic changed.","closed","","rnveach","2016-07-31T14:14:53Z","2016-08-02T14:21:51Z"
"","3831","messages_ja.properties contains funny (wrongly machine-translated) messages","messages_ja.properties in directories listed below contains some funny (wrongly machine-translated) messages.  - src/main/resources/com/puppycrawl/tools/checkstyle/checks/annotation/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/checks/blocks/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/checks/coding/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/checks/design/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/checks/imports/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/checks/indentation/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/checks/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/checks/metrics/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/checks/naming/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/checks/regexp/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/checks/sizes/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_ja.properties - src/main/resources/com/puppycrawl/tools/checkstyle/messages_ja.properties  For example: > final.parameter = パラメータ{0}最終的にする必要があります。  (reserved word ""final"" was wrongly translated to Japanese ""最終的"")  > trailing.comments = コメントを末尾に使用DON''T。  (maybe string ""Don''t"" wasn't handled propery in machine translation)  > properties.duplicate.property = 重複プロパティ ''{0}'' {1} の発生（S））。  (the message don't have beginning parenthesis, and plural ""s"" remains in the message (Japanese word don't have plural form))","closed","miscellaneous,","satob","2017-02-14T15:20:41Z","2017-02-15T06:25:57Z"
"","3858","Travis CI is always green even command return not zero exit code","master and PRs are affected: https://travis-ci.org/checkstyle/checkstyle/jobs/204781086#L301 https://travis-ci.org/checkstyle/checkstyle/jobs/204944791#L864","closed","miscellaneous,","romani","2017-02-24T14:01:19Z","2017-02-25T00:18:24Z"
"","3373","Travis","Mandatory to understand and do: 0) Issue you are tryining to fix/resolve has to have ""approved"" label. 1) Put in description of Pull Request reference to issue if it exists. Example: ""Issue: #XXXXXX"" 2) Commit message should adhere to the following rules:    a) Must match one of the following patterns:\n""       ^Issue #\d+: ._$       ^Pull #\d+: ._$       ^(minor|config|infra|doc|spelling): .*$    b) It contains only one line of text    c) Must not end with a period, space, or tab  To avoid multiple iterations of fixes and CIs failures, please read http://checkstyle.sourceforge.net/contributing.html  ATTENTION: We are not merging Pull Requests that not passing your CIs.  Thanks for reading, remove whole this message and type what you need.","closed","","azy2","2016-07-27T21:39:10Z","2016-07-27T21:39:17Z"
"","3979","field check and splits done for whitespaceAround","Mandatory to understand and do: 0) Issue you are trying to fix/resolve has to have ""approved"" label. 1) Put in description of Pull Request reference to issue if it exists. Example: ""Issue: #XXXXXX"" 2) Commit message should adhere to the following rules:    a) Must match one of the following patterns:\n""       ^Issue #\\d+: .*$       ^Pull #\\d+: .*$       ^(minor|config|infra|doc|spelling): .*$    b) It contains only one line of text    c) Must not end with a period, space, or tab    d) Commit message should be less than or equal to 200 characters  To avoid multiple iterations of fixes and CIs failures, please read http://checkstyle.sourceforge.net/contributing.html  ATTENTION: We are not merging Pull Requests that not passing our CIs, but we help to resole issues.  Thanks for reading, remove whole this message and type what you need.","closed","","nikshinde1996","2017-03-11T05:04:32Z","2017-03-11T05:27:38Z"
"","3746","Enforce pitest mutation coverage on whole code","Main point is to enforce pitest on checks - #3708  As we have 100% coverage, pitest could be enforced on whole code (utils, Checker, Treewalker, ....)","closed","easy,","romani","2017-01-21T19:40:12Z","2017-05-31T22:32:40Z"
"","3033","openjdk8/9 test code should be parseable by checkstyle","list of suppressions: https://github.com/checkstyle/contribution/blob/master/checkstyle-tester/projects-for-circle.properties#L6 due to problem of parsing files.  All parsing problems need to be grouped, reported as separate problems, all reported cases should be proved to be compiled by javac.  Exclude list should be minimized to list of folders/files that contain only non-compilable source by javac. ##","closed","miscellaneous,","romani","2016-03-12T19:54:24Z","2016-11-30T13:01:05Z"
"","3862","osx build on Travis are skipped by SKIP_CI=true, while on Linux it is SKIP_CI=false","Linux: https://travis-ci.org/checkstyle/checkstyle/jobs/205271902#L197 `SKIP_CI=false`  https://travis-ci.org/checkstyle/checkstyle/jobs/205271921#L101 `SKIP_CI=true`","closed","miscellaneous,","romani","2017-02-25T13:43:32Z","2017-02-25T14:53:44Z"
"","3777","property_types.html#access_modifiers link does not exists","link does not work http://checkstyle.sourceforge.net/property_types.html#access_modifiers","closed","miscellaneous,","romani","2017-01-30T00:25:01Z","2017-01-30T03:27:19Z"
"","3229","update checkstyle to jdk8 as runtime jdk","let change target jdk in pom.xml .... to java8","closed","breaking compatibility,","romani","2016-05-29T19:21:52Z","2016-06-26T19:27:02Z"
"","3657","skip unnecessary exception 'Severity not set, ignoring exception'","Launch any valildation with `-d`: ``` $ cat config.xml                                                                                                                 $ cat PackageDimensions.java public class PackageDimensions {    @SuppressWarnings(     {""unchecked"", ""deprecation""}   ) // violation   @Deprecated   private int height;    @SuppressWarnings(     {""unchecked"", ""deprecation""}   ) // no voilation   private int height2;    void foo () {     indentationOfBrace(       ""as"",       ""adsf""     ); // no violation   }    void indentationOfBrace(String v, String v2) {}  }  java -jar checkstyle-7.3-all.jar -d -c config.xml PackageDimensions.java ``` in result a lot of exception , one of them is : ``` Dec 14, 2016 5:02:56 PM com.puppycrawl.tools.checkstyle.ConfigurationLoader endElement FINE: Severity not set, ignoring exception com.puppycrawl.tools.checkstyle.api.CheckstyleException: missing key 'severity' in TreeWalker 	at com.puppycrawl.tools.checkstyle.DefaultConfiguration.getAttribute(DefaultConfiguration.java:68) 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader.endElement(ConfigurationLoader.java:479) 	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:609) 	at com.sun.org.apache.xerces.internal.impl.dtd.XMLNSDTDValidator.endNamespaceScope(XMLNSDTDValidator.java:266) 	at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator.handleEndElement(XMLDTDValidator.java:2005) 	at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator.endElement(XMLDTDValidator.java:879) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanEndElement(XMLDocumentFragmentScannerImpl.java:1782) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2967) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:602) 	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:112) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:505) 	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:841) 	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:770) 	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141) 	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1213) 	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:643) 	at com.puppycrawl.tools.checkstyle.api.AbstractLoader.parseInputSource(AbstractLoader.java:96) 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader.parseInputSource(ConfigurationLoader.java:152) 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:231) 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:183) 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:164) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:407) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174)  ```  reason https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java#L477 : ```                 // remove modules with severity ignore if these modules should                 // be omitted                 SeverityLevel level = null;                 try {                     final String severity = recentModule.getAttribute(SEVERITY);                     level = SeverityLevel.getInstance(severity);                 }                 catch (final CheckstyleException ex) {                     LOG.debug(""Severity not set, ignoring exception"", ex);                 } ```  catch is nonsense, logic is based on exception - BAD.  need to be refactored to validate that module has such attribute.","closed","approved,","romani","2016-12-15T01:18:03Z","2016-12-16T20:04:44Z"
"","3087","java9: workaround to skip modules parsing by generating empty tree","just a workaround for #3059 to let us parse(do not crash) java9 sources.","closed","","romani","2016-04-09T13:02:04Z","2016-04-22T13:05:03Z"
"","3183","JavadocVariable doesn't report missing comment when excludeScope=anoninner","JavadocVariable - https://checkstyle.org/config_javadoc.html#JavadocVariable   does not report missing comments on member variables in a standard class,  irrespective of scope, when excludeScope=""anoninner"".   config.xml:  ```                                                              ```  TestClass.java:  ``` package test;  /** Class for testing checkstyle. */ public class TestClass {      private String key;      public TestClass() {     } } ```  `$ java -jar checkstyle-6.18-all.jar -c config.xml TestClass.java` Actual output:  ``` Starting audit... Audit done. ```  Expected output:  ``` Starting audit... [ERROR] C:\checkstyle\TestClass.java:6:9: Missing a Javadoc comment [JavadocVariable] Audit done. Checkstyle ends with 1 errors. ``` ##","open","easy,","edrandall","2016-05-17T11:59:08Z","2021-02-15T00:46:32Z"
"","3157","UnusedImports: value javadoc tag does not reference imports","Javadoc `{@value}` tag can reference static constants and makes constant value appear in the generated javadoc. Constant can be referenced either by fully qualified name `{@value java.util.Calendar#MONTH}` or by relative name `{@value Calendar#MONTH}` when corresponding import is present `import java.util.Calendar;`.  ``` $ javac InputUnusedImportWithValueTag.java $ cat InputUnusedImportWithValueTag.java import java.util.Calendar; // import is used in javadoc {@value}  public class InputUnusedImportWithValueTag {      /**      * Method determines current month as for {@value Calendar#MONTH}.      *      * @return index of the current month.      */     public int currentMonth() {         return 1;     } } $ cat config.xml                             $ java -jar checkstyle-6.18-all.jar -c config.xml InputUnusedImportWithValueTag.java Starting audit... [ERROR] InputUnusedImportWithValueTag.java:1:8: Unused import - java.util.Calendar. [UnusedImports] Audit done. Checkstyle ends with 1 errors. ```  I'd be happy to contribute and fix this issue. Tentative fix: https://github.com/lutovich/checkstyle/commit/25c5b4e5060d8de22d0d12a121960e69d4bdf746. Please let me know if my help is needed or PR should be created from this branch.  Thanks!","closed","javadoc,","lutovich","2016-05-05T12:17:09Z","2016-05-05T16:15:42Z"
"","3603","RightCurly with ""alone"" option and ""LITERAL_DO"" token doesn't raise a violation for empty do block","javac Main.java  No output  cat Main.java  ```java public class Main{  	public static void main(String[] args){ 		do{ 		}while(System.currentTimeMillis() < 0); 	}  } ``` cat config.xml  ```xml     	  	 		 			 			 		 	  ```  java -jar checkstyle-7.3-all.jar -c config.xml Main.java   ``` Starting audit... Audit done. ```  I expect the audit to raise a violation as the `while` is on the same line as the `}`. This is working correctly when the do block is not empty.","closed","","guillaumecle","2016-11-30T20:01:28Z","2017-02-06T22:58:16Z"
"","3472","Add METHOD_REF to the list of valid tokens for OperatorCheck","Java 8 introduces the new ""Method reference"" (::) operator. It is treated e.g. by the Google Style Guide as a ""non-assignment operator"" and it [says](https://google.github.io/styleguide/javaguide.html#s4.5.1-line-wrapping-where-to-break) that in case of line wrap, the line break should occur before that symbol.  OperatorWrap should accept METHOD_REF in the list of valid tokens, e.g.:  ```                                                 ```","closed","approved,","agcuda","2016-09-28T13:19:07Z","2016-10-08T14:44:03Z"
"","3710","new Check: ExceptionNameCheck","It would be nice  to have a check for exception naming, i.e. classes that extends ``^.*Exception$``  has suffix ``Exception``.","open","new module,","jiri-pejchal","2017-01-11T17:52:34Z","2017-01-12T13:51:16Z"
"","3012","Add New Check: GenericDiamond","It would be good to check that developers use Generic diamond operator instead of mentioning types. E.g.: `Pair p1 = new Pair(1, ""apple"");` instead of `Pair p1 = new Pair(1, ""apple"");`","closed","","ychulovskyy","2016-03-07T09:31:08Z","2016-03-07T12:22:47Z"
"","3841","Pull #3841: add allowEmptyCatches parameter to WhitespaceAroundCheck","It should be an option to disable checking whitespace around empty catch block because:  ```java try {  sth.... } catch (RuntimeException ex) {} ```  is a common pattern to explicitly suppress exceptions.","closed","new feature,","liscju","2017-02-18T15:15:23Z","2017-02-20T16:48:39Z"
"","3561","document isCommentNodesRequired method in xdoc","It is required to explain users how to show comments in AST Tree.   --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39340373-document-iscommentnodesrequired-method-in-xdoc?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","romani","2016-11-18T01:25:09Z","2016-11-19T22:08:55Z"
"","3044","config: dsm-maven-plugin has been updated to 2.1.4","It contains fix for vertical text in report","closed","","sabaka","2016-03-18T23:37:31Z","2016-03-18T23:57:56Z"
"","3045","config: dsm-maven-plugin has been updated","It contains fix for vertical text","closed","","sabaka","2016-03-19T00:00:16Z","2016-03-19T00:50:42Z"
"","3952","Issue #3943: Add examples for xdoc for ArrayTrailingComma","Issue: https://github.com/checkstyle/checkstyle/issues/3943","closed","","Pedro12909","2017-03-07T15:17:52Z","2017-03-09T09:29:03Z"
"","3581","Issue #3577: ImportOrder checkstyle_checks.xml does not have separate…","Issue: [#3577](https://github.com/checkstyle/checkstyle/issues/3577)   Fixed both problems","closed","","linelect","2016-11-24T19:27:45Z","2016-11-25T05:06:34Z"
"","3586","Issue #2143: Check that import groups aren't separated internally","Issue: [#2143](https://github.com/checkstyle/checkstyle/issues/2143)  Add new check, and it give a lot of ""Redundant separation"" errors, fixed.","closed","","linelect","2016-11-26T16:59:28Z","2016-11-28T23:55:49Z"
"","3916","Issue #3910: CommitValidationTest: add character limit to line","Issue: #3910","closed","","sagar-shah94","2017-03-04T15:46:59Z","2017-03-08T18:29:18Z"
"","3926","Issue #3908: SummaryJavadoc need special processing of inheritDoc tag","Issue: #3908","closed","","sagar-shah94","2017-03-05T09:10:52Z","2017-03-25T13:44:19Z"
"","3914","Issue #3906: update documentation for usage of ""period"" property at S…","Issue: #3906","closed","","sagar-shah94","2017-03-04T15:02:04Z","2017-03-07T01:49:32Z"
"","3915","Issue #3904: Split and Organize Checkstyle inputs by Test for Separat…","Issue: #3904","closed","","sagar-shah94","2017-03-04T15:36:14Z","2017-03-09T01:46:33Z"
"","3998","Issue #3902: Formatting of code chunks in html documentation (linewrap or scrolling)","Issue: #3902","closed","","sagar-shah94","2017-03-13T15:33:30Z","2017-04-09T12:44:13Z"
"","3982","Issue #3898: Field check and splits done for whitespaceAround","Issue: #3898","closed","","nikshinde1996","2017-03-11T09:53:28Z","2017-03-12T08:02:25Z"
"","3901","Issue #3892: Added TokenTypes.STATIC_IMPORT in NoLineWrapCheck","Issue: #3892","closed","","kukreja-vikramaditya","2017-03-03T08:09:24Z","2017-03-19T18:40:47Z"
"","3703","Issue #3670: add pgjdbc project at NoErrorTest group of tests","Issue: #3670","closed","","romani","2017-01-09T21:16:31Z","2017-01-10T02:41:10Z"
"","3944","Issue 3574: Move DetailAST log away from AbstractViolationReporter","Issue: #3574","closed","","sagar-shah94","2017-03-06T20:39:51Z","2017-03-06T21:06:42Z"
"","3480","Issue #3473: ParameterNameCheck: new scope and excludeScope properties","Issue: #3473   Add scope and excludeScope properties to ParameterNameCheck  Issue #3381 should make the warnings at the following lines disappear: - [63:24](https://github.com/checkstyle/checkstyle/pull/3480/files#diff-a0d5f5022546877d69441fab461bfd64R63) - [77:44](https://github.com/checkstyle/checkstyle/pull/3480/files#diff-a0d5f5022546877d69441fab461bfd64R77)","closed","","agcuda","2016-09-29T15:04:18Z","2016-11-05T23:32:20Z"
"","3928","Issue #3437: Added property of directory mismatch for PackageDeclaration","Issue: #3437","closed","","kukreja-vikramaditya","2017-03-05T12:26:29Z","2017-03-16T03:09:40Z"
"","3429","YOU --> YOUR","Issue: #3428","closed","","elharo","2016-09-05T14:28:23Z","2016-09-06T20:00:38Z"
"","3370","Issue #3369: Changed 2 tests to not make assumptions about the order …","Issue: #3369   One way to remove the assumption the code is making is to simply sort the arrays before asserting that they are equal. This guarantees they will be in the same order.","closed","","azy2","2016-07-25T22:26:50Z","2016-07-26T04:18:40Z"
"","3253","Issue #3229: update to java8","Issue: #3229","closed","","romani","2016-06-07T13:04:54Z","2016-06-09T12:49:25Z"
"","3249","Issue #3229: update to java8","Issue: #3229","closed","","romani","2016-06-06T13:22:50Z","2016-06-07T13:05:13Z"
"","3248","Issue #3229: update to java8","Issue: #3229","closed","","romani","2016-06-06T13:13:56Z","2016-06-06T13:22:12Z"
"","3231","Issue #3229: update to java8","Issue: #3229","closed","","romani","2016-05-29T23:26:26Z","2016-06-06T13:23:40Z"
"","3111","Issue 3000","Issue, and lucky number, #3000   Expanded test again to find all and ONLY module/check messages. Only one not found message required an override since it was an exception message. We may want to think of naming our exception messages to a specific formatting so we can automatically pick them up like our normal messages.  Split test method into 2 to cut down on cyclomatic complexity issue flagged.","closed","","rnveach","2016-04-16T13:35:05Z","2016-04-18T13:18:37Z"
"","3953","Issue #3951: SeparatorWrap add support for method ref","Issue https://github.com/checkstyle/checkstyle/issues/3951","closed","","Pedro12909","2017-03-07T17:13:57Z","2017-03-09T22:33:25Z"
"","3805","Issue #3718: Add varargs support for NoWhitespaceBefore","Issue https://github.com/checkstyle/checkstyle/issues/3718","closed","","robertpainsi","2017-02-07T14:12:19Z","2017-02-11T11:51:16Z"
"","3674","Issue #3625:  added more examples to NoLineWrap","Issue 3625:  Added example to good cases and bad cases of line-wrapping","closed","","tambren","2016-12-21T22:57:56Z","2017-01-04T03:21:51Z"
"","3400","Issue #977: Extend xdocs for SuppressCommentFilter and SuppressWithNearbyCommentFilter","issue #977","closed","","MEZk","2016-08-06T09:53:06Z","2016-09-08T13:30:39Z"
"","3785","Issue #56: fix NPathComplexityCheck","Issue #56  Continuation of Pull #2914 .","closed","","kazachka","2017-02-01T18:30:40Z","2017-04-19T21:18:15Z"
"","3963","Issue #3962: Use try-with-resources to fix leaking unclosed InputStream","Issue #3962  This PR does fix the leaking file resource but I was unable to write a test to satisfy the coverage requirements.   I am submitting this to show what I tried to do and request help on how to fix the drop in coverage.  Thanks! Giorgos","closed","","gaganis","2017-03-08T22:08:42Z","2017-03-22T14:20:22Z"
"","3964","Issue #3958: Modified GenericWhitespaceCheckTest.java and moved its i…","Issue #3958","closed","","subkrish","2017-03-09T08:45:23Z","2017-04-04T03:16:52Z"
"","3983","Issue #3954: MethodParamPadCheck input files split","Issue #3954 Split and orginise inputs by MethodParamPad Test.","closed","","GitToasterhub","2017-03-11T14:08:36Z","2017-03-18T15:36:40Z"
"","3977","Issue #3954 MethodParamPadCheckTest input files splited","Issue #3954 created new methodparampad directory.Input files of MethodParamPadCheckTest moved to there.","closed","","GitToasterhub","2017-03-10T20:07:22Z","2017-03-11T14:11:12Z"
"","3967","Issue #3950: Added support for method reference operator","Issue #3950 Added support for method reference operator.","closed","","surajumang","2017-03-09T14:55:58Z","2018-04-01T04:23:13Z"
"","3911","Issue #3910: CommitValidationTest: add character limit to line","Issue #3910","closed","","sagar-shah94","2017-03-04T10:34:49Z","2017-03-04T14:08:44Z"
"","3912","Issue #3902: Fixed formatting issue in documentation","Issue #3902","closed","","sagar-shah94","2017-03-04T11:12:07Z","2017-03-13T15:27:42Z"
"","3905","Issue #3900: Split and Organize Checkstyle inputs by Test for TypecastParenPad","Issue #3900 : Modified TypecastParenPadCheckTest.java to accommodate for the change in the location of test-resources the corresponding tests depend upon. The test-resources for those tests now reside at src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPad. Also the corresponding test-resources had to be modified accordingly to overcome having duplicate classes","closed","","voidfist","2017-03-03T18:09:06Z","2017-03-05T01:20:17Z"
"","3984","Issue #3898: Field check and splits done for whitespaceAround","Issue #3898","closed","incomplete,","nikshinde1996","2017-03-11T16:24:39Z","2017-05-01T20:26:34Z"
"","3890","Issue #3883: Added a new section Tool to print Java treestructure to …","Issue #3883","closed","","sagar-shah94","2017-03-01T19:50:48Z","2017-03-03T19:42:43Z"
"","3887","Issue #3850: Fixed ""'typecast' is not followed by whitespace"" for multiline cast.","Issue #3850   Diff: https://soon-checkstyle-diffs.github.io/","closed","","soon","2017-03-01T12:20:57Z","2017-03-03T15:54:22Z"
"","3853","Issue #3843: Add check for missing classes in Cobertura coverage report","Issue #3843 Added check for missing classes in Cobertura coverage report","closed","","MEZk","2017-02-23T12:14:45Z","2017-03-04T08:30:59Z"
"","3918","Issue #3839 : EmptyBlock: can't get violation from case token","Issue #3839 : Added special checks in EmptyBlockCheck.java for LITERAL_CASE to detect related empty blocks.","closed","","voidfist","2017-03-04T20:03:25Z","2017-04-05T15:41:02Z"
"","3823","Issue #3818: skip travis deploy phase if changes in minor files or ot…","Issue #3818","closed","","romani","2017-02-13T00:05:25Z","2017-02-13T02:23:12Z"
"","3822","Issue #3818: skip travis build if minor files or other CI files are c…","Issue #3818","closed","","romani","2017-02-12T14:41:16Z","2017-02-12T15:04:22Z"
"","3806","Issue #3803: fixed catch indentation wrapping","Issue #3803   The `true`/`false` change tells the method if indentation should be increased because of line wrapping.  Regression: http://rveach.no-ip.org/checkstyle/regression/reports/190/  Only one difference in openjdk9, which I assume the reason it is there is because the `try` in not indented correct from the lambda.","closed","","rnveach","2017-02-08T00:37:22Z","2017-02-08T22:38:21Z"
"","3825","Issue #3803: added new case for if and or operator for IndentationCheck","Issue #3803","closed","","rnveach","2017-02-13T15:16:37Z","2017-02-16T12:11:28Z"
"","3811","Issue #3800: Typo in website documentation for JavadocMethod","Issue #3800","closed","","romani","2017-02-09T17:15:31Z","2017-02-09T20:44:28Z"
"","3813","Issue #3798: move some travis tasks to wercker","Issue #3798","closed","","romani","2017-02-09T23:40:50Z","2017-02-10T00:37:51Z"
"","3809","Issue #3797: fix default and acceptable tokens for NPathComplexityCheck","Issue #3797","closed","","kazachka","2017-02-08T20:48:55Z","2017-02-09T20:57:05Z"
"","3794","Issue #3790: Add the Hibernate Search project to the Checkstyle CI","Issue #3790","closed","","romani","2017-02-03T21:26:13Z","2017-02-03T21:45:52Z"
"","3781","Issue #3778: show exception when failed to instantiate class","Issue #3778","closed","","rnveach","2017-01-30T23:59:22Z","2017-02-01T21:18:18Z"
"","3780","Issue #3776: fixed try-resource in RightCurlyCheck","Issue #3776","closed","","rnveach","2017-01-30T20:30:58Z","2017-02-01T21:16:55Z"
"","3772","Issue #3771: fixed in NPE in cache for HeaderCheck","Issue #3771","closed","","rnveach","2017-01-28T18:48:22Z","2017-01-28T19:59:27Z"
"","3860","Issue #3770: extending OverloadMethodsDeclarationOrderCheck to group by modifiers…","Issue #3770: extending OverloadMethodsDeclarationOrderCheck to support user defined grouping by method modifiers","closed","incomplete,","ilanKeshet","2017-02-25T06:45:40Z","2017-03-28T16:08:13Z"
"","3765","Issue #3764: removed garbage placed in RightCurlyCheck's rcurly","Issue #3764","closed","","rnveach","2017-01-27T18:27:33Z","2017-01-27T20:11:40Z"
"","3856","Issue #3763: Try to avoid non-jdk runtime exceptions in code","Issue #3763","closed","","Vladlis","2017-02-24T12:05:05Z","2017-02-27T19:32:02Z"
"","3768","Issue #3753: updated reason for no NeedBracesCheck on lambda","Issue #3753","closed","","rnveach","2017-01-28T01:03:27Z","2017-01-28T03:33:49Z"
"","3828","Issue #3751: added assert literal to checkstyle illegal token","Issue #3751  Just adding the token","closed","","rnveach","2017-02-13T21:16:05Z","2017-02-16T12:10:28Z"
"","3824","Issue #3749: updated reason for google's OperatorWrapCheck config","Issue #3749  Just updated reason. All examples already existed at https://github.com/checkstyle/checkstyle/blob/e307efd92b98c19c879db9b0ea3d20bc4460a532/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputOperatorWrap.java#L314-L357","closed","","rnveach","2017-02-13T13:26:33Z","2017-02-16T12:11:42Z"
"","3840","Issue #3748: updated reason for google's EmptyBlockCheck config","Issue #3748","closed","","rnveach","2017-02-17T22:51:30Z","2017-02-18T01:25:03Z"
"","3743","Issue #3740: verify all tokens are used in google config","Issue #3740  Just added the test and the overrides. Split the test from the previous issue into a common method so both configs can use it.","closed","","rnveach","2017-01-19T15:35:59Z","2017-01-24T16:15:06Z"
"","3816","Issue #3736: Clean up import control configuration","Issue #3736","closed","","jochenvdv","2017-02-10T19:18:49Z","2017-02-13T03:37:50Z"
"","3829","Issue #3735: added lambdas to NeedBraces for checkstyle config","Issue #3735  Are we sure we are ok with `allowSingleLineStatement`? This means no braces when it is a single line. We still require braces for if statements even if it is small.","closed","","rnveach","2017-02-13T21:39:59Z","2017-02-16T14:18:10Z"
"","3737","Issue #3733: Modify indent check to handle multiple, stacked annotations","Issue #3733  checkAnnotationIndentation has been modified to check one annotation at a time, and recurse to handle additional annotations.","closed","","bamapookie","2017-01-18T16:32:55Z","2017-02-15T16:11:40Z"
"","3734","Issue #3732: fix NPE for Java 8's 'receiver parameter'","Issue #3732","closed","","maggu2810","2017-01-17T20:15:37Z","2017-04-22T20:42:49Z"
"","3884","Issue #3731: expand documentation on METHOD_REF token","Issue #3731   @romani  I ran a GUI to show the AST of my example code successfully by following the [docs](http://checkstyle.sourceforge.net/writingchecks.html#The_Checkstyle_SDK_Gui) and write a example depends on what the tree shown by GUI window.  One thing I am confused is that the I didn't find the `DOUBLE_COLON ` type in the tree which shown by GUI, but there is a `@see #DOUBLE_COLON` in original code. Did I miss anything? Or there should be no `DOUBLE_COLON` actually?","closed","","Luolc","2017-02-28T17:59:12Z","2017-03-03T00:55:27Z"
"","3838","Issue #3729: Reevaluate tokens in IllegalTokenText","Issue #3729","closed","","Vladlis","2017-02-16T21:36:25Z","2017-02-21T21:03:15Z"
"","3827","Issue #3721: expanded message and documentation AbbreviationAsWordInName","Issue #3721","closed","","rnveach","2017-02-13T16:53:17Z","2017-02-17T22:08:52Z"
"","3723","Issue #3720: verify all tokens are used in checkstyle config","Issue #3720   @romani  Issue is not approved so code is more a demonstration. Since there was also some reservation about a UT of this kind, I didn't add all overrides. Please approve issue if you want me to finish this.  The test uses our configuration loader to read and process the configuration file.  `TOKENS_IN_CONFIG_TO_IGNORE` will specify all tokens that we do not want defined directly in our config. `NoWhitespaceBefore` was added for demonstration but it's value is valid as we don't have those used in our config.  If we want, we can add this to all configurations (google and sun).  Eventually I think we should add more support to the configurations to allow writing these back to files for fully dynamic testing in PRs. Sevntu's CI has a perfect example of where that could be used.","closed","","rnveach","2017-01-12T23:16:28Z","2017-01-18T18:27:11Z"
"","3726","Issue #3708: increased mutation for naming package to 100%","Issue #3708  Just happened to notice this when looking at the other issue. Couldn't have started with an easier fix than this. :)","closed","","rnveach","2017-01-14T14:25:17Z","2017-01-14T15:11:29Z"
"","3706","Issue #3704: checker exception message should obey config severity","Issue #3704","closed","","rnveach","2017-01-09T22:44:16Z","2017-01-11T17:45:14Z"
"","3826","Issue #3701: removed backspace from google's IllegalTokenText","Issue #3701  Message is not updated as nothing has been given yet.","closed","","rnveach","2017-02-13T15:27:39Z","2017-02-16T14:21:07Z"
"","3895","Issue #3685: Refactoring for RightCurlyCheck.java","Issue #3685","closed","","sagar-shah94","2017-03-02T09:11:31Z","2017-03-13T03:28:25Z"
"","3684","Issue #3683: add to CI test permissions on all files","Issue #3683","closed","","MaksimP","2017-01-01T15:46:50Z","2017-01-05T01:31:20Z"
"","3688","Issue #3681: fixed NPE in RightCurly when do has no curlies","Issue #3681","closed","","rnveach","2017-01-05T02:16:21Z","2017-01-05T13:47:35Z"
"","3668","Issue #3667: fixed documentation and tests for checkstyle modules","Issue #3667  Most changes are in `CheckUtil`. Other changes are name corrections, or test corrections since we are now pulling in all modules. Any specific overrides in tests were commented.  `CompareTreesWithComments` was picked up as a module, but it is in test and we are not using it anywhere. So I just deleted it.","closed","","rnveach","2016-12-19T16:02:19Z","2016-12-20T00:43:52Z"
"","3687","Issue #3664: verified all types of checks are on checks.xml","Issue #3664  Test was re-written from scratch. Original test scanned files and folders, new test uses the common utility that scans the classpath and checks class inheritance. `getSimpleNames` was moved to utility class so multiple classes could make use of it.  New section is called `Non-Standard Checks`. 2 known non-standard checks were added to this section. One was already listed in standard section so it was just moved.","closed","","rnveach","2017-01-05T00:45:22Z","2017-01-05T17:02:10Z"
"","3663","Issue #3662: Duplicated Checks in google_checks.xml config should hav…","Issue #3662","closed","","romani","2016-12-16T19:56:38Z","2016-12-16T20:56:18Z"
"","3658","Issue #3657: skip unnecessary exception 'Severity not set, ignoring e…","Issue #3657","closed","","romani","2016-12-15T04:55:41Z","2016-12-16T20:03:32Z"
"","3647","Issue #3632: move NoExceptionTest items to travis.sh","Issue #3632","closed","","romani","2016-12-12T00:24:54Z","2016-12-12T01:04:37Z"
"","3646","Issue #3632 bunch of configs","Issue #3632","closed","","romani","2016-12-11T23:50:03Z","2016-12-12T00:22:33Z"
"","3641","Issue #3632: pr description validation is moved to shell script","Issue #3632","closed","","romani","2016-12-11T13:57:56Z","2016-12-11T14:19:07Z"
"","3636","Issue #3632: releasenotes generation was moved to separate shell file","Issue #3632","closed","","romani","2016-12-10T14:03:34Z","2016-12-10T14:46:21Z"
"","3635","Issue #3632: releasenotes generation was moved to separate shell file","Issue #3632","closed","","romani","2016-12-10T00:41:09Z","2016-12-10T14:03:44Z"
"","3637","Issue #3628: usage of xmlstarlet instead of grep","Issue #3628","closed","","romani","2016-12-10T14:12:46Z","2016-12-10T14:49:15Z"
"","3634","Issue #3628: create validation for missing sevntu checks","Issue #3628","closed","","romani","2016-12-10T00:02:00Z","2016-12-10T00:21:17Z"
"","3630","Issue #3628: create validation for missing sevntu checks","Issue #3628","closed","","romani","2016-12-09T20:38:47Z","2016-12-09T23:07:23Z"
"","3651","Issue #3622: expanded and fixed documentation for checker and treewalker","Issue #3622  `""TreeWalker.upChild""` is because bean utils thinks ***set**upChild* is a setter method. `-        else if (AbstractFileSetCheck.class.isAssignableFrom(clss)) {` is because TreeWalker has a parent module as well as is a file set check.","closed","","rnveach","2016-12-12T18:57:27Z","2016-12-12T20:49:20Z"
"","3621","Issue #3617: make FinalLocalVariable not check multi-catch vars","Issue #3617","closed","","liscju","2016-12-07T18:30:12Z","2016-12-07T21:23:38Z"
"","3972","Issue #3612: Fixed left curly indentation","Issue #3612 (related PR #3613)  Unfortunately, I'm unable to create regression diffs on all projects, because checkstyle fails with `OutOfMemory` error while generating report (it fails on master as well).  I've made reports for guava (https://soon-checkstyle-diffs.github.io/issue-3612/guava/) and jdk (https://soon-checkstyle-diffs.github.io/issue-3612/jdk/) using their checkstyle configs. Is it possible to set different checkstyle configs for different projects at once? Probably, in the properties file?  I'm also a little bit confused with the line number 32 in the test case. I'm not sure if it should raise a warning.","closed","","soon","2017-03-10T07:08:08Z","2017-03-10T13:45:58Z"
"","3973","Issue #3612: Fixed left curly indentation","Issue #3612 (related PR #3613)  Diffs: https://soon-checkstyle-diffs.github.io/issue-3612/  ~~Unfortunately, I'm unable to create regression diffs on all projects, because checkstyle fails with `OutOfMemory` error while generating report (it fails on master as well).~~  ~~I've made reports for guava (https://soon-checkstyle-diffs.github.io/issue-3612/guava/) and jdk (https://soon-checkstyle-diffs.github.io/issue-3612/jdk/) using their checkstyle configs. Is it possible to set different checkstyle configs for different projects at once? Probably, in the properties file?~~  I'm also a little bit confused with the [line number 32 in the test case](https://github.com/checkstyle/checkstyle/pull/3973/files#diff-41124079fe0fabb5d72bbb58a1f17c8cR32). I'm not sure if it should raise a warning.","closed","","soon","2017-03-10T07:12:30Z","2017-03-23T20:43:13Z"
"","3623","Issue #3611: added haltOnException to Checker","Issue #3611  Exception will now only stop 1 file from executing instead of all of them.  `catch (Exception ex) {` We could make this catch `Throwable` instead so nothing gets by, but I wasn't sure if this was ok as the field name has `Exception` in it.","closed","","rnveach","2016-12-07T21:23:16Z","2016-12-07T23:21:03Z"
"","3627","Issue #3606: additioanl UTs for coverage 100%","Issue #3606","closed","","romani","2016-12-09T19:13:05Z","2016-12-09T19:42:20Z"
"","3614","Issue #3605: enable certain SAXParserFactory features.","Issue #3605: enable certain SAXParserFactory features.","closed","","liutikas","2016-12-06T02:21:13Z","2016-12-06T22:57:50Z"
"","3936","Issue #3601: Added examples for MethodParamPad xdocs","Issue #3601","closed","","SergeyDzyuba","2017-03-05T18:01:47Z","2017-03-08T07:56:33Z"
"","3595","Issue #3594: resolve Unexpected loss of coverage for PropertyCacheFile","Issue #3594","closed","","romani","2016-11-29T03:15:53Z","2016-11-29T05:23:01Z"
"","3645","Issue #3590: CustomImportControl bad document examples that could lea…","Issue #3590  update for documentation and config","closed","","romani","2016-12-11T23:09:44Z","2016-12-11T23:45:13Z"
"","3599","Issue #3584: Deprecate 'url' property of ImportControlCheck","Issue #3584   I wasn't sure about how to mark the property as deprecated in xdocs, so I put it in the description.  I think it would be nice if we could put it in the title of the property table as well but this would require a change in XDocsPagesTest.  For example:  ```html    url (deprecated)        URL of the file containing the import control configuration.     This property is deprecated. Please use the file property to load configurations     from URLs.      string   null  ```  Another option would be to give it a CSS class and use CSS to generate the `(deprecated)` after the property name.  If you like these ideas I can open an issue for this.","closed","","jochenvdv","2016-11-29T18:40:52Z","2016-11-29T19:01:36Z"
"","3693","Issue #3582: marked enum field's final method as redundant","Issue #3582  Regression: http://rveach.no-ip.org/checkstyle/regression/reports/169/ No differences. This is probably a rare case.","closed","","rnveach","2017-01-05T20:32:38Z","2017-01-05T21:34:04Z"
"","3589","Issue #3575: changed module setters for severity level","Issue #3575   Severity level converter.","closed","","rnveach","2016-11-28T18:37:54Z","2016-11-28T22:23:09Z"
"","3592","Issue #3575: changed module setters for scope","Issue #3575  Scope.","closed","","rnveach","2016-11-28T22:26:52Z","2016-11-30T18:45:24Z"
"","3604","Issue #3575: changed module setters for uri","Issue #3575  HeaderCheck and ImportControl were affected by this change. Changes in test are based on where the exception was being thrown from. I changed `ImportControl.setUrl` to just call `ImportControl.setFile` since they are eventually doing the same thing.","closed","","rnveach","2016-11-30T21:50:43Z","2016-12-05T21:00:47Z"
"","3576","Issue #3575: changed module setters for file","Issue #3575  File conversion.","closed","","rnveach","2016-11-24T15:20:28Z","2016-11-25T17:06:46Z"
"","3568","Issue #3567: added ForbidAnnotationElementValueCheck","Issue #3567   Only 2 surprises when working on this. * `SingleLineJavadocTest` was hiding a NPE that was not in the check. Even fixing the NPE, the input file didn't produce any violations, so I just removed the test. * `AbstractViolationReporterTest` looks like the exception moved based on the comments.  I didn't try to regress to see how any original tests worked.","closed","","rnveach","2016-11-20T04:15:09Z","2016-11-22T04:59:39Z"
"","3563","Issue #3561: document isCommentNodesRequired method in xdoc","Issue #3561: document isCommentNodesRequired method in xdoc","closed","","romani","2016-11-18T14:46:43Z","2016-11-19T22:07:05Z"
"","3677","Issue #3551: CustomImportOrder shows violation on multiple line separation","Issue #3551  Added check for multiple line separation between imports. Test added. Messages for MSG_LINE_SEPARATOR edited to ""should be separated from previous import group by one line"".","closed","","kazachka","2016-12-26T19:33:28Z","2016-12-30T18:14:24Z"
"","3969","Issue #3546: add lambda in a rightcurlycheck","Issue #3546","closed","","Vladlis","2017-03-09T19:46:03Z","2017-04-17T19:20:28Z"
"","3680","Issue #3546: add lambda in a rightcurlycheck","Issue #3546","closed","","MaksimP","2016-12-30T10:11:50Z","2017-01-28T23:12:52Z"
"","3537","Issue #3536: added import control dtd 1.2 to loader","Issue #3536  With this change, the proxy stopped showing connections for this DTD to the server.","closed","","rnveach","2016-11-10T01:34:37Z","2016-11-10T21:07:07Z"
"","3564","Issue #3536: changed assume into if because of powermock interference","Issue #3536  Changed assume to if.","closed","","rnveach","2016-11-18T23:53:40Z","2016-11-19T00:31:20Z"
"","3750","Issue #3530: allowed ant to override and swap checker","Issue #3530  `setClassLoader` is used by eclipse-cs.  `setClassLoader` - has weird javadoc that show some references to multifile validation that removed as problematic (we will come back to multifile mode later).    `setClassLoader` had to be moved to root module as `ant` wanted to set it. Originally `ant` used `contextualize` to set the class loaders but the root module didn't support that method either. So the choice was to add the `contextualize` method via also adding the interface `Contextualizable` or just add the setter. I figured setter would be better as the interface would require all root modules to implement a complex method like `contextualize`. `Main` also used the setter methods instead of `contextualize`.  Added a `reset` method to `TestRootModuleChecker` to ensure it is false before any testing since the field is static.","closed","","rnveach","2017-01-23T21:20:01Z","2017-01-28T22:54:16Z"
"","3517","Issue #3515: allowed cli to override and swap checker","Issue #3515.  Named the new interface `InitialModule`.","closed","","rnveach","2016-10-25T23:04:59Z","2016-11-09T05:30:14Z"
"","3516","Issue #3514: Rename PkgControl to ImportControl","Issue #3514  @romani since you already told me this change was OK, I didn't wait for the issue to be labeled as 'approved' to make this PR. I didn't know this would make the build fail.","closed","","jochenvdv","2016-10-25T20:27:12Z","2016-10-26T04:46:35Z"
"","3696","Issue #3509: fixed try with resource on FallThroughCheck","Issue #3509  Regression: http://rveach.no-ip.org/checkstyle/regression/reports/173/ Again, no differences.","closed","","rnveach","2017-01-05T22:33:58Z","2017-01-05T23:32:15Z"
"","3745","Issue #3507: xdocs fix","Issue #3507  xdocs fixed, screenshot of GUI with javadoc replaced","closed","","kazachka","2017-01-20T09:09:38Z","2017-01-20T15:01:33Z"
"","3695","Issue #3507: column number in first javadoc line fixed","Issue #3507   Fixed inconsistency in column numbers at first line of javadoc.","closed","","kazachka","2017-01-05T22:02:07Z","2017-01-17T16:24:58Z"
"","3585","Issue #3498: ImportCheckControl refactored","Issue #3498   inPkg renamed to packageName because package is keyword.","closed","","kazachka","2016-11-26T11:40:38Z","2016-11-28T22:32:18Z"
"","3510","Issue #3497: Split Guard class","Issue #3497    This is a work in progress.  I have decided to use an abstract base class anyway, because I feel without one the code wasn't clean. For your convenience I made all changes in logically separated commits (will squash later). All unit tests, coverage and style checks pass locally. Please let me know if anything should be done differently (I am only just learning Java).  Things that possibly still need to be done (should this maybe be a separate PR?): - Rename `PkgControl` to `ImportControl` - Refactor tests for `PkgControl`:   - Rename and reorganize test files (are separate files really needed for one class being tested?)   - Add tests that use ClassImportRule (it is covered by already by `ImportControlCheckTest` though) -  Double-check if all documentation is using the new names","closed","","jochenvdv","2016-10-22T15:24:40Z","2016-10-23T19:19:26Z"
"","3494","Issue #3489: restore config hash on property cache clear","Issue #3489.  Fixes to the bug include making the config hash a field, putting the config hash back into the `details` in the clear method, and changing all `details.clear()` to use the `clear` method.  Other changes in the file include: - Making `CONFIG_HASH_KEY` public. - Adding `get` method to verify hash's value when it is not known.","closed","","rnveach","2016-10-03T15:00:43Z","2016-10-14T00:27:40Z"
"","3500","Issue #3488: save files into cache with no un-suppressed violations","Issue #3488  Since we can call `fireErrors` in `AbstractFileSetCheck` during `finishProcessing` (`TranslationCheck`), we have to add all files to the cache, and then remove them if errors get fired that are not suppressed.","closed","","rnveach","2016-10-07T00:55:04Z","2016-11-10T19:59:54Z"
"","3565","Issue #3487: turned on checkstyle cache for developers","Issue #3487  Cache turned on for Checkstyle and sevntu.  * Changes in `XDocPagesTest` is because instantiating the examples caused our own cachefile to be corrupted. * Sevntu cachefile couldn't be enabled in the pom, that I could figure out. `${project.build.directory}/cachefile-sevntu` caused no cache file to be created. * Removed the delete cachefiles as we don't really need them and will defeat the purpose of the cache. CI will always be clean, so it will only matter locally. Cache is deleted on clean, and will reset for files/configs that change. Deleting the file will just put us back without cache each time we run verify.","closed","","rnveach","2016-11-19T01:25:57Z","2016-11-20T13:16:03Z"
"","3485","Issue #3486: DetailAST cache and child counting with comments","Issue #3486  @romani This is the showcase of https://github.com/checkstyle/checkstyle/issues/3466#issuecomment-250868051 . I will make a issue and fix the code in this same PR.  Test works by testing actual child count versus cached child count. Both should always be equal. AST tree with comment fails this test.","closed","","rnveach","2016-10-01T01:06:19Z","2016-10-02T00:27:34Z"
"","3481","Issue #3476: Improve escaped unicode chars detection for AvoidEscaped…","Issue #3476: Wrong warning from AvoidEscapedUnicodeCharacters","closed","","Dziman","2016-09-29T22:46:16Z","2017-02-25T08:59:28Z"
"","3475","Issue #3472: Add METHOD_REF to tokens of OperatorWrapCheck","Issue #3472   Add METHOD_REF to accepted tokens for OperatorWrapCheck and update documentation","closed","","agcuda","2016-09-29T07:03:02Z","2016-10-08T14:02:38Z"
"","3474","Issue #3471: Fix order of ""default"" method modifier","Issue #3471   Fix expected order of modifiers and update documentation of ModifierOrder","closed","","agcuda","2016-09-29T06:58:54Z","2016-09-29T18:45:40Z"
"","3724","Issue #3462: Implement 'path' property for ImportControlCheck","Issue #3462","closed","","jochenvdv","2017-01-13T06:06:13Z","2017-01-22T13:01:15Z"
"","3583","Issue #3450: Support loading import control configuration from URLs and classpath","Issue #3450  For now, I just copied some unit tests to test loading URLs and resources with the `file` property.  However, in [SuppressionFilterTest](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilterTest.java#L159), `CommonUtils#getUriByFilename(String filename)` is mocked with Mockito.  Should I change the tests to use mocking? If so, they would also have to be changed for testing regular files.  By the way, I have kept tests for `url` property until it will be removed.","closed","","jochenvdv","2016-11-25T16:09:05Z","2016-11-28T22:19:31Z"
"","3521","Issue #3445: GUI modified to show javadoc tree as subtree of COMMENT_CONTENT token","Issue #3445  Inconsistency in GUI fixed. Javadoc tree now inserts as subtree of COMMENT_CONTENT token.","closed","","kazachka","2016-10-31T16:33:15Z","2016-11-11T21:04:53Z"
"","3554","Issue #3432: Added DetailNode support for CodeSelector, gui code selection and test.","Issue #3432  Added DetailNode support for CodeSelector and CodeSelectorPModel classes. Code selection in GUI enabled. Some javadoc nodes aren't selects correctly while Issue #3507 (and maybe some others) isn't solved. Test for CodeSelectionPModel added.","closed","","kazachka","2016-11-15T22:22:51Z","2016-11-16T23:29:42Z"
"","3513","Issue #3431: Documentation updated, baseIdentation variable renamed t…","Issue #3431  Documentation at src/xdocs/writingjavadocchecks.xml.vm updated. AstTreeStringPrinter variable baseIdentation renamed to baseIndentation.","closed","","kazachka","2016-10-24T15:09:50Z","2016-10-29T20:47:06Z"
"","3495","Issue #3431: AST printer modified to print javadoc in comment block, tests added","Issue #3431   AstTreeStringPrinter updated to print javadoc as subtree of BLOCK_COMMENT_BEGIN. Test added and expectedInputAstTreeStringPrinterJavadoc modified to match new AstTreePrinterOutput","closed","","kazachka","2016-10-03T18:16:17Z","2016-10-22T22:59:44Z"
"","3549","Issue #3426: remove warning on PACKAGE_DEF predicted by javadoc not separated by line","Issue #3426","closed","","kazachka","2016-11-12T18:38:53Z","2016-12-12T14:04:12Z"
"","3960","Issue #3423: RequireThis treats local variable as property","Issue #3423: Allow non-overlapping overshadowing local vars without any violations from RequireThisCheck. Added UT. Fixed related UT.","closed","","voidfist","2017-03-08T19:38:14Z","2017-04-13T01:09:40Z"
"","3422","Issue #3381: Update Google style coverage to state of 12 July 2016","Issue #3381   Update Google Style coverage: - par 4.5: method reference (::) behaves like dot separator etc - par 4.8.7: moved ""default"" modifier to the correct place according to Google and Oracle - par 5.2.6: parameter names can be one-character long in non-public methods   To implement the last item, I have added two new attributes to ParameterName, i.e. ""scope""  and ""excludeScope"".    **Note**: this patch permits an uppercase letter as the second character of an identifier since I could not find where the Google document disallows it (not even in the old revision of the docs). That's why so many test classes have changed.  This patch does not address par. 3.3.3: Import order (already addressed by #941), and I did  not change the coverage doc in this regard.","closed","","agcuda","2016-09-01T12:00:21Z","2016-10-15T21:54:32Z"
"","3533","Issue #3381: Update Google style coverage to state of 12 July 2016","Issue #3381   I had to extend BaseCheckTestSupport to allow test of config files containing multiple instances of the same check (`ParameterName`). Please let me know if belongs here of if it should be moved to another Issue/RP.","closed","","agcuda","2016-11-08T19:54:45Z","2016-11-12T00:15:34Z"
"","3380","Issue #3378: Fixed TreeWalkerTest to not depend on a specific orderin…","Issue #3378   Fixed TreeWalkerTest#testAcceptableTokens","closed","","azy2","2016-07-29T21:03:21Z","2016-08-02T21:58:24Z"
"","3389","Issue #3378: Fixed TreeWalkerTest to not depend on a specific orderin…","Issue #3378   Combined the 2 commits and based off of most recent master branch.","closed","","azy2","2016-08-02T21:59:13Z","2016-08-03T12:09:44Z"
"","3390","Issue #3378: Fixed TransaltionCheckTest to not depend on a specific o…","Issue #3378   `TransaltionCheckTest#testRegexpToMatchPartOfBaseName` calls `BaseCheckTestSupport#verify` which calls `Checker#process` which calls `TranslationCheck#finishProcessing` and finally `TranslationCheck#checkExistenceOfRequiredTranslations` creates a HashSet which can be ordered in any way. I changed this to a LinkedHashSet so that `verify` knows what order theFiles will be in.","closed","","azy2","2016-08-02T22:36:36Z","2016-08-04T07:00:01Z"
"","3393","Issue #3378: Added NonDex to pom.xml, .travis.yml, and .gitignore","Issue #3378","closed","","azy2","2016-08-04T20:47:39Z","2016-08-05T04:25:50Z"
"","3375","Issue #3369: Fixed XDocsPagesTest to not make assumptions about order…","Issue #3369   `XDocsPagesTest.testAllCheckSections` has a similar problem in which it assumes that the order of HashMap will be the same everytime. This fixes that assumption.","closed","","azy2","2016-07-27T22:56:35Z","2016-07-29T14:25:49Z"
"","3374","Issue #3369: Added NonDex to pom.xml and .travis.yml","Issue #3369  Added NonDex to prevent tests that assume a deterministic order on non-deterministic APIs.  NonDex runs the tests and randomly explores different orderings of certain APIs.","closed","","azy2","2016-07-27T21:42:58Z","2016-08-04T20:28:07Z"
"","3355","Issue #3335: prevented static variables being checked for RequireThis","Issue #3335 This prevents static variables from being reported as requiring `this`.  My changes to do this are: Line 308 -https://github.com/checkstyle/checkstyle/compare/master...rnveach:issue_3335_final?expand=1#diff-110729384f4c9d098bd29eafab295062R308 Line 787 - https://github.com/checkstyle/checkstyle/compare/master...rnveach:issue_3335_final?expand=1#diff-110729384f4c9d098bd29eafab295062R787 Line 815 - https://github.com/checkstyle/checkstyle/compare/master...rnveach:issue_3335_final?expand=1#diff-110729384f4c9d098bd29eafab295062R815  I tried to make my changes similar to `getMethodWithoutThis` which seem to respect static variables.  The other changes are lines were I could not keep line/branch coverage, so they had to be removed. I did multiple regressions, first with my above changes and looked for any additional cases to keep coverage. The ones I did find I placed in `InputRequireThisStatic`, which don't match the issue's example. Most removed lines are null pointer checks, except: Line 421 - https://github.com/checkstyle/checkstyle/compare/master...rnveach:issue_3335_final?expand=1#diff-110729384f4c9d098bd29eafab295062L421 Line 678 - https://github.com/checkstyle/checkstyle/compare/master...rnveach:issue_3335_final?expand=1#diff-110729384f4c9d098bd29eafab295062L678  Regression: http://rveach.no-ip.org/checkstyle/regression/reports/71/  All reports should have removals, no additions. Guava is the easiest one to look at. All static variables are uppercase, except a few.","closed","","rnveach","2016-07-17T16:33:15Z","2016-07-26T04:51:48Z"
"","3354","Issue #3335: prevented static variables being checked for RequireThis","Issue #3335 This prevents static variables from being reported as requiring `this`.  My changes to do this are: Line 308 -https://github.com/checkstyle/checkstyle/compare/master...rnveach:issue_3335_final?expand=1#diff-110729384f4c9d098bd29eafab295062R308 Line 787 - https://github.com/checkstyle/checkstyle/compare/master...rnveach:issue_3335_final?expand=1#diff-110729384f4c9d098bd29eafab295062R787 Line 815 - https://github.com/checkstyle/checkstyle/compare/master...rnveach:issue_3335_final?expand=1#diff-110729384f4c9d098bd29eafab295062R815  I tried to make my changes similar to `getMethodWithoutThis` which seem to respect static variables.  The other changes are lines were I could not keep line/branch coverage, so they had to be removed. I did multiple regressions, first with my above changes and looked for any additional cases to keep coverage. The ones I did find I placed in `InputRequireThisStatic`, which don't match the issue's example. Most removed lines are null pointer checks, except: Line 421 - https://github.com/checkstyle/checkstyle/compare/master...rnveach:issue_3335_final?expand=1#diff-110729384f4c9d098bd29eafab295062L421 Line 678 - https://github.com/checkstyle/checkstyle/compare/master...rnveach:issue_3335_final?expand=1#diff-110729384f4c9d098bd29eafab295062L678  New regression to come.","closed","","rnveach","2016-07-17T15:13:50Z","2016-07-17T16:32:14Z"
"","3336","Issue #3334: fixed RequireThis when can't find end block token","Issue #3334  `getBlockEndToken` can return `null` and there was no check to make sure it wasn't null before trying to use it.","closed","","rnveach","2016-07-02T02:47:05Z","2016-07-05T16:56:02Z"
"","3524","Issue #3333: add new literals in WhiteSpaceAfterCheck","Issue #3333  Add new tokens in WhiteSpaceAfterCheck. LITERAL_DO, LITERAL_WHILE, LITERAL_FOR, LITERAL_IF, LITERAL_ELSE, DO_WHILE.","closed","","MaksimP","2016-11-03T16:05:14Z","2016-12-09T19:22:38Z"
"","3913","Issue #3329: Added lambda to ParenPad","Issue #3329   Diff: https://soon-checkstyle-diffs.github.io/issue-3329","closed","","soon","2017-03-04T14:06:20Z","2017-03-07T01:09:45Z"
"","3357","Issue #3323: added try-with-resources to RedundantModifierCheck","Issue #3323   Regression to come.","closed","","rnveach","2016-07-19T00:13:40Z","2016-07-27T03:19:38Z"
"","3388","Issue #3322: added RedundantModifiers for final in abstract methods","Issue #3322  I expanded the issue to all methods with no declaration, not just the ones written in the issue.  I refactored the code a little bit in this issue. 1) `visitToken` was re-ordered/structured so classes were first and children were next. `processInterfaceOrAnnotation` was moved to a separate if statement. It conflicted with `processMethods` and I felt I shouldn't change that method to basically call the other one when `processMethods` should take priority because of its more common name and global reach. 2) I created a new method `checkForRedundantModifier` as we had a lot of duplicated code mimicking this behavior in this check.  Regression to come.","closed","","rnveach","2016-08-01T20:53:43Z","2016-08-04T12:50:15Z"
"","3631","Issue #3316: use pitest testing of checks.sizes package in shippable CI","Issue #3316.  Due to the fact that pitest works for a long time, and CI will perceive it as an timeout error, we need to split pitest testing packages on maven profiles. At first I added the sizes package of checks to separate maven profile and added pitest testing of this package in shippable CI.","closed","","Efremenkov","2016-12-09T23:02:06Z","2016-12-09T23:23:17Z"
"","3705","Issue #3316: use pitest tool testing of checks package in shippable CI","Issue #3316  Added pitest tool in Shippable CI. It is used for testing ""checks"" packages except ""annotation"" package.  We do ""git log -1 ...."" check before execution of validation to skip long execution(whole testing about 2 hourts) on minor changes. So only PR that are referenced the issue will be validation by pitest.","closed","","Efremenkov","2017-01-09T21:49:24Z","2017-01-10T00:15:29Z"
"","3924","Issue #3309: Added excludedPackages to class coupling checks","Issue #3309   This PR adds `excludedPackages` parameter to the `ClassDataAbstractionCouplingCheck` and `ClassFanOutComplexityCheck`.  The diff is pretty big, because of added support for retrieving package name of imported class. Previously the check excludes classes by the name only. Now it tracks package name (for direct class imports) and therefore also excludes all `java.lang` classes. Unfortunately, it does not support wildcard imports, like `import java.lang.*`, because I don't know how to track them.  I've looked though all diff reports and for each project the metric value either decreases (because of direct imports from `java.lang`) or remains the same.  Diff: https://soon-checkstyle-diffs.github.io/issue-3309/index.html  Now I'm going to run some performance tests. For now the module uses plain `startsWith`, but we should probably use trie or similar structure to check if the package is excluded.   This PR is still in work, but I want to receive some feedback. Probably, there is better way to get package name for a class.","closed","","soon","2017-03-05T08:19:26Z","2017-04-10T13:54:20Z"
"","3387","Issue #3308: EqualsHashCode violation for hashCode without equals","Issue #3308   Added new violation, was a minor logic change. Regression to come.","closed","","rnveach","2016-08-01T16:41:40Z","2016-08-05T07:54:36Z"
"","3407","Issue #3308: fixed EqualsHashCode equals method parameter test","Issue #3308  Updated documentation. Changed some code to use our utility method, which checked for static that our old code didn't. Checking parameter for `Object` or `java.lang.Object`. Regression to come.","closed","","rnveach","2016-08-08T14:47:28Z","2016-09-29T11:10:46Z"
"","3288","Issue #3287: added exclude directory option","Issue #3287  Issue is not yet approved.","closed","","rnveach","2016-06-18T20:49:43Z","2016-07-27T02:55:24Z"
"","3615","Issue #3271: add profile with pitest plugin for checks.sizes package","Issue #3271.  Due to the fact that pitest works for a long time, and CI will perceive it as an timeout error, we need to split pitest testing packages on maven profiles. At first I added the sizes package of checks to separate profile. I added pitest testing of this package in shippable CI.","closed","","Efremenkov","2016-12-06T18:56:01Z","2016-12-06T20:36:24Z"
"","3602","Issue #3271: add profile with pitest plugin for checks.sizes package","Issue #3271.  Due to the fact that pitest works for a long time, and CI will perceive it as an timeout error, we need to split pitest testing packages on maven profiles. At first I added the sizes package of checks to separate profile.","closed","","Efremenkov","2016-11-30T12:02:53Z","2016-12-06T21:29:41Z"
"","3268","Issue #3266: refactored commit message validation to allow new lines","Issue #3266  Rewrote test to also show which rule was broken on validation.  Some important changes: - `#\\d*` was changed to `#\\d+` since we require the issue/pull number. - when the commit message is displayed during a failure, it shows the hidden characters `\r, \n, \t` for easier debugging","closed","","rnveach","2016-06-10T21:48:27Z","2016-06-12T13:34:02Z"
"","3535","Issue #3255: removed unnecessary string fields for patterns","Issue #3255  Removed unnecessary String fields, inlined their values into the Pattern, and renamed pattern to be same name as setter (which is what the string field was).","closed","","rnveach","2016-11-09T14:51:18Z","2016-11-10T18:43:23Z"
"","3525","Issue #3255: changed module setters for pattern","Issue #3255  Added pattern recognition to `AutomaticBean`. Modules were changed so setter takes `Pattern` and field is same name as setter. XDocs were validated and corrected for type and default value.  2 modules required a slight override. `MultipleStringLiteralsCheck` converts null and empty strings to null pattern. `RegexpCheck` needs multi-line parameter.","closed","","rnveach","2016-11-04T00:10:26Z","2016-11-09T12:39:11Z"
"","3541","Issue #3255: changed module setters for pad option","Issue #3255","closed","","rnveach","2016-11-10T20:48:59Z","2016-11-11T02:56:34Z"
"","3243","Issue #3240: added type annotation to java grammar","Issue #3240","closed","","rnveach","2016-06-02T14:04:13Z","2016-06-02T15:49:18Z"
"","3272","Issue #3239: fixed checks that fail on new receiver parameter","Issue #3239   Identified as an issue in https://github.com/checkstyle/checkstyle/pull/3259#issuecomment-225621597  Reason receiver parameters are ignored in these checks: - Receiver parameters can't be `final`. - Receiver parameters can't be renamed. - Variables can't be named `this` to conflict with receiver parameters. - `this` can't be re-assigned from a receiver parameter.","closed","","rnveach","2016-06-13T17:47:59Z","2016-06-16T21:33:39Z"
"","3260","Issue #3239: added receiver parameter to java grammar","Issue #3239   `parameterIdent` was created in the grammar so everything would fall under `id`.","closed","","rnveach","2016-06-08T19:56:14Z","2016-06-12T13:21:29Z"
"","3252","Issue #3239: added receiver parameter to java grammar","Issue #3239   `parameterIdent` was created in the grammar so everything would fall under `id`.","closed","","rnveach","2016-06-07T12:46:11Z","2016-06-08T19:55:23Z"
"","3244","Issue #3237: added secondary throws annotation to java grammar","Issue #3237","closed","","rnveach","2016-06-02T17:06:58Z","2016-06-03T13:04:28Z"
"","3434","Issue #3233: Resolve IntelijIdea inspection violations for java8 migration","Issue #3233   This change reverts commits 015fa7f and 6c1a0e1 and fixes violations of respective rules.  I got two Checkstyle violations which seemed unrelated to my changes (and caused by legitimate code), so I suppressed them using `SuppressWarnings` syntax. Please let me know if there is a different preferred way to deal with them.","closed","","tcNickolas","2016-09-07T01:16:24Z","2016-09-09T14:04:35Z"
"","3226","Issue #3225: fixed cr lines in TreeWalker","Issue #3225  This fixes the exception seen in PR #3179 @ https://github.com/checkstyle/checkstyle/pull/3179#issuecomment-221762846","closed","","rnveach","2016-05-28T02:58:10Z","2016-05-28T12:47:17Z"
"","3270","Issue #3220: CommentsIndentation: allow upper comments for following block at multi-block structures","Issue #3220   Report shows no regression: https://vladlis.github.io/reports/3220/ Tested projects: checkstyle, sevntu-checkstyle, openjdk7, guava, findbugs, pmd, lombok-ast, spring, hibernate, elasticsearch, java-design-patterns, MaterialDesignLibrary, Hbase, Orekit, apache-ant, apache-jsecurity, android-launcher, infinispan, protonpack, jOOL, RxJava","closed","","Vladlis","2016-06-12T05:35:47Z","2016-06-12T13:50:31Z"
"","3250","Issue 3212: aligned setters to be arrays like properties for xdoc validation (breaking compatibility)","Issue #3212  This is the last one for the string arrays. Affected modules: SuppressWarningsHolder , AtclauseOrderCheck, SingleLineJavadocCheck  This PR basically changed only:  ``` void setProperty(String s) {     field = s.split("",""); } ```  into:  ``` void setProperty(String... s) {     field = s; } ```  **Breaking Compatibility:** As stated in in other PR at https://github.com/checkstyle/checkstyle/pull/3189#issuecomment-220032301, old code didn't properly split comma delimited inputs from the configuration. Spaces were left in and these caused properties like `1, 2` to be seen as `1` and `2`. This caused checks like `IllegalInstantiation` to not identify classes properly and hid what should have been violations.","closed","","rnveach","2016-06-06T21:45:01Z","2016-06-07T12:33:12Z"
"","3425","Issue #3202: Update WhitespaceAround to check ARRAY_INIT token","Issue #3202   WhitespaceAround updated to check ARRAY_INIT token. Some additional test cases added to WhitespaceAroundTest and InputWhitespace test resource. Fixed array initialization in InputEmptyTypesAndCycles test resource.","closed","","kazachka","2016-09-03T17:29:15Z","2016-09-13T15:03:18Z"
"","3452","Issue #3202: ARRAY_INIT whitespace follow check deleted, test cases a…","Issue #3202  WhitespaceAround updated to check ARRAY_INIT token. Some additional test cases added to WhitespaceAroundTest and InputWhitespace test resource. Fixed array initialization in InputEmptyTypesAndCycles test resource.","closed","","kazachka","2016-09-19T20:07:05Z","2016-12-12T21:15:42Z"
"","3441","Issue #3202: Update WhitespaceAround to check ARRAY_INIT token","Issue #3202  WhitespaceAround updated to check ARRAY_INIT token. Some additional test cases added to WhitespaceAroundTest and InputWhitespace test resource. Fixed array initialization in InputEmptyTypesAndCycles test resource.","closed","","kazachka","2016-09-13T15:17:24Z","2016-09-19T20:05:46Z"
"","3188","Issue #3187: validate property types","Issue #3187. This won't close the issue, it is just a start.  Added validation of xdoc config property types. Strings are ignored for now.  Most xdoc changes are simple. Types should start with uppercase (looks more official). Only 1 invalid type.","closed","","rnveach","2016-05-17T18:22:49Z","2016-05-21T13:08:26Z"
"","3189","Issue #3187: aligned setters with String collection fields and broke old compatibility","Issue #3187   basically changed only:  ``` void set(String s) {     field = s.split("",""); } ```  into:  ``` void set(String... s) {     field = s; } ```  **Braking Compatibility:** As stated in https://github.com/checkstyle/checkstyle/pull/3189#issuecomment-220032301, old code didn't properly split comma delimited inputs from the configuration. Spaces were left in and these caused properties like `1, 2` to be seen as `1` and `2`. This caused checks like `IllegalInstantiation` to not identify classes properly and hid what should have been violations.","closed","breaking compatibility,","rnveach","2016-05-17T19:08:12Z","2016-06-03T22:15:42Z"
"","3246","Issue 3187: validate default types","Issue #3187   Added default value validation except for strings and string arrays. `RegExpCheck` changed default value to align with what the xdoc says, otherwise the xdoc has to be changed to `0`.","closed","","rnveach","2016-06-05T17:58:22Z","2016-06-06T16:26:49Z"
"","3176","Issue 3175","Issue #3175   expanded sevntu testing to all folders.  LineLengthExtended needed same ignore to package/import that we added to LineLength. I was unsure about CauseParameterInException, ForbidCCommentsInMethods, IllegalCatchExtended violations so I just suppressed them for now. Underscores added to numbers were placed in positions were commas would be separating thousands, etc.","closed","","rnveach","2016-05-13T23:52:59Z","2016-05-14T12:38:46Z"
"","3179","Issue #3173: moved SingleSpaceSeparatorCheck from sevntu to checkstyle","Issue #3173  Start of new check from sevntu.  Made some minor modifications from sevntu. - Removed references of `nodes` and replaced them with `whitespace` characters. - Changed property `validateCommentNodes` to `validateComments`. - Changed check's method definitions from `(DetailAST ast, String line)` to `(String line, int columnNo)`.  Questions: (1)  ``` +    public int[] getDefaultTokens() { +        return CommonUtils.EMPTY_INT_ARRAY; +    } .... +    public void beginTree(DetailAST rootAST) { +        visitEachToken(rootAST); +    } ```  Can we just change `getDefaultTokens` to all tokens? I dislike parsing the entire tree twice (once by `TreeWalker` and then again by this check). Should we use reflection to get all tokens, or should I hardcode the list and make a test to verify?  (2)  ``` +    private static boolean isSpace(String line, int columnNo) { +        return line.charAt(columnNo) == ' '; +    } ```  Is there a specific reason we don't just use `isWhitespace`? is there a reason we don't check tabs and just a space?","closed","","rnveach","2016-05-14T17:31:14Z","2016-05-28T12:53:41Z"
"","3550","Issue #3170: delete children from javadoc TEXT","Issue #3170  Main modification is in `JavadocNodeImpl.java`. All other changes are reaction to that change. Change to `EMPTY_DETAIL_NODE_ARRAY` is needed to avoid a class cast exception.  Modification in `TokenTypes.java` was found in a kind of bug in `JavadocParagraphCheck.java`. This is why it now checks for `TEXT` token.","closed","","rnveach","2016-11-13T02:17:34Z","2016-11-19T00:15:46Z"
"","3204","Issue #3168: allow new line on end of commit","Issue #3168 fix Based on conversations in PR #3195  Reason for this fix: https://github.com/checkstyle/checkstyle/pull/3195#issuecomment-220686877","closed","","rnveach","2016-05-20T18:45:06Z","2016-05-20T20:31:32Z"
"","3181","Issue #3168: forbid no commits and whitespace on end of commit message","Issue #3168  forbid whitespaces on the end of the commit message. made sure there is atleast one commit to validate.  I can't confirm that the original issue is because of one of these 2, but i can confirm that space on the end after a period is accepted and makes it look like message ends with period. https://travis-ci.org/rnveach/checkstyle/builds/130457690 https://github.com/rnveach/checkstyle/commit/51299ac6d961bde0efaa0eda72a6841f5e99ac79 `will have spaces on end.` does have a space on the end as seen in the 2nd link if you highlight the message or download the commit","closed","","rnveach","2016-05-15T23:09:11Z","2016-05-17T01:00:07Z"
"","3275","Issue #3166: fix CommentsIndentation Check incorrect work with subsequent comments","Issue #3166   Report: https://vladlis.github.io/reports/3166/ Tested projects: checkstyle, sevntu-checkstyle, openjdk7, guava, findbugs, pmd, lombok-ast, spring, hibernate, elasticsearch, java-design-patterns, MaterialDesignLibrary, Hbase, Orekit, apache-ant, apache-jsecurity, android-launcher, infinispan, protonpack, jOOL, RxJava","closed","","Vladlis","2016-06-14T20:35:18Z","2016-06-16T13:32:28Z"
"","3146","Issue #3144: fixed NPE in FinalLocalVariable for lambda in field","Issue #3144   Exception is because we are in an interface and `findFirstUpperNamedBlock` wasn't stopping at the interface definition. Code fix has it now stopping at the field definition. This is because the code was original stopping at methods, and fields are on the same hierarchy, so I thought it was better to stop here.","closed","","rnveach","2016-04-29T13:16:39Z","2016-05-01T12:41:18Z"
"","3180","Issue #3143 : maxForVoid for ReturnCount Check","Issue #3143  **maxForVoid** counts empty return statements. **max** counts non-empty return statements.  Any violation I wasn't sure how to fix properly, I left as a suppression. Feel free to provide any insight on the best way to fix them.  Questions: (1)  > This code ... with maxForVoid=1 should fire violation. > private void checkThrows() { > ... >         if (throwsAst == null) { >             return; /// should be violation with maxForVoid=1, as one return is at end of method >         } > .... >     }  Are we sure we want to include _hidden_ return statements at the end of the method in the count? It isn't specifically written out in the code and some people may not understand that there is an implied `return` statement there. Count for `max` is based on _written_ returns, so it seems that `maxForVoid` should follow suite. The above can show violations when `maxForVoid` is set to 0, meaning no `return` statement should be written.","closed","","rnveach","2016-05-15T17:05:22Z","2016-05-27T20:28:15Z"
"","3139","Issue #3136: added indentation check of while in do..while","Issue #3136 Added indentation check of `while` in `do .. while`. It is required to be on the same indentation as `while` if it starts the line. Regression to come.  Added minor change to IndentAudit to also verify the line number.","closed","","rnveach","2016-04-27T18:09:36Z","2016-04-28T12:37:20Z"
"","3256","Issue #3127: fix CommentsIndentation false-positive in empty array declarations","Issue #3127  Report shows no regression: https://vladlis.github.io/reports/3127/ Tested projects: checkstyle, sevntu-checkstyle, openjdk7, guava, findbugs, pmd, lombok-ast, spring, hibernate, elasticsearch, java-design-patterns, MaterialDesignLibrary, Hbase, Orekit, apache-ant, apache-jsecurity, android-launcher, infinisoan, protonpack, jOOL, RxJava","closed","","Vladlis","2016-06-07T22:52:55Z","2016-06-09T02:38:43Z"
"","3222","Issue #3116: removed requirement right curlies must be first on line","Issue #3116  Problem extended from `BlockParentHandler.shouldStartWithRCurly` which was saying the right curly should start the line. Since this method goes against not forcing users to split their lines, it was removed. `|| areOnSameLine(rcurly, lcurly)` was removed as `|| !isOnStartOfLine(rcurly)` takes precedence and can't be hit for code coverage.  I did not remove the `ioffset` code incase we need it again, if that is all right. Regression will be shortly.","closed","","rnveach","2016-05-27T12:08:27Z","2016-06-03T12:54:31Z"
"","3108","Issue #3106: fixed annotation location check with no modifiers","Issue #3106  Tokens DOT, LITERAL_NEW, TYPE_ARGUMENT were causing a NPE becuase they could have modifiers for annotations but if they don't, we hide the node in the tree making their find return `null`.","closed","","rnveach","2016-04-15T23:30:49Z","2016-04-16T12:58:20Z"
"","3113","Issue 3105","Issue #3105  First part of the changes to the test. We now verify that the input file has the same indentation as the CS violation and has the same expected indentations as the CS violation. **The test still can't fully verify non-CS violation comments.**  Comments now have a new attribute, `ioffset` (short for indent offset). This is used when the CS violation's current indentation is different than the indentation of the first character found in the line. It's default value is 0. [Reasoning why needed.](https://github.com/checkstyle/checkstyle/issues/3105#issuecomment-210875289) CS reported violation indent = `indent` + `ioffset`. **Note:** Some places where we use this with a large value may have to be inspected as possible issues.  Other changes include streamlining test code by removing excess regular expressions, new audit listener to grab the violations, and having a single class hold all the data on the comment's attributes. All the original check and balances still remain.","closed","","rnveach","2016-04-17T00:27:20Z","2016-04-18T16:09:58Z"
"","3118","Issue 3103","Issue #3103  To fix this issue, I decided to remove validation from RCURLY and ARRAY_INIT for wrapped lines. These curlies are always validated in other handlers, so there isn't a need to duplicate the same work. This can be seen as in the test, and hopefully regression, as we didn't lose any errors, they just changed around.  I changed one minor thing in the IndentAudit to print an error message instead of an index out of bounds exception.","closed","","rnveach","2016-04-19T00:30:15Z","2016-04-22T12:12:18Z"
"","3411","Issue #3102: DesignForExtension: consider overridable methods and javadoc","Issue #3102   > *no validation for overridable methods usage in class > *no validation of javadoc where user need to put explanation of how to override it correctly.  1) Done. Now if method is public or protected and non-final (designed for extension) it has to have a javadoc. 2) Activated the check against Checkstyle source codes. Added suppression for *Test files as we do not need to add javadoc for UTs or make them final.  3) Question: should we check whether a method has @Override annotation? For example, if a method has @Override annotation, the Check will not rise violation. Rationale: method which is designed for extension has to have javadoc commend and class which extends the base class and overrides the method also inherits javadoc. And  if a method does not have @Override annotation, the Check will rise violation. In Checkstyle we have a lot of such cases, where there is @Override on public method, for example, check CIs violations.  What should be done in next PRs:  4)  Add option to specify the explanation text which should be included in javadoc to allow the method to be designed for extension. For example, “This implementation...”  P.S. Reports are on the way ...","closed","","MEZk","2016-08-10T14:52:46Z","2016-10-22T22:36:19Z"
"","3200","Issue #3086: added debug option","Issue #3086  Added debug option using existing code. No clue if it will need to be changed with slf4j (Issue #3199)  This was going to be a 2 part PR, with the second part adding more messages, but I will have to confirm if I can do so without much hassle from code complexity without slf4j.  The code for enabling the debug level output, and to STDOUT, was the only way I could find to get it to activate at runtime. This will interfer with any other text going to STDOUT, but really this option should only be used for debugging purposes anyways.  Split `Main` into `Main.runCli` because of violation:  > Main.java:[145,13](extension) ChildBlockLength: Block length is 56 lines, but should be lesser or equal to 53 lines.","closed","","rnveach","2016-05-20T14:45:37Z","2016-05-27T13:23:26Z"
"","3091","Issue #3085: fixed escaping in RegexpOnFilename examples","Issue #3085   I accidentally double escaped the examples for the check.","closed","","rnveach","2016-04-10T23:30:57Z","2016-04-28T12:58:58Z"
"","3228","Issue #3066: fixed line feeds in AstRegressionTest","Issue #3066  Turns out issue was with the test I had written. It split the input file by '\n' and didn't accept the possibility of '\r' or '\r\n'. ANTLR and sub-classes picked this up correctly and that's why they wanted 2 lines for the comment. Update just removes the try/catch along with the fix.","closed","","rnveach","2016-05-29T03:21:20Z","2016-05-29T12:41:49Z"
"","3109","Issue 3065","Issue #3065  I couldn't reproduce the issue but from the stacktrace I deduced that the issue was with a message in a foreign language. So I expanded the check message test to test all locales and fixed any issues that came up from it.","closed","","rnveach","2016-04-16T01:09:10Z","2016-04-16T12:43:00Z"
"","3697","Issue #3064: removed waiting comment that was already implemented","Issue #3064","closed","","rnveach","2017-01-06T15:36:37Z","2017-01-06T15:43:20Z"
"","3756","Issue #3041: RequireThisCheck doesn't see outer classes for anonymous classes","Issue #3041  Diff reports: https://vladlis.github.io/3041/index.html","closed","","Vladlis","2017-01-25T07:52:46Z","2017-01-28T13:03:03Z"
"","3050","Issue #3035: upgrade equalsverifier to version 2.0.1","Issue #3035","closed","","Vladlis","2016-03-20T23:27:56Z","2016-03-21T00:34:08Z"
"","3230","Issue #3033: added more support for openjdk 8 and 9","Issue #3033  This fixes all issues with openjdk except for  - the variable declaration:  ``` @B Object o = new @B String @B [3]; ```  `test/tools/pack200/typeannos/TypeUseTarget.java:40:8: expecting ""class"", found 'Object'` Which looks like antlr is confused about what it is and may require some rewriting somewhere. - and the variable definition:  ``` int compile-error; ```  `/javax/xml/bind/jxc/8073519/InputWithError.java:28:10: unexpected token: compile` Which I am surprised the `-` is allowed.  `parameterIdent` was created so everything for `id` is under it. Regression will follow.","closed","","rnveach","2016-05-29T19:55:47Z","2017-12-17T23:59:22Z"
"","3032","Issue #3025: try structure is not parsable when only name is used","Issue #3025","closed","","romani","2016-03-12T17:21:43Z","2016-03-12T19:50:40Z"
"","3024","Issue #3023: fix for build problem in localed UTs","Issue #3023","closed","","romani","2016-03-10T00:19:29Z","2016-03-10T15:56:41Z"
"","3017","German translations corrected","Issue #3013: corrected google translations to proper german language","closed","","MrQNo","2016-03-08T21:13:35Z","2016-03-22T01:00:08Z"
"","3011","Issue #3008: revert of 80ab48f commit to fix #1192","Issue #3008","closed","","romani","2016-03-05T23:03:11Z","2016-03-07T19:04:45Z"
"","3010","Issue 3001: All messages translated to Chinese.","Issue #3001  - Issue fix; - I changed MainTest, set default locale to root, to prevent it fail in language environment other than English; - Did not find xdoc file to be updated.","closed","","ybbpgfjtey","2016-03-05T20:21:48Z","2016-03-06T12:44:50Z"
"","3123","Issue #2998: Fix CommentsIndentation Check false-positive at the end of a block","Issue #2998  Report: http://vladlis.github.io/reports/2998_2/index.html","closed","","Vladlis","2016-04-23T20:54:21Z","2016-04-24T13:26:04Z"
"","3060","Issue #2973: added java lexer cases for coverage","Issue #2973  The first for the hard to reach code coverages. This doesn't reach 100% line coverage because the remaining 59 lines are actually unreachable code by normal means. For now, I am submitting these and increasing the coverage rate. My plan to reach the other areas is to have the `LA` method return delayed values instead of static positioning, but for now I will work on the recognizer.  So I don't have to keep creating files for every small test, I split `parseFile` apart with the addition of `parseFileText`. I also added the method `verifyAstRaw` and the class `AssertGeneratedJavaLexer`. Suppressions are needed because the ANTLR checks are very specific.","closed","","rnveach","2016-03-24T02:31:23Z","2016-03-26T23:15:53Z"
"","3053","Issue #2968: adding more method references examples","Issue #2968  Here are the new examples I found. I still have to test travis for 2 others before declaring this is all I can find or create. It seems the current grammar will accept them, so I added the test for them.","closed","","rnveach","2016-03-21T22:54:31Z","2016-03-22T00:55:51Z"
"","3846","Issue #2935: Correct naming in import control DTD","Issue #2935   Only the DTD change for now. The documenting I will do soon.  Is it possible to have multiple PRs for one issue (for correct changelog generation)? If not, I will add the other changes to this PR as well.","closed","","jochenvdv","2017-02-19T15:38:52Z","2017-02-19T23:20:59Z"
"","3069","Issue #2924: Add support for LAMDA token in WhitespaceAround check","Issue #2924 Report over jool, protonpack, infinispan and rxjava has no violations - https://vladlis.github.io/reports/2924/","closed","","Vladlis","2016-03-27T19:39:32Z","2016-03-29T16:42:21Z"
"","3401","Issue #2874: Use CyclomaticComplexity.switchBlockAsSingleDecisionPoint in checkstyle_checks.xml","Issue #2874.  FYI: **without option** FinalLocalVariableCheck#visitToken - CC = 21 VariableDeclarationUsage#calculateDistanceInSingleScope - CC = 17  **with option** FinalLocalVariableCheck#visitToken - CC = 15 VariableDeclarationUsage#calculateDistanceInSingleScope - CC = 11  FinalLocalVariableCheck#visitToke and VariableDeclarationUsage#calculateDistanceInSingleScope  are just too complex themselves. And even when switchBlockAsSingleDecisionPoint is set to true they remain logically complex.","closed","","MEZk","2016-08-06T18:04:45Z","2016-09-08T20:07:19Z"
"","3386","Issue #2866: added prefilters and exclusion prefilter","Issue #2866  Added pre-filters to be able to exclude files from being checked. ExclusionPreFilter accepts regular expression to allow customizing which files are skipped.  Missing any XDoc documentation as there is some question if `PreFilter` is the word we want to use to describe this new set.  Currently prefilters is missing from `Checker.getExternalResourceLocations` as the only pre-filter doesn't use this and requirements in issue didn't want this. If we still want pre-filters to have external resources, then I can just add a dummy class to fill in the code coverage.","closed","","rnveach","2016-07-31T16:47:09Z","2016-10-22T22:53:10Z"
"","3644","Issue #2809: added new checks for google style 4.6.2","Issue #2809  Added method param pad check and paren pad check to google style 4.6.2.","closed","","rnveach","2016-12-11T17:45:58Z","2016-12-11T18:23:36Z"
"","3649","Issue #2803: added synchronized to NoWhitespaceAfterCheck","Issue #2803   Regression: http://rveach.no-ip.org/checkstyle/regression/reports/166/ ````        ````  I did not add this to google_config. As regression shows, every single `synchronized` written in guava and android have a space after it. Even though google style doesn't specify this token specifically I believe the following text covers that it should have this space: http://checkstyle.sourceforge.net/reports/google-java-style-20160712.html#s4.6.2-horizontal-whitespace > a single ASCII space also appears in the following places > Separating any reserved word ... from an open parenthesis (() that follows it on that line  If you still think I should ask them about this, please direct me to the place where I can post the question.","closed","","rnveach","2016-12-12T02:11:19Z","2016-12-12T17:17:11Z"
"","3223","Issue #2618: refactored indentation import and package logic","Issue #2618  `checkLinesIndent` is only used by these 2 classes, and they seem like an attempt to mimic `LineWrappingHandler`. I removed them for in favor of `LineWrappingHandler`. Regression will be shortly.  Unanswered question: https://github.com/checkstyle/checkstyle/issues/2618#issuecomment-213997415 This code uses `lineWrappingIndentation`.","closed","","rnveach","2016-05-27T18:07:24Z","2016-06-03T13:11:16Z"
"","3402","Issue #2541: Activate forbidden-apis on test input files","issue #2541   @romani  Just want to show that actiovation of forbiddes-apis on test input files results in ArrayIndexOutOfBoundsException inside forbidden-apis itself.  I am not able to get the full stacj trace even with `mvn verify -e -X`.  ``` [INFO] --- forbiddenapis:2.2:testCheck (default) @ checkstyle --- [DEBUG] Configuring mojo de.thetaphi:forbiddenapis:2.2:testCheck from plugin realm ClassRealm[plugin>de.thetaphi:forbiddenapis:2.2, parent: sun.misc.Launcher$AppClassLoader@5c647e05] [DEBUG] Configuring mojo 'de.thetaphi:forbiddenapis:2.2:testCheck' with basic configurator --> [DEBUG]   (f) bundledSignatures = [jdk-unsafe, jdk-deprecated, jdk-system-out, jdk-non-portable] [DEBUG]   (f) classesDirectory = /Touro/IDEA_Projects/checkstyle/target/test-classes [DEBUG]   (f) classpathElements = [/Touro/IDEA_Projects/checkstyle/target/test-classes, /Touro/IDEA_Projects/checkstyle/target/classes, /home/andreiselkin/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar, /home/andreiselkin/.m2/repository/org/antlr/antlr4-runtime/4.5.3/antlr4-runtime-4.5.3.jar, /home/andreiselkin/.m2/repository/commons-beanutils/commons-beanutils/1.9.2/commons-beanutils-1.9.2.jar, /home/andreiselkin/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar, /home/andreiselkin/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar, /home/andreiselkin/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar, /home/andreiselkin/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar, /home/andreiselkin/.m2/repository/org/apache/ant/ant/1.9.7/ant-1.9.7.jar, /home/andreiselkin/.m2/repository/org/apache/ant/ant-launcher/1.9.7/ant-launcher-1.9.7.jar, /home/andreiselkin/.m2/repository/junit/junit/4.12/junit-4.12.jar, /home/andreiselkin/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, /home/andreiselkin/.m2/repository/com/github/stefanbirkner/system-rules/1.16.0/system-rules-1.16.0.jar, /home/andreiselkin/.m2/repository/nl/jqno/equalsverifier/equalsverifier/2.1.3/equalsverifier-2.1.3.jar, /home/andreiselkin/.m2/repository/org/powermock/powermock-api-mockito/1.6.5/powermock-api-mockito-1.6.5.jar, /home/andreiselkin/.m2/repository/org/mockito/mockito-core/1.10.19/mockito-core-1.10.19.jar, /home/andreiselkin/.m2/repository/org/objenesis/objenesis/2.1/objenesis-2.1.jar, /home/andreiselkin/.m2/repository/org/powermock/powermock-api-mockito-common/1.6.5/powermock-api-mockito-common-1.6.5.jar, /home/andreiselkin/.m2/repository/org/powermock/powermock-api-support/1.6.5/powermock-api-support-1.6.5.jar, /home/andreiselkin/.m2/repository/org/powermock/powermock-module-junit4/1.6.5/powermock-module-junit4-1.6.5.jar, /home/andreiselkin/.m2/repository/org/powermock/powermock-module-junit4-common/1.6.5/powermock-module-junit4-common-1.6.5.jar, /home/andreiselkin/.m2/repository/org/powermock/powermock-core/1.6.5/powermock-core-1.6.5.jar, /home/andreiselkin/.m2/repository/org/javassist/javassist/3.20.0-GA/javassist-3.20.0-GA.jar, /home/andreiselkin/.m2/repository/org/powermock/powermock-reflect/1.6.5/powermock-reflect-1.6.5.jar, /home/andreiselkin/.m2/repository/commons-io/commons-io/2.5/commons-io-2.5.jar, /home/andreiselkin/.m2/repository/org/eclipse/jgit/org.eclipse.jgit/4.4.1.201607150455-r/org.eclipse.jgit-4.4.1.201607150455-r.jar, /home/andreiselkin/.m2/repository/com/jcraft/jsch/0.1.53/jsch-0.1.53.jar, /home/andreiselkin/.m2/repository/com/googlecode/javaewah/JavaEWAH/0.7.9/JavaEWAH-0.7.9.jar, /home/andreiselkin/.m2/repository/org/apache/httpcomponents/httpclient/4.3.6/httpclient-4.3.6.jar, /home/andreiselkin/.m2/repository/org/apache/httpcomponents/httpcore/4.3.3/httpcore-4.3.3.jar, /home/andreiselkin/.m2/repository/commons-codec/commons-codec/1.6/commons-codec-1.6.jar, /home/andreiselkin/.m2/repository/org/slf4j/slf4j-api/1.7.2/slf4j-api-1.7.2.jar, /home/andreiselkin/.m2/repository/org/slf4j/slf4j-simple/1.7.21/slf4j-simple-1.7.21.jar, /home/andreiselkin/.m2/repository/org/jacoco/org.jacoco.agent/0.7.7.201606060606/org.jacoco.agent-0.7.7.201606060606-runtime.jar, /usr/lib/jvm/java-8-oracle/jre/../lib/tools.jar] [DEBUG]   (f) disableClassloadingCache = false [DEBUG]   (f) excludes = [**/Main.class, **/GeneratedJavaLexer.class, **/JavadocParser.class] [DEBUG]   (f) failOnMissingClasses = true [DEBUG]   (f) failOnUnresolvableSignatures = true [DEBUG]   (f) failOnUnsupportedJava = false [DEBUG]   (f) failOnViolation = true [DEBUG]   (f) internalRuntimeForbidden = false [DEBUG]   (f) localRepository =       id: local       url: file:///home/andreiselkin/.m2/repository/    layout: default snapshots: [enabled => true, update => always]  releases: [enabled => true, update => always]  [DEBUG]   (f) packaging = jar [DEBUG]   (f) remoteRepositories = [      id: sonatype-nexus-snapshots       url: https://oss.sonatype.org/content/repositories/snapshots    layout: default snapshots: [enabled => true, update => daily]  releases: [enabled => false, update => daily] ,       id: central       url: https://repo.maven.apache.org/maven2    layout: default snapshots: [enabled => false, update => daily]  releases: [enabled => true, update => daily] ] [DEBUG]   (f) skip = false [DEBUG]   (f) targetVersion = 1.8 [DEBUG] -- end configuration -- [INFO] Scanning for classes to check... [INFO] Reading bundled API signatures: jdk-unsafe-1.8 [INFO] Reading bundled API signatures: jdk-deprecated-1.8 [INFO] Reading bundled API signatures: jdk-system-out [INFO] Reading bundled API signatures: jdk-non-portable [INFO] Loading classes to check... [INFO] Scanning classes for violations... [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 02:55 min [INFO] Finished at: 2016-08-06T21:16:24+03:00 [INFO] Final Memory: 139M/738M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal de.thetaphi:forbiddenapis:2.2:testCheck (default) on project checkstyle: Execution default of goal de.thetaphi:forbiddenapis:2.2:testCheck failed: 65535 -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal de.thetaphi:forbiddenapis:2.2:testCheck (default) on project checkstyle: Execution default of goal de.thetaphi:forbiddenapis:2.2:testCheck failed: 65535     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default of goal de.thetaphi:forbiddenapis:2.2:testCheck failed: 65535     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:145)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)     ... 20 more Caused by: java.lang.ArrayIndexOutOfBoundsException: 65535     at de.thetaphi.forbiddenapis.asm.ClassReader.readLabel(Unknown Source)     at de.thetaphi.forbiddenapis.asm.ClassReader.a(Unknown Source)     at de.thetaphi.forbiddenapis.asm.ClassReader.a(Unknown Source)     at de.thetaphi.forbiddenapis.asm.ClassReader.b(Unknown Source)     at de.thetaphi.forbiddenapis.asm.ClassReader.accept(Unknown Source)     at de.thetaphi.forbiddenapis.asm.ClassReader.accept(Unknown Source)     at de.thetaphi.forbiddenapis.Checker.checkClass(Checker.java:602)     at de.thetaphi.forbiddenapis.Checker.run(Checker.java:619)     at de.thetaphi.forbiddenapis.maven.AbstractCheckMojo.execute(AbstractCheckMojo.java:444)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)     ... 21 more [ERROR]   ```","closed","","MEZk","2016-08-06T18:17:21Z","2016-08-12T03:25:18Z"
"","3512","Issue #2427: added customizable javadoc tokens","Issue #2427.  Added acceptable and required javadoc tokens. Code was mostly copied from `TreeWalker` which this class is mimicking. All javadoc checks required `getRequiredJavadocTokens` to be added.  Questions: 1) The issue made note of an [area that had documentation on this already but was removed](https://github.com/checkstyle/checkstyle/blob/fff24e89001ce2ad9c30d1f573639cd640183669/src/xdocs/config_javadoc.xml#L978). Was that documentation valid that the 2 tokens are optional? Are there any other optional tokens for the javadoc checks? I didn't see anything jump out when glancing over.  Some things to note: 1) We needed some place to validate that the javadoc tokens set for the check are correct and require us to be able to throw a `CheckstyleException`. I did this in `init` and so had to add the exception to the throws clause, and this is why there is an update in `FallThroughCheck`. I don't see any other place we can do this. I brought this up before where [none of the `AbstractCheck` methods allow throwing an exception](https://github.com/checkstyle/checkstyle/blob/25a37e5049b7816b34c552899841a978efc37a63/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java#L126-L169), even `CheckstyleException` and I don't think we should use runtime exceptions. If your ok with it, I think we should change all the methods to be able to throw `CheckstyleException`s.  2) Javadoc's `walk` method changed slightly because I think there is a bug with `waitsForProcessing` and when we loop `while (curNode != null && toVisit == null) {` more than once since the value isn't updated. I will try to find a test to show this and add it.  3) `AtClauseOrderCheck` changed slightly to not loop through the children, but to use the visit token's power. This would be helpful if the token appears in other places than a child of the root.","closed","","rnveach","2016-10-23T23:42:20Z","2016-11-01T20:07:05Z"
"","3038","Issue #2218: Move initialization of suppressions list in SuppressWarningsHolder","Issue #2218","closed","","Vladlis","2016-03-14T20:44:48Z","2016-03-16T18:32:42Z"
"","3579","Issue #2068: updated RedundantModifier documentation for final in enums","Issue #2068  Updated documentation and added test to show.","closed","","rnveach","2016-11-24T18:34:30Z","2016-11-26T05:56:05Z"
"","3031","Issue #1487: workaround for cobertura at CheckstyleAntTask.java","Issue #1487   to get 100% coverage","closed","","romani","2016-03-12T14:44:45Z","2016-03-12T17:12:39Z"
"","3018","Issue #1487: Improve code coverage of CheckstyleAntTask","Issue #1487  Current coverage is [here](http://vladlis.github.io/reports/cobertura/com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.html).  Strange thing is that in `testEmptyConfig()` here `checker` is null: https://github.com/Vladlis/checkstyle/blob/cb9979644b598156ca1155a76cb61ae1aac6c2e0/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java#L334  but it still goes inside `if` ![-checkstyle - -projects-checkstyle - checkstyle - -projects-checkstyle-src-main-java-com-puppycrawl-tools-checkstyle-ant-checkstyleanttask java - intellij idea 15 0 1](https://cloud.githubusercontent.com/assets/9678372/13618454/3a72d976-e595-11e5-8c2f-463397805d6e.png)","closed","","Vladlis","2016-03-08T22:22:17Z","2016-03-13T17:13:13Z"
"","3008","ClassNotFoundException when using inherited exception (regression to issue #1192 fix)","Issue #1192 was fixed in Checkstyle 6.8 with this code change:    https://github.com/checkstyle/checkstyle/commit/18570b7a08376b5b823bd67bfd93b79e0c4fbb1b  Which was later overwritten by this change, which was a fix for issue #1555 (Fix issues reported by IntelliJ IDEA inspections in Checkstyle code):    https://github.com/checkstyle/checkstyle/commit/80ab48f859c1f16835dbd41afe42414b41969e2f  I'm not exactly sure what the the right answer is here.  It seems that #1555 was complaining ""try statements which catch java.lang.Error or any subclass and which do not rethrow the error.""  That's good advice generally, but in this case there is a specific case where doing so will result in an issue (#1192).  It seems to me that another option for fixing #1192 would have been to address the underlying NoClassDefFoundError.  Unfortunately I don't know enough about how class loading works in Checkstyle to propose anything.","closed","approved,","allenhadden","2016-03-05T13:16:17Z","2016-03-06T13:11:17Z"
"","3055","Issue #1064: fixed slow javadoc antlr parsing","Issue #1064 Description of fix is at: https://groups.google.com/d/msg/checkstyle-devel/Uyu-vO50eAQ/CdKYGSX-CAAJ  Basically, we are injecting code into the ANTLR to skip calling `adaptivePredict` which is causing the slowdown.  I implemented this change in my project's CS and saw no negative effects as is and when removing or changing javadocs to report violations. I did see a drop in runtime from 70 seconds to 20 seconds. I will run regression.  Issue is still waiting approval.","closed","","rnveach","2016-03-23T15:40:52Z","2016-05-01T03:03:04Z"
"","3633","Issue #3600: fix chmod","Issue   https://github.com/checkstyle/checkstyle/issues/3600","closed","","MaksimP","2016-12-09T23:28:30Z","2016-12-10T00:14:40Z"
"","3360","Rule for enforcing number of blank lines near class declarations?","Is there a Checkstyle rule for enforcing 0, 1, 2, etc. blank lines near Java class declarations?  E.g., some coders write:  ``` public class Hello {   private int x;    public Hello(int x) {     this.x = x;   } } ```  while others write:  ``` public class Hello {    private int x;    public Hello(int x) {     this.x = x;   }  } ``` ##","open","incomplete,","mcandre","2016-07-19T20:03:46Z","2016-12-14T18:17:14Z"
"","3258","LineContinuationCheck unable to handle wrapping @return in Javadoc in Intellij","Intellij has the option of aligning the `@param` description, but not the `@return`. The following gives us a LineContinuation error (on second line of `@return`).  Expected no violation, or an option to ignore in JavadocTagContinuationIndentation.  ``` $ cat Test.java package com.example.test.checkstyletest;  public class Test {    /**    * Intellij has options to align the @param tag description, but not the @return. Checkstyle is    * fighting the Intellij formatter with a Javadoc    *    * @param - This is a really long param description. It will correctly indent due to an option in    *          the code formatter to align the description indentation.    * @return This is a really long return description. There is no option to align the at-return    * so we get a JavadocTagContinuationIndentationCheck on this line.    */   public boolean testMethod(boolean isTrue) {     return isTrue;   } }  $ cat config.xml                 $ java -jar checkstyle-6.19-all.jar -c config.xml Test.java Starting audit... [ERROR] p:\dev\checkstyletest\Test.java:12: Line continuation have incorrect indentation level, expected level should be 4. [JavadocTagContinuationIndentation] Audit done. Checkstyle ends with 1 errors. ```","closed","","PatrickDattilio","2016-06-08T14:06:36Z","2016-07-10T13:55:44Z"
"","3217","CommentsIndentation Check false-positive on a method chain","Input:  ``` java class Input {     void foo() {         getClass()             .getName()             .isEmpty();             // comment     } } ```  Output:  ``` vlad@vlad-N61PC-M2S ~/cli $ java -jar checkstyle-6.18-all.jar -c my_check.xml Test.java Starting audit... [ERROR] /home/vlad/cli/Test.java:6: Comment has incorrect indentation level 12, expected is 8, indentation should be the same level as line 3. [CommentsIndentation] Audit done. Checkstyle ends with 1 errors. ```  Config:  ``` xml                       ```  Expected - no violations.","closed","","Vladlis","2016-05-25T19:58:55Z","2016-05-28T06:38:00Z"
"","3105","IndentationCheckTest: 'exp' in input files are out of sync with test","Indentation's test currently isn't validating that the expected column warnings (`exp:XXX`) in the input file match what are in the test file and flagged by the check. All we do is make sure they exist and that is it, so this is causing the 2 to be out of sync.  We should enforce a 3 way compare between the test's, the check's, and the input's violations or remove the expected column positions from the input and stick to a 2 way compare between the test and the check.  We still write the expected columns even if there is no violation, making it impossible to validate that they are correct. So unless we make changes to the check to validate them, we should atleast remove them for the non-warnings.  Example:  https://github.com/checkstyle/checkstyle/blob/ccdc3c09c500ccd31d56e4d6ed9c2d86edf2e9f1/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java#L902  > final String fileName = getPath(""InputInvalidClassDefIndent.java""); > ... > ""145: "" + getCheckMessage(MSG_ERROR, ""}"", 6, 8),  https://github.com/checkstyle/checkstyle/blob/ccdc3c09c500ccd31d56e4d6ed9c2d86edf2e9f1/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidClassDefIndent.java#L145  > }); //indent:6 exp:8,12 warn  Test file warns expect the column to be ""8"", but input file has written that it expects the columns to be ""8, 12"". It should just be ""8"" like the test file.","closed","miscellaneous,","rnveach","2016-04-15T18:01:48Z","2016-04-18T17:28:17Z"
"","3115","RedundantModifier mistakenly flags public constructor in inner class of an interface","In the following snippet, RedundantModifier flags SingleUser is not requiring a public constructor, in spite of the class being public in ModuleItem.  ``` public interface ModuleItem {     abstract class BaseModuleItem implements ModuleItem {         @NotNull private final Module mModule;          protected BaseModuleItem(@NotNull Module module) {             mModule = module;         }     }      @Immutable     class SingleUser extends BaseModuleItem {         public SingleUser(@NotNull Module module) {             super(module);         }     } } ```","closed","","cesar1000","2016-04-18T04:30:27Z","2018-02-27T14:51:04Z"
"","3815","Indentation: verify all lines are being validated","In indentation, we verify violations for lines where indentation is correct. We currently have no way to verify we are validating a line that is formatted correctly. Because of this, we can't tell the difference between a line that is correctly indented or a line that is being wrongly ignored.  I have a commit in my branch [indent-non-violations](https://github.com/rnveach/checkstyle/commits/indent-non-violations) that verifies we are examining indentation for all lines of code in our test input files. Currently it only prints issues to the console, and as of c232625893d95eb7c71a926a9b96556f04d56d27 there are 145 issues in the testing of our input files, some of which have issues filed already.  We should find a way to incorporate this into our testing, fix the current issues (where possible), and verify new changes don't break this rule.","open","indentation,","rnveach","2017-02-10T15:56:01Z","2017-03-15T13:40:56Z"
"","3725","doc: make example for IllegalToken with label usage detection","in http://checkstyle.sourceforge.net/config_coding.html#IllegalToken make exmaple on how to forbid label usage (goto analog).  http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle /api/TokenTypes.html#LABELED_STAT","closed","miscellaneous,","romani","2017-01-14T00:46:03Z","2017-01-14T00:46:46Z"
"","3155","Hide Utility Class Constructor rule must be avoided for @SpringBootApplication","In advanced spring boot application, we need a class with main method, which is the boot class for the whole application. This can be identified by an annotation `@SpringBootApplication`.  The checkstyle rule ""Hide Utility Class Constructor"" complains this as an error, this should be smart enough to identify the actual utility class. So, this rule should avoid this class.  **Eg: Boot Class**  ``` @SpringBootApplication public class MyApplication {     public static void main(String... args) {         final SpringApplication springApplication = new SpringApplication(MyApplication.class);         springApplication.run(args);     } }  ``` ##","closed","","senthilaru","2016-05-03T15:20:31Z","2016-11-16T02:40:26Z"
"","3462","ImportControl should have property which allows to validate specified file path","ImportControl should have parameter (atribute for `` element) which allows user to force the check to validate only classes which are in the specific path. Proposal attribute name is ""path"". Attribute type should be regexp pattern.  Example of how to configure the check to validate only classes which are located in com.puppycrawl.tools.checkstyle package and which  file path matches  the regexp `^.*[\\/]main[\\/].*$`. Proposal:  ``` xml      ...          ...  ```  In documentation we need to show how to make two configurations for `main` and `test` areas of code.  In scope of this issue we need to split configuration into two and make rules for `main` code more strict  This will allow us to restrict usage of Guava library (#3433) in main code and keep freedom to use convenient methods in test area. ##   UPDATE: final implementation made config be like:  ```                             ```   --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/38004622-importcontrol-should-have-parameter-which-allows-to-validate-specified-file-path?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","new feature,","MEZk","2016-09-23T12:44:17Z","2017-01-22T13:06:26Z"
"","3084","Checkstyle crashes when it encounters a syntax error","If, for example, there is a file called `Fake.java` that has non-java content, Checkstyle will crash with an exception, and ignore all other files that it hadn't gotten around to yet.  ``` com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing [...]\Fake.java     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:282)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:276)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:119) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: NoViableAltException occurred during the analysis of file [...]\Fake.java.     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:203)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:80)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:266)     ... 2 more Caused by: [...]\Fake.java:1:1: unexpected token: Fake     at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:180)     at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:453)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:185)     ... 4 more Checkstyle ends with 1 errors. ```  I think it would be better to emit an Error as output, and move on to the next file, rather than crash.  FWIW - I'm on Windows, and using checkstyle 6.15","closed","","dylemma","2016-04-07T19:25:45Z","2016-04-07T19:40:58Z"
"","3946","code cleanup: minimize future xdoc changes","if new token is added diff looks like: ```  SUPER_CTOR_CALL.  + href=""apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#SUPER_CTOR_CALL"">SUPER_CTOR_CALL, + IMPORT. + href=""apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#IMPORT"">IMPORT, + STATIC_IMPORT. ```  it will be good if ""."" will be located on new line , so any future appending of tokens did not change existing lines.  Example: https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_annotation.xml#L83  changes should be done to all xdoc files that have Checks Tokens sets - https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/  Can we enforce this rule by UT ? as we already do validation for tokens set in Xdoc.  ATTENTION: a lot of changes are expected, please split fix in few PRs (each xdoc file in separate PR as minimum)","closed","easy,","romani","2017-03-07T01:08:11Z","2020-05-30T12:08:33Z"
"","3304","doc: fixed checkstyle download url","Identified as an issue at https://github.com/checkstyle/checkstyle/issues/3300#issuecomment-228360821  This is the same download URL that web-tester uses.","closed","","rnveach","2016-06-24T14:43:59Z","2016-06-24T16:05:57Z"
"","3843","Code coverage is not working for certain classes in checkstyle","Identified and confirmed in https://github.com/checkstyle/checkstyle/pull/3842  Cobertura code coverage it not producing any results for the DesignForExtensionCheck. ![coverage1](https://cloud.githubusercontent.com/assets/5427943/23094682/a00731fa-f5cb-11e6-9d31-5584f4349544.png)  When having travis print out `target/site/cobertura/coverage.xml` it confirms no results for that check but results for the other checks. https://travis-ci.org/rnveach/checkstyle/builds/202961252#L4174-L4192  When testing EclEmma on master's code, I see 2 lines missing branch coverage for this check.","closed","miscellaneous,","rnveach","2017-02-18T16:56:50Z","2017-02-26T18:43:58Z"
"","3234","ClassDataAbstractionCoupling : Add a excludeClassesRegexps property","I've quite a few check because my classes are creating different Exception. Would be nice to be able to excluse .*Exception in a pattern like attribut ##","closed","easy,","TehBakker","2016-05-31T14:56:01Z","2017-04-06T20:26:58Z"
"","3098","UnusedImports's processJavadoc doesn't work for public fields and nested classes","I'm using checkstyle's check UnusedImports with processJavadoc flag on. Consider the following code:  ``` import com.example.SomeEnumType import com.example.SomeClass  /** @param value Value to process. Its type is required to be of {@link SomeEnumType#A} */ void processValue(SomeClass value) {} ```  The javadoc in the above is referencing class SomeEnumType's internal field, but checkstyle still reports the import ""com.example.SomeEnumType"" as unused.  The same occurs if javadoc would refer to SomeEnumType's inner class, e.g. `{@link SomeEnumType.Strategy}`  Update: The problem really occurs with inner classes only. When type field's are referenced, it works ok. ##","open","javadoc,","paf001","2016-04-14T09:40:24Z","2017-09-02T22:23:59Z"
"","3190","CheckstyleException Caused by: java.util.NoSuchElementException at com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.leaveToken","I'm occasionally, not 100% reliably reproducible, but regularly enough (like it occurs every now and then, not just once) seeing the error below, in the Error Log of Eclipse when using eCS 6.16.0.  I've not yet seen it on the CLI when running CS through mvn, but that's likely just because I run that less often than workspace rebuilds in E.. ;-) I don't see how this could be an eCS bug, and must suspect this is something not quite right somewhere in CS core, do you agree?  Perhaps just seeing this means something to you, and you could figure out a way to ""harden"" respective CS code to prevent this? (The XMLStreamNormalizedNodeStreamWriter.java file under check causing this is OSS, so you may be able to reproduce it locally if you really want and have the time; let me know if you want details how to obtain this.)  Unless you have reason to believe that some specific change likely already fixed this in latest CS version, of course.  ``` com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing /home/vorburger/dev/ODL/git/yangtools/yang/yang-data-impl/src/main/java/org/opendaylight/yangtools/yang/data/impl/codec/xml/XMLStreamNormalizedNodeStreamWriter.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:319)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:275)     at net.sf.eclipsecs.core.builder.Auditor.runAudit(Auditor.java:159)     at net.sf.eclipsecs.core.jobs.AuditorJob.runInWorkspace(AuditorJob.java:82)     at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:39)     at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55) Caused by: java.util.NoSuchElementException     at java.util.ArrayDeque.removeFirst(ArrayDeque.java:280)     at java.util.ArrayDeque.pop(ArrayDeque.java:517)     at com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.leaveToken(AbstractTypeAwareCheck.java:178)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyLeave(TreeWalker.java:379)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:481)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:305)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:185)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:80)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:339)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:309)     ... 5 more  ``` ##","open","","vorburger","2016-05-18T08:21:30Z","2016-12-14T18:17:11Z"
"","3414","SuppressWithNearbyCommentFilter: odd interplay between checkFormat and messageFormat","I'm not sure the SuppressWithNearbyCommentFilter check is working correctly.  What I'm trying to do is suppress warnings for a specific check _and_ with a specific message.  The implementation of Tag.isMatch() in SuppressWithNearbyCommentFilter seems to indicate that I can only do one or the other.  That is to say, I'd prefer if checkFormat and messageFormat are both set on the module, both must match.  Leaving checkFormat off defaults to a regex of "".*"" and so messageFormat is not respected.  I needed to set checkFormat to a pattern that will never match a check name for messageFormat to get used.  (This took me a couple hours of frustruction to figure out.)  For example, I would like to suppress a shared ImportControl check, but only when the message relates to com.sun.javadoc.  The other imports that are prohibited should still be enforced.  ``` xml                                                                 ```  All my files start with ""some comment text"" in the header, so this should disable import warnings for com.sun.javadoc in this one project.  However, the code for isMatch from SuppressWithNearbyCommentFilter below matches (filters) an event if only the check name matches (tagCheckRegexp).  I believe the ""else if"" should actually be moved up.  ``` java     public boolean isMatch(AuditEvent event)     {         int line = event.getLine();         boolean match = false;         if ((line >= this.firstLine) && (line = this.firstLine) && (line","open","","eric-milles","2016-08-12T21:16:20Z","2016-12-14T18:16:54Z"
"","3330","NoWhitespaceAfter: add ability to enforce no whitespaces in array brackets","I'm not sure exactly how to classify this one.  I believe this is a request for new functionality similar to ParenPad or GenericWhitespace.  I'd like to be able to check that array defs and uses do not contain extra whitespaces.  I can use this to check for space between the ident and brackets.  ``` xml                                                                        ```  However, to check for some of these things, I am not finding the necessary options in NoWhitespaceAfter and NoWhitespaceBefore.  Looking at the AST, I don't think there is a good token type to request be added, since INDEX_OP is used for the space between the ident and left bracket.  ``` java class ArraySubscript {     {         String[ ] array = {""one"", ""two""}; // VIOLATION -- want no space after opening '[' in array declarator          String s = array[ 0 ]; // 2 VIOLATIONS -- want no space after opening '[' and no space before closing ']' in index operation          array[ 0 ] = ""value""; // 2 VIOLATIONS -- want no space after opening '[' and no space before closing ']' in index operation     } } ```  This doesn't look like it would be easy to find with regexes either, since we have so many string literals that contain square brackets followed by spaces.","closed","","eric-milles","2016-06-28T22:35:26Z","2016-09-11T00:08:50Z"
"","3440","new Check: single line annotation location","I'd love to have [AnnotationLocation](http://checkstyle.sourceforge.net/config_annotation.html) extended in a way that the following code would fail:  ``` java @NonNull private List names = new ArrayList(); ```  Since it should be   ``` java @NonNull private List names = new ArrayList(); ```  Until version 7.1.1 this is not possible. You can only white list the latter sample but not tell the check to fail on the first example.  update: AnnotationLocation can not be updated as it have 3 properties that allowSamelineXXXXXX . So update have new option that will demand singleline will looks weird in Checkdesign. So new check have to be created. ##","closed","new module,","vanniktech","2016-09-12T10:39:44Z","2017-08-28T21:35:10Z"
"","3242","Suppressions that don't suppress anything should cause violations","I'd like to fail my build if the checkstyle suppressions configuration contains suppressions that are not longer needed so that I can force people to remove the suppressions when they are no longer needed. I'm not sure if having them cause violations is the right way to do that but it was the first guess I could come up with. ##","open","approved,","nik9000","2016-06-02T13:55:02Z","2019-10-09T06:10:06Z"
"","3832","New Check for assuring empty lines between method declarations","I'd like to check that between method declarations a new line is inserted. Given the class below:  **Failing class**  ```java public class Test {   public void foo() {    }   public void abc() {    } } ```  I'd expect the check to raise a warning since a new line should be inserted between the `foo` and the `abc` method.  **Non-Failing class**  ```java public class Test {   public void foo() {    }    public void abc() {    } } ```  I haven't found any check to do this currently. Are you open adding a new check for this one?","closed","","vanniktech","2017-02-14T17:12:36Z","2019-05-20T11:33:02Z"
"","3009","New check: LambdaParameterName","I would like to propose a new check _LambdaParameterName_ for the naming convention on lambda arguments. Just like [ParameterName](http://checkstyle.sourceforge.net/config_naming.html#ParameterName), it would be a subclass of `AbstractNameCheck` and have a `format` property.  Having this check would allow for a more precise definition of the naming conventions. Currently, lambda arguments must follow the same naming convention as method arguments. But some people prefer to make a distinction between the two, so that one knows which parameter came from the enclosing method and which from the lambda expression:  ``` java public void method(Person pPerson) {   printAdultsWithSameGender(roster,     (Person p) -> p.getGender() == pPerson.getGender() && p.getAge() >= 18   ); } ```  For compatibility reasons, we should probably add a new property `ignoreLambdas` to the existing _ParameterName_ check which is by default set to `false`. Then people can set it to `true` when they introduce the new check to their rule sets. ##","closed","","tsjensen","2016-03-05T13:28:42Z","2018-07-01T14:55:48Z"
"","3468","JavadocStyle: check if javadoc starts with an uppercase letter","I would like a new feature in `JavadocStyle` where it checks that if the first word of the JavaDoc starts with a letter, it is capitalized. This check already verifies if the JavaDoc contains a period of some kind. Periods ensures that it is a sentence, and in most languages, proper sentences usually start with an uppercase letter.  ``` $ cat TestClass.java public class TestClass {     /** this is a method. */     void method1() {}     /** 101 leagues under the sea. */     void method2() {}     /** this is a method. */     void method3() {} }  $ cat TestConfig.xml                        $ java -jar checkstyle-7.1.1-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ```  I expect violations on `method1` and `method3` because the first word of the sentence, `this`, is not capitalized. There should be no violations if the user wrote `This` in the JavaDoc. `method2` has no violation because it's first word `101` doesn't start with a letter. ##","open","javadoc,","rnveach","2016-09-26T16:19:58Z","2019-09-17T15:09:03Z"
"","3469","JavadocMethod: check for duplicate throws annotations","I would like a new feature in `JavadocMethod` where it checks that annotations like `@throws` are unique and don't repeat the same exception. This check already verifies that the tag exists if the method declaration calls for it. I recently found a mistake in one of my JavaDocs where I duplicated a `@throws Exception` tag twice. I'm thinking this somehow happened during a rebase, and didn't notice it at the time. because checkstyle didn't print any error about this. Currently, the check does check for duplicate `@return` and `@param` annotations, so it seems logical to extend this to the `@throws` annotation too.  ``` $ cat TestClass.java public class TestClass {     /**     * @param a One.     * @param a Two.     * @return One.     * @return Two.     * @throws Exception One.     * @throws Exception Two.     */     int method(String a) throws Exception {         return 0;     } }  $ cat TestConfig.xml                        $ java -jar checkstyle-7.1.1-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:4:7: Unused @param tag for 'a'. [JavadocMethod] [ERROR] TestClass.java:6:7: Duplicate @return tag. [JavadocMethod] Audit done. Checkstyle ends with 2 errors. ```  The 2 violations are correct, but I was also expecting a violation for line 8's `@throws Exception Two` as it is a duplicate of line 7 and is therefore unneeded. ##","open","javadoc,","rnveach","2016-09-27T13:51:48Z","2017-09-02T22:24:00Z"
"","3718","NoWhitespaceBefore: Add support for varargs","I was surprised to see that NoWhitespaceBefore does not support varargs: ``` $ javac Test.java  $ cat Test.java public class Test {     public static void main(String ... args) {} // Would like to have a violation here } ```  There's no easy regex for this, so it would be nice to have this addition.","closed","new feature,","cypai","2017-01-11T23:33:04Z","2017-02-11T02:50:03Z"
"","3317","Build fails on german machine","I tried to send this to your mailing (first checkstyle-devel, then checkstyle), but the links provided on the http://checkstyle.sourceforge.net/mail-lists.html page seem to be wrong - at least I only get ""address does not exist"" error messages when subscribing or just posting.  So I post the bug here:  one of your unit tests fails on my (german) linux machine:  ``` $ locale LANG=de_DE.UTF-8 LANGUAGE=de_DE:en LC_CTYPE=""de_DE.UTF-8"" LC_NUMERIC=de_DE.UTF-8 LC_TIME=de_DE.UTF-8 LC_COLLATE=""de_DE.UTF-8"" LC_MONETARY=de_DE.UTF-8 LC_MESSAGES=""de_DE.UTF-8"" LC_PAPER=de_DE.UTF-8 LC_NAME=de_DE.UTF-8 LC_ADDRESS=de_DE.UTF-8 LC_TELEPHONE=de_DE.UTF-8 LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=de_DE.UTF-8 LC_ALL= ```  $ LC_ALL=C git status On branch checkstyle-6.19 nothing to commit, working directory clean  ``` $ mvn install [...]  Failed tests:    CheckerTest.testMultipleConfigs:665->BaseCheckTestSupport.verify:126->BaseCheckTestSupport.verify:134->BaseCheckTestSupport.verify:162 error message 0 expected: but was:  Tests run: 1830, Failures: 1, Errors: 0, Skipped: 1  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 04:57 min [INFO] Finished at: 2016-06-27T08:15:53+02:00 [INFO] Final Memory: 48M/694M [INFO] ------------------------------------------------------------------------ ```  ```                                                                                                                                                                                                                                                                                                                       but was:     at com.puppycrawl.tools.checkstyle.CheckerTest.testMultipleConfigs(CheckerTest.java:665) ]]>                                                                                  ```","closed","high demand,","ctolkmit","2016-06-27T06:25:02Z","2016-07-31T02:51:59Z"
"","3489","Checker Cache invalidated falsely on load in second run due to external resources","I tried populating the cache file with a modified CS run with all files because of #3488, to verify another issue. During debugging, I noticed all files were being reported as not in the cache even though I could verify them in my cache file. The cache file was being invalidated in the beginning due to: https://github.com/checkstyle/checkstyle/blob/4b7adec5ae396e24d3d0bf0d790919a45bac5421/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java#L115-L120 We always put in the config hash during a load. My run was saying the config hash key didn't exist on load.  After searching it turns out this is happening because external resources have changed and we clear out the entire cache and don't put the config hash back in to make it a valid cache file: https://github.com/checkstyle/checkstyle/blob/4b7adec5ae396e24d3d0bf0d790919a45bac5421/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java#L233  When we clear the cache file, we have to put the config hash back in, otherwise it won't be a valid cache file.","closed","approved,","rnveach","2016-10-02T13:35:57Z","2016-10-15T05:06:51Z"
"","3504","CheckStyle 6.18: EqualsAvoidNullCheck no longer complains about chained method calls ending with equals","I saw this while trying to upgrade from 6.7 to 6.18.  EqualsAvoidNullCheck no longer complains about constructs of the form  ``` $ cat config.xml                                    $ cat Test.java  public class Test {     public void demo() {         if ( var.getFoo().getBar().equals( ""someString"") ) {         }     } }  $ java -classpath checkstyle-7.6-all.jar com.puppycrawl.tools.checkstyle.Main -c config.xml Test.java  Starting audit... Audit done. ```  Yes, I realize that in principle  that var.getFoo() could be null  and thus you would get an NPE anyway, but in legacy code bases this construct is still common (sigh) and should be flagged, no?  Can the old behavior be restored?","open","approved,","dmgob","2016-10-14T18:47:14Z","2017-08-20T19:33:29Z"
"","3605","Set Load external DTD feature to be enabled","I realize this is a somewhat odd request, but here it goes. In our project (Android OS) we [use ENTITY in our config](https://android.googlesource.com/platform/prebuilts/checkstyle/+/master/android-style.xml) to allow composing our config files from many different files as some subprojects of Android OS have different style requirements. This normally works great with Checkstyle, however our default `java` installation has `load-external-dtd` feature disabled (due to security reasons). This is a request to add ` final SAXParserFactory factory = SAXParserFactory.newInstance(); factory.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", true);`  to `com.puppycrawl.tools.checkstyle.api.AbstractLoader`.  This would not affect anyone, except to allow us to keep using Checkstyle without any downstream modifications.   both features load-external-dtd and external-general-entities are normally default set to true. Our company has set their java defaults to false as it can lead to cross scripting attacks if not handled correctly. load-external-dtd feature allows to load external DTD into a an XML document and external-general-entities feature allows to these these external DTDs in elements. Using these two we are able to compose configuration files from multiple XML files. Since both of these features are enabled by default in default java set ups it should be a no-op for most checkstyle users.  https://xerces.apache.org/xerces2-j/features.html#nonvalidating.load-external-dtd  Execution is done by CLI - https://android.googlesource.com/platform/prebuilts/checkstyle/+/7de5d4001767b7929fae914e088a724af9597c1a/checkstyle.py#164  --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39700319-set-load-external-dtd-feature-to-be-enabled?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","liutikas","2016-12-02T00:28:34Z","2019-02-25T05:46:39Z"
"","3671","remove deprecated property maxLineLength from LeftCurlyCheck","I notice that https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml#L55 specifies a maxLineLength property for LeftCurly, but http://checkstyle.sourceforge.net/config_blocks.html#LeftCurly says it's deprecated.  If it's OK to remove, I can submit a pull request.  Thanks.  -DB","closed","breaking compatibility,","dbyron0","2016-12-20T18:14:46Z","2017-08-04T19:05:03Z"
"","3754","Add new check WhitespaceAfterLastMemberCheck","I need to check if there is a whitespace after last member of the class, is there a way to do this with one of the existing check? Because I did not find a checkstyle check that fulfills my requirements I wrote this check as a proposal of the solution(it is work in progress, it does not adhere to commit rules etc).  Would it be possible to add this kind of check to checkstyle?","closed","","liscju","2017-01-24T22:36:33Z","2017-01-25T14:39:24Z"
"","3002","Regexp java 8 issue","I get a false positive for this line of code:  ``` import java.util.Date; import java.util.List;  public class ItemService {      public void getAlreadyExistsReasonCode(Item item, List items) {         Date minPublicFrom = items.stream().map(Item::getPublicFrom).min(Date::compareTo).get();     } } ```  with this checkstyle.xml:  ```                                                                        ```  java -jar checkstyle-6.16.1-all.jar -c checkstyle.xml ItemService.java  Results in this: Line matches the illegal pattern ' User:|Date:|Time:|Created by IntelliJ IDEA.|Copyright are autogenerated comments - are noise - remove it'. [Regexp]","closed","","clausfod","2016-03-04T09:56:01Z","2016-03-05T22:18:40Z"
"","3997","Issue #3985: Moved all input files to new folder emptylineseparator","I fixed the issue #3985. It passed the mvn clean verify.","closed","","anudeepti2004","2017-03-13T15:31:35Z","2017-03-18T17:04:19Z"
"","3859","Eclipse Checkstyle - The following solutions are not available checkstyle plug-in 7.3.0","I can't install checkstyle I keep getting  The following solutions are not available checkstyle plug-in 7.3.0  The same with other plugins too.  Help -> Eclipse Marketplace -> SearchBox (checkstyle) -> then I recieve  The following solutions are not available: Checkstyle Plug-in 7.3.0 (id=net.sf.eclipsecs.feature.group, site=http://eclipse-cs.sourceforge.net/update/)","closed","","1Mark","2017-02-24T17:22:14Z","2017-02-24T18:19:27Z"
"","3016","Support calculating and reporting metric-like values, not just checking against threshold","I am working on a Learning Analytics plugin for Eclipse, that collects and visualises data about coding activities, like line count, test success and failure, use of debugging tools etc. Some of the data is shown in a plot, so you can see how things change over time, and the idea is identify trends and signs of good (or bad) coding habits, breakdowns etc. Checkstyle provides interesting feedback about characteristics of code that affect quality, that would be useful to collect in the same manner. However, checkstyle only gives feedback when a characteristic is within/outside certain limits, and does not report the value(s) themselves, other than in the text message when a rule is violated.  I propose to introduce means for calculating and reporting values within a Check, instead of just logging issues, so that listeners or other tools can provide other kinds of feedback, like plot complexity over time and compare with a benchmark (pre-made solution). It needn't be very complex and can be limited to simple values. E.g. a Check could implement a generic interface MeasureCheck with a method T getMeasure() that could be called to collect these measures for all classes and methods in project. Alternatively, AbstractCheck could add a logMeasure method that a Check can use to report interesting values during an audit, related to classes and methods. It should be possible for listeners or other objects to retrieve these values afterwards.","closed","","hallvard","2016-03-08T12:56:15Z","2016-03-08T13:18:05Z"
"","3372","module RightCurly can't parse option `alone_or_singleline`","I am using the Gradle checkstyle plugin on an Android project. `checkstyle.xml`:  ```                                                           ```  This is the output of `./gradlew checkstyleMain`:  ``` * What went wrong: Execution failed for task ':app:checkstyleMain'. > Unable to create a Checker: cannot initialize module TreeWalker - Cannot set property 'option' in module RightCurly to 'alone_or_singleline': unable to parse alone_or_singleline ```  If I set the option to `alone` or `same`, it works. [This page](http://checkstyle.sourceforge.net/property_types.html#rcurly), however, indicates that `alone_or_singleline` is a valid option.  _Expected:_ Checkstyle should work with the `alone_or_singleline` option property set on `RightCurly`.","closed","","trobalik","2016-07-27T18:52:22Z","2016-07-27T21:23:57Z"
"","3792","Can't override `-t` option for custom tree modules","I am planning to start looking into making new custom trees in another project. It would be very helpful if Checkstyle's CLI allowed printing those module's trees. Right now `TreeWalker` has a monopoly on the `-t`/`-T` options. Those options go directly to `TreeWalker` and there is no way to override the default for custom modules with their own trees. Viewing trees is very helpful when debugging the tree and making new modules for that tree. The only current way to do this without the CLI is to make print module.  I would like an option to override the default tree module and be able to select a different one. This is the current CLI example I am thinking of now: `-t -m MyCustomTreeModule`. Just like the configuration, it would work if the class is defined in the packages XML or if I specify the full classpath.  To make this more seamless, we might want to consider moving Checkstyle's tree specific code from `AstTreeStringPrinter` to the actual tree class (`TreeWalker` and `AbstractJavadocCheck`) and have `AstTreeStringPrinter` be a full utility class that any class can use for their own trees. Also make an API interface defining these special modules as AST Tree modules that support methods like `parse` and `print`.","closed","","rnveach","2017-02-02T21:36:24Z","2017-10-28T23:03:37Z"
"","3591","checkstyle and googlejavaformat conflicting rules","I am getting indentation checkstyle warning message for annotation class.  Attached is the java class and XML config files.  I am getting  `')' have incorrect indentation level 2, expected level should be 4` message.  This contradicts with GoogleJavaFormat rule. Please advise.  ``` $ javac PackageDimensions.java   /var/tmp$ cat PackageDimensions.java  public class PackageDimensions {    @SuppressWarnings(     {""unchecked"", ""deprecation""}   ) // violation   @Deprecated   private int height;    @SuppressWarnings(     {""unchecked"", ""deprecation""}   ) // no voilation   private int height2;    void foo () {     indentationOfBrace(       ""as"",       ""adsf""     ); // no violation   }    void indentationOfBrace(String v, String v2) {}  }  rivanov@p5510:/var/tmp$ cat config.xml                                                                                                                 $ java -jar checkstyle-7.3-all.jar -c config.xml PackageDimensions.java Starting audit... [ERROR] /var/tmp/PackageDimensions.java:5: ')' have incorrect indentation level 2, expected level should be 4. [Indentation] Audit done. Checkstyle ends with 1 errors. ```  original code looks like: ``` public class PackageDimensions {    @Digits(     integer = 8,     fraction = 2,     message =         ""Must be a numeric value with a maximum of 8 digits before decimal point and ""             + ""2 digits after decimal.""   )   @DecimalMin(value = ""0.00"", message = ""The decimal value can not be less than 0.00 digit."")   private BigDecimal height;  } ```  --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39598179-checkstyle-and-googlejavaformat-conflicting-rules?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","indentation,","z035079","2016-11-28T21:57:49Z","2017-02-16T03:48:58Z"
"","3218","Replace terms in WritingJavadocChecks wiki-page by terms from HTML specification","https://www.w3.org/TR/html4/ beginning/closing tag -> start/end tag singleton tag -> empty tag ##","closed","easy,","baratali","2016-05-26T09:17:24Z","2017-06-12T23:59:09Z"
"","3315","Distelli CI does not work with java8","https://www.distelli.com/checkstyle/builds/64485  I sent questions to support:  > https://www.distelli.com/docs/reference/distelli-build-environments > where is ""jdk_switcher"" tool > how it could be used for java ? https://www.distelli.com/docs/reference/build-language-reference#java > or it should be done by ""apt-get install .... oracle-8 ......"" in PreBuild","closed","miscellaneous,","romani","2016-06-26T19:20:08Z","2016-06-26T20:42:43Z"
"","3162","Pull #3162: Update version of commons-collections to 3.2.2(from 3.2.1) to fix security vulnerability CVE-2015-6420","https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-6420","closed","miscellaneous,","ghost","2016-05-08T12:10:42Z","2016-05-08T23:38:37Z"
"","3483","config: suppress cobertura Exceptions in output due to cobertura java…","https://travis-ci.org/checkstyle/checkstyle/jobs/164077160  Exception like:  ``` [WARN] Unable to instrument file /home/travis/build/checkstyle/checkstyle/target/generated-classes/cobertura/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.class java.lang.IllegalArgumentException: INVOKESPECIAL/STATIC on interfaces require ASM 5     at org.objectweb.asm.MethodVisitor.visitMethodInsn(Unknown Source) ~[asm-5.0.1.jar:5.0.1]     at org.objectweb.asm.ClassReader.a(Unknown Source) ~[asm-5.0.1.jar:5.0.1]     at org.objectweb.asm.ClassReader.b(Unknown Source) ~[asm-5.0.1.jar:5.0.1]     at org.objectweb.asm.ClassReader.accept(Unknown Source) ~[asm-5.0.1.jar:5.0.1]     at org.objectweb.asm.ClassReader.accept(Unknown Source) ~[asm-5.0.1.jar:5.0.1]     at net.sourceforge.cobertura.instrument.CoberturaInstrumenter.instrumentClass(CoberturaInstrumenter.java:161) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.CoberturaInstrumenter.instrumentClass(CoberturaInstrumenter.java:129) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.CoberturaInstrumenter.addInstrumentationToSingleClass(CoberturaInstrumenter.java:243) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.CodeInstrumentationTask.addInstrumentationToSingleClass(CodeInstrumentationTask.java:299) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.CodeInstrumentationTask.addInstrumentation(CodeInstrumentationTask.java:308) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.CodeInstrumentationTask.instrument(CodeInstrumentationTask.java:90) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.dsl.Cobertura.instrumentCode(Cobertura.java:74) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.InstrumentMain.instrument(InstrumentMain.java:82) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.InstrumentMain.main(InstrumentMain.java:99) [cobertura-2.1.1.jar:2.1.1] [WARN] Unable to instrument file /home/travis/build/checkstyle/checkstyle/target/generated-classes/cobertura/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.class java.lang.IllegalArgumentException: INVOKESPECIAL/STATIC on interfaces require ASM 5     at org.objectweb.asm.MethodVisitor.visitMethodInsn(Unknown Source) ~[asm-5.0.1.jar:5.0.1]     at org.objectweb.asm.ClassReader.a(Unknown Source) ~[asm-5.0.1.jar:5.0.1]     at org.objectweb.asm.ClassReader.b(Unknown Source) ~[asm-5.0.1.jar:5.0.1]     at org.objectweb.asm.ClassReader.accept(Unknown Source) ~[asm-5.0.1.jar:5.0.1]     at org.objectweb.asm.ClassReader.accept(Unknown Source) ~[asm-5.0.1.jar:5.0.1]     at net.sourceforge.cobertura.instrument.CoberturaInstrumenter.instrumentClass(CoberturaInstrumenter.java:161) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.CoberturaInstrumenter.instrumentClass(CoberturaInstrumenter.java:129) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.CoberturaInstrumenter.addInstrumentationToSingleClass(CoberturaInstrumenter.java:243) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.CodeInstrumentationTask.addInstrumentationToSingleClass(CodeInstrumentationTask.java:299) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.CodeInstrumentationTask.addInstrumentation(CodeInstrumentationTask.java:308) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.CodeInstrumentationTask.instrument(CodeInstrumentationTask.java:90) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.dsl.Cobertura.instrumentCode(Cobertura.java:74) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.InstrumentMain.instrument(InstrumentMain.java:82) [cobertura-2.1.1.jar:2.1.1]     at net.sourceforge.cobertura.instrument.InstrumentMain.main(InstrumentMain.java:99) [cobertura-2.1.1.jar:2.1.1] ```  ``` and: ```  [WARN] JavaNCSS got an error while parsing the java file /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java ParseException in STDIN Last useful checkpoint: ""com.puppycrawl.tools.checkstyle.TreeWalker.destroy()"" Encountered "" "":"" "": """" at line 458, column 45. Was expecting one of:     ""instanceof"" ...     "")"" ...     "","" ...     ""="" ...     "">"" ...     "">>="" ...     "">"" ...     ""","closed","","romani","2016-09-30T17:42:04Z","2016-09-30T18:16:02Z"
"","3616","Fix new TeamCity violations","https://teamcity.jetbrains.com/viewLog.html?buildId=940313&tab=Inspection&buildTypeId=Checkstyle_IdeaInspectionsPullRequest  >  Number of inspection errors 1255 is 1255 more than the provided threshold 0 Number of inspection warnings 1126 is 1126 more than the provided threshold 0   I believe this is because of the new release of TC. These violations must be fixed, or suppressed if needed, to continue development and using it as CI.  ````  Code maturity issues Deprecated member is still used (9)  Compiler issues Unchecked warning (Errors) (3)  Data flow issues Scope of variable is too broad (Errors) (18)  Declaration redundancy Method returns the same value (1) Redundant throws clause (Errors) (11) Redundant throws declaration (Errors) (11)  Dependency issues Class with too many transitive dependents (Errors) (7)  Encapsulation issues 'public' field (13)  General Annotator (2) Redundant suppression (Errors) (12)  Imports Unused import (965)  Java language level migration aids Usages of API which isn't available at the configured language level (Errors) (1183)  Javadoc issues Declaration has problems in Javadoc references (53) Unnecessary {@inheritDoc} Javadoc Comment (Errors) (1)  Method metrics Method with too many parameters (Errors) (2)  Naming conventions Instance method naming convention (1) Package naming convention (30)  Performance issues Method may be 'static' (51)  Probable bugs Result of method call ignored (1) Unused assignment (Errors) (6)  Serialization issues Non-serializable class with 'serialVersionUID' (Errors) (1) ````","closed","miscellaneous,","rnveach","2016-12-06T19:25:25Z","2017-04-13T23:56:17Z"
"","3042","Pull #3042: reenable two sevntu checks","https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/429","closed","miscellaneous,","Vladlis","2016-03-18T07:30:32Z","2016-03-18T15:52:10Z"
"","3670","add pgjdbc project at NoErrorTest group of tests","https://github.com/pgjdbc/pgjdbc Error is used as severity - https://github.com/pgjdbc/pgjdbc/blob/master/pgjdbc/pom.xml#L268  So could be used as noViolation project - https://github.com/checkstyle/checkstyle/blob/master/wercker.yml","closed","miscellaneous,","romani","2016-12-19T23:28:24Z","2017-01-10T02:41:28Z"
"","3888","google_checks: update to most recent version of style guide ( Feb 28, 2017 )","https://github.com/google/styleguide/commits/gh-pages/javaguide.html  have some changes, we need to cover them.  previous changed in style guide will be covered by #3755   I cached the page - http://checkstyle.sourceforge.net/reports/google-java-style-20170228.html  > followed by one or more statements (or, for the last statement group  no actions, just terminology extension.  > A switch statement for an enum type may omit the default statement group  we can not cover this requirements, as we can not distinguish types, enum values may look the same as static final String constants.   > The basic form is always acceptable. The single-line form may be substituted when the entirety of the Javadoc block (including comment markers) can fit on a single line. Note that this only applies when there are no block tags such as [@]return  point to cover - #4052 .  > At-clauses --> block tags  This is just change of terminology ([""block tags""](http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#javadoctags) is javadoc terminology), no actions are required","closed","miscellaneous,","romani","2017-03-01T13:38:26Z","2017-03-20T13:46:22Z"
"","3093","Pull #3093: Use DatatypeConverter#printHexBinary to convert byte array to hex String in PropertyCacheFile","https://github.com/checkstyle/checkstyle/pull/3092","closed","miscellaneous,","MEZk","2016-04-12T16:44:43Z","2016-04-13T21:01:15Z"
"","3939","Issue #3897: Splitted input test files for WhitespaceAfterCheckTest","https://github.com/checkstyle/checkstyle/issues/3897","closed","","Pedro12909","2017-03-06T01:49:33Z","2017-03-08T21:40:15Z"
"","3937","Issue #3897","https://github.com/checkstyle/checkstyle/issues/3897","closed","","Pedro12909","2017-03-05T22:58:52Z","2017-03-06T00:27:41Z"
"","3909","Issue #3897","https://github.com/checkstyle/checkstyle/issues/3897","closed","","Pedro12909","2017-03-04T00:18:23Z","2017-03-04T15:20:48Z"
"","3158","Issue #3157: Javadoc value tag can reference import","https://github.com/checkstyle/checkstyle/issues/3157  Javadoc `{@value}` tag references static constant and makes its value appear in the generated javadoc. Constant can be referenced either by fully qualified name `{@value java.util.Calendar#MONTH}` or by relative name `{@value Calendar#MONTH}` when corresponding import is present `import java.util.Calendar;`.  This PR fixes an issue with `UnusedImports` check which considered imports used in `{@value}` to be unused.","closed","","lutovich","2016-05-05T13:53:52Z","2016-05-05T16:15:20Z"
"","3245","Issue #1254: Fix JavadocVariableCheck when assigning a lambda as a field","https://github.com/checkstyle/checkstyle/issues/1254","closed","incomplete,","skimmedsquare","2016-06-04T06:40:02Z","2016-10-30T15:25:37Z"
"","3594","Unexpected loss of coverage for PropertyCacheFile.java","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java  Catch block is not covered : ```     private static byte[] loadExternalResource(String location) throws CheckstyleException {         byte[] content = null;         final URI uri = CommonUtils.getUriByFilename(location);          try {             .....         }         catch (IOException ex) {             throw new CheckstyleException(""Unable to load external resource file "" + location, ex);         }          return content;     } ```  noticed at https://travis-ci.org/checkstyle/checkstyle/builds/179591339","closed","miscellaneous,","romani","2016-11-29T03:10:17Z","2016-12-09T22:48:01Z"
"","3555","refactoring: CodeSelectorPModel do double copy of collectio in c-tor","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/gui/CodeSelectorPresentation.java#L51  not clear why ....  --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39298075-refactoring-codeselectorpmodel-do-double-copy-of-collectio-in-c-tor?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","easy,","romani","2016-11-16T18:57:55Z","2017-07-06T13:50:22Z"
"","3497","split Guard class into two","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/Guard.java  it serves two differend modes that are managed by null values in fields.  Task: create two classes from one to avoid checking for null. Names should be different ""Guard"" and named close to what they represent from XML.","closed","miscellaneous,","romani","2016-10-04T21:20:16Z","2016-10-24T02:03:59Z"
"","3764","refactoring: RightCurlyCheck code expression","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java#L174  ```     @Override     public void visitToken(DetailAST ast) {         final Details details = getDetails(ast);         final DetailAST rcurly = details.rcurly;          if (rcurly != null && rcurly.getType() == TokenTypes.RCURLY) {         ..... ```  Why rcurly variable could store non `TokenTypes.RCURLY` . I might miss smth, but expected code is  ```        .....         if (rcurly != null) {        ..... ```","closed","miscellaneous,","romani","2017-01-27T14:40:42Z","2017-01-27T20:12:04Z"
"","3538","Checker module should not implement MessageDispatcher","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/MessageDispatcher.java https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  Checker is RootModule only. it is non-sense for it to have public methods fireErrors, and all other method.","open","approved,","romani","2016-11-10T19:16:21Z","2021-12-22T04:50:03Z"
"","3545","api: LocalizedMessages class should be removed","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessages.java  just need to be removed. Simple collection should be used in class that want to keep violations.","closed","breaking compatibility,","romani","2016-11-11T14:26:54Z","2017-07-04T01:56:24Z"
"","3491","DetailAst class unclear logic in addChilld method","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java  ```     @Override     public void addChild(AST ast) {         clearBranchTokenTypes();         clearChildCountCache(this);         super.addChild(ast);         if (ast != null) {             ((DetailAST) ast).setParent(this);             getFirstChild().setParent(this);         } } ```  it is not clear why we need to do `getFirstChild().setParent(this); If not required, need to be removed. ##","closed","easy,","romani","2016-10-02T21:55:15Z","2017-03-19T18:06:37Z"
"","3666","remove deprecated getFilename menthod from FileContents","https://github.com/checkstyle/checkstyle/blob/master/config/findbugs-exclude.xml#L69  remove deprecated method in checkstyle 8.","closed","breaking compatibility,","romani","2016-12-18T02:17:43Z","2017-07-02T01:50:23Z"
"","3751","Config: forbid assert token by Illegal token Check","https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L223  Assert token should be added. Why we have two lines for tokens ?  It is override. Should be forbidden by XML schema.","closed","miscellaneous,","romani","2017-01-24T03:06:46Z","2017-02-16T04:29:10Z"
"","3574","Move DetailAST log away from AbstractViolationReporter","https://github.com/checkstyle/checkstyle/blob/25a37e5049b7816b34c552899841a978efc37a63/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java#L131-L141  This method is purely for Java and antlr checks to use, but it is located in a base abstract class used by filters and other things possibly never doing anything antlr related. It should be moved to a more logical place like `AbstractCheck`.","closed","breaking compatibility,","rnveach","2016-11-23T22:55:05Z","2017-07-06T05:25:22Z"
"","3556","Use Huntbugs tool in our build process","https://github.com/amaembo/huntbugs  we need to start to use it.","closed","medium,","romani","2016-11-16T19:27:12Z","2017-06-28T15:35:41Z"
"","3203","WhitespaceAround false negative on inline array","https://checkstyle.org/config_whitespace.html#WhitespaceAround  Using Checkstyle 6.18, with the config:  ``` xml                                              ```  The code   ``` java public class Foo {     public final int[] COLORS = new int[] { Color.BLACK};     //                                                 ^ doesn't report missing whitespace before } } ```  doesn't report that there is missing whitespace around `RCURLY`.  ``` bash $ java -jar ~/Downloads/checkstyle-6.18/checkstyle-6.18-all.jar -c config.xml Foo.java Starting audit... Audit done. ``` ##","open","approved,","jsotuyod","2016-05-20T15:42:07Z","2021-02-20T15:59:59Z"
"","3899","Indentation: google-java-format and Checkstyle disagree about switch block indentation","https://checkstyle.org/config_misc.html#Indentation  `[jplace@Jordans-MacBook-Pro checkstyle-playground]$ cat src/main/java/Main.java ` ``` public class Main {   /**    * Main for testing.    *    * @param args Program arguments    */   public static void main(String[] args) {     Test myTest = Test.ONE;      switch (myTest) {       case ONE:         {           System.out.println(""One"");           break;         }       case TWO:         {           System.out.println(""Two"");           break;         }       case THREE:         {           System.out.println(""Three"");           break;         }       default:         throw new RuntimeException(""Unexpected value"");     }   }    public enum Test {     ONE,     TWO,     THREE   } } ```  `[jplace@Jordans-MacBook-Pro checkstyle-playground]$ cat checkstyle.xml` ```                                                                                                                ``` I've distilled this from the Google Checkstyle configuration for the purposes of file this bug: https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml  `[jplace@Jordans-MacBook-Pro checkstyle-playground]$ mvn checkstyle:checkstyle` ``` [INFO] Scanning for projects... [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building checkstyle-playground 1.0-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO]  [INFO] --- maven-checkstyle-plugin:2.17:checkstyle (default-cli) @ checkstyle-playground --- [WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent! [INFO] Starting audit... [ERROR] /Users/jplace/Documents/work/checkstyle-playground/src/main/java/Main.java:12: 'block lcurly' have incorrect indentation level 8, expected level should be 6. [Indentation] [ERROR] /Users/jplace/Documents/work/checkstyle-playground/src/main/java/Main.java:13: 'block' child have incorrect indentation level 10, expected level should be 8. [Indentation] [ERROR] /Users/jplace/Documents/work/checkstyle-playground/src/main/java/Main.java:14: 'block' child have incorrect indentation level 10, expected level should be 8. [Indentation] [ERROR] /Users/jplace/Documents/work/checkstyle-playground/src/main/java/Main.java:15: 'block rcurly' have incorrect indentation level 8, expected level should be 6. [Indentation] [ERROR] /Users/jplace/Documents/work/checkstyle-playground/src/main/java/Main.java:17: 'block lcurly' have incorrect indentation level 8, expected level should be 6. [Indentation] [ERROR] /Users/jplace/Documents/work/checkstyle-playground/src/main/java/Main.java:18: 'block' child have incorrect indentation level 10, expected level should be 8. [Indentation] [ERROR] /Users/jplace/Documents/work/checkstyle-playground/src/main/java/Main.java:19: 'block' child have incorrect indentation level 10, expected level should be 8. [Indentation] [ERROR] /Users/jplace/Documents/work/checkstyle-playground/src/main/java/Main.java:20: 'block rcurly' have incorrect indentation level 8, expected level should be 6. [Indentation] [ERROR] /Users/jplace/Documents/work/checkstyle-playground/src/main/java/Main.java:22: 'block lcurly' have incorrect indentation level 8, expected level should be 6. [Indentation] [ERROR] /Users/jplace/Documents/work/checkstyle-playground/src/main/java/Main.java:23: 'block' child have incorrect indentation level 10, expected level should be 8. [Indentation] [ERROR] /Users/jplace/Documents/work/checkstyle-playground/src/main/java/Main.java:24: 'block' child have incorrect indentation level 10, expected level should be 8. [Indentation] [ERROR] /Users/jplace/Documents/work/checkstyle-playground/src/main/java/Main.java:25: 'block rcurly' have incorrect indentation level 8, expected level should be 6. [Indentation] Audit done. [INFO] There are 12 errors reported by Checkstyle 7.6 with checkstyle.xml ruleset. [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1.313 s [INFO] Finished at: 2017-03-02T14:47:16-08:00 [INFO] Final Memory: 18M/309M [INFO] ------------------------------------------------------------------------ ```  `[jplace@Jordans-MacBook-Pro checkstyle-playground]$ cat pom.xml ` ```       4.0.0      checkstyle-playground     checkstyle-playground     1.0-SNAPSHOT                                                          org.apache.maven.plugins                 maven-compiler-plugin                 3.2                                      8                     8                     UTF-8                                                                         org.apache.maven.plugins                 maven-checkstyle-plugin                 2.17                                                                                com.puppycrawl.tools                         checkstyle                         7.6                                                                                                                      checkstyle                         validate                                                      check                                                                                                     checkstyle.xml                     info                     true                     true                     true                     false                                              ```  ---------------  I'm using [google-java-format](https://github.com/google/google-java-format) to format Main.java. It disagrees with Google's Checkstyle configuration for how this code should be indented. I'm not sure which tool is authority here.  Am I correct in thinking they should agree?   -------","closed","google style,","jplace","2017-03-02T22:50:46Z","2020-10-05T05:48:14Z"
"","3213","AnnotationLocation check does not force method annotation to be exactly after javadoc.","https://checkstyle.org/config_annotation.html#AnnotationLocation  According to the check description, both annotations (Nullable and Nonnull) should be reported as violations. - The first one is before javadoc. - The second one is not exactly after javadoc (it has _protected_ keyword between javadoc and annocation).  ```` $ cat TestClass.java public class TestClass {     @Nullable     /**      * Some javadoc here      */     protected @Nonnull static boolean doSomething() {         System.out.print(""Hello, world!"");     } }  $ cat TestConfig.xml                        $ java -jar checkstyle-8.18-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  ##","open","approved,","pbaranchikov","2016-05-23T09:23:53Z","2019-03-03T06:54:41Z"
"","3064","use new checks and new properties from sevntu.checkstyle project","http://sevntu-checkstyle.github.io/sevntu.checkstyle/#1.20.0  https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_sevntu_checks.xml ##","closed","miscellaneous,","romani","2016-03-25T14:27:48Z","2017-01-06T15:58:57Z"
"","3709","Should we use Semantic Versioning in release numbers","http://semver.org format must be ""X.Y.Z"", some tools warn about this - https://www.versioneye.com/java/com.puppycrawl.tools:checkstyle/7.4  so, do we need to switch to that version format ?  Benefits:  - follow the standard user can clearly see backward-incomptible fixes  Inconveniences and nuances: - does not work well with [time-based releases](https://en.wikipedia.org/wiki/Release_early,_release_often), we can not make all ""planned"" updates in one iteration, so we will trigger increment of major version too often to my mind. I even think to use continuous releases, but it also have problem with semantic versions - [1](http://blog.ploeh.dk/2013/12/10/semantic-versioning-with-continuous-deployment/), [2](https://www.cloudbees.com/blog/semantic-versioning-folly)  - extra 0 at the end of release - we do not completely follow ""backwards-compatible"" in common sense, we introduce NOT backwards-compatible changes in minor release. We do this as too much in checkstyle is exposed to user. - maven release plugin will automatically update version to X.Y.Z+1. So for 7.4.0 it will do 7.4.1 , so we will need to be caution during release.  > Why we use time-based releases ?  Maintainers team is tiny. Non of maintainers focused on project full hours and do progress base on their free time. So big updates are impossible to accomplish in one release. There are many occasional contributors that provide fixes to bugs. All this contributors need is to pass acceptance of fix and start to use result as soon as possible (the only incentive to contribute). So delay in release will discourage contributors - not acceptable. I selected 1 month period , only because release process is time consuming and I do not want to spend my time on releases only. This period is easy to remember for me. In short: why we are small team that do maintenance during free time (unpredictable time) so we should appreciate contribution from aside, so release often, tom time-based.  > What is api changes for Checkstyle ?  Checkstyle has api package for projects that want to embed it (plugins, ....). Checkstyle exposing configuration file there all properties and modules are mentioned. We have huge problems in API classes and maintaining badly designed modules and their properties. Change in API affect other projects that use us, checkstyle in modules affect all our users. So all modules and module's properties are critical point in backward compatibility. During last 3 years, we did a brake in 17 releases. Some modules are still so badly designed so we will continue that brake way for sure (still too much to break). API is slightly changed during this time.  > What does checkstyle numbers mean now ?      it is partly semantic. Major version is major milestone - so all ""planned"" fixes will eventually appear in it. I usually bind it to API classes major refactoring, big features introduction, runtime jdk change. Minor version is minor milestones and minor breaking compatibilities - I consider changes on breaking changes in modules as minor break. I bump minor if new functionality is appear. Patch version - is purely semantic patch version, completely compatible, no new functionality.","closed","","romani","2017-01-10T19:32:27Z","2021-05-02T16:38:30Z"
"","3059","java9: module-info.java files support","http://openjdk.java.net/projects/jigsaw/doc/lang-vm.html#jigsaw-1  http://hg.openjdk.java.net/jdk9/dev/jdk/rev/b2a69d66dc65  > 8142968: Module System implementation Summary: Initial integration of JEP 200, JEP 260, JEP 261, and JEP 282   File: http://hg.openjdk.java.net/jdk9/dev/jdk/file/b2a69d66dc65/src/jdk.naming.rmi/share/classes/module-info.java  ``` /var/tmp/jdk9 $ java -jar checkstyle-6.17-SNAPSHOT-all.jar -c my_check.xml src Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing src/jdk.naming.rmi/share/classes/module-info.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:319)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:275)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:318)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:148) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: NoViableAltException occurred during the analysis of file src/jdk.naming.rmi/share/classes/module-info.java.     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:195)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:80)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:339)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:309)     ... 3 more Caused by: /var/tmp/jdk9/src/jdk.naming.rmi/share/classes/module-info.java:26:1: unexpected token: module     at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:181)     at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:441)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:177)     ... 6 more Checkstyle ends with 1 errors.  /var/tmp/jdk9 $ cat /var/tmp/jdk9/src/jdk.naming.rmi/share/classes/module-info.java /*  * Copyright (c) 2014, 2015, Oracle and/or its affiliates. All rights reserved.  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.  *  * This code is free software; you can redistribute it and/or modify it  * under the terms of the GNU General Public License version 2 only, as  * published by the Free Software Foundation.  Oracle designates this  * particular file as subject to the ""Classpath"" exception as provided  * by Oracle in the LICENSE file that accompanied this code.  *  * This code is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  * version 2 for more details (a copy is included in the LICENSE file that  * accompanied this code).  *  * You should have received a copy of the GNU General Public License version  * 2 along with this work; if not, write to the Free Software Foundation,  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.  *  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA  * or visit www.oracle.com if you need additional information or have any  * questions.  */  module jdk.naming.rmi {     requires java.naming;     requires java.rmi;     provides javax.naming.spi.InitialContextFactory         with com.sun.jndi.rmi.registry.RegistryContextFactory;      // temporary export until NamingManager.getURLContext uses services     exports com.sun.jndi.url.rmi to java.naming;     exports com.sun.jndi.rmi.registry to java.rmi; } ``` ##","closed","","romani","2016-03-23T21:58:45Z","2018-05-18T16:42:11Z"
"","3755","google_checks: update to most recent version of style guide (3 November 2016)","http://checkstyle.sourceforge.net/google_style.html https://github.com/google/styleguide/commits/gh-pages/javaguide.html  change that we miss: https://github.com/google/styleguide/commit/db0a26320f3e930c6ea7225ed53539b4fb31310c","closed","miscellaneous,","romani","2017-01-24T23:29:30Z","2017-03-19T00:16:15Z"
"","3767","Consider enum trailing commas in SeparatorWrap semicolons","http://checkstyle.sourceforge.net/config_whitespace.html#SeparatorWrap  ``` ~/work/test $ javac Test.java ~/work/test $ cat Test.java public enum Test {     A,     B,     ; // Would prefer no violation here      public void foo() {         bar()         ; // Violation here is fine     }      public void bar() {} } ~/work/test $ cat config.xml      	 	 	                                	  ~/work/test $ java -jar checkstyle-7.4-all.jar -c config.xml Test.java Starting audit... [WARN] /home/cpai/work/test/Test.java:4:5: ';' should be on the previous line. [SeparatorWrap] [WARN] /home/cpai/work/test/Test.java:8:9: ';' should be on the previous line. [SeparatorWrap] Audit done. ```  It would be nice if SeparatorWrap would ignore the semicolon if it is on the line after a trailing comma in enums.","open","","cypai","2017-01-27T20:22:24Z","2017-02-23T02:41:42Z"
"","3766","Consider enum trailing commas for NoWhitespaceBefore semicolons","http://checkstyle.sourceforge.net/config_whitespace.html#NoWhitespaceBefore  ``` ~/work/test $ javac Test.java  ~/work/test $ cat Test.java  public enum Test {     A,     B,     ; } ~/work/test $ cat config.xml      	 	 	          	  ~/work/test $ java -jar checkstyle-7.4-all.jar -c config.xml Test.java Starting audit... [WARN] /home/cpai/work/test/Test.java:4:4: ';' is preceded with whitespace. [NoWhitespaceBefore] Audit done. ```  It would be nice if NoWhitespaceBefore would ignore the semicolon if it is on the line after a trailing comma in enums.","closed","","cypai","2017-01-27T20:00:58Z","2017-02-09T13:55:53Z"
"","3625","extend examples for NoLineWrap","http://checkstyle.sourceforge.net/config_whitespace.html#NoLineWrap  extend examples, source file -  https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_whitespace.xml#L792","closed","easy,","romani","2016-12-08T17:58:39Z","2017-03-19T22:23:15Z"
"","3601","MethodParamPad: add examples","http://checkstyle.sourceforge.net/config_whitespace.html#MethodParamPad  it is required to add examples for users. source of documentation is at https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_whitespace.xml#L642  Issue is abandoned , so following commits are not correct.  --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39629043-make-examples-for-methodparampad-xdoc?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","gsoc first issue,","romani","2016-11-29T22:10:05Z","2020-11-11T16:36:12Z"
"","3906","doc: update documentation for usage of ""period"" property at SummaryJavadoc","http://checkstyle.sourceforge.net/config_javadoc.html#SummaryJavadoc  example for ""period"" should be added","closed","miscellaneous,","romani","2017-03-03T18:55:26Z","2017-03-07T01:49:52Z"
"","3492","ImportControl: add ability to control imports in certain classes","http://checkstyle.sourceforge.net/config_imports.html#ImportControl have ability to control imports on package level.  It is required to add ability to specify for certain Classes allowed imports. Example to allow swing only in UI classes. Rest of the classes should stay independed from swing/awt:  ```                                                          ``` ##","closed","medium,","romani","2016-10-02T22:05:44Z","2018-04-21T00:57:27Z"
"","3102","DesignForExtension: consider overridable methods and javadoc","http://checkstyle.sourceforge.net/config_design.html#DesignForExtension  documentation now describe all rationale of this Check. But Rationale doe snot match with logic of this Check. Missed points: - validation for overridable methods usage in class (we already have similar functionality at [OverridableMethodInConstructorCheck](https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/main/java/com/github/sevntu/checkstyle/checks/coding/OverridableMethodInConstructorCheck.java) ) - validation of javadoc where user need to put explanation of how to override it correctly. Please pay attention to `...The description begins with the phrase “This implementation.”` - need to be investigated.  so this two point need to be done. We need to activate this Check over our code , at least some part of it, to show users how it could be used (with reasonable level of suppression).  We also need to extend documentation to mention that there is a limitation:  ``` We can not validate overridable methods of parent class that are used in tested class. All of them will be skipped ``` ##","closed","new feature,","romani","2016-04-15T13:53:33Z","2016-12-14T18:16:44Z"
"","3143","ReturnCount: special option for methods with void return type","http://checkstyle.sourceforge.net/config_coding.html#ReturnCount  validation for methods which return `void` should have separate limit - maxForVoid. By default should be the same as default of `max` property.  This code does not give a violation, but with maxForVoid=1 should fire violation.  ```     private void checkThrows() {         final DetailAST throwsAst = getMainAst().findFirstToken(TokenTypes.LITERAL_THROWS);         if (throwsAst == null) {             return; /// should be violation with maxForVoid=1, as one return is at end of method         }          if (isOnStartOfLine(throwsAst)) {             final int columnNo = expandedTabsColumnNo(throwsAst);             final IndentLevel expectedColumnNo = new IndentLevel(getIndent(), getIndentCheck()                     .getThrowsIndent());              if (!expectedColumnNo.isAcceptable(columnNo)) {                 logError(throwsAst, ""throws"", columnNo, expectedColumnNo);             }         }          checkWrappingIndentation(throwsAst, throwsAst.getNextSibling(),                 expandedTabsColumnNo(getMainAst()), getIndentCheck().getThrowsIndent());     } ```","closed","new feature,","romani","2016-04-28T13:35:01Z","2016-05-27T20:28:37Z"
"","3496","ReturnCount: enforce max=1 over checkstyle code","http://checkstyle.sourceforge.net/config_coding.html#ReturnCount  in checkstyle code we use default value - 2. https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+ReturnCount  we need to make it ""1"". Previously I failed to do this as there was too much other problems and I decided to postpone it. Now I fed up to force people at code review to do methods with one return.  We have additional Check - https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/main/java/com/github/sevntu/checkstyle/checks/coding/ReturnCountExtendedCheck.java that is used over our code, it has more options, so could be used to do refactoring step by steps. its config: https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_sevntu_checks.xml#L191  ##","closed","hard,","romani","2016-10-04T12:42:27Z","2017-08-22T12:02:07Z"
"","3955","IllegalInstantiationCheck: explain token in documentation","http://checkstyle.sourceforge.net/config_coding.html#IllegalInstantiation  >  	tokens to check 	subset of tokens CLASS_DEF.   There are no examples or explanation from what `CLASS_DEF` gives you in this check. It is enabled by default, but what happens if you disable it, if its possible. It is also not clear how it can be disabled in configuration, which I assume involves setting the property to an empty string. [We also have no tests showing what turning `CLASS_DEF` off does differently.](https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheckTest.java)  We should examine what this token does, if it should remain optional, and update the xdoc based on the findings.","open","easy,","rnveach","2017-03-08T02:50:34Z","2017-03-13T20:34:58Z"
"","3943","doc: add examples for xdoc for ArrayTrailingComma","http://checkstyle.sourceforge.net/config_coding.html#ArrayTrailingComma  make examples of correct and code with violation in examples to make it clear for user how Check is working.  Good example: http://checkstyle.sourceforge.net/config_coding.html#MagicNumber","closed","easy,","romani","2017-03-06T20:25:46Z","2017-03-09T01:52:28Z"
"","3619","NeedBraces need clear description of allowSingleLineStatement","http://checkstyle.sourceforge.net/config_blocks.html#NeedBraces  1) NeedBraces need clear description of allowSingleLineStatement.  2)  Why example with two statements is ok. ```  To configure the Check to allow case, default single-line statements without braces:                        Next statements won't be violated by Check:  switch (num) {     case 1: counter++; break; // OK     case 6: counter += 10; break; // OK     default: counter = 100; break; // OK }          ```","open","easy,","romani","2016-12-07T00:35:54Z","2022-03-01T12:27:50Z"
"","3487","Turn on Config Cache File Locally for Developers","http://checkstyle.sourceforge.net/config.html#Checker property cacheFile. It speeds up checkstyle's run by not rechecking files that have no issues and have not changed.  I want to turn that on locally, but currently the only way to do that is to modify the config for each branch I make. I feel this will help developers who have to constantly re-run the checkstyle before sending a PR to the server. Some computers that are slower take a few minutes to run this command, so any performance boost is appreciated.  I assume we can make like a maven property which we can override locally that will set it when we run the checkstyle, that way it doesn't change CI behavior and turn it on there.  When I run locally in Eclipse, I can run it either through maven:  > mvn verify -Dmaven.test.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dcobertura.skip=true -Dforbiddenapis.skip=true  or directly running `Main`:  > Main class: com.puppycrawl.tools.checkstyle.Main >  > Program Arguments: -c M:\checkstyleWorkspaceEclipse\checkstyle\config\checkstyle_checks.xml M:\checkstyleWorkspaceEclipse\checkstyle\src\it\java M:\checkstyleWorkspaceEclipse\checkstyle\src\main\java M:\checkstyleWorkspaceEclipse\checkstyle\src\test\java M:\checkstyleWorkspaceEclipse\checkstyle\src\xdocs >  > VM arguments: -Dcheckstyle.header.file=""M:\checkstyleWorkspaceEclipse\checkstyle\config\java.header"" -Dcheckstyle.suppressions.file=""M:\checkstyleWorkspaceEclipse\checkstyle\config\suppressions.xml"" -Dcheckstyle.regexp.header.file=""M:\checkstyleWorkspaceEclipse\checkstyle\config\java_regexp.header"" -Dcheckstyle.importcontrol.file=""M:\checkstyleWorkspaceEclipse\checkstyle\config\import-control.xml"" ##  Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/38024932-turn-on-config-cache-file-locally-for-developers?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","rnveach","2016-10-01T14:01:43Z","2016-12-07T13:40:29Z"
"","3169","OSGi bundle of Checkstyle","How about distributing the Checkstyle JAR as a valid OSGi bundle, with a full MANIFEST?  Either the existing ""fat JAR"" one as-is, or a smaller one which has only Checkstyle itself, and does not include ANTLR and Google Guava and Apache Commons \* ?  My understanding is that http://bnd.bndtools.org through http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html (also documented on http://bnd.bndtools.org/tools/felix-maven.html), or https://github.com/bndtools/bnd/blob/master/maven/bnd-maven-plugin/README.md, could do this.  The advantage of doing this would be that e.g. the Eclipse Checkstyle Plug-in project then should be able to, somehow, consume the Checkstyle JAR as-is, without re-wrapping it as it currently does, with an OSGi MANIFEST.MF there (see https://sourceforge.net/p/eclipse-cs/git/ci/master/tree/net.sf.eclipsecs.checkstyle/META-INF/MANIFEST.MF). The problem with the current approach is that that MANIFEST lacks versioning for the embedded JARs, and exposes too much, see also https://sourceforge.net/p/eclipse-cs/bugs/403/. In an ideal world, it would thus be better if Checkstyle core (this project) would make itself available as a valid OSGi bundle. Note that actually at least Google Guava, and probably Apache Commons also (not checked), already have valid OSGi MANIFEST.MF in their bundles. BND could read and merge them into a better MANIFEST.MF for Checkstyle, even if it's a fat JAR.  Please let me know if you would consider this, if a Pull Request for it was made. I may be interested.. ;) ##","open","approved,","vorburger","2016-05-12T14:38:50Z","2016-12-14T18:16:42Z"
"","3174","New Check: AvoidReassigningParameters check, almost opposite of FinalParameters (like PMD's)","How about a new check which would see that any non-final parameters are not re-assigned within a method?  PMD already has this, and it's called AvoidReassigningParameters there. (Of course one could also just use PMD in addition to Checkstyle on a project...)  Basically just like what does javac when you use the 'final' keyword. Some people seem to think, and I would have to agree, that putting the 'final' keyword in every argument of every method everywhere hurts readability. It doesn't actually change the compiled byte code in any way. So not writing ""final"", unless it's exceptionally required for anonymous inner classes (or lambda/closures), yet have non-final parameter re-assignment detected by a code quality tool such as Checkstyle (or PMD), seems like a good idea.  In a sense this would be the ""opposite"" of current Checkstyle's [FinalParameters](http://checkstyle.sourceforge.net/config_misc.html#FinalParameters), and if this is implemented then the FinalParameters documentation should probably link to the new AvoidReassigningParameters check.   If this is made available, then to help clean up existing code, it would also be interesting to have the opposite kind of Check, to detect if final is used when it's not required, so any final arguments which are NOT passed to an anonymous inner classes (or lambda/closures). I don't know if PMD can do that?  BTW: It's interesting to [note Checkstyle's own checkstyle configuration in this regard](https://github.com/checkstyle/checkstyle/blob/4c42b6abbe468576af41bf559d09cb0b5a8f2131/config/checkstyle_checks.xml#L315) BTW.. ;-)  ##","open","new module,","vorburger","2016-05-13T15:00:51Z","2016-12-14T18:16:42Z"
"","3209","Online docs: AST example for LITERAL_DO is missing the DO_WHILE node","Hopefully this is an easy one.  The online docs for TokenTypes shows an invalid AST for [LITERAL_DO](http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_DO).  After the statement list, it is showing LPAREN as the next sibling.  I think DO_WHILE comes next.  This would be useful because I was trying to use DescendantToken to check something specifically in the while clause of a do/while, but could not tell of the parens fall under DO_WHILE or LITERAL_FOR.  (Sorry, I havent busted out the AST viewer in quite some time.)  Also, if possible, could you add an example for a for-each loop under LITERAL_FOR?  That would be helpful since it is quite different from the counting loop's AST.  Thanks for your time and efforts.","closed","miscellaneous,","eric-milles","2016-05-22T17:58:56Z","2016-06-28T04:24:52Z"
"","3194","CONTRIBUTING.md file documenting expected commit message format","Hi, if you would like more people to contribute to Checkstyle, perhaps you would like to have a CONTRIBUTING.md file at the root of this repository? That then shows up on top when people raise PRs on GitHub. See this https://help.github.com/articles/setting-guidelines-for-repository-contributors/ documentation.  This would be somewhat better than PR builds failing with the CommitValidationTest (cool idea though! and easy to run that locally - I would document that in your CONTRIBUTING.md ...).","closed","miscellaneous,","vorburger","2016-05-18T15:18:23Z","2016-06-24T06:40:24Z"
"","3052","new Check: Nullable check for function parameters","Hi, Is there any module which ensures that if I declare a class attribute to be nullable, all the set methods should compulsorily have Nullable annotated to the parameter. For example:  public class Abc {    @Nullable   private String test;    public void setTest(final String test) {   this.test = test;   } }   Now, is there any checkstyle which would give me a warning at public void setTest(final String test) , saying that it should be declared as public void setTest(**@Nullable** final String test).  I already went through http://checkstyle.sourceforge.net/config_annotation.html , but could find something which would suit my usecase.  Thanking you in anticipation. ##","open","new module,","mantryashutosh","2016-03-21T21:28:55Z","2016-12-14T18:16:46Z"
"","3588","multiple configurations for different types of classes","Hi,  I use checkstyle in my project and I have following problem: In my project I have several types of files (classes) like DTO, Entity classes, unit tests, business logic, data structure etc. Each type of classes has different structure and code style rules. I accept magic numbers in unit tests, but not in business logic. I accept large number of properties in DTO but only a few for other classes.  In ideal world I would like to have the ability to annotate classes with for example “@DTO” or “@UnitTest” and there would be a mechanism that validates such class with appropriate checkstyle configuration.  My questions are: Is it possible to achieve this with current checkstyle? If yes, how can I do that? If not: is it possible to write single plugin for checkstyle that does what I expect?  Regards, Karol   --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39588698-multiple-configurations-for-different-types-of-classes?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","","KarolRoman","2016-11-28T16:47:52Z","2016-11-28T23:54:48Z"
"","3852","@Override isCommentNodesRequired() seems not to be working","Hi,  I have created a checker to ensure that there is an empty line after the '{' at the outter class def. See code snippet below:  ```  @Override public boolean isCommentNodesRequired() {     return true; }  @Override public void visitToken(DetailAST ast) {     final String outerTypeName = ast.findFirstToken(TokenTypes.IDENT).getText();     // checks for blank line after outter token (e.g. class) def     if (fileName.equals(outerTypeName)) {         DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);         DetailAST nextToken = objBlock.getFirstChild().getNextSibling(); // getFirstChild == '{'         if (!hasEmptyLineBefore(nextToken)) {             log(nextToken.getLineNo(), ""No empty line before "" + nextToken.getText());         }     } } ```  I've overridden isCommentNodesRequired() to return true, but when I call:  `DetailAST nextToken = objBlock.getFirstChild().getNextSibling(); // getFirstChild == '{'`  and the next token is a comment, nextToken var gets assigned the next token after the comment (i.e. variable).  ``` public class ToDelete {      // comment     private int test; //  nextToken gets assigned the variable rather than the comment above it  } ```  Is that a bug or am I missing something?  I'm running it through gradle and my setup is as below:  ``` checkstyle {         toolVersion '7.5.1'         configFile file(""${rootDir}/config/checkstyle/checkstyle.xml"")         showViolations true         ignoreFailures = false     } ``` Thanks in advance","closed","","mavsoares","2017-02-22T20:37:01Z","2017-02-22T23:55:21Z"
"","3061","Capture XMLLogger Object from AuditListener","Hi there,  Is it possible to ""capture"" the `XMLLogger` object from the `AuditListener`? The reason why I'm asking is because I want to somehow funnel that XML object back into my code. I did a good amount of poking around in the Checkstyle source code + documentation and didn't find an easy way to do this without some contrived, hacky solution. Reaching out to the community for some help!","closed","","atomicpages","2016-03-24T05:38:14Z","2016-03-24T13:08:37Z"
"","3048","ParenPad: thinks precedence parens are a METHOD_CALL instead of an EXPR, new token TokenTypes.DOT should be supported","Hi guys! Firstly, thank you for all your efforts over the years with Checkstyle -- I've gotten a lot of use out of it, both personally and at work :)  Secondly, I'd like to report what looks like a bug. When upgrading from Checkstyle 5.6 to 6.16.1, I noticed a bunch of new ParenPad warnings. They were triggered by things like this: ``` E:\Users\Wade\Downloads\Checkstyle bug report>javac Test.java  E:\Users\Wade\Downloads\Checkstyle bug report>cat Test.java package test;  public class Test {     static void main( String [] args ) {         String s = ""test"";         Object o = s;         ((String)o).length();     } } E:\Users\Wade\Downloads\Checkstyle bug report>cat config.xml                                                              E:\Users\Wade\Downloads\Checkstyle bug report>java -jar checkstyle-6.17-all.jar -c config.xml Test.java Starting audit... [WARN] E:\Users\Wade\Downloads\Checkstyle bug report\Test.java:7:10: '(' is not followed by whitespace. [ParenPad] [WARN] E:\Users\Wade\Downloads\Checkstyle bug report\Test.java:7:19: ')' is not preceded with whitespace. [ParenPad] Audit done.  ``` Here's the additional data you wanted. The expected output is no warnings. The actual output incorrectly shows the parens around ""(String)o"" to be a METHOD_CALL.  It seems like Checkstyle now thinks the parens around (Wavefront)oElement are a method call instead of just an expression. If I remove METHOD_CALL from the ParenPad configuration, the warning goes away. Or if I put spaces inside like this `( (Wavefront)oElement ).getType() ` the warning also goes away. Sorry, but I don't know exactly which version of Checkstyle this change occurred in, since I hadn't upgraded for a while.  Please let me know if you need any additional information, and thanks again! ##","closed","medium,","WadeWalker","2016-03-20T22:06:18Z","2017-04-16T00:15:15Z"
"","3807","Docker-based CI  from Codeship Pro","Hey Roman,  I know that you are running your github.com/checkstyle/checkstyle tests with Codeship. Maybe you have seen that we are also offering a Docker-based CI system called Codeship Pro know. I would love to get you started on it (OSS builds are for free there too) and get your feedback about what we should improve.  Let me know if you are interested & need any help in setting it up.  Best, Mo  from me: https://documentation.codeship.com/pro/getting-started/codeship-configuration/ It will be good to use it as it allow us to configure build from config in repo, after first step, we will see what else we can do on Codeship.","closed","CI,","romani","2017-02-08T02:14:05Z","2018-05-05T05:30:19Z"
"","3509","FallThrough check doesn't correctly handle try-with-resources","Here is updated description.  ```` $ cat TestClass.java public class TestClass {     Object method() throws Exception {         int variable = 0;          switch (variable) {         case 0:             try (final Resource resource = getResource()) {                 return resource.doSomething();             }         case 1:             return doSomethingElse();         }          return null;     }      private Resource getResource() {         return new Resource();     }      private Object doSomethingElse() {         return null;     }      public static class Resource implements AutoCloseable {         @Override         public void close() throws Exception {         }          public Object doSomething() {             return null;         }     } }  $ cat TestConfig.xml                        $ java -jar checkstyle-7.2-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:10:9: Fall through from previous branch of the switch statement. [FallThrough] Audit done. Checkstyle ends with 1 errors. ````","closed","approved,","dgolub","2016-10-20T15:06:07Z","2017-01-05T23:32:31Z"
"","3065","Execution of checkstyle audit failed caused by inherited javadoc tag","Hello,  I have a error when I try to analyse my code who contains inherited javadoc tag :  ``` $ cat GenericException.java public class GenericException extends Exception {     /** {@inheritDoc} */     public GenericException() {         super();     } }  $ cat config.xml                                $ java -jar checkstyle-6.17-all.jar -c config.xml GenericException.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing GenericException.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:318)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:274)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:330)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:159) Caused by: java.lang.IllegalArgumentException: can't parse argument number: 'inheritDoc '     at java.text.MessageFormat.makeFormat(MessageFormat.java:1429)     at java.text.MessageFormat.applyPattern(MessageFormat.java:479)     at java.text.MessageFormat.(MessageFormat.java:380)     at com.puppycrawl.tools.checkstyle.api.LocalizedMessage.getMessage(LocalizedMessage.java:258)     at com.puppycrawl.tools.checkstyle.api.LocalizedMessage.compareTo(LocalizedMessage.java:378)     at com.puppycrawl.tools.checkstyle.api.LocalizedMessage.compareTo(LocalizedMessage.java:49)     at java.util.TreeMap.compare(TreeMap.java:1290)     at java.util.TreeMap.put(TreeMap.java:538)     at java.util.TreeSet.add(TreeSet.java:255)     at com.puppycrawl.tools.checkstyle.api.LocalizedMessages.add(LocalizedMessages.java:53)     at com.puppycrawl.tools.checkstyle.api.AbstractCheck.log(AbstractCheck.java:255)     at com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter.log(AbstractViolationReporter.java:140)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.hasShortCircuitTag(JavadocMethodCheck.java:538)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.checkComment(JavadocMethodCheck.java:489)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.processAST(JavadocMethodCheck.java:360)     at com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.visitToken(AbstractTypeAwareCheck.java:154)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:363)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:478)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:305)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:185)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:338)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:308)     ... 3 more Caused by: java.lang.NumberFormatException: For input string: ""'inheritDoc '""     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)     at java.lang.Integer.parseInt(Integer.java:569)     at java.lang.Integer.parseInt(Integer.java:615)     at java.text.MessageFormat.makeFormat(MessageFormat.java:1427)     ... 25 more Checkstyle ends with 1 errors. ```","closed","javadoc,","jeromeroucou","2016-03-25T16:56:30Z","2016-05-01T12:51:44Z"
"","3164","AnnotationLocation: unclear behavior when annotation is among modifiers","Hello,  Here is a minimal test case but the same issue is observed when annotation is among class and method modifiers:  ``` $ javac Test.java $ cat Test.java public class Test {     public final @Deprecated Object o = new Object(); } $ cat config.xml                                                            $ java -jar checkstyle-6.18-all.jar -c config.xml Test.java Starting audit... Audit done. ```  I'd expect check to fail for the given code saying `'Deprecated' should be alone on line`.","closed","miscellaneous,","lutovich","2016-05-09T22:13:51Z","2016-05-18T12:48:58Z"
"","3527","config: bump guava version","guava bump.","closed","","rnveach","2016-11-05T21:13:22Z","2016-11-29T15:56:05Z"
"","3363","Issue #941: Update import ordering in google_checks.xml","Google's guidelines for formatting Java code have changed recently: https://github.com/google/styleguide/commit/b075cb7cad464b224103fb2ec8fdb8521ec08e7f (see https://google.github.io/styleguide/javaguide.html#s3.3.3-import-ordering-and-spacing for the current version).  From now on there should only be two groups of imports: The static ones and all others. Imports from `com.google.*`, `java.*` or `javax.*` are no longer listed separately.  This PR is supposed to update the `google_checks.xml` accordingly.","closed","","floscher","2016-07-21T14:00:27Z","2016-10-30T12:10:26Z"
"","3648","make code coverage for MainFrameModel 100%","good task for newbies to project.  class: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java  excluded from coverage: https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L1444  It is required to cover it by test to 100%, as completed, remove it from excludes.","closed","easy,","romani","2016-12-12T00:52:19Z","2017-03-11T21:56:41Z"
"","3665","update documentation for VariableDeclarationUsageDistance with allowedDistance = 0","Given this check is activated:  ```xml      ```  it'll fail on this code:  ```java long result = dateTime != null ? dateTime.hashCode() : 0L; result = 31L * result + (shift != null ? shift.hashCode() : 0L); return result; ```  with this error message:  > Distance between variable 'result' declaration and its first usage is 1, but allowed 0.  Consider to make that variable as final if you still need to store its value in advance (before method calls that might do side effect on original value). [VariableDeclarationUsageDistance]  Is this really wanted? I'd expect it not to fail since the next usage is really one line below it.","closed","miscellaneous,","vanniktech","2016-12-18T00:12:30Z","2016-12-24T15:19:53Z"
"","3057","Fund raising pages for checkstyle","Fun raising services: https://www.bountysource.com/teams/checkstyle - DONE https://flattr.com/ - DONE https://gratipay.com/new - DONE http://www.fossfactory.org/ - DEAD  https://freedomsponsors.org/search/?project_name=checkstyle - DONE  alternatives: http://alternativeto.net/software/bountysource/","closed","miscellaneous,","romani","2016-03-23T18:38:24Z","2016-05-21T13:45:15Z"
"","3847","NPathComplexity: wrong processing of return","from pdf specifcation of NPath algorithm > return Statement The return statement terminates the execution of a C function. A return statement can also contain an expression. Therefore, the complexity of the return statement is NP(( expr )).  ``` /var/tmp$ cat config.xml                                                          /var/tmp$ cat Demo.java  public class Demo {     public boolean getResult(boolean a, boolean b, boolean c) {         return a || b || c;     } }   /var/tmp$ java -jar checkstyle-7.4-all.jar -c config.xml Demo.java Starting audit... Audit done. ```  Expected: `[WARN] /var/tmp/Demo.java:2:5: NPath Complexity is 2 (max allowed is 1). [NPathComplexity]`   Xdoc also need to be fixed, to make in table for `return` ""Complexity expression = NP(expr)"".","open","approved,","romani","2017-02-20T23:09:55Z","2021-12-22T03:19:36Z"
"","3080","SSLHandshakeException exception during linkcheck-maven-plugin","from linkcheck-maven-plugin   https://codeship.com/projects/124310/builds/13566797 ` https://gratipay.com/checkstyle/: javax.net.ssl.SSLHandshakeException : sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target https://www.scm-manager.org/: javax.net.ssl.SSLHandshakeException : sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target `  we need to skip validation for this URLs","closed","miscellaneous,","romani","2016-04-05T22:23:57Z","2016-04-05T22:46:00Z"
"","3212","Modules and XDocs: changed setter methods to recieve similar types with field type for easier xdoc validation","From Issue #3187   Affected modules/checks: SuppressWarningsHolder , AtclauseOrderCheck, SingleLineJavadocCheck  To create a JUnit for module's default types we need to know the type we are dealing with to display it correctly. Unfortunately, We use `String` in the setter for everything, from regular expressions, file locations, to custom enumerations. It might be better if we could align the setter type to the bean's type, using https://github.com/checkstyle/checkstyle/blob/20506e1ceb2de74c9a85367135be714f8208643f/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L65.  So we will change bean methods from:  ``` void setProperty(String s) {     field = s.split("",""); } ```  into:  ``` void setProperty(String... s) {     field = s; } ```  This may break compatibility in areas where original methods weren't code correctly for all weird issues, like https://github.com/checkstyle/checkstyle/pull/3250#issue-158782661 where the setter method wasn't trimming spaces from comma delimited input.","closed","breaking compatibility,","rnveach","2016-05-22T22:08:35Z","2016-06-07T13:12:28Z"
"","3116","Indentation: remove requirement right curlies to be first on line","From Issue #3105 and PR #3113. [comment](https://github.com/checkstyle/checkstyle/issues/3105#issuecomment-210875289)  > https://github.com/checkstyle/checkstyle/blob/ccdc3c09c500ccd31d56e4d6ed9c2d86edf2e9f1/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidAnonymousClassIndent.java#L28 >  > > }}}); //indent:16 exp:17 warn >  > CS Violation is: `InputInvalidAnonymousClassIndent.java:28: 'method def rcurly' have incorrect indentation level 17, expected level should be one of the following: 12, 16.` >  > CS reports indentation to be 17, when it is in fact 16. I can't temporarly fix the input file to say indent is 17 as then the input file checker flags it as being inconsistent since it sees the indentation as 16.  `ioffset` was created in the Indentation input files to overcome this issue, that we can report violations on nodes that aren't first in the line. We need to verify their existence is needed and not another bug of the Indentation check.  When PR is merged, I will point to all marks here and my thoughts on them.","closed","approved,","rnveach","2016-04-18T14:00:52Z","2016-06-03T12:56:14Z"
"","3301","Enable IntellijIdea inspection: 'throw' inside 'finally' block","From IntelijIdea:  `Error handling: 'throw' inside 'finally' block (Errors) (5)` good explanations: http://programmers.stackexchange.com/questions/188858/throwing-an-exception-inside-finally  Issue is blocked by: https://github.com/cobertura/cobertura/issues/289    Details:  ```  src/main/java/com/puppycrawl/tools/checkstyle/api  LocalizedMessage.java (1)  src/main/java/com/puppycrawl/tools/checkstyle/checks  NewlineAtEndOfFileCheck.java (1)  UniquePropertiesCheck.java (1)  src/main/java/com/puppycrawl/tools/checkstyle  PropertyCacheFile.java (2) ```  Example for one file - LocalizedMessage :   ```  src/main/java/com/puppycrawl/tools/checkstyle/api  LocalizedMessage.java (1) 424: newBundle() IOException might be thrown inside 'finally' block ```  current code:  ``` final Reader streamReader = new InputStreamReader(stream, ""UTF-8""); try {     // Only this line is changed to make it to read properties files as UTF-8.     resourceBundle = new PropertyResourceBundle(streamReader); } finally {     stream.close(); } ```  Expected code:  ```     try (Reader streamReader = new InputStreamReader(stream, ""UTF-8"")) {         // Only this line is changed to make it to read properties files as UTF-8.         resourceBundle = new PropertyResourceBundle(streamReader);     } ```  results to:  ``` [INFO] --- cobertura-maven-plugin:2.7:check (default) @ checkstyle --- [INFO] Cobertura 2.1.1 - GNU GPL License (NO WARRANTY) - See COPYRIGHT file [INFO] Cobertura: Loaded information on 382 classes. [ERROR] com.puppycrawl.tools.checkstyle.api.LocalizedMessage$Utf8Control failed coverage check. Branch coverage rate of 83.3% is below 100.0% ``` ##","closed","medium,","romani","2016-06-23T14:18:09Z","2017-07-15T18:11:52Z"
"","3893","grammar: depreate METHOD_REF and user DOUBLE_COLON","from https://github.com/checkstyle/checkstyle/pull/3884#issuecomment-283476031  >DOUBLE_COLON was named after :: (obviously) and was created as token for lexical part of grammar. I don't remember reason why we have both DOUBLE_COLON and METHOD_REF now, but most probably I was needed it on start in parts of grammar which have already been removed (or even was removed in process of grammar update) and token was simply forgotten. Now I don't see any reason why we need it. I would suggest to try to remove it from syntax part and keep token in lexical part to keep compatibility. If grammar works fine we will be able to mark token as deprecated and remove.  on next major update of grammar we should resolve this. to keep DOUBLE_COLON as token type. Keep METHOD_REF (we can not remove tokens from grammar to keep compatibility) but make it deprecated in javadoc.","open","antlr,","romani","2017-03-02T01:33:06Z","2021-12-22T04:48:21Z"
"","3812","Change google_checks.xml to disallow abbreviations in identifiers names in accordance with Google Style Guide","From [Google Java Style Guide section 5.3](https://google.github.io/styleguide/javaguide.html#s5.3-camel-case):  > Recommended: if any word already has a conventional camel-case appearance in common usage, split this into its constituent parts (e.g., ""AdWords"" becomes ""ad words""). Note that a word such as ""iOS"" is not really in camel case per se; it defies any convention, so this recommendation does not apply.  > lowercase everything (including acronyms), then uppercase only the first character of: ... each word, to yield upper camel case, or ... each word except the first, to yield lower camel case  Thus, we need to set ```allowedAbbreviationLength``` to 0. This issue need to be done after https://github.com/checkstyle/checkstyle/issues/3721","closed","easy,","MEZk","2017-02-09T20:11:13Z","2020-08-11T04:07:49Z"
"","3989","UTs should not use ROOT locale when they test violation/error message","from #3896 and its PR.  Usage of ROOT in this cases will not do localization at all. It is not really a test for fully localized resources.  The reason of problem is that for this Tests using getCheckMessage from base test class(BaseCheckTestSupport), that do load of file as resource NOT as localized bundle. Checks to loading by ResourceBundle class that is why they are localized.","closed","miscellaneous,","romani","2017-03-13T04:18:03Z","2017-03-14T18:23:22Z"
"","3786","Use JOSM in our CI","from #3776  benefits: - extra project for regression - ANT project for regression  But unfortunately I can not make Travis to analyze your repo, Very weird  error  ``` .. checkstyle: [checkstyle] checkstyle version 7.6-SNAPSHOT [checkstyle] compiled on Wed February 01 2017, 18:22 UTC [checkstyle] 0) Adding 1443 files from directory /home/travis/build/checkstyle/checkstyle/openstreetmap/src/org/openstreetmap/josm [checkstyle] 1) Adding 461 files from directory /home/travis/build/checkstyle/checkstyle/openstreetmap/test [checkstyle] To locate the files took 168 ms. [checkstyle] Running Checkstyle 7.6-SNAPSHOT on 1904 files [checkstyle] Using configuration /home/travis/build/checkstyle/checkstyle/openstreetmap/tools/checkstyle/josm_checks.xml ./.ci/travis/travis.sh: line 5:  2563 Killed                  ant -v checkstyle ``` https://travis-ci.org/checkstyle/checkstyle/jobs/197385378#L418, and it works on my local (max memory usage is heapsize =1Gb, max usedheap=670Mb) . ![capture-checkstyle-and-on-travis](https://cloud.githubusercontent.com/assets/812984/22523495/79a58f66-e874-11e6-88f5-ef6b8128b0d3.PNG) Travis limit is 4G - https://docs.travis-ci.com/user/ci-environment/.   ``` diff --git a/.ci/travis/travis.sh b/.ci/travis/travis.sh index f42b79e..87305a1 100755 --- a/.ci/travis/travis.sh +++ b/.ci/travis/travis.sh @@ -171,6 +171,32 @@ no-exception-test-alot-of-project1)    groovy ./launch.groovy projects-for-travis.properties checks-nonjavadoc-error.xml    ;;   +no-error-test-openstreetmap) +  echo ""installing new ant ..."" +  wget http://www-us.apache.org/dist//ant/binaries/apache-ant-1.9.8-bin.zip +  unzip -q apache-ant-1.9.8-bin.zip +  export ANT_HOME=$(pwd)/apache-ant-1.9.8 +  export PATH=$ANT_HOME/bin/:$PATH +  echo ""building checkstyle ..."" +  mvn clean package -Passembly +  export CS_POM_VERSION=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec +  echo CS_version: ${CS_POM_VERSION} +  echo ""Checkouting sources ...."" +  svn -q export https://josm.openstreetmap.de/svn/trunk/ openstreetmap +  echo ""replacing checkstyle-all.jar ...."" +  cp -f target/checkstyle-$CS_POM_VERSION-all.jar openstreetmap/tools/checkstyle/checkstyle-all.jar +  cd openstreetmap +  ant -v checkstyle +  ls -la +  cat checkstyle-josm.xml +  grep '","closed","CI,","romani","2017-02-01T19:56:53Z","2020-05-17T23:43:41Z"
"","3836","reconsider behavior for multiple property lines of the same name in config","from #3751  Why we have two lines for tokens ? It is override. Should be forbidden by XML schema.  [DefaultConfiguration merges multiple properties together like it was one line.](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java#L106-L114) Some were already like this in the config, so I thought it was acceptable for history viewing to clearly show removes/adds. [There is an old commit where tokens were purposely made like this.](https://github.com/checkstyle/checkstyle/commit/95f7a7cde50ceac50d41c2bff65b6983c888bea3) Most of those changes and documentation are still around. Ex: http://checkstyle.sourceforge.net/property_types.html#stringSet > this property can be supplied multiple times which is equivalent to a set of comma separated strings.","closed","","romani","2017-02-16T04:31:43Z","2019-03-24T20:49:21Z"
"","3701","IllegalTokenText in google_checks should not has BACKSPACE character","from #3700   problem is misconfiguration - https://github.com/checkstyle/checkstyle/blob/c25004bd0304d3c7466783c637e9c49bd5ebc72f/src/main/resources/google_checks.xml#L34 [Unicode Character 'BACKSPACE' (U+0008)](http://www.fileformat.info/info/unicode/char/0008)/index.htm should be removed from this list.  ``` /tmp $ javac Demo.java  /tmp $ cat Demo.java public class Demo {   public static void main(String[] args) {     System.out.println(""\u0008"");   } }  $ java -cp checkstyle-7.4-all.jar com.puppycrawl.tools.checkstyle.Main -c /google_checks.xml Demo.java  Starting audit... [WARN] /tmp/Demo.java:3: Unicode escape(s) usage should be avoided. [AvoidEscapedUnicodeCharacters] [WARN] /tmp/Demo.java:3:24: Avoid using corresponding octal or Unicode escape. [IllegalTokenText] Audit done. ```  mapping of google style to checkstyle rule - http://checkstyle.sourceforge.net/google_style.html#a2.3.2","closed","approved,","romani","2017-01-08T23:51:45Z","2017-02-16T14:19:54Z"
"","3810","JavadocParser: inconsistent AST tree with and without SINGLETON_ELEMENT","from #3570.  ``` $ cat issue.javadoc   *   * Test 1  *   * Test 2  *   $ java -jar checkstyle-7.4-all.jar -j issue.javadoc JAVADOC ->  * \n * Test 1\n * \n * Test 2\n * \n [0:0] |--LEADING_ASTERISK ->  * [0:0] |--TEXT ->   [0:2] |--HTML_ELEMENT ->  [0:3] |   `--P_TAG_OPEN ->  [0:3] |       |--OPEN -> < [0:3] |       |--P_HTML_TAG_NAME -> p [0:4] |       `--CLOSE -> > [0:5] |--NEWLINE -> \n [0:6] |--LEADING_ASTERISK ->  * [1:0] |--TEXT ->  Test 1 [1:2] |--NEWLINE -> \n [1:9] |--LEADING_ASTERISK ->  * [2:0] |--TEXT ->   [2:2] |--HTML_ELEMENT ->  [2:3] |   `--SINGLETON_ELEMENT ->  [2:3] |       `--BR_TAG ->  [2:3] |           |--OPEN -> < [2:3] |           |--BR_HTML_TAG_NAME -> br [2:4] |           `--SLASH_CLOSE -> /> [2:6] |--NEWLINE -> \n [2:8] |--LEADING_ASTERISK ->  * [3:0] |--TEXT ->  Test 2 [3:2] |--NEWLINE -> \n [3:9] |--LEADING_ASTERISK ->  * [4:0] |--TEXT ->   [4:2] |--HTML_ELEMENT ->  [4:3] |   `--P_TAG_CLOSE ->  [4:3] |       |--OPEN -> < [4:3] |       |--SLASH -> / [4:4] |       |--P_HTML_TAG_NAME -> p [4:5] |       `--CLOSE -> > [4:6] |--NEWLINE -> \n [4:7] `--EOF ->  [5:0]  $ cat issue.javadoc   *   * Test 1  * Test 2  *   $ java -jar checkstyle-7.4-all.jar -j issue.javadoc JAVADOC ->  * \n * Test 1\n * Test 2\n * \n [0:0] |--LEADING_ASTERISK ->  * [0:0] |--TEXT ->   [0:2] |--HTML_ELEMENT -> \n * Test 1\n * Test 2\n *  [0:3] |   `--PARAGRAPH -> \n * Test 1\n * Test 2\n *  [0:3] |       |--P_TAG_OPEN ->  [0:3] |       |   |--OPEN -> < [0:3] |       |   |--P_HTML_TAG_NAME -> p [0:4] |       |   `--CLOSE -> > [0:5] |       |--NEWLINE -> \n [0:6] |       |--LEADING_ASTERISK ->  * [1:0] |       |--TEXT ->  Test 1 [1:2] |       |--NEWLINE -> \n [1:9] |       |--LEADING_ASTERISK ->  * [2:0] |       |--TEXT ->  Test 2 [2:2] |       |--NEWLINE -> \n [2:9] |       |--LEADING_ASTERISK ->  * [3:0] |       |--TEXT ->   [3:2] |       `--P_TAG_CLOSE ->  [3:3] |           |--OPEN -> < [3:3] |           |--SLASH -> / [3:4] |           |--P_HTML_TAG_NAME -> p [3:5] |           `--CLOSE -> > [3:6] |--NEWLINE -> \n [3:7] `--EOF ->  [4:0] ```  if we add tag that has open and closed tag. ``` $ cat issue.javadoc   *   * Test 1  * smth  * Test 2  *   $ java -jar checkstyle-7.4-all.jar -j issue.javadoc JAVADOC ->  * \n * Test 1\n * smth\n * Test 2\n * \n [0:0] |--LEADING_ASTERISK ->  * [0:0] |--TEXT ->   [0:2] |--HTML_ELEMENT -> \n * Test 1\n * smth\n * Test 2\n *  [0:3] |   `--PARAGRAPH -> \n * Test 1\n * smth\n * Test 2\n *  [0:3] |       |--P_TAG_OPEN ->  [0:3] |       |   |--OPEN -> < [0:3] |       |   |--P_HTML_TAG_NAME -> p [0:4] |       |   `--CLOSE -> > [0:5] |       |--NEWLINE -> \n [0:6] |       |--LEADING_ASTERISK ->  * [1:0] |       |--TEXT ->  Test 1 [1:2] |       |--NEWLINE -> \n [1:9] |       |--LEADING_ASTERISK ->  * [2:0] |       |--TEXT ->   [2:2] |       |--HTML_TAG -> smth [2:3] |       |   |--HTML_ELEMENT_OPEN ->  [2:3] |       |   |   |--OPEN -> < [2:3] |       |   |   |--HTML_TAG_NAME -> font [2:4] |       |   |   `--CLOSE -> > [2:8] |       |   |--TEXT -> smth [2:9] |       |   `--HTML_ELEMENT_CLOSE ->  [2:13] |       |       |--OPEN -> < [2:13] |       |       |--SLASH -> / [2:14] |       |       |--HTML_TAG_NAME -> font [2:15] |       |       `--CLOSE -> > [2:19] |       |--NEWLINE -> \n [2:20] |       |--LEADING_ASTERISK ->  * [3:0] |       |--TEXT ->  Test 2 [3:2] |       |--NEWLINE -> \n [3:9] |       |--LEADING_ASTERISK ->  * [4:0] |       |--TEXT ->   [4:2] |       `--P_TAG_CLOSE ->  [4:3] |           |--OPEN -> < [4:3] |           |--SLASH -> / [4:4] |           |--P_HTML_TAG_NAME -> p [4:5] |           `--CLOSE -> > [4:6] |--NEWLINE -> \n [4:7] `--EOF ->  [5:0] ```  Looks like problem is related only to existence of `SINGLETON_ELEMENT`. It is a bug in parser or there should be good explanation of this behavior and all checks need to be aware of it.  ATTENTION (update after merge of fix): Breaking compatibility changes are due to changes in AST structure.","closed","breaking compatibility,","romani","2017-02-08T23:43:22Z","2017-08-21T13:25:56Z"
"","3314","Wercker is unstable in PRs for localization testing","from #3159 .  I do not like how wercker works .... some time restart works some time it does not.  https://app.wercker.com/#checkstyle/checkstyle/build/576de03eefc0c401000122d7?step=576de04c8c574e0001449dd4  Failed tests: CheckerTest.testMultipleConfigs:633->BaseCheckTestSupport.verify:126->BaseCheckTestSupport.verify:134->BaseCheckTestSupport.verify:162 error message 0 expected: but was:  it has problem with locale testing, it is so unstable in PRs. For now I did not noticed problem in master.","closed","high demand,","romani","2016-06-26T16:58:31Z","2016-07-19T04:31:40Z"
"","3187","XDoc Config: create unit test to verify property types and default values","For types: https://github.com/checkstyle/checkstyle/blob/20506e1ceb2de74c9a85367135be714f8208643f/src/xdocs/config_coding.xml#L1283 We interchange `Type Set` and `list of types`. https://github.com/checkstyle/checkstyle/blob/20506e1ceb2de74c9a85367135be714f8208643f/src/xdocs/config_coding.xml#L2005 We interchange `boolean`/`Boolean` and `integer`/`Integer` types. https://github.com/checkstyle/checkstyle/blob/20506e1ceb2de74c9a85367135be714f8208643f/src/xdocs/config_naming.xml#L57 We have improper types, `3` instead of `Integer`.  For default values: https://github.com/checkstyle/checkstyle/blob/20506e1ceb2de74c9a85367135be714f8208643f/src/xdocs/config_coding.xml#L1789 https://github.com/checkstyle/checkstyle/blob/20506e1ceb2de74c9a85367135be714f8208643f/src/xdocs/config_imports.xml#L54 We interchange blanks with `{}`, `all files`, or `empty list` for sets depending on the context. https://github.com/checkstyle/checkstyle/blob/20506e1ceb2de74c9a85367135be714f8208643f/src/xdocs/config_javadoc.xml#L524 https://github.com/checkstyle/checkstyle/blob/20506e1ceb2de74c9a85367135be714f8208643f/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java#L60 Some default values are wrong.  There will be 2 hurdles with creating a junit for default values: 1) Bean fields must have the same name as the setter, which is what `BeanUtil` sees. https://github.com/checkstyle/checkstyle/blob/20506e1ceb2de74c9a85367135be714f8208643f/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java#L190-L191","closed","miscellaneous,","rnveach","2016-05-17T18:04:56Z","2016-06-18T01:42:13Z"
"","3182","Indentation: Multiple lambdas as method parameters","For this code:  ``` java import java.util.function.Supplier;  public class Sample {   public static void main(String[] args) {     foo(() -> {       // seems happy with this       return null;     }, () -> {       // seems to want more indent here       return null;     });   }    public static void foo(Supplier x, Supplier y) {} } ```  I see the following violations with version 6.18:  ``` [WARNING] src/main/java/Sample.java:[10] (indentation) Indentation: 'block' child have incorrect indentation level 6, expected level should be one of the following: 8, 10, 12. [WARNING] src/main/java/Sample.java:[11] (indentation) Indentation: 'block rcurly' have incorrect indentation level 4, expected level should be one of the following: 6, 8. ``` ##","open","indentation,","garricko","2016-05-16T23:49:12Z","2019-04-21T12:59:20Z"
"","3505","Issue: #3398 False positive for ImportOrder for default IntelliJ Idea settings","For fix [issue #3398](https://github.com/checkstyle/checkstyle/issues/3398) added new field: onDemandImportLastInGroup Config file for example:  ```                                                                                                     ```","closed","","linelect","2016-10-15T23:14:32Z","2016-10-29T21:01:34Z"
"","3114","Allow whitespace inside parens when contents are a lambda","For ease of reading, new Java 8 programmers may wish to visually separate inline anonymous functions from the surrounding parentheses, e.g.:  ``` stream.map( (Object o) -> someComplicatedOperation(o) )     .collect(CrazyJavaCollectorFactory) ```  However, a checkstyle whitespace rule of no-space-outside-or-inside-parens would not allow for this.  Could checkstyle add an additional whitespace setting to allow whitespace specifically for inline lambda declarations? ##","closed","","mcandre","2016-04-17T20:51:42Z","2016-11-11T00:00:01Z"
"","3514","Rename PkgControl to ImportControl","Follow up on #3510.  `PkgControl` should be renamed to `ImportControl` to reflect that it also works with class imports. Some of the javadoc should also be updated.  I will do this before I try to work on some other ImportControl related issues like for example #3498.","closed","miscellaneous,","jochenvdv","2016-10-25T15:54:24Z","2016-10-26T05:58:23Z"
"","3580","config: fixed issue with appveyor and corrupted maven cache","Fixing appveyor failure: ```` M2_HOME = ""C:\maven\apache-maven-3.2.5""  Please set the M2_HOME variable in your environment to match the  location of the Maven installation  Command exited with code 1 ````  Maven was somehow installed into `C:\maven\maven`. Since we cache the directory, it stuck with future runs and we were skipping new install because of directory check. This fixes verifying the install directory and that only it is cached.","closed","","rnveach","2016-11-24T18:46:36Z","2016-11-24T20:25:47Z"
"","3957","Issue #3648: make code coverage for MainFrameModel 100%","Fixes: #3648  **What I have done:**  - [x] 1. Add test cases for `ParseModeEnum`, `shouldAcceptFile` and `openFile` in `MainFrameModel`, the rest of methods are tested inside these test cases. - [x] 2. Use `Powermock` to reach the `default` branch in `MainFrameModel`. - [x] 3. Remove the configuration for excluding `MainFrameModel` in `pom.xml`.","closed","","xpdavid","2017-03-08T14:14:01Z","2017-03-11T21:55:40Z"
"","3992","Issue#2974: EmptyLineSeparator check now validates newlines before comments","fixes issue#2974","closed","","shivanshsoni","2017-03-13T09:42:30Z","2017-03-13T13:32:22Z"
"","4000","Issue #3999: Split and Organize Checkstyle inputs by Test for FileLength","Fixes Issue #3999","closed","","johnyleebrown","2017-03-14T01:35:03Z","2017-03-20T21:55:51Z"
"","3938","Issue #3929: Modified OperatorWrapCheckTest.java and moved its input files to operatorwrap subdirectory","Fixes Issue #3929","closed","","nikhilgupta23","2017-03-05T23:50:57Z","2017-03-09T01:45:44Z"
"","3996","Issue#2974: EmptyLineSeparator check now validates newlines before comments","fixes issue #2974","closed","","shivanshsoni","2017-03-13T14:53:56Z","2017-03-17T04:25:57Z"
"","3978","Issue #3976: Inputs by Test split and organised for EmptyForIteratorPad","fixes #3976 . It was assigned to me and discussion link:  https://groups.google.com/forum/#!topic/checkstyle-devel/ee95NUc09p0","closed","","shivanshsoni","2017-03-11T03:18:41Z","2017-03-14T16:54:09Z"
"","3457","doc: added missing slash to backport documentation url","Fixed missing slash in URL to backport documentation.","closed","","rnveach","2016-09-21T01:21:06Z","2016-09-21T01:48:28Z"
"","3683","CI special phase to enforce 644 permissions on all files","file permission change happened again - #3680.  CI special phase to enforce 644 permissions on all files.  Assigned to @MaksimP .","closed","miscellaneous,","romani","2016-12-31T01:55:19Z","2017-01-05T22:04:42Z"
"","3358","IllegalImportCheck should allow fully-qualified classes","Existing `IllegalImportInput.java` has this snippet:  ``` java 1. import sun.*; 2.  3. import java.awt.Component; 4. import java.awt.Graphics2D; 5. import java.awt.HeadlessException; 6. import java.awt.Label; 7. import java.util.Date; 8. import java.util.Calendar; 9. import java.util.BitSet; ``` # We can do now: - Blacklist line 1 with the default value `sun` - Blacklist lines 3--9 with the value `java` - Blacklist lines 3--6 with the value `java.awt` - Blacklist lines 7--9 with the value `java.util` # But we cannot: - Blacklist line 7 with the value `java.util.Date`, and similar.  This is because the check is that the import test starts with `pattern + "".""`. It's an easy fix to check for either `startsWith(pattern + '.')` or `equals(pattern)`.  But it could also be improved under the hood by using a compiled Regex (`Pattern`) to implement the check. ##","closed","","dhalperi","2016-07-19T03:09:55Z","2017-04-21T10:57:50Z"
"","3266","CommitValidationTest.testCommitMessageHasSingleLine to support github default format","Example: https://travis-ci.org/checkstyle/checkstyle/jobs/136760315#L794  Reason: I did merge from web UI. Such format is used by default in github.  I think we need to extend validation to allow such format. I more and more use web ui merge to speed up process.","closed","miscellaneous,","romani","2016-06-10T19:51:42Z","2016-06-12T13:07:29Z"
"","3383","Skip dry run build item for maven release commit","Example: https://travis-ci.org/checkstyle/checkstyle/builds/148617922  Todo: skip this build item then commit message is for version bump. ##","closed","CI,","romani","2016-07-31T12:53:18Z","2019-07-21T05:55:44Z"
"","3283","Checkstyle `6.19` Requires Java `1.8` but is not declared","Even though Java 7 is no longer supported, we still have some applications using it. The recent `6.19` release caused our builds to fail since it seems to require Java 8. This was not declared in the release notes. Was this done by accident?   ``` [DEBUG] Configuring mojo org.apache.maven.plugins:maven-checkstyle-plugin:2.17:check from plugin realm ClassRealm[plugin>org.apache.maven.plugins:maven-checkstyle-plugin:2.17, parent: sun.misc.Launcher$AppClassLoader@409a44d6] [WARNING] Error injecting: org.apache.maven.plugin.checkstyle.CheckstyleViolationCheckMojo java.lang.UnsupportedClassVersionError: com/puppycrawl/tools/checkstyle/api/CheckstyleException : Unsupported major.minor version 52.0 ```  We reverted back to `6.18` to circumvent this issue. Hopefully we can move to 8 in the near future. However I can see this being an issue for many.","closed","","mrcritical","2016-06-17T13:39:35Z","2016-06-17T16:09:34Z"
"","3544","clean API methods and other methods from word ""Error""","Error is a severity of violation. We report violations to user, severity of it is up to user.  There are number of methods, even non API, that mislead by name - should be fixed. Proposed term - violation .  old API methods could be marked as deprecated for few releases to let users be ready.  There bunch of terms in our API (about the same): MessageDispatcher LocalizedMessage AuditEvent Error  proposal is to use the same terminology: MessageDispatcher ===> ViolationDispatcher ( ideally to make it ViolationListener) LocalizedMessage ==>LocalizedViolation AuditEvent ===> Violation  if you know better names - please suggest.  --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39151862-clean-api-methods-and-other-methods-from-word-error?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","open","approved,","romani","2016-11-11T14:24:06Z","2021-12-22T04:49:45Z"
"","3855","LeftCurlyCheck: clarify behavior of 'nlow' option after removal of 'maxLineLength'","EDIT: only documentation is updated.  /var/tmp $ cat YOUR_FILE.java  ``` public class PaymentAuthorisationRefusedException {     public PaymentAuthorisationRefusedException(String message, Throwable cause)     {         super(message, cause);     } } ```  /var/tmp $ cat config.xml  ```                                                 ``` /var/tmp $ java -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java  ``` Starting audit... [WARN] /tmp/PaymentAuthorisationRefusedException.java:4:5: '{' at column 5 should be on the previous line. [LeftCurly] Audit done. ```  ---------------  LeftCurly checker defined with nlow (new line on wrap). Default max line length of 80 is used. The statement in question is exactly 80 characters long with left curly brace on new line.  If left curly brace is put on previous line as asked, the following violation triggers: ``` [WARN] /tmp/PaymentAuthorisationRefusedException.java:3: Line is longer than 80 characters (found 82). [LineLength] ``` Expectation is that LeftCurly checker takes LineLength (max) into account.  --------------","closed","miscellaneous,","syabru","2017-02-24T10:37:10Z","2017-10-25T00:27:51Z"
"","3834","Eclipse-CS plugin 7.3.0 cannot be installed from Marketplace or updatesite","Eclipse-CS (7.3.0) can be found on Eclipse Marketplace, but installation fails: ![image](https://cloud.githubusercontent.com/assets/1444439/22971649/4e8f9c7c-f36e-11e6-9bd4-7470f3a11438.png)  Following error is shown in Error Log: ``` Unable to read repository at https://sourceforge.net/projects/eclipse-cs/files/updatesite/7.3.0/content.xml. javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure 	at sun.security.ssl.Alerts.getSSLException(Unknown Source) 	at sun.security.ssl.Alerts.getSSLException(Unknown Source) 	at sun.security.ssl.SSLSocketImpl.recvAlert(Unknown Source) 	at sun.security.ssl.SSLSocketImpl.readRecord(Unknown Source) 	at sun.security.ssl.SSLSocketImpl.performInitialHandshake(Unknown Source) 	at sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source) 	at sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source) 	at org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:535) 	at org.eclipse.ecf.provider.filetransfer.httpclient4.SNIAwareHttpClient$1.connectSocket(SNIAwareHttpClient.java:63) 	at org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:403) 	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:177) 	at org.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:304) 	at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:611) 	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:446) 	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:863) 	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82) 	at org.eclipse.ecf.provider.filetransfer.httpclient4.HttpClientFileSystemBrowser.runRequest(HttpClientFileSystemBrowser.java:263) 	at org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob.run(AbstractFileSystemBrowser.java:69) 	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55) ```  Eclipse-CS is also not available for installation from updatesite: ![image](https://cloud.githubusercontent.com/assets/1444439/22971750/a96866ba-f36e-11e6-8057-f52162cddd04.png) Same exception appears in Error Log when Eclipse attempts to get list of available plugins from updatesite.   Plugin works fine after manual installation from zip archive downloaded from SF","closed","","KTannenberg","2017-02-15T11:07:39Z","2017-02-15T11:10:17Z"
"","3848","RequireThisCheck is not fully covered with UTs","Due to https://github.com/checkstyle/checkstyle/issues/3843 it appears that RequireThisCheck is not fully covered:  ![screenshot at 2017-02-22 00-36-32](https://cloud.githubusercontent.com/assets/7242568/23186120/fcdf4228-f896-11e6-8821-79d13698ac48.png)  100% branches and lines coverage need to be reached.","closed","miscellaneous,","MEZk","2017-02-21T21:37:37Z","2017-02-28T18:50:17Z"
"","3291","config: deactivate dsm-maven-plugin as it does not support Java 1.8","dsm-maven plugin was deactivated until https://github.com/sevntu-checkstyle/dsm-maven-plugin/issues/31 be resolved.","closed","","MEZk","2016-06-19T09:11:09Z","2016-06-19T13:03:59Z"
"","3463","doc: removed extra words","doc: removed extra words","closed","","cog","2016-09-23T13:25:05Z","2016-09-27T12:44:08Z"
"","3572","doc: fixed broken filefilters link","doc: fixed broken filefilters link","closed","","kgeis","2016-11-22T05:47:26Z","2016-11-23T21:43:51Z"
"","3851","added Russian messages","doc: added Russian messages","closed","incomplete,","anton-arsentyev","2017-02-22T11:53:47Z","2017-05-01T20:22:16Z"
"","3432","GUI: Add support of DetailNode objects in CodeSelector","Depends on #408. Code highlighter (CodeSelector class) works only with DetailAST objects. Need to add support of DetailNode objects (Javadoc nodes). ##","closed","approved,","baratali","2016-09-06T21:13:21Z","2016-11-16T23:32:18Z"
"","3744","File definition for suppressions should ignore path separator","Currently, if we want the suppression rules to work on both Windows and Linux, we have to use `[\\/]` as the path separator. Our current configuration only works on Linux (https://github.com/hazelcast/hazelcast/blob/master/checkstyle/suppressions.xml). If we replace all path separators with `[\\/]`, the file becomes lot harder to read, have a look at your https://github.com/checkstyle/checkstyle/blob/master/config/suppressions.xml.  I propose, that there could be an option to automatically convert backslashes to forward slashes on Windows before matching the regex:  For example:  The file name `c:\projects\program\com\example\package\impl\Clazz.java` will be matched by rule:        I even believe, that most people won't mind if this is done by default.","open","approved,","viliam-durina","2017-01-19T20:52:32Z","2019-07-07T08:08:13Z"
"","3201","Allow to configure if ArrayTrailingComma should ignore single-line arrays","Currently the [ArrayTrailingComma](http://checkstyle.sourceforge.net/config_coding.html#ArrayTrailingComma) automatically ignores inline declarations. So using a configuration such as:  ``` xml                        ```  will never report on constructs such as:  ``` java public class Foo {     public int[] getBar() {         return new int[] { 0 };         //                  ^ doesn't report missing trailing comma     } } ```  ``` bash $ java -jar ~/Downloads/checkstyle-6.18/checkstyle-6.18-all.jar -c config.xml Foo.java Starting audit... Audit done. ```  This behaviour is by design and is documented. However, it would be nice if such behaviour could be configured through a property (keeping the current behaviour as default for backwards compatibility), so that we may write a configuration such as:  ``` xml                                              ```  And have it report a missing trailing comma on the given code, forcing developers to write:  ``` java public class Foo {     public int[] getBar() {         return new int[] { 0, };     } } ```  Making the new `ignoreInlineArrays` property default to `true` would guarantee backwards compatibility, allowing users to opt-in to this behaviour. ##","closed","easy,","jsotuyod","2016-05-20T15:24:00Z","2020-04-28T16:09:17Z"
"","3110","some messages are still hardcoded in english","CS still has some output events that are hardcoded in the code and are only in English. Some already have translations in message files, but we don't use them. We translate check messages to their specific language so non-english users can understand the issue, we should do the same with every output of CS (minus XML attributes and such) so there is no confusion.  Examples: https://github.com/checkstyle/checkstyle/blob/e18195de775c9ee707f31760820bc45cd1c9aa91/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java#L130-L143 https://github.com/checkstyle/checkstyle/blob/e18195de775c9ee707f31760820bc45cd1c9aa91/src/main/java/com/puppycrawl/tools/checkstyle/Main.java#L192 ##","open","easy,","rnveach","2016-04-16T13:18:16Z","2022-03-01T13:06:46Z"
"","3312","Ant: accept path in addition to fileset option","Created: 2009-03-30 Creator: Oliver Burn  We just started using checkstyle in our Java 6 codebase with Ant. It seems that Ant is going through a mild revolution in terms of Resource Collections in its data types, which is a good thing.  I bring this up because the checkstyle ant task only takes a single file or a fileset as input. The problem is that I have my source files in several directories that are defined as a path, a sourcepath that is used with many tasks including javac, javadoc, etc. Unfortunately Ant doesn’t make it easy to convert from a path to a fileset(http://stackoverflow.com/a/1700641/1015848), and the ant-contrib task of pathtofileset doesn’t actually make a fileset of the files in the path, just of the paths themselves. If I do this and pass the new fileset to the checkstyle ant task it doesn’t find any java files.  When I discussed this on the ant mailing list, it was suggested that checkstyle support paths as well as filesets for specifying source files. http://mail-archives.apache.org/mod_mbox/ant-user/200903.mbox/%3c49CBFEA9.4040109@gmx.de%3e  I had a quick look at doing this in the checkstyle task. With the assumption that a provided path specifies a number of root directories that are expanded into source trees, doesn’t seem too difficult. To handle all resource types appears to be quite a bit more effort at first glance but still not complex.  Read: ""fileset"" type - https://ant.apache.org/manual/tutorial-tasks-filesets-properties.html#filesets , java type ""FileSet"" ""path"" type - https://ant.apache.org/manual/tutorial-tasks-filesets-properties.html#path, java type ""Path""  Right now we have `public void addFileset(FileSet fileSet) {` - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java#L158 it is required to create new property `public void addPath(Path path) {`","closed","medium,","romani","2016-06-26T05:17:03Z","2017-04-29T17:41:30Z"
"","3308","EqualsHashCode: hashCode without equals is not a violation","Created: 2005-07-29 Creator: Christian Spreuer  http://checkstyle.sourceforge.net/config_coding.html#EqualsHashCode  EqualsHashCodeCheck checks that if equals is overridden (either correctly with an Object parameter or wrongly with some other Class), hashCode should also be overridden.  But it does not check the other way round, that if hashCode is overridden also equals is overridden.  Strictly speaking, this is harmless most times, but usually it indicates that the programmer did make an error. Most programming rules I know strongly associate both methods - either overload none or both. E.g. http://gee.cs.oswego.edu/dl/html/javaCodingStd.html#secRec >If you override Object.equals, also override Object.hashCode, and vice-versa. Rationale: Essentially all containers and other utilities that group or compare objects in ways depending on equality rely on hashcodes to indicate possible equality.  I thought there was also a test that if equals is overridden it has the right signature, but I do not find it right now (this sentence could be a feature request).  ``` /var/tmp $ cat TestClass.java  public class InputEqualsHashCode {     public int hashCode() {         return 1;     }  } /var/tmp $ cat my_check.xml                               /var/tmp $ java -jar checkstyle-7.0-SNAPSHOT-all.jar -c my_check.xml TestClass.java  Starting audit... Audit done. ```","closed","approved,","romani","2016-06-25T03:56:06Z","2018-10-19T14:05:04Z"
"","3309","ClassDataAbstractionCoupling and ClassFanOutComplexity: property to exclude packages","Created: 2004-07-29 Creator: Paul Private: No  Hi there,  http://checkstyle.sourceforge.net/config_metrics.html#ClassDataAbstractionCoupling  It would be nice to be able to exclude packages from the Data Abstraction Coupling check. For example the entire Java SDK packages could be excluded by specifying java. and javax. to be excluded.  Cheers, Paul. Discussion  ``` Gunter Blache 2004-08-09 I would like to support the request. Especially when writing Swing GUI code, you easily surpass the default data abstraction coupling and class fan out values, although these values definately make a lot of sense for regular classes. E.g. a regualar main window uses GUI components JFrame, JPanel, JButton, JTextField, JMenuBar, JMenu, JMenuItem, JFileChooser, event handling classes like ActionListener, WindowListener, MouseListener, models like Document, ButtonGroup, and the standard classes String, File etc. and there is just no way around it ( except from breaking this into multiple classes, but this usually does not make sense ) ``` ##","closed","medium,","romani","2016-06-25T04:31:32Z","2017-04-10T13:55:28Z"
"","3567","use ForbidAnnotationElementValueCheck from sevntu.checkstyle","create PR to Checkstyle project to use new Checks at https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_sevntu_checks.xml  new Check: ForbidAnnotationElementValueCheck, 1.22.0","closed","easy,","romani","2016-11-20T01:17:59Z","2019-02-15T14:14:36Z"
"","3632","travis: use standalone shell files","Create folder: `.\ci\travis` place in it shell files that it is required to be launched by Travis.  Travis config need to be changed to work like:  https://github.com/checkstyle/sonar-checkstyle/blob/master/.travis.yml https://github.com/checkstyle/sonar-checkstyle/blob/master/travis.sh  We can use travis.sh as single collector for commands that are simple. Complicated commands should be created in separate shells.  Cons: - one CI, multiple files, and even separate folder for this. - mixture of files for CI and actual projects content in the same repo  Benefits: - User can run the same commands easily on their local - scripts become more userfirendly - it would be possible to use `""` in scripts, in string concatenation that does not work  Side notes:  github already kind of ""forced"" us to create "".guthub"" folder , so we already have a mix.  --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39919169-travis-use-standalone-shell-files?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","romani","2016-12-09T23:05:53Z","2016-12-12T01:05:04Z"
"","3124","minor: removed unnecessary count correction in indentation test","count correction was causing the warnings in the input file and the test file to be out of sync. It made it seem like an input file had an extra violation when it didn't as seen in the one input file corrected. Also we were only using it in one place. I removed count correction completely.","closed","","rnveach","2016-04-24T14:38:42Z","2016-04-28T12:49:12Z"
"","3870","appveyor:  provide ability to skip CI executions base on commit files","continuation of #3818 .  we need to extend build script to skip CI execution if non-related files are changed only. wercker , travis, distelli, shippable are already  updated.","closed","miscellaneous,","romani","2017-02-27T00:58:05Z","2017-10-18T11:55:24Z"
"","3869","circleci: provide ability to skip CI executions base on commit files","continuation of #3818 .  we need to extend build script to skip CI execution if non-related files are changed only. wercker , travis, distelli, shippable are already  updated.","closed","miscellaneous,","romani","2017-02-27T00:58:01Z","2017-03-02T13:15:54Z"
"","3598","config: bump guava version","Continuation of #3527.","closed","","rnveach","2016-11-29T15:58:58Z","2017-04-18T12:52:04Z"
"","3698","improve OverloadMethodsDeclarationOrder to optionally group static methods separately from instance methods","Consider the following code: ```java $ cat config.xml                              $ cat Test.java  public class Test {     void foo() { /* code */ }     void foo(String baz) { /* code */ }     void bar() { /* code */ }     static void foo() { /* code */ } // detected as out of order - point of issue }  $ java -jar checkstyle-7.4-all.jar -c config.xml Test.java Starting audit... [ERROR] /home/rivanov/nfs/tests/Test.java:5: Overload methods should not be split. Previous overloaded method located at line '3'. [OverloadMethodsDeclarationOrder] Audit done. Checkstyle ends with 1 errors. ``` --------------- Currently `OverloadMethodsDeclarationOrder` only considers the method name and does not take into account other information.  The **suggested improvement** is to allow a user to choose whether `static` methods should or shouldn't be considered as overloading instance methods.  ```xml                    ``` The default should obviously `separateStatic=false` to maintaining the current functionality ``  Should this feature be expected, i'd be happy to contribute it's implementation.  -------------- Note:  - This issue, is similar, but not a duplicate of [OverloadMethodsDeclarationOrder reports an error when static and instance method not together: opportunity for improvement? #2652](https://github.com/checkstyle/checkstyle/issues/2652) as it treats current implementation as a buggy, while this issue proposes to provide the user with the flexibility of configuration - [Apply OverloadMethodsDeclarationOrder check for the same access modificators only #3235](https://github.com/checkstyle/checkstyle/issues/3235), *requesting a similar sort of functionality scoped by method visibility*, and this issue can be implemented together","closed","","ilanKeshet","2017-01-06T16:55:16Z","2017-01-28T15:07:11Z"
"","3074","FinalLocalVariable: false positive when variable is assigned inside and outside switch-block","Configuration:  ``` xml                       ```  Input:  ``` java public class Test { private static void combine(final int[][] m, final int x, final int y, final int d, final int[] regionSizes) {     final int a = m[y][x] & 1;     int b;     switch (d) {     case 1:       b = m[y - 1][x];       break;     case 2:       b = m[y][x - 1];       break;     case 3:       b = m[y][x + 1];       break;     default:        b = m[y + 1][x];       break;     }     b &= 5;   } } ```  Output:  ``` Starting audit... [ERROR] /home/andreiselkin/Downloads/Test.java:5:9: Variable 'b' should be declared final. [FinalLocalVariable] Audit done. Checkstyle ends with 1 errors.  ```  Variable b cannot be declared final, due to compile time error.","closed","approved,","MEZk","2016-04-01T16:46:24Z","2016-07-23T05:10:20Z"
"","3166","CommentsIndentation Check incorrect work with subsequent comments","Config:  ``` xml                       ```  **1.** Input:  ``` java public class Test {     void foo() {         hashCode();             // comment - line 4           // comment - line 5         hashCode();     } } ```  Result:  ``` vlad@vlad-N61PC-M2S ~/cli $ java -jar checkstyle-6.18-all.jar -c my_check.xml Test.java Starting audit... [ERROR] /home/vlad/cli/Test.java:4: Comment has incorrect indentation level 12, expected is 10, indentation should be the same level as line 5. [CommentsIndentation] [ERROR] /home/vlad/cli/Test.java:5: Comment has incorrect indentation level 10, expected is 8, indentation should be the same level as line 6. [CommentsIndentation] Audit done. Checkstyle ends with 2 errors. ```  Expected: in both cases indentation should be the same level as line 3 or line 6.  **2.** Input:  ``` java public class Test {     void foo() {         hashCode();             // comment - line 4           // violation - line 5     } } ```  Result:  ``` vlad@vlad-N61PC-M2S ~/cli $ java -jar checkstyle-6.18-all.jar -c my_check.xml Test.java Starting audit... [ERROR] /home/vlad/cli/Test.java:4: Comment has incorrect indentation level 12, expected is 10, indentation should be the same level as line 5. [CommentsIndentation] Audit done. Checkstyle ends with 1 errors. ```  Expected: in both cases indentation should be the same level as line 3.","closed","approved,","Vladlis","2016-05-10T22:03:20Z","2016-06-16T13:33:09Z"
"","3099","added Codacy to the list of active tools","Codacy now supports CheckStyle: http://blog.codacy.com/2016/03/17/codacy-integrates-checkstyle/. It also supports CheckStyle config files.","closed","","cog","2016-04-14T10:27:03Z","2016-04-18T13:07:26Z"
"","3377","10 unit tests in Checkstyle master branch fail when executed in non-English locale","Checkstyle's UTs have problems being executed on German machine (https://github.com/checkstyle/checkstyle/issues/3317). In addition, Maven does not set user language and country properly when it executes UTs with the following set of commands taken from Travis CI matrix:  ``` mvn clean integration-test failsafe:verify -DargLine='-Duser.language=de -Duser.country=DE' mvn clean integration-test failsafe:verify -DargLine='-Duser.language=es -Duser.country=ES' mvn clean integration-test failsafe:verify -DargLine='-Duser.language=fi -Duser.country=FI' mvn clean integration-test failsafe:verify -DargLine='-Duser.language=fr -Duser.country=FR' mvn clean integration-test failsafe:verify -DargLine='-Duser.language=zh -Duser.country=CN' mvn clean integration-test failsafe:verify -DargLine='-Duser.language=ja -Duser.country=JP' mvn clean integration-test failsafe:verify -DargLine='-Duser.language=pt -Duser.country=PT' mvn clean integration-test failsafe:verify -DargLine='-Duser.language=tr -Duser.country=TR' ```  BaseCheckTestSupport has [getCheckMessage](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java#L265) method which loads message resources as stream, but not as resource bundle. It means that UTs have to fail in German or other locale as we always load the messages.properties without language and country variants, but they do not.  The problem may happen due to the fact that some system properties (as `user.language` and `user.country`) must be set on the command line of the JVM, and cannot be set after the JVM has been started.   maven-surefire-plugin has [special VM properties](http://maven.apache.org/surefire/maven-surefire-plugin/examples/system-properties.html) which are intended to deal with the Maven's problem. If we configure maven surefire plugin in our pom.xml as follows:  ``` xml                org.apache.maven.plugins         maven-surefire-plugin         2.19.1                                 ${project.build.directory}/jacoco/jacoco.exec                                   src/test/resources-noncompilable                                   com/puppycrawl/**/*.java                      -Duser.country=DE -Duser.language=de                 ```  and run Maven from command line, there will be 10 failed UTs:  ``` Failed tests:   CheckerTest.testMultipleConfigs:633->BaseCheckTestSupport.verify:126->BaseCheckTestSupport.verify:134->BaseCheckTestSupport.verify:162 error message 0 expected: but was:   HeaderCheckTest.testCacheHeaderFile:266->BaseCheckTestSupport.verify:126->BaseCheckTestSupport.verify:134->BaseCheckTestSupport.verify:162 error message 0 expected: but was:   HeaderCheckTest.testNotMatch:185->BaseCheckTestSupport.verify:121->BaseCheckTestSupport.verify:134->BaseCheckTestSupport.verify:162 error message 0 expected:   HeaderCheckTest.testStaticHeader:75->BaseCheckTestSupport.verify:121->BaseCheckTestSupport.verify:134->BaseCheckTestSupport.verify:162 error message 0 expected: but was:   RegexpHeaderCheckTest.testEmptyMultiline:273->BaseCheckTestSupport.verify:121->BaseCheckTestSupport.verify:134->BaseCheckTestSupport.verify:162 error message 0 expected: but was:   RegexpHeaderCheckTest.testInlineRegexpHeader:162->BaseCheckTestSupport.verify:121->BaseCheckTestSupport.verify:134->BaseCheckTestSupport.verify:162 error message 0 expected: but was:   RegexpHeaderCheckTest.testRegexpHeader:139->BaseCheckTestSupport.verify:121->BaseCheckTestSupport.verify:134->BaseCheckTestSupport.verify:162 error message 0 expected: but was:   RegexpHeaderCheckTest.testRegexpHeaderMulti5:241->BaseCheckTestSupport.verify:121->BaseCheckTestSupport.verify:134->BaseCheckTestSupport.verify:162 error message 0 expected: but was:   RegexpHeaderCheckTest.testRegexpHeaderMulti52:284->BaseCheckTestSupport.verify:121->BaseCheckTestSupport.verify:134->BaseCheckTestSupport.verify:162 error message 0 expected: but was:   RegexpHeaderCheckTest.testRegexpHeaderUrl:151->BaseCheckTestSupport.verify:121->BaseCheckTestSupport.verify:134->BaseCheckTestSupport.verify:162 error message 0 expected: but was: ```  As you can see expected message was in English but actual was in German. Note, that the problem can be reproduced only if all JVM instances are terminated before Maven execution. The main problem is that we do not know why tests which do not extend AbstractFileSetCheck directly are not broken. ##","closed","approved,","MEZk","2016-07-29T09:22:57Z","2017-10-28T13:41:14Z"
"","3144","NullPointerException in FinalLocalVariableCheck with Lambdas","Checkstyle terminates due to a `NullPointerExcetpion` when processing the file `Operation.java`:  ``` java @FunctionalInterface public interface Operation {      public Object apply();      public static final Operation OPERATION = () -> {         Object result;         result = null;         return result;     }; } ```  `java -jar checkstyle-6.17-all.jar -c checks.xml Operation.java`   ``` Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing Operation.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:318)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:274)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:330)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:159) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.findFirstUpperNamedBlock(FinalLocalVariableCheck.java:488)         at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.isSameVariables(FinalLocalVariableCheck.java:505)         at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.removeVariable(FinalLocalVariableCheck.java:393)         at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.visitToken(FinalLocalVariableCheck.java:212)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:363)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:478)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:305)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:181)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:338)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:308)         ... 3 more Checkstyle ends with 1 errors. ```  If the line `result = null;` is removed the issues disappears. The same happens if the Lambda is replace with an anonymous class instance, i.e. `OPERATION = new Operation() {...`.  Content of `checks.xml`:  ``` xml                                       ```","closed","approved,","zapster","2016-04-29T09:31:29Z","2016-05-01T12:49:12Z"
"","3056","false positive spacing warning when using double curly brace notation","Checkstyle presents spurious warnings about spacing when I use double brace initialization syntax.  http://c2.com/cgi/wiki?DoubleBraceInitialization ##","closed","","mcandre","2016-03-23T15:50:41Z","2016-11-11T00:00:12Z"
"","3455","api: remove from API all guava code","Checkstyle 8 task.  file config/import-control.xml  ```    ```  API should be clear from any non standard classes.  Since this change is being done in API code, this will break backward compatibility with any existing code that uses it if it is not re-compiled. When upgrading, to mitigate this issue, all custom JARs must be recompiled against new checkstyle code.  Example of failure: https://app.wercker.com/checkstyle/checkstyle/runs/build/5a27437a9fe1e0000127e823?step=5a2743a0540e1a00018beb4f > java.lang.Error: Error was thrown while processing /pipeline/source/src/test/java/com/puppycrawl/tools/checkstyle/AbstractPathTestSupport.java Caused by: java.lang.NoSuchMethodError: com.puppycrawl.tools.checkstyle.api.FileContents.getBlockComments()Lcom/google/common/collect/ImmutableMap;  The method still does exist, but the signature was changed. So technically there is nothing wrong with code, it just needs to be recompiled to correct the signature.","closed","breaking compatibility,","romani","2016-09-20T20:23:19Z","2017-12-31T17:10:41Z"
"","3004","JavadocStyle: Some messages does not work.","Change messages below does not work: - javadoc.noPeriod - javadoc.unclosedHtml - javadoc.extraHtml  ``` E:\test>type TestClass.java /**  * noPeriod  * unclosedHtml  * extraHtml  */ public class TestClass {} E:\test> type config.xml                                                                                     E:\test> java -jar checkstyle-6.5-all.jar -c config.xml TestClass.java Starting audit... E:\test\TestClass.java:1: First sentence should end with a period. E:\test\TestClass.java:3:16: Unclosed HTML tag found:  E:\test\TestClass.java:4:18: Extra HTML tag found:  Audit done. ```  **Expected:** 1. Line 1 must fail with `javadoc.noPeriod`; 2. Line 3 must fail with `javadoc.unclosedHtml`; 3. Line 4 must fail with `javadoc.extraHtml`.","closed","javadoc,","ybbpgfjtey","2016-03-04T13:16:37Z","2016-04-18T13:43:28Z"
"","3793","indention in nested @interface classes is shifted","cat /tmp/Wrapper.java   ``` public class Wrapper {      public @interface Bar     {          int FOO = 791;          class Util         {              public static boolean isFoo(@Bar int bar)             {                 return bar == Bar.FOO;             }         }     }  }  ```  /var/tmp cat config.xml  ``````  /var/tmp $ java -jar checkstyle-7.5-all.jar -c config.xml Wrapper.java  ``` Starting audit... [ERROR] /tmp/Wrapper.java:7: 'member def type' have incorrect indentation level 8, expected level should be 4. [Indentation] [ERROR] /tmp/Wrapper.java:9: 'class def ident' have incorrect indentation level 8, expected level should be 4. [Indentation] [ERROR] /tmp/Wrapper.java:9:9: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor] [ERROR] /tmp/Wrapper.java:10: 'class def lcurly' have incorrect indentation level 8, expected level should be 4. [Indentation] [ERROR] /tmp/Wrapper.java:12: 'method def modifier' have incorrect indentation level 12, expected level should be 8. [Indentation] [ERROR] /tmp/Wrapper.java:13: 'method def lcurly' have incorrect indentation level 12, expected level should be 8. [Indentation] [ERROR] /tmp/Wrapper.java:14: 'method def' child have incorrect indentation level 16, expected level should be 12. [Indentation] [ERROR] /tmp/Wrapper.java:15: 'method def rcurly' have incorrect indentation level 12, expected level should be 8. [Indentation] [ERROR] /tmp/Wrapper.java:16: 'class def rcurly' have incorrect indentation level 8, expected level should be 4. [Indentation] Audit done. Checkstyle ends with 9 errors.  ```  ---------------   As you see class is formatted as expected using 4 space intent. If I change `@interface Bar` to `interface Bar` I wouldn't get those errors.","open","indentation,","MikolajKakol","2017-02-03T08:13:23Z","2017-02-03T18:36:55Z"
"","3738","Override default modules","can you add opportunity to override models in default xml?","closed","","andreevym","2017-01-18T18:10:13Z","2017-02-03T15:43:56Z"
"","3551","CustomImportOrder should check that import groups are separated by one line only","Based on the discussion at https://github.com/checkstyle/checkstyle/pull/3519, CustomImportOrder check should validate the exact number of blank lines between groups if separateLineBetweenGroups option is set to true.   Google Style Guide ([section 3.3.3](https://google.github.io/styleguide/javaguide.html#s3.3.3-import-ordering-and-spacing)) says that If there are both static and non-static imports, a single blank line separates the two blocks. There are no other blank lines between import statements. In addition, code formatters in popular IDEs remove double blank lines betwen groups (see discussion at https://github.com/checkstyle/checkstyle/issues/2143). Thus, lets restrict the number of blank lines between import groups to one.   The current implementation of CustomImportOrder allows to have more than one blank line between import groups and this leads to inability of covering the new Google Style Guide (section 3.3.3) rule with the check.  Current behavior:  ```` $ cat TestClass.java import static com.puppycrawl.tools.checkstyle.utils.AnnotationUtility.containsAnnotation; import static com.puppycrawl.tools.checkstyle.utils.AnnotationUtility.getAnnotation;   import com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck; import com.puppycrawl.tools.checkstyle.checks.design.ThrowsCountCheck; import com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck; import com.sun.accessibility.internal.resources.*; import java.util.Arrays; import java.util.BitSet; import java.util.Map; import java.util.Map.Entry; import java.util.NoSuchElementException; import javax.accessibility.Accessible; import org.apache.commons.beanutils.converters.ArrayConverter;  public class InputCustomImportOrderValid { }  $ cat TestConfig.xml                         	     	     	     	        $ java -jar checkstyle-7.2-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  Expected:  violation on line 4 since there are more than one line which separates the import groups.  ---- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39196290-customimportorder-should-check-that-import-groups-are-separated-by-one-line-only?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","approved,","MEZk","2016-11-13T19:37:14Z","2016-12-30T18:15:08Z"
"","3760","Links to google_checks.xml and sun_checks.xml on Checkstyle web site should point to the latest release","Based on https://github.com/checkstyle/checkstyle/issues/3675#issuecomment-275449314 , https://github.com/checkstyle/checkstyle/issues/3675#issuecomment-275455444 , and https://github.com/checkstyle/checkstyle/issues/3675#issuecomment-275456856  links to google_checks.xml and sun_checks.xml at Checkstyle web site (http://checkstyle.sourceforge.net/google_style.html) should point to the latest release. Now they both point to the latest master versions. This causes problem as new Check or properties could be introduced and not not released yet.  We need to think how to change search URL to reference strict release tag, if that is possible by GitHub API. Link should be https://github.com/checkstyle/checkstyle/blob/checkstyle-6.13/src/main/resources/google_checks.xml (master ==> checkstyle-X.XX)","open","approved,","MEZk","2017-01-26T18:34:24Z","2017-02-09T20:29:13Z"
"","3321","Change in behaviour of RightCurlyCheck when treating DO-WHILE loops","Based on https://github.com/checkstyle/checkstyle/issues/3320 there is a change in RightCurlyCheck behaviour.  Input:  ``` java public class TestClass {     void method() {         int x = 2;         int y = 3;         do {             int c = 5;         } while (x > y); // line 7         while (true) {             y = 8;         } x++; // line 10     } } ```  Configuration:  ``` xml                                                                           ```  Checkstyle 6.19 output:  ``` Starting audit... [ERROR] TestClass.java:10:9: '}' at column 9 should be alone on a line. [RightCurly] Audit done. Checkstyle ends with 1 errors. ```  Checkstyle 7.0 output:  ``` Starting audit... [ERROR] TestClass.java:7:9: '}' at column 9 should be alone on a line. [RightCurly] [ERROR] TestClass.java:10:9: '}' at column 9 should be alone on a line. [RightCurly] Audit done. Checkstyle ends with 2 errors. ```  From my point of view the behaviour (Checkstyle 7.0) is correct since '}' on line 7 is not alone on the line. What is more, as it was requested at https://github.com/checkstyle/checkstyle/issues/3090 there should not be violation in the following example:  Input:   ``` java public class DoWhile {     public static void main(String[] args) {         do {         } while (true);     } } ```  Configuration:  ``` xml                                  ```  However, if there is a false positive in Checkstyle 7.0, it will mean that both options (SAME and ALONE) should work equally for do-while loops which certainly is incorrect.  Finally, some users prefer to place '}' on the same line as literal WHILE in do-while loops, even if brace policy is ALONE, but RightCurlyCheck (Checkstyle 7.0) will throw violation. To avoid the violation they have to exclude LITERAL_DO from tokens set.   Let's investigate the following example: Input:  ``` java public class DoWhile {     public static void main(String[] args) {         do {             int a = 5;         } while (true);     } } ```  Tree structure:  ``` CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |  `--LITERAL_PUBLIC -> public [1:0] |--LITERAL_CLASS -> class [1:7] |--IDENT -> DoWhile [1:13] `--OBJBLOCK -> OBJBLOCK [1:21]     |--LCURLY -> { [1:21]     |--METHOD_DEF -> METHOD_DEF [2:4]     |  |--MODIFIERS -> MODIFIERS [2:4]     |  |  |--LITERAL_PUBLIC -> public [2:4]     |  |  `--LITERAL_STATIC -> static [2:11]     |  |--TYPE -> TYPE [2:18]     |  |  `--LITERAL_VOID -> void [2:18]     |  |--IDENT -> main [2:23]     |  |--LPAREN -> ( [2:27]     |  |--PARAMETERS -> PARAMETERS [2:34]     |  |  `--PARAMETER_DEF -> PARAMETER_DEF [2:34]     |  |      |--MODIFIERS -> MODIFIERS [2:34]     |  |      |--TYPE -> TYPE [2:34]     |  |      |  `--ARRAY_DECLARATOR -> [ [2:34]     |  |      |      |--IDENT -> String [2:28]     |  |      |      `--RBRACK -> ] [2:35]     |  |      `--IDENT -> args [2:37]     |  |--RPAREN -> ) [2:41]     |  `--SLIST -> { [2:43]     |      |--LITERAL_DO -> do [3:8]     |      |  |--SLIST -> { [3:11]     |      |  |  |--VARIABLE_DEF -> VARIABLE_DEF [4:11]     |      |  |  |  |--MODIFIERS -> MODIFIERS [4:11]     |      |  |  |  |--TYPE -> TYPE [4:11]     |      |  |  |  |  `--LITERAL_INT -> int [4:11]     |      |  |  |  |--IDENT -> a [4:15]     |      |  |  |  `--ASSIGN -> = [4:17]     |      |  |  |      `--EXPR -> EXPR [4:19]     |      |  |  |          `--NUM_INT -> 5 [4:19]     |      |  |  |--SEMI -> ; [4:20]     |      |  |  `--RCURLY -> } [5:8]     |      |  |--DO_WHILE -> while [5:10]     |      |  |--LPAREN -> ( [5:16]     |      |  |--EXPR -> EXPR [5:17]     |      |  |  `--LITERAL_TRUE -> true [5:17]     |      |  |--RPAREN -> ) [5:21]     |      |  `--SEMI -> ; [5:22]     |      `--RCURLY -> } [6:4]     `--RCURLY -> } [7:0] ```  When we begin treating do-while loop: 1) RightCurlyCheck receives LITERAL_DO. 2) We get right curly brace, which is a last child of LITERAL_DO. 3) We get left curly brace which is SLIST token. 4) We get token which follows left curly brace (next token for right curly brace) which is DO_WHILE literal. 5) Then if brace policy is ALONE we check whether left curly brace which closes do-while block is on the same line as next token (DO_WHILE). If yes, we rise violation.  I do not see a problem in the logic.","closed","","MEZk","2016-06-28T06:26:05Z","2016-06-28T12:50:39Z"
"","3702","Google style: allow single character variables","Based on google/styleguide#214  Local variables and catch arguments, method parameters should be allowed to be one characters","closed","new feature,","romani","2017-01-09T17:01:13Z","2017-02-09T22:05:46Z"
"","3628","Add new Sevntu checks and create UT for missing checks","Based on discussion in https://github.com/sevntu-checkstyle/sevntu.checkstyle/pull/557  Checkstyle is missing the following checks from sevntu in [it's own sevntu config](https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_sevntu_checks.xml): ```` com.github.sevntu.checkstyle.checks.coding.ReturnCountExtendedCheck com.github.sevntu.checkstyle.checks.design.ConstructorWithoutParamsCheck com.github.sevntu.checkstyle.checks.coding.AvoidModifiersForTypesCheck com.github.sevntu.checkstyle.checks.design.HideUtilityClassConstructorCheck ````  These should be added to our sevntu config.  We also need a new UT that verifies we have all checks in our sevntu configuration file.   --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39913191-add-new-sevntu-checks-and-create-ut-for-missing-checks?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","rnveach","2016-12-09T19:30:00Z","2016-12-10T23:31:05Z"
"","3095","Add COMPILATION_UNIT token in Ast Tree, remove EOF token","base on https://groups.google.com/forum/#!topic/checkstyle/4njXEcUsf34  Javadoc claim that root token exists but it does not exists after parsing: http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#EOF  ToDo: investigate a reason why root node was removed from Ast Tree. remove  https://github.com/checkstyle/checkstyle/blob/5bf4e04862b6aa897dc295284def928123f1bb6b/config/import-control.xml#L166-L169   **Rationale of update and hints on how to update affected Checks**: https://github.com/checkstyle/checkstyle/pull/10574#issuecomment-898806357  **Migration note, affecting all xpath queries**: https://github.com/checkstyle/checkstyle/issues/3095#issuecomment-897257902","closed","breaking compatibility,","romani","2016-04-13T13:22:18Z","2021-08-19T20:59:36Z"
"","3101","ImportOrder: make static imports ordering as in Eclipse","base on https://bugs.eclipse.org/bugs/show_bug.cgi?id=473629  ``` /var/tmp $ java -jar checkstyle-6.17-SNAPSHOT-all.jar -c Test.xml TestClass.java  Starting audit... [ERROR] /var/tmp/TestClass.java:4: Wrong order for 'HttpHeaders.Names.DATE' import. [ImportOrder] Audit done. Checkstyle ends with 1 errors.  /var/tmp $ cat TestClass.java  import static HttpConstants.COLON; import static HttpHeaders.addHeader; import static HttpHeaders.setHeader; import static HttpHeaders.Names.DATE;  public class TestClass {  }  /var/tmp $ cat Test.xml                                                                           ```  Expected, no violations for Eclipse users.  investigate sorting behavior for static imports in Idea and NetBeans.  If the same in all 3 IDEs - just follow them If different - we need new properties with explanations.","closed","new feature,","romani","2016-04-14T23:30:40Z","2016-07-06T17:17:32Z"
"","3449","IllegalImport: new property illegalClasses to let blacklist certain classes import","Base on discussion at #3358.  How about implementing a second parameter `illegalClasses` (default: `null`):  ``` xml             ```  Furthermore we could add a third parameter `regexp` (default: `false`) that determines whether the comma separated package or class names should be interpreted as regular expressions:  ``` xml                  ```  Both would support the mentioned case without interfering with the current behavior. 1. Users might want to use more than one `ImportControl` check with varying severity. This would be much less straight forward using the `ImportControlCheck`, simply because it would require multiple `import_control.xml` files. 2. Users might just want to globally forbid certain classes (such as old [FindBugs annotations](http://findbugs.sourceforge.net/api/edu/umd/cs/findbugs/annotations/package-summary.html), where some annotations in the same package are still valid). In cases like this, defining an `import_control.xml` file seems like overkill to me, when the same could be achieved with just these two additional parameters. ##","closed","medium,","romani","2016-09-19T19:32:10Z","2022-01-10T01:55:15Z"
"","3185","CheckstyleAntTask: substitude setConfig(File) with setConfig(String)","base on discussion at #3119 .  having two methods `setConfg(File file)` and `setConfigUrl` (and `setConfigURL`) is unclear for users.  in Checkstyle 8 we need to remove `setConfigUrl` and `setConfigURL` and `setConfig(File file)` and make new `setConfig(String location)` that works exactly as setConfigUrl. ##","closed","approved,","romani","2016-05-17T13:34:14Z","2017-06-27T13:30:03Z"
"","3086","new CLI argument: provide abililty to show debug level of logs from checkstyle code","base on discussion at #3085 and a lot of other cases that were before.  We should have some way to ""trace"" what is going on in Checkstyle by directing logs to output. New CLI argument need to be created ""-d"" ""--debug"" to show DEBUG level of logs. All logging in Checkstyle should be done on with DEBUG and TRACE level. INFO and WARN and ERROR already user for severity so lets not mix them.  for now we use apache logging ([example](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L31)), dependency is transitive:  ``` $ mvn dependency:tree | grep -B 4 logging [INFO] com.puppycrawl.tools:checkstyle:jar:6.18-SNAPSHOT [INFO] +- antlr:antlr:jar:2.7.7:compile [INFO] +- org.antlr:antlr4-runtime:jar:4.5.3:compile [INFO] +- commons-beanutils:commons-beanutils:jar:1.9.2:compile [INFO] |  +- commons-logging:commons-logging:jar:1.1.1:compile ```  I personally fan of slf4j logging api usage. But switching to slf4j will mean extra dependency to our library. For now we have almost no logging. So for now lets stay with apache common logging till amount of logs become significant and verbose format  ``` if (log.isDebugEnabled()) {  log.debug(""....."") } ```  is bearable. But all `log` usages should be wrapped for now, as we are a library.","closed","new feature,","romani","2016-04-08T12:51:28Z","2016-05-27T13:24:10Z"
"","3082","new Filter: SuppressByMessageFilter","base on discussion at #3077 , we had a lot similar cases in the past and it is already known good enhancement, but now we create an issue on this.  we need to make new filter to allow to do suppression base on violation message.  Config should looks like:  ```         ```  This issue is slightly related (as it might cover) #2804 case.  ```         ```  > #2804  This issue suggest update for http://checkstyle.sourceforge.net/config_filters.html#SuppressionFilter that let users choose their own model of excludes/suppressions in separate file. Main point - separate config file.  > #3082  is an update to let user filter-out/suppress violation from main configuration file.   Summary: Both approaches have right to exists and do make sense (user will chose what is more suitable for his project himself). Both features are approved.   PS: filter and suppression has the same meaning in checkstyle. http://checkstyle.sourceforge.net/config_filters.html. ##   -------","open","has bounty,","romani","2016-04-07T13:19:29Z","2022-02-13T11:57:24Z"
"","3184","keep a map of Check name and it package in source to avoid brute force load by PackageObjectFactory from all packages","base on discussion at #2918.  Log events that make user worry that smth bad is happening:  ``` [DEBUG] [com.puppycrawl.tools.checkstyle.PackageObjectFactory] Keep looking, ignoring exception com.puppycrawl.tools.checkstyle.api.CheckstyleException: Unable to find class for com.puppycrawl.tools.checkstyle.checks.regexp.ParenPadCheck ```  PackageObjectFactory try to create Check from all possible packages. We need to make internal map of Check and its package for all standard Checks to load them directly without any guess. This map content should be validated by UTs.  Verify in CLI that output is empty from Exceptions with FINEST logging level. ##","closed","approved,","romani","2016-05-17T13:19:50Z","2016-12-20T21:46:47Z"
"","3241","JavadocStyle: new options to support different HTML tags","base on discussion at #2839   http://checkstyle.sourceforge.net/config_javadoc.html#JavadocStyle  try this CS configuration  ```                    ```  with this source file:  ``` 0001: package com.acme; 0002:  0003: /** 0004:  * Most HTML tags work nicely. 0005:  * 0006:  * and the MARK tag 0007:  * are not recognized as valid HTML tags. 0008:  */ 0009: public class Main { 0010: } ```  , and you will get  ``` Unclosed HTML tag found:  Main.java line 6 ```  Both the reason and the cure for the problem are clear:  The constant `JavadocStyleCheck.ALLOWED_TAGS` defines the set of ""allowed"" html tags, and that set lacks the `` tags.  Existing property ""checkHtml"" validate only old HTML tags, most likely html3.2 version .  We need to support modern tags ... html4 and html5 and ..... .  proposal is to add new properties: `checkHtml4` - boolean - validate against predefined in Check list of tags(allowed and single) of latest HTML 4 specification. `checkHtml5` - boolean - validate against predefined in Check list of tags(allowed and single) of latest HTML 4 specification. `allowedHtmlTags` - String[] - user defined list of tags. `singleHtmlTags` - String[] - user defined list of single tags.  Single tag is Checkstyle invented term - is Void Tags https://www.w3.org/TR/html-markup/syntax.html#void-element that does not need end tag. Example: https://www.w3.org/TR/html-markup/tr.html#tr-tags. As there is no such terms in html specification we need to explain it in Check documentation. ##","open","javadoc,","romani","2016-06-02T13:27:28Z","2017-09-02T22:23:59Z"
"","3618","NeedBraces extention to support non simple singleline statements","base on discussion at #1006 and #1007  It is required to update NeedBraces - http://checkstyle.sourceforge.net/config_blocks.html#NeedBraces  Reason is that according to Java grammar, Statement could contain blocks, blocks contains statements.So term ""statement"" is not very certain. Details at: https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html  Proposal is to add   maxNestingSingleLineStatement (see proposal at [comment](https://github.com/checkstyle/checkstyle/issues/1007#issuecomment-120601784)) to work with `allowSingleLineStatement` to let user define depth.  After conversations in issues ,now looks like problem is not only in nesting depth but in location of ""trailing sub statements"".  Looks at [spec](https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.5) , ""StatementWithoutTrailingSubstatement"". So we might need new option ""allowSameLineTrailingSubstatement""  To to avoid conflict of interest and ..... User should define himself allowed depth of single line statement. User could define nesting level (`maxNestingSingleLineStatement`) to satisfy code that they like or use `allowSameLineTrailingSubstatement`.  All cases from that issues should be covered by UTs.  **Critical point** - By default allowSameLineTrailingSubstatement should be `FALSE`, and work the same as it is now.  By default should be ok: `if (x == 0) return foo();`  Not ok by default  (violations expected when `allowSameLineTrailingSubstatement =  FALSE` ): ``` if      (x == 0) x = 1; else if (x == 1) x = 2; else if (x == 2) x = 3; else             x = 4; ```  No violation, With `allowSameLineTrailingSubstatement =  TRUE` : ```         int x = 0;         if      (x == 0) x = 1;         else if (x == 1) x = 2;         else if (x == 2) x = 3;         else             x = 4; ``` ```     public static EDataType makeDataType(String name) {         EcorePackage ePkg = getFactory().getEcorePackage();         if (name.equals(""EBoolean""))              return ePkg.getEBoolean();         else if (name.equals(""EBooleanObject""))   return ePkg.getEBooleanObject();         else if (name.equals(""EByte""))            return ePkg.getEByte();         else if (name.equals(""EByteObject""))      return ePkg.getEByteObject();         else if (name.equals(""EByteArray""))       return ePkg.getEByteArray();         else if (name.equals(""EChar""))            return ePkg.getEChar();         else if (name.equals(""ECharacterObject"")) return ePkg.getECharacterObject();         else if (name.equals(""EDouble""))          return ePkg.getEDouble();         else if (name.equals(""EDoubleObject""))    return ePkg.getEDoubleObject();         else if (name.equals(""EFloat""))           return ePkg.getEFloat();         else if (name.equals(""EFloatObject""))     return ePkg.getEFloatObject();         else if (name.equals(""EInt""))             return ePkg.getEInt();         else if (name.equals(""EIntegerObject""))   return ePkg.getEIntegerObject();         else if (name.equals(""EJavaObject""))      return ePkg.getEJavaObject();         else if (name.equals(""ELong""))            return ePkg.getELong();         else if (name.equals(""ELongObject""))      return ePkg.getELongObject();         else if (name.equals(""EShort""))           return ePkg.getEShort();         else if (name.equals(""EShortObject""))     return ePkg.getEShortObject();         else if (name.equals(""EString""))          return ePkg.getEString();         else {             Assert.fail(fmt(""Unknown standard data type \""%s\""."", name));             return null; // Not reached.         }     } ``` ```                 if      (l == loc1) r.add(""1"");                 else if (l == loc2) r.add(""2"");                 else if (l == loc3) r.add(""3"");                 else if (l == loc4) r.add(""4"");                 else                r.add(""?""); ``` ``` for (int i = 0; i < 10; i++) if (i > 0) for (int j = 0; j < 10; j++) if (j > 0) break; for (int i = 0; i < 10; i++) if (i == 5) break; for (idx = 0; idx","open","hard,","romani","2016-12-07T00:30:08Z","2017-03-15T12:51:09Z"
"","3656","We need a UT that check our CI regression config","base on #3655 .  CI a re running regression testing on not all possible tokens, in this case it was only on default. https://github.com/checkstyle/contribution/blob/master/checkstyle-tester/checks-nonjavadoc-error.xml#L153  It is required to validate this file and enforce that all Accesible tokens are user for each Check.","open","miscellaneous,","romani","2016-12-14T18:33:14Z","2016-12-15T01:53:17Z"
"","3451","ImportControl: blacklist mode","base on #3358   > I can't figure out how to put ImportControl into blacklist mode, aka except everything but the things I've listed. (Using allow pkg="""" seems to allow everything and ignore disallow blocks.)  We need to think about this....... there might be some problems with priority of rule apply. ##","closed","medium,","romani","2016-09-19T19:38:13Z","2017-05-14T02:34:08Z"
"","3450","ImportControl: allow to load files from resources","base on #3358  > ImportControl does not appear to be able to find configurations that are resources, only files. So this does not seem to be usable at all if checkstyle.xml is in your project as a resource rather than a file. ##     --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/37980823-importcontrol-allow-to-load-files-from-resources?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","new feature,","romani","2016-09-19T19:36:08Z","2016-11-28T22:20:59Z"
"","3607","Use reflection to load Checks base on checkstyle_packages.xml","base on #3184  Consider to use reflection.  Use checkstyle_packages.xml and our naming notation that Check class should be ""*Check"". How to get all classes from package - http://stackoverflow.com/a/520339  But problem will still be with extensions(custom Checks in custom jars), for example sevntu extension.","closed","medium,","romani","2016-12-02T22:40:33Z","2017-05-18T20:44:22Z"
"","3424","LeftCurly : Add support for ARRAY_INIT token type","Author is @eric-milles , issue is a result of split from #3325 .  $ cat ArrayInit.java  ``` java class ArrayInit {     String[] compact = {""value""}; // no violations -- want simple initializer                                              //to be compact      String[] wantCompacted =     { // VIOLATION -- want the opening brace to be at end of previous line         ""value""}; // want simple initializer to be compact,                        //but that may be a stretch for given config      String[] wantAddOrReorderAsOneLineChange =     { // VIOLATION -- want the opening brace to be at end of previous line         ""value1"",         ""value2"",};        // more examples using the more verbose form of array init:      String[] verboseButCompact = new String[] {""value""}; // no violations --                                    //want simple initializer to be compact      String[] verboseButWantCompacted = new String[]     { // VIOLATION -- want the opening brace to be at end of previous line         ""value""}; // want simple initializer to be compact,                         //but that may be a stretch for given config      String[] verboseButWantBracesInDifferentPositions = new String[]     { // VIOLATION -- want the opening brace to be at end of previous line         ""value1"",         ""value2"",};  } ```  $ cat config.xml  ``` xml                                                                                                                                 ```  $ java -jar checkstyle-7.0-all.jar -c config.xml ArrayInit.java Starting audit... Audit done.  ---  Can ARRAY_INIT be added to the supported list of token types for LeftCurly?  If supported, I could add it to the LeftCurly module that contains only LAMBDA at this time.  We want to have lambdas, array initializers and anon. inner classes use the more compact form of opening brace on the same line.  to allow compact array initializers for simple cases and well-formed multi-line initializers when wrapped by the formatter.  That is, when wrapped we want to see:  ``` java String[] strings = {   ""one"",   ""two"",   ""three"", };  and  Arrays.asList(new String[] {   ""one"",   ""two"",   ""three"", }); ```  _I know Arrays.asList is variadic, but I wanted a familiar example to show passing an inline array._ ##","open","","romani","2016-09-03T13:39:08Z","2020-04-22T14:38:41Z"
"","3332","Add HTML5 tags support to Javadoc antlr4 grammar and related classes","ATTENTION: final fix changed token type values, so all plugins/extensions who use JavadocTokenTypes must recompile. Sorry.  We should extend void(singleton) elements list and list of elements with optional end tag.  List of void elements: basefont, frame, isindex - are not supported in HTML5; but they have to stay in Javadoc grammar.  | [HTML5](https://www.w3.org/TR/html5/syntax.html#void-elements) | HTML4 | | --- | --- | | area | area | | base | base | | br | br | | col | col | | hr | hr | | img | img | | input | input | | link | link | | meta | meta | | param | param | | embed |  | | keygen |  | | source |  | | track |  | | wbr |  | |  | basefont | |  | frame | |  | isindex |  List of elements with optional end tag:  | [HTML5](https://www.w3.org/TR/html5/syntax.html#optional-tags) | HTML4 | | --- | --- | | html | html | | head | head | | body | body | | li | li | | dt | dt | | dd | dd | | p | p | | option | option | | colgroup | colgroup | | thead | thead | | tbody | tbody | | tfoot | tfoot | | tr | tr | | td | td | | th | th | | optgroup |  | | rb |  | | rt |  | | rtc |  | | rp |  | ##","closed","breaking compatibility,","baratali","2016-06-30T11:05:40Z","2018-06-30T05:58:14Z"
"","3546","RightCurlyCheck: add support for lambda","Attention!!!! this issue affect Google style 4.1.2 point, it should be reviewed after the fix.   In scope of this issue only part of problem be fixed, please read final comments.  ```` $ cat TestClass.java public class TestClass {     void method() { if (true) { int a = 0; } int a = 0; Runnable noop = () -> { int a = 0; }; int b = 0;     } }  $ cat TestConfig.xml                                                                                     $ java -jar checkstyle-7.2-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:3:11: '{' at column 11 should have line break after. [LeftCurly] [ERROR] TestClass.java:3:24: '}' at column 24 should be alone on a line. [RightCurly] [ERROR] TestClass.java:4:23: '{' at column 23 should have line break after. [LeftCurly] Audit done. Checkstyle ends with 3 errors. ````  I expecting a violation at 4:36 for the `}` (right curly) just like there is one for the if statement at 3:24. LeftCurly behaves as expected as it gives similar violations. [RightClurly doesn't accept the lambda token](http://checkstyle.sourceforge.net/config_blocks.html#RightCurly), so it is not possible to specify it.  --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39176959-rightcurlycheck-add-support-for-lambda?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","medium,","rnveach","2016-11-11T15:44:20Z","2017-04-17T17:56:19Z"
"","3547","LeftCurly and RightCurly should accept the same tokens","Attention!!!! this issue **_could_** affect Google style 4.1.2 point, it should probably be reviewed after the fix.  Currently [RightCurly](http://checkstyle.sourceforge.net/config_blocks.html#RightCurly) accepts a lot less tokens (13 tokens) than [LeftCurly](http://checkstyle.sourceforge.net/config_blocks.html#LeftCurly) (20 tokens).  It is unclear if this is just a mistake or if there is some underlying reason. [We already have one area](https://github.com/checkstyle/checkstyle/issues/3546) where this does look like a mistake and is causing some closing braces to be ignored.  This issue should identify tokens that can/should be added to RightCurly, and document the reason any tokens can't be added, either in xdoc on javadoc. A new UT should be created that verifies they stay in sink.  --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39165137-leftcurly-and-rightcurly-should-accept-the-same-tokens?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","open","easy,","rnveach","2016-11-12T01:12:39Z","2021-05-09T09:31:35Z"
"","3902","Formatting issue in documentation","At following link http://checkstyle.sourceforge.net/writingjavadocchecks.html#HTML_Code_In_Javadoc_Comments when ever you try to zoom in browser following line comes out of box and due to which scrollbar comes in bottom part of browser  line where issue is: **[ERROR:0] Javadoc comment at column 1 has parse error. Missed HTML close tag 'audio'. Sometimes it means that close tag missed for one of previous tags.** ![image](https://cloud.githubusercontent.com/assets/6566854/23555557/65a5aa44-004f-11e7-9395-93ad31ea3610.png) I have attached a screenshot of issue.","closed","miscellaneous,","sagar-shah94","2017-03-03T14:53:38Z","2017-04-09T12:45:04Z"
"","3235","Apply OverloadMethodsDeclarationOrder check for the same access modificators only","Assume we have the following code:  ``` @Override public void foo(String s) {} public void notFoo() {} // Have to be after foo(int i, String s) private void foo(int i, String s) {} ```  OverloadMethodsDeclarationOrder check will find violation here since notFoo() is between 2 methods with the same name  ""foo"".  We would like to group methods by access modifiers. That is why it's OK for us that there is notFoo() between 2 foo() methods, since first foo() is public but second foo() is private.  It would be great to add ""applyForTheSameAccessLevelOnly"" property to OverloadMethodsDeclarationOrder to apply the check to methods with the same access modifiers only. E.g. If both foo() methods are public - use the check. If one of foo() methods is private but another one is private - don't apply the OverloadMethodsDeclarationOrder check. ##","closed","new feature,","ychulovskyy","2016-06-01T13:05:44Z","2017-01-28T15:07:41Z"
"","3333","Support more tokens in WhitespaceAfter check","Assigned to @MaksimP­  Right now it only supports `COMMA, SEMI, TYPECAST`. I'd love to have support for `LITERAL_IF` that for instance `if(` will be marked as a checkstyle error because it should be `if (`.  Also some other would come in handy: - LITERAL_IF - LITERAL_WHILE - LITERAL_FOR - LITERAL_DO - DO_WHILE - LITERAL_NEW - LITERAL_ELSE  ----------------  Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/35632289-support-more-tokens-in-whitespaceafter-check?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","new feature,","vanniktech","2016-06-30T12:30:39Z","2016-12-09T19:42:01Z"
"","3316","use shippable CI in testing","Assigned to @Efremenkov .  shippable.com let use it for smth.  We could use it for pitest tool testing #3271 . pitest execution is long, so we need to use matrix/multiple launches on that CI (the same as we do on other CIs). ##    --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/35517190-use-shippable-ci-in-testing?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","romani","2016-06-27T06:11:57Z","2017-01-10T00:17:10Z"
"","3271","Investigate pitest tool","Assigned to @Efremenkov .  Pitest: http://pitest.org/quickstart/maven/  Report: http://checkstyle.sourceforge.net/reports/pitest/ Report built for Commit: 5a0a3041650662daace014106bbc82522827e442 Report generation: 4h (in 4thread, full usage of all cores and memory)  Code change:  ``` 05:44 $ git diff diff --git a/pom.xml b/pom.xml index 903337a..d20f4df 100644 --- a/pom.xml +++ b/pom.xml @@ -989,6 +989,20 @@                         +     +    org.pitest +    pitest-maven +    1.1.10 +     +         +            com.puppycrawl.tools.checkstyle* +         +         +            com.puppycrawl.tools.checkstyle* +         +        4 +     +           ```  command to generate report: `mvn test org.pitest:pitest-maven:mutationCoverage`  report will be at: `firefox target/pit-reports/2016XXXXXXXXX/index.html`  TODO:  - investigate missed point of UTs, fix them. - investigate usage in CI to enforce quality of testing in PR ##","closed","miscellaneous,","romani","2016-06-12T12:47:38Z","2017-01-10T13:53:41Z"
"","3799","Wercker CI should use Checkstyle's own Docker image","As Wercker CI has become more popular (https://github.com/checkstyle/checkstyle/issues/3798, https://github.com/checkstyle/checkstyle/issues/3670, https://github.com/checkstyle/checkstyle/issues/3790), it would be good to have our own Docker Profile and Image.  What should be done in scope of this issue:  - Docker Profile need to be created  - Docker Profile need to be uploaded to Checkstyle's Github repo to make it available from DockerHub  - Docker Image should be built based on Arch Linux/Ubuntu/CentOS or Mint  - Docker Image need to be uploaded to DockerHub  - Wercker should use Checkstyle's own Docker Image.","closed","","MEZk","2017-02-04T17:48:48Z","2017-02-07T21:09:58Z"
"","3026","Remove dependency to commons-lang3 library.","As suggested in #2428.","closed","","kaj","2016-03-10T20:52:01Z","2016-03-11T13:10:14Z"
"","3790","Add the Hibernate Search project to the Checkstyle CI","As per our discussion in https://github.com/yrodiere/hibernate-search/commit/a62a9e2e31edbb31f83ee3b893afb43b19659c42#commitcomment-20699212, I'm creating this ticket to add the [Hibernate Search](https://github.com/hibernate/hibernate-search) project to your CI.  The branch master has been [recently updated](https://github.com/hibernate/hibernate-search/commit/e0b13416813744a9c0554b23248cb5518b9446a1) and builds successfully on Checkstyle 7.4, because we are affected by issue #3789 in 7.5. The Checkstyle version used in the build can be controlled using the maven property `puppycrawl.checkstyle.version`.  The repo includes a `.travis.yml` file. To set up a different CI, please see https://github.com/hibernate/hibernate-search#building-from-source.","closed","miscellaneous,","yrodiere","2017-02-02T16:56:21Z","2017-02-04T01:26:42Z"
"","3197","Broken encoding in Checkstyle's output with user-defined violation message","As it is described in [documentation](http://checkstyle.sourceforge.net/config.html#Custom_messages) It is possible to specify user-defined violation messages. Nevertheless, if user defines his own message, for example, in Russian, Checkstyle will print message with broken encoding into output.  Test.java  ``` java public class Test {     public static void main(String[] args) {         System.out.println(""Hello, World!"");     } } ```  checkstyle_test_config.xml  ``` xml                               ```  run command:  ``` java -jar checkstyle-6.18-all.jar -c checkstyle_test_config.xml Test.java ```  Console output:  ``` C:\Users\Andrei\Desktop\Test>java -jar checkstyle-6.18-all.jar -c checkstyle_test_config.xml Test.java Starting audit... [ERROR] C:\Users\Andrei\Desktop\Test\Test.java:2: ╨б╨╗╨╡╨┤╤Г╨╡╤В ╨║╨╛╨╝╨╝╨╡╨╜╤В╨╕╤А╨╛╨▓╨░╤В╤М ╨╝╨╡╤В╨╛╨┤ main ╨▓ ╨║╨╛╨┤╨╡. [UncommentedMain] Audit done. Checkstyle ends with 1 errors. ```  OS: Windows 8.1 Java:   ``` java version ""1.8.0_77"" Java(TM) SE Runtime Environment (build 1.8.0_77-b03) Java HotSpot(TM) 64-Bit Server VM (build 25.77-b03, mixed mode) ```  I'm able to reproduce the problem on WIndows. There is no problem on Ubuntu 14.04 LTS.","closed","","MEZk","2016-05-19T19:28:54Z","2016-05-20T11:44:46Z"
"","3821","doc: Add notes on import control config for inner classes","As discussed in #3736.  Please tell me if this example should be extended or if wording should be changed.","closed","","jochenvdv","2017-02-11T17:04:40Z","2017-02-11T18:41:32Z"
"","3817","Make import control configuration stricter for api package","As discussed in #3736.  - Disallow `org.antlr.v4.runtime` - Disallow `com.puppycrawl.tools.checkstyle.utils`  This is for Checkstyle 8.","open","approved,","jochenvdv","2017-02-10T19:27:16Z","2021-12-22T04:49:19Z"
"","3719","config: Suppress MethodCount check in tests","As discussed in #3462.","closed","","jochenvdv","2017-01-12T06:03:54Z","2017-01-12T13:17:28Z"
"","3934","code cleanup: to make updates to xdoc easy to review","apply patch: ``` $ git diff diff --git a/src/xdocs/config_blocks.xml b/src/xdocs/config_blocks.xml index 65a4327..ac72e26 100644 --- a/src/xdocs/config_blocks.xml +++ b/src/xdocs/config_blocks.xml @@ -799,7 +799,8 @@ for(int i = 0; i < 10; value.incrementValue()); // OK              STATIC_INIT,              INSTANCE_INIT. +             href=""apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INSTANCE_INIT"">INSTANCE_INIT +            .                LITERAL_TRY, @@ -810,7 +811,8 @@ for(int i = 0; i < 10; value.incrementValue()); // OK              LITERAL_IF,              LITERAL_ELSE. +             href=""apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_ELSE"">LITERAL_ELSE +            .                               diff --git a/src/xdocs/config_whitespace.xml b/src/xdocs/config_whitespace.xml index 49513b7..96362bf 100644 --- a/src/xdocs/config_whitespace.xml +++ b/src/xdocs/config_whitespace.xml @@ -831,7 +831,8 @@ sort(list, Comparable::<String>compareTo);             // Method reference              PACKAGE_DEF,              IMPORT. +             href=""apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#IMPORT"">IMPORT +            .                               ```  patch is required to avoid changes on existing lines when new token is added  resolve UT failure: ``` Tests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.345 sec","closed","easy,","romani","2017-03-05T15:11:01Z","2020-05-30T08:32:33Z"
"","3117","Ability to differentiate annotation placement in for each loop from variable declaration.","Apache Apex would prefer to adopt code style where annotations are placed on a separate line from variable declaration except for parameters and variable definitions in for each loop (or other blocks that are single line).   For example, the following code should be valid with `allowSamelineSingleParameterlessAnnotation` set to false for `VARIABLE_DEF` token.   ``` @Deprecated //      12","closed","approved,","vrozov","2016-04-18T17:56:40Z","2016-06-21T14:54:26Z"
"","3341","Support jdk 1.7.x at run-time","Apache Apex can't upgrade to checkstyle 7.0 due to jdk 1.8 required at run-time. Please consider adding support for jdk 1.7 back.","closed","","vrozov","2016-07-09T15:41:58Z","2016-07-18T19:34:46Z"
"","3192","Improve .gitignore by adding .pmd etc. by m2e-code-quality","And some formatting etc. changes for better readability  Signed-off-by: Michael Vorburger mike@vorburger.ch","closed","","vorburger","2016-05-18T14:14:08Z","2016-05-18T17:01:48Z"
"","3320","RightCurlyCheck fails on 7.0 for do while loops","All our do-while loops are failing the RightCurlyCheck since upgrading to 7.0.  ``` do {     // ... } while (x > y); ```  ``` '}' at column 1 should be alone on a line.  Checks the placement of right curly braces ('}') for else, try, and catch tokens. The policy to verify is specified using the property option. ```  Taking `LITERAL_WHILE` out of the options for `RightCurly` fixes this warning, but then it allows things like:  ``` while (x > 5) {     // ... } x++; ```  Which is obviously not desired.  The behavior in 6.19 was correct and desired.","closed","","scottkennedy","2016-06-27T21:14:38Z","2016-06-28T00:56:17Z"
"","3965","remove from Input files ""Compilable with Java8""","All files under https://github.com/checkstyle/checkstyle/tree/master/src/test/resources/com/puppycrawl/tools/checkstyle should not have such comment ""Compilable with Java8"", whole checkstyle is on java8 already. To avoid massive UTs updates for line numbers , new line should be added after imports.","closed","easy,","romani","2017-03-09T13:28:43Z","2017-03-10T01:59:42Z"
"","3917","Spelling: change 'suite' to 'suit'","All doc pages have the sentence ""All messages can be customized if the default doesn't suite you,"" but it should be [suit](https://en.wiktionary.org/wiki/suit#Verb). Since the sentence is so often seen I present this PR to fix this minor spelling error.","closed","miscellaneous,","ljacqu","2017-03-04T18:30:22Z","2017-03-04T23:51:24Z"
"","3639","Fixed style listings for checks","All checks should have their styles listed if they are in those configs. All checks that are in style configs should be listed in their style xdocs. Note: Sun is disabled since Sun has no proper xdoc.","closed","","rnveach","2016-12-10T22:43:18Z","2016-12-11T01:30:11Z"
"","3313","Javadoc Check should log warning if current Javadoc comment has unclosed HTML tag and the Check doesn't support that","After this issue https://github.com/checkstyle/checkstyle/issues/3311 is resolved we need to make Javadoc Checks log warning if current Javadoc comment has unclosed HTML tag and the Check doesn't support that. ##","open","approved,","baratali","2016-06-26T12:02:45Z","2020-05-02T17:57:08Z"
"","3488","Checker Cache not saving files that have suppressed violations","After testing out a fix for #3487 and examining the cache file, I noticed only the `main` directory was being stored in the cache and nothing from `test` or `it`. After checking out the code, it seems checkstyle does not cache those files because they have violations. https://github.com/checkstyle/checkstyle/blob/4b7adec5ae396e24d3d0bf0d790919a45bac5421/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L269  Checkstyle has no violations being printed during its run. All the violations that are preventing files from being cached are all suppressed inside `fireErrors`. Since suppressions are part of the external resources, we can add these files to the cache without having to worry about a disconnect between cache and non-cached runs. When the external resource is changed, the entire cache file is invalidated. We should only be skipping placing files in the cache if they print non-suppressedd violations.  The issue can be seen if you run the ant-phase-verify multiple times without changing anything and having the cache on. The second run should finish instantly since no files have changed and there are no violations.  this issue depends on #3489.  ------------------------- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/38036924-checker-cache-not-saving-files-with-suppressions?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","approved,","rnveach","2016-10-02T01:09:10Z","2016-11-10T22:09:14Z"
"","3220","CommentsIndentation : allow upper comments for following block at multi-block structures","After merge of #3140 there will be number of false positives.  Following cases should not give any violation:  Code: openjdk7/src/share/classes/sun/awt/datatransfer/DataTransferer.java.html#L1278   ```              ......              }           // Source data is a byte array. For arbitrary flavors, simply return          // the array. For text flavors, decode back to a String and recur to          // reencode according to the requested format.          } else if (byteArrayClass.equals(flavor.getRepresentationClass())) {              byte[] bytes = (byte[])obj;              ..... ```  Hbase/hbase-it/src/test/java/org/apache/hadoop/hbase/mttr/IntegrationTestMTTR.java.html#L426 :   ```          // the following Exceptions derive from DoNotRetryIOException. They are considered          // fatal for the purpose of this test. If we see one of these, it means something is          // broken and needs investigation. This is not the case for all children of DNRIOE.          // Unfortunately, this is an explicit enumeration and will need periodically refreshed.          // See HBASE-9655 for further discussion.          } catch (AccessDeniedException e) {            throw e;          } catch (CoprocessorException e) {            throw e;           // Everything else is potentially recoverable on the application side. For instance, a CM          // action kills the RS that hosted a scanner the client was using. Continued use of that          // scanner should be terminated, but a new scanner can be created and the read attempted          // again.          } catch (Exception e) {            resetCount++;            if (resetCount < maxIterations) {            ... ```  openjdk7/src/share/classes/com/sun/tools/jdi/InternalEventHandler.java.html#L79 :   ```                   /*                    * Handle exceptions that can occur in normal operation                    * but which can't be accounted for by event builder                    * methods. The thread should not be terminated if they                    * occur.                    *                    * TO DO: We need a better way to log these conditions.                    */                   } catch (VMOutOfMemoryException vmme) {                       vmme.printStackTrace();                   } catch (InconsistentDebugInfoException idie) {                       idie.printStackTrace();                    /*                    * If any of these exceptions below occurs, there is some                    * sort of programming error that should be addressed in                    * the JDI implemementation. However, it would cripple                    * the implementation if we let this thread die due to                    * one of them. So, a notification of the exception is                    * given and we attempt to continue.                    */                  } catch (ObjectCollectedException oce) {                      oce.printStackTrace();                  } catch (ClassNotPreparedException cnpe) {                      cnpe.printStackTrace();                  } ```  There are more cases: openjdk7/src/share/classes/com/sun/rowset/internal/CachedRowSetWriter.java.html#L659 openjdk7/src/share/classes/com/sun/org/apache/xml/internal/security/encryption/XMLCipherInput.java.html#L166 openjdk7/src/share/classes/com/sun/org/apache/xml/internal/security/c14n/implementations/Canonicalizer11.java.html#L581 openjdk7/src/share/classes/com/sun/jndi/toolkit/dir/SearchFilter.java.html#L164 openjdk7/src/share/classes/com/sun/jndi/ldap/EventQueue.java.html#L150 Hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java.html#L2222","closed","approved,","romani","2016-05-26T13:32:46Z","2016-06-12T13:51:00Z"
"","3365","Automate release process","after https://github.com/checkstyle/contribution/issues/73 generateALL will do generation of all posts 1. On release time I review chaages in xdoc post and make a decision about next version number 2. if version need to changed I do ""mvn:version set"" and let Travis regenerate xdoc 3. if nochanges required, I copy xdoc post as it is and make a commit. 4. release trigger is ""mvn release:prepare"" commits 5. Travis should trigger ""mvn release:perform"" and do publication to {mvn repo, site, sorceforge downloads}={release.sh} and do publications to social (build need to be executed on source strict version, not a SNAPSHOT)  How to triger Travis on strict version ? on commit - parse pom.xml and catch non SNAPSHOT verson. from release.sh: if (xmlstarlet sel -N pom=http://maven.apache.org/POM/4.0.0 -t -m pom:project -v pom:version pom.xml | grep SNPASHOT | cat ) != """"  we can already use this command to prevent Travis failures during relase!!!  PROBLEMs !!!!! 1) Problem is that all logins/password and gpg keys/passphrases are placed in settings.xml but should be taken from environment variables. As a some solution we might use some CI completely for release process, with no access for contributors(as example wercker allow to give permissions only to certain set of users), so it will kind of resolve security problem.  2) Right now copy to Sourceforge for web site and binaries is done by scp, to script it will require  to exchange by keys , that might be a problem as Sourceforge does not provide permanent ssh access, it should be requested by ""ssh -t create ..."".  can maven resolve environment variables in settings.xml ? can we provide all that in commandline ?  we could potentially run release on sourseforge servers (we have permanent disk storage there). ##","open","","romani","2016-07-22T04:55:12Z","2018-01-31T14:00:59Z"
"","3534","minor: added vm files to be checked by checkstyle","added validation for VM files located in xdocs","closed","","rnveach","2016-11-09T01:30:15Z","2016-11-09T05:31:31Z"
"","3447","doc: added links to cs backport jre6","Added text and link to CS backport on main index. I put in some explanation why we can't support older JDKS and emphasized that backport is community/unofficially controlled.  Feel free to make any corrections/additions you see fit.","closed","","rnveach","2016-09-19T01:11:57Z","2016-09-19T01:55:51Z"
"","3571","config: added notice about hardcoded cache file","Added notice.","closed","","rnveach","2016-11-21T00:16:56Z","2016-11-21T00:38:36Z"
"","3141","Issue #2874: use CyclomaticComplexity.switchBlockAsSingleDecisionPoin…","Added new module CyclomaticComplexity includes property switchBlockAsSingleDecisionPoint for correctly work without errors in checkstyle_checks.xml","closed","","orlovnikita","2016-04-28T09:14:22Z","2016-05-27T13:34:18Z"
"","3420","Issue #3381: allow one-char parameters in non public methods","Added new ""scope"" and ""excludeScope"" attributes to ParameterName check. Adjusted google_checks.xml to allow non public methods to have one character long parameters","closed","","agcuda","2016-09-01T08:00:36Z","2016-09-01T08:58:14Z"
"","3419","Issue #3381: make method ref behave like dot separator","Added method reference to list of operators that can line wrap.  Adjusted google_style to reflect new contents of paragraph 4.5 (it should behave like dot operator)","closed","","agcuda","2016-09-01T07:55:35Z","2016-09-01T08:58:37Z"
"","3686","Issue #3625: add more examples to NoLineWrap","Added additional examples to NoLineWrap","closed","","tambren","2017-01-04T03:42:48Z","2017-02-01T22:53:50Z"
"","3311","Boolean flag in Javadoc Checks that shows a current Javadoc comment has unclosed HTML tags","Add a boolean flag (hasUnclosedTag) to Javadoc Checks that shows a current Javadoc comment has unclosed HTML tags (and therefore has non-nested AST structure).  Reason:  > We expect non XHTML structure(we are not failing) so all Javadoc check have to expect non-nested AST. It will create a lot of problems to write reliable Javadoc Check, as amount of false positives will be huge. > We need somehow to allow Check to decide to skip execution on Javadoc that is not XHTML , to let author of Check decide to support non-nested AST or not.  > Can we somehow grab from parser a flag that javadoc is not xhtml ?   Probably that flag should be obtained in the JavadocParser grammar. Have a look at this rule:  ``` antlr htmlElement: htmlTag             | singletonElement             | paragraph             | li             | tr             | td             | th             | body             | colgroup             | dd             | dt             | head             | html             | option             | tbody             | thead             | tfoot              | pTagOpen ### Here goes unclosed tags ###             | liTagOpen             | trTagOpen             | tdTagOpen             | thTagOpen             | bodyTagOpen             | colgroupTagOpen             | ddTagOpen             | dtTagOpen             | headTagOpen             | htmlTagOpen             | optionTagOpen             | tbodyTagOpen             | theadTagOpen             | tfootTagOpen              | pTagClose             | liTagClose             | trTagClose             | tdTagClose             | thTagClose             | bodyTagClose             | colgroupTagClose             | ddTagClose             | dtTagClose             | headTagClose             | htmlTagClose             | optionTagClose             | tbodyTagClose             | theadTagClose             | tfootTagClose             ; ``` ##   Result changes to [AbstractJavadocCheck.java](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java): filed - `violateExecutionOnNonTightHtml` method - `acceptJavadocWithNonTightHtml()`","closed","new feature,","baratali","2016-06-25T20:02:24Z","2018-04-05T16:26:08Z"
"","3376","Support suppressions for MethodLength for specific methods","According to my SO-issue http://stackoverflow.com/questions/38562036/how-to-ignore-checkstyle-on-methods-according-to-a-specific-pattern, it would be nice to have an opportunity to define exceptions / suppressions for specific methods for the **MethodLength** rule.   That would be great for situations where a method naturally is very big, like data mapping methods, or, in my case, I have a (legacy) method called `getMetaInformation()` where I collect fields and relations for UI presentation. This method occurs in some hundreds of files, and I don't want to refactor each of it. In those cases, the `MethodLength` rule should ignore the method length of methods according to a given pattern or list.  I.e. there should be a new option for the `MethodLength` module configuration like:  `` `` `` `` ``  Instead of an ignorePattern, it could be also i.e. a comma-separated list of methodNames: `` `` `` ##","closed","discussion ongoing,","Xsasan","2016-07-28T12:37:23Z","2016-12-10T22:01:46Z"
"","3426","EmptyLineSeparator causing violation in `package-info.java`","`main/java/com/my/package/package-info.java`  ``` java /**  * My package for doing things.  */ package com.my.package; ```  Config:  ``` xml                                ```  Output (using Gradle and Checkstyle 7.1)  ``` [ant:checkstyle] [WARN] main/java/com/my/package/package-info.java:5: 'package' should be separated from previous statement. [EmptyLineSeparator] ```  ---  I expect that adding Javadoc to my `package-info.java` file to not trigger this violation.  Adding a separate line between the Javadoc comment and the package declaration causes the violation to not be triggered, but I want to keep them together, especially if I annotate my package definition (like `@ParametersAreNonnullByDefault`) ##    --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/37552627-emptylineseparator-causing-violation-in-package-info-java?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","approved,","mkobit","2016-09-03T21:39:30Z","2016-12-12T14:05:05Z"
"","3835","Fix AbstractTypeAwareCheck when dealing with nested interfaces","`AbstractTypeAwareCheck` looks like it could contain a bug when dealing with interfaces, especially nested interfaces.  [When we process `visitToken`, we call `processClass` for classes, interfaces, and enumerations](https://github.com/rnveach/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java#L145-L148). [`processClass` manipulates `currentClassName` and calls `processTypeParams` to handle the type parameters.](https://github.com/rnveach/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java#L337) [When we process `leaveToken` for these tokens we do the same as `processClass` but reversing it](https://github.com/rnveach/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java#L159-L175), except we left out interfaces.  This fix just adds interface to the tokens we do this action on. Without it, we won't have correct internal variables in nested interfaces after leaving the interface.","closed","approved,","rnveach","2017-02-16T02:31:01Z","2017-02-24T23:44:16Z"
"","3932","NoLineWrap: Annotation Line Wrapping bug for google_checks.xml","```bash /var/tmp $ javac Main.java  /var/tmp $ cat Main.java  ``` ```java package check;  import static java.math.BigInteger.ZERO;  import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;  @   Deprecated //violation should be here as annotation should be in single line. No wrapping public class Main {        public void fooMethod() {     final int foo = 0;   }  }  ``` ```bash /var/tmp $ java -jar checkstyle-7.6-all.jar -c /google_checks.xml Main.java  Starting audit... Audit done. ```  ---------------  An error should have been mentioned as Google Java Style says that annotation should be one per line and that Line wraping is not valid on them. See https://google.github.io/styleguide/javaguide.html#s4.8.5-annotations. If this is a valid bug , then NoLineWrap will need a default check for annotations also apart from (`IMPORT`, `STATIC_IMPORT` and `PACKAGE_DEF`). I already have a [PR](https://github.com/checkstyle/checkstyle/pull/3901) (which requires more UTs in the `it` folder as suggested by @rnveach). Also this PR was targeted at adding `STATIC_IMPORT` for NoLineWrapCheck [Issue #3892](https://github.com/checkstyle/checkstyle/issues/3892). How would you like me to proceed?","open","","kukreja-vikramaditya","2017-03-05T13:48:16Z","2018-03-18T19:55:52Z"
"","3415","Indentation is not applied to arguments and lambda arguments equally","```` $ javac TestClass.java $ cat TestClass.java public class LAC {      private interface S { boolean get(); }      public void lac() {         assertTrue(                 () -> false,                 false         );     }      private static void assertTrue(S bool, boolean extra) {         assert bool.get();         assert extra;     }  }  $ cat TestConfig.xml                                                                                                                                   $ java -jar checkstyle-7.5-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:7: 'lambda arguments' have incorrect indentation level 16, expected level should be 12. [Indentation] Audit done. Checkstyle ends with 1 errors. ````  I expected that the lambda would not be marked as an error, or that the other argument would be. I would prefer that the lambda not be marked as an error, since I would like to use 8-space wrapping indentation here. ##","open","indentation,","octylFractal","2016-08-24T01:05:56Z","2017-02-03T14:08:09Z"
"","3570","JavadocParagraph: unexpected violation due to inconsistent AST tree with and without SINGLETON_ELEMENT","```` $ cat TestClass.java public class TestClass { /**  *   * Test 1  *   * Test 2  *   */     void method() {     } }  $ cat TestConfig.xml                        $ java -jar checkstyle-7.2-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:3:  tag should be placed immediately before the first word, with no space after. [JavadocParagraph] [ERROR] TestClass.java:3: Redundant  tag. [JavadocParagraph] Audit done. Checkstyle ends with 2 errors. ````  If I remove the `` tag and leave the ``s, the 2 violations go away.  [Reading the description](http://checkstyle.sourceforge.net/config_javadoc.html#JavadocParagraph), the violations look valid and should stay regardless of the `` or not.","open","javadoc,","rnveach","2016-11-20T22:49:05Z","2017-09-02T22:24:00Z"
"","3721","AbbreviationAsWordInName: confusing violation message","```` $ cat TestClass.java public class TestClass {     void shouldBeAloneOrSLine() {     }     void shouldBeAloneOrLine() {     } }  $ cat TestConfig.xml                                                      $ java -jar checkstyle-7.4-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:2: Abbreviation in name 'shouldBeAloneOrSLine' must contain no more than '0' capital letters. [AbbreviationAsWordInName] Audit done. Checkstyle ends with 1 errors. ````   Violation message `no more than '0' capital letters` is confusing as one capital letter is allowed as seen in other method. It is more than 1 consecutive capital letter where violation occurs on. I think just the message needs to be fixed, but then 0 for the config might be slightly confusing.","closed","approved,","rnveach","2017-01-12T16:01:37Z","2017-02-17T22:05:08Z"
"","3837","NeedBraces: lambda with no braces not reported when contents span multiple lines","```` $ cat TestClass.java public class TestClass {     void method() {         final Set imports = new HashSet();          imports.stream().filter(full -> test(1, 2,             3, 4));     }      boolean test(int p1, int p2, int p3, int p4) { return true; } }  $ cat TestConfig.xml                                               $ java -jar checkstyle-7.5.1-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  `allowSingleLineStatement` is turned on, but this lambda isn't a single line as the method call for `test` spans 2 lines and is inside the lambda. I was expecting a violation to be reported on line 5.  Example is taken from checkstyle at https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java#L126-L129. We are using this same check and configuration.","closed","medium,","rnveach","2017-02-16T14:18:21Z","2019-08-01T21:46:15Z"
"","3920","RightCurlyCheck: False positive with SAME and METHOD_DEF token","```` $ cat TestClass.java public class TestClass {     private void foo19() {int var1 = 5;         var1 = 6;} // line 3 }  $ cat TestConfig.xml                                                                                 $ java -jar checkstyle-7.6-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:3:18: '}' at column 18 should have line break before. [RightCurly] [ERROR] TestClass.java:4:1: '}' at column 1 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally). [RightCurly] Audit done. Checkstyle ends with 2 errors. ````  The first violation message is incorrect. If I put line break before '}' on line 3  ```java public class TestClass {     private void foo19() {int var1 = 5;         var1 = 6; // line 3     } // line 4 } ```  there will be a violation: ``` [ERROR] TestClass.java:4:5: '}' at column 5 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally). [RightCurly] ```","closed","","MEZk","2017-03-04T21:24:29Z","2017-03-18T20:18:41Z"
"","3921","RightCurlyCheck: incorrect behavior of shouldStartLine option together with ALONE_OR_SINGLELINE brace policy","```` $ cat TestClass.java public class TestClass {     private void foo19() {int var1 = 5;         var1 = 6;} }  $ cat TestConfig.xml                                                                                 $ java -jar checkstyle-7.6-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:3:18: '}' at column 18 should be on a new line. [RightCurly] Audit done. Checkstyle ends with 1 errors. ````  You can check the example [here](http://rveach.no-ip.org/checkstyle/checkstyle.php?action=view&config=03264fc2e2d5e959b0e1ec4538bb2fc9&code=db2a9858b399e57ff3e0ebb990f6cf61&checkstyle=checkstyle-7.6-all.jar&printTree=).  If shouldStartLine is set to false and brace policy is ALONE_OR_SIGLELINE, the first violation message disappear. I expect that there will be a violation on line 3 in both cases (shouldStartLine = true, shouldStartLine = false).","closed","","MEZk","2017-03-04T21:28:51Z","2017-03-18T20:18:50Z"
"","3593","JavadocStyle: not reporting first sentence missing when inside list tag","```` $ cat TestClass.java public class TestClass {     /** First sentence */     void method1() {     }      /** Not first sentence. */     void method2() {     } }  $ cat TestConfig.xml                                           $ java -jar checkstyle-7.3-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:2: First sentence should end with a period. [JavadocStyle] Audit done. Checkstyle ends with 1 errors. ````  I am expecting a violation on line 6 just like I get on line 2. Method 2 has a sentence embedded inside a list tag which I don't consider to be the first sentence. There should be something before the list tags even start.   --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39599894-javadocstyle-not-reporting-first-sentence-missing-when-inside-list-tag?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","open","javadoc,","rnveach","2016-11-28T22:48:37Z","2017-11-26T10:46:50Z"
"","3919","RightCurlyCheck: incorrect behavior of shouldStartLine option together with ALONE brace policy","```` $ cat TestClass.java public class TestClass {         private void foo19() {int var1 = 5;         var1 = 6;}         public void foo() {             int var2 = 0;             do { var2 ++; }             while (true);         } }  $ cat TestConfig.xml                                                                                 $ java -jar checkstyle-7.6-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:3:18: '}' at column 18 should be on a new line. [RightCurly] [ERROR] TestClass.java:5:27: '}' at column 27 should be alone on a line. [RightCurly] Audit done. Checkstyle ends with 2 errors. ````  You can check the example [here](http://rveach.no-ip.org/checkstyle/checkstyle.php?action=view&config=56560450bef11228b6e8e90281f9797e&code=2fc86e7033436fec2982aac0fd071d3c&checkstyle=checkstyle-7.6-all.jar&printTree=).  It is unclear why the first violation message require } on a new line while the second violation message require } to be placed alone on a line. From my point of view we should have only one message for brace policy ALONE:  ```'}' at column # should be alone on a line.```  It is interesting that if shouldStartLine is set to false and brace policy is ALONE, the first violation message disappear.   I expect that there will be a violation on line 3 in both cases (shouldStartLine = true, shouldStartLine = false).","closed","","MEZk","2017-03-04T21:10:46Z","2017-03-18T20:18:29Z"
"","3612","Indentation check fails for Line Wrapped Anonymous Inner Class with LCurly on newline","```` $ cat TestClass.java public class TestClass {     public static class SimpleClass {         public void method() {}     }      void method()     {         final SimpleClass test =                 new SimpleClass() { //indent:16                     public void method() {}                 }; //indent:16         final SimpleClass test2 =                 new SimpleClass() //indent:16                 { //indent:16 violation                     public void method() {}                 }; //indent:16     } }  $ cat TestConfig.xml                                              $ java -jar checkstyle-7.4-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:15: 'object def lcurly' have incorrect indentation level 16, expected level should be one of the following: 8, 12. [Indentation] Audit done. Checkstyle ends with 1 errors. ````   There are two test cases here, the first, `test` passes because the `LCURLY` is on the same line. `test2` fails because the `LCURLY` is on its own line alone.  the current validation code wants this: ```java         final SimpleClass test2 =                 new SimpleClass() //indent:16             { //indent:12                 public void method() {}             }; //indent:12 ```  https://github.com/JLLeitschuh/checkstyle/commit/661ad249fdb723b12e4c95cbfdf8f758c7465faa#diff-41124079fe0fabb5d72bbb58a1f17c8c Above has test case and fix.  --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39791441-indentation-check-fails-for-line-wrapped-anonymous-inner-class-with-lcurly-on-newline?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","indentation,","JLLeitschuh","2016-12-06T00:07:48Z","2017-03-23T20:43:42Z"
"","3830","DesignForExtension: order of annotations change violation","```` $ cat TestClass.java import org.junit.Ignore; import org.junit.Test;  public class TestClass {     private static final List NO_SQALE      @Ignore     @Test     public void method2() { test();     }      private void test() {} }  $ cat TestConfig.xml                                        $ java -jar checkstyle-7.5.1-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:7:5: Class 'TestClass' looks like designed for extension (can be subclassed), but the method 'method2' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TestClass' final or making the method 'method2' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension] Audit done. Checkstyle ends with 1 errors. ````  As you can see, the example I get a violation even though `Test` is added as an annotation. If you swap the 2 annotations so Test is first, the violation goes away. I am expecting either there to be no violation as the method is set to be ignored by the annotation.","closed","approved,","rnveach","2017-02-14T03:03:42Z","2017-02-23T23:26:03Z"
"","3802","IndentationCheck: ignoring line with sub-method call","```` $ cat TestClass.java import java.nio.file.Path;  public class TestClass {     void method(Path destinationPath, Path sourcePath) {         Path destPath;         destPath = destinationPath .resolve(sourcePath.subpath(0));     } }  $ cat TestConfig.xml                                                             $ java -jar checkstyle-7.5.1-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  Taken from https://github.com/checkstyle/contribution/pull/174#discussion_r99702559 We are expecting a violation on line 7 as it is not formatted correctly. Indentation is currently 0, we expect 12 to be the correct placement.  ADDITIONAL TEST CASE: https://github.com/checkstyle/checkstyle/pull/7238#discussion_r361878486","open","indentation,","rnveach","2017-02-07T00:15:42Z","2020-01-12T15:45:19Z"
"","3704","Checker's haltOnException doesn't obey severity property","```` $ cat TestClass.java BAD  $ cat TestConfig.xml                                          $ java -jar checkstyle-7.4-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:0: Got an exception - com.puppycrawl.tools.checkstyle.api.CheckstyleException: NoViableAltException occurred during the analysis of file TestClass.java. [Checker] Audit done. Checkstyle ends with 1 errors. ````  Checker severity is set to `warning`, but checkstyle still ends with error when `haltOnException` is set to false and an exception happens. Severity of violation must be `warning` for regression to not halt.","closed","","rnveach","2017-01-09T21:46:27Z","2017-01-11T18:32:01Z"
"","3590","CustomImportControl bad document examples that could lead to false positive on 'special group'","``` vlad@vlad-W65-67SB ~/Documents $ java -jar checkstyle-7.3-all.jar -c my_check.xml Input.java Starting audit... [WARN] /home/vlad/Documents/Input.java:4: Import statement for 'com.github.checkstyle.publishers.SourceforgeRssPublisher' is in the wrong order. Should be in the 'SPECIAL_IMPORTS' group, expecting not assigned imports on this line. [CustomImportOrder] Audit done. vlad@vlad-W65-67SB ~/Documents $ cat Input.java  package com.puppycrawl.tools.checkstyle.checks.imports;  import com.github.checkstyle.publishers.MailingListPublisher; import com.github.checkstyle.publishers.SourceforgeRssPublisher; import com.github.checkstyle.publishers.TwitterPublisher; import com.github.checkstyle.publishers.XdocPublisher;  public class Input { }  vlad@vlad-W65-67SB ~/Documents $ cat my_check.xml                                                                            ``` Expected: no violations.    --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39597513-customimportcontrol-false-positive-on-special-group?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","Vladlis","2016-11-28T21:39:45Z","2016-12-11T23:45:31Z"
"","3126","CommentsIndentation Check false-positive when a singleline comment follows a block comment","``` vlad@vlad-N61PC-M2S ~/cli $ java -jar checkstyle-6.17-all.jar com.puppycrawl.tools.checkstyle.Main -c my_check.xml Test.java Starting audit... [ERROR] /home/vlad/cli/Test.java:6: Comment has incorrect indentation level 8, expected is 16, indentation should be the same level as line 5. [CommentsIndentation] Audit done. Checkstyle ends with 1 errors. vlad@vlad-N61PC-M2S ~/cli $ cat Test.java public class Test {     void foo1() {         foo1();         /*          line 5 */         // violation - line 6     } } vlad@vlad-N61PC-M2S ~/cli $ cat my_check.xml                                     ```  Expected - no violations.","closed","approved,","Vladlis","2016-04-25T05:33:24Z","2016-05-31T12:03:43Z"
"","3125","CommentsIndentation Check false-positive when some statement are used without curly braces on the same line","``` vlad@vlad-N61PC-M2S ~/cli $ java -jar checkstyle-6.17-all.jar com.puppycrawl.tools.checkstyle.Main -c my_check.xml Test.java Starting audit... [ERROR] /home/vlad/cli/Test.java:5: Comment has incorrect indentation level 8, expected is 16, indentation should be the same level as line 4. [CommentsIndentation] Audit done. Checkstyle ends with 1 errors. vlad@vlad-N61PC-M2S ~/cli $ cat Test.java public class Test {     void foo1() {         if (true) System.out.println(                 ""some string""); // line 4         // violation - line 5     } } vlad@vlad-N61PC-M2S ~/cli $ cat my_check.xml                                     ```  Expected - no violations.","closed","approved,","Vladlis","2016-04-25T05:31:49Z","2016-06-16T08:47:56Z"
"","3127","CommentsIndentation Check false-positive in empty array declarations","``` vlad@vlad-N61PC-M2S ~/cli $ java -jar checkstyle-6.17-all.jar com.puppycrawl.tools.checkstyle.Main -c my_check.xml Test.java Starting audit... [ERROR] /home/vlad/cli/Test.java:4: Comment has incorrect indentation level 12, expected is 25, indentation should be the same level as line 3. [CommentsIndentation] Audit done. Checkstyle ends with 1 errors. vlad@vlad-N61PC-M2S ~/cli $ cat Test.java public class Test {     void foo3() {         String[] array = { // line 3             // violation - line 4         };     } } vlad@vlad-N61PC-M2S ~/cli $ cat my_check.xml                                     ```  Expected - no violations.","closed","approved,","Vladlis","2016-04-25T05:36:26Z","2016-06-09T02:39:47Z"
"","3727","CLI is hanging on AST tree printing for Checker.java","``` java -jar checkstyle-7.4-all.jar -j Checker.java  ``` Checker.java - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  Detected: hanging  Expected:  1) tree is shown 2) CI is extended to do print to all files in our repo for all modes (-t, -T, -j, -J)","closed","","romani","2017-01-14T15:04:41Z","2017-02-09T14:56:44Z"
"","3106","NPE in AnnotationLocationCheck.hasAnnotations","``` java -jar checkstyle-6.17-all.jar -c 3.xml Indent.java  Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing Indent.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:318)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:274)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:330)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:159) Caused by: java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck.hasAnnotations(AnnotationLocationCheck.java:228)     at com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck.visitToken(AnnotationLocationCheck.java:217)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:363)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:478)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:305)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:181)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:338)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:308)     ... 3 more Checkstyle ends with 1 errors.  cat -n 3.xml       1        2        3               4        5          6          7            8              9             10             11             12           13         14    cat -n Indent.java       1  public class Indent      2  {      3    public static void main(String[] args) {      4      foo.bar(      5          new Bar() {      6            public void foo() {      7            }      8          }      9      );     10    }     11  } ```","closed","approved,","vrozov","2016-04-15T20:29:24Z","2016-04-16T13:42:07Z"
"","3103","Indentation module regression in 6.16 and 6.17.","``` java -jar checkstyle-6.17-all.jar -c 2.xml Indent.java  Starting audit... [ERROR] Indent.java:8: '}' have incorrect indentation level 8, expected level should be 4. [Indentation] Audit done. Checkstyle ends with 1 errors.  cat -n 2.xml      1        2        3               4        5          6          7            8              9             10             11             12             13             14             15           16         17    cat -n Indent.java       1  public class Indent      2  {      3    public static void main(String[] args) { // indent:2      4      foo.bar( // indent:4      5          new Bar() { // indent:8      6            public void foo() {      7            }      8          } // indent:8      9      );     10    }     11  } ```","closed","approved,","vrozov","2016-04-15T14:32:19Z","2016-04-22T12:12:50Z"
"","3090","RightCurly rule should properly enforce same rule for LITERAL_DO","``` java -jar checkstyle-6.17-all.jar -c 1.xml DoWhile.java Starting audit... [ERROR] DoWhile.java:4:5: '}' at column 5 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else or try/catch/finally). [RightCurly] Audit done. Checkstyle ends with 1 errors.  cat -n 1.xml      1        2        3               4        5          6               7          8            9             10             11           12         13             14             15    cat -n DoWhile.java       1  public class DoWhile {      2    public static void main(String[] args) {      3      do {      4      } while (true);      5    }      6  }  ```","closed","approved,","vrozov","2016-04-10T18:08:11Z","2016-06-12T13:29:59Z"
"","3005","AvoidEscapedUnicodeCharacters: Tail comment check failed if there's tabs before tail comment.","``` E:\test>type TestClass.java public class TestClass {     private String unitAbbrev = ""\u03bcs""; // There's  no tab before slash, expected no warning.     private String unitAbbrev = ""\u03bcs"";  // There's one tab before slash, expected no warning. } E:\test> type config.xml                                              E:\test> java -jar checkstyle-6.16.1-all.jar -c config.xml TestClass.java [ERROR] E:\test\TestClass.java:3: Unicode escape(s) usage should be avoided. [AvoidEscapedUnicodeCharacters] Audit done. Checkstyle ends with 1 errors. ```  *\* Expected: ** No error.","closed","approved,","ybbpgfjtey","2016-03-04T13:46:26Z","2016-03-29T23:24:21Z"
"","3427","JavadocParagraph check ignores other block elements","``` /var/tmp $ javac YOUR_FILE.java $ javac Foo.java $  /var/tmp $ cat YOUR_FILE.java $ cat Foo.java /**  * Some Javadoc.  *  *   * Some Javadoc.  *  *   * Some preformatted Javadoc.  *   *  */   public class Foo {  }  /var/tmp $ cat config.xml $ cat config.xml cat: config.xml: No such file or directory  /var/tmp $ java -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java $  java -jar checkstyle-7.1-all.jar -c config.xml Foo.java Exception in thread ""main"" java.lang.UnsupportedClassVersionError: com/puppycrawl/tools/checkstyle/Main : Unsupported major.minor version 52.0     at java.lang.ClassLoader.defineClass1(Native Method)     at java.lang.ClassLoader.defineClass(ClassLoader.java:800)     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)     at java.net.URLClassLoader.defineClass(URLClassLoader.java:449)     at java.net.URLClassLoader.access$100(URLClassLoader.java:71)     at java.net.URLClassLoader$1.run(URLClassLoader.java:361)     at java.net.URLClassLoader$1.run(URLClassLoader.java:355)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:354)     at java.lang.ClassLoader.loadClass(ClassLoader.java:425)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)     at java.lang.ClassLoader.loadClass(ClassLoader.java:358)     at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:482) ```  ---  ``` /**  * Some Javadoc.  *  *   * Some Javadoc.  *  *   Some Javadoc.  *  *   * Some preformatted Javadoc.  *   *  */ ```  should be OK (as should `, `, etc.) Not everything needs to be wrapped in a paragraph like  ``` /**  * Some Javadoc.  *  *   * Some Javadoc.  *  *   Some Javadoc.  *  *   *   * Some preformatted Javadoc.  *   *  */ ```  ---","closed","","elharo","2016-09-05T13:11:48Z","2016-10-03T23:07:38Z"
"","3471","Wrong order of ""default"" method modifier","``` /var/tmp $ javac Test.java /var/tmp $ cat Test.java public interface Test {   default strictfp void abc() { } } /var/tmp $ cat config.xml                                       /var/tmp $ java -jar checkstyle-7.2-SNAPSHOT-all.jar -c config.xml YOUR_FILE.java Starting audit... [WARN] /var/tmp/Test.java:2:11: 'strictfp' modifier out of order with the JLS suggestions. [ModifierOrder] Audit done. ```  According to the Java Language Specification, the recommended order of class and member modifiers is: `public protected private abstract default static final transient volatile synchronized native strictfp` The audit should complete without warnings.","closed","approved,","agcuda","2016-09-28T13:06:38Z","2016-10-01T09:41:19Z"
"","3655","NullPointerException when using NeedBraces with tokens LITERAL_CASE, LITERAL_DEFAULT","``` /var/tmp $ javac Test.java  /var/tmp $ cat Test.java  import java.lang.annotation.ElementType;  public class Test {      private static void add(ElementType limit) {         String value = """";         switch (limit) {             case FIELD:                 value = ""FIELD"";                 break;             case METHOD:                 value = ""METHOD"";                 break;             default:         }     } }  /var/tmp $ cat checkstyle.xml                                                                                             /var/tmp $ java -jar checkstyle-7.3-all.jar -c checkstyle.xml Test.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing Test.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:287) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:205) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.isSingleLineDefault(NeedBracesCheck.java:445) 	at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.isSingleLineStatement(NeedBracesCheck.java:289) 	at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.isSkipStatement(NeedBracesCheck.java:222) 	at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.visitToken(NeedBracesCheck.java:208) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:361) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:498) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:303) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:178) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:307) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:278) 	... 4 more Checkstyle ends with 1 errors.  ```  When i add `` to the NeedBraces tag the check fails with NullPointerException     --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/40063399-nullpointerexception-when-using-needbraces-with-tokens-literal_case-literal_default?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","approved,","jokarls","2016-12-14T16:36:44Z","2016-12-31T01:37:32Z"
"","3322","RedundantModifier : missed violations at interface and abstract class methods signatures with final parameters","``` /var/tmp $ cat TestClass.java  public interface IWhatever {     void doSomething(final String param); } abstract class Whatever {     public abstract void doSomething(final String param); }  /var/tmp $ cat my_check.xml                          /var/tmp $ java -jar checkstyle-7.0-all.jar -c my_check.xml TestClass.java  Starting audit... Audit done. ```  Expected: violation at 2 and 5.","closed","approved,","romani","2016-06-28T13:49:54Z","2016-08-04T12:50:43Z"
"","3210","AnnotationUseStyle: compact_no_array does not violate extended and multi param annotations","``` /var/tmp $ cat TestClass.java  @SuppressWarnings(value = ""rawtypes"") // 'value=' is superflous (non-compact) - VIOLATION public class Example {     @SuppressWarnings({""unchecked""}) // array is superflous - VIOLATION      public void somePublicMethod() {     }      @SomeAnnotation(attr1=""value1"", arrt2={""value2""}) // array is superfluous  - VIOLATION     public Object[] stuff; }  /var/tmp $ cat my_check.xml                                                             /var/tmp $ java -jar checkstyle-7.0-all.jar -c my_check.xml TestClass.java  Starting audit... [ERROR] /var/tmp/TestClass.java:3: Annotation style must be 'COMPACT_NO_ARRAY'. [AnnotationUseStyle] Audit done. Checkstyle ends with 1 errors. ```  Expected violations are marked at source code - there should be 3 of them as all of them are not compact.  Attention: ""compact"" mode should give 1 violation 1st line.  http://checkstyle.sourceforge.net/config_annotation.html#AnnotationUseStyle http://checkstyle.sourceforge.net/property_types.html#elementStyle ##","closed","easy,","eric-milles","2016-05-22T19:06:31Z","2019-06-14T14:09:17Z"
"","3323","RedundantModifier: miss violation on extra final in try-with-resources","``` /var/tmp $ cat my_check.xml                          /var/tmp $ cat TestClass.java  public class TestClass {     public void somePublicMethod() {         try (final FileOutputStream out = new FileOutputStream(""......"")) {             //...         }     } }  /var/tmp $java -jar checkstyle-7.0-all.jar -c my_check.xmlt TestClass.java  Starting audit... Audit done. ```  The final modifier is redundant in a try-with-resources, as the spec http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.20.3:  >    A resource declared in a ResourceSpecification is implicitly declared final (§4.12.4) if it is not explicitly declared final.   prove that it is final:  ```         try (FileOutputStream out = new FileOutputStream(fileName)) {             out = new FileOutputStream(fileName); /// complication ERROR         } ```","closed","approved,","romani","2016-06-28T13:54:53Z","2016-07-27T03:20:12Z"
"","3700","Control Characters are not skipped with google_checks config","``` /tmp $ javac Demo.java  /tmp $ cat Demo.java public class Demo {   public static void main(String[] args) {     System.out.println(""\u0007"");   } }  /tmp $ java -cp checkstyle-7.4-all.jar com.puppycrawl.tools.checkstyle.Main -c /google_checks.xml Demo.java  Starting audit... [WARN] /tmp/Demo.java:3: Unicode escape(s) usage should be avoided. [AvoidEscapedUnicodeCharacters] Audit done. ``` ---------------  Describe what you expect in detail. I expected this file to pass with no warnings, as `\u0007` [`BEL` is a control character](http://www.fileformat.info/info/unicode/char/0007/index.htm), and google_checks.xml permits unicode escapes for such characters.  --------------  If I switch from  `\u0007` to `\u0008` [BACKSPACE](http://www.fileformat.info/info/unicode/char/0008/index.htm) I see a second, even more confusing error:  ``` $ java -cp checkstyle-7.4-all.jar com.puppycrawl.tools.checkstyle.Main -c /google_checks.xml Demo.java  Starting audit... [WARN] /tmp/Demo.java:3: Unicode escape(s) usage should be avoided. [AvoidEscapedUnicodeCharacters] [WARN] /tmp/Demo.java:3:24: Avoid using corresponding octal or Unicode escape. [IllegalTokenText] Audit done. ```  It's not clear what I'm supposed to do here.  I'm happy to submit patches to address this, but I'm not certain what the expected behavior is.","closed","easy,","dimo414","2017-01-08T09:25:11Z","2017-03-09T13:19:15Z"
"","3791","Improper report of right curly should be on newline when actual problem is right parenthi","``` *************** Source File ******************* package com.test;  import java.io.FileInputStream; import java.io.InputStream;  /**  * Created by Rick Poleshuck on 2/2/2017.  */ public class Main {   public static void main(final String args) throws Exception {     try (         InputStream is = new FileInputStream(""test"")) {      }   } } ```  ``` *************** pom.xml *******************       4.0.0      com.test     checkstyle-bug     1.0-SNAPSHOT               1.8         1.8                                                 org.apache.maven.plugins                 maven-checkstyle-plugin                 2.17                                                               com.puppycrawl.tools                         checkstyle                         7.5                                                                                                     process-classes                                                      check                                                                                            ```  ``` *************** Output ******************* [ERROR] src\main\java\com\test\Main.java:[12,53] (blocks) RightCurly: '}' at column 53 should have line break before. ```  ``` *************** Expected ******************* [ERROR] src\main\java\com\test\Main.java:[12,53] (blocks) RightParen: ')' at column 53 should have line break before. ```","closed","approved,","RickPoleshuck","2017-02-02T17:55:58Z","2017-02-09T17:38:05Z"
"","3600","repo files should not have execute permissions","``` $ ll total 1488 drwxrwxr-x 2 rivanov rivanov   4096 Nov 23 13:43 ./ drwxrwxr-x 7 rivanov rivanov   4096 Jun 24 10:58 ../ -rw-rw-r-- 1 rivanov rivanov  13370 May 20  2016 anttask.xml.vm ... -rw-rw-r-- 1 rivanov rivanov  56984 Nov 14 13:05 config_imports.xml -rw-rw-r-- 1 rivanov rivanov  76904 Nov 14 13:05 config_javadoc.xml -rw-rw-r-- 1 rivanov rivanov  34304 Jun 10 06:33 config_metrics.xml -rwxrwxr-x 1 rivanov rivanov  71591 Nov 14 13:05 config_misc.xml* ... ``` attention to last line ""rwx"", ""x"" flag on files is not required , except for ""*.sh"" files. please find other files in repo, there should be more files like this.   --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39628110-repo-files-should-not-have-execute-permissions?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","romani","2016-11-29T21:46:02Z","2016-12-10T01:58:10Z"
"","3476","Wrong warning from AvoidEscapedUnicodeCharacters","``` $ cat Unicode.java interface Unicode {   String GOOD = ""\\u1234"";   String BAD = ""\u1234""; }  $ java -jar checkstyle-checkstyle-7.1.1/target/checkstyle-7.1.1-all.jar -c checkstyle.xml Unicode.java Starting audit... [WARN] F:\ishop\git\novosales\checkstyle\Unicode.java:2: Unicode-Escapes sollten vermieden werden. [AvoidEscapedUnicodeCharacters] [WARN] F:\ishop\git\novosales\checkstyle\Unicode.java:3: Unicode-Escapes sollten vermieden werden. [AvoidEscapedUnicodeCharacters] Audit done. ```  The warning in line 2 is wrong and should not be there.  Additionally, the Javadoc of the `AvoidEscapedUnicodeCharactersCheck` class is wrong in the first paragraph, where the Unicode escape sequence is rendered as `∞` instead of `\u221e`.  http://checkstyle.sourceforge.net/config_misc.html#AvoidEscapedUnicodeCharacters ##","closed","approved,","rillig-nm","2016-09-29T10:50:40Z","2017-01-01T09:30:32Z"
"","3138","Indentation: Interface method not checked when has return type has array","``` $ cat TestClass.java public interface Test { //indent:0 exp:0 void //indent:0 // line 2 method1(); // indent:0 String //indent:0 // line 4 method2(); // indent:0 String[] //indent:0 // line 6 method3(); // indent:0 } // indent:0 exp:0  $ cat TestConfig.xml                                                             $ java -jar checkstyle-6.17-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:2: 'method def modifier' have incorrect indentation level 0, expected level should be 4. [Indentation] [ERROR] TestClass.java:3: 'method1' have incorrect indentation level 0, expected level should be 4. [Indentation] [ERROR] TestClass.java:4: 'method def modifier' have incorrect indentation level 0, expected level should be 4. [Indentation] [ERROR] TestClass.java:5: 'method2' have incorrect indentation level 0, expected level should be 4. [Indentation] [ERROR] TestClass.java:7: 'method2' have incorrect indentation level 0, expected level should be 4. [Indentation] Audit done. Checkstyle ends with 5 errors. ```  I was expecting line 6 to have the same violation as line 2 and 4. They are exactly the same except the return type is an array. ##","open","indentation,","rnveach","2016-04-27T17:11:37Z","2020-04-24T13:11:09Z"
"","3335","RequireThisCheck: false positive on static field","``` $ cat TestClass.java public final class TestClass {     public static String field1 = """";      public static String field2 = new String(field1);      public String get() {         return field1;     } }  $ cat TestConfig.xml                            $ java -jar checkstyle-7.0-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:4:46: Reference to instance variable 'field1' needs ""this."". [RequireThis] [ERROR] TestClass.java:7:16: Reference to instance variable 'field1' needs ""this."". [RequireThis] Audit done. Checkstyle ends with 2 errors. ```  I am expecting no violations. These fields are defined as static and cannot be prefixed with `this.`.","closed","approved,","rnveach","2016-07-01T18:31:40Z","2016-07-26T04:52:34Z"
"","3334","RequireThisCheck: NPE when surrounded by braces","``` $ cat TestClass.java public final class TestClass {     protected void test() throws Exception {         {             boolean hasSponsor = false;              hasSponsor = true;         }          {             boolean hasChanges = false;               hasChanges = true;         }     } }   $ cat TestConfig.xml                            $ java -jar checkstyle-7.0-all.jar -c TestConfig.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:281)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:196)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:389)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:323)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:161) Caused by: java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.isUserDefinedArrangementOfThis(RequireThisCheck.java:485)     at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.getClassFrameWhereViolationIsFound(RequireThisCheck.java:461)     at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.getFieldWithoutThis(RequireThisCheck.java:308)     at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.processIdent(RequireThisCheck.java:264)     at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.visitToken(RequireThisCheck.java:225)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:362)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:505)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:304)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:179)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:301)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:271)     ... 4 more Checkstyle ends with 1 errors. ```  Removing the braces around `hasChanges` makes the exception go away.","closed","approved,","rnveach","2016-07-01T18:25:05Z","2016-07-05T20:58:46Z"
"","3133","Indentation: multi-line statement not checked","``` $ cat TestClass.java public class TestClass {     void method() {         new String(""VeryLoooooooooo"" //indent:8 exp:8 + ""oongString""); //indent:0 // line 4     } }  $ cat TestConfig.xml                                                               $ java -jar checkstyle-6.17-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ```  I was expecting some type of violation on line 4, like requiring it to be at column 8 or 12, as it doesn't fit at column 0. ##","open","indentation,","rnveach","2016-04-26T19:17:28Z","2017-02-20T21:14:05Z"
"","3502","VariableDeclarationUsageDistance: no violation to move variables closer to block","``` $ cat TestClass.java public class TestClass {     void method() {         int a = 3;         int b = 2;          run();         run();         run();         run();         run();         run();         run();         run();         run();         run();         run();         run();          for (int i = 0; i < 10; i++) {             a = a + b;         }     }      public void run() {}; }  $ cat TestConfig.xml                           $ java -jar checkstyle-7.1.2-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ```  I use `VariableDeclarationUsageDistance` to make sure my variables are close to where they are being used. It makes reading the code easier most times. In the example, there are no violations that variables a and b should be closer to the block that uses them. They are not very close to the block at all, and are not declared `final`. I am expecting them to put out violations since they are so far away, just like if the for loop didn't exist. On the [XDoc](http://checkstyle.sourceforge.net/config_coding.html#VariableDeclarationUsageDistance) in the `Notes` section, I understand from case 1 that the check will not require me to put variables inside the block. I am just asking that the variables be placed close enough to the block to satisfy the distance, assuming the block in question is considered 1 unit as a whole.  From the example above, I am expecting the following violations: ``` [ERROR] TestClass.java:3: Distance between variable 'a' declaration and its first usage is 13, but allowed 1.  Consider to make that variable as final if you still need to store its value in advance (before method calls that might do side effect on original value). [VariableDeclarationUsageDistance] [ERROR] TestClass.java:4: Distance between variable 'b' declaration and its first usage is 13, but allowed 1.  Consider to make that variable as final if you still need to store its value in advance (before method calls that might do side effect on original value). [VariableDeclarationUsageDistance] ```  I am only expecting no violations with the config, if the code is defined as the following:  ```     void method() {         run();         run();         run();         run();         run();         run();         run();         run();         run();         run();         run();         run();          int a = 3;         int b = 2;          for (int i = 0; i < 10; i++) {             a = a + b;         }     } ```  I cannot turn on validateBetweenScopes because it acts as if the braces do not exist and with a distance of 1 it will ask for variables to be moved inside the braces which interfers with loops.","open","easy,","rnveach","2016-10-12T22:18:40Z","2017-03-26T04:39:02Z"
"","3029","FallThrough: add report on last case in switch","``` $ cat TestClass.java public class TestClass {     void method() {         int a = 0;          switch (a) {         case 0:             int b = 0;         case 1:             int c = 0;         }     } }  $ cat TestConfig.xml                          $ java -jar checkstyle-6.16-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:8:9: Fall through from previous branch of the switch statement. [FallThrough] Audit done. Checkstyle ends with 1 errors. ```  I was expecting a similar error message for line 10.  Even though the last case isn't falling into another case statement, I consider the reason for ""FallThrough"" is to make sure **every case** ends with some type of exit (return, throw, break, etc) so when you add a new case anywhere (top, bottom, above another case), you aren't adding the possibility of a fall through bug. That example shows that the last case doesn't follow that strictly. If a coder just added a new case onto the end of the switch in the example, it would then create a fall through and get reported then. So reporting it earlier helps alleviate some future concerns.","closed","","rnveach","2016-03-11T14:40:36Z","2016-03-11T15:26:58Z"
"","3135","Indentation: if with no curlies is not checked","``` $ cat TestClass.java public class TestClass {     void method() {         if (test) //indent:8 exp:8 System.getProperty(""blah""); //indent:0 // line 4         if (test) { //indent:8 exp:8 System.getProperty(""blah""); //indent:0 // line 6         } //indent:8 exp:8     } }  $ cat TestConfig.xml                                                               $ java -jar checkstyle-6.17-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:6: 'if' child have incorrect indentation level 0, expected level should be 12. [Indentation] Audit done. Checkstyle ends with 1 errors. ```  I was expecting line 4 to have a similar violation to line 6, as they are the same expect one has curlies and the other doesn't. ##   ------- Bounty - https://www.bountysource.com/issues/33359220-indentation-if-with-no-curlies-is-not-checked","closed","has bounty,","rnveach","2016-04-26T19:29:09Z","2020-10-15T13:31:38Z"
"","3364","RightCurlyCheck: false positive when do while brace is after method call","``` $ cat TestClass.java public class TestClass {     void method() {         do {         } while (false);         do {             """".substring(0);         } while (false);         do {             if (false)                 return;         } while (false);     } }  $ cat TestConfig.xml                           $ java -jar checkstyle-7.0-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:7:9: '}' at column 9 should be alone on a line. [RightCurly] [ERROR] TestClass.java:11:9: '}' at column 9 should be alone on a line. [RightCurly] Audit done. Checkstyle ends with 2 errors. ```  I am expecting similar validation between line 4, 7, and 9 for the brace position. The contents inside the braces shouldn't matter for this check, only where the braces are located. Since line 4 is not producing a violation, line 7 and 9 shouldn't produce a violation either I would think.","closed","","rnveach","2016-07-21T19:13:01Z","2016-07-21T21:03:24Z"
"","3136","Indentation: while of do-while not checked","``` $ cat TestClass.java public class TestClass {     void method() {         do System.getProperty(""foo""); //indent:8 exp:8 while (test); //indent:0 // line 4          do  //indent:8 exp:8         { //indent:8 exp:8         } //indent:8 exp:8 while (test); //indent:0 // line 9     } }  $ cat TestConfig.xml                                                               $ java -jar checkstyle-6.17-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ```  I was expecting some type of violation on line 4 and 9, like requiring it to be at column 8, as it doesn't belong at column 0.","closed","indentation,","rnveach","2016-04-26T19:44:47Z","2016-04-28T12:37:53Z"
"","3151","Java Grammar: multiple variable declaration tree doesn't look natural","``` $ cat TestClass.java public class TestClass {     int var6 = 5; int var7 = 6, //indent:4 exp:4         var8 = 5; //indent:8 exp:8 }   $ java -jar checkstyle-6.18-all.jar -T TestClass.java CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |  `--LITERAL_PUBLIC -> public [1:0] |--LITERAL_CLASS -> class [1:7] |--IDENT -> TestClass [1:13] `--OBJBLOCK -> OBJBLOCK [1:23]     |--LCURLY -> { [1:23]     |--VARIABLE_DEF -> VARIABLE_DEF [2:4]     |  |--MODIFIERS -> MODIFIERS [2:4]     |  |--TYPE -> TYPE [2:4]     |  |  `--LITERAL_INT -> int [2:4]     |  |--IDENT -> var6 [2:8]     |  |--ASSIGN -> = [2:13]     |  |  `--EXPR -> EXPR [2:15]     |  |      `--NUM_INT -> 5 [2:15]     |  `--SEMI -> ; [2:16]     |--VARIABLE_DEF -> VARIABLE_DEF [2:18] // variable 7     |  |--MODIFIERS -> MODIFIERS [2:18]     |  |--TYPE -> TYPE [2:18]     |  |  `--LITERAL_INT -> int [2:18]     |  |--IDENT -> var7 [2:22]     |  |--ASSIGN -> = [2:27]     |  |  `--EXPR -> EXPR [2:29]     |  |      `--NUM_INT -> 6 [2:29]     |  `--SEMI -> ; [3:16] // semi-colon     |--COMMA -> , [2:30] // comma     |--VARIABLE_DEF -> VARIABLE_DEF [2:18] // variable 8     |  |--MODIFIERS -> MODIFIERS [2:18]     |  |--TYPE -> TYPE [2:18]     |  |  `--LITERAL_INT -> int [2:18]     |  |--SINGLE_LINE_COMMENT -> // [2:32]     |  |  `--COMMENT_CONTENT -> indent:4 exp:4\n [2:34]     |  |--IDENT -> var8 [3:8]     |  `--ASSIGN -> = [3:13]     |      `--EXPR -> EXPR [3:15]     |          `--NUM_INT -> 5 [3:15]     |--SINGLE_LINE_COMMENT -> // [3:18]     |  `--COMMENT_CONTENT -> indent:8 exp:8\n [3:20]     `--RCURLY -> } [4:0] ```  I was expecting variables 7 and 8 to either have the same parent, or have some continuity with the line order and where the semi-colon would be. As it is now, it looks like `var7` has the semi-colon and `var8` ends with nothing which does not accurately reflect the code. This also causes the line numbers to look out of order, as `var7` ends with line 3, a comma at line 2, and then `var8` starts at line 2.  [JLS 8 - 8.3](https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.3) says it should be defined in a `VariableDeclaratorList`. ##","open","antlr,","rnveach","2016-05-02T01:12:18Z","2020-11-13T17:03:54Z"
"","3130","Indentation: method definition not checked when preceded by annotation","``` $ cat TestClass.java public class TestClass {     @SuppressWarnings( //indent:4 exp:4         value="""" //indent:8 exp:8     ) //indent:4 exp:4 public void testStartOfSequence1() { //indent:0     } //indent:4 exp:4      @SuppressWarnings(value="""") //indent:4 exp:4 public void testStartOfSequence2() { //indent:0     } //indent:4 exp:4  public void testStartOfSequence3() { //indent:0     } //indent:4 exp:4 }  $ cat TestConfig.xml                                                        $ java -jar checkstyle-6.17-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:12: 'method def modifier' have incorrect indentation level 0, expected level should be 4. [Indentation] Audit done. Checkstyle ends with 1 errors. ```  All 3 method definitions start at column 0, but only the one with no annotation before it is flagged as a violation. I was expecting lines 5 and 9 to be flagged too as method definitions should start at column 4, not 0, in this scenario. ##","open","indentation,","rnveach","2016-04-26T18:20:07Z","2016-12-14T18:16:50Z"
"","3131","Indentation: multiple try with resource not checked","``` $ cat TestClass.java public class TestClass //indent:0 exp:0 { //indent:0 exp:0     private static void test(String fn) { //indent:4 exp:4         try (FileInputStream fis = new FileInputStream(fn); //indent:8 exp:8 JarInputStream jis = new JarInputStream(fis, false)) //indent:0 // line 5         { //indent:8 exp:8         }     } //indent:4 exp:4 } //indent:0 exp:0   $ cat TestConfig.xml                                                               $ java -jar checkstyle-6.17-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ```  I was expecting some type of violation on line 5, like requiring it to be at column 8 or 12, as it doesn't fit at column 0. ##","closed","medium,","rnveach","2016-04-26T19:05:39Z","2017-07-31T11:21:59Z"
"","3132","Indentation: split line new array not checked","``` $ cat TestClass.java public class TestClass //indent:0 exp:0 { //indent:0 exp:0     int[][] array10b //indent:4 exp:4 = new int[][] { //indent:0 // line 4                 new int[] { 1, 2, 3}, //indent:18                 new int[] { 1, 2, 3}, //indent:18     }; //indent:4 } //indent:0 exp:0   $ cat TestConfig.xml                                                               $ java -jar checkstyle-6.17-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ```  I was expecting some type of violation on line 4, like requiring it to be at column 4 or 8, as it doesn't fit at column 0. ##","open","indentation,","rnveach","2016-04-26T19:11:08Z","2016-12-14T18:16:50Z"
"","3006","FinalLocalVariable: false positive when variable is assigned multiple times","``` $ cat TestClass.java public class Test {     void method() {         final boolean some_condition = true;         int i;          if (some_condition) {             i = 1;              // work i         }          i = 2;         // work i in another way     }      void method2() {         final boolean some_condition = true;         int i;          {             i = 2;         }          // work i          if (some_condition) {             i = 1;              // work i in another way         }     } }  $ cat TestConfig.xml                        $ java -jar checkstyle-6.16-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:4:13: Variable 'i' should be declared final. [FinalLocalVariable] [ERROR] TestClass.java:18:13: Variable 'i' should be declared final. [FinalLocalVariable] Audit done. Checkstyle ends with 2 errors. ```  The examples are a trimmed down version of the cases from my code. I was expecting no errors. `i` cannot be declared `final` in any of the cases since it could be assigned a value multiple times depending on the result of the condition. Eclipse gives me an error when I try to make the variables `final`.","closed","approved,","rnveach","2016-03-04T17:57:07Z","2016-03-31T23:10:00Z"
"","3186","FinalLocalVariableCheck: false positive from multiple and nested conditions","``` $ cat TestClass.java package test;  public class TestClass {     void method() {         for (int i = 0; i < 2; i++) {             final Object converter = new Object();             final String type = getType();             Object value;              if (""s1"".equals(type)) {                 if (getCondition(1)) {                     value = getValue(1);                 }                 else {                     continue;                 }             }             else if (""s2"".equals(type)) {                 if (getCondition(2)) {                     value = getValue(2);                 }                 else {                     continue;                 }             }             else {                 continue;             }              if (converter != null) {                 value = /* converter. */getValue(1, type, value);             }         }     }      void method2() {         for (int i = 0; i < 2; i++) {             final Object converter = new Object();             final Object element = new Object();             String name;              if (getCondition(1)) {                 name = ""1"";             } else if (getCondition(2)) {                 name = ""2"";             } else {                 continue;             }              if (converter != null) {                 name = /* converter. */getName(element, name);                  if (name == null)                     continue;             }         }     }      public Object getValue(int i) {         return null;     }      public Object getValue(int i, String type, Object value) {         return value;     }      public boolean getCondition(int i) {         return true;     }      public String getType() {         return ""s1"";     }      private String getName(Object element, String name) {         return ""s"";     } }  $ cat TestConfig.xml                        $ java -jar checkstyle-6.18-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:8:20: Variable 'value' should be declared final. [FinalLocalVariable] [ERROR] TestClass.java:40:20: Variable 'name' should be declared final. [FinalLocalVariable] Audit done. Checkstyle ends with 2 errors. ```  This is a trimmed down version of my code. As before, these can't be declared `final` since there is a chance they can be assigned twice. Eclipse confirms this for me by giving an error when I try to declare them `final`.","closed","approved,","rnveach","2016-05-17T14:21:32Z","2016-07-23T05:10:08Z"
"","3348","LocalFinalVariableName: not validating try-with-resource variables (new Acceptable token)","``` $ cat TestClass.java import java.io.BufferedReader; import java.io.FileInputStream; import java.io.InputStreamReader; import java.nio.charset.StandardCharsets;  public class Test {     void method() throws Exception {         final String fileName = ""Test"";         final BufferedReader br = new BufferedReader(new InputStreamReader(                 new FileInputStream(fileName), StandardCharsets.UTF_8));         try {         }         finally {             br.close();         }     }      void method2() throws Exception {         final String fileName = ""Test"";         try (BufferedReader br = new BufferedReader(new InputStreamReader(                 new FileInputStream(fileName), StandardCharsets.UTF_8))) {         }         finally {          }     }      void method3() throws Exception {         final String fileName = ""Test"";         try (final BufferedReader br = new BufferedReader(new InputStreamReader(                 new FileInputStream(fileName), StandardCharsets.UTF_8))) {         }         finally {          }     } }  $ cat TestConfig.xml                                        $ java -jar checkstyle-7.0-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:9:30: Name 'br' must match pattern '^(id)|([a-z][a-z0-9][a-zA-Z0-9]+)$'. [LocalFinalVariableName] Audit done. Checkstyle ends with 1 errors. ```  All methods have similar code, just 2 are using try-with-resources and one is using the old style try and local variable. Since they are all similar, I am expecting similar violations on each one but the only one that shows a violation is the old style try. Try-with-resource is implicitly declared `final` by 14.20.3 in the JLS  ``` A variable declared in a resource specification is implicitly declared  final (§4.12.4) if it is not explicitly declared  final . ```  I consider try-with-resource variables to be local, so they should fall under the validation of this Check as there is no other check specifically for it. I expect lines 20 and 30 to have similar violations as line 9. ##","closed","medium,","rnveach","2016-07-14T21:30:26Z","2017-05-28T23:52:26Z"
"","3134","Indentation: custom annotation not checked","``` $ cat TestClass.java      public class TestClass {}      public interface TestInterface {}      public enum TestEnum {}      @interface MyAnnotation {} // line 4      @interface MyAnnotation2 { String author(); // line 6      }  $ cat TestConfig.xml                                                               $ java -jar checkstyle-6.17-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:1: 'class def modifier' have incorrect indentation level 5, expected level should be 0. [Indentation] [ERROR] TestClass.java:2: 'interface def modifier' have incorrect indentation level 5, expected level should be 0. [Indentation] [ERROR] TestClass.java:3: 'enum def modifier' have incorrect indentation level 5, expected level should be 0. [Indentation] Audit done. Checkstyle ends with 3 errors. ```  I was expecting a similar violation on line 4 as we require class, interface, and enum to all be at indent 0. I was also expecting a violation at line 6 requiring a proper indentation, like expecting to be at column 9 (5 from brace + 4 for normal indentation). ##","closed","medium,","rnveach","2016-04-26T19:25:09Z","2017-06-27T01:07:18Z"
"","3431","Inconsistency in AST tructure for block-comments","``` $ cat TableName.java  /** * some text */ public class TableName {  }  ```  ``` $ java -jar checkstyle-7.2-SNAPSHOT-all.jar -J TableName.java  CLASS_DEF -> CLASS_DEF [4:0] |--MODIFIERS -> MODIFIERS [4:0] |   |--JAVADOC -> \n* some text\n [1:0] |   |   |--NEWLINE -> \n [1:0] |   |   |--LEADING_ASTERISK -> * [2:0] |   |   |--TEXT ->  some text [2:1] |   |   |   |--WS ->   [2:1] |   |   |   |--CHAR -> s [2:2] |   |   |   |--CHAR -> o [2:3] |   |   |   |--CHAR -> m [2:4] |   |   |   |--CHAR -> e [2:5] |   |   |   |--WS ->   [2:6] |   |   |   |--CHAR -> t [2:7] |   |   |   |--CHAR -> e [2:8] |   |   |   |--CHAR -> x [2:9] |   |   |   `--CHAR -> t [2:10] |   |   |--NEWLINE -> \n [2:11] |   |   `--EOF ->  [3:0] |   `--LITERAL_PUBLIC -> public [4:0] |--LITERAL_CLASS -> class [4:7] |--IDENT -> TableName [4:13] `--OBJBLOCK -> OBJBLOCK [4:23]     |--LCURLY -> { [4:23]     `--RCURLY -> } [6:0] ```  ``` $ java -jar checkstyle-7.2-SNAPSHOT-all.jar -T TableName.java  CLASS_DEF -> CLASS_DEF [4:0] |--MODIFIERS -> MODIFIERS [4:0] |   |--BLOCK_COMMENT_BEGIN -> /* [1:0] |   |   |--COMMENT_CONTENT -> *\n* some text\n [1:2] |   |   `--BLOCK_COMMENT_END -> */ [3:0] |   `--LITERAL_PUBLIC -> public [4:0] |--LITERAL_CLASS -> class [4:7] |--IDENT -> TableName [4:13] `--OBJBLOCK -> OBJBLOCK [4:23]     |--LCURLY -> { [4:23]     `--RCURLY -> } [6:0] ```  Attention to:  ``` |--MODIFIERS -> MODIFIERS [4:0] |   |--BLOCK_COMMENT_BEGIN -> /* [1:0] ```  vs  ``` |--MODIFIERS -> MODIFIERS [4:0] |   |--JAVADOC -> \n* some text\n [1:0] ```  Expected:  ```     |--BLOCK_COMMENT_BEGIN -> /* [1:0]     |   |--JAVADOC -> \n* some text\n [1:0]     |   |   |--NEWLINE -> \n [1:0]     |   |   |--LEADING_ASTERISK -> * [2:0]     |   |   |--TEXT ->  some text [2:1]     |   |   |   |--WS ->   [2:1]     |   |   |   |--CHAR -> s [2:2]     |   |   |   |--CHAR -> o [2:3]     |   |   |   |--CHAR -> m [2:4]     |   |   |   |--CHAR -> e [2:5]     |   |   |   |--WS ->   [2:6]     |   |   |   |--CHAR -> t [2:7]     |   |   |   |--CHAR -> e [2:8]     |   |   |   |--CHAR -> x [2:9]     |   |   |   `--CHAR -> t [2:10]     |   |   |--NEWLINE -> \n [2:11]     |   |   `--EOF ->  [3:0]     |   `--BLOCK_COMMENT_END -> */ [3:0]  ``` ##","closed","approved,","romani","2016-09-06T20:20:13Z","2016-11-18T21:15:37Z"
"","3892","NoLineWrap: add support for static imports","``` $ cat config.xml                                                  $ cat Main.java  import static    java    .math    .BigInteger    .ONE;                 //Should show violation for IMPORT  import java.math.BigInteger;  public final class Main {   public static void main(String... args) {     BigInteger max = ONE;   } }  $ java -jar checkstyle-7.6-all.jar -c config.xml Main.java Starting audit... Audit done. ``` ---  I expect an error during audit process like the google guidelines mentioned [here](https://google.github.io/styleguide/javaguide.html#s3.3.2-import-line-wrapping). But the [NoLineWrap](http://checkstyle.sourceforge.net/config_whitespace.html#NoLineWrap) is unable to figure this. If `static` keyword is removed, audit prints the expected result.","closed","easy,","kukreja-vikramaditya","2017-03-01T22:08:28Z","2017-03-28T13:06:21Z"
"","3775","RightCurly: 'alone' mode skips empty blocks","``` $ cat config.xml                                                                                                              $ cat MyClass.java  public final class MyClass {     public void foo(String publicPar){       do { } while (publicPar != null); //OK //expected: ok for SAME, violation for ALONE       do{       }while(System.currentTimeMillis() < 0);//OK //expected: ok for SAME, violation for ALONE       if (true) { } //OK //expected: violation for SAME, violation for ALONE     }      // example from http://checkstyle.sourceforge.net/property_types.html#rcurly, in ""same"".     public long getId() {return id;} //OK //expected: violation for SAME, violation for ALONE }  $ java -jar checkstyle-7.3-all.jar -c config.xml MyClass.java Starting audit... Audit done. ```  All cases are violations for ""same"" and ""alone"". There should be no violation only for ""alone_or_singleline"" mode.","closed","approved,","romani","2017-01-28T23:11:56Z","2019-04-17T12:06:22Z"
"","3681","NPE in RightCurly with LITERAL_DO on do-while without curly braces","``` $ cat config.xml                                      $ javac LineGenerator.java   $ cat LineGenerator.java  public class LineGenerator {      int limit;      public void next() {         do             limit++;         while (limit < 10);     } }  $ java -jar checkstyle-7.3-all.jar -c config.xml LineGenerator.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing LineGenerator.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:287) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:205) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck.getDetails(RightCurlyCheck.java:373) 	at com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck.visitToken(RightCurlyCheck.java:175) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:361) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:498) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:303) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:178) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:307) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:278) 	... 4 more Checkstyle ends with 1 errors. ```  original code is http://hg.openjdk.java.net/jdk9/jdk9/jdk/file/d966fc5a7be5/test/java/io/charStreams/LineGenerator.java#l59","closed","approved,","romani","2016-12-30T14:35:56Z","2017-01-05T13:48:02Z"
"","3675","ParameterName: deprecate 'scope' and 'excludeScope' properties, introduce new property 'accessModifiers'","``` $ cat config.xml                                                         $ cat MyClass.java  public final class MyClass {     /**      * This is a method.      * @author Name with dot.      */     public void foo(String publicPar){}      /**      * This is a method.      * @author Name wihtout dot      */     private void foo2(String privatePar){}     }  $ java -jar checkstyle-7.3-all.jar -c config.xml MyClass.java  Starting audit... [WARN] /var/tmp/MyClass.java:6:28: Name 'publicPar' must match pattern '^([a-z][a-z][a-zA-Z])$'. [ParameterName] [WARN] /var/tmp/MyClass.java:12:30: Name 'privatePar' must match pattern '^([a-z][a-z][a-zA-Z])$'. [ParameterName] Audit done. ```  scope is private, so expected violations are only on private methods. the same for excludeScope.  Side note: when config is changed to work only with ""public"" - it works fine. Looks like scope is counted by more visible and less visible. But should be simply by matching.","closed","breaking compatibility,","romani","2016-12-24T01:12:09Z","2017-01-26T20:27:52Z"
"","3423","RequireThis treats local variables as properties","`/var/tmp $ javac Test.java`  ``` ```  `/var/tmp $ cat Test.java`  ``` java public class Test {      private final String s = ""foo"";      public String getS() {         String s = null;         s = ""bar""; // ??? Reference to instance variable 's' needs ""this."". [RequireThis] !!!         return s;      }      public String getS(String s) {         s = ""bar""; // no violation         return s;     }  } ```  `/var/tmp $ cat config.xml`  ``` xml                                                           ```  `/var/tmp $ java -jar checkstyle-7.1-all.jar -c config.xml Test.java`  ``` Starting audit... [ERROR] d:\tmp\Test.java:7:17: Reference to instance variable 's' needs ""this."". [RequireThis] Audit done. Checkstyle ends with 1 errors. ```  ---  I really expect that local variable doesn't overlap to the property. If I'd use property I'd specify `this.` for it.  That works correctly before version `6.17`.  ---  Thanks ##","closed","medium,","artembilan","2016-09-01T22:29:22Z","2017-04-13T01:10:53Z"
"","3418","RequireThis doesn't work since version 6.17","`/var/tmp $ javac Test.java`  `/var/tmp $ cat Test.java`  ``` java public class Test {      private final String s = ""foo"";      public String getS() {         return s; // RequireThis doesn't work     }  } ```  `/var/tmp $ cat config.xml`  ``` xml                        ```  `/var/tmp $ java -jar checkstyle-7.1-all.jar -c config.xml Test.java`  ``` Starting audit... Audit done. ```  ---  The Checkstyle-6.16.1 result looks like:  ``` d:\tmp>java -jar checkstyle-6.16.1-all.jar -c config.xml Test.java Starting audit... [ERROR] d:\tmp\Test.java:6:24: Reference to instance variable 's' needs ""this."". [RequireThis] Audit done. Checkstyle ends with 1 errors. ```  ---","closed","","artembilan","2016-09-01T02:36:23Z","2016-09-01T03:57:04Z"
"","3473","ParameterNameCheck: new scope and excludeScope properties","[Google Style Guide](https://google.github.io/styleguide/javaguide.html#s5.2.6-parameter-names) says that one-character parameter names in public methods should be avoided. There is no such restriction for methods at different visibility scopes. It seems necessary to add `scope` and `excludeScope` (of type http://checkstyle.sourceforge.net/property_types.html#scope) to ParameterName, so that the rule above could be implemented with:  ```                                                                                                                   ``` ##","closed","new feature,","agcuda","2016-09-28T13:28:02Z","2016-11-07T14:31:20Z"
"","3014","Issue #2989: SummaryJavadocCheck period fix","[2989](https://github.com/checkstyle/checkstyle/issues/2989) Fix the issue, and fix other bugs: - Some false negative. ~~fixed~~  ``` E:\test>type config.xml                                  E:\test>type TestSummaryJavadocFalseNegative.java public class TestSummaryJavadocFalseNegative extends Exception {      /**      * JAXB 1.0 only default validation event handler      */     public static final byte NUL = 0;      /**      * @throws Exception if an error occurs.      */     public void foo1() throws Exception {      }      /**       * @return 1.       */     public int foo2(){         return 1;     }      /**       *        */     public void foo3() {      } }  E:\test>java -jar checkstyle-6.16.1-all.jar -c config.xml TestSummaryJavadocFalseNegative.java Starting audit... Audit done. ```  ![qq 20160308003237](https://cloud.githubusercontent.com/assets/16668296/13575805/aa293c2c-e4c5-11e5-8d98-556ed93c520c.png) - One false positive. ~~fixed~~  ``` E:\test>type config.xml                                  E:\test>type TestSummaryJavadocFalsePositive.java public class TestSummaryJavadocFalsePositive {      /**        * {@inheritDoc} */     public String toString(){         return """";     } }  E:\test>java -jar checkstyle-6.16.1-all.jar -c config.xml TestSummaryJavadocFalsePositive.java Starting audit... [ERROR] E:\test\TestSummaryJavadocFalsePositive.java:3: First sentence of Javadoc is incomplete (period is missing) or not present. [SummaryJavadoc] Audit done. Checkstyle ends with 1 errors. ``` - One weird behavior. **Keep the same way with JDK**  ``` E:\test>type config.xml                                  E:\test>type TestSummaryJavadocWeird.java public class TestSummaryJavadocWeird {     /**       *  A {@code Foo.  Foo}      */     public void foo(){      }  }  E:\test>java -jar checkstyle-6.16.1-all.jar -c config.xml TestSummaryJavadocWeird.java Starting audit... Audit done. ```  ![qq 20160308004408](https://cloud.githubusercontent.com/assets/16668296/13576102/ea0812b8-e4c6-11e5-9f99-0701001f37f0.png)","closed","abandoned,","ybbpgfjtey","2016-03-07T16:37:39Z","2017-03-03T19:21:12Z"
"","3046","Issue #2428: Remaining cleanup","@romani requested:  1) IsBlank method need to be created  2) we should not use deprecated guava methodshttp://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Objects.html#firstNonNull(T,%20T)","closed","","kaj","2016-03-20T20:13:02Z","2016-03-20T22:52:46Z"
"","3995","Issue#2974: EmptyLineSeparator check now validates newlines before comments","@romani fixes issue#2974 and created new pull request","closed","","shivanshsoni","2017-03-13T13:36:23Z","2017-03-13T20:12:10Z"
"","3367","Implementation of Builder pattern for DetectorOptions is not thread-safe and mutable","@romani  I remember discussing with you the idea that Checkstyle might be run in multi-thread mode in future. Thus, we should take into account that:  1) the current implementation of Builder pattern for DetectorOptions is not thread-safe, because 'DetectorOptions's fields are not final and can be changed by two different threads.  2) 'build' method returns the same object between invocations, and if the class API user continues setting or changing field's values, the fields of the builder object, which is already created, will be changed.  The solution to the first problem is to implement [classic Builder pattern](http://www.javaworld.com/article/2074938/core-java/too-many-parameters-in-java-methods-part-3-builder-pattern.html) for reducing the number of arguments.  The simple solution to the second problem can be the same as implemented by @Vladlis in [CliOptions](https://github.com/checkstyle/contribution/blob/master/releasenotes-xdoc-builder/src/main/java/com/github/checkstyle/CliOptions.java#L200), however, it is [mutable](https://github.com/checkstyle/contribution/blob/master/releasenotes-builder/src/main/java/com/github/checkstyle/CliOptions.java#L32) and not thread-safe. That is why we should use classic Builder implementation, but in this case there will be problems with lazy initialization of regexp Pattern object as all  DetectorOptions fields will become final and have to be initialized in constructor. Maybe field 'pattern' should be excluded from class fields and become a local variable of getter. ##","open","","MEZk","2016-07-24T16:58:57Z","2016-12-14T18:17:19Z"
"","3339","Issue #3208: Add better support for chained methods","@rnveach @romani Fixes for #3208.  Please review.","closed","","kevinconaway","2016-07-06T14:35:09Z","2016-07-29T15:01:43Z"
"","3085","RegexpOnFilename example from documentation does not work on checkstyle source","@rnveach   The example on the wiki for RegexpOnFilename does not work on the checkstyle source with the checkstyle-tester. See my fork at: https://github.com/cypai/contribution/tree/regexpOnFilename  Run with ./launch.sh -Dcheckstyle.config.location=my_check.xml in the checkstyle-tester.  Example on wiki was at http://checkstyle.sourceforge.net/config_regexp.html#RegexpOnFilename under ""To configure the check to only allow Java and XML files only in your source folder and ignore any other folders""  Output violations were all java files, but nothing else. Expected was no java files, but all of the images in src/site/resources/","closed","miscellaneous,","cypai","2016-04-07T21:08:45Z","2016-05-02T21:51:56Z"
"","3522","minor: added rnveach as developer","300","closed","","rnveach","2016-11-01T22:26:24Z","2016-11-01T22:40:26Z"
"","3988","Issue #3985:  Moved all input files to new folder","1. Updated EmptyLineSeparatorCheckTest.java with updated paths. 2. Moved InputEmptyLineSeparator[*].java to new folder emptylinesperator 3. Copied InputPrePreviousLineEmptiness and files under package-info to the new folder.  Mandatory to understand and do: 0) Issue you are trying to fix/resolve has to have ""approved"" label. 1) Put in description of Pull Request reference to issue if it exists. Example: ""Issue: #XXXXXX"" 2) Commit message should adhere to the following rules:    a) Must match one of the following patterns:\n""       ^Issue #\\d+: .*$       ^Pull #\\d+: .*$       ^(minor|config|infra|doc|spelling): .*$    b) It contains only one line of text    c) Must not end with a period, space, or tab    d) Commit message should be less than or equal to 200 characters  To avoid multiple iterations of fixes and CIs failures, please read http://checkstyle.sourceforge.net/contributing.html  ATTENTION: We are not merging Pull Requests that not passing our CIs, but we help to resole issues.  Thanks for reading, remove whole this message and type what you need.","closed","","anudeepti2004","2017-03-12T18:41:16Z","2017-03-13T14:52:03Z"
"","3498","refactoring to ImportControlCheck","1)2) that points were removed as not reasonable to implement.  3)  ``` inPkg = full.getText(); ```  rename inPkg --> package  4)  ``` currentLeaf ```  rename to currentPkgControl  5)  ```             final FullIdent imp;             if (ast.getType() == TokenTypes.IMPORT) {                 imp = FullIdent.createFullIdentBelow(ast);             }             else {                 // know it is a static import                 imp = FullIdent.createFullIdent(ast                         .getFirstChild().getNextSibling()); } ```  make it as function that return String, nobody need FullIdent class out of this scope.  6)  ``` final DetailAST nameAST = ast.getLastChild().getPreviousSibling(); final FullIdent full = FullIdent.createFullIdent(nameAST); ```  make a function from this with clear name of what is it doing.  7)  ``` currentLeaf.checkAccess(imp.getText(),inPkg); ```  order of argument should be different(by pattern WHERE-->WHAT), should be `currentPkgControl.checkAccess(package, currentImport);` ##     --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/38132941-refactoring-to-importcontrolcheck?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","romani","2016-10-04T21:27:26Z","2016-11-28T22:36:44Z"
"","3691","Holders should not do logging and have any logic for other modules","1) SuppressWarningsHolder is a Check that do logging , even it is not a real Check and suppose to be used for SuppressWarningsFilter.  All Holders should just be containers of data and general for all, whole logic should be in filters, checks, .... .  2) Holders should not extend AbstractCheck class. Documentation page where all Checks are listed should be fixed to state that Holder are not Checks.","closed","approved,","romani","2017-01-05T14:27:05Z","2017-08-05T15:59:49Z"
"","3039","minor: Refactoring of TranslationCheck","1) Added 'static modifier of 'groupFilesIntoBundles' method. 2) Removed unnecessary 'final' modifiers of parameters.","closed","","MEZk","2016-03-15T11:49:31Z","2016-03-16T18:31:19Z"
"","3001","All messages translated to Chinese.","1 default  ``` general.fileNotFound=找不到文件！ general.exception=异常 - {0}  # # for DefaultLogger.java # DefaultLogger.addException=检查错误： {0} DefaultLogger.auditStarted=开始检查…… DefaultLogger.auditFinished=检查完成。  PackageObjectFactory.unableToInstantiateExceptionMessage=无法初始化类： ''{0}'' \    ，也无法初始化： {1}。 \    请检查类名大小写，或阅读帮助手册中短名称配置部分： \    http://checkstyle.sourceforge.net/config.html\#Packages.  \    同时，请检查Checker的ClassLoader是否配置正确。 ```  2 check  ``` noNewlineAtEOF=文件未以空行结尾。 unable.open=无法打开： ''{0}'' 。  todo.match=TODO块： ''{0}'' 。  upperEll=请使用大写''L'' 。  translation.missingKey=找不到 Key ： ''{0}''。 translation.missingTranslationFile=找不到配置文件： ''{0}'' 。  missing.switch.default=switch 没有 \""default\"" 从句。  uncommented.main=未注释的Main方法。  descendant.token.min=''{2}'' 下的 ''{3}'' 出现 {0} 次（最少： {1} 次）。 descendant.token.max=''{2}'' 下的 ''{3}'' 出现 {0} 次（最多： {1} 次）。  descendant.token.sum.min=''{2}''下的 {0} 出现总次数少于{1} 次。 descendant.token.sum.max=''{2}''下的 {0} 出现总次数超过{1} 次。  final.parameter=参数： {0} 应定义为 final 的。 trailing.comments=不要使用行尾注释。  array.type.style=数组大括号位置错误。  type.file.mismatch=顶级类名称与源文件名不同。  properties.duplicate.property=重复属性： ''{0}'' ({1} 次). unable.open.cause=无法打开： ''{0}'': {1}.  forbid.escaped.unicode.char=不要使用Unicode转义字符。  suppress.warnings.invalid.target=@SuppressWarnings 目标错误。 ```  3 checks.annotation  ``` annotation.missing.deprecated=必须同时含有 @java.lang.Deprecated 注解以及 @deprecated Javadoc 注释。 annotation.missing.override=存在 '{'@inheritDoc'}' Javadoc 注释时，必须含有 @java.lang.Override 注解。 annotation.not.valid.on=此处不应有注解： {0} 。 annotation.incorrect.style=Annotation style must be ''{0}''. annotation.trailing.comma.missing=注解数组最后元素尾部必须附加逗号"","" 。 annotation.trailing.comma.present=注解数组最后元素尾部不应附加逗号"","" 。 annotation.parens.missing=注解必须关闭小括号。 annotation.parens.present=注解不能关闭小括号。 annotation.package.location=包注解必须位于 package-info.java 文件。 suppressed.warning.not.allowed=不能忽略  ''{0}''  警告。 javadoc.duplicateTag=重复的 Javadoc 注释： {0} 。 javadoc.missing=缺少 Javadoc 内容。 tag.not.valid.on=此处不应有Javadoc注释： {0} 。  annotation.location=注解 ''{0}'' 缩进了{1}个缩进符，应为：{2}个。 annotation.location.alone=注解 ''{0}'' 应独占一行。 ```  4 checks.block  ``` block.empty=空 {0} 块。 block.nested=避免内嵌块。 block.noStmt=块中应至少有一条代码语句。  catch.block.empty=空 catch 块。  line.alone=第 {1} 个字符 ''{0}'' 应独占一行。 line.new=第 {1} 个字符 ''{0}'' 应位于新行。 line.previous=第 {1} 个字符 ''{0}'' 应位于前一行。 line.same= 第 {1} 个字符 ''{0}''应该与当前多代码块的下一部分 \           （if/else-if/else 或 try/catch/finally）位于同一行。  needBraces=''{0}'' 结构必须使用大括号 '''{}'''。  line.break.after=第 {1} 个字符 ''{0}'' 后应换行。 line.break.before=第 {1} 个字符 ''{0}'' 前应换行。 ```  5 checks.coding  ``` array.trailing.comma=数组尾元素后应有逗号'',''。 assignment.inner.avoid=应避免在子表达式中赋值。 avoid.finalizer.method=避免重写finalize方法。 avoid.clone.method=避免重写 clone 方法。 covariant.equals=重载''equals()''方法时，必须确保重载了''eauals(java.lang.Object)'方法。 declaration.order.constructor=构造器定义顺序错误。 declaration.order.static=静态属性定义顺序错误。 declaration.order.instance=实例属性定义顺序错误。 declaration.order.access=属性访问器定义顺序错误。 default.comes.last=default 应为 switch 块最后一个元素。 empty.statement=避免空行。 equals.avoid.null=字符串常量应出现在 equals 比较的左侧。 equalsIgnoreCase.avoid.null=字符串常量应出现在 equalsIgnoreCase 比较的左侧。 equals.noHashCode=重载''equals()''方法后，必须重载''hashCode()''方法。 explicit.init=属性 ''{0}'' 应初始化为 ''{1}''（类型默认值）。 fall.through=从 switch 块的前一分支落入。 fall.through.last=从 switch 块的最后分支落入。 final.variable=变量 ''{0}'' 应被声明为 final 的。 hidden.field=''{0}'' 隐藏属性。 illegal.catch=禁止捕获： ''{0}'' 。 illegal.throw=禁止抛出： ''{0}'' 。 illegal.token=禁止使用： ''{0}'' 。 illegal.token.text=不应匹配表达式： ''{0}''。 illegal.type=不应声明 ''{0}'' 类型的引用、返回值或参数名。 inline.conditional.avoid=避免三元表达式。 instantiation.avoid=应避免 {0} 的实例化。 magic.number=''{0}'' 是一个魔术数字（直接常数）。 missing.ctor=类应定义一个构造器。 missing.package.declaration=缺少包声明。 missing.super.call=方法 ''{0}'' 应调用 ''super.{0}''。 missing.switch.default=Switch 块未定义 default 。 modified.control.variable=循环控制变量不应在循环体内修改。 multiple.statements.line=禁止一行有多句代码。 multiple.string.literal=字符串： {0} 在本文件中出现了 {1} 次。 multiple.variable.declarations=每一行只能定义一个变量。 multiple.variable.declarations.comma=每一个变量的定义必须在它的声明处，且在同一行。 nested.for.depth=至多{1,number,integer}层 for，目前{0,number,integer}层。 nested.if.depth=至多{1,number,integer}层 if，目前{0,number,integer}层。 nested.try.depth=至多{1,number,integer}层 try，目前{0,number,integer}层。 parameter.assignment=不应对方法参数''{0}''赋值。 redundant.throws.classInfo=Unable to get class information for {0}. redundant.throws.duplicate=多余的 throws: ''{0}'' 出现了不止一次。 redundant.throws.subclass=多余的 throws: ''{0}'' 是 ''{1}'' 的子类。 redundant.throws.unchecked=多余的 throws: ''{0}'' 是非检查异常。 require.this.variable=对实例属性 ''{0}'' 的引用需要 \""{1}this.\""。 require.this.method=对方法 ''{0}'' 的调用需要 \""{1}this.\""。 return.count=Return 次数 {0,number,integer} 次（最多： {1,number,integer} 次）。 simplify.boolReturn=不必要的条件逻辑。 simplify.expression=表达式可被简化。 string.literal.equality=字符串应使用equals()方法进行比较，而非''{0}''。 unnecessary.paren.assign=赋值语句右方不必要的小括号。 unnecessary.paren.expr=表达式周围不必要的小括号。 unnecessary.paren.ident=关键字 ''{0}'' 周围不必要的小括号。 unnecessary.paren.literal=字符串 ''{0}'' 周围不必要的小括号。 unnecessary.paren.return=return 值周围不必要的小括号。 unnecessary.paren.string=字符串 {0} 周围不必要的小括号。 package.dir.mismatch=包声明与目录 ''{0}'' 不匹配。 variable.declaration.usage.distance=变量''{0}''声明及第一次使用距离{1}行（最多：{2} 行）。 variable.declaration.usage.distance.extend=变量''{0}''声明及第一次使用距离{1}行（最多：{2} 行）。若需要存储该变量的值，请将其声明为final的（方法调用前声明以避免副作用影响原值）。 overload.methods.declaration=重载方法应写在一起，上一个重载方法位于第''{0}''行。 doublechecked.locking.avoid=双重检查锁定（DCL - 双重控制的锁机制）。 ```  6 checks.design  ``` arrangement.members.before.inner=属性和方法声明应位于内部类之前。 design.forExtension=方法 ''{0}'' 并未为扩展设计——必须为 abstract 、 final 修饰的，或空方法。 final.class=类 {0} 应定义为 final 的。 interface.type=接口应描述一种类型，从而必须拥有方法。 variable.notPrivate=变量 ''{0}'' 应定义为 private 的，并配置访问方法。 mutable.exception=字段 ''{0}'' 应定义为 final 的。 throws.count=Throws 总数： {0,number,integer} 个（最多： {1,number,integer} 个）。 hide.utility.class=工具类应隐藏 public 构造器。 one.top.level.class=顶级类 {0} 应位于它自己的源文件中。 ```  7 checks.header  ``` header.missing=缺少 header - 行数不足。 header.mismatch=当前行与被期待的 header: ''{0}'' 不符。 ```  8 checks.imports  ``` import.avoidStar=不应使用 ''.*'' 形式的导入 - {0} 。 import.avoidStatic=不应使用 static import - {0} 。 import.duplicate=第{0,number,integer}行重复导入：{1} 。 import.illegal=非法导入包： {0} 。 import.lang=不需要从 java.lang 包导入： {0} 。 import.same=额外 import 当前包下内容：{0} 。 import.unused=无用导入 - {0} 。 import.ordering=导入 ''{0}'' 顺序错误。 import.separation=''{0}'' 应与之前的导入语句通过空行隔开。 import.control.missing.file=找不到导入控制文件。 import.control.disallowed=不允许的导入： {0} 。 import.control.unknown.pkg=导入控制文件并未处理此包。 custom.import.order=导入语句''{2}''位置错误。应位于 ''{0}'' 组，此行应为： ''{1}''。 custom.import.order.line.separator=''{0}'' 应与之前的导入组分开。 custom.import.order.lex=导入语句''{0}'' 字典顺序错误。应在''{1}''之前。 custom.import.order.nonGroup.import=未分组导入应位于导入列表的最后： ''{0}''。 custom.import.order.nonGroup.expected=导入语句''{1}''位置错误。应位于 ''{0}'' 组，此行不应导入。 ```  9 checks.indentation  ``` indentation.error.multi=''{0}'' 缩进了{1}个缩进符，应为以下缩进之一：{2}。 indentation.child.error.multi=''{0}'' 子元素进了{1}个缩进符，应为以下缩进之一：{2}。 indentation.error=''{0}'' 缩进了{1}个缩进符，应为{2}个。 indentation.child.error=''{0}'' 子元素缩进了{1}个缩进符，应为{2}个。 comments.indentation.single=注释应与第{0}行代码同样缩进{2}个缩进符，而不是{1}个。 comments.indentation.block=注释应与第{0}行代码同样缩进{2}个缩进符，而不是{1}个。 ```  10 checks.javadoc  ``` javadoc.parse.error=Javadoc 第 {0} 个字符解析错误。详情： {1}  javadoc.unrecognized.antlr.error=Javadoc 第 {0} 个字符解析错误。ANTLR 解析器未知错误： {1} javadoc.parse.rule.error=Javadoc 第 {0} 个字符解析错误。解析 {2} ，详情： {1}  javadoc.missed.html.close=Javadoc 第 {0} 个字符解析错误。缺少 HTML 闭合标签： ''{1}''。 有时这代表前一标签未闭合。 javadoc.wrong.singleton.html.tag=Javadoc 第 {0} 个字符解析错误。HTML 标签： {1} 不需要闭合。  javadoc.classInfo=无法获得 {0} 标签的 ''{1}'' 类信息。 javadoc.expectedTag=''{1}''需要Javadoc注释 {0} 。 javadoc.extraHtml=额外的 HTML 标签： {0} 。 javadoc.incompleteTag=未关闭的 HTML 标签： {0} 。 javadoc.missing=缺少 Javadoc 。 javadoc.noPeriod=Javadoc 首句应以句号结尾。 javadoc.packageHtml=缺少包注释文件。 javadoc.duplicateTag=重复的 Javadoc 注释 {0} 。 javadoc.return.expected=需要一个 Javadoc注释 @return 。 javadoc.unclosedHtml=未关闭的 HTML 标签： {0} 。 javadoc.unusedTag=''{1}'' 的无用标签 {0} 。 javadoc.unusedTagGeneral=无用标签。 javadoc.empty=Javadoc 描述块不应为空。 javadoc.writeTag={0}={1} javadoc.invalidInheritDoc='{'@inheritDoc'}' 标签使用方式错误。 javadoc.legacyPackageHtml=文件 package.html 应被删除。 javadoc.packageInfo=缺少 package-info.java 文件。 javadoc.unknownTag=未知标签 ''{0}'' 。  type.missingTag=缺少 {0} 标签。 type.tagFormat=标签 {0} 必须匹配： ''{1}'' 。  non.empty.atclause=@标签应有非空说明。  tag.continuation.indent=Javadoc 缩进级别错误，应为 {2} 个缩进符。  summary.javaDoc=禁止出现的首行内容。 summary.first.sentence=Javadoc 首句应以句号结尾。  at.clause.order=@标签应按以下顺序出现：''{0}''。  javadoc.paragraph.tag.after=空行后应有  标签。 javadoc.paragraph.line.before= 标签前应有空行。 javadoc.paragraph.redundant.paragraph=多余的  标签。 javadoc.paragraph.misplaced.tag= 标签应在第一个字符之前，紧邻后者，之间不允许有空格。  singleline.javadoc=该Javadoc注释应为多行的。 ```  11 checks.metrics  ``` booleanExpressionComplexity=布尔表达式复杂度： {0,number,integer} （最多： {1,number,integer} ）。 classDataAbstractionCoupling=类数据的抽象耦合： {0,number,integer} （最多： {1,number,integer}），引用类： {2}。 classFanOutComplexity=类的分散复杂度： {0,number,integer} （最多： {1,number,integer}）。 cyclomaticComplexity=圈复杂度： {0,number,integer} （最多： {1,number,integer} ）。 duplicateLiteral=字符串常量 ''{0}'' 不应出现两次。 finalField=''{0}'' 应声明为 final 的。 illegalAbstractClassName=抽象类名 ''{0}'' 不匹配： ''{1}'' 。 illegalCatch=不应捕获： ''{0}'' 。 illegalThrows=不应抛出： ''{0}''  。 illegalToken=不应使用： ''{0}'' 。 illegalType=不应声明 ''{0}'' 类型的引用、返回值或参数名。 junit.methodName=方法 ''{0}'' 应命名为： ''{1}'' 。 junit.methodParameters=方法 ''{0}'' 不应有参数。 junit.methodPublicAndStatic=方法 ''{0}'' 必须声明为 static 的。 junit.methodPublicOrProtected=方法 {0} 必须声明为 public 或 protected 的。 junit.methodReturnType=方法 ''{0}'' 返回值必须声明为 void 。 mutableException=''{0}'' 应声明为 final 的。 nestedIfDepth=内嵌 if 深度： {0,number,integer} （最多： {1,number,integer} ）。 nestedTryDepth=内嵌 try 深度： {0,number,integer} （最多： {1,number,integer} ）。 npathComplexity=方法分支复杂度： {0,number,integer} （最多： {1,number,integer} ）。 packageDeclaration=缺少包声明。 parameterAssignment=不应对参数 ''{0}'' 赋值。 returnCount=Return 总数 {0,number,integer}个（最多： {1,number,integer}个）。 returnFromCatch=catch 块中不应有 return 。 returnFromFinally=finally 块中不应有 return 。 throwsCount=Throws 总数 {0,number,integer} 个（最多： {1,number,integer} 个）。 unusedVariable=变量 ''{0}'' 从未被使用。 ncss.method=方法代码行数（不含注释）为：{0,number,integer} （最多：{1,number,integer} 行）。 ncss.class=类代码行数（不含注释）为：{0,number,integer} （最多：{1,number,integer} 行）。 ncss.file=文件代码行数（不含注释）为：{0,number,integer} （最多：{1,number,integer} 行）。 ```  12 checks.modifier  ``` redundantModifier=多余修饰符： ''{0}''。 annotation.order=注解 ''{0}'' 前不应有非注解修饰符。 mod.order=''{0}'' 修饰符顺序违反 JLS 建议. ```  13 checks.naming  ``` name.invalidPattern=名称 ''{0}'' 必须匹配表达式： ''{1}'' 。 illegal.abstract.class.name=名称 ''{0}'' 不能匹配表达式： ''{1}'' 。 method.name.equals.class.name=方法名 ''{0}'' 不能与外部类名相同。 no.abstract.class.modifier=类 ''{0}'' 必须是抽象的。  abbreviation.as.word=名称 ''{0}'' 中不能出现超过 ''{1}'' 个连续大写字母。 ```  14 checks.regex  ``` regexp.exceeded=当前行匹配非法表达式： ''{0}''。 regexp.minimum=文件内至少要匹配表达式： ''{1}'' {0}次。  illegal.regexp=当前行匹配非法表达式： ''{0}''。 required.regexp=文件缺少表达式： ''{0}'' 。 duplicate.regexp=重复表达式： ''{0}''。  regexp.empty=空 (null) 表达式。 regexp.StackOverflowError=表达式：''{1}'' 导致 java.util.regex.Matcher 抛出 java.lang.StackOverflowError （将二进制文件错当文本文件检查？）。  regexp.filename.match=文件目录匹配： ''{0}'' ，文件名称匹配： ''{1}''。 regexp.filename.mismatch=文件目录不匹配： ''{0}'' ，名称不匹配： ''{1}''。 ```  15 checks.sizes  ``` executableStatementCount=可执行语句 {0,number,integer} 条 （最多： {1,number,integer} 条）。 maxLen.file=文件 {0,number,integer} 行 （最多：{1,number,integer} 行）。 maxLen.method=方法 {0,number,integer} 行（最多： {1,number,integer} 行）。 maxLen.anonInner=匿名内部类 {0,number,integer} 行（最多： {1,number,integer}）。 maxLineLen=本行字符数 {1,number,integer}个，最多：{0,number,integer}个。 maxOuterTypes=Outer types defined is {0,number,integer} （最多： {1,number,integer}）。 maxParam=参数共： {1,number,integer}个，最多：{0,number,integer}个。 too.many.privateMethods=private 方法总数： {0,number,integer} （最多： {1,number,integer}）。 too.many.packageMethods=包方法总数：{0,number,integer} （最多： {1,number,integer}）。 too.many.protectedMethods=protected 方法总数： {0,number,integer} （最多： {1,number,integer}）。 too.many.publicMethods=public 方法总数： {0,number,integer} （最多： {1,number,integer}）。 too.many.methods=方法总数： {0,number,integer} （最多： {1,number,integer}）。 ```  16 checks.whitespace  ``` empty.line.separator=''{0}' 前应有空行。 empty.line.separator.multiple.lines=''{0}'' 前只应有一个空行。 empty.line.separator.multiple.lines.after=''{0}'' 后只应有一个空行。  containsTab=行内含有制表符 tab 。 file.containsTab=文件含有制表符 tab （这只是第一例）。  line.alone=''{0}'' 应独占一行。 line.new=''{0}'' 应另起一行。 line.previous=''{0}'' 应在前一行。 line.same=''{0}'' 应在同一行。  no.line.wrap={0} 不应换行。  ws.followed=''{0}'' 后不应有空格。 ws.notFollowed=''{0}'' 后应有空格。 ws.notPreceded=''{0}'' 前应有空格。 ws.preceded=''{0}'' 前不应有空格。 ws.illegalFollow=''{0}'' 后字符不合法。 ws.typeCast=类型转换后应有空格。 ```","closed","new feature,","ybbpgfjtey","2016-03-03T17:57:57Z","2016-03-06T01:46:58Z"
"","3319","how to display code metric?","/var/tmp $ javac YOUR_FILE.java [[PLACE YOU OUTPUT HERE]]  /var/tmp $ cat YOUR_FILE.java /* - To change this license header, choose License Headers in Project Properties. - To change this template file, choose Tools | Templates - and open the template in the editor.   */   package rs.metropolitan.data_changer.base;  import org.apache.commons.lang3.StringUtils; import rs.metropolitan.data_changer.AbstactDataSeperator;  /**  * - @author ladmin   */   public class ToDouble extends NewClass {      public ToDouble() {   }      public ToDouble(String input) {       super(input);   }      @Override   public String getInput() {       return super.getInput(); //To change body of generated methods, choose Tools | Templates.   }      @Override   public void setInput(String input) {       super.setInput(input); //To change body of generated methods, choose Tools | Templates.   }      public boolean checking(String data) {       String dot = ""."";       String beforeDot = StringUtils.substringBefore(data, dot);       String afterDot = StringUtils.substringBefore(data, dot);       return StringUtils.isNumeric(beforeDot) && StringUtils.isNumeric(afterDot)               && StringUtils.countMatches(data, dot) == 1;   }      @Override   public Double changeString(String data) {       try {           if (checking(data)) {               return new Double(data);           }           return null;       } catch (NumberFormatException ex) {           System.err.print(ex.getLocalizedMessage());           return null;       } catch (Exception ex) {           System.err.print(ex.getLocalizedMessage());           return null;       }   }      @Override   public Double changeString() {       return changeString(super.getInput());   }  }  /var/tmp $ cat config.xml [metrics_checks.xml.txt](https://github.com/checkstyle/checkstyle/files/335121/metrics_checks.xml.txt)  /var/tmp $ java -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java java -jar checkstyle-7.0-all.jar -c metrics_checks.xml  ToDouble.java Starting audit... Audit done.  ---  report in terminal   ---  Still not clear ??? - see example - http://checkstyle.sourceforge.net/report_issue.html#How_to_report_a_bug","closed","","nkv123","2016-06-27T14:48:42Z","2016-06-27T18:19:17Z"
"","3318","display code metrics","/var/tmp $ javac YOUR_FILE.java [[PLACE YOU OUTPUT HERE]]  /var/tmp $ cat YOUR_FILE.java /* - To change this license header, choose License Headers in Project Properties. - To change this template file, choose Tools | Templates - and open the template in the editor.   */   package rs.metropolitan.data_changer.base;  import org.apache.commons.lang3.StringUtils; import rs.metropolitan.data_changer.AbstactDataSeperator;  /**  * - @author ladmin   */   public class ToDouble extends NewClass {      public ToDouble() {   }      public ToDouble(String input) {       super(input);   }      @Override   public String getInput() {       return super.getInput(); //To change body of generated methods, choose Tools | Templates.   }      @Override   public void setInput(String input) {       super.setInput(input); //To change body of generated methods, choose Tools | Templates.   }      public boolean checking(String data) {       String dot = ""."";       String beforeDot = StringUtils.substringBefore(data, dot);       String afterDot = StringUtils.substringBefore(data, dot);       return StringUtils.isNumeric(beforeDot) && StringUtils.isNumeric(afterDot)               && StringUtils.countMatches(data, dot) == 1;   }      @Override   public Double changeString(String data) {       try {           if (checking(data)) {               return new Double(data);           }           return null;       } catch (NumberFormatException ex) {           System.err.print(ex.getLocalizedMessage());           return null;       } catch (Exception ex) {           System.err.print(ex.getLocalizedMessage());           return null;       }   }      @Override   public Double changeString() {       return changeString(super.getInput());   }  }  /var/tmp $ cat config.xml                                    /var/tmp $ java -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java java -jar checkstyle-7.0-all.jar -c metrics_checks.xml  ToDouble.java Starting audit... Audit done.  ---  copied metrics form checkstyle.xml, just want metrics report in terminal.  ---  Still not clear ??? - see example - http://checkstyle.sourceforge.net/report_issue.html#How_to_report_a_bug","closed","","nkv123","2016-06-27T14:42:55Z","2016-06-27T18:21:23Z"
"","3903","I am on it","/var/tmp $ javac YOUR_FILE.java  [[PLACE YOUR OUTPUT HERE]]  /var/tmp $ cat YOUR_FILE.java  [[PLACE YOU OUTPUT HERE]]  /var/tmp $ cat config.xml  [[PLACE YOUR OUTPUT HERE]]  /var/tmp $ java -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java  [[PLACE YOUR OUTPUT HERE]]  ---------------  Describe what you expect in detail.  --------------  Still not clear ??? - see example - http://checkstyle.sourceforge.net/report_issue.html#How_to_report_a_bug","closed","","RishMeh19","2017-03-03T15:50:45Z","2017-03-03T22:09:36Z"
"","3787","RightCurly: handling of try-with-resources when using 'alone' option","/var/tmp $ javac TryRightCurly.java  ```bash ```  /var/tmp $ cat TryRightCurly.java   ```java import java.io.IOException; import java.io.StringWriter;  final class TryRightCurly {     private TryRightCurly()     {     }      public static void main()     {         try (StringWriter writer = new StringWriter())         {             System.out.println(writer.toString());         }         catch (final IOException ioe)         {             System.out.println(ioe);         }     } } ```  /var/tmp $ cat config.xml  ```xml                                              ```  /var/tmp $ java -jar checkstyle-7.5-all.jar -c config.xml TryRightCurly.java   ```text Starting audit... [ERROR] /home/kadeem/Kazzer/scratch/TryRightCurly.java:12:54: '}' at column 54 should be alone on a line. [RightCurly] Audit done. Checkstyle ends with 1 errors. ```  ---------------  I'm expecting to see no violation from this as the character being referenced at 12:54 is a right parenthesis, not a right curly brace. Behaviour in Checkstyle 7.4 behaved as expected.  /var/tmp $ java -jar checkstyle-7.4-all.jar -c config.xml TryRightCurly.java ```text Starting audit... Audit done. ```","closed","","Kazzer","2017-02-01T21:18:20Z","2017-02-01T21:22:14Z"
"","3741","UnusedImports behaviour is different from documentation","/var/tmp $ javac Test.java  No output.  /var/tmp $ cat Test.java  ```  // Doesn't warn - incorrect import java.lang.String;  public class Test {     private static final String SOMETHING = ""a string""; } ```  /var/tmp $ cat config.xml  ```                        ```  /var/tmp $ java -jar checkstyle-7.4-all.jar -c config.xml Test.java  Starting audit... Audit done.  ---------------  Describe what you expect in detail.  --------------  As documented [in the third item of UnusedImports description](http://checkstyle.sourceforge.net/config_imports.html#UnusedImports),  > The class imported is from the java.lang package. For example importing java.lang.String.  I expect the import of `java.lang.String` to be reported as unused imports, however, it doesn't.  I'm aware there is a [RedundantImport](http://checkstyle.sourceforge.net/config_imports.html#RedundantImport) which can perform this check correctly, and in documentation it is just a proper subset of UnusedImport, so maybe this issue is just because of **outdated documentation**.","closed","approved,","chao1995","2017-01-19T00:58:15Z","2017-01-22T23:24:26Z"
"","3342","Indentation: lambda don't respect lineWrappingIndentation when forceStrictCondition is false","/var/tmp $ javac Test.java  ``` ```  /var/tmp $ cat Test.java  ``` package com.github.aruberto;  import java.util.function.Consumer; import java.util.function.Function; import java.util.function.Supplier;  public class Test {      public static void someFunction(SomeUtilClass util) {          // This fails indentation rule         util.myLambdaUtil(""FIRST_ARG"",                           (string) -> System.out.println(string.trim()), //line 13                           ""SECOND_ARG"",                           () -> ""WHAT WHAT!"");      //line 15          // This passes indentation rule         util.myLambdaUtil(""FIRST_ARG"",             (string) -> System.out.println(string.trim()),                           ""SECOND_ARG"",             () -> ""WHAT WHAT!"");          // This fails indentation rule         Function someFunction1 =                 (string) -> {                       // line 25                     if (string.contains(""abc"")) {                         return ""SWEET!"";                     } else if (string.contains(""123"")) {                         return ""COOL!"";                     } else {                         return ""BOO!"";                     }                 };                                 // line 33          // This passes indentation rule         Function someFunction2 =         (string) -> {             if (string.contains(""abc"")) {                 return ""SWEET!"";             } else if (string.contains(""123"")) {                 return ""COOL!"";             } else {                 return ""BOO!"";             }         };     }      interface SomeUtilClass {          void myLambdaUtil(String firstArg,                           Consumer firstLambda,                           String secondArg,                           Supplier secondLambda);     } }     ```  /var/tmp $ cat config.xml  ```                                                                                                                                                                       ```  /var/tmp $ java -jar checkstyle-7.0-all.jar -c config.xml Test.java  ``` Starting audit...                                                                                                                                                                                [WARN] Test.java:13: 'lambda arguments' have incorrect indentation level 26, expected level should be one of the following: 8, 12. [Indentation]  [WARN] Test.java:15: 'lambda arguments' have incorrect indentation level 26, expected level should be one of the following: 8, 12. [Indentation]  [WARN] Test.java:25: 'lambda arguments' have incorrect indentation level 16, expected level should be 8. [Indentation]                            [WARN] Test.java:26: 'if' have incorrect indentation level 20, expected level should be 12. [Indentation]                                         [WARN] Test.java:27: 'if' child have incorrect indentation level 24, expected level should be 16. [Indentation]                                   [WARN] Test.java:28: 'if rcurly' have incorrect indentation level 20, expected level should be 12. [Indentation]                                  [WARN] Test.java:29: 'if' child have incorrect indentation level 24, expected level should be 16. [Indentation]                                   [WARN] Test.java:30: 'if rcurly' have incorrect indentation level 20, expected level should be 12. [Indentation]                                  [WARN] Test.java:31: 'else' child have incorrect indentation level 24, expected level should be 16. [Indentation]                                 [WARN] Test.java:32: 'else rcurly' have incorrect indentation level 20, expected level should be 12. [Indentation]                                [WARN] Test.java:33: 'block rcurly' have incorrect indentation level 16, expected level should be 8. [Indentation]                                Audit done.                                                                                                                                                                                      ```  ---  Describe what you expect in details.  Given that forceStrictCondition is false and lineWrappingIndentation = 0, I should be able to indent lambda expressions on wrapping lines at any indent level > 0.   In First example, the String arg on line 14 is aligned and passes indentation rule (indention of 26) but the Consumer and Supplier args on line 13 and 15 are forced to indent at 8 or 12.  In second example, I define my Function on a new line after assignment operator (lines 25-33). This is indented by Intellij to 16 as it respects current line wrapping settings. But checkstyle want an indentation of 8 for wrapping line and all subsequent lines of lambda expression. ##","closed","has bounty,","aruberto","2016-07-09T20:25:34Z","2020-09-26T17:41:58Z"
"","3776","RightCurly: handling of try-with-resources on several lines with CS 7.5","/var/tmp $ javac Test.java  /var/tmp $ cat Test.java  ```java // License: GPL. For details, see LICENSE file. import java.io.BufferedReader; import java.io.IOException; class Test {      void test() {         try (BufferedReader br1 = new BufferedReader(null);              BufferedReader br2 = new BufferedReader(br1)) {             System.out.println(""test"");         } catch (IOException e) {             System.err.println(e);         }     } } ```  /var/tmp $ cat config.xml  ```xml                             ```  /var/tmp $ java -jar checkstyle-7.5-all.jar -c config.xml Test.java  > Starting audit... > [WARN] C:\SVN\Test.java:8:58: '}' at column 58 should be on a new line. [RightCurly] > Audit done.  ---------------  Checkstyle 7.4 did not raise error, and that's the behaviour we want. http://checkstyle.sourceforge.net/config_blocks.html#RightCurly","closed","approved,","don-vip","2017-01-30T00:16:04Z","2017-02-01T21:17:24Z"
"","3761","Checkstyle 7.4 does not allow property 'accessModifiers' in module ParameterName","/var/tmp $ javac Sample.java   /var/tmp $ cat Sample.java ``` package com.example;  public class Sample { } ``` /var/tmp $ cat snippet_from_google_checks.xml ```                                                                                                                                                                                                                               ```  /var/tmp $ java -jar checkstyle-7.4-all.jar -c snippet_from_google_checks.xml Sample.java ``` com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Property 'accessModifiers' in module ParameterName does not exist, please check the documentation 	at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:449) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:165) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:421) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Property 'accessModifiers' in module ParameterName does not exist, please check the documentation 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.tryCopyProperty(AutomaticBean.java:192) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:158) 	at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:159) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:165) 	at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:444) 	... 4 more Checkstyle ends with 1 errors. ```  ---------------  Describe what you expect in detail.  --------------  CheckStyle runs without any issues.","closed","","mhernand40","2017-01-26T19:25:09Z","2017-01-26T19:38:42Z"
"","3416","JavadocStyle should not enforce presence of JavaDoc in package-info.java","/var/tmp $ javac package-info.java (nothing, it compiled fine)  /var/tmp $ cat package-info.java package whocares;  /var/tmp $ cat config.xml `....  ... `  /var/tmp $ java -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java package-info.java:2: Missing a Javadoc comment. [JavadocStyle] package-info.java:[2](javadoc) JavadocStyle: Missing a Javadoc comment.  ---  http://checkstyle.sourceforge.net/config_javadoc.html#JavadocStyle should only ""Validates Javadoc comments to help ensure they are well formed."" - if they are present, that is. For most tokens types, that's what it does. For PACKAGE_DEF, only, it curiously behaves differently, and enforces presence of JavaDoc. This is not logical, not according to the documentation, and not what it does for all other tokens.  http://checkstyle.sourceforge.net/config_javadoc.html#JavadocPackage (only) should ""Checks that each Java package has a Javadoc file used for commenting. By default it only allows a package-info.java file, (...)"" ##","open","","vorburger","2016-08-24T21:04:02Z","2016-12-14T18:17:09Z"
"","3617","FinalLocalVariable should not to check multi-catch variables","/var/tmp $ javac FinalLocalVariableMultiCatch.java No output.  /var/tmp $ cat FinalLocalVariableMultiCatch.java ```java import static java.util.Arrays.asList;  public class FinalLocalVariableMultiCatch {      private class A extends Throwable {}     private class B extends Throwable {}     private class C extends Throwable {}      public void demo() throws Throwable {         for (Throwable throwable : asList(new A(), new B(), new C())) {             try {                 throw throwable;             } catch (A a) {                 System.out.println(""Caught A."");             } catch (B | C bOrC) {                 System.out.println(""Caught B or maybe C."");             }         }     }  } ```  /var/tmp $ cat config.xml ```xml                                                                     ```  /var/tmp $ java -jar checkstyle-7.3-all.jar -c config.xml FinalLocalVariableMultiCatch.java ``` Starting audit... [ERROR] P:\java\workspaces\test\flvmc\FinalLocalVariableMultiCatch.java:10:24: Variable 'throwable' should be declared final. [FinalLocalVariable] [ERROR] P:\java\workspaces\test\flvmc\FinalLocalVariableMultiCatch.java:13:24: Variable 'a' should be declared final. [FinalLocalVariable] [ERROR] P:\java\workspaces\test\flvmc\FinalLocalVariableMultiCatch.java:15:28: Variable 'bOrC' should be declared final. [FinalLocalVariable] Audit done. Checkstyle ends with 3 errors. ```  ---------------  If the `validateEnhancedForLoopVariable` property of the `FinalLocalVariable` module is set to `false` (which is the default), then the first error (line 10) is not reported. It is reasonable because the enhanced for-loop variable is implicitly `final`.  I'd like a similar `Boolean` property, possibly called `validateMultiCatchVariable`, with also a default value of `false`, which would avoid the third error (line 15) being reported. The reasoning for this is that multi-catch variables [are implicitly `final`](https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.20), and having to explicitly declare that in order to use the module is redundant, as well as space-consuming. From specification: `An exception parameter of a multi-catch clause is implicitly declared final if it is not explicitly declared final. `  The second error (line 13) must still be reported regardless of the value of the new property, because that variable is not implicitly `final`.  --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/39798784-option-for-finallocalvariable-not-to-check-multi-catch-variables?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","approved,","Kiena","2016-12-06T23:01:44Z","2016-12-31T05:01:11Z"
"","3850","WhitespaceAfterCheck: problem with multiline typecast","/var/tmp $ javac an/extremelylongpackagenamethat/hasmultiplecomponents/Test.java /var/tmp $ cat an/extremelylongpackagenamethat/hasmultiplecomponents/Test.java ``` package an.extremelylongpackagenamethat.hasmultiplecomponents;  public class Test {      public static void main(String args[]) {         Test test =             new an.extremelylongpackagenamethat.hasmultiplecomponents.Test();         Test test2 = (an.extremelylongpackagenamethat.hasmultiplecomponents.                  Test) test;     }  } ``` /var/tmp $ cat config.xml ```                    ``` /var/tmp $ java -jar checkstyle-7.5.1-all.jar -c config.xml an/extremelylongpackagenamethat/hasmultiplecomponents/Test.java ``` Starting audit... [WARN] /private/var/tmp/an/extremelylongpackagenamethat/hasmultiplecomponents/Test.java:9:23: 'typecast' is not followed by whitespace. [WhitespaceAfter] Audit done. ```  ---------------  Describe what you expect in detail.  I expect no warning. There _is_ whitespace after the cast. The check seems to get confused by the fact that there is a line break in the cast. I have to have a line break in order to keep the line under 80 characters.  --------------","closed","approved,","rwalkerands","2017-02-22T04:21:23Z","2017-03-26T05:33:53Z"
"","3762","SingleLineJavadoc rule in google_checks.xml conflicts with Google Java Formatter","/var/tmp $ java -jar [google-java-format-1.2-all-deps.jar](https://github.com/google/google-java-format/releases/download/google-java-format-1.2/google-java-format-1.2-all-deps.jar) -r Sample.java /var/tmp $ javac Sample.java /var/tmp $ cat Sample.java  ``` package com.example;  /** Single line Javadoc that references {@link String}. */ public class Sample {} ``` /var/tmp $ cat [google_checks.xml](https://github.com/checkstyle/checkstyle/blob/checkstyle-7.4/src/main/resources/google_checks.xml) `````` /var/tmp $ java -jar [checkstyle-7.4-all.jar](https://cytranet.dl.sourceforge.net/project/checkstyle/checkstyle/7.4/checkstyle-7.4-all.jar) -c google_checks.xml Sample.java  Starting audit... [WARN] /Users/marcelohernandez/Desktop/SampleProject/Sample.java:3: Single-line Javadoc comment should be multi-line. [SingleLineJavadoc] Audit done.  ---------------  Describe what you expect in detail.  -------------- Checkstyle 7.4 should pass when applying all the google_checks.xml rules against the Java class formatted by Google Java Formatter 1.2. Specifically, the `@link` tag in the single line Javadoc should not be considered in the `SingleLineJavadoc` check.","closed","","tinder-mhernandez","2017-01-26T21:11:58Z","2017-03-07T01:44:49Z"
"","3857","Type annotations on array make Checkstyle crash","/var/tmp $ cat MyClass.java  ``` import org.eclipse.jdt.annotation.NonNull; public class MyClass { 	int[] array = new int @NonNull []{}; } ```  /var/tmp $ java -jarcheckstyle-7.5.1-all -c /google_checks.xml MyClass.java ``` Starting audit... .../MyClass.java:7:24: unexpected token: @ com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing src/test/java/MyClass.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:293) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:211) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: MismatchedTokenException occurred during the analysis of file src/test/java/MyClass.java. 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:192) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:314) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:284) 	... 4 more Caused by: .../MyClass.java:8:1: expecting EOF, found '}' 	at antlr.Parser.match(Parser.java:211) 	at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:211) 	at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:439) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:174) 	... 7 more ``` ---------------  The type annotation on the array seem to be not supported?","closed","","tomvandenberge","2017-02-24T12:36:16Z","2017-02-24T15:00:59Z"
"","3789","RightCurly: multiline try-with-resources gives false positive","/var/tmp $ cat Main.java  ``` public class Main {     public void method() {         try (AutoCloseable x = null;              AutoCloseable y = null) {             // Body         }          catch (Exception e) {             // Exception handling         }     } } ```  /var/tmp $ cat config.xml  ```                         ```  /var/tmp $ java -jar checkstyle-7.5-all.jar -c config.xml Main.java  ``` [ERROR] /var/tmp/Main.java:4:36: '}' at column 36 should be on a new line. [RightCurly] ```  ---------------  The code should be accepted. There is not even a right curly on line 4 (column 36 contains a closing parenthesis), and every right curly in the file is on its own line. This occurs only on a multiline try-with-resources statement (multiple variable declarations in the try's body). Whether or not there is a catch present does not matter.","closed","","mhendriks91","2017-02-02T10:57:27Z","2017-02-02T11:43:44Z"
"","3340","Checkstyle produces different results in different runs on the same file","/var/tmp $ cat DiffParser.java  ``` java package org.wickedsource.diffparser.api;  import org.wickedsource.diffparser.api.model.Diff;  import java.io.File; import java.io.IOException; import java.io.InputStream; import java.util.List;  /**  * Interface to a parser that parses a textual diff between two text files. See the javadoc of the implementation you want to use to see  * what diff format it is expecting as input.  *  * @author Tom Hombergs   */ @SuppressWarnings(""UnusedDeclaration"") public interface DiffParser {      /**      * Constructs a list of Diffs from a textual InputStream.      *      * @param in the input stream to parse      * @return list of Diff objects parsed from the InputStream.      */     List parse(InputStream in);      /**      * Constructs a list of Diffs from a textual byte array.      *      * @param bytes the byte array to parse      * @return list of Diff objects parsed from the byte array.      */     List parse(byte[] bytes);      /**      * Constructs a list of Diffs from a textual File      *      * @param file the file to parse      * @return list of Diff objects parsed from the File.      */     List parse(File file) throws IOException;  } ```  /var/tmp $ cat config.xml  ``` xml                                                                             ```  ---  **Bug Description:** I am accessing Checkstyle via the Java API. This bug cannot be reproduced with the command line interface, so I created a minimal test setup at https://github.com/thombergs/checkstyle-playground which includes the failing unit test [`IdenticalResultsTest`](https://github.com/thombergs/checkstyle-playground/blob/master/src/test/java/org/wickedsource/checkstyle/playground/IdenticalResultsTest.java).   The issue I am observing is that Checkstyle produces different results when the same file is analyzed by different Checker instances within the same JVM. The checker instances run in sequence one after another in the same thread, so it cannot be a multithreading issue.   The test class [`IdenticalResultsTest`](https://github.com/thombergs/checkstyle-playground/blob/master/src/test/java/org/wickedsource/checkstyle/playground/IdenticalResultsTest.java) in the test setup creates two Checker instances and configures them with the same config and runs them on the same file. In the first run, I only get AtClauseOrderCheck as a result, in the second run I get JavadocTagContinuationIndentationCheck instead.  I have observed similar behavior with the following checks, all of which seem to concern javadoc: - AtClauseOrderCheck  - JavadocTagContinuationIndentationCheck  - NonEmptyAtclauseDescriptionCheck - JavadocParagraphCheck - SummaryJavadocCheck - SingleLineJavadocCheck  --- ##","open","javadoc,","thombergs","2016-07-06T18:12:37Z","2019-02-23T20:07:44Z"
"","3398","False positive for ImportOrder for default IntelliJ Idea settings","/Test.java  ``` import data.Class; import data.*;  public class Test {     public static void main(String[] args) {         Object o1 = new Class();         Object o2 = new SomeClass();     } } ```  /data/Class.java  ``` package data;  public class Class { } ```  /data/SomeClass.java  ``` package data;  public class SomeClass { } ```  /checkstyle.xml  ```                                                                                                                      ```  /$ java -Duser.language=en -cp checkstyle-7.1-all.jar com.puppycrawl.tools.checkstyle.Main -c checkstyle.xml src/Test.java  ``` Starting audit... [ERROR] C:\Projects\CheckstyleImportOrderIssue\src\Test.java:2: Wrong order for 'data.*' import. [ImportOrder] Audit done. Checkstyle ends with 1 errors. ```  Expected behavior: There should be no errors to make Checkstyle compatible with default IntelliJ Idea settings. The problem is that Checkstyle checks that imports are in alphabetical order, which is correct. But '*' is before [a-z], that is why Checkstyle expects the following import order:  ``` import data.*; import data.Class; ```  but Intellij Idea puts puts \* after more specific classes:  ``` import data.Class; import data.*; ```  which makes sense, because developers would like to see specific classes before *  Expected implementation: allow such order by default (if it doesn't conflict with other IDE) or add a configuration attribute to allow such ordering  P.S.: Why the hell we should import data.Class when we already imported data.*? It's because java.lang.* (and java.lang.Class) imported implicitly. If we don't import data.Class then compiler assumes that we refer to java.lang.Class. And we cannot rename the class ""Class"" because it's in external library ##","closed","","ychulovskyy","2016-08-05T08:27:53Z","2019-03-03T07:06:47Z"
"","3409","ImportControl can use the wrong package authorization if two packages start identically","... and the package with the shortest name is defined first in `import-control.xml`.  For instance, given  ``` XML                                         ```  class `root.foobar.Baz` will get a warning when importing `root.foobar2` but not when importing `root.foo2`  Based on a cursory look at the code base, I believe the bug happens when attempting to retrieve the authorizations for `root.foobar.Baz`:  Method `com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck#visitToken` will call `com.puppycrawl.tools.checkstyle.checks.imports.PkgControl#locateFinest` on the root node, then iterate its children until it finds one that the package of the inspected class _starts with_ (culprit is `if (forPkg.startsWith(fullPackage)) {` - `PkgControl.java#82` as of version `8ad9441`).  In our example, `root.foo` is defined before `root.foobar` so it is tested first and `Baz`'s package `root.foobar` does start with `root.foo`, thus `foo`'s authorizations are used instead. ##","closed","","ncorai","2016-08-09T00:18:02Z","2017-01-05T17:17:06Z"
"","3442","Issue #3376: Ignore pattern for MethodLength","- Code copied from LineLengthCheck - I wrote the commit only in the Github editor, but I hope it gets this issue going. Would be handy to have an ignore pattern especially when dealing with legacy code where some methods just might be too long (for instance meta data descriptors) and they all have the same name.  Putting a suppress filter or a suppress annotation is not viable in such cases.","closed","discussion ongoing,","robstoll","2016-09-13T15:51:47Z","2016-10-12T20:01:57Z"
"","3466","DetailAST should invalidate its methods cache (aka lazy-load)","**Problem description:**  Methods from DetailAST such as getBranchTokenTypes, branchContains, getColumnNo, getLineNo, getChildCount use lazy-load approach. These methods can be invoked by the checks which are not subscribed to receive AST with comment nodes first and  than be invoked by the checks which are  subscribed to get AST with comment nodes. As a result the inner state of the DetailAST object might be ""cached"" without comment nodes in AST after the first invocation as the methods use lazy-load.  Such methods will return invalid results when they are invoked for the AST which can be accessed in checks that are subscribed to receive comment nodes and for which are not.   **Possible sollution:**  One way forward to resolve the problem is to invalidate DetailAST methods ""cache"".  Resolving of the issue will allow us to fix #3102 .","closed","approved,","MEZk","2016-09-24T10:52:04Z","2016-10-04T19:26:33Z"
"","3403","Flaws in German translation","**Context**: There are German translations [for checkstyle itself and its checks](https://github.com/checkstyle/checkstyle/tree/master/src/main/resources/com/puppycrawl/tools/checkstyle/checks).  **Problem** It has several minor and major flaws that impair usability, especially evolving around the questions ""what does it mean?"" and ""what do I have to do now?"".  **Examples**: - [annotation.location](https://github.com/checkstyle/checkstyle/blob/2a0d283e39264ae3e7d1781d3c3e2033b1e06990/src/main/resources/com/puppycrawl/tools/checkstyle/checks/annotation/messages_de.properties#L13) - [line.(alone|new|previous|same)](https://github.com/checkstyle/checkstyle/blob/2a0d283e39264ae3e7d1781d3c3e2033b1e06990/src/main/resources/com/puppycrawl/tools/checkstyle/checks/blocks/messages_de.properties#L7-L12) - [line.break.(after|before)](https://github.com/checkstyle/checkstyle/blob/2a0d283e39264ae3e7d1781d3c3e2033b1e06990/src/main/resources/com/puppycrawl/tools/checkstyle/checks/blocks/messages_de.properties#L16-L17) - [inline.condtional.avoid](https://github.com/checkstyle/checkstyle/blob/2a0d283e39264ae3e7d1781d3c3e2033b1e06990/src/main/resources/com/puppycrawl/tools/checkstyle/checks/coding/messages_de.properties#L26) - [variable.declaration.usage.distance.extend](https://github.com/checkstyle/checkstyle/blob/2a0d283e39264ae3e7d1781d3c3e2033b1e06990/src/main/resources/com/puppycrawl/tools/checkstyle/checks/coding/messages_de.properties#L56) - ...  **Solution**: Go over the translations and improve them.","closed","miscellaneous,","caugner","2016-08-07T15:27:07Z","2016-08-08T04:21:02Z"
"","3732","NPE on type parameter annotations for this","* `/var/tmp $ javac Demo.java`  ```text ``` (compiled without error)  * `/var/tmp $ cat Demo.java`  ```java package tmp.demo.checkstyle;  import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; import java.nio.ByteBuffer;  public class Demo {      @Retention(RetentionPolicy.RUNTIME)     @Target({ ElementType.TYPE_USE, ElementType.TYPE_PARAMETER })     public @interface UnknownInitialization {         Class value() default Object.class;     }      /**      * Function to demonstrate a Checkstyle bug.      *      * @param buffer dummy argument      */     public void foo(@UnknownInitialization(Demo.class) Demo this,final ByteBuffer buffer) {         buffer.putInt(1);     }  } ```  * `/var/tmp $ cat config.xml`  ```xml                                                                     ```  * `/var/tmp $ java -jar ~/Downloads/checkstyle-7.4-all.jar -c config.xml Demo.java`  ```text Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing Demo.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:293) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:211) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.removeMatchingParam(JavadocMethodCheck.java:824) 	at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.checkParamTags(JavadocMethodCheck.java:756) 	at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.checkComment(JavadocMethodCheck.java:499) 	at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.processAST(JavadocMethodCheck.java:357) 	at com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.visitToken(AbstractTypeAwareCheck.java:154) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:361) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:498) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:303) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:182) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:314) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:284) 	... 4 more Checkstyle ends with 1 errors. ```  ---------------  I would expect that a type parameter annotation for `this` works does not raise a NPE in the checker framework. Such annotations are used e.g. if you try to use the Checker Framework stuff (https://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#initialization-checker).","closed","approved,","maggu2810","2017-01-16T16:53:41Z","2017-01-27T14:06:27Z"
"","3049","Adding autofix support","(Apologies if this has been discussed already or is being tracked elsewhere--I couldn't find it in a few minutes of searching.)  [Phabricator](http://phabricator.org/) provides an API for autofixing simple lint issues by providing an original and replacement string, in addition to the line and column number. This can be super useful for fixing tedious issues and, in extreme cases, can even allow you to bypass a second lint check despite some initial failures.  (As an example: [here](http://eslint.org/blog/2015/09/eslint-v1.5.0-released) are some of the rules that ESLint can autofix.)  I'm curious if there has even been any discussion of supporting autofix in Checkstyle (i.e., in the output XML, using an error level of `autofix` and providing said original and replacement text, so that this information can be passed to the Phabricator API).  In a recent hackathon, I was able to fork Checkstyle and add reliable autofix for a number of rules (`FinalParameterCheck`, `FinalLocalVariableCheck`, `WhitespaceAroundCheck`, `UnusedImportCheck` etc.) as a proof-of-concept. Of course, not every rule is autofixable, though there do seem to be some other viable candidates (`ArrayTrailingCommaCheck`, `NewlineAtEndOfFileCheck`, `ModifierOrderCheck`, etc.).  Look forward to hearing your thoughts.","closed","","charliermarsh","2016-03-20T22:33:30Z","2018-05-08T02:14:51Z"
"","3883","WritingChecks: add documentation on java grammar","'Writing Javadoc Checks' has a full example on using the CLI to print the javadoc tree. http://checkstyle.sourceforge.net/writingjavadocchecks.html#Tool_to_print_Javadoc_tree_structure  Java has a somewhat similar section with http://checkstyle.sourceforge.net/writingchecks.html#The_Checkstyle_SDK_Gui , but it doesn't contain a full example and doesn't mention the CLI. I wanted to use something like the javadoc one to point new people to see to get familar with our Java tree, but a full example doesn't seem to exist unless I missed it.  I think we should add a new section 'Tool to print Java treestructure' to 'Writing Checks'. Show users how to use the CLI and give a full example of our Java tree just like Javadoc does.","closed","miscellaneous,","rnveach","2017-02-28T15:55:18Z","2017-03-03T19:45:06Z"
"","3803","IndentationCheck: catch child indentation not checked","$cat TestClass.java ``` public class TestClass {     void method() {         try {             if (SomeVariableWithVeryLongName             | OtherVariableWithVeryLongName) {             }         }         catch (SomeExceptionWithVeryLongName         | OtherExceptionWithVeryLongName e) {         }     } } ``` $ cat TestConfig.xml ```                    ```  ``` $ java -jar checkstyle-7.5.1-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:5: 'if' child have incorrect indentation level 12, expected level should be 16. [Indentation] Audit done. Checkstyle ends with 1 errors. ``` ---------------  There must be two indentation errors: one for 'if', another for 'catch'. It seems like the 'catch' handler lacks some code.  --------------","closed","indentation,","pbludov","2017-02-07T06:36:49Z","2017-02-16T04:11:00Z"
"","3453","Issue with UnusedImports and javadoc usage.","$ javac Test.java  `[no output] `  $ cat Test.java  ``` package foo.bar;  import java.lang.Thread;  /**  * Use {@link Thread.State} in this javadoc.  */ public class Test { } ```  $ cat config.xml  ```                                              ```  $ java -jar checkstyle-7.2-SNAPSHOT-all.jar -c config.xml Test.java  ``` Starting audit... [ERROR] /usr/local/google/ssd1/checkstyle/target/Test.java:3:8: Unused import - java.lang.Thread. [UnusedImports] Audit done. Checkstyle ends with 1 errors. ```  ---  I expected no errors as the import is used by the Javadoc.  ---  This happens on the latest master of Checkstyle as well as older versions like 6.12.1 ##","closed","javadoc,","liutikas","2016-09-20T01:04:21Z","2017-09-02T16:32:51Z"
"","3460","Indentation: Issue with indentation after line wrapping","$ javac Test.java `[no output]`  $ cat Test.java  ``` public class Test {     private static final int THIS_IS_THE_BEST_CONSTANT_OF_ALL_TIMES = 1;     public boolean fooBar(int verylongparametername) {         return java.lang.Math.max(                 THIS_IS_THE_BEST_CONSTANT_OF_ALL_TIMES, verylongparametername)             == THIS_IS_THE_BEST_CONSTANT_OF_ALL_TIMES;     } } ```  $ cat config.xml  ```                                                       ```  $ java -jar checkstyle-7.1.1-all.jar -c config.xml Test.java  ``` Starting audit... Audit done.  ```  ---  I expected Indentation check to catch the issue with the indention of  the line with ==, but it did not warn about anything.  ---  It happens on Checkstyle 7.1.1 as well as older versions like 6.12.1. ##","open","indentation,","liutikas","2016-09-23T00:30:53Z","2018-03-18T20:05:44Z"
"","3518","CatchParameterName add support for 2 character length parameter name","$ javac SomeClass.java [no output]  $ cat SomeClass.java  ``` java public class SomeClass {     public void saveEnrollmentAclOverride() {         try {             //         }         catch (ValidationException ve) {             //         }     }      class ValidationException extends RuntimeException {      } } ```  $ cat checkstyle.xml  ``` xml                         ```  $ java -jar checkstyle-7.1.2-all.jar -c checkstyle.xml SomeClass.java  ``` Starting audit... [ERROR] C:\Users\borcherspm\Desktop\checkstyle\SomeClass.java:8:44: Name 've' must match pattern '^(e|t|ex|[a-z][a-z][a-zA-Z]+)$'. [CatchParameterName] Audit done. Checkstyle ends with 1 errors. ```  ---  I expected it to pass because I want to be able to specify a 2 character length catch parameter as long as is ends with an 'e'.","closed","","borcherspm","2016-10-28T19:16:34Z","2016-10-29T19:06:37Z"
"","3328","Indentation: bug in interplay between throwsIndent and lineWrappingIndentation","$ cat ThrowsIndent.java  ``` java class ThrowsIndent {     public void simpleMethod(String formalParameter)             throws Exception // VIOLATION -- throws should be indented 1 step from previous line     {     }      public void complicatedMethod(         String formalParameter1,         String formalParameter2,         String formalParameter3,         String formalParameter4,         String formalParameter5)             throws Exception // no violation -- throws should be indented 1 step from previous line     {     } } ```  $ cat config.xml  ``` xml                                                                                                                                 ```  $ java -jar checkstyle-7.0-all.jar -c config.xml ThrowsIndent.java Starting audit... [ERROR] C:\Users\U0076777\ThrowsIndent.java:4: Line should be indented by 8 spaces [Indentation] [ERROR] C:\Users\U0076777\ThrowsIndent.java:14: Line should be indented by 8 spaces [Indentation] Audit done. Checkstyle ends with 2 errors.  ---  First violation is considered correct behavior.  The throws clause is indented too far.  The second violation is considered a bug.  Since the parameter list is wrapped and therefore indented, the throws clause should be indented one additional level to offset it from the parameter list. ##","open","indentation,","eric-milles","2016-06-28T21:12:27Z","2017-02-03T13:56:49Z"
"","3808","Indentaton: super() is ignored","$ cat Test.java ``` class Test {     public Test() {         super(             (one, two, three, four) -> someMethodName(one, two, three));     }     void method() {         other(             (one, two, three, four) -> someMethodName(one, two, three));     } } ``` $ cat config.xml ```                ```  ``` $ java -jar checkstyle-7.5.1-all.jar -c config.xml Test.java Starting audit... [ERROR] Test.java:4: 'lambda arguments' have incorrect indentation level 12, expected level should be 16. [Indentation] Audit done ``` ---------------  Only happends with 'super' and only if the lambda comes first. Increasing the indentation level won't help, the expected level grows as well.  --------------","closed","medium,","pbludov","2017-02-08T09:58:33Z","2018-03-22T05:44:13Z"
"","3329","ParenPad: add LAMBDA token support","$ cat LambdaParams.java  ``` java class LambdaParams {     {         java.util.function.Consumer c = ( o ) -> { o.toString() }; // 2 VIOLATIONS -- want no space after opening '(' and no space before closing ')' in lambda expression          java.util.stream.Stream.of().forEach(( o ) -> o.toString()); // 2 VIOLATIONS -- want no space after opening '(' and no space before closing ')' in lambda expression          java.util.stream.Stream.of().forEach(( Object o ) -> o.toString()); // 2 VIOLATIONS -- want no space after opening '(' and no space before closing ')' in lambda expression     }      void someMethod( String param ) // 2 VIOLATIONS -- want no space after opening '(' and no space before closing ')' in method def     {     } } ```  $ cat config.xml  ``` xml                                                           ```  $ java -jar checkstyle-7.0-all.jar -c config.xml LambdaParams.java Starting audit... [ERROR] C:\Users\U0076777\LambdaParams.java:6:47: Whitespace after opening '(' should be removed [ParenPad] [ERROR] C:\Users\U0076777\LambdaParams.java:6:49: Whitespace before closing ')' should be removed [ParenPad] [ERROR] C:\Users\U0076777\LambdaParams.java:8:47: Whitespace after opening '(' should be removed [ParenPad] [ERROR] C:\Users\U0076777\LambdaParams.java:8:56: Whitespace before closing ')' should be removed [ParenPad] [ERROR] C:\Users\U0076777\LambdaParams.java:11:21: Whitespace after opening '(' should be removed [ParenPad] [ERROR] C:\Users\U0076777\LambdaParams.java:11:34: Whitespace before closing ')' should be removed [ParenPad] Audit done. Checkstyle ends with 6 errors.  ---  I'm not sure what is different about the assignment statement, but that lambda is not producing violations for the ParenPad check.  There should be a total of 8 violations in the sample source. So line 4 should produce 2 violations. ##","closed","easy,","eric-milles","2016-06-28T21:41:03Z","2017-03-28T14:15:05Z"
"","3326","NoWhitespaceBefore: Add support for closing brace of ARRAY_INIT separate from general RCURLY","$ cat ArrayInit.java  ``` java class ArrayInit {     String one = ""value1"", two = ""value2"";      // no violations -- want single-line initializer to be compact     String[] compact = {one};      // 2 VIOLATIONS -- want single-line initializer to be compact     String[] wantCompacted = { one };      // no violations -- want multi-line initializer to be well-formed     String[] justFine = {         one,         two,     }; } ```  $ cat config.xml  ``` xml                                                                                                                                                   ```  $ java -jar checkstyle-7.0-all.jar -c config.xml ArrayInit.java Starting audit... [ERROR] C:\Users\U0076777\ArrayInit.java:9: Whitespace before '}' should be removed [RegexpSinglelineJava] [ERROR] C:\Users\U0076777\ArrayInit.java:9:31: Whitespace after '{' should be removed [NoWhitespaceAfter] Audit done. Checkstyle ends with 2 errors.  ---  I have been missing the complement to NoWhitespaceAfter ARRAY_INIT for some time now.  NoWhitespaceBefore does not have a token type that matches the closing brace of an array initializer.  The desire is to produce compact array initializers when they are formatted to fit on one line, like `String[] compact = {""value""}` or `Arrays.asList(new String[] {""value""});` or `@SuppressWarnings({""rawtypes"", ""unchecked""})`.  Until now, I have been using a regex check to detect this condition (as seen in the config.xml above).  However, it is not very complete because we had been getting a lot of false positive matches within string literals.  Now that we have migrated to Java 8, the regex can't really be used anymore due to our choice of lambda syntax.","closed","","eric-milles","2016-06-28T17:25:10Z","2016-09-11T00:26:09Z"
"","3324","LeftCurly: Provide separate/unique token type for opening braces of anonymous inner class","$ cat AnonInner.java  ``` java import java.util.*; class AnonInner { // no violation -- want opening brace of class to be on new line     Comparator c = new Comparator()     { // VIOLATION -- want the opening brace of anon. inner to be at end of previous line         @Override public int compare(Object lhs, Object rhs)         { // no violation -- want opening brace of method to be on new line             return 0;         }     }; } ```  $ cat config.xml  ``` xml                                                                                                                                 ```  $ java -jar checkstyle-7.0-all.jar -c config.xml AnonInner.java Starting audit... [ERROR] C:\Users\U0076777\AnonInner.java:3:1: Opening '{' should be at end of previous line [LeftCurly] [ERROR] C:\Users\U0076777\AnonInner.java:5:5: Opening '{' should be at end of previous line [LeftCurly] Audit done. Checkstyle ends with 2 errors.  ---  What I'm looking for is a way to isolate opening brace of anonymous inner class.  Currently, the only option available is OBJBLOCK.  However, this token type is also present under CLASS_DEF and a number of others that are already in use.  If I remove OBJBLOCK from my first LeftCurly definition, I get violations for opening braces on the same line for classes, interfaces, enums.  This is what we want.  However, I can't think of a way to generate a warning for the opening brace of Comparator anonymous inner class on the next line.  We want lambdas, array inits, and anon. inner classes to use the tighter style of brace at the end of the line.  AST for anon. inner is currently like this: ![checkstyle ast of anon inner class](https://cloud.githubusercontent.com/assets/18193802/16422934/be65b10e-3d1f-11e6-8ad0-f54d0e35cb8a.png)","closed","","eric-milles","2016-06-28T16:06:28Z","2022-07-28T09:43:32Z"
"","3519","Issue #941: Update import ordering in google_checks.xml according to changes in Google Style Guide","#941  1) Updated import ordering in google_checks.xml according to changes Google Style Guide 2) Updated ITs 3) CustomImportOrder still has issues with checking the exact number of blank lines between groups. In addition, it allows to have one or more blank lines even if separateLineBetweenGroups is set to false. However, Google Style Guide ([section 3.3.3](https://google.github.io/styleguide/javaguide.html#s3.3.3-import-ordering-and-spacing)) says that `If there are both static and non-static imports, a single blank line separates the two blocks. There are no other blank lines between  import statements.` As a result of the issues we cannot provide the correct configuration.  3.1) Example of wrong behavior:  ``` xml                  ```  The following code examples do not rise any violations:  ``` java import static com.puppycrawl.tools.checkstyle.utils.AnnotationUtility.containsAnnotation; import static com.puppycrawl.tools.checkstyle.utils.AnnotationUtility.getAnnotation;   import com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck; import com.puppycrawl.tools.checkstyle.checks.design.ThrowsCountCheck; import com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck; import com.sun.accessibility.internal.resources.*; import java.util.Arrays; import java.util.BitSet; import java.util.Map; import java.util.Map.Entry; import java.util.NoSuchElementException; import javax.accessibility.Accessible; import org.apache.commons.beanutils.converters.ArrayConverter;  public class InputCustomImportOrderValid { } ```  ``` java import static com.puppycrawl.tools.checkstyle.utils.AnnotationUtility.containsAnnotation; import static com.puppycrawl.tools.checkstyle.utils.AnnotationUtility.getAnnotation;  import com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck; import com.puppycrawl.tools.checkstyle.checks.design.ThrowsCountCheck; import com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck; import com.sun.accessibility.internal.resources.*;  import java.util.Arrays; import java.util.BitSet; import java.util.Map; import java.util.Map.Entry; import java.util.NoSuchElementException; import javax.accessibility.Accessible; import org.apache.commons.beanutils.converters.ArrayConverter;  public class InputCustomImportOrderValid { } ```  ``` java import static com.puppycrawl.tools.checkstyle.utils.AnnotationUtility.containsAnnotation; import static com.puppycrawl.tools.checkstyle.utils.AnnotationUtility.getAnnotation;  import com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck;  import com.puppycrawl.tools.checkstyle.checks.design.ThrowsCountCheck; import com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck; import com.sun.accessibility.internal.resources.*;   import java.util.Arrays; import java.util.BitSet; import java.util.Map; import java.util.Map.Entry; import java.util.NoSuchElementException; import javax.accessibility.Accessible; import org.apache.commons.beanutils.converters.ArrayConverter;  public class InputCustomImportOrderValid { } ```  3.2) Example of wrong behavio  ``` xml                  ```  The following code example does not rise any violations too:  ``` java import static com.puppycrawl.tools.checkstyle.utils.AnnotationUtility.containsAnnotation; import static com.puppycrawl.tools.checkstyle.utils.AnnotationUtility.getAnnotation;  import com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck; import com.puppycrawl.tools.checkstyle.checks.design.ThrowsCountCheck; import com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck; import com.sun.accessibility.internal.resources.*; import java.util.Arrays; import java.util.BitSet; import java.util.Map; import java.util.Map.Entry; import java.util.NoSuchElementException; import javax.accessibility.Accessible; import org.apache.commons.beanutils.converters.ArrayConverter;  public class InputCustomImportOrderValid { } ```","closed","","MEZk","2016-10-30T10:36:42Z","2016-11-11T05:11:53Z"
"","3121","Issue #410: Wiki-page. Some more info.","#410  http://baratali.github.io/site/writingjavadocchecks.html","closed","","baratali","2016-04-19T23:52:43Z","2016-04-20T01:06:07Z"
"","3165","Issue #410: WritingJavadocChecks wiki-page changes.","#410  How the page looks like: http://baratali.github.io/site/writingjavadocchecks.html","closed","","baratali","2016-05-10T10:01:34Z","2016-05-10T13:51:41Z"
"","3112","Issue #410: Wiki-page .'Tools To See Javadoc Tree Structure' part","#410  How it looks like: http://baratali.github.io/site/writingjavadocchecks.html","closed","","baratali","2016-04-16T21:00:43Z","2016-04-17T12:07:30Z"
"","3347","Issue #410: Various amendments in wiki-page","#410","closed","","baratali","2016-07-12T12:23:52Z","2016-07-12T13:53:50Z"
"","3343","Issue #410: Table describing new HTML standard update in Javadoc grammar","#410","closed","","baratali","2016-07-10T17:48:13Z","2016-07-11T15:49:34Z"
"","3310","minor: formatting in antlr4 grammar","#410","closed","","baratali","2016-06-25T13:02:56Z","2016-06-25T13:04:24Z"
"","3276","Issue #410: More info about HTML5 tags","#410","closed","","baratali","2016-06-15T00:19:07Z","2016-06-15T01:46:07Z"
"","3274","Issue #410: Info about 'Not supported in HTML5' tags","#410","closed","","baratali","2016-06-14T12:41:14Z","2016-06-14T21:57:59Z"
"","3261","Issue #410: Some amendments in WritingJavadocCheck, HTML tags part","#410","closed","","baratali","2016-06-09T10:34:22Z","2016-06-10T17:28:51Z"
"","3227","Issue #410: More examples to WritingJavadocChecks wiki-page","#410","closed","","baratali","2016-05-28T13:49:20Z","2016-05-28T16:36:45Z"
"","3214","Writing Javadoc Checks wiki-page","#410","closed","","baratali","2016-05-25T13:09:49Z","2016-05-25T17:39:56Z"
"","3195","Issue #410: Some amendments in WritingJavadocChecks wiki-page","#410","closed","","baratali","2016-05-19T12:52:01Z","2016-05-20T21:46:33Z"
"","3178","Issue #410: WritingJavadocChecks wiki-page. Some amendments.","#410","closed","","baratali","2016-05-14T13:53:06Z","2016-05-14T16:48:20Z"
"","3171","WritingJavadocChecks wiki-page changes","#410","closed","","baratali","2016-05-12T23:24:43Z","2016-05-13T13:00:48Z"
"","3167","Issue #410: WritingJavadocChecks wiki-page. Link to issue.","#410","closed","","baratali","2016-05-11T15:56:18Z","2016-05-11T16:37:41Z"
"","3156","Issue #410. Wiki page","#410","closed","","baratali","2016-05-04T22:45:33Z","2016-05-05T00:03:42Z"
"","3129","Issue #410: Wiki-page. What is Javdoc comment.","#410","closed","","baratali","2016-04-26T16:37:14Z","2016-04-26T22:09:32Z"
"","3430","Issue #408: Update Checkstyle GUI in order to display Javadoc tokens","#408  ![](https://s3.postimg.org/q61cxulpv/Checkstyle_GUI.png)","closed","","baratali","2016-09-06T11:41:36Z","2016-09-11T22:13:17Z"
"","3092","Issue #407: Fix cache usage in presence of modules which use external resources for configuration","#407  **Solution to #407 issue. Part 1.**  Questions that should be discussed:  1) Where should we load external resources by their URIs to calculate SHA-1 cache sum? In PropertyCacheFile? 2) Where and how we should treat exceptions if it is not possible to create URI for resource. See failded tests. 3) What default implementation should we use for method 'getExternalResources'? Suggestions:  ``` java public List getExternalResources() {     return Collections.EMPTY_LIST; } ```  or  ``` java public OptionalgetExternalResources() {     return Optional.absence(); } ```  Both first and second implementation require null check in Checker, because we do not know whether user will follow the rule and return non null reference.  4) How can we be sure that user will invoke 'super.getExternalResources' , for example, in HeaderCheck and will give information about the header file (from AbstractHeaderCheck) in Checker?","closed","","MEZk","2016-04-11T18:47:22Z","2016-05-16T20:54:15Z"
"","3993","Issue #3989: UTs should not use ROOT locale when they test violation/…","#3989   Some information that might help:  `getMessageBundle ` in `BaseCheckTestSupport` refers to https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java#L110 The resource bundle should be loaded with a correct path, which is placed in the same package as the check class. In most cases, UT is in the same package as the related check class, so we can just get the package by the test class itself. In other cases, they are in different packages, so we need to pass an extra class parameter as well.  This fix is to remove the ROOT locale in tests, and that's done. Meanwhile I have found quite a few hard-coded string literals which will lead to localization problem. Other changes have been made to fix them.  Diff report: http://www.luolc.com/checkstyle-diff-report/issue3989/","closed","","Luolc","2017-03-13T11:02:09Z","2017-03-15T07:13:05Z"
"","3968","Issue #3965: remove from Input files ""Compilable with Java8""","#3965   All `//Compilable with Java8` comments are replaced with empty lines, except the following ones: https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputLambda1.java, https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputLambda1.java. There are checks for the indent. The comments are not just the comments themselves but also a specific case to be verified. So I replace them with `//a comment`  https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/InputRegressionJava8Class1.java, https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/InputRegressionJava8Interface1.java. There are checks verifying ast structure. The start line index in expected file is 2. Adding new line before class modifier like other files will lead to test failure, or we need update many line numbers in the expected file.  Diff report: http://www.luolc.com/checkstyle-diff-report/issue3965/","closed","","Luolc","2017-03-09T15:28:03Z","2017-03-10T02:03:10Z"
"","3966","Issue #3961: DetailASTTest: 'checkTree' failing on deep AST tree","#3961   The fix will follow the steps below:  - [x] Create an input file and let the CI fail with a stackoverflow error. - [x] Rewrite the test with a non-recursive way and let the CI pass. To prove the fix will work. - [x] Create diff report.  ~~Currently I am doing step one. I have duplicated the input file which makes CI failed in #3700. I am waiting for the CI result now.~~  The stackoverflow is reproduced successfully. https://travis-ci.org/checkstyle/checkstyle/jobs/209359675#L2123  CI passed after rewriting the test now.  Diff report: http://www.luolc.com/checkstyle-diff-report/issue3961/  @rnveach please have a review 😄","closed","","Luolc","2017-03-09T14:01:19Z","2017-03-15T07:12:45Z"
"","3889","Issue #3869: Provide ability to skip CI executions base on commit files in CircleCI","#3869","closed","","Vladlis","2017-03-01T15:36:14Z","2017-03-09T19:01:03Z"
"","3863","infra: Issue #3862: fix for osx skipped builds","#3862","closed","","romani","2017-02-25T13:47:20Z","2017-02-25T14:59:15Z"
"","3867","Issue #3848: Remove unnecessary if-block to increase code coverage","#3848   Method can be defined only in class, interface, enum, annotation interface, annonymous class. For CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF tokens we create new ClassFrame with type CLASS_FRAME. For annonymous class we create AnonymousClassFrame which extends ClassFrame and also has the type CLASS_FRAME. Thus, when we collect declarations in ```collectDeclarations```, METHOD_DEF token in always related to the frame with type CLASS_FRAME. It means that there is no need in checking the frame type.  Reports: 1) Diff http://mezk.github.io/i3848-RiquireThisCheck/diff 2) Coverage  http://mezk.github.io/i3848-RiquireThisCheck/cobertura/","closed","","MEZk","2017-02-26T12:26:43Z","2017-03-04T08:32:37Z"
"","3882","Issue #3848: Increase code coverage of RequireThisCheck","#3848   1) Added UT for method references. 2) Removed unnecessary null check as [method call](https://github.com/MEZk/checkstyle/blob/242cfe3ac366cb270fdbdd1425c96dff812f4bd0/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java#L259) always refers to specific frame. And it means that we do not need to check whether [the frame](https://github.com/checkstyle/checkstyle/compare/master...MEZk:i3848-RequireThichCheck-coverage?expand=1#diff-110729384f4c9d098bd29eafab295062R803) is null. 3) Coverage is 100%.  Diff report: http://mezk.github.io/i3848-RiquireThisCheck/diff","closed","","MEZk","2017-02-27T20:36:12Z","2017-03-04T08:32:24Z"
"","3849","Issue #3843: Disallow import of interfaces from java.util.stream due to coverage problem","#3843   I did not use ForbitCertainImports as it cannot exclude test classes where usage of java.util.stream should be allowed.","closed","","MEZk","2017-02-21T21:56:21Z","2017-03-04T08:30:50Z"
"","3845","Issue #3843: Fix coverage problem for DesignForExtension","#3843   1) Replaced Stream.of(...) with Arrays.stream(...) to avoid problem with cobertura. 2) Removed null-check (``` if (methodImplOpenBrace != null)```) from ```hasEmptyImplementation``` as ```methodImplOpenBrace``` can be null only if the method is native or abstract, or its signature is declared in interface. All the cases mentioned are checked by ```canBeOverriden``` which is more verbose that is why I decided to rely on it. Since I change the check logic a bit I decided to regenerate diff reports with default configuration. 3) Added test input to increase branch coverage rate up to 100%.  Diff reports: http://mezk.github.io/i3843-coverage/diff Cobertura report: http://mezk.github.io/i3843-coverage/cobertura  @rnveach  Feel free to review and share your thoughts.  This PR blocks  https://github.com/checkstyle/checkstyle/pull/3842","closed","","MEZk","2017-02-19T08:37:42Z","2017-02-26T10:59:53Z"
"","3842","Issue #3830: Fix bug in DesignForExtension when order of annotations changes violation","#3830   > @rnveach   As shown in the debug output above, do you know why DesignForExtensionCheck.hasAnnotation has to examine the contents of the method? Won't this lead to false positives for this method? @romani  it should not review content of method. modificators and annotations is enough for decision.  Fixed.   ```findFirstTokenByPredicate``` was reimplemented. The idea was taken from DetailAST#findFirstToken .  There is no need in looping through all ignored annotations and invoking of  ```hasAnnotation``` inside ```hasIgnoredAnnotation```  each time, that is why I decided to check whether ignored annotations set contains any of method annotations.  Diff reports: http://mezk.github.io/i3830-DesignForExtension/diff  As you can see from the reports there are both false positives and false negatives in previous implementation of DesignForExtensionCheck. From my point of view, all of them are due to incorrect implementation of tree traversing algorithm in TokenUtils#findFirstTokenByPredicate.","closed","","MEZk","2017-02-18T15:15:29Z","2017-02-26T10:59:59Z"
"","3801","infra: fix cli arg names for launch.groovy","#3801 Should be merged after https://github.com/checkstyle/contribution/pull/170","closed","","MEZk","2017-02-04T20:01:45Z","2017-02-05T19:03:29Z"
"","3795","infra: fix launch.groovy script parameters","#3795","closed","","MEZk","2017-02-03T21:31:32Z","2017-02-03T21:44:50Z"
"","3782","infra: Update CIs configs to use cli options names of launch.groovy","#3782 Must be merged only after https://github.com/checkstyle/contribution/pull/164","closed","","MEZk","2017-01-31T19:13:25Z","2017-02-03T21:03:46Z"
"","3783","Issue #3776: josm.openstreetmap.de project was added to no-error","#3776","closed","","romani","2017-01-31T21:36:16Z","2017-02-28T03:24:38Z"
"","3747","Issue #3741: Fix false negative when import is from java.lang package","#3741  Diff reports: http://mezk.github.io/i3741-UnusedImports/diff/index.html","closed","","MEZk","2017-01-22T09:08:14Z","2017-01-22T23:23:22Z"
"","3774","Issue #3702: Allow single character names in local variables, method and catch-blocks parameters names in accordance with Google Style Guide","#3702","closed","","MEZk","2017-01-28T21:35:14Z","2017-02-09T22:03:21Z"
"","3694","Issue #3683: activation of chmod on Travis""","#3683","closed","","romani","2017-01-05T21:13:59Z","2017-01-05T22:04:20Z"
"","3692","I3683 travis problem","#3683","closed","","romani","2017-01-05T18:09:01Z","2017-01-05T21:13:31Z"
"","3679","I3678 right curly was misconfigured for google_checks.xml","#3678   InputOperatorWrapAssign.java was removed as it was used only in wrong IT method that was also removed.","closed","","romani","2016-12-30T01:12:13Z","2016-12-30T16:11:30Z"
"","3676","infra: Use launch.groovy for testing (Circle CI)","#3676  @romani  I was not able to add GROOVY_HOME into PATH variable, so I had to use an absolute path to Groovy bin directory and invoke Groovy from there.  I used the following guide to install and cache Groovy https://circleci.com/docs/installing-custom-software/  I created the question at Circle CI forum but did not get useful answer https://discuss.circleci.com/t/how-to-install-groovy/8511  Should be merged after https://github.com/checkstyle/contribution/pull/146","closed","","MEZk","2016-12-25T21:59:39Z","2016-12-27T18:09:59Z"
"","3722","Issue #3675: Replace Scope with AccessModifier in ParameterNameCheck to avoid wrong scopes comparison","#3675   1) Fixed problem with scope comparison. 'Scope' is incorrect term for this check.  2) Added new enum 'AccessModifiers'. I have a concern: should the new enum be a part of Checkstyle's API now? 3) Properties 'scope' and 'excludeScope' became 'accessModifiers' and 'excludeAccessModifiers'. I don't think that this check needs 'excludeAccessModifiers' option anymore since now the check validates only methods which access modifiers are specified in 'accessModifiers'. 4) Added new util method 'getAccessModifierFromModifiersToken'. I'm not sure whether it should be in CheckUtils class or in AccessModifiers enum. 5) Fixed UTs and ITs. Added new one for 'getAccessModifierFromModifiersToken'. 5) Fixed UTs which validate xml-configs and xdoc. 6) Updated javadoc and xdoc.  7) Fixed ParameterName to avoid unclear logic.  @romani, @rnveach  Please check and let me know what do you think about 2,3 and 4.","closed","","MEZk","2017-01-12T20:21:57Z","2017-01-26T16:47:46Z"
"","3682","Issue #3655: Fix NPE in NeedBraces on single line default stmt","#3655","closed","","romani","2016-12-31T00:53:55Z","2016-12-31T01:36:01Z"
"","3609","infra: Use launch.groovy for 'NoException' testing (Travis)","#3609","closed","","MEZk","2016-12-04T21:09:50Z","2016-12-04T22:38:43Z"
"","3608","infra: Use launch.groovy for 'NoException' testing (Wercker)","#3608  Switched from launch.sh to launch.groovy.","closed","","MEZk","2016-12-04T18:30:15Z","2016-12-04T18:46:55Z"
"","3508","Issue #3507: Link to issue which can change DetailNode tree","#3507","closed","","baratali","2016-10-20T13:17:13Z","2016-10-20T22:34:55Z"
"","3499","config: exclude JUnit4TestShouldUseTestAnnotation from pmd.xml","#3499  JUnit4TestShouldUseTestAnnotation is suppressed as it is a PMD bug: pmd treats test method from Predicate interface as UT and rises violation.  Since we use lambda instead of Predicate in PackageObjectFactory, we do not need to suppress JUnit4TestShouldUseTestAnnotation.","closed","","MEZk","2016-10-06T12:32:28Z","2016-10-06T13:01:37Z"
"","3470","Issue #3466: Clear cache in DetailAST before changing its structure","#3466","closed","","MEZk","2016-09-27T19:28:12Z","2016-09-30T22:13:45Z"
"","3461","Issue #3433:  Cut down on Checkstyle's dependencies on Guava (part 4, collections)","#3433  I tried to get rid of the following dependencies: 1. com.google.common.collect.ImmutableList 2. com.google.common.collect.ImmutableSortedSet 3. com.google.common.collect.ImmutableSet 4. com.google.common.collect.ImmutableMap ## **PROBLEMS**  **ImmutableCollection**  API which uses ImmutableCollection: 1) com.puppycrawl.tools.checkstyle.DefaultContext 2) com.puppycrawl.tools.checkstyle.api.AutomaticBean 3) com.puppycrawl.tools.checkstyle.api.Context  **ImmutableList**  API which uses ImmutableList: 1) com.puppycrawl.tools.checkstyle.DefaultContext  **ImmutableMap**  API which uses ImmutableMap 1) com.puppycrawl.tools.checkstyle.DefaultConfiguration 2) com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter 3) com.puppycrawl.tools.checkstyle.api.Configuration 4)com.puppycrawl.tools.checkstyle.api.FileContents  Uses ImmutableMap by accessing API 1) com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck 2) com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck 3) com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter 4) com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter 5) com.puppycrawl.tools.checkstyle.ConfigurationLoaderTest 6) com.google.checkstyle.test.chapter5naming.rule528typevariablenames.ClassTypeParameterNameTest 7) com.google.checkstyle.test.chapter5naming.rule528typevariablenames.InterfaceTypeParameterNameTest 8) com.google.checkstyle.test.chapter5naming.rule528typevariablenames.MethodTypeParameterNameTest 9) com.google.checkstyle.test.chapter5naming.rule526parameternames.ParameterNameTest 10) com.google.checkstyle.test.chapter5naming.rule525nonconstantfieldnames.MemberNameTest 11) com.google.checkstyle.test.chapter5naming.rule523methodnames.MethodNameTest 12) com.google.checkstyle.test.chapter5naming.rule522typenames.TypeNameTest 13) com.google.checkstyle.test.chapter5naming.rule521packagenames.PackageNameTest 14) com.google.checkstyle.test.chapter5naming.rule51identifiernames.CatchParameterNameTest 15) com.google.checkstyle.test.chapter4formatting.rule462horizontalwhitespace.GenericWhitespaceTest 16) com.google.checkstyle.test.chapter4formatting.rule462horizontalwhitespace.WhitespaceAroundTest  Uses ImmutableMap.Builder: 1) com.puppycrawl.tools.checkstyle.utils.TokenUtils uses ImmutableMap builder. If we replace it with unmodifiable map it will not allow to change the content of the map. 2) com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo 3) com.puppycrawl.tools.checkstyle.utils.TokenUtils  **ImmutableSet**  Uses ImmutableSet for testing 1) com.puppycrawl.tools.checkstyle.checks.design.InputImmutable 2) com.puppycrawl.tools.checkstyle.checks.design.InputVisibilityModifierGenerics  Uses Guava's classes which return ImmutableSet 1) com.puppycrawl.tools.checkstyle.internal.CheckUtil  **Creates immutable copy** (replaced with Java native approach): 1) com.puppycrawl.tools.checkstyle.checks.header.AbstractHeaderCheck 2) com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTags 3) com.puppycrawl.tools.checkstyle.gui.CodeSelector 4) com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck 5) com.puppycrawl.tools.checkstyle.internal.XDocsPagesTest  @romani  Please, review the changes very carefully to avoid issues in future. I might miss something.","closed","","MEZk","2016-09-23T10:11:23Z","2016-09-27T13:28:58Z"
"","3446","Issue #3433: Cut down on Checkstyle's dependencies on Guava (part 1)","#3433  Got rid of the following dependencies and prohibited their ussage in code: 1) com.google.collect.Iterables 2) com.google.common.base.String 3) com.google.common.base.Function 4) com.google.common.base.Supplier 5) com.google.common.base.Charsets 6) com.google.common.base.MoreObjects 7) com.google.common.base.Equivalence 8) com.google.common.base.Preconditions 9) com.google.common.base.Optional 10) com.google.common.base.Predicate 11) com.google.common.io.Files (partially) 12) com.google.common.io.CharSource 13) com.google.common.primitives.Ints 14) com.google.common.annotations.Beta  I'll try to reduce the number of usages of the following dependencies in part 2 as it will need more investigation: 1) com.google.common.io.Closables can be replaced with try-with-resources. However, it will be difficult to cover 8 branches with UTs (Cobertura will complain that 8 branches should be covered). 2) com.google.common.io.Flushables. If we get rid of the dependency it will require additional UTs and decrease readibility of the code as we will need to use additional try-catch block. 3) com.google.common.reflect.ClassPath. If we get rid of the dependency it will decrease the readibility. 4) com.google.common.base.CaseFormat and com.google.common.base.CharMatcher are good for their purposes and reduce the amount of code. 5) com.google.common.collect.\* should be discussed in seperate PR as it has to many usages in Checkstyle's code.","closed","","MEZk","2016-09-18T12:41:51Z","2016-09-18T23:34:46Z"
"","3454","Issue #3433: Cut down on Checkstyle's dependencies on Guava (part 2)","#3433  Got rid of and prohibited usage of: 1) com.google.common.collect.Queues 2) com.google.common.collect.Sets 3) com.google.common.collect.Lists  4) com.google.common.collect.Maps (parttially) 5) com.google.common.collect.Iterators  I also restricted usage of  com.google.common.collect.\* to certain packages.  Problems: 1) `com.google.common.collect.HashMultimap, com.google.common.collect.HashMultiset, com.google.common.collect.SetMultimap, com.google.common.collect.Multimap, com.google.common.collect.Multiset, com.google.common.collect.MapDifference` do not have easy to use analogs in Java.  2) `com.google.common.collect.ImmutableCollection and com.google.common.collect.ImmutableMap` are part of Checkstyle's API (See com.puppycrawl.tools.checkstyle.api.Context and com.puppycrawl.tools.checkstyle.api.Configuration).  3) `com.google.common.annotations.VisibleForTesting, com.google.common.annotations.GwtCompatible, com.google.common.annotations.GwtIncompatible` are required for UTs.  4)`com.google.common.collect.ImmutableList , com.google.common.collect.ImmutableSet` have copyOf method which allows to create immutable copy of collection. If we get rid of ImmutableList and ImmutableSet it will require to use Collections.copy and then create unmodifiable list or set view based on mutable copy. I don't think it is reasonable.  5) If we get rid of `com.google.common.collect.ImmutableSortedSet` the code will become too big. For example:  ``` java private static final Set SINGLE_TAGS = ImmutableSortedSet.of(         ""br"", ""li"", ""dt"", ""dd"", ""hr"", ""img"", ""p"", ""td"", ""tr"", ""th""); ```  will become  ``` java private static final Set SINGLE_TAGS = Collections.unmodifiableSortedSet(Stream.of(     ""br"", ""li"", ""dt"", ""dd"", ""hr"", ""img"", ""p"", ""td"", ""tr"", ""th"")     .collect(Collectors.toCollection(TreeSet::new))); ```  6) `com.google.common.collect.Maps` has 'difference' method which is a simple way to get the difference between two maps. It will decrease readibility if we try to get rid of the dependency.  I think that is all we can do now.","closed","","MEZk","2016-09-20T14:49:14Z","2016-09-21T02:52:06Z"
"","3458","Issue #3433: Cut down on Checkstyle's dependencies on Guava (part 3)","#3433  Got rid of and prohibited usage of: 1) com.google.common.annotations.GwtCompatible 2) com.google.common.annotations.GwtInCompatible 3) com.google.common.collect.TreeTraverser 4) com.google.common.io.Files  Immutable collections from Guava cannot be replaced with Java's Collections.unmodifiable... since unmodifiable collections provide only read-only view of modifiable collections. They are not thread-safe!  The list of the remaining dependencies on Guava: [checkstyle-dependencies](https://github.com/checkstyle/checkstyle/files/484682/checkstyle-dependencies.txt)","closed","","MEZk","2016-09-21T10:08:40Z","2016-09-21T22:35:17Z"
"","3412","Pull #3412: Fix ForbidCertainImports config","#3412  1) Usage of java.util.Stack and java.util.Vector was disallowed for the whole project. 2) Usage of classes from 'com.puppycrawl.tools.checkstyle.checks.*' package was disallowed for 'com.puppycrawl.tools.checkstyle.api' and 'com.puppycrawl.tools.checkstyle.utils' packages.  New violations appeared due to the second restriction. What should we do with them?  ``` main/java/com/puppycrawl/tools/checkstyle/api/DetailNode.java This import should not match '.+\.checks\..+' pattern, it is forbidden in com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl.   22  main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java This import should not match '.+\.checks\..+' pattern, it is forbidden in com.puppycrawl.tools.checkstyle.checks.javadoc.InvalidJavadocTag. 34 This import should not match '.+\.checks\..+' pattern, it is forbidden in com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTag.    35 This import should not match '.+\.checks\..+' pattern, it is forbidden in com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo.    36 This import should not match '.+\.checks\..+' pattern, it is forbidden in com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTags.   37  test/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtilsTest.java This import should not match '.+\.checks\..+' pattern, it is forbidden in com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl.   36 This import should not match '.+\.checks\..+' pattern, it is forbidden in com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTag.    37 This import should not match '.+\.checks\..+' pattern, it is forbidden in com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo.    38 This import should not match '.+\.checks\..+' pattern, it is forbidden in com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTags.   39 ```  Violation messages have incorrect structure.  `This import should not match '.+\.checks\..+' pattern, it is forbidden in com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl.  36` Should be: ` This import should not match '.+\.checks\..+' pattern, it is forbidden in test/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtilsTest.java. ` or ` Import 'com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTags' should not match '.+\.checks\..+' pattern, it is forbidden in test/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtilsTest.java. `","closed","miscellaneous,","MEZk","2016-08-11T21:09:45Z","2016-09-20T17:32:57Z"
"","3406","Pull 3406: Replace Guava's Joiner with Java 8 native approach","#3406  One more step to cut down on Checkstyle's dependencies on third-party libraries. The first one was made in https://github.com/checkstyle/checkstyle/pull/3293  Guava's Joiner was replaced with Java 8 native approach ([String#join](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#join-java.lang.CharSequence-java.lang.Iterable-)).  I do not replace usage of Joiner in [PackageObjectFactory](https://github.com/MEZk/checkstyle/blob/6b82f01378346226e0c999370c0e614cc6af878b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#L143) as it allows to skip nulls. If we use Java 8 approach in order to skip nulls it will require to do the following: http://www.leveluplunch.com/java/examples/stringjoiner-example/#join-list-skipping-null and as far as I know (http://blog.codefx.org/java/stream-performance/) streams performance leaves a lot to be desired.  @romani  Are you OK with such changes?","closed","miscellaneous,","MEZk","2016-08-08T12:16:23Z","2016-09-11T19:06:29Z"
"","3385","minor: fix hardcoded messages in UTs","#3385  I reviewed all Checkstyle UTs and found 15 hardcoded messages. One more proof that Maven does not switch locale correctly before execution of Checkstyle's UTs. Similar problems must be detected after fix for (https://github.com/checkstyle/checkstyle/issues/3377).","closed","","MEZk","2016-07-31T15:55:50Z","2016-08-04T12:51:21Z"
"","3371","config: Fix releasenotes generation script","#3371","closed","","MEZk","2016-07-26T07:37:37Z","2016-07-26T08:11:43Z"
"","3361","minor: fix hardcoded messages in UTs and spelling mistakes in FinalLocalVariable","#3361  Few minor preparations for https://github.com/checkstyle/checkstyle/issues/3074.","closed","","MEZk","2016-07-20T22:16:03Z","2016-07-23T04:49:20Z"
"","3368","Issue #3317: Fix build failure on German machine","#3317","closed","","MEZk","2016-07-25T15:19:45Z","2016-07-26T04:07:33Z"
"","3293","Cut down on Checkstyle's dependencies on Guava","#3293  Since now we use Java 1.8, it worth cutting down on Checkstyle's dependencies on Guava library:  1) Guava's Optional replaced with Java's native. 2) Guava's Predicate and Iterables should be replaced with Java's Predicate and streams. We cannot do this until we resolve or find workaround for Cobertura report generation problem on Java 1.8. (https://github.com/checkstyle/checkstyle/pull/3269#issuecomment-226986404, https://github.com/mojohaus/cobertura-maven-plugin/issues/21) 3) ...  P.S. Teamcity's violations are not correct as java.util.Optional is not an unused import.","closed","miscellaneous,","MEZk","2016-06-20T09:30:42Z","2016-09-07T00:17:15Z"
"","3259","Avoid catching of InvalidPathException and AccessDeniedException in PropertyCacheFile#persist","#3259  There is no need in catching of InvalidPathException since it extends RuntimeException and we just wrap it in IllegalStateException which extends RuntimeException too without additional information.","closed","miscellaneous,","MEZk","2016-06-08T17:14:55Z","2016-06-17T20:38:42Z"
"","3289","Issue #3229: pmd, javadoc plugins switched to jdk 1.8","#3229","closed","","romani","2016-06-18T21:00:34Z","2016-06-19T00:26:45Z"
"","3224","Issue #3219: CLI Javadoc tree-printer can print parse errors","#3219  How it works now. Input:  ```  ```  Output:  ``` java -jar target\checkstyle-6.19-SNAPSHOT-all.jar -j myjavadoc.txt Exception in thread ""main"" java.lang.IllegalArgumentException: [ERROR:0] Javadoc comment at column 1 has parse error. Missed HTML close tag 'audio'. Sometimes it means that close tag missed for one of previous tags.         at com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinter.parseJavadocAsDetailNode(DetailNodeTreeStringPrinter.java:68)         at com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinter.parseJavadocAsDetailNode(DetailNodeTreeStringPrinter.java:80)         at com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinter.parseFile(DetailNodeTreeStringPrinter.java:172)         at com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinter.printFileAst(DetailNodeTreeStringPrinter.java:56)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:298)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:161) ```","closed","","baratali","2016-05-27T23:23:07Z","2016-05-28T13:02:02Z"
"","3654","Issue #3184: Make hardcoded map with all module names that in checkstyle","#3184","closed","","Vladlis","2016-12-13T21:54:07Z","2016-12-20T21:44:47Z"
"","3284","Issue #3177: Remove validation of rw access for output file in Main#validateCli","#3177  Removed validation of rw access for output file in Main#validateCli and as a result two UTs:  ``` MainTest.testExistingFilePlainOutputToFileWithoutReadAndRwPermissions MainTest.testExistingTargetFilePlainOutputToFileWithoutRwPermissions ```  were also deleted.  After merge of https://github.com/checkstyle/checkstyle/pull/3259 and this PR the issue #3177 will be resolved.","closed","","MEZk","2016-06-17T17:01:15Z","2016-06-17T17:48:14Z"
"","3221","Issue #3177: Fix broken UTs (Docker container: Ubuntu 14.04, Java 8, Maven 3)","#3177  Fixed 2 of 6 broken UTs.  The following UTs remains broken at Docker's container ([profile](https://github.com/carlossg/docker-maven/blob/40cbcd2edc2719c64062af39baac6ae38d0becf9/jdk-8/Dockerfile)):  ``` Failed tests:    MainTest.testExistingFilePlainOutputToFileWithoutReadAndRwPermissions System.exit has not been called.   MainTest.testExistingTargetFilePlainOutputToFileWithoutRwPermissions System.exit has not been called.   PropertyCacheFileTest.testNonAccessibleDirectory:189 AccessDeniedException is expected since directory is readonly.   PropertyCacheFileTest.testNonAccessibleFile:73 FileNotFoundException is expected, since access to the file was denied! ```  See https://github.com/checkstyle/checkstyle/issues/3177#issuecomment-221933462","closed","","MEZk","2016-05-26T17:18:12Z","2016-06-03T12:44:35Z"
"","3292","Issue #3159: Reduce the number of tasks performed by Travis CI","#3159  @romani  1) All Travis CI's jobs were copied to Wercker CI except for generation of release notes and testing of PR format. nemo.sonarqube.com phase was commented out since I do not have permissions. 2) Cache was set up for Maven to avoid reloading of dependencies during execution. 3) I have to add `rm -rf contribution` for NoExceptionTests to avoid the following prblem: ![wercker_issue1](https://cloud.githubusercontent.com/assets/7242568/16176860/9790afe6-3623-11e6-8165-0d06c80e30a9.png) 4) We have to decide which phases will migrate to Wercker CI from Travis CI. 5) We have to design worckflow for Checkstyle at Wercker CI. See http://devcenter.wercker.com/docs/workflows/index.html 6) We have to create pipelines in order to execute jobs in parallel and use different containers (aka boxes) to test on different OS. The profiles can be found at https://hub.docker.com/ . Wercker CI offers free account which allows to execute two pipelines in parallel at once (http://wercker.com/pricing/). Each pipeline should set up mvn cache to the same folder.  As I see it: ![screenshot at 2016-06-19 13 30 44](https://cloud.githubusercontent.com/assets/7242568/16176862/ac98182a-3623-11e6-997a-23e6097c3c72.png)  7) Test, compile phases should be copied to Wercker CI for sure as we faced probles with Docker (https://github.com/checkstyle/checkstyle/issues/3177).  8) Lets create projects-for-wercker.properties. Apache Struts should definitely be there.  Wercker CI's build for my local checkstyle repo with only one pipeline (all steps are executed successively): https://app.wercker.com/#MEZk/checkstyle/build/57666e3d7cab8d010000f304","closed","","MEZk","2016-06-19T10:43:44Z","2016-06-21T13:19:56Z"
"","3299","Issue #3159: Reduce the number of tasks performed by Travis CI","#3159  1) Moved ""NoErrorTests - xxx "" from Travis CI to Wercker CI. 2) Removed ""test locale"" and ""java 8 compile (oraclejdk8)"" from Travis CI as they are already performed by Wercker CI. 3) Added ""NoExceptiontest - Apache Struts"" step fro Wercker CI. 4) Removed releasenotes generation step fro Wercker CI (https://github.com/checkstyle/checkstyle/pull/3292#issuecomment-227435298).  The Wercker CI should be relaunched and the PR should be merged after https://github.com/checkstyle/contribution/pull/95","closed","","MEZk","2016-06-23T11:04:58Z","2016-06-23T17:38:47Z"
"","3154","Issue #3153: IllegalTokenTextCheck does not work with COMMENT_CONTENT…","#3153  … token","closed","","romani","2016-05-03T13:20:07Z","2016-05-08T12:36:07Z"
"","3247","Issue #3142: Add proper support for generics in VisibilityModifierCheck","#3142  @romani  Added support of generic types for the Check. If allowPublicImmutableFields is set to true, the check will also check whether generic type parameters are immutable. If at least one parameter is mutable the check will rise violation. The changes work for both canonical and ordinary class names of type parameters.  Regression reports were generated against the following projects: 1) openjdk8 2) pmd 3) lombok 4) spring-framework 5) java-design-patterns 6) MaterialDesignLibrary 7) Hbase 8) Orekit 9) apache-ant 10) apache-jsecurity 11) android-launcher 13) infinispan 14) protonpack 15) jOOL 16) RxJava 17) checkstyle-with-excludes 18) sevntu-checkstyle-with-excludes 19) findbugs-with-excldues 20) hibernate-orm-with-excludes 21) guava-mvnstyle  with the following configuration:  ``` xml  `                                                            ```  The reports showed no differences between 'before' and 'after' results. Please, let me know, if we need additional regression tests.  @KTannenberg  From issue report:  > It will be nice to have TextArea with automatical word-wrapping instead of TextField in check's configuration window  I think it should be posted at Checkstyle-Eclipse/Idea plugin's issue tracker.","closed","","MEZk","2016-06-05T19:21:07Z","2016-06-10T17:37:05Z"
"","3140","Issue #3126: Fix CommentsIndentation false-positive in singleline comment after a block comment","#3126  Report: http://vladlis.github.io/reports/3126/index.html","closed","","Vladlis","2016-04-27T20:06:29Z","2016-05-30T13:09:58Z"
"","3269","Issue #3117: Add ability to differentiate annotation placement in foreach, for loops, parameter definition","#3117  @romani  Fixed for foreach, for loops, catch, method, lambdas parameters. I'm not able to generate regression reports against Apache-Apex, as I have got the following exceptions (before and after changes):  ``` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-site-plugin:3.3:site (default-site) on project sample: Execution default-site of goal org.apache.maven.plugins:maven-site-plugin:3.3:site failed. NullPointerException -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-site-plugin:3.3:site (default-site) on project sample: Execution default-site of goal org.apache.maven.plugins:maven-site-plugin:3.3:site failed.     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default-site of goal org.apache.maven.plugins:maven-site-plugin:3.3:site failed.     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:145)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)     ... 20 more Caused by: java.lang.NullPointerException     at org.apache.maven.jxr.pacman.JavaFileImpl.parse(JavaFileImpl.java:108)     at org.apache.maven.jxr.pacman.JavaFileImpl.(JavaFileImpl.java:64)     at org.apache.maven.jxr.pacman.FileManager.getFile(FileManager.java:68)     at org.apache.maven.jxr.pacman.PackageManager.parse(PackageManager.java:123)     at org.apache.maven.jxr.pacman.PackageManager.process(PackageManager.java:161)     at org.apache.maven.jxr.JXR.xref(JXR.java:262)     at org.apache.maven.plugin.jxr.AbstractJxrReport.createXref(AbstractJxrReport.java:279)     at org.apache.maven.plugin.jxr.AbstractJxrReport.executeReport(AbstractJxrReport.java:473)     at org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:255)     at org.apache.maven.plugins.site.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:219)     at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.renderModule(DefaultSiteRenderer.java:319)     at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:135)     at org.apache.maven.plugins.site.SiteMojo.renderLocale(SiteMojo.java:175)     at org.apache.maven.plugins.site.SiteMojo.execute(SiteMojo.java:138)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)     ... 21 more [ERROR]  [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException ```  However,  I generated regression reports against the following projects: 1) pmd 2) lombok 3) spring-framework 4) java-design-patterns 5) MaterialDesignLibrary 6) Hbase 7) apache-ant 8) apache-jsecurity 9) android-launcher 10) infinispan 11) protonpack 12) jOOL 13) RxJava 14) checkstyle-with-excludes 15) sevntu-checkstyle-with-excludes 16) findbugs-with-excldues 17) hibernate-orm-with-excludes 18) guava-mvnstyle  with the following configuration:  ``` xml                                                                                                    ```  Take into account that I had to exclude PARAMETER_DEF from tokens as it produces to much noise. Reports before and after are equal which is quite strange (I can't believe that all the projects do not use annotations in foreach / for loops, for instance Spring, Hibernate).  Nevertheless, I generated report against Guava and added PARAMETER_DEF into tokens set. As you can see from the report there is a huge regression: annotations for parameter types were removed from report after changes. http://mezk.github.io/i3117-AnnotationLocationCheck/guava_diff/index.html","closed","","MEZk","2016-06-10T23:11:30Z","2016-06-19T17:00:11Z"
"","3337","Issue #3101: Add new 'useContainerOrderingForStatic' option for ImportOrderCheck","#3101  **Reports before and after**  Config before:  ``` xml                                  ```  Config after (useContainerOrderingForStatic = false):  ``` xml                                                        ```  Reports are equal.  Config after (useContainerOrderingForStatic = true):   ``` xml                                                        ```  Diff report: http://mezk.github.io/i3101-ImportOrderCheck/index.html  Projects: openjdk8, pmd, lombok-ast, spring-framework, elasticsearch, java-design-patterns, MaterialDesignLibrary, Hbase, Orekit, apache-ant, apache-jsecurity, android-launcher, checkstyle-with-excludes, sevntu-checkstyle-with-exclude, findbugs-with-excldues, hibernate-orm-with-excludes, guava-mvnstyle, apache-struts.","closed","","MEZk","2016-07-03T21:47:38Z","2016-07-06T17:16:55Z"
"","3267","Issue #3090: Fix wrong enforcement of same brace policy for LITERAL_DO in RightCurlyCheck","#3090  1) The problem was fixed. 2) Added new UT. 3) Added new IT.  Regression reports were generated against the following projects: 1) pmd 2) lombok 3) spring-framework 4) java-design-patterns 5) MaterialDesignLibrary 6) Hbase 7) apache-ant 8) apache-jsecurity 9) android-launcher 10) infinispan 11) protonpack 12) jOOL 13) RxJava 14) checkstyle-with-excludes 15) sevntu-checkstyle-with-excludes 16) findbugs-with-excldues 17) hibernate-orm-with-excludes 18) guava-mvnstyle  Configuration:  ``` xml                                                                           ```  I had to build Checkstyle artifact with changes without changing of violation message in order to generate diff report properly without noise because of new message format.  Diff reports: http://mezk.github.io/i3090-RightCurlyCheck/diff/index.html Diff reports looks ok to me. I checked all 270 differences.","closed","","MEZk","2016-06-10T21:07:59Z","2016-06-12T13:28:04Z"
"","3088","Issue #3087: first step","#3087","closed","","romani","2016-04-09T14:43:44Z","2016-04-22T13:05:10Z"
"","3366","Issue #3074: Fix FinalLocalVariable false positive when variable is assigned inside and outside switch-block","#3074  @romani  1) Fixed #3074. 2) Fixed #3186 too. UT 'testMultipleAndNestedConditions' was added to cover test cases taken from the issue (#3186). 3) Reports: http://mezk.github.io/i3074-FinalLocalVariable/index.html  Projects: pmd, lombok-ast, openjdk8, spring-framework, elasticsearch, java-design-patterns, MaterialDesignLibrary, Hbase, Orekit, apache-ant, apache-jsecurity, android-launcher, infinispan, protonpack, jOOL, RxJava, checkstyle-with-excludes, sevntu-checkstyle-with-excludes, findbugs, hibernate-orm-with-excludes, guava-mvnstyle, apache-struts.  Configuration:  ``` xml                                              ```  A decided to reimplement check's algorithm a bit. It is no use gathering additional information on final variable candidates such as 'assignOutsideConditionalBlock', 'assignInIfBlock', 'assignInIfBlockWhichIsInsideCaseBlock'. All we need is to follow the rule that is used by compiler and determine variables that are already assigned. Of course there are special treatments of some blocks (else, switch).  As you can see from the report there are 112 differences. The analysis was really hard for me and I decided to simplify and add them all as test cases (structure of blocks is saved), then check them in compile time (except for duplicates). I noticed that they are false positives.  P.S Should be merged after https://github.com/checkstyle/checkstyle/pull/3361.","closed","","MEZk","2016-07-22T18:01:01Z","2016-07-23T05:09:30Z"
"","3058","Issue #3057: Fund raising pages for checkstyle","#3057","closed","","romani","2016-03-23T18:40:35Z","2016-03-23T20:53:11Z"
"","3078","Print full tree (java + comments + javadoc)","#3040  New option: `-J` or `--treeWithJavadoc`  Example:  ``` java /**@since 1.3*/ class myclass{} ```  ``` java -jar target\checkstyle-6.18-SNAPSHOT-all.jar -J myclass.java ```  ``` CLASS_DEF -> CLASS_DEF [2:0] |--MODIFIERS -> MODIFIERS [2:0] |--JAVADOC -> @since 1.3 [1:0] |   |--JAVADOC_TAG -> @since 1.3 [1:0] |   |   |--SINCE_LITERAL -> @since [1:0] |   |   |--WS ->   [1:6] |   |   `--DESCRIPTION -> 1.3 [1:7] |   |       `--TEXT -> 1.3 [1:7] |   |           |--CHAR -> 1 [1:7] |   |           |--CHAR -> . [1:8] |   |           `--CHAR -> 3 [1:9] |   `--EOF ->  [1:10] |--LITERAL_CLASS -> class [2:0] |--IDENT -> myclass [2:6] `--OBJBLOCK -> OBJBLOCK [2:13]     |--LCURLY -> { [2:13]     `--RCURLY -> } [2:14] ```","closed","","baratali","2016-04-05T11:15:33Z","2016-04-10T21:08:03Z"
"","3030","Issue #3025: try structure is not parsable when only name is used","#3025","closed","","romani","2016-03-11T16:29:47Z","2016-03-12T17:22:13Z"
"","3043","Issue #3022: Moved file-started audit event after file extension check","#3022  Added extra unit test to prevent future regression. The test makes sure that file-started & file-finished events are fired only for files that are not filtered out","closed","","idarmans","2016-03-18T17:00:33Z","2016-03-20T14:45:25Z"
"","3051","Issue #3015: NPE in CheckUtil#getCheckMessage","#3015","closed","","Vladlis","2016-03-21T20:36:57Z","2016-03-23T12:48:33Z"
"","3067","Issue #3006: Fix false positive in FinalLocalVariable when variable is assigned multiple times","#3006  Reports (Checkstyle, Sevntu-checkstyle, Guava, FindBugs, PMD, Lombook, Spring): http://mezk.github.io/FinalLocalVariable/index.html  All differences were modified to remove dependencies and included in UTs.  I'll squash commits if it is necessary. But 5 different problems were fixed in scope of the #3006 .","closed","","MEZk","2016-03-27T08:05:52Z","2016-03-29T22:48:07Z"
"","3071","Issue #3005: Fix allowByTailComment option in AvoidEscapedUnicodeCharacters","#3005  Method `hasTrailComment()` had a strange logic which relied on the presence of a `SEMI` in the end of line, thus had a lot of false-positives and even an NPE. So it needed to be reimplemented.  Case, which caused NPE - https://github.com/checkstyle/checkstyle/compare/master...Vladlis:i3005-unicode?expand=1#diff-6312dd3750155aba02013bf7d3de75feR92","closed","","Vladlis","2016-03-29T07:35:17Z","2016-03-29T23:23:33Z"
"","3587","Issue #2992: ThreadLocal usage in single-threaded checkstyle","#2992","closed","","Vladlis","2016-11-27T13:46:11Z","2016-11-28T22:16:59Z"
"","3021","Issue #2971: VisibilityModifier allowPublicFinalFields","#2971  Loosens the restriction for `allowPublicImmutableFields` that the enclosing class must be final.  For `allowPublicFinalFields`, the field must be final and immutable.  The new property also defaults to true.","closed","incomplete,","som-snytt","2016-03-09T01:50:36Z","2016-05-22T14:18:59Z"
"","3207","Issue #2971: Add allowPublicFinalFields option for VisibilityModifier","#2971  @romani   > 1) please fix CIs > 2) please update xdoc files documentation, with config+code examples for new option. As options are very similar to each other, we need to help user to see a difference by examples. > 3) Please generate html report with your option on opensource projects to make sure there are no exceptions and reported violations as ok. > Please use this tool - https://github.com/checkstyle/contribution/tree/master/checkstyle-tester , please read README file. > 4) Please generate diff-report of execution without your option and with you options to make sure there are no regression. > Please use this tool - https://github.com/checkstyle/contribution/tree/master/patch-diff-report-tool > 5) To resolve Travis failures please rebase code over latest master, it is already resolved.  1) Fixed, I had to change confdig_design.xml a bit to satisfy UTs. 2) Done. 3) Reports (allowPublicFinalFields = true, allowPublicImmutableFields = false):  [checkstyle + sevntu-checkstyle](http://mezk.github.io/i2971-VisibilityModifier/after/checkstyle/checkstyle.html) [guava](http://mezk.github.io/i2971-VisibilityModifier/after/guava/checkstyle.html) [pmd](http://mezk.github.io/i2971-VisibilityModifier/after/pmd/checkstyle.html)  Reports look good to me.  There are to much noise (over 2000+ violations) on such projects as Spring, Hibernate, Orekit, OpenJDK 8, findbugs. For example: [findbugs](http://mezk.github.io/i2971-VisibilityModifier/after/findbugs/checkstyle.html)  4)  Test projects: checkstyle, sevntu-checkstyle, hibernate, guava, spring, openjdk8, findbugs, pmd, lombok, elasticsearch, java-design-patterns, MaterialDesignLibrary, Orekit, apache-ant, android-launcher, apache-jsecurity, Hbase, infinispan.  4.1) before allowPublicImmutableFields = false  after allowPublicImmutableFields = false allowPublicFinalFields = false  diff reports are equal  4.2) before allowPublicImmutableFields = true  after allowPublicImmutableFields = true allowPublicFinalFields = false  diff reports are equal  5) Rebased over latest master.  @som-snytt  Please, let me know, if you want to include your name into authors section of VisibilityModifierCheck's javadoc.","closed","","MEZk","2016-05-22T14:15:17Z","2016-06-03T12:41:10Z"
"","3068","Issue #2969: Add the ability to validate language codes by TranslationCheck","#2969","closed","","MEZk","2016-03-27T08:31:08Z","2016-03-31T18:08:33Z"
"","3149","Issue #2966: xercesImpl is removed as it was removed from Doxia 1.7 a…","#2966  at https://issues.apache.org/jira/browse/DOXIA-526","closed","","romani","2016-05-01T00:51:36Z","2016-05-01T02:31:47Z"
"","3148","Issue #2966: Upgrade maven-site-plugin to 3.5.1","#2966","closed","","Vladlis","2016-04-30T14:07:52Z","2016-05-01T00:30:39Z"
"","3063","Issue #2944: add EmptyLineSeparator option to check empty lines inside methods","#2944  Diff report over guava, checkstyle, sevntu-checkstyle, pmd, spring-framework, hibernate-orm and Orekit looks OK - http://vladlis.github.io/reports/2944/","closed","","Vladlis","2016-03-24T20:21:32Z","2016-03-29T22:26:35Z"
"","3436","Issue #2874: Fix suppression line for CyclomaticComplexityCheck","#2874  Fixed https://travis-ci.org/checkstyle/checkstyle/jobs/158560120#L317. The problem appeared after https://github.com/checkstyle/checkstyle/commit/de022d2434e58dd633fd50a7f9bb50565a8767b5 had been merged.  Our CIs did not trigger the problem in my PR (https://github.com/checkstyle/checkstyle/pull/3401) because the build for PR was triggered before the https://github.com/checkstyle/checkstyle/commit/de022d2434e58dd633fd50a7f9bb50565a8767b5 had been merged.  Sorry for causing the problem.","closed","","MEZk","2016-09-08T20:31:23Z","2016-09-08T21:49:16Z"
"","3107","Issue #2825: distelliCI manifest file added","#2825  Launches checkstyle-tester with only Javadoc Checks against guava and spring sources.  Please merge checkstyle/contribution pull request before this one: https://github.com/checkstyle/contribution/pull/81","closed","","baratali","2016-04-15T22:24:40Z","2016-04-16T00:18:21Z"
"","3020","Issue #2729: arrays brakets after generics in method references left part are supported now.","#2729  Not the prettiest solution with semantic predicates, but it works.","closed","","sabaka","2016-03-09T00:04:34Z","2016-03-09T20:31:10Z"
"","3027","Issue #2428: Remove commons-lang3 dependency.","#2428 .  A new attempt.  I hope the build checkers will like it better this time.","closed","","kaj","2016-03-11T09:10:32Z","2016-03-17T14:25:31Z"
"","3100","Issue #2271:  Fix issues for Java found by Codacy static analysis tool","#2271","closed","","MEZk","2016-04-14T18:48:10Z","2016-04-18T12:34:49Z"
"","3443","Issue #2226: Replace line-based suppressions with inline ones","#2226  **Deprecated** and should have been removed in 7.0 release. 1) CheckstyleAntTask#setConfigURL 2) AbstractComplexityCheck#getMessageID  **Problem:** Suppression comment should be placed on line 1. It is contrary to the model HeaderCheck rules as we need to have licence header on line 1. This is not possible to replace with inline-based suppressions:  ``` xml  ```  Travic CI is red due to connection problem https://travis-ci.org/checkstyle/checkstyle/jobs/159947382#L799","closed","","MEZk","2016-09-14T17:37:33Z","2016-09-14T20:58:34Z"
"","3520","Issue #1254: Fix JavadocVariableCheck when assigning a lambda as a field","#1254  Diff reoports were generated against the following projects: 1. openjdk8 2. pmd 3. lombok-ast 4. spring-framework 5. elasticsearch 6. java-design-patterns 7. MaterialDesignLibrary 8. Hbase 9. Orekit 10. apache-ant 11. apache-jsecurity 12. android-launcher 13. apache-struts 14. infinispan 15. protonpack 16. jOOL 17. RxJava 18. checkstyle-with-excludes 19. sevntu-checkstyle-with-excludes 20. findbugs 21. hibernate-orm-with-excludes 22. guava-mvnstyle  http://mezk.github.io/i1254-JavadocVariable/index.html","closed","","MEZk","2016-10-30T12:15:39Z","2016-11-05T23:19:40Z"
"","3444","Update description of Checkstyle SDK GUI in xdocs","## Should be done only after https://github.com/checkstyle/checkstyle/issues/3445 and https://github.com/checkstyle/checkstyle/issues/3432 bugs are fixed.  GUI changed once this issue was implemented: https://github.com/checkstyle/checkstyle/issues/408 Need to describe new features and attach new screenshots. Following pages mention SDK GUI: http://checkstyle.sourceforge.net/writingchecks.html#The_Checkstyle_SDK_Gui http://checkstyle.sourceforge.net/writingjavadocchecks.html#Checkstyle_SDK_GUI ##","closed","miscellaneous,","baratali","2016-09-15T10:20:27Z","2016-12-14T18:16:27Z"
"","3962","ImportControlLoader does not close InputStream and leaks filehandles when xml is malformed","## Overview I have been looking into this checkstyle plugin related gradle issue https://github.com/gradle/gradle/issues/1416. One of the issues the original author has is a problem with the import-control.xml file remaining open after gradle has finished execution.  I have managed to replicate the issue on my Linux box using the provided project and checkstyle configuration.  I have tracked the problem to be in ImportControlLoader which opens an InputStream but not closes it in case there is a parse exception.   ## Reproduction steps  _Setup project as described in https://github.com/gradle/gradle/issues/1416_ ``` $ $JAVA_HOME/bin/jps                       26515 RemoteMavenServer 28548 Main 17143 Jps 15103 Launcher ``` ``` $ /home/gaganis/workspace/gradle-development/gradle/bin/gradle clean build --stacktrace --refresh-dependencies  ... Execution failed for task ':checkstyleMain'. > Unable to create Root Module: configLocation {/home/gaganis/programming/gradle/issue-1416/project/config/checkstyle/checkstyle.xml}, classpath {/home/gaganis/programming/gradle/issue-1416/project/build/classes/main:/home/gaganis/programming/gradle/issue-1416/project/build/resources/main}.  ... Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: unable to parse file:/home/gaganis/programming/gradle/issue-1416/project/config/checkstyle/import-control.xml - The content of element type ""import-control"" must match ""((allow|disallow)*,subpackage*)"".         at com.puppycrawl.tools.checkstyle.checks.imports.ImportControlLoader.load(ImportControlLoader.java:194)         at com.puppycrawl.tools.checkstyle.checks.imports.ImportControlLoader.load(ImportControlLoader.java:175)         at com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck.setFile(ImportControlCheck.java:185)         ... 107 more ```  ``` lsof -n|grep checkstyle                                                                                      java      17293                gaganis  221r      REG                8,5       371    1791156 /home/gaganis/programming/gradle/issue-1416/project/config/checkstyle/import-control.xml ... ```   ---------------  When checkstyle library fails to read import-control.xml for whatever reason it should not leave unclosed streams in the containing jvm.  --------------  _I have tries applying a fix using a try-with-resources construct but I got stuck because it drops coverage in cobertura. I have researched this quite a bit https://github.com/cobertura/cobertura/issues/289 but was unable to find a solution._","closed","approved,","gaganis","2017-03-08T22:02:22Z","2017-03-26T05:41:09Z"
"","3202","Allow WhitespaceAround for ARRAY_INIT token","# Using this configuration:  ``` xml                        ```  Checkstyle won't report on the curly braces used for array declarations, such as:  ``` java public class Foo {     public final int[] COLORS = new int[]{Color.BLACK };     //                                   ^ doesn't report missing whitespace around { } ```  ``` bash $ java -jar ~/Downloads/checkstyle-6.18/checkstyle-6.18-all.jar -c config.xml Foo.java Starting audit... Audit done. ```  This is down to the fact that even though `WhitespaceAround` appllies to `LCURLY` and `RCURLY` tokens, when writing an array, the `{` is actually treated as an `ARRAY_INIT` token, which is not currently being processed by the check at all (even is not allowed Token).  It would be desired if `ARRAY_INIT` was to be processed by `WhitespaceAround` in order to allow valiadation of code above, and have the configuration(given before) violation on arrays' initialization.","closed","new feature,","jsotuyod","2016-05-20T15:39:46Z","2016-12-12T21:16:17Z"
"","3327","NoWhitespaceBefore, NoWhitespaceAfter, and SeparatorWrap: add support for method reference operator","""::"" is separator, NOT a operator - https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.11  $ cat MethodRef.java  ``` java import java.util.Objects; import java.util.stream.Stream;  public class MethodRef {     {         Stream.of().filter(Objects :: nonNull); // 2 VIOLATIONS -- want no spaces around '::' operator          Stream.of().filter(Objects             ::nonNull); // VIOLATION -- want '::' operator at end of previous line     } } ```  $ cat config.xml  ``` xml                                                                                                                                                                ```  /var/tmp $ java -jar checkstyle-7.0-all.jar -c config.xml MethodRef.java C:\Users\U0076777>java -jar checkstyle-7.0-all.jar -c config.xml MethodRef.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Token ""DOUBLE_COLON"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:407)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:385)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:323)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:161) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Token ""DOUBLE_COLON"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck         at com.puppycrawl.tools.checkstyle.TreeWalker.registerCheck(TreeWalker.java:226)         at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:163)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138)         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:402)         ... 4 more Checkstyle ends with 1 errors.  ---  Want to enforce no whitespace around the new '::' operator.  Also, need DOUBLE_COLON added to OperatorWrap check to be able to enforce the wrapping policy. ##","closed","medium,","eric-milles","2016-06-28T18:40:07Z","2017-03-07T15:06:57Z"
"","3949","NoWhitespaceBefore: add support for method reference operator","""::"" is separator, NOT a operator - https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.11  $ cat MethodRef.java  ``` java import java.util.Objects; import java.util.stream.Stream;  public class MethodRef {     {         Stream.of().filter(Objects :: nonNull); // 1 VIOLATIONS -- want no spaces around '::' operator     } } ```  $ cat config.xml  ``` xml                                                           ```  /var/tmp $ java -jar checkstyle-7.0-all.jar -c config.xml MethodRef.java C:\Users\U0076777>java -jar checkstyle-7.0-all.jar -c config.xml MethodRef.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Token ""METHOD_REF"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:407)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:385)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:323)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:161) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Token ""METHOD_REF"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck         at com.puppycrawl.tools.checkstyle.TreeWalker.registerCheck(TreeWalker.java:226)         at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:163)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138)         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:402)         ... 4 more Checkstyle ends with 1 errors.  ---  Want to enforce no whitespace around the new '::' operator. ##","closed","easy,","rnveach","2017-03-07T15:01:53Z","2017-04-22T00:23:08Z"
"","3950","NoWhitespaceAfter: add support for method reference operator (new Acceptable token)","""::"" is separator, NOT a operator - https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.11  $ cat MethodRef.java  ``` java import java.util.Objects; import java.util.stream.Stream;  public class MethodRef {     {         Stream.of().filter(Objects :: nonNull); // 1 VIOLATIONS -- want no spaces around '::' operator     } } ```  $ cat config.xml  ``` xml                                                           ```  /var/tmp $ java -jar checkstyle-7.0-all.jar -c config.xml MethodRef.java C:\Users\U0076777>java -jar checkstyle-7.0-all.jar -c config.xml MethodRef.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Token ""METHOD_REF"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:407)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:385)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:323)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:161) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Token ""METHOD_REF"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck         at com.puppycrawl.tools.checkstyle.TreeWalker.registerCheck(TreeWalker.java:226)         at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:163)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138)         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:402)         ... 4 more Checkstyle ends with 1 errors.  ---  Want to enforce no whitespace around the new '::' operator. ##","closed","easy,","rnveach","2017-03-07T15:04:30Z","2017-05-28T23:51:16Z"
"","3951","SeparatorWrap: add support for method reference operator","""::"" is separator, NOT a operator - https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.11  $ cat MethodRef.java  ``` java import java.util.Objects; import java.util.stream.Stream;  public class MethodRef {     {         Stream.of().filter(Objects             ::nonNull); // VIOLATION -- want '::' operator at end of previous line     } } ```  $ cat config.xml  ``` xml                                                                        ```  /var/tmp $ java -jar checkstyle-7.0-all.jar -c config.xml MethodRef.java C:\Users\U0076777>java -jar checkstyle-7.0-all.jar -c config.xml MethodRef.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Token ""METHOD_REF"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:407)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:385)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:323)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:161) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Token ""METHOD_REF"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck         at com.puppycrawl.tools.checkstyle.TreeWalker.registerCheck(TreeWalker.java:226)         at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:163)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138)         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:402)         ... 4 more Checkstyle ends with 1 errors.  ---  need METHOD_REF added to OperatorWrap check to be able to enforce the wrapping policy. ##","closed","easy,","rnveach","2017-03-07T15:06:12Z","2017-04-26T22:00:13Z"
"","3871","Pattern doesn't match the lowerCamelcase","![testpattern](https://cloud.githubusercontent.com/assets/26063123/23363318/64214550-fcfa-11e6-9a4a-4ebb8864260c.jpg)   The local variable ""aKey"" doesn't match the following google style pattern : `""^[a-z]([a-z0-9][a-zA-Z0-9]*)?$""`. See my test case","closed","","tfereyre","2017-02-27T13:41:29Z","2017-02-27T15:38:51Z"
"","3948","infra: add simple-binary-encoding to no-error testing","","closed","","romani","2017-03-07T14:27:50Z","2017-03-08T01:36:47Z"
"","3935","spelling: corrected sentence","","closed","miscellaneous,","sagar-shah94","2017-03-05T16:51:11Z","2017-03-06T22:32:53Z"
"","3927","Issue #3601: Added examples for MethodParamPad xdoc","","closed","","SergeyDzyuba","2017-03-05T11:35:27Z","2017-03-05T17:59:54Z"
"","3881","spelling: Fix typo in documentation","","closed","","motlin","2017-02-27T16:24:55Z","2017-02-27T19:06:43Z"
"","3880","config: bump equalsverifier version to 2.2.1","","closed","","romani","2017-02-27T14:29:56Z","2017-02-27T19:02:37Z"
"","3879","config: bump ant version to 1.10.1","","closed","","romani","2017-02-27T14:29:50Z","2017-02-27T19:01:57Z"
"","3878","config: bump wagon-ssh version ro 2.12","","closed","","romani","2017-02-27T14:29:44Z","2017-02-27T19:01:44Z"
"","3877","config: bump nexus-staging-maven-plugin version to 1.6.8","","closed","","romani","2017-02-27T14:29:28Z","2017-02-27T19:01:29Z"
"","3876","config: bump org.jacoco.agent version to 0.7.9","","closed","","romani","2017-02-27T14:29:22Z","2017-02-27T19:03:01Z"
"","3875","config: bump slf4j-simple version to 1.7.23","","closed","","romani","2017-02-27T14:29:17Z","2017-02-27T19:00:37Z"
"","3874","config: bump maven-shade-plugin version to 3.0.0","","closed","","romani","2017-02-27T14:29:00Z","2017-02-27T19:00:20Z"
"","3873","config: bump forbiddenapis version to 2.3","","closed","","romani","2017-02-27T14:28:54Z","2017-02-27T19:00:03Z"
"","3872","config: bump build-helper-maven-plugin version to 3.0.0","","closed","","romani","2017-02-27T14:28:49Z","2017-02-27T18:59:45Z"
"","3866","infra: testing skip abilities for wercker","","closed","","romani","2017-02-25T19:16:47Z","2017-02-26T02:03:14Z"
"","3865","infra: make wercker commands multiline to preserve formatting","","closed","","romani","2017-02-25T14:53:05Z","2017-02-25T19:07:59Z"
"","3864","infra: introduce skip by content for shippable","","closed","","romani","2017-02-25T14:12:30Z","2017-02-25T14:59:39Z"
"","3861","infra: fix for travis:osx problem with 'shell_session_update: command…","","closed","","romani","2017-02-25T13:07:14Z","2017-02-25T13:25:37Z"
"","3784","Issue #3776: add htmlunit project to NoErrorTest (wercker)","","closed","","romani","2017-01-31T23:30:43Z","2017-02-01T00:27:59Z"
"","3769","minor: rename contributor in releasenotes","","closed","","Vladlis","2017-01-28T13:08:48Z","2017-01-28T13:11:42Z"
"","3759","config: travis.sh user argument to run a goal instead of variable","","closed","","romani","2017-01-26T13:50:16Z","2017-01-26T14:53:19Z"
"","3758","config: bump maven-compiler-plugin to 3.6.1","","closed","","romani","2017-01-26T01:56:41Z","2017-01-26T03:59:39Z"
"","3757","config: bump equalsverifier to 2.2","","closed","","romani","2017-01-26T01:56:29Z","2017-01-26T03:59:24Z"
"","3717","config: update to antlr4-runtime 4.6","","closed","","romani","2017-01-11T21:11:27Z","2017-01-12T00:05:01Z"
"","3716","config: upgrade jacoco maven plugin to 0.7.8","","closed","","romani","2017-01-11T20:53:17Z","2017-01-12T00:05:31Z"
"","3715","config: update ant to 1.10.0","","closed","","romani","2017-01-11T20:46:49Z","2017-01-11T23:44:40Z"
"","3714","config: update to org.eclipse.jgit 4.6.0.201612231935-r","","closed","","romani","2017-01-11T20:39:15Z","2017-01-11T23:44:59Z"
"","3713","config: update slf4j-simple to 1.7.22","","closed","","romani","2017-01-11T20:36:32Z","2017-01-11T23:32:15Z"
"","3712","config: equalsverifier upgrade to 2.1.8","","closed","","romani","2017-01-11T20:33:19Z","2017-01-11T23:31:55Z"
"","3690","Fixed error for test permissions","","closed","","MaksimP","2017-01-05T08:06:35Z","2017-01-05T18:04:57Z"
"","3659","minor: refactoring to shorten code, reodering of statements to minimi…","","closed","","romani","2016-12-15T14:31:44Z","2016-12-15T15:12:44Z"
"","3652","config: bump maven-resources-plugin to 3.0.2","","closed","","romani","2016-12-13T13:37:41Z","2016-12-13T18:04:38Z"
"","3643","config: reduce amount of skips by profile 'no-validations'","","closed","","romani","2016-12-11T14:17:13Z","2016-12-11T15:24:36Z"
"","3642","config: enable MacOS verify item, default jdk became jdk8 on travis","","closed","","romani","2016-12-11T14:00:40Z","2016-12-11T14:58:56Z"
"","3640","config: fix for unexpected empty line in temp file during all-sevntu-…","","closed","","romani","2016-12-11T00:37:30Z","2016-12-11T00:39:13Z"
"","3638","config: pitest-maven update to 1.1.11","","closed","","romani","2016-12-10T14:54:28Z","2016-12-10T17:21:02Z"
"","3629","minor: fix for Intelij inspections (Scope of variable 'expectedText' …","","closed","","romani","2016-12-09T19:58:17Z","2016-12-09T22:03:03Z"
"","3626","config: upgrade to latest Orekit commit","","closed","","romani","2016-12-09T16:34:19Z","2016-12-09T16:41:53Z"
"","3624","minor: formatting fix just to trigger PR","","closed","","romani","2016-12-08T13:59:54Z","2016-12-09T16:45:37Z"
"","3610","minor: fix for sonar links (linkcheck plugin)","","closed","","romani","2016-12-05T22:40:11Z","2016-12-06T00:32:44Z"
"","3597","config: bump equalsverifier to 2.1.7","","closed","","romani","2016-11-29T15:11:35Z","2016-11-29T18:49:25Z"
"","3596","config: bump version for maven-site-plugin to 3.6 version","","closed","","romani","2016-11-29T05:37:29Z","2016-11-29T06:28:48Z"
"","3562","config: version bump for powermock","","closed","","rnveach","2016-11-18T01:53:10Z","2016-11-18T17:31:53Z"
"","3560","test","","closed","","vorburger","2016-11-17T11:17:49Z","2016-11-17T11:18:07Z"
"","3559","config: version bump for maven-assembly-plugin","","closed","","romani","2016-11-16T22:14:38Z","2016-11-16T22:39:25Z"
"","3558","dos2unix","","closed","","vorburger","2016-11-16T21:00:51Z","2016-11-18T17:32:45Z"
"","3532","config: bump version of maven-compiler-plugin","","closed","","romani","2016-11-08T14:12:28Z","2016-11-08T14:16:53Z"
"","3529","config: update for nondex plugin to print output","","closed","","romani","2016-11-06T14:07:40Z","2016-11-06T14:34:21Z"
"","3528","config: update for nondex plugin to print output","","closed","","romani","2016-11-06T04:43:55Z","2016-11-06T14:07:20Z"
"","3506","config: bump pmd-maven-plugin version to 3.7","","closed","","romani","2016-10-18T23:52:46Z","2016-10-19T02:39:08Z"
"","3490","config: travis - move NonDex below primary tools","","closed","","romani","2016-10-02T14:29:04Z","2016-10-02T14:55:08Z"
"","3482","config: bump version of org.eclipse.jgit","","closed","","romani","2016-09-30T16:04:35Z","2016-09-30T16:37:26Z"
"","3479","config: bump equalsverifier version","","closed","","romani","2016-09-29T11:25:11Z","2016-09-29T12:54:30Z"
"","3478","config: bump version for system-rules","","closed","","romani","2016-09-29T11:22:57Z","2016-09-29T12:28:49Z"
"","3477","Commons beanutils bump","","closed","","romani","2016-09-29T11:21:27Z","2016-09-29T14:39:29Z"
"","3456","config: fix missed M2_HOME declaration","","closed","","romani","2016-09-21T00:23:20Z","2016-09-21T01:09:57Z"
"","3439","config: bump version for nondex-maven-plugin to 1.1.1","","closed","","romani","2016-09-11T21:13:24Z","2016-09-11T21:46:57Z"
"","3413","[please remove this - added accidentaly]","","closed","","goostleek","2016-08-12T06:52:54Z","2016-08-12T18:17:09Z"
"","3410","config: update equalsverifier to 2.1.4","","closed","","romani","2016-08-09T08:49:52Z","2016-08-09T09:22:48Z"
"","3405","minor: add commit of releasenotes in travis.yml","","closed","","Vladlis","2016-08-08T10:27:51Z","2016-08-11T03:33:34Z"
"","3399","minor: add placeholder for a new section in releasenotes.xml","","closed","","Vladlis","2016-08-05T14:51:43Z","2016-08-05T19:24:24Z"
"","3397","config: bump version for build-helper-maven-plugin to 2.12","","closed","","romani","2016-08-05T08:10:26Z","2016-08-05T11:35:01Z"
"","3396","config: bump version of  versions-maven-plugin to 2.3","","closed","","romani","2016-08-05T08:09:44Z","2016-08-05T11:34:17Z"
"","3395","config: org.eclipse.jgit version bump","","closed","","romani","2016-08-05T08:00:49Z","2016-08-05T11:34:35Z"
"","3394","config: equalsverifier version bump to 2.1.3","","closed","","romani","2016-08-05T07:57:21Z","2016-08-05T09:14:47Z"
"","3392","minor: update orekit to latest fixes","","closed","","rnveach","2016-08-04T13:52:34Z","2016-08-04T14:38:40Z"
"","3362","config: Update .travis.yml","","closed","","Vladlis","2016-07-21T13:28:01Z","2016-07-22T05:01:37Z"
"","3359","Issue #3358: IllegalImport should allow blacklisting fully-qualified packages","","closed","","dhalperi","2016-07-19T03:10:49Z","2016-07-19T04:01:36Z"
"","3356","minor: improve releasenote output in Travis","","closed","","Vladlis","2016-07-17T21:17:15Z","2016-07-17T21:34:26Z"
"","3353","minor: suppress for indelij idea 2016.2 violation , disabled till htt…","","closed","","romani","2016-07-17T05:25:17Z","2016-07-17T05:34:56Z"
"","3352","minor: fix for indelij idea 2016.2 violations and redundant suppression","","closed","","romani","2016-07-17T04:55:55Z","2016-07-17T05:34:40Z"
"","3350","Pull #3350: Update releasenotes generation","","closed","miscellaneous,","Vladlis","2016-07-15T08:57:08Z","2016-07-17T19:59:23Z"
"","3349","Pull #3349: Update releasenotes generation","","closed","miscellaneous,","Vladlis","2016-07-14T23:26:23Z","2016-07-17T04:16:19Z"
"","3346","minor: fix IntelijIdea violations of 'Scope of variable lnr is too br…","","closed","","romani","2016-07-12T04:58:28Z","2016-07-12T06:53:51Z"
"","3345","minor: bump build-helper-maven-plugin version","","closed","","romani","2016-07-11T16:04:58Z","2016-07-12T04:20:49Z"
"","3344","minor: bump findbugs-maven-plugin version version","","closed","","romani","2016-07-11T16:04:05Z","2016-07-12T04:20:34Z"
"","3307","config: org.eclipse.jgit version bump","","closed","","romani","2016-06-24T17:09:09Z","2016-06-25T01:44:42Z"
"","3306","config: equalsverifier version bump","","closed","","romani","2016-06-24T17:06:52Z","2016-06-25T01:37:12Z"
"","3305","config: maven-jar-plugin version bump","","closed","","romani","2016-06-24T17:03:53Z","2016-06-25T00:10:31Z"
"","3303","minor: revert of CI update that was make in scope of #3189","","closed","","romani","2016-06-24T03:17:51Z","2016-06-24T04:00:12Z"
"","3298","minor: fixing intelijidea violations","","closed","","romani","2016-06-23T04:37:36Z","2016-06-23T12:34:53Z"
"","3297","minor: introduction of UniformEnumConstantNameCheck from sevntu 1.21.0","","closed","","romani","2016-06-22T17:08:00Z","2016-06-23T12:47:12Z"
"","3294","config: forbiddenapis version bump","","closed","","romani","2016-06-20T19:42:34Z","2016-06-20T20:17:20Z"
"","3290","config: versoin update for equalsverifier","","closed","","romani","2016-06-18T21:07:49Z","2016-06-18T22:49:31Z"
"","3285","config: introduction of sonarqube validation to CI","","closed","","romani","2016-06-18T01:53:22Z","2016-06-18T21:05:58Z"
"","3282","Pull #3282: Review all French translations","","closed","miscellaneous,","don-vip","2016-06-16T16:03:18Z","2016-06-17T00:18:36Z"
"","3281","config: maven-jar-plugin version bump","","closed","","romani","2016-06-16T15:37:14Z","2016-06-16T18:11:13Z"
"","3280","config: version bump for maven-javadoc-plugin","","closed","","romani","2016-06-16T15:35:13Z","2016-06-16T18:11:05Z"
"","3265","config: version bump for maven-resource-plugin","","closed","","romani","2016-06-10T15:31:53Z","2016-06-10T17:29:40Z"
"","3264","config: version bump for jacoco","","closed","","romani","2016-06-10T15:29:25Z","2016-06-10T17:29:26Z"
"","3257","minor: introduction of UniformEnumConstantNameCheck from sevntu 1.21.0","","closed","incomplete,","romani","2016-06-08T13:40:32Z","2016-06-22T17:08:36Z"
"","3232","config: checkstyle dependency was removed checkstyle-maven-plugin","","closed","","romani","2016-05-30T12:56:15Z","2016-05-30T13:49:27Z"
"","3216","config: update to forbiddenapis 2.1","","closed","","romani","2016-05-25T13:27:10Z","2016-05-26T15:53:18Z"
"","3215","config: update to equalsverifier 2.1 version","","closed","","romani","2016-05-25T13:24:45Z","2016-05-25T15:14:53Z"
"","3206","config: maven-resource-plugin 3.0.0","","closed","","romani","2016-05-21T12:33:52Z","2016-05-22T14:00:07Z"
"","3205","config: maven-jar-plugin 3.0.0 is used","","closed","","romani","2016-05-21T12:31:44Z","2016-05-21T13:48:05Z"
"","3198","minor: travis: site and package on MacOs","","closed","","romani","2016-05-20T13:52:07Z","2016-05-21T12:30:24Z"
"","3163","config: jgit update to 4.3.1.201605051710-r","","closed","","romani","2016-05-09T16:11:36Z","2016-05-09T16:55:38Z"
"","3152","config: powermock-api-mockito version bump","","closed","","romani","2016-05-02T15:17:28Z","2016-05-02T17:09:04Z"
"","3137","config: commons-io version bump to 2.5","","closed","","romani","2016-04-27T13:48:23Z","2016-04-27T14:18:57Z"
"","3128","minor: reorganized Checker class","","closed","","alex-zuy","2016-04-25T17:20:25Z","2016-04-26T00:05:30Z"
"","3120","minor: https://issues.apache.org/jira/browse/MJAVADOC-423","","closed","","romani","2016-04-19T20:23:50Z","2016-04-21T00:09:05Z"
"","3104","config: ant version bump","","closed","","romani","2016-04-15T17:29:44Z","2016-04-15T19:46:00Z"
"","3097","minor: reorganized TranslationCheck","","closed","","alex-zuy","2016-04-13T17:53:49Z","2016-04-13T22:08:56Z"
"","3096","minor: distelli ci was added to README","","closed","","romani","2016-04-13T13:34:03Z","2016-04-13T21:52:14Z"
"","3094","config: jgit verision bump","","closed","","romani","2016-04-13T12:52:27Z","2016-04-13T13:25:10Z"
"","3083","config: version bump for slf4j-simple","","closed","","romani","2016-04-07T17:46:26Z","2016-04-07T19:41:20Z"
"","3081","config: equalsverifier version bump","","closed","","romani","2016-04-05T22:53:04Z","2016-04-06T00:00:02Z"
"","3079","config: equalsverifier version bump","","closed","","romani","2016-04-05T16:45:11Z","2016-04-05T22:52:50Z"
"","3076","config: slf4j-simple version bump","","closed","","romani","2016-04-02T01:13:46Z","2016-04-04T02:23:57Z"
"","3075","config: antlr4-runtime version bump","","closed","","romani","2016-04-02T01:11:42Z","2016-04-04T02:23:33Z"
"","3037","Reorganized AnnotationLocationCheck methods","","closed","","alex-zuy","2016-03-14T16:54:44Z","2016-03-16T18:29:51Z"
"","3036","config: maven-project-info-reports-plugin 2.9","","closed","","romani","2016-03-13T14:20:44Z","2016-03-13T14:59:48Z"
"","3003","config: equalsverifier 1.7.8","","closed","","romani","2016-03-04T13:09:40Z","2016-03-04T14:27:46Z"