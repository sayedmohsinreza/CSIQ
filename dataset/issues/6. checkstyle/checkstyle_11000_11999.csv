"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","763","修改summary check","合并summary check","closed","","Airpaul","2015-03-13T01:30:55Z","2015-03-13T01:33:59Z"
"","168","Adding ANNOTATION_DEF to the valid list of parentASTs for SuppressWarningsHolder.","Without this, any @SuppressWarnings (checkstyle or not) present on an annotation definition class will fail if the Holder is added as a module.  For instance, @SuppressWarnings(""PMD.VariableNamingConventions"") public @interface PathPartUri {     //...snip... }  This will fail without the ANNOTATION_DEF TokenTypes.  [ERROR] PathPartUri.java[0:n/a] Got an exception - java.lang.NullPointerException [WARNING] PathPartUri.java[20:1] suppress.warnings.invalid.target","closed","","dominic-jones","2014-07-03T17:37:21Z","2014-07-20T13:25:45Z"
"","99","Consider checking non-javadoc comments in javadoc checks.","Within Eclipse when you override or implement a method you can inherit the java doc for the method. Eclipse will produce the following:  ``` / * (non-Javadoc) * @see junit.framework.TestCase#setUp() *  / ```  CheckStyle will flag the method as not having JavaDoc. Hava the JavaDoc check aware of inherited java doc by being aware that inherited java doc format as presented by Eclipse and supported using the java doc generation tool. James Tauber detailed the possible out comes of working with Eclipse and inherited java doc or trying to adhere to the CheckStyle java doc check. With the (non-javadoc), Eclipse will actually link and present the inherited java doc when viewing the override or implementation. http://jtauber.com/blog/2004/05/11/inheriting_doc_in_javadoc_and_eclipse/","closed","javadoc,","isopov","2014-02-07T09:26:25Z","2016-07-24T04:50:28Z"
"","837","Checkstyle reports NPE when parsing nested switch","With [this PR](https://github.com/sevntu-checkstyle/sevntu.checkstyle/commit/3f13341b98e1b36d9cb65111dbb1bd7bbb2206c7) I introduced new [input file](https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/test/resources/com/github/sevntu/checkstyle/checks/design/InputNestedSwitchCheck.java) that causes `NullPointerException` in Checkstyle when executing`launch.sh` in [checkstyle tester](https://github.com/damianszczepanik/contribution/commit/6dbea700b44e986683869c891814758061207ddb).  ``` [INFO] Generating ""Checkstyle"" report    --- maven-checkstyle-plugin:2.14 [ERROR] Exception occurred during the analysis of file checkstyle-tester\src\main\java\sevntu-checkstyle\sevntu-checks\src\test\resources\com\github\sevntu\checkstyle\checks\design\InputNestedSwitchCheck.java . java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck.isTerminated(FallThroughCheck.java:178)         at com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck.checkSwitch(FallThroughCheck.java:318)         at com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck.isTerminated(FallThroughCheck.java:197)         at com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck.checkSlist(FallThroughCheck.java:225)         at com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck.isTerminated(FallThroughCheck.java:187)         at com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck.visitToken(FallThroughCheck.java:155)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:458)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:551)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:383)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:216)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:271)         at org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:253) ```  and the snipped code that causes this problem is:  ``` java package com.github.sevntu.checkstyle.checks.design;  public class InputNestedSwitchCheck {      private int type;      public void simple() {         switch (hashCode()) {         case 1:             switch (hashCode()) { // error             case 1:             }         case 2:             switch (type) { // error             }         }     } } ```","closed","high demand,","damianszczepanik","2015-03-22T13:29:34Z","2015-05-13T16:27:21Z"
"","553","IndentationCheck do not allow to close brace on new line for complex annoations","While running Checkstyle 6.2 with default IndentationCheck configuration I get the following result:  ``` java class AnnotatedList {     @DifficultAnnotation({             @MyType(value = Boolean.class, name = ""boolean""),             @MyType(value = String.class, name = ""string"")     }) // '}' have incorrect indentation level 4, expected level should be 8     List list = Arrays.asList(new String[]{         ""boolean"",         ""string""     }); // OK } ```  Here is the workaround, but I doesn't look good for me:  ``` java class AnnotatedList {     @DifficultAnnotation({             @MyType(value = Boolean.class, name = ""boolean""),             @MyType(value = String.class, name = ""string"")         }) // Now it is OK     List list = Arrays.asList(new String[]{         ""boolean"",         ""string""     }); // OK } ``` ##","closed","indentation,","mkordas","2014-12-29T19:01:25Z","2018-11-16T18:07:24Z"
"","893","Add check to prohibit Windows line endings","While `RegexpMultiline` can do this it is not discoverable by users:  ``` xml             ``` ##","open","new module,","gaul","2015-03-31T20:52:20Z","2020-11-12T10:06:04Z"
"","296","Checkstyle 5.8: IndexOutOfBoundsException in CustomImportOrderCheck","When using the new google_checks.xml configuration I get IndexOutOfBoundsException on each checked file:  java.lang.IndexOutOfBoundsException: Index: 5, Size: 5 Thread [Worker-10](Suspended %28exception IndexOutOfBoundsException%29)       ArrayList.rangeCheck(int) line: 635       ArrayList.get(int) line: 411      CustomImportOrderCheck.getNextImportGroup(int) line: 374       CustomImportOrderCheck.finishTree(DetailAST) line: 307       TreeWalker.notifyEnd(DetailAST) line: 362       TreeWalker.walk(DetailAST, FileContents) line: 338       TreeWalker.processFiltered(File, List) line: 188       TreeWalker(AbstractFileSetCheck).process(File, List) line: 73       Checker.process(List) line: 263       Auditor.runAudit(IProject, IProgressMonitor) line: 159       CheckstyleBuilder.handleBuildSelection(Collection, IProjectConfiguration, IProgressMonitor, IProject, int) line: 300      CheckstyleBuilder.build(int, Map, IProgressMonitor) line: 171       BuildManager$2.run() line: 734       SafeRunner.run(ISafeRunnable) line: 42       BuildManager.basicBuild(int, IncrementalProjectBuilder, Map, MultiStatus, IProgressMonitor) line: 206       BuildManager.basicBuild(IBuildConfiguration, int, IBuildContext, ICommand[], MultiStatus, IProgressMonitor) line: 246       BuildManager$1.run() line: 299       SafeRunner.run(ISafeRunnable) line: 42       BuildManager.basicBuild(IBuildConfiguration, int, IBuildContext, MultiStatus, IProgressMonitor) line: 302       BuildManager.basicBuildLoop(IBuildConfiguration[], IBuildConfiguration[], int, MultiStatus, IProgressMonitor) line: 358      BuildManager.build(IBuildConfiguration[], IBuildConfiguration[], int, IProgressMonitor) line: 381       AutoBuildJob.doBuild(IProgressMonitor) line: 143       AutoBuildJob.run(IProgressMonitor) line: 241       Worker.run() line: 54","closed","","lkoe","2014-10-13T13:58:33Z","2014-10-14T16:42:08Z"
"","536","TreeWalker bug in eclipse on Mac OS X","When using Eclipse on a Mac OS X machine, whenever I run checkstyle I get an error in each class on the package line that says ""TreeWalker: Got an exception - java.lang.NullPointerException."" As a student, I'm not the only Mac user I know who's getting this same issue. I'm currently running checkstyle  6.1.1.201412161501.","closed","incomplete,","dburkha1","2014-12-24T07:45:33Z","2015-01-05T22:32:38Z"
"","950","Non-standard locations in tree for DetailAST items","When traversing the DetailAST tree to build a custom checker, I notice some of the same types are found in different areas, either as a child or as a sibling. One example is ""return"" has "";"" as a child while an expression has "";"" as a sibling. It is making traversing the tree and finding items a little bit more tricky than it is needed. It would be much easier if they were to be found in the same location.   I am using checkstyle 6.5 and extending the ""Check"" class and getting the DetailAST from the ""visitToken"" method. Here is an example I am seeing. Code:  ``` // line 9     if (a == 1) return; // line 15     if (a == 2)         b = 3; ```  produces the following DetailAST tree:  ``` Type ""if"" (83) Line 9     Type ""("" (76) Line 9     Type ""EXPR"" (28) Line 9         Type ""=="" (116) Line 9             Type ""a"" (58) Line 9             Type ""1"" (137) Line 9     Type "")"" (77) Line 9     Type ""return"" (88) Line 9         Type "";"" (45) Line 9 //","open","antlr,","rnveach","2015-04-19T23:13:56Z","2021-12-22T04:50:58Z"
"","708","Check.suppressForClasses as alternative to suppressions","When somebody tries to introduce Checkstyle to project he sees thousands of violations. Current approach is to create/generate suppressions XML document that contains a set of suppress elements. Cons: creating it manually is painful. Generation from source code is not yet implemented. Suppression on line level is not ""stable"" because adding a line into the source file will brake suppressions.  Suggested approach: The natural way is when person goes through the vilotations and adds ""suppression"" for the rule. CodeNarc has doNotApplyToClassNames property for each rule  https://github.com/groovy/groovy-core/blob/master/config/codenarc/codenarc.groovy We can introduce suppressForClasses property for each Check that works with classes. Field format should be natural for developer: simple class name, canonical calss name, package name with .\* at the end (e.g. com.mycompany.dao.*)","closed","discussion ongoing,","ychulovskyy","2015-03-02T16:22:29Z","2015-03-10T07:12:21Z"
"","598","HiddenField module can now accept setterCanReturnItsClass attribute;","When set to true it means that setter methods can return either instance of the class in which they are declared or void, which is different from current behaviour where setters must return void.","closed","","priimak","2015-01-26T08:15:17Z","2015-01-27T01:11:16Z"
"","160","Checkstyle maven plugin - using 'excludes' causes problem in surefire plugin","When I use 'excludes' in checkstyle maven plugin, the surefire starts complainig:  [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.5:test (default-test) on project address-i18n-bundle: Unable to parse configuration of mojo org.apache.maven.plugins:maven-surefire-plugin:2.5:test for parameter excludes: Cannot assign configuration entry 'excludes' with value 'MyFile.java,MyFile2.java' of type java.lang.String to property of type java.util.List -> [Help 1]","closed","","jakubneubauer","2014-06-26T09:47:13Z","2014-06-27T17:14:56Z"
"","583","PackageDeclarationCheck.finishTree throws NPE","When I run checkstyle-6.1.1 against my codebase, I get a NPE in checkstyle:  ``` [error] java.lang.NullPointerException [error]     at com.puppycrawl.tools.checkstyle.checks.coding.PackageDeclarationCheck.finishTree(PackageDeclarationCheck.java:73) [error]     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyEnd(TreeWalker.java:420) [error]     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:376) [error]     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:207) [error]     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:73) [error]     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:263) [error]     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:129) ```  By digging in the source code, it seems to be caused by the PackageDeclarationCheck.finishTree() using the input parameter without checking that it isn't null.   See: https://github.com/checkstyle/checkstyle/blob/501b7c5240705c6db756608618fdcf58189e807e/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheck.java#L60","closed","incomplete,","felixpageau","2015-01-15T19:33:09Z","2015-09-12T14:01:36Z"
"","70","FileTabCharacter doesn't look at files other than java","When I enable checking for tabs in files:  ```                             ```  And create a text file under `src` folder with tabs in it checkstyle maven plugin doesn't fail on them (it just ignores this file), while it looks into `.java` files.","closed","","krzyk","2013-11-30T07:41:40Z","2013-11-30T07:54:22Z"
"","5","RedundantThrows: How do I hide ""Unable to get class information for (class)"" messages?","When checkstyle has trouble loading the proper classpath, it prints a spurious message like:  ``` $ checkstyle -c config.xml ThriftTest.java ... Unable to get class information for TException. ... ```  Is there an XML configuration setting I can use to ignore these?","closed","approved,","apennebaker","2013-09-24T16:34:31Z","2014-12-25T22:49:12Z"
"","136","Reduce amount of generated garbage, improve verification performance.","When building https://github.com/julianhyde/optiq 0.7-SNAPSHOT the improvement is as follows:    Total Memory Allocated for TLABs: 12.13 GB -> 1.04 GB    mvn verify time: 40 sec -> 20 sec","closed","","vlsi","2014-04-23T07:03:08Z","2015-04-02T12:06:24Z"
"","308","New Check: JavaDocTagСontinuationIndentation","When an at-clause doesn't fit on a single line, continuation lines are indented four (or more) spaces from the position of the @. http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s7.1.3-javadoc-at-clauses","closed","","maxvetrenko","2014-10-19T13:49:48Z","2014-10-21T06:03:53Z"
"","158","FinalLocalVariable on native methods","When a class declares native methods (binded through JNI), the declaration is similar to an abstract method (except the use of the native modifier instead of abstract).   In this context, the parameters of the method don't need to have a final modifier applied, and so this check should ignore native methods declaration.","closed","approved,","xgouchet","2014-06-18T15:19:33Z","2014-12-16T06:11:12Z"
"","952","WriteTag not triggered when on ignore","We're currently trying to get rid of all @author tags in JavaDoc comments. I'm trying to create a rule based on [WriteTag](http://checkstyle.sourceforge.net/config_javadoc.html#WriteTag) to flag the remaining ones, but it doesn't do anything.  ``` xml               ```  The problem is the `severity` property. Setting it to `ignore` seems to make CheckStyle skip the entire thing, which it shouldn't.  Setting it to `info` instead flags the tags just fine, but also reports when they are missing. Note that this snippet is almost identical to the example that is provided in the docs.  ##","open","javadoc,","msteiger","2015-04-20T16:08:55Z","2020-04-19T13:11:08Z"
"","432","Change in behaviour between 5.9 and 6.0 for Javadoc referencing checked exception that is not thrown","We recently upgraded from a very old version of Checkstyle to the most recent version, and noticed a change in behaviour for the situation where Javadoc indicates that a checked exception may be thrown but there is no corresponding throws clause on the method.  The behaviour seems to have changed between versions 5.9 and 6.0 of Checkstyle. I've created a test case here: https://gist.github.com/stubillwhite/a96545347e471e2284e7  For completeness, we're using IBM Java 7 but I don't believe that's relevant.  Output for run-checkstyle-5.9.bat: Starting audit... C:\TRASH\checkstyle-behaviour-change\ExceptionJavadoc.java:8:8: warning: Unused @throws tag for 'java.io.IOException'. Audit done.  Output for run-checkstyle-6.0.bat: Starting audit... Audit done.  (On a side note, thank you for all your hard work on Checkstyle -- we find it invaluable.) ##","closed","javadoc,","stubillwhite","2014-12-03T12:06:57Z","2016-12-14T18:18:22Z"
"","586","web pages: All segments at our HTML specifications for Checks should have link","We need to make all segments(first priority is link to Check, but ideally links to configs and examples .....) on HTML pages like  http://checkstyle.sourceforge.net/config_whitespace.html  to be linkable to easy copy link and share it with others, to exactly point user to place to read.  example : http://checkstyle.sourceforge.net/config_whitespace.html#EmptyForInitializerPad  Good example of how it is done on other web sites: http://logback.qos.ch/manual/configuration.html#statusListener and move mouse over a link text. https://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s1.2-guide-notes see at persistent image of chain-link.","closed","approved,","romani","2015-01-18T22:17:40Z","2015-03-17T05:24:33Z"
"","852","default is switch block of visitToken method","We need to decide on model how we should implement visitToken method, it position of checking for incorrect token to come or not, all check that do not have SWITCH do NOT check that, that problem is become more visible only in Checks where SWITCH is used, see example below. We have already enforced all check to override getRequiredTokens and getAccessibleTokens  method so chance that unexpected token appear is minimal.  Coverage by test of ""default:"" is also inconvenience.  ```   @Override public void visitToken(DetailAST ast) {  switch (ast.getType()) {    default:       throw new IllegalStateException(ast.toString());   }  } ```  if we decide to keep ""default:"" we need to use Util method to do that in the same style (with message before exception ) in all Checks. ##","open","approved,","romani","2015-03-26T14:48:33Z","2017-03-11T18:07:42Z"
"","484","New profile for quick build without any report and checks has been created","We need it on development phase","closed","","sabaka","2014-12-10T20:35:26Z","2015-09-03T23:33:18Z"
"","649","web site: top header image creation","we have ugly header at our website - http://checkstyle.sourceforge.net/  Desirable view is smth like - http://maven.apache.org/plugins/maven-checkstyle-plugin/ empty images of cerain sizes need to be created and used on web site till we order images from proffecional designer (he could provide us images of exact size).  As header image we are going to use third variant from https://github.com/checkstyle/resources/blob/master/img/style_experiments/1.jpg .  As last option:  our header should looks like - http://mojo.codehaus.org/taglist-maven-plugin/","closed","approved,","romani","2015-02-17T17:18:27Z","2015-09-07T01:32:03Z"
"","165","ANTLR problem with exception types in catch block","we have next case: catch(FooException | BarException e), ANTLR  couldn't find ""|"" token. We have next tree: +--LITERAL_CATCH     |    +--LPAREN    +--PARAMETER_DEF    |     |    |     +--MODIFIERS    |     +--TYPE    |     |      |    |     |      +--IDENT (FoofException)    |     |      +--IDENT (BarException)    |     |    |      +-- IDENT (e)    +-- RPAREN  It is not failed as ""expecting EOF"" but still a grammar problem","closed","","maxvetrenko","2014-07-01T13:23:38Z","2014-07-26T00:29:32Z"
"","906","Checkstyle 6.5: WhiteSpaceAround and Generics","We have just updated to Checkstyle 6.5 and now have a bunch of   ``` '?' is not preceded with whitespace. ```  They are all generated by generics that use the '?' like  ``` @Override public String[] processLocations(Class clazz, String... locations) {     return null; } ```  Disabling the Whitespace Around check fixes the issue. Removing only the '?' flag of the Whitespace Around doesn't.","closed","","bananetomate","2015-04-08T17:49:28Z","2016-04-05T16:47:58Z"
"","672","Names of properties in example AnnotationUseStyle should be lowercase","We have convetion to keep names of properties in camel case. Also, there is no need to use more than one line for property and there is no need for additional margin on left.  Example of [AnnotationUseStyle](http://checkstyle.sourceforge.net/config_annotation.html#AnnotationUseStyle) configuration should be changed from:  ``` xml                        ```  to:  ``` xml                  ```","closed","","mkordas","2015-02-23T17:10:09Z","2015-02-23T17:37:47Z"
"","340","How about a 6.1 release?","We can just create a local tag but an upstream release would be awesome.","closed","","dmlloyd","2014-10-28T13:34:10Z","2014-10-31T02:14:25Z"
"","652","Make CLI option to be able to print Javadoc tree as plain text","We already have [JavadocTreePrinter](https://github.com/checkstyle/contribution/blob/master/javadoc-tree-serializer/JavadocTreePrinter.java) that gets root DetailNode and prints whole tree as plain text to console. Example:  ``` |--NEWLINE[3x0] : [\n] |--LEADING_ASTERISK[4x0] : [ *] |--WS[4x2] : [ ]         |--JAVADOC_INLINE_TAG[4x74] : [{@link\n * Qax}]             |--JAVADOC_INLINE_TAG_START[4x74] : [{]             |--LINK_LITERAL[4x75] : [@link]             |--NEWLINE[4x80] : [\n]             |--LEADING_ASTERISK[5x0] : [ *]             |--WS[5x2] : [ ]             |--REFERENCE[5x3] : [Qax]                 |--CLASS[5x3] : [Qax]             |--JAVADOC_INLINE_TAG_END[5x6] : [}]         |--TEXT[5x7] : [ at the end of a line.]         |--NEWLINE[5x29] : [\n]         |--TEXT[6x0] : [ ] |--EOF[6x1] : [] ```  To work it should be placed inside a Javadoc Check to receive DetailNode tree, which is wrong. Need to make it standalone to be able to execute tree printing by means CLI.  Following CLI options should be added: `-j, --javadocTree` - Print Parse tree of the Javadoc comment","closed","new feature,","baratali","2015-02-18T20:39:16Z","2016-03-17T13:32:28Z"
"","548","Resolve maven compilation warnings","warnings:  ``` 20:23 ~/java/git-others/checkstyle/checkstyle [master|✔] $ mvn clean install -Passembly [INFO] Scanning for projects... [WARNING]  [WARNING] Some problems were encountered while building the effective model for com.puppycrawl.tools:checkstyle:jar:6.2-SNAPSHOT [WARNING] 'build.plugins.plugin.(groupId:artifactId)' must be unique but found duplicate declaration of plugin org.apache.maven.plugins:maven-surefire-plugin @ line 525, column 15 [WARNING] 'build.plugins.plugin.(groupId:artifactId)' must be unique but found duplicate declaration of plugin org.codehaus.mojo:build-helper-maven-plugin @ line 535, column 15 [WARNING]  [WARNING] It is highly recommended to fix these problems because they threaten the stability of your build. [WARNING]  [WARNING] For this reason, future Maven versions might no longer support building such malformed projects. [WARNING]  ....    [javadoc] warning: [options] bootstrap class path not set in conjunction with -source 1.5 ..... ```","closed","approved,","romani","2014-12-27T04:30:10Z","2015-01-03T22:01:48Z"
"","588","Warning does not appear in the case of one-line method.","Warning does not appear in the case of one-line method. Is this specification? or missed check?  ``` Java public void foo() {     bar(); }  public void bar() {     String bar = ""bar"";     bar.isEmpty(); } ```  bar method has warning of Javadoc. But, foo method doesn't have warning.","closed","","teaplanet","2015-01-20T05:10:33Z","2015-01-22T01:08:17Z"
"","832","Remove empty if statements to fix PMD violations, issue #744","Violations of PMD rule [EmptyIfStmt](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/empty.html#EmptyIfStmt) are fixed. All transformations were done by IDE automatically.","closed","","mkordas","2015-03-21T02:20:47Z","2015-03-22T17:19:36Z"
"","842","Remove null checks on previously dereferenced values, issue #778","Violations of Findbugs rule [RCN: Nullcheck of value previously dereferenced](http://findbugs.sourceforge.net/bugDescriptions.html#RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE) in class `BlockParentHandler` are fixed.","closed","","mkordas","2015-03-22T22:13:18Z","2015-03-25T05:49:20Z"
"","910","Findbugs violation: UniqueProperties doesn't override java.util.Hashtable.equals","violation  com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheck$UniqueProperties doesn't override java.util.Hashtable.equals(Object)   STYLE   EQ_DOESNT_OVERRIDE_EQUALS   1   Medium  that violation is temporary suppressed in config/findbugs-exclude.xml but it have to be investigated and resolved.","closed","approved,","romani","2015-04-09T06:09:51Z","2015-05-15T17:38:40Z"
"","977","SuppressCommentFilter not working with ClassDataAbstractionCoupling when specified on class","Version tested: checkstyle 6.5  Configuration example:  ```                                                                ```  **Working example with @SuppressWarning** _TestClass.java_  ``` package com.company.security.model;  import java.util.ArrayList; import java.util.Collection; import java.util.HashSet; import java.util.List; import java.util.Set;  import javax.inject.Inject;  import org.apache.commons.lang.Validate; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional;  @Service @Transactional @SuppressWarnings(""checkstyle:classdataabstractioncoupling"") @SuppressWarnings(""checkstyle:magicnumber"") public class UserService {      @Inject     private UserRepository repository;      @Inject     private UserPermissionRepository userPermissionRepository;      @Inject     private UserRoleRepository userRoleRepository;      @Inject     private UserGroupUserRepository userGroupUserRepository;      private int value = 10022;      public void doUselessCreations(UserGroup group) {         new UserByUserGroupEquals(group);         new UserByRoleEquals(role);         new UserPermissionByUserEquals(user);         new UserPermission(user, permission);         new UserRoleByUserEquals(user);         new UserRole(TimeBasedIdGenerator.nextId(), user, role);         new UserGroupUserByUserEquals(user);         new UserGroupUser(group, user);         new UserByUsernameEquals(username);     } } ```  _Testing_  ``` PS C:\dev\Apps\checkstyle> java -jar .\checkstyle-6.5-all.jar -c .\ClassDataAbstractionCoupling-suppression-checkstyle.xml .\TestClass.java Starting audit... Audit done. ```  **Non working example with SuppressionCommentFilter** _TestClass.java_  ``` package com.company.security.model;  import java.util.ArrayList; import java.util.Collection; import java.util.HashSet; import java.util.List; import java.util.Set;  import javax.inject.Inject;  import org.apache.commons.lang.Validate; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional;  @Service @Transactional // @cs-: ClassDataAbstractionCoupling // @cs-: MagicNumber public class UserService {      @Inject     private UserRepository repository;      @Inject     private UserPermissionRepository userPermissionRepository;      @Inject     private UserRoleRepository userRoleRepository;      @Inject     private UserGroupUserRepository userGroupUserRepository;      private int value = 10022;      public void doUselessCreations(UserGroup group) {         new UserByUserGroupEquals(group);         new UserByRoleEquals(role);         new UserPermissionByUserEquals(user);         new UserPermission(user, permission);         new UserRoleByUserEquals(user);         new UserRole(TimeBasedIdGenerator.nextId(), user, role);         new UserGroupUserByUserEquals(user);         new UserGroupUser(group, user);         new UserByUsernameEquals(username);     } } ```  _Testing_  ``` PS C:\dev\Apps\checkstyle> java -jar .\checkstyle-6.5-all.jar -c .\ClassDataAbstractionCoupling-suppression-checkstyle.xml .\TestClass.java Starting audit... C:\dev\Apps\checkstyle\.\TestClass.java:16:1: warning: Class Data Abstraction Coupling is 9 (max allowed is 7) classes [UserByRoleEquals, UserByUserGr oupEquals, UserByUsernameEquals, UserGroupUser, UserGroupUserByUserEquals, UserPermission, UserPermissionByUserEquals, UserRole, UserRoleByUserEquals] . Audit done. ```  I noticed that if you put the // @cs-: just below the package declaration it does work. So this might not be a bug but a restriction on how checkstyle works. If so, just close this ticket.  Regards","closed","miscellaneous,","bananetomate","2015-04-24T12:28:47Z","2016-09-11T19:05:35Z"
"","613","Issue with Indentation forceStrictCondition","Using the following config  ``` xml                                               ```  and the following code  ``` java public class MyClass {     public void callMe() {         SparseArray packageIdentifiers =                 (SparseArray) mGetAssignedPackageIdentifiersMethod.invoke(                         resources.getAssets());     } } ```  I get a Checkstyle error  ``` MyClass.java:5: 'resources' have incorrect indentation level 24, expected level should be 16. ```  I expected not to get any errors. The error is only thrown when `forceStrictCondition` is set to `true`.  What could be causing this issue? ##","open","indentation,","liutikas","2015-02-03T00:31:44Z","2016-12-14T18:16:43Z"
"","277","Using Indentation module and switch in a inner class throws AOOB Exception","Using Indentation module and switch in a inner class throws ArrayIndexOutOfBoundsException.","closed","","alexandresouzacosta","2014-09-12T15:36:21Z","2014-10-15T20:22:42Z"
"","362","Checkstyle 6.1: java.lang.IllegalStateException: FastStack is empty","Using Checkstyle 6.1 and the google-checks.xml configuration I get this exception upon Checkstyle execution:  java.lang.IllegalStateException: FastStack is empty     at com.puppycrawl.tools.checkstyle.api.FastStack.pop(FastStack.java:84)     at com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.leaveToken(AbstractTypeAwareCheck.java:175)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyLeave(TreeWalker.java:477)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:544)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:373)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:211)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:73)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:263)     at net.sf.eclipsecs.core.builder.Auditor.runAudit(Auditor.java:159)     at net.sf.eclipsecs.core.jobs.AuditorJob.runInWorkspace(AuditorJob.java:82)     at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:38)     at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)","closed","","lkoe","2014-11-14T11:46:01Z","2014-11-14T20:05:46Z"
"","930","Checkstyle plugin crashes with error: Unsupported major.minor version 52.0","Using Android Studio 1.2 Beta 3, I can't open any project if the Checkstyle plugin is enabled: ![error](https://cloud.githubusercontent.com/assets/3603795/7132416/4289fa3c-e289-11e4-8f6c-b6a93654705e.png)  Any suggestion ?","closed","","gmbett","2015-04-14T07:33:43Z","2015-04-14T08:09:53Z"
"","970","issue969: Fix upper/lower case conversation, enhance tests","Upper/lower case conversations fixed for issue #969 . Find bugs configuration related with #896 removed. Both mvn clean install mvn verify builds successfully.  CLI test command mentioned in issue #969 runs successfully after this fix.","closed","","precoder","2015-04-23T18:40:51Z","2015-05-01T17:41:19Z"
"","210","Added documentation for TypeName changes from PR #208","Updated the TypeName check documentation to reflect changes from PR #208","closed","","tsjensen","2014-07-29T16:03:18Z","2014-07-30T23:08:15Z"
"","228","Updated German messages","Updated the German rule messages.  I hope the file encoding is correct. I assumed Latin1 (iso-8859-1), not UTF-8. This leads to github not displaying the special characters correctly, but I believe it is what Checkstyle needs.","closed","","tsjensen","2014-08-08T08:55:05Z","2014-08-08T21:00:59Z"
"","713","Visibility Modifier Check, updated option setter, issue #710","Updated setter's name","closed","","alexkravin","2015-03-03T21:11:42Z","2015-03-03T21:18:02Z"
"","253","Updated documentation of LeftCurly check to show all allowed tokens","Updated documentation of LeftCurly check to show all allowed tokens","closed","","tsjensen","2014-08-14T16:17:20Z","2014-08-14T18:45:56Z"
"","539","SuppressWarnings feature throws exception if annotation uses constant value","Updated checkstyle config file to use the SuppressWarnings feature introduced in checkstyle 5.7,   Noticed, If SuppressWarnings uses a contant value, checkstyle throws an exception :   java.lang.IllegalArgumentException: String literal AST expected      This issue is still present in 6.2-SNAPSHOT  Example Code  ``` public class AnnotationUsingConstant {         private static final String UNUSED=""UnusedDeclaration"";          @SuppressWarnings(UNUSED)         public void method1(){         } } ```  results in this exception  ``` java.lang.IllegalArgumentException: String literal AST expected: UNUSED[10x26]     at com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder.getStringExpr(SuppressWarningsHolder.java:403)     at com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder.getAnnotationValues(SuppressWarningsHolder.java:420)     at com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder.visitToken(SuppressWarningsHolder.java:261)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:448)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:541)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:373)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:207)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:77)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:263)     at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:122)     at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:108)     at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:99) ```","closed","","muminc","2014-12-25T01:09:36Z","2014-12-30T17:13:09Z"
"","783","verify that all Checks present as web site","update verify stage of maven build by special script that to ensure that all Check are referenced at that exists at Checkstyle (""*Check.java"") exists at page https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/checks.xml , is some check is missed maven build should fail.","closed","approved,","romani","2015-03-14T21:46:21Z","2015-03-15T21:19:01Z"
"","192","Update for existing Check: LocalVariableName","Update LocalVariableName to allow one-character for temporary and looping variables. http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s5.2.7-local-variable-names.","closed","","maxvetrenko","2014-07-16T19:07:26Z","2014-07-17T00:15:15Z"
"","254","Update Javadoc in GenericWhitespaceCheck.","Update Javadoc in Check :http://checkstyle.sourceforge.net/config_whitespace.html#GenericWhitespace Documentation is not obvious, it can't give answers what cases are valid. For example:  protected List<Class<? extends AbstractTester>> getTesters() {   return ImmutableList.<Class<? extends AbstractTester>> of(); }   It's difficult to understand is this case valid. Documentation says, that Generic tokens < and > should be correct to the typical convention and that's all.","closed","","maxvetrenko","2014-08-15T10:01:10Z","2015-02-10T00:44:10Z"
"","182","Update for existing Check: RightCurly","Update for existing Check to cover following rule: Line break after the closing brace if that brace terminates a statement or the body of a method, constructor or named class. For example, there is no line break after the brace if it is followed by else or a comma. http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.1.2-blocks-k-r-style","closed","","maxvetrenko","2014-07-12T16:33:59Z","2014-07-17T00:13:43Z"
"","248","OuterTypeFilenameCheck. Update Check logic","Update Check logic according to the next rule: top level type are the public type or the first type in file if public is missed. Now Check put false positive on the next case:   @interface MyAnnotation1 { //ok ---  should be ok, but check put warning here.      String name();     int version(); }  public class OuterTypeFilenameInput_1 {} //ok","closed","","maxvetrenko","2014-08-13T08:24:08Z","2014-08-13T21:14:25Z"
"","137","Fix cache usage in TreeWalker in presence of filters.","TreeWalker should be able to somehow understand that even if there are messages, then the file may still be OK since there may be some filters blocking the messages.","closed","","vlsi","2014-04-23T12:59:10Z","2014-12-02T06:18:38Z"
"","556","create project to generate HTML reports","to share new Check or changes to Check it is convenient to use checkstyle maven report with jxr maven report. http://pirat9600q.github.io/UselessSuperCtorCallCheck/checkstyle.html http://roman-ivanov.blogspot.com/2014/10/how-to-use-snapshot-checkstyle-version.html https://github.com/pirat9600q/checkstyle-tester/tree/UselessSuperCtorCallCheck https://github.com/pirat9600q?tab=repositories  That will help us have common project to be easily used by new contributors .  from baratali: https://github.com/baratali/jdk8 I created simple maven project and moved all openJDK sources to src/main/java. Pom.xml: https://github.com/baratali/jdk8/blob/master/pom.xml Command to generate report: mvn jxr:jxr && mvn checkstyle:checkstyle  Fyi: https://jira.codehaus.org/plugins/servlet/mobile#issue/MCHECKSTYLE-127","closed","approved,","romani","2014-12-30T02:01:24Z","2016-03-23T13:55:51Z"
"","897","added validation for header in setHeader in RegexpHeaderCheck.java","to provide better feedback when an invalid Pattern is specified (was InvocationTargetException only before)  problem is described at http://stackoverflow.com/questions/29272034/whats-the-reason-for-header-specification-is-not-a-regular-expression-invocat  copy-paste from stackoverflow post: I'm running the maven-checkstyle-plugin 2.15 with the following specification of a header check  ```                         ```  What could cause the error line 1 in header specification is not a regular expression: InvocationTargetException? There's nothing to try because the plugin doesn't tell what's actually wrong (could return parser error details or anything helpful).  The complete error is  ``` Failed during checkstyle configuration: cannot initialize module RegexpHeader - Cannot set property 'header' in module RegexpHeader to '^/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the ""License""); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an ""AS IS"" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */.*': line 1 in header specification is not a regular expression: InvocationTargetException -> [Help 1] ```","closed","","krichter722","2015-04-05T18:19:32Z","2019-02-26T07:08:30Z"
"","751","Not all links on website are working","to grab all links we need to change pom.xml as :   ```                org.apache.maven.plugins         maven-linkcheck-plugin         1.2           GET 3000 false .... ```  and resolve all violations.  Example:  On [main page](http://checkstyle.sourceforge.net/) links to Netbeans don't work. Should be https://netbeans.org/ instead of http://www.netbeans.org.","closed","approved,","mkordas","2015-03-11T21:15:59Z","2015-09-07T01:33:19Z"
"","854","Remove deprecated getLines() methods from Utils","To delete: - [com.puppycrawl.tools.checkstyle.Utils#getLines(java.lang.String)](../blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java#L231) - [com.puppycrawl.tools.checkstyle.Utils#getLines(java.lang.String, java.lang.String)](../blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java#L249)  Coverage limits should be adjusted afterwards.","closed","approved,","mkordas","2015-03-26T21:02:54Z","2015-03-26T21:38:31Z"
"","170","Update for existing Check: WhitespaceAround","To cover Google's requirements it's needed to update existing Check to allow empty classes or interfaces.  public class Foo {} public interface Foo {}   Need to allow empty for cycle:  for (first = 0; first < len && matches(sequence.charAt(first)); first++) {}","closed","","maxvetrenko","2014-07-05T07:41:27Z","2014-07-05T16:31:28Z"
"","11","A few build-related commits to give Linux users a more positive experience","Three commits in this series.  Brief explanations:  788f87df4db1368ee0563e1ba1199177618cc01f -- First of all, I see the project has recently moved to Git from Mercurial.  Not sure about the latter, but Git is aware of UNIX permissions on files.  And it's nice to only have the ""execute"" permission on files that are intended to be executed.  AFAICT there are no scripts in here, so I just 644'd everything.  4fdc97c845393389d5074664ccc3e23cb89b2cc9 -- There's tabs-versus-spaces, vi-versus-emacs, and Maven-versus-Ant.  I'm firmly in the second camp on all these very important issues -- but instead of ranting about why I think your chosen build system sucks, I'll instead contribute a script to compile the project with a better build system (Ant, with a little help from apt and sh).  Let users decide for themselves which build system they prefer.  5e7b73e9998dd7605fd6b9107d1e0d8c4a1509d0 -- Nearly as bad as using Maven, the documentation on how to build this project is either buried in some subdirectory in the repo, somewhere on the web, or doesn't really exist.  So I put an INSTALL.md in the project root with instructions on how to use my script and Ant to build the project on Debian-like systems.  I added space for others to document the Maven building process and add notes from other OS's.  If there are build instructions for the project floating around elsewhere, I'd like to suggest copy-pasting them into INSTALL.md.","closed","","picomancer","2013-10-05T05:15:39Z","2013-10-07T06:32:45Z"
"","646","Replace StringBuffer with StringBuilder to improve performance","Thread-safety given by `StringBuffer` doesn't give any benefit when used within one method, so in such cases `StringBuilder` is safe and more efficient replacement.","closed","","mkordas","2015-02-15T08:58:33Z","2015-02-22T13:35:27Z"
"","865","Update FindBugs Maven Plugin to 3.0.1","This version of Maven plugin brings FindBugs in version 3.0.1 with various new bug patterns. Release notes available [here](http://findbugs.sourceforge.net/Changes.html).","closed","","mkordas","2015-03-28T21:59:37Z","2015-03-28T22:25:48Z"
"","645","Replace verbose type arguments with diamond type","This syntax is not supported under Java 6 or earlier, but Checkstyle codebase uses Java 7 already.","closed","","mkordas","2015-02-14T23:57:12Z","2015-02-22T13:35:28Z"
"","18","Fixed GenericWhiteSpace for complex generics","This should fix issue https://github.com/checkstyle/checkstyle/issues/17","closed","","pbaranchikov","2013-10-09T12:59:08Z","2014-06-26T12:59:54Z"
"","115","Moving to standard directory layout","This seems to be a big change - lots of file renames at least.  This removes testinputs.dir and testsrcs.dir system properties using just the relative filepaths instead. I've tested this change on Linux (from terminal with maven, Eclipse, Netbeans and Idea - in Idea this issue prevents to run tests normally by default run configuration - http://youtrack.jetbrains.com/issue/IDEA-121076 - you can create custom JUnit configuration for all tests in src/test/java folder). Also I tested this change on Windows - from terminal with maven and from Eclipse.  Another big change - is that messages are moved to src/main/resources - so in the java-sources folder only java sources are left.  As a side note - what bothers be about checkstyle - is that it requires java.io.File to run checks - this class can not always be available (GAE and other restricted environments) and it is too low-level for various IDE integration (consider emerging cloud IDEs). What about moving to some abstract Stream - so tests can run on Test.class.getResourceAsStream() input?","closed","","isopov","2014-03-05T07:01:03Z","2014-06-26T10:51:48Z"
"","112","LeftCurly ""nl"" doesn't work on METHOD_DEF","This rule seems to work for all other tokens (if, while, class definition) but doesn't catch method definitions with a curly brace on the same line. I can't see any changes that would lead to this issue, any ideas?  ```        ```","closed","invalid,","nator","2014-02-25T18:41:54Z","2014-02-25T19:58:43Z"
"","739","Replace calls to equals() on enums with identity comparison","This replacement is safe because two enum constants are equal only when they have the same identity.","closed","","mkordas","2015-03-10T13:57:23Z","2015-03-10T14:46:45Z"
"","584","Ignore non-private members in VisibilityModifierCheck when annotated.","This PR is in response to an old feature request (http://sourceforge.net/p/checkstyle/feature-requests/597/) that I also wanted. :)","closed","incomplete,","emilong","2015-01-17T21:34:30Z","2015-02-27T17:46:09Z"
"","482","Removed InputImport as separate input for each UT was created #388","This PR has to be merged after all PRs which are connected to Imports, in other words after  #476 #478 #479 #480 #481","closed","","alexkravin","2014-12-09T10:48:09Z","2014-12-11T14:41:06Z"
"","209","removing ignoreDirectoryName option from PackageDeclarationCheck","This option duplicates compilation error and has no sense to be run on successfully compiled java sources.  This change breaks backward compatibility so it is not meant for immediate merge. Actually we can either wait for several breaking changes (we already discussed some) to arrive in the pool, or we can abandon this change. The major drawback of this function is that it need non-compilable input for its operation.","closed","","isopov","2014-07-29T07:40:03Z","2014-11-30T16:53:28Z"
"","164","Add PrintDesiredOrder option to ImportOrderCheck","This mode is ready to use for copy and paste for correction of import order after ""Organize Imports"" disaster.  I am always having hard time figuring out what checkstyle's `Wrong order for '{0}' import` errors are. From my perspective, it would be better if checkstyle just printed the ideal import order that can be just copied to the source.  From my perspective,   ``` java Suggested import order is as follows: import java.awt.Button; import java.awt.Dialog; import java.awt.Frame; import java.awt.event.ActionEvent; import java.io.File; import java.io.IOException; import java.io.InputStream; import java.io.Reader; import javax.swing.JComponent; import javax.swing.JTable; import static java.awt.Button.ABORT; import static java.io.File.createTempFile; import static javax.swing.WindowConstants.*; ```  is way more intuitive than  ``` 5: Wrong order for 'java.awt.Dialog' import. 9: Wrong order for 'javax.swing.JComponent' import. 11: Wrong order for 'java.io.File' import. 13: Wrong order for 'java.io.IOException' import. ```  In the PR I add such an option: `PrintDesiredOrder` makes `ImportOrderCheck` print the desired import order if there are violations. Individual errors can be disabled via `BlameIndividualImports=false`.  By default, old mode is used. I guess a switch to `BlameIndividualImports=false PrintDesiredOrder=true` by default requires major release.","closed","","vlsi","2014-06-30T22:45:38Z","2014-07-03T16:55:56Z"
"","114","fix for anonymous inner class #105","This is the fix related with the issue #105 stated at this link :  https://github.com/checkstyle/checkstyle/issues/105","closed","","carthagian","2014-03-01T17:51:10Z","2014-07-13T05:58:11Z"
"","829","Remove final from try-with-resources, fixes #805","This is temporary fix. Proper solution is to update cobertura-maven-plugin to 2.7.","closed","","mkordas","2015-03-20T23:48:02Z","2015-03-22T17:19:45Z"
"","129","Methods returning array and incorrect indentation","This is continuation of the https://sourceforge.net/p/checkstyle/bugs/518/ thread.  I think there is a problem with the Indentation test when using arrays. The following line gives a problem (see attachment for complete code example):  test.getArrayOfStrings()[0] = ""A string"";  I'm using the Eclipse checkstyle plugin, but that imo just a gui for checkstyle, and the problem is in checkstyle itself.  Under Miscellaneous -> Indentation, I use the default check (basicOffset=4, braceAdjustment=0, caseInd=4).  When the line is indented on 8 positions (what we use) I get this message: Indentation: method call child at indentation level 8 not at correct indentation, 12 If I indent it at 12 position, I get another message: Indentation: method def child at indentation level 12 not at correct indentation, 8  There does not seem to be any way to validate the line, so I think this is a bug.  Source file https://gist.github.com/pavel-sakun/7d54890dc2bc39d8a802 config https://raw.githubusercontent.com/pentaho/pentaho-coding-standards/master/pentaho_checkStyle.xml  Error message: method call child at indentation level 4 not at correct indentation, 6","closed","approved,","pavel-sakun","2014-04-15T12:44:31Z","2014-12-17T06:43:09Z"
"","359","JavaDoc: UnusedImports check fails for inline @link tags in JavaDoc comments if linebreak is present","This is an issue that was already raised in #88, so you may want to just reopen #88. The problem occurs if the `{@link Qax}` tag contains a line break. This happens often in IntelliJ IDEA, which features a rather brutal Javadoc formatter.  _The following description is mostly copied from #88, but adapted for the line break case:_  The _UnusedImports_ check reports a violation in case an imported type is only referenced from within an inline `@link` tag (also if _processJavadoc_ is set to `true`), if that tag contains a line break:  ``` java import com.example.Qax;  /**  * @param T The bar. May be a rather longish description which placed the {@link  * Qax} at the end of a line.  */ public class Foo {}; ``` ##","closed","javadoc,","tsjensen","2014-11-13T17:03:27Z","2017-07-11T07:40:30Z"
"","184","Use a thread-safe map implementation to keep the compiled patterns.","This is a 1st step to make https://jira.codehaus.org/browse/MCHECKSTYLE-138 possible. There is surely a lot more to do.  Note that the old comment about Pattern itself not being thread-safe was wrong, only the Matcher instances created from a Pattern are not thread-safe.","closed","","kutzi","2014-07-13T09:54:33Z","2014-07-14T20:58:28Z"
"","572","BooleanExpressionComplexity misidentifies integer expression as boolean expression","this expression (names changed to protect the guilty): new Settings( Settings.RESIZABLE | Settings.SCROLLBARS | Settings.LOCATION_BAR | Settings.MENU_BAR | Settings.TOOL_BAR);  where    public Settings(int flags);  Causes a major violation of BooleanExpressionComplexity. However, this expression is not Boolean or boolean (http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22).","closed","high demand,","jasperreijer","2015-01-08T10:51:20Z","2015-02-25T23:36:00Z"
"","990","Replace all occurrences of FastStack with ArrayDeque, issue #86","This commit removes all remaining usages of `FastStack`. Removal is scheduled in #989.","closed","","mkordas","2015-04-25T22:25:48Z","2015-04-27T21:14:02Z"
"","651","Added missed @Test annotation on test-case","This commit adds missed @Test annotation on 'IndentationCheckTest.testMethodCallLineWrap' test-case. After adding annotation UT IndentationCheckTest runs successfully.","closed","","alex-zuy","2015-02-18T17:40:17Z","2015-02-18T17:56:19Z"
"","91","Checkstyle report","this change is based on my previous PR (pmd, findbug, ... ), if it is problem to apply I could rebase it after first is applied","closed","","romani","2014-01-30T08:20:16Z","2014-07-03T02:10:05Z"
"","890","Use entrySet iterator to fix FindBugs violations, issue #778","These methods accessed the value of a `Map` entry, using a key that was retrieved from a `keySet` iterator. It is more efficient to use an iterator on the `entrySet` of the map, to avoid the `Map.get(key)` lookup.  All violations of FindBugs rule [WMI: Inefficient use of keySet iterator instead of entrySet iterator](http://findbugs.sourceforge.net/bugDescriptions.html#WMI_WRONG_MAP_ITERATOR) are fixed.","closed","","mkordas","2015-03-29T16:31:54Z","2015-04-27T21:15:55Z"
"","181","Editorial changes to the documentation","These are editorial changes in several of the check configuration documentation pages.  The one exception is the NoClone section, which was significantly cut down.","closed","","peteroupc","2014-07-12T00:58:27Z","2014-07-14T21:36:26Z"
"","321","Unsatisfiable Indentation module scenario (Checkstyle 5.8 or 5.9 regression)","There seems to be an issue with indentation tracking when multiple lines are used as part of annotations.  Here's an example with Jackson annotations:  ``` import com.fasterxml.jackson.annotation.JsonSubTypes; import com.fasterxml.jackson.annotation.JsonSubTypes.Type;  @JsonSubTypes({     @Type(value = Boolean.class, name = ""boolean""),     @Type(value = String.class, name = ""string"") }) public class CheckstyleIndentationError { } ```  then checkstyle incorrectly says   > ""'public' have incorrect indentation level 0, expected level should be 4.""  ``` import com.fasterxml.jackson.annotation.JsonSubTypes; import com.fasterxml.jackson.annotation.JsonSubTypes.Type;  @JsonSubTypes({     @Type(value = Boolean.class, name = ""boolean""),     @Type(value = String.class, name = ""string"") })     public class CheckstyleIndentationError { } ```  After indenting 'public' by 4 spaces, checkstyle correctly says   > ""'class def modifier' have incorrect indentation level 4, expected level should be 0.""   This does not reproduce in Checkstyle 5.7, not tested on Checkstyle 5.8.   ```                      ```","closed","","asheldon","2014-10-21T19:46:33Z","2015-02-11T21:03:57Z"
"","429","New profile for quick build without any report and checks has been created","There is no issue, but we need it as for me","closed","","sabaka","2014-12-02T20:13:37Z","2014-12-02T20:58:31Z"
"","215","strange problem with ParameterNumber during checkstyle build","There is build failure  https://travis-ci.org/checkstyle/checkstyle/jobs/31290616 between on commit:  ``` commit 02e6ed40387d10a17db48446e8856bbd644f04da Author: Roman Ivanov  Date:   Wed Jul 30 17:44:09 2014 -0700      TODO was removed ```  and there is not build failure on commit:  ``` commit 85265a9b287ec860ee5c4b690bd913874d60f03a Author: Jarmo Isotalo  Date:   Tue Jun 10 13:43:59 2014 +0300      Added the missing period ```  Problem is in http://checkstyle.sourceforge.net/config_sizes.html#ParameterNumber And violation is correct, but it did not failed before comment removal ?  When I single out that Check in separate config (1check.xml) and run against that file, it always fail on both versions of files.  ``` java -jar target/checkstyle-5.8-SNAPSHOT-all.jar -c 1check.xml src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java ```  1check.xml  ```                              ```  for now, I changed a Check config to let build pass.","closed","approved,","romani","2014-08-01T03:36:27Z","2015-09-09T21:00:43Z"
"","857","Use Java 7 Path.relativize() instead of complicated logic in Utils and Checker","There are two complicated algorithms with poor coverage that are introduced for one goal only - in error messages provide relative paths based on project basedir instead of absolute ones: - [Checker.normalize()](../blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L344) - [Utils.getStrippedFileName()](../blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java#L251)  My proposition is to replace them with standard Java 7 tool for the same task: [Path.relativize()](http://docs.oracle.com/javase/7/docs/api/java/nio/file/Path.html#relativize%28java.nio.file.Path%29)","closed","approved,","mkordas","2015-03-27T16:33:40Z","2015-03-31T18:25:54Z"
"","782","Fix non-compiling input for CustomImportOrder check","There are no classes directly under `com.google.common` package - such import was illegal.","closed","","mkordas","2015-03-14T14:42:03Z","2015-04-27T21:14:52Z"
"","674","Reference to JLS is not correct in PackageAnnotation documentation","There are couple of problems with [PackageAnnotation documentation](http://checkstyle.sourceforge.net/config_annotation.html#PackageAnnotation) - Link http://java.sun.com/docs/books/jls/third_edition/html/j3TOC.html redirects to http://docs.oracle.com/javase/specs/ - should be http://docs.oracle.com/javase/specs/jls/se5.0/html/j3TOC.html instead - _According to the Java JLS 3rd ed_ - JLS third edition is quite outdated. Do we want to upgrade here and refer to newer JLS? - Link should bring user to specified paragraph, not the table of contents - There is no section 7.4.1.1 in JLS for Java 7 and Java 8","closed","approved,","mkordas","2015-02-23T17:27:48Z","2015-03-10T06:28:25Z"
"","270","IndentationCheck: keep the same indentation level for syntactically parallel elements","There are cases with the indentation for syntactically parallel elements which should be handled properly by the check.  ``` In general, two continuation lines use the same indentation level  if and only if they begin with syntactically parallel elements. ```  In general, syntactically parallel elements are separators and operators which are at the same level of nesting. The level of nesting can be figured out by the opening/closing parenthesis.  E.g.:  a) each line is started with ""+"" as syntactically parallel elements of the same scope  ``` foo(""bar""     + ""baz""     + ""boo""); ```  b) each line is started with ""+"" but they are not syntactically parallel in same scope( see ""("" , "")"")  ``` foo(""bar""     + foo2(""bar""            + ""baz"")); ```  There is a more complicated case with builder pattern usage:  ``` private Something getSomething() {     return feedBuilder(""data"", ""/path"", ""ONE"", ""TWO"").addFiles(             zipBuilder(""file1"", ""file2"")                     .setUpdateFileSchedule(Schedule.longWork(new LocalTime(1, 0)))                     .addFiles(                             coolBuilder(""otherFile1"").build(),                             coolBuilder(""otherFile2"").build(),                             coolBuilder(""otherFile3"").build(),                             coolBuilder(""otherFile4"").build()                     ).build(),             zipBuilder(""resource1"", ""resource2"")                     .setUpdateFileSchedule(Schedule.work(new LocalTime(11, 0)))                     .addFile(coolBuilder(""data"").build())                     .build()             ).build(); } ```  where the first addFiles(...) method receives two parameters (the two zipBuilders) which separated by syntactically parallel elements "","". Each zipBuilder has its own parallel elements (calls of the setUpdateFileSchedule and addFiles methods) and so forth.  We also have to investigate other cases with parallel elements and put them into test inputs.  **NOTE:** the Indentation check's violations mustn't be conflicted with the current SeparatorWrapCheck and OperatorWrapCheck checks. ##","open","indentation,","rdiachenko","2014-09-04T21:16:55Z","2018-04-19T19:53:03Z"
"","683","Separate configuration for constructor max parameters","There are cases where all fields of a class are final or for other reasons there is need to have a constructor with all fields as parameters. It would be valuable to have a different policy on the max params on constructors due to such needs than the policy on the rest of the methods which actually should push to as less as possible parameters from the code quality point of view.","closed","","ckorakidis","2015-02-25T12:05:00Z","2015-03-01T08:04:14Z"
"","827","Resolve errors and warnings during Javadoc generation","There are a lot of problems, here is the sample:  ``` Generating C:\Projects\checkstyle\target\site\apidocs\help-doc.html... 66 errors 100 warnings [ERROR] Error while creating javadoc report:  Exit code: 1 - C:\Projects\checkstyle\src\main\java\com\puppycrawl\tools\checkstyle\api\DetailNode.java:37: error: reference not found      * @see JavadocTokenType             ^ C:\Projects\checkstyle\src\main\java\com\puppycrawl\tools\checkstyle\api\DetailNode.java:30: error: reference not found  * @see AbstractJavdocCheck         ^ C:\Projects\checkstyle\src\main\java\com\puppycrawl\tools\checkstyle\api\JavadocTokenTypes.java:976: error: block element not allowed within inline element : pre      * |--JAVADOC_TAG[1x0] : [@see #method(Processor, String)]        ^ C:\Projects\checkstyle\src\main\java\com\puppycrawl\tools\checkstyle\api\JavadocTokenTypes.java:778: error: block element not allowed within inline element : pre      * |--JAVADOC_TAG[3x0] : [@see org.apache.utils.Lists.Comparator#compare(Object)] ```","closed","approved,","mkordas","2015-03-20T22:24:12Z","2015-03-20T22:34:16Z"
"","505","Serious compatibility problems with versions 5.9, 6.0 and 6.1","The values of the constants declared in ""GeneratedJavaTokenTypes"" have changed (for no obvious reason) in versions 5.9, 6.0 and 6.1. Any CS extension for versions up to and including 5.8 will most likely not function with versions 5.9, 6.0 and 6.1. After recompilation with these versions, they will (most probably) function, but no longer with versions 5.8 and older.  I will attach the ""GeneratedJavaTokenTypes.java"" source file for versions 5.6, 5.7, 5.8, 5.9, 6.0, 6.1 and 6.1.1 for reference.  The file is identical for versions 5.6, 5.7 and 5.8. I'd call that the ""reference"".  In version 5.9 three new tokens were inserted (METHOD_REF = 28, DOUBLE_COLON = 84 and LAMBDA = 181) and all the constants were ""shifted up"" respectively.  In version 6.0 the 7 token types 146...152 were replaced with 9 tokens 146...154: The 7 original tokens were renamed and reordered, and ML_COMMENT was replaced with BLOCK_COMMENT_BEGIN+BLOCK_COMMENT_END+COMMENT_CONTENT. Also 2 new tokens were added: SINGLE_LINE_COMMENT_CONTENT = 184 and BLOCK_COMMENT_CONTENT = 185.  In versions 6.1 and 6.1.1 the constant values remain constant, compared with version 6.0.  Because the constant values are compiled into any CS extension, it is next to impossible to write an extension that is compatible with two or more of the CS versions 5.8, 5.9 and 6.0.  I propose that the original value be resurrected as quickly as possible and the compatibility problem with versions 5.9, 6.0 and 6.1 be documented. WRT the huge user base, the impact should absolutely be kept as small as possible.","closed","high demand,","aunkrig","2014-12-15T19:04:36Z","2014-12-30T17:17:51Z"
"","10","Add support for the Java 8 syntax","The upcoming Java 8 has a new language syntax that Checkstyle needs to support. The developer preview is quite stable and language syntax changes are not expected.  Besides that, the new language features might be an opportunity for new checks.  From RomanIvanov: please do ""1 question"" survey about Java8 support, without registration - https://www.surveymonkey.com/s/MNFHYSJ","closed","high demand,","pellaton","2013-10-04T06:49:17Z","2014-12-03T17:26:44Z"
"","331","New Check: SingleLineJavadocCheck","The single-line form may be substituted when there are no at-clauses present, and the entirety of the Javadoc block (including comment markers) can fit on a single line. ([link](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s7.1.1-javadoc-multi-line))  According to Javadoc API, there are two types of tags: main description tags and in-line tags. Main description tags must start at the beginning of a line (after any leading spaces and an optional asterisk) or it is treated as normal text ([prof](http://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javadoc.html#javadoctags)). Inline tags can be placed anywhere in the main description or in the comments for block tags. Inline tags are denoted by curly braces: {@tag}.  Should be implemented Check which will validate single-line Javadoc. If single-line Javadoc contains any at-clause tag, it should be reform to multi-line Javadoc. Check shouldn't force using single-line Javadoc. For example:   1) /*\* As of JDK 1.1, replaced by {@link #setBounds(int,int,int,int)} */  But should be:  /**  * As of JDK 1.1, replaced by {@link #setBounds(int,int,int,int)}  */   2) /*\* @throws CheckstyleException if an error occurs */  But should be   /**  * @throws CheckstyleException if an error occurs  */   3) /*\* An especially short bit of Javadoc. */  and  /**  * An especially short bit of Javadoc.  */   These Javadocs are both correct.","closed","","maxvetrenko","2014-10-22T22:14:09Z","2014-10-22T22:31:19Z"
"","149","added basenameSeparator configuration option for TranslationCheck","The separator for property file basenames was hardcoded to `_` in the TranslationCheck. The logic could be useful for non-translation files as well, though.In our case, we have multiple property files for different environments, e.g. `app-dev.properties` `app-stage.properties`, etc. These might not use `_` as the separator character.   This PR adds the configuration parameter `basenameSeparator` which defaults to `_` so there's no breaking changes.","closed","","pulse00","2014-05-21T11:55:33Z","2014-12-18T19:38:50Z"
"","843","removed duplicate section 'UniqueProperties'","The section [UniqueProperties](http://checkstyle.sourceforge.net/config_misc.html#UniqueProperties) is duplicated in the actual site. This commit removes the duplicate text.","closed","","michelemauro","2015-03-23T13:11:26Z","2015-03-23T18:03:30Z"
"","155","RequireThis triggers for static interface fields","The RequireThis check requires a this qualifier for fields of interfaces, which are inherently static.  This example is rejected by the check:  ``` public interface DoTimeStuff {   int MINUTE = 60;   int HOUR = 60 * MINUTE; } ```  ``` DoTimeStuff.java:13:19: Reference to instance variable 'MINUTE' needs ""this."". ```  This is related to http://sourceforge.net/p/checkstyle/bugs/298/","closed","","ghost","2014-06-09T19:48:57Z","2014-09-12T23:06:28Z"
"","31","Exclude some java.util classes from Class Fan out","The purpose of the ClassFanOutComplexityCheck is to ensure that classes don't get too complex and stay easy to maintain. Some classes are excluded from computation by default (like java.lang.*) because every java dev know about them and they don't increase the maintenance.  I'd like to propose to add the Java Collections too (Map, HashMap, List, ArrayList, etc) too since they're part of the language and every java dev know about them too (similar to the String class for example).  These classes are causing unnecessary class fan out violations on code.  Could you please consider excluding them?  See https://sourceforge.net/p/checkstyle/feature-requests/607/  The idea is to exclude the following which should be considered as part of the language now by all developers and thus shouldn't be counted as part of the class fan out:  ```         mIgnoredClassNames.add(""Class"");          // java.util.*         mIgnoredClassNames.add(""Map"");         mIgnoredClassNames.add(""List"");         mIgnoredClassNames.add(""HashMap"");         mIgnoredClassNames.add(""ArrayList"");         mIgnoredClassNames.add(""Locale""); ```","closed","discussion ongoing,","vmassol","2013-10-27T13:41:38Z","2013-12-02T23:04:03Z"
"","219","Issue #129:  getSomeArray()[2] = ""test""; is never indented correctly","The problem was that MethodCallHandler asks the parent handler for suggested indent level. Since Handler is never created for INDEX_OP operations, MethodCallHandler asks a higher level AssignHandler which gives a wrong indent. I've created a simple IndexHandler which does no check itself and returns own level if asked for suggested child level.","closed","","yudindi","2014-08-02T21:19:33Z","2014-08-04T23:07:23Z"
"","64","OneStatementPerLine should tolerate the Java 7 try-with-resources","The OneStatementPerLine keeps the Java code tidy. However, in Java 7, the new try-with-resources was added, which implies that several Closeable resources can be created within one try statement:  ``` try (Reader xml = toXML(data); Reader xslt = createXSLReader(); WritableByteBuffer out = createOutputBuffer();) {    ... } catch (final IOException e) {   ... } ```  OneStatementPerLine should be configurable to tolerate this use case. Or as a more generic solution, allow regexes for exceptions to the rule.","closed","discussion ongoing,","isopov","2013-11-17T10:40:28Z","2015-09-18T14:00:39Z"
"","663","CS6.3: New option IllegalTypeCheck#memberModifiers does not behave like other token list type properties","The implementation assumes - unlike implementation for other token type list properties - that tokens are separated by "", "" (comma and space). All other options of such type just use "","" as separator and trim the fragments afterwards. This way definitions with or without spaces after of before the comma separator work alike.  Because of this issue I cannot configure this new option as Multi-Check type in the eclipse-cs metadata - because this creates comma-only separated values in the resulting configuration file.  The code in IllegalTypeCheck#setMemberModifiers() should be fixed like this:  a) split only by comma b) trim space around trim fragments c) fix the list instantiation in this method which create a List with initial capacity of the parameter strings length","closed","approved,","lkoe","2015-02-21T11:42:32Z","2015-02-24T06:42:31Z"
"","951","Checkstyle GUI Improvements","The GUI is helpful for developers in understanding how the tree is stored, but it is missing some things to help make what it is displaying clear. 1) It would be helpful if the Java code display (bottom part) had line numbers and column numbers. The top part has all sort of references to these, but the bottom doesn't display it, making it hard to correlate the two easily. 2) It would be helpful if when you select a line in the tree display, it highlighted and scrolled into view the same area in the Java code below. Doing the reverse and putting the cursor into a specific position in the Java code while expanding and selecting the closest corresponding line in the tree would be nice too, but not really necessary.  ATTENTION: no extra dependencies should be introduced.  ##","open","approved,","rnveach","2015-04-20T01:10:46Z","2016-12-14T18:17:09Z"
"","582","Illegal syntax in a message value in Google Style","The Google Style config file has a message with illegal syntax for MessageFormat in WhitespaceAround (lines 72-73):  ```  ```  This seems to be undocumented in the Javadoc, but (in OpenJDK 8 at least) MessageFormat will treat empty braces as a format element, throwing an exception when it attempts to parse its empty contents as a number; an exception which, by issue #581, is left uncaught. The braces should be escaped as `'{}'`.","closed","","andreubotella","2015-01-15T03:04:44Z","2015-01-16T06:14:19Z"
"","941","google_checks.xml CustomImportOrder problem","The Google Java Style Guide [specifies the import ordering](https://google-styleguide.googlecode.com/svn-history/r130/trunk/javaguide.html#s3.3.3-import-ordering-and-spacing) to have `com.google` first, but _only_ if it is in the `com.google` package. That rule seems to be enforced in [google_checks.xml](https://github.com/checkstyle/checkstyle/blob/checkstyle-6.5/src/main/resources/google_checks.xml#L157) for everybody, even though the majority of people using these rules will probably not be writing code in that package.  This is a problem for people using these rules on their project, but importing Google code, like Guava. It seems like this would much more appropriately be applied with `SAME_PACKAGE` and a `samePackageMatchingDepth` of `2`.  It's also not clear to me that the [THIRD_PARTY_PACKAGE or STANDARD_JAVA_PACKAGE](https://github.com/checkstyle/checkstyle/blob/checkstyle-6.5/src/main/resources/google_checks.xml#L160) rule is correctly dividing things into separate groups [""one group per top-level package""](https://google-styleguide.googlecode.com/svn-history/r130/trunk/javaguide.html#s3.3.3-import-ordering-and-spacing). It seems [CustomImportOrder](http://checkstyle.sourceforge.net/config_imports.html#CustomImportOrder) needs an additional configuration option to separate `THIRD_PARTY_PACKAGE` into separate groups, and another flag to separate `STANDARD_JAVA_PACKAGE` into separate groups.  I'm not even sure there's a good workaround, short of copying/pasting the entire `google_checks.xml` file and manually modifying or deleting that rule. (I'm using the `checkstyle-maven-plugin`, so if anybody has any suggestions, along the lines of overriding only the `CustomImportOrder` rule directly in the `pom.xml` with the rest of the rules defined in the file, that'd be helpful). ##","closed","new feature,","ctubbsii","2015-04-17T19:35:15Z","2016-11-05T23:31:34Z"
"","787","Update Maven Plugins used by Travis profile","The following updates are needed: - `maven-surefire-plugin ............................. 2.9 -> 2.18.1` - `jacoco-maven-plugin .... 0.7.2.201409121644 -> 0.7.4.201502262128`  Moreover,  maven-surefire-plugin should be extracted to `pluginManagement`, so that the same version is used across the POM.","closed","approved,","mkordas","2015-03-15T00:56:11Z","2015-03-17T05:37:11Z"
"","790","Update ant-nodeps and wagon-ssh libraries","The following updates are available: - `ant-nodeps .... 1.7.1 -> 1.8.1` - `wagon-ssh ......... 1.0 -> 2.8`","closed","approved,","mkordas","2015-03-15T01:35:33Z","2015-03-25T17:03:41Z"
"","726","Provide versions of plugins available by default, issue #644","The following plugins didn't have their version specified: - maven-clean-plugin - maven-deploy-plugin - maven-install-plugin - maven-resources-plugin","closed","","mkordas","2015-03-08T20:56:17Z","2015-03-10T06:29:17Z"
"","862","False postive with GenericWhitespace on a "".""","The following code produces ""warning: GenericWhitespace '>' is followed by whitespace."" This is using checkstyle 6.1.1.  ``` Map rows; ```  The . in ""a>.row"" is causing the issue. Looks like the parser is expecting the next token to be ""("" and anything else is reported as a space.","closed","high demand,","shague","2015-03-27T23:01:10Z","2015-03-28T15:09:03Z"
"","378","Regexp illegalpattern regression from 5.8 to 6.1","The following check worked fine with 5.8, but reports false positives with 6.1:  ```                  ```  For the regex matching a sample, see: http://regex101.com/r/jG4aL7/1 The illegalPattern=false should make it report an error, when the pattern is NOT found in the file. But it reports the error even if the pattern normally matches it. Maybe the performance optimization commit in https://github.com/checkstyle/checkstyle/commit/1ca93bdf66b630e58d979ad2aa40f02e678db5cf is the cause here?","closed","","subes","2014-11-21T17:07:38Z","2015-02-24T10:36:44Z"
"","178","Editorial changes to Checkstyle documentation","The following are editorial issues I found while reading the Checkstyle documentation.  I will soon add additional issues here as I find them. ### LeftCurly - using property option  --> using the property ""option"" - take into account property maxLineLength    --> take into account the property ""maxLineLength"" ### RightCurly - using property option  --> using the property ""option"" ### VisibilityModifier - unless property protectedAllowed or packageAllowed is set   --> unless the properties ""protectedAllowed"" or ""packageAllowed"" are set - Note: Checkstyle 2 --> (new paragraph) Note: Checkstyle 2 - CMP (expand this abbreviation) - EJB 1.1 --> Enterprise JavaBeans (EJB) 1.1 - it is not longer necessary --> it is no longer necessary - hence the default --> so the default ### HideUtilityClassConstructor - Make sure that utility classes --> Makes sure that utility classes ### DesignForExtension - call the super method --> call the superclass's method. ### MutableException - exceptions (defined as any class name --> exception classes (classes with names - are immutable. That is, have only final fields   --> are immutable, that is, that they have only final fields - is very simple it checks --> is very simple: it checks - User can still mutates --> The user can still mutate - Throwable has --> Throwable has a - non final fields --> nonfinal fields - state thereby leading to code catching the exception to draw   --> state.  In both cases, code catching the exception could draw - pattern for name of exception class. --> Pattern for exception class names ### ThrowsCount - (default = 1) --> (1 by default) - part of a methods interface --> part of a method's interface - such as catch (Exception) --> such as the code `catch (Exception)` - but allows any sub-classes to be caught --> but any subclasses can be caught ### InnerTypeLast - Check nested (internal) --> Checks that nested (inner) ### LeftCurly - allows to not add a comma if both left and right curlys   --> doesn't check for a trailing comma if both the left and right curly brackets ### AvoidInlineConditionals - is this: --> is like this: - their company's coding standards forbids --> their company's coding standards forbid   (I prefer ""their employer's coding standards forbid"") ### EmptyStatement - (standalone ;) --> (standalone semicolon) ### EqualsAvoidNull - to see null check ... which is not necessary in the below example -->   to see null checks ... , which is not necessary in the example below - For example: --> For example, this code: - may have unexpected results  --> may have unexpected results. - has an affect on --> affects - Pre Java 5 --> Before Java 5, - even if null --> even if either object is null - Since, it is difficult --> Since it is difficult - I prefer:    - Pre Java 5 all IDENT + IDENT object concatenations would not cause a NullPointerException even if null.     --> Before Java 5, concatenations of two objects by name would not cause a NullPointerException even if either object is null.   - all ident concatenation is --> concatenations of two objects by name are ### EqualsHashCode - Hence, whenever --> Therefore, whenever - hash based --> hash-based (or: based on hashes) ### IllegalInstantiation - I prefer: In order to save memory and CPU cycles --> For performance reasons ### IllegalToken - to hard to maintain code --> to hard-to-maintain code - are non-obvious --> are not obvious - EJB --> Enterprise JavaBeans ### InnerAssignment - of for iterators --> of ""for"" iterators - in their own toplevel statement --> in their own top-level statement - like the above --> like the one given above, ### MagicNumber - are neither 0, 0.5, nor 1 --> are not 0, 0.5, or 1 ### MissingSwitchDefault - has ""default"" clause --> has a ""default"" clause ### RedundantThrows - declared in throws clause --> declared in a ""throws"" clause - subclass of another declared exception is allowed   -->  subclasses of another declared exception are allowed -  allows to control --> allows controlling - checkstyle --> Checkstyle - when logLoadErrors is set true --> when logLoadErrors is set to true ### SimplifyBooleanExpression - overly complicated --> overcomplicated ### SimplifyBooleanReturn - overly complicated --> overcomplicated - The Idea --> The idea ### NestedForDepth - (default = 1) --> (1 by default) ### NestedIfDepth - (default = 1) --> (1 by default) ### NestedTryDepth - (default = 1) --> (1 by default) ### NoClone - strange/hard to follow rules --> strange, hard-to-follow rules - it all situations --> in all situations -  Consequently, it is difficult to override correctly   --> This makes the method difficult to override correctly - Below are some of the rules/reasons why the clone method   --> Here are some rules for the clone method and reasons why it - is a copy constructor --> are a copy constructor - typed therefore no casting --> typed, so no casting - ... assume at this point [...] its super type ... -->   Suggested edit: And assume that at this point [...] a Square (that's the   beauty of polymorphism, but [...] its supertype). - The working solution (without knowing about all subclasses and doing    many casts) is to do the following (assuming correct clone implementation) -->   If Shape provides a correct clone implementation, a working solution is to   do the following - keep in mind if --> keep in mind that if ### IllegalCatch - Catching java.lang.Exception ... (move to ""Rationale"" paragraph) - catchs NPE, OutOfMemoryErrors --> catches NullPointerException,   OutOfMemoryError ### IllegalThrows - Declaring to throw --> Declaring that a method throws ### PackageDeclaration -  a class is has --> a class has ### JUnitTestCase - setUp(), tearDown()methods --> setUp() and tearDown() methods","closed","","peteroupc","2014-07-09T20:18:23Z","2014-07-17T00:29:30Z"
"","659","AnnotationLocationcheck parameter ""setAllowSamelineParametrizedAnnotation"" is a typo (Reopen #585)","The fix for #585 is incomplete, the member variable is changed alright - but the corresponding setter is not. This means configurations will still need to use the old, wrong property name - contradicting the current docs for Checkstyle 6.3.","closed","","lkoe","2015-02-20T23:23:31Z","2015-02-21T01:02:35Z"
"","909","Findbugs violation: AuditEvent.message is transient but isn't set by deserialization","The field com.puppycrawl.tools.checkstyle.api.AuditEvent.message is transient but isn't set by deserialization  BAD_PRACTICE    SE_TRANSIENT_FIELD_NOT_RESTORED     Not available   Medium  that violation is temporary suppressed in config/findbugs-exclude.xml but it have to be investigated and resolved.","closed","approved,","romani","2015-04-09T06:08:19Z","2015-05-16T00:05:04Z"
"","898","Missing documentation on parent requirements of RegexpSingleline","The fact that ""TreeWalker is not allowed as a parent of RegexpSingleline"" needs to be clear after reading http://checkstyle.sourceforge.net/config_regexp.html (link or explain, but don't leave the user with an error message or the requirement to read the documentation word by word from beginning to end).  A paragraph consisting of two words ""Parent"" and ""Checker"" is not sufficient (is it a recommendation, requirement, etc.?).  experienced with 6.6-SNAPSHOT","closed","approved,","krichter722","2015-04-05T21:53:39Z","2015-11-02T04:44:21Z"
"","844","UniqueProperties is duplicated in the documentation","The documentation of the check [UniqueProperties](http://checkstyle.sourceforge.net/config_misc.html#UniqueProperties) is duplicated.  [I made a simple pull request to remove the extra text](https://github.com/checkstyle/checkstyle/pull/843).","closed","","michelemauro","2015-03-23T13:13:35Z","2015-03-23T18:03:50Z"
"","710","CS6.4: New option VisibilityModifier#immutableClassCanonicalNames, either docs or setter is wrong","The documentation list a new property ""immutableClassCanonicalNames"" at the VisibilityModifier check. The setter in VisibilityModifierCheck, however, is named ""setImmutableClassNames"" - hence needs to be used in a check configuration as property ""immutableClassNames"".  This lack of attention to detail is a bit troubling, Checkstyle 6.3 already contained 3 of similar, unnecessary mistakes.","closed","high demand,","lkoe","2015-03-02T22:23:13Z","2015-03-04T22:30:11Z"
"","729","HiddenField docs for setterCanReturnItsClass contain invalid code example","The code example from http://checkstyle.sourceforge.net/config_coding.html#HiddenField:  ```             class Foo {                 int prop;                 Foo setProp(int prop) { this.prop = prop; }             } ```  will not compile, because setFoo() is missing a return statement.","closed","","Derbeth","2015-03-09T07:32:36Z","2015-03-10T06:19:41Z"
"","377","InnerAssignment and Lambda Expressions","The `InnerAssignment` check incorrectly reports assignment statements in a single statement lambda expression as inner assignments:  ``` java // Causes an ""avoid inner assignment"" checkstyle error button.setOnAction(e -> pressed = true);  // Does not cause an error button.setOnAction(e -> { pressed = true; }); ```","closed","","EvanCahill","2014-11-21T01:59:18Z","2014-12-11T20:56:10Z"
"","88","JavaDoc: UnusedImports check fails for inline @link tags in JavaDoc comments","The _UnusedImports_ check reports a violation in case an imported type is only referenced from within an inline `@link` tag (also if _processJavadoc_ is set to ""true""):  ``` import com.example.Qax;  /**  * @param T The bar. May be a {@link Qax}.  */ public class Foo {}; ```  The check will pass if e.g. a top-level `@see` tag is added which refers to the imported type.","closed","","gunnarmorling","2014-01-27T09:46:43Z","2014-06-12T08:42:36Z"
"","585","AnnotationLocationcheck parameter ""setAllowSamelineParametrizedAnnotation"" is a typo","That should be `setAllowSamelineParameterizedAnnotation` (missing 'e').","closed","approved,","hgschmie","2015-01-18T02:23:45Z","2015-02-21T23:38:41Z"
"","407","Fix cache usage in presence of filters","that issue was created base on: https://github.com/checkstyle/checkstyle/pull/137 That PR was closed as provided implementation is hack, it works, but it is hack.  Problems: 0) Current cache implementation does not consider  Filters and any Supporession mechanism of Checkstyle, but it should.  1) Chache should be validated by date of config and all suppression.xml(external files).   FYI: cache is used to let other tools/plugins cache validation results and skip validation process if file is not changed and it had no violation and config(s) is(are) not changed. That might be a reason of Eclipse-cs doesnot show all violations, and new violations appear after Eclipse restart or on other Eclispe instance.","closed","new feature,","romani","2014-12-02T06:17:48Z","2016-05-29T13:01:00Z"
"","928","Findbugs violation: inner class should be static","suppressed in findbugs-exclude.xml.  Both files have similar Tag implementation, it might be useful to create common implementation (I am not sure).  The class com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag could be refactored into a _static_ inner class   PERFORMANCE     SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS   82-250  Low  The class com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag could be refactored into a _static_ inner class  PERFORMANCE     SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS   70-246  Low","closed","approved,","romani","2015-04-13T23:57:56Z","2015-05-01T16:28:37Z"
"","208","Support annotations in TypeNameCheck","Support checking the type name of annotation types. Until now, only classes, interfaces, and enums can be checked.","closed","","tsjensen","2014-07-28T21:08:10Z","2014-07-28T22:47:25Z"
"","307","New Check: SummaryJavaDocCheck","SummaryJavaDocCheck (check for text before any at-clause), additionally we need to have list of forbidden phrases in the beginning of summary (regexp). [Google's Java style rule](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s7.2-summary-fragment)","closed","","maxvetrenko","2014-10-19T13:36:39Z","2014-10-21T06:13:23Z"
"","485","Bug in TreeWalker: My new check is called for wrong token type node(it subscribes to SUPER_CTOR_CALL but TreeWalker gives it the node of STRICTFP token type instead)","Steps to reproduce: git clone https://github.com/pirat9600q/checkstyle-tester bug cd bug git checkout checkstyle_bug ./launch.sh  Expected: maven generates report about checkstyle run against Guava sources code with only my (UselessSuperCtorCallCheck) check enabled in config.  Actual: NullPointerException in check`s code.  ``` java.lang.NullPointerException     at com.github.sevntu.checkstyle.checks.coding.UselessSuperCtorCallCheck.getMethodCallArgsCount(UselessSuperCtorCallCheck.java:123)     at com.github.sevntu.checkstyle.checks.coding.UselessSuperCtorCallCheck.visitToken(UselessSuperCtorCallCheck.java:93)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:448)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:541)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:373)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:207)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:73)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:263)     at org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:255)     at org.apache.maven.plugin.checkstyle.CheckstyleViolationCheckMojo.execute(CheckstyleViolationCheckMojo.java:532)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:347)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:154)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) ```  [source  code of failed check](https://github.com/pirat9600q/sevntu.checkstyle/blob/UselessSuperCtorCall_issue186/sevntu-checks/src/main/java/com/github/sevntu/checkstyle/checks/coding/UselessSuperCtorCallCheck.java)  To launch maven in debugger run following command: env MAVEN_OPTS=""-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y"" mvn checkstyle:check ""$@"" > target/console_log.txt  I set breackpoint at `visitToken(DetailAST aNode)` in checks code. Using debugger I figured out that check gets called with `TokenType.STRICTFP`. Values of this tokens types are successive: `TokenType.STRICTFP` = 42  `TokenType.SUPER_CTOR_CALL` = 43  I can not use filter in my check to fix this issue, because I will not be able to get node of SUPER_CTOR_CALL token type anyway.","closed","","romani","2014-12-10T20:39:49Z","2014-12-29T18:02:26Z"
"","937","UT to validate commit message","specification - https://github.com/checkstyle/checkstyle/wiki/Release-notes-automation#validation-of-last-commit-message-to-reference-issue-number","closed","approved,","romani","2015-04-16T23:11:41Z","2015-09-06T12:37:48Z"
"","938","Tool for release notes section generation for releasenotes.xml file","specification - https://github.com/checkstyle/checkstyle/wiki/Release-notes-automation#generator-of-xml-section-content-for-releasenotesxml-file  tool should be created to substitute https://github.com/checkstyle/contribution/tree/master/releasenotes-builder","closed","miscellaneous,","romani","2015-04-16T23:14:40Z","2015-12-20T00:03:33Z"
"","142","java8: Demand types for lambda","Sources: http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html  ``` Arrays.sort(rosterAsArray,     (Person a, Person b) -> {         return a.getBirthday().compareTo(b.getBirthday());     } ); ```  could be written as:   ``` Arrays.sort(rosterAsArray,     (a, b) -> {         return a.getBirthday().compareTo(b.getBirthday());     } ); ```  Rationale: I do believe it will be style question to be verbose (""(Person a, Person b)"") or short (""(a, b)"") in lambda arguments declaration. ##","open","","romani","2014-05-07T00:47:50Z","2022-07-10T13:45:54Z"
"","141","java8: Use constructor reference in place of lambda","Sources at http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html  > Consequently, you can invoke the method transferElements with a lambda expression as follows: >  > Set rosterSetLambda = >     transferElements(roster, () -> { return new HashSet(); }); >  > You can use a constructor reference in place of the lambda expression as follows: >  > Set rosterSet = transferElements(roster, HashSet::new); >  > The Java compiler infers that you want to create a HashSet collection that contains elements of type Person. Alternatively, you can specify this as follows: >  > Set rosterSet = transferElements(roster, HashSet::new);  Rationale: check could detect lambda usage ""() -> { return new HashSet(); }"" and demand ""HashSet::new"" ##","open","new module,","romani","2014-05-07T00:42:42Z","2016-12-14T18:17:02Z"
"","143","java8: Skip scope braces for single line lambdas","source: http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html  Skip scope braces for single line lambdas  ```         Arrays.sort(rosterAsArray,             (Person a, Person b) -> {                 return a.getBirthday().compareTo(b.getBirthday());             }         ); ```  vs  ```         Arrays.sort(rosterAsArray,             (Person a, Person b) ->                  a.getBirthday().compareTo(b.getBirthday())         ); ``` ##","open","new module,","romani","2014-05-08T05:12:22Z","2016-12-14T18:17:03Z"
"","265","New Check: Utf8EncodingCheck","Source files have to be UTF-8 encoded: http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s2.2-file-encoding","closed","","rdiachenko","2014-09-02T19:43:54Z","2014-09-03T17:31:51Z"
"","130","parser problem - TreeWalker exception","Source code: http://grepcode.com/file_/repo1.maven.org/maven2/org.springframework/spring-core/2.5.4/org/springframework/core/io/ByteArrayResource.java/?v=source  Error from Eclipse-cs the same from ""Eclipse Checkstyle AST-Viewer"": TreeWalker: Got an exception - expecting EOF, found '}' ByteArrayResource.java  /org.springframework.core/src/main/java/org/springframework/core/io line 125","closed","antlr,","romani","2014-04-15T16:22:07Z","2014-07-28T22:53:11Z"
"","507","Partial fix for #46 - Sonarqube found problems in Checkstyle","Sonarqube issues 'Constants should be declared ""final static"" rather than merely ""final""' and 'Constant names should comply with a naming convention' are fixed","closed","","mkordas","2014-12-15T21:20:20Z","2014-12-20T13:07:34Z"
"","365","Update Documentation in Javadoc Checks.","Some Javadoc Checks have documentation as ""Some Javadoc"", this looks horrible and it need to be fixed.","closed","","maxvetrenko","2014-11-16T14:43:36Z","2014-11-21T17:49:01Z"
"","147","update UI application to highlight selected element in tree","smth like: https://lh3.googleusercontent.com/-CAzf3LPGsuU/U3oL8nS6B0I/AAAAAAAACTU/tme-lKhEV3k/s320/def_methods.png  will be very useful.","closed","","romani","2014-05-19T17:54:51Z","2016-03-23T13:53:11Z"
"","622","Fix table display","Small fix to display of the properties table for EmptyLineSeparator.","closed","","Mebibyte","2015-02-08T18:23:45Z","2015-02-18T18:20:11Z"
"","156","Added method to clear cache","Since there is no way to clear the cache, let's make it possible for the Checkstyle API users. Cache makes it impossible to change language for error messages at runtime.","closed","","josalmi","2014-06-10T10:38:27Z","2014-07-31T00:44:50Z"
"","658","Typo in new option IllegalThrowsCheck#ignoreOverridenMethods","Should rather be ""ignoreOverriddenMethods"".  I've hinted at this before, check names and properties are the ""public API"" of Checkstyle. Changing them potentially breaks thousands configurations. Extra care is advisable when introducing new options to avoid unnecessary API changes afterwards.","closed","","lkoe","2015-02-20T22:50:55Z","2015-02-20T23:08:21Z"
"","57","IllegalType does not check package/imports of type","SF issue: 530 Creator: Jem Mawson  http://checkstyle.sourceforge.net/config_coding.html#IllegalType  IllegalType will fail on a type with the same classname as an illegal type, without checking the package of that classname.  For example, the fj library at functionaljava.org has fj.data.HashMap. This does not implement java.util.Map and so cannot be declared as a Map.  Checkstyle will consider ""HashMap map;"" to be an illegal type, because it does not differentiate between fj.data.HashMap and java.util.HashMap.","closed","approved,","romani","2013-11-13T07:37:03Z","2015-03-12T20:13:24Z"
"","76","SuppressionCommentFilter ignores messageFormat","SF issue: 520  Created: 2008-07-16 Creator: Chris Brigham   SuppressionCommentFilters ignore their messageFormats if their checkFormat regex patterns match the check that triggered the event.   Expected: messageFormats should apply as ""AND"" after match for checkFormat. This bug also breaks the example present on http://checkstyle.sourceforge.net/config.html so it have to resolved.  SyncError.java, without changing config, change in file ""2"" to ""3"". in case of ""3"" violation have to be present.  ``` import java.util.concurrent.ExecutionException; import java.util.zip.DataFormatException;  public class SyncError {      // ThrowsCount OFF: 2     protected void beginTransaction1() throws ExecutionException, DataFormatException {         // ...     }     // ThrowsCount OFF: 2   } ```  my_checks.xml:  ```                                                                                                        ```  Command:  ``` java -cp file:///home/rivanov/java/git-others/checkstyle/target/checkstyle-5.7-SNAPSHOT-all.jar com.puppycrawl.tools.checkstyle.Main -c my_checks.xml SyncError.java  ```","closed","approved,","romani","2013-12-08T07:17:56Z","2014-06-08T22:35:00Z"
"","68","NoWhiteSpaceAfter with array declarations","SF issue: 504 Created: 2008-02-27 Creator: deusi  http://checkstyle.sourceforge.net/config_whitespace.html#NoWhitespaceAfter  One cannot check for a white space after an array declaration, e.g.  ``` Object [] blayedda = { .. } ```  should be written as  ``` Object[] blayedda = { .. } ```  Seems that the AST is in both cases the same.","closed","approved,","romani","2013-11-27T06:09:48Z","2014-12-30T17:09:50Z"
"","79","IndentationCheck, option caseIndent works strange","SF issue: 495 Created: 2007-11-30 Creator: Austin Hastings   option caseIndent=0 should make following code a valid.  Check: http://checkstyle.sourceforge.net/config_misc.html#Indentation  ``` public class SyncError {      protected void begin(){         int i=0;         switch (i)         {         case 1: i++;         default: i++;         }     }  } ```  detected: ""Indentation: block child at indentation level 16 not at correct indentation, 24""","closed","approved,","romani","2013-12-09T07:31:55Z","2014-12-19T22:17:11Z"
"","78","IllegalType inccorectly detect type with illegalClassNames","SF issue: 478  Created: 2007-04-17 Creator: Julien De Santis-Caron  here is the definition of our check:  ```                                       ```  Unfortunately, this check is positive if we use any class in the classpath that have the same file name than the classes specified.  for instance, we have a jar in the classpath containing a class with the canonical name : test.Calendar,  if we use this class like the following:  ``` package test.mytest; import test.Calendar; public class MyClass {     Calendar cal = AnObject.getInstance().getTestCalendar();    java.util.Date date = null;  } ```  We get a false positive return for the illegalTypeCheck like this:  Declaring variables, return values or parameters of type 'Calendar' is not allowed.  Observe that for some errors, the illegalTypeCheck returns Declaring variables, return values or parameters of type 'java.util.Date' is not allowed.  Notice also that test.Calendar does not extend nor use in any way the specified java.util.Calendar.","closed","approved,","romani","2013-12-09T04:21:34Z","2015-01-06T23:02:38Z"
"","74","RedundantThrowsCheck raise strange violation","SF issue: #481 Creator: Tim Vernum   http://checkstyle.sourceforge.net/config_coding.html#RedundantThrows  do not try to compile this code, if compilation is successful  violation disappear as Exception classes appear in class path.  ``` import javax.transaction.NotSupportedException; import javax.transaction.SystemException;  public class ShowError {     protected void beginTransaction() throws NotSupportedException, SystemException {         // ...     }  } ```  Violation: ""    - Redundant Throws: Redundant throws: 'SystemException' listed more then one time.""  Expected: message that Check can not find classes in classpath.","closed","approved,","romani","2013-12-08T04:49:26Z","2014-12-21T20:28:41Z"
"","124","Pull Request for issue 119 (HTML comments break the Javadoc style HTML check)","See https://github.com/checkstyle/checkstyle/issues/119 for details","closed","","theqaguy","2014-03-24T07:59:57Z","2014-07-10T04:59:15Z"
"","931","""'extends' is followed by whitespace"" error thrown in 6.3","Running checkstyle against this example method:  ``` public void foo(List","closed","approved,","athrog","2015-04-14T14:44:01Z","2015-04-19T06:44:17Z"
"","542","NPE in NoWhitespaceAfterCheck","Run checkstyle with parameters ""-c sun_checks.xml -r src/main/java"" for Checkstyle code to receive the following: java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.isCstyleArrayDeclaration(NoWhitespaceAfterCheck.java:180)     at com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.visitToken(NoWhitespaceAfterCheck.java:113)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:448)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:541)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:373)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:207)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:77)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:263)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:129)","closed","","ychulovskyy","2014-12-25T18:05:28Z","2014-12-30T17:09:35Z"
"","540","Unable to instantiate RedundantThrows when run checkstyle with ""-c sun_checks.xml"" parameter","Run checkstyle code from master with parameters: -c sun_checks.xml -r src/main/java Error: Unable to create Checker: cannot initialize module TreeWalker - Unable to instantiate RedundantThrows com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Unable to instantiate RedundantThrows at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:180)     at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:185)     at com.puppycrawl.tools.checkstyle.Main.createChecker(Main.java:151)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:128)","closed","","ychulovskyy","2014-12-25T17:52:32Z","2014-12-26T05:18:33Z"
"","942","Fix PMD violations from 'optimizations' ruleset in Checkstyle","Rules to be enabled: - AvoidInstantiatingObjectsInLoops - probably some suppressions needed  - LocalVariableCouldBeFinal - do we want all local variables to be final where possible? - MethodArgumentCouldBeFinal - do we want all parameters variables to be final where possible? - PrematureDeclaration - reasonable, we can fix that - RedundantFieldInitializer - very simple to fix - SimplifyStartsWith - will decrease readability, possible coverage decrease - UseStringBufferForStringAppends - will decrease readability, probably some suppressions needed","closed","approved,","mkordas","2015-04-17T23:41:28Z","2015-04-20T21:31:48Z"
"","49","Support JavaDoc and comments in ANTLR grammar","Right now we support JavaDoc as manual parsing and RegExp validation - that is not reliable. We need to update our ANTLR grammar to support comments (singleline and multiline) and JavaDoc.  FYI: https://groups.google.com/forum/?hl=en#!topic/checkstyle-devel/vwaV8dc4pYw  Java6 grammar (might be reasonable to combine efforts on grammar creation):  http://www.antlr3.org/grammar/list.html (https://github.com/antlr/grammars-v4)  Do a google , looks like we are not alone, and smth happen outside :).","closed","approved,","romani","2013-11-09T04:45:16Z","2014-11-10T09:24:21Z"
"","352","release process: use ssh instead of manual file upload to sourceforge","right now we do manual files upload to sourceforge site during release https://github.com/checkstyle/checkstyle/wiki/How-to-make-a-release#update-artifacts   but we can do it automatically: https://sourceforge.net/p/forge/documentation/File%20Management/","closed","","romani","2014-11-02T01:27:07Z","2016-03-23T13:53:57Z"
"","809","Rewrite POM according to canonical ordering and introduce Tidy Maven Plugin","Right now Checkstyle's POM do not follow [canonical ordering](http://maven.apache.org/developers/conventions/code.html#POM_Code_Convention).  There is nice plugin to make sure that POM has correct order of entries. More info [here](http://mojo.codehaus.org/tidy-maven-plugin/index.html).  It can be incorporated into build by adding  ``` xml    org.codehaus.mojo   tidy-maven-plugin   1.0-beta-1               validate       validate                check                 ```","closed","approved,","mkordas","2015-03-16T22:19:47Z","2015-03-17T21:28:27Z"
"","554","all quality reports should be deployable not only in distro profile","Right now after generating web site as ""mvn clean package -Pdistro"" we have a lot of quality reports , but during release we have only 3 reports http://checkstyle.sourceforge.net/project-reports.html  Required: most likely we do not need distro profile any more, we need to have all reports to be part of static web site.","closed","approved,","romani","2014-12-30T00:43:47Z","2015-02-10T00:41:09Z"
"","489","switch Checkstyle and all resources to UTF-8 encoding","right not we use   ``` iso-8859-1 ```  should be UTF-8.  InputGrammar.java file from non-compilable folder should be moved to compilable area.","closed","approved,","romani","2014-12-11T19:23:45Z","2015-01-09T16:46:14Z"
"","602","Custom Import Order Check, rewrote compare method, issue #234","Rewrote method compare, now it has single exit point, contains 3 times less code and it's readable.","closed","","alexkravin","2015-01-27T12:00:26Z","2015-01-29T06:17:35Z"
"","767","Resolved warnings during '-all.jar' generation, issue #756","Resolved warnings during project assembling (building -all.jar)","closed","","alexkravin","2015-03-13T12:58:35Z","2015-04-28T21:47:32Z"
"","995","PMD violations: UncommentedEmptyMethod","Resolve violations that do make sense (please do not fanatically follow PMD recommendations):  [INFO] --- maven-pmd-plugin:3.4:check (default-cli) @ checkstyle --- [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.DefaultLogger:148 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.DefaultLogger:154 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck:57 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck:63 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck:69 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck:88 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AutomaticBean:233 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AutomaticBean:247 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:129 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:136 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:145 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:154 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:162 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:170 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter:75 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter:81 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter:87 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck:195 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck:78 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.AbstractHeaderCheck:231 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck:99 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck:108 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck:117 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck:126 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck:183 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractComplexityCheck:70 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractComplexityCheck:80 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.AbstractCellEditor:114 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:103 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:264 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.FileDrop$FileDropTargetListener:332 Rule:UncommentedEmptyMethod Priority:3 Document empty method. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.ParseTreeModel:114 Rule:UncommentedEmptyMethod Priority:3 Document empty method.","closed","approved,","romani","2015-04-26T16:39:28Z","2015-06-24T05:46:52Z"
"","996","PMD violations: PreserveStackTrace","Resolve violations that do make sense (please do not fanatically follow PMD recommendations):  [INFO] --- maven-pmd-plugin:3.4:check (default-cli) @ checkstyle --- [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:162 Rule:PreserveStackTrace Priority:3 New exception is thrown in catch block, original stack trace may be lost. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader:335 Rule:PreserveStackTrace Priority:3 New exception is thrown in catch block, original stack trace may be lost. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:140 Rule:PreserveStackTrace Priority:3 New exception is thrown in catch block, original stack trace may be lost. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PackageObjectFactory:148 Rule:PreserveStackTrace Priority:3 New exception is thrown in catch block, original stack trace may be lost. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.AbstractHeaderCheck:159 Rule:PreserveStackTrace Priority:3 New exception is thrown in catch block, original stack trace may be lost. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck:142 Rule:PreserveStackTrace Priority:3 New exception is thrown in catch block, original stack trace may be lost. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:68 Rule:PreserveStackTrace Priority:3 New exception is thrown in catch block, original stack trace may be lost. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:169 Rule:PreserveStackTrace Priority:3 New exception is thrown in catch block, original stack trace may be lost. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:174 Rule:PreserveStackTrace Priority:3 New exception is thrown in catch block, original stack trace may be lost. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionsLoader:117 Rule:PreserveStackTrace Priority:3 New exception is thrown in catch block, original stack trace may be lost. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionsLoader:170 Rule:PreserveStackTrace Priority:3 New exception is thrown in catch block, original stack trace may be lost.","closed","approved,","romani","2015-04-26T16:41:38Z","2015-10-08T01:13:09Z"
"","997","PMD violations: EmptyMethodInAbstractClassShouldBeAbstract","Resolve violations that do make sense (please do not fanatically follow PMD recommendations):  [INFO] --- maven-pmd-plugin:3.4:check (default-cli) @ checkstyle --- [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck:56 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck:62 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck:68 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck:87 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:128 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:135 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:144 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:153 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:161 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:169 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck:194 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.AbstractHeaderCheck:230 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck:98 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck:107 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck:116 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck:125 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck:182 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractComplexityCheck:69 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractComplexityCheck:79 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:102 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:263 Rule:EmptyMethodInAbstractClassShouldBeAbstract Priority:1 An empty method in an abstract class should be abstract instead.","closed","approved,","romani","2015-04-26T16:51:45Z","2015-06-24T04:21:57Z"
"","974","PMD violation: ConfusingTernary","resolve all reasonable violations from PMD rule ConfusingTernary beware that sevntu.checkstyle also have similar Check if our implementation is more functional we might use our Check instead.  ``` --- maven-pmd-plugin:3.5:check (default-cli) @ checkstyle --- Rule:ConfusingTernary Priority:3 Avoid if (x != y) ..; else ..;.  ConfigurationLoader:338  Main:330  XMLLogger:194  api.DetailAST:116  checks.AbstractDeclarationCollector:216  checks.AvoidEscapedUnicodeCharactersCheck:255  checks.SuppressWarningsHolder:217  checks.annotation.AnnotationLocationCheck:229  checks.annotation.MissingDeprecatedCheck:221  checks.annotation.SuppressWarningsCheck:159  checks.annotation.SuppressWarningsCheck:255  checks.blocks.EmptyBlockCheck:196  checks.blocks.NeedBracesCheck:300  checks.blocks.RightCurlyCheck:328  checks.coding.DeclarationOrderCheck:220  checks.coding.EqualsAvoidNullCheck:382  checks.coding.ModifiedControlVariableCheck:325  checks.coding.MultipleStringLiteralsCheck:96  checks.coding.OneStatementPerLineCheck:172  checks.coding.VariableDeclarationUsageDistanceCheck:508  checks.design.ThrowsCountCheck:167  checks.imports.ImportControlLoader:113  checks.imports.PkgControl:117  checks.indentation.BlockParentHandler:273  checks.indentation.ForHandler:52  checks.indentation.HandlerFactory:142  checks.javadoc.TagParser:104  checks.javadoc.WriteTagCheck:189  filters.SuppressElement:105  filters.SuppressElement:120  filters.SuppressWithNearbyCommentFilter$Tag:325  filters.SuppressionCommentFilter$Tag:343  filters.SuppressionCommentFilter$Tag:356  filters.SuppressionCommentFilter$Tag:449   ```","closed","approved,","romani","2015-04-23T23:13:52Z","2015-10-08T01:13:45Z"
"","42","fix for #41 RequireThisCheck doesn't check methods","RequireThisCheck doesn't check methods and fields that are declared below usage","closed","","isopov","2013-10-30T16:13:26Z","2014-06-26T02:20:07Z"
"","748","Add post fields for Mailing List page, issue #743","Requires the group to allow posting by email. This can be set by going to Settings -> Group Settings -> Posting Options -> Allow posting by email.","closed","","Mebibyte","2015-03-11T18:01:14Z","2015-03-12T07:20:47Z"
"","300","[Feature request] Add an option to NeedBraces to allow one line statements without braces","Requesting an option in NeedBraces module to allow if statements without curly braces if they fit on line line.  For example:  ``` if (herp.isValid()) return herp; ```","closed","approved,","liutikas","2014-10-14T17:09:27Z","2015-07-11T06:47:31Z"
"","157","Got an exception - expecting '5', found '2'","Reproduce with:  ``` java import java.util.HashSet; import java.util.Set;  public class Main {     final static Set m = new HashSet();      static {         m.add('\u005C\u0027');  //Exception on this line     }      public static void main(String[] args) {     } } ```","closed","antlr,","softarn","2014-06-16T15:40:17Z","2015-09-27T00:35:19Z"
"","363","Minor fix in PropertyCacheFile Javadoc.","Removed redundant whitespaces in PropertyCacheFile Javadoc.","closed","","maxvetrenko","2014-11-14T12:35:45Z","2014-12-18T22:52:12Z"
"","811","Removed AvailableChecks page, updated corresponding UT, updated README","Removed AvailableChecks page. Updated UT and README","closed","","alexkravin","2015-03-16T23:23:31Z","2015-03-17T16:30:14Z"
"","765","Move utils#661","Removed all printStackTrace() from the whole code, #660   Moved all method from checkstyle.api.Utils to checkstyle.Utils, removed checkstyle.api.Utils at all, #661","closed","","alexkravin","2015-03-13T12:18:49Z","2015-03-15T13:30:39Z"
"","511","Remove Abstract Type Aware Check from Checkstyle, issue #473","Removed AbstractTypeAwareCheck and all its subclasses, UTs and UT inputs which were used only by them. Removed JavadocMethodCheck from checkstyle_checks.xml","closed","","alexkravin","2014-12-18T15:02:29Z","2014-12-19T17:42:07Z"
"","523","Remove StrictDuplicateCodeCheck and whole package","remove whole  com.puppycrawl.tools.checkstyle.checks.duplicates package from Checkstyle.  Reason: searching duplicate code by strict code comparison is the most error prone approach in static code analysis, as created dependency between classes (caused by following Chckstyle instructions) is more problematic that code duplication. Another reason is that identical code does not mean that it describe the same and could be shared.","closed","approved,","romani","2014-12-19T23:55:45Z","2015-02-24T06:54:49Z"
"","925","Findbugs violation: resolve all violations from gui package","remove suppression from findbugs-exclude.xml  Violations: Class com.puppycrawl.tools.checkstyle.gui.TreeTableModelAdapter defines non-transient non-serializable instance field treeTableModel    BAD_PRACTICE    SE_BAD_FIELD    Not available   Low  The class com.puppycrawl.tools.checkstyle.gui.ParseTreeInfoPanel$1 could be refactored into a named _static_ inner class    PERFORMANCE     SIC_INNER_SHOULD_BE_STATIC_ANON     315-320     Low  Load of known null value in new com.puppycrawl.tools.checkstyle.gui.ParseTreeInfoPanel()    STYLE   NP_LOAD_OF_KNOWN_NULL_VALUE     275     Low Class com.puppycrawl.tools.checkstyle.gui.ParseTreeInfoPanel defines non-transient non-serializable instance field parseTreeModel   BAD_PRACTICE    SE_BAD_FIELD    Not available   Low  Call to swing method in com.puppycrawl.tools.checkstyle.gui.Main.main(String[]) needs to be performed in Swing event thread     BAD_PRACTICE    SW_SWING_METHODS_INVOKED_IN_SWING_THREAD    44  Low","closed","approved,","romani","2015-04-13T06:43:56Z","2015-05-15T20:24:46Z"
"","899","Update Apache Commons Lang to 3.4","Release notes are available at http://commons.apache.org/proper/commons-lang/release-notes/RELEASE-NOTES-3.4.txt","closed","approved,","mkordas","2015-04-06T20:53:41Z","2015-04-06T21:37:11Z"
"","587","Prefixes merged#512","Refactored Checkstyle project, removed m prefixes from fields and a prefixes from method params, updated checkstyle_checks.xml to not take care about these prefixes","closed","","alexkravin","2015-01-19T20:46:42Z","2015-01-21T01:15:50Z"
"","537","refactoring: remove copy-paste of messages from UTests","Refactor all Tests to remove copy paste of messages and get them from property-files  Good code: https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/test/java/com/github/sevntu/checkstyle/checks/design/InnerClassCheckTest.java https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/test/java/com/github/sevntu/checkstyle/BaseCheckTestSupport.java#L168  ho it is now: https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java#L48","closed","approved,","romani","2014-12-24T20:28:04Z","2015-02-20T16:07:48Z"
"","82","website: redirect github pages to http://checkstyle.sourceforge.net","redirect github pages to http://checkstyle.sourceforge.net/  instructions: https://help.github.com/articles/setting-up-a-custom-domain-with-pages","closed","approved,","romani","2013-12-29T07:05:16Z","2015-01-23T04:41:18Z"
"","755","Check that field and method operator . is not at the end of line.","Recently I saw some code with multiple chained method calls with the following style:  ``` java ImmutableList.builder().         add(1).         add(2).         add(3); ```  I would like Checkstyle to enforce the following style:  ``` java ImmutableList.builder()         .add(1)         .add(2)         .add(3); ```","closed","","gaul","2015-03-12T05:00:24Z","2015-03-12T15:22:49Z"
"","231","New Check: CustomImportOrderCheck","Reason:  1) no way to group all statics in one group in existing Check. 2) ""com.google imports"" - is request to put in second group all import from the same parent package. That have to be provided by user, for example could be ""com.github"" for file com.gihub.sevntu.checkstyle - it will mean that group will contain any imports from that domain name ""com.github"". 3) it is could not be defined as RegExp, do not offer RegExp that more then 50 symbols in length. 4) could be described as RegExp. 5) could be described as RegExp.  Summary: describe that structure by RegExp will be too hard. I propose new Check (CustomImportOrderCheck) that will let user described structure of imports by macroses with RegExp inside them or parameters. Example: STATIC###SAME_PACKAGE(2)###THIRDPARTY_PACKAGE###PACKAGE(java.)###PACKAGE(javax.)  Need to implement next properties: 1) groupsOrdering. This property will contain custom import group ordering. For example: STATIC ### SAME_PACKAGE (n) ### THIRPARTY_PACKAGE ### STANDARD_JAVA_PACKAGE where: STATIC - group with static imports; SAME_PACKAGE (n) - group where imports' domains same as a package domain. 'n' - number of first package domains. For example:  package com.revere.io;  import com.revere; import com.revere.io; import com; import com.revere.io.Logger;  And we have such config: SAME_PACKAGE (2). Same package imports are com.revere and com.  THIRDPARTY_PACKAGE - all imports except STATIC, SAME_PACKAGE(n) and STANDARD_JAVA_PACKAGE. These imports should be checked in the last ones.  STANDARD_JAVA_PACKAGE - java.|javax. packages.  Ordering of checking: STATIC -> SAME_PACKAGE(n) -> STANDARD_JAVA_PACKAGE  ->THIRPARTY_PACKAGE  2) standardRegExp - regexp for STANDARD_JAVA_PACKAGE group. 3) thirdPartyRegExp for THIRPARTY_PACKAGE group.  4) separateLineBetweenGroups - force empty line separator between groups.  5) sortImportsInGroupAlphabetically - force grouping alphabetically","closed","","maxvetrenko","2014-08-09T23:38:17Z","2014-08-11T02:01:55Z"
"","803","Deprecate FastStack in favor of ArrayDeque, issue #86","Reason for each change is explained in commit messages.","closed","","mkordas","2015-03-15T20:56:12Z","2015-04-27T21:14:47Z"
"","861","Added test method for Utils.isPatternValid() method","Pull #861","closed","","damianszczepanik","2015-03-27T22:26:12Z","2015-03-27T22:42:21Z"
"","835","Added Utils.isPatternValid method to hide try-catch blocks when parsing is used only for validation","Pull #835","closed","","damianszczepanik","2015-03-21T17:05:42Z","2015-03-22T10:32:11Z"
"","833","Reduce complexity in indentation/HandlerFactory class by grouping catch blocks","Pull #833","closed","","damianszczepanik","2015-03-21T08:23:19Z","2015-03-22T07:39:47Z"
"","825","Sonar violation: Catch Exception instead of Throwable.","Pull #825","closed","","damianszczepanik","2015-03-20T21:36:10Z","2015-03-24T22:01:33Z"
"","725","Fixed EOL in tests to make them platform independent.","Pull #725","closed","","damianszczepanik","2015-03-08T16:09:13Z","2015-03-08T21:02:49Z"
"","213","Bug in RightCurlyCheck","public class Absent_CustomFieldSerializer {       public static void serialize() {} //false positive. Expected nothing but was ""'}' should be alone on a line.""  }    Fix false positive","closed","","maxvetrenko","2014-07-30T20:29:20Z","2014-07-30T23:10:14Z"
"","623","Typo in ""ignoreOverridenMethods"" property of IllegalThrows check","Property of [IllegalThrows](http://checkstyle.sourceforge.net/config_coding.html#IllegalThrows) contains typo. Should be `ignoreOverriddenMethods` instead of `ignoreOverridenMethods` - double ""d"" in overridden.  This typo occurs in 29 places in code base. All occurrences should be fixed.","closed","approved,","mkordas","2015-02-08T19:36:30Z","2015-02-10T15:01:30Z"
"","734","Fix bug with multiple imports, part of issue #706","Problem was checking for pre previous line with imports instead of checking for two previous lines. As suggested in previous PR i introduce method hasNotAllowedFewLinesBeforeEmpty which checks if last two lines is empty and multiple empty lines are empty. I changed every checking ""!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)"" to hasNotAllowedFewLinesBeforeEmpty. In previous PR @romani suggested putting more light hasEmptyLineBefore function before isPrePreviousLineEmpty, i did not do this because hasEmptyLineBefore function does not check if previous line exist. I certainly can put that guard in hasEmptyLineBefore and put it before isPrePreviousLineEmpty in condition, but in this situation hasEmptyLineBefore would not be any lighter than isPrePreviousLineEmpty but im open to further suggestions.","closed","","liscju","2015-03-09T21:01:07Z","2015-03-10T19:58:58Z"
"","108","Default case and throws indent to basic offset","Probably makes a less verbose configuration possible for most projects just by setting basic offset.","closed","","scop","2014-02-15T13:39:25Z","2014-06-19T15:49:26Z"
"","848","CustomImportOrder checks import sorting according to ASCII order, fixes #847","Previously used 'ignoreCase' order is different than required ASCII order.  Rendered Javadoc: ![image](https://cloud.githubusercontent.com/assets/5467276/6814362/44703a84-d27e-11e4-8a4b-3b3f4ee48adc.png)  Properties: ![image](https://cloud.githubusercontent.com/assets/5467276/6814400/8e415e2c-d27e-11e4-89d8-9cef096a6988.png)  Documentation: ![image](https://cloud.githubusercontent.com/assets/5467276/6814421/accfe8ea-d27e-11e4-98b9-503ea028d914.png)","closed","","mkordas","2015-03-24T22:37:31Z","2015-04-27T21:16:00Z"
"","839","Use value of putIfAbsent to fix Findbugs violation, issue #778","Previously there was slight risk that returned value is not the one that is associated with the key in the map. This could happen if another thread inserted value to map between calls to `get` and `putIfAbsent`.  All violations of Findbugs rule [RV: Return value of putIfAbsent ignored, value passed to putIfAbsent reused](http://findbugs.sourceforge.net/bugDescriptions.html#RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED) are fixed.","closed","","mkordas","2015-03-22T16:15:52Z","2015-04-27T21:16:02Z"
"","973","DeclarationOrderCheck : resolve SwitchDensity violation from PMD","PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:156 Rule:SwitchDensity Priority:3 A high ratio of statements to labels in a switch statement.  Consider refactoring..","closed","approved,","romani","2015-04-23T22:23:40Z","2015-10-06T23:54:56Z"
"","998","PMD violations: TooFewBranchesForASwitchStatement","Please resolve all violations:  [INFO] --- maven-pmd-plugin:3.4:check (default-cli) @ checkstyle --- [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.TreeWalker:706 Rule:TooFewBranchesForASwitchStatement Priority:3 A switch with less than three branches is inefficient, use a if statement instead.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:242 Rule:TooFewBranchesForASwitchStatement Priority:3 A switch with less than three branches is inefficient, use a if statement instead.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck:63 Rule:TooFewBranchesForASwitchStatement Priority:3 A switch with less than three branches is inefficient, use a if statement instead.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck:75 Rule:TooFewBranchesForASwitchStatement Priority:3 A switch with less than three branches is inefficient, use a if statement instead.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.NestedTryDepthCheck:61 Rule:TooFewBranchesForASwitchStatement Priority:3 A switch with less than three branches is inefficient, use a if statement instead.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.NestedTryDepthCheck:73 Rule:TooFewBranchesForASwitchStatement Priority:3 A switch with less than three branches is inefficient, use a if statement instead.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck:110 Rule:TooFewBranchesForASwitchStatement Priority:3 A switch with less than three branches is inefficient, use a if statement instead.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.ThrowsCountCheck:107 Rule:TooFewBranchesForASwitchStatement Priority:3 A switch with less than three branches is inefficient, use a if statement instead..","closed","approved,","romani","2015-04-26T17:01:15Z","2015-05-01T14:30:00Z"
"","823","remove from code ///CLOVER:XXXXX","please remove from code:  ```  ///CLOVER:OFF ///CLOVER:ON ```","closed","approved,","romani","2015-03-19T21:05:17Z","2015-03-20T20:58:41Z"
"","120","New Check ""Prefer method reference to lambda""","Playing with Java8 it seems to me that methods references are much more readable then lambdas. Of cause they can not be used everywhere as a replacement to lambdas, but in many places where lambda is used - method reference will be much more readable and shorter option. Consider implementing such a check for Java8.  Example:  ``` java list.foreach(s -> System.out.println(s)); list.foreach(System.out::println); ``` ##","closed","","isopov","2014-03-14T09:19:00Z","2020-11-01T14:38:36Z"
"","891","Disable Findbugs for 'grammars' package, issue  #778","Package `com.puppycrawl.tools.checkstyle.grammars` contains only autogenerated code, so it should be excluded from Findbugs analysis.","closed","","mkordas","2015-03-29T16:34:57Z","2015-04-27T21:15:56Z"
"","620","Require at least Maven 3.0.1 to build Checkstyle","Output from [versions:display-plugin-updates](http://mojo.codehaus.org/versions-maven-plugin/display-plugin-updates-mojo.html) plugin:  ``` [WARNING] Project does not define minimum Maven version [INFO] Plugins require minimum Maven version of: 3.0.1 ... [INFO] Require Maven 3.0.1 to use the following plugin updates: [INFO]   org.codehaus.mojo:findbugs-maven-plugin ....................... 3.0.0 ```  That means if someone would like to build Checkstyle with Maven version lower than 3.0.1 findbugs plugin won't be able to execute correctly.  Solution is to put to `pom.xml` the following prerequisite:  ``` xml              3.0.1       ```","closed","","mkordas","2015-02-07T08:19:57Z","2015-02-13T23:29:33Z"
"","709","Add ParameterNumber.ignoreConstructors flag","Our project autowire beans by constructor. Some of them contains > 7 parameters. We still want to use the rule but ignore it for constructors. Solution: add ParameterNumber.ignoreConstructors boolean flag","closed","","ychulovskyy","2015-03-02T16:28:39Z","2015-03-03T16:00:57Z"
"","430","Investigate twitter custom checks and the way they are used","originally was filed as https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/47  Here you may found instructions about custom twitter checkstyle checks: https://github.com/twitter/commons/tree/master/build-support/checkstyle  Investigate: 1. Since they are open sourced under Apache2 license should we somehow use them? Maybe depend on them (they are packaged as separate ivy-module, that is essentially a maven module and deployed here - http://maven.twttr.com/com/twitter/common/checkstyle/) and provide xmls for easy use of them from the eclipse-cs plugin? 2. Their way of adding them to the checkstyle during checking the source. It seems that they are used simply adding jars with them to the classpath during checkstyle run. It seems that they use it very easily in their checkstyle ant task. If so it should be possible to use our checks in checkstyle ant task two. Provide the tutorial, how to use them with the manually downloaded sevntu-checks.jar (from the soon to be published our maven repository) and how to use them with the help of ivy.  Is it location of all of them https://github.com/twitter/commons/tree/master/src/java/com/twitter/common/checkstyle ?  We need to move all that Checks (that mostly bug fixing ) to main repo https://github.com/checkstyle/checkstyle/","closed","","romani","2014-12-03T05:19:33Z","2014-12-29T15:51:51Z"
"","346","removing lines array cloning to reduce GC-pressure","Originally submitted as past of one big PR #136  This change is the most controversial one, but added as a separate PR for the sake of completeness. As far as I understand the general consensus is to not apply this change no matter how big performance gain we can achieve: 1. Ivan (me) - for applying this PR/further investigation of performance benefits of this particular change 2. Every other maintainer - for rejecting this change due to lack of defending of our internal data-structures from the custom checks.","closed","","isopov","2014-10-30T19:04:18Z","2014-11-06T15:19:49Z"
"","344","fix for MultiMap empty collections garbage","Originally submitted as past of one big PR #136  Every MultiMap.get() for non-contained key creates new collection. After that calling iterator on this new empty collection creates another throw-away not-used object.","closed","","isopov","2014-10-30T18:47:43Z","2014-11-05T01:38:02Z"
"","347","removing unnecessary char[] copying to reduce GC-pressure","Originally submitted as part of one big PR #136  According to http://shipilev.net/talks/joker-Oct2014-string-catechism.pdf (starting on slide 74) there is no reason to make a char[] copy before waling content of the string. And removing this will reduce gc-pressure as well.","closed","","isopov","2014-10-30T19:12:02Z","2014-11-07T05:26:07Z"
"","349","using BitSet for indent levels for performance","Originally submitted as part of one big PR #136","closed","","isopov","2014-10-30T20:00:39Z","2014-11-03T06:23:24Z"
"","348","preformance fix for RegexpCheck","Originally submitted as part of one big PR #136","closed","","isopov","2014-10-30T19:18:53Z","2014-11-03T05:37:40Z"
"","345","optimizing file reading","Originally submitted as part of one big PR #136","closed","","isopov","2014-10-30T18:54:38Z","2014-11-07T16:53:05Z"
"","921","NullPointerException from TreeWalker.destroy","One of the users of the IDEA plugin [reported a problem](https://github.com/jshiell/checkstyle-idea/issues/150) with a NPE being generated during TreeWalker.destroy. This is reproducible with the 6.5 JAR distribution.  ``` $  java -jar ../checkstyle-6.5-all.jar -c rules.xml TestCase.java Exception in thread ""main"" java.lang.NullPointerException     at com.google.common.io.Flushables.flush(Flushables.java:56)     at com.puppycrawl.tools.checkstyle.PropertyCacheFile.flushAndCloseOutStream(PropertyCacheFile.java:135)     at com.puppycrawl.tools.checkstyle.PropertyCacheFile.destroy(PropertyCacheFile.java:123)     at com.puppycrawl.tools.checkstyle.TreeWalker.destroy(TreeWalker.java:499)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:299)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:125) ```  The rules file is:  ```                         ```  The test Java file is pretty trivial:  ``` public class TestCase {  } ```  Thank you :smile:","closed","approved,","jshiell","2015-04-11T08:36:21Z","2015-04-15T18:04:49Z"
"","743","Add email addresses to post new topics on Project Mailing Lists page in docs","On [Project Mailing Lists](http://checkstyle.sourceforge.net/mail-lists.html) page column 'Post' is empty.   We should fill it with addresses of our mailing lists, e.g. checkstyle-devel@googlegroups.com for checkstyle-devel.","closed","approved,","mkordas","2015-03-10T20:26:51Z","2015-03-12T06:51:19Z"
"","146","NPathComplexity miscalculated switch-like cases","NPathComplexity blindly doubles complexity on each IF, even if it contains RETURN (so, it's not really doubled). Complexity for method with N ifs appears to be 2^N. Example: ``` public int getResult(Object c) {     if (c instanceof String) { return 1; }     if (c instanceof Integer) { return 2; }     if (c instanceof Double) { return 3; }     if (c instanceof Float) { return 4; }     if (c instanceof Boolean) { return 5; }     return -1; } ``` As you can see, this code have exact 6 return points, so it's complexity must be 6. But instead it calculates as 2^5 = 32  ... NPath Complexity is 32 (max allowed is 2). Audit done. ...  NPathComplexity should count correctly branches with return inside. ##","closed","","yerenkow","2014-05-13T09:14:54Z","2017-02-20T22:35:21Z"
"","892","Use SVG badge for coveralls.io.","Now the coveralls.io badge will have a consistent flat look like the other badges.  **Before:** ![before](https://cloud.githubusercontent.com/assets/3539501/6916187/c0800c92-d7b7-11e4-8f85-93c9c04de848.png)  **After:** ![after](https://cloud.githubusercontent.com/assets/3539501/6916189/c94fe0e0-d7b7-11e4-8f4a-baf7a88b30ac.png)","closed","","AnirvanSarkar","2015-03-31T09:39:30Z","2021-10-30T12:24:26Z"
"","226","Issue 10. Java 8 syntax support has been added","Now it can support default methods, methods references, new type cast and lambdas.","closed","","sabaka","2014-08-07T18:41:00Z","2015-09-03T23:33:31Z"
"","207","Issue 130 fixed","Now it can parse ""return (byte[].class);""","closed","","sabaka","2014-07-28T20:49:12Z","2014-08-06T20:02:53Z"
"","579","java.g has GPL license instead of LGPL","Nexus professional analyzes all sources files and licenses inside artifacts. As a result it shows: Declared License(s): LGPL-2.1 Observed License(s) in Source: BSD-3-Clause, GPL-2.0+, LGPL-2.1+, Public Domain Threat Level: GPL-2.0+  GPL is not commercial friendly, that is why we cannot use Checkstyle 5.7 and above in our company (which makes is useless since Checkstyle 5.6 doesn't support Java 8)  I've found only one file that has GPL license: java.g Is it possible to change java.g lincense from GPL to LGPL? If it is, when can we expect new release?","closed","approved,","ychulovskyy","2015-01-14T09:04:42Z","2015-01-14T22:28:20Z"
"","206","Issue 165 fixed.","New rule only for catch types has been added. IllegalCatchCheck has been extended to use catch with few exception types.","closed","","sabaka","2014-07-24T22:09:35Z","2014-07-26T08:34:05Z"
"","133","dsm-maven-plugin has been added to pom.xml","New plugin in reporting section.","closed","","sabaka","2014-04-19T08:05:14Z","2014-04-19T14:31:49Z"
"","19","Implemented UniqueProperties check","New check is responsive for unique property keys detection in .properties files.","closed","","pbaranchikov","2013-10-10T08:13:31Z","2014-06-12T21:19:52Z"
"","294","Update for existing Check: Indentation","Need to update existing Check to cover following rule: http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.5.2-line-wrapping-indent  This Check have to detect that after line-wrapping each line after the first (each continuation line) is indented at least +4 from the original line. ### Corner cases from [Guava library](http://maxvetrenko.github.io/): #### Anonymous classes  The second case is more preferred, in this case anonymous class become more readable.  This is not good:  public static final IndentationCorrectInput // indent:2 ; exp: 2; ok     BREAKING_WHITESPACE = new IndentationCorrectInput() { // indent:6 ; exp: 6; ok   @Override   public String toString() { // indent:4 ; exp:4; ok       return ""CharMatcher.BREAKING_WHITESPACE""; // indent:6 ; exp:6; ok   } // indent:4 ; exp:4; ok };    This is good:  public static final IndentationCorrectInput // indent:2 ; exp: 2; ok     BREAKING_WHITESPACE = new IndentationCorrectInput() { // indent:2+4 ; exp: 2+4; ok       @Override       public String toString() { // indent:6+2; exp:6+2; ok         return ""CharMatcher.BREAKING_WHITESPACE""; // indent:6+2+2 ; exp:6+2+2; ok       } // indent:6+2 ; exp:6+2; ok };   #### Method definitions  [Case 1](http://maxvetrenko.github.io/xref/com/google/common/collect/Lists.html#L409). This case is bad because method definition should start from the new line.  This is not good:  */ static <B> List<List<B>>    cartesianProduct(List<? extends List> lists) {     This is good:  */ static <B> List<List<B>>     cartesianProduct(List<? extends List> lists) {    [Case 2](http://maxvetrenko.github.io/xref/com/google/common/collect/Maps.html#L3939). This is not good, because indentation level should be increased at least by 4 spaces.  This is not good:  @Override public NavigableMap subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) {    This is good:  @Override public     NavigableMap     subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) {   #### Block comments:  [Case 1](http://maxvetrenko.github.io/xref/com/google/common/collect/ContiguousSet.html#L135). This is not good because any definition should start from the new line.  This is not good:  /*@Override*/ abstract ContiguousSet subSetImpl(C fromElement, boolean fromInclusive,     C toElement, boolean toInclusive);   This is good:  /*@Override*/ abstract ContiguousSet subSetImpl(C fromElement, boolean fromInclusive,     C toElement, boolean toInclusive);  ### Line-wrapping indentation:  [Case 1](http://maxvetrenko.github.io/xref/com/google/common/cache/CacheBuilderSpec.html#L390). This case is not good, indentation level should be increased at least by 4 spaces.  This is not good:   checkArgument(spec.valueStrength == null,   ""%s was already set to %s"", key, spec.valueStrength);   This is good:   checkArgument(spec.valueStrength == null,     ""%s was already set to %s"", key, spec.valueStrength);   [Case 2](http://maxvetrenko.github.io/xref/com/google/common/collect/ImmutableTable.html#L50). This is not good due to the same reason.  This is not good:  private static final ImmutableTable EMPTY   = new SparseImmutableTable(   This is good:  private static final ImmutableTable EMPTY     = new SparseImmutableTable(   [Case 3](http://maxvetrenko.github.io/xref/com/google/common/collect/RegularImmutableTable.html#L126). This is not good due to the same reason.  This is not good:  int rowCompare = (rowComparator == null) ? 0   : rowComparator.compare(cell1.getRowKey(), cell2.getRowKey());   This is good:  int rowCompare = (rowComparator == null) ? 0     : rowComparator.compare(cell1.getRowKey(), cell2.getRowKey());   [Case 4](http://maxvetrenko.github.io/xref/com/google/common/collect/testing/FeatureSpecificTestSuiteBuilder.html#L252). This is not good due to the same reason.  This is not good:  logger.finer(Platform.format(     ""%s: skipping because these features are absent: %s"",    method, missingFeatures));   This is good:  logger.finer(Platform.format(     ""%s: skipping because these features are absent: %s"",     method, missingFeatures));  ### Block offset  [Case 1](http://maxvetrenko.github.io/xref/com/google/common/collect/ImmutableTable.html#L244). This is not good because any base indentation should be two spaces.  This is not good:  default:  return RegularImmutableTable.forCells(   This is good:  default:   return RegularImmutableTable.forCells(","closed","","maxvetrenko","2014-10-10T21:12:59Z","2014-10-13T23:22:42Z"
"","408","Update Checkstyle GUI in order to display Javadoc tokens","Need to parse block comments as Javadoc comments and show Javadoc DetailNode tree instead of block comment. ![screenshot](http://checkstyle.sourceforge.net/images/gui_screenshot.png)","closed","miscellaneous,","baratali","2014-12-02T08:05:33Z","2016-09-11T22:13:51Z"
"","309","New Check: NonEmptyAtclauseDescriptionCheck","Need to implement Check which will validate next rule:   @param, @return, @throws, @deprecated: these four types never appear with an empty description.  Prof link: http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s7.1.3-javadoc-at-clauses.  Check should have a parameter which will set user's values of at-clauses, which never appear with an empty description.  Check configuration:   <module name=""NonEmptyAtClauseDescription"">     <property name=""target"" value=""JAVADOC_TAG_THROWS_LITERAL, JAVADOC_TAG_DEPRECATED_LITERAL""/> </module>","closed","","maxvetrenko","2014-10-19T14:13:06Z","2014-10-21T04:37:25Z"
"","250","RightCurly. Force line break before '}' in case SAME option.","Need to force line break before '}' in case SAME option. According to list of styles ([link](http://www.terminally-incoherent.com/blog/2009/04/10/the-only-correct-indent-style/)), right curly has line break before except Pico style.","closed","","maxvetrenko","2014-08-13T11:34:50Z","2014-08-14T18:42:46Z"
"","235","update for existing Check: EmptyBlock. need to handle switch block","Need to fix follow TODO:  // TODO: need to handle....             //TokenTypes.LITERAL_SWITCH,","closed","","maxvetrenko","2014-08-10T07:40:39Z","2014-08-11T23:06:14Z"
"","409","Create doc comments for Javadoc tokens","Need to create doc comments for each Javadoc token in JavadocTokens class (like TokenTypes class).","closed","","baratali","2014-12-02T08:14:35Z","2015-02-12T22:25:50Z"
"","194","New Check: ForbidEscapedUnicodeCharactersCheck","Need to cover this rule: http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s2.3.3-non-ascii-characters  Oracle rule: http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.3  We need to focus only on String Literals  Options: boolean - allowIfAllCharactersEscaped. To cover cases like: return '\ufeff' + content; // byte order mark  boolean - allowByTailComment. To cover cases like: String unitAbbrev = ""\u03bcs""; // ""μs""","closed","","maxvetrenko","2014-07-18T10:21:05Z","2014-07-18T15:37:36Z"
"","315","New Check: JavaDocParagraph","Need to cover next rule: http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s7.1.2-javadoc-paragraphs  One blank line—that is, a line containing only the aligned leading asterisk (*)—appears between paragraphs, and before the group of ""at-clauses"" if present. Each paragraph but the first has <p> immediately before the first word, with no space after.  Tag <p> should be immediately followed by any word. If tag <p> is present, blank line should be plased before. If blank line is present, next line should be started with <p> tag. For exampe:   /**  * Custom GWT serializer for {@link Absent}.  *  * <p>GWT can serialize an absent {@code Optional} on its own, but the resulting  * object is a different instance than the singleton {@code Absent.INSTANCE},  * which breaks equality. We implement a custom serializer to maintain the  * singleton property.  *   */","closed","","maxvetrenko","2014-10-20T21:20:16Z","2014-10-21T06:58:05Z"
"","271","Caught exceptions: not ignored","Need to cover next rule: http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s6.2-caught-exceptions  This rule has already covered with [EmptyBlockCheck](http://checkstyle.sourceforge.net/config_blocks.html#EmptyBlock). This Check can detect comments into any block statement. Check config:  <module name=""EmptyBlock"">     <property name=""option"" value=""text""/> </module>","closed","","maxvetrenko","2014-09-05T18:36:08Z","2014-09-05T18:45:36Z"
"","508","MutableException check requires class to explicitly extend some other class (for issue #60)","My attempt to fix #60.  In order to be exception/error in Java, a class must inherit from Throwable. As in Checkstyle we don't have an access to types, at least we can check that a class extends anything.  What do you think? I'm not sure if we should introduce pattern for class being extended. E.g. java.lang.ThreadDeath is an error, but doesn't have Error in name.","closed","","mkordas","2014-12-15T21:25:57Z","2014-12-18T23:12:38Z"
"","506","MutableException check requires class to explicitly extend some other class (#60)","My attempt to fix #60.  In order to be exception/error in Java, a class must inherit from Throwable. As in Checkstyle we don't have an access to types, at least we can check that a class extends anything.  What do you think? I'm not sure if we should introduce pattern for class being extended. E.g. java.lang.ThreadDeath is an error, but doesn't have Error in name.","closed","","mkordas","2014-12-15T21:06:02Z","2014-12-15T21:22:50Z"
"","514","MutableException check requires class to explicitly extend some other class (for issue #60)","My attempt to fix #60 with @romani comments applied.","closed","","mkordas","2014-12-18T23:27:47Z","2014-12-20T22:33:00Z"
"","821","tidy-pom plugin give false positive","mvn clean site  cause:  ``` [INFO] Generating ""Linkcheck"" report            --- maven-linkcheck-plugin:1.2:linkcheck [INFO] Invoking the maven-site-plugin to ensure that all files are generated... [ERROR] Error when invoking Maven, consult the invoker log file: /home/rivanov/checkstyle-test/checkstyle/target/invoker-site-plugin1337754815.txt [ INFO] Begin to check links in files... [ INFO] Links checked. [INFO] Rendering 36 generated Doxia documents: 36 xdoc [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS ```  in a referenced file:  ``` Caused by: org.apache.maven.plugin.MojoFailureException: The POM violates the code style. Please format it by running `mvn tidy:pom`.     at org.codehaus.mojo.tidy.CheckMojo.execute(CheckMojo.java:58)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:106)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)     ... 29 more ```","closed","approved,","romani","2015-03-19T05:51:29Z","2015-03-22T05:10:17Z"
"","756","resolve warnings during ""-all.jar"" jar generation","mvn clean package -Passembly   ``` [WARNING] org.abego.treelayout.core-1.0.1.jar, antlr4-runtime-4.5.jar define 19 overlappping classes:  [WARNING]   - org.abego.treelayout.util.DefaultConfiguration [WARNING]   - org.abego.treelayout.TreeLayout [WARNING]   - org.abego.treelayout.util.DefaultTreeForTreeLayout [WARNING]   - org.abego.treelayout.internal.util.java.util.ListUtil [WARNING]   - org.abego.treelayout.internal.util.java.util.IteratorUtil$ReverseIterator [WARNING]   - org.abego.treelayout.internal.util.Contract [WARNING]   - org.abego.treelayout.internal.util.java.lang.string.StringUtil [WARNING]   - org.abego.treelayout.TreeLayout$DumpConfiguration [WARNING]   - org.abego.treelayout.internal.util.java.lang.IterableUtil$ReverseIterable [WARNING]   - org.abego.treelayout.NodeExtentProvider [WARNING]   - 9 more... [WARNING] maven-shade-plugin has detected that some .class files [WARNING] are present in two or more JARs. When this happens, only [WARNING] one single version of the class is copied in the uberjar. [WARNING] Usually this is not harmful and you can skeep these [WARNING] warnings, otherwise try to manually exclude artifacts [WARNING] based on mvn dependency:tree -Ddetail=true and the above [WARNING] output [WARNING] See http://docs.codehaus.org/display/MAVENUSER/Shade+Plugin  ```  Expected: no warnings.","closed","approved,","romani","2015-03-12T05:38:31Z","2015-04-28T22:00:25Z"
"","261","web site could not be generated under java 8","mvn -Pdistro package   ``` [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 01:46 min [INFO] Finished at: 2014-08-25T17:46:17-08:00 [INFO] Final Memory: 65M/317M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-site-plugin:3.3:site (gen-site) on project checkstyle: Error during page generation: Error rendering Maven report: [ERROR] Exit code: 1 - /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java:326: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java:161: error: invalid entity ' [ERROR] * Escape <, > & ' and "" as their entities. [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/GeneratedJavaRecognizer.java:1589: warning: no @throws for antlr.RecognitionException [ERROR] public final void declaration() throws RecognitionException, TokenStreamException { [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/GeneratedJavaRecognizer.java:1589: warning: no @throws for antlr.TokenStreamException [ERROR] public final void declaration() throws RecognitionException, TokenStreamException { [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/GeneratedJavaRecognizer.java:4449: warning: no @param for mods [ERROR] public final void variableDeclarator( [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/GeneratedJavaRecognizer.java:4449: warning: no @param for t [ERROR] public final void variableDeclarator( [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/GeneratedJavaRecognizer.java:4449: warning: no @throws for antlr.RecognitionException [ERROR] public final void variableDeclarator( [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/GeneratedJavaRecognizer.java:4449: warning: no @throws for antlr.TokenStreamException [ERROR] public final void variableDeclarator( [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/GeneratedJavaRecognizer.java:7282: warning: no @throws for antlr.RecognitionException [ERROR] public final void newExpression() throws RecognitionException, TokenStreamException { [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/GeneratedJavaRecognizer.java:7282: warning: no @throws for antlr.TokenStreamException [ERROR] public final void newExpression() throws RecognitionException, TokenStreamException { [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java:30: warning: empty  tag [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java:39: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java:91: error: bad use of '>' [ERROR] *   - handler class -to-> ID mapping kept in Map [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java:89: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java:97: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheck.java:37: error: header used out of sequence:  [ERROR] * Examples [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java:36: warning: empty  tag [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java:47: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java:55: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java:64: error: self-closing element not allowed [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java:81: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheck.java:70: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheck.java:111: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java:44: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java:75: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java:91: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java:125: error: malformed HTML [ERROR] * for (int i = 0; i < 20; i++) { [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java:129: error: bad use of '>' [ERROR] *     if (sum > 10) { [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java:40: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java:88: error: bad HTML entity [ERROR] * in arrays used in annotations but Sun's Java 5 & 6 compilers will not [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java:442: error: self-closing element not allowed [ERROR] * or [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java:442: error: self-closing element not allowed [ERROR] * or [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java:57: error: self-closing element not allowed [ERROR] * inside the SuppressWarnings annotation.  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java:43: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java:45: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java:30: error: header used out of sequence:  [ERROR] * Examples [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:102: warning: empty  tag [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:111: error: bad use of '>' [ERROR] * for (int i = 1; i > 1; i++) {} // empty for loop [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:115: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:119: warning: empty  tag [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:121: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:125: warning: empty  tag [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:127: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:131: warning: empty  tag [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:133: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:137: warning: empty  tag [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:139: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:148: warning: empty  tag [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java:150: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyOption.java:55: error: bad HTML entity [ERROR] * if (condition1 && condition2 && [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyOption.java:55: error: bad HTML entity [ERROR] * if (condition1 && condition2 && [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyOption.java:55: error: bad HTML entity [ERROR] * if (condition1 && condition2 && [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyOption.java:55: error: bad HTML entity [ERROR] * if (condition1 && condition2 && [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyOption.java:56: error: bad HTML entity [ERROR] *     condition3 && condition4) [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyOption.java:56: error: bad HTML entity [ERROR] *     condition3 && condition4) [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyOption.java:60: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java:68: error: unexpected end tag:  [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java:226: error: exception not thrown: java.io.IOException [ERROR] * @throws IOException if the file cannot be opened [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java:29: error: invalid uri: ""./{@docRoot}/../writingchecks.html"" [ERROR] * @see Writing [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java:2283: error: bad HTML entity [ERROR] * The & (bitwise AND) operator. [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java:2283: warning: empty  tag [ERROR] * The & (bitwise AND) operator. [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java:505: warning: empty  tag [ERROR] *  [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java:2256: error: bad HTML entity [ERROR] * The && (conditional AND) operator. [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java:2256: error: bad HTML entity [ERROR] * The && (conditional AND) operator. [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java:2256: warning: empty  tag [ERROR] * The && (conditional AND) operator. [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java:1695: error: malformed HTML [ERROR] * while(x < 5); [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java:1725: error: malformed HTML [ERROR] *         +--LT ( a; [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java:3294: error: malformed HTML [ERROR] *                 +--GENERIC_START () [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java:3400: error: bad HTML entity [ERROR] * '&' symbol when used in a generic upper or lower bounds constrain [ERROR] ^ [ERROR] /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java:3210: error: malformed HTML [ERROR] *         +--GENERIC_START () [ERROR] ^ [ERROR]  [ERROR] Command line was: /usr/lib/jvm/java-8-oracle/jre/../bin/javadoc @options @packages [ERROR]  [ERROR] Refer to the generated Javadoc files in '/home/rivanov/java/git-others/checkstyle/target/site/apidocs' dir. [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException 05:46 PM ~/java/git-others/checkstyle [master|✔] $   ```","closed","approved,","romani","2014-08-26T00:48:22Z","2014-09-08T02:15:33Z"
"","48","StackOverflow in com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.findMatch","MultilineDetector.findMatch is a recursive function which will return only if it was not able to find a match. Otherwise it will call itself again which will cause StackOverflow. There is some check for exceeded number of matches but that check only logs such situation but does not stops the recursion. Probably that check should also break recursion in some way. Below is Eclipse's stack trace which encountered this problem. java.lang.StackOverflowError     at java.util.AbstractCollection.toArray(AbstractCollection.java:175)     at com.google.common.collect.ImmutableMap.copyOf(ImmutableMap.java:236)     at com.puppycrawl.tools.checkstyle.DefaultConfiguration.getMessages(DefaultConfiguration.java:144)     at com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter.getCustomMessages(AbstractViolationReporter.java:132)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.log(AbstractFileSetCheck.java:147)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.log(AbstractFileSetCheck.java:140)     at com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.findMatch(MultilineDetector.java:83)     at com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.findMatch(MultilineDetector.java:88)     at com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.findMatch(MultilineDetector.java:88)     at com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.findMatch(MultilineDetector.java:88)","closed","high demand,","SergeyMakarenko","2013-11-05T23:16:12Z","2015-07-01T03:43:05Z"
"","65","Support Supression XML configuration in the Checkstyle.xml","Moved from https://sourceforge.net/p/checkstyle/feature-requests/599/  When working with a large development team and certain checkstyle plugins (eclipse-cs for example), it is nice to have the checkstyle config in a single file. When needing to use the SuppressionFilter configuration, the relative path of the suppression xml file is not exactly intuitive, and may vary from development environment versus SVN hooks. Eclipse-cs even supports a remote location for the checkstyle config (which is handy for updating on the fly for the development team).  All this being said, It would be useful to have a single file to point to (checkstyle config). A solution may be to provide a simple SuppressionFilter implementation that allows configuration of folders to skip (a common ask, when skipping generated source folders, or test source files). ##","closed","approved,","isopov","2013-11-17T10:51:33Z","2019-04-13T17:42:55Z"
"","768","Moved content from available_checks.html to checks.html, issue #691","Moved content from available_checks page to standard_checks","closed","","alexkravin","2015-03-13T13:39:27Z","2015-03-15T22:47:39Z"
"","691","web site: combine standard checks and available check pages","Move all content of https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/availablechecks.xml  to https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/checks.xml   update verify stage of maven build to ensure all Check are referenced at that page","closed","approved,","romani","2015-02-28T22:32:51Z","2015-03-15T22:47:59Z"
"","492","Update google_checks.xml","minor typo","closed","","renzok","2014-12-12T20:27:33Z","2014-12-12T23:20:05Z"
"","1","Github migration","Minor changes according to migration from Sourceforge's mercurial repo to github.","closed","","isopov","2013-09-02T06:54:44Z","2013-12-23T18:16:35Z"
"","44","Check interface/abstract methods with final params","Methods without implementations have implicit final parameters.","closed","","gaul","2013-10-31T18:20:59Z","2013-11-02T12:08:12Z"
"","310","New Check: JavadocSelfExplanatoryMethod","Measure method complexity and demand JavaDoc base for complex methods, and skip JavaDoc for banal methods. Determine the degree of method's difficulty by number of lines. http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s7.3.1-javadoc-exception-self-explanatory","closed","","maxvetrenko","2014-10-19T17:15:39Z","2014-10-22T22:03:08Z"
"","738","Remove block marker comments from code","Maybe we should create check that will prohibit them in Sevntu project?","closed","","mkordas","2015-03-10T13:13:30Z","2015-03-10T14:47:45Z"
"","16","Correct typos","Many fixes to the documentation.","closed","","gaul","2013-10-06T20:36:27Z","2014-06-16T00:44:46Z"
"","447","Indentation Check compilable UT inputs","Lots of changes in first 2 inputs, it looks like mess anyway, no changes in UTs.","closed","","alexkravin","2014-12-04T16:00:00Z","2014-12-11T14:41:30Z"
"","462","package-info input, now compilable #388","Looks like I have already opened such a PR, but in master branch nothing was changed..","closed","","alexkravin","2014-12-07T13:55:29Z","2014-12-11T14:12:39Z"
"","461","Extend parsing rule of custom Javadoc tag name","Looks like custom Javadoc tag name can have dot characters `.` and colon characters `:` https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#colon http://xdoclet.codehaus.org/HibernateTags http://xdoclet.sourceforge.net/xdoclet/tags/bea-tags.html  Now it parses this way:  ``` JAVADOC[3x0] |--JAVADOC_TAG[3x0] : [@hibernate.property]     |--CUSTOM_NAME[3x0] : [@hibernate]     |--DESCRIPTION[3x10] : [.property]         |--TEXT[3x10] : [.property] |--EOF[3x19] : [] ```","closed","approved,","baratali","2014-12-06T21:59:51Z","2015-12-26T02:05:42Z"
"","616","NPathComplexityCheck calculates 'continue' statements as producing complex branches","Looking the following pseudo code has higher NPathComplexity:  ``` private void mycode (string[] cmd) {     int size = array.length;     for (int i = 0; i < size; i++) {        if (""abc"".equals(cmd[i])) {             doAbc();             continue;         }         if (""def"".equals(cmd[i])) {             doDef();             continue;         }         if (""def"".equals(cmd[i])) {             doDef();             continue;         }         ... (5 times more and another outer loop)     } } ```  Than:  ``` private void mycode (string[] cmd) {     int size = array.length;     for (int i = 0; i < size; i++) {         if (""abc"".equals(cmd[i])) {             doAbc();         } else if (""def"".equals(cmd[i])) {             doDef();         } else if (""def"".equals(cmd[i])) {             doDef();         } ... 5 times more and another outer loop)     } } ```  Actually this should produce the same byte code. Reviewing the NPathComplexityCheck.java code we can see 'return', 'continue' and maybe other not producing branches producing flow statements (break ...) are counted as producing branches.  Code reading might be easier for the second example, but this is subjective and not true for all developers or use cases.  'NPathComplexityCheck' is a very good, mostly objective, maybe the most important check and should be considered from all developers also (or especially) from the 'return and continue' developers.  My intention: Making NPathComplexityCheck more 'objective' (to stop subjective discussions).  Thank to all of the checkstyle team, you are doing a very important job, increasing the code quality in the world.  Regards from Aachen, Germany ##","closed","","Karaiso","2015-02-06T09:03:15Z","2017-02-20T22:51:45Z"
"","916","Build failure on cobertura-maven-plugin 2.7","log https://travis-ci.org/checkstyle/checkstyle/jobs/57881170  ``` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-site-plugin:3.4:site (default-site) on project checkstyle: failed to get report for org.codehaus.mojo:cobertura-maven-plugin: Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.8:run (ant-phase-verify) on project checkstyle: An Ant BuildException has occured: The following error occurred while executing this line: [ERROR] /home/rivanov/java/git-others/checkstyle/checkstyle/config/ant-phase-verify.xml:19: java.lang.NoClassDefFoundError: net/sourceforge/cobertura/coveragedata/TouchCollector [ERROR] around Ant part ...... @ 7:47 in /home/rivanov/java/git-others/checkstyle/checkstyle/target/antrun/build-main.xml: net.sourceforge.cobertura.coveragedata.TouchCollector [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException ```  Investigate and report an issue if that is cobertura fault - http://mojo.codehaus.org/cobertura-maven-plugin/ , https://github.com/cobertura/cobertura  from #816 :   Release Notes - Cobertura Maven Plugin - Version 2.7  Bug:  ``` [MCOBERTURA-86] - no coverage reported for integration-test [MCOBERTURA-161] - cobertura report appear a lot of error: JavaNCSS got an error while parsing the java file [MCOBERTURA-180] - Cobertura does not seem to work on OSX [MCOBERTURA-189] - Code coverage is not working with Java 8 sources [MCOBERTURA-190] - com.ibm.icu:icu:2.6.1 dependency makes maven-enforcer-plugin checkSignatureRule to fail ```  Improvement:  ``` [MCOBERTURA-183] - Update Main class finding algorithm to handle Cobertura releases after 2.0.3 ```  Task:  ``` [MCOBERTURA-187] - Upgrade to Cobertura 2.1.1 [MCOBERTURA-192] - Require Java 6 ```","closed","approved,","romani","2015-04-09T23:55:10Z","2015-05-04T17:02:03Z"
"","707","Link to Java Coding Convention in DeclarationOrder check docs does not work correctly","Link on [DeclarationOrder](http://checkstyle.sourceforge.net/config_coding.html#DeclarationOrder)  brings to Oracle landing page instead of specific code convetion that this check enforces.","closed","","mkordas","2015-03-02T11:57:17Z","2015-03-02T23:54:47Z"
"","183","RightCurly was updated #182","Line break after the closing brace if that brace terminates a statement or the body of a method, constructor or named class.","closed","","maxvetrenko","2014-07-12T16:53:12Z","2014-07-17T00:13:21Z"
"","410","Create web-page with instructions: how to create Javadoc Check","Like this http://checkstyle.sourceforge.net/writingchecks.html","closed","miscellaneous,","baratali","2014-12-02T08:16:08Z","2016-07-17T22:13:26Z"
"","806","Coveralls stopped working for Checkstyle","Last analysis was done on 1st March: https://coveralls.io/r/checkstyle/checkstyle","closed","approved,","mkordas","2015-03-16T06:03:55Z","2015-03-20T04:05:08Z"
"","807","Run Sonar more frequently","Last analysis done by Sonar was on 28th Feb. It should run much more often, possibly every day or every hour when there are code changes.  We should also investigate possiblity of running Sonar for every commit/pull request.  Is it possible to get Sonar account and some user privilleges?","closed","","mkordas","2015-03-16T06:16:17Z","2015-03-27T16:30:02Z"
"","234","optimize compare method in CustomImportOrderCheck","just make it readable optimize it: CustomImportOrderCheck::private int compare(String aCurrentImport, String aPreviousImport)","closed","approved,","romani","2014-08-10T00:26:43Z","2015-01-29T06:18:00Z"
"","372","Java 8 method reference after generic type","Java 8 support does not work for the following syntax:  `myMapInstance.entrySet().stream().map(Map.Entry::getValue).collect(Collectors.toList());`  When removing the generic type in this statement everything works fine.","closed","","danbroun","2014-11-17T14:33:54Z","2014-11-17T21:21:01Z"
"","914","InnerTypeLastCheck should ignore main method","It’s usually easier to write (testing) main methods at the bottom of a class, regardless if there are nested inner classes. Is it possible to enhance the InnerTypeLastCheck so that there is a flag to ignore main methods?","closed","","Schalli1987","2015-04-09T06:48:40Z","2015-04-09T20:12:12Z"
"","332","New Check: SingleLineJavadocCheck","It's necessary to check the possibilities of single-line Javadoc. http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s7.1.1-javadoc-multi-line  The single-line form may be substituted when there are no at-clauses present, and the entirety of the Javadoc block (including comment markers) can fit on a single line. (link)  According to Javadoc API, there are two types of tags: main description tags and in-line tags. Main description tags must start at the beginning of a line (after any leading spaces and an optional asterisk) or it is treated as normal text (prof). Inline tags can be placed anywhere in the main description or in the comments for block tags. Inline tags are denoted by curly braces: {@tag}.  Should be implemented Check which will validate single-line Javadoc. If single-line Javadoc contains any at-clause tag, it should be reform to multi-line Javadoc. Check shouldn't force using single-line Javadoc. For example:  1) /*\* As of JDK 1.1, replaced by {@link #setBounds(int,int,int,int)} */  But should be:  /** - As of JDK 1.1, replaced by {@link #setBounds(int,int,int,int)}   */  2) /*\* @throws CheckstyleException if an error occurs */  But should be  /** - @throws CheckstyleException if an error occurs   */  3) /*\* An especially short bit of Javadoc. */  and  /** - An especially short bit of Javadoc.   */  These Javadocs are both correct. #   Check: https://github.com/baratali/checkstyle/blob/48948505efd04ac26c207e2fd07c2adcad7b82ea/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java Unit test: https://github.com/baratali/checkstyle/blob/48948505efd04ac26c207e2fd07c2adcad7b82ea/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheckTest.java Input file: https://github.com/baratali/checkstyle/blob/48948505efd04ac26c207e2fd07c2adcad7b82ea/src/test/resources/com/puppycrawl/tools/checkstyle/javadoc/InputSingleLineJavadocCheck.java  Commit: https://github.com/baratali/checkstyle/commit/48948505efd04ac26c207e2fd07c2adcad7b82ea","closed","","romani","2014-10-22T22:26:52Z","2014-10-23T14:59:36Z"
"","983","Fix PMD violations for AbstractNaming rule","It's API-breaking change.  Follow-up to #982.  Violations:  ``` com\puppycrawl\tools\checkstyle\api\Check.java:35 Rule:AbstractNaming Priority:3 Abstract classes should be named AbstractXXX. com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck:423 Rule:AbstractNaming Priority:3 Abstract classes should be named AbstractXXX. com\puppycrawl\tools\checkstyle\checks\DeclarationCollector.java:40 Rule:AbstractNaming Priority:3 Abstract classes should be named AbstractXXX. com\puppycrawl\tools\checkstyle\checks\indentation\ExpressionHandler.java:31 Rule:AbstractNaming Priority:3 Abstract classes should be named AbstractXXX. ```","closed","approved,","mkordas","2015-04-24T19:34:12Z","2015-06-18T21:41:37Z"
"","152","Documentation: Setting English as the language for messages","It would be worth to note in the documentation that if you wish to have English as the language for the validation messages, you need to set both the `localeCountry` and `localeLanguage` as empty strings (ROOT-locale) rather than English. English will not work, as there are no `messages_en.properties` language files.  ``` xml   ```","closed","high demand,","kasper","2014-05-29T12:00:28Z","2015-05-27T15:39:23Z"
"","100","Javadoc to accept custom tags","It would be valuable to allow custom javadoc tags that are used by many tools and check them somehow - @beanId, @pre, @modifies, @post... ##","open","javadoc,","isopov","2014-02-07T09:41:36Z","2022-07-10T13:45:54Z"
"","148","magic number detection: option to ignore magic numbers in field declarations","It would be useful to have an option to ignore a magic number if it is an initializer in a field  declaration.  For example, I currently have the following code in one of my classes:  ```  private double bonus = 0.5; ```  I don't think any clarity is gained by declaring an additional constant to be used only for initializing this field, and I'm reasonably confident the same is true in most cases where a field is initialized directly to a constant like this.","closed","approved,","jh3141","2014-05-21T06:12:52Z","2015-04-03T07:29:06Z"
"","220","RFE: Make the FileFilter part of the official distro","It would be quite helpful if the contributed `FileFilter` could be part of the normal distribution - perhaps renamed to `InclusionFilter` as a counterpart to `SuppressionFilter`. The rationale is that negating words in regular expressions is quite hard and so having a bunch of checks only reported for ""*Remote.java"" is pretty hard with the standard distribution. ##","closed","approved,","pilhuhn","2014-08-04T09:40:07Z","2021-01-25T01:26:35Z"
"","2","Default to sun_check rules when `-c ...` is omitted","It would be nice if checkstyle worked out of the box without requiring explicit `-c ` each time.","closed","","apennebaker","2013-09-24T14:30:57Z","2013-12-23T18:16:35Z"
"","3","Turn on -r recursive by default","It would be helpful if the recursive option `-r` were on by default, so that commands like: - `checkstyle -c config.xml .` - `checkstyle -c config.xml src/`  Etc., worked out of the box, like JSHint does.","closed","approved,","apennebaker","2013-09-24T15:00:24Z","2014-12-29T22:42:36Z"
"","524","new Check: Enforce whitespace before array initializer in Google config","It would be good to have a check that enforces whitespace before array initializer according to samples in [Google Java Style](https://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.8.3.1-array-initializers).  For example:  ``` java new int[] {0, 1, 2, 3}  // correct  new int[] { // correct            0, 1, 2, 3           }  new int[]     {0, 1, 2, 3}  // correct  new int[]{ // incorrect            0, 1, 2, 3           }  new int[]{0, 1, 2, 3}  // incorrect                            ``` ##","closed","","mkordas","2014-12-20T00:53:52Z","2016-11-11T00:12:30Z"
"","98","Add ignore option to the JavadocVariable check","It will be convinient to not write javadocs for such variables as serialVersionId, log, logger.  For most flexibility consider allowing regex for this exclusion based on variables (fields) names.","closed","javadoc,","isopov","2014-02-07T09:20:48Z","2014-12-25T23:20:54Z"
"","577","Unsatisfiable Indentation module scenario inside Lambda (Java 8)","It seems, there is an issue with indentation tracking when lambda is used to declare inner class, like this:  ``` java public class ClassWithInnerLambda {      Runnable someLambda = () -> {         String varWithAppropriateIndention = null;     }; } ```  then checkstyle incorrectly says  > [WARNING] ClassWithInnerLambda.java[4](indentation) Indentation: 'String' have incorrect indentation level 8, expected level should be 12.  After indenting 'String' by 4 spaces, checkstyle correctly says  > [WARNING] ClassWithInnerLambda.java[4](indentation) Indentation: 'block' child have incorrect indentation level 12, expected level should be 8. > [WARNING] ClassWithInnerLambda.java[4](indentation) Indentation: 'member def type' have incorrect indentation level 12, expected level should be 8.  Here is my checkstyle configuration:  ``` xml                                                                                                                         ```","closed","indentation,","dmitry-cherkas","2015-01-12T17:07:34Z","2016-02-16T17:00:03Z"
"","888","Resolve some problems in Javadoc reported by Java 8, issue #291","It is not possible to nest block-level elements, such as `` inside ``.","closed","","mkordas","2015-03-29T15:28:30Z","2015-04-27T21:15:58Z"
"","965","LeftCurlyCheck :  investigate why maxLineLength is required","It is not clear why maxLineLength is required for that validation. Please investiagte. If not required - remove. If required - extend a javadoc/xdoc.","closed","approved,","romani","2015-04-23T17:07:13Z","2015-08-12T05:20:54Z"
"","953","NPathComplexity : investigate ability to follow that Check and what min level should be used","it is even implemented at PMD,  We need to figure out how to simplify a logic if reasonable and decided on minimal level of complexity.  here is his logs:  ``` [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.ClassResolver:66 Rule:NPathComplexity Priority:3 The method resolve() has an NPath complexity of 1056. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder:237 Rule:NPathComplexity Priority:3 The method visitToken() has an NPath complexity of 450. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:151 Rule:NPathComplexity Priority:3 The method visitToken() has an NPath complexity of 432. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck:152 Rule:NPathComplexity Priority:3 The method isSuperCall() has an NPath complexity of 3240. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.ExplicitInitializationCheck:79 Rule:NPathComplexity Priority:3 The method visitToken() has an NPath complexity of 2430. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.IllegalInstantiationCheck:236 Rule:NPathComplexity Priority:3 The method getIllegalInstantiation() has an NPath complexity of 4330. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck:158 Rule:NPathComplexity Priority:3 The method processIDENT() has an NPath complexity of 10368. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck:80 Rule:NPathComplexity Priority:3 The method visitToken() has an NPath complexity of 2160. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.HideUtilityClassConstructorCheck:57 Rule:NPathComplexity Priority:3 The method visitToken() has an NPath complexity of 360. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:746 Rule:NPathComplexity Priority:3 The method checkParamTags() has an NPath complexity of 366. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:883 Rule:NPathComplexity Priority:3 The method checkThrowsTags() has an NPath complexity of 1405. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:971 Rule:NPathComplexity Priority:3 The method isSetterMethod() has an NPath complexity of 324. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:1028 Rule:NPathComplexity Priority:3 The method isGetterMethod() has an NPath complexity of 324. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck:165 Rule:NPathComplexity Priority:3 The method shouldCheck() has an NPath complexity of 240. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.modifier.ModifierOrderCheck:140 Rule:NPathComplexity Priority:3 The method checkOrderSuggestedByJLS() has an NPath complexity of 228. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck:345 Rule:NPathComplexity Priority:3 The method visitToken() has an NPath complexity of 174960. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressElement:142 Rule:NPathComplexity Priority:3 The method accept() has an NPath complexity of 216. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressElement:199 Rule:NPathComplexity Priority:3 The method equals() has an NPath complexity of 513. ```","closed","approved,","romani","2015-04-21T18:18:26Z","2015-06-18T06:23:12Z"
"","936","Move PMD configuration to separate file, issue #744","It is done to allow exclusions per rule, not per entire ruleset.","closed","","mkordas","2015-04-16T19:08:07Z","2015-04-27T21:14:07Z"
"","97","Allow requirement of javadocs only for interfaces/abstract classes","It is currently possible to setup different javadoc requirements for methods with different visibility - it will be valuable to allow setup such different requirements for abstract methods - maybe even distinguishing abstact methods in interfaces and abstract classe.  Option to require javadoc only on final methods (by some modifier of method).  duplicate: https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/70","open","javadoc,","isopov","2014-02-05T10:09:18Z","2022-07-10T13:45:54Z"
"","446","Add FinalParameters option to ignore primitive types","It is common in Java to modify method parameters that are primitive types and not class references. For example, an int -1 value for a param called ""length"" is often used to denote ""entire object length"". The method then modifies ""length"" to object.size() and continues. boolean negations are also somewhat common  This is a request to have an option to the FinalParameters validation to ignore primitive types so that class references are still a warning and code like this passes  class Final {     Final(final String s, int i) {         if (i == -1)             i = s.length();         ...     } }","closed","approved,","todd-richmond","2014-12-04T05:07:29Z","2014-12-22T16:11:31Z"
"","714","Fix bugs in EmptyLineSeparator , issue #706","It fixes two problems that occured in issue #706. First of all when pre previous line of import was empty it raises ""'import' has more than 1 empty lines before"" - test case for this is testAllowMultipleImportSeparatedFromPackage. Second issue was that when one field was declared line after another is raises ""'VARIABLE_DEF' should be separated from previous statement"" , test case is InputEmptyLineSeparatorMultipleImportEmptyClass","closed","","liscju","2015-03-04T03:20:42Z","2015-03-06T14:33:29Z"
"","880","Add badge with link to Stack Overflow to main page","It could be something like that: [![Stack Overflow](http://img.shields.io/badge/stackoverflow-CHECKSTYLE-blue.svg)](http://stackoverflow.com/questions/tagged/checkstyle)","closed","approved,","mkordas","2015-03-29T00:00:38Z","2015-03-31T00:40:16Z"
"","257","RequireThis triggers when try-with-resources defines resource with same name as method","It appears that the **RequireThis** check will trigger when using the Java 7 try-with-resources construct if the resource shares the same name as the method.  ``` public void foo() {     try (final InputStream foo = new ByteArrayInputStream(new byte[512])) {         foo.read();     }     catch (final IOException e) {         e.printStackTrace();     } } ```  returns:  ```   ```  Changing the name of the resource fixes the checkstyle error.  ``` public void foo() {     try (final InputStream bar = new ByteArrayInputStream(new byte[512])) {         bar.read();     }     catch (final IOException e) {         e.printStackTrace();     } } ```","closed","approved,","rorymartin","2014-08-19T23:12:47Z","2014-12-24T19:34:54Z"
"","631","Fix NPE when setting classpath.","Issue introduced with b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1","closed","","asheldon","2015-02-10T22:05:06Z","2015-02-10T22:35:44Z"
"","90","unable to load class info when inner class in super class","Issue copied from sourceforge.net, with my additions, as this bug is really annoying, blocks using checkstyle when creating custom exception classes.  I know there have been lots of similar issues and I've read most (if not all) of them. But still something seems to be wrong.  We have a class A with an Exception E declared as public static inner class. Then we have a class B derived from class A with a method m throwing E. If we now use @throw tag in the javadoc of m, we get the ""unable to load class information"" error  An @throw tag in the javadoc of a similar method in A does not cause any Problems.  Example:  Class A:  ``` java public class A {     /*      * @throws E no problem here      */     public synchronized void m1() throws E     {         throw new E(""just a demo"");     }      public static class E extends Exception     {         public E(String message)         {             super(message);         }     } }  ```  Class B:  ``` java public class B extends A {     /*     * @throws E THIS CAUSES THE PROBLEM     */     public synchronized void m() throws E     {         throw new E(""just a demo"");     } } ```  This issue still exists in latest checkstyle.","closed","","krzyk","2014-01-30T08:11:36Z","2015-02-10T00:48:05Z"
"","849","Deleted cache from Utils class","Issue #845","closed","","damianszczepanik","2015-03-24T23:11:16Z","2015-03-27T22:06:10Z"
"","824","Delete ///CLOVER comments","Issue #823","closed","","damianszczepanik","2015-03-20T19:56:29Z","2015-03-20T20:59:51Z"
"","724","Updated all links to sun.com reference to oracle site","Issue #711","closed","","damianszczepanik","2015-03-07T17:10:43Z","2015-03-18T20:57:33Z"
"","882","Deleted System.exit() and delegated exit control into separate method.","Issue #596","closed","","damianszczepanik","2015-03-29T07:14:22Z","2015-04-24T20:02:51Z"
"","999","PMD violations: UseVarargs","Investigate usage of ""..."" instead of ""[]"" , if that is not compatible changes - lets suppress that rule, as that will seriously brake all applications that use checkstyle and expect arrays as types.  [INFO] --- maven-pmd-plugin:3.4:check (default-cli) @ checkstyle --- [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Checker:388 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:55 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:88 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:201 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Utils:49 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck:124 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.Check:101 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.FileContents:77 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.DescendantTokenCheck:322 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck:38 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck:62 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.IllegalThrowsCheck:147 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck:405 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck:425 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck:445 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.InnerAssignmentCheck:247 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck:349 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.MultipleStringLiteralsCheck:112 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck:330 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck:319 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck:382 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck:77 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck:58 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.AvoidStarImportCheck:101 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.AvoidStaticImportCheck:94 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.IllegalImportCheck:85 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck:173 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl:136 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck:276 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck:109 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.doclets.CheckDocsDoclet:238 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.doclets.TokenTypesDoclet:144 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:139 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:167 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:195 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:223 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.FileDrop$Listener:249 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.Main:41 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.ParseTreeInfoPanel$FileDropListener:163 Rule:UseVarargs Priority:4 Consider using varargs for methods or constructors which take an array the last parameter..","closed","approved,","romani","2015-04-26T17:20:24Z","2015-04-30T00:31:33Z"
"","8","presence of Checkstyle in Ubuntu and others package repositories","Investigate how ubuntu get old builds on checkstyle http://packages.ubuntu.com/raring/allpackages.  consider to support new package manager http://chocolatey.org/: http://sourceforge.net/p/checkstyle/mailman/message/31454144/  related problem that caused by old version: #5","closed","approved,","romani","2013-10-02T00:09:12Z","2016-06-10T13:29:50Z"
"","611","error during build with tools.jar","investigate and fix:  ``` [ERROR] Artifact: com.sun:tools:jar:1.7.0 has no file. ```","closed","approved,","romani","2015-02-02T06:54:15Z","2015-02-10T19:51:36Z"
"","954","CyclomaticComplexity : apply to Checkstyle code","investigate ability to enforce that rule over our code. recheck PMD validation for this too (it has 3 rules for that, we need to use only one). http://pmd.sourceforge.net/pmd-5.3.2/pmd-java/rules/java/codesize.html#CyclomaticComplexity http://pmd.sourceforge.net/pmd-5.3.2/pmd-java/rules/java/codesize.html#StdCyclomaticComplexity http://pmd.sourceforge.net/pmd-5.3.2/pmd-java/rules/java/codesize.html#ModifiedCyclomaticComplexity  http://www.sonarqube.org/discussing-cyclomatic-complexity/ http://damienlepage.com/cyclomatic-complexity/ http://en.wikipedia.org/wiki/Cyclomatic_complexity","closed","approved,","romani","2015-04-21T18:25:15Z","2015-06-18T02:13:22Z"
"","758","Issue #286","Introduce new parameter in ModifiedControlVariable check ignoreForControlVariablesNotIterated to ignore changes in variable inside for loop which are not change in iterator part of for loop. To do it before adding all variables declared in for first part to current variable stack, we calculate all variables which are changed in iterator part of for loop. The cases in this iterator part which can change defined variables are:  postincrement,preincrement,postdecrement,predecrement with IDENT operator in it(simple variable name), assignment with IDENT as first child(assignment to simple variable name). We only add variable to variable stack when it is not changed in for iterator part or ignoreForControlVariablesNotIterated is false. When we are leaving for part we pop it according to how many variables was put in it.","closed","","liscju","2015-03-12T11:01:14Z","2015-04-01T21:45:39Z"
"","813","Added new DemandTypesInLambdaCheck, fixes issue #142","Introduce new check DemandTypesInLambdaCheck which checks if all parameters in lambda has explicit types. It checks for all possible lambda parameter types: a) () -> ... empty parameter list b) t  -> ... one implicit type c) (a,b,..) -> ... many implicit types d) (T a,T b,..) -> ... many explicit types   I commented out assertions because cubertura checks them and it decreases code coverage(at this moment it looks like cubertura does not have option to skip assertions) but i think they are valuable information in code. I would be grateful for comment what to do about them.","closed","","liscju","2015-03-17T19:45:20Z","2015-03-18T12:56:17Z"
"","45","Check for interface and abstract methods with final parameters","Interface and abstract methods with final parameters have no meaning since they have no implementation and thus the non-final parameters cannot be modified.  The final keyword just adds to the clutter and Checkstyle can warn about this condition.  Fixed by #44.","closed","discussion ongoing,","gaul","2013-10-31T22:18:05Z","2016-06-28T13:56:16Z"
"","636","Refactored: updated Main.java to have system.exit be placed in one method Issue#596","Instead of calling System.exit from each methods, now an ApplicationExitException is thrown which is finally handled in main method only.","closed","","dbngshuroy","2015-02-12T14:21:57Z","2015-03-11T16:22:25Z"
"","351","FileContents.getLines performance fix","Inspired by #136 and #346 part. I was testing on the spring-boot project with the following config:  ```                                                     ```  Using checkstyle before this fix gived me 71 MB of String[] allocations. After this fix Only 2.4 MB of String[] were allocated. Execution time (that is not stable and was not properly measured) reduced insignificantly - both executions were less than 5s.","closed","","isopov","2014-10-31T08:24:08Z","2014-11-02T19:49:35Z"
"","618","IndentationCheck: no violation on not indented method header inside anonymous class","Input.java  ``` java public class Input {   void f() {     Object b = new Thread(new Runnable() {       @Override public void run() { //indent:0, expected:6; no violation generated         System.out.print(""h"");       }     });   } } ```  config.xml  ``` xml                                                          ```  Invocation:  ``` java -cp checkstyle-6.3-all.jar com.puppycrawl.tools.checkstyle.Main -c config.xml Input.java ```  actual output:  ``` Starting audit... Audit done. ```  expected violation on line 5 ##","open","indentation,","alex-zuy","2015-02-06T19:58:31Z","2016-12-14T18:16:43Z"
"","442","Removed unused incompilable input file","Input was incompilable and unused","closed","","alexkravin","2014-12-03T13:55:29Z","2014-12-11T14:40:58Z"
"","692","Created copy of Input15Extensions.java.","Input file ""Input15Extensions.java"" in ""src/test/resources/com/puppycrawl/tools/checkstyle/"" is shared by several test. This commit creates copy of this file in ""src/test/resources/com/puppycrawl/tools/checkstyle/indentation"" for using as input file in  IndentationCheckTest.","closed","","alex-zuy","2015-03-01T10:08:05Z","2015-03-01T14:58:53Z"
"","766","IndentationCheck: Incorrect line wrap handling.","IndentationCheck handles line wrap incorrectly.  Following code samples taken from test-inputs. [if](https://github.com/pirat9600q/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputValidIfIndent.java#L220)  ``` java if (test //indent:8 exp:8 ) { //indent:8 exp:8","closed","indentation,","alex-zuy","2015-03-13T12:29:41Z","2016-04-22T11:55:31Z"
"","723","JavadocMethod: addition of @version and @since checks","In the JavadocMethod module, you can only currently check for missing @param, @return, and @throws tags. If your methods (within a company's coding standard) always require @version and @since tags, it would be very convenient if properties were added within the JacadocMethod check that could check for those two missing tags. ##","open","javadoc,","seangibbens","2015-03-06T18:59:24Z","2018-01-26T12:54:35Z"
"","908","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.annotation","in pom.xml we have:  ```           .*.checks.annotation.AnnotationLocationCheck7578           .*.checks.annotation.AnnotationUseStyleCheck9396           .*.checks.annotation.MissingDeprecatedCheck9296           .*.checks.annotation.MissingOverrideCheck10096           .*.checks.annotation.PackageAnnotationCheck5077           .*.checks.annotation.SuppressWarningsCheck7996  ```  after tests improvement(to be 100% cevered) that lines have to be removed from pom.xml.","closed","approved,","romani","2015-04-08T19:45:01Z","2015-07-26T00:52:19Z"
"","117","Place suppressions_none.xml in some suitable place on the web","In our test SuppressionsLoaderTest we access the suppressions_none.xml fropm the raw.github.com. This service is not intended for such usage and test fails on non-regular basis. We need to place this file on some intended for this purpose server and access it from there.","closed","","isopov","2014-03-11T09:42:56Z","2014-11-29T16:30:06Z"
"","685","Fix comma replaced with period in docs","In config_whitespace, a comma was incorrectly replaced with a period.","closed","","Mebibyte","2015-02-25T20:12:21Z","2015-02-26T00:30:53Z"
"","71","Pom changes","In another project I needed to specify the scm connection to github to use with maven-release-plugin and copy&pasted configuration from checkstyle changing the project name, but it didn't work. I googled and this seems to be valid format.  Guava by default uses Java6. Since we are going to make another Java5 release - we should use special guava artifact (officially done by Google) supporting java5.","closed","","isopov","2013-12-04T13:10:50Z","2014-08-14T12:31:19Z"
"","883","DefaultLogger & XMLLogger shall be closed in place where is opened","In `Main` class `XMLLogger` and `DefaultLogger` are created with constructor that takes boolean value to decide whether the output stream shall be closed or not.  It's better to control if the stream shall be closed or not from method where the stream was created. In that case we avoid passing boolean value into loggers.  Also consider to create `AbstractLogger` that may keep `PrintWritter` attribute and method for closing this stream. Currently code for closing stream is duplicated and I'm not sure if stream is closed when exception is thrown so `auditFinished()` may not be invoked. ##","open","approved,","damianszczepanik","2015-03-29T07:27:26Z","2021-12-22T04:51:41Z"
"","847","Add option for CustomImportOrder to choose case sensitivity","In `com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.compareImports(String, String)`, only case-insensitive comparison is done when comparing the two adjacent `import` statements, however in both IntelliJ IDEA and Eclipse, `import` statements are sorted in ASCII order and so far cannot be changed to be case-insensitive, so CheckStyle will report some `import` statements are in invalid lexicographical orders.  For example, in IDEA, a group of sorted `import` statements is:  ``` import com.company.package1.Whatever1 import com.company.package1.subpack1.Interface1 ```  since `W` is less than `s`. However, CheckStyle will report that `import com.company.package1.subpack1.Interface1` is in a wrong lexicographical order because `W` is greater than `s` when compared case-insensitively, in other words this is the expected order:  ``` import com.company.package1.subpack1.Interface1 import com.company.package1.Whatever1 ```  There should be at least an option available to allow overriding this behavior. Moreover, I think case-sensitive comparison here is more suitable, because usually class names are in capital therefore case-sensitive sorting and comparison will make sure `import` statements for classes within the same package are often naturally adjacent to each other; case-insensitive sorting would only mix classes with `import` statements for sub-package contents.","closed","high demand,","IUSR","2015-03-24T10:03:08Z","2015-03-27T02:28:45Z"
"","128","ImportControlCheck: Load import-control.xml from classpath","ImportControlCheck should be able to read the import-control.xml from the classpath, not  only from a file or a URL.  Example (inspired by Spring's URL classpath scheme):  <module name=""ImportControl"">     <property name=""url"" value=""classpath:/import-control.xml""/> </module>  I run Checkstyle 5.7 programmatically via JUnit test.","closed","","rwoo","2014-04-01T05:48:05Z","2014-04-19T15:03:59Z"
"","223","Import VariableDeclarationUsageDistanceCheck","Import https://github.com/maxvetrenko/sevntu.checkstyle/blob/master/sevntu-checks/src/main/java/com/github/sevntu/checkstyle/checks/design/VariableDeclarationUsageDistanceCheck.java from sevntu-checkstyel project.","closed","","maxvetrenko","2014-08-05T21:17:04Z","2014-08-07T05:51:28Z"
"","994","Repair ignored test for  RegexpMultiline check","Ignored test: https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java#L101  My proposition is to introduce `TemporaryFolder` rule and write to temporary file short text with carriage returns. Any other solution would be too fragile, as Git manipulates with newlines and carriage returns.","closed","approved,","mkordas","2015-04-26T14:45:58Z","2015-04-26T20:43:53Z"
"","119","HTML comments break the Javadoc style HTML check","If the javadoc contains html tags and those tags include a comment () the detection of unclosed tags is broken.  Example:  ``` java /** *  *text * *text *  **/ public void method() {} ```  This will report an unclosed <pre> tag - which is not correct. The issue is caused by a ""off by one"" problem in the TagParser class.  Please see the attached patch file (rename .png to .patch) for a new test, test data and a fixed TagParser.  Greets! ![htmlcommentfix2](https://f.cloud.github.com/assets/1335013/2407439/4dbcc988-aa8c-11e3-9cf7-ffcd4bd78c69.png)","closed","javadoc,","theqaguy","2014-03-13T08:51:06Z","2014-03-30T05:15:51Z"
"","684","SeparatorWrap defaults are wrong","If I understood correctly the [Google Java style guide about line break](https://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.5.1-line-wrapping-where-to-break), defaults are wrong. Indeed any break should be before the dot `.` and after the coma `,` but both are currently after (i.e. `eol`).","closed","","ddidier","2015-02-25T14:33:02Z","2015-02-26T00:07:42Z"
"","239","Update for VariableDeclarationUsageDistanceCheck","If developer try to store value for far future reference to it that value have to be ""final"" to never be reinitialized. So in all that cases adding ""final"" to variable declaration is more valid and make code more stable.  But that is not obvious from violation message. So I propose to create new message (more long message) and print it is case ""mIgnoreFinal=true""   Example of new message: Distance between variable 'initHeight' declaration and its first usage is 4, but allowed 3. Consider to make that variable as final if you still need to store its value in advance (before method calls that might do side effect on original value).  if user have ""mIgnoreFinal = false"", he told us that has to be as strict as possible, so we will print old short message: Distance between variable 'initHeight' declaration and its first usage is 4, but allowed 3.","closed","","maxvetrenko","2014-08-11T11:38:17Z","2014-08-13T16:15:53Z"
"","968","i18n for Exception messages","Ideally all Exception messages should be possible to translate to other languages ##","open","easy,","romani","2015-04-23T17:25:37Z","2021-07-14T07:02:46Z"
"","886","Resize and move RSS icon used on main page","Icon currently used for RSS is a little bit to wide, it doesn't look good:  ![image](https://cloud.githubusercontent.com/assets/5467276/6661481/2962f6e6-cbad-11e4-94a4-947eb208978b.png)  This looks better: ![image](https://cloud.githubusercontent.com/assets/5467276/6661522/a4af4d9a-cbad-11e4-92e6-1b26aa6b69e6.png)  Icon could also be moved just after Sourceforge for better visual look.  Source: http://pixabay.com/p-40674  Followup to #617.","closed","","mkordas","2015-03-29T14:42:33Z","2015-04-14T15:34:21Z"
"","107","Updated Readme file","I've updated the README file so it looks a bit nicer on GitHub. When you like it, you may accept this pull request.  Thank you for your work!","closed","","TwoStone","2014-02-12T15:14:57Z","2014-07-06T07:44:33Z"
"","383","#358 (or #92) fixed. Attention, some checks might be linked with deleted node.","I've fixed our check, but AST changed a bit and custom checks may have errors.","closed","","sabaka","2014-11-23T22:36:03Z","2015-09-03T23:36:58Z"
"","851","Comments location in AST","I've faced some weirdness during comments analyzing in AST, e.g.:  ``` switch(...) {       case x:           doSmth();           // this comment has Y's CASE_GROUP as its parent       case y:           doSmth(); } ```  It provides problems during analyzing surrounding statements ##","open","antlr,","alexkravin","2015-03-26T13:51:05Z","2016-12-14T18:16:43Z"
"","650","Fixes #612. Added support of Windows line separator. Fixed UTs","I've compared generated reports against java9 sources before and after fix. There is no difference.","closed","","baratali","2015-02-17T22:24:19Z","2015-02-17T22:40:57Z"
"","285","GenericWhitespaceCheck issue with Generic with array","I'm working on a project and we are getting a GenericWhitespaceCheck issue with the following method, which is valid but can't figure out how to ignore this issue but still have GenericWhiteSpaceCheck thrown for other issues.  public Result method();  We tried to update the code formatter to add the required space to stop the warning but was not able to. We have about 50 checkstyle warnings due to this issue.  Jenkins output details; '>' is followed by whitespace.  Checks that the whitespace around the Generic tokens < and > is correct to the typical convention. The convention is not configurable.  For example the following is legal: List x = new ArrayList(); List y = new ArrayList();  But the following example is not: List < Integer > x = new ArrayList < Integer > (); List < List < Integer > > y = new ArrayList < List < Integer > > ();","closed","","nhojpatrick","2014-09-19T14:16:30Z","2014-12-31T02:44:13Z"
"","154","NPE on mvn compile","I'm getting a NullPointerError when running:  ``` mvn clean compile -Pall ```  And all is a profile running the checkstyle plugin. This however works if I run install instead of compile, like this:  ``` mvn clean install -Pall ```  Compile however works good when running it on a submodule but not on the root module.  I don't know how to proceed and maven told me to contact the plugin maintainers through this link: https://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException  ``` $ mvn -v Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T18:37:52+01:00) Maven home: /usr/local/Cellar/maven/3.2.1/libexec Java version: 1.7.0_51, vendor: Oracle Corporation Java home: /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre Default locale: en_US, platform encoding: UTF-8 OS name: ""mac os x"", version: ""10.9.2"", arch: ""x86_64"", family: ""mac""  checkstyle plugin version: 2.12.1 ```  Stacktrace:  ``` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.12.1:checkstyle (validate) on project izettle-ejb: Execution validate of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.12.1:checkstyle failed. NullPointerException -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.12.1:checkstyle (validate) on project izettle-ejb: Execution validate of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.12.1:checkstyle failed.     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:224)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) Caused by: org.apache.maven.plugin.PluginExecutionException: Execution validate of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.12.1:checkstyle failed.     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:144)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)     ... 19 more Caused by: java.lang.NullPointerException     at org.codehaus.plexus.resource.loader.JarHolder.getEntries(JarHolder.java:126)     at org.codehaus.plexus.resource.loader.JarResourceLoader.loadJar(JarResourceLoader.java:100)     at org.codehaus.plexus.resource.loader.JarResourceLoader.initialize(JarResourceLoader.java:63)     at org.codehaus.plexus.resource.loader.JarResourceLoader.getResource(JarResourceLoader.java:141)     at org.apache.maven.plugin.checkstyle.resource.LicenseResourceManager.getResource(LicenseResourceManager.java:70)     at org.codehaus.plexus.resource.DefaultResourceManager.getResourceAsFile(DefaultResourceManager.java:91)     at org.apache.maven.plugin.checkstyle.DefaultCheckstyleExecutor.getOverridingProperties(DefaultCheckstyleExecutor.java:460)     at org.apache.maven.plugin.checkstyle.DefaultCheckstyleExecutor.getConfiguration(DefaultCheckstyleExecutor.java:299)     at org.apache.maven.plugin.checkstyle.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:185)     at org.apache.maven.plugin.checkstyle.AbstractCheckstyleReport.executeReport(AbstractCheckstyleReport.java:488)     at org.apache.maven.plugin.checkstyle.CheckstyleReport.executeReport(CheckstyleReport.java:156)     at org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:196)     at org.apache.maven.reporting.AbstractMavenReport.execute(AbstractMavenReport.java:104)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)     ... 20 more ```  Please let me know if there is anymore information that I need to provide or if this is something I need to","closed","discussion ongoing,","softarn","2014-06-03T13:12:47Z","2014-06-03T17:37:49Z"
"","59","Support Double Line Wrap Indentation","I would like to see support (and/or assist in the development of) double-indentation on line-wrapped statements.  Motivation  The Java code style guidelines for open source Android (and Chromium) require double-indentation on line-wraps.  We use 4 space indents for blocks. We never use tabs. When in doubt, be consistent with code around you.  We use 8 space indents for line wraps, including function calls and assignments. For example, this is correct:  ``` Java Instrument i =         someLongExpression(that, wouldNotFit, on, one, line); ```  and this is not correct:  ``` Java Instrument i =     someLongExpression(that, wouldNotFit, on, one, line); ```  http://source.android.com/source/code-style.html#use-spaces-for-indentation","closed","approved,","apiccion","2013-11-13T18:57:07Z","2014-12-19T22:14:29Z"
"","289","Provide capability to suppress warnings per method","I would like to see a mechanism to suppress checkstyle warnings on a per method basis.  This will be particularly useful for generated code.  The same annotation mechanism that PMD uses would be nice:   http://pmd.sourceforge.net/pmd-5.1.3/suppressing.html","closed","","awhitford","2014-10-04T21:27:46Z","2015-04-09T22:11:15Z"
"","991","Support Multiple Configuration Files","I would like support for running with multiple configuration files. Example: java com.puppycrawl.tools.checkstyle.Main -c /google_checks.xml -c /custom_checks.xml  I tried this in 6.5 and it only run the first check and ignored the second.  I see this as useful if we want to add our own custom checks to be run alonside a standard one, like google's. The current way around this would be to copy the google xml and append new checks to the end of it, but then we would be required to do this for every project. The configurations in jar are there so we don't have to keep reproducing it. Not to mention if the original xml should be updated, this would require me to update the custom xml, along with the jar.  There are also other times where I can't put all my checks in the same file because of the ""RegexpSingleline"" module where I want to run different regular expressions on different file types. Having them all in the same configuration on all file types will produce incorrect errors because some checks are only made for one type, and it is allowed in another. I could run checker twice with the different configurations, but that is extra work and time going through the directory tree multiple times. ##","closed","","rnveach","2015-04-26T02:16:48Z","2019-08-05T22:06:55Z"
"","580","Indentation and synchronized block","I think there is an issue with indentation tracking:  ``` java public final class Singleton {     // ...     public static Singleton getInstance() {         if (instance == null)             synchronized (Singleton.class) {                 if (instance == null) // 'if' have incorrect indentation level 16, expected level should be 12.                     instance = new Singleton();             }         return instance;     } } ```  Here is my checkstyle configuration:  ``` xml                    ```","closed","approved,","vitkud","2015-01-14T11:19:32Z","2015-04-16T18:35:02Z"
"","845","remove CREATED_RES from Utils class","I see no reason for cache regular expression, especially in Utils class. Util class have to be stateless.","closed","approved,","romani","2015-03-23T21:02:42Z","2015-03-27T22:00:24Z"
"","36","Remove useless check for java.lang in AbstractClassCouplingCheck","I see in the code of AbstractClassCouplingCheck that java.lang are meant to be excluded:  ``` private boolean isSignificant(String aClassName) {     return (aClassName.length() > 0)             && !mIgnoredClassNames.contains(aClassName)             && !aClassName.startsWith(""java.lang.""); } ```  However in practice they are not excluded since the class names that are checked do NOT have their full package name computed. For example ""java.lang.Class"" gets counted since only ""Class"" is passed to isSignificant().  This is a a big issue...  Here's the file on which I've traced the issue: https://raw.github.com/xwiki/xwiki-commons/a10d6f9ef079c08ef3fd01dd6c1e2ff2a9cc6120/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/src/main/java/org/xwiki/component/util/ReflectionUtils.java  See https://sourceforge.net/p/checkstyle/bugs/684/","closed","discussion ongoing,","vmassol","2013-10-27T15:55:47Z","2013-12-02T23:13:35Z"
"","268","Constants within @SuppressWarnings hit a parser assertion","I recently received a [bug report for CheckStyle-IDEA](https://github.com/jshiell/checkstyle-idea/issues/109) which looks to be a missed case in the [SuppressWarningsCheck](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java) parser.  When a constant is used in @SuppressWarnings we drop through to the assertion at line 174, as the token is either an IDENT or a DOT, depending on the style.  To add to the fun, this will throw an exception if you JVM has assertions enabled, or vanish silently if not.  I've created a [minimal test case for this scenario](https://dl.dropboxusercontent.com/u/5423904/suppresswarnings-testcase.zip), producing the following output:  ``` > java -ea -jar ../lib/checkstyle-5.7-all.jar  -c checkstyle.xml src/Test.java                             Starting audit... /Users/jshiell/Projects/Test/src/Test.java:0: Got an exception - java.lang.AssertionError: Should never get here, type: 58 text: UNCHECKED Audit done. ```  All credit goes to @maartenh for finding this and creating the original test case.  Thank you :smile:","closed","approved,","jshiell","2014-09-04T09:40:59Z","2014-12-18T19:48:47Z"
"","682","Remove duplication and spaces before dots in release notes","I needed to rebase my fork using PR. Please skip merge commit when doing merge as FF.","closed","","mkordas","2015-02-25T06:21:03Z","2015-03-01T14:52:43Z"
"","297","Java 8: ""default should be last label"" when using ""default"" in interface","I have the following code:  ``` public interface JsonTranslator {    String toJson(Response one, Response two, Response three);    String toJson(Document document);    default String toJson(Response one) {     return toJson(one, one, one);   }    default String toJson(Response one, Response two) {     return toJson(one, one, two);   } } ```  Checkstyle commit ed5f8a4 complains with:  ``` [ant:checkstyle] JsonTranslator.java:12:5: Default should be last label in the switch. [ant:checkstyle] JsonTranslator.java:16:5: Default should be last label in the switch. ```","closed","","henrik242","2014-10-13T14:16:16Z","2014-10-13T20:02:20Z"
"","159","Request for check  +=","I have been surprised that Java lets expressions like the following compile:   int sum = 5;   sum += 4.2; // same as sum = (int)(sum + 4.2); This would be a great candidate for a checkstyle check if it's feasible. (It can't be done by findbugs I think.)   And, thanks for the awesome tool! My students (and staff) really appreciated it.","closed","","daveagp","2014-06-26T04:24:15Z","2014-06-27T20:06:27Z"
"","353","NullPointerException with SuppressWarningsHolder and enum fields.","I have a very simple enum source file: package checkstyleTest;  ``` public enum AnEnum {   @SuppressWarnings(""rawtypes"")   ELEMENT; } ```  And a similarly simple configuration file:  ```                ```  I use the following to produce this issue  ``` java -jar checkstyle-6.0-all.jar -c checkstyle.xml -r src ```  and get the following error:  ``` java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder.visitToken(SuppressWarningsHolder.java:321)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:442)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:529)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:373)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:207)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:73)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:263)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:121) Starting audit... C:\workspace\checkstyleTest\src\main\java\checkstyleTest\AnEnum.java:0: Folgende Ausnahme ist aufgetreten - java.lang.NullPointerException C:\workspace\checkstyleTest\src\main\java\checkstyleTest\AnEnum.java:5:3: suppress.warnings.invalid.target Audit done. ```  This also happens (similarly) in checkstyle 5.9 and with eclipse-cs plugin.","closed","bug,","Kuerten","2014-11-04T11:57:25Z","2014-12-07T06:39:32Z"
"","569","Move Treewalker cache to Checker","I have a subtle bug filed against eclipse-cs (https://sourceforge.net/p/eclipse-cs/bugs/377/) which I tracked down to TreeWalker's internal caching of files already checked.  The eclipse-cs plugin caches fully configured Checker modules internally for performance reasons. However due to TreeWalkers internal caching (TreeWalker#mCache) files are being considered as ""already checked"" in subsequent Checkstyle executions, which in turn leads to problems when projects are re-checked in eclipse during a full/clean build.  Please provide API to reset a Checker instance to pristine state, meaning all internal caches to be cleared - or modify the default TreeWalker caching (which seems unnecessary if no proper TreeWalker cacheFile is used).","closed","breaking compatibility,","lkoe","2015-01-07T22:12:54Z","2016-02-09T22:20:21Z"
"","41","RequireThisCheck doesn't check methods","I have a class:  ``` public final class This {     private final int number = 1;      public int check() {         int sum = number;         sum += other();         return sum;     }      private int other() {         return 0;     } } ```  and in checks I have enabled `` Checkstyle correctly prints that `number` should be called with `this.` but it doesn't say anything about method call `other()`.","closed","approved,","krzyk","2013-10-28T13:22:27Z","2014-01-08T16:50:39Z"
"","860","The same code is approved by jdk8 but not jdk7 or vice versa","I had several builds for which one of three build failed: sometimes jdk8 failed while tho rest jdks passed, another time the opposite results.  The problem was always with the code coverage, eg https://travis-ci.org/checkstyle/checkstyle/builds/56151842","closed","","damianszczepanik","2015-03-27T21:56:39Z","2015-03-27T22:29:45Z"
"","301","Redundant modifier final error for @SafeVarargs method","I get the redundant final modifier error (RedundantModifierCheck) for a method that is annotated with @SafeVarargs. But the Java 7 compiler needs the ""final"" keyword for SafeVarargs annotated methods (even if the method is ""private""), without ""final"" keyword it says:  ``` ""error: Invalid SafeVarargs annotation. Instance method foo(Comparator...) is not final."" ```  Example:  ``` @SafeVarargs private final void foo( Comparator... comparators ) {} ```  Environment:  ``` > java -version java version ""1.7.0_55"" Java(TM) SE Runtime Environment (build 1.7.0_55-b13) Java HotSpot(TM) 64-Bit Server VM (build 24.55-b03, mixed mode)  checkstyle version: 5.7 ```","closed","","jOlliv","2014-10-15T14:44:49Z","2014-12-13T18:38:30Z"
"","826","insert space after opening brace in array initializer","I found that code formatter we use does not follow javadoc rules we validate. Using this rule https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/CheckstyleFormatterForEclipse.xml#L12 I got error  ``` TreeWalker.java:267:31: '{' is followed by whitespace. ```","closed","","damianszczepanik","2015-03-20T21:37:34Z","2015-03-20T22:18:12Z"
"","885","Wrong indent within block with wrong indent is not reported as violation","I found error in `IndentationCheck` or inconsistent comment in `IndentationCheckTest` class.  Following [two violations](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java#L909) are not really reported as violation because of the 'magic' correction [with value 10](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java#L958) that is 'fixed' [in verify() method](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java#L183).  This 'fix' number is used for all duplicated violations as reported in #676.  So the question is: Should we report [following line](https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputInvalidBlockIndent.java#L39) as violation because it should have indention 12 while has 13 and in that case we have bug in Checkstyle, whether Should we skip this violation because relative indention is correct and the violation shall be reported for above line that opens incorrectly whole block so in that case comments [warn](https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputInvalidBlockIndent.java#L39) should be deleted?","closed","","damianszczepanik","2015-03-29T10:25:55Z","2016-04-29T12:50:25Z"
"","23","ConstantName module should not raise error on non-constants","I find that often, I have `static final` fields that are not constants. The best example is a logger (e.g. SLF4J):  ``` private static final Logger log = LoggerFactory.getLogger(MyClass.class); ```  One could do something like this for a special case:  ```                             ```  But this is obviously not very general. Perhaps it could be checked if the constant candidate has a . (dot) after it somewhere in the file?  See also the discussion here: http://stackoverflow.com/questions/1417190/should-a-static-final-logger-be-declared-in-upper-case","closed","discussion ongoing,","markuswustenberg","2013-10-17T09:14:02Z","2017-08-02T14:17:19Z"
"","612","problem with Uts on Windows","I do, however, get 21 test failures, presumably due to the different line separator. One example: https://gist.github.com/lkoe/4483a546cdf6a07b5238  Build on windows should pass","closed","approved,","romani","2015-02-02T18:59:28Z","2015-02-17T22:41:20Z"
"","255","Unexpected indentation warning for setting variables of an object returned by a function.","I am using the following configuration:  ``` xml          ```  Java code:  ``` java class HelloWorldApp {     public void setX(int newX) {         getItem().x = newX;     } } ```  Checkstyle gives me the following warning: HelloWorldApp.java:3: warning: method call child at indentation level 8 not at correct indentation, 12  It seems to me that is a bug since there is no reason to indent entire getItem().x = newX line by 4 more space.  Thoughts?","closed","approved,","liutikas","2014-08-15T22:53:14Z","2014-10-13T23:36:51Z"
"","603","Imports lexicographical sorting","I am using Intelij Idea 14 and automatic import sorting. My sorted imports looks like below:  ``` java import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.File; import java.io.IOException; import java.io.InputStreamReader; // Line 28, warning here import java.net.URISyntaxException; import java.nio.charset.Charset; import java.nio.file.Files; import java.nio.file.Paths; ```  Checkstyle 6.2 says:  ``` 28: Wrong lexicographical order for 'java.io.InputStreamReader' import. ```  Rule says: - sorts imports inside each group: ensures that imports within each group are in lexicographic order - sorts according to case: ensures that the comparison between import is case sensitive  For me sorting looks OK. What am I missing here?","closed","","MichalMichalak","2015-01-28T06:36:28Z","2015-01-28T06:55:48Z"
"","150","False positive on annotations.","I am using 2.12.1 of the maven checkstyle plugin with checkstyle 5.7 and I get a false positive on the following line where the right curly is not followed by whitespace.  @OneToMany(cascade = {CascadeType.ALL}, orphanRemoval = true)  I can not see a way to configure this to be allowed and my only solution is as far as I can see disable the whitespace checking which takes away one of the few features we find very handy in checking formatting.  thanks","closed","","Milesy","2014-05-21T12:53:56Z","2014-12-16T07:33:23Z"
"","687","Consulting.xml fails the build","https://travis-ci.org/checkstyle/checkstyle/jobs/52254431#L3415","closed","","Bhavik3","2015-02-26T12:03:16Z","2015-02-26T18:22:18Z"
"","864","integrate https://gitter.im to our repo","https://gitter.im  see example at https://github.com/thunder-project/thunder (see README banner) or other  github repos, that will help contrubutors and reviewers to discuss smth in char instead of numerous posts in PRs or issue.","closed","approved,","romani","2015-03-28T07:44:21Z","2015-03-30T20:41:59Z"
"","212","Import AbbreviationAsWordInName","https://github.com/maxvetrenko/sevntu.checkstyle/blob/master/sevntu-checks/src/main/java/com/github/sevntu/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java Import Check from SevNTU-Checkstyle to main Checkstyle project.  from Google's example: This Check can cover such cases: ""XMLHTTPRequest""(incorrect) -> ""XmlHttpRequest""(correct); ""newCustomerID""(incorrect) -> ""newCustomerId""(correct). But it's impossible to cover next case: ""innerStopWatch""(incorrect) -> ""innerStopwatch""(correct).","closed","","maxvetrenko","2014-07-30T16:44:17Z","2014-08-04T23:15:01Z"
"","863","intgrate google-style-config-test as Integration Test","https://github.com/checkstyle/google-style-config-test  all that tests could be executed as ITs (Integration Tests) of maven project. Coverage HTML page have to be updated to new links to tests.  That will simplify testing and contribution process.","closed","approved,","romani","2015-03-28T06:41:30Z","2015-06-08T03:18:41Z"
"","955","Parsing problems on openjdk9 sources","https://github.com/checkstyle/contribution/tree/master/checkstyle-tester  change at  checkstyle-tester/projects-to-test-on.properties -#openjdk|hg|http://hg.openjdk.java.net/jdk7/jdk7/jdk/ +openjdk|hg|http://hg.openjdk.java.net/jdk9/jdk9/jdk/|jdk9-b59  launch testing ""./launch"":  Results: /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/GetAnnotatedReceiverType.java:35:25: unexpected token: GetAnnotatedReceiverType /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/GetAnnotatedReceiverType.java:36:19: unexpected token: void /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/GetAnnotatedReceiverType.java:43:72: unexpected token: . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/GetAnnotatedReceiverType.java:89:20: unexpected token: int /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/GetAnnotatedReceiverType.java:90:20: unexpected token: int /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/GetAnnotatedReceiverType.java:92:19: unexpected token: void /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/GetAnnotatedReceiverType.java:93:52: expecting IDENT, found '.' [ERROR] MismatchedTokenException occurred during the analysis of file /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/GetAnnotatedReceiverType.java . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/ConstructorReceiverTest.java:131:92: unexpected token: . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/ConstructorReceiverTest.java:134:56: unexpected token: . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/ConstructorReceiverTest.java:137:72: unexpected token: . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/ConstructorReceiverTest.java:142:54: unexpected token: . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/ConstructorReceiverTest.java:150:70: unexpected token: . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/ConstructorReceiverTest.java:153:87: unexpected token: . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/ConstructorReceiverTest.java:161:90: unexpected token: . [ERROR] MismatchedTokenException occurred during the analysis of file /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/ConstructorReceiverTest.java . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/TestExecutableGetAnnotatedType.java:200:52: expecting IDENT, found '@' /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/TestExecutableGetAnnotatedType.java:200:60: unexpected token: RuntimeException [ERROR] MismatchedTokenException occurred during the analysis of file /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/typeAnnotations/TestExecutableGetAnnotatedType.java . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeAnnotationReflection.java:522:86: unexpected token: . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeAnnotationReflection.java:523:31: unexpected token: ParameterizedInner /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeAnnotationReflection.java:523:82: unexpected token: Integer [ERROR] MismatchedTokenException occurred during the analysis of file /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeAnnotationReflection.java . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:97:37: expecting IDENT, found '@' /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:97:77: unexpected token: AnnotatedElement /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:97:131: unexpected token: Type /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:101:47: expecting IDENT, found '@' /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:101:87: unexpected token: Set /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:101:115: unexpected token: Callable /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:111:32: expecting IDENT, found '@' /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:111:61: unexpected token: Runnable /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:112:16: unexpected token: < /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:112:21: unexpected token: C6MT1 /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:113:34: unexpected token: AnnotatedElement /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:114:34: unexpected token: AnnotatedElement /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:114:58: unexpected token: Type /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java:115:35: unexpected token: C6CT2 [ERROR] MismatchedTokenException occurred during the analysis of file /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeVariableBounds.java . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeParamAnnotation.java:102:18: expecting IDENT, found '@' /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeParamAnnotation.java:102:49: unexpected token: T /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeParamAnnotation.java:104:49: unexpected token: V /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeParamAnnotation.java:105:12: unexpected token: < /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeParamAnnotation.java:105:44: unexpected token: X /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/lang/annotation/TypeParamAnnotation.java:107:44: unexpected token: Z /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/util/concurrent/ConcurrentHashMap/ToArray.java:91:26: unexpected token: < [ERROR] MismatchedTokenException occurred during the analysis of file /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/java/util/concurrent/ConcurrentHashMap/ToArray.java . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TargetTypes.java:93:25: expecting ELLIPSIS, found 'this' /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TargetTypes.java:108:5: unexpected token: < /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TargetTypes.java:108:9: unexpected token: T /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TargetTypes.java:108:15: unexpected token: U /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TargetTypes.java:112:13: expecting IDENT, found '@' /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TargetTypes.java:112:22: unexpected token: U /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TargetTypes.java:143:44: expecting SEMI, found '@' [ERROR] MismatchedTokenException occurred during the analysis of file /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TargetTypes.java . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TypeUseTarget.java:37:6: unexpected token: String /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TypeUseTarget.java:37:16: unexpected token: [ /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TypeUseTarget.java:39:6: unexpected token: String /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TypeUseTarget.java:39:21: unexpected token: TypeUseTarget /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TypeUseTarget.java:39:47: unexpected token: String /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TypeUseTarget.java:39:64: unexpected token: String /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TypeUseTarget.java:39:74: unexpected token: ... /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TypeUseTarget.java:40:8: unexpected token: Object /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TypeUseTarget.java:40:26: unexpected token: String /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TypeUseTarget.java:40:36: unexpected token: [ [ERROR] MismatchedTokenException occurred during the analysis of file /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/test/tools/pack200/typeannos/TypeUseTarget.java . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/src/java.base/unix/classes/java/io/FileDescriptor.java:217:26: expecting IDENT, found ')' [ERROR] MismatchedTokenException occurred during the analysis of file /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/src/java.base/unix/classes/java/io/FileDescriptor.java . /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/src/java.base/windows/classes/java/io/FileDescriptor.java:215:26: expecting IDENT, found ')' [ERROR] MismatchedTokenException occurred during the analysis of file /home/rivanov/checkstyle-test/contribution/checkstyle-tester/src/main/java/openjdk/src/java.base/windows/classes/java/io/FileDescriptor.java .  Expected: no parsing problems if sources are compilable, if smth is not compilable we need toput exclude path to property file of checkstyle-tester.","closed","antlr,","romani","2015-04-21T21:38:39Z","2016-06-02T15:50:15Z"
"","316","JavaDocParagraph #315","https://github.com/checkstyle/checkstyle/issues/315","closed","","maxvetrenko","2014-10-20T21:21:46Z","2018-11-02T23:37:15Z"
"","94","SuppressionsLoaderTest.testLoadFromURL is failed when launched off-line","https://github.com/checkstyle/checkstyle/blob/master/src/tests/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java#L59 Following test depend on internet connection:  "" public void testLoadFromURL() throws CheckstyleException""  we need to find way to skip tests are launched in off-line (no internet connection).","closed","approved,","romani","2014-02-01T17:31:45Z","2014-12-12T23:32:17Z"
"","676","Forbid multiple violation for the same line in IndentaitonCheck","https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputInvalidMethodIndent.java#L85  ```  public InputInvalidMethodIndent(int dummy, int dummy2) { System.getProperty(""foo""); } ```  https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java#L273  ```  ""87: 'ctor def' child have incorrect indentation level 4, expected level should be 8."", ""87: 'method call' child have incorrect indentation level 4, expected level should be 8."", ```  Expected: only one violation for one line of code","closed","indentation,","romani","2015-02-23T18:58:29Z","2016-02-18T14:01:03Z"
"","342","TreeWalker:  Check.getAcceptableTokens() method is ignored","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L297  ``` //register configured tokens final int acceptableTokens[] = aCheck.getAcceptableTokens(); Arrays.sort(acceptableTokens); for (String token : checkTokens) {     try {         final int tokenId = TokenTypes.getTokenId(token);         if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {             registerCheck(token, aCheck);         }         // TODO: else log warning     }     catch (final IllegalArgumentException ex) {         throw new CheckstyleException(""illegal token \""""             + token + ""\"" in check "" + aCheck, ex);     } } ```  getAcceptableTokens() is not used in TreeWalker so any usages of that method in Checks are naive. Example HiddenFieldCheck.java .","closed","approved,","romani","2014-10-30T04:05:52Z","2015-02-08T21:47:12Z"
"","596","refactoring: update Main.java to have system.exit be placed in one method","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Main.java  it has too much exit points from different methods, that is not good and hard to maintain, exceptions should be rethrown to top level and exit from application should be in one method.","closed","approved,","romani","2015-01-25T05:22:20Z","2015-05-05T18:13:25Z"
"","595","false positive in AbstractClassNameCheck","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java  Problem: Check out @deveth0's Tweet: https://twitter.com/deveth0/status/558596474465189888?s=09","closed","approved,","romani","2015-01-23T13:22:38Z","2015-02-10T15:07:24Z"
"","567","Illegal Type Check: not all default classes could be blindly substituted","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java#L50  http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html vs  http://docs.oracle.com/javase/7/docs/api/java/util/List.html  There bunch of methods that LinkedList class is owning, so List can not be used as blind substitution for LinkedList  without detailed analysis of that variable/field in code. Checkstyle is not able to do that correctly, so that generate a lot of false positives.  TODO:  review all default classes and keep only that classes that could be 100% substituted by Interface reference.   additional todo: use https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java#L340 instead  of  ""isStarImport""","closed","approved,","romani","2015-01-06T22:55:50Z","2015-01-30T22:06:39Z"
"","655","enforce all checks to override getRequiredTokens method","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java#L91  1) Update all checks to have getRequiredTokens in them (special focus on FinalLocalVariableCheck.java where all that methods have weird values, same could be in other classe). Please recheck that getRequiredTokens is used correclty.  2) as separate commit please make getRequiredTokens and getAcceptableTokens methods as abstract. That will be API changes and bracking compatibility.","closed","approved,","romani","2015-02-19T19:41:29Z","2015-08-25T12:34:26Z"
"","288","Incorrect site.xml file for release 5.7.0 on sourceforge","http://sourceforge.net/projects/eclipse-cs/files/updatesite/5.7.0/site.xml refers to release 5.6.1 causing ""no repository found"" issues when installing it from eclipse market place.    I'm not sure if this is the right place to report this.","closed","","letrait","2014-09-29T16:18:19Z","2014-09-29T19:57:10Z"
"","798","Add JDepend to Quality reports","http://mojo.codehaus.org/jdepend-maven-plugin/","closed","","mkordas","2015-03-15T11:45:58Z","2015-03-22T17:21:48Z"
"","894","FinalLocalVariable - Effectively final variables","http://javarevisited.blogspot.com/2015/03/what-is-effectively-final-variable-of.html  recheck that effectively final variables (non explicitly final but used only in lambdas) are not caught by http://checkstyle.sourceforge.net/config_coding.html#FinalLocalVariable ##","open","approved,","romani","2015-04-02T23:07:40Z","2016-12-14T18:16:41Z"
"","333","new Check: CommentsIndentationCheck","http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.8.6.1-block-comment-style  from whole paragraph looks like only :   ``` Block comments are indented at the same level as the surrounding code.  They may be in /* ... */ style or // ... style. For multi-line /* ... */ comments,  subsequent lines must start with * aligned with the * on the previous line. ```   is a rule and just Indentation validation for single line and multi-line comments. It might be reasonable to update existing Indentation Check, but I would prefer to keep it separate, lets discuss.","closed","approved,","romani","2014-10-22T22:39:11Z","2015-09-03T13:30:01Z"
"","302","New Check: AnnotationLocation","http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.8.5-annotations  These line breaks do not constitute line-wrappin, so the indentation level is not increased. Example:  @Override @Nullable public String getNameIfPresent() { ... }    We have to cover the following cases: 1. Annotations applying to a class, method, constructor or field should appear immediately after the documentation block 2. Multiple annotations applying to a class, method or constructor should be separated by a new line","closed","","maxvetrenko","2014-10-15T20:23:26Z","2014-10-19T16:11:59Z"
"","186","New Check: EmptyLineSeparatorCheck","http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.6.1-vertical-whitespace Need to implement next rule: Exactly one blank line separates each section that is present. Also need to cover Vertical Whitespace","closed","","maxvetrenko","2014-07-14T11:24:05Z","2014-07-16T03:09:02Z"
"","227","Update for EmptyLineSeparatorCheck","http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.6.1-vertical-whitespace A blank line between two consecutive fields (having no other code between them) is optional. Such blank lines are used as needed to create logical groupings of fields. Remove violations between consecutive fields.","closed","","maxvetrenko","2014-08-07T20:30:10Z","2014-08-08T20:48:47Z"
"","172","New Check: OneTopLevelClassCheck","http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s3.4.1-one-top-level-class  Each top-level class resides in a source file of its own.","closed","","maxvetrenko","2014-07-05T07:53:22Z","2014-07-05T15:20:13Z"
"","173","New Check: NoLineWrapCheck","http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s3.3.2-import-line-wrapping http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s3.2-package-statement  The package and import statements are not line-wrapped.","closed","","maxvetrenko","2014-07-05T07:53:57Z","2014-07-05T13:57:21Z"
"","902","PMD report is not empty on web site","http://checkstyle.sourceforge.net/pmd.html have violations on code that should be ignored  generation by ""mvn clean site"" generate empt report.  right now it is referenced twice in POM,  PMD plugin might need to moved to pluginManagement to have the same configuration.","closed","approved,","romani","2015-04-07T04:53:21Z","2015-04-07T05:20:33Z"
"","686","update config/test links in Google style","http://checkstyle.sourceforge.net/google_style.html some links (config/test) are shifted, please recheck all and update to actual lines.","closed","approved,","romani","2015-02-26T00:10:31Z","2015-02-27T17:45:23Z"
"","66","ParameterNumber check option to ignore methods with an @Override","http://checkstyle.sourceforge.net/config_sizes.html#ParameterNumber  Please provide an option for the ParameterNumber check to ignore methods that are override from other classes (Checkstyle have no access to other classes structure).","closed","approved,","isopov","2013-11-17T10:54:16Z","2014-12-24T19:50:15Z"
"","33","Allow to ignore java.lang and certain other classes","http://checkstyle.sourceforge.net/config_metrics.html#ClassDataAbstractionCoupling  There should be option to exclude certain classes and java.lang when doing coupling checks. For example  ```                                             ```  consider to specify Class names have to be with full names ""java.util....."" .....","closed","discussion ongoing,","vmassol","2013-10-27T14:20:50Z","2013-12-02T23:04:12Z"
"","915","JavadocMethod:  new option to validate URL at @link","http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod New option something like this (the default being true)  ```         ```  Project that have a lot of links in javadoc -  https://github.com/iDevicesInc/SweetBlue Currently, there are no broken @link references, so to test, just open any of the java files and add an extra character to one of the middle of links, thats what I've been doing to test things out.  ##","open","javadoc,","ryanhubbell","2015-04-09T21:11:54Z","2017-09-02T22:22:50Z"
"","337","Documentation error for CustomImportOrder","http://checkstyle.sourceforge.net/config_imports.html#CustomImportOrder  Under properties, separateLineBetweenGroup should be separateLineBetweenGroups.","closed","","asheldon","2014-10-23T15:12:54Z","2014-10-23T17:11:26Z"
"","286","ModifiedControlVariable: need option to skip","http://checkstyle.sourceforge.net/config_coding.html#ModifiedControlVariable  Config:  ```                  ```  code:  ``` for (int i = 0; i < days; i++) {     if (isWeekEnd(result)) {         i--; // WARNING ""Modified Control Variable: Control variable 'i' is modified.""     }     result = result.plusDays(1); } ```  Violation is valid, but could could not be done better with while as in that case ""i"" will be exposed to upper scope. Possibly better code is :  ``` for (int i = 0; i < days;) {     if (!isWeekEnd(result)) {         i++; // the same WARNING     }     result = result.plusDays(1); } ```  so we need an option to ignore cases when post action part is missed in FOR and iteration done in side body. default value is to true (do ignoring) .","closed","","romani","2014-09-24T14:57:18Z","2015-04-01T21:44:50Z"
"","190","Update for existing Check: EmptyBlock","http://checkstyle.sourceforge.net/config_blocks.html#EmptyBlock http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.1.3-braces-empty-blocks If (a==1) {} //is not OK  If (doSideEffect()==1) {} //is not OK,  while ((r = in.read()) != 0) {} // is OK  for (; index < s.length() && s[index] != 'x'; index++) {} // is OK  and  If (a==1) {} else {print(a)} // is not OK  Till comments support are not in Checkstyle you can not extend this check to allow empty blocks that have a comments.  // it is OK, but it's impossible to support this now If (a==1) {/*it is ok */} else {print(a)}","closed","","maxvetrenko","2014-07-16T11:33:30Z","2014-07-17T00:11:56Z"
"","95","web site: need explanation/link how to get  checkstyle-X.X-all.jar","http://checkstyle.sourceforge.net/cmdline.html   1) Need to explain user from where checkstyle-X.X-all.jar could be downloaded. I got question in mail list about this on Jan 2014  2) add commands examples for Windows,  ""^"" instead of ""\"" at the end of the line.","closed","approved,","romani","2014-02-05T03:18:40Z","2014-12-31T02:50:12Z"
"","7","update cmdline.html web page to have ready to use command examples","http://checkstyle.sourceforge.net/cmdline.html  update this page to make commands ready to copy-paste to terminal for usage after unzip of distribution archive.  Note: have ""-jar checkstyle-5.6-all.jar "" in command lines, and other updates for users who are unfamiliar with Checkstyle","closed","approved,","romani","2013-10-01T23:34:44Z","2014-11-29T17:00:21Z"
"","784","OverloadMethodsDeclarationOrder is not referenced on the Available Checks page","http://checkstyle.sourceforge.net/availablechecks.html does not mention http://checkstyle.sourceforge.net/config_coding.html#OverloadMethodsDeclarationOrder","closed","approved,","mkordas","2015-03-14T23:38:01Z","2015-03-15T00:18:05Z"
"","634","avoid manual passphrase input during release process","how to:  http://java.dzone.com/articles/deploy-maven-central","closed","approved,","romani","2015-02-11T22:56:37Z","2015-05-06T05:59:47Z"
"","607","Hidden Field IgnoresFormat is not working correctly","Hidden Field IgnoreFormat is not working correctly. Here is some sample code:  ``` public class Sample {    private List tests;    public Sample() {       tests = new ArrayList();    }    public List getTests() {       return tests;    }    public void addTest(final String test) {       this.tests.add(test);    }    public void addAllTests(final List tests) {       this.tests.addAll(tests);    } } ```  Entry in Checkstyle xml:  ```                                        ```  It is still flagging the addAll method as a violation. I tried ""addAll"", ""addAll*"" as well just encase I was missing something with how the format works. I am using the latest version of checkstyle 6.2","closed","approved,","christopherpicard","2015-01-30T04:52:14Z","2015-03-04T16:37:02Z"
"","599","Some errors using Google Java Style configuration","Hi, there.  I'm using Checkstyle-IDEA plugin on Android Studio. The plugin uses Checkstyle 6.1.1.   I imported Checkstyle's Google Java Style configuration of master branch, but I've got following errors:   ``` org.infernus.idea.checkstyle.exception.CheckStylePluginException: The CheckStyle rules file could not be loaded.Property 'fileExtensions' in module Checker does not exist, please check the documentation     at org.infernus.idea.checkstyle.checker.CheckerFactory.blacklistAndShowMessage(CheckerFactory.java:234)     at org.infernus.idea.checkstyle.checker.CheckerFactory.createChecker(CheckerFactory.java:188)     at org.infernus.idea.checkstyle.checker.CheckerFactory.getOrCreateCachedChecker(CheckerFactory.java:98)     at org.infernus.idea.checkstyle.checker.CheckerFactory.getChecker(CheckerFactory.java:73)     at org.infernus.idea.checkstyle.checker.CheckerFactory.getChecker(CheckerFactory.java:41)     at org.infernus.idea.checkstyle.ui.LocationDialogue.testLoadOfFile(LocationDialogue.java:197)     at org.infernus.idea.checkstyle.ui.LocationDialogue.access$800(LocationDialogue.java:24)     at org.infernus.idea.checkstyle.ui.LocationDialogue$NextAction.actionPerformed(LocationDialogue.java:242) ```  It seems like the configuration file's problem(src/main/resources/google_checks.xml).  Please fix this problem.  Regards, David","closed","","ghost","2015-01-26T08:47:21Z","2015-01-27T08:29:12Z"
"","81","Enhancement request for regular expression checker modules for an ""exclude"" parameter","Hi, I would like to propose an enhancement for the RegexpMultilineCheck (and I suppose also for the single line module), to add an ""exclude"" parameter that could be used to trim results, where the value of this new parameter would be a regular expression. The difference between existing filtering capabilities would be that results could be excluded on a per-line basis, based on a pattern, regardless of file type. For example, to simplify writing regular expression rules for cases where there are lines of code or configuration where something should always be flagged, but not when an additional API or setting is used. Trying to accomplish this using only regular expressions otherwise can get overly complicated. Thanks for your consideration.","closed","","Boberski","2013-12-19T21:49:41Z","2014-02-11T03:53:03Z"
"","80","added support for a separate throws indentation configuration","Hi,  This pull request addresses issue #63 (in GitHub).  It also addresses the older sourceforge ticket: http://sourceforge.net/p/checkstyle/feature-requests/294/  It gives you the ability to define a separate indentation for ""throws"".  It's mostly not my code, but Maikel Steneker's (@maikelsteneker).  Maikel had forked the original checkstyle repo and added support for a separate throws indentation (and then made it available on GitHub).  I found Maikel's repo awhile back and have been using it.  It works great with Maven and Eclipse.  I just added a unit test to what Maikel had already created and set up this branch so that I could submit it as a pull request since checkstyle development is picking up again.  I think this should be an easy merge?  Thanks for looking into it.","closed","","ksclarke","2013-12-18T20:05:46Z","2014-06-16T18:47:07Z"
"","747","Java 8 Lambda variables don't need to be final","Hi,  Checkstyle 6.4.1 Java 8u40  Running Checkstyle 6.4.1 against some Java 8 code, produces a lot of these type of warnings (a small example is shown below):  ``` [ant:checkstyle]  Orders.java:150:26: warning: Variable 't' should be declared final. [ant:checkstyle]  Orders.java:150:29: warning: Variable 'u' should be declared final. ```  An example of the code that is valid in Java 8 (and is being checked by Checkstyle) is shown below. Putting ""final"" before the variables (t and u) produces syntax errors, therefore Checkstyle should not flag these conditions as needing final keywords:  ``` private void addTotalValueOfOrder(final AugmentedOrder order) {     final BigDecimal totalValueOfOrder = order.getTransactions().stream()             .reduce(BigDecimal.ZERO,                     (t, u) -> t.add(u.getAmount()),                     BigDecimal::add);     order.setTotalValueOfOrder(totalValueOfOrder.toPlainString());  } ```  Thank you.  -=david=-","closed","approved,","dharrigan","2015-03-11T11:14:36Z","2015-03-16T08:47:15Z"
"","712","Custom rule jar/class not found by CheckStyle","Hi,  -I'm trying to create a custom rule below the TreeWalker module in CheckStyle.  -I'm following the example in http://checkstyle.sourceforge.net/writingchecks.html but can't make CheckStyle find my custom rule class.  -Using the command in http://checkstyle.sourceforge.net/writingchecks.html#Integrate_your_check :  C:>java -classpath my_rule.jar:checkstyle-6.4-all.jar -c config.xml -r .  (my_rule.jar contains my rule class, config.xml is a subset of the modules in \checkstyle-6.4-src\checkstyle-6.4\config\checkstyle_checks.xml)  -Gives the error below:  Unrecognized option: -c Error: Could not create the Java Virtual Machine. Error: A fatal exception has occurred. Program will exit.  -If adding ""-jar checkstyle-6.4-all.jar"" to the command:  C:>java -classpath my_rule.jar:checkstyle-6.4-all.jar -jar checkstyle-6.4-all.jar -c config.xml -r .  -It gives another error:  org.apache.commons.cli.UnrecognizedOptionException: Unrecognized option: -r         at org.apache.commons.cli.Parser.processOption(Parser.java:363)         at org.apache.commons.cli.Parser.parse(Parser.java:199)         at org.apache.commons.cli.Parser.parse(Parser.java:85)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:77) usage: java com.puppycrawl.tools.checkstyle.Main [options] -c              file...  -c    The check configuration file to use.  -f    Sets the output format. (plain|xml). Defaults to plain  -o    Sets the output file. Defaults to stdout  -p    Loads the properties file  -v         Print product version and exit  -If removing ""-r"" from the the command:  C:>java -classpath my_rule.jar:checkstyle-6.4-all.jar -jar checkstyle-6.4-all.jar -c config.xml .  -The default check works OK:  Starting audit... C:.\Test.java:472:17: Name 'TestInvalidMethodName' must match pattern '^[a-z][a-zA-Z0-9]_$'. C:.\Test.java:499:17: Name 'TestAllErrorsInCombination' must match pattern'^[a-z][a-zA-Z0-9]_$'. Audit done.  -The default check also works with the two alternative commands below:  C:>java -classpath checkstyle-6.4-all.jar -jar checkstyle-6.4-all.jar -c config.xml .  (i.e. removed my_rule.jar from classpath) C:>java -jar checkstyle-6.4-all.jar -c config.xml .                                    (i.e. removed all jars from classpath)  ***\* MY PROBLEM IS DESCRIBED BELOW ***  -My custom rule check doesn't work with the command below:  C:>java -classpath my_rule.jar:checkstyle-6.4-all.jar -jar checkstyle-6.4-all.jar -c my_config.xml . (my_config.xml contains same modules as in config.xml plus my custom rule TestCaseAnnotationCheck class)  -It looks like the TestCaseAnnotationCheck class is not found on the classpath:   Unable to create Checker: cannot initialize module TreeWalker - Unable to instantiate com.my.checkstyle.rule.TestCaseAnnotationCheck com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Unable to instantiate com.my.checkstyle.rule.TestCaseAnnotationCheck         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:184)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:185)         at com.puppycrawl.tools.checkstyle.Main.createChecker(Main.java:150)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:127) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Unable to instantiate com.my.checkstyle.rule.TestCaseAnnotationCheck         at com.puppycrawl.tools.checkstyle.PackageObjectFactory.createModule(PackageObjectFactory.java:156)         at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:182)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:185)         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:163)         ... 3 more Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Unable to instantiate com.my.checkstyle.rule.TestCaseAnnotationCheckCheck         at com.puppycrawl.tools.checkstyle.PackageObjectFactory.doMakeObject(PackageObjectFactory.java:98)         at com.puppycrawl.tools.checkstyle.PackageObjectFactory.createModule(PackageObjectFactory.java:153)         ... 6 more  -Why is ""Check"" appended on the TestCaseAnnotationCheck class name on this line? Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Unable to instantiate com.my.checkstyle.rule.TestCaseAnnotationCheckCheck   -I get the same error when removing my_rule.jar from the classpath in the command:  C:>java -jar checkstyle-6.4-all.jar -c my_config.xml .  -It's like CheckStyle can't see my rule jar/class?  -How do I make CheckStyle find my rule? :)  -NOTE: My TestCaseAnnotationCheck rule class and my_config.xml works when running it with CheckStyle in Eclipse.  Regards SteffeC","closed","","SteffeC","2015-03-03T16:51:02Z","2015-03-04T22:55:25Z"
"","131","AnnotationUseStyle closingParens check failed with annotation annotated with javax.validation.Constraint","Hi !  I made a custom ""compound"" validation annotation such as the one described here https://docs.jboss.org/hibernate/validator/4.0.1/reference/en/html/validator-customconstraints.html#validator-customconstraints-compound :  ``` package com.mycompany;  import ...  @NotNull @Size(min = 2, max = 14) @CheckCase(CaseMode.UPPER) @Target( { METHOD, FIELD, ANNOTATION_TYPE }) @Retention(RUNTIME) @Constraint(validatedBy = {}) @Documented public @interface ValidLicensePlate {      String message() default ""{com.mycompany.constraints.validlicenseplate}"";      Class[] groups() default {};      Class","closed","approved,","spydesk","2014-04-16T09:31:57Z","2014-12-23T00:35:29Z"
"","903","Skip type annotations from validation of ModifierOrderCheck","Hey,  Currently, ModifierOrder enforces that annotations must precede all non-annotation modifiers. With Java 8 annotations are allowed in places such as:  ``` java List timestamps; ```  This means that combining the above with this:  ``` java @Nullable public Long getStartTimeOrNull() { ... } ```  starts to look a bit odd.  It would be great if it could look like:  ``` java public @Nullable Long getStartTimeOrNull() { ... } ```  Would it be possible to add an option to the checkstyle rule to allow us to still check for inconsistent non-annotation modifiers?  I can see a few ways in which this could be made configurable: - Ignore all annotations - Ignore annotations which match a regex - Allow all annotations to be at the beginning or just before the type - Allow certain annotations (regex) to be just before the type  I also thought about allowing customisation of the order of modifiers but it doesn't really seem like this would work well since we would probably want annotations which are not relevant to the type to be at the beginning.  Cheers","closed","approved,","SerialVelocity","2015-04-07T16:32:30Z","2016-02-21T17:03:06Z"
"","127","Update UnusedImportsCheck to correctly detect classes in parameters and inline tags nested within block tags.","Hey guys,  Like the title says, I've extended UnusedImportsCheck to more correctly parse Javadoc. This should also fix https://github.com/checkstyle/checkstyle/issues/88.   do you have a schedule for a 5.8 release?  cheers, James","closed","","jamesgorman2","2014-03-31T04:51:46Z","2014-07-25T14:11:04Z"
"","118","Falsely reporting wrong indentation for Mockito calls.","Here is the code sample.  ```         Mockito.doAnswer(new Answer() {             @Override             public Object answer(InvocationOnMock invocation) {                 return null;             }         }).when(someInstance).someMethod(Mockito.eq(someParam),             AdditionalMatchers.aryEq(someOtherParam)); ```  The problem is with second param for 'someMethod', it's on a new line, but checkstyle says that indentation is wrong, and need to be 16 instead of 12, which is wrong.","closed","indentation,","gusega","2014-03-12T08:14:44Z","2016-04-22T11:52:17Z"
"","256","New check RegexpOnFilename","Here is a new check called 'RegexpOnFilename', which applies a given regular expression to the names of files (path and file name, not the file contents). Depending on the configuration, a warning is logged if a required match is not found, or if an illegal match is found.  This is useful for situations such as: - Checking that resources in certain directories follow a naming convention - Resource file names contain only legal characters - Files of certain types are created in the right places, e.g. Java files under src/*/java - Prevent certain files or types of files altogether, by ""banning"" their names","closed","","tsjensen","2014-08-18T19:36:50Z","2014-08-19T13:54:47Z"
"","614","Any plans to support other languages (e.g. javascript)?","Hello together,  not sure if it is the right place, but I am wondering if the great tool has any plans to support other languages like PMD does. It would be a great benefit, if - in the meanwhile more and more commonly used UI-language javascript - could also be supported. I would like to contribute, but will need some help regarding how to analyse the JS code and to provide it in the same manner like java code is provided in AST and for the visitor pattern.  Could one of the core developers tell about the plans regarding support of other languages?  best wishes","closed","","dpalic","2015-02-05T06:50:35Z","2015-02-05T13:31:34Z"
"","272","Check for Logger to be declared as a static final class attribute","Have written custom check, but all I get is   Unable to create Checker: cannot initialize module TreeWalker - Unable to instantiate com.softquatra.checkstyle.LoggerAttrCheck com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Unable to instantiate com.softquatra.checkstyle.LoggerAttrCheck  my command line is  java -D64  -jar C:\checkstyle-5.7\checkstyle-5.7-all.jar -c ""C:/02-Client-Code/SIX_Systems/Checkstyle/SIX_checks_SQS.xm l"" -f xml -o C:/01-Demo-Code/VGJ/SIX_checkstyle_errors.xml -r C:/01-Demo-Code/VG J/EDU/auburn  So two questions, is there a better way, or what I am doing wrong.","closed","","tymieniecki","2014-09-08T17:21:58Z","2014-09-09T20:17:57Z"
"","323","Fix false positives in JavaDocTagContinuationIndentationCheck","Have false positives in next cases:   /**  * This class implements the GWT serialization of {@link HashMultimap}.  *   * @author Jord Sonneveld  *    // False positive!  */   /**  * This class implements the GWT serialization of {@link  * HashMultimap}.  // False positive!  *     */","closed","","maxvetrenko","2014-10-22T13:32:14Z","2014-10-22T14:08:34Z"
"","647","IndentationCheck. Refactoring: got rid of anonymous classes.","Got rid of anonymous classes.","closed","","alex-zuy","2015-02-16T14:30:53Z","2015-02-18T16:12:00Z"
"","241","Fix NPE in AbbreviationAsWordInNameCheck","Got an exception in next case:   @CollectionFeature.Require(absent = SUPPORTS_REMOVE) //NPE exception   public void testSetCount_negative_removeUnsupported() {}","closed","","maxvetrenko","2014-08-11T13:17:37Z","2014-08-11T22:56:41Z"
"","518","GenericWhitespace false positive for method reference with generics","Given the following code and release 6.1.1, a false positive warning is raised:  ``` Supplier supplier = ImmutableList.Builder::new; ```  The error occurs where the `>` is followed by `::` at character index 57.  Although similar to #372, that referred to a parsing error, but this is a whitespace checking error. I can't find any other issue referring to this problem.  As far as I can tell, there is no way to workaround this, other than to disable the check.","closed","","jodastephen","2014-12-19T17:23:06Z","2014-12-19T19:00:49Z"
"","730","HiddenField.ignoreSetter does not work for single-letter fields since 6.3","Given Java source:  ``` package com.example;  public class Point {      private int x;      private int yy;      public void setX(int x) {         this.x = x;     }      public void setYy(int yy) {         this.yy = yy;     } } ```  and Checkstyle configuration:  ```                                               ```  Checkstyle reports the following error:  ``` Point.java:9:26: 'x' hides a field. ```  The regression appears in Checkstyle 6.3, 6.4 and 6.4.1. Works fine for 6.2, 6.1, 6.0 and 5.9.  [Release notes for 6.3](http://checkstyle.sourceforge.net/releasenotes.html#Release_6.3) mention HiddenField in new implemented features, but the provided link to #589 points to a completely unrelated commit.","closed","","Derbeth","2015-03-09T07:52:04Z","2015-03-10T06:22:52Z"
"","549","Resolve all problems of linkcheck maven plugin","generate html report  mvn clean package -Pdistro but it could be generated in more quick way, but additional changes in pom.xml is requierd.  review errors: ~/checkstyle-test/checkstyle/target/site/linkcheck.html  We could suppress errors that we can not resolve.  Problem with links to methods at javadoc should  be resolved too, as such links is used in writing_checks.html , here is problem with using Struts templates ....","closed","approved,","romani","2014-12-27T15:48:32Z","2018-01-19T00:16:36Z"
"","51","False positive with GenericWhitespace - InnerClass","from SF issue: 589 http://checkstyle.sourceforge.net/config_whitespace.html#GenericWhitespace  ``` import java.util.List;  public class CheckstyleBugs {      private List","closed","approved,","romani","2013-11-10T01:31:31Z","2014-12-17T15:44:10Z"
"","551","Extended Method Name Check to ignore overriden methods, issue #430","from https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/checkstyle/NonOverriddenMethodNameCheck.java  There's extension to Method Name Check - do not check-style overriden methods because programmer has no choice in their naming. Added UT and corresponding input.","closed","","alexkravin","2014-12-28T09:55:03Z","2014-12-29T15:48:12Z"
"","325","AbstractJavadocCheck should process only doc comments placed before class, interface, constructor, method, or field declarations","From [Javadoc guide](http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#documentationcomments):  Placement of comments - **Documentation comments are recognized only when placed immediately before class, interface, constructor, method, or field declarations** -- see the class example, method example, and field example. Documentation comments placed in the body of a method are ignored. Only one documentation comment per declaration statement is recognized by the Javadoc tool.","closed","approved,","baratali","2014-10-22T14:06:52Z","2016-01-29T23:33:59Z"
"","976","Allow captured groups to be used in message of regular expression checks","For regular expression checks (Regexp, RegexpSingleline, etc), groups may be included in the regular expression of the 'format' pattern. When the regular expression matches, those groups will be filled with the matched text. However, it is not possible to use those groups in the 'message', which is used to notify about violations. That 'message' is a 'String' literal. It would be nice if the captured groups could be used in it. For backward compatibility, a boolean option could be added to those checks, to change the 'message' from a literal to a replacement pattern.  For instance, I'd like to add the following single line regular expression: ""TODO(.*)"". It matches literal text ""TODO"" followed by anything until the end of the line. I would then like to be able to include the 'remainder of the line', captured in group '1', in the 'message'. For instance: ""Found TODO: \1"" or ""Found TODO: $1"". I prefer the former syntax, but I can also live with the latter, which is used by Java's java.util.regex.Matcher.appendReplacement method. This feature would allow me to add a form of todo entries to my code that I need to address, before committing the code.  For some more general discussion on 'Reinserting Text Matched By Capturing Groups in The Replacement Text', see http://www.regular-expressions.info/replacebackref.html ##","open","","dhendriks","2015-04-24T06:42:24Z","2016-12-14T18:16:41Z"
"","110","Added enum processing to TypeNameCheck","For now, there is not check for enum class name in TypeNameCheck, which is restricted to check only for classes and interfaces.","closed","","pbaranchikov","2014-02-21T08:07:11Z","2015-10-16T15:42:45Z"
"","526","Remove StrictDuplicateCodeCheck and whole package #523","For issue #523","closed","","mkordas","2014-12-20T01:50:50Z","2014-12-20T13:07:27Z"
"","919","Change format of violation message","For example on LineLength violation I get the following error: _[ERROR] src\test\java\com\test\SampleTest.java**[89]** (sizes) LineLength: Line is longer than 180 characters (found 202)._  It would be better to have colon and line number instead of braces, so that I can directly paste the reference to IntelliJ and go to affected line: _[ERROR] src\test\java\com\test\SampleTest.java**:89** (sizes) LineLength: Line is longer than 180 characters (found 202)._","closed","approved,","mkordas","2015-04-10T10:31:01Z","2015-04-19T09:24:55Z"
"","859","Check for imports is not validates against javadoc as good as Eclipse does","Following code  ``` java import org.apache.commons.beanutils.ConversionException ... /* @imports ConversionException ```  works fine in Eclipse but checkstyle complains that import is not used. When you remove import it complains `Unable to get class information for @throws tag 'ConversionException'`  To avoid this violation following code must be applied for javadoc:  ``` /* @throws org.apache.commons.beanutils.ConversionException ```  what is proper but might be quite irritated for Runtime exceptions that might be declared only in javadoc using full qualifier class name  Example in #849  ##","open","javadoc,","damianszczepanik","2015-03-27T21:53:15Z","2017-09-02T22:22:50Z"
"","929","Use private final loggers instead of private static final in Checkstyle codebase","Follow-up to discussion in #920  As stated in http://wiki.apache.org/commons/Logging/StaticLog libraries should use `private final` loggers instead of `private static final` ones. - all loggers should be changed to `private final` - PMD rule `ProperLogger` should be not violated or suppressed - it states _A logger should normally be defined private static final and be associated with the correct class. Private final Log log; is also allowed for rare cases where loggers need to be passed around, with the restriction that the logger needs to be passed into the constructor._ - PMD rule `LoggerIsNotStaticFinal` needs to be suppressed - ideally we should get rid of all loggers that are unnecessary ##","closed","easy,","mkordas","2015-04-14T06:23:12Z","2017-11-08T12:59:55Z"
"","985","Fix PMD violations for ShortVariable rule","Follow-up to #982.  Violations:  ``` com.puppycrawl.tools.checkstyle.CheckStyleTask:144 Rule:ShortVariable Priority:3 Avoid variables with short names like fS. com.puppycrawl.tools.checkstyle.CheckStyleTask:296 Rule:ShortVariable Priority:3 Avoid variables with short names like c. com.puppycrawl.tools.checkstyle.CheckStyleTask:321 Rule:ShortVariable Priority:3 Avoid variables with short names like ok. com.puppycrawl.tools.checkstyle.CheckStyleTask:351 Rule:ShortVariable Priority:3 Avoid variables with short names like c. com.puppycrawl.tools.checkstyle.CheckStyleTask:453 Rule:ShortVariable Priority:3 Avoid variables with short names like f. com.puppycrawl.tools.checkstyle.CheckStyleTask:474 Rule:ShortVariable Priority:3 Avoid variables with short names like fs. com.puppycrawl.tools.checkstyle.CheckStyleTask:475 Rule:ShortVariable Priority:3 Avoid variables with short names like ds. com.puppycrawl.tools.checkstyle.CheckStyleTask$Formatter:539 Rule:ShortVariable Priority:3 Avoid variables with short names like to. com.puppycrawl.tools.checkstyle.ConfigurationLoader:465 Rule:ShortVariable Priority:3 Avoid variables with short names like sb. com.puppycrawl.tools.checkstyle.ConfigurationLoader:466 Rule:ShortVariable Priority:3 Avoid variables with short names like i. com.puppycrawl.tools.checkstyle.ConfigurationLoader:467 Rule:ShortVariable Priority:3 Avoid variables with short names like j. com.puppycrawl.tools.checkstyle.DefaultLogger:65 Rule:ShortVariable Priority:3 Avoid variables with short names like os. com.puppycrawl.tools.checkstyle.DefaultLogger:114 Rule:ShortVariable Priority:3 Avoid variables with short names like sb. com.puppycrawl.tools.checkstyle.Main:266 Rule:ShortVariable Priority:3 Avoid variables with short names like hf. com.puppycrawl.tools.checkstyle.PropertyCacheFile:195 Rule:ShortVariable Priority:3 Avoid variables with short names like md. com.puppycrawl.tools.checkstyle.TreeWalker:177 Rule:ShortVariable Priority:3 Avoid variables with short names like c. com.puppycrawl.tools.checkstyle.TreeWalker:216 Rule:ShortVariable Priority:3 Avoid variables with short names like re. com.puppycrawl.tools.checkstyle.TreeWalker:460 Rule:ShortVariable Priority:3 Avoid variables with short names like sr. com.puppycrawl.tools.checkstyle.Utils:182 Rule:ShortVariable Priority:3 Avoid variables with short names like i. com.puppycrawl.tools.checkstyle.XMLLogger:67 Rule:ShortVariable Priority:3 Avoid variables with short names like os. com.puppycrawl.tools.checkstyle.XMLLogger:77 Rule:ShortVariable Priority:3 Avoid variables with short names like oS. com.puppycrawl.tools.checkstyle.XMLLogger:155 Rule:ShortVariable Priority:3 Avoid variables with short names like sw. com.puppycrawl.tools.checkstyle.XMLLogger:156 Rule:ShortVariable Priority:3 Avoid variables with short names like pw. com.puppycrawl.tools.checkstyle.XMLLogger:173 Rule:ShortVariable Priority:3 Avoid variables with short names like sb. com.puppycrawl.tools.checkstyle.XMLLogger:175 Rule:ShortVariable Priority:3 Avoid variables with short names like c. com.puppycrawl.tools.checkstyle.api.AbstractLoader:123 Rule:ShortVariable Priority:3 Avoid variables with short names like ex. com.puppycrawl.tools.checkstyle.api.AbstractLoader:129 Rule:ShortVariable Priority:3 Avoid variables with short names like ex. com.puppycrawl.tools.checkstyle.api.AbstractLoader:135 Rule:ShortVariable Priority:3 Avoid variables with short names like ex. com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter:37 Rule:ShortVariable Priority:3 Avoid variables with short names like id. com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter:85 Rule:ShortVariable Priority:3 Avoid variables with short names like id. com.puppycrawl.tools.checkstyle.api.AnnotationUtility:157 Rule:ShortVariable Priority:3 Avoid variables with short names like at. com.puppycrawl.tools.checkstyle.api.AutomaticBean:139 Rule:ShortVariable Priority:3 Avoid variables with short names like pd. com.puppycrawl.tools.checkstyle.api.AutomaticBean$RelaxedStringArrayConverter:267 Rule:ShortVariable Priority:3 Avoid variables with short names like st. com.puppycrawl.tools.checkstyle.api.DetailAST:75 Rule:ShortVariable Priority:3 Avoid variables with short names like da. com.puppycrawl.tools.checkstyle.api.FileContents:144 Rule:ShortVariable Priority:3 Avoid variables with short names like cc. com.puppycrawl.tools.checkstyle.api.FileText:157 Rule:ShortVariable Priority:3 Avoid variables with short names like br. com.puppycrawl.tools.checkstyle.api.FileText:160 Rule:ShortVariable Priority:3 Avoid variables with short names like l. com.puppycrawl.tools.checkstyle.api.FullIdent:111 Rule:ShortVariable Priority:3 Avoid variables with short names like fi. com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes:1250 Rule:ShortVariable Priority:3 Avoid variables with short names like LI. com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes:1255 Rule:ShortVariable Priority:3 Avoid variables with short names like TR. com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes:1260 Rule:ShortVariable Priority:3 Avoid variables with short names like TD. com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes:1265 Rule:ShortVariable Priority:3 Avoid variables with short names like TH. com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes:1280 Rule:ShortVariable Priority:3 Avoid variables with short names like DD. com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes:1285 Rule:ShortVariable Priority:3 Avoid variables with short names like DT. com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes:1381 Rule:ShortVariable Priority:3 Avoid variables with short names like WS. com.puppycrawl.tools.checkstyle.api.TokenTypes:2321 Rule:ShortVariable Priority:3 Avoid variables with short names like LT. com.puppycrawl.tools.checkstyle.api.TokenTypes:2327 Rule:ShortVariable Priority:3 Avoid variables with short names like GT. com.puppycrawl.tools.checkstyle.api.TokenTypes:2333 Rule:ShortVariable Priority:3 Avoid variables with short names like LE. com.puppycrawl.tools.checkstyle.api.TokenTypes:2339 Rule:ShortVariable Priority:3 Avoid variables with short names like GE. com.puppycrawl.tools.checkstyle.api.TokenTypes:2366 Rule:ShortVariable Priority:3 Avoid variables with short names like SL. com.puppycrawl.tools.checkstyle.api.TokenTypes:2375 Rule:ShortVariable Priority:3 Avoid variables with short names like SR. com.puppycrawl.tools.checkstyle.api.TokenTypes:3401 Rule:ShortVariable Priority:3 Avoid variables with short names like AT. com.puppycrawl.tools.checkstyle.api.TokenTypes:3540 Rule:ShortVariable Priority:3 Avoid variables with short names like iD. com.puppycrawl.tools.checkstyle.api.TokenTypes:3559 Rule:ShortVariable Priority:3 Avoid variables with short names like id. com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck:356 Rule:ShortVariable Priority:3 Avoid variables with short names like ci. com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck:395 Rule:ShortVariable Priority:3 Avoid variables with short names like ci. com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck:409 Rule:ShortVariable Priority:3 Avoid variables with short names like ci. com.puppycrawl.tools.checkstyle.checks.DescendantTokenCheck:311 Rule:ShortVariable Priority:3 Avoid variables with short names like i. com\puppycrawl\tools\checkstyle\checks\LineSeparatorOption.java:60 Rule:ShortVariable Priority:3 Avoid variables with short names like s. com.puppycrawl.tools.checkstyle.checks.TranslationCheck:200 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.checks.TranslationCheck:219 Rule:ShortVariable Priority:3 Avoid variables with short names like ex. com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenCheck:81 Rule:ShortVariable Priority:3 Avoid variables with short names like i. com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck:93 Rule:ShortVariable Priority:3 Avoid variables with short names like i. com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck:314 Rule:ShortVariable Priority:3 Avoid variables with short names like n1. com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck:315 Rule:ShortVariable Priority:3 Avoid variables with short names like nn. com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck:796 Rule:ShortVariable Priority:3 Avoid variables with short names like at. com.puppycrawl.tools.checkstyle.checks.header.AbstractHeaderCheck:217 Rule:ShortVariable Priority:3 Avoid variables with short names like l. com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck:81 Rule:ShortVariable Priority:3 Avoid variables with short names like i. com.puppycrawl.tools.checkstyle.checks.imports.ImportControlLoader:105 Rule:ShortVariable Priority:3 Avoid variables with short names like g. com.puppycrawl.tools.checkstyle.checks.imports.ImportControlLoader:118 Rule:ShortVariable Priority:3 Avoid variables with short names like pc. com.puppycrawl.tools.checkstyle.checks.imports.ImportControlLoader:141 Rule:ShortVariable Priority:3 Avoid variables with short names like is. com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler:388 Rule:ShortVariable Priority:3 Avoid variables with short names like c. com.puppycrawl.tools.checkstyle.checks.indentation.IndentLevel:130 Rule:ShortVariable Priority:3 Avoid variables with short names like sb. com.puppycrawl.tools.checkstyle.checks.indentation.MethodCallHandler:76 Rule:ShortVariable Priority:3 Avoid variables with short names like p. com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck:195 Rule:ShortVariable Priority:3 Avoid variables with short names like ps. com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck:485 Rule:ShortVariable Priority:3 Avoid variables with short names like in. com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck$DescriptiveErrorListener:635 Rule:ShortVariable Priority:3 Avoid variables with short names like ex. com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag:32 Rule:ShortVariable Priority:3 Avoid variables with short names like id. com.puppycrawl.tools.checkstyle.checks.javadoc.HtmlTag:58 Rule:ShortVariable Priority:3 Avoid variables with short names like id. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:512 Rule:ShortVariable Priority:3 Avoid variables with short names like it. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:530 Rule:ShortVariable Priority:3 Avoid variables with short names like jt. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:630 Rule:ShortVariable Priority:3 Avoid variables with short names like p1. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:631 Rule:ShortVariable Priority:3 Avoid variables with short names like p2. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:658 Rule:ShortVariable Priority:3 Avoid variables with short names like p1. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:727 Rule:ShortVariable Priority:3 Avoid variables with short names like fi. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:728 Rule:ShortVariable Priority:3 Avoid variables with short names like ei. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:854 Rule:ShortVariable Priority:3 Avoid variables with short names like it. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:856 Rule:ShortVariable Priority:3 Avoid variables with short names like jt. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:910 Rule:ShortVariable Priority:3 Avoid variables with short names like ei. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:924 Rule:ShortVariable Priority:3 Avoid variables with short names like ei. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:957 Rule:ShortVariable Priority:3 Avoid variables with short names like fi. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils:113 Rule:ShortVariable Priority:3 Avoid variables with short names like s. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils:358 Rule:ShortVariable Priority:3 Avoid variables with short names like iD. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils:381 Rule:ShortVariable Priority:3 Avoid variables with short names like id. com.puppycrawl.tools.checkstyle.checks.javadoc.TagParser:209 Rule:ShortVariable Priority:3 Avoid variables with short names like to. com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck:198 Rule:ShortVariable Priority:3 Avoid variables with short names like s. com.puppycrawl.tools.checkstyle.checks.metrics.AbstractComplexityCheck:162 Rule:ShortVariable Priority:3 Avoid variables with short names like by. com.puppycrawl.tools.checkstyle.checks.modifier.ModifierOrderCheck:142 Rule:ShortVariable Priority:3 Avoid variables with short names like i. com.puppycrawl.tools.checkstyle.checks.modifier.ModifierOrderCheck:144 Rule:ShortVariable Priority:3 Avoid variables with short names like it. com.puppycrawl.tools.checkstyle.checks.sizes.OuterTypeNumberCheck:93 Rule:ShortVariable Priority:3 Avoid variables with short names like to. com.puppycrawl.tools.checkstyle.doclets.TokenTypesDoclet:64 Rule:ShortVariable Priority:3 Avoid variables with short names like ps. com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag:83 Rule:ShortVariable Priority:3 Avoid variables with short names like on. com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag:100 Rule:ShortVariable Priority:3 Avoid variables with short names like on. com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter:502 Rule:ShortVariable Priority:3 Avoid variables with short names like on. com.puppycrawl.tools.checkstyle.gui.AbstractCellEditor:92 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.AbstractCellEditor:119 Rule:ShortVariable Priority:3 Avoid variables with short names like l. com.puppycrawl.tools.checkstyle.gui.AbstractCellEditor:126 Rule:ShortVariable Priority:3 Avoid variables with short names like l. com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:119 Rule:ShortVariable Priority:3 Avoid variables with short names like l. com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:125 Rule:ShortVariable Priority:3 Avoid variables with short names like l. com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:143 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:171 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:199 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.AbstractTreeTableModel:227 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.FileDrop:96 Rule:ShortVariable Priority:3 Avoid variables with short names like c. com.puppycrawl.tools.checkstyle.gui.FileDrop:121 Rule:ShortVariable Priority:3 Avoid variables with short names like c. com.puppycrawl.tools.checkstyle.gui.FileDrop:132 Rule:ShortVariable Priority:3 Avoid variables with short names like c. com.puppycrawl.tools.checkstyle.gui.FileDrop:136 Rule:ShortVariable Priority:3 Avoid variables with short names like dt. com.puppycrawl.tools.checkstyle.gui.FileDrop:173 Rule:ShortVariable Priority:3 Avoid variables with short names like ok. com.puppycrawl.tools.checkstyle.gui.FileDrop:177 Rule:ShortVariable Priority:3 Avoid variables with short names like i. com.puppycrawl.tools.checkstyle.gui.FileDrop:199 Rule:ShortVariable Priority:3 Avoid variables with short names like c. com.puppycrawl.tools.checkstyle.gui.FileDrop:214 Rule:ShortVariable Priority:3 Avoid variables with short names like c. com.puppycrawl.tools.checkstyle.gui.FileDrop$FileDropTargetListener:263 Rule:ShortVariable Priority:3 Avoid variables with short names like jc. com.puppycrawl.tools.checkstyle.gui.FileDrop$FileDropTargetListener:279 Rule:ShortVariable Priority:3 Avoid variables with short names like tr. com.puppycrawl.tools.checkstyle.gui.FileDrop$FileDropTargetListener:304 Rule:ShortVariable Priority:3 Avoid variables with short names like jc. com.puppycrawl.tools.checkstyle.gui.FileDrop$FileDropTargetListener:314 Rule:ShortVariable Priority:3 Avoid variables with short names like jc. com.puppycrawl.tools.checkstyle.gui.JTreeTable:152 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.JTreeTable$TreeTableCellRenderer:288 Rule:ShortVariable Priority:3 Avoid variables with short names like h. com.puppycrawl.tools.checkstyle.gui.JTreeTable$TreeTableCellRenderer:288 Rule:ShortVariable Priority:3 Avoid variables with short names like w. com.puppycrawl.tools.checkstyle.gui.JTreeTable$TreeTableCellRenderer:288 Rule:ShortVariable Priority:3 Avoid variables with short names like x. com.puppycrawl.tools.checkstyle.gui.JTreeTable$TreeTableCellRenderer:288 Rule:ShortVariable Priority:3 Avoid variables with short names like y. com.puppycrawl.tools.checkstyle.gui.JTreeTable$TreeTableCellRenderer:298 Rule:ShortVariable Priority:3 Avoid variables with short names like g. com.puppycrawl.tools.checkstyle.gui.JTreeTable$TreeTableCellEditor:338 Rule:ShortVariable Priority:3 Avoid variables with short names like c. com.puppycrawl.tools.checkstyle.gui.JTreeTable$TreeTableCellEditor:338 Rule:ShortVariable Priority:3 Avoid variables with short names like r. com.puppycrawl.tools.checkstyle.gui.JTreeTable$TreeTableCellEditor:364 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.JTreeTable$TreeTableCellEditor:370 Rule:ShortVariable Priority:3 Avoid variables with short names like me. com.puppycrawl.tools.checkstyle.gui.JTreeTable$ListToTreeSelectionModelWrapper$ListSelectionHandler:493 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.Main:47 Rule:ShortVariable Priority:3 Avoid variables with short names like f. com.puppycrawl.tools.checkstyle.gui.ParseTreeInfoPanel$JavaFileFilter:73 Rule:ShortVariable Priority:3 Avoid variables with short names like f. com.puppycrawl.tools.checkstyle.gui.ParseTreeInfoPanel$FileSelectionAction:122 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.ParseTreeInfoPanel$FileSelectionAction:124 Rule:ShortVariable Priority:3 Avoid variables with short names like fc. com.puppycrawl.tools.checkstyle.gui.ParseTreeInfoPanel$ReloadAction:150 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.ParseTreeInfoPanel:277 Rule:ShortVariable Priority:3 Avoid variables with short names like sp. com.puppycrawl.tools.checkstyle.gui.ParseTreeInfoPanel:295 Rule:ShortVariable Priority:3 Avoid variables with short names like p. com.puppycrawl.tools.checkstyle.gui.ParseTreeModel:121 Rule:ShortVariable Priority:3 Avoid variables with short names like i. com.puppycrawl.tools.checkstyle.gui.TreeTableModelAdapter:119 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.TreeTableModelAdapter:125 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.TreeTableModelAdapter:131 Rule:ShortVariable Priority:3 Avoid variables with short names like e. com.puppycrawl.tools.checkstyle.gui.TreeTableModelAdapter:137 Rule:ShortVariable Priority:3 Avoid variables with short names like e. ```","closed","approved,","mkordas","2015-04-24T19:36:56Z","2015-10-09T00:44:34Z"
"","984","Fix PMD violations for AvoidFieldNameMatchingMethodName rule","Follow-up to #982.  Violations:  ``` com.puppycrawl.tools.checkstyle.api.FileText:99 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field lineBreaks has the same name as a method. com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck$RegularClass:457 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field isLoadable has the same name as a method. com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck$ClassDesc:120 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field hasNonPrivateCtor has the same name as a method. com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck$ClassDesc:123 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field hasPrivateCtor has the same name as a method. com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck$ImportDetails:729 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field isStatic has the same name as a method. com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck:75 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field processJavadoc has the same name as a method. com.puppycrawl.tools.checkstyle.checks.indentation.SynchronizedHandler:35 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field isMethodModifier has the same name as a method. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck:101 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field checkFirstSentence has the same name as a method. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck:106 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field checkHtml has the same name as a method. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck:111 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field checkEmptyJavadoc has the same name as a method. ```","closed","approved,","mkordas","2015-04-24T19:35:39Z","2015-05-13T16:55:17Z"
"","979","Fix AvoidStaticImport violations in Checkstyle codebase","Follow-up to #945.  While generally I like static imports, let's apply this rule for Checkstyle code at least for regression purposes.","closed","approved,","mkordas","2015-04-24T18:58:42Z","2015-04-26T19:16:39Z"
"","978","Fix AtclauseOrder violations in Checkstyle codebase","Follow-up to #945.  Desired order: `@author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated`","closed","","mkordas","2015-04-24T18:42:58Z","2015-04-26T01:24:47Z"
"","989","Remove FastStack from API","Follow-up to #86.  Remove: http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/FastStack.html.  This is API-breaking change.  Decision needs to be made in which Checkstyle version `FastStack` can be removed.","closed","approved,","mkordas","2015-04-25T22:25:21Z","2015-05-01T00:54:01Z"
"","818","Add VersionEye badge to README.md","Follow-up to #793.","closed","","mkordas","2015-03-18T21:51:22Z","2015-03-19T05:45:07Z"
"","871","Fix PMD violations from 'logging-jakarta-commons' ruleset in Checkstyle","Follow-up to #744.  Violations: - PMD Failure: com.puppycrawl.tools.checkstyle.TreeWalker:117 Rule:ProperLogger Priority:3 Logger should be defined private static final and have the correct class. - PMD Failure: com.puppycrawl.tools.checkstyle.TreeWalker:320 Rule:GuardLogStatement Priority:2 There is log block not surrounded by if. - PMD Failure: com.puppycrawl.tools.checkstyle.Utils:38 Rule:ProperLogger Priority:3 Logger should be defined private static final and have the correct class. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:70 Rule:GuardLogStatement Priority:2 There is log block not surrounded by if. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:70 Rule:GuardDebugLogging Priority:3 debug logging that involves string concatenation should be guarded with isDebugEnabled() checks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:170 Rule:GuardLogStatement Priority:2 There is log block not surrounded by if. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:170 Rule:GuardDebugLogging Priority:3 debug logging that involves string concatenation should be guarded with isDebugEnabled() checks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:175 Rule:GuardLogStatement Priority:2 There is log block not surrounded by if. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:175 Rule:GuardDebugLogging Priority:3 debug logging that involves string concatenation should be guarded with isDebugEnabled() checks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:180 Rule:GuardLogStatement Priority:2 There is log block not surrounded by if. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:180 Rule:GuardDebugLogging Priority:3 debug logging that involves string concatenation should be guarded with isDebugEnabled() checks.","closed","approved,","mkordas","2015-03-28T22:47:45Z","2015-04-13T21:43:51Z"
"","870","Fix PMD violations from 'logging-java' ruleset in Checkstyle","Follow-up to #744.  Violations: - PMD Failure: com.puppycrawl.tools.checkstyle.Main:84 Rule:SystemPrintln Priority:2 System.out.println is used. - PMD Failure: com.puppycrawl.tools.checkstyle.Main:97 Rule:SystemPrintln Priority:2 System.out.println is used. - PMD Failure: com.puppycrawl.tools.checkstyle.Main:113 Rule:SystemPrintln Priority:2 System.out.println is used. - PMD Failure: com.puppycrawl.tools.checkstyle.Main:151 Rule:SystemPrintln Priority:2 System.out.println is used. - PMD Failure: com.puppycrawl.tools.checkstyle.Main:173 Rule:SystemPrintln Priority:2 System.out.println is used. - PMD Failure: com.puppycrawl.tools.checkstyle.Main:202 Rule:SystemPrintln Priority:2 System.out.println is used. - PMD Failure: com.puppycrawl.tools.checkstyle.Main:224 Rule:SystemPrintln Priority:2 System.out.println is used. - PMD Failure: com.puppycrawl.tools.checkstyle.Main:279 Rule:SystemPrintln Priority:2 System.out.println is used.","closed","approved,","mkordas","2015-03-28T22:45:56Z","2015-04-26T17:33:53Z"
"","872","Fix PMD violations from 'strictexception' ruleset in Checkstyle","Follow-up to #744.  Violations: - PMD Failure: com.puppycrawl.tools.checkstyle.CheckStyleTask:380 Rule:AvoidCatchingGenericException Priority:3 Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block. - PMD Failure: com.puppycrawl.tools.checkstyle.Checker:181 Rule:AvoidCatchingGenericException Priority:3 Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block. - PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader:344 Rule:ExceptionAsFlowControl Priority:3 Avoid using exceptions as flow control.. - PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader:344 Rule:ExceptionAsFlowControl Priority:3 Avoid using exceptions as flow control.. - PMD Failure: com.puppycrawl.tools.checkstyle.Main:150 Rule:AvoidCatchingGenericException Priority:3 Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block. - PMD Failure: com.puppycrawl.tools.checkstyle.PackageObjectFactory:142 Rule:ExceptionAsFlowControl Priority:3 Avoid using exceptions as flow control.. - PMD Failure: com.puppycrawl.tools.checkstyle.PackageObjectFactory:147 Rule:ExceptionAsFlowControl Priority:3 Avoid using exceptions as flow control.. - PMD Failure: com.puppycrawl.tools.checkstyle.PropertyCacheFile:196 Rule:AvoidCatchingGenericException Priority:3 Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block. - PMD Failure: com.puppycrawl.tools.checkstyle.TreeWalker:229 Rule:AvoidCatchingThrowable Priority:3 A catch statement should never catch throwable since it includes errors.. - PMD Failure: com.puppycrawl.tools.checkstyle.api.AnnotationUtility:93 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. - PMD Failure: com.puppycrawl.tools.checkstyle.api.AnnotationUtility:138 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. - PMD Failure: com.puppycrawl.tools.checkstyle.api.AnnotationUtility:142 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. - PMD Failure: com.puppycrawl.tools.checkstyle.api.AnnotationUtility:181 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. - PMD Failure: com\puppycrawl\tools\checkstyle\api\JavadocTagInfo.java:569 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. - PMD Failure: com\puppycrawl\tools\checkstyle\api\JavadocTagInfo.java:593 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck:299 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck$ClassInfo:446 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.ClassResolver:179 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:225 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:321 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:678 Rule:AvoidCatchingGenericException Priority:3 Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:685 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:66 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:71 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:171 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:176 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:181 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:185 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils:81 Rule:AvoidCatchingGenericException Priority:3 Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block. - PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionsLoader:177 Rule:ExceptionAsFlowControl Priority:3 Avoid using exceptions as flow control.. - PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionsLoader:177 Rule:ExceptionAsFlowControl Priority:3 Avoid using exceptions as flow control..","closed","approved,","mkordas","2015-03-28T22:51:14Z","2015-04-26T17:24:25Z"
"","869","Fix PMD violation from 'migrating' ruleset in Checkstyle","Follow-up to #744.  Violation: - PMD Failure: com.puppycrawl.tools.checkstyle.CheckStyleTask:415 Rule:ReplaceHashtableWithMap Priority:3 Consider replacing this Hashtable with the newer java.util.Map.","closed","approved,","mkordas","2015-03-28T22:43:25Z","2015-04-10T17:22:01Z"
"","877","Fix PMD violations for test code in Checkstyle","Follow-up to #744.  Add `true` to PMD configuration.  Violations: - PMD Failure: com.puppycrawl.tools.checkstyle.DebugChecker:17 Rule:UselessOverridingMethod Priority:3 Overriding method merely calls super. - PMD Failure: com.puppycrawl.tools.checkstyle.DebugChecker:17 Rule:UselessOverridingMethod Priority:3 Overriding method merely calls super. - PMD Failure: com.puppycrawl.tools.checkstyle.DebugChecker:23 Rule:UselessOverridingMethod Priority:3 Overriding method merely calls super. - PMD Failure: com.puppycrawl.tools.checkstyle.DebugChecker:23 Rule:UselessOverridingMethod Priority:3 Overriding method merely calls super. - PMD Failure: com\puppycrawl\tools\checkstyle\UtilsTest.java:19 Rule:TooManyStaticImports Priority:3 Too many static imports may lead to messy code. - PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractViolationReporterTest:74 Rule:UnnecessaryFullyQualifiedName Priority:4 Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing import 'org.junit.Assert'. - PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractViolationReporterTest:93 Rule:UnnecessaryFullyQualifiedName Priority:4 Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing import 'org.junit.Assert'. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.ClassResolverTest:43 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.ClassResolverTest:43 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.ClassResolverTest:53 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.ClassResolverTest:53 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.ClassResolverTest:66 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.ClassResolverTest:66 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com\puppycrawl\tools\checkstyle\checks\annotation\AnnotationUseStyleTest.java:19 Rule:TooManyStaticImports Priority:3 Too many static imports may lead to messy code. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheckInput:50 Rule:UnusedPrivateField Priority:3 Avoid unused private fields such as 'one'.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheckInput:55 Rule:UnusedPrivateField Priority:3 Avoid unused private fields such as 'two'.. - PMD Failure: com\puppycrawl\tools\checkstyle\checks\coding\UnnecessaryParenthesesCheckTest.java:19 Rule:TooManyStaticImports Priority:3 Too many static imports may lead to messy code. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.HeaderCheckTest:97 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.HeaderCheckTest:97 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.HeaderCheckTest:197 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.HeaderCheckTest:197 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.HeaderCheckTest:212 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.HeaderCheckTest:212 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.HeaderCheckTest:228 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.HeaderCheckTest:228 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.HeaderCheckTest:243 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.HeaderCheckTest:243 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheckTest:107 Rule:EmptyStatementNotInLoop Priority:3 An empty statement (semicolon) not part of a loop. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheckTest:107 Rule:EmptyStatementNotInLoop Priority:3 An empty statement (semicolon) not part of a loop. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheckTest:124 Rule:EmptyStatementNotInLoop Priority:3 An empty statement (semicolon) not part of a loop. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheckTest:124 Rule:EmptyStatementNotInLoop Priority:3 An empty statement (semicolon) not part of a loop. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.InputTags1:11 Rule:UnusedPrivateField Priority:3 Avoid unused private fields such as 'mMissingJavadoc'.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.InputTags1:121 Rule:UnnecessaryFullyQualifiedName Priority:4 Unnecessary use of fully qualified name 'java.io.IOException' due to existing import 'java.io.IOException'. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.InputTags1:130 Rule:UnusedLocalVariable Priority:3 Avoid unused local variables such as 'x'.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.InputTags1:135 Rule:UnusedLocalVariable Priority:3 Avoid unused local variables such as 'z'.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.InputTags1:140 Rule:UnusedPrivateField Priority:3 Avoid unused private fields such as 'ON_SECOND_LINE'.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.InputTags1:151 Rule:UnnecessaryFullyQualifiedName Priority:4 Unnecessary use of fully qualified name 'java.io.IOException' due to existing import 'java.io.IOException'. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.InputTags1:156 Rule:UselessOverridingMethod Priority:3 Overriding method merely calls super. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.InputTags1:156 Rule:UselessOverridingMethod Priority:3 Overriding method merely calls super. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.InputTags1:203 Rule:UnnecessaryFullyQualifiedName Priority:4 Unnecessary use of fully qualified name 'java.io.IOException' due to existing import 'java.io.IOException'. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.Input_01:13 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.Input_01:13 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.Input_02:31 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.Input_02:31 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.Input_03:12 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.Input_03:12 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com\puppycrawl\tools\checkstyle\checks\javadoc\JavadocMethodCheckTest.java:19 Rule:TooManyStaticImports Priority:3 Too many static imports may lead to messy code. - PMD Failure: com\puppycrawl\tools\checkstyle\checks\javadoc\JavadocStyleCheckTest.java:19 Rule:TooManyStaticImports Priority:3 Too many static imports may lead to messy code. - PMD Failure: com\puppycrawl\tools\checkstyle\checks\javadoc\JavadocTypeCheckTest.java:19 Rule:TooManyStaticImports Priority:3 Too many static imports may lead to messy code. - PMD Failure: com\puppycrawl\tools\checkstyle\checks\javadoc\JavadocUtilsTest.java:19 Rule:TooManyStaticImports Priority:3 Too many static imports may lead to messy code. - PMD Failure: com\puppycrawl\tools\checkstyle\checks\javadoc\WriteTagCheckTest.java:19 Rule:TooManyStaticImports Priority:3 Too many static imports may lead to messy code. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheckTest:63 Rule:UnusedLocalVariable Priority:3 Avoid unused local variables such as 'expectedComplexity'.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.naming.ConstantNameCheckTest:44 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.naming.ConstantNameCheckTest:44 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.FileLengthCheckTest:80 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.FileLengthCheckTest:80 Rule:EmptyCatchBlock Priority:3 Avoid empty catch blocks. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheckInput$PublicMethodsInnerInterface:49 Rule:UnusedModifier Priority:3 Avoid modifiers which are implied by the context. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheckInput$PublicMethodsInnerInterface:54 Rule:UnusedModifier Priority:3 Avoid modifiers which are implied by the context. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheckInput$PublicMethodsInnerInterface:59 Rule:UnusedModifier Priority:3 Avoid modifiers which are implied by the context. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheckInput$PublicMethodsInnerInterface:64 Rule:UnusedModifier Priority:3 Avoid modifiers which are implied by the context. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheckInput:165 Rule:UnusedPrivateMethod Priority:3 Avoid unused private methods such as 'doNothing30()'.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheckInput:171 Rule:UnusedPrivateMethod Priority:3 Avoid unused private methods such as 'doNothing31()'.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheckInput:177 Rule:UnusedPrivateMethod Priority:3 Avoid unused private methods such as 'doNothing32()'.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheckInput:183 Rule:UnusedPrivateMethod Priority:3 Avoid unused private methods such as 'doNothing33()'.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheckInput:189 Rule:UnusedPrivateMethod Priority:3 Avoid unused private methods such as 'doNothing34()'.. - PMD Failure: com\puppycrawl\tools\checkstyle\checks\sizes\MethodCountCheckTest.java:19 Rule:TooManyStaticImports Priority:3 Too many static imports may lead to messy code. - PMD Failure: com\puppycrawl\tools\checkstyle\comments\CommentsTest.java:19 Rule:TooManyStaticImports Priority:3 Too many static imports may lead to messy code. ##","closed","miscellaneous,","mkordas","2015-03-28T23:02:21Z","2017-07-04T14:57:59Z"
"","875","Fix PMD violations from 'typeresolution' ruleset in Checkstyle","Follow-up to #744.  Add `rulesets/java/typeresolution.xml` to PMD configuration.  Violations: - PMD Failure: com.puppycrawl.tools.checkstyle.api.FileSetCheck:74 Rule:LooseCoupling Priority:3 Avoid using implementation types like 'TreeSet'; use the interface instead. - PMD Failure: com.puppycrawl.tools.checkstyle.api.LocalizedMessages:35 Rule:LooseCoupling Priority:3 Avoid using implementation types like 'TreeSet'; use the interface instead. - PMD Failure: com.puppycrawl.tools.checkstyle.api.LocalizedMessages:38 Rule:LooseCoupling Priority:3 Avoid using implementation types like 'TreeSet'; use the interface instead. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck:100 Rule:LooseCoupling Priority:3 Avoid using implementation types like 'LinkedList'; use the interface instead. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.OneTopLevelClassCheck:96 Rule:LooseCoupling Priority:3 Avoid using implementation types like 'TreeMap'; use the interface instead. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.PkgControl:35 Rule:LooseCoupling Priority:3 Avoid using implementation types like 'LinkedList'; use the interface instead.","closed","approved,","mkordas","2015-03-28T22:56:55Z","2015-04-08T19:52:21Z"
"","874","Fix PMD violations from 'sunsecure' ruleset in Checkstyle","Follow-up to #744.  Add `rulesets/java/sunsecure.xml` to PMD configuration.  Violations: - PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck:114 Rule:MethodReturnsInternalArray Priority:3 Returning 'fileExtensions' may expose an internal array.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler:64 Rule:MethodReturnsInternalArray Priority:3 Returning 'CHECKED_CHILDREN' may expose an internal array.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck$ParseErrorMessage:754 Rule:MethodReturnsInternalArray Priority:3 Returning 'messageArguments' may expose an internal array.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl:94 Rule:MethodReturnsInternalArray Priority:3 Returning 'children' may expose an internal array.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl:129 Rule:ArrayIsStoredDirectly Priority:3 The user-supplied array 'children' is stored directly..","closed","approved,","mkordas","2015-03-28T22:55:42Z","2015-04-16T14:08:53Z"
"","873","Fix PMD violations from 'strings' ruleset in Checkstyle","Follow-up to #744.  Add `rulesets/java/strings.xml` to PMD configuration.  Violations: - PMD Failure: com.puppycrawl.tools.checkstyle.Checker:359 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader:515 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.DefaultLogger:108 Rule:ConsecutiveAppendsShouldReuse Priority:3 StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.. - PMD Failure: com.puppycrawl.tools.checkstyle.PackageNamesLoader:116 Rule:AppendCharacterWithChar Priority:3 Avoid appending characters as strings in StringBuffer.append.. - PMD Failure: com.puppycrawl.tools.checkstyle.Utils:197 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.XMLLogger:190 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.api.AnnotationUtility:145 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. - PMD Failure: com.puppycrawl.tools.checkstyle.api.FullIdent:39 Rule:AvoidStringBufferField Priority:3 StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck:163 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck:166 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.ClassResolver:167 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder:180 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck:133 Rule:AvoidDuplicateLiterals Priority:3 The String literal ""annotation.incorrect.style"" appears 4 times in this file; the first occurrence is on line 133. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck:178 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck:68 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.AbstractIllegalCheck:71 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck:315 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck:332 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck:743 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck:758 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.AbstractHeaderCheck:92 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.header.AbstractHeaderCheck:186 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:543 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:673 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:674 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String).. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:706 Rule:AppendCharacterWithChar Priority:3 Avoid appending characters as strings in StringBuffer.append.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck:140 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck:167 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. - PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:170 Rule:AvoidDuplicateLiterals Priority:3 The String literal ""couldn't instantiate constructor for "" appears 4 times in this file; the first occurrence is on line 170. - PMD Failure: com.puppycrawl.tools.checkstyle.filters.CSVFilter:71 Rule:UseIndexOfChar Priority:3 String.indexOf(char) is faster than String.indexOf(String)..","closed","approved,","mkordas","2015-03-28T22:54:19Z","2015-04-15T18:05:46Z"
"","876","Fix PMD violations from 'braces' ruleset in Checkstyle","Follow-up to #744.  Add `rulesets/java/braces.xml` to PMD configuration.  Violations: - PMD Failure: com.puppycrawl.tools.checkstyle.gui.FileDrop:167 Rule:ForLoopsMustUseBraces Priority:3 Avoid using for statements without curly braces. - PMD Failure: com.puppycrawl.tools.checkstyle.gui.FileDrop:182 Rule:IfStmtsMustUseBraces Priority:3 Avoid using if statements without curly braces.","closed","approved,","mkordas","2015-03-28T22:58:27Z","2015-04-09T23:11:18Z"
"","987","Fix PMD violations from 'javabeans' ruleset in Checkstyle","Follow-up to #744.","closed","","mkordas","2015-04-24T22:06:34Z","2015-04-25T23:33:58Z"
"","982","Fix PMD violations from 'naming' ruleset in Checkstyle","Follow-up to #744.","closed","","mkordas","2015-04-24T19:07:25Z","2015-04-25T23:34:26Z"
"","15","Document WhitespaceAround for-each property","Follow up to 09f1ba2f35f928d4377637fa284d1ac334617a22.","closed","","gaul","2013-10-06T16:33:33Z","2014-06-17T07:44:08Z"
"","144","[typo] consistently use commas in operator list","Follow on from 1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed.","closed","","gaul","2014-05-08T22:34:40Z","2015-05-03T09:39:33Z"
"","720","Fix bugs with multiple fields, part of issue #706","Fixing part of issue #706. Problem was that , if line after type field was not empty and allowNoEmptyLineBetweenFields was false it was checking additionally is allowMultipleEmptyLines is false, what was totally useless(because we already knew that next line is not empty from previous condition)","closed","","liscju","2015-03-06T12:39:17Z","2015-03-06T15:41:50Z"
"","721","Fix bug with multiple imports, part of issue #706","Fixing part of issue #706 with mutiple imports. Problem was that ,it was checking if only pre-previous line was empty, so in situation were two or more imports were together and before first import was empty line it discovered in second import multiple empty lines(cause it assumes the line before was empty)","closed","","liscju","2015-03-06T12:43:30Z","2015-03-09T12:58:55Z"
"","574","Repair Sonarqube problems found in Checkstyle for issue #46","Fixes for [Modifiers should be declared in the correct order](http://nemo.sonarqube.org/component/index#component=com.puppycrawl.tools%3Acheckstyle%3Asrc%2Fmain%2Fjava%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fgui%2FFileDrop.java¤tIssue=2b96e517-b6fc-4303-8fab-23390d63905a), [Redundant casts should not be used](http://nemo.sonarqube.org/component/index#component=com.puppycrawl.tools%3Acheckstyle%3Asrc%2Fmain%2Fjava%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fblocks%2FLeftCurlyCheck.java¤tIssue=7af2868f-f17d-4811-b117-a3a7972ba3d1) and [Array designators ""[]"" should be on the type, not the variable](http://nemo.sonarqube.org/component/index#component=com.puppycrawl.tools%3Acheckstyle%3Asrc%2Fmain%2Fjava%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fdoclets%2FTokenTypesDoclet.java¤tIssue=b896a3b6-df3f-4eb1-aff8-c99ebb082b84)","closed","","mkordas","2015-01-09T18:06:31Z","2015-02-22T13:35:32Z"
"","704","Clarified all Indentation Input files for certain expected values.","Fixes #675 .","closed","","alex-zuy","2015-03-01T16:32:28Z","2015-03-01T17:01:25Z"
"","638","FinalLocalVariableCheck does not check for loop Variable","Fixes #20   look at this comment only. All other previous comments are reverted.  https://github.com/Bhavik3/checkstyle/commit/92f392623197355319de1b6c8cc8b5d532b424da","closed","","Bhavik3","2015-02-13T09:35:05Z","2015-02-14T11:24:59Z"
"","643","FinalLocalVariableCheck does not check for loop variable","Fixes #20","closed","","Bhavik3","2015-02-14T09:32:58Z","2015-02-16T09:20:04Z"
"","592","Update FinalLocalVariableCheck.java","Fixes #20","closed","","Bhavik3","2015-01-22T09:52:08Z","2015-01-22T09:52:29Z"
"","590","Update FinalLocalVariableCheck.java","Fixes #20","closed","","Bhavik3","2015-01-20T16:11:27Z","2015-01-22T09:49:58Z"
"","274","Issue #155: RequireThis triggers for static interface fields","Fixed.","closed","","sdumitriu","2014-09-10T18:35:28Z","2014-09-12T23:06:16Z"
"","330","Issue #49. Fixed parsing of multiple html attributes.","Fixed wrong parsing of such html tags: `* ` `* `","closed","","baratali","2014-10-22T17:04:50Z","2014-10-22T18:14:48Z"
"","375","Issue #371. Fixed NumberFormatException while logging in AbstractJavadocCheck","Fixed wrong logging","closed","","baratali","2014-11-18T22:45:45Z","2014-11-20T15:40:16Z"
"","199","Fixed javadoc comments","Fixed wrong html tags; added {@code} for generics; closed html tags to make XHTML format.","closed","","baratali","2014-07-22T19:48:33Z","2014-08-10T16:33:22Z"
"","589","Annotation Location Check, fixed typo in property name, issue #585","Fixed typo in property name allowSamelineParameterizedAnnotation instead of allowSamelineParametrizedAnnotation  Fixed in sources and xdoc config.","closed","","alexkravin","2015-01-20T12:38:35Z","2015-01-21T18:56:20Z"
"","760","Fixed problem with links in contributing.html","Fixed problem with linkcheck report on contributing.html There was a problem with ref's extension, browser interprets properly, but.. linkcheck failed.","closed","","alexkravin","2015-03-12T18:27:40Z","2015-03-12T18:56:46Z"
"","545","Fixed NPE in No Whitespace After Check, issue #542","Fixed NPE.","closed","","alexkravin","2014-12-26T21:25:18Z","2014-12-30T17:09:06Z"
"","688","Update config links in Google Style, Issue #686","Fixed links for config, checked links for tests. Removed extra table cell. Removed [] in config/test column. Fixed spacing of checkstyle checks with multiple config/tests. Fixed small spelling mistake.","closed","","Mebibyte","2015-02-27T06:57:18Z","2015-02-28T00:15:09Z"
"","573","Fixes for suppression examples - issue #289","Fixed incorrect description for integration tests suppression. Added missing suppression for generated sources. Added space between  '""' and 'files'. Not all file extensions given were text files - so removed word 'text'.","closed","","mkordas","2015-01-09T17:24:31Z","2015-02-22T15:28:43Z"
"","653","Final Local Variable Check, fixed false-positive, issue #258","Fixed Check, so it doesn't force user to define variable is for-init as final  Extended UT input, removed one expected line from UTs which was checking the wrong, noncompilable case","closed","","alexkravin","2015-02-18T21:31:53Z","2015-02-19T06:07:22Z"
"","939","Update Maven Javadoc Plugin to 2.10.3","Fixed bugs: - [MJAVADOC-347] - javadoc:aggregate-jar doesn't create Javadoc JAR if failOnError=false and there is an error - [MJAVADOC-414] - Artifacts missing from test classpath. - [MJAVADOC-424] - Compile errors and warning when generating the test-javadoc - [MJAVADOC-425] - Outdated doxia's version is used in plugin","closed","approved,","mkordas","2015-04-17T05:16:17Z","2015-04-26T16:35:19Z"
"","218","Update for EmptyLineSeparatorCheck","Fix problem with header. Check have to validate empty line after header.   ``` /////////////////////////////////////////////////// //HEADER /////////////////////////////////////////////////// package com.puppycrawl.tools.checkstyle.whitespace; import java.io.Serializable; class Foo {} ```","closed","","maxvetrenko","2014-08-02T18:01:50Z","2014-08-07T05:49:48Z"
"","326","Fix NullPointerException in case package-info.java","Fix NullPointerException in case package-info.java in AtclauseOrderCheck.  /**  * Package info  */ package com.google.common.eventbus;","closed","","maxvetrenko","2014-10-22T14:10:59Z","2014-10-22T18:16:28Z"
"","216","Fix for AvoidEscapedUnicodeCharactersCheck","Fix NPE and false positive in AvoidEscapedUnicodeCharactersCheck.  NPE were on next files: https://github.com/maxvetrenko/guava-libraries-17-0/blob/master/guava/src/com/google/common/xml/XmlEscapers.java , https://github.com/maxvetrenko/guava-libraries-17-0/blob/master/guava/src/com/google/common/collect/Cut.java , https://github.com/maxvetrenko/guava-libraries-17-0/blob/master/guava/src/com/google/common/collect/Range.java . NPE were caused by allowByTrailComment option.","closed","","maxvetrenko","2014-08-01T12:09:59Z","2014-08-18T02:29:21Z"
"","109","fix for SF-667 JavadocStyle checkHTML bad Extra HTML tag found errors","fix for SourceForge issue 667.  New tags ""dd"", ""dt"" were added.  Sorry for extra formatting but it was required to satisfy build.","closed","","romani","2014-02-15T16:34:27Z","2014-06-28T16:28:46Z"
"","69","fixes for AbstractClassCouplingCheck","Fix for issues #31 and #33   Changes from the issue: ""Locale"" is not added to the default set of classes to ignore, since it seems not very ""core"" to me. In addition to Map, List, HashMap and ArrayList collections Deque, Queue, LinkedList, Set, HashSet, SortedSet, TreeSet, SortedMap, TreeMap are added. Also StringBuilder was added since StringBuffer was already there.  For reference this is closely connected with #36 (another issue, that should be rejected IMO),  #34, #35, #37 (PRs for these issues that were rejected for bureaucratic reasons).  I feel really strange rejecting contributions from the author of the book about Maven that I used to learn. So lets push this changes if he needs them.","closed","","isopov","2013-11-28T20:15:24Z","2014-06-24T19:55:17Z"
"","831","Remove unused constructor parameter to fix PMD violation, issue #744","Fix for [UnusedFormalParameter](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/unusedcode.html#UnusedFormalParameter) rule.","closed","","mkordas","2015-03-21T00:52:11Z","2015-03-22T17:19:39Z"
"","77","patch from SourceForge issue 520 was applied","fix for #76","closed","","romani","2013-12-08T07:23:24Z","2014-07-27T20:28:19Z"
"","335","Fix false positives in JavadocParagraphCheck","Fix false positives in next cases:   1)   /**  * Some Javadoc.  *  * <p>Some Javadoc.  *   * <pre>  * class Foo {  *            //false positive  *   void foo() {}  * }  * </pre>  *  * @see <a href=""http://code.google.com/webtoolkit/doc/latest/DevGuideOrganizingProjects.html#DevGuideModules"">  *     Documentation about GWT emulated source  */   2)   /**  * Some Javadoc.  *       // whitespaces. false positive  * <p>Some Javadoc.  * @see <a href=""http://code.google.com/webtoolkit/doc/latest/DevGuideOrganizingProjects.html#DevGuideModules"">  *     Documentation about GWT emulated source  */   3)  /**  * <p>Some Javadoc. // false positive. redundant <p> tag  */","closed","","maxvetrenko","2014-10-23T13:36:17Z","2014-10-23T15:01:49Z"
"","237","Fix false positive in WhitespaceAround","Fix false positive in case when empty types are allowed.  public @interface Beta {} //There shouldn't be any warning here","closed","","maxvetrenko","2014-08-11T10:22:06Z","2014-08-11T23:02:06Z"
"","317","Fix build crash after manual merge.","Fix config_javadoc.xml file.","closed","","maxvetrenko","2014-10-21T07:31:22Z","2014-10-21T14:44:21Z"
"","796","Remove element name from selector in CSS","Fix according to CSSLint [Disallow overqualified elements](https://github.com/CSSLint/csslint/wiki/Disallow-overqualified-elements) rule.","closed","","mkordas","2015-03-15T09:57:59Z","2015-04-27T21:14:47Z"
"","364","Modifier final in body of Java 8 default/interface methods","First of all, thanks for adding Java 8 support! Great job!  We have noticed an unexpected behavior of the `RedundantModifier` check in Java 8 default methods within interfaces. While it makes sense to check for redundant `final` modifiers for global interface fields, we don't see why a variable within the body of a default method cannot have the `final` modifier. Is this a bug in the `RedundantModifier` check or actually bad style on our side?  Here's an example demonstrating the code in question.  ``` java public interface MyInterface {     default int defaultMethod(final int x) {       // The next line causes a ""Redundant 'final' modifier"" Checkstyle error.       final int square = x * x;       return square;    } } ```","closed","approved,","zaskar9","2014-11-15T06:50:05Z","2014-12-10T00:18:06Z"
"","820","FileContentsHolder should be child of Cheker","FileContentsHolder should be a child of Checker as it contains content of the file, so it is required for all modules - checks, filters, ...... .  I do not mark that issue as approved as it is going to seriously brake compatibility between releases, we need to think how to minimize affect on user. One idea is to allow that module to be attached to both parents but be registered only ones.  If smb have good ideas , please share them before any implementation ##","closed","","romani","2015-03-19T05:28:10Z","2017-02-03T14:31:58Z"
"","935","Parsing problem when Enumeration type is used","file:  ``` java package org.apache.tools.ant;  import java.util.Enumeration;  public class ComponentHelper  {      private void invalidateCreatedTasks(String type) {         Enumeration enum = v.elements();     } } ```  ``` $ java -jar checkstyle-6.5-all.jar -c my_check.xml ComponentHelper.java ComponentHelper.java:9:17: unexpected token: Enumeration ComponentHelper.java:9:34: expecting IDENT, found '=' Apr 16, 2015 2:23:51 PM com.puppycrawl.tools.checkstyle.TreeWalker processFiltered SEVERE: MismatchedTokenException occurred during the analysis of file ComponentHelper.java . Starting audit... ComponentHelper.java:0: Got an exception - expecting EOF, found '}' Audit done. ```  Full file https://github.com/apache/ant/blob/master/src/main/org/apache/tools/ant/ComponentHelper.java  fix have to validated on checkstyle-tester project (as that problem was found by that project)","closed","antlr,","romani","2015-04-16T18:28:59Z","2015-04-16T18:51:33Z"
"","89","extra reports for web site (findbug, cobertura, pmd, tags, surefire)","extra reports for web site (findbug, cobertura, pmd, tags, surefire)","closed","","romani","2014-01-30T07:53:20Z","2014-07-07T22:07:11Z"
"","762","Final Local Variable Check, extended acceptable tokens","Extended acceptable tokens array as there was a bug which let user set only variables or/and parameters. Now all supported tokens are acceptable and won't lead to error.","closed","","alexkravin","2015-03-12T21:10:33Z","2015-03-12T21:14:16Z"
"","376","Extend parsing rule of method name in {@link #method}","Extend parsing rule of method name in `{@link #method}`. This method name is valid: `$$_hibernate_getEntityInstance()` , but  javadoc parser fails. https://docs.jboss.org/hibernate/orm/4.2/javadocs/org/hibernate/engine/spi/ManagedEntity.html#$$_hibernate_getEntityInstance()","closed","","baratali","2014-11-19T22:09:46Z","2014-11-25T15:28:37Z"
"","956","NPE on nested switch structure","Exception while using google_checks.xml  Error (over 6.5 and 6.6-snapshot): Got an exception - null  minimal test:  ``` package com.github.sevntu.checkstyle.checks.design;  public class InputNestedSwitchCheck {      public void simple() {         switch (hashCode()) {         case 1:             switch (hashCode()) { // error             case 1:             default:             }         case 2:             switch (type) { // error             }         default:         }      }  } ```  full file is https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/test/resources/com/github/sevntu/checkstyle/checks/design/InputNestedSwitchCheck.java","closed","approved,","romani","2015-04-22T00:12:24Z","2015-04-26T21:44:47Z"
"","371","Exception while logging warning in AbstractJavadocCheck","Exception while processing following javadoc comment:  ``` java /**  * Specialized {@link Managed} contract for entity classes.  Essentially provides access to information  * about an instance's association to a Session/EntityManager.  Specific information includes:  *       *        the association's {@link EntityEntry} (by way of {@link #$$_hibernate_getEntityEntry} and  *        {@link #$$_hibernate_setEntityEntry}).  EntityEntry describes states, snapshots, etc.  *       *       *         link information.  ManagedEntity instances are part of a ""linked list"", thus link information  *         describes the next and previous entries/nodes in that ordering.  See  *         {@link #$$_hibernate_getNextManagedEntity}, {@link #$$_hibernate_setNextManagedEntity},  *         {@link #$$_hibernate_getPreviousManagedEntity}, {@link #$$_hibernate_setPreviousManagedEntity}  *       *   *  * @author Steve Ebersole  */ ```  ``` java.lang.IllegalArgumentException: can't parse argument number: @link EntityEntry     at java.text.MessageFormat.makeFormat(MessageFormat.java:1420)     at java.text.MessageFormat.applyPattern(MessageFormat.java:479)     at java.text.MessageFormat.(MessageFormat.java:363)     at java.text.MessageFormat.format(MessageFormat.java:835)     at com.puppycrawl.tools.checkstyle.api.LocalizedMessage.getMessage(LocalizedMessage.java:280)     at com.puppycrawl.tools.checkstyle.api.LocalizedMessage.compareTo(LocalizedMessage.java:376)     at com.puppycrawl.tools.checkstyle.api.LocalizedMessage.compareTo(LocalizedMessage.java:41)     at java.util.TreeMap.put(TreeMap.java:560)     at java.util.TreeSet.add(TreeSet.java:255)     at com.puppycrawl.tools.checkstyle.api.LocalizedMessages.add(LocalizedMessages.java:56)     at com.puppycrawl.tools.checkstyle.api.Check.log(Check.java:246)     at com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck.visitToken(AbstractJavadocCheck.java:186)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:448)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:541)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:373)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:211)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:73)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:263)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:121) Caused by: java.lang.NumberFormatException: For input string: ""@link EntityEntry""     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)     at java.lang.Integer.parseInt(Integer.java:492)     at java.lang.Integer.parseInt(Integer.java:527)     at java.text.MessageFormat.makeFormat(MessageFormat.java:1418)     ... 18 more Exception in thread ""main"" java.lang.IllegalArgumentException: can't parse argument number: @link EntityEntry     at java.text.MessageFormat.makeFormat(MessageFormat.java:1420)     at java.text.MessageFormat.applyPattern(MessageFormat.java:479)     at java.text.MessageFormat.(MessageFormat.java:363)     at java.text.MessageFormat.format(MessageFormat.java:835)     at com.puppycrawl.tools.checkstyle.api.LocalizedMessage.getMessage(LocalizedMessage.java:280)     at com.puppycrawl.tools.checkstyle.api.AuditEvent.getMessage(AuditEvent.java:109)     at com.puppycrawl.tools.checkstyle.DefaultLogger.addError(DefaultLogger.java:100)     at com.puppycrawl.tools.checkstyle.Checker.fireErrors(Checker.java:514)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:280)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:121) Caused by: java.lang.NumberFormatException: For input string: ""@link EntityEntry""     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)     at java.lang.Integer.parseInt(Integer.java:492)     at java.lang.Integer.parseInt(Integer.java:527)     at java.text.MessageFormat.makeFormat(MessageFormat.java:1418)     ... 9 more ```","closed","","baratali","2014-11-17T10:46:25Z","2014-11-20T15:51:16Z"
"","718","remove tag version from all javadocs","Example: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java  ``` @version 1.0 ```  please remove that tag from all javadocs.","closed","approved,","romani","2015-03-04T22:22:26Z","2015-03-06T01:10:17Z"
"","637","extend example of CyclomaticCompexity","Example: http://phpmd.org/rules/codesize.html#cyclomaticcomplexity  please update our xdoc: http://checkstyle.sourceforge.net/config_metrics.html#CyclomaticComplexity","closed","approved,","romani","2015-02-13T06:57:39Z","2015-06-13T23:13:35Z"
"","83","Rule [Method call to X needs ""this.""] only checks for methods declared earlier in source file","Example:  private boolean check1() {    return true; }  public boolean isAllowed() {    return check1() || check2(); }  private boolean check2() {    return true; }  Checkstyle will only complain about ""this."" not being prepended before check1(), not check2(). But when the method check2() is placed above isAllowed() in the source file, Checkstyle will complain.","closed","duplicate,","roelvandun","2014-01-08T08:58:44Z","2014-01-08T16:50:39Z"
"","116","IndentationCheck works incorrectly for fluent method calls","Example:  ``` java 1:        new String() 2:            .substring( 3:                0, 100 4:            ) 5:            .substring( 6:                0, 50 7:            ); ```  The above code (with default settings of IndentationCheck) warns that: `method call rparen at indentation level 12 not at correct indentation, 8 (IndentationCheck)` on line 4.  So according to checkstyle this parentheses should be at the same indentation as `new String()`, but it doesn't have a problem with parentheses on line 7.","closed","approved,","krzyk","2014-03-09T19:05:51Z","2018-11-14T18:11:15Z"
"","711","Update all links to sun.com reference to oracle site","Example oflink from our sources: http://java.sun.com/j2se/1.4.1/docs/api/java/text/MessageFormat.html  Linkcheck plugin does not catch that problem as all links to sun.com a re redirected to Oracle.com without error.  ToDo: all links that ocntain ""sun.com"" shuld be changed to corrsponding ""oralce.com"", IT IS NOT FIND A REPLACE TASK.","closed","approved,","romani","2015-03-02T23:54:14Z","2015-03-18T21:04:52Z"
"","546","Logging of exceptions:","Example of Exception logging during ""mvn clean verify"" on chekcstyle sources  ``` [checkstyle] /home/rivanov/nfs/java/git-others/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java:252:25: ']' is followed by whitespace. java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.visitToken(NoWhitespaceAfterCheck.java:125)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:448)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:541)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:373)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:207)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:77)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:263)     at com.puppycrawl.tools.checkstyle.CheckStyleTask.realExecute(CheckStyleTask.java:318)     at com.puppycrawl.tools.checkstyle.CheckStyleTask.execute(CheckStyleTask.java:262)     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)     at org.apache.tools.ant.Task.perform(Task.java:348)     at org.apache.tools.ant.Target.execute(Target.java:390)     at org.apache.tools.ant.Target.performTasks(Target.java:411)     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)     at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)     at org.apache.tools.ant.Project.executeTargets(Project.java:1251)     at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:442)     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)     at org.apache.tools.ant.Task.perform(Task.java:348)     at org.apache.tools.ant.Target.execute(Target.java:390)     at org.apache.tools.ant.Target.performTasks(Target.java:411)     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)     at org.apache.tools.ant.Project.executeTarget(Project.java:1368)     at org.apache.maven.plugin.antrun.AntRunMojo.execute(AntRunMojo.java:327)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:347)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:154)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) [checkstyle] /home/rivanov/nfs/java/git-others/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java:72:36: ']' is followed by whitespace. [checkstyle] /home/rivanov/nfs/java/git-others/checkstyle/check ```  Expected: file that caused a problem shoudl be somehow  in log.","closed","approved,","romani","2014-12-26T22:27:44Z","2015-01-09T16:43:11Z"
"","93","how to for Eclipse compile and debug","Eventually I am going to create similar post on web site http://checkstyle.sourceforge.net/extending.html to ease new contributors to start with Checkstyle. Still not resolved is how to make Eclipse project to to work out-of-the-box (without ""mvn verify"" launch from terminal), till this is unresolved there is no reason to store "".profile and .classpath"" in repository.","closed","","romani","2014-02-01T17:25:34Z","2014-06-26T06:45:05Z"
"","797","Remove units for zero values in CSS","Even if CSS allows you to put units in the value 0 you should not. The value is always the same, with or without units, and without those units your will shrink the file size and speedup your page load time.  Fix according to CSSLint [Disallow units for zero values](https://github.com/CSSLint/csslint/wiki/Disallow-units-for-zero-values) rule.","closed","","mkordas","2015-03-15T10:04:36Z","2015-03-22T17:21:52Z"
"","17","Error in GenericWhitespace on complex generics.","Error occurs on the following code:  ``` public  LazyA9Maker(X loader, int latch){ } ```  the GenericWhitespace says: '>' is followed by whitespace.","closed","","pbaranchikov","2013-10-09T12:33:56Z","2013-10-10T06:03:00Z"
"","111","Fix for issue #14 will treat annotation array initialization like array initialization outside of an annotation.","Enhance WhitespaceAroundCheck to ignore Annotation Array Initialization curlies as it does for Array Initialization outside of annotations.  As ParenPadCheckTest reuses the test class for WhitespaceAroundCheckTest I copied it and changed that test to use this copy.","closed","","flatiron32","2014-02-21T18:03:26Z","2014-06-15T00:40:56Z"
"","169","Enhance WhitespaceAroundCheck","Enhance WhitespaceAroundCheck to check DO_WHILE and LITERAL_SWITCH tokens.","closed","","maroontress-tomohisa","2014-07-04T02:40:37Z","2014-07-12T23:14:24Z"
"","575","570 allow basedir set null","Enables possibility to set the basedir property to null.  This is needed in eclipse-cs in case the user provided a value for this in the XML configuration file. The user-defined value would be harmful in context of eclipse-cs, hence the basedir property needs to be reset to null. I tested the change in eclipse-cs and it is working as expected.","closed","","lkoe","2015-01-10T16:38:09Z","2015-01-11T18:14:40Z"
"","964","EmptyBlockCheck should process TokenTypes.LITERAL_SYNCHRONIZED","EmptyBlockCheck   TokenTypes.LITERAL_SYNCHRONIZED should be part of getAcceptableTokens(), and defaultTokens too,","closed","approved,","romani","2015-04-23T17:05:20Z","2015-04-23T19:39:06Z"
"","350","'>' is followed by an illegal character when referencing methods in type-parameterized classes","E.g, `MyClass::myMethod` generates  `'>' is followed by an illegal character`  Should either fix this, or enforce  `::` always being surrounded by spaces like other operators in the whitespace around/after modules.","closed","high demand,","thomas4g","2014-10-31T04:39:39Z","2014-12-18T19:42:20Z"
"","291","resolve javadoc problem that reported by java8","during javadoc generation:  ```   location: class DefaultConfiguration /home/rivanov/java/git-others/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java:51: error: cannot find symbol     private final Map mMessages = Maps.newHashMap();                                                   ^   symbol:   variable Maps   location: class DefaultConfiguration  ```  https://cwiki.apache.org/confluence/display/MAVEN/Java+8+Upgrade  We need to find way to resolve that without ignoring.  also a problem:  ``` checkstyle/checkstyle/target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParserListener.java:297: warning - Tag @link: can't find brTag in JavadocParser checkstyle/checkstyle/target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParserListener.java:660: warning - Tag @link: can't find colgroup in JavadocParser checkstyle/checkstyle/target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParserListener.java:814: warning - Tag @link: can't find colgroupTagClose in JavadocParser  Command line was: /usr/lib/jvm/jdk1.8.0_25/jre/../bin/javadoc @options @packages @argfile  Refer to the generated Javadoc files in '...../checkstyle/checkstyle/target/site/apidocs' dir.      at org.apache.maven.plugin.javadoc.AbstractJavadocMojo.executeJavadocCommandLine(AbstractJavadocMojo.java:5063)     at org.apache.maven.plugin.javadoc.AbstractJavadocMojo.executeReport(AbstractJavadocMojo.java:2004)     at org.apache.maven.plugin.javadoc.JavadocReport.generate(JavadocReport.java:130)     at org.apache.maven.plugins.site.render.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:233)     at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.renderModule(DefaultSiteRenderer.java:311)     at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:129)     at org.apache.maven.plugins.site.render.SiteMojo.renderLocale(SiteMojo.java:182)     at org.apache.maven.plugins.site.render.SiteMojo.execute(SiteMojo.java:141)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:347)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:154)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:483)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)  ```","closed","high demand,","romani","2014-10-08T15:48:39Z","2015-08-09T02:37:44Z"
"","992","Fix AvoidStaticImport check violations in codebase, issue #979","Dozens of tests import statically from the class being tested, so I decided to skip this check for test code.","closed","","mkordas","2015-04-26T09:21:01Z","2015-04-27T21:14:02Z"
"","810","Rewrite POM using canonical ordering, issue #809","Done according to [POM Code Convention](http://maven.apache.org/developers/conventions/code.html#POM_Code_Convention).","closed","","mkordas","2015-03-16T22:25:20Z","2015-03-22T17:20:35Z"
"","881","Add missing docs for allowMultipleEmptyLines property of EmptyLineSeparator check","Documenation is missing for [EmptyLineSeparator](http://checkstyle.sourceforge.net/config_whitespace.html#EmptyLineSeparator)  allowMultipleEmptyLines property.  In 209b22885ab63ab87c939a24c3ab5d9cf43d911d this newly added option was reverted. Then it was brought back with 2db0dab62fc4986c3bebb38a1b8cac857f37664a, but `config_whitespace.xml` was never updated again.","closed","approved,","mkordas","2015-03-29T00:56:23Z","2015-07-25T13:59:47Z"
"","512","changes to checkstyle's configuration for Checkstyle","do not start this issue till my finall approval  1) remove ""m"" and ""a"" prefixes in memebers and function arguments  2) indent ""case"" in SWITCH block to 4 spaces to the right  Attention:  ""esle {"" should stay as non changed, as on separete line from ""}"",  as Ilike thi sapproch and it is used in Spring and Hibernate projects too","closed","","romani","2014-12-18T19:48:03Z","2015-01-22T14:59:04Z"
"","477","Build and install the tests jar artifact","Distributing the tests jar artifact will allow the authors of custom checks to extend test classes available in checkstyle project.","closed","","ppalaga","2014-12-09T10:22:29Z","2014-12-09T22:00:18Z"
"","799","Introduce new handler SynchronizedHandler for checking identation. Fixes #580","Discussion what bad was going on is in discussion for issue #580. It introduces new SynchronizedHandler for synchronized expressions. To distinguish between synchronized method and synchronized block it has  isOnlyMethodModifier field which is determined by isMethodModifier method.","closed","","liscju","2015-03-15T13:22:14Z","2015-04-16T18:34:35Z"
"","343","JArchitect added to related section","Developers of this commercial tool contacted me in private email. I have not tried this one, but it seems that we support quite extensive list of related tools, including commercial (At least Idea plugins were listed in the days when there were no Community Edition if I remember correctly).","closed","","isopov","2014-10-30T18:05:40Z","2014-11-01T04:00:52Z"
"","457","remove JUnitTestCase from Checkstyle","details https://github.com/checkstyle/checkstyle/pull/431, as Check does not care of class it is validating - it is useless and should be removed.","closed","approved,","romani","2014-12-06T07:19:48Z","2015-04-19T06:19:40Z"
"","86","Deprecate FastStack implementation in API","Deprecate: http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/FastStack.html  use guava or other recent implementation","closed","approved,","romani","2014-01-19T16:42:08Z","2015-04-27T13:47:40Z"
"","525","Support for Default IntelliJ IDEA Formatting in CustomImportOrder or ImportOrder","Default formatting in IntelliJ looks like as follows:  ``` all other imports  javax.* in alphabetical order java.* in alphabetical order  static imports in alphabetical order ```  Right now, it is not possible to sort `java` and `javax` separately without blank line in-between. ##","closed","approved,","mkordas","2014-12-20T01:31:07Z","2020-04-19T17:46:51Z"
"","515","CustomImportOrderCheck broken","CustomImportOrderCheck does not behave as described:  ``` THIRD_PARTY_PACKAGE group. This group sets ordering of third party imports.  Third party imports are all imports except STATIC, SAME_PACKAGE(n)  and STANDARD_JAVA_PACKAGE. ```  That is not true: Third party packages are all imports that are not in STATIC and not in STANDARD_JAVA_PACKAGE and match the third party regex.  That means if you do not craft the regex well you'll get  a) intersection with SAME_PACKAGE, that means imports that qualify for SAME_PACKAGE _and_ THIRD_PARTY_PACKAGE b) imports that match no group at all  Additionally the default regex for THIRD_PARTY_PACKAGE is ""^$"" which matches the empty string only. That means if you use the THIRD_PARTY_PACKAGE group you MUST define a regex. This is not explained in the documentation!!!  ---  My import rule is as follows:  ``` import org.mydomain.project.*  import   import java.* import javax.*  import static  ```  I want to do that with the following configuration:  ``` sortImportsInGroupAlphabetically set to true separateLineBetweenGroups set to true customImportOrderRules set to SAME_PACKAGE(3)###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE###STATIC ```  But this does not work because the thirdPartyPackageRegExp does not match ""others""  Workaround is actually overspecifying ""same package"" by defining third party regex:  thirdPartyPackageRegExp = ""^(?!org.mydomain.project).*$""  ---  Question/Discussion: Does thirdPartyPackageRegExp make sense at all? Why not match _everything that is not in one of the other groups_ as THIRD_PARTY_PACKAGE?","closed","approved,","StefanPenndorf","2014-12-19T13:20:09Z","2015-01-30T16:41:42Z"
"","63","Indentation: method declaration should accept more deeply indented throws","Currently, the ""Indentation"" module expects methods declarations to have a `throws` keyword indented like this:  ``` java public void foo(int a,     int b)     throws SomeException {     return false; } ```  I think the following is much more readable:  ``` java public void foo(int a,         int b)         throws SomeException {     return false; } ```  Would you accept a patch that tolerates both indents?  It should be rather straightforward to do in https://github.com/checkstyle/checkstyle/blob/master/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java#L80","closed","","kosta","2013-11-17T00:46:22Z","2014-02-13T20:49:11Z"
"","535","Add New Check: IllegalMethod","Currently in Checkstyle we have such checks like [IllegalType](http://checkstyle.sourceforge.net/config_coding.html#IllegalType), [IllegalImport](http://checkstyle.sourceforge.net/config_imports.html#IllegalImport), etc. But there is no way to prevent some particular method from being invoked.  This may be quite useful, when we decide in project e.g. to replace JUnit assertions with Hamcrest. Then the following configuration could be used with as many methods as we want to prohibit:  ``` xml        ```  This check should prevent from invoking instance/static methods that are invoked normally, by fully qualified names, statically imported etc. Star import is problematic, but we have other check to prevent it.  Right now we can prevent all overloaded versions from being invoked. Marking only one overload as illegal probably would be way too hard to implement (generics...). ##","open","new module,","mkordas","2014-12-23T21:13:07Z","2016-12-14T18:17:03Z"
"","138","Multithreaded file audit","Currently checkstyle uses just a single thread to perform file audit. If using multiple threads, the audit performance can be improved.  When building clean project, multithreading is required to reduce the duration of audit.","closed","approved,","vlsi","2014-04-23T14:04:48Z","2015-01-30T18:43:02Z"
"","260","added hidden field ignore rule for builder setter methods","Currently `HiddenField` module has an option to ignore only simple setter methods returning `void`. Assume the `checkstyle.cfg` has the following:  ``` xml ...        ... ```  Then this source file would be flagged:  ``` java class MyBuilder {     String prop;     public void setProp(String prop) { // this gets correctly ignored due to 'ignoreSetter'         this.prop = prop;     }      public MyBuilder withProp(String prop) { // this gets flagged         this.prop = prop;         return this;     } } ```  The proposed improvement is to add another boolean property 'ignoreBuilderSetter' to `HiddenField` module which would for all types named as `.*Builder` allow to ignore setter methods named either `withX` or `setX` and returning the defining type.  See committed xdoc for details.","closed","","wigbam","2014-08-24T15:39:40Z","2014-09-26T01:46:14Z"
"","736","Update Apache Ant library used by Checkstyle","Current state in Checkstyle's POM:  ``` xml            org.apache.ant       ant              1.7.0       provided      ```  Newest version of Apache Ant Core library is [1.9.4](http://mvnrepository.com/artifact/org.apache.ant/ant). After the change build executes fine.  Do you know the reason for comment `Do not upgrade as this is the earliest version of ANT supported`? Can I update this library regardless and remove this comment?  Also, do you know the reason it works with `provided`?","closed","","mkordas","2015-03-10T00:29:04Z","2015-03-11T16:47:59Z"
"","96","Allow commenting only one of the property methods","Creating Javadoc for Properties is valuable, but if done by any existing rules would result in a great deal of duplication. AllowMissingPropertyJavadoc allows to complete ignore all properties, but a more ideal solution is one in which you only need one comment to cover the getter and setter, and that the getter does not require a @return tag nor the setter an @param tag. At the base a property is a singular item, and sensibly only requires explanation once. Comments like ""Sets myProperty"" are useless cruft and best avoided, and copying the whole explanation of what a property is into four places is almost as bad. # Alternative request:  Most of the time, setters and getters are very simple, but it is not possible to suppress warnings if the JavaDoc for getters and setters is not defined. This could be added by one of the following methods: Add a checkbox for allowMissingJavadocGetter and allowMissingJavadocGetter  Add the possibility to define a regular expression so that methods that match that pattern should be not checked: allowMissingJavaDocPattern with a text entry field. ##","open","javadoc,","isopov","2014-02-05T10:00:50Z","2022-07-10T13:45:55Z"
"","6","InnerTypeLast within methods","Created: 2013-08-29 Creator: Alexander Weickmann   Following code leads to the checkstyle warning InnerTypeLast. This should not happen as it's not even possible to declare the variable before the inner class.  Check: http://checkstyle.sourceforge.net/config_design.html#InnerTypeLast  ``` class Outer {     void method() {         class Inner {         }         Inner inner = new Inner();     } } ```","closed","approved,","romani","2013-09-29T05:41:07Z","2014-12-02T15:19:12Z"
"","12","ImportOrder should ignore grouping order in static group as option","Created: 2013-08-16 Creator: David Harkness   http://checkstyle.sourceforge.net/config_imports.html#ImportOrder  When you specify package groupings inside ImportOrder, that same ordering is applied to the single group of static imports. Eclipse's Organize Imports feature, however, sorts all static imports alphabetically within a single group--ignoring the package grouping order. There's no way to synchronize the behavior between the two tools.  For example, using ""org,java"" produces this in Eclipse:  ``` import static java.Math.abs; import static org.foo.Bar.*;  import org.foo.Foo;  import java.util.Set; ```  For maximum flexibility, add an option to control whether or not the static imports (when grouped using ""top"" and ""bottom"" option) are sorted normally or according to the package groupings.  PS: Or perhaps it wants the two static imports above to be separated into groups as well. I cannot tell from the error message. So please make message more exact.","closed","approved,","romani","2013-10-05T15:03:05Z","2015-03-17T05:45:06Z"
"","13","Generics Wildcard (Java 7) - EOF error","Created: 2013-03-17 Creator: Füge  Generics wildcard usage in Java 7 like:  ``` List foo = List(); ```  throws: Got an exception - expecting EOF, found ...","closed","approved,","romani","2013-10-05T15:11:26Z","2014-07-29T17:59:59Z"
"","14","WhitespaceAround, false positive for right curly brace in Annotation","Created: 2013-02-27 Creator: Florian Reiser  http://checkstyle.sourceforge.net/config_whitespace.html#WhitespaceAround When having the WhitespaceAround test configured in the default configuration, it reports an error for the right curly brace in the following snippet, even though the formatting of the annotation is completely fine. The error message is ""There is no whitespace before '}'"". Code:  ``` @Local({Interface1.class, Interface2.class}) public class Implementation implements Interface1, Interface2 { ```  In my opinion there should be no error in this case, as it is in an annotation (javax.ejb.Local specifically)  More examples:  ```     @Target({TYPE, FIELD, METHOD, LOCAL_VARIABLE}) //warning     @SuppressWarnings({""unused"", ""all""}) //warning     @SuppressWarnings({ ""unused"", ""all"" }) // ok and Eclipse do format like this     @SuppressWarnings( { ""unused"", ""all"" } ) //ok with Check but ugly ```  It might be ""religious"" question how to format Annotation declarations, Sun/Oracle and others do that in bit different way, But I think it is reasonable to reconcile that in Checkstyle by option ""skipAnnotationBraces"" or smth similar  #   case from  Created: 2009-10-07 Creator: Mark Hobson :   ``` @MyAnnotation(myArrayElement = {""a"", ""b"", ""c""}) ```  With: ""'}' is not preceded with whitespace.""  Whereas the same formatting used with array initialisation passes:  ``` String myArrayElement = new String[] {""a"", ""b"", ""c""}; ```","closed","approved,","romani","2013-10-05T16:00:50Z","2014-07-22T17:59:32Z"
"","20","FinalLocalVariable does not check for loop variable","Created: 2013-02-12 Creator: Nathan  SF: #sf695  Checkstyle version: 5.6 Check: http://checkstyle.sourceforge.net/config_coding.html#FinalLocalVariable  With FinalLocalVariable enabled, checkstyle does not complain about following code:  ``` for (String s : new String[] {""A"", ""B"", ""C""}) { System.out.println(s); } ```  Should require:  ``` for (final String s : new String[] {""A"", ""B"", ""C""}) { System.out.println(s); } ```","closed","approved,","romani","2013-10-16T06:31:52Z","2018-01-03T20:31:16Z"
"","21","WhitespaceAround with allowEmptyMethods complains on annotation's empty method","Created: 2013-01-18 Creator: Matteo Corti  SF: #sf694  Check: http://checkstyle.sourceforge.net/config_whitespace.html#WhitespaceAround allowEmptyMethods=true  Code:  ``` public @interface CronExpression  { Class< ? >[] groups() default {}; // WARNING IS HERE } ```  Check is satisfied with following code, but it is a bug  ``` public @interface CronExpression  { Class< ? >[] groups() default { }; // extra space  } ```","closed","approved,","romani","2013-10-17T04:13:21Z","2014-07-22T16:05:17Z"
"","22","StrictDuplicateCode trips up on file headers","Created: 2012-12-18 Creator: Yegor Bugayenko  Ref: #sf693 Created: 2009-04-20 Creator: Toby Byron  ref: #sf555  I cannot use the StrictDuplicateCode check because it reports excessive essentially false duplicates.  Specifically, each of my source code files starts with the same file header (a comment that contains a copyright notice and boilerplate relating to the GPL3 license that my code is released under).  Yes, literally speaking, StrictDuplicateCode is correctly finding duplicates here however standard file headers are clearly not what people want to have reported to them.  So, what StrictDuplicateCode needs is to automatically suppress any duplicate comments at the start of files from its reports.  Would be nice to have a property ""header"" for StrictDuplicateCodeCheck:","closed","approved,","romani","2013-10-17T04:53:53Z","2015-02-24T06:49:48Z"
"","27","Documentation how to patch checkstyle is missing","Created: 2012-10-31 Creator: Markus Liebelt  SF ticker: 686  I would like to send a patch to one of the open checkstyle bugs, but could not find any documentation how to do that. Where is the documentation how to setup an IDE (preferred Eclipse) to develop a patch?  http://checkstyle.sourceforge.net/contributing.html  I tried the following:  Downloaded the binary and source release and tried to setup an Eclipse project with them. I had numerous problems, especially with the class path and the dynamically generated classes. I do not understand how a build of checkstyle should then be done to test the code. When I go to the code section, I find there a reference to git ?.  Please provide at least a recipe how to setup a pure Java development environment by providing the essential steps like:  ``` Ensure that Git, Java JDK 1.5/6/7 is installed. Checkout the current source code from that URL: https://github.com/checkstyle/checkstyle/ Develop the changes Provide a pull request by .... ```","closed","approved,","romani","2013-10-26T05:04:34Z","2015-03-12T20:12:25Z"
"","26","SuppressionCommentFilter does not suppress StrictDuplicateCode Warnings","Created: 2012-10-31 Creator: Christoph Böhme SF issue: 687   The SuppressionCommentFilter does not suppress warnings generated by the StrictDuplicateCode module.  My checkstyle configuration is:  ```                                         ```  The AvoidInlineConditionals is only included to verify that suppression is configured correctly.  In the java file checkstyle is disabled using comments:  ``` public class StrictDuplicateCodeTest {          // CHECKSTYLE:OFF          public static void main(String[] args) {                 int i = 1;                 i += i == 1 ? 2 : 3;                 /* Some random comments                  * in order to                  * produce some                  * duplicate                  * code.                  */                 duplicatedCode(i);         }          public static int duplicatedCode(int j) {                 int i = 1;                 i += i == 1 ? 2 : 3;                 /* Some random comments                  * in order to                  * produce some                  * duplicate                  * code.                  */                 i += j;                 return i;         }          // CHECKSTYLE:ON } ```  In my understanding checkstyle should not produce any warnings when checking this file. However, when running checkstyle on the file I get the following output:  ``` java -jar checkstyle-5.6/checkstyle-5.6-all.jar -c checkstyle.xml StrictDuplicateCodeTest.java Starting audit... StrictDuplicateCodeTest.java:6: 8 gleiche Zeilen in StrictDuplicateCodeTest.java, beginnend bei Zeile 18 Audit done. ```  If I remove the two CHECKSTYLE comments from the file then the output also includes two AvoidInlineConditional warnings:  ``` java -jar checkstyle-5.6/checkstyle-5.6-all.jar -c checkstyle.xml StrictDuplicateCodeTest.java Starting audit... D:\\StrictDuplicateCodeTest.java:5:29: Der Bedingungsoperator sollte vermieden werden. D:\\StrictDuplicateCodeTest.java:17:29: Der Bedingungsoperator sollte vermieden werden. StrictDuplicateCodeTest.java:4: 8 gleiche Zeilen in StrictDuplicateCodeTest.java, beginnend bei Zeile 16 Audit done. ```","closed","approved,","romani","2013-10-26T04:58:10Z","2015-03-19T05:31:26Z"
"","28","AnnotationsUseStyle yields warning on ""({})"" of Array types","Created: 2012-07-31 Creator: Bjoern Kimminich SF issue: 678 (https://sourceforge.net/p/checkstyle/bugs/678/)  > There should be an exceptional handling of the meta-annotation @Target({}) in the AnnotationsUseStyle check. Currently it is reported as ""Annotations cannot have closing parenthesis"" when using the closingParens:never option. As this is a meta-exception it should be excluded from the validation.  http://checkstyle.sourceforge.net/config_annotation.html#AnnotationUseStyle  http://docs.oracle.com/javase/7/docs/api/java/lang/annotation/Target.html  Problem with treatment of Arrays, as Checkstyle does not have ability to know type of classes the declared in other files, we could rely only on user to privide us list of Annotations that have Array as values. Default value should be ""Target""  , option name is closingParensIgnoreList, that contains list of Annotation names separated by coma.    We still come to problem full name usage in code ""@java.lang.annotation.Target({})"", we can ask user to provide full name, additional analys of imports will be required, to distinguish Target from java.lang and from users Annotaton.  Additionally we need to put on web side description from JavaDoc, do the same for Eclipse CS plugin. We need to add description with code example what does closingParens mean, as took we awile to understand a reason of option.  ``` package test;  import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(value=RetentionPolicy.RUNTIME) //@SomeAnnotation({ElementType.FIELD, ElementType.METHOD}) @SomeAnnotation({}) //@Target({ElementType.FIELD, ElementType.METHOD}) @Target({}) public @interface MyAnn {  } ```  ``` package test;  import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target;  @Documented @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.ANNOTATION_TYPE) public @interface SomeAnnotation  {     String[] value(); } ```  Example of error if annotation is ""@Target()"" or ""@Target"":  ``` sh-4.3# javac HelloWorld.java                                                                                                                                     HelloWorld.java:10: error: annotation @Target is missing a default value for the element 'value'                                                                  @Target()                                                                                                                                                 ^                                                                                                                                                                1 error   ```","closed","approved,","romani","2013-10-26T23:29:31Z","2015-03-17T21:29:59Z"
"","29","Abstract Interface Should not be Allowed in RedundantModifier","Created: 2011-11-18 Creator: bkh  SF issue: 663  When declaring a method 'public abstract interface', the abstract shouldn't be allowed as it is redundant.   Code:  ``` package test;  public abstract interface TestBug { // here we do not have warning     abstract void foo(); // here we have warning } ```","closed","approved,","romani","2013-10-26T23:57:19Z","2014-09-12T22:22:30Z"
"","30","Exception ""expecting EOF""","Created: 2011-08-24 Creator: Bjoern Kimminich SF issue: 652  For the following code the Eclipse Checkstyle Plug-in 5.6 reports a strange error in line 6, the same from command line execution on : ""Folgende Ausnahme ist aufgetreten - expecting EOF, found 'getterMethod'""  ``` public static Method findGetterMethod(Class beanClass, String propertyName, Class propertyType) {     String getterName = ""get"" + propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1);     Method getterMethod = findMethod(beanClass, getterName, new Class[] {}, propertyType);     if (getterMethod == null && (boolean.class.equals(propertyType) || Boolean.class.equals(propertyType))) {         getterName = ""is"" + propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1);         getterMethod = findMethod(beanClass, getterName, new Class[] {}, propertyType);     }     return getterMethod; } ```  my test:  ``` 22:33 ~/Temp/4 $ java -cp file:///home/rivanov/java/git-others/checkstyle/target/checkstyle-5.7-SNAPSHOT-all.jar com.puppycrawl.tools.checkstyle.Main -c file:///home/rivanov/java/git-others/checkstyle/sun_checks.xml /home/rivanov/workspace-test/test/src/test/CheckStyleErrorTest.java /home/rivanov/workspace-test/test/src/test/CheckStyleErrorTest.java:13:15: expecting RPAREN, found '.' /home/rivanov/workspace-test/test/src/test/CheckStyleErrorTest.java:13:21: expecting IDENT, found '.' /home/rivanov/workspace-test/test/src/test/CheckStyleErrorTest.java:14:21: expecting IDENT, found '.' Starting audit... /home/rivanov/workspace-test/test/src/test/CheckStyleErrorTest.java:0: File does not end with a newline. /home/rivanov/workspace-test/test/src/test/CheckStyleErrorTest.java:7:1: File contains tab characters (this is the first instance). /home/rivanov/workspace-test/test/src/test/CheckStyleErrorTest.java:13: Line has trailing spaces. /home/rivanov/workspace-test/test/src/test/CheckStyleErrorTest.java:16:4: Got an exception - expecting EOF, found 'Class' Audit done. ```  My File:  ``` package test;  import java.lang.reflect.Method;  public class CheckStyleErrorTest {      public static void main(String[] args) {         Class[] classes = new Class[] {};     }      public static Method findGetterMethod(Class beanClass,             String propertyName, Class propertyType, Method getterMethod) {         if ((boolean.class.equals(propertyType)                  || Boolean.class.equals(propertyType))) {             propertyName = """";             Class[] classes = new Class[] {}; //// Exception is here!!!         }         return getterMethod;     }      private static Method findMethod(Class beanClass, String getterName,             Class[] classes, Class propertyType) {         // TODO Auto-generated method stub         return null;     } } ```","closed","approved,","romani","2013-10-27T05:39:51Z","2014-07-28T22:57:14Z"
"","202","Check for interface type parameter name","Created: 2011-04-13 Updated: 2014-06-24 Creator: Anonymous SF: #s567  Checkstyle have two good checks: ClassTypeParameterName ad MethodTypeParameterName. However there seems to be no way to check for type parameter name of the interface. Suggestion is to extend ClassTypeParameterName with this functionality or write a new check InterfaceTypeParameterName - what is more appropriate. Actually, I can do it if more experienced checkstyle developer would tell what way of these two should be adopted. Little example (""Input"" is not reported as wrong type parameter name with both ClassTypeParameterName and MethodTypeParameterName turned on with default regexp):  interface Boo {     Input boo(); }","closed","","maxvetrenko","2014-07-23T16:32:12Z","2014-07-28T06:08:47Z"
"","40","Deployment to maven central repository","Created: 2010-09-16 Creator: Nicolas Dordet  SF issue: 620  make new checkstyle jars to appear at http://mvnrepository.com/artifact/checkstyle/checkstyle after or during release.","closed","approved,","romani","2013-10-28T01:34:07Z","2015-01-23T04:52:14Z"
"","47","False positive with GenericWhitespace - Array","Created: 2010-08-04 Creator: markt_asf SF issue: 617  http://checkstyle.sourceforge.net/config_whitespace.html#GenericWhitespace The following line incorrectly triggers an error with the GenericWhitespace module  ``` private HashMap","closed","high demand,","romani","2013-11-05T02:02:28Z","2014-07-02T11:48:34Z"
"","50","Problem with ClassResolving for RedundantThrowsCheck","Created: 2010-05-21 Creator: Arek Sokołowski  SF issue: 608  Code:  ``` package a.b.c;  public class MyException { } ```  Code:  ``` package test;  import a.b.c.MyClass; import a.b.c.MyException;  /**  * Doc.  */ public class Asset {   public final MyClass m() throws MyException {     MyClass d = new MyClass(""aaa"");     return myClass;   } } ```  Launch: 15:18 ~/Temp $ java -cp file:///home/rivanov/java/git-others/checkstyle/target/checkstyle-5.7-SNAPSHOT-all.jar com.puppycrawl.tools.checkstyle.Main -c file:///home/rivanov/java/git-others/checkstyle/sun_checks.xml MyException.java Asset.java  Starting audit... /home/rivanov/Temp/MyException.java:0: File does not end with a newline. /home/rivanov/Temp/MyException.java:0: Missing package-info.java file. /home/rivanov/Temp/MyException.java:3: Missing a Javadoc comment. /home/rivanov/Temp/MyException.java:3:27: '{' is not followed by whitespace. /home/rivanov/Temp/MyException.java:3:27: '}' is not preceded with whitespace. /home/rivanov/Temp/Asset.java:10:3: Missing a Javadoc comment. /home/rivanov/Temp/Asset.java:10:35: Unable to get class information for MyException.  Unexpected: ""Unable to get class information for MyException."" from RedundantThrowsCheck (AbstractTypeAwareCheck, ClassResolver).  Nuance: this works fine in EclipseCS 5.6 - looks like problem/feature of ClassLoader.","closed","approved,","romani","2013-11-10T00:11:54Z","2014-12-25T22:50:13Z"
"","197","Add allowEmptyAnonymousClasses to WhitespaceAround check","Created: 2009-10-06 Updated: 2012-10-10 Creator: Mark Hobson SF: #sf528  Sometimes it is necessary to create empty anonymous classes inline, for example: MyClass c = new MyClass() {}; A allowEmptyAnonymousClasses property would allow these situations to be ignored in a similar way to empty methods and constructors.  WhitespaceAroundCheck : http://checkstyle.sourceforge.net/config_whitespace.html#WhitespaceAround  Note:  Oracle guides: [Anonymous Classes](http://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html#Syntax of Anonymous Classes)  Was updated allowEmptyTypes property. This property allows empty classes(top-level, inner anonymous), interfaces and enums bodies.","closed","","maxvetrenko","2014-07-22T18:37:25Z","2014-07-24T16:14:01Z"
"","52","False positive with GenericWhitespace - Multiple Bounds","Created: 2009-07-30 Creator: danrabe  SF issue: 589  Check: http://checkstyle.sourceforge.net/config_whitespace.html#GenericWhitespace  Code:  ``` package src;  public class MyGenericClassBad { } ```  Detected: violation - ""'>' is followed by whitespace."" Expected: no violation","closed","approved,","romani","2013-11-10T01:33:30Z","2014-11-29T16:37:07Z"
"","53","TreeWalker exception on using class for primitives","Created: 2009-07-22 Creator: costamojan SF issue: 583  Code:  ```     public boolean isPrimitive2(Class type) {         return ((boolean.class == type) || (byte.class == type)                 || (char.class == type) || (short.class == type)                 || (int.class == type) || (long.class == type)                 || (float.class == type) || (double.class == type));     } ```  Error: TreeWalker: Got an exception - expecting EOF, found '}'  code 2 from SF issue 373:  ```     public static void main(String[] args)     {         Class c = null;          if (true && (boolean.class.equals(c) || boolean.class.equals(c)))         {             ;         }     } ```","closed","antlr,","romani","2013-11-10T01:52:05Z","2014-07-28T23:15:33Z"
"","55","EqualsAvoidNull confused when passing null to equals","Created: 2009-06-21 Creator: Baron Roberts  SF issue: 576  http://checkstyle.sourceforge.net/config_coding.html#EqualsAvoidNull  Code:  ```         String foo = ""sdgs"";         boolean b = foo.equals(null); ```  Violation: ""Equals Avoid Null: String literal expressions should be on the left side of an equals comparison.""  Expected: no violation","closed","approved,","romani","2013-11-12T04:30:05Z","2013-11-12T17:31:17Z"
"","56","NPathComplexity ignores multi-part boolean expressions","Created: 2008-11-19 Creator: Christian Oetterli SF issue: 534   The rationale of NPath says that it takes into account also multi-part boolean expressions (http://checkstyle.sourceforge.net/config_metrics.html#NPathComplexity ). This is not the case. At least PMD reports another NPath value for the method ""aMethod2()"" below.  ``` public class NPathTest { // Both = 4 void aMethod1() { if (true) { } if (true) { } } ```  ``` // Checkstyle = 4 // PMD = 6 void aMethod2() { if (true || true) { // multi-part bool } if (true) { } } } ```  For me PMD is right as we have 6 possible ways.  We have article for NPathComplexity algorithm. ##","closed","approved,","romani","2013-11-13T07:31:51Z","2017-04-28T16:40:08Z"
"","60","Wrong error reporting if class name ends with “Error”","Created: 2008-06-05 Creator: Subhash Chandran SF issue: 515  http://checkstyle.sourceforge.net/config_design.html#MutableException  I am getting an unexpected checkstyle error in case of class names ending with the word “Error”. The error is “The field must be declared as final”. This error is reported for variables which could not be declared as final. Please see the below class.  ``` package src;  public class SyncError {    //Mutable Exception: The field 'message' must be declared final.    private String message;  } ```  If I am changing the class name such that it ends with any other string other than “Erorr” then this error is not reported by checkstyle.  Reason: checkstyle does not know anything about Types and their hierarchy. It deduce types by RegExp string to match Class name. Default regexp is ""^._Exception$|^._Error$""  this Check will never be correct for that validation. All we could is improve a bit by checking that Class do extends of same name notation class (""an exception type must be a subclass of Throwable"") and extend default value with ""^.*Throwable$"".","closed","approved,","romani","2013-11-14T06:50:28Z","2015-04-24T22:02:39Z"
"","198","Switch whitespace","Created: 2007-01-29 Updated: 2012-10-10 Creator: Bodo SF: #sf#449  Description: I can't find a posibility to require a whitespace between the switch literal an the left parenthesis like it is the case for ""while, if, for ...""  WhitespaceAroundCheck : http://checkstyle.sourceforge.net/config_whitespace.html#WhitespaceAround  Example:  switch (i) switch(i)","closed","","maxvetrenko","2014-07-22T18:58:15Z","2014-07-24T12:14:01Z"
"","200","Left curly brace check not working for enum","Created: 2006-03-17 Updated: 2012-10-10 Creator: Nick Crossley SF: #s420  The left curly brace placement check is not working  for enums. My config file sets this to 'nl', but I  get no warning when braces are place at the end of  the 'enum XXX {' line. {This is in Checkstyle 4.1}","closed","","maxvetrenko","2014-07-23T15:33:37Z","2014-07-24T12:18:15Z"
"","306","New Check: AtclauseOrderCheck","Create new check to validate ordering of at-clauses. Oracle's rule: http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#orderoftags","closed","","maxvetrenko","2014-10-19T11:48:33Z","2014-10-21T06:50:43Z"
"","179","New Check: SeparatorWrap","Cover the part of [Google's rule](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.5.1-line-wrapping-where-to-break) with separators like '.' and ','.  Separators and Operators: http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.11","closed","","maxvetrenko","2014-07-11T10:54:48Z","2014-07-20T18:49:22Z"
"","139","Class Data Abstraction Coupling complains LinkedHashMap but not HashMap","Could you please consolidate the rule that measures coupling to either allow Collections or not ... e.g. by checking whether the class in question derives from interface Collection or Map respectively? ##","open","discussion ongoing,","hklene","2014-04-28T09:49:23Z","2016-12-14T18:16:40Z"
"","9","-v CLI flag for querying the installed Checkstyle version","Could the `checkstyle` CLI script get a `-v` flag to display the version? This could help bug reporters and developers more quickly resolve bugs.","closed","approved,","apennebaker","2013-10-03T18:25:47Z","2014-11-29T16:58:10Z"
"","305","distribute Sun and Google configs in checkstyle-X.X-all.jar","copy sun_checks.xml and google_checks.xml to  checkstyle-X.X-all.jar  to make that work: java -jar checkstyle-5.8-all.jar -c /sun_checks.xml MyClass.java java -jar checkstyle-5.8-all.jar -c /google_checks.xml MyClass.java  Update http://checkstyle.sourceforge.net/cmdline.html to show that.  FYI: files system have a priority over classpath  ``` 03:57 PM ~/Temp/1 $ sudo cp sun_checks.xml / [sudo] password for rivanov:  03:58 PM ~/Temp/1 $ sudo gedit /sun_checks.xml # I did removal of all Checks/Modules 03:59 PM ~/Temp/1 $ java -jar checkstyle-5.8-all.jar -c /sun_checks.xml MyClass.java Starting audit... Audit done.  # I copied file sun_checks.xml inside jar   03:59 PM ~/Temp/1 $ java -jar checkstyle-5.8-all.jar -c /sun_checks.xml MyClass.java Starting audit... Audit done.  04:00 PM ~/Temp/1 $ sudo mv /sun_checks.xml ./sun_checks.xml1 04:00 PM ~/Temp/1 $ java -jar checkstyle-5.8-all.jar -c /sun_checks.xml MyClass.java Starting audit... /home/rivanov/Temp/1/MyClass.java:0: File does not end with a newline. /home/rivanov/Temp/1/MyClass.java:0: Missing package-info.java file. /home/rivanov/Temp/1/MyClass.java:3: Missing a Javadoc comment. /home/rivanov/Temp/1/MyClass.java:5:1: File contains tab characters (this is the first instance). /home/rivanov/Temp/1/MyClass.java:5:9: Missing a Javadoc comment. /home/rivanov/Temp/1/MyClass.java:6:11: Missing a Javadoc comment. /home/rivanov/Temp/1/MyClass.java:7:11: Missing a Javadoc comment. /home/rivanov/Temp/1/MyClass.java:8:11: Missing a Javadoc comment. /home/rivanov/Temp/1/MyClass.java:9:11: Missing a Javadoc comment. /home/rivanov/Temp/1/MyClass.java:10:11: Missing a Javadoc comment. /home/rivanov/Temp/1/MyClass.java:11:11: Missing a Javadoc comment. /home/rivanov/Temp/1/MyClass.java:12:11: Missing a Javadoc comment. /home/rivanov/Temp/1/MyClass.java:14:9: Missing a Javadoc comment. /home/rivanov/Temp/1/MyClass.java:16:9: Missing a Javadoc comment. /home/rivanov/Temp/1/MyClass.java:16:28: Parameter value should be final. /home/rivanov/Temp/1/MyClass.java:16:35: 'value' hides a field. /home/rivanov/Temp/1/MyClass.java:20:9: Missing a Javadoc comment. Audit done. 04:00 PM ~/Temp/1 $  ```","closed","","romani","2014-10-16T23:10:56Z","2014-12-26T05:15:17Z"
"","969","Fix enviroment dependent upper/lower case conversation","Conversation of Upper/Lower Case relies on Localization settings of the running Machine. A possible result of this situation is referenced in: http://sourceforge.net/p/eclipse-cs/bugs/295/  This problem can be reproduced from Command Line Interface with following commands (in Turkey):  git clone https://github.com/checkstyle/checkstyle.git cd checkstyle mvn clean package -Passembly java -Duser.language=tr -Duser.country=TR -jar target/checkstyle-6.6-SNAPSHOT-all.jar -c /google_checks.xml src/main/java  Setting up different localization during unit test setup and executing affected tests with different localisations would be a convenient way to test this problem. Currently tr_TR localization can be used to test this issue.  Good explanation of the problem: http://blog.thetaphi.de/2012/07/default-locales-default-charsets-and.html","closed","approved,","precoder","2015-04-23T18:04:14Z","2015-06-16T20:47:04Z"
"","896","Severity Name Upper/Lower Case conversation fix","Conversation of Upper/Lower Case relies on Localization settings of the running Machine. A possible result of this situation is referenced in: http://sourceforge.net/p/eclipse-cs/bugs/295/","closed","","precoder","2015-04-03T10:40:58Z","2015-04-23T17:35:46Z"
"","742","Contributors section on Project Team page in docs is unfinished","Contributors section on [Project Team](http://checkstyle.sourceforge.net/team-list.html) page looks unfinished.  My proposition is to either delete it or put the link to [contributors](https://github.com/checkstyle/checkstyle/graphs/contributors) list generated by Github. Any other ideas?","closed","","mkordas","2015-03-10T20:14:33Z","2015-03-15T20:51:58Z"
"","912","FindBugs: use all validation rules","continue fixing issue for the most full and strict configutation:  ```                    Max           Low           config/findbugs-exclude.xml          ```","closed","approved,","romani","2015-04-09T06:35:46Z","2015-04-14T05:32:20Z"
"","660","exception handling should be done by Listeners","consider use case from #654 .  Checkstyle is library and library should not reports with ERROR level it should deliver event to code that know what to do with events - Listeners. Listener could even suppress Exceptions and it is a right of Listener (I do not advice to do that but it should possible). Only Listener know how to report events(even expections).  It is required to analyse sources of all know plugins on the usage of Utils.getExceptionLogger() (https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java#L68) If nobody use it, we need to remove that logger at all.  Remove from whole code any ""printStackTrace"".","closed","approved,","romani","2015-02-21T00:23:10Z","2015-03-17T05:46:40Z"
"","382","HiddenField module does not account for static visibility from a closure","Consider the following input file:  ``` java class A {     final A field;     static void method(A field) {}     static class B {         void method(A field) {}     }     static Comparator COMP = new Comparator() {         @Override         public int compare(A field, A other) { //warn is here             return 0;         }     };     static Comparator createComp() {         return new Comparator() {             @Override             public int compare(A field, A other) { //warn is here                 return 0;             }         };     } } ```  with the following configuration:  ``` xml                         ```  It would be expected in this case that no warnings are issued, because the field `A.field` is not visible within any of the methods/closures specified.  However, the output with Checkstyle 6.1 is:  ``` Starting audit... /A.java:9:30: 'field' hides a field. /A.java:16:34: 'field' hides a field. Audit done. ```  The two closure methods are erroneously marked as being within the context of an `A` instance, triggering the error.","closed","approved,","henryptung","2014-11-22T07:31:36Z","2015-09-25T12:23:27Z"
"","922","deprecate Checker.setClassloader , replace with Checker.setClassLoader","Confusing to have methods com.puppycrawl.tools.checkstyle.Checker.setClassloader(ClassLoader) and com.puppycrawl.tools.checkstyle.TreeWalker.setClassLoader(ClassLoader)    BAD_PRACTICE    NM_CONFUSING    449-450     Low  That change will brake compatibility with checkstyle-maven-plugin, so it should be done only after plugin will switch to java7 version of checkstyle.  New method with correct name was added, old method is deprecated, will be removed as soon as maven plugin will switch to latest versions (that use java7). ##","closed","breaking compatibility,","romani","2015-04-11T22:07:48Z","2017-07-02T01:47:36Z"
"","341","Indentation check fails for switch statements","Configuration file:  ``` xml                                               ```  Java Class:  ``` java public class MyClass {     public int getValue(int value) {         switch (value) {             case 0: return ABC1;             case 1: return ABC2;             case 2: return ABC3;         }         return 0;     } } ```  Checkstyle warns with:  ``` MyClass.java:4: 'block' child have incorrect indentation level 12, expected level should be 16. MyClass.java:5: 'block' child have incorrect indentation level 12, expected level should be 16. MyClass.java:6: 'block' child have incorrect indentation level 12, expected level should be 16. ```  If I update the Java lines 4, 5, and 6 to have 16 spaces instead and then I get:  ``` MyClass.java:4: 'case' child have incorrect indentation level 16, expected level should be 12. MyClass.java:5: 'case' child have incorrect indentation level 16, expected level should be 12. MyClass.java:6: 'case' child have incorrect indentation level 16, expected level should be 12. ```  Thoughts?  Ideally some other module would let you know about need for a new line or something.","closed","","liutikas","2014-10-29T00:57:29Z","2014-11-17T22:30:24Z"
"","654","BooleanExpressionComplexity has a NPE on catch block","config:  ```                                ```  input file:  ``` public class A {      static {         try {             System.out.println(""a"");         } catch (IllegalStateException | IllegalArgumentException e) {             throw new RuntimeException(e);         }     } } ```  Output:  ``` java -jar checkstyle-6.4-SNAPSHOT-all.jar -c checkstyle_NPE.xml A.java Feb 19, 2015 8:00:14 AM com.puppycrawl.tools.checkstyle.TreeWalker processFiltered SEVERE: Exception occurred during the analysis of file A.java . java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck.visitToken(BooleanExpressionComplexityCheck.java:126)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:458)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:551)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:383)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:216)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:271)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:128) Starting audit... /var/tmp/A.java:0: warning: File does not end with a newline. /var/tmp/A.java:0: Got an exception - java.lang.NullPointerException Audit done. ```  Expected: no NPE, and explanation why stacktrace is unattached from  audit event as it is misleading and looks like 2 exceptions and the second is swallowed exception without details.","closed","approved,","romani","2015-02-19T16:06:17Z","2015-02-21T00:25:11Z"
"","662","Annotation Location Check, extended typo fixing, issue #585","Completed the fix of #585","closed","","alexkravin","2015-02-21T10:18:07Z","2015-02-21T23:38:30Z"
"","455","No Line Wrap Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-05T11:50:49Z","2014-12-11T14:14:14Z"
"","452","Empty Line Separator Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-05T11:46:52Z","2014-12-11T14:42:31Z"
"","451","White Space Around Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-05T11:46:11Z","2014-12-11T14:07:52Z"
"","449","Abbreviation As Word In Name Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-05T10:52:31Z","2014-12-11T14:07:20Z"
"","436","Strict Duplicate Code Check compilable UT inputs","compilable UT inputs","closed","","alexkravin","2014-12-03T12:36:38Z","2014-12-11T14:09:47Z"
"","428","One Top-Level Class Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-02T16:18:19Z","2014-12-11T14:13:42Z"
"","427","Hide Utility Class Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-02T16:18:06Z","2014-12-11T14:42:02Z"
"","426","Throws Count Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-02T16:17:53Z","2014-12-11T14:09:25Z"
"","425","Mutable Exception Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-02T16:10:11Z","2014-12-11T14:15:07Z"
"","424","SinglelineCommentListenerCheck compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-02T16:07:35Z","2014-12-11T14:10:00Z"
"","423","Block Comments Listener Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-02T16:05:58Z","2014-12-11T14:44:17Z"
"","422","Unnecessary Parentheses Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-02T15:42:51Z","2014-12-11T14:09:03Z"
"","421","Return Count Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-02T15:42:28Z","2014-12-11T14:12:26Z"
"","420","Parameter Assignment Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-02T15:42:09Z","2014-12-11T14:12:00Z"
"","418","Overload Methods Declaration Order Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-02T15:40:43Z","2014-12-11T14:13:13Z"
"","417","Nested If Depth Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-02T15:39:54Z","2014-12-11T14:14:39Z"
"","416","Nested For Depth Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-02T15:39:39Z","2014-12-11T14:14:52Z"
"","415","Multiple Variable Declarations Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-02T15:39:21Z","2014-12-11T14:15:40Z"
"","414","Modified Control Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-02T15:39:01Z","2014-12-11T14:16:19Z"
"","413","Illegal Instantiation Check java8 sources -> noncompilable res. folder","Compilable UT inputs","closed","","alexkravin","2014-12-02T15:38:42Z","2014-12-11T14:41:38Z"
"","411","Comments Test compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-02T15:37:47Z","2014-12-11T14:43:11Z"
"","406","InputClone used in several UTs, now compilable","Compilable UT inputs","closed","","alexkravin","2014-12-01T17:08:49Z","2014-12-11T14:41:17Z"
"","405","Default Comes Last Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-01T17:08:29Z","2014-12-11T14:42:48Z"
"","404","Illegal Catch Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-01T17:08:16Z","2014-12-11T14:41:51Z"
"","403","Operator Wrap Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-01T16:34:44Z","2014-12-11T14:13:24Z"
"","402","Modifer Order Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-01T16:34:23Z","2014-12-11T14:16:05Z"
"","401","Missing Switch Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-01T16:34:04Z","2014-12-11T14:16:34Z"
"","400","Magic Number Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-01T16:33:42Z","2014-12-02T11:32:42Z"
"","399","Right Curly Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-01T16:33:14Z","2014-12-11T14:12:15Z"
"","398","Empty Block Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-01T16:32:55Z","2014-12-11T14:42:42Z"
"","397","Redundant Modifier Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-01T16:32:41Z","2014-12-11T14:11:18Z"
"","396","Uncommented Main Check compilable UT input","Compilable UT inputs","closed","","alexkravin","2014-12-01T16:32:23Z","2014-12-11T14:09:14Z"
"","395","Input Whitespace (is used in many UTs) now compilable","Compilable UT inputs","closed","","alexkravin","2014-12-01T16:32:07Z","2014-12-11T14:08:19Z"
"","394","Missing Deprecated Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-01T16:31:51Z","2014-12-11T14:16:44Z"
"","392","Annotation Location Check compilable UT inputs","Compilable UT inputs","closed","","alexkravin","2014-12-01T16:30:02Z","2014-12-11T14:43:52Z"
"","463","Empty Line Separator Check compilable UT inputs","compilable UT input","closed","","alexkravin","2014-12-07T13:59:04Z","2014-12-11T14:42:36Z"
"","454","Member Name Check compilable UT inputs","Compilable UT input","closed","","alexkravin","2014-12-05T11:47:27Z","2014-12-11T14:39:16Z"
"","453","Method Name Check compilable UT inputs","Compilable UT input","closed","","alexkravin","2014-12-05T11:47:09Z","2014-12-11T14:39:08Z"
"","450","Separator Wrap Check compilable UT input","Compilable UT input","closed","","alexkravin","2014-12-05T11:45:51Z","2014-12-11T14:10:11Z"
"","391","Left Curly Check compilable UT input","Compilable UT input","closed","","alexkravin","2014-11-30T14:22:33Z","2014-12-11T14:39:24Z"
"","390","Covariant Equals Check compilable UT input","Compilable UT input","closed","","alexkravin","2014-11-30T14:06:29Z","2014-12-11T14:43:00Z"
"","389","AvoidEscapedUnicodeCharactersCheck compilable UT input","Compilable UT input","closed","","alexkravin","2014-11-30T13:46:54Z","2014-12-11T14:43:39Z"
"","693","IndentationCheck. Existance of comment affects violation message.","Comment inside array initialization braces affects violation message. Checkstyle config:  ``` xml                                               ```  Input file:  ``` java class ArrayInput { //indent:0 exp:0     void m() { //indent:4 exp:4         int[] array = {            1,2,3 //indent:11 exp:12 warn         }; //indent:8 exp:8     } //indent:4 exp:4 } //indent:0 exp:0 ```  Violation message: `ArrayInput.java:4: 'array initialization' child have incorrect indentation level 11, expected level should be 12.` Input file:  ``` java class ArrayInput { //indent:0 exp:0     void m() { //indent:4 exp:4         int[] array = { //comment !            1,2,3 //indent:11 exp:12 warn         }; //indent:8 exp:8     } //indent:4 exp:4 } //indent:0 exp:0 ```  Violation message: `ArrayInput.java:4: 'array initialization' child have incorrect indentation level 11, expected level should be one of the following: 12, 24, 26.` ##","open","indentation,","alex-zuy","2015-03-01T10:52:21Z","2016-12-14T18:17:06Z"
"","812","Fix command used to invoke Coveralls, issue #806","Command taken from https://github.com/trautonen/coveralls-maven-plugin#jacoco.  As the next step, probably we can simplify `travis` profile. I'm not sure why we have there `surefire-report` plugin.","closed","","mkordas","2015-03-17T06:31:29Z","2015-03-22T17:20:30Z"
"","804","Build does not work on Windows after introducing coverage constraints","Command prompt has [limitation](http://support.microsoft.com/pl-pl/kb/830473) of 8191 characters per command. On Windows Cobertura executes something like this:  ``` cmd.exe /X /C """"C:\Program Files\Java\jdk1.8.0_25\jre\bin\java"" -Xmx64m net.sourceforge.cobertura.check.Main --datafile C:\IdeaProjects\checkstyle\target\cobertura\cobertura.ser --branch 100 --line 100 --totalbranch 83 --totalline 89 --regex .*.checks.coding.SimplifyBooleanExpressionCheck:77:100 --regex .*.filters.SuppressionCommentFilter\$.*:84:87 --regex .*.filters.SuppressWithNearbyCommentFilter:87:80 --regex .*.checks.regexp.DetectorOptions:96:100 --regex .*.checks.AbstractOptionCheck:80:100 --regex .*.checks.metrics.JavaNCSSCheck:96:81 --regex .*.checks.annotation.MissingOverrideCheck:96:100 --regex ... ```  This command has around 12,000 characters, and `mvn verify` fails every time. Unfortunately I don't know how to fix it besides bumping majority of checks to 100%.","closed","","mkordas","2015-03-15T21:55:16Z","2015-03-20T22:19:56Z"
"","905","Warning during site build from JDepend project","command ""mvn clean site -Dlinkcheck.skip=true"" cause:  ``` [INFO] Relativizing decoration links with respect to project URL: http://checkstyle.sourceforge.net/ [INFO] Rendering site with org.apache.maven.skins:maven-default-skin:jar:1.0 skin. [INFO] Validation is switched on, xml input documents will be validated! [INFO] Skipped ""About"" report (maven-project-info-reports-plugin:2.8:index), file ""index.html"" already exists for the English version. [INFO] Skipped ""Surefire Report"" report (maven-surefire-report-plugin:2.18.1:report-only), file ""surefire-report.html"" already exists for the English version. [INFO] Skipped ""JDepend"" report (jdepend-maven-plugin:2.0:generate), file ""jdepend-report.html"" already exists for the English version. [INFO] Rendering 36 Doxia documents: 36 xdoc [WARNING]  was already defined in , ignored  in . [WARNING]  was already defined in , ignored  in . [WARNING]  was already defined in , ignored  in . [WARNING]  was already defined in , ignored  in . [WARNING]  was already defined in , ignored  in . [WARNING]  was already defined in , ignored  in . [WARNING]  was already defined in , ignored  in . [WARNING]  was already defined in , ignored  in . [WARNING]  was already defined in , ignored  in . ```  Warnings need to be resolved.","closed","approved,","romani","2015-04-08T15:29:26Z","2015-10-03T23:43:50Z"
"","923","Findbugs violation: api.TokenTypes do System.exit(...)","com.puppycrawl.tools.checkstyle.api.TokenTypes.() invokes System.exit(...), which shuts down the entire virtual machine  BAD_PRACTICE    DM_EXIT     3527    Low  We did a workaround for javadoc's TokenTypes, please see a solution there. But TokenTypes should not do System.exit()","closed","approved,","romani","2015-04-13T06:08:57Z","2015-05-15T22:32:43Z"
"","911","Findbugs violation: defines compareTo(LineColumn) and uses Object.equals()","com.puppycrawl.tools.checkstyle.api.LineColumn defines compareTo(LineColumn) and uses Object.equals()   BAD_PRACTICE    EQ_COMPARETO_USE_OBJECT_EQUALS  62-64   Medium  com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag defines compareTo(SuppressWithNearbyCommentFilter$Tag) and uses Object.equals()     BAD_PRACTICE    EQ_COMPARETO_USE_OBJECT_EQUALS  185-189     Medium  com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag defines compareTo(SuppressionCommentFilter$Tag) and uses Object.equals()   BAD_PRACTICE    EQ_COMPARETO_USE_OBJECT_EQUALS  189-193     Medium  that violations are temporary suppressed in config/findbugs-exclude.xml but it have to be investigated and resolved.","closed","approved,","romani","2015-04-09T06:15:10Z","2015-05-16T06:56:55Z"
"","54","wrong lineNumber in DetailAST for class with annotation","Code: Created: 2009-07-14 Creator: superbonbon  SF issue: 581  ``` package src;  @SomeTestAnnotations({ @SomeTestAnnotation(key = ""foo""),         @SomeTestAnnotation(key = ""bar"") }) /* {@inheritDoc} */ public class MyGenericClassBad { } ```  Picture of DetailAST: ![screenshotast](https://f.cloud.github.com/assets/812984/1519113/3fcfb322-4b4f-11e3-9589-c628e16620d3.png)  detected: lineNumber=3. expected: lineNumber for class have to be real - 6,","closed","approved,","romani","2013-11-12T04:02:46Z","2013-11-12T17:08:27Z"
"","740","Typo in violation message of ModifierOrder check","Code:  ``` java     /** Illegal order of annotation - must come first */     private @MyAnnotation2 void someMethod2()     {     } ```  Current (Checkstyle 6.4.1): '@MyAnnotation2' annotation modifier does not **preceed** non-annotation modifiers  Expected: '@MyAnnotation2' annotation modifier does not **precede** non-annotation modifiers","closed","approved,","mkordas","2015-03-10T14:56:21Z","2015-03-10T15:07:00Z"
"","92","ArrayIndexOutOfBoundsException if Indentation and FileContentsFolder are enabled","Code with a label and an empty 'default' clause in a switch statement gives error  ``` SqlSimpleParser.java:0: Got an exception - java.lang.ArrayIndexOutOfBoundsException: 2147483647 ```  Here is the SqlSimpleParser.java:  ``` java package org.eigenbase.sql.advise;  import java.util.*;  public class SqlSimpleParser {   private void consumeSelect(ListIterator iter, List outList) {   loop:     while (iter.hasNext()) {       switch (1) {       default:       }     }   } } ```  And here is `checkstyle.xml`:  ``` xml                                                ```  The test case is close to minimal -- if I take out any lines, the error stops happening.","closed","antlr,","julianhyde","2014-01-31T05:55:26Z","2014-11-24T06:06:12Z"
"","358","ArrayIndexOutOfBoundsException from Indentation check on openjdk sources","Code  ``` package javax.swing.plaf.synth;  public class SynthTabbedPaneUI {      protected Integer createLayoutManager() {             return new Integer() {                 public void doSmth() {                                 switch (1) {                                     default: //do nothing                                 }                 }             };     } } ```  Indentation check is used only with default configuration, result is:  ``` java.lang.ArrayIndexOutOfBoundsException: 2147483647     at com.puppycrawl.tools.checkstyle.api.FileText.get(FileText.java:346)     at com.puppycrawl.tools.checkstyle.api.FileContents.getLine(FileContents.java:259)     at com.puppycrawl.tools.checkstyle.api.Check.getLine(Check.java:189)     at com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler.checkExpressionSubtree(ExpressionHandler.java:420)     at com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler.checkChildren(ExpressionHandler.java:395)     at com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler.checkIndentation(BlockParentHandler.java:306)     at com.puppycrawl.tools.checkstyle.checks.indentation.MethodDefHandler.checkIndentation(MethodDefHandler.java:83)     at com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.visitToken(IndentationCheck.java:308)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:448)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:541)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:373)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:207)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:73)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:263) ```","closed","","romani","2014-11-13T06:27:32Z","2014-11-14T00:15:43Z"
"","889","Remove class Defn and move CHECKSTYLE_BUNDLE somewhere else","Class [Defn](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Defn.java) looks obsolete. What do you think about moving `CHECKSTYLE_BUNDLE` to `Checker` as `public static final` and importing it from other classes? Any other ideas? ##","open","discussion ongoing,","mkordas","2015-03-29T15:35:13Z","2016-12-14T18:16:41Z"
"","550","Issue #537 refactoring: remove copy-paste of messages from UTests","Chnages for: 1. annotation checks 2. BaseCheckTestSupport class 3. A few classes because of BaseCheckTestSupport refacoring @romani Could you please check if the approach is OK? If it is I'll updated other checks in the same way.","closed","","ychulovskyy","2014-12-27T21:53:29Z","2014-12-28T23:14:50Z"
"","644","Update Maven Plugins used by Checkstyle","Checkstyle uses some outdated plugins. We should update them. Here is result of [versions:display-plugin-updates](http://mojo.codehaus.org/versions-maven-plugin/display-plugin-updates-mojo.html) command:  ``` The following plugin updates are available:   org.antlr:antlr4-maven-plugin ............................ 4.3 -> 4.5   maven-antrun-plugin ...................................... 1.7 -> 1.8   maven-assembly-plugin ................................ 2.2.1 -> 2.5.3   maven-compiler-plugin .................................. 2.3.2 -> 3.2   maven-eclipse-plugin ..................................... 2.8 -> 2.9   maven-enforcer-plugin .................................. 1.3.1 -> 1.4   maven-gpg-plugin ......................................... 1.4 -> 1.6   maven-jar-plugin ....................................... 2.3.1 -> 2.5   maven-jxr-plugin ......................................... 2.4 -> 2.5   maven-shade-plugin ....................................... 1.4 -> 2.3   maven-surefire-plugin ................................ 2.17 -> 2.18.1   org.eluder.coveralls:coveralls-maven-plugin .......... 2.2.0 -> 3.0.1   org.jacoco:jacoco-maven-plugin  0.7.1.201405082137 -> 0.7.2.201409121644   The following plugins do not have their version specified:    maven-clean-plugin ........................ (from super-pom) 2.6.1    maven-deploy-plugin ....................... (from super-pom) 2.8.2    maven-install-plugin ...................... (from super-pom) 2.5.2    maven-resources-plugin ...................... (from super-pom) 2.7 ```  Are there any reasons to not update some of the above? Should I create separate pull request for each plugin?","closed","","mkordas","2015-02-14T14:58:53Z","2015-03-10T15:11:46Z"
"","134","Exception thrown when parsing numeric constant ""3.14_15F""","Checkstyle is unable to parse this line of code:  ```     float pi = 3.14_15F; ```  It appears the issue is caused by lines 157-159 in class com.puppycrawl.tools.checkstyle.checks.CheckUtils.  The ""Double.parseDouble"" method is being used to parse both floats and doubles.  I believe the error can be resolved by using ""Float.parseFloat"" and then casting the result to a double.  (FYI, I don't use the crazy number underscore syntax.  I found the issue while running CheckStyle against code in another project.)","closed","","jonathanbyrne","2014-04-22T00:27:10Z","2014-09-09T14:03:11Z"
"","4","checkstyle attempts to analyze nonJava file: src/test/resources/test.html","Checkstyle is trying to analyze some nonJava files in my Maven project.  **Trace**  ``` $ checkstyle -c checkstyle.xml -r src/ ... /Users/user/Desktop/src/jsoupcrawler/src/test/resources/test.html:4329: Line has trailing spaces. Audit done. ```  I tried explicitly constraining the extensions searched, but checkstyle is ignoring this configuration.  ``` $ cat checkstyle.xml ...             ... ```  I suspect that `-r` is somehow ignoring both the Checkstyle default file name patterns, as well as the XML configuration fileExtension patterns.  **System**  ``` $ specs brew:checkstyle java os Specs:  specs 0.4 https://github.com/mcandre/specs#readme  brew list checkstyle /usr/local/Cellar/checkstyle/5.6/bin/checkstyle /usr/local/Cellar/checkstyle/5.6/INSTALL_RECEIPT.json /usr/local/Cellar/checkstyle/5.6/libexec/checkstyle-5.6-all.jar /usr/local/Cellar/checkstyle/5.6/libexec/sun_checks.xml /usr/local/Cellar/checkstyle/5.6/LICENSE /usr/local/Cellar/checkstyle/5.6/README  mvn --version Apache Maven 3.0.4 (r1232337; 2012-01-17 03:44:56-0500) Maven home: /usr/share/maven Java version: 1.6.0_51, vendor: Apple Inc. Java home: /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home Default locale: en_US, platform encoding: MacRoman OS name: ""mac os x"", version: ""10.8.4"", arch: ""x86_64"", family: ""mac""  echo $CLASSPATH   echo $JAVA_HOME /Library/Java/Home  java -version java version ""1.6.0_51"" Java(TM) SE Runtime Environment (build 1.6.0_51-b11-457-11M4509) Java HotSpot(TM) 64-Bit Server VM (build 20.51-b01-457, mixed mode)  system_profiler SPSoftwareDataType | grep 'System Version'       System Version: OS X 10.8.4 (12E55) ```","closed","high demand,","apennebaker","2013-09-24T15:10:31Z","2015-01-23T04:54:49Z"
"","473","remove AbstractTypeAwareCheck from Chekstyle","Checkstyle is not type aware tool, so till we implement smth stable in that area of validation - all Checks derived from AbstractTypeAwareCheck should be removed. Example of really buggy Check: RedundantThrowsCheck.java","closed","approved,","romani","2014-12-08T06:41:24Z","2015-07-06T04:36:51Z"
"","472","Want to use other letter for end of sentence.","Checkstyle is checking first sentence. But, this check is mismatch in Japanese. Because, We don't use period for end of line, instead of ""。"". Perhaps, I see, to use a title like a sentence(not have period).  I want to use other letter of setting from option.  By the way, I set to disable ""Summary Javadoc"", but I got warning of ""First sentence should be present."".","closed","approved,","teaplanet","2014-12-08T06:40:40Z","2014-12-19T17:31:56Z"
"","354","[Feature request] Add an option to forbid C++ method argument indentation.","Checkstyle indentation module should have an option to forbid C++ method argument indentation.  Here is an example of a failing class:  ``` java public class MyClass {     public MyClass(int appleCount,                    int bananaCount,                    int pearsCount) {     } } ```  Checkstyle config used:  ``` xml                                               ```  Expected warnings:  ``` MyClass.java:3: Method parameter has incorrect indentation level 19, expected level should be 8. MyClass.java:4: Method parameter has incorrect indentation level 19, expected level should be 8. ```  Expected correct code formatting:  ``` java public class MyClass {     public MyClass(int appleCount,         int bananaCount,         int pearsCount) {     } } ``` ##","open","indentation,","liutikas","2014-11-07T18:14:48Z","2021-03-11T21:38:01Z"
"","339","expecting EOF error when parsing methodReference from a nested class","Checkstyle fails to parse the following testcase:  ``` import java.util.function.Supplier;  public static class InputMethodReferencesNestedTest {   public static class SomeClass {     public static class Nested {       public Nested() {       }     }   }    public  void methodName(V value) {     Supplier passes = SomeClass.Nested::new;     Supplier fails = SomeClass.Nested::new;   } } ```  It fails to parse the line `Supplier fails = SomeClass.Nested::new;` and gives the error `unexpected token: >` ... `TreeWalker: Got an exception - expecting EOF, found '}'`","closed","","cheister","2014-10-26T22:34:01Z","2014-11-23T22:18:23Z"
"","904","Java8 type-use annotations on arrays not supported","Checkstyle fails to parse constructs like:  ``` java import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target;  import java.util.Set;  public class CheckstyleBugs {     private String @Fancy [] array; // !!!     Set set;       // !!! }  @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE_USE) @interface Fancy { }  ```  giving ""unexpected token"" errors.","closed","antlr,","metlos","2015-04-07T20:56:26Z","2016-02-10T14:36:53Z"
"","570","Allow basedir property of Checker module to be set to NULL.","Checkstyle configurations may provide a value for the basedir property of the Checker module. However this setting makes no sense in the context of the eclipse-cs plugin (reported file names must always be relative to the project), hence the plugins sets it to NULL in order to work with configurations where this is specified otherwise.  However, currently there is no clean way to do this since Checker#setBasedir does not allow a NULL value being passed. Right now I have a ugly reflection based hack in eclipse-cs to force the underlying attribute to NULL.  I'd like it much better if I could just invoke checker.setBasedir(null).","closed","","lkoe","2015-01-07T22:20:12Z","2015-01-16T17:04:01Z"
"","924","DeclarationOrder check enforces order that is not possible","Checkstyle 6.5 with [DeclarationOrder](http://checkstyle.sourceforge.net/config_coding.html#DeclarationOrder) enabled:  ``` xml                      ```  fails on the following code:  ``` java class Sample {     private static final String COMMON_PART = ""common_part"";     public static final String FIRST = COMMON_PART + ""1""; // DeclarationOrder: Variable access definition in wrong order.     public static final String SECOND = COMMON_PART + ""2""; // DeclarationOrder: Variable access definition in wrong order. } ```  When attempting to move `COMMON_PART` as the last member to fix Checkstyle, then code doesn't compile anymore with `Illegal forward reference` error.","closed","approved,","mkordas","2015-04-13T06:15:46Z","2016-02-07T13:35:52Z"
"","132","Inappropriate method call child indentation reported","Checkstyle 5.7 never gets happy about the indentation of the following code, reporting that the line `method().foo = ""bar"";` is never properly indented with a message `method call child at indentation level 8 not at correct indentation, 12`. If you move it to 12, it says `method call child at indentation level 12 not at correct indentation, 8`. (I have checked from IDEA IntelliJ's CheckStyle IDEA plugin, as well as from EclipseCS)  It looks similar to issue #129, since it is not precisely the same, I had prefer a separate issue. Hope this helps.  Here is a minimal valid java:  ``` java public class Test {     private static final class C {         private String foo;     }      C method() {         return new C();     }      void call() {         method().foo = ""bar"";     } } ```  But this is enough to reproduce (not valid java, however)  ``` java public class Test {     void call() {         method().foo = ""bar"";     } } ```  The config file is  ``` xml                ```","closed","approved,","dgervalle","2014-04-16T12:35:08Z","2014-10-15T23:31:37Z"
"","759","Exception cause is ignored by setupChild","Checker:setupChild ignores the cause if the catched exception is already a CheckstyleException f.e. thrown by PackageObjectFactory:createModule  The cause is wrapped via that exception:  ``` throw new CheckstyleException(""Unable to instantiate "" + name, ex2); ```  But in the Checker only the message is extracted:  ```         catch (final Exception ex) {             // TODO i18n             throw new CheckstyleException(""cannot initialize module "" + name                     + "" - "" + ex.getMessage(), ex);         } ```  There should be a type check for CheckstyleException or a general try to retrieve the cause.  The same for PackageObjectFactory:doMakeObject:  ```     private Object doMakeObject(String name)         throws CheckstyleException     {         //try name first         try {             return createObject(name);         }         catch (final CheckstyleException ex) {             ; // keep looking         }          //now try packages         for (String packageName : packages) {              final String className = packageName + name;             try {                 return createObject(className);             }             catch (final CheckstyleException ex) {                 ; // keep looking             }         }          throw new CheckstyleException(""Unable to instantiate "" + name);     } ```  None of these exceptions is logged or somehow handled ... You will not determine why your Check can't be loaded so easily.","closed","approved,","CSchulz","2015-03-12T12:45:10Z","2015-09-11T15:50:08Z"
"","43","JavadocMethod: Javadoc Not Detected Above Multiline Comments","Check: http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod  When programming in Java with JML annotations (http://www.jmlspecs.org/), the typical convention is to place the JML annotations - which are, for the purposes of any non-JML-aware tools, specially formatted Java comments - directly above the method they are annotating.   A Javadoc comment also needs to be placed above the method it is documenting. Most Javadoc processing tools (including ""javadoc"" itself with the standard doclet) have no problem ignoring non-Javadoc comments that occur between the Javadoc comment for a method and the method declaration. However, Checkstyle will fail to detect the Javadoc comment for a method if there is a multi-line (but not a single-line) comment between the Javadoc comment and the method declaration. For example, Checkstyle correctly detects the Javadoc in this case:  ``` /**  * A Javadoc comment.  */ //@ A JML Annotation public void foo() {} ```  but not in this case:  ``` /**  * A Javadoc comment.  */ /*@ A JML Annotation */ public void foo() {}  ```  It would be very helpful for Checkstyle to be able to detect such Javadoc comments.   Examples of JML JavaDoc: https://sourceforge.net/apps/trac/jmlspecs/browser/TeachingMaterials/trunk/CAV2007Tutorial/examples/Actor.java?rev=2675 (https://sourceforge.net/apps/trac/jmlspecs/wiki/TeachingMaterials) ##","open","javadoc,","dmzimmerman","2013-10-31T01:06:04Z","2020-04-22T07:42:28Z"
"","555","create project to test changes of Checkstyle by snapshot report compare","changes to Checkstyle sometimes cause a lot of regression problems.  We need to have project (shell/bash is OK) to download sertain list of project by exact stable version, run latest checkstyle for particular Check or some configuration to generate plain text reports and compare them with reports of previous launch. After manual compare and approval of changes , admin push new reports to remote for future launches.","closed","approved,","romani","2014-12-30T01:55:24Z","2016-03-23T13:56:50Z"
"","817","Use Cobertura instead of JaCoCo for Coveralls, fixes #806","Changes done according to [coveralls-maven-plugin guide](https://github.com/trautonen/coveralls-maven-plugin#cobertura). Profile `travis` was deleted, as it is unnecessary when Cobertura is used.","closed","","mkordas","2015-03-18T21:48:14Z","2015-03-22T17:20:14Z"
"","901","Update PMD to 5.3.0","Changelog available at http://pmd.sourceforge.net/pmd-5.3.0/overview/changelog.html","closed","","mkordas","2015-04-06T22:22:42Z","2015-04-09T19:44:00Z"
"","25","Unable to use the fileExtensions property","Change default sun_checks.xml to have fileExtensions http://checkstyle.sourceforge.net/config.html#TreeWalker  ```                ```  Prepare folder with pdf file - /home/user/Books. Execute:  ``` java -cp file:///home/user/java/git-others/checkstyle/target/checkstyle-5.7-SNAPSHOT-all.jar com.puppycrawl.tools.checkstyle.Main -c file:///home/user/java/git-others/checkstyle/sun_checks.xml -r /home/user/Books ```  Output: .... /home/user/Books/book-of-vaadin-pocket.pdf:157179: Line has trailing spaces. ...  Created: 2012-12-13 Creator: Flavien Huynh  SF ticket: 691 Reported that it possible to get OutofMemoryError if files are big.","closed","approved,","romani","2013-10-26T02:51:42Z","2015-01-25T16:08:28Z"
"","374","Mapping LocalizedMessage to example that provides details about solution","By implementing AuditEvent I have access to details about the violation stored in LocalizedMessage. Now I would like to get access to details about solution which are provided by configuration files - how to fix the problem. Something like this  ```            Checks that the clone method is not overridden from the    Object class.             Rationale: The clone method relies on strange, hard to follow rules that    are difficult to get right and do not work in all situations.    In some cases, either a copy constructor    or a static factory method can be used instead of the clone method    to return copies of an object.    For more information on rules for the clone method and its issues, see Effective Java:    Programming Language Guide First Edition by Joshua Bloch    pages 45-52.             This check is almost exactly the same as the {@link NoFinalizerCheck}        ```  How can I having reference to LocalidedMessage get details as above or provide direct link to rules at http://checkstyle.sourceforge.net/config_coding.html ?","closed","","damianszczepanik","2014-11-17T21:10:49Z","2014-11-18T05:13:52Z"
"","733","Fix HiddenField ignoreSetter propery not working for one letter fields, issue #730","Bug was introduced with [these changes](https://github.com/checkstyle/checkstyle/commit/6784e5bcd5baa6b5086bf8b63709856d685a74c8#diff-bd2095a110f21178164b052b84a3eb32R373).  Method `capitalize()` since Checkstyle 6.3 didn't work for one letter input.","closed","","mkordas","2015-03-09T12:54:43Z","2015-03-10T06:22:27Z"
"","247","Left curly update. Force line break","Bug in option EOL. Code example:  if (flag) { System.err.println(""it is ok.""); } //        ^ '{' should have line break after  But now such code is valid. It has to be fixed.   Check config: <module name=""LeftCurly""/>","closed","","maxvetrenko","2014-08-12T20:23:15Z","2014-08-13T21:16:04Z"
"","322","Issue #49. Newline in html attribute.","Bug fix. Parser fails when html attribute has newline symbol. For example: -","closed","","baratali","2014-10-22T13:27:42Z","2014-10-22T14:05:57Z"
"","735","Update antlr4 library from 4.3 to 4.5, issue #644","Both runtime library and Maven plugin have to be updated at the same time, so property with version was introduced.","closed","","mkordas","2015-03-10T00:16:57Z","2015-03-10T01:18:35Z"
"","689","Visibility Modifier Check, ignore annotated fields","Based on Pull #584  Requested points to fix:  ``` Some items to fix before merge:  1)  mIgnoredAnnotationFormat please make it static final private.  2)  mIgnoreAnnotated mIgnoredAnnotationPattern too much class members, please keep only mIgnoredAnnotationPattern with default value from mIgnoredAnnotationFormat, get exp should be applied each time.  3)  throw new ConversionException(""unable to parse "" + aPattern, e); rethrow to top, Check do not know what to do on failure, it is business of top level  4)  final DetailAST firstIgnoredAnnotation = AnnotationUtility.containsMatchingAnnotation(aAST, getIgnoredAnnotationPatternRegex()); final boolean hasIgnoredAnnotation = mIgnoreAnnotated && firstIgnoredAnnotation != null; please make it like a function and move after "" !""private"" "" condition , the easiest conditions go first.  5)  public static DetailAST containsMatchingAnnotation(final DetailAST aAST, Pattern aAnnotationPattern) please move that method to check as static function. Changes to API package is not allowed. I am sorry that we have utils in API, we will fix that soon. Additionally please use 1 return point from method.  6)  throw new NullPointerException(""the aAST is null""); please never throw NPE, use IllegalAgrument ```  1) Done  2) Only 2 fields are remained  3) Rethrowing to top  4) This code chunk is in separate boolean method and does not complex condition  5, 6) private static in Check's class, has one return point, no throwing of NPE, IllegalArgument used instead  P.S.  Something strange with coverage report as introduced code is fully-covered except for throwing exceptions","closed","","alexkravin","2015-02-27T11:05:03Z","2015-03-08T01:15:09Z"
"","151","RedundantThrows fails for nested exception on base class","based on http://sourceforge.net/p/checkstyle/bugs/630/  It's still a problem in Checkstyle 5.7  ---  Steps to reproduce:  `1. Download and unzip Checkstyle 5.7 and create test project directory structure  ``` unzip ./checkstyle-5.7-bin.zip mkdir ./test-checkstyle mkdir ./test-checkstyle/src/ mkdir ./test-checkstyle/src/test/ mkdir ./test-checkstyle/bin/ ```  `2. Create the following files:  ./test-checkstyle/src/test/package-info.java  ``` java /**  * placeholder comment.  */ package test;  ```  ./test-checkstyle/src/test/Base.java  ``` java package test;  import java.io.IOException;  /**  * placeholder comment.  */ public class Base {     /**      * placeholder comment.      */     public class NestedIOException extends IOException {         /**          * placeholder comment.          */         public NestedIOException() {             super();         }     }      /**      * placeholder comment.      */     public static class OtherNestedException extends Exception {         /**          * placeholder comment.          */         public OtherNestedException() {             super();         }     } }  ```  ./test-checkstyle/src/test/Derived.java  ``` java package test;  /**  * placeholder comment.  */ public class Derived extends Base {     /**      * placeholder comment.      * @throws NestedIOException placeholder comment.      * @throws OtherNestedException placeholder comment.      */     public final void otherMethod() throws NestedIOException,             OtherNestedException {         if (System.currentTimeMillis() > 1) {             throw new NestedIOException();         }         throw new OtherNestedException();     } }  ```  `3. Compile test project  ``` javac -sourcepath ./test-checkstyle/src/ -d ./test-checkstyle/bin/ ./test-checkstyle/src/test/* ```  `4. Run Checkstyle  ``` java -cp ./test-checkstyle/bin/:./checkstyle-5.7/checkstyle-5.7-all.jar com.puppycrawl.tools.checkstyle.Main -c ./checkstyle-5.7/sun_checks.xml -r ./test-checkstyle/src/ ```  Actual output:  ``` Starting audit... /tmp/./test-checkstyle/src/test/Derived.java:12:44: Unable to get class information for NestedIOException. /tmp/./test-checkstyle/src/test/Derived.java:13:13: Redundant throws: 'OtherNestedException' listed more then one time. /tmp/./test-checkstyle/src/test/Derived.java:13:13: Unable to get class information for OtherNestedException. Audit done. ```  Expected output:  ``` Starting audit... Audit done. ```","closed","","rfcom","2014-05-22T11:28:37Z","2015-01-23T04:35:24Z"
"","605","api changes: make getAcceptableTokens/getRequiredTokens/getDefaultTokens methods as abstract in Check.java","based on discussion at #342  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java#L77 https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java#L90  should become abstract method to force Check clearly define how it should work, do not expect that user of Checkstyle clearly understand terms ""token"" that could be set in each Check. Examples: https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml#L39 https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml#L57 https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml#L93 .....  update http://checkstyle.sourceforge.net/writingchecks.html to show in examples what methods should be overriden too. ##","closed","breaking compatibility,","romani","2015-01-29T23:49:22Z","2017-08-12T09:20:43Z"
"","388","Make all input files compilable","base on workflow of https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/195 lets make Inputs as compilable","closed","","romani","2014-11-29T15:33:14Z","2014-12-10T22:00:48Z"
"","895","NeedBracesCheck: allowSingleLineStatement allow to miss braces multi-line statements","Base on liutikas report, from #300 .  Setting allowSingleLineStatement to true makes it so checkstyle 6.5 does not complain about:  if (blah) {   return 1; } else    return 2;  It should complain that else statement does not have curly braces.","closed","high demand,","romani","2015-04-03T06:06:04Z","2015-05-24T22:29:10Z"
"","945","Apply all Checks over Checkstyle code","Base on description of https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2015-Project-Ideas#project-name-practice-what-you-preach  file config/checkstyle_checks.xml contains all Check , but some of them are commented out or suppressed by ``  Todo: 1) uncomment each of Check, provide configuration to each Check, resolve violations caused by it. 2) the most complicated cases could be suppressed by separate config file. 3) If some Check is inappropriate for our code - It might be reasonable to run some checks in mode `` as that is good test for Exceptions.  4) It might be useful to enforce all Checks as soon as possible by wide suppression file creation and then tackle each Check violations separately.  If Check generate too much false-positives, all his unresolvable violations should be suppressed, and appropriate issue have to be created to let it be used over Checkstyle code (that should be discussed with Admins).","closed","approved,","romani","2015-04-18T13:43:37Z","2015-09-03T13:11:54Z"
"","722","Automate code coverage validation","base on decision and solution of https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/311 we need to enforce best possible code coverage and  do not allow to reduce it. Validation should be automated and restricted during build process the same was as we did in sevntu.checkstyle project. Each Check should have in pom.xml it own current coverage for now, but ultimate target is 100%, after each update in Check , coverage should grow.","closed","approved,","romani","2015-03-06T15:03:14Z","2015-03-20T21:28:42Z"
"","125","Can't use ${workspace_loc} in cachefile location","At my employer we're distributing a common checkstyle configuration to all developer PCs. We activated the usage of a cachefile in the TreeWalker but this file is persisted in the installation directory of eclipse.  Since the developers use different workspaces (different branches) with the same eclipse installation this is quite awkward.  I tried to change the location of the cachefile to ${workspace_loc}/cachefile but this causes an Exception: Error Mon Mar 24 13:43:10 CET 2014 Errors running builder 'Checkstyle Builder' on project 'xxx.automation.app'.  org.eclipse.core.runtime.CoreException: unable to parse configuration stream - Property ${workspace_loc} has not been set     at net.sf.eclipsecs.core.builder.CheckstyleBuilder.handleBuildSelection(CheckstyleBuilder.java:307)     at net.sf.eclipsecs.core.builder.CheckstyleBuilder.build(CheckstyleBuilder.java:171)     at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:733)     at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:206)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:246)     at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:299)     at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:302)     at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:358)     at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:381)     at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:143)     at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:241)     at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53) Caused by: net.sf.eclipsecs.core.util.CheckstylePluginException: unable to parse configuration stream - Property ${resource_loc:/} has not been set     at net.sf.eclipsecs.core.util.CheckstylePluginException.rethrow(CheckstylePluginException.java:66)     at net.sf.eclipsecs.core.util.CheckstylePluginException.rethrow(CheckstylePluginException.java:77)     at net.sf.eclipsecs.core.builder.Auditor.runAudit(Auditor.java:166)     at net.sf.eclipsecs.core.builder.CheckstyleBuilder.handleBuildSelection(CheckstyleBuilder.java:300)     ... 13 more Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: unable to parse configuration stream - Property ${resource_loc:/} has not been set     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:410)     at net.sf.eclipsecs.core.builder.CheckerFactory.createCheckerInternal(CheckerFactory.java:283)     at net.sf.eclipsecs.core.builder.CheckerFactory.createChecker(CheckerFactory.java:140)     at net.sf.eclipsecs.core.builder.Auditor.runAudit(Auditor.java:142)     ... 14 more Caused by: org.xml.sax.SAXException: Property ${resource_loc:/} has not been set     at com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader.startElement(ConfigurationLoader.java:158)     at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:509)     at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:182)     at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator.emptyElement(XMLDTDValidator.java:766)     at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:355)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2770)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:606)     at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:117)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:510)     at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:848)     at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:777)     at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)     at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1213)     at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:649)     at com.puppycrawl.tools.checkstyle.api.AbstractLoader.parseInputSource(AbstractLoader.java:98)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.parseInputSource(ConfigurationLoader.java:273)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:397)     ... 17 more  Is this a bug or am I doing something wrong?","closed","","theqaguy","2014-03-24T12:48:16Z","2014-03-26T05:50:59Z"
"","75","no site documentation for UnusedLocalVariableCheck","At http://checkstyle.sourceforge.net/availablechecks.html this check  https://github.com/checkstyle/checkstyle/blob/master/contrib/usage/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/UnusedLocalVariableCheck.java  is not present.  This Check have to appear in web site, then open issue against Eclipse-CS to register this check.","closed","approved,","romani","2013-12-08T06:20:38Z","2015-02-03T16:09:20Z"
"","926","MagicNumber: IgnoreAnnotations not working on negative numbers","Assigned to : @precoder   Version tested: checkstyle 6.5  Example configuration file:  ```                                                      ```  Working with:  ``` package com.whatever.something.test;  import javax.validation.constraints.Min;  import org.hibernate.validator.constraints.NotBlank;  public class TestClass {      private static final long serialVersionUID = 1L;      @NotBlank     private String id;      @Min(100)     private int value; } ```  ``` PS C:\dev\Apps\checkstyle> java -jar .\checkstyle-6.5-all.jar -c .\MagicNumber-annotation-checkstyle.xml .\TestClass.java Starting audit... Audit done. ```  Not working with:  ``` package com.whatever.something.test;  import javax.validation.constraints.Min;  import org.hibernate.validator.constraints.NotBlank;  public class TestClass {      private static final long serialVersionUID = 1L;      @NotBlank     private String id;      @Min(-100)     private int value; } ```  ``` PS C:\dev\Apps\checkstyle> java -jar .\checkstyle-6.5-all.jar -c .\MagicNumber-annotation-checkstyle.xml .\TestClass.java Starting audit... C:\dev\Apps\checkstyle\.\TestClass.java:14:10: warning: '-100' is a magic number. Audit done. ```","closed","approved,","bananetomate","2015-04-13T17:28:55Z","2015-05-11T19:54:55Z"
"","840","Introduce util to test private constructors in Checkstyle codebase","As we pursue to 100% code coverage in Checkstyle, some piece of code to invoke private constructors by reflection is necessary.","closed","approved,","mkordas","2015-03-22T21:51:10Z","2016-01-03T02:13:55Z"
"","393","Package Annotation Check compilbale UT input","As these inputs were incompilable, I've deleted them and also deleted UTs with these incompilable inputs, one UT remaining.","closed","","alexkravin","2014-12-01T16:31:23Z","2014-12-11T14:13:03Z"
"","625","Use Collections.addAll() instead of adding elements individually","As per javadoc, `Collections.addAll()` may be significantly faster than adding elements individually using a for loop.","closed","miscellaneous,","mkordas","2015-02-08T20:03:54Z","2016-03-18T15:52:35Z"
"","677","GenericWhitespace check does not recognize java 8 method references","As per http://checkstyle.sourceforge.net/config_whitespace.html, the right angle bracket should not be followed by whitespace when adjacent to a method name. In checkstyle 6.3, using a method reference with generics results in the following error.    '>' is followed by an illegal character.  Issue can be reproduced using the GenericWhitespace check on the following line.  ``` final Supplier function = Optional::empty; ```  while it passes on  ``` final Supplier function = Optional:: empty; ```  Which I do not think is the intended behavior.","closed","approved,","Zingler","2015-02-23T19:42:46Z","2015-03-04T06:49:45Z"
"","558","Check compatibility of CheckStyle with CS extension","As new versions of CS are released, extensions provided by third parties may or may not function any more. This is only natural and inevitable, because CS evolves along with the Java language, and new language elements (e.g. lambdas in Java 8) must be represented in CS's AST.  Because it is difficult, if not impossible, for third-party extensions to predict with which future versions of CS they will be compatible with, I propose the following: - CS establishes and keeps a three-number versioning scheme, like ""compatibility.features.bugfixes"". Examples: Additional checks are ""feature""; any change to the AST is ""compatibility"". - Either the extension or CS check the compatibility of them two. My preference would be that each extension exposes to CS the CS version range with which it is (hopefully) compatible. Example: A range 5.7...5.999, means ""I need the feature that was introduced in 5.7, and I will most probably not be compatible with versions >= 6 because I use the AST heavily"".","closed","","aunkrig","2014-12-30T14:44:52Z","2014-12-30T17:22:05Z"
"","62","SuppressionsLoader should use thread context class loader","As I can see SuppressionsLoader has been rewritten in 5.7 to properly handle URLs including jar file URLs but there still is a problem loading files from the classpath.  To properly load a suppressions file from classpath, `Thread.currentThread().getContextClassLoader()` needs to be used instead of `SuppressionsLoader.class.getClassLoader()` (see line 162).  Without this change checkstyle was unable to load the suppressions file from class path (via SuppressionFilter in xml config) when being executed by maven. ##","open","discussion ongoing,","moldowan","2013-11-15T17:54:36Z","2017-05-17T15:41:10Z"
"","564","Exclude option for Checker","As exception happen due to new java grammar possibilities or logic problem in Check , use have no ability to do workaround by suppression, the only way is switch OFF checkstyle or rewrite java file to avoid exception.  TODO: we need to introduce new mechnism of ""exclude"" for particular source files by path or canonical name, it would be also good (as option) to exclude certain Check from execution on file. We need to think about referencing a Exclude file from configuration as it was done for Suppression. ##","closed","approved,","romani","2015-01-06T00:07:10Z","2017-01-10T23:59:42Z"
"","705","Migration Guide in Release Notes","Anyone who would blindly update Checkstyle from 6.3 to 6.4 without adding [EmptyCatchBlock](http://checkstyle.sourceforge.net/config_blocks.html#EmptyCatchBlock) check, would loose validation for catch blocks entirely. I think we should introduce something like _Migration Guide_ to give people instructions how to safely update.  What do you think guys?","closed","","mkordas","2015-03-01T16:35:11Z","2015-09-10T20:52:29Z"
"","105","WhitespaceAroundCheck: fix for anonymous inner class","Anonymous inner class syntax is not well recognized by WhitespaceAroundCheck, which causes false-positives:  Example:  ``` java new Thread() { public void run() {  // ...  } }.start(); Example 2 (very common in Gui code):  new SwingWorker() { public void construct() {  // ...  } }.start(); ```  ==> wrong error ""missing a space after '}'  The following correction should work and fix it:  in WhitespaceAroundCheck, line 256, instead of:  ``` java && !((type == TokenTypes.RCURLY) && ((nextChar == ')') || (nextChar == ';') || (nextChar == ',')))) ```  use the following:  ``` java && !((type == TokenTypes.RCURLY) && ((nextChar == ')') || (nextChar == ';') || (nextChar == ',') || (nextChar == '.')))) ```","closed","","daniilyar","2014-02-09T01:20:25Z","2014-09-14T14:20:35Z"
"","581","Exceptions from MessageFormat aren't caught","An invalid pattern in a message element of the config file (which is after all user input) causes the JRE's MessageFormat to throw an IllegalArgumentException when encountered, which is never caught in Checkstyle.  Sample config and code:  ```                                   ```  (Note the use of `{}` instead of the escaped form `'{}'`. MessageFormat's counterintuitive syntax doesn't exactly help.)  ``` class Test {   public static void main(String[] args) {     System.out.println(""a""+1);   } } ```  Actual result:  ``` Exception in thread ""main"" java.lang.IllegalArgumentException: can't parse argument number:      at java.text.MessageFormat.makeFormat(MessageFormat.java:1429)     at java.text.MessageFormat.applyPattern(MessageFormat.java:479)     at java.text.MessageFormat.(MessageFormat.java:362)     at java.text.MessageFormat.format(MessageFormat.java:840)     at com.puppycrawl.tools.checkstyle.api.LocalizedMessage.getCustomMessage(LocalizedMessage.java:296)     at com.puppycrawl.tools.checkstyle.api.LocalizedMessage.getMessage(LocalizedMessage.java:262)     at com.puppycrawl.tools.checkstyle.api.AuditEvent.getMessage(AuditEvent.java:109)     at com.puppycrawl.tools.checkstyle.DefaultLogger.addError(DefaultLogger.java:101)     at com.puppycrawl.tools.checkstyle.Checker.fireErrors(Checker.java:517)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:280)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:129) Caused by: java.lang.NumberFormatException: For input string: """"     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)     at java.lang.Integer.parseInt(Integer.java:592)     at java.lang.Integer.parseInt(Integer.java:615)     at java.text.MessageFormat.makeFormat(MessageFormat.java:1427)     ... 10 more ```  Expected result: The normal output should appear normally (as much as possible), since chances are this isn't the end user's fault. I suggest printing the raw message in place, since that's better than showing nothing or an error message; and then warning of the error in the config file elsewhere.  ``` Starting audit... ERROR: Invalid message syntax in configuration file, line 11: can't parse argument number /path/to/Test.java:3:27: warning: '+' is not preceded with whitespace. /path/to/Test.java:3:28: warning: WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3) Audit done. ```","closed","","andreubotella","2015-01-15T02:52:16Z","2015-01-16T06:21:28Z"
"","385","Create ParseErrorMessage if error message is null.","Also added comments for a few methods.","closed","","baratali","2014-11-24T21:38:44Z","2014-12-03T07:10:13Z"
"","244","Update for MemberNameCheck","allow testing in interfaces, anonymous classes and enums","closed","","maxvetrenko","2014-08-12T12:38:28Z","2014-08-12T18:28:26Z"
"","752","Remove unnecessary semicolons to fix PMD violations, issue #744","All violations of rule [EmptyStatementNotInLoop](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/empty.html#EmptyStatementNotInLoop) are fixed.   Empty statements sometimes were used to trick Checkstyle to allow empty blocks. While generally empty blocks are bad practice, there are too many of them in Checkstyle code to fix them in scope of this commit. Instead, [EmplyBlock](http://checkstyle.sourceforge.net/config_blocks.html#EmptyBlock) setting was changed to allow empty block when there is comment inside it for Checkstyle codebase.","closed","","mkordas","2015-03-11T21:28:07Z","2015-04-27T21:14:57Z"
"","774","Remove unused private method, issue #744","All violations of PMD rule [UnusedPrivateMethod](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/unusedcode.html#UnusedPrivateMethod) are fixed.","closed","","mkordas","2015-03-14T00:21:45Z","2015-04-27T21:14:54Z"
"","773","Remove unused private field, issue #744","All violations of PMD rule [UnusedPrivateField](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/unusedcode.html#UnusedPrivateField) are fixed.","closed","","mkordas","2015-03-14T00:21:33Z","2015-03-23T18:31:39Z"
"","775","Combine nested if statements, issue #744","All violations of PMD rule [CollapsibleIfStatements](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/basic.html#CollapsibleIfStatements) are fixed.","closed","","mkordas","2015-03-14T00:31:52Z","2015-04-27T21:14:52Z"
"","838","Remove unwritten field, issue #778","All violations of Findbugs rule [UwF: Unwritten field](http://findbugs.sourceforge.net/bugDescriptions.html#UWF_UNWRITTEN_FIELD) are fixed.  Field `fileExtensions` was never written and had it default `null` value. Looks like we had a real bug in code introduced not long time ago. We need to resolve all Findbugs problems ASAP and enforce no further violations.","closed","","mkordas","2015-03-22T15:28:00Z","2015-04-27T21:16:03Z"
"","779","Make inner classes static when possible, issue #778","All violations of Fildbugs rule [SIC: Should be a static inner class](http://findbugs.sourceforge.net/bugDescriptions.html#SIC_INNER_SHOULD_BE_STATIC) are fixed.","closed","","mkordas","2015-03-14T13:17:21Z","2015-04-27T21:14:52Z"
"","780","Declare comparator class as Serializable to fix Findbugs violation, issue #778","All violations of Fildbugs rule [Se: Comparator doesn't implement Serializable](http://findbugs.sourceforge.net/bugDescriptions.html#SE_COMPARATOR_SHOULD_BE_SERIALIZABLE) are fixed.","closed","","mkordas","2015-03-14T14:07:48Z","2015-04-27T21:14:50Z"
"","781","Clean up open streams, issue #778","All violations of Fildbugs rule [OBL: Method may fail to clean up stream or resource](http://findbugs.sourceforge.net/bugDescriptions.html#OBL_UNSATISFIED_OBLIGATION) are fixed.","closed","","mkordas","2015-03-14T14:24:04Z","2015-04-27T21:14:52Z"
"","292","resolve broken links on sourceforge website","All problems are at report: http://checkstyle.sourceforge.net/linkcheck.html","closed","","romani","2014-10-08T15:49:43Z","2015-01-23T04:30:52Z"
"","745","Remove useless parentheses to fix PMD violations, issue #744","All [UselessParentheses](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/unnecessary.html#UselessParentheses) violations are fixed.  Parentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.  After these changes number of PMD violations decrease from 736 to 17.","closed","","mkordas","2015-03-10T20:47:31Z","2015-03-11T16:09:42Z"
"","123","SuppressionCommentFIlter with comment formats stopped working","After upgrading to 5.7 it seems that the SuppressionCommentFilter stopped working when used with the comment formats.  For example, this suppression configuration worked before the upgrade but doesn't anymore  ``` xml                       ```  But this simple SuppressionCommentFilter with no format defined still works with ""CHECKSTYLE:OFF"".  ``` xml        ```","closed","approved,","lfbayer","2014-03-20T05:22:39Z","2015-02-13T20:40:39Z"
"","853","TreeWalker initialization error. WILDCARD_TYPE not found.","After update Checkstyle Eclipse plugin to 6.4.0 get next error on every build:  ``` eclipse.buildId=4.4.2.M20150204-1700 java.version=1.7.0_75 java.vendor=Oracle Corporation BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US Framework arguments:  -product org.eclipse.epp.package.jee.product Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product  net.sf.eclipsecs.core Error Thu Mar 26 16:57:58 MSK 2015 Errors running builder 'Checkstyle Builder' on project 'ssel'.  org.eclipse.core.runtime.CoreException: cannot initialize module TreeWalker - Token ""WILDCARD_TYPE"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck@3fc53775     at net.sf.eclipsecs.core.builder.CheckstyleBuilder.handleBuildSelection(CheckstyleBuilder.java:307)     at net.sf.eclipsecs.core.builder.CheckstyleBuilder.build(CheckstyleBuilder.java:171)     at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:734)     at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:206)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:246)     at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:299)     at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:302)     at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:358)     at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:381)     at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:143)     at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:241)     at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54) Caused by: net.sf.eclipsecs.core.util.CheckstylePluginException: cannot initialize module TreeWalker - Token ""WILDCARD_TYPE"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck@3fc53775     at net.sf.eclipsecs.core.util.CheckstylePluginException.rethrow(CheckstylePluginException.java:66)     at net.sf.eclipsecs.core.util.CheckstylePluginException.rethrow(CheckstylePluginException.java:77)     at net.sf.eclipsecs.core.builder.Auditor.runAudit(Auditor.java:166)     at net.sf.eclipsecs.core.builder.CheckstyleBuilder.handleBuildSelection(CheckstyleBuilder.java:300)     ... 13 more Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Token ""WILDCARD_TYPE"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck@3fc53775     at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:184)     at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:185)     at net.sf.eclipsecs.core.builder.CheckerFactory.createCheckerInternal(CheckerFactory.java:310)     at net.sf.eclipsecs.core.builder.CheckerFactory.createChecker(CheckerFactory.java:146)     at net.sf.eclipsecs.core.builder.Auditor.runAudit(Auditor.java:142)     ... 14 more Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Token ""WILDCARD_TYPE"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck@3fc53775     at com.puppycrawl.tools.checkstyle.TreeWalker.registerCheck(TreeWalker.java:317)     at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:192)     at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:185)     at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:163)     ... 18 more ```  Checked ""WhitespaceAroundCheck"" and didn't find any custom configuration.","closed","high demand,","dlopatin","2015-03-26T15:57:37Z","2016-03-23T05:40:40Z"
"","61","Allow public fields for immutable classes","Affects: VisibilityModifierCheck  Rationale: Forcing all fields of class to have private modified by default is good in most cases, but it some cases it drawbacks in too much boilerplate get/set code. One of such cases are immutable classes.  Requested:  - Allow immutable fields to be public.  - Field is considered to be immutable if it have final modifier and either a primitive type or instance of class known to be immutable (such as String, ImmutableCollection from Guava and etc). - Also it is would be nice to check, that class itself is also final. - Classes known to be immutable should be listed by their fully qualified name  Example of immutable class that becomes much more concise with public fields  ``` java public final class ReportItem {      public final ImmutableSet includes;     public final ImmutableSet excludes;     public final String notes;     public final BigDecimal value;      public ReportItem(Collection includes, Collection excludes, BigDecimal value, String notes) {         this.includes = ImmutableSet.copyOf(includes);         this.excludes = ImmutableSet.copyOf(excludes);         this.value = value;         this.notes = notes;     } ```","closed","high demand,","KTannenberg","2013-11-14T12:06:40Z","2015-06-05T14:49:14Z"
"","233","Added test and fix for the case if there is a semicolon between import statements.","Additional Checks may be required, so such cases will be reported by checkstyle.","closed","","broo2s","2014-08-10T00:24:31Z","2014-09-16T15:51:25Z"
"","122","Adding u HTML tag to list of allowed tags in JavaDoc. Fixes issue #58.","Adding `` HTML tag to set of allowed tags, because as it was said in https://github.com/checkstyle/checkstyle/issues/58#issuecomment-28462261, the tag is listed in HTML 3.2 specifications and JavaDoc must support HTML 3.2.","closed","","the-lay","2014-03-16T16:34:36Z","2014-06-28T14:05:24Z"
"","189","Issue 49: Comments support in Checkstyle","Added support of single-line and block comments to Checkstyle. Also edited TodoCommentCheck to show new functionality.","closed","","baratali","2014-07-14T18:15:02Z","2014-10-30T20:53:33Z"
"","642","Added feeds icons to Checkstyle's site, issue #617","Added rss and google groups icons with corresponding links to checkstyle's twitter and mail-list (google group).  As banners and such links are specifying in site.xml - these logos will appear in all pages.","closed","","alexkravin","2015-02-14T00:03:28Z","2015-02-16T21:38:55Z"
"","547","new: Javadoc Method Regex Check from twitter custom checks, issue #430","Added new Check from https://github.com/twitter/commons/tree/master/src/java/com/twitter/common/checkstyle  Created UT and corresponding input, updated xml file responsible for html site.","closed","","alexkravin","2014-12-26T23:53:04Z","2014-12-29T15:50:14Z"
"","591","Added file extensions property to Checker & TreeWalker, issue #25","Added fileExtensions property to Checker and TreeWalker, updated sun_checks.xml  ``` xml       ...            ... ```  Tested on pdf file:  ``` $ java -jar checkstyle-6.3-SNAPSHOT-all.jar -c /sun_checks.xml Books/Spring\ in\ Action\,\ 3rd\ Edition.pdf  Starting audit... Audit done. ```","closed","","alexkravin","2015-01-21T13:03:42Z","2015-01-25T16:07:54Z"
"","355","Issue #49. Caching DetailNode trees in AbstractJavadocCheck","Added cache that stores DetailNode trees and error message (if parsing failed).","closed","","baratali","2014-11-07T22:28:38Z","2014-11-08T03:54:37Z"
"","246","Issue 49: Support of Javadoc comments in Checkstyle","Added ANTLRv4 grammar that parses Javadoc comments. Added UTs to test produced parse trees. Javadoc parser is stand alone that does not depend from main antlr grammar (java.g). Check that wants to process javadoc comment's parse tree should extend AbstractJavadocCheck and override single abstract method.","closed","","baratali","2014-08-12T17:09:47Z","2014-10-30T20:53:43Z"
"","966","LeftCurlyCheck : need to handle TokenTypes.STATIC_INIT","Add TokenTypes.STATIC_INIT processing to LeftCurlyCheck","closed","approved,","romani","2015-04-23T17:08:57Z","2015-04-23T20:12:00Z"
"","24","Add link to stackoverflow at web site support page","Add to web site support page http://checkstyle.sourceforge.net/mail-lists.html  , one more option for support: http://stackoverflow.com/questions/tagged/checkstyle","closed","approved,","romani","2013-10-20T06:50:24Z","2014-11-29T16:57:38Z"
"","319","Update for existing Check: JavadocMethodCheck","Add to existing Check this (https://github.com/checkstyle/checkstyle/issues/310) functionality, allow missing Javadoc with specific annotations.","closed","","maxvetrenko","2014-10-21T18:48:11Z","2014-10-22T23:52:55Z"
"","39","Web site: highlight that Sourceforge will be only Binaries hosting and web site hosting","Add Github icon above sourceforge in left panel. Change text to clearly state that SourceForge will have only binaries hosting. Reason: https://github.com/blog/1302-goodbye-uploads http://sourceforge.net/blog/github-projects-downloads-are-welcome/  Oliver want to have information about download count. But I doubt that this information in useful and actual  as checkstyle is in Ubuntu repos (http://packages.ubuntu.com/lucid/checkstyle , https://launchpad.net/ubuntu/+source/checkstyle), Maven(http://mvnrepository.com/artifact/checkstyle/checkstyle), we already were asked to put them Mac and Windows unofficial repos.   Web site hosting is not questionable as it is already known and well indexed by all search engines.","closed","approved,","romani","2013-10-28T00:46:04Z","2014-12-17T02:44:33Z"
"","185","Enhance EnumConstantNameCheck","Add EnumConstantNameCheck to check `ENUM_CONSTANT_DEF` tokens as well as ConstantNameCheck.","closed","","maroontress-tomohisa","2014-07-13T15:24:36Z","2014-07-15T10:07:53Z"
"","320","Update google_checks.xml","Add all new Checks.","closed","","maxvetrenko","2014-10-21T19:41:36Z","2014-10-22T18:38:43Z"
"","957","PMD: resolve problems from DefaultPackage rule","Activate PMD rule - DefaultPackage (http://pmd.sourceforge.net/pmd-5.3.1/pmd-java/rules/java/controversial.html#DefaultPackage)  TODO: resolve all missed modifiers on methods of inner classes, recheck other , fix only reasonable violations, all other could go to suppression case-by-case.  Errors: [INFO] --- maven-pmd-plugin:3.4:check (default-cli) @ checkstyle --- [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader:454 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PackageObjectFactory:67 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PropertyCacheFile:114 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PropertyCacheFile:153 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PropertyCacheFile:165 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter:141 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.DetailAST:155 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.DetailAST:196 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.DeclarationCollector$LexicalFrame:255 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.DeclarationCollector$LexicalFrame:264 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.DeclarationCollector$LexicalFrame:273 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.DeclarationCollector$ClassFrame:406 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck$FieldFrame:570 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck$ClassDesc:139 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck$ClassDesc:145 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck$ClassDesc:154 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck$ClassDesc:163 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck$ClassDesc:172 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck$ClassDesc:181 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.Guard:91 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.Guard:126 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.ImportControlLoader:139 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.PkgControl:73 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.PkgControl:81 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.PkgControl:91 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.PkgControl:122 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler:206 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.ExpressionHandler:218 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:191 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:207 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck:341 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck$ExceptionInfo:1097 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck$ExceptionInfo:1103 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck$ExceptionInfo:1109 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck$ExceptionInfo:1115 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.modifier.ModifierOrderCheck:140 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck$MethodCounter:99 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck$MethodCounter:114 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck$MethodCounter:121 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.FileDrop:203 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.FileDrop:218 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.JTreeTable$ListToTreeSelectionModelWrapper:416 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.Main:36 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.ParseTreeModel:52 Rule:DefaultPackage Priority:3 Use explicit scoping instead of the default package private level.","closed","miscellaneous,","romani","2015-04-22T21:22:02Z","2016-02-21T14:47:03Z"
"","609","Empty Line Separator Check, added option for managing empty lines betwee...","According to reopened issue #530   Fixed false-positive, extended UT input, as commit was reverted, all changes are added in this one.","closed","","alexkravin","2015-02-01T11:24:35Z","2015-02-01T19:02:42Z"
"","715","Need Braces Check, one-line statements option, issue #300","According to reopened issue #300   Fixed false-positives with one-line statements, extended option by supporting loops besides if statement.","closed","","alexkravin","2015-03-04T13:00:53Z","2015-03-08T01:23:41Z"
"","927","Fix cases when exception is logged and thrown in Checkstyle codebase","According to https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/main/java/com/github/sevntu/checkstyle/checks/coding/EitherLogOrThrowCheck.java logging and then throwing exception is bad practice.  Example: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java#L70  In scope of this issue is fixing all such problems in Checkstyle codebase.","closed","approved,","mkordas","2015-04-13T21:28:11Z","2015-09-07T22:19:20Z"
"","792","Do not require Javadoc for serialVersionUID fields","According to discussion in #780 it is problem in [JavadocVariable](http://checkstyle.sourceforge.net/config_javadoc.html#JavadocVariable).","closed","javadoc,","mkordas","2015-03-15T01:50:46Z","2015-10-26T00:42:38Z"
"","571","New Check: EmptyCatchBlockCheck","according to agreement with guava tool - https://github.com/google/guava/issues/1891#issuecomment-69090187  We need to make Check that can do coverage of Google Style requirements instead of EmptyBlock. Coverage page (http://checkstyle.sourceforge.net/google_style.html) have to be updated. https://github.com/checkstyle/google-style-config-test have to be updated too.  Two options: - regexp for exception variable name (""expected"") - regexp for first line of comment (beware of few single line comments of multi-line comments) , default value is "".*""  How to make Check be aware of comments - just override method and return true: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java#L67","closed","high demand,","romani","2015-01-08T06:18:14Z","2015-03-04T21:53:25Z"
"","530","EmptyLineSeparator doesn't require exactly one line between members","According to [Google Java Style - Vertical Whitespace](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.6.1-vertical-whitespace) there must be only one line between class members. Current check doesn't enforce that, so it's incomplete. Please look at samples:  ``` java package com.sample; import java.util.List; // as expected: 'import' should be separated from previous statement ```  ``` java package com.sample;  import java.util.List; // OK ```  ``` java package com.sample;   import java.util.List; // nothing reported, but violates Vertical Whitespace rules ```","closed","approved,","mkordas","2014-12-21T15:16:07Z","2015-02-01T19:02:52Z"
"","778","Fix Findbugs violations in Checkstyle","According to [Checkstyle GSoC 2015 Project Ideas](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2015-Project-Ideas#project-name-practice-what-you-preach) we need to fix or suppress all [Findbugs violations](http://checkstyle.sourceforge.net/findbugs.html).","closed","approved,","mkordas","2015-03-14T13:11:22Z","2015-04-09T06:48:18Z"
"","744","Fix PMD violations in Checkstyle","According to [Checkstyle GSoC 2015 Project Ideas](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2015-Project-Ideas#project-name-practice-what-you-preach) we need to fix all [violations](http://checkstyle.sourceforge.net/pmd.html).  Current status: `Failed to execute goal org.apache.maven.plugins:maven-pmd-plugin:3.4:check (default-cli) on project checkstyle: You have 736 PMD violations.`  !!!Attention!!!:  we should NOT blindly follow PMD recommendation, we are ok to put suppressions or skip some violations (after discussion).","closed","approved,","mkordas","2015-03-10T20:34:20Z","2015-04-26T17:31:45Z"
"","510","Illegal Type Check, fixed false positives on same file names, issue #78","According to #78   Fixed false positives on same name files in classpath, e.g.:  We force Check to warn on java.util.List variables, methods, etc.  The problem was if we have something like: import java.awt.List; .... List list; //There was a false-positive","closed","","alexkravin","2014-12-16T11:42:13Z","2014-12-20T05:55:31Z"
"","769","Added support of logging severity for all audit events, issue #67","According to #67   Added support of logging severity for all audit events via introducing new option to DefaultLogger  Option's default value is true In UTs it's used with value false to not breaking most of them.  Updated WriteTagTest as it depends from severity level.","closed","","alexkravin","2015-03-13T14:23:55Z","2015-03-15T06:32:41Z"
"","664","Illegal Type Check, updated memberModifiers option setting, issue #663","According to #663   Updated setting of option memberModifiers","closed","","alexkravin","2015-02-22T12:02:56Z","2015-02-24T06:41:21Z"
"","801","Removed printStackTrace(...) from whole code, issue #660","According to #660   Removed printStackTrace() from whole code.","closed","","alexkravin","2015-03-15T13:31:32Z","2015-03-17T05:46:19Z"
"","657","Boolean Expression Complexity Check, fixed NPE, issue #654","According to #654   Fixed NPE, added UT and input.  Npe occurred because multi-catch pipe operator wasn't in consideration of binary or operator possible usage.  Detailed exception's information is coming from TreeWalker and exception between  Audit started... and Audit finished.  Is coming from Checker. But in Checker there's no catch block for such exceptions, that's why it looks like swallowing.","closed","","alexkravin","2015-02-20T20:01:07Z","2015-02-21T00:24:47Z"
"","680","Added feed icons to site, issue #617","According to #617   As in xdocs it's possible to change only body, site will appear as it was specified in site.xml - added rss icon to the top-right corner of the site.  Added rss-long image to poweredBy section  Found google-groups image fits the most to long images.","closed","","alexkravin","2015-02-24T14:03:06Z","2015-02-26T22:03:34Z"
"","633","Fixed problems with UTs on Windows, issue #612","According to #612   Extended UTs and Checks to normally pass on Windows. Most of problems were in lack of carriage return - '\r' in OS different from Windows.  2 UTs were skipped while running on Windows:  1) JavadocParseTreeTest - one of inputs crashes generated by antlr JavadocParser, this place in UT is commented.  https://github.com/alexkravin/checkstyle/blob/48af2b6259f6090c21a256402ec166cbf5b1af6b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParseTreeTest.java#L240  2) Encoding problems with InputGrammar.java and corresponding UT Generated14JavaLexer - test passes in eclipse, but fails in maven which supposes literal's are different.  https://github.com/alexkravin/checkstyle/blob/48af2b6259f6090c21a256402ec166cbf5b1af6b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/GeneratedJava14LexerTest.java#L24","closed","","alexkravin","2015-02-11T21:30:56Z","2015-02-12T22:05:17Z"
"","703","Hidden Field Check, updated docs for 'ignoreFormat' option, issue #607","According to #607   Updated docs for ignoreFormat option.  Got rid of ambiguity about it.","closed","","alexkravin","2015-03-01T15:28:01Z","2015-03-03T18:31:48Z"
"","679","Extended newbie guide, issue #606","According to #606   Extended newbie guide:  Added instructions of development and debugging via UTs with screenshots, steps for creating PRs  Current version: http://alexkravin.github.io/tutorial/contributing.html","closed","","alexkravin","2015-02-24T12:58:58Z","2015-03-10T15:44:34Z"
"","671","Extending user guide for newbies, issue #606","According to #606   1) moved to ""Developers"" group of pages, made it like: Developers Extending Checkstyle Contributing Javadoc  1.1) remove ""Project Page"" link in ""Developers"" group  2) provided instructions on how to compile and run Uts in debug for Eclipse , Netbeans, IDEA  3) Provided a recipe how to setup a pure Java development environment by providing the essential steps as it was specified in #27","closed","","alexkravin","2015-02-23T14:42:52Z","2015-02-25T22:28:59Z"
"","629","Abstract Class Name Check, updated default regex, issue #595","According to #595   If I have understood problem described here https://twitter.com/deveth0/status/558596474465189888?s=09 right.. Updated regex of default format of abstract class from ""zero or more after Abstract"" to ""one or more after Abstract""","closed","","alexkravin","2015-02-10T13:48:30Z","2015-02-10T15:07:03Z"
"","800","Added anchors to sections, issue #586","According to #586   Added anchors to each section on each site's page.  http://alexkravin.github.io/anchors/index.html","closed","","alexkravin","2015-03-15T13:22:31Z","2015-03-17T07:08:21Z"
"","716","Empty Catch Block Check, updated docs","According to #571 - updated docs","closed","","alexkravin","2015-03-04T13:15:45Z","2015-03-04T21:53:16Z"
"","610","New Check: Empty Catch Block Check, issue #571","According to #571   New Check was added, EmptyCatchBlockCheck is fully covered by UTs, EmptyBlockCheck was updated: removed references to checking catch blocks, updated UTs.  Updated docs.  What exactly have I do to update Coverage page (http://checkstyle.sourceforge.net/google_style.html) ? Shouldn't it be updated automatically?  https://github.com/checkstyle/google-style-config-test will be updated asap","closed","","alexkravin","2015-02-01T22:10:46Z","2015-02-08T21:12:08Z"
"","615","Resolving linkcheck plugin errors, issue #549","According to #549   Here's report after my updates: http://alexkravin.github.io/linkcheck/linkcheck.html  There're 25 errors, but as you can see all of them because of ping timeout - that's because I used vpn connection during building, seems to be it's not fast enough, these links are ok.","closed","","alexkravin","2015-02-05T19:38:56Z","2015-02-05T22:26:57Z"
"","560","Resolved maven compilation warnings, issue #548","According to #548   Resolved maven compilation warnings","closed","","alexkravin","2015-01-02T12:33:03Z","2015-01-02T18:56:00Z"
"","562","Got rid of javadoc warning, issue #548","According to #548   Got rid of javadoc warning","closed","","alexkravin","2015-01-02T22:10:40Z","2015-01-03T22:01:31Z"
"","561","Logging of exceptions to console, issue #546","According to #546   Now exceptions are logged to console output, e.g.: while mvn clean verify:  ``` Exception happened at PATH: com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.isCstyleMultiDimensionalArrayDeclaration(NoWhitespaceAfterCheck.java:294)     at com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.getArrayTypeOrIdentifier(NoWhitespaceAfterCheck.java:183)     at com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.getPreceded(NoWhitespaceAfterCheck.java:139)     at com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.visitToken(NoWhitespaceAfterCheck.java:111)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:449)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:548)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:373)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:207)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:77)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:263)     at com.puppycrawl.tools.checkstyle.CheckStyleTask.realExecute(CheckStyleTask.java:318)     at com.puppycrawl.tools.checkstyle.CheckStyleTask.execute(CheckStyleTask.java:262)     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)     at org.apache.tools.ant.Task.perform(Task.java:348)     at org.apache.tools.ant.Target.execute(Target.java:390)     at org.apache.tools.ant.Target.performTasks(Target.java:411)     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)     at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)     at org.apache.tools.ant.Project.executeTargets(Project.java:1251)     at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:442)     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)     at org.apache.tools.ant.Task.perform(Task.java:348)     at org.apache.tools.ant.Target.execute(Target.java:390)     at org.apache.tools.ant.Target.performTasks(Target.java:411)     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)     at org.apache.tools.ant.Project.executeTarget(Project.java:1368)     at org.apache.maven.plugin.antrun.AntRunMojo.execute(AntRunMojo.java:327)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:347)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:154)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:582)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:214)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:158)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) [checkstyle] /home/asus/sources/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java:450:13: '}' should be alone on a line. ```","closed","","alexkravin","2015-01-02T21:53:09Z","2015-01-09T16:43:00Z"
"","656","Refactoring ut#537","According to #537  Refactored UTs and Checks for having custom constants pointing at .properties files. UTs are using getCheckMessage() method to avoid copy-pasting of violation reports.","closed","","alexkravin","2015-02-19T21:16:02Z","2015-02-20T16:07:10Z"
"","488","Fixed false-positive in GenericWhitespaceCheck issue #51","According to #51: 1.  The value of the field InputGenericWhitespaceInnerClassCheck.field is not     used is optional compiler violation, turned off in test-resources folder. 2.   '>' is followed by white space. Does not appear anymore.","closed","","alexkravin","2014-12-11T14:01:32Z","2014-12-17T15:43:55Z"
"","594","Switch case indentation#512","According to #512   Changed indentation of switch-case in Checkstyle project. case indentation is now 4 instead of former 0 relatively switch. Updated corresponding config in checkstyle_checks.xml:  ``` xml                            ```","closed","","alexkravin","2015-01-22T13:37:40Z","2015-01-22T14:58:34Z"
"","559","Switched Checkstyle and all resources to UTF-8 encoding, issue #489","According to #489   Fixed all errors caused by switching, moved InputGrammar from resources-noncompilable to resources folder","closed","","alexkravin","2015-01-02T11:07:29Z","2015-01-09T16:45:53Z"
"","516","Summary Javadoc Check, added 'specify period' option, issue #472","According to #472   Added option for specifying period symbol at the end of first javadoc sentence. Added UTs and corresponding inputs.","closed","","alexkravin","2014-12-19T13:56:01Z","2014-12-19T17:31:37Z"
"","487","Inner assignment and lambda expressions#377","According to #377   1-st commit: added pair: EXPR-LAMBDA to ALLOWED_ASSIGMENT_CONTEXT array, so no warnings on corresponding elements. 2-nd commit: added UT for case of inner assignment in lambda expressions. UT's input was created in resources-noncompilable folder with comment ""Compilable with Java8""","closed","","alexkravin","2014-12-11T13:19:39Z","2014-12-12T08:18:57Z"
"","808","New Check: CommentsIndentationCheck, issue #333","According to #333   Not a lot of stuff was here http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.8.6.1-block-comment-style  But Check controls the indentation inside comments.","closed","incomplete,","alexkravin","2015-03-16T16:32:58Z","2015-08-02T15:15:32Z"
"","538","Added sun and google configs to jar as resources, issue #305","According to #305   sun and google config are located in jar:  test$ jar tf checkstyle-6.2.jar | grep ""^.*.xml$"" com/puppycrawl/tools/checkstyle/antlib.xml sun_checks.xml google_checks.xml checkstyle_packages.xml META-INF/maven/com.puppycrawl.tools/checkstyle/pom.xml  $ ls checkstyle-6.2-SNAPSHOT-all.jar  src $ java -jar checkstyle-6.2-SNAPSHOT-all.jar -c /google_checks.xml src/Test.java Starting audit... /home/asus/Downloads/suptest/src/Test.java:1: warning: Abbreviation in name must contain no more than '1' capital letters. /home/asus/Downloads/suptest/src/Test.java:1: warning: The name of the outer type and the file do not match. /home/asus/Downloads/suptest/src/Test.java:2: warning: 'method def modifier' have incorrect indentation level 4, expected level should be 2. /home/asus/Downloads/suptest/src/Test.java:3:23: warning: '(' is preceded with whitespace. /home/asus/Downloads/suptest/src/Test.java:6: warning: 'method def rcurly' have incorrect indentation level 4, expected level should be 2. Audit done.","closed","","alexkravin","2014-12-24T22:24:06Z","2014-12-26T05:14:57Z"
"","566","Code examples of filters' usage, issue #289","According to #289  Added examples of suppressed java source code due to specified filter options in config.xml  Examples were added only to filters which work with Java code. (because there're also XML filter, or suppressions loader, which are already documented and don't need any code illustrations.)","closed","","alexkravin","2015-01-06T14:01:15Z","2015-01-09T16:57:03Z"
"","815","Annotation Use Style Check, issue #28","According to #28   Added UT and input showing the usage of annotations without default params values.","closed","","alexkravin","2015-03-17T21:28:45Z","2015-03-17T22:00:10Z"
"","601","Final Local Variable Check, fixed false-positive, issue #258","According to #258   Fixed false-positive, added corresponding UT and input.  So now this Check doesn't put violation on variables in for init (except for first one).","closed","","alexkravin","2015-01-26T11:21:26Z","2015-01-27T02:45:57Z"
"","153","Accented characters not outputting correctly","Accented characters are not outputting correctly, even if the charset is set to `UTF-8`.  > member def modifier sisennyssyvyydellÃ¤ 5 ei ole oikealla syvyydellÃ¤ 4","closed","","kasper","2014-05-29T12:23:59Z","2015-01-22T20:39:26Z"
"","177","Fixed AbstractTypeAwareCheck for generics in interfaces (issue #473)","AbstractTypeAwareCheck did not take generic parameters in interface definitions into account, which seems to be the cause for (sourceforge) issue #473.  It seems to me that the additional ""TokenType"" must be added in every subclass of AbstractTypeAwareCheck. I fixed it for the standard checks but naturally couldn't fix it for custom checks ""out in the wild"". Perhaps Check should somehow be refactored to make it easier for the ""default tokens"" to be the union of the needed tokens of all classes in the check's supertype hierarchy.","closed","","tobiasbaum","2014-07-06T13:04:53Z","2014-08-19T05:53:45Z"
"","188","Checkstyle Eclipse 5.7 - Inner class exceptions don't seem to be distinguished","A simple file checked with Eclipse CS plugin:  ``` public interface TestInterface {     void test() throws Exception1, Exception2;     public class Exception1 extends Exception { }     public class Exception2 extends Exception { } } ```  Generates a warning:  > Redundant throws: 'Exception2' listed more then one time.  Moving one of those exceptions to its own file suppresses it.  This is valid Java syntax and Exception1 certainly does not overshadow Exception2, so this seems to be a mistake of the checker. I am using the default version of the `RedundantThrows` rule.","closed","","Ordous","2014-07-14T18:02:44Z","2014-12-31T02:46:46Z"
"","533","GenericWhitespace false positive in google_checks.xml with generic method call","A generic method is called with an ambiguously typed parameter: `Collections. emptyList()`  And results in ""GenericWhitespace: GenericWhitespace '>' is followed by whitespace.""  But, that should be okay. Google style guide does not specify regarding whitespace here.","closed","","ctubbsii","2014-12-22T18:43:57Z","2015-01-21T23:41:28Z"
"","58","JavadocStyleCheck does not support the HTML UNDERLINE tag","A doc comment like  ``` /**   * Through the Configure... link, you should configure the following:   */ ```  creates a CS event like this  ``` Style Javadoc: Unerwarteter schließender HTML-Tag:  link, you should configure the following: ```  , obviously because ""u"" is missing in the list of tags in ""JavadocStyleCheck.java"". Please update the list of tags there.  ""u"" tag: http://www.w3schools.com/tags/tag_u.asp","closed","approved,","aunkrig","2013-11-13T15:07:45Z","2014-04-09T20:05:50Z"
"","967","WhitespaceAfterCheck: hardcoded message","`message = new Object[]{""cast""};`  try to avoid hardcoded string values , as it have be used from resources (i18n)","closed","approved,","romani","2015-04-23T17:16:36Z","2015-06-26T14:51:51Z"
"","67","Log severity for all audit events, not just warnings","`DefaultLogger.addError()` only logs `AuditEvent.severityLevel` if it's `WARNING`. This makes it hard to find events of severity `ERROR` in eg `mvn checkstyle:check` output. Log `severityLevel` in all cases.","closed","approved,","richarddbarnett","2013-11-18T00:28:11Z","2015-09-10T13:28:49Z"
"","121","Fixed JavaDoc wrong method reference","`checkComment()` has JavaDoc tag `@see` referencing `checkFirstSentence()` method. However, there was no such method as `checkFirstSentence(TextBlock)`.","closed","","the-lay","2014-03-16T14:52:36Z","2014-07-10T05:51:33Z"
"","503","Indent level for array to list counts wrong","``` java    private static final List manifests = Arrays.asList(new Manifest[]{             new Manifest(""libraries"", RESOURCES_URL, true),             new Manifest(""natives"", RESOURCES_URL, true),             new Manifest(""clients"", RESOURCES_URL, true),             new Manifest(""assets"", ASSETS_URL, false),     }); ```  ``` java Updater.java:72: 'array initialization' child have incorrect indentation level 12, expected level should be 8. Updater.java:73: 'array initialization' child have incorrect indentation level 12, expected level should be 8. Updater.java:74: 'array initialization' child have incorrect indentation level 12, expected level should be 8. Updater.java:75: 'array initialization' child have incorrect indentation level 12, expected level should be 8. ```  Tested on 6.1","closed","incomplete,","ghost","2014-12-15T14:34:47Z","2014-12-19T13:13:12Z"
"","568","unexpected character xxxx in identifier","``` public static class CategoryResult {     public static final String CATEGORY_HAS_ITEM = ""此类目含有商品"";  } ```  if the value contain characters other than english ,say Chinese,  the checkstyle can not pass.and will report “Unexpected character 0xe1bb in identifier”","closed","","xiaoyifang","2015-01-07T06:20:50Z","2015-01-07T13:15:59Z"
"","304","problem of ANTLR parsing on latest Guava sources","``` cd /var/tmp/ git clone https://code.google.com/p/guava-libraries/ export CHECKSTYLE_REPO=~/java/git-others/checkstyle/checkstyle java -jar $CHECKSTYLE_REPO/target/checkstyle-5.8-SNAPSHOT-all.jar \     -c $CHECKSTYLE_REPO/google_checks.xml  \     -o checkstyle-report.txt -r guava-libraries ```  Result in:  ```  areLtsAndGtsBalanced(currentLtLevel) /var/tmp/guava-libraries/guava-tests/test/com/google/common/reflect/TypesTest.java:211:5: unexpected token: void /var/tmp/guava-libraries/guava-tests/test/com/google/common/reflect/TypesTest.java:213:12: unexpected token: WildcardType /var/tmp/guava-libraries/guava-tests/test/com/google/common/reflect/TypesTest.java:216:15: expecting IDENT, found '.' /var/tmp/guava-libraries/guava-tests/test/com/google/common/reflect/TypesTest.java:216:56: expecting IDENT, found ')' ```  the same problem was on 5.7:  ```  ~/java/11 $ java -jar checkstyle-5.7-all.jar     -c sun_checks.xml      -o checkstyle-report.txt -r guava-libraries  areLtsAndGtsBalanced(currentLtLevel) /home/rivanov/java/11/guava-libraries/guava-tests/test/com/google/common/reflect/TypesTest.java:211:5: unexpected token: void /home/rivanov/java/11/guava-libraries/guava-tests/test/com/google/common/reflect/TypesTest.java:213:12: unexpected token: WildcardType /home/rivanov/java/11/guava-libraries/guava-tests/test/com/google/common/reflect/TypesTest.java:216:15: expecting IDENT, found '.' /home/rivanov/java/11/guava-libraries/guava-tests/test/com/google/common/reflect/TypesTest.java:216:56: expecting IDENT, found ')' ```","closed","","romani","2014-10-16T00:19:33Z","2014-11-23T22:16:11Z"
"","776","Resolve warning that occurs during site generation","``` [WARNING] Report plugin org.apache.maven.plugins:maven-project-info-reports-plugin has an empty version. [WARNING]  [WARNING] It is highly recommended to fix these problems because they threaten the stability of your build. [WARNING]  [WARNING] For this reason, future Maven versions might no longer support building such malformed projects. ```","closed","approved,","mkordas","2015-03-14T00:45:15Z","2015-03-15T21:29:59Z"
"","104","JavadocStyle: Valid HTML definitions lists are erroneously marked","_Ported from Sourceforge, see Sourceforge issues below for more details:_ - [547](https://sourceforge.net/p/checkstyle/bugs/547/) (Text inside {@code } and {@literal } must not be treated as HTML) - [572](https://sourceforge.net/p/checkstyle/bugs/572/) (Valid HTML definitions lists are erroneously marked)  There is already suggested [patch](https://sourceforge.net/p/checkstyle/patches/175/) which adds the following HTML tags to the allowed tag list: **dd, dt, font, u** ##","open","javadoc,","daniilyar","2014-02-09T01:15:52Z","2018-01-26T12:53:41Z"
"","103","Default language only translation check","_Ported from Sourceforge patch [208](https://sourceforge.net/p/checkstyle/patches/208/)_  The issue what we get is related to TranslationCheck, it works fine, but it checks all property file locales for the key presence. In our case we have all keys in the default language (English in our case) property file only, the other languages might miss some keys as it's enough to have it only in English or translation in French is not ready yet. This  [patch](https://sourceforge.net/p/checkstyle/patches/_discuss/thread/014dea40/1321/attachment/) adds new property defaultLocales so TranslationCheck reports the missing keys in property files of the languages codes listed in the defaultLocales property. For example, there are following properties files:  message.property  **hello=Hello**  message_de.property hello=Hallo warning_en.property  **cancel=Cancel**  warning_de.property cancel=Abbrechen  Assume, that the default locale is English, so setting defaultLocales to , ,en we will get the missing keys ""hello"" and ""cancel"" in message.property and warning_en.property accordingly. ##","closed","","daniilyar","2014-02-09T01:07:26Z","2016-11-22T06:45:38Z"
"","106","TreeWalker: Problems while checking always results to severity ""error""","_Ported from Sourceforge patch [122](https://sourceforge.net/p/checkstyle/patches/122/), the text below was copy-pasted from there:_  Hello! I would like to stop the build if checkstyle reports an ""error"" but the build should not stop if a ""warning"" occurs. The problem is, that if Checkstyle is not able to do a test for some reason (e.g. ""Got an exception - java.lang.RuntimeException: Unable to get class information for COSVisitorException."") the build fails because an ""error"" is reported. The attatched patch uses the severity assigned to the module TreeWalker (default: ""error"") for this messages instead of always ""error"". Greetings [Bernhard Mähr](https://sourceforge.net/u/bmaehr/profile/)  There is suggested patch for TreeWarker: https://sourceforge.net/p/checkstyle/patches/_discuss/thread/b96f7579/95b4/attachment/TreeWalker.patch and also additional patch which adds docs:  https://sourceforge.net/p/checkstyle/patches/_discuss/thread/b96f7579/eb6c/attachment/TreeWalker.doku.patch","closed","","daniilyar","2014-02-09T01:24:31Z","2015-09-07T01:19:45Z"
"","101","Indentation - support extra indent for throws clause","_Ported from Sourceforge [934551](https://sourceforge.net/p/checkstyle/feature-requests/294/) issue, please see details there._  There is already a suggested patch which allows users to configure the indentation level for throws statements in method declarations: http://sourceforge.net/p/checkstyle/patches/_discuss/thread/358bc429/7d4d/attachment/checkstyle-934551.diff. This patch adds a configuration property which allows users to set the offset for throws statements. The default is unchanged from 4, with zero meaning that the throws should be in line with the first line of the method declaration, and 8 meaning that it should indented an additional 4 characters relative to the method body.","closed","","daniilyar","2014-02-09T00:53:28Z","2014-02-13T20:49:51Z"
"","102","Generate a suppressions.xml file for SuppressionXpathFilter from the errors list by CLI command","_Ported from Sorceforge [217](https://sourceforge.net/p/checkstyle/patches/217/) patch, please see all details there_  Link to patch: https://sourceforge.net/p/checkstyle/patches/_discuss/thread/1d416f58/b6be/attachment/mychanges.patch  Explanation from patch author: http://juliangamble.com/blog/2012/03/10/running-checkstyle-at-full-throttle-on-a-legacy-codebase/  Few thoughts about reasons and usage of this patch: http://roman-ivanov.blogspot.com/2014/01/checkstyle-suppress-file-generator.html ##","closed","new feature,","daniilyar","2014-02-09T01:00:51Z","2018-06-29T16:50:40Z"
"","975","LeftCurlyCheck have hidden option","[INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck:103 Rule:ImmutableField Priority:3 Private field 'ignoreEnums' could be made final; it is only initialized in the declaration or constructor..  Check of option is always true, and no way to change it from outside. We can not remove it as it was there long time, but we need to make it visible to all others.","closed","approved,","romani","2015-04-23T23:22:26Z","2015-07-23T21:06:33Z"
"","619","HiddenField check does not work well with builders","[HiddenField](http://checkstyle.sourceforge.net/config_coding.html#HiddenField) check could be extended to handle builder methods better. Right now it supports them if `setterCanReturnItsClass` is set to `true` and method name starts from `set`.   Builder method prefix should be more configurable. E.g. very common pattern is to start builder methods with prefix `with`:  ``` java class Builder {     private int number;      public Builder withNumber(int number) {         this.number = number; // violation     }      public Builder setNumber(int number) {         this.number = number; // works fine with enabled setterCanReturnItsClass     } } ``` ##","open","approved,","mkordas","2015-02-06T21:49:34Z","2019-02-17T06:23:02Z"
"","947","Allow nested blocks in switch statements","[AvoidNestedBlocks](http://checkstyle.sourceforge.net/config_blocks.html#AvoidNestedBlocks) check reports violations for nested blocks in switch statements.  Visibility in switch block is not very intuitive, it is better to think about a each case as a function with its own scope of names. Users should be able to define non-shares scopes for names as it helps each case to use any names that suits its context.   Users should be able to write the following code, with own scopes per `case`:  ``` java switch (type) {      case 1 : { // violation of AvoidNestedBlocks         final String name = ""one"";      }      case 2 : { // violation of AvoidNestedBlocks         final String name = ""two"";     } ```  Checkstyle should not force users to write such code:  ``` java switch (type) {      case 1 :          String name = ""one"";      case 2 :          final String otherNameBecauseNameIsAlreadyDefined = ""two"";         name = ""or reusing variables""; ```  Follow-up to #946.","closed","","mkordas","2015-04-19T14:33:51Z","2015-04-19T15:37:44Z"
"","441","Custom Import Order Check compilable UT inputs","2 inputs were moved to resources-noncompilable folder because they reproduce compilable cases, but only in case if some lib file or smth else is importing from package where class is located. So it was done to not lose test cases.","closed","","alexkravin","2014-12-03T13:55:07Z","2014-12-11T14:42:54Z"
"","834","Disable additional invocation of site plugin, issue #821","1. Remove duplicated Linkcheck plugin declaration, issue #751. 2. Disable additional invocation of site plugin, issue #821.     By default property [forceSite](https://maven.apache.org/plugins/maven-linkcheck-plugin/linkcheck-mojo.html#forceSite) is `true` and Linkcheck plugin unnecessarily tries to invoke `mvn site` to freshly generate all resources needed for link checking. Not all plugins are ready to support such invocation in different context, e.g. tidy-maven-plugin. Without this additional invocation everything works fine and site generation is faster.","closed","","mkordas","2015-03-21T16:43:23Z","2015-03-22T17:18:50Z"
"","814","Introduce tidy-maven-plugin to enforce POM canonical order, issue #809","1. POM is cleaned up and reformatted 2. tidy-maven-plugin is introduced to enforce [POM Code Convention](http://maven.apache.org/developers/conventions/code.html#POM_Code_Convention) and fail the build on style violation.","closed","","mkordas","2015-03-17T20:58:40Z","2015-03-22T17:20:25Z"
"","486","Pom and classpath#388","1. InputGrammar moved to resources-noncompilable as it could be compilable only if project's encoding will be set to UTF-8 2. Final minor fixes of problems identified during maven build. 3. Pom and classpath with test-resources specifying. (has to be merged last!)","closed","","alexkravin","2014-12-10T21:48:08Z","2014-12-11T14:11:42Z"
"","356","Various documentation/spelling issues with AnnotationLocationCheck","1. Documentation is missing on the website (http://checkstyle.sourceforge.net/config_javadoc.html) 2. Spelling errors in configuration property name allowSameLineSingleParrametterlessAnnotation 3. Inconsistent use of camel case in configuration properties ...SingleLine... vs. Singleline  Furthermore it seems not befitting for a tool like Checkstyle - which aims to better the common developer - to use seemingly autogenerated javadoc comments like ""Some javadoc."" itself (exhibited in AnnotationLocationCheck). ""Lead by example"" should always be the agenda...","closed","","lkoe","2014-11-10T18:54:46Z","2014-11-29T16:24:07Z"
"","502","Translation check#149","1. Added basenameSeparator configuration option for Tranlation Check 2. Update changes due to new option: JavaDoc, HTML doc in XML, UT","closed","","alexkravin","2014-12-15T11:14:20Z","2014-12-18T19:38:27Z"
"","675","Clarify all Indentation Input files for certain expected values","1) Update all Input files(https://github.com/checkstyle/checkstyle/tree/master/src/test/resources/com/puppycrawl/tools/checkstyle/indentation) of Indentation Check to work against strict option configation. 2) Each line that have any printable symbol in Input fie should have comment like ""// indent:8 ; exp:8; ok"". 3)""indent:8"" - should be rechecked with actual indentation in that line (amount of spaces) 4) udpate google-style-config-test to have validations from above.   https://github.com/checkstyle/google-style-config-test/blob/master/src/main/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationCorrectInput.java#L43  ``` @Override public String replaceFrom(CharSequence sequence, CharSequence replacement) { // indent:6 ; exp:6; ok checkNotNull(replacement); // indent:8 ; exp:8; ok return sequence.toString(); // indent:8 ; exp:8; ok } // indent:6 ; exp:6; ok  private void checkNotNull(CharSequence replacement) {} ```","closed","approved,","romani","2015-02-23T18:55:40Z","2015-03-01T17:00:10Z"
"","38","update web site to have actual contribution process","1) Still reference to SVN: http://checkstyle.sourceforge.net/contributing.html         This document assumes you are working with the SVN version         If you have changed existing files, create a unified diff using SV  Remove any reference to SourceForge and redirect them to github.","closed","approved,","romani","2013-10-28T00:42:45Z","2014-11-29T16:40:45Z"
"","46","Sonarqube found problems in Checkstyle","1) RESOLVED: Figureout from Sonar team why Coverage is 0% (http://sonarqube.15.x6.nabble.com/Change-Checkstyle-project-source-location-at-nemo-sonarqube-org-td5021486.html) .  3) Just fix violations https://sonarqube.com/overview?id=289131 ##","closed","approved,","romani","2013-11-04T23:10:34Z","2017-08-08T14:04:37Z"
"","819","FileContentsHolder does not have HTML documentation","1) please create xdoc documentation for FileContentsHolder 2) update UT that check that all Checks are present to validate also all filters and other modules of Checker and TreeWalker. 3) We need to split page http://checkstyle.sourceforge.net/config.html into few pages (filter should go to separate sub page for sure). Please propose new structure.","closed","approved,","romani","2015-03-19T05:12:23Z","2015-10-05T12:32:45Z"
"","606","web site: extending user guides for newbies of Checkstyle","1) http://checkstyle.sourceforge.net/extending.html move to ""Developers"" group of pages, make it like: Developers     Extending Checkstyle     Contributing     Javadoc  1.1) remove ""Project Page"" link in ""Developers"" group  2)provide instructions on how to compile and run Uts in debug for Eclipse , Netbeans, IDEA","closed","approved,","romani","2015-01-29T23:58:08Z","2015-09-09T18:29:49Z"
"","617","web site: add feeds icons to ReleaseNotes page","1) Add to top conner of http://checkstyle.sourceforge.net/releasenotes.html images for assigning for RSS feed(find link to rss at https://sourceforge.net/p/checkstyle/news/?source=navbar) and Mail-list (checkstyle-announce), and our twitter,   Example of feed subscription images (we could use that images or any other images that are free to use): http://www.cyberciti.biz/tips/linux-display-open-ports-owner.html  Expected location square of images is below "" Last Published: 2015-02-01 | Version: 6.3 "" and above ""Release 6.3"" alligned to right side of the page ![location-for-small-square-images](https://cloud.githubusercontent.com/assets/812984/6219616/d9f0f75c-b5e0-11e4-90f0-3dc70ac1d1d4.png)  2) please add to ""poweredBy"" group : - grougle-group image to left side of web site to link user to checksyle mail-list for question and answers. - to rss feed   Images at ""poweredBy"" should be rectangular  as other images, so some pictures might require resize to looks like rectangular banners.  Rss image should be  like ( or find any other image ): http://www.freepik.com/free-psd/bold-orange-rss-subscribe-buttons-psd_597344.htm Google group image should be rectangular - I like there (with same text, but image is a bit bigger) : http://www.safeharbors.org/SHUserGroup.htm, but text should be part of image.","closed","approved,","romani","2015-02-06T15:45:18Z","2015-03-16T16:59:39Z"
"","479","Redundant Import Check created separate compilable UT input based on Inp...","...utImport #388","closed","","alexkravin","2014-12-09T10:34:30Z","2014-12-11T14:11:31Z"
"","217","Fixed AvoidUnicodeChars #216. Fix NPE in case when allowByTailComment=tr...","...ue, fix false positive in case when allowEscapesForControlCharacters=true","closed","","maxvetrenko","2014-08-01T16:55:11Z","2014-08-07T21:34:45Z"
"","770","Import Order Check, added option allows alphabetical grouping order in s...","...tatic group, issue #12  According to #12   Added option which lets to order static group of imports in alphabetical order if this group if grouped by top or bottom options.  Added UTs and inputs, updated docs.","closed","","alexkravin","2015-03-13T15:56:42Z","2015-03-17T05:44:49Z"
"","600","Custom Import Order Check, updated third-party package property's defaul...","...t value, issue #515  According to #515   Modified the default value of thirdPartyPackageRegExp from empty string (^$) to either empty or not string (^.*$), so now user is able to not specifying this value as it's said in docs:  ``` THIRD_PARTY_PACKAGE group. This group sets ordering of third party imports. Third party imports are all imports except STATIC, SAME_PACKAGE(n) and STANDARD_JAVA_PACKAGE. ```  Added corresponding UT and input.","closed","","alexkravin","2015-01-26T10:19:46Z","2015-01-30T16:36:57Z"
"","481","Avoid Star Import Check created separate compilable UT input based on In...","...putImport #388","closed","","alexkravin","2014-12-09T10:37:59Z","2014-12-11T14:43:32Z"
"","517","Final Parameters Check, added option allows ignoring primitive types as ...","...params, issue #446   According to #446   Added option ignorePrimitiveTypes allows ignoring primitive types as params, e.g.:  void foo(int x) { ... }  Added UT and corresponding inputs","closed","","alexkravin","2014-12-19T14:38:03Z","2014-12-22T16:11:06Z"
"","565","Illegal Type Check, fixed false positives on same file names, added supp...","...ort of analyzing imports, issue #78   According to #78   Got rid of ambiguity in illegal class names, added support of analyzing them by corresponding imports (via canonical names).  Generated reports: Checkstyle: http://alexkravin.github.io/IllegalType/checkstyle/checkstyle.html Hibernate (core): http://alexkravin.github.io/IllegalType/hibernate/checkstyle.html Spring (core): http://alexkravin.github.io/IllegalType/spring/checkstyle.html Guava: http://alexkravin.github.io/IllegalType/guava/checkstyle.html  There also are several violations with "".. Abstract.. is not allowed"" that's because no legal abstract types were specified (by default all of them are illegal for declaring variables, params, etc.)  Checkstyle configuration:  ``` xml                             ```","closed","","alexkravin","2015-01-06T12:01:52Z","2015-01-06T23:32:13Z"
"","557","Suppress Warnings Holder - fixed throwing exception if annotation uses c...","...onstant value, issue #539   According to #539   Fixed problem in SuppressionHolder (which inflicted problem on SuppressionFilter) with using constants as annotation's value","closed","","alexkravin","2014-12-30T10:15:41Z","2014-12-30T17:12:53Z"
"","126","file suppressions_none.xml copied to static site to resolve issue 117, a...","...nd be ready to use template for download  UT was updated to use new remote  It was attempt to fix: #117","closed","","romani","2014-03-26T05:43:40Z","2014-08-08T03:23:59Z"
"","597","Empty Line Separator Check, added option for managing empty lines betwee...","...n class members, issue #530   Added option allowMultipleEmptyLines for managing empty lines between class members, default value is true.  Added corresponding UT and input file.","closed","","alexkravin","2015-01-25T14:13:30Z","2015-01-29T06:15:14Z"
"","196","WhitespaceAround with allowEmptyMethods complains on annotation's empty ...","...method #21","closed","","maxvetrenko","2014-07-22T10:49:34Z","2014-07-24T11:41:55Z"
"","448","Indentation input, check on java8 source, moved to resources-noncompilab...","...le folder","closed","","alexkravin","2014-12-04T16:04:47Z","2014-12-11T14:14:24Z"
"","459","Issue #353 NullPointerException with SuppressWarningsHolder and enum fie...","...lds","closed","","ychulovskyy","2014-12-06T20:42:19Z","2014-12-07T06:39:08Z"
"","440","Java8 Method References moved java8 inputs to resources-noncompilable fo...","...lder","closed","","alexkravin","2014-12-03T13:31:43Z","2014-12-11T14:40:00Z"
"","749","Issue #148 magic number detection: option to ignore magic numbers in fie...","...ld declarations","closed","","ychulovskyy","2015-03-11T20:26:03Z","2015-04-03T07:28:22Z"
"","419","Package Declaration Check removed incompilable input and odd test for th...","...is case","closed","","alexkravin","2014-12-02T15:41:49Z","2014-12-11T14:12:52Z"
"","145","Update UnusedImportsCheck to correctly detect classes in parameters and ...","...inline tags nested within block tags. Also: fixed checkstyle issues of the previous commit  This fixes https://github.com/checkstyle/checkstyle/issues/88  We're facing the issue #88 as well so I'd really love to see this fixed in the next release","closed","","theqaguy","2014-05-09T09:13:52Z","2014-06-12T08:42:04Z"
"","480","Illegal Import Check created separate compilable UT input based on Input...","...Import #388","closed","","alexkravin","2014-12-09T10:36:34Z","2014-12-11T14:41:45Z"
"","276","Fixed issue #29 Abstract Interface Should not be Allowed in RedundantMod...","...ifier","closed","","ychulovskyy","2014-09-10T20:58:29Z","2014-09-12T22:22:17Z"
"","541","Issue #540 Unable to instantiate RedundantThrows when run checkstyle wit...","...h ""-c sun_checks.xml"" parameter","closed","","ychulovskyy","2014-12-25T18:01:23Z","2014-12-26T05:18:19Z"
"","280","Fixed javadoc issues (strange that project checker didn't catch it durin...","...g verify phase)","closed","","ychulovskyy","2014-09-14T16:12:27Z","2014-09-15T23:36:00Z"
"","431","JUnit Test Case Check compilable UT input and removed odd expected-line ...","...from UT  Author tested Check on noncompilable cases which will never occur, so removed odd parts from UT","closed","","alexkravin","2014-12-03T11:54:47Z","2014-12-11T14:40:39Z"
"","443","Input Import moved to resources-noncompilable as it's used in many UTs, ...","...fixing compilation errors breaks some of them  So, there're to possible ways of solution: 1. Keep it in resources-noncompilable 2. Create several files in current package to satisfy compiler and to not break tests.  What is your proposition?","closed","","alexkravin","2014-12-03T14:20:10Z","2014-12-09T10:44:10Z"
"","456","Redundant Modifier Check fixed bug with warning on final variables in de...","...fault methods  According to issue #364.","closed","","alexkravin","2014-12-05T14:15:24Z","2014-12-11T14:11:03Z"
"","494","Redundant Modifier Check, fixed false-positive Redundant modifier final ...","...error for @SafeVarargs method issue #301   According to #301   Fixed false-positive. Added UT for this case and extended corresponding UT input.","closed","","alexkravin","2014-12-13T12:30:53Z","2014-12-14T12:38:48Z"
"","491","Suppress Warnings Check, fixed bug - annotation param in constant, creat...","...ed UT and input for this case, issue#268  According to #268   Before this fix Check used to work good in Checkstyle-plugin (eclipse), there were no errors or even warnings  on test-input file, after adding UT using this input, tests ran without failures in eclipse too, but there was a failure during maven-test.   The problem was in lack of possible cases in loop's conditions.  Now:  > java -jar checkstyle-6.2-SNAPSHOT-all.jar -c checkstyle.xml src/Test.java  > Starting audit... > Audit done.","closed","","alexkravin","2014-12-12T10:33:39Z","2014-12-18T19:48:27Z"
"","635","Visibility Modifier Check, added option allows public final fields, issu...","...e #61  According to #61   Added option which allows final fields to be public for supporting style of immutable classes, added UT and corresponding input, extended javadoc/xdoc","closed","","alexkravin","2015-02-12T13:36:42Z","2015-02-26T20:36:25Z"
"","640","Suppression Comment Filter, extended docs for messageFormat option, issu...","...e #123  Extended xdoc by one example of messageFormat option usage. Corresponding filter's and Check's config are shown, example of code where current config should affect is shown too, place of Check's violation is commented to make obvious representation for user about option usage.","closed","","alexkravin","2015-02-13T19:24:19Z","2015-02-13T20:40:05Z"
"","460","Issue #66 ParameterNumber check option to ignore methods with an @Overri...","...de","closed","","ychulovskyy","2014-12-06T21:56:16Z","2014-12-24T19:49:52Z"
"","474","Semicolon Between Imports input moved to resources-noncompilable, create...","...d UT for this case as there wasn't one #388   According to https://bugs.eclipse.org/bugs/show_bug.cgi?id=425140 moved this input to resources-noncompilable, seems to be there's bug/feature of javac which lets compile such examples.  Added UT for this case as there wasn't one.","closed","","alexkravin","2014-12-08T12:10:18Z","2014-12-11T14:10:29Z"
"","475","Renamed deprecated class as there's one with same name in other input an...","...d this cause error in eclipse #388","closed","","alexkravin","2014-12-08T22:32:10Z","2014-12-11T14:39:50Z"
"","490","SuppressionsLoaderTest.testLoadFromUrl - fixed fail if internet in unrea...","...chable, now it is skipped in this case issue#94  According to #94   Now testLoadFromUrl skips if executing host is offline.","closed","","alexkravin","2014-12-12T09:27:22Z","2014-12-12T23:23:21Z"
"","681","Issue #572 BooleanExpressionComplexity misidentifies integer expression ...","...as boolean expression. The fix will ignore &,| and ^ only, since only they can be used with non boolean variables.","closed","","ychulovskyy","2015-02-25T00:39:08Z","2015-02-25T23:35:23Z"
"","493","Generic Whitespace Check, fixed bug - '>' is followed by an illegal char...","...acter while referencing methods issue #350   According to #350   Check wasn't able to process cases involved in Java8 (in context of Check - method references '::') Added UT for this case. Now Check does not put violation if '>' follows by ':' (it reacts on next character after  generic-end '>'), as found no way of usage generic type (not the object of this type) in ternary operator I don't expect following false-negatives.  ---  This fix changes the same files as #488, so there will be need of merge.","closed","","alexkravin","2014-12-13T11:03:30Z","2014-12-18T19:42:03Z"
"","500","Need Braces, added option which allows one line if-statements without br...","...aces, issue #300  According to #300   Added option which allows one line if statements without braces. Added UT and corresponding input containing such cases. Updated JavaDoc","closed","","alexkravin","2014-12-14T17:36:03Z","2014-12-18T19:40:34Z"
"","690","Generic Whitespace Check, updated method references processing, issue #6...","...77  According to #677   Fixed false-positive in case if generic's end follows with whitespace after method reference, e.g.:  ``` java final Supplier function = Optional::empty; ```  Also updated the Check so it warns if in such case generic will be followed by whitespace:  ``` java final Supplier function = Optional:: empty; // warn here ```","closed","","alexkravin","2015-02-28T12:40:15Z","2015-03-03T21:12:40Z"
"","761","Final Local Variable Name Check, fixed bug with lambda's params, issue #...","...747  According to #747   Fixed bug with lambda's param, added UT and corresponding input.","closed","","alexkravin","2015-03-12T19:16:54Z","2015-03-16T03:45:24Z"
"","648","FOR_EACH_CLAUSE variable is not declared final","...69939c84cd69cd/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFinalLocalVariable.java#L134 should be declared final.  ``` FinalLocalVariableCheck.java is not checking for this variable (because it is not checking for FOR_EACH_CLAUSE variable). following is the line of code:  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java#L112  so, I remove this line. as there is not any conflict with removing this line.  now there are many places where FOR_EACH_CLAUSE variable is not declared final in source code. so I changed it. ```","closed","","Bhavik3","2015-02-16T17:51:22Z","2015-03-06T06:37:32Z"
"","498","No Whitespace After Check - added support of array declarations, issue #...","...68  According to #68   Added support of array declarations.  Added UT for such cases and corresponding input. Updated JavaDoc.  As arrays can be declared in both, Java and C style, e.g.: 1. int[] array = { ... }; //Java style 2. int array[] = { ... }; //C style  And both these cases are represented identically in AST, there was a need to make a method checking style of declaration.  Furthermore, return type of methods can be declared in both styles too, e.g.: 1. int[] get(params_list) { return null;} //Java style 2. int get(params_list)[] { return null;} //C style  And in second case Check has to put violation after the end of params list.  All these cases are covered by UT.","closed","","alexkravin","2014-12-14T15:34:56Z","2014-12-18T19:52:02Z"
"","802","Moved all methods from checkstyle.api.utils to checkstyle.utils, issue #...","...661  According to #661   It was more convenient for me to open new PR and left previous commit in new PR referenced to #660   ``` Coverage is configured at pom.xml , please find appropriate lines for that Two utils Classes and change them. ```  Updated, took values for coverage rate from api.Utils line, removed it.","closed","","alexkravin","2015-03-15T13:35:26Z","2015-03-15T21:22:32Z"
"","627","Fixed typo in 'ignoreOverriden' property of IllegalThrowsCheck, issue #6...","...23  Fixed typo.  ignoreOverridenMethods => ignoreOverriddenMethods","closed","","alexkravin","2015-02-09T19:24:58Z","2015-02-10T15:00:51Z"
"","521","Added Ut to show that method call line wrapping now is works correct. #1...","...16","closed","","maxvetrenko","2014-12-19T19:15:06Z","2014-12-24T20:56:16Z"
"","532","Issue #257 RequireThis triggers when try-with-resources defines resource...","... with same name as method","closed","","ychulovskyy","2014-12-21T21:55:42Z","2014-12-24T19:34:41Z"
"","754","Issue #26 SuppressionCommentFilter does not suppress StrictDuplicateCode...","... Warnings","closed","","ychulovskyy","2015-03-11T23:02:14Z","2015-03-19T05:30:59Z"
"","495","Final Local Variable Check, fixed false-positive - native method's param...","... should be declared final, issue #158  According to #158   Fixed false-positive ""Variable should be declared final"" if it is param of native method (this case is similar to abstract methods in context of this Check) 1. Added UT and corresponding input for this case. 2. Extended method inAbstractMethod( ... ) to inAbstractOrNativeMethod( ... ) to let it catch these cases. 3. Added static modifier to inAbstractOrNativeMethod( ... ) to get rid of single warning in Check's class.","closed","","alexkravin","2014-12-14T11:21:40Z","2014-12-16T06:10:50Z"
"","412","Variable Declaration Usage Distance Check compilable UT input (took from...","... sevntu-checks input, already fixed it several months ago)  Compilable UT inputs","closed","","alexkravin","2014-12-02T15:38:22Z","2014-12-11T14:08:05Z"
"","608","Illegal Type Check, updated default illegal types, added memberModifiers...","... option, issue #567   According to #567   Updated default illegal types list and UTs, added information about them to docs.  Added new option memberModifiers which allows to only verify methods and fields with specified access modifiers. It is string array as I think it's more obvious for user to specify option as ""protected, public"" than ""TokenTypes.LITERAL_PROTECTED, TokenTypes.LITERAL_PUBLIC""  Added UT and input for testing sources with new option.","closed","","alexkravin","2015-01-30T12:45:50Z","2015-01-30T23:08:43Z"
"","298","#297 Fixed bug in DefaultComesLast check. Now it supports java 8 default...","... methods.","closed","","sabaka","2014-10-13T19:04:59Z","2014-11-23T22:02:02Z"
"","628","Empty Line Separator Check, fixed Exception if file doesn't have header,...","... issue #621  Fixed exception, created UT for that case, tested Check on guava-19.0 sources, no exceptions occurred.","closed","","alexkravin","2015-02-09T19:41:58Z","2015-02-10T15:03:32Z"
"","641","Linkcheck plugin, excluded broken links until corresponding plugins will...","... be fixed, issue #549   Some parts of links are excluded from verifying in maven-linkcheck-plugin until resolving some bugs in plugins:  1) Excluded page taglist.html until http://jira.codehaus.org/browse/MTAGLIST-69 will be resolved.  2) Excluded links to apidocs until http://jira.codehaus.org/browse/MJAVADOC-425 http://jira.codehaus.org/browse/MLINKCHECK-21 http://jira.codehaus.org/browse/DOXIA-525 will be resolved.  3) Excluded one link to http://docs.oracle.com/javase/7/docs/api/org/xml/sax/helpers.DefaultHandler.html as it's broken due to javadoc generation until http://jira.codehaus.org/browse/MJAVADOC-425 will be resolved  My test project where these problems were analyzed within Checkstyle project: https://github.com/alexkravin/linkstest  In all issues except for maven-javadoc-plugin steps of reproducing the problems are shown with test project. In issue against javadoc-plugin these steps are shown with Checkstyle project itself because most of problems are with this plugin and I could lose some cases pointing at test project.","closed","","alexkravin","2015-02-13T22:58:31Z","2015-02-13T23:17:55Z"
"","626","Linkcheck plugin, excluded broken links until corresponding plugins will...","... be fixed, issue #549  According to #549   Detailed analyze of the problem in links determined that most of problems are not on our side (such problems are already fixed), so due to these problems I have opened 3 issues on:  1) maven-javadoc-plugin, which uses outdated doxia's version: http://jira.codehaus.org/browse/MJAVADOC-425 2) maven-linkcheck-plugin: http://jira.codehaus.org/browse/MPLINKCHECK-32 3) doxia, which renders links in velocity templates very weird (for example it break parentheses): http://jira.codehaus.org/browse/DOXIA-525  Until these issues will be resolved - corresponding links are excluded, after updating of plugins and testing they will be returned on their places.  List of excluded links:  1) Links to javadoc methods in apidocs (spaces in links are not supported by linkcheck-plugin) 2) http://docs.oracle.com/javase/7/docs/api/org/xml/sax/helpers/DefaultHandler.html?is-external=true from AbtractLoader class which is mostly used in filters, maven-javadoc-plugin generates links on filters package, e.g. http://alexkravin.github.io/linkcheck/apidocs/com/puppycrawl/tools/checkstyle/filters/package-tree.html and specifies links from inherited classes too, as you can see link to Default handler is broken http://docs.oracle.com/javase/7/docs/api/org/xml/sax/helpers.DefaultHandler.html?is-external=true  all other links to classes at docs.oracle/... are ok.  3) Links to xref-sources. We use the last version of jxr plugin (2.4), but links are broken, e.g.: ./xref/com/puppycrawl/tools/checkstyle/api/FullIdent.html#91 should be ./xref/com/puppycrawl/tools/checkstyle/api/FullIdent.html#L91  The same problem we can see here http://maven.apache.org/plugins/maven-checkstyle-plugin/taglist.html Just click to any line number - it won't redirect you to proper line in xref-sources. I think this problem is in scope of maven-linkcheck-plugin too  Current Linkcheck report: http://alexkravin.github.io/currentlinks/linkcheck.html there're some errors, but all of them are of 2 types: 1) Timeout 2000ms (my connection is not fast enough) 2) 403 forbidden - that's because of my location.","closed","","alexkravin","2015-02-09T15:27:13Z","2015-02-13T22:48:01Z"
"","544","Added option to Illegal Throws Check due to twitter custom checks, issue...","... #430   According to #430   Added feature introduced in twitter checks: https://github.com/twitter/commons/tree/master/src/java/com/twitter/common/checkstyle  as new option of Illegal Throws Check, added UT and corresponding input, updated javadoc and xml file responsible for html site.","closed","","alexkravin","2014-12-25T22:54:49Z","2014-12-29T22:44:08Z"
"","478","Unused Imports Check created separate compilable UT based on InputImport...","... #388","closed","","alexkravin","2014-12-09T10:34:09Z","2014-12-11T14:08:48Z"
"","476","Avoid Static Import Check created separate UT input based on InputImport...","... #388","closed","","alexkravin","2014-12-09T09:37:16Z","2014-12-11T14:43:26Z"
"","604","TreeWalker update, logging warning if AcceptableTokens are broken, issue...","... #342  According to #342   I investigated registerCheck() method and found no problems with getAcceptableTokens(), by default it's copy of getDefaultTokens() array, but if it's specified in Check - it will get corresponding values, but there was a comment after checking input token for acceptableTokens accessory   ``` //TODO: else log warning ```  So, if acceptableTokens are broken - there's need to put a violation - in that case there's explicit throwing of IllegalArgumentException which is handled on the next line and rethrown as CheckstyleException (before this update CheckstyleException could be thrown only in case if   ``` java final int tokenId = TokenTypes.getTokenId(token); ```  threw IllegalArgumentException, it is possible only if there's no such token at all).  Updated UT for AbbreviationAsWordInNameCheck: there're passing the ENUM_CONSTANT_DEF token in several UTs, but there's no corresponding support in Check's code and even in test inputs, so instead of adding it to defaultTokens array just removed from UTs as it wasn't covered, perhaps there is some special meaning, if so - explain me, please and I'll look for a better way of solution.","closed","","alexkravin","2015-01-28T15:05:08Z","2015-02-08T21:46:42Z"
"","140","Enable array initialisation indentation settings","- created new 'arrayInitIndent' property to set   different indentation than basic offset","closed","","VaclavChalupa","2014-05-05T10:58:09Z","2014-08-02T15:07:50Z"
"","282","Java 8 static interface methods not recognized properly","(Java 8 - sabaka gsoc branch)  Static interface methods are not recognized properly:  ``` public interface B {   static int f() {     int someName = 5;     return someName;   } } ```  complains with:  Redundant 'static' modifier. Name 'someName' must match pattern '^[A-Z][A-Z0-9]_(_[A-Z0-9]+)_$'.","closed","","ikabiljo","2014-09-17T00:43:37Z","2014-10-11T05:48:59Z"
"","281","Indentation properties not applied properly to lambdas","(Java 8 - sabaka gsoc branch)  Indentation properties don't seem to be applied properly to lambdas. For example, if I change indentation to 2, with:   ```                                         ```  It complains for the following code:  ``` public class A {   void function(Runnable x) {     Runnable r = () -> {       x.run();       x.run();     };   } } ```  wanting lambda to be 4 spaces indented:  block child at indentation level 6 not at correct indentation, 8 block child at indentation level 6 not at correct indentation, 8 block rcurly at indentation level 4 not at correct indentation, 6","closed","indentation,","ikabiljo","2014-09-17T00:42:32Z","2019-04-20T15:53:25Z"
"","284","Java 8 default method out of order","(Java 8 - https://github.com/sabaka/checkstyle/tree/gsoc branch)  For code:  ``` public interface NoCmp extends Comparator {   @Override   default int compare(Integer a, Integer b) {    return 0;   } } ```  checkstyle complains with: 'default' modifier out of order with the JLS suggestions.","closed","approved,","ikabiljo","2014-09-17T18:49:59Z","2014-10-14T05:58:07Z"
"","962","Fix PMD violations from ExceptionAsFlowControl rule in Checkstyle","> Using Exceptions as form of flow control is not recommended as they obscure true exceptions when debugging. Either add the necessary validation or use an alternate control structure.  Follow-up to #872.  Violations:  ``` com.puppycrawl.tools.checkstyle.ConfigurationLoader:344 Rule:ExceptionAsFlowControl Priority:3 Avoid using exceptions as flow control.. com.puppycrawl.tools.checkstyle.ConfigurationLoader:344 Rule:ExceptionAsFlowControl Priority:3 Avoid using exceptions as flow control.. com.puppycrawl.tools.checkstyle.PackageObjectFactory:142 Rule:ExceptionAsFlowControl Priority:3 Avoid using exceptions as flow control.. com.puppycrawl.tools.checkstyle.PackageObjectFactory:147 Rule:ExceptionAsFlowControl Priority:3 Avoid using exceptions as flow control.. com.puppycrawl.tools.checkstyle.filters.SuppressionsLoader:177 Rule:ExceptionAsFlowControl Priority:3 Avoid using exceptions as flow control.. com.puppycrawl.tools.checkstyle.filters.SuppressionsLoader:177 Rule:ExceptionAsFlowControl Priority:3 Avoid using exceptions as flow control.. ```","closed","approved,","mkordas","2015-04-23T16:38:21Z","2015-06-04T01:26:18Z"
"","949","Fix PMD violations from SimplifyStartsWith rule in Checkstyle","> Since it passes in a literal of length 1, this call to String.startsWith can be rewritten using String.charAt(0) to save some time.  Part of #942.","closed","approved,","mkordas","2015-04-19T14:45:19Z","2015-05-03T18:32:03Z"
"","948","Fix PMD violations from PrematureDeclaration rule in Checkstyle","> Checks for variables that are defined before they might be used. A reference is deemed to be premature if it is created right before a block of code that doesn't use it that also has the ability to return or throw an exception.  Part of #942.","closed","approved,","mkordas","2015-04-19T14:43:42Z","2015-05-13T16:58:42Z"
"","960","Fix PMD violations from AvoidThrowingNullPointerException rule in Checkstyle","> Avoid throwing NullPointerExceptions. These are confusing because most people will assume that the virtual machine threw it. Consider using an IllegalArgumentException instead; this will be clearly seen as a programmer-initiated exception.  Follow-up to #872.  Violations:  ``` com.puppycrawl.tools.checkstyle.api.AnnotationUtility:94 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. com.puppycrawl.tools.checkstyle.api.AnnotationUtility:139 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. com.puppycrawl.tools.checkstyle.api.AnnotationUtility:143 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. com.puppycrawl.tools.checkstyle.api.AnnotationUtility:182 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. com\puppycrawl\tools\checkstyle\api\JavadocTagInfo.java:569 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. com\puppycrawl\tools\checkstyle\api\JavadocTagInfo.java:593 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck$ClassInfo:444 Rule:AvoidThrowingNullPointerException Priority:1 Avoid throwing null pointer exceptions.. ```","closed","approved,","mkordas","2015-04-23T16:38:00Z","2015-05-01T16:27:40Z"
"","961","Fix PMD violations from AvoidThrowingRawExceptionTypes rule in Checkstyle","> Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.  Follow-up to #872.  Violations:  ``` com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck:299 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. com.puppycrawl.tools.checkstyle.checks.ClassResolver:179 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:270 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:321 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:685 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:68 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:169 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:174 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory:177 Rule:AvoidThrowingRawExceptionTypes Priority:1 Avoid throwing raw exception types.. ```","closed","approved,","mkordas","2015-04-23T16:38:12Z","2015-10-06T23:58:54Z"
"","959","Fix PMD violations from AvoidCatchingGenericException rule in Checkstyle","> Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block  Follow-up to #872.  Violations:  ``` com.puppycrawl.tools.checkstyle.CheckStyleTask:380 Rule:AvoidCatchingGenericException Priority:3 Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block. com.puppycrawl.tools.checkstyle.Checker:184 Rule:AvoidCatchingGenericException Priority:3 Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block. com.puppycrawl.tools.checkstyle.Main:152 Rule:AvoidCatchingGenericException Priority:3 Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block. com.puppycrawl.tools.checkstyle.PropertyCacheFile:200 Rule:AvoidCatchingGenericException Priority:3 Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block. com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:678 Rule:AvoidCatchingGenericException Priority:3 Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block. com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils:81 Rule:AvoidCatchingGenericException Priority:3 Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block. ```","closed","approved,","mkordas","2015-04-23T16:36:53Z","2015-06-28T17:14:26Z"
"","993","Fix AnnotationLocation violation in Checkstyle codebase, issue #945","#994 is about unignoring the test.","closed","","mkordas","2015-04-26T14:42:09Z","2015-04-27T21:14:01Z"
"","661","move all methods from checkstyle.api.Utils to checkstyle.Utils","#660 should be resolved first.  Util methods implementations are not api, it is not contract. Signature of methods could be contract/api but not a reallization.  Please move all methods as is ( without changes) out of api package to com/puppycrawl/tools/checkstyle/Utils.java.  It is required to analyse sources of all know plugins on the usage api.Utils class and provide report on that, all affcted prpojects should be notified.","closed","approved,","romani","2015-02-21T00:31:27Z","2015-03-15T21:22:51Z"
"","72","Fixes for Sonar-found problems in checkstye codebase","#46 issue for the reference.","closed","","isopov","2013-12-05T17:15:19Z","2014-08-16T16:55:35Z"
"","214","Fixed false positive. #213","#213","closed","","maxvetrenko","2014-07-30T20:34:56Z","2019-04-08T21:19:40Z"
"","867","Update Maven Compiler Plugin to 3.3","##### Release Notes  Bug: - [MCOMPILER-223] - Move to a non-ancient maven-toolchain dependency  Improvements: - [MCOMPILER-237] - Upgrade to Maven 2.2.1 compatiblity - [MCOMPILER-238] - Upgrade to maven-plugins parent version 27 - [MCOMPILER-239] - Upgrade maven-shared-utils to 0.7 - [MCOMPILER-241] - Upgrade plexus-compiler-api to 2.5","closed","","mkordas","2015-03-28T22:04:06Z","2015-03-28T22:25:30Z"
"","621","EmptyLineSeparator fails with ArrayIndexOutOfBoundsException if file doesn't have header","##### Description  [EmptyLineSeparator](http://checkstyle.sourceforge.net/config_whitespace.html#EmptyLineSeparator) check with new option `allowMultipleEmptyLines` set to `false` fails with `java.lang.ArrayIndexOutOfBoundsException: -2` on input without comment in header. ##### Failing input  ``` java package com.puppycrawl.tools.checkstyle.whitespace;  class A {}; ``` ##### Workaround  Put to every file in project some header before package declaration:  ``` java //HEADER//  package com.puppycrawl.tools.checkstyle.whitespace;  class A {}; ``` ##### Stacktrace  ``` java.lang.ArrayIndexOutOfBoundsException: -2     at com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck.isPrePreviousLineEmpty(EmptyLineSeparatorCheck.java:274)     at com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck.visitToken(EmptyLineSeparatorCheck.java:250)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:460)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:553)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:385)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:216)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:271)     at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:119)     at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:106)     at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:93)     at com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheckTest.testMultipleEmptyLinesBetweenClassMembers(EmptyLineSeparatorCheckTest.java:77) ``` ##### Root cause  Problem is visible below. Array should not be accessed if `lineNo` < 3:  ``` java  private boolean isPrePreviousLineEmpty(DetailAST token)  {     final int lineNo = token.getLineNo();     // 3 is the number of the pre-previous line because the numbering starts from zero.     final int number = 3;     final String prePreviousLine = getLines()[lineNo - number];     return prePreviousLine.trim().isEmpty(); } ```","closed","approved,","mkordas","2015-02-07T19:48:19Z","2015-02-10T15:03:47Z"
"","706","EmptyLineSeparator fails on multiple imports or fields","##### Description  [EmptyLineSeparator](http://checkstyle.sourceforge.net/config_whitespace.html#EmptyLineSeparator) check with new option `allowMultipleEmptyLines` set to `false` fails when there is  more than 1 import in file or there are consecutive fields in file and `allowNoEmptyLineBetweenFields` is set to `true`. ##### Configuration used  Checkstyle 6.4 and the following check:  ``` xml         ``` ##### Input file  ``` java package com.puppycrawl.tools.checkstyle.whitespace;  import java.util.Calendar; import java.util.Date; // 4: 'import' has more than 1 empty lines before  public class InputEmptyLineSeparatorCheckMultipleImportsAndFields {     Date date;     Calendar calendar; // 9: 'VARIABLE_DEF' should be separated from previous statement } ``` ##### Expected  No violations reported for the input file.","closed","approved,","mkordas","2015-03-01T18:36:35Z","2015-03-10T19:59:15Z"
"","836","Add logging to empty catch blocks to fix PMD violations, issue #744","#### Use Guava Closeables to manage closing exceptions  > While it's not safe in the general case to ignore exceptions that are thrown when closing an I/O resource, it should generally be safe in the case of a resource that's being used only for reading, such as a Reader. Unlike with writable resources, there's no chance that a failure that occurs when closing the reader indicates a meaningful problem such as a failure to flush all bytes to the underlying resource.  `Reader` and `InputStream` instances are closed using `Closeables.closeQuietly()`, while `RandomAccessFile` is closed with `Closeables.close()` that throws `IOException` and needs to be handled.  From Javadoc:  > ``` java > public static void close(@Nullable >          Closeable closeable, >          boolean swallowIOException) >                   throws IOException > ``` >  > Closes a Closeable, with control over whether an IOException may be thrown. This is primarily useful in a finally block, where a thrown exception needs to be logged but not propagated (otherwise the original exception will be lost). > If swallowIOException is true then we never throw IOException but merely log it. >  > Example: >  > ``` java >    public void useStreamNicely() throws IOException { >      SomeStream stream = new SomeStream(""foo""); >      boolean threw = true; >      try { >        // ... code which does something with the stream ... >        threw = false; >      } finally { >        // If an exception occurs, rethrow it only if threw==false: >        Closeables.close(stream, threw); >      } >    } > ```  Moreover, `Closeables.close()` and  `Flushables.flush()` are used to flush and close `OutputStream`. #### Add logging to empty catch blocks to fix PMD violations, issue #744  All violations of PMD rule [EmptyCatchBlock](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/empty.html#EmptyCatchBlock) are fixed by logging exceptions. #### Add unit tests for class base name util to improve coverage  Just to bump up coverage in `Utils` that was reduced by removing code. #### General information  After this pull request will be merged, PMD report on Checkstyle's site won't generate anymore, as all violations are fixed. Then I'm going to bind PMD to `verify` or earlier phase to get fast feedback.","closed","","mkordas","2015-03-22T12:52:37Z","2015-03-26T22:36:03Z"
"","816","Update maven-javadoc-plugin to 2.10.2","#### Release Notes - Maven JavaDoc Plugin - Version 2.10.2  Bug: - [MJAVADOC-365] - [Patch] sourceFileExcludes does not work due to inclusion of packages  Improvements: - [MJAVADOC-415] - Update plexus-archiver to 2.6.3 and p-utils to 3.0.18 - [MJAVADOC-417] - Update version of plexus-archive from 2.5 to 2.9","closed","approved,","mkordas","2015-03-18T21:22:55Z","2015-04-10T17:24:31Z"
"","737","Update Maven JAR Plugin to 2.6, issue #644","### Release Notes (2015-03-09)  Bugs: - [MJAR-135] - encoding problem with folder-names - [MJAR-151] - Error assembling JAR on OS X - [MJAR-179] - Adding empty files to jar failed with a ZipException : bad CRC checksum - [MJAR-185] - Update version of plexus-archiver to 2.7.1 - [MJAR-188] - maven-jar-plugin is very slow on machines with slow Unix group lookups - [MJAR-189] - Upgrade plexus-archiver dependency to v2.9  Improvements: - [MJAR-178] - Change information on site - [MJAR-180] - Upgrade to Maven 2.2.1 compatiblity - [MJAR-181] - MavenProject/MavenSession Injection as a paremeter instead as a component. - [MJAR-182] - Update version of plexus-archiver to 2.6.3 - [MJAR-184] - Update version of plexus-archiver to 2.7 - [MJAR-186] - Upgrade maven-plugins-testing-harness from 1.2 to 1.3 - [MJAR-187] - Upgrade maven-archiver to 2.6 - [MJAR-190] - Upgrade to maven-plugins version 25 to 26 - [MJAR-191] - Upgrade to maven-plugins parent version 27","closed","","mkordas","2015-03-10T12:03:58Z","2015-03-10T14:45:37Z"
"","887","Resize and move RSS icon used on main page, issue #886","### Before:  ![image](https://cloud.githubusercontent.com/assets/5467276/6886277/4a948778-d637-11e4-8df0-8308480ac174.png) ### After:  ![image](https://cloud.githubusercontent.com/assets/5467276/6887115/532fefb2-d655-11e4-8e02-22f621d86369.png)","closed","","mkordas","2015-03-29T15:17:17Z","2015-04-06T20:47:02Z"
"","258","'Variable should be declared final' reported for variables which cannot be declared final.","# /tmp/checkstyle.xml  ```                             ``` # /tmp/Test.java  ``` public class Test {      public void method()     {         final java.util.List list = new java.util.ArrayList();          for ( int i = 0, s0 = list.size(); i < s0; i++ )         {         }     }  } ``` # Invocation  ``` java -Duser.language=en -cp checkstyle-5.7-all.jar com.puppycrawl.tools.checkstyle.Main -c /tmp/checkstyle.xml /tmp/Test.java ``` # Report  ``` Starting audit... /tmp/Test.java:12:26: Variable 's0' should be declared final. Audit done. ```  There is no way to declare variable 's0' final other than moving it out of the 'for' loop scope.","closed","approved,","ChristianSchulte","2014-08-21T17:45:04Z","2015-02-19T06:07:51Z"
"","805","Exception from cobertura plugin during maven site generation","""mvn clean site""  that is caused by some latest updates, I do not remember that ERROR few day ago.  ``` [ERROR] Mar 15, 2015 8:52:57 PM net.sourceforge.cobertura.coveragedata.CoverageDataFileHandler loadCoverageData INFO: Cobertura: Loaded information on 353 classes. net.sourceforge.cobertura.javancss.parser.ParseException: Encountered "" ""final"" ""final """" at line 277, column 14. Was expecting one of:     ""assert"" ...     ""boolean"" ...     ""byte"" ...     ""char"" ...     ""double"" ...     ""enum"" ...     ""false"" ...     ""float"" ...     ""int"" ...     ""long"" ...     ""new"" ...     ""null"" ...     ""short"" ...     ""super"" ...     ""this"" ...     ""true"" ...     ""void"" ...      ...      ...      ...      ...      ...     ""("" ...     "")"" ...     ""!"" ...     ""~"" ...     ""++"" ...     ""--"" ...     ""+"" ...     ""-"" ...      at net.sourceforge.cobertura.javancss.parser.JavaParser.generateParseException(JavaParser.java:11869)     at net.sourceforge.cobertura.javancss.parser.JavaParser.jj_consume_token(JavaParser.java:11730)     at net.sourceforge.cobertura.javancss.parser.JavaParser.TryWithResources(JavaParser.java:4618)     at net.sourceforge.cobertura.javancss.parser.JavaParser.TryStatement(JavaParser.java:4533)     at net.sourceforge.cobertura.javancss.parser.JavaParser.Statement(JavaParser.java:3754)     at net.sourceforge.cobertura.javancss.parser.JavaParser.BlockStatement(JavaParser.java:3906)     at net.sourceforge.cobertura.javancss.parser.JavaParser.Block(JavaParser.java:3855)     at net.sourceforge.cobertura.javancss.parser.JavaParser.MethodDeclaration(JavaParser.java:1933)     at net.sourceforge.cobertura.javancss.parser.JavaParser.ClassBodyDeclaration(JavaParser.java:1012)     at net.sourceforge.cobertura.javancss.parser.JavaParser.ClassBody(JavaParser.java:874)     at net.sourceforge.cobertura.javancss.parser.JavaParser.UnmodifiedClassDeclaration(JavaParser.java:801)     at net.sourceforge.cobertura.javancss.parser.JavaParser.ClassDeclaration(JavaParser.java:706)     at net.sourceforge.cobertura.javancss.parser.JavaParser.TypeDeclaration(JavaParser.java:555)     at net.sourceforge.cobertura.javancss.parser.JavaParser.CompilationUnit(JavaParser.java:303)     at net.sourceforge.cobertura.javancss.parser.JavaParser.parse(JavaParser.java:100)     at net.sourceforge.cobertura.javancss.Javancss._measureSource(Javancss.java:192)     at net.sourceforge.cobertura.javancss.Javancss._measureRoot(Javancss.java:268)     at net.sourceforge.cobertura.javancss.Javancss.(Javancss.java:346)     at net.sourceforge.cobertura.reporting.ComplexityCalculator.getAccumlatedCCNForSource(ComplexityCalculator.java:105)     at net.sourceforge.cobertura.reporting.ComplexityCalculator.getAccumlatedCCNForSingleFile(ComplexityCalculator.java:143)     at net.sourceforge.cobertura.reporting.ComplexityCalculator.getCCNForSourceFileNameInternal(ComplexityCalculator.java:234)     at net.sourceforge.cobertura.reporting.ComplexityCalculator.getCCNForPackageInternal(ComplexityCalculator.java:201)     at net.sourceforge.cobertura.reporting.ComplexityCalculator.getCCNForProject(ComplexityCalculator.java:167)     at net.sourceforge.cobertura.reporting.html.HTMLReport.generateTableRowForTotal(HTMLReport.java:603)     at net.sourceforge.cobertura.reporting.html.HTMLReport.generateOverview(HTMLReport.java:287)     at net.sourceforge.cobertura.reporting.html.HTMLReport.generateOverviews(HTMLReport.java:228)     at net.sourceforge.cobertura.reporting.html.HTMLReport.(HTMLReport.java:71)     at net.sourceforge.cobertura.reporting.Main.parseArguments(Main.java:103)     at net.sourceforge.cobertura.reporting.Main.main(Main.java:169) ```","closed","approved,","romani","2015-03-16T05:05:26Z","2015-03-21T15:17:37Z"
"","795","Add license badge to README","![image](https://cloud.githubusercontent.com/assets/5467276/6655392/8ac83c74-caff-11e4-95ea-01050236b8d0.png)","closed","","mkordas","2015-03-15T09:39:40Z","2015-04-27T21:14:47Z"
"","777","Add link to Sonar to project reports","![image](https://cloud.githubusercontent.com/assets/5467276/6649517/307108fa-c9ec-11e4-8235-fd7899c66588.png)","closed","","mkordas","2015-03-14T00:48:28Z","2015-04-27T21:14:47Z"
"","772","Add CPD report to the site","![image](https://cloud.githubusercontent.com/assets/5467276/6649279/cdd78020-c9e6-11e4-90d0-e22ec9fd630f.png)","closed","","mkordas","2015-03-14T00:09:56Z","2015-04-27T21:14:55Z"
"","794","Add link to Github on Project Team page, issue #742","![image](https://cloud.githubusercontent.com/assets/5467276/6647141/8c357a84-c9cb-11e4-86a8-635c53e4b27c.png)","closed","","mkordas","2015-03-15T08:19:14Z","2015-04-27T21:14:47Z"
"","1000","Repair ignored test, issue #994","","closed","","mkordas","2015-04-26T17:22:53Z","2015-04-27T21:14:00Z"
"","988","Fix PMD violations from 'javabeans' ruleset in Checkstyle, issue #987","","closed","","mkordas","2015-04-24T22:18:51Z","2015-04-27T21:14:03Z"
"","986","Fix PMD violations from 'naming' ruleset in Checkstyle","","closed","","mkordas","2015-04-24T21:08:00Z","2015-04-25T23:32:41Z"
"","981","Fix AvoidStaticImport check violations in codebase, issue #979","","closed","","mkordas","2015-04-24T19:00:24Z","2015-04-26T00:43:17Z"
"","980","Fix AtclauseOrder check violations in codebase, issue #978","","closed","","mkordas","2015-04-24T18:59:46Z","2015-04-27T21:14:02Z"
"","972","Extend LeftCurly check to verify static initializers, issue #966","","closed","","mkordas","2015-04-23T19:44:22Z","2015-04-27T21:14:03Z"
"","971","Extend EmptyBlock check to verify synchronized blocks, issue #964","","closed","","mkordas","2015-04-23T19:13:39Z","2015-04-24T18:40:35Z"
"","963","Fix PMD violations from 'strictexception' ruleset in Checkstyle","","closed","","mkordas","2015-04-23T16:42:47Z","2015-04-23T18:02:47Z"
"","958","Fix typos and formatting in PMD configuration, issue #744","","closed","","mkordas","2015-04-23T06:28:23Z","2015-04-27T21:14:04Z"
"","946","Enable AvoidNestedBlocks check for Checkstyle, issue #945","","closed","","mkordas","2015-04-18T18:35:24Z","2015-04-27T21:14:05Z"
"","944","Fix generics with arrays handling in NoWhitespaceAfter, issue #931","","closed","","mkordas","2015-04-18T00:22:44Z","2015-04-27T21:14:06Z"
"","943","Fix PMD violations from 'optimizations' ruleset in Checkstyle, issue #942","","closed","","mkordas","2015-04-17T23:44:05Z","2015-04-27T21:14:04Z"
"","940","Update Maven Javadoc Plugin to 2.10.3, issue #939","","closed","","mkordas","2015-04-17T05:17:25Z","2015-04-27T21:14:06Z"
"","934","Fix PMD violations from 'sunsecure' ruleset, issue #874","","closed","","mkordas","2015-04-16T11:45:10Z","2015-04-27T21:14:08Z"
"","933","Add test for non existing cache file, issue #921","","closed","","mkordas","2015-04-15T17:03:18Z","2015-04-27T21:14:07Z"
"","932","Fix PMD violations from 'strings' ruleset, issue #873","","closed","","mkordas","2015-04-15T06:33:45Z","2015-04-27T21:14:08Z"
"","920","Fix PMD violations from 'logging-jakarta' ruleset, issue #871","","closed","","mkordas","2015-04-10T22:23:52Z","2015-04-14T06:26:59Z"
"","918","Fix PMD violation from 'migrating' ruleset, issue #869","","closed","","mkordas","2015-04-10T08:01:01Z","2015-04-10T17:22:59Z"
"","917","Fix PMD violations from 'logging-jakarta' ruleset, issue #871","","closed","","mkordas","2015-04-10T06:32:16Z","2015-04-10T08:00:26Z"
"","913","Fix PMD violations from 'braces' ruleset, issue #876","","closed","","mkordas","2015-04-09T06:47:26Z","2015-04-27T21:14:09Z"
"","907","Fix PMD violations from 'typeresolution' ruleset, issue #875","","closed","","mkordas","2015-04-08T19:27:35Z","2015-04-09T17:37:42Z"
"","900","Update Apache Commons Lang to 3.4, issue #899","","closed","","mkordas","2015-04-06T20:55:02Z","2015-04-27T21:15:55Z"
"","884","Add Stackoverflow badge to readme, Issue #880","","closed","","Mebibyte","2015-03-29T07:37:26Z","2015-03-31T00:39:40Z"
"","879","Integrate Gitter with Checkstyle, issue #864","","closed","","mkordas","2015-03-28T23:52:58Z","2015-04-27T21:15:58Z"
"","878","Add more rulesets to PMD configuration, issue #744","","closed","","mkordas","2015-03-28T23:10:07Z","2015-04-27T21:15:59Z"
"","868","Update Maven Compiler Plugin to 3.3, issue #867","","closed","","mkordas","2015-03-28T22:05:05Z","2015-04-27T21:16:00Z"
"","866","Update FindBugs Maven Plugin to 3.0.1, issue #865","","closed","","mkordas","2015-03-28T22:01:19Z","2015-04-27T21:16:00Z"
"","858","Use use Java 7 instead of custom logic for relative paths, issue #857","","closed","","mkordas","2015-03-27T19:00:32Z","2015-04-27T21:15:55Z"
"","856","Token WILDCARD_TYPE was added to WhitespaceAroundCheck, issue #853","","closed","","dlopatin","2015-03-27T14:53:30Z","2015-03-27T15:30:34Z"
"","855","Remove deprecated getLines() methods from Utils, issue #854","","closed","","mkordas","2015-03-26T21:15:28Z","2015-04-27T21:16:00Z"
"","850","Update org.apache.ant:ant-nodeps to 1.8.1, issue #790","","closed","","mkordas","2015-03-25T05:37:26Z","2015-04-27T21:16:01Z"
"","846","Update wagon-ssh to 2.8, issue #790","","closed","","mkordas","2015-03-24T06:21:37Z","2015-04-27T21:16:00Z"
"","841","Invoke private constructors to increase coverage, issue #840","","closed","","mkordas","2015-03-22T21:52:52Z","2015-04-27T21:16:00Z"
"","830","Fix PMD violations and rename method, issue #744","","closed","","mkordas","2015-03-21T00:42:58Z","2015-04-27T21:16:04Z"
"","828","Resolve some of Javadoc problems, issue #291","","closed","","mkordas","2015-03-20T22:40:53Z","2015-03-22T17:19:52Z"
"","822","Update Maven Javadoc Plugin to 2.10.2, issue #816","","closed","","mkordas","2015-03-19T06:02:48Z","2015-03-19T06:28:59Z"
"","793","Add versioneye badge to README.md","","closed","","mkordas","2015-03-15T02:14:08Z","2015-03-15T22:54:28Z"
"","791","Add maven-project-info-reports-plugin to POM, fixes issue #776","","closed","","mkordas","2015-03-15T01:44:53Z","2015-04-27T21:14:48Z"
"","789","Update Maven Surefire Plugin to 2.18.1 for Travis profile, issue #787","","closed","","mkordas","2015-03-15T01:32:39Z","2015-04-27T21:16:04Z"
"","788","Remove duplicate cobertura-maven-plugin declaration","","closed","","mkordas","2015-03-15T01:00:35Z","2015-04-27T21:14:49Z"
"","786","Add test to verify that all checks are present on website, issue #783","","closed","","mkordas","2015-03-15T00:36:50Z","2015-04-27T21:14:47Z"
"","785","Reference OverloadMethodsDeclarationOrder on the Available Checks page, issue #784","","closed","","mkordas","2015-03-14T23:43:41Z","2015-04-27T21:14:50Z"
"","771","Fix letter casing of IntelliJ and page names","","closed","","mkordas","2015-03-13T21:15:43Z","2015-04-27T21:14:56Z"
"","764","IndentationCheck: Incorrect line wrap handling.","","closed","","alex-zuy","2015-03-13T12:15:22Z","2015-03-14T22:40:15Z"
"","757","Automate Code Coverage Validation","","closed","","Bhavik3","2015-03-12T10:37:24Z","2015-06-19T16:26:11Z"
"","753","Fixes for not working links on website","","closed","","mkordas","2015-03-11T21:51:38Z","2015-04-27T21:14:56Z"
"","750","Updated release notes","","closed","","ychulovskyy","2015-03-11T20:30:13Z","2015-03-11T20:52:03Z"
"","746","Update Apache Ant to 1.9.4, issue #736","","closed","","mkordas","2015-03-10T21:42:46Z","2015-04-27T21:14:57Z"
"","741","Fix typo in violation message of ModifierOrder check, issue #740","","closed","","mkordas","2015-03-10T15:00:58Z","2015-03-10T15:06:41Z"
"","732","Fix invalid link in release notes for Checkstyle 6.3, issue #730","","closed","","mkordas","2015-03-09T11:08:55Z","2015-03-10T06:31:51Z"
"","731","Fix code example in HiddenField docs, issue #729","","closed","","mkordas","2015-03-09T10:44:17Z","2015-03-10T06:19:31Z"
"","728","Remove obsolete double spaces","","closed","","mkordas","2015-03-08T23:14:54Z","2015-04-04T23:28:26Z"
"","727","Fix reference to JLS in PackageAnnotation docs, issue #674","","closed","","mkordas","2015-03-08T22:26:19Z","2015-03-10T06:28:03Z"
"","719","Coverage Improvement on FinalLocalVariableCheck","","closed","","Bhavik3","2015-03-06T06:53:48Z","2015-06-19T16:26:34Z"
"","717","Fix typos in release notes for Release 6.4.1","","closed","","mkordas","2015-03-04T16:40:20Z","2015-03-04T21:50:39Z"
"","702","Update maven-shade-plugin to 2.3, issue #644","","closed","","mkordas","2015-03-01T15:18:53Z","2015-03-01T15:50:34Z"
"","701","Update maven-compiler-plugin to 3.2, issue #644","","closed","","mkordas","2015-03-01T15:18:48Z","2015-03-01T15:47:41Z"
"","700","Update maven-antrun-plugin to 1.8, issue #644","","closed","","mkordas","2015-03-01T15:18:43Z","2015-03-01T15:48:29Z"
"","699","Update maven-eclipse-plugin to 2.9, issue #644","","closed","","mkordas","2015-03-01T15:18:38Z","2015-03-07T17:06:12Z"
"","698","Update org.eluder.coveralls:coveralls-maven-plugin to 3.0.1, issue #644","","closed","","mkordas","2015-03-01T15:18:28Z","2015-03-01T15:46:10Z"
"","697","Update maven-gpg-plugin to 1.6, issue #644","","closed","","mkordas","2015-03-01T15:18:22Z","2015-03-01T15:45:11Z"
"","696","Update maven-jar-plugin to 2.5, issue #644","","closed","","mkordas","2015-03-01T15:18:15Z","2015-03-01T15:44:23Z"
"","695","Update maven-assembly-plugin to 2.5.3, issue #644","","closed","","mkordas","2015-03-01T15:18:07Z","2015-03-01T15:39:47Z"
"","694","Fix typos in release notes","","closed","","mkordas","2015-03-01T14:50:43Z","2015-03-01T15:16:44Z"
"","678","Repair typos in UniqueProperties description","","closed","","mkordas","2015-02-24T05:41:50Z","2015-03-01T14:52:45Z"
"","673","Reformat and fix example for AnnotationUseStyle, issue #672","","closed","","mkordas","2015-02-23T17:15:54Z","2015-02-24T05:32:41Z"
"","670","Update org.antlr:antlr4-maven-plugin to 4.5 for issue #644","","closed","","mkordas","2015-02-22T17:20:46Z","2015-03-01T14:53:01Z"
"","669","Update maven-enforcer-plugin to 1.4 for issue #644","","closed","","mkordas","2015-02-22T16:46:11Z","2015-03-01T14:52:55Z"
"","668","Update org.jacoco:jacoco-maven-plugin to 0.7.2 for issue #644","","closed","","mkordas","2015-02-22T16:45:45Z","2015-03-01T14:52:54Z"
"","667","Update maven-surefire-plugin to 2.18.1 for issue #644","","closed","","mkordas","2015-02-22T16:45:05Z","2015-03-01T14:52:59Z"
"","666","Update maven-jxr-plugin to 2.5 for issue #644","","closed","","mkordas","2015-02-22T16:44:46Z","2015-03-01T14:52:55Z"
"","665","Update maven-eclipse-plugin to 2.9 for issue #644","","closed","","mkordas","2015-02-22T16:29:01Z","2015-02-22T16:34:41Z"
"","639","Require at least Maven 3.0.1 to build Checkstyle - fixes #620","","closed","","mkordas","2015-02-13T17:19:56Z","2015-02-22T13:35:31Z"
"","632","#409 Javadoc comments for JAVADOC_TAG and JAVADOC_INLINE_TAG related nodes","","closed","","baratali","2015-02-11T09:16:31Z","2015-07-26T08:39:06Z"
"","630","Fixes #20","","closed","","Bhavik3","2015-02-10T20:12:39Z","2015-02-11T15:51:50Z"
"","624","Fix for typos in documentation","","closed","","mkordas","2015-02-08T19:51:29Z","2015-02-22T13:35:32Z"
"","593","Update FinalLocalVariableCheck.java","","closed","incomplete,","Bhavik3","2015-01-22T10:01:15Z","2015-02-10T18:09:44Z"
"","578","Issue #537 refactored tests from blocks package.","","closed","","ychulovskyy","2015-01-12T20:17:29Z","2015-01-16T18:13:27Z"
"","576","https://github.com/checkstyle/checkstyle/issues/570","","closed","","lkoe","2015-01-11T18:12:26Z","2015-01-13T19:36:30Z"
"","563","Added option to avoid C style. #354","","closed","","maxvetrenko","2015-01-04T19:26:09Z","2015-02-18T19:56:58Z"
"","552","Issue #3 Turn on -r recursive by default","","closed","","ychulovskyy","2014-12-29T18:54:21Z","2014-12-29T22:42:14Z"
"","543","Issue #3 Turn on -r recursive by default","","closed","","ychulovskyy","2014-12-25T18:28:27Z","2014-12-29T18:53:20Z"
"","534","#505 have to be fixed. I moved new tokens to the end of tokens list.","","closed","","sabaka","2014-12-22T21:59:52Z","2015-09-03T23:37:03Z"
"","531","Issue #131 AnnotationUseStyle closingParens check failed","","closed","","ychulovskyy","2014-12-21T20:36:22Z","2014-12-23T00:35:09Z"
"","529","Fix typos in documentation","","closed","","mkordas","2014-12-20T13:12:50Z","2014-12-20T22:33:04Z"
"","528","Fix typos in documentation","","closed","","mkordas","2014-12-20T13:08:57Z","2014-12-20T13:10:08Z"
"","527","Fix typos in documentation","","closed","","mkordas","2014-12-20T12:56:48Z","2014-12-20T13:06:41Z"
"","522","Fixed cases with difficult annotations. #321","","closed","","maxvetrenko","2014-12-19T19:15:21Z","2014-12-24T20:56:32Z"
"","520","Added UT to show that case indent works correct. #79","","closed","","maxvetrenko","2014-12-19T19:14:52Z","2014-12-24T20:55:47Z"
"","519","Created test to show supporting double line wrap indent. #59","","closed","","maxvetrenko","2014-12-19T19:14:40Z","2014-12-24T20:55:35Z"
"","513","fix travis build","","closed","","maxvetrenko","2014-12-18T22:33:02Z","2014-12-18T22:52:19Z"
"","509","google_style wiki was updated.","","closed","","maxvetrenko","2014-12-15T22:16:02Z","2014-12-18T22:52:40Z"
"","504","Fix for typos in documentation","","closed","","mkordas","2014-12-15T17:41:26Z","2014-12-20T22:32:53Z"
"","501","Partial fix for #47 - Reformat of pom.xml to delete tab characters and correct indentation","","closed","","mkordas","2014-12-14T17:59:28Z","2014-12-15T07:45:26Z"
"","499","Partial fix for #47 - Add missing @Override annotations","","closed","","mkordas","2014-12-14T16:19:02Z","2014-12-15T07:44:53Z"
"","497","Update JUnit from 4.11 to 4.12","","closed","","mkordas","2014-12-14T14:14:25Z","2014-12-15T07:44:39Z"
"","496","Fix for typos in Javadoc","","closed","","mkordas","2014-12-14T14:03:12Z","2014-12-15T06:31:46Z"
"","483","Put comments on each input in resources-noncompilable folder","","closed","","alexkravin","2014-12-09T11:26:44Z","2014-12-11T14:43:59Z"
"","471","Javadoc Method Check compilable UT inputs #388","","closed","","alexkravin","2014-12-07T21:13:37Z","2014-12-11T14:39:43Z"
"","470","Javadoc Tag Continuation Indentation Check compilable UT inputs #388","","closed","","alexkravin","2014-12-07T21:13:25Z","2014-12-11T14:39:35Z"
"","469","At Clause Order Check compilable UT inputs #388","","closed","","alexkravin","2014-12-07T21:13:11Z","2014-12-11T14:43:45Z"
"","468","Summary Javadoc Check compilable UT input #388","","closed","","alexkravin","2014-12-07T21:11:14Z","2014-12-11T14:09:37Z"
"","467","Non Empty At Clause Description Check compilable UT inputs","","closed","","alexkravin","2014-12-07T21:11:02Z","2014-12-11T14:14:02Z"
"","466","Abstract Javadoc Check compilable UT input #388","","closed","","alexkravin","2014-12-07T21:10:50Z","2014-12-11T14:33:26Z"
"","465","InputSemantic used in several UTs now compilable #388","","closed","","alexkravin","2014-12-07T14:16:47Z","2014-12-11T14:40:49Z"
"","464","Input Default moved resources-noncompilable #388","","closed","","alexkravin","2014-12-07T14:08:24Z","2014-12-11T14:41:11Z"
"","458","Issue #457 remove JUnitTestCase from Checkstyle","","closed","","ychulovskyy","2014-12-06T19:38:32Z","2014-12-07T17:44:38Z"
"","445","Modified UT to use InputDefaultPackage.java file.","","closed","","maxvetrenko","2014-12-03T19:32:35Z","2014-12-18T22:50:23Z"
"","444","Removed Incompilable unused input","","closed","","alexkravin","2014-12-03T14:20:25Z","2014-12-11T14:08:34Z"
"","439","Java8Annotations moved java8 sources to resources-noncompilable folder","","closed","","alexkravin","2014-12-03T13:27:40Z","2014-12-11T14:40:20Z"
"","438","Java8DefaultMethods#388","","closed","","alexkravin","2014-12-03T13:26:58Z","2014-12-11T14:40:12Z"
"","437","Java 8 Lambda inputs moved to resources-noncompilable folder","","closed","","alexkravin","2014-12-03T13:26:47Z","2014-12-11T14:40:07Z"
"","435","InputGrammar now compilable","","closed","","alexkravin","2014-12-03T12:36:17Z","2014-12-11T14:42:13Z"
"","434","MultiDimensionalArraysInGenericsTest compilable UT input","","closed","","alexkravin","2014-12-03T12:36:05Z","2014-12-11T14:15:50Z"
"","433","Deleted incompilable input which is never used","","closed","","alexkravin","2014-12-03T12:35:50Z","2014-12-11T14:10:41Z"
"","386","Issue #376. Added $ to all identifier definitions","","closed","","baratali","2014-11-24T21:40:43Z","2014-12-03T07:10:02Z"
"","384","Added $ to all identifier definitions in Javadoc grammar. Minor fixes.","","closed","","baratali","2014-11-24T19:05:45Z","2014-11-24T21:29:35Z"
"","381","Additional checks for null of returned ParseTree","","closed","","baratali","2014-11-21T21:47:28Z","2014-11-24T18:16:05Z"
"","380","#9 -v CLI flag for querying the installed Checkstyle version","","closed","","ychulovskyy","2014-11-21T19:52:59Z","2014-11-23T21:55:32Z"
"","379","InnerTypeLast within methods #6","","closed","","ychulovskyy","2014-11-21T18:03:43Z","2014-12-02T15:18:55Z"
"","373","Indentation check fails for switch statements #341","","closed","","maxvetrenko","2014-11-17T17:50:23Z","2014-12-18T22:52:53Z"
"","370","Fixed javadoc in ParagraphJavadocCheck","","closed","","maxvetrenko","2014-11-16T18:14:40Z","2014-12-18T22:51:50Z"
"","369","Fixed javadoc in SummaryJavadocCheck  #365","","closed","","maxvetrenko","2014-11-16T15:00:24Z","2016-05-30T03:31:17Z"
"","368","Fixed javadoc in NonEmptyAtclauseDescription  #365","","closed","","maxvetrenko","2014-11-16T15:00:18Z","2014-12-18T22:51:06Z"
"","367","Fixed javadoc in JavadocTagContinuationIndentationCheck #365","","closed","","maxvetrenko","2014-11-16T14:46:11Z","2014-12-18T22:50:46Z"
"","366","Fixed javadoc in AtclauseOrderCheck #365","","closed","","maxvetrenko","2014-11-16T14:45:59Z","2014-12-18T22:50:12Z"
"","361","Unit tests for JavadocUtils.isJavadocComment()","","closed","","baratali","2014-11-14T09:39:14Z","2014-11-14T15:42:25Z"
"","360","#339 fixed. Generics in postfix expression before method referencec can be parsed now.","","closed","","sabaka","2014-11-13T20:38:36Z","2014-11-23T21:58:14Z"
"","357","#304 fixed. Multidimensional arrays can be parsed now","","closed","","sabaka","2014-11-12T21:10:12Z","2014-11-23T21:58:19Z"
"","338","Documentation error for CustomImportOrder #337","","closed","","maxvetrenko","2014-10-23T15:25:05Z","2014-11-13T19:24:00Z"
"","336","Fix false positives in JavadocParagraphCheck #335","","closed","","maxvetrenko","2014-10-23T13:38:08Z","2014-11-13T19:22:16Z"
"","334","New Check: SingleLineJavadocCheck #332","","closed","","maxvetrenko","2014-10-23T11:24:38Z","2014-11-13T19:22:26Z"
"","329","Update for existing Check: JavadocMethodCheck #319","","closed","","maxvetrenko","2014-10-22T16:58:34Z","2014-11-13T19:21:46Z"
"","328","Update google_checks.xml and minor refactoring. #320","","closed","","maxvetrenko","2014-10-22T15:39:45Z","2014-11-13T19:23:18Z"
"","327","Fix NullPointerException in case package-info.java #326","","closed","","maxvetrenko","2014-10-22T14:13:11Z","2014-11-13T19:18:03Z"
"","324","Fix false positives in JavaDocTagContinuationIndentationCheck #323","","closed","","maxvetrenko","2014-10-22T13:33:22Z","2014-11-13T19:19:25Z"
"","318","Fix build crash after manual merge. #317","","closed","","maxvetrenko","2014-10-21T07:32:33Z","2014-11-13T19:24:09Z"
"","314","AtclauseOrderCheck #306","","closed","","maxvetrenko","2014-10-20T20:23:43Z","2014-11-13T19:23:32Z"
"","313","SummaryJavaDocCheck #307","","closed","","maxvetrenko","2014-10-20T19:54:08Z","2014-11-13T19:33:56Z"
"","312","JavaDocTagСontinuationIndentation #308","","closed","","maxvetrenko","2014-10-20T19:16:09Z","2014-11-13T19:23:49Z"
"","311","NonEmptyAtclauseDescriptionCheck #309","","closed","","maxvetrenko","2014-10-20T18:05:31Z","2014-11-13T19:24:24Z"
"","303","AnnotationLocationCheck fixed. #302","","closed","","maxvetrenko","2014-10-15T20:24:42Z","2014-10-20T14:26:24Z"
"","299","Fixed IndexOutOfBoundsException in CustomImportOrderCheck #296","","closed","","maxvetrenko","2014-10-14T00:13:28Z","2014-10-19T09:23:28Z"
"","295","Update for IndentationCheck. #294","","closed","","maxvetrenko","2014-10-11T11:42:16Z","2014-10-19T09:23:35Z"
"","293","Correct OverloadMethodsDeclarationOrder name","","closed","","gaul","2014-10-09T03:40:34Z","2015-05-03T09:39:39Z"
"","290","Investigated conflict into MemberNameCheck. Added inputs.","","closed","","maxvetrenko","2014-10-05T15:04:21Z","2014-10-19T09:23:49Z"
"","287","Fix typo in checks/coding/message_de.properties","","closed","","janschaefer","2014-09-28T09:38:49Z","2014-09-29T08:07:43Z"
"","283","Implemented #98 Add ignore option to the JavadocVariable check","","closed","","ychulovskyy","2014-09-17T17:46:28Z","2014-09-23T03:56:49Z"
"","279","Implemented #98 Add ignore option to the JavadocVariable check","","closed","","ychulovskyy","2014-09-13T18:25:34Z","2014-09-17T17:46:46Z"
"","278","Fixed issue #105 WhitespaceAroundCheck: fix for anonymous inner class","","closed","","ychulovskyy","2014-09-13T14:59:06Z","2014-09-14T14:18:04Z"
"","275","MemberNameCheck should not validate interface constants, that's ConstantNameCheck's role","","closed","","sdumitriu","2014-09-10T19:00:01Z","2014-09-12T23:37:05Z"
"","273","Issue 134: Exception thrown when parsing numeric constant ""3.14_15F""","","closed","","ychulovskyy","2014-09-08T21:48:21Z","2014-09-08T22:22:05Z"
"","269","point 6.2 in wiki page was updated","","closed","","maxvetrenko","2014-09-04T13:49:25Z","2014-09-05T18:48:24Z"
"","267","point 2.2 in Wiki page was updated","","closed","","maxvetrenko","2014-09-03T17:06:52Z","2014-09-03T17:31:51Z"
"","266","Updated Wiki page, point 2.2","","closed","","maxvetrenko","2014-09-03T10:57:24Z","2014-09-03T17:06:17Z"
"","264","Javadoc in GenericWhitespaceCheck was updated #254","","closed","","maxvetrenko","2014-08-27T13:51:16Z","2014-08-30T15:19:44Z"
"","263","Generic whitespace update","","closed","","maxvetrenko","2014-08-27T13:43:30Z","2014-08-27T13:50:31Z"
"","262","Google Java Style xml configuration was added.","","closed","","maxvetrenko","2014-08-26T18:10:00Z","2014-08-30T15:19:29Z"
"","259","minor documentation fixes (broken link, package names)","","closed","","tsjensen","2014-08-22T17:12:35Z","2014-08-23T22:09:46Z"
"","252","RightCurly. Force line break before '}' in case SAME option. #250","","closed","","maxvetrenko","2014-08-13T22:55:07Z","2014-08-26T18:08:11Z"
"","251","Left curly update. Force line break #247","","closed","","maxvetrenko","2014-08-13T11:36:16Z","2014-08-13T22:00:14Z"
"","249","OuterTypeFilenameCheck. Update Check logic #248","","closed","","maxvetrenko","2014-08-13T11:18:44Z","2014-08-13T22:00:27Z"
"","245","Update for MemberNameCheck #244","","closed","","maxvetrenko","2014-08-12T13:43:59Z","2014-08-13T11:16:13Z"
"","243","Fixed mistakes in Javadoc comments","","closed","","baratali","2014-08-12T07:43:33Z","2014-10-11T14:14:14Z"
"","242","Fix NPE in AbbreviationAsWordInNameCheck #241","","closed","","maxvetrenko","2014-08-11T13:29:51Z","2014-08-12T12:50:50Z"
"","240","VariableDeclarationUsageDistanceCheck was update.","","closed","","maxvetrenko","2014-08-11T11:42:57Z","2014-08-12T12:50:19Z"
"","238","Fix false positive with ANNOTATION_DEF #237","","closed","","maxvetrenko","2014-08-11T10:23:00Z","2014-08-12T12:50:00Z"
"","236","Fixed TODO need to handle LITERAL_SWITCH #235","","closed","","maxvetrenko","2014-08-10T21:46:56Z","2014-08-12T12:49:25Z"
"","232","CustomImportOrder was introduced #231","","closed","","maxvetrenko","2014-08-09T23:39:08Z","2014-08-12T12:51:00Z"
"","230","Fixed 2 syntax errors in config_coding.xml .","","closed","","broo2s","2014-08-09T19:53:25Z","2014-08-09T20:18:24Z"
"","229","Update for EmptyLineSeparatorCheck #227","","closed","","maxvetrenko","2014-08-08T19:14:05Z","2014-08-12T12:51:11Z"
"","225","OverrideMethodsDeclarationOrderCheck #32","","closed","","maxvetrenko","2014-08-07T13:47:34Z","2014-08-07T21:36:01Z"
"","224","OverrideMethodsDeclarationOrderCheck #32","","closed","","maxvetrenko","2014-08-06T12:13:58Z","2014-08-07T13:46:50Z"
"","222","VariableDeclarationUsageDistanceCheck was imported #31","","closed","","maxvetrenko","2014-08-05T21:16:30Z","2014-08-07T13:52:20Z"
"","221","EmptyLineSeparatorCheck was updated #218","","closed","","maxvetrenko","2014-08-05T19:47:23Z","2014-08-07T13:52:35Z"
"","211","AbbreviationAsWordInName. #28","","closed","","maxvetrenko","2014-07-30T12:01:00Z","2014-08-02T19:53:57Z"
"","205","InterfaceTypeParameterNameCheck was introdused. #202","","closed","","maxvetrenko","2014-07-24T17:22:59Z","2014-07-28T13:36:37Z"
"","204","Allowed empty anonymous classes. Was updated allowEmptyTypes property. #197","","closed","","maxvetrenko","2014-07-24T12:25:16Z","2014-07-27T19:36:07Z"
"","203","Whitespace around update","","closed","","maxvetrenko","2014-07-23T16:39:50Z","2014-07-24T11:42:51Z"
"","201","Whitespace around update","","closed","","maxvetrenko","2014-07-23T16:28:05Z","2014-07-23T16:28:39Z"
"","195","AvoidEscapedUnicodeCharactersCheck #194. Avoided using Unicode escapes.","","closed","","maxvetrenko","2014-07-18T10:22:22Z","2014-07-18T15:37:21Z"
"","193","LocalVariableNameUpdate #192. Allowed one char variables in initialization expressions in FOR loop","","closed","","maxvetrenko","2014-07-16T19:09:54Z","2014-07-27T19:27:10Z"
"","191","EmptyBlockUpdate #190. Were updated UT and input.","","closed","","maxvetrenko","2014-07-16T11:36:50Z","2014-07-27T19:24:37Z"
"","187","EmptyLineSeparatorCheck #186","","closed","","maxvetrenko","2014-07-14T11:27:21Z","2014-07-27T19:25:23Z"
"","180","SeparatorWrapCheck #179","","closed","","maxvetrenko","2014-07-11T10:56:32Z","2014-07-27T19:34:19Z"
"","176","OneTopLevelClass #172","","closed","","maxvetrenko","2014-07-05T07:58:21Z","2014-07-27T19:28:26Z"
"","175","NoLineWrap #173","","closed","","maxvetrenko","2014-07-05T07:58:13Z","2014-07-27T19:26:26Z"
"","174","Update for existing Check: WhitespaceAround #170","","closed","","maxvetrenko","2014-07-05T07:57:43Z","2014-07-05T16:31:15Z"
"","171","Update for existing Check: [WhitespaceAround](https://github.com/checkstyle/checkstyle/issues/170)","","closed","","maxvetrenko","2014-07-05T07:45:16Z","2014-07-05T07:49:14Z"
"","167","Update for existing Check: WhitespaceAround #22","","closed","","maxvetrenko","2014-07-03T13:26:41Z","2014-07-03T17:21:11Z"
"","166","Update for existing Check: WhitespaceAround #22","","closed","","maxvetrenko","2014-07-02T12:11:59Z","2014-07-03T13:25:43Z"
"","163","Update for existing Check: DeclarationOrder #4","","closed","","maxvetrenko","2014-06-30T16:18:21Z","2014-07-01T12:27:15Z"
"","162","fix for #47","","closed","","isopov","2014-06-30T13:46:21Z","2014-07-02T11:51:11Z"
"","161","partial making of test inputs compilable","","closed","","isopov","2014-06-28T11:13:45Z","2014-06-29T12:51:52Z"
"","135","New version of dsm-maven-plugin","","closed","","sabaka","2014-04-22T07:39:37Z","2014-04-22T19:07:02Z"
"","113","[typo] consistently use commas in operator list","","closed","","gaul","2014-02-27T06:36:46Z","2014-07-22T09:05:24Z"
"","87","CI was changed to Travis","","closed","","romani","2014-01-26T17:19:31Z","2014-07-16T17:12:27Z"
"","85","release notes for 5.7","","closed","","romani","2014-01-17T03:42:14Z","2014-06-14T02:07:03Z"
"","84","github logo was added","","closed","","romani","2014-01-17T03:41:44Z","2014-07-05T08:11:56Z"
"","73","update to use google mail lists","","closed","","romani","2013-12-06T07:27:18Z","2013-12-06T21:18:47Z"
"","37","fix #36 : Remove useless check for java.lang in AbstractClassCouplingCheck","","closed","","vmassol","2013-10-27T15:59:03Z","2013-11-28T20:15:24Z"
"","35","fix #33 : Allow to ignore java.lang and certain other classes","","closed","","vmassol","2013-10-27T14:57:48Z","2013-11-28T20:15:24Z"
"","34","fix #31 : Exclude some java.util classes from Class Fan out","","closed","","vmassol","2013-10-27T14:51:57Z","2014-06-29T09:26:03Z"
"","32","fix #31 : Exclude some java.util classes from Class Fan out","","closed","","vmassol","2013-10-27T13:57:52Z","2013-10-27T14:28:42Z"