"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","4038","infra: hipparchus is bumped to 1.2 version , orekit still use 1.1-SNA…","…PSHOT, so we need to build latest 1.1-SNAPSHOT version   Problem is described at - https://github.com/checkstyle/checkstyle/pull/3926#issuecomment-287546931","closed","","romani","2017-03-18T13:51:21Z","2017-03-18T14:00:15Z"
"","4601","Issue #4538:Split and Organize Checkstyle inputs by Test for checks i…","…n 'javadoc' package  Mandatory to understand and do: 0) The issue you are trying to fix/resolve has to have the ""approved"" label. 1) Put in the description of Pull Request the reference to an issue if it exists. Example: ""Issue: #XXXXXX"" 2) Commit message should adhere to the following rules:    a) Must match one of the following patterns:\n""       ^Issue #\\d+: .*$       ^Pull #\\d+: .*$       ^(minor|config|infra|doc|spelling): .*$    b) It contains only one line of text    c) Must not end with a period, space, or tab    d) Commit message should be less than or equal to 200 characters  To avoid multiple iterations of fixes and CIs failures, please read http://checkstyle.sourceforge.net/contributing.html  ATTENTION: We are not merging Pull Requests that are not passing our CIs, but we will help to resolve issues.  Thanks for reading, remove whole this message and type what you need.","closed","","djydewang","2017-07-04T06:37:24Z","2017-07-04T06:48:00Z"
"","4105","Issue #4104: pitest: skip Uts execution as pitest do this for wihtou …","…mutation mode  Issue #4104","closed","","romani","2017-03-27T18:17:34Z","2017-04-05T12:01:58Z"
"","4613","Issue #4625: allow not empty line separator between static and plain i…","…mport Issue #4625","closed","abandoned,","liscju","2017-07-04T20:22:20Z","2018-06-20T04:11:43Z"
"","4460","Issue #4425: handle multi-dimensional array part of type in CheckUtils.createFullType()","…e #4425  createFullType() previously ignored the array part of the type in one-dimensional arrays (but not multi-dimensional arrays). This led to an upstream bug (#4425) in IllegalTypeCheck.","closed","abandoned,","kevin-wayne","2017-06-15T10:38:46Z","2017-09-08T22:34:41Z"
"","4001","Issue #3798: content of projects-for-travis.properties moved to proje…","…cts-for-wercker.properties  Issue #3798","closed","","romani","2017-03-14T13:36:33Z","2017-03-14T15:02:35Z"
"","4999","XpathQueryGenerator should consider tabWith parameter","XpathQueryGenerator should have tabWith parameter. Default value is 4.  Use case: user specified lineNo = 1 and columnNo = 5 to generate the suppression for file Test.java. Line 1 has 1 tab character. XpathQueryGenerator should calculate the real position of the token to generate suppression xpath as ANTLR parser treats tab characters as one symbol. So if user sees the violation: ```1:5: violation message``` he should be able to pass this values to the generator. The generator should determine the real position of the token.  Algorithm:  1) tabWith = 4, lineNo = 1, columnNo = 10; realColumnNo = 1; 2) Read line 1 char by char till columnNo; 3) If tab is detected, than tabCount++; 4) Find token with lineNo = 1 and columnNo = 10 - tabWith * tabCount.","closed","miscellaneous,","MEZk","2017-08-24T19:13:14Z","2017-09-17T14:02:16Z"
"","4419","Add token type to LocalizedMessage","XPath to AST mapper which will be implemented in the scope of #4369 will help us to find AST node which corresponds the XPath expression starting from the root. When the AST node is found, we need to compare the node with the AST node which causes the violation. If they are equal, the audit event need to be denied.   For example, if we have the following XPath expression to suppress a violation logged by MethodLengthCheck  ```java //CLASS_DEF//METHOD_DEF[@Text='foo'] ```  then the mapper will return the method definition AST node. MethodLengthCheck emits the violation for method ```foo```. We need to log method definition AST node, because we should compare the node with the AST node given by mapper. If both nodes are equal, then audit event (violation) should be denied.    Thus, in order to suppress the violation by XPath expression we need to have the AST node which causes the violation. However, now the whole information about a violation (lineNo, columnNo, etc) is collected in LocalizedMessage. I propose to rename LocalizedMessage to Violation ann [log](https://github.com/MEZk/checkstyle/blob/154f120d7b71c30ec64f3ef801fb080a24a21c4a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java#L143-L143) AST everywhere. AST contains all required information (columnNo, lineNo, token type, ets).","closed","new feature,","MEZk","2017-06-04T12:12:08Z","2017-07-27T05:24:07Z"
"","4180","Include ENUM_DEF as an accepted token for RightCurlyCheck","Why is such behaviour 'ok' if the brace policy is set to alone ?  https://github.com/checkstyle/checkstyle/blob/master/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/InputRightCurlyOtherAlone.java#L125  Is it because ENUM_DEF isn't an accepted token for the check ?","closed","","voidfist","2017-04-10T14:24:41Z","2017-04-10T14:43:41Z"
"","4267","Broken test in master branch","While running mvn test in master branch I'm receiving the next error:  Failed tests:    EmptyBlockCheckTest.testAllowEmptyDefaultWithText:206->BaseCheckTestSupport.verify:191->BaseCheckTestSupport.verify:227->BaseCheckTestSupport.verify:258 error message 0 expected:<...utEmptyDefault.java:[11:13: Empty default block.]> but was:<...utEmptyDefault.java:[0: Got an exception - /home/dmytro/IdeaProjects/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/emptyblock/InputEmptyDefault.java (No such file or directory)]>   EmptyBlockCheckTest.testForbidDefaultWithoutStatement:225->BaseCheckTestSupport.verify:191->BaseCheckTestSupport.verify:227->BaseCheckTestSupport.verify:258 error message 0 expected:<...utEmptyDefault.java:[11:13: Must have at least one statement.]> but was:<...utEmptyDefault.java:[0: Got an exception - /home/dmytro/IdeaProjects/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/emptyblock/InputEmptyDefault.java (No such file or directory)]>  Tests run: 2037, Failures: 2, Errors: 0, Skipped: 0   It is caused by last @subkrish commit #4223  for issue #4220  $ cat EmptyBlockCheckTest.java  ../      @Test     public void testAllowEmptyDefaultWithText() throws Exception {         final DefaultConfiguration checkConfig = createCheckConfig(EmptyBlockCheck.class);         checkConfig.addAttribute(""option"", BlockOption.TEXT.toString());         checkConfig.addAttribute(""tokens"", ""LITERAL_DEFAULT"");         final String[] expected = {             ""5:30: "" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, ""default""),             ""11:13: "" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, ""default""),             ""36:22: "" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, ""default""),             ""44:47: "" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, ""default""),             ""50:22: "" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, ""default""),             ""78:13: "" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, ""default""),         };         verify(checkConfig, getPath(""InputEmptyDefault.java""), expected);     }      @Test     public void testForbidDefaultWithoutStatement() throws Exception {         final DefaultConfiguration checkConfig = createCheckConfig(EmptyBlockCheck.class);         checkConfig.addAttribute(""option"", BlockOption.STMT.toString());         checkConfig.addAttribute(""tokens"", ""LITERAL_DEFAULT"");         final String[] expected = {             ""5:30: "" + getCheckMessage(MSG_KEY_BLOCK_NO_STMT, ""default""),             ""11:13: "" + getCheckMessage(MSG_KEY_BLOCK_NO_STMT, ""default""),             ""15:13: "" + getCheckMessage(MSG_KEY_BLOCK_NO_STMT, ""default""),             ""26:30: "" + getCheckMessage(MSG_KEY_BLOCK_NO_STMT, ""default""),             ""36:22: "" + getCheckMessage(MSG_KEY_BLOCK_NO_STMT, ""default""),             ""44:47: "" + getCheckMessage(MSG_KEY_BLOCK_NO_STMT, ""default""),             ""50:22: "" + getCheckMessage(MSG_KEY_BLOCK_NO_STMT, ""default""),             ""65:22: "" + getCheckMessage(MSG_KEY_BLOCK_NO_STMT, ""default""),             ""78:13: "" + getCheckMessage(MSG_KEY_BLOCK_NO_STMT, ""default""),         };         verify(checkConfig, getPath(""InputEmptyDefault.java""), expected);     }  InputEmptyDefault.java wasn't moved to the new package, so it causes an error. Right now I'm fixing this bug and preparing pull request to fix it.","closed","approved,","Kietzmann","2017-04-22T20:23:55Z","2017-04-23T01:42:50Z"
"","4101","CacheFile: violation on external resource will invalidate entire cache even if no changes are made","When we find a violation in a file on a cache run, we remove the file with the violation from the cachefile. https://github.com/checkstyle/checkstyle/blob/6a8730f03c2114a894a583731cc89bc2ec559978/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L385  By default, we put all external resources into the cachefile https://github.com/checkstyle/checkstyle/blob/6a8730f03c2114a894a583731cc89bc2ec559978/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java#L252 . The configuration file is put under a special name and not under it's file name, so it will never be removed by a violation.  However, if we remove an external resource from the cachefile because of a violation, it invalidates the entire cachefile on the next run as they are required to be in the cachefile. https://github.com/checkstyle/checkstyle/blob/6a8730f03c2114a894a583731cc89bc2ec559978/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java#L249-L250  External resources are considered to be changed if they aren't in the cachefile.  ------------------- Here is how to reproduce:  Step 1: Environment ```` $ cat TestClass.java public class TestClass {     void method() {     } }  $ cat TestConfig.xml                                                             $ cat suppressions.xml       ````  Step 2: the good run ```` $ java -jar checkstyle-7.6.1-all.jar -c TestConfig.xml TestClass.java suppressions.xml Starting audit... Audit done.  $ cat cacheFile #Mon Mar 27 20:51:41 EDT 2017 /home/ricky/opensource/test/suppressions.xml=1490662299000 /home/ricky/opensource/test/TestClass.java=1490661645000 configuration*?=83F117CAB1DE006DA205A1337FA7FDFBF2D1F000 ````  Please note suppressions file is listed in the cache file and we are running CS on the suppressions file.  Step 3: modify suppressions for a bad run ```` $ cat suppressions.xml        ````  Step 4: the bad run ```` $ java -jar checkstyle-7.6.1-all.jar -c TestConfig.xml TestClass.java suppressions.xml Starting audit... [ERROR] /home/ricky/opensource/test/suppressions.xml:8: Example violation. [RegexpSingleline] Audit done. Checkstyle ends with 1 errors.  $ cat cacheFile #Mon Mar 27 20:53:56 EDT 2017 /home/ricky/opensource/test/TestClass.java=1490661645000 configuration*?=83F117CAB1DE006DA205A1337FA7FDFBF2D1F000 ````  Please note suppressions file is **NOT** listed in the cache file.  -------------------  As code shows at https://github.com/checkstyle/checkstyle/blob/6a8730f03c2114a894a583731cc89bc2ec559978/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java#L249-L250 , if external resources are not in the cache file, it invalidates the entire cache each run. It doesn't matter if suppressions.xml is left as is, other files are changed, or nothing is changed. [Suppressions is a external resource.](https://github.com/checkstyle/checkstyle/blob/6a8730f03c2114a894a583731cc89bc2ec559978/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilter.java#L112) If we were checking multiple files in this run, it would act the same as a no cache run.  Note: `SuppressionFilter` needed full file path to be able to be reproduced in CLI. Note: This is entirely dependent on the external resource be given the exact file name as the violation file name. Right now on Windows, this is only `suppressions` file. The other ones (`java.header`, `import-control.xml`, `java_regexp.header`) are being pre-appended with `file:/`.","closed","approved,","rnveach","2017-03-25T19:49:52Z","2017-05-26T00:50:05Z"
"","4102","Pull #4102: changed loops to end execution early","When scanning Checkstyle's code for a failed check, I found the following places where we had a loop looking for something and assigning a variable if it was found or not. I noticed most of the loops were specifically not ending when a determination was found.  I changed spots involving loops and assigning variables true/false to end their execution sooner as the variable is modified.  Changes to `InputIllegalTypeMemberModifiers` were to keep code coverage at 100% for the check as we lost some on the `for` loop for the fixes.  appveyor required change to `JavadocMethodCheck` that it be changed to a for-each.","closed","miscellaneous,","rnveach","2017-03-26T03:35:22Z","2017-04-05T12:44:26Z"
"","4467","Property illegalClasses in module IllegalImport not implemented?!","When I'm trying to configure illegalClasses in the IllegalImport module, maven tells me that the property illegalClasses does not exist for that module, as soon as I switch to illegalPkgs it works.  Is this not implemented (, yet)?  ```      ```  ```      ```  > [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:check (checkstyle) on project [PROJECT_NAME]: Failed during checkstyle configuration: cannot initialize module TreeWalker - Property 'illegalClasses' in module IllegalImport does not exist, please check the documentation -> [Help 1]","closed","","funfried","2017-06-19T13:18:23Z","2017-06-21T06:12:53Z"
"","4307","import checkstyle error The Checkstyle rules file could not be parsed.","When I import into IDEA, it failed:  org.infernus.idea.checkstyle.exception.CheckStylePluginException: The Checkstyle rules file could not be parsed.cannot initialize module TreeWalker - Token ""METHOD_REF"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheckThe file has been blacklisted for 60s. 	at org.infernus.idea.checkstyle.checker.CheckerFactory.blacklistAndShowMessage(CheckerFactory.java:197) 	at org.infernus.idea.checkstyle.checker.CheckerFactory.blacklistAndShowMessage(CheckerFactory.java:212) 	at org.infernus.idea.checkstyle.checker.CheckerFactory.createChecker(CheckerFactory.java:145) 	at org.infernus.idea.checkstyle.checker.CheckerFactory.getOrCreateCachedChecker(CheckerFactory.java:75) 	at org.infernus.idea.checkstyle.checker.CheckerFactory.checker(CheckerFactory.java:57) 	at org.infernus.idea.checkstyle.checker.CheckerFactory.verify(CheckerFactory.java:44) 	at org.infernus.idea.checkstyle.ui.LocationDialogue.attemptLoadOfFile(LocationDialogue.java:205) 	at org.infernus.idea.checkstyle.ui.LocationDialogue.access$800(LocationDialogue.java:35) 	at org.infernus.idea.checkstyle.ui.LocationDialogue$NextAction.actionPerformed(LocationDialogue.java:247) 	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022) 	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2348) 	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402) 	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259) 	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252) 	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289) 	at java.awt.Component.processMouseEvent(Component.java:6535) 	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324) 	at java.awt.Component.processEvent(Component.java:6300) 	at java.awt.Container.processEvent(Container.java:2236) 	at java.awt.Component.dispatchEventImpl(Component.java:4891) 	at java.awt.Container.dispatchEventImpl(Container.java:2294) 	at java.awt.Component.dispatchEvent(Component.java:4713) 	at java.awt.Light","closed","","baihui212","2017-05-01T22:14:43Z","2017-05-02T16:51:18Z"
"","4738","OBJBLOCK and ENUM_CONSTANT_DEF both match enum constants","When e. g. checking LeftCurly, it's impossible to configure different policy for OBJBLOCK and ENUM_CONSTANT_DEF, because they both match enum constants, that should be matched only by ENUM_CONSTANT_DEF, but not by OBJBLOCK.","open","","leventov","2017-07-17T14:33:37Z","2017-07-18T12:50:29Z"
"","4045","NPath for empty block is 1","What is a Npath for empty block `{}` ?  http://checkstyle.sourceforge.net/config_metrics.html#NPathComplexity  > ``` if ([expr]) { [if-range] }                       => NP(if-range) + 1 + NP(expr) if ([expr]) { [if-range] } esle { [else-range] } => NP(if-range) + NP(else-range) + NP(expr) ```  ``` // (if-range=1) + 1 + (expr=1) = 3 if (true || true) { smtht(); }   // (if-range=1) + (else-range=1) + (expr=1) = 3 if (true || true) { smtht(); } esle {} ```  else-range can not be 0, as it will meant that NPath become less if `else` is added. so it mean that NPath of `{}` is 1  ``` // (if-range=1) + (else-range=1) + (expr=1) = 3 if (true || true) { } esle {} ``` so  ``` // (if-range=1) + (else-range=1) + (expr=1) = 3 if (true || true) { dosmth1(); dosmth2(); } esle { dosmth3(); } ```","closed","miscellaneous,","romani","2017-03-18T21:40:16Z","2017-03-18T21:47:09Z"
"","4993","pitest: increase mutation coverage for pitest-checks-sizes profile to 100%","We should increase coverage for pitest-checks-sizes profile up to 100%. This issue is a subtask of #3708  Current threshold of pitest-checks-sizes profile: 94","closed","miscellaneous,","Nimfadora","2017-08-23T22:33:16Z","2017-08-26T20:19:56Z"
"","4988","pitest: increase mutation coverage for pitest-checks-regexp profile to 100%","We should increase coverage for pitest-checks-regexp profile up to 100%. This issue is a subtask of #3708  Current threshold of pitest-checks-regexp profile: 93","closed","miscellaneous,","Nimfadora","2017-08-22T21:38:26Z","2017-08-23T00:36:16Z"
"","4675","pitest: increase mutation coverage for pitest-checks-misc profile to 100%","We should increase coverage for pitest-checks-misc profile up to 100%. This issue is a subtask of #3708  Current threshold of pitest-checks-misc profile: XX","closed","miscellaneous,","romani","2017-07-09T15:13:15Z","2017-12-27T23:38:04Z"
"","4402","pitest: increase mutation coverage for pitest-check-annotation profile to 100%","We should increase coverage for pitest-check-anotation profile up to 100%. This issue is a subtask of #3708  Current threshold of pitest-checkstyle-annotation profile: XX  ATTENTION: When I simply add com.puppycrawl.tools.checkstyle.checks.annotation.* build fails: Failed to execute goal org.pitest:pitest-maven:1.2.0:mutationCoverage (default-cli) on project checkstyle: Execution default-cli of goal org.pitest:pitest-maven:1.2.0:mutationCoverage failed: 65535","closed","miscellaneous,","romani","2017-05-31T22:28:26Z","2017-09-01T21:13:42Z"
"","4401","pitest: increase mutation coverage for pitest-check-header profile to 100%","We should increase coverage for `pitest-check-heade`r profile up to 100%. This issue is a subtask of #3708  Current threshold of `pitest-checkstyle-header` profile: 78","closed","miscellaneous,","Nimfadora","2017-05-31T21:12:32Z","2017-07-22T14:12:26Z"
"","4901","Implement xpath query generator","We need to implement xpath query generator.  The query generator should receive root ast, column and line number in order to generate xpath expression. The generator should be represented by the separate class.  Possible algorithm: 1) Receive root ast, colum, line number. 2) Traverse the tree from the root to the target nodes. 3) Write Xpath starting from the root node to the target nodes.  Example. Generate xpath for all nodes with the lineNo = 2 and columnNo = 4. AST: ``` CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |  `--LITERAL_PUBLIC -> public [1:0] |--LITERAL_CLASS -> class [1:7] |--IDENT -> TestClass [1:13] `--OBJBLOCK -> OBJBLOCK [1:23]     |--LCURLY -> { [1:23]     |--METHOD_DEF -> METHOD_DEF [2:4]     |  |--MODIFIERS -> MODIFIERS [2:4]     |  |--TYPE -> TYPE [2:4]     |  |  `--LITERAL_VOID -> void [2:4]     |  |--IDENT -> foo [2:9]     |  |--LPAREN -> ( [2:12]     |  |--PARAMETERS -> PARAMETERS [2:13]     |  |--RPAREN -> ) [2:13]     |  `--SLIST -> { [2:15]     |      `--RCURLY -> } [3:4]     `--RCURLY -> } [4:0] ```  output should be all tokens for ""[2:4]""  /CLASS_DEF[@text='TestClass']//OBJBLOCK//METHOD_DEF[@text='foo'] /CLASS_DEF[@text='TestClass']//OBJBLOCK//MODIFIERS /CLASS_DEF[@text='TestClass']//OBJBLOCK//TYPE /CLASS_DEF[@text='TestClass']//OBJBLOCK//LITERAL_VOID  Some examples of the implementation: https://stackoverflow.com/questions/4746299/generate-get-xpath-from-xml-node-java","closed","miscellaneous,","MEZk","2017-08-05T10:45:49Z","2017-08-23T17:31:25Z"
"","4382","AST should be available for filters","We need to have information about AST structure to allow filtering by XPath expression. The tree is created in [TreeWalker](https://github.com/MEZk/checkstyle/blob/de50d3465849b83d25910590e1f5f39a25fe6e2c/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L176-L176), but the filtering is performed in [Checker](https://github.com/MEZk/checkstyle/blob/a43191d49473b50097f172884a2bf55494c49567/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L385-L385). Thus, when we [leave](https://github.com/MEZk/checkstyle/blob/de50d3465849b83d25910590e1f5f39a25fe6e2c/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L184-L184) TreeWalker we lose the tree. Checker knows nothing about AST. We should find a way to save the information about AST to make it available in filters. This will allow us to refer the tree from XPath expression and make a decision whether to accept or deny Checkstyle audit event.","closed","approved,","MEZk","2017-05-28T05:37:43Z","2017-07-13T21:05:36Z"
"","4370","Add multi thread mode to checkstyle launcher","We need to have ability to launch checkstyle in both modes - single thread and multi thread. Single thread mode should be used by default, but switching between odes should not be hard. It will help us to add new MT mode step by step and be able to merge it without breaking existent code.","closed","miscellaneous,","sabaka","2017-05-23T05:07:35Z","2017-07-03T02:45:15Z"
"","4422","Implement XpathFilter","We need to create XpathFilter. XpathFilter should be a place for the suppression by xpath algorithm. It should implement the AstFIlter interface (AST-based filter interface).  **Details of the implementation** 1) XpathFilter should be able to reuse the logic of suppressing by module id, line and column number, file similar to SuppressElement. 1) XpathFilter should have a private field ```xpathQuery```. The type of the filed is String. The field stores xpath-expression passed from SuppressionLoader to XpathFilter by invoking setXpathQuery; 2) The filter should have ```accept``` method which receives an audit event;   3) Inside ```accept``` method the filter should extract root AST node from audit event object, and AST node which caused a violation; 4) XPath-to-AST mapper should extract the node which should be suppressed starting from the root. If this node is equal to the node which caused the violation, then the filter should deny the audit event.","closed","miscellaneous,","MEZk","2017-06-05T19:40:51Z","2017-08-23T15:14:35Z"
"","4991","Convert old model suppressions in suppression.xml and in source code to xpath-based","We need to convert old model suppressions in suppression.xml and in source code to xpath-based.","closed","miscellaneous,","MEZk","2017-08-23T04:55:59Z","2017-12-28T11:17:08Z"
"","4530","Add the new option for Checkstyle CLI to generate the basic suppression xpath","We need to add the new option for Checkstyle CLI to generate basic suppression xpath for the Checkstyle violations.  1. Identify the node which causes the violation (blocked by https://github.com/checkstyle/checkstyle/issues/4419). 2. Map Xpath to AST tree (blocked by https://github.com/checkstyle/checkstyle/issues/4369). 3. Generate full xpath starting from the root of the tree to refere to the AST node which caused the violation. For example,   source file ```java public class TestClass {     void foo() {     } } ```  AST ``` CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |  `--LITERAL_PUBLIC -> public [1:0] |--LITERAL_CLASS -> class [1:7] |--IDENT -> TestClass [1:13] `--OBJBLOCK -> OBJBLOCK [1:23]     |--LCURLY -> { [1:23]     |--METHOD_DEF -> METHOD_DEF [2:4]     |  |--MODIFIERS -> MODIFIERS [2:4]     |  |--TYPE -> TYPE [2:4]     |  |  `--LITERAL_VOID -> void [2:4]     |  |--IDENT -> foo [2:9]     |  |--LPAREN -> ( [2:12]     |  |--PARAMETERS -> PARAMETERS [2:13]     |  |--RPAREN -> ) [2:13]     |  `--SLIST -> { [2:15]     |      `--RCURLY -> } [3:4]     `--RCURLY -> } [4:0] ```  node which caused the violation ``` |--METHOD_DEF -> METHOD_DEF [2:4] ```  Possible example of usage: ``` java -jar checkstyle-7.6-all.jar -t Test.java -supp ""[2:4]"" ```  Expected result ``` /CLASS_DEF//OBJBLOCK//METHOD_DEF[@text='foo'] ```","closed","new feature,","MEZk","2017-06-26T16:35:07Z","2018-04-15T05:19:11Z"
"","4369","Mapper of XPath expressions onto AST nodes","We need  to investigate how to map XPath expressions onto AST nodes. To begin with, it is worth designing a model of mapper which will allow to map XPath expressions onto AST nodes. The main idea of the mapper is to connect XPath expressions which will be based on the values of [TokenTypes](https://github.com/MEZk/checkstyle/blob/dabe377fd60374da3c5cfaddc8126847468b65ef/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java#L34-L34) enum onto the nodes of DetailAST.   For example, if we have the following code fragment: ```java public class TestClass {     void method() {     } } ```  the following tree structure: ```xml CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |  `--LITERAL_PUBLIC -> public [1:0] |--LITERAL_CLASS -> class [1:7] |--IDENT -> TestClass [1:13] `--OBJBLOCK -> OBJBLOCK [1:23]     |--LCURLY -> { [1:23]     |--METHOD_DEF -> METHOD_DEF [2:4]     |  |--MODIFIERS -> MODIFIERS [2:4]     |  |--TYPE -> TYPE [2:4]     |  |  `--LITERAL_VOID -> void [2:4]     |  |--IDENT -> method [2:9]     |  |--LPAREN -> ( [2:15]     |  |--PARAMETERS -> PARAMETERS [2:16]     |  |--RPAREN -> ) [2:16]     |  `--SLIST -> { [2:18]     |      `--RCURLY -> } [3:4]     `--RCURLY -> } [4:0] ```  and the following XPath expression (example, format should be discussed): ```xml //ClassDef[@Text='TestClass'] ```  than the parser should connect the XPath expression elements with the AST nodes in this way:  ``` DetailAST (type: CLASS_DEF, text: ""TestClass"") <- XpathExpression(ClassDef, text: ""TestClass"") ```  The base idea can be taken from PMD. They implemented both Saxon and Jaxen mappers. From my point of view, Saxon mapper is easier to reimplement for our needs. [Saxon XPath rule mapper](https://github.com/pmd/pmd/blob/d92688a07dc5e6edc3bfc81cced6f25c951a19f4/pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/xpath/SaxonXPathRuleQuery.java#L40-L40) maps each XPath node onto AST node. Their algorithm is based on [the tree traversal algorithm](https://github.com/pmd/pmd/blob/d92688a07dc5e6edc3bfc81cced6f25c951a19f4/pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/xpath/saxon/ElementNode.java#L38-L38). They [map](https://github.com/pmd/pmd/blob/d92688a07dc5e6edc3bfc81cced6f25c951a19f4/pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/xpath/saxon/ElementNode.java#L46-L46) each node of the AST starting with root onto XPath element.  **Thus, what should be done in the scope of this issue:** 1. Design XPath expression format for the new Checkstyle Suppression Model; 2. Investigate what library (Saxon, Jaxen, or native Java) should be used to implement mapper; 3. Provide base details of mapper model implementation (UML diagram of classes can be a good example).","closed","miscellaneous,","MEZk","2017-05-22T20:20:28Z","2017-08-10T21:18:59Z"
"","4612","Possible 8.0 regression with Ant relative config file","We have this working setup for JOSM plugins Ant build files:  ``` plugins/        /00_core_tools/checkstyle/checkstyle-all.jar        /00_core_tools/checkstyle/josm_checks.xml        /build.xml        /build-common.xml        /jna/build.xml        /jts/build.xml        /log4j/build.xml        /todo/build.xml ```  (In reality there are about 140 plugins, not just these four). We have two possible ways to call checkstyle: `ant checkstyle` at top level performs the analysis on all plugins, while `ant checkstyle` in a single plugin directory performs it for the given plugin only.  This works fine up to version 7.8.2, but is broken since 8.0 for the top-level target with following error:  ``` C:\SVN\josm\plugins\build-common.xml:513: Unable to create Root Module: config {../00_core_tools/checkstyle/josm_checks.xml}, classpath {null}.         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.createRootModule(CheckstyleAntTask.java:419)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.realExecute(CheckstyleAntTask.java:309)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.execute(CheckstyleAntTask.java:292)         at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:293)         at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)         at org.apache.tools.ant.Task.perform(Task.java:348)         at org.apache.tools.ant.Target.execute(Target.java:435)         at org.apache.tools.ant.Target.performTasks(Target.java:456)         at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1405)         at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets(SingleCheckExecutor.java:38)         at org.apache.tools.ant.Project.executeTargets(Project.java:1260)         at org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:441)         at org.apache.tools.ant.taskdefs.SubAnt.execute(SubAnt.java:309)         at org.apache.tools.ant.taskdefs.SubAnt.execute(SubAnt.java:224)         at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:293)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)         at org.apache.tools.ant.Task.perform(Task.java:348)         at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:68)         at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:293)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)         at org.apache.tools.ant.Task.perform(Task.java:348)         at org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:402)         at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:293)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)         at org.apache.tools.ant.Task.perform(Task.java:348)         at org.apache.tools.ant.Target.execute(Target.java:435)         at org.apache.tools.ant.Target.performTasks(Target.java:456)         at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1405)         at org.apache.tools.ant.Project.executeTarget(Project.java:1376)         at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)         at org.apache.tools.ant.Project.executeTargets(Project.java:1260)         at org.apache.tools.ant.Main.runBuild(Main.java:857)         at org.apache.tools.ant.Main.startAnt(Main.java:236)         at org.apache.tools.ant.launch.Launcher.run(Launcher.java:287)         at org.apache.tools.ant.launch.Launcher.main(Launcher.java:113) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Unable to find: ../00_core_tools/checkstyle/josm_checks.xml         at com.puppycrawl.tools.checkstyle.utils.CommonUtils.getUriByFilename(CommonUtils.java:394)         at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:179)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.createRootModule(CheckstyleAntTask.java:395)         ... 49 more ```  The setup is as follows. The build-common.xml defines the checkstyle target:  ```xml                                                                                    ```  Each plugin build.xml includes the build-common.xml:  ```xml                       ```  And finally the global build.xml iterates on all plugin build files:  ```xml                                                                                                                            ```  I'm not sure if this is a checkstyle regression or a breaking change to which we must adapt.","closed","","don-vip","2017-07-04T19:58:57Z","2017-08-09T20:16:10Z"
"","4176","Add suppression of .DS_Store for NewlineAtEndOfFile","We have added https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_non_main_files_checks.xml.  And it didn't suppress `.DS_Store` now. It does not affect the online CI but mac developers would always failed with `mvn verify` now if they enable `.DS_Store` on their PC.  Although we could tell them to banned the generation of `.DS_Store` manually. But I think it is better to add a simple `` at the suppression file.","closed","miscellaneous,","Luolc","2017-04-09T16:07:28Z","2017-04-13T18:31:37Z"
"","4684","create Travis ready to use shell script to check that pistes profiles cover all classes","we have a lot of profiles that test certain set of classes. There is no guaranty that all classes are covered, we even missed misc Checks at all for long time.  TODO: make a shell script that grab ""param"" and and take list of all Check files on filesystem and make sure nothing is missed from pitest coverage.","closed","miscellaneous,","romani","2017-07-09T17:22:22Z","2018-12-12T20:55:58Z"
"","4395","pitest: increase mutation coverage for pitest-checkstyle-utils profile to 100%","We created pitest profiles for non-checks code in #4367. Currently, we should increase coverage for `pitest-checkstyle-utils` profile up to 100%. This issue is a subtask of #3708   Current threshold of `pitest-checkstyle-utils` profile: 40","closed","miscellaneous,","Nimfadora","2017-05-31T20:49:51Z","2017-08-31T13:32:12Z"
"","4398","pitest: increase mutation coverage for pitest-checkstyle-tree-walker profile to 100%","We created pitest profiles for non-checks code in #4367. Currently, we should increase coverage for `pitest-checkstyle-tree-walker` profile up to 100%. This issue is a subtask of #3708  Current threshold of `pitest-checkstyle-tree-walker` profile: 83","closed","miscellaneous,","Nimfadora","2017-05-31T20:59:49Z","2017-08-22T08:06:41Z"
"","4399","pitest: increase mutation coverage for pitest-checkstyle-main profile to 100%","We created pitest profiles for non-checks code in #4367. Currently, we should increase coverage for `pitest-checkstyle-main` profile up to 100%. This issue is a subtask of #3708  Current threshold of `pitest-checkstyle-main` profile: 93","closed","miscellaneous,","Nimfadora","2017-05-31T21:01:31Z","2017-07-27T12:55:26Z"
"","4397","pitest: increase mutation coverage for pitest-checkstyle-gui profile to 100%","We created pitest profiles for non-checks code in #4367. Currently, we should increase coverage for `pitest-checkstyle-gui` profile up to 100%. This issue is a subtask of #3708  Current threshold of `pitest-checkstyle-gui` profile: 30  **Attention**: please postpone gui package coverage to the very end, it does not contain code that all uses use, it is code to ease development of Checkstyle project only, so priority is low.","closed","miscellaneous,","Nimfadora","2017-05-31T20:58:07Z","2019-04-13T17:11:13Z"
"","4396","pitest: increase mutation coverage for pitest-checkstyle-filters profile to 100%","We created pitest profiles for non-checks code in #4367. Currently, we should increase coverage for `pitest-checkstyle-filters` profile up to 100%. This issue is a subtask of #3708  Current threshold of `pitest-checkstyle-filters` profile: 95","closed","miscellaneous,","Nimfadora","2017-05-31T20:55:45Z","2017-07-19T00:39:02Z"
"","4400","pitest: increase mutation coverage for pitest-checkstyle-common profile to 100%","We created pitest profiles for non-checks code in #4367. Currently, we should increase coverage for `pitest-checkstyle-common` profile up to 100%. This issue is a subtask of #3708  Current threshold of `pitest-checkstyle-common` profile: 78","closed","miscellaneous,","Nimfadora","2017-05-31T21:03:23Z","2017-07-07T12:53:02Z"
"","4394","pitest: increase mutation coverage for pitest-checkstyle-api profile to 100%","We created pitest profiles for non-checks code in #4367 . Currently, we should increase coverage for `pitest-checkstyle-api` profile up to 100%. This issue is a subtask of #3708   Also in scope of this task, we should remove exclusion of `com.puppycrawl.tools.checkstyle.api.Check` class from the profile, as it has no methods or fields and does not influence mutation coverage.  Current threshold of `pitest-checkstyle-api` profile: 45","closed","miscellaneous,","Nimfadora","2017-05-31T20:45:19Z","2017-09-02T13:21:18Z"
"","4044","RightCurly: ALONE option doen't work for a singleline IF","vlad@vlad-W65-67SB ~/Documents $ javac Input.java vlad@vlad-W65-67SB ~/Documents $ java -jar checkstyle-7.6-all.jar -c my_check.xml Input.java Starting audit... Audit done. vlad@vlad-W65-67SB ~/Documents $ cat Input.java  ```java public class Input {     void foo() {         if (true) { getClass(); }     } } ``` vlad@vlad-W65-67SB ~/Documents $ cat my_check.xml  ```xml                                                             ```  Expected: violation on `if` as `option` is `alone`","closed","medium,","Vladlis","2017-03-18T19:26:36Z","2017-03-20T20:39:49Z"
"","4374","set checkFirstSentence=false, but it doesn't work","Using IntelliJ IDEA with CheckStyle-IDEA-5.5.1  Code has comment like this:  ```java /**  * something to do  *  * @param request request  * @param response response  * @return void  * @author charkey  */ ```  CheckStyle:  ```xml                  ```  After check this file, msg shows ""Javadoc the first sentence should end with a period. ""  And I try to remove ""JavadocStyle"" module config, still got that message output.  Thank you all.","closed","javadoc,","CharkeyQK","2017-05-25T03:26:03Z","2019-09-13T00:52:48Z"
"","4026","JavadocMethod allowMissingPropertyJavadoc=true is less strict than documented","Using following `JavadocMethod` configuration: ```                                                                                                                           ``` I expect Checkstyle to complain about missing Javadoc for all three methods of the following class: ``` package somepckg;  import java.time.ZoneId; import java.time.ZoneOffset;  /**  * Something.  *  * @author someone  */ public class PatientContext {      private PatientContext() {     }      public static String getPatientId() {         return ""1"";     }      public static ZoneId getTimeZone() {         return ZoneOffset.ofHours(1);     }      public static String getDateFormat() {         return ""EEE, dd. MMMM yyyy"";     } } ``` But there is **no** violation.  Checkstyle version: 7.3 (also tried 7.6)  The [documentation](http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod) says:  > ``` > Whether to allow missing Javadoc on accessor methods for properties (setters and getters). The setter and getter methods must match exactly the structures below. >  > public void setNumber(final int number) > { >     mNumber = number; > } >  > public int getNumber() > { >     return mNumber; > } >  > public boolean isSomething() > { >     return false; > } > ``` The emphasis here lies on: > must match **exactly**  In fact, version 6.19 which I am using in another project does not seem to have this bug and behaves like documented.","closed","","famod","2017-03-16T18:00:28Z","2019-02-27T14:52:49Z"
"","4847","config: add distribution for travis","Update for travis to older distribution until fixed.  #4847 - show all problems that are happening with trusty. #4848 - will upgrade to ""trusty""","closed","","rnveach","2017-07-29T02:09:07Z","2017-07-29T03:20:24Z"
"","4874","config: Use latest sbe release instead of master","This should fix the issue observed here: https://github.com/checkstyle/checkstyle/pull/4871#issuecomment-319202784","closed","","AustinShalit","2017-08-01T06:37:22Z","2017-08-01T11:17:27Z"
"","4190","Issue #3931: Split and Organize Checkstyle inputs by Test for NoWhitespaceAfter","This pull request solves the issue #3931  Moved appropriate classes into new package. Maven clean verify completed successfully.","closed","","Kietzmann","2017-04-11T15:31:34Z","2017-04-17T17:46:06Z"
"","4200","Issue #3898: Split and Organize Checkstyle inputs by Test for WhitespaceAround","This pull request related to issue #3898  What had been done: 1) Moved proper files to new package /whitespacearound 2) Deleted unused classes All tests passed correctly, but during cobertura check, I was receiving coverage check failure with the link to http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException. Actually, I don't know how to solve it but hope that you will give me useful advice.","closed","","Kietzmann","2017-04-12T11:34:20Z","2017-04-12T15:22:50Z"
"","4205","Issue #3898: Split and Organize Checkstyle inputs by Test for WhitespaceAround","This pull request related to issue #3898","closed","","Kietzmann","2017-04-12T15:23:48Z","2017-04-13T16:55:15Z"
"","4036","Issue #3986: Splitting inputs by Test for AnonInnerLength","This pull request is for splitting and organizing the test inputs for AnonInnerLength for fixing Issue #3986","closed","","samuel-gu","2017-03-18T07:33:35Z","2017-03-19T18:50:13Z"
"","4019","Issue #3970: Split inputs test for EmptyInitializerPadTest","This pull request is for resolving Issue #3970. Splitting and copying all test input files to separate folder for EmptyForInitializerPad.","closed","","samuel-gu","2017-03-16T06:27:09Z","2017-03-16T10:12:17Z"
"","4076","Issue #929: Changed private static final loggers to private final ones","This pull request is for changing private static final loggers in codebase to private final following Issue #929","closed","incomplete,","samuel-gu","2017-03-21T20:49:24Z","2017-04-26T22:25:05Z"
"","4179","Issue #4150: Split and Organize Checkstyle inputs by Test for LocalVariableName","This pull request covers to issue #4150  What was modified: 1) Modified paths to test classes 2) Moved all necessary inputs into /localvariablename package  Results:  All unit tests passed. the result of mvn clean verify -> Tests run: 103, Failures: 0, Errors: 0, Skipped: 0","closed","","Kietzmann","2017-04-10T14:01:34Z","2017-04-11T00:33:38Z"
"","4182","Issue #3959: Split and Organize Checkstyle inputs by Test for FileTabCharacter","This pull request covers to issue #3959  What was modified:  Modified paths to test classes Moved all necessary inputs into /whitespace/filltabcharacter package Results:  All unit tests passed. the result of mvn clean verify also OK","closed","","Kietzmann","2017-04-10T16:19:47Z","2017-04-12T05:44:10Z"
"","4188","Issue #4168: Split and Organize Checkstyle inputs by Test for MethodTypeParameterName","This PR solves issue #4168  The ""InputTypeParameterName.java"" test file was copied to the folder ""methodtypeparametername"" since this two files still use it: - ClassTypeParameterNameCheckTest - InterfaceTypeParameterNameCheckTest","closed","","janiine","2017-04-11T11:56:22Z","2017-04-13T23:57:13Z"
"","4237","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: VariableDeclarationUsageDistanceCheck","This PR related to issue #4165 Split and organized tests for class VariableDeclarationUsageDistanceCheck","closed","","Kietzmann","2017-04-20T15:48:08Z","2017-04-21T15:00:14Z"
"","4238","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: UnnecessaryParentheses","This PR related to issue #4165","closed","","Kietzmann","2017-04-20T16:10:18Z","2017-04-21T15:00:28Z"
"","4235","Issue #3949: NoWhitespaceBefore: add support for method reference operator","This PR related to issue #3949  What was done: 1) added new tokens into config 2) added new test class into /nowhitespacebefore package 3) added new test method in NoWhitespaceBeforeCheckTest.java to test correct behavior.","closed","","Kietzmann","2017-04-20T11:56:40Z","2017-04-22T00:20:58Z"
"","4820","minor: Moved the verifyAst UTs from AllBlockCommentsTest and AllSinglelineCommentsTest to AstTreeStringPrinterTest","This minor PR moves the `verifyAst` methods from `AllBlockCommentsTest` and `AllSinglelineCommentsTest` to `AstTreeStringPrinterTest`. This change would allow changes to be made to the above files in https://github.com/checkstyle/checkstyle/issues/4592 .","closed","","subkrish","2017-07-25T12:26:52Z","2017-07-27T13:13:37Z"
"","4527","Create CheckstyleFile class to collect all information on file under processing","This issue is blocked by https://github.com/checkstyle/checkstyle/issues/4523 .  Followed by https://github.com/checkstyle/checkstyle/pull/4468#discussion_r123883389   We need to create a single class like CheckstyleFile. It will contain the file name, FileContents, and everything else related to the input and output of the [process method](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java#L73).","open","breaking compatibility,","MEZk","2017-06-26T16:17:11Z","2017-07-08T12:45:04Z"
"","4883","Add file-stateful and stateless / global stateful check markers","This is a subtask of https://github.com/checkstyle/checkstyle/issues/4869, because `CheckCloneService` uses these markers to create appropriate clone for each check type.  This is also a subtask of https://github.com/checkstyle/checkstyle/issues/4870  In this task two markers should be added:  1. stateless / global stateful marker (e.g. `OneCheckInstancePerApplication`) 1. file-stateful (e.g. `OneCheckInstancePerThread` or `OneCheckInstancePerFile`)","closed","miscellaneous,","soon","2017-08-02T11:01:54Z","2017-10-07T22:27:08Z"
"","4737","minor: Added 'astprinter' to resources-noncompilable for AstTreeStringPrinterTest.java","This is a minor PR which adds the `astprinter` folder to the `resources-noncompilable` directory. This PR also adds the `getNonCompilablePath()` method to AstTreeStringPrinterTest.java by overriding the super method.","closed","","subkrish","2017-07-17T03:33:28Z","2017-07-18T00:13:22Z"
"","4610","Issue #4606: Support parameter imports for block-level javadoc tags","This fixes issue #4606.   I understand that `UnusedImportsCheck` needs to be rewritten to parse javadoc correctly. However, this fix is small and there is an included test that can be used to verify the rewrite.  I created a new input test file and test method in `UnusedImportsCheckTest`. If you prefer, I can just add the problem `@see` tag into `InputUnusedImports.java`.","closed","","silentj","2017-07-04T16:21:53Z","2017-07-11T01:02:05Z"
"","4784","minor: Added gui and filefilters folders to resources-noncompilable directory and InputIncorrectClass to each of these folders","These folders have been added so that when they extend `AbstractModuleTestSupport` in a PR for https://github.com/checkstyle/checkstyle/issues/4592, the `getPackageLocation()` method can be overridden.","closed","","subkrish","2017-07-20T13:15:54Z","2017-07-21T01:33:12Z"
"","4414","Simple name conflict of Checks from thirdparty checks will cause exception in run time","the same problem as in #4387   I did ugly fix to make it work as before, without testing, that need to be fixed in this issue.  We will still have the same exception then few Checks from few thirparty jars are in conflict. We need to give user clear message how to resolve the issue.","closed","approved,","romani","2017-06-03T18:22:51Z","2017-06-14T21:35:28Z"
"","4316","Localized UTs are not stable on Travis","The same for master and PR builds  Failured as: ``` [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 02:12 min [INFO] Finished at: 2017-05-02T21:46:20+00:00 [INFO] Final Memory: 43M/454M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.20:test (default-test) on project checkstyle: There are test failures. [ERROR]  [ERROR] Please refer to /home/travis/build/checkstyle/checkstyle/target/surefire-reports for the individual test results. [ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream. [ERROR] The forked VM terminated without properly saying goodbye. VM crash or System.exit called? [ERROR] Command was /bin/sh -c cd /home/travis/build/checkstyle/checkstyle && /usr/lib/jvm/java-8-oracle/jre/bin/java -Duser.language=es -Duser.country=ES -jar /home/travis/build/checkstyle/checkstyle/target/surefire/surefirebooter3397402515833709291.jar /home/travis/build/checkstyle/checkstyle/target/surefire 2017-05-02T21-44-26_050-jvmRun1 surefire1406067476486647995tmp surefire_09203773971403803612tmp [ERROR] Error occurred in starting fork, check output in log [ERROR] Process Exit Code: 137 [ERROR] Crashed tests: [ERROR] com.puppycrawl.tools.checkstyle.ConfigurationLoaderTest [ERROR] org.apache.maven.surefire.booter.SurefireBooterForkException: The forked VM terminated without properly saying goodbye. VM crash or System.exit called? [ERROR] Command was /bin/sh -c cd /home/travis/build/checkstyle/checkstyle && /usr/lib/jvm/java-8-oracle/jre/bin/java -Duser.language=es -Duser.country=ES -jar /home/travis/build/checkstyle/checkstyle/target/surefire/surefirebooter3397402515833709291.jar /home/travis/build/checkstyle/checkstyle/target/surefire 2017-05-02T21-44-26_050-jvmRun1 surefire1406067476486647995tmp surefire_09203773971403803612tmp [ERROR] Error occurred in starting fork, check output in log [ERROR] Process Exit Code: 137 [ERROR] Crashed tests: [ERROR] com.puppycrawl.tools.checkstyle.ConfigurationLoaderTest [ERROR] at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:679) [ERROR] at org.apache.maven.plugin.surefire.booterclient.ForkStarter.fork(ForkStarter.java:533) [ERROR] at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:279) [ERROR] at org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:243) [ERROR] at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:1077) [ERROR] at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:907) [ERROR] at org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:785) [ERROR] at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132) [ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208) [ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) [ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) [ERROR] at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116) [ERROR] at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80) [ERROR] at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51) [ERROR] at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120) [ERROR] at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:355) [ERROR] at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155) [ERROR] at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584) [ERROR] at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:216) [ERROR] at org.apache.maven.cli.MavenCli.main(MavenCli.java:160) [ERROR] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [ERROR] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) [ERROR] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) [ERROR] at java.lang.reflect.Method.invoke(Method.java:483) [ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289) [ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229) [ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415) [ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException ``` another example - https://travis-ci.org/checkstyle/checkstyle/jobs/228125793#L829  I tried to reproduce this on my local ubunutu - but it works fine for about 700 launches command was: `$ time while mvn clean integration-test failsafe:verify -DargLine='-Duser.language=fi -Duser.country=FI'; do :; done`  so might be related to Travis versions of java/maven or OS/hardware nuances.  My details: ``` $ mvn --version Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T08:41:47-08:00) Maven home: /opt/maven/default Java version: 1.8.0_121, vendor: Oracle Corporation Java home: /opt/jdk1.8.0_121/jre Default locale: en_US, platform encoding: UTF-8 OS name: ""linux"", version: ""3.13.0-101-generic"", arch: ""amd64"", family: ""unix"" ```  it is become more noticeable after version bump for maven surefire plugin","closed","miscellaneous,","romani","2017-05-02T16:59:35Z","2017-06-30T21:11:54Z"
"","4118","add new check to detect a certain annotation and field modifier","The reason behind this is to prevent in some of the projects I work on in Netflix the usage of Governator's `@Configuration` annotation on `final` fields -- doing this has no effect (since the field is final) but misleads often the developer in thinking it works. As such I have created a new check `AvoidAnnotationCombinationCheck` and it passes all tests bar one which from what I can see tests that the new error message I have introduced is translated in all languages. I speak English, Romanian and French so I could help with those but I certainly cannot do it to all the languages Checkstyle supports. As such I am looking for a bit of help here -- I couldn't find any mention of that anywhere in the docco? Once someone helps me with that then I can add a commit which contains all the translations and then the final test will pass. If there is anything else I need to change also happy to do so. Thanks,","closed","","liviutudor","2017-03-29T06:10:48Z","2017-04-05T18:07:49Z"
"","4436","Adds support for (multi-dimensional) array types","The proposed change addresses #4425 and #4429, adding support for (multi-dimensional) array types, to support flagging of array types.                                  The call to CheckUtils.createFullType() was replaced because it doesn't handle array types.  Mandatory to understand and do: 0) The issue you are trying to fix/resolve has to have the ""approved"" label. 1) Put in the description of Pull Request the reference to an issue if it exists. Example: ""Issue: #XXXXXX"" 2) Commit message should adhere to the following rules:    a) Must match one of the following patterns:\n""       ^Issue #\\d+: .*$       ^Pull #\\d+: .*$       ^(minor|config|infra|doc|spelling): .*$    b) It contains only one line of text    c) Must not end with a period, space, or tab    d) Commit message should be less than or equal to 200 characters  To avoid multiple iterations of fixes and CIs failures, please read http://checkstyle.sourceforge.net/contributing.html  ATTENTION: We are not merging Pull Requests that are not passing our CIs, but we will help to resolve issues.  Thanks for reading, remove whole this message and type what you need.","closed","","kevin-wayne","2017-06-08T17:32:40Z","2017-06-15T11:04:00Z"
"","4415","Create XPath tree as clone of DetailAST tree","The problem was found in https://github.com/checkstyle/checkstyle/issues/3095 .  Due to the fact that AST tree does not have the root node, we have 2 pseudo-root nodes: 1) PACKAGE_DEF 2) CLASS_DEF  For example,  ```java package my.pack;  public class TestClass { } ```  ``` PACKAGE_DEF -> package [1:0] |--ANNOTATIONS -> ANNOTATIONS [1:10] |--DOT -> . [1:10] |  |--IDENT -> my [1:8] |  `--IDENT -> pack [1:11] `--SEMI -> ; [1:15] CLASS_DEF -> CLASS_DEF [3:0] |--MODIFIERS -> MODIFIERS [3:0] |  `--LITERAL_PUBLIC -> public [3:0] |--LITERAL_CLASS -> class [3:7] |--IDENT -> TestClass [3:13] `--OBJBLOCK -> OBJBLOCK [3:23]     |--LCURLY -> { [3:23]     `--RCURLY -> } [4:0] ```  As it can be seen from the example, the tree does not have the root. PACKAGE_DEF and CLASS_DEF are siblings. It also can be proven by the following test:   TestAst: ```java package com.puppycrawl.tools.checkstyle;  public class TestAst {  }  ```  ```java @Test public void testRootAst() throws Exception{     final FileText text = new FileText(new File(""src/test/resources/com/puppycrawl/tools/checkstyle/TestAst.java""),         System.getProperty(""file.encoding"", ""UTF-8""));     final FileContents contents = new FileContents(text);      DetailAST rootAST = TreeWalker.parse(contents);          assertEquals(null, rootAST.getParent());     assertEquals(null, rootAST.getNextSibling().getParent()); }  ```  The test shows that two nodes do not have a parent.  JLS says that > CompilationUnit is the goal symbol (§2.1) for the syntactic grammar (§2.3) of Java programs.  and  > Starting from a sentence consisting of a single distinguished nonterminal, called the goal symbol, a given context-free grammar specifies a language, namely, the set of possible sequences of terminal symbols that can result from repeatedly replacing any nonterminal in the sequence with a right-hand side of a production for which the nonterminal is the left-hand side.  and finally   > A syntactic grammar for the Java programming language is given in Chapters 4, 6-10, 14, and 15. This grammar has tokens defined by the lexical grammar as its terminal symbols. It defines a set of productions, starting from the goal symbol CompilationUnit (§7.3), that describe how sequences of tokens can form syntactically correct programs.  Thus, from my point of view, ```compilation unit``` should be the root of the tree. By the way, PMD declares ```compilation unit``` as a root. See https://github.com/pmd/pmd/blob/511c7778c5bc2e8718e7cd3c7fec85937a493315/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTCompilationUnit.java#L15-L15    This issue blocks https://github.com/checkstyle/checkstyle/issues/4369 Saxon framework for Xpath has [NodeInfo](http://www.saxonica.com/html/documentation/javadoc/net/sf/saxon/om/NodeInfo.html) interface which is going to be used in XPath to AST mapper. The interface has the method which is called [getRoot](http://www.saxonica.com/html/documentation/javadoc/net/sf/saxon/om/NodeInfo.html#getRoot()) which should return the root node of the DOM tree. In order to implement the mapper properly we need to have one-to-one correspondence of the DOM tree which will be specified by XPath with AST tree. As AST tree does not have the root node, it will be a problem to refer to the root of the AST tree from Xpath.","closed","antlr,","MEZk","2017-06-03T21:15:40Z","2019-03-12T19:40:37Z"
"","4007","minor: fix link to bluej web site to avoid a violation from linkcheck","The problem was detected at https://app.codeship.com/projects/124310/builds/23433281 .  According to [redirectcheck.com](http://redirectcheck.com) the link to the BlueJ web site has been moved from http://www.bluej.org to https://www.bluej.org/ .  redirectcheck.com report: ``` www.bluej.org  HTTP/1.1 301 Moved Permanently Date: Tue, 14 Mar 2017 20:31:54 GMT Server: Apache/2.4.7 (Ubuntu) OpenSSL/1.0.1f Location: https://www.bluej.org/ Content-Length: 230 Content-Type: text/html; charset=iso-8859-1  https://www.bluej.org/  HTTP/1.1 200 OK Date: Tue, 14 Mar 2017 20:31:55 GMT Server: Apache/2.4.7 (Ubuntu) OpenSSL/1.0.1f Last-Modified: Tue, 14 Mar 2017 16:28:56 GMT ETag: ""2085-54ab353066213"" Accept-Ranges: bytes Content-Length: 8325 Vary: Accept-Encoding Content-Type: text/html ```  ```curl www.bluej.org```  ```   301 Moved Permanently  Moved Permanently The document has moved here.  ```","closed","","MEZk","2017-03-14T20:33:38Z","2017-03-26T17:56:25Z"
"","4944","Extend Checkstyle GUI tool to work with Xpath","The original idea is taken from @timurt's  proposal.  ![1](https://user-images.githubusercontent.com/7242568/29248634-a893cf38-8025-11e7-85e0-4123a9622670.png)  AST container, source code container and XPATH container are all bound together. For example if you select ast nodes, source code lines containing appropriate elements will be highlighted. Also xpath query will be automatically generated. We can think about opportunity for “and”ing / “or”ing ast nodes via SHIFT/CTRL buttons, also we can add additional buttons for xpath query generator.  ![2](https://user-images.githubusercontent.com/7242568/29248644-d7427726-8025-11e7-8d37-d5d6f00d03b3.png)  ![3](https://user-images.githubusercontent.com/7242568/29248651-edb98b84-8025-11e7-99f9-e87a05c2467a.png)  Another situation, if we write query and press “Run xpath” button, ast nodes will be selected and source code elements will be selected.  ![4](https://user-images.githubusercontent.com/7242568/29248661-068f952c-8026-11e7-92ea-9c9a15a6ae57.png)  Some ideas on how to make it and implement it could be taken from https://pmd.github.io/latest/pmd_userdocs_extending_designer_reference.html  -------","closed","has bounty,","MEZk","2017-08-13T09:51:19Z","2020-08-13T12:01:44Z"
"","4998","Add columnCharIndex field to LocalizedMessage","The log method of AbstractCheck stores shifted column number (with expanded tabs) to the LocalizedMessage. This column number cannot be used in XpathFilter as the token with that columnNo might not exist in the tree.  For example, if there is a tab character on line 1, the ANTLR parser will return the token with the columnNo=1, but Checkstyle will print 4 as a columnNo in the violation.   Thus, we need to store the real column number to localized message.","closed","new feature,","MEZk","2017-08-24T19:03:30Z","2017-09-06T12:03:31Z"
"","4078","DefaultComesLast: new option skipIfLastAndSharedWithCase to raise violation if default doesn't share case","The [DefaultComesLast](http://checkstyle.sourceforge.net/config_coding.html#DefaultComesLast) check should have a new option to allow the `default` case not to be the last one if it shares another case. e.g.  ```java $ javac MyClass.java  $ cat config.xml                                  $ cat MyClass.java  public class MyClass {     int mode = 4;     int method2() {         switch (mode) {             case 1:             default: // No violation with the new option is expeced                 return 1;             case 2:                 return 2;             case 3:                 return 3;         }      } }  $ java -jar checkstyle-7.6-all.jar -c config.xml MyClass.java  Starting audit... [WARN] /var/tmp/MyClass.java:6:13: Default should be last label in the switch. [DefaultComesLast] Audit done.  ```  The `default` statement shares `case 1`. This is useful if the cases are named (e.g enum) or have an order (e.g. natural, alphabetically). However, if the `default` case doesn't share a case implementation, it should be at the last position.","closed","medium,","robertpainsi","2017-03-21T22:23:47Z","2017-04-17T12:25:46Z"
"","4945","JavadocPackageCheck should be thread-safe","The [`JavadocPackageCheck`](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java) contains a field `directoriesChecked`, which contains all processed directories.   This field should be updated across the application lifetime (https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java#L73), therefore it should be thread-safe","closed","approved,","soon","2017-08-14T16:28:46Z","2017-08-17T13:25:45Z"
"","4452","google_checks.xml - please remove","That setting is incoherent with sun_checks.xml and cost me a ton of time to find out what's the problem when trying to use it with maven-checkstyle-plugin.  TY!","closed","","jjYBdx4IL","2017-06-13T18:44:32Z","2020-11-14T23:04:42Z"
"","4852","minor: test full verify","Testing full verify run. Don't merge.","closed","","rnveach","2017-07-29T12:19:03Z","2017-07-30T03:23:49Z"
"","4487","config: added heap size to surefire to fix travis failures","Test to fix Issue #4316   Sources for fix: https://github.com/travis-ci/travis-ci/issues/5631#issuecomment-188812771 https://github.com/travis-ci/travis-ci/issues/6330#issuecomment-234985707 https://stackoverflow.com/questions/23260057/the-forked-vm-terminated-without-saying-properly-goodbye-vm-crash-or-system-exi https://issues.apache.org/jira/browse/STORM-1436","closed","","rnveach","2017-06-22T13:35:51Z","2017-06-22T17:13:12Z"
"","4970","All powermocks or reflection usage should be documented why they can't be normal tests","Talked about in https://github.com/checkstyle/checkstyle/issues/4931#issuecomment-323523502 ,  > I fine with mocks, till it is reasonable. I will be good to have a rule that demand javadoc over test method if test is using mock. Engineers hate javadoc writing, so it will force them to think about more functional test, and it is ease to catch in codereview. Meanwhile let update code that is easy to update and keep mocks in complicated cases only with explanation like ""argument is Class type, that is final , no way to easily mock it so we use powermock"".  We should document all mocks why they can't be normal tests. If the test can be converted to a non-mock easily, we should try and do this. We need to demand in new code that we limit what can be mocks.","open","approved,","rnveach","2017-08-19T13:41:53Z","2017-08-22T15:16:39Z"
"","4393","ASTs should be appended with comment nodes only when javadoc checks are present. ASTs shouldn't be walked if there are no corresponding types of checks","Taken from this [comment](https://github.com/checkstyle/checkstyle/pull/4378#issuecomment-305086724). It seems that hidden comment nodes are appended and then the complete AST (with javadoc) is walked even when there are no javadoc checks. Calls to [walk](https://github.com/checkstyle/checkstyle/blob/de50d3465849b83d25910590e1f5f39a25fe6e2c/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L180-#L184) method shouldn't be made if corresponding checks are not there (ordinary - javadoc).  Here are the related [statistics](https://drive.google.com/open?id=0B4RBU0-G54TUUXI2QWRncFk2WkE). (produced using jprofiler).  _program arguments:_ `-c sun_checks.xml -o NUL contribution\checkstyle-tester\repositories\guava`  _had removed all the checks which would lead to javadoc parsing, i.e checks which have `isCommentNodesRequired()` returning true_","closed","approved,","voidfist","2017-05-31T15:16:53Z","2017-06-07T13:03:14Z"
"","4122","reevaluate tokens in google config for OperatorWrapCheck","Taken from PR #4120 , When reviewing the tokens of OperatorWrapCheck, it is unclear if we should add the following tokens to google configuration.  >  ""COLON"", ""TYPE_EXTENSION_AND""  We should review them and either add them to our google config or explain why they shouldn't be added in a comment.","closed","medium,","rnveach","2017-03-29T19:40:57Z","2021-03-26T05:05:17Z"
"","4121","reevaluate tokens in google config for EmptyBlock","Taken from PR #4120 , When reviewing the tokens of EmptyBlockCheck, it is unclear if we should add the following tokens to google configuration.  > ""INSTANCE_INIT"", ""LITERAL_DO"", ""LITERAL_FOR"", ""LITERAL_SYNCHRONIZED"", ""LITERAL_WHILE"", ""STATIC_INIT"" https://github.com/checkstyle/checkstyle/blob/8c0c849c8bce8e26d619bdf30ba50ac6524e55f0/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java#L223-L225  We should review them and either add them to our google config or explain why they shouldn't be added in a comment.","open","medium,","rnveach","2017-03-29T19:39:16Z","2022-07-11T18:24:14Z"
"","4111","AbstractCheck: remove tabWidth","Taken from issue in sonar at https://github.com/checkstyle/sonar-checkstyle/issues/94  We should remove [`tabWidth` from `AbstractCheck`](https://github.com/checkstyle/checkstyle/blob/bd9b4b293fc9b1ba19622ac028a0604bed8fdb5f/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java#L49) as it is making all checks have this property. All checks having it makes it difficult to see which ones actually use it.  It may be ok to keep it in `AbstractFileSet`.  Before any implementation, we must consider why `tabWidth` is in this abstract class. Right now [`TreeWalker` is the parent of this property and passes it to all check children](https://github.com/checkstyle/checkstyle/blob/bd9b4b293fc9b1ba19622ac028a0604bed8fdb5f/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L143). Also removing it will cause some issues with [how we calculate violation column positions for one of the `log` methods](https://github.com/checkstyle/checkstyle/blob/bd9b4b293fc9b1ba19622ac028a0604bed8fdb5f/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java#L252-L253).","closed","approved,","rnveach","2017-03-28T12:28:18Z","2019-04-04T13:01:07Z"
"","4814","review TreeWalker.setupChild method for exceptional cases","taken from https://github.com/checkstyle/checkstyle/pull/4755#discussion_r128916609  We need to review exception processing and make sure we deliver to user all context details if exception happen.","closed","miscellaneous,","romani","2017-07-24T00:33:29Z","2019-02-23T11:55:45Z"
"","4641","Avoid usage of getLines method from FileText","Taken from https://github.com/checkstyle/checkstyle/pull/4525  After merge of https://github.com/checkstyle/checkstyle/pull/4525 all calls to FileText#getLines will create the copy of the inner array of strings. We should avoid usage of the method (ideally we need to remove it) and replace all method calls with FileText#get(i) and FileText#size().","closed","miscellaneous,","MEZk","2017-07-06T20:21:18Z","2017-07-10T20:03:05Z"
"","4577","Add multi thread mode to ANT task","Taken from https://github.com/checkstyle/checkstyle/pull/4420#discussion_r125028751  The ANT launcher should support multi thread mode execution. The ANT task properties should be extended to allow user to run checks in the MT mode.","open","approved,","soon","2017-07-01T10:30:06Z","2018-07-07T05:14:16Z"
"","4368","DetailAST: override equals and hashcode methods","Taken from https://github.com/checkstyle/checkstyle/pull/4218#discussion_r117635871 ,  We aren't override the `equals` method in `DetailAST`. The current implementation of `equals` is coming from `antlr.BaseAST` which is a sub-class of `DetailAST` and may not be safe for usage in Checkstyle since it doesn't take into account any fields that are in `DetailAST` or the fact that Checkstyle's nodes are immutable.  After we make `DetailAST` fully immutable, we should override `equals` and `hashCode` with a correct implementation for CS so user's don't mistake what type of equality this compare is.","closed","approved,","rnveach","2017-05-22T15:00:34Z","2018-03-26T19:57:38Z"
"","4224","FinalLocalVariable: ""case"" fall-through false positive","Taken from https://github.com/checkstyle/checkstyle/pull/4115#discussion_r110142017  ``` $ javac Foo.java $ cat Foo.java public class Foo {     void foo() {         int a; // expect no violation         final int random = (int) Math.random();         switch (random) {             case 0:                 a = 1;             default:                 a = 2;                 break;         }     } } ```  ``` $ cat config.xml                                 ```  ``` $ java -jar checkstyle-7.7-SNAPSHOT-all.jar -c config.xml Foo.java Starting audit... [ERROR] /Users/LuoLiangchen/personal/develop/java/checkstyle/reproduction/Foo.java:3:13: 变量 'a' 应被声明为 final 的。 [FinalLocalVariable] Audit done. Checkstyle ends with 1 errors. ```  Expected: no violation.","open","approved,","Luolc","2017-04-18T14:32:54Z","2020-04-27T19:40:02Z"
"","4225","FinalLocalVariable: ""throw"" false negative","Taken from https://github.com/checkstyle/checkstyle/pull/4115#discussion_r110134567  ``` $ javac Foo.java $ cat Foo.java public class Foo {     void foo() {         int a; // expecte a violation         final int random = (int) Math.random();         if (random > 0) {             a = 1;             throw new RuntimeException();         }         a = 2;     } } ```  ``` $ cat config.xml                                 ```  ``` $ java -jar checkstyle-7.7-SNAPSHOT-all.jar -c config.xml Foo.java Starting audit... Audit done. ```  Expect: a violation at line 3.","open","approved,","Luolc","2017-04-18T14:41:18Z","2020-04-29T16:44:23Z"
"","4228","FinalLocalVariable: ""break"" in a loop false negative","Taken from https://github.com/checkstyle/checkstyle/pull/4115#discussion_r108645070  ``` $ javac Foo.java $ cat Foo.java public class Foo {     void foo() {         int a; // expecte a violation         final int random = (int) Math.random();         while (random > 0) {             if (random > 0) {                 a = 1;                 break;             }         }     } } ```  ``` $ cat config.xml                                 ```  ``` $ java -jar checkstyle-7.7-SNAPSHOT-all.jar -c config.xml Foo.java Starting audit... Audit done. ```  Expect: a violation at line 3.  P.S. The code could be compile without error when adding a `final`. But this usage is weird. If we access `a` outside the loop, then we would get a `variable 'a' might not have been initialized` error. Or if we assign `a` outside the loop, then we would get a `variable 'a' might already have been assigned to` error. The only way to reproduce this false negative is smth like above, declare but never assign and access.","open","approved,","Luolc","2017-04-18T14:57:45Z","2017-04-22T18:37:06Z"
"","4082","Take ""break"" into consideration in FinalLocalVariable","Taken from https://github.com/checkstyle/checkstyle/pull/4060#issuecomment-288284649  There is a regression after the fix in #4060 :  http://www.luolc.com/checkstyle-diff-report/issue3172/openjdk8/xref/Users/LuoLiangchen/personal/develop/java/checkstyle/contribution/checkstyle-tester/repositories/openjdk8/src/share/classes/com/sun/jndi/ldap/LdapCtx.java.html#L2901  The reason is that we didn't take `break` or `return` into consideration at all. There are even no `LITERAL_RETURN` or `LITERAL_BREAK` in the acceptable tokens set of the check.   Example:   ``` $ javac Sample.java $ cat Sample.java public class Sample {     public static void main(String args[]) throws Exception {         Exception e; // Doesn't warn - incorrect         final int a = (int) Math.random();         final int b = (int) Math.random();          switch (a) {         case 0:             e = new Exception();             break;         case 1:             if (b == 0) {                 e = new Exception(); // (0)                 break; // (1)             }              if (b == 1) {                 e = new Exception(); // (2)             }             else {                 e = new Exception();             }             break;         case 2:             if (b == 0) {                 return;             }              e = new Exception();             break;         default:             e = new Exception();             break;         }          throw e;     } } ``` ``` $ cat config.xml                                 ``` ``` $ java -jar checkstyle-7.7-SNAPSHOT-all.jar -c config.xml Sample.java Starting audit... Audit done. ``` Expected: violation on 3th line.  The check just ignores the `break` at (1) and since there are two assignments of `e` at (0) and (2), the violation won't be raised. That's not correct.","closed","hard,","Luolc","2017-03-22T17:26:43Z","2017-04-18T19:54:45Z"
"","4003","Indentation UTs should not use ROOT locale when they test violation/error message","taken from https://github.com/checkstyle/checkstyle/pull/3993#discussion_r105829337  The `IndentationCheckTest` is quite different from other tests. There are many `verifyWarns` in test methods. The actual assertion of `verifyWarns` is at https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java#L1785-L1786, that to use an `endsWith` but not `equals` to judge the correctness.  The `getExpectedMessage()` is defined here, https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java#L1818-L1827 And the error message in English could be one of the followings: ``` indentation.error.multi=''{0}'' have incorrect indentation level {1}, expected level should be one of the following: {2}. indentation.child.error.multi=''{0}'' child have incorrect indentation level {1}, expected level should be one of the following: {2}. indentation.error=''{0}'' have incorrect indentation level {1}, expected level should be {2}. indentation.child.error=''{0}'' child have incorrect indentation level {1}, expected level should be {2}. ``` The `endWith` way could work when the message is in English or Chinese. But in many other languages, it will not work at all. The messages could have different postfixes due to the difference of singular-plural or even pronounce stress. i.e. in Finnish ``` indentation.error.multi=''{0}'' on virheellinen sisennystason {1}, odottaa tasolla pitäisi olla yksi seuraavista: {2}. indentation.child.error.multi=''{0}'' lapsi on väärä sisennystason {1}, odottaa tasolla pitäisi olla yksi seuraavista: {2}. indentation.error={0} sisennyssyvyydellä {1} ei ole oikealla syvyydellä {2}. indentation.child.error=''{0}'' lapsi on väärä sisennystason {1}, odottaa taso olisi {2}. ``` We can see the messages have totally different postfixes.  I have logged what information the `IndentComment` really has and found that it doesn't have the token type info at all.  It only has the actual and expected intent. So we can only know that the message is smth like `''{an unknown token type}'' have incorrect indentation level {actual intent}, expected level should be {expected intent}.` I guess it is why the original contributor didn't use `equals` but `endWith`.  To sum up, I haven't found another way to do the assertion without `endWith`. And if we are using `endWith`, it is not able to do the assertion in many non-English languages. Therefore, I use the old/ugly way to enforce the locale in English.","closed","medium,","romani","2017-03-14T18:19:44Z","2017-03-19T13:43:48Z"
"","4475","Add since version to Checkstyle documentation","Taken from https://github.com/checkstyle/checkstyle/issues/4467#issuecomment-309448377 ,  Users are always trying to add new modules/properties before they are even released or with older versions of Checkstyle. We should add a new column in our xdocs, `since` and display what version of checkstyle the property was added.  > [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:check (checkstyle) on project [PROJECT_NAME]: Failed during checkstyle configuration: cannot initialize module TreeWalker - Property 'illegalClasses' in module IllegalImport does not exist, please check the documentation -> [Help 1]  This message and any similar message should also be expanded to tell the user to check/compare their version they are using.","closed","miscellaneous,","rnveach","2017-06-20T15:58:20Z","2017-06-30T16:15:23Z"
"","4609","Create and implement JavaNode interface (ex. make DetailAST fully immutable)","Taken from https://github.com/checkstyle/checkstyle/issues/4368#issuecomment-312721977 .  Based on [my](https://github.com/checkstyle/checkstyle/issues/4368#issuecomment-359907675) and [@rnveach's comment](https://github.com/checkstyle/checkstyle/issues/4368#issuecomment-359923267) in the scope of this issue (to avoid instant break of backward compatibility) we need to do: 1. Create JavaNode interface (extract public API of DetailAST to interface). 2. Implement JavaNode interface (JavaNodeImpl). We need to take into account the fact that JavaNodeImpl should be fully immutable. It is also required to implement equals and hashcode methods which use only immutable fields of JavaNodeImpl.","open","approved,","MEZk","2017-07-04T16:20:18Z","2021-12-22T04:46:56Z"
"","4408","Uppercase letters to be allowed in package names in javadoc","Taken from https://github.com/checkstyle/checkstyle/blob/25a37e5049b7816b34c552899841a978efc37a63/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputTestInvalidAtSeeReference.java#L4 .  ```` $ cat TestClass.java /**  * @see javax.swing.tree.DefaultTreeCellRenderer.get  */ public class TestClass {     void method() {     } }  $ java -jar checkstyle-7.8-all.jar -J TestClass.java Exception in thread ""main"" java.lang.IllegalArgumentException: [ERROR:1] Javadoc comment at column 0 has parse error. Unrecognized error from ANTLR parser: null     at com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinter.parseJavadocAsDetailNode(DetailNodeTreeStringPrinter.java:71)     at com.puppycrawl.tools.checkstyle.AstTreeStringPrinter.parseAndPrintJavadocTree(AstTreeStringPrinter.java:117)     at com.puppycrawl.tools.checkstyle.AstTreeStringPrinter.printJavaAndJavadocTree(AstTreeStringPrinter.java:99)     at com.puppycrawl.tools.checkstyle.AstTreeStringPrinter.printJavaAndJavadocTree(AstTreeStringPrinter.java:103)     at com.puppycrawl.tools.checkstyle.AstTreeStringPrinter.printJavaAndJavadocTree(AstTreeStringPrinter.java:103)     at com.puppycrawl.tools.checkstyle.AstTreeStringPrinter.printJavaAndJavadocTree(AstTreeStringPrinter.java:103)     at com.puppycrawl.tools.checkstyle.AstTreeStringPrinter.printJavaAndJavadocTree(AstTreeStringPrinter.java:82)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:333)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) ````  If you change `get` to `ge` than the tree prints fine with the following for the javadoc section: ```` |  |  |  `--JAVADOC -> \n * @see javax.swing.tree.DefaultTreeCellRenderer.ge\n  [1:3] |  |  |      |--NEWLINE -> \n [1:3] |  |  |      |--LEADING_ASTERISK ->  * [2:0] |  |  |      |--WS ->  [2:2] |  |  |      |--JAVADOC_TAG -> @see javax.swing.tree.DefaultTreeCellRenderer.ge\n  [2:3] |  |  |      |  |--SEE_LITERAL -> @see [2:3] |  |  |      |  |--WS ->  [2:7] |  |  |      |  |--REFERENCE -> javax.swing.tree.DefaultTreeCellRenderer. [2:8] |  |  |      |  |  |--PACKAGE -> javax.swing.tree [2:8] |  |  |      |  |  |--DOT -> . [2:24] |  |  |      |  |  |--CLASS -> DefaultTreeCellRenderer [2:25] |  |  |      |  |  `--DOT -> . [2:48] |  |  |      |  `--DESCRIPTION -> ge\n  [2:50] |  |  |      |      |--TEXT -> ge [2:50] |  |  |      |      |--NEWLINE -> \n [2:52] |  |  |      |      `--TEXT ->  [3:0] |  |  |      `--EOF ->  [3:1] ```` To me, this makes no sense why the parser is failing because of the word `get`. One possibly explanation is [we may be too strict on casing for package and class](https://github.com/checkstyle/checkstyle/blob/ef112d1868e476219fbff6f4ed8a8e9dc54af3c3/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L122-L125), but then why doesn't `ge` fail the same.  Looking at tree output, to me `ge` shouldn't be part of description but in reference.","closed","breaking compatibility,","rnveach","2017-06-02T02:44:39Z","2017-09-17T13:52:02Z"
"","4177","Add LAMBDA in RightCurly to checkstyle_checks","taken from [discussion](https://github.com/checkstyle/checkstyle/pull/3969#issuecomment-292750251).  After #3546 is fixed LAMBDA has to be added to checkstyle_ckecks.xml to make that we created functionality that are usable. Unfortunately this case is controversial and we do not have prober mode now in Check  To my current view of issue, we need to treat lambda the same as anonymous classes,  for classes we are using now `alone`, and we do not process anonymous classes right now by our config. Anonymous class is just OBJBLOCK under LITERAL_NEW, and we do not process(not supported token) LITERAL_NEW in http://checkstyle.sourceforge.net/config_blocks.html#RightCurly .  ``` $ javac MyClass.java  $ cat MyClass.java  public class MyClass {     public void foo() {         new Thread( new Runnable() {           // some overrides         }).start();     }  }  $ java -jar checkstyle-7.6-all.jar -t MyClass.java  CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |   `--LITERAL_PUBLIC -> public [1:0] |--LITERAL_CLASS -> class [1:7] |--IDENT -> MyClass [1:13] `--OBJBLOCK -> OBJBLOCK [1:21]     |--LCURLY -> { [1:21]     |--METHOD_DEF -> METHOD_DEF [2:4]     |   |--MODIFIERS -> MODIFIERS [2:4]     |   |   `--LITERAL_PUBLIC -> public [2:4]     |   |--TYPE -> TYPE [2:11]     |   |   `--LITERAL_VOID -> void [2:11]     |   |--IDENT -> foo [2:16]     |   |--LPAREN -> ( [2:19]     |   |--PARAMETERS -> PARAMETERS [2:20]     |   |--RPAREN -> ) [2:20]     |   `--SLIST -> { [2:22]     |       |--EXPR -> EXPR [5:16]     |       |   `--METHOD_CALL -> ( [5:16]     |       |       |--DOT -> . [5:10]     |       |       |   |--LITERAL_NEW -> new [3:8]     |       |       |   |   |--IDENT -> Thread [3:12]     |       |       |   |   |--LPAREN -> ( [3:18]     |       |       |   |   |--ELIST -> ELIST [3:20]     |       |       |   |   |   `--EXPR -> EXPR [3:20]     |       |       |   |   |       `--LITERAL_NEW -> new [3:20]     |       |       |   |   |           |--IDENT -> Runnable [3:24]     |       |       |   |   |           |--LPAREN -> ( [3:32]     |       |       |   |   |           |--ELIST -> ELIST [3:33]     |       |       |   |   |           |--RPAREN -> ) [3:33]     |       |       |   |   |           `--OBJBLOCK -> OBJBLOCK [3:35]     |       |       |   |   |               |--LCURLY -> { [3:35]     |       |       |   |   |               `--RCURLY -> } [5:8]     |       |       |   |   `--RPAREN -> ) [5:9]     |       |       |   `--IDENT -> start [5:11]     |       |       |--ELIST -> ELIST [5:17]     |       |       `--RPAREN -> ) [5:17]     |       |--SEMI -> ; [5:18]     |       `--RCURLY -> } [6:4]     `--RCURLY -> } [8:0] ```  Here are reports against Checkstyle: https://vladlis.github.io/rcurly/lambda/same/checkstyle/site/ https://vladlis.github.io/rcurly/lambda/alone/checkstyle/site/ https://vladlis.github.io/rcurly/lambda/alone_or_singleline/checkstyle/site/  We need to decide what brace policy to use, or may be create a new policy. This is issue is not ready to code, investigation should be done first to define how we are going to fix it..","closed","hard,","Vladlis","2017-04-09T16:39:17Z","2018-06-19T04:16:33Z"
"","4411","minor: Added a javadoc parsing UT","Taken from [comment](https://github.com/checkstyle/checkstyle/pull/4386#issuecomment-305859660).","closed","","voidfist","2017-06-02T22:27:34Z","2017-06-08T04:21:07Z"
"","4640","Javadoc Trees should be synchronized with the current checkstyle version","Taken from [4408 PR comment](https://github.com/checkstyle/checkstyle/pull/4550#discussion_r125208278). The javadoc trees in [JavadocTokenTypes.java](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.java#L45) should be updated to reflect all the new ANTLR changes being incorporated into checkstyle. This issue should be approved or be worked upon once all the major ANTLR updates are done with to avoid having to updating the trees again and again.","open","antlr-javadoc,","voidfist","2017-07-06T18:28:04Z","2021-08-12T15:58:33Z"
"","4881","doc: update CLI steps to reproduce to result in English output","taken from #4846 .  example of user reported output: ``` /var/tmp $ java -jar checkstyle-8.1-all.jar -c config.xml Foo.java  Beginne Prüfung... [ERROR] /private/var/tmp/Foo.java:16:5: Redundant 'ANNOTATION' modifier. [RedundantModifier]Überflüssiger Modifier 'ANNOTATION'. [RedundantModifier] Prüfung beendet. Checkstyle endet mit 1 Fehlern. ```  it is ok.... but it would be better to do this in English, as our team know only English in languages that we support. We also welcoming all help from outside so English will be better for all.  github files for issue template need to  be updated to enforce locale to be English/US: https://github.com/checkstyle/checkstyle/blob/master/.github/ISSUE_TEMPLATE.md https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/report_issue.xml","closed","approved,","romani","2017-08-02T07:16:23Z","2017-10-30T13:26:58Z"
"","4709","avoid boolean parameters for public methods","taken from #4707  classes: ConfigurationLoader , DefaultLogger, XMLLogger   Idea inspection: `'public' method with 'boolean' parameter` From inspection documentation ` It's almost always a mistake to add a boolean parameter to a public method (part of an API) if that method is not a setter. When reading code using such a method, it can be difficult to decipher what the boolean stands for without looking at the source or documentation. This problem is also known as the ""boolean trap"". The boolean parameter can often be profitably replaced with an enum  Use the option below to only warn when a method contains more than one boolean parameter. ` link for ""boolean trap"" - https://ariya.io/2011/08/hall-of-api-shame-boolean-trap  It will be good to update but do this accurately to not damage CI that depends on maven plugin that uses such c-tors.  Intellij Idea by visual effect over the code, ease this problem by printing name of parameter before the value: ![image](https://user-images.githubusercontent.com/812984/28167290-efdea2a4-678f-11e7-87bf-8f20d645e7c7.png) , but I still think that code should be readable without IDE","closed","miscellaneous,","romani","2017-07-12T22:57:47Z","2017-08-11T12:52:01Z"
"","4700","MT mode: Intelllij inspection violations","Taken from #4681  From Intellij Idea: ``` Synchronization on 'static' field inspection   2 errors      class LocalizedMessage   2 errors          ERROR Synchronization on 'static' field 'BUNDLE_CACHE'              ERROR Synchronization on 'static' field 'BUNDLE_CACHE'      ``` It is required to address during MultiThreading GSoC project.  @soon , fyi.","closed","miscellaneous,","romani","2017-07-12T00:18:22Z","2017-07-13T14:18:56Z"
"","4429","IllegalType: support arrays as types","taken from #4425 But imagine that use want to forbid only ""Boolean[][]"" and allow ""Boolean"" in the same time.  ``` $ cat TestClass.java  public class TestClass {     private Boolean[][] x; }  $ java -jar checkstyle-7.6.1-all.jar -T TestClass.java  CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |   `--LITERAL_PUBLIC -> public [1:0] |--LITERAL_CLASS -> class [1:7] |--IDENT -> TestClass [1:13] `--OBJBLOCK -> OBJBLOCK [1:23]     |--LCURLY -> { [1:23]     |--VARIABLE_DEF -> VARIABLE_DEF [2:4]     |   |--MODIFIERS -> MODIFIERS [2:4]     |   |   `--LITERAL_PRIVATE -> private [2:4]     |   |--TYPE -> TYPE [2:21]     |   |   `--ARRAY_DECLARATOR -> [ [2:21]     |   |       |--ARRAY_DECLARATOR -> [ [2:19]     |   |       |   |--IDENT -> Boolean [2:12]     |   |       |   `--RBRACK -> ] [2:20]     |   |       `--RBRACK -> ] [2:22]     |   |--IDENT -> x [2:24]     |   `--SEMI -> ; [2:25]     `--RCURLY -> } [3:0] ```  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java#L319 We do special exclusion of array braces - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java#L77   We do not support for now non simple types: array and generics. Should add support of them? it is big question, as it will force us to parse user input to analyse what did he mean. May be we can do only arrays, it is more simple.  Clarification: This issue is about treating Boolean and Boolean[] and Boolean and Boolean[][] as different types. #4425 is about treating Boolean[] the same as Boolean[][].","closed","approved,","romani","2017-06-07T14:29:31Z","2018-02-04T19:00:34Z"
"","4226","FinalLocalVariable: ""return"" false negative","Taken from #4082 and https://github.com/checkstyle/checkstyle/pull/4115#discussion_r109806976  ``` $ javac Foo.java $ cat Foo.java public class Foo {     void foo1() {         int a; // expecte a violation         final int random = (int) Math.random();         if (random > 0) {             a = 1;             return;         }         a = 2;     }      void foo2() {         int a; // expecte a violation         final int random = (int) Math.random();         while (random > 0) {             if (random > 0) {                 a = 1;                 return;             }         }         a = 2;     }      void foo3() {         int a; // expecte a violation         final int random = (int) Math.random();         switch (random) {             case 0:                 a = 1;                 return;             default:                 break;         }         a = 2;     } } ```  ``` $ cat config.xml                                 ```  ``` $ java -jar checkstyle-7.7-SNAPSHOT-all.jar -c config.xml Foo.java Starting audit... Audit done. ```  Expect: violations at line 3, 13, 26.","open","approved,","Luolc","2017-04-18T14:46:55Z","2020-04-27T06:29:40Z"
"","4714","Make SuppressionCommentFilter and SuppressWithNearbyCommentFilter children of TreeWalker","SuppressWithNearbyCommentFilter and SuppressionCommentFilter need to have information which can be extracted from AST. TreeWalker is the only one FileSetCheck which deals with AST. That is why it is reasonable to make both filters children of TreeWalker. AST must not be visible on the Checker level.  What should be done:  1. Create TreeWalkerAuditEvent. TreeWalkerAuditEvent is a wrapper class with the following set of fields: ```java private String fileName; private FileContents fileContents; private LocalizedMessage localizedMessage; ``` We should not extend AuditEvent or create AbstractAuditEvent as we cannot design the whole model of events now. Thus, the concrete implementation is OK.  2. Create AstFilter interface with the following api: ```java boolean accept(TreeWalkerAuditEvent auditEvent); ```   3. SuppressionCommentFilter and SuppressWithNearbyCommentFilter should implement AstFilter. Dependency on FileContentsHolder must be removed. All UTs should be fixed.  4. Add the set of AstFilters to TreeWalker.  5. All AstFilters should be initialized and configured in ```setupChild``` method of TreeWalker (similar to Checker).  6. Add the sorted set of localized messages to TreeWalker.  7. The set of messages should be cleared in notifyBegin method of TreeWalker.  8. The messages, received from the parents of AbstractCheck should be stored to the sorted set of messages in TreeWalker inside ```notifyEnd``` method.  9. TreeWalker has to filter the set of sorted messages in ```processFiltered```. All messages which pass the filtration should be given to the apper level to Checker (```AbstractFileSetCheck#addMessages```). TreeWalkerAuditEvent objects need to be created based on LocalizedMessage instances.   @timurt  You can use [my branch](https://github.com/MEZk/checkstyle/tree/tree-walker-filter) as a starting point.  ==========================  ATTENTION (config migration process): SuppressWithNearbyCommentFilter - just move config part under TreeWalker (from Checker). SuppressCommentFilter - Unfortunately we caused regression by this fix till 8.6 version for SuppressCommentFilter, upgrade is to use new Filter http://checkstyle.sourceforge.net/config_filters.html#SuppressWithPlainTextCommentFilter - just rename name of module. SuppressCommentFilter become a bit different Filter by functionality - become java code related only (can not suppress violations in comments anymore). Example or config update from 8.0 to 8.6 : https://github.com/OpenGamma/OG-Tools/pull/8/commits/7fc6a37016ab41c7c51e71879c51d3d0fd5add50","closed","breaking compatibility,","MEZk","2017-07-13T21:00:06Z","2018-05-11T13:31:29Z"
"","4831","SuppressWarningsFilter should be a child module of TreeWalker and implement TreeWalkerFilter interface","SuppressWarningsFilter knows about ast structure (columnNo, lineNo, etc) via SuppressWarningsHolder.  SuppressWarningsFilter should be a child module of TreeWalker and implement TreeWalkerFilter interface. SuppressWarningsHolder has to be removed.  We need to find a way how to get rid of [ThreadLocal> ENTRIES](https://github.com/MEZk/checkstyle/blob/9765cda41ba8767f1f187dc1b097793a1dccedcd/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java#L74-L74). It might cause problems for multi-thread mode.","open","breaking compatibility,","MEZk","2017-07-26T16:42:28Z","2019-03-03T15:57:46Z"
"","4421","Support suppression-xpath element in SuppressionLoader","SuppressionLoader should be able to parse ```suppression-xpath``` element and its attributes in accordance with https://github.com/checkstyle/checkstyle/issues/4364. In the scope of this issue it is required to create basic implementation.  **This issue is blocked by #4422.**","closed","new module,","MEZk","2017-06-05T19:37:12Z","2017-12-29T14:51:20Z"
"","4870","Mark all checks with appropriate annotation so that they could be used in the MT mode","Subtask of https://github.com/checkstyle/checkstyle/issues/4473  Each check must implement either `OneCheckInstancePerApplication` or `OneCheckInstancePerThread`.  All changes for this task must be just `implements OneCheckInstancePerApplication` or `implements OneCheckInstancePerThread`, i.e. no more logic is expected. If a particular check requires additional changes, there should be a separate issue for that check.  -----------  > Please expand in issue what are the requirements for a module to be marked with a specific interface.  1, If a check holds file state (i.e. non-final fields, non-property fields) it must be marked with `OneCheckInstancePerThread` interface. 2. If a check is stateless (all fields are final or properties, and there are no mutable fields like sets or lists) it must be marked with `OneCheckInstancePerApplication`. Note, that  a ""mutable field"" here - is the field which may change it's state while the Check processes a file. 3. If a check is global-stateful (it contains a mutable state, which must be updated across the whole application lifetime), it must be marked with `OneCheckInstancePerApplication` and all state updates must be thread-safe.","closed","miscellaneous,","soon","2017-07-31T19:03:50Z","2018-07-09T05:49:04Z"
"","4489","pmd: fix JUnit4TestShouldUseTestAnnotation violations in test classes","Subtask of #877  We should fix all violations of this type in test classes.","closed","miscellaneous,","Nimfadora","2017-06-22T18:05:15Z","2017-06-24T12:24:50Z"
"","4488","pmd: fix UselessOverridingMethod violations in test classes","Subtask of #877  We should fix all violations of this type in test classes.","closed","miscellaneous,","Nimfadora","2017-06-22T18:03:07Z","2017-06-24T12:24:55Z"
"","4567","pmd: fix all the remained","subtask of #877  fix all remained violations: JUnitTestsShouldIncludeAssert AccessorClassGeneration","closed","miscellaneous,","Nimfadora","2017-06-30T21:18:10Z","2017-07-01T00:07:43Z"
"","4518","pmd: fix TestClassWithoutTestCases violations in test classes","Subtask of #877 We should fix all violations of this type in test classes.  http://pmd.sourceforge.net/pmd-4.3.0/rules/junit.html#TestClassWithoutTestCases  > Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named testXXX.  all test methods should start with ""test"" prefix - ""testXXXXXXX"". suffix ""TestX"" from methods should be removed.","closed","miscellaneous,","romani","2017-06-24T13:14:29Z","2017-06-24T14:55:12Z"
"","4516","pmd: fix JUnitAssertionsShouldIncludeMessage violations in test classes","Subtask of #877 We should fix all violations of this type in test classes.","closed","miscellaneous,","Nimfadora","2017-06-24T12:25:53Z","2017-06-24T17:37:39Z"
"","4497","pmd: fix CheckstyleCustomShortVariable violations in test classes","Subtask of #877 We should fix all violations of this type in test classes.","closed","miscellaneous,","Nimfadora","2017-06-22T18:13:38Z","2017-06-24T12:23:53Z"
"","4496","pmd: fix NcssMethodCount violations in test classes","Subtask of #877 We should fix all violations of this type in test classes.","closed","miscellaneous,","Nimfadora","2017-06-22T18:12:45Z","2017-06-24T12:24:08Z"
"","4495","pmd: fix UncommentedEmptyMethodBody violations in test classes","Subtask of #877 We should fix all violations of this type in test classes.","closed","miscellaneous,","Nimfadora","2017-06-22T18:11:48Z","2017-06-24T12:24:14Z"
"","4494","pmd: fix AppendCharacterWithChar violations in test classes","Subtask of #877 We should fix all violations of this type in test classes.","closed","miscellaneous,","Nimfadora","2017-06-22T18:10:46Z","2017-06-24T12:24:20Z"
"","4493","pmd: fix ConfusingTernary violations in test classes","Subtask of #877 We should fix all violations of this type in test classes.","closed","miscellaneous,","Nimfadora","2017-06-22T18:09:50Z","2017-06-24T12:24:26Z"
"","4492","pmd: fix CommentDefaultAccessModifier violations in test classes","Subtask of #877 We should fix all violations of this type in test classes.","closed","miscellaneous,","Nimfadora","2017-06-22T18:08:48Z","2017-06-24T12:24:33Z"
"","4491","pmd: fix InsufficientStringBufferDeclaration violations in test classes","Subtask of #877 We should fix all violations of this type in test classes.","closed","miscellaneous,","Nimfadora","2017-06-22T18:06:46Z","2017-06-24T12:24:39Z"
"","4490","pmd: fix LoggerIsNotStaticFinal violations in test classes","Subtask of #877 We should fix all violations of this type in test classes.","closed","miscellaneous,","Nimfadora","2017-06-22T18:06:09Z","2017-06-24T12:24:44Z"
"","4208","Split and Organize Checkstyle inputs by Test for StaticVariableName","subtask of #3891 .  do a copy of all test input files to separate folder for StaticVariableName . Not any other Check should use new inputs.","closed","easy,","romani","2017-04-13T01:15:38Z","2017-04-17T18:06:13Z"
"","4080","Split and Organize Checkstyle inputs by Test for SingleSpaceSeparator","subtask of #3891 .  do a copy of all test input files to separate folder for SingleSpaceSeparator . Not any other Check should use new inputs.","closed","easy,","sabaka","2017-03-22T05:41:45Z","2017-04-25T23:13:45Z"
"","4062","Split and Organize Checkstyle inputs by Test for ParentPad","subtask of #3891 .  do a copy of all test input files to separate folder for ParentPad . Not any other Check should use new inputs.","closed","easy,","sabaka","2017-03-20T05:41:26Z","2017-04-20T01:51:04Z"
"","4090","Split and Organize Checkstyle inputs by Test for ParameterNumber","subtask of #3891 .  do a copy of all test input files to separate folder for ParameterNumber . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-23T12:42:40Z","2017-04-05T13:11:10Z"
"","4191","Split and Organize Checkstyle inputs by Test for ParameterName","subtask of #3891 .  do a copy of all test input files to separate folder for ParameterName . Not any other Check should use new inputs.","closed","easy,","romani","2017-04-11T17:23:06Z","2017-04-13T20:57:15Z"
"","4183","Split and Organize Checkstyle inputs by Test for PackageName","subtask of #3891 .  do a copy of all test input files to separate folder for PackageName . Not any other Check should use new inputs.","closed","easy,","romani","2017-04-10T17:33:56Z","2017-05-01T22:23:23Z"
"","4172","Split and Organize Checkstyle inputs by Test for PackageName","subtask of #3891 .  do a copy of all test input files to separate folder for PackageName . Not any other Check should use new inputs.","closed","easy,","romani","2017-04-07T21:04:35Z","2017-05-02T02:58:18Z"
"","4043","Split and Organize Checkstyle inputs by Test for OuterTypeNumber","subtask of #3891 .  do a copy of all test input files to separate folder for OuterTypeNumber . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-18T17:59:12Z","2017-04-20T01:52:22Z"
"","4168","Split and Organize Checkstyle inputs by Test for MethodTypeParameterName","subtask of #3891 .  do a copy of all test input files to separate folder for MethodTypeParameterName . Not any other Check should use new inputs.","closed","easy,","romani","2017-04-06T22:40:15Z","2017-04-13T23:57:41Z"
"","4158","Split and Organize Checkstyle inputs by Test for MethodName","subtask of #3891 .  do a copy of all test input files to separate folder for MethodName . Not any other Check should use new inputs.","closed","easy,","romani","2017-04-05T09:18:38Z","2017-05-01T19:01:06Z"
"","4042","Split and Organize Checkstyle inputs by Test for MethodLength","subtask of #3891 .  do a copy of all test input files to separate folder for MethodLength . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-18T17:47:01Z","2017-03-23T23:53:35Z"
"","4041","Split and Organize Checkstyle inputs by Test for MethodCount","subtask of #3891 .  do a copy of all test input files to separate folder for MethodCount . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-18T17:36:41Z","2017-03-31T13:02:30Z"
"","4014","Split and Organize Checkstyle inputs by Test for MethodCount","subtask of #3891 .  do a copy of all test input files to separate folder for MethodCount . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-15T19:58:45Z","2017-03-18T14:05:57Z"
"","4151","Split and Organize Checkstyle inputs by Test for MemberName","subtask of #3891 .  do a copy of all test input files to separate folder for MemberName . Not any other Check should use new inputs.","closed","easy,","romani","2017-04-03T17:53:09Z","2017-05-01T19:03:49Z"
"","4150","Split and Organize Checkstyle inputs by Test for LocalVariableName","subtask of #3891 .  do a copy of all test input files to separate folder for LocalVariableName . Not any other Check should use new inputs.","closed","easy,","romani","2017-04-03T17:25:49Z","2017-04-11T00:34:19Z"
"","4144","Split and Organize Checkstyle inputs by Test for LocalFinalVariableName","subtask of #3891 .  do a copy of all test input files to separate folder for LocalFinalVariableName . Not any other Check should use new inputs.","closed","easy,","romani","2017-04-02T13:30:51Z","2017-04-06T13:11:33Z"
"","4142","Split and Organize Checkstyle inputs by Test for InterfaceTypeParameterName","subtask of #3891 .  do a copy of all test input files to separate folder for InterfaceTypeParameterName . Not any other Check should use new inputs.","closed","easy,","romani","2017-04-01T21:11:40Z","2017-04-29T14:25:41Z"
"","4160","Split and Organize Checkstyle inputs by Test for LineLength","subtask of #3891 .  do a copy of all test input files to separate folder for FileLength . Not any other Check should use new inputs.","closed","easy,","romani","2017-04-05T11:14:41Z","2017-04-05T11:28:16Z"
"","4013","Split and Organize Checkstyle inputs by Test for LineLength","subtask of #3891 .  do a copy of all test input files to separate folder for FileLength . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-15T19:56:50Z","2017-04-06T10:25:14Z"
"","4012","Split and Organize Checkstyle inputs by Test for FileLength","subtask of #3891 .  do a copy of all test input files to separate folder for FileLength . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-15T19:53:04Z","2017-03-16T15:53:37Z"
"","4141","Split and Organize Checkstyle inputs by Test for ConstantName","subtask of #3891 .  do a copy of all test input files to separate folder for ConstantName . Not any other Check should use new inputs.","closed","easy,","romani","2017-04-01T18:04:50Z","2017-04-27T19:23:23Z"
"","4137","Split and Organize Checkstyle inputs by Test for ClassTypeParameterName","subtask of #3891 .  do a copy of all test input files to separate folder for ClassTypeParameterName . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-31T21:15:00Z","2017-04-27T19:28:03Z"
"","4136","Split and Organize Checkstyle inputs by Test for CatchParameterName","subtask of #3891 .  do a copy of all test input files to separate folder for CatchParameterName . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-31T20:13:40Z","2017-04-28T17:01:16Z"
"","4106","Split and Organize Checkstyle inputs by Test for AbstractClassName","subtask of #3891 .  do a copy of all test input files to separate folder for AbstractClassName . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-27T19:41:53Z","2017-04-05T12:04:31Z"
"","4095","Split and Organize Checkstyle inputs by Test for AbbreviationAsWordInName","subtask of #3891 .  do a copy of all test input files to separate folder for AbbreviationAsWordInName . Not any other Check should use new inputs.","closed","easy,","romani","2017-03-24T13:05:03Z","2017-03-25T04:11:53Z"
"","4024","Split and Organize Checkstyle inputs by Test for MethodLength","subtask of #3891 .  do a copy of all test input files to separate folder for  MethodLength . Not any other Check should use new inputs.","closed","","romani","2017-03-16T16:04:32Z","2017-04-12T20:02:32Z"
"","4220","Split and Organize Checkstyle inputs by Test in the blocks package","subtask of #3891   Move / Make a copy of all test input files to a separate folder for all checks in `blocks` package. Not any other Check should use new inputs.","closed","easy,","subkrish","2017-04-15T20:09:57Z","2017-04-28T15:06:45Z"
"","4165","Split and Organize Checkstyle inputs by Test for checks in coding package","subtask of #3891   move / do a copy of all test input files to a separate folder for all checks in `coding` package. Not any other Check should use new inputs.","closed","easy,","Vladlis","2017-04-06T11:00:01Z","2017-05-17T08:21:17Z"
"","4431","Split and Organize Checkstyle inputs by Test for checks in modifier package","subtask of #3891  Move / Make a copy of all test input files to a separate folder for all checks in modifier package. Not any other Check should use new inputs.","closed","miscellaneous,","subkrish","2017-06-07T18:11:30Z","2017-06-08T12:52:23Z"
"","4437","Split and Organize Checkstyle inputs by Test for checks in imports package","subtask of #3891  Move / Make a copy of all test input files to a separate folder for all checks in imports package. Not any other Check should use new inputs.","closed","miscellaneous,","subkrish","2017-06-08T19:42:03Z","2017-06-28T23:13:44Z"
"","4585","Split and Organize Checkstyle inputs by Test for checks in 'regexp' package","subtask of #3891  Move / Make a copy of all test input files to a separate folder for all checks in 'regexp' package. Not any other Check should use new inputs.  There are a lot of other issues/commit that named as ""Split and Organize Checkstyle inputs ...""  , you can find example of what to do there.  all files should be in subfolders on completion - https://github.com/checkstyle/checkstyle/tree/master/src/test/resources/com/puppycrawl/tools/checkstyle/checks/regexp","closed","easy,","romani","2017-07-02T16:59:42Z","2017-07-20T18:51:41Z"
"","4575","Split and Organize Checkstyle inputs by Test for checks in 'metrics' package","subtask of #3891  Move / Make a copy of all test input files to a separate folder for all checks in 'metrics' package. Not any other Check should use new inputs.","closed","miscellaneous,","subkrish","2017-07-01T03:52:31Z","2017-07-06T00:22:50Z"
"","4586","Split and Organize Checkstyle inputs by Test for checks in 'javadoc' package","subtask of #3891  Move / Make a copy of all test input files to a separate folder for all checks in 'javadoc' package. Not any other Check should use new inputs.  There are a lot of other issues/commit that named as ""Split and Organize Checkstyle inputs ..."" , you can find example of what to do there.  All files should be in subfolders on completion - https://github.com/checkstyle/checkstyle/tree/master/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc","closed","easy,","romani","2017-07-02T17:03:46Z","2017-07-11T12:08:39Z"
"","4538","Split and Organize Checkstyle inputs by Test for checks in 'indentation' package","subtask of #3891  Move / Make a copy of all test input files to a separate folder for all checks in 'indentation' package. Not any other Check should use new inputs.","closed","miscellaneous,","subkrish","2017-06-27T13:36:06Z","2017-06-30T12:30:48Z"
"","4587","Split and Organize Checkstyle inputs by Test for checks in 'checks' package","subtask of #3891  Move / Make a copy of all test input files to a separate folder for all checks in 'checks' package. Not any other Check should use new inputs.  Attention: that is bit different issue. We need to create folder ""..../checks/misc"". In ""misc"" folder put files as we do in all other issues of this series: ""misc/transaltion/Input..... .java"", ""misc/upperl/ ......"" ,...   There are a lot of other issues/commit that named as ""Split and Organize Checkstyle inputs ..."" , you can find example of what to do there.  all files should in subfolders - https://github.com/checkstyle/checkstyle/tree/master/src/test/resources/com/puppycrawl/tools/checkstyle/checks","closed","easy,","romani","2017-07-02T17:09:30Z","2017-07-09T14:54:29Z"
"","4686","Split and Organize Checkstyle inputs by Test for checks in 'ant' package","subtask of #3891  Move / Make a copy of all test input files to a separate folder for all checks in 'ant' package. Not any other Check should use new inputs.","closed","miscellaneous,","subkrish","2017-07-09T22:40:50Z","2017-07-12T14:25:36Z"
"","4588","Split and Organize Checkstyle inputs for MainTests to 'main' folder","subtask of #3891  Move / Make a copy of all test input files to a separate folder ""main"" for MainTest. Not any other XxxxxTest files should use that inputs.  There are a lot of other issues/commit that named as ""Split and Organize Checkstyle inputs ..."" , you can find example of what to do there.  https://github.com/checkstyle/checkstyle/tree/master/src/test/resources/com/puppycrawl/tools/checkstyle should be empty on completion.","closed","easy,","romani","2017-07-02T17:24:23Z","2017-07-14T12:36:37Z"
"","4365","Split and Organize Checkstyle inputs by Test for checks in header package","subtask of #3891  move / do a copy of all test input files to a separate folder for all checks in header package. Not any other Check should use new inputs.","closed","easy,","romani","2017-05-20T12:56:30Z","2017-07-11T16:05:26Z"
"","4314","Split and Organize Checkstyle inputs by Test for checks in design package","subtask of #3891  move / do a copy of all test input files to a separate folder for all checks in `design` package. Not any other Check should use new inputs.","closed","miscellaneous,","Kietzmann","2017-05-02T10:22:34Z","2017-05-06T20:52:20Z"
"","4313","Split and Organize Checkstyle inputs by Test for checks in annotation package","subtask of #3891  move / do a copy of all test input files to a separate folder for all checks in `annotation` package. Not any other Check should use new inputs.","closed","miscellaneous,","Kietzmann","2017-05-02T10:20:00Z","2017-05-11T10:43:45Z"
"","4808","idea: add messages to all asserts","sub-task of #4681   fix all **1040** violations reported by `AssertsWithoutMessages`  idea check","closed","miscellaneous,","Nimfadora","2017-07-23T16:12:19Z","2017-07-31T06:57:45Z"
"","4805","idea: fixing HtmlTagCanBeJavadocTag cause ant build error","sub-task of #4681  when we change all occurances of `...` by `{@code ...}` in TokenTypes.java build fails with an exception: ``` [INFO] Executing tasks  main:  execute: [propertyfile] Creating new property file: /home/valeria/IdeaProjects/checkstyle/target/classes/checkstylecompilation.properties   [javadoc] Generating Javadoc   [javadoc] Javadoc execution   [javadoc] Loading source file /home/valeria/IdeaProjects/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java...   [javadoc] Constructing Javadoc information...   [javadoc] 1 error   [javadoc] javadoc: error - In doclet class com.puppycrawl.tools.checkstyle.doclets.TokenTypesDoclet,  method start has thrown an exception java.lang.reflect.InvocationTargetException   [javadoc] java.lang.IllegalArgumentException: Should be only one tag.   [javadoc] 	at com.puppycrawl.tools.checkstyle.doclets.TokenTypesDoclet.start(TokenTypesDoclet.java:73)   [javadoc] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   [javadoc] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)   [javadoc] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   [javadoc] 	at java.lang.reflect.Method.invoke(Method.java:498)   [javadoc] 	at com.sun.tools.javadoc.DocletInvoker.invoke(DocletInvoker.java:310)   [javadoc] 	at com.sun.tools.javadoc.DocletInvoker.start(DocletInvoker.java:189)   [javadoc] 	at com.sun.tools.javadoc.Start.parseAndExecute(Start.java:366)   [javadoc] 	at com.sun.tools.javadoc.Start.begin(Start.java:219)   [javadoc] 	at com.sun.tools.javadoc.Start.begin(Start.java:205)   [javadoc] 	at com.sun.tools.javadoc.Main.execute(Main.java:64)   [javadoc] 	at com.sun.tools.javadoc.Main.main(Main.java:54) [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 13.710 s [INFO] Finished at: 2017-07-23T19:02:50+03:00 [INFO] Final Memory: 38M/439M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.8:run (ant-phase-compile) on project checkstyle: An Ant BuildException has occured: The following error occurred while executing this line: [ERROR] /home/valeria/IdeaProjects/checkstyle/config/ant-phase-compile.xml:13: Javadoc returned 1 [ERROR] around Ant part ...... @ 7:48 in /home/valeria/IdeaProjects/checkstyle/target/antrun/build-main.xml [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException  Process finished with exit code 1 ``` System specifications: ``` Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T21:37:52+03:00) Maven home: /usr/local/apache-maven-3.2.1 Java version: 1.8.0_131, vendor: Oracle Corporation Java home: /usr/java/jdk1.8.0_131/jre Default locale: en_US, platform encoding: UTF-8 OS name: ""linux"", version: ""3.10.0-514.21.1.el7.x86_64"", arch: ""amd64"", family: ""unix"" ``` changes are provided in the [PR](https://github.com/checkstyle/checkstyle/pull/4807)","closed","miscellaneous,","Nimfadora","2017-07-23T15:52:47Z","2017-08-22T00:35:48Z"
"","4707","idea: ninth part of idea violations","sub-task of #4681  too widespread to be included to the report: Feature envy **961** Local variable of concrete class **3071** Method parameter of concrete class **1292** public method not exposed in interface **1335**  [report on all other violations](https://nimfadora.github.io/idea/suppressed_abstraction.html)  violations names included: ``` fixed: CastToConcreteClass InstanceVariableOfConcreteClass InstanceofChain LocalVariableOfConcreteClass MagicNumber MethodReturnOfConcreteClass StaticMethodOnlyUsedInOneClass StaticVariableOfConcreteClass FeatureEnvy InstanceofInterfaces ParameterOfConcreteClass PublicMethodNotExposedInInterface TypeMayBeWeakened  will be addressed in another task: BooleanParameter ```","closed","miscellaneous,","Nimfadora","2017-07-12T21:11:41Z","2017-08-08T14:10:40Z"
"","4713","idea: third part of violations","sub-task of #4681  too widespread to be included to the report: Duplicate String Literal **8645** Hard coded strings **11888** String concatenation **9477** Single class import **4567** Static import **705**  [report on all other violations](https://nimfadora.github.io/idea/suppressed_3_part.html)  violations included: ``` AbstractClassExtendsConcreteClass BooleanMethodIsAlwaysInverted BooleanVariableAlwaysNegated BreakStatement ContinueStatement CyclicClassDependency CyclicPackageDependency DuplicateStringLiteralInspection EmptyMethod ErrorRethrown HardCodedStringLiteral IfMayBeConditional LawOfDemeter MagicCharacter NonThreadSafeLazyInitialization PublicInnerClass SameParameterValue SameReturnValue SingleClassImport StaticImport StringConcatenation NestedTryStatement ProtectedField ProtectedInnerClass AssignmentToForLoopParameter ForLoopWithMissingComponent CheckedExceptionClass ExtendsConcreteCollection StaticVariableInitialization StaticVariableUninitializedUse ```","closed","miscellaneous,","Nimfadora","2017-07-13T18:58:24Z","2017-07-21T14:08:37Z"
"","4711","idea: eights part of idea violations","sub-task of #4681  too widespread to be included to the report: Chained method calls **1679** Constant on right side of comparison **1880** Instance field access not qualified with this **3512** Instance method call not qualified with this **11547** Local variable or parameter can be final **3834** Nested method call **6207** Unqualified inner class access **754** Unqualified static access **4421**  [report on all other violations](https://nimfadora.github.io/idea/suppressed_code_style.html)  violations names included: ``` ChainedMethodCall ConstantOnRHSOfComparison ImplicitCallToSuper LocalCanBeFinal NestedMethodCall UnqualifiedFieldAccess UnqualifiedInnerClassAccess UnqualifiedMethodAccess UnqualifiedStaticUsage ReturnThis ```","closed","miscellaneous,","Nimfadora","2017-07-13T11:25:26Z","2017-07-16T12:30:58Z"
"","4801","idea: eleventh part of idea violations","sub-task of #4681  review is available [here](https://github.com/checkstyle/checkstyle/issues/4681#issuecomment-314579793)  Violations included: ``` fixed: XmlUnboundNsPrefix XmlHighlighting UnclearBinaryExpression SwitchStatement UseOfAnotherObjectsPrivateField TryFinallyCanBeTryWithResources ThreeNegationsPerMethod VariableNotUsedInsideIf SystemProperties SwitchStatementWithTooManyBranches StringEquals StringEqualsIgnoreCase SuperTearDownInFinally SuspiciousLiteralUnderscore SuspiciousLocalesLanguages SyntaxError TailRecursion ThrowCaughtLocally TrailingSpacesInProperty UnnecessaryUnicodeEscape WrongPropertyKeyValueDelimiter TransientFieldNotInitialized SynchronizationOnStaticField UnnecessaryDefault TestMethodWithoutAssertion UnusedReturnValue unused TooBroadCatch UncheckedExceptionClass UnusedProperty TodoComment ThisEscapedInConstructor StringTokenizer VarargParameter SystemExit UseOfPropertiesAsHashtable UnnecessaryFinalOnLocalVariableOrParameter XmlPathReference WeakerAccess ```","closed","miscellaneous,","Nimfadora","2017-07-23T10:54:01Z","2017-08-11T05:47:30Z"
"","4725","idea: tenth part of idea violations","sub-task of #4681  full report is [here](https://teamcity.jetbrains.com/viewLog.html?buildId=1116964&buildTypeId=Checkstyle_IdeaInspectionsPullRequest&tab=Inspection)  violations reported by TC, but not seen on my local: JavaScript function metrics DOM issues CSS Code style issues Code quality tools General -> Duplicated Code  violations remained undocumented: ``` GjsLint JSHint JSLint TsLint Eslint Jscs InnerHTMLJS Duplicates AssertMessageNotString CheckStyle CollectionAddAllCanBeReplacedWithConstructor CssConvertColorToRgbInspection CssUnusedSymbol DanglingJavadoc ExtendsThrowable FieldAccessedSynchronizedAndUnsynchronized FieldRepeatedlyAccessed FunctionWithMultipleLoopsJS Guava GuavaFluentIterable HtmlUnknownTarget IgnoreDuplicateEntry IgnoreRelativeEntry IgnoreUnusedEntry JSDeclarationsAtScopeStart MethodNamesDifferOnlyByCase MethodOnlyUsedFromInnerClass PackageNamingConvention enabledByDefault:false PackageVisibleField RedundantMethodOverride ResultOfObjectAllocationIgnored StaticNonFinalField UnusedParameters scope:Production:false ```","closed","miscellaneous,","Nimfadora","2017-07-15T17:03:31Z","2017-07-24T21:59:53Z"
"","4726","idea: fifth part of idea violations","sub-task of #4681  full report is [here](https://teamcity.jetbrains.com/viewLog.html?buildId=1116964&buildTypeId=Checkstyle_IdeaInspectionsPullRequest&tab=Inspection)  in scope of this issue we should fix: Performance issues Portability issues Probable bugs Properties files  Violations included: ``` fixed: EqualsUsesNonFinalVariable HashCodeUsesNonFinalVariable AlphaUnsortedPropertiesFile InconsistentResourceBundle MethodMayBeStatic CallToSimpleGetterInClass MismatchedCollectionQueryUpdate NullableProblems CollectionsMustHaveInitialCapacity ConstantConditions DuplicatePropertyInspection HardcodedFileSeparators HardcodedLineSeparators LengthOneStringsInConcatenation MagicConstant ObjectAllocationInLoop ObjectEquality ReturnNull SuspiciousArrayCast ``` StringBufferMustHaveInitialCapacity will be addressed #4812","closed","miscellaneous,","Nimfadora","2017-07-15T17:09:53Z","2017-08-08T14:10:02Z"
"","4723","idea: fourth part of idea violations","sub-task of #4681  full report is [here](https://teamcity.jetbrains.com/viewLog.html?buildId=1116964&buildTypeId=Checkstyle_IdeaInspectionsPullRequest&tab=Inspection)  in scope of this issue we should fix: Logging issues Maven Method metrics Modularization issues Naming conventions Numeric issues Packaging issues  Violations included: ``` ClassIndependentOfModule ClassNamePrefixedWithPackageName ClassOnlyUsedInOnePackage ClassUnconnectedToPackage ClassWithoutLogger CyclomaticComplexity DisjointPackage ImplicitNumericConversion LambdaParameterNamingConvention MavenModelInspection MethodWithMultipleLoops ModuleWithTooManyClasses NonCommentSourceStatements OverloadedVarargsMethod ParametersPerConstructor PublicMethodWithoutLogging ``` will be addresses in separate issue: `MultipleReturnPointsPerMethod` #3496","closed","miscellaneous,","Nimfadora","2017-07-15T15:43:28Z","2017-07-20T19:27:18Z"
"","4722","idea: seventh part of idea violations","sub-task of #4681  full report is [here](https://teamcity.jetbrains.com/viewLog.html?buildId=1116964&buildTypeId=Checkstyle_IdeaInspectionsPullRequest&tab=Inspection)  in scope of this issue we should fix: J2ME Java 7 Java 8 Java language level issues Java language level migration aids JavaBeans issues Javadoc issues JUnit issues  Violations included: ``` EqualsReplaceableByObjectsCall AbstractClassWithOnlyOneDirectInheritor ArrayLengthInLoopCondition InterfaceWithOnlyOneDirectInheritor CheckForOutOfMemoryOnLargeArrayAllocation MethodCallInLoopCondition PrivateMemberAccessBetweenOuterAndInnerClass Annotation AutoBoxing AutoUnboxing EnumClass ForeachStatement IfCanBeSwitch ClassWithoutConstructor ClassWithoutNoArgConstructor FieldHasSetterButNoGetter CodeBlock2Expr MissingPackageInfo SimplifiableIfStatement HtmlTagCanBeJavadocTag ```","closed","miscellaneous,","Nimfadora","2017-07-15T15:20:05Z","2017-07-24T13:15:02Z"
"","4724","idea: sixth part of idea violations","sub-task of #4681  full report is [here](https://teamcity.jetbrains.com/viewLog.html?buildId=1116964&buildTypeId=Checkstyle_IdeaInspectionsPullRequest&tab=Inspection)  in scope of this issue we should fix: General Resource management issues Security issues Serialization issues Spelling TestNG Threading issues toString() issues Visibility issues  Violations fixed: ``` AutoCloseableResource ClassHasNoToStringMethod CloneableClassInSecureContext DeserializableClassInSecureContext DesignForExtension JUnitTestNG LongLine NonStaticInnerClassInSecureContext ParameterHidingMemberVariable SerializableClassInSecureContext SpellCheckingInspection FieldNotUsedInToString ClassLoaderInstantiation IOResource NonSerializableFieldInSerializableClass NonSynchronizedMethodOverridesSynchronizedMethod SerializableHasSerializationMethods ```","closed","miscellaneous,","Nimfadora","2017-07-15T16:40:49Z","2017-07-27T13:49:49Z"
"","4940","idea:  twelfth part of idea violations","sub-task of #4681  fixed: ``` ClassComplexity OptionalIsPresent DuplicateAlternationBranch SingleCharAlternation Convert2streamapi Java8MapApi TooBroadScope SimplifyStreamApiCallChains MultipleReturnPointsPerMethod AnonymousHasLambdaAlternative Convert2MethodRef Java8MapForEach StringCompareTo NestedSwitchStatement ```","closed","miscellaneous,","Nimfadora","2017-08-12T12:10:30Z","2017-08-22T00:46:28Z"
"","4812","idea: add initial capacities to StringBuffer","sub-task of #4681  fix StringBufferMustHaveInitialCapacity idea violation","closed","miscellaneous,","Nimfadora","2017-07-23T18:10:45Z","2017-07-27T22:31:13Z"
"","4866","idea: fix ThisEscapedInConstructor idea violation for TreeTable class","sub-task of #4681  fix 'this' reference escaped in object construction for TreeTable class [here](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java#L72) and [here](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java#L79)","closed","","Nimfadora","2017-07-31T06:46:16Z","2017-08-11T12:45:39Z"
"","4862","idea: fix ThisEscapedInConstructor idea violation for XmlLoader class","sub-task of #4681  fix 'this' reference escaped in object construction for [XmlLoader](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/XmlLoader.java#L71) class","open","approved,","Nimfadora","2017-07-31T06:38:18Z","2019-03-03T16:12:16Z"
"","4864","idea: fix ThisEscapedInConstructor idea violation for IndentationCheck class","sub-task of #4681  fix 'this' reference escaped in object construction for [IndentationCheck](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java#L116) class","open","approved,","Nimfadora","2017-07-31T06:43:45Z","2019-03-03T16:23:44Z"
"","4863","idea: fix ThisEscapedInConstructor idea violation for ImportControl class","sub-task of #4681  fix 'this' reference escaped in object construction for [ImportControl](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControl.java#L122) class","closed","miscellaneous,","Nimfadora","2017-07-31T06:41:17Z","2017-08-20T12:50:40Z"
"","4861","idea: fix ThisEscapedInConstructor idea violation for AbstractClassCouplingCheck.FileContext class","sub-task of #4681  fix 'this' reference escaped in object construction for [AbstractClassCouplingCheck.FileContext](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java#L253) class","closed","miscellaneous,","Nimfadora","2017-07-31T06:32:05Z","2019-04-03T00:56:42Z"
"","4708","idea: second part of violations","sub-task of #4681  [report on violations](https://nimfadora.github.io/idea/suppressed_2_part.html)  violations names included: ``` AnonymousClassMethodCount:true Production:true AnonymousInnerClass AntResolveInspection AssignmentToNull AssignmentToStaticFieldFromInstanceMethod ClassComplexity ClassCoupling ClassInheritanceDepth CloneableImplementsClone ConstantDeclaredInAbstractClass DeprecatedIsStillUsed Deprecation FieldCanBeLocal FieldCount FinalClass FinalMethod MethodCount NoopMethodInAbstractClass PublicConstructor SystemOutErr UtilityClass UtilityClassCanBeEnum ```","closed","miscellaneous,","Nimfadora","2017-07-12T21:40:00Z","2017-07-16T12:30:21Z"
"","4829","wercker: NoErrorTest on sevntu with checkstyle's snapshot","some odd stuff ... we fixing new violations in Hibernate/Orekit/ during PR ...... but not in Sevntu - https://travis-ci.org/sevntu-checkstyle/sevntu.checkstyle/jobs/257164520","closed","miscellaneous,","romani","2017-07-26T16:08:06Z","2017-07-29T03:35:25Z"
"","4098","Grammar mistakes in PULL_REQUEST_TEMPLATE.md","Some grammar mistakes, they are marked on the screenshot. ![](http://image.prntscr.com/image/3394e622593a4977b779de19d42934d0.png)","closed","miscellaneous,","unrealwork","2017-03-25T01:12:18Z","2017-03-27T02:26:35Z"
"","4424","Issue #4365: Split and Organize Checkstyle inputs by Test for checks …","Solution for Issue #4365   > subtask of #3891 >  > move / do a copy of all test input files to a separate folder for all checks in header package. > Not any other Check should use new inputs.","closed","","sharang108","2017-06-06T10:03:25Z","2017-06-06T20:28:18Z"
"","4463","Manually parse the Ant configUrl field into a URL","so that invalid URLs can be treated as resource paths. Fixes #4449.","closed","","dimo414","2017-06-16T21:14:02Z","2017-06-25T23:11:50Z"
"","4957","Add MultiThread TreeWalker implementation","Since walking is one of the most consuming operations, we should process checks in parallel inside the MT version of TreeWalker","open","hard,","soon","2017-08-17T20:16:31Z","2019-11-12T19:55:43Z"
"","4921","OverloadMethodsDeclarationOrderCheck: warning message is unclear","See also #3770  We enabled the `OverloadMethodsDeclarationOrderCheck` in our project, and one of our team got the message :  `Overload methods should not be split. Previous overloaded method located at line '545'.`  The comment was:  The above error message isn’t really clear about what the problem was. I wasn’t sure what “splitting” methods meant.  We discussed this and figured out what the message meant, but everyone agreed that ""Splitting"" in this context was not entirely clear.   The suggestion for the warning message was:   `All overloaded methods should be placed next to each other. Placing non-overloaded methods in between overloaded methods with the same type is a checkstyle violation.` or further extended if possilbe/reasonable `The offending method is  and it is splitting up the overloaded methods  and `","closed","miscellaneous,","tjoneslo","2017-08-09T13:51:47Z","2020-04-08T09:42:05Z"
"","4841","new Checker filter SuppressWithPlainTextCommentFilter as akin to Treewalker's SuppressionCommentFilter","Same as #4884  cat Test.java ```Java class Test {   // CHECKSTYLE:OFF   //	has tab here } ``` cat config.xml ```xml                                                                                                                 ```  java -jar checkstyle-8.1-all.jar -c config.xml Test.java ``` Starting audit... [ERROR] /***/Test.java:3:5: Line contains a tab character. [FileTabCharacter] Audit done. Checkstyle ends with 1 errors. ``` ---------------  expected no errors because there is a suppression comment filter.  while it works on 8.0","closed","new module,","PhantomThief","2017-07-28T00:41:02Z","2017-12-30T15:52:28Z"
"","4884","Checkstyle 8.1 SuppressionCommentFilter can no longer suppress RegexpMultiline warnings","same as #4841  I'm upgrading from Checkstyle 8.0 to 8.1, at which point my Checkstyle workflow breaks. In 8.1 the SuppressionCommentFilter was changed to be a TreeWalker child, instead of a Checker child. With this change it seems that it is now no longer possible to suppress non-TreeWalker warnings in Java files. Specifically, I have quite some RegexpMultiline checks for our code base, for which some locations are disabled through Checkstyle suppression instructions in Java comments.  As an example, consider the following part of a Java file: ```java 	public static void safeShutdown(@CheckForNull ExecutorService executor, 			Duration gracefulTimeout, Duration interruptTimeout, String executorServiceIdentifier) { 			// ... 			// CHECKSTYLE:OFF:RegexpMultiline 			executor.shutdownNow(); 			// CHECKSTYLE:ON:RegexpMultiline 			// ... 	} ```  I'm using the following Checkstyle configuration (this is a very small excerpt, but includes the supression and multiline modules in question.  ```xml    	 	 		 			 			 			 		 	 	 		 		 		 	  ```  When running this through Checkstyle 8.1 (from Gradle) I now get: ``` [ant:checkstyle] [WARN] X:\dev\projects\toolkit\common-core\src\main\java\nl\forcare\concurrent\DelegatingExecutorService.java:84: Don't use executor.shutdownNow() without awaitTermination. ExecutorUtil.safeShutdown() is usually your best bet. [RegexpMultiline] [ant:checkstyle] [WARN] X:\dev\projects\toolkit\common-core\src\main\java\nl\forcare\concurrent\ExecutorUtil.java:89: Don't use executor.shutdownNow() without awaitTermination. ExecutorUtil.safeShutdown() is usually your best bet. [RegexpMultiline] ```  ---------------  Is there still a way to suppress the RegexpMultiline warnings through comments in the Java files. I am aware that I could rewrite all these locations (hundreds) such that the suppressions become part of the supressions XML file filter, but I'd rather keep using the comments, as they are nice and local in the code and clearly show at that location that we explicitly disable the rule.  Note: although I do not want to prescribe the solution, it would be useful if there would be some generic form of text-file line suppression filter. I could then run Checkstyle over any type of text file (Javascript, Markdown, etc.) and use a certain form of comment in all these files to disable the generic RegexpSingleline module.","closed","approved,","Ricq","2017-08-02T12:37:30Z","2018-01-30T22:23:38Z"
"","4569","Can't resolve systemId of configuration file","running the ant version of checkstyle, it produces the following output  resolving systemId: http://www.puppycrawl.com/dtds/configuration_1_3.dtd could not resolve systemId  and then throws exceptions, like  Caused by: org.xml.sax.SAXParseException; systemId: file:/home/dave/dev/acme/acme_platform-2.0/checkstyle/acme_checkstyle.xml; lineNumber: 6; columnNumber: 24; Unexpected element ""{}module"" {antlib:org.apache.tools.ant}module   and seemingly just stalls there ad. infinitum.  Any ideas what i'm doing wrong?  config like ```     	 	  ```","closed","","mebigfatguy","2017-06-30T21:29:40Z","2017-07-05T20:37:42Z"
"","4057","RightCurly: Update logic for option ALONE and ALONE_OR_SINGLELINE to support double brace initializes handling without shouldStartLine","RightCurlyCheck should validate double brace initializes without the need of shouldStartLine=true. For example: ```` $ cat TestClass.java public class TestClass {     void method() {         java.util.Map map2 = new java.util.LinkedHashMap() {{             put(""Hello"", ""World"");             put(""first"", ""second"");             put(""polygene"", ""lubricants"");             put(""alpha"", ""betical"");}  //violation (line 7)         };     } }  $ cat TestConfig.xml                                                                                    $ java -jar checkstyle-7.6-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  If shouldStartLine = true, there will be a violation on line 7 for ALONE and ALONE_OR_SINGLELINE.  http://rveach.no-ip.org/checkstyle/checkstyle.php?action=view&config=d74389219b72d7663eea61765b13cea7&code=2d05a2db84e848faab58bc78208e0d15&checkstyle=checkstyle-7.6-all.jar&printTree=  UPDATE: Expected: NO violations in both cases. Validation for such cases will be done in new Check - #5945","open","discussion ongoing,","MEZk","2017-03-19T14:08:12Z","2018-06-23T04:38:40Z"
"","4717","Improve Error Handling for Javadoc Parsing","Right now when the errorListener object we [implemented](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java#L448) for ANTLR [doesn't receive any errorMessage](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java#L131-#L134), we [generate](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java#L135) an uninformative ParseErrorMessage with key `MSG_KEY_UNRECOGNIZED_ANTLR_ERROR` leading to error messages like  ``` [ERROR:0] Javadoc comment at column -3 has parse error. Unrecognized error from ANTLR parser: null ```  There is potential for adding custom error handling here and we can at least handle general cases if not all the cases and generate more informative error messages for the user.","closed","miscellaneous,","voidfist","2017-07-14T06:08:16Z","2017-07-28T08:33:44Z"
"","4367","pitest: create profile for non-checks code","right now we do have maven profiles only for Checks (check packages), we do need create one more(or few) profiles to run tests of non-checks code.  Whole our code should be covered by pitest. Pitest should check all packages of code. No changes for test are required now, we just need profile(s) and strict mutationThreshold value in profiles to fail build if threshold is lowered.  Execution time of profile should not be more then 15-20 min (limitation of CI for execution time of build).","closed","miscellaneous,","romani","2017-05-22T00:36:42Z","2017-07-04T15:02:01Z"
"","4500","pmd: enable validation on IT java sources","right now all ITs are excluded `src/it`  but exclude shuold be applied only to:  src/it/resourecs","closed","miscellaneous,","romani","2017-06-22T23:50:04Z","2017-06-29T21:53:39Z"
"","4114","Changed to net.trajano.mojo:linkcheck-maven-plugin","Resolves issues with maven-linkcheck-plugin to fix Issue #4113  this uses the forks   doxia-linkcheck : https://github.com/trajano/maven-doxia-tools/ This integrates https://github.com/apache/maven-doxia-tools/pull/2   maven-linkcheck-plugin : https://github.com/trajano/maven-plugins/tree/trajano-linkcheck fixes some issues in Windows and makes it use the doxia-linkcheck fork.","closed","","trajano","2017-03-28T15:21:50Z","2017-04-21T19:32:24Z"
"","4021","Issue #3970: Split Inputs test for EmptyInitializerPadTest","Resolved Issue #3970. This pull request is for splitting the input tests for EmptyForInitializerPadTest","closed","","samuel-gu","2017-03-16T10:31:42Z","2017-03-17T07:56:10Z"
"","4297","TeamCity bulids are failing","Reported: https://teamcity-support.jetbrains.com/hc/en-us/requests/970719 waiting for reply ....","closed","","romani","2017-04-25T23:10:52Z","2017-04-26T13:13:14Z"
"","4329","Wercker CI is unstable while cloning repositories","reported to wercker support, no actions from them.  Wercker is periodically failing , and we can not relaunch CI bdue to another issue on wercker that is confirmed and reproduced by them and will be fixed some day. ``` 27 seconds NoExceptiontest - Guava  export WERCKER_STEP_ROOT=""/pipeline/script-0cb30b75-e225-4766-8c34-cdb47e58ccdd"" export WERCKER_STEP_ID=""script-0cb30b75-e225-4766-8c34-cdb47e58ccdd"" export WERCKER_STEP_OWNER=""wercker"" export WERCKER_STEP_NAME=""script"" export WERCKER_REPORT_NUMBERS_FILE=""/report/script-0cb30b75-e225-4766-8c34-cdb47e58ccdd/numbers.ini"" export WERCKER_REPORT_MESSAGE_FILE=""/report/script-0cb30b75-e225-4766-8c34-cdb47e58ccdd/message.txt"" export WERCKER_REPORT_ARTIFACTS_DIR=""/report/script-0cb30b75-e225-4766-8c34-cdb47e58ccdd/artifacts"" source ""/pipeline/script-0cb30b75-e225-4766-8c34-cdb47e58ccdd/run.sh"" < /dev/null Cloning into 'contribution'... fatal: unable to access 'https://github.com/checkstyle/contribution/': Could not resolve host: github.com ```  ``` NoExceptiontest - pmd elasticsearch lombok-ast  ..... Cloning git repository 'elasticsearch' to repositories/elasticsearch folder ... Cloning into 'repositories/elasticsearch'... fatal: unable to access 'https://github.com/elastic/elasticsearch/': Could not resolve host: github.com Caught: groovy.lang.GroovyRuntimeException: Error: ! groovy.lang.GroovyRuntimeException: Error: ! 	at launch.executeCmd(launch.groovy:294) 	at launch.executeCmd(launch.groovy:288) 	at launch$executeCmd$4.callCurrent(Unknown Source) 	at launch.cloneRepository(launch.groovy:116) 	at launch$_generateCheckstyleReport_closure2.doCall(launch.groovy:82) 	at launch.generateCheckstyleReport(launch.groovy:64) 	at launch$generateCheckstyleReport$1.callCurrent(Unknown Source) 	at launch.run(launch.groovy:10) ```","closed","miscellaneous,","romani","2017-05-03T18:13:45Z","2017-05-27T00:23:13Z"
"","4677","remove deprecated AbstractDeclarationCollector, AbstractFormatCheck, AbstractOptionCheck","remove deprecated:  - AbstractDeclarationCollector,  - AbstractFormatCheck,  - AbstractOptionCheck   removal is required also from all our configs (pom, suppressions, .....)","closed","breaking compatibility,","romani","2017-07-09T15:26:38Z","2017-07-10T11:59:14Z"
"","4426","Issue #4365: Split and Organize Checkstyle inputs by Test for checks …","Related to Issue #4365   > subtask of #3891 >  > move / do a copy of all test input files to a separate folder for all checks in header package. > Not any other Check should use new","closed","","sharang108","2017-06-06T20:31:51Z","2017-06-19T21:30:25Z"
"","4240","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: SuperFinalize","Related to issue #4165  Class: SuperFinalizeCheck","closed","","Kietzmann","2017-04-20T17:09:25Z","2017-04-21T10:34:08Z"
"","4230","Issue #4062: Split and Organize Checkstyle inputs by Test for ParentPad","Related to issue #4062  What was done: 1) Moved all necessary classes to new package /parenpad 2) Renamed InputParenPad.java to InputParenPadLeftRightAndNoSpace.java","closed","","Kietzmann","2017-04-19T14:03:49Z","2017-04-20T01:50:17Z"
"","4233","Issue #3933: Split and Organize Checkstyle inputs by Test for NoLineWrap","Related to issue #3933","closed","","Kietzmann","2017-04-19T16:15:08Z","2017-04-20T01:53:08Z"
"","4268","Issue #4267: Fixed broken test","Related to #4267  Placed InputEmptyDefault.java into the correct package and renamed it to fit requirements.","closed","","Kietzmann","2017-04-22T21:07:25Z","2017-04-23T01:42:15Z"
"","4288","Issue #4141: Split and Organize Checkstyle inputs by Test for ConstantName","Related to #4141","closed","","Kietzmann","2017-04-24T21:05:20Z","2017-04-27T22:45:47Z"
"","4445","Unstable TreeWalkerTest during coverage execution","related  to #4393.  reported at https://github.com/checkstyle/checkstyle/pull/4433#issuecomment-307534322 and at https://github.com/checkstyle/checkstyle/pull/4442#issuecomment-307487942  @ps-sp , please rewrite code a bit in UT to avoid such checks of mocks - it is not stable. Problem could not be resolved by CI relaunch. @ps-sp , please address this issue ASAP.","closed","miscellaneous,","romani","2017-06-10T01:51:13Z","2017-06-12T17:53:56Z"
"","4774","(refactor) some opportunities to use diamond operator","refactoring: update code to compliance with java 1.7","closed","","desmorto","2017-07-20T01:48:42Z","2017-07-20T19:48:50Z"
"","4939","Update documentation for new abstract methods in AbstractCheck","Recheck examples at http://checkstyle.sourceforge.net/writingchecks.html after methods get required tokens()/...... are introduced","open","approved,","romani","2017-08-12T09:19:58Z","2017-12-14T16:04:09Z"
"","4232","Issue #4043: Split and Organize Checkstyle inputs by Test for OuterTypeNumber","Pull request related to issue #4043  What was done: 1) Moved all necessary classes to new package /outertypenumber 2) Renamed InputSimple to InputOuterTypeNumberSimple and InputOuterTypeNumber to InputOuterTypeNumberEmptyInner","closed","","Kietzmann","2017-04-19T15:53:38Z","2017-04-20T01:51:59Z"
"","4068","Issue #4043: Split and Organize Checkstyle inputs by Test for OuterTy…","Pull request for #4043","closed","incomplete,","tashish","2017-03-21T05:33:39Z","2017-05-01T20:28:07Z"
"","4353","refactoring: remove 'final' modifier from all arguments of method/c-tor at ImportControlCheck and around","problem was found at https://github.com/checkstyle/checkstyle/pull/4282#discussion_r116366595  New code added a lot of unnecessary `final` in parameters of methods and constructors. We have a guard Check that catch reusage of argument, so this finals in these areas just make code verbose. We should remove all `final` in parameters for these areas.  Fix should be done after PR #4282 is merged.","closed","easy,","romani","2017-05-13T22:40:30Z","2017-06-23T19:50:15Z"
"","4605","minimize pitest-checkstyle-utils profile execution","problem was detected at https://github.com/checkstyle/checkstyle/pull/4596#pullrequestreview-47748284  pitest-checkstyle-utils  has too much tests in it: ```        com.puppycrawl.tools.checkstyle.utils.*     com.puppycrawl.tools.checkstyle.AstTreeStringPrinterTest     com.puppycrawl.tools.checkstyle.ConfigurationLoaderTest     com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinterTest     com.puppycrawl.tools.checkstyle.PackageObjectFactoryTest     com.puppycrawl.tools.checkstyle.checks.FinalParametersCheckTest     com.puppycrawl.tools.checkstyle.checks.TranslationCheckTest     com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheckTest     com.puppycrawl.tools.checkstyle.checks.coding.MultipleVariableDeclarationsCheckTest     com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheckTest     com.puppycrawl.tools.checkstyle.checks.javadoc.*     com.puppycrawl.tools.checkstyle.checks.regexp.RegexpOnFilenameCheckTest     com.puppycrawl.tools.checkstyle.checks.whitespace.*     com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter     com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilterTest     com.puppycrawl.tools.checkstyle.internal.AllChecksTest    ```  we should avoid usage of all Check test - com.puppycrawl.tools.checkstyle.checks if we need some test methods, we should  copy them to Utils test.  -------","open","has bounty,","romani","2017-07-04T14:46:33Z","2019-04-13T17:19:55Z"
"","4604","minimize pitest-checkstyle-tree-walker profile execution","problem was detected at https://github.com/checkstyle/checkstyle/pull/4596#pullrequestreview-47748284  pitest-checkstyle-tree-walker  has too much tests in it: ```        com.puppycrawl.tools.checkstyle.DetailNodeTreeStringPrinterTest     com.puppycrawl.tools.checkstyle.AstTreeStringPrinterTest     com.puppycrawl.tools.checkstyle.TreeWalkerTest     com.puppycrawl.tools.checkstyle.checks.blocks.*     com.puppycrawl.tools.checkstyle.checks.coding.*     com.puppycrawl.tools.checkstyle.checks.design.*     com.puppycrawl.tools.checkstyle.checks.header.*     com.puppycrawl.tools.checkstyle.checks.imports.*     com.puppycrawl.tools.checkstyle.checks.indentation.*     com.puppycrawl.tools.checkstyle.checks.javadoc.*     com.puppycrawl.tools.checkstyle.checks.metrics.*     com.puppycrawl.tools.checkstyle.checks.modifiers.*     com.puppycrawl.tools.checkstyle.checks.naming.*     com.puppycrawl.tools.checkstyle.checks.regexp.*     com.puppycrawl.tools.checkstyle.checks.sizes.*     com.puppycrawl.tools.checkstyle.checks.whitespace.*    ```  we should avoid usage of all Check test - com.puppycrawl.tools.checkstyle.checks if we need some test methods, we should  copy them to TreeWalker test.","closed","miscellaneous,","romani","2017-07-04T14:42:06Z","2017-08-22T11:58:08Z"
"","4996","RedundantModifier flags public constructor of private inner class although used in reflective construction","Probably related to issue #2508. We recently migrated from Checkstyle 5 to 8.1, which caused RedundantModifier to start flagging public constructors of non-public and non-protected inner classes. While this is true for compiled code, it is not for code that uses reflection to create instances of such classes.  E.g. the following example will compile, but not run  ```java public class ReflectionConstructorWithoutAccessModifier {     public static void main(String[] args) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {         SomeClass someObject = SomeClass.class.getConstructor().newInstance();     }      private static class SomeClass {         SomeClass() {         }     } } ```  While making the SomeClass constructor public will make the code run, but will also make Checkstyle flag the constructor as having a redundant public keyword.  Although I understand that issue #2508 has been closed with the rationale that these corner cases cannot be covered by Checkstyle, this is a slightly different case not related to serialization. Still I can live with disabling checkstyle warnings for the very few situations where we have the above code.","closed","","Tohnmeister","2017-08-24T13:41:30Z","2017-08-24T23:46:04Z"
"","4274","ImportControl: new strategyOnMismatch property to xml file structure","Previous discussion https://github.com/checkstyle/checkstyle/issues/3451  > Name of the property should be `strategyOnMismatch` with values `allowed`, `disallowed`, `delegateToParent`(should be default to keep compatibility) . >  > Rationale of your request is to ""allow independent rules for subpackages"". It will allow define completely isolated rules for special packages, for example: >  > > - to certainly keep control of `api` package; > - control that `domain` packages are POJOs and use only jdk standard types/collections ; > - or package that is extracted to separate artifact .  For `import-control` tag we should use same `strategyOnMismatch` property with one exception, it can not have value `delegateToParent`. We need to make it clear in documentation and throw exception is Check see `delegateToParent` defined on `import-control` (if possible that should be enforced by DTD).  Example:  ```                              ```  > In this example we can see if we could not find suitable allow/disallow inside `subpackage name=""imports""` then we go to the parent. If there is no suitable allow/disallow inside parent package, then import is allowed by default  @romani What do you think?","closed","new feature,","timurt","2017-04-23T05:33:44Z","2017-05-28T23:49:00Z"
"","4236","Issue #3950: NoWhitespaceAfter: add support for method reference operator","PR related to issue #3950","closed","","Kietzmann","2017-04-20T14:59:46Z","2017-05-07T21:54:32Z"
"","4848","Travis: upgrade distribution to trusty","PR https://github.com/checkstyle/checkstyle/pull/4847 set distribution to older version as new version was constantly failing in weird ways as seen at https://github.com/checkstyle/checkstyle/pull/4844#issuecomment-318758089.  We should try to update to newer version and report any issues to travis admins. This should wait until after GSoC.","closed","miscellaneous,","rnveach","2017-07-29T02:11:37Z","2017-10-25T17:50:58Z"
"","4481","Issue #4353: refactoring: remove 'final' modifier from all arguments of method/c-tor at ImportControlCheck and around","PR for Issue #4353","closed","","sharang108","2017-06-21T19:41:51Z","2017-06-23T16:34:02Z"
"","4214","Issue #4208: Split and Organize Checkstyle inputs by Test for StaticVariableName","PR for Issue #4208 - InputStaticVariableName.java was moved to staticvariablename","closed","","AkshitaKukreja30","2017-04-13T19:08:00Z","2017-04-17T18:05:41Z"
"","4055","Perform refactoring of AnnotationLocationCheck to increase code readability","Points to improve: 1) Many methods of [AnnotationLocationCheck](http://checkstyle.sourceforge.net/config_annotation.html#AnnotationLocation) class have copy-pasted javadoc.  For example, https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java#L275, https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java#L284, and others. 2) Method names are not clear enough to understand their purposes without diving inside. For example, what does [getAnnotationLevel](https://github.com/MEZk/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java#L284) mean? Does the annotation have the level? Does the level refer to a language structure? 3) Some variables and method parameters have unclear names too. For example, what does the parameter name [correctLevel](https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java#L293) mean? [Javadoc](https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java#L291) also says nothing.  Points 1-3 need to be improved.","closed","miscellaneous,","MEZk","2017-03-19T11:28:32Z","2017-03-22T19:40:24Z"
"","4792","Add JavaDoc coverage reports to our maven website","plugin to use in our website - https://github.com/manoelcampos/javadoc-coverage  command to build web site quickly - ""mvn site -Pno-validations""","open","miscellaneous,","romani","2017-07-21T16:52:05Z","2017-07-31T09:34:16Z"
"","4366","recheck that mutationThreshold values are up-to-date","Please run all of them on your local and recheck that mutationThreshold is biggest possible value to keep build passing https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L1522 If some values are outdated - please send PR to raise values right now. In you work each fix should be done together with raising value of mutationThreshold  Execution commands for pitest are at https://github.com/checkstyle/checkstyle/blob/master/shippable.yml  Example: `mvn -Ppitest-checks-whitespace,no-validations clean verify org.pitest:pitest-maven:mutationCoverage`","closed","approved,","romani","2017-05-22T00:29:41Z","2017-05-25T15:34:38Z"
"","4885","Custom checks broken with Checkstyle 8.0","Please note this bug against eclipse-cs-8.0.0, which I believe to be an issue in Checkstyle core introduced somewhere after 7.6 (confirmed in 8.0): https://sourceforge.net/p/eclipse-cs/discussion/274377/thread/4ab4f095/?limit=25#1334  Due to a ""recent"" change to PackageNamesLoader (supposedly this commit https://github.com/checkstyle/checkstyle/commit/ddeb553834f10570089a033fa1ac1501b74ac358) the class name guessing algorithm based on checkstyle_packages.xml files is not working properly anymore. Please note the missing dot between package name and class name in the error message:  `Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Unable to instantiate 'Jsr305Annotations' class, it is also not possible to instantiate it as com.puppycrawl.tools.checkstyle.checks.annotationJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.blocksJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.codingJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.designJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.headerJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.importsJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.indentationJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.javadocJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.metricsJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.modifierJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.namingJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.regexpJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.sizesJsr305Annotations, com.puppycrawl.tools.checkstyle.checks.whitespaceJsr305Annotations, com.puppycrawl.tools.checkstyle.checksJsr305Annotations, com.puppycrawl.tools.checkstyle.filefiltersJsr305Annotations, com.puppycrawl.tools.checkstyle.filtersJsr305Annotations, com.puppycrawl.tools.checkstyle.Jsr305Annotations, Jsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.annotationJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.blocksJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.codingJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.designJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.headerJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.importsJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.indentationJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.javadocJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.metricsJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.modifierJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.namingJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.regexpJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.sizesJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checks.whitespaceJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.checksJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.filefiltersJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.filtersJsr305AnnotationsCheck, com.puppycrawl.tools.checkstyle.Jsr305AnnotationsCheck. Please recheck that class name is specified as canonical name or read how to configure short name usage http://checkstyle.sourceforge.net/config.html#Packages. Please also recheck that provided ClassLoader to Checker is configured correctly.`","closed","miscellaneous,","lkoe","2017-08-02T19:52:09Z","2017-08-03T10:20:27Z"
"","4349","Javadoc parser: Package names should permit digits in their name","Per the JLS, https://docs.oracle.com/javase/specs/jls/se8/html/jls-7.html#jls-7.4.1, package names are permitted to be any sequence of identifiers.  But JavadocParser.g4 (https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4#L907) specifies that package references use `PACKAGE` names as their leading tokens, which in turn are defined (https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L122) without permitting digits.","closed","antlr,","blerner","2017-05-12T17:41:33Z","2017-05-28T20:20:41Z"
"","4164","Javadoc parser: custom tags content should not be parsed as HTML","Parser error on javadoc content of custom tag with `<` (html symbol) `Non standard {@preformat a CLASS_DEF [6:0] |--MODIFIERS -> MODIFIERS [6:0] |   |--BLOCK_COMMENT_BEGIN -> /* [1:0] |   |   |--COMMENT_CONTENT -> *\n * standard inline tag: {@code a < b} , parsed ok.\n * standard inline tag: {@code a \n * standard inline tag: {@code a < b} , parsed ok.\n * standard inline tag: {@code a [1:3] |   |   |       |--NEWLINE -> \n [1:3] |   |   |       |--LEADING_ASTERISK ->  * [2:0] |   |   |       |--TEXT ->  standard inline tag:  [2:2] |   |   |       |--JAVADOC_INLINE_TAG -> {@code a < b} [2:24] |   |   |       |   |--JAVADOC_INLINE_TAG_START -> { [2:24] |   |   |       |   |--CODE_LITERAL -> @code [2:25] |   |   |       |   |--WS ->   [2:30] |   |   |       |   |--TEXT -> a < b [2:31] |   |   |       |   `--JAVADOC_INLINE_TAG_END -> } [2:37] |   |   |       |--TEXT ->  , parsed ok. [2:38] |   |   |       |--NEWLINE -> \n [2:51] |   |   |       |--LEADING_ASTERISK ->  * [3:0] |   |   |       |--TEXT ->  standard inline tag:  [3:2] |   |   |       |--JAVADOC_INLINE_TAG -> {@code a { [3:24] |   |   |       |   |--CODE_LITERAL -> @code [3:25] |   |   |       |   |--WS ->   [3:30] |   |   |       |   |--TEXT -> a } [3:35] |   |   |       |--TEXT ->  , parsed ok. [3:36] |   |   |       |--NEWLINE -> \n [3:49] |   |   |       |--LEADING_ASTERISK ->  * [4:0] |   |   |       |--TEXT ->  Non standard  [4:2] |   |   |       |--JAVADOC_INLINE_TAG -> {@preformat a < b} [4:16] |   |   |       |   |--JAVADOC_INLINE_TAG_START -> { [4:16] |   |   |       |   |--CUSTOM_NAME -> @preformat [4:17] |   |   |       |   |--WS ->   [4:27] |   |   |       |   |--DESCRIPTION -> a < b [4:28] |   |   |       |   |   `--TEXT -> a < b [4:28] |   |   |       |   `--JAVADOC_INLINE_TAG_END -> } [4:33] |   |   |       |--TEXT ->  parsed ok. [4:34] |   |   |       |--NEWLINE -> \n [4:45] |   |   |       |--TEXT ->   [5:0] |   |   |       `--EOF ->  [5:1] |   |   `--BLOCK_COMMENT_END -> */ [5:1] |   `--LITERAL_PUBLIC -> public [6:0] |--LITERAL_CLASS -> class [6:7] |--IDENT -> Test [6:13] `--OBJBLOCK -> OBJBLOCK [6:18]     |--LCURLY -> { [6:18]     `--RCURLY -> } [7:0]  $ cat Test.java  /**  * standard inline tag: {@code a < b} , parsed ok.  * standard inline tag: {@code a","closed","antlr,","romani","2017-04-05T21:40:04Z","2017-06-19T21:47:45Z"
"","4052","SingleLineJavadoc update for new requirements what tags are allowed in singleline javadoc","parent issue - #3888   guide update - https://github.com/google/styleguide/commit/594d91bfbb8dfcbcac0f148af8175f2b7ec9857b#diff-b6c9191ee5ccb7a5ef170e98e51d94d8L1084  > The basic form is always acceptable. The single-line form may be substituted when the entirety of the Javadoc block (including comment markers) can fit on a single line. Note that this only applies when there are no block tags such as `@return`.  http://checkstyle.sourceforge.net/config_javadoc.html#SingleLineJavadoc  we already have property - `ignoredTags` and it is null by default so no block tags are allowed. `ignoreInlineTags` - is true by default.  We need to change our google config to ignore inline tags (switch to default by removing `ignoreInlineTags`). current code: https://github.com/checkstyle/checkstyle/blob/14005e371803bd52dff429904b354dc3e72638c0/src/main/resources/google_checks.xml#L343-L345  definition of ""block tags"" (exact list of them) - http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#CHDBEFIF ([for java7](http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#javadoctags)) Lets save this link in xdoc to explain user meaning of such terms.  lets do updates for our IT inputs, case from #3762 should be added too.  ----------  **Current behavior:** ``` /var/tmp$ cat Test.java  public class Test {   /** Create a new {@code Test} instance. */   public Test() {} }  /var/tmp$ java -jar checkstyle-8.36.2-all.jar -c /google_checks.xml Test.java Starting audit... [WARN] /var/tmp/Test.java:2: Single-line Javadoc comment should be multi-line. [SingleLineJavadoc] Audit done. ```  **Expected:** no violations.","closed","google style,","romani","2017-03-19T00:51:48Z","2021-03-03T15:35:30Z"
"","4592","Split BaseCheckTestSupport into AbstractPathTestSupport, AbstractModuleTestSupport, and AbstractTreeTestSupport","Other test classes which aren't check tests also extend [`BaseCheckTestSupport`](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java) . For example look at the following classes which extend `BaseCheckTestSupport`  [`AstTreeStringPrinterTest`](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinterTest.java#L37) [`JavadocParseTreeTest`](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java#L29)  In the future, there might be need for other non-check tests' classes to extend it too. It overall seems better to call it `BaseTestSupport`","closed","easy,","voidfist","2017-07-03T04:41:47Z","2017-08-02T16:36:15Z"
"","4744","SummaryJavadoc: doesn't completely ignore inheritDoc tag","Originally fixed in #3908,  ```` $ cat TestClass.java /** Test. */ public class Test extends BaseClass {  /**  * {@inheritDoc}  *   * @see #method2(String, String)  */     public void method() {     }  /**  * {@inheritDoc}. Test 2.  */     public void methodA() {     }      public void method2(String s1, String s2) {     } }  $ cat BaseClass.java public abstract class BaseClass { 	/** This is my method. */ 	abstract void method();  	/** This is my other method. */ 	abstract void methodA(); }  $ cat TestConfig.xml                                 $ java -jar checkstyle-8.0-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:3: First sentence of Javadoc is incomplete (period is missing) or not present. [SummaryJavadoc] Audit done. Checkstyle ends with 1 errors. ````  I am expecting no errors as `inheritDoc` is not a sentence and shouldn't require a period if it is completely alone in the description. The fix for #3908 still works, but it only works if `inheritDoc` is completely alone.","closed","javadoc,","rnveach","2017-07-17T18:53:35Z","2017-08-05T03:46:35Z"
"","4356","Check one line empty before tags in javadoc","Oracle (in JDK they use it) suggests to insert one empty line in javadoc before tags (param, return etc) see http://www.oracle.com/technetwork/articles/java/index-137868.html. For example like this,  ``` /**  * Method for doing it.  *  * @param foo somefoo.  */ public void doIt(Foo foo){} ``` So I suggest to add to checkstyle such rule.","closed","javadoc,","PashaTurok","2017-05-15T11:41:09Z","2021-02-02T10:14:12Z"
"","4656","config: distelli build steps were moved to script to be easily launched on local","on first commit distelli is failed, status is returned to github - verified.","closed","","romani","2017-07-08T00:01:44Z","2017-07-08T05:16:47Z"
"","4932","XMLLogger methods should be thread-safe","Now the output of `XMLLogger` might be corrupted, if several threads will try to raise errors for the different files at the same time.  The `fileStarted`, `fileFinished`, `addError` and `addException` methods must be thread-safe","closed","approved,","soon","2017-08-11T08:54:53Z","2017-08-30T04:12:37Z"
"","4917","Remove thread-unsafe context from the AbstractFileSetCheck class","Now the AbstractFileSetCheck class contains some thread-unsafe context, therefore we cannot use the same check instance across multiple threads.  All thread-unsafe members should be rewritten so that they could be used from the separate threads:  `messageCollector` - it is updated inside `process` method and via `addMessages` and other methods.","closed","miscellaneous,","soon","2017-08-09T05:33:04Z","2017-09-23T18:53:21Z"
"","4927","SeverityLevelCounter should be thread-safe","Now the `SeverityLevelCounter` uses `int count` to track the number of errors with the specified `SeverityLevel`. However, this is not thread-safe, because `int` incrementation is not an atomic operation and therefore may lead to unpredictable results.","closed","approved,","soon","2017-08-10T13:18:49Z","2017-08-18T09:13:05Z"
"","4925","Remove thread-unsafe context from the AbstractJavadocCheck class","Now the `AbstractJavadocCheck` class contains some thread-unsafe context, therefore we cannot use the same check instance across multiple threads.  All thread-unsafe members should be rewritten so that they could be used from the separate threads:  1. `parser` - the `JavadocDetailNodeParser` isn't a thread-safe class 1. `blockCommentAst` - the `AbstractJavadocCheck` updates this field in the `visitToken` method","closed","approved,","soon","2017-08-10T12:38:10Z","2017-08-18T09:12:38Z"
"","4908","Remove thread-unsafe context from the AbstractCheck class","Now the `AbstractCheck` class contains some thread-unsafe context, therefore we cannot use the same check instance across multiple threads.  All thread-unsafe members should be rewritten so that they could be used from the separate threads:  1. `messages` - it is updated via `clearMessages` and `log` methods. 1. `fileContents` - it is updated via `setFileContents` and queried via `getLine`, `getFileContents`","closed","approved,","soon","2017-08-07T15:04:03Z","2017-09-05T13:49:31Z"
"","4355","SuppressionCommentFilter is ignored","My java class: ``` public class Test {     private int foo;     @Override     public int hashCode() {         //Checkstyle:OFF: MagicNumber         int hash = 7;         hash = 73 * hash + this.foo;         return hash;         //Checkstyle:ON: MagicNumber     } } ``` My checkstyle config: ```                                                                  ``` I do: java -jar checkstyle-7.7-all.jar -c config.xml Test.java ``` Starting audit... [ERROR] /home/Temp/Test.java:9:20: '7' is a magic number. [MagicNumber] [ERROR] /home/Temp/Test.java:10:16: '73' is a magic number. [MagicNumber] Audit done. ``` I expect that magic number errors will be suppressed. However, I see them so filter doesn't work.","closed","","PashaTurok","2017-05-15T10:42:18Z","2017-05-15T23:29:54Z"
"","4912","Launch Sonarqube validation in docker in our CI for each PR validation","Most problems are already resolved in scope of #46.   This tool is also already introduced, but not enforced over the code. I need to make it possible to activate Sonar for PR validation to prevent bad code leak to the project. To do this, I need to make it possible to run Sonar in Docker on CI, put all configs in Sonar by web API and then launch validation of sonar for checkstyle code, as stated [here](https://github.com/checkstyle/sonar-checkstyle/blob/master/wercker.yml#L29). As validation process will be finished, by means of Sonar API I recheck that no new violations has appeared. Current version of sonar can be found [here](https://sonarcloud.io/dashboard?id=com.puppycrawl.tools%3Acheckstyle)  Result of work should be: - ready to use docker config file to let us build and deploy it to our docker hub. - update to codeship CI (or wercker CI) on how to use such docker image and command to run validation of sources. All required sonarqube configs should be stored in ""config"" folder and provided to sonarqube by its HTTP API. - execute sonarqube validation by ""mvn sonar:sonar"" - [Sonar gate](https://docs.sonarqube.org/display/SONAR/Quality+Gates) values should be configurable by our config, to enforce some level of quality ASAP. Each fix for violations should make numbers in gate lower and lower. Final state is any violation(infor, ...blocker) is 0 in code. - All violations should be resolved or suppressed (the same as we did with others tools) - any new violation in code should break the build of CI.   I highly recommend to provide fixes for our code(resolving violations) separately for docker/CI config. All questinable violations should be discussed rule by rule. There will be bunch of suppressions and changes to configuration of Sonar's default config.","closed","CI,","romani","2017-08-08T13:47:58Z","2019-12-13T01:04:25Z"
"","4785","Move DetailNodeTreeStringPrinter#createFakeBlockComment to CommonUtils","Method [DetailNodeTreeStringPrinter#createFakeBlockComment](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java#L181) should be moved to CommonUtils and [TreeWalker#createBlockCommentNode](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L723) should be replaced with the new method(s) created in CommonUtils.","closed","easy,","voidfist","2017-07-20T15:52:25Z","2017-10-20T17:40:51Z"
"","4354","Do investigation where to put parallelization in checkstyle","Measure how much time do we spend on checkstyle phases which potentially can be parallelized.  According to plan we have 3 potential places: 1) Parsing to AST (the most time consuming process) 2) Launching several “Checkstyles” base on pool of AST   3) Launching each visitToken in separate “thread” if Check is completely stateless and this is where light treads will be in demand (probably does not make sense in comparison with Antlr processing)  Also give forecast of performance improvements we can get there in MT mode.","closed","approved,","sabaka","2017-05-15T04:53:42Z","2017-08-03T20:42:43Z"
"","4450","Build fails on cobertura:check goal","master branch build fails on cobertura:check goal issue is reproduced [here](https://github.com/checkstyle/checkstyle/pull/4433#issuecomment-308162875)  Apache Maven 3.3.9 Java version: 1.8.0_121, vendor: Oracle Corporation  cobertura coverage report is [here](https://nimfadora.github.io/cobertura.html)  cobertura line rate specified in pom: `99` cobertura line rate in report: 98  Seems that api package or grammars package is not covered as needed.  mvn clean verify produces such error: ``` [Thread-2] ERROR net.sourceforge.cobertura.coveragedata.TouchCollector - Cannot apply touches java.lang.NoSuchMethodException: com.puppycrawl.tools.checkstyle.api.AbstractCheck.__cobertura_classmap(net.sourceforge.cobertura.coveragedata.LightClassmapListener)         at java.lang.Class.getDeclaredMethod(Class.java:2130)         at net.sourceforge.cobertura.coveragedata.TouchCollector.applyTouchesToSingleClassOnProjectData(TouchCollector.java:127)         at net.sourceforge.cobertura.coveragedata.TouchCollector.applyTouchesOnProjectData(TouchCollector.java:110)         at net.sourceforge.cobertura.coveragedata.ProjectData.saveGlobalProjectData(ProjectData.java:272)         at net.sourceforge.cobertura.coveragedata.SaveTimer.run(SaveTimer.java:33)         at java.lang.Thread.run(Thread.java:745) [Thread-2] ERROR net.sourceforge.cobertura.coveragedata.TouchCollector - Cannot apply touches java.lang.NoSuchMethodException: com.puppycrawl.tools.checkstyle.api.AutomaticBean.__cobertura_classmap(net.sourceforge.cobertura.coveragedata.LightClassmapListener)         at java.lang.Class.getDeclaredMethod(Class.java:2130)         at net.sourceforge.cobertura.coveragedata.TouchCollector.applyTouchesToSingleClassOnProjectData(TouchCollector.java:127)         at net.sourceforge.cobertura.coveragedata.TouchCollector.applyTouchesOnProjectData(TouchCollector.java:110)         at net.sourceforge.cobertura.coveragedata.ProjectData.saveGlobalProjectData(ProjectData.java:272)         at net.sourceforge.cobertura.coveragedata.SaveTimer.run(SaveTimer.java:33)         at java.lang.Thread.run(Thread.java:745) [Thread-2] ERROR net.sourceforge.cobertura.coveragedata.TouchCollector - Cannot apply touches java.lang.NoSuchMethodException: com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter.__cobertura_classmap(net.sourceforge.cobertura.coveragedata.LightClassmapListener)         at java.lang.Class.getDeclaredMethod(Class.java:2130)         at net.sourceforge.cobertura.coveragedata.TouchCollector.applyTouchesToSingleClassOnProjectData(TouchCollector.java:127)         at net.sourceforge.cobertura.coveragedata.TouchCollector.applyTouchesOnProjectData(TouchCollector.java:110)         at net.sourceforge.cobertura.coveragedata.ProjectData.saveGlobalProjectData(ProjectData.java:272)         at net.sourceforge.cobertura.coveragedata.SaveTimer.run(SaveTimer.java:33)         at java.lang.Thread.run(Thread.java:745) ``` CI is failing with this error:  ``` org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.codehaus.mojo:cobertura-maven-plugin:2.7:check (default) on project checkstyle: Coverage check failed. See messages above. 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116) 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80) 	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51) 	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120) 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:355) 	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155) 	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584) 	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:216) 	at org.apache.maven.cli.MavenCli.main(MavenCli.java:160) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289) 	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229) 	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415) 	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) Caused by: org.apache.maven.plugin.MojoFailureException: Coverage check failed. See messages above. 	at org.codehaus.mojo.cobertura.tasks.CheckTask.execute(CheckTask.java:110) 	at org.codehaus.mojo.cobertura.CoberturaCheckMojo.execute(CoberturaCheckMojo.java:81) 	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208) 	... 19 more ```","closed","miscellaneous,","Nimfadora","2017-06-13T16:51:08Z","2017-07-04T05:08:52Z"
"","4599","Issue #4586：Split and Organize Checkstyle inputs by Test for checks in 'javadoc' package","Mandatory to understand and do: 0) The issue you are trying to fix/resolve has to have the ""approved"" label. 1) Put in the description of Pull Request the reference to an issue if it exists. Example: ""Issue: #XXXXXX"" 2) Commit message should adhere to the following rules:    a) Must match one of the following patterns:\n""       ^Issue #\\d+: .*$       ^Pull #\\d+: .*$       ^(minor|config|infra|doc|spelling): .*$    b) It contains only one line of text    c) Must not end with a period, space, or tab    d) Commit message should be less than or equal to 200 characters  To avoid multiple iterations of fixes and CIs failures, please read http://checkstyle.sourceforge.net/contributing.html  ATTENTION: We are not merging Pull Requests that are not passing our CIs, but we will help to resolve issues.  Thanks for reading, remove whole this message and type what you need.","closed","","djydewang","2017-07-04T03:00:06Z","2017-07-04T03:05:48Z"
"","4039","Issue #3954: MethodParamPad Test input split","Mandatory to understand and do: 0) Issue you are trying to fix/resolve has to have ""approved"" label. 1) Put in description of Pull Request reference to issue if it exists. Example: ""Issue: #XXXXXX"" 2) Commit message should adhere to the following rules:    a) Must match one of the following patterns:\n""       ^Issue #\\d+: .*$       ^Pull #\\d+: .*$       ^(minor|config|infra|doc|spelling): .*$    b) It contains only one line of text    c) Must not end with a period, space, or tab    d) Commit message should be less than or equal to 200 characters  To avoid multiple iterations of fixes and CIs failures, please read http://checkstyle.sourceforge.net/contributing.html  ATTENTION: We are not merging Pull Requests that not passing our CIs, but we help to resole issues.  Thanks for reading, remove whole this message and type what you need.","closed","","GitToasterhub","2017-03-18T15:27:43Z","2017-03-19T08:19:13Z"
"","4107","DefaultComesLastCheck: examine code looking at line/column numbers","Looking at the code for `DefaultComesLastCheck`. https://github.com/checkstyle/checkstyle/blob/753537bc2309a51e6b4647bb1c792f2fef9e30df/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DefaultComesLastCheck.java#L80-L82 ````             if (defaultGroupAST.getLineNo() != lastGroupAST.getLineNo()                 || defaultGroupAST.getColumnNo()                     != lastGroupAST.getColumnNo()) { ````  It is not clear why this check is looking at line/column numbers of the input file. Check is only examining if `default` is last group in switch. It shouldn't have to rely on the exact positioning in the file.  We need to examine this and see if it should be replaced with something simplier, like: `defaultGroupAST != lastGroupAST`","closed","easy,","rnveach","2017-03-27T19:51:53Z","2017-04-19T15:32:35Z"
"","4769","Increase coverage of JavadocParser and JavadocLexer","JavadocParser and JavadocLexer are classes generated by ANTLR. We need to cover them by UTs as much as possible to validate javadoc grammar.  GSoC priority is low as we need to focus on functional changes first. But coverage should only increase by each PR.","open","antlr-javadoc,","Vladlis","2017-07-19T21:04:15Z","2021-08-12T15:58:06Z"
"","4030","Add new setting in Beginning Development for IDEA docs","It is a common case when copy pasting is required in an IDE but it automatically indents all lines according to it's rules. I would suggest that a solution to this be mentioned in Beginning Development using IDEA [docs](http://checkstyle.sourceforge.net/idea.html) . Other IDE docs should also be edited for a similar setting.  To prevent this in IDEA use  `Settings` > `Editor` > `Smart Keys` > `Reformat on paste` set value to `None`","closed","easy,","kukreja-vikramaditya","2017-03-17T13:30:47Z","2017-04-21T12:28:54Z"
"","4477","thread safety","it appears that this change https://github.com/checkstyle/checkstyle/commit/bfed57cdc87c736661d743222f1b64062b6a84d4 intentionally breaks thread safety of the checkstyle plugin Maven lists the plugin as known to be thread safe, since version 2.6, albeit being a dated page https://cwiki.apache.org/confluence/display/MAVEN/Parallel+builds+in+Maven+3  is this intentional? if so this seems to be a step backwards, as maven builds now fail with a -T flag since upgrading from v7.2  please investigate and reconsider, it seemed threading was working properly up until this change","closed","","eimperat","2017-06-20T20:04:33Z","2017-06-20T20:36:55Z"
"","4295","Issue #4080: Split and Organize Checkstyle inputs by Test for SingleSpaceSeparator","Issue:#4080","closed","","wate123","2017-04-25T17:37:27Z","2017-04-26T01:16:21Z"
"","4275","Issue #4080: Split and Organize Checkstyle inputs by Test for SingleSpaceSeparator","Issue:#4080","closed","","wate123","2017-04-23T05:55:54Z","2017-04-25T17:22:15Z"
"","4241","Issue #525: Support for Default IntelliJ IDEA Formatiing in CustomImp…","Issue: #525","closed","incomplete,","GabrielBercaru","2017-04-20T17:43:01Z","2017-07-03T18:37:16Z"
"","4457","Issue #4414: remove allowance of PackageObjectFactory coverage to be non 100%","Issue: #4414","closed","","romani","2017-06-14T22:31:01Z","2017-06-15T02:39:08Z"
"","4406","Issue #4402: Add pitest-checks-annotation profile","Issue: #4402 add pitest-checks-annotation profile When I simply add com.puppycrawl.tools.checkstyle.checks.annotation.* build fails: Failed to execute goal org.pitest:pitest-maven:1.2.0:mutationCoverage (default-cli) on project checkstyle: Execution default-cli of goal org.pitest:pitest-maven:1.2.0:mutationCoverage failed: 65535 So I've added classes manually execution time: 04:10 min threshold: 99","closed","","Nimfadora","2017-06-01T19:34:57Z","2017-06-03T00:30:44Z"
"","4404","Issue #4401: Increase mutation coverage of pitest-checks-header profile to 94%","Issue: #4401  added tests for HeaderCheck and RegexpHeaderCheck increased threshold for pitest-checks-header profile to 94 profile execution time: 04:35 min  [pitest report before changes were made](https://nimfadora.github.io/issue4401.html)","closed","","Nimfadora","2017-06-01T12:14:53Z","2017-06-05T18:19:58Z"
"","4476","Issue #4342: bumped version of pmd-mvn-plugin to 3.8 and pmd to 5.7.0","Issue: #4342    pmd-maven-plugin version was bumped to 3.8 dependencies on pmd 5.7.0 were added to pmd-maven-plugin all violations were suppressed for now","closed","","Nimfadora","2017-06-20T17:02:06Z","2017-06-21T15:50:12Z"
"","4131","Issue #4090: Split and Organize Checkstyle inputs by Test for Paramet…","Issue: #4090","closed","","GabrielBercaru","2017-03-30T23:01:32Z","2017-04-05T13:10:45Z"
"","4129","Issue #4090: Split and Organize Checkstyle inputs by Test for Paramet…","Issue: #4090","closed","","GabrielBercaru","2017-03-30T19:30:28Z","2017-03-30T23:00:48Z"
"","4088","Issue #4081: Wrong message and several typos","Issue: #4081","closed","","sirdis","2017-03-23T05:34:52Z","2017-03-23T18:13:49Z"
"","4167","Issue #4080: Split and Organize Checkstyle inputs by Test for SingleSpaceSeparator","Issue: #4080","closed","","wate123","2017-04-06T21:42:50Z","2017-04-23T05:30:37Z"
"","4087","Issue #4080: Split and Organize Checkstyle inputs by Test for SingleSpaceSeparator","Issue: #4080","closed","","wate123","2017-03-23T02:12:49Z","2017-04-04T15:34:40Z"
"","4084","Issue #4078: DefaultComesLast only if doesnt share case","Issue: #4078","closed","","sagar-shah94","2017-03-22T21:23:14Z","2017-04-12T19:35:31Z"
"","4079","Issue #4042: Split and Organize Checkstyle inputs by Test for MethodL…","Issue: #4042","closed","","GabrielBercaru","2017-03-21T22:48:59Z","2017-03-23T23:53:09Z"
"","4077","Issue #4042: Split and Organize Checkstyle inputs by Test for MethodLength","Issue: #4042","closed","","GabrielBercaru","2017-03-21T22:21:18Z","2017-03-21T22:24:55Z"
"","4072","Issue #4042: Split and Organize Checkstyle inputs by Test for MethodL…","Issue: #4042","closed","","GabrielBercaru","2017-03-21T17:45:12Z","2017-03-21T22:19:02Z"
"","4069","Issue #4042: Split and Organize Checkstyle input by Test for MethodLe…","Issue: #4042","closed","","GabrielBercaru","2017-03-21T11:38:05Z","2017-03-21T12:08:06Z"
"","4066","Issue: #4042: Split and Organize Checkstyle inputs by Test for Method…","Issue: #4042","closed","","GabrielBercaru","2017-03-20T23:30:20Z","2017-03-21T11:38:27Z"
"","4061","Issue: #4042: Split and Organize Checkstyle inputs by Test for Method…","Issue: #4042","closed","","GabrielBercaru","2017-03-20T01:30:44Z","2017-03-21T00:30:38Z"
"","4031","Issue #4030: Update IDEA setup docs to include Disable Auto Indent On…","Issue: #4030","closed","","kukreja-vikramaditya","2017-03-17T14:46:28Z","2017-03-23T14:27:12Z"
"","4015","Issue #3991: Split and Organize Checkstyle inputs by Test for Executa…","Issue: #3991","closed","","GabrielBercaru","2017-03-15T20:24:48Z","2017-03-16T23:53:57Z"
"","4011","Branch input executable statement count","Issue: #3991","closed","","GabrielBercaru","2017-03-15T17:30:30Z","2017-03-16T03:22:13Z"
"","4008","Created separate folder for InputExecutableStatementCount","Issue: #3991","closed","","GabrielBercaru","2017-03-14T20:45:00Z","2017-03-15T20:25:26Z"
"","4040","Issue #3908: SummaryJavadoc need special processing of inheritDoc tag","Issue: #3908","closed","","sagar-shah94","2017-03-18T16:06:31Z","2017-03-18T16:41:45Z"
"","4047","Issue #3907: SummaryJavadoc no violation on javadoc where '.' is used…","Issue: #3907","closed","","sagar-shah94","2017-03-18T22:07:09Z","2017-07-22T18:23:41Z"
"","4004","Issue #3601: Added examples for MethodParamPad xdocs","Issue: #3601","closed","incomplete,","SergeyDzyuba","2017-03-14T19:35:50Z","2017-05-01T20:31:46Z"
"","4116","Issue #3348: add validation of try with resources to the LocalFinalVariableName check","Issue: #3348 fixed Also, since I needed to add extra test cases for LocalFinalVariableNameCheck. Diff report: https://nimfadora.github.io/","closed","","Nimfadora","2017-03-28T17:36:36Z","2017-05-07T21:49:38Z"
"","4171","Issue #3131: Add support for try with resources","Issue: #3131","closed","","kukreja-vikramaditya","2017-04-07T19:25:24Z","2017-07-31T11:21:19Z"
"","4075","Issue #3072: Add NewlineAtEndOfFile config for test and it inputs","Issue: #3072","closed","","kukreja-vikramaditya","2017-03-21T20:43:49Z","2017-04-06T09:02:36Z"
"","4174","Issue #2991: SummaryJavadoc custom period not always working","Issue: #2991","closed","","sagar-shah94","2017-04-09T10:03:08Z","2017-06-24T10:12:37Z"
"","4773","Issue #4592: Tests from modifier, naming, regexp, sizes, whitespace packages and miscellaneous checks tests now extend from AbstractModuleTestSupport","Issue #4592   This PR extends the tests in modifier, naming, regexp, sizes, whitespace packages and miscellaneous checks tests from AbstractModuleTestSupport.","closed","","subkrish","2017-07-20T01:31:31Z","2017-07-21T01:33:07Z"
"","4603","Issue#4586：Split and Organize Checkstyle inputs by Test for checks in 'javadoc' package","Issue#4586","closed","","djydewang","2017-07-04T08:46:57Z","2017-07-04T12:47:25Z"
"","4420","Issue #4370: Add multi thread mode to checkstyle launcher","Issue https://github.com/checkstyle/checkstyle/issues/4370  This MR adds new hidden parameter `-M` allowing user to enable multithread mode. Also, this commit splits `Checker` and `TreeWalker` into `AbstractChecker`, `Checker`, `MultiThreadChecker` and `AbstractTreeWalker`, `TreeWalker`, `MultiThreadTreeWalker` respectively. Multithread class versions are empty, because actual implementation is a subject of another issue.","closed","","soon","2017-06-05T19:28:31Z","2017-07-03T02:43:28Z"
"","4842","MainTest.testCreateListenerWithLocationIllegalStateException isn't deleting it's test file anymore","Issue created and identified after https://github.com/checkstyle/checkstyle/pull/4832#issuecomment-318550401 was merged,  [Something happened in this PR to the test `testCreateListenerWithLocationIllegalStateException` in `MainTest`](https://github.com/checkstyle/checkstyle/blob/91d93869b3b11970592c719373cd2dd2c61a0919/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java#L539). Before this commit, [the file `myfolder123` was created and deleted by this test](https://github.com/checkstyle/checkstyle/blob/91d93869b3b11970592c719373cd2dd2c61a0919/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java#L563). After this commit, this file is no longer deleted and because it is placed inside the repository, I am getting a checkstyle violation on it that it doesn't end with a new line.  I am not getting any exceptions or anything to understand why it isn't being deleted anymore, it is just returning `false`.  This should be fixed so it doesn't cause issues during multiple test and verification runs.","closed","miscellaneous,","rnveach","2017-07-28T13:03:05Z","2017-08-26T15:28:29Z"
"","4063","4043 - Split and Organize Checkstyle inputs by Test for OuterTypeNumber","Issue : 4043 - Split and Organize Checkstyle inputs by Test for OuterTypeNumber @romani  Kindly review the PR and provide comments.  Thanks Ashish","closed","","tashish","2017-03-20T10:02:02Z","2017-03-21T16:00:23Z"
"","4579","Issue #922: remove setClassloader from Checker","Issue #922","closed","","romani","2017-07-01T16:02:38Z","2017-07-01T18:22:46Z"
"","4498","Issue #877: enable test checks for pmd, create separate configs and suppress all violations","Issue #877   enable test checks in pmd; create separate profiles for production and test code; suppress all violations for test code for now;","closed","","Nimfadora","2017-06-22T19:41:14Z","2017-06-23T06:34:38Z"
"","4565","Issue #877: fix TreeWalkerTest JUnitTestsShouldIncludeAssert violations","Issue #877","closed","","Nimfadora","2017-06-30T19:45:41Z","2017-07-04T15:33:15Z"
"","4554","Issue #877: fix third part of JUnitTestsShouldIncludeAssert violations","Issue #877","closed","","Nimfadora","2017-06-29T07:26:12Z","2017-06-30T20:27:37Z"
"","4573","Issue #605: made get acceptable and required tokens abstract","Issue #605  `AbstractCheckTest.java` required one of it's tests to change.","closed","","rnveach","2017-07-01T03:41:10Z","2017-07-01T23:46:03Z"
"","4234","Issue #56: fix NPathComplexityCheck","Issue #56 . Continuation of Pull #3785.","closed","","kazachka","2017-04-19T21:20:26Z","2017-04-28T16:38:14Z"
"","4258","Issue #56: fix MainTest input files","Issue #56  for Pull #4234  Split input files location for MainTest and check.metrics.* tests.  CI on Pull #4234 fails because MainTest shows violation on input files for metrics that has more that 170 lines.","closed","","kazachka","2017-04-21T21:42:26Z","2017-04-22T00:08:16Z"
"","4994","Issue #4993: increased coverage of pitest-checks-sizes to 100%","Issue #4993  [report before changes](https://nimfadora.github.io/pr/com.puppycrawl.tools.checkstyle.checks.sizes/index.html)  coverage of pitest-checks-sizes was increased by 6% current threshold: 100%","closed","","Nimfadora","2017-08-23T22:39:44Z","2017-08-26T20:20:24Z"
"","4989","Issue #4988: increased coverage of pitest-checks-regexp to 100%","Issue #4988  [report before changes](https://nimfadora.github.io/pr/com.puppycrawl.tools.checkstyle.checks.regexp/index.html)  pitest-checks-regexp coverage was increased by 7% current threshould: 100","closed","","Nimfadora","2017-08-22T22:07:34Z","2017-08-23T01:08:07Z"
"","4968","Issue #4966: Update `AnnotationUseStyleCheck` documentation to match actual defaults","Issue #4966","closed","","Stephan202","2017-08-19T13:35:19Z","2017-08-20T15:22:11Z"
"","4958","[WIP] Issue #4957: Add MT TreeWalker implementation","Issue #4957  This PR adds the MT mode for TreeWalker fileset check.  WIP untill I implement tests and prepare performance report for changes","closed","discussion ongoing,","soon","2017-08-17T20:30:13Z","2018-06-30T13:35:50Z"
"","4948","Issue #4947: split illegalClassNames for IllegalType for short names","Issue #4947  I expect mutation to fail as I haven't added any new tests. I will run regression for differences too.","closed","","rnveach","2017-08-14T20:46:50Z","2017-08-26T23:58:08Z"
"","4946","Issue #4945: JavadocPackageCheck should be thread-safe","Issue #4945  This PR makes JavadocPackageCheck thread-safe, by enabling concurrent access to the `directoriesChecked` field","closed","","soon","2017-08-14T16:44:54Z","2017-08-17T13:25:10Z"
"","4953","Issue #4940: fix MultipleReturnPointsPerMethod idea violation","Issue #4940  some of the cases looks weird or complicated, please comment what we should do with equals methods, and comment those hard cases that left unfixed.","closed","","Nimfadora","2017-08-16T21:53:07Z","2017-08-20T05:29:49Z"
"","4952","Issue #4940: fix twelfth part idea violations","Issue #4940  All violations from the issue are fixed, except MultipleReturnPointsPerMethod, which will be addressed separately.","closed","","Nimfadora","2017-08-16T21:40:42Z","2017-08-18T00:08:19Z"
"","4951","Issue #4940: add suppressions on the twelfth part of idea violations","Issue #4940","closed","","Nimfadora","2017-08-15T22:06:13Z","2017-08-16T11:53:07Z"
"","4941","[WIP]: report on the twelfth part of idea violations","Issue #4940","closed","","Nimfadora","2017-08-12T13:29:53Z","2017-08-17T20:33:21Z"
"","4936","Issue #4935 fix indentation check for nested annotations","Issue #4935  This pull-request fixes the problem","closed","abandoned,","ArneLimburg","2017-08-11T15:03:46Z","2017-11-30T20:32:18Z"
"","4938","Issue #4934: Enforced WS in appropriate places for block javadoc tags","Issue #4934 : Enforced WS in appropriate places for block javadoc tags","closed","","voidfist","2017-08-11T23:37:29Z","2017-08-24T21:19:32Z"
"","4933","Issue #4932: XMLLogger should be thread-safe","Issue #4932  Made `fileStarted`, `fileFinished`, `addError` and `addException` thread-safe","closed","","soon","2017-08-11T10:24:04Z","2017-08-28T22:24:03Z"
"","4961","Issue #4931: removed powermock tests for AuditEventDefaultFormatter","Issue #4931","closed","","rnveach","2017-08-18T21:12:35Z","2017-08-19T12:31:46Z"
"","4928","Issue #4927: Use atomic counter to allow multi-thread access","Issue #4927  Using `counter++` is not thread-safe, therefore it replaced with `AtomicInteger` and `count.incrementAndGet`","closed","","soon","2017-08-10T13:21:41Z","2017-08-17T13:32:14Z"
"","4926","Issue #4925: Remove thread-unsafe context from the `AbstractJavadocCheck` class","Issue #4925  This PR wraps all thread-unsafe context into a `ThreadLocal` instance","closed","","soon","2017-08-10T12:44:23Z","2017-08-17T13:36:22Z"
"","4918","Issue #4917: Remove thread-unsafe context from the AbstractFileSetCheck","Issue #4917  Wrapped `messageCollector` field with `ThreadLocal` so that it could be used from the separate threads","closed","","soon","2017-08-09T05:39:05Z","2017-09-23T18:03:33Z"
"","4949","Issue #4912: add initial scripts for running sonar in docker","Issue #4912  This is an initial version of sh script that will run sonar in docker. It is not yet integrated with werker, but it is already usable.  The main script to run is `sonar.sh` . The inspections config for sonar is  `config/default_sonar_profile.xml`. Currently it contains default sonar config. And need to be configured for chackstyle needs.  I see here one problem - In the `sonar.sh` I run analization 2 times: ``` mvn sonar:sonar mvn sonar:sonar -Dsonar.analysis.mode=preview -Dsonar.issuesReport.html.enable=true ``` It's done so to get both of outputs - html report in the target folder and json report which is convinient to grep (to check if there are any violations). if i do `mvn sonar:sonar` I'm getting only json without report  if I do `mvn sonar:sonar -Dsonar.analysis.mode=preview -Dsonar.issuesReport.html.enable=true` I get report without json. Not sure, how to workaround it for now.","closed","","Nimfadora","2017-08-15T12:38:11Z","2017-08-31T23:40:26Z"
"","4909","Issue #4908: Remove thread-unsafe context from AbstractCheck","Issue #4908  Moved all thread-unsafe `AbstractCheck` state to a thread-local state holder","closed","","soon","2017-08-07T15:34:53Z","2017-09-05T13:48:18Z"
"","4886","Issue #4885: fixed list of packages when module can't be found","Issue #4885  Problem went unnoticed because we didn't have a test failing with multiple packages defined. I assume coverage didn't catch anything missing because we inlined work using `Collectors.joining`.","closed","","rnveach","2017-08-03T01:52:14Z","2017-08-03T10:30:41Z"
"","4898","Issue #4883: Add MT check markers","Issue #4883   This PR adds the following marker interfaces:  1. ~~`OneModuleInstancePerApplication` - for stateless and global-stateful checks~~ 1. ~~`OneModuleInstancePerThread` - for file-stateful checks~~ 1. `GlobalStatefulModule` - for global-stateful checks 1. `FileStatefulModule` - for file-stateful checks 1. `StatelessModule` - for stateless checks  This PR is a base PR for https://github.com/checkstyle/checkstyle/pull/4892 and https://github.com/checkstyle/checkstyle/pull/4882","closed","","soon","2017-08-04T13:53:29Z","2017-09-23T18:07:56Z"
"","4892","Issue #4870: Mark checks with MT interfaces (part 1)","Issue #4870  This PR marks checks with `stateless / global stateful` or `file-stateful` interfaces.  This PR does not cover all checks, it only includes modules, which does not require additional changes, i.e. only `@FIleStatefulCheck`, `@StatelessCheck` or `@GlobalStatefulCheck'.  The other checks must be changed in the other PRs","closed","","soon","2017-08-03T18:29:13Z","2017-10-31T01:16:04Z"
"","4882","Issue #4869: Add CheckCloneService implementation","Issue #4869","closed","discussion ongoing,","soon","2017-08-02T07:50:47Z","2019-03-30T14:21:53Z"
"","4889","Issue #4867: Removed deprecated class BaseCheckTestSupport","Issue #4867   This PR removes deprecated class BaseCheckTestSupport.","closed","","subkrish","2017-08-03T12:04:36Z","2017-10-10T11:29:54Z"
"","4960","Issue #4863: fix ThisEscapedInConstructor idea violation for ImportControl class","Issue #4863","closed","","Nimfadora","2017-08-17T21:33:04Z","2017-08-20T12:49:17Z"
"","4971","Issue #4857: fix BooleanParameter idea violation for it package","Issue #4857","closed","","Nimfadora","2017-08-19T16:41:02Z","2017-08-20T08:34:07Z"
"","4873","Issue #4857: hot fix for BooleanParameter idea violation","Issue #4857","closed","","Nimfadora","2017-07-31T23:05:00Z","2017-08-08T12:02:00Z"
"","4859","Issue #4856: fixed NPE in RequireThisCheck for methods from base class","Issue #4856  This is a simple NPE fix. The method being searched for in issue, `getClass`, can't be found because it is declared in `Object` and we can only look at the declarations in the current file. There is nothing we can do for the method except to skip over it.  Code was slightly modified so call to `findFrame` wasn't always being executed, regardless of `validateOnlyOverlapping` definition.","closed","","rnveach","2017-07-30T23:47:41Z","2017-08-02T01:40:37Z"
"","4902","Issue #4846: ignore annotation in enum constructor for RedundantModifier","Issue #4846  Regression to come.","closed","","rnveach","2017-08-05T14:36:20Z","2017-08-10T21:08:12Z"
"","4974","Issue #4842: make test for creating listener with location clean temp file","Issue #4842   MainTest.testCreateListenerWithLocationIllegalStateException tests method Main.createListener. This method opens output stream for specified output location and passes created output stream to appropriate audit listener constructor. When specified format of the audit listener is not appropriate  it closes the stream with CommonUtils.close and throws exception.  Test MainTest.testCreateListenerWithLocationIllegalStateException mocks CommonUtils.close and in the result the output stream is not closed after invocation of Main.createListener.  At the end of the test it tried to remove the output location for which the output stream was not closed. In Windows the file cannot be deleted where there is stream opened for file. The attempt to do this leads to the following error:  ``` java.nio.file.FileSystemException: The process cannot access the file because it is being used by another process ```  This exception was silenced because the deletion of the file was done with FileUtils.deleteQuietly. In Unix-like system you can remove file even when there is stream opened for this file.  The most basic test reproducing this behaviour is the following:  ```java     @Test     public void test() throws Exception {         String path = ""myfolder1234"";         FileOutputStream file = new FileOutputStream(path);         Files.delete(new File(path).toPath());     } ```  In Windows this throws java.nio.file.FileSystemException exception, in FreeBSD 11.0 the file is removed as expected.  To delete output location in Windows the output stream must be closed before file is deleted. It is done by intercepting argument passed to CommonUtils.close and closing this stream manually. In Unix-like systems this should not harm the test.","closed","","liscju","2017-08-19T23:20:40Z","2017-08-26T15:27:09Z"
"","4813","[WIP]: add report on StringBufferMustHaveInitialCapacity","Issue #4812  we should decide which initial capacities to put","closed","","Nimfadora","2017-07-23T18:16:22Z","2017-07-27T13:38:31Z"
"","4836","Issue #4812: add report on StringBufferMustHaveInitialCapacity","Issue #4812","closed","","romani","2017-07-27T13:36:16Z","2017-07-27T20:19:27Z"
"","4850","Issue #4808: fix final 300 AssertsWithoutMessages idea violations","Issue #4808","closed","","Nimfadora","2017-07-29T09:03:08Z","2017-07-30T01:23:48Z"
"","4837","Issue #4808: fix 300 more AssertsWithoutMessages violations","Issue #4808","closed","","Nimfadora","2017-07-27T19:44:10Z","2017-07-28T04:53:59Z"
"","4833","Issue #4808: fix second 200 AssertsWithoutMessages violations","Issue #4808","closed","","Nimfadora","2017-07-26T22:04:43Z","2017-07-27T13:22:31Z"
"","4819","Issue #4808: fix first 200 AssertsWithoutMessages violations","Issue #4808","closed","","Nimfadora","2017-07-25T11:29:25Z","2017-07-26T20:30:53Z"
"","4807","Issue #4805: fix HtmlTagCanBeJavadocTag in TokenTypes","Issue #4805  here are the changes in TokenTypes which cause build to fail","closed","","Nimfadora","2017-07-23T16:08:14Z","2017-08-16T22:09:21Z"
"","4959","Issue #4805: fix HtmlTagCanBeJavadocTag in TokenTypes","Issue #4805","closed","","Nimfadora","2017-08-17T20:34:47Z","2017-08-22T00:35:03Z"
"","4817","Issue #4801: fix some violations from eleventh part of idea violations","Issue #4801  violations included: ``` TestMethodWithoutAssertion TransientFieldNotInitialized SynchronizationOnStaticField UnnecessaryDefault ```","closed","","Nimfadora","2017-07-24T21:42:01Z","2017-07-26T20:42:11Z"
"","4803","Issue #4801: fix some violations from the eleventh part of idea violations","Issue #4801  PR not for merge  violations included: ``` UnusedReturnValue unused TooBroadCatch UncheckedExceptionClass UnusedProperty TodoComment ThisEscapedInConstructor StringTokenizer VarargParameter SystemExit UseOfPropertiesAsHashtable UnnecessaryFinalOnLocalVariableOrParameter XmlPathReference ```","closed","","Nimfadora","2017-07-23T12:07:37Z","2017-08-09T12:02:02Z"
"","4802","Issue #4801: add suppressions on the eleventh part of IDEA violations","Issue #4801  add suppressions","closed","","Nimfadora","2017-07-23T11:55:07Z","2017-07-23T14:34:37Z"
"","4924","Issue #4801: fix for violations from WeakerAccess inspection","Issue #4801","closed","","romani","2017-08-09T21:00:31Z","2017-08-10T08:52:16Z"
"","4919","Issue #4801: partial resolve of WeakerAccess violations","Issue #4801","closed","","romani","2017-08-09T12:33:28Z","2017-08-09T22:35:23Z"
"","4839","Issue #4801: add suppressions on some of WeakerAccess can be private cases","Issue #4801","closed","","Nimfadora","2017-07-27T20:48:11Z","2017-08-10T06:52:09Z"
"","4903","Issue #4798: refactored SummaryJavadoc messages and logic","Issue #4798  `summary.first.sentence` was rewritten to specify only an ending period was missing, as a missing first sentence is part of `summary.javaDoc.missing`.  Logic was rewritten to not show violations on missing summary and forbidden fragement at the same time for default module. Changes in Tests were because of this.  Inlining `firstSentence = firstSentence.substring(0, endOfSentence);` is because nested `if`s were getting too deep and caused a violation. I didn't want to move `log`s outside of main visit.  Regression to come.","closed","","rnveach","2017-08-05T15:09:56Z","2017-08-06T02:49:46Z"
"","4853","Issue #4777: fixed RequireThisCheck with NPE on case group","Issue #4777  Regression to come.","closed","","rnveach","2017-07-29T13:14:21Z","2017-07-31T13:47:20Z"
"","4767","Issue #4749: delete deprecated classes","Issue #4749 delete deprecated classes AbstractComplexityCheck, AbstractIllegalCheck, AbstractIllegalMethodCheck, AbstractNestedDepthCheck","closed","","Nimfadora","2017-07-19T16:33:57Z","2017-07-21T05:04:29Z"
"","4897","Issue #4744: ignore starting inheritDoc in SummaryJavadocCheck","Issue #4744  This will also cover https://github.com/checkstyle/checkstyle/issues/4800 . Changed in inputs is moving correct case out of incorrect input file. All changes in test are from that, not from change in code.  Regression will come, but it will be slow because of javadoc parsing.","closed","","rnveach","2017-08-04T01:27:00Z","2017-08-05T04:04:32Z"
"","4906","Issue #4742: add 3rd party AuditListener and require default constructor","Issue #4742  Identified AuditListeners and blocked classes from being picked up that don't have a default constructor.","closed","","rnveach","2017-08-07T02:09:28Z","2017-08-18T05:03:35Z"
"","4768","Issue #4735: make RegexpHeaderCheck detect regex having '\n\n'","issue #4735","closed","","vivekrao1985","2017-07-19T19:26:53Z","2017-08-03T19:40:57Z"
"","4736","Issue #4727: fixed FinalLocalVariable scanning anonymous classes","Issue #4727  Regression to come.","closed","","rnveach","2017-07-17T02:53:55Z","2017-07-30T02:53:16Z"
"","4731","Issue #4726: fixed easy cases of the fifth part of idea violations","Issue #4726   violation fixes included: ``` CollectionsMustHaveInitialCapacity ConstantConditions DuplicatePropertyInspection HardcodedFileSeparators HardcodedLineSeparators LengthOneStringsInConcatenation MagicConstant NullableProblems ObjectAllocationInLoop ObjectEquality ReturnNull SuspiciousArrayCast ```","closed","","Nimfadora","2017-07-16T09:56:12Z","2017-07-17T17:19:01Z"
"","4816","Issue #4726: fix InconsistentResourceBundle idea violation","Issue #4726  in most cases symbol `'` causes a problem, as it was used in placeholders also other have got not enough placeholders","closed","","Nimfadora","2017-07-24T18:50:09Z","2017-07-26T20:31:20Z"
"","4788","Issue #4726: fix three more violations from the fifth part of idea violations","Issue #4726  fixed CallToSimpleGetterInClass, MismatchedCollectionQueryUpdate, NullableProblems idea violations","closed","","Nimfadora","2017-07-20T22:46:17Z","2017-07-21T05:25:07Z"
"","4838","Issue #4726: fix EqualsUsesNonFinalVariable, HashCodeUsesNonFinalVariable idea violations","Issue #4726","closed","","Nimfadora","2017-07-27T19:59:37Z","2017-07-30T01:37:07Z"
"","4835","Issue #4726: fix AlphaUnsortedPropertiesFile idea violation","Issue #4726","closed","","Nimfadora","2017-07-27T07:15:56Z","2017-07-27T15:07:20Z"
"","4811","Issue #4726: fix MethodMayBeStatic idea violations","Issue #4726","closed","","Nimfadora","2017-07-23T17:55:18Z","2017-07-24T00:56:46Z"
"","4797","[WIP]: report on StringBufferMustHaveInitialCapacity IDEA violation","Issue #4726","closed","","Nimfadora","2017-07-22T16:27:18Z","2017-07-23T16:50:56Z"
"","4809","Issue #4725: fix all violations from the tenth part of idea violations","Issue #4725  fix includes: ``` GjsLint JSHint JSLint TsLint Eslint Jscs InnerHTMLJS Duplicates ```","closed","","Nimfadora","2017-07-23T16:22:00Z","2017-07-24T21:59:28Z"
"","4729","Issue #4725: add inspections passed without violations","Issue #4725  enabled such inspections: AssertMessageNotString CheckStyle CollectionAddAllCanBeReplacedWithConstructor CssConvertColorToRgbInspection CssUnusedSymbol DanglingJavadoc ExtendsThrowable FieldAccessedSynchronizedAndUnsynchronized FieldRepeatedlyAccessed FunctionWithMultipleLoopsJS Guava GuavaFluentIterable HtmlUnknownTarget IgnoreDuplicateEntry IgnoreRelativeEntry IgnoreUnusedEntry JSDeclarationsAtScopeStart MethodNamesDifferOnlyByCase MethodOnlyUsedFromInnerClass PackageNamingConvention PackageVisibleField RedundantMethodOverride ResultOfObjectAllocationIgnored StaticNonFinalField UnusedParameters","closed","","Nimfadora","2017-07-16T09:46:57Z","2017-07-21T12:05:03Z"
"","4732","Issue #4724: add suppressions","Issue #4724   add suppressions on violations: ``` AutoCloseableResource ClassHasNoToStringMethod CloneableClassInSecureContext DeserializableClassInSecureContext DesignForExtension JUnitTestNG LongLine NonStaticInnerClassInSecureContext ParameterHidingMemberVariable SerializableClassInSecureContext SpellCheckingInspection ```","closed","","Nimfadora","2017-07-16T09:58:48Z","2017-07-18T23:25:17Z"
"","4796","Issue #4724: fix FieldNotUsedInToString IDEA violations","Issue #4724  I think it is not very good idea to rewrite toString, as in JavadocNodeImpl, for e.z. we have such fields as [children and parent](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocNodeImpl.java#L68), in HtmlTag toString method [performs some calculations](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java#L121). What should I do with such cases?","closed","","Nimfadora","2017-07-22T14:11:34Z","2017-07-23T15:46:29Z"
"","4810","Issue #4724: fix all violations from the sixth part of idea violations","Issue #4724","closed","","Nimfadora","2017-07-23T16:52:08Z","2017-07-24T01:20:40Z"
"","4745","Issue #4723: fix all cases from the fourth part of idea violations","Issue #4723","closed","","Nimfadora","2017-07-17T19:05:38Z","2017-07-20T19:26:39Z"
"","4730","Issue #4722: fixed easy cases of the seventh part of idea violations","Issue #4722  violation fixes included: ``` AbstractClassWithOnlyOneDirectInheritor ArrayLengthInLoopCondition InterfaceWithOnlyOneDirectInheritor CheckForOutOfMemoryOnLargeArrayAllocation MethodCallInLoopCondition PrivateMemberAccessBetweenOuterAndInnerClass Annotation AutoBoxing AutoUnboxing EnumClass ForeachStatement IfCanBeSwitch ClassWithoutConstructor ClassWithoutNoArgConstructor FieldHasSetterButNoGetter CodeBlock2Expr ```","closed","","Nimfadora","2017-07-16T09:48:43Z","2017-07-17T17:23:43Z"
"","4790","Issue #4722: fix EqualsReplaceableByObjectsCall idea violation","Issue #4722  fixed EqualsReplaceableByObjectsCall idea violation","closed","","Nimfadora","2017-07-21T07:30:09Z","2017-07-23T15:47:28Z"
"","4747","Issue #4722: fix SimplifiableIfStatement, MissingPackageInfo  violations","Issue #4722  fix SimplifiableIfStatement and MissingPackageInfo  violation","closed","","Nimfadora","2017-07-17T20:36:39Z","2017-07-20T00:49:20Z"
"","4806","Issue #4722: fix HtmlTagCanBeJavadocTag idea violation","Issue #4722  fix all HtmlTagCanBeJavadocTag idea violations except those on TokenTypes, which will be addressed in #4805","closed","","Nimfadora","2017-07-23T15:58:43Z","2017-07-24T01:02:23Z"
"","4746","Issue #4713: add suppressions","Issue #4713  suppress violations: ``` AbstractClassExtendsConcreteClass BooleanMethodIsAlwaysInverted BooleanVariableAlwaysNegated BreakStatement ContinueStatement CyclicClassDependency CyclicPackageDependency DuplicateStringLiteralInspection EmptyMethod ErrorRethrown HardCodedStringLiteral IfMayBeConditional LawOfDemeter MagicCharacter NonThreadSafeLazyInitialization PublicInnerClass SameParameterValue SameReturnValue SingleClassImport StaticImport StringConcatenation ```","closed","","Nimfadora","2017-07-17T19:44:36Z","2017-07-17T20:06:19Z"
"","4765","Issue #4713: fix all violations from the third part of idea violations","Issue #4713  fixed violations remained: NestedTryStatement ProtectedField ProtectedInnerClass AssignmentToForLoopParameter ForLoopWithMissingComponent CheckedExceptionClass ExtendsConcreteCollection StaticVariableInitialization StaticVariableUninitializedUse","closed","","Nimfadora","2017-07-19T16:25:28Z","2017-07-21T05:04:19Z"
"","4719","Issue #4711: fixed code style idea violations","Issue #4711","closed","","Nimfadora","2017-07-15T12:09:44Z","2017-07-15T17:56:06Z"
"","4872","Issue #4709: fix avoid boolean parameters for public methods","Issue #4709","closed","","Nimfadora","2017-07-31T22:58:25Z","2017-08-09T11:54:49Z"
"","4715","Issue #4708: fixed part of idea violations","Issue #4708  fixed part of [idea violations](https://nimfadora.github.io/idea/suppressed_2_part.html)  added some violations to myAllowedSuppressions: ```                                                                     ``` they should be commented somehow","closed","","Nimfadora","2017-07-13T21:37:03Z","2017-07-15T13:52:24Z"
"","4789","Issue #4707: remained violations for the ninth part of idea violations","Issue #4707  fixed violations: ``` FeatureEnvy InstanceofInterfaces ParameterOfConcreteClass PublicMethodNotExposedInInterface TypeMayBeWeakened ```","closed","","Nimfadora","2017-07-21T07:07:47Z","2017-07-22T13:51:45Z"
"","4718","Issue #4707: fixed abstraction IDEA violations","Issue #4707  fixed all IDEA violations from [this report](https://nimfadora.github.io/idea/suppressed_abstraction.html)  except BooleanParameter which will be addressed in #4709","closed","","Nimfadora","2017-07-14T08:23:09Z","2017-07-14T22:14:12Z"
"","4804","Issue #4707: fix BooleanParameter idea violations","Issue #4707","closed","","Nimfadora","2017-07-23T14:35:08Z","2017-07-30T01:41:28Z"
"","4705","Issue #4694: UniquePropertiesCheck.getLineNumber should be private","Issue #4694","closed","","djydewang","2017-07-12T15:14:09Z","2017-09-12T09:57:44Z"
"","4696","Issue #4686: Moved input of 'flawless' subdirectory to 'checkstyleanttask' subdirectory of CheckstyleAntTaskTest","Issue #4686   This PR moves the remaining input file from the 'flawless' subdirectory to 'checkstyleanttask' subdirectory.","closed","","subkrish","2017-07-11T04:26:26Z","2017-07-12T14:29:42Z"
"","4687","Issue #4686: Modified CheckstyleAntTaskTest.java and moved its input files to the 'checkstyleanttask' subdirectory","Issue #4686   This PR moves all inputs of `CheckstyleAntTaskTest` of the `'ant'` package to a new subdirectory `'checkstyleanttask'`.","closed","","subkrish","2017-07-09T23:06:58Z","2017-07-11T04:09:44Z"
"","4922","Issue #4682: add scripts for checking idea inspections","Issue #4682","closed","","Nimfadora","2017-08-09T15:15:47Z","2017-09-04T03:35:05Z"
"","4721","[WIP]: idea violations remained","Issue #4681   PR not for merge  Displays current status of unfixed IDEA violations on TC","closed","incomplete,","Nimfadora","2017-07-15T13:28:30Z","2017-07-20T20:35:46Z"
"","4904","Issue #4676: move AbstractTypeAwareCheck and ClassResolver to javadoc","Issue #4676","closed","","rnveach","2017-08-05T23:37:36Z","2017-08-06T03:15:25Z"
"","4990","Issue #4675: increased coverage of pitest-checks-misc to 96%","Issue #4675  [report before changes](https://nimfadora.github.io/pr/com.puppycrawl.tools.checkstyle.checks/index.html)  pitest-checks-misc coverage by 3% current threshold: 96%","closed","","Nimfadora","2017-08-22T23:54:55Z","2017-08-23T04:38:25Z"
"","4976","Issue #4675: increase coverage of pitest-checks-misc to 93%","Issue #4675  [pitest-checks-misc before changes](https://nimfadora.github.io/pr/com.puppycrawl.tools.checkstyle.checks/index.html)  threshold before changes: 90% current threshold: 93% execution time: 03:28","closed","","Nimfadora","2017-08-20T17:51:36Z","2017-08-21T12:47:10Z"
"","4666","Issue #4664: removed constructor search in ConfigurationLoaderTest","Issue #4664  Fixed test and removed nondex exclude.","closed","","rnveach","2017-07-08T15:30:22Z","2017-07-08T21:18:02Z"
"","4905","Issue #4639: added suppport for lambdas in UnnecessaryParentheses","Issue #4639  Regression to come.","closed","","rnveach","2017-08-06T01:28:14Z","2017-08-10T10:19:20Z"
"","4879","Issue #4630: fixed exception in ModifiedControlVariable for enhanced for","Issue #4630  We skip over `FOR_EACH_CLAUSE` in `leaveToken` but we don't do the same when we reach `LITERAL_FOR` which is a parent of `FOR_EACH_CLAUSE`.  Regression to come.","closed","","rnveach","2017-08-01T22:00:05Z","2017-08-03T10:25:37Z"
"","4626","Issue #4607: Added moduleId to violation messages","Issue #4607   This is a starting solution for this issue. Tests would need to be revised for this to pass CI, and new test(s) should be added.","closed","","denizarsan","2017-07-05T19:27:54Z","2017-07-07T21:51:04Z"
"","4655","Issue #4592: Renamed Class BaseCheckTestSupport to BaseTestSupport","Issue #4592   This renames class BaseCheckTestSupport to BaseTestSupport and also makes subsequent changes other classes as well.","closed","","subkrish","2017-07-07T18:36:20Z","2017-07-08T22:01:18Z"
"","4875","Issue #4592: Added AbstractPathTestSupport, AbstractModuleTestSupport, AbstractIndentationTestSupport and all tests in ITs extend them","Issue #4592   This PR creates `AbstractPathTestSupport`, `AbstractModuleTestSupport`, `AbstractIndentationTestSupport`. All tests in ITs now extend these test supports.","closed","","subkrish","2017-08-01T11:04:03Z","2017-08-01T17:59:10Z"
"","4668","Issue #4592: Added AbstractPathTestSupport and CheckstyleAntTaskTest, SuppressionsLoaderTest now extends from it","Issue #4592   This PR adds a new class `AbstractPathTestSupport` which contains two methods `getPath(String filename)` and `abstract getPackageLocation()`. `CheckstyleAntTaskTest` and `SuppressionsLoaderTest` no longer extends BaseCheckTestSupport but instead uses this abstract class. This removes the file from the hierarchy.","closed","","subkrish","2017-07-08T23:26:51Z","2017-07-14T12:57:11Z"
"","4795","Issue #4592: Tests from filefilters, filters, grammars now extend AbstractModuleTestSupport and AbstractTreeTestSupport","Issue #4592  This PR extends the tests in filefilters, filters, grammars packages from `AbstractModuleTestSupport` and `AbstractTreeTestSupport`.","closed","","subkrish","2017-07-22T06:41:08Z","2017-07-22T15:36:29Z"
"","4840","Issue #4592: Added more tests which extend AbstractPathTestSupport and AbstractModuleTestSupport","Issue #4592  This PR extends the tests (that are left to be changed) from AbstractModuleTestSupport and AbstractPathTestSupport.","closed","","subkrish","2017-07-27T21:20:20Z","2017-07-29T04:06:54Z"
"","4855","Issue #4592: Added the last few tests which extend AbstractModuleTestSupport","Issue #4592  This PR extends the last few remaining tests from AbstractModuleTestSupport.","closed","","subkrish","2017-07-29T15:17:03Z","2017-07-31T09:12:48Z"
"","4733","Issue #4592: Added AbstractTreeTestSupport and JavadocParseTreeTest, AstTreeStringPrinterTest now extend from it","Issue #4592  This PR adds a new class AbstractTreeTestSupport which contains methods necessary for processing UTs for Tree tests. JavadocParseTreeTest and AstTreeStringPrinterTest no longer extends BaseCheckTestSupport but instead uses this abstract class. This removes the file from the hierarchy.","closed","","subkrish","2017-07-16T10:01:21Z","2017-07-18T04:12:00Z"
"","4844","Issue #4592: merged module test support and fileset test support","Issue #4592  As brought up in https://github.com/checkstyle/checkstyle/pull/4840#discussion_r130085063 , our module support class didn't support anything other than Checks. I changed module support to now handle filesets and renamed the methods so it is more obvious what they are doing.  The main changes are in `AbstractModuleTestSupport`, removing `BaseFileSetCheckTestSupport`, and a change in `TreeWalkerTest.testWithCheckNotHavingTreeWalkerAsParent`.","closed","","rnveach","2017-07-28T18:54:24Z","2017-07-29T13:15:57Z"
"","4878","Issue #4592: merged module test support and fileset test support","Issue #4592  All major changes are in `AbstractModuleTestSupport` to mirror changes that were add in `test` folder.  `getCheckConfig(String checkName)` was rewritten to be an override of the method `getCheckConfig(String checkName, String checkId)`.","closed","","rnveach","2017-08-01T20:25:27Z","2017-08-02T11:20:57Z"
"","4657","Issue #4586: Moved resources for AtclauseOrder check test","Issue #4586:Moved&Renamed all resources for AtclauseOrder check test.","closed","","djydewang","2017-07-08T11:30:26Z","2017-07-08T13:42:45Z"
"","4672","Issue #4586: Moved resources for JavadocType check test","Issue #4586: Something wrong with InputJavadoc.java when I move it to subdirectory. 1.Copied&Renamed `InputInner.java,InputJavadoc.java,InputNoJavadoc.java,InputPublicOnly.java,InputTags.java,InputParamsTags.java` to the javadoctype subdirectory.Because they were used by the other check tests.  2.Moved&Renamed the remianing resources for JavadocTypeCheckTest to the javadocstyle subdirectory.","closed","","djydewang","2017-07-09T13:07:42Z","2017-07-10T09:39:45Z"
"","4652","Issue #4586: moved resources for JavadocMethod check test","Issue #4586:  1.Copied&Renamed`InputNoJavadoc.java`,`InputPublicOnly.java`,`InputScopeInnerInterfaces.java`,`InputTags.java` and `InputTypeParamsTags.java` to the javadocmethod subdirectory.Because they were used by the other check test.  2.Moved&Renamed the remianing resources for JavadocMethodCheck to the javadocmethod subdirectory.","closed","","djydewang","2017-07-07T15:35:18Z","2017-07-08T12:19:01Z"
"","4679","Issue #4586: Moved resources for javadocvariable check test","Issue #4586: Copied&Renamed all resources for `JavadocVariableCheckTest` to the `javadocvariable `subdirectory.Because they were used by the other check tests.","closed","","djydewang","2017-07-09T16:16:05Z","2017-07-10T09:39:30Z"
"","4659","Issue #4586: Moved resources for the JavadocPackage check test","Issue #4586: 1.Copied&Renamed `.../javadoc/bothfiles`,`.../javadoc/pkginfo/annotation`,`InputBadTag.java` and `InputNoJavadoc.java` to the javadocpackage subdirectory.Because they were used by the other check test.  2.Moved&Renamed the remianing resources for JavadocPackage to the javadocmethod subdirectory.","closed","","djydewang","2017-07-08T13:11:15Z","2017-07-12T04:36:04Z"
"","4669","Issue #4586: Moved resources for the JavadocStyle check test","Issue #4586 : 1.Copied&Renamed `InputNojavadoc` to the javadocstyle subdirectory.Because it was used by the other check test.  2.Moved&Renamed the remianing resources for JavadocStyleCheck to the javadocstyle subdirectory.","closed","","djydewang","2017-07-09T05:27:40Z","2017-07-12T04:36:01Z"
"","4616","Issue #4586:Split and Organize Checkstyle inputs by Test for checks in 'javadoc' package","Issue #4586  Some thing is wrong When I run `mvn clean verify`: `[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.6.1:testCompile (default-testCompile) on project checkstyle: Compilation failure: Compilation failure: [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodInheritDoc.java:[6,5] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoctype/InputJavadocTypePublicOnly.java:[49,13] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoctype/InputJavadocTypePublicOnly.java:[54,5] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoctype/InputJavadocTypePublicOnly.java:[59,15] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadoctype/InputJavadocTypePublicOnly.java:[64,12] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodPublicOnly.java:[49,13] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodPublicOnly.java:[54,5] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodPublicOnly.java:[59,15] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodPublicOnly.java:[64,12] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodScopeAnonInner.java:[35,5] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodSetterGetter.java:[67,5] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocmethod/InputJavadocMethodSetterGetter.java:[69,12] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocvariable/InputJavadocVariablePublicOnly.java:[49,13] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocvariable/InputJavadocVariablePublicOnly.java:[54,5] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocvariable/InputJavadocVariablePublicOnly.java:[59,15] 方法声明无效; 需要返回类型 [ERROR] /home/bbg/project/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocvariable/InputJavadocVariablePublicOnly.java:[64,12] 方法声明无效; 需要返回类型` And I don't kown how to fix it. Please help me. Thanks.","closed","","djydewang","2017-07-05T13:30:59Z","2017-07-12T04:36:05Z"
"","4695","Issue #4586: Removed all rubbish in ""javadoc"" package","Issue #4586","closed","","djydewang","2017-07-11T04:09:30Z","2017-07-11T12:10:26Z"
"","4693","Issue #4586: Moved all resources for SummaryJavadocCheckTest","Issue #4586","closed","","djydewang","2017-07-10T17:37:52Z","2017-07-12T04:35:31Z"
"","4692","Issue #4586: Moved all resources for AbstractJavadocCheckTest","Issue #4586","closed","","djydewang","2017-07-10T16:59:53Z","2017-07-12T04:35:31Z"
"","4690","Issue #4586: Moved all resources for WriteTagCheckTest","Issue #4586","closed","","djydewang","2017-07-10T11:01:53Z","2017-07-12T04:35:35Z"
"","4689","Issue #4586: Moved all resources for SingleLineJavadocChecktest","Issue #4586","closed","","djydewang","2017-07-10T10:24:09Z","2017-07-12T04:35:33Z"
"","4688","Issue #4586: Moved all resources for NonEmptyAtclauseDescription","Issue #4586","closed","","djydewang","2017-07-10T10:13:52Z","2017-07-12T04:35:36Z"
"","4683","Issue #4586: Moved all resources for JavadocTagContinuationIndentationCheckTest","Issue #4586","closed","","djydewang","2017-07-09T17:00:26Z","2017-07-10T09:39:22Z"
"","4665","Issue #4586: Moved InputCorrectJavadocParagraph.java to javadocparagr…","Issue #4586","closed","","djydewang","2017-07-08T15:08:40Z","2017-07-12T04:36:04Z"
"","4662","Issue #4586: Moved InputCorrectJavadocParagraph.java to javadocparagr…","Issue #4586","closed","","djydewang","2017-07-08T13:38:08Z","2017-07-08T18:37:01Z"
"","4611","Issue #4582: restored wercker xwiki","Issue #4582  This is the final PR.","closed","","rnveach","2017-07-04T17:14:13Z","2017-07-05T18:30:09Z"
"","4594","Issue #4582: restored wercker hibernate search","Issue #4582","closed","","rnveach","2017-07-03T13:00:00Z","2017-07-03T17:46:12Z"
"","4583","Issue #4582: restored wercker checkstyle's sevntu","Issue #4582","closed","","rnveach","2017-07-02T15:43:43Z","2017-07-02T16:03:47Z"
"","4576","Issue #4575: Modified BooleanExpressionComplexityCheckTest.java and moved its input files to the 'booleanexpressioncomplexity' subdirectory","Issue #4575   This PR moves all inputs of BooleanExpressionComplexityCheckTest of the metrics package to a new subdirectory 'booleanexpressioncomplexity'.","closed","","subkrish","2017-07-01T06:47:44Z","2017-07-03T14:50:14Z"
"","4619","Issue #4575: Modified NPathComplexityCheckTest.java and moved its input files to the npathcomplexity subdirectory","Issue #4575  This PR moves all inputs of NPathComplexityCheckTest of the metrics package to a new subdirectory 'npathcomplexity'.","closed","","subkrish","2017-07-05T14:53:53Z","2017-07-06T00:47:40Z"
"","4615","Issue #4575: Modified JavaNCSSCheckTest.java and moved its input files to the javancss subdirectory","Issue #4575  This PR moves all inputs of JavaNCSSCheckTest of the metrics package to a new subdirectory 'javancss'.","closed","","subkrish","2017-07-05T08:24:27Z","2017-07-05T14:04:54Z"
"","4614","Issue #4575: Modified CyclomaticComplexityCheckTest.java and moved its input files to the cyclomaticcomplexity subdirectory","Issue #4575  This PR moves all inputs of CyclomaticComplexityCheckTest of the metrics package to a new subdirectory 'cyclomaticcomplexity'.","closed","","subkrish","2017-07-05T08:03:48Z","2017-07-05T14:04:45Z"
"","4600","Issue #4575: Modified ClassFanOutComplexityCheckTest.java and moved its input files to the classfanoutcomplexity subdirectory","Issue #4575  This PR moves all inputs of ClassFanOutComplexityCheckTest of the metrics package to a new subdirectory 'classfanoutcomplexity'.","closed","","subkrish","2017-07-04T06:26:00Z","2017-07-04T15:09:16Z"
"","4584","Issue #4575: Modified ClassDataAbstractionCouplingCheckTest.java and moved its input files to the classdataabstractioncoupling subdirectory","Issue #4575  This PR moves all inputs of ClassDataAbstractionCouplingCheckTest of the metrics package to a new subdirectory 'classdataabstractioncoupling'.","closed","","subkrish","2017-07-02T16:30:31Z","2017-07-03T03:52:33Z"
"","4568","Issue #4567: fix AccessorClassGeneration and JUnitTestsShouldIncludeAssert violations","Issue #4567   subtask of #877   fixed AccessorClassGeneration violations and JUnitTestsShouldIncludeAssert  in CheckstyleAntTask","closed","","Nimfadora","2017-06-30T21:23:32Z","2017-06-30T23:34:32Z"
"","4880","Issue #4563: fixed stackoverflow with DetailAST.setParent","Issue #4563  Rewrote `setParent` to not do a recursive call but to use a loop instead.  `testManyComments` was written in a way to avoid putting a 300kb input file into our repository. It added 9 seconds runtime on my local PC.  i assume we don't need regression.","closed","","rnveach","2017-08-01T23:01:24Z","2017-08-04T18:24:32Z"
"","4542","Issue #4541: removed deprecated Check class","Issue #4541  Removed class and suppressions. It was a little bit more than a revert of ba6781e1098fbbd76482c67a2e21f2796db166a2.","closed","","rnveach","2017-06-27T14:35:19Z","2017-06-27T17:02:11Z"
"","4549","Issue #4540: fixed wrong MethodCount with new nested interface def","Issue #4540  The reason to drop all the class definitions for a 'not method definition' condition is so [the change inversely mirrors exactly what is in `visitToken`](https://github.com/checkstyle/checkstyle/blob/7956f0b8d846d8f8ded1e9871e4bb58bf351fbb1/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java#L112-L118). We should be less likely to have issues again if we add more tokens this way.  I will provide regression for just this change, and run regression against commit before bad PR to see if I can verify no more bad results exist.","closed","","rnveach","2017-06-28T01:43:32Z","2017-06-28T13:01:50Z"
"","4770","Issue #4539: fixed MethodCount from counting methods in wrong definition","Issue #4539  Regression to come.","closed","","rnveach","2017-07-19T22:45:07Z","2017-07-30T02:26:03Z"
"","4555","Issue #4538: Removed the remaining files from 'indentation' directory","Issue #4538   This PR removes any extra files left in the 'indentation' directory.","closed","","subkrish","2017-06-29T22:47:52Z","2017-06-30T13:25:02Z"
"","4546","Issue #4538: Modified CommentsIndentationCheckTest.java and moved its input files to the commentsindentation subdirectory","Issue #4538   This PR moves all inputs of CommentsIndentationCheckTest of the imports package to a new subdirectory 'commentsindentation'.","closed","","subkrish","2017-06-27T19:30:14Z","2017-06-27T23:40:39Z"
"","4552","Issue #4538: Removed NewHandlerTest.java and moved its test to IndentationCheckTest.java","Issue #4538  This PR moves all inputs of NewHandlerTest of the imports package to a new subdirectory 'newhandler'.","closed","","subkrish","2017-06-28T21:38:59Z","2017-06-29T20:51:49Z"
"","4548","Issue #4538: Modified IndentationCheckTest.java and moved its input files to the indentation subdirectory","Issue #4538  This PR moves all inputs of IndentationCheckTest of the imports package to a new subdirectory 'indentation'.","closed","","subkrish","2017-06-27T22:48:08Z","2017-06-28T14:12:21Z"
"","4535","Issue #4534: add ANNOTATION_DEF to defaultTokens to fix NPE","Issue #4534  @rnveach , please review and merge if you agree. regression could be provided later, we need to unblock wercker.","closed","","romani","2017-06-27T05:39:46Z","2017-06-27T12:53:20Z"
"","4521","Issue #4518: fix pmd violations for TestClassWithoutTestCases","Issue #4518   fix pmd violations for TestClassWithoutTestCases","closed","","Nimfadora","2017-06-24T14:40:10Z","2017-06-24T14:54:57Z"
"","4520","Issue #4516: fix third bunch of pmd violations for JUnitAssertionsShouldIncludeMessage","Issue #4516   fix third bunch of pmd violations for JUnitAssertionsShouldIncludeMessage","closed","","Nimfadora","2017-06-24T14:32:36Z","2017-06-24T14:50:28Z"
"","4517","Issue #4516: fix first bunch of pmd violations for JUnitAssertionsShouldIncludeMessage","Issue #4516  fixed first bunch of violations for JUnitAssertionsShouldIncludeMessage","closed","","Nimfadora","2017-06-24T12:34:22Z","2017-06-24T13:00:34Z"
"","4519","Issue #4516: fix second bunch of pmd violations for JUnitAssertionsShouldIncludeMessage","Issue #4516  fix second bunch of pmd violations for JUnitAssertionsShouldIncludeMessage","closed","","Nimfadora","2017-06-24T13:32:19Z","2017-06-24T14:09:36Z"
"","4522","Issue #4516: fix fourth bunch of pmd violations for JUnitAssertionsShouldIncludeMessage","Issue #4516  fix fourth bunch of pmd violations for JUnitAssertionsShouldIncludeMessage","closed","","Nimfadora","2017-06-24T16:50:33Z","2017-06-24T22:50:34Z"
"","4502","Issue #4500: limit exclusion scope of pmd for src/it to src/it/resources","Issue #4500  changed `src/it` to `src/it/resources`  [pmd report](https://nimfadora.github.io/pmd-pr/pmd4500.html)","closed","","Nimfadora","2017-06-23T08:12:22Z","2017-06-24T13:18:46Z"
"","4531","Issue #4500: fix first part of tentative pmd violations","Issue #4500  fix first part of tentative pmd violations","closed","","Nimfadora","2017-06-26T20:50:46Z","2017-06-27T02:05:27Z"
"","4551","Issue #4500: fix second part of JUnitTestsShouldIncludeAssert violations","Issue #4500  Almost all violations were fixed, 7 cases left. These tests need to be rewritten as I don't see how can I check something here.  [report on checks left](https://nimfadora.github.io/pmd-pr/pmd877.html)","closed","","Nimfadora","2017-06-28T13:45:07Z","2017-06-28T17:39:02Z"
"","4506","Issue #4497: fix pmd violations for CheckstyleCustomShortVariable","Issue #4497   fixed all violations of rule specified  [pmd report](https://nimfadora.github.io/pmd-pr/pmd4497.html)","closed","","Nimfadora","2017-06-23T14:36:15Z","2017-06-23T15:09:32Z"
"","4509","Issue #4496: suppress pmd violations for NcssMethodCount","Issue #4496   fixed all violations of rule specified  [pmd report](https://nimfadora.github.io/pmd-pr/pmd4496.html)","closed","","Nimfadora","2017-06-23T14:57:54Z","2017-06-23T15:22:36Z"
"","4510","Issue #4495: fix pmd violations for UncommentedEmptyMethodBody","Issue #4495   fixed all violations of rule specified  [pmd report](https://nimfadora.github.io/pmd-pr/pmd4495.html)","closed","","Nimfadora","2017-06-23T14:59:54Z","2017-06-23T20:26:29Z"
"","4512","Issue #4494: fix pmd violations for AppendCharacterWithChar","Issue #4494   fixed all violations of rule specified  [pmd report](https://nimfadora.github.io/pmd-pr/pmd4494.html)","closed","","Nimfadora","2017-06-23T15:02:59Z","2017-06-23T20:47:34Z"
"","4507","Issue #4493: fix pmd violations for ConfusingTernary","Issue #4493   fixed all violations of rule specified [ pmd report](https://nimfadora.github.io/pmd-pr/pmd4493.html)","closed","","Nimfadora","2017-06-23T14:37:56Z","2017-06-23T19:57:24Z"
"","4503","Issue #4492: fix pmd violations for CommentDefaultAccessModifier","Issue #4492   fixed all violations of rule specified  [pmd report](https://nimfadora.github.io/pmd-pr/pmd4492.html)","closed","","Nimfadora","2017-06-23T13:56:29Z","2017-06-23T17:50:24Z"
"","4511","Issue #4491: fix pmd violations for InsufficientStringBufferDeclaration","Issue #4491   fixed all violations of rule specified  [pmd report](https://nimfadora.github.io/pmd-pr/pmd4491.html)","closed","","Nimfadora","2017-06-23T15:01:55Z","2017-06-23T20:36:19Z"
"","4504","Issue #4490: fix pmd violations for LoggerIsNotStaticFinal","Issue #4490   fixed all violations of rule specified  [pmd report](https://nimfadora.github.io/pmd-pr/pmd4490.html)","closed","","Nimfadora","2017-06-23T13:58:09Z","2017-06-23T18:02:25Z"
"","4508","Issue #4489: fix pmd violations for JUnit4TestShouldUseTestAnnotation","Issue #4489   fixed all violations of rule specified [ pmd report](https://nimfadora.github.io/pmd-pr/pmd4489.html)","closed","","Nimfadora","2017-06-23T14:56:35Z","2017-06-23T20:07:15Z"
"","4515","Issue #4488: fix pmd violations for UselessOverridingMethod","Issue #4488   fixed all violations of rule specified  [pmd report](https://nimfadora.github.io/pmd-pr/pmd4488.html)","closed","","Nimfadora","2017-06-24T11:37:52Z","2017-06-24T14:47:03Z"
"","4560","Issue #4475: added since version to all module descriptions","Issue #4475  This is the final PR for the issue.","closed","","rnveach","2017-06-30T13:22:59Z","2017-06-30T19:12:11Z"
"","4524","Issue #4475: added since version column to all module properties","Issue #4475  Just adding version to properties in this PR. Next PR will do module version. I will not add version to Javadoc as there is no way to cross check them without a specialized JUnit, and this seems like this will be done with https://groups.google.com/forum/?hl=en#!topic/checkstyle-devel/lsNF6Dj90lo .  I added a temporary junit method to verify version numbers from extract file matched what I wrote in the xdocs. I manually confirmed versions 3.0 and 6.7 because of limitations of the extract utility and small issues in CS at those times. No modules were before 3.0 as they were internal, didn't use a configuration, and used System properties to control their settings.","closed","","rnveach","2017-06-25T13:03:55Z","2017-06-26T17:21:58Z"
"","4595","Issue #4472: Fix EmptyBlockCheck NPE with annotation default keyword","Issue #4472   ---------  Diffs with `LITERAL_DEFAULT`: https://soon-checkstyle-diffs.github.io/issue-4472-npe/index.html  Diffs with default module properties: https://soon-checkstyle-diffs.github.io/issue-4472/index.html","closed","","soon","2017-07-03T14:28:11Z","2017-07-04T14:05:25Z"
"","4728","Issue #4456: Disallowing user to use incomplete fully qualified Check…","Issue #4456 It seems that some class information are not in  `NAME_TO_FULL_MODULE_NAME` or `thirdPartyNameToFullModuleNames`. For example，`com.puppycrawl.tools.checkstyle.CheckerTest`. And my idea is: 1.Add information to `NAME_TO_FULL_MODULE_NAME`  or `TEST_MODULE_NAME`(New) 2.Change method of refactor Please correct me if I misunderstood.","closed","","djydewang","2017-07-15T19:20:26Z","2017-10-28T23:06:57Z"
"","4598","Issue #4450: substitude mock tests with functional tests","Issue #4450","closed","","romani","2017-07-03T21:33:25Z","2017-07-04T05:05:22Z"
"","4597","Issue #4450: attempt to reproduce problem on Travis","Issue #4450","closed","","romani","2017-07-03T21:32:46Z","2017-07-03T22:30:01Z"
"","4447","Issue #4445: Unstable TreeWalkerTest due to an apparent powermock - cobertura conflict","Issue #4445: Verifying calls to private static method using powermock was causing CI failures due to apparent conflict with cobertura","closed","","voidfist","2017-06-11T10:13:07Z","2017-06-11T19:15:11Z"
"","4439","Issue #4437: Modified AvoidStarImportCheckTest.java and moved its input files to the avoidstarimport subdirectory","Issue #4437   This PR moves all inputs of AvoidStarImportCheckTest of the imports package to a new subdirectory 'avoidstarimport'.","closed","","subkrish","2017-06-08T21:35:45Z","2017-06-09T03:06:48Z"
"","4532","Issue #4437: Arranged the remaining files from 'imports' directory and modified the test and input files based on the rearrangement","Issue #4437   This PR arranges the remaining files in the 'imports' directory because they are used in different files. The rearrangement also caused a few changes to made to certain input and test files.","closed","","subkrish","2017-06-26T23:36:07Z","2017-06-27T12:31:21Z"
"","4470","Issue #4437: Modified UnusedImportsCheckTest.java and moved its input files to the unusedimports subdirectory","Issue #4437  This PR moves all inputs of UnusedImportsCheckTest of the imports package to a new subdirectory 'unusedimports'.","closed","","subkrish","2017-06-19T20:49:08Z","2017-06-20T13:58:54Z"
"","4513","Issue #4437: Modified RedundantImportCheckTest.java and moved its input files to the redundantimport subdirectory","Issue #4437  This PR moves all inputs of RedundantImportCheckTest of the imports package to a new subdirectory 'redundantimport'.","closed","","subkrish","2017-06-23T21:37:15Z","2017-06-24T00:47:54Z"
"","4461","Issue #4437: Modified ImportOrderCheckTest.java and moved its input files to the importorder subdirectory","Issue #4437  This PR moves all inputs of ImportOrderCheckTest of the imports package to a new subdirectory 'importorder'.","closed","","subkrish","2017-06-15T22:28:37Z","2017-06-20T01:00:29Z"
"","4514","Issue #4437: Modified ImportControlLoaderTest.java and moved its input files to the importcontrolloader subdirectory","Issue #4437  This PR moves all inputs of ImportControlLoaderTest of the imports package to a new subdirectory 'importcontrolloader'.","closed","","subkrish","2017-06-24T04:27:38Z","2017-06-25T14:57:38Z"
"","4483","Issue #4437: Modified ImportControlCheckTest.java and moved its input files to the importcontrol subdirectory","Issue #4437  This PR moves all inputs of ImportControlCheckTest of the imports package to a new subdirectory 'importcontrol'.","closed","","subkrish","2017-06-21T20:28:12Z","2017-06-23T18:22:52Z"
"","4443","Issue #4437: Modified IllegalImportCheckTest.java and moved its input files to the illegalimport subdirectory","Issue #4437  This PR moves all inputs of IllegalImportCheckTest of the imports package to a new subdirectory 'illegalimport'.","closed","","subkrish","2017-06-09T15:40:29Z","2017-06-09T17:21:21Z"
"","4442","Issue #4437: Modified CustomImportOrderCheckTest.java and moved its input files to the customimportorder subdirectory","Issue #4437  This PR moves all inputs of CustomImportOrderCheckTest of the imports package to a new subdirectory 'customimportorder'.","closed","","subkrish","2017-06-09T03:36:20Z","2017-06-12T18:39:05Z"
"","4441","Issue #4437: Modified AvoidStaticImportCheckTest.java and moved its input files to the avoidstaticimport subdirectory","Issue #4437  This PR moves all inputs of AvoidStaticImportCheckTest of the imports package to a new subdirectory 'avoidstaticimport'.","closed","","subkrish","2017-06-09T00:44:03Z","2017-06-09T17:08:54Z"
"","4432","Issue #4431: Modified ModifierOrderCheckTest.java and moved its input files to the modifierorder subdirectory","Issue #4431   This PR moves all inputs of ModifierOrderCheckTest of the modifier package to a new subdirectory 'modifierorder'.","closed","","subkrish","2017-06-07T19:56:15Z","2017-06-08T02:54:14Z"
"","4435","Issue #4431: Remove InputModifier.java as it is no longer required","Issue #4431  This PR removes the unnecessary files from the 'modifier' subdirectory.","closed","","subkrish","2017-06-08T03:09:05Z","2017-06-08T12:51:24Z"
"","4434","Issue #4431: Modified RedundantModifierCheckTest.java and moved its input files to the redundantmodifier subdirectory","Issue #4431  This PR moves all inputs of RedundantModifierCheckTest of the modifier package to a new subdirectory 'redundantmodifier'.","closed","","subkrish","2017-06-07T22:21:01Z","2017-06-08T02:54:25Z"
"","4440","Issue #4417: fixed failure to load custom root module","Issue #4417  `testCustomSimpleRootModule` doesn't test a successful module load, just a failure message.  `TestRootModuleChecker` doesn't implement `AutomaticBean` to be able to be instantiated. If we did add this implementation, then `TestRootModuleChecker` gets picked up and wanted to be added to our configurations and such, because all tests see it as a real module. To be able to deduce if a module is in `main` or `test` we would need to settle on a naming convention and override the production `module finder` in the test folder to skip the test named modules.","closed","","rnveach","2017-06-09T00:14:28Z","2017-06-12T23:56:01Z"
"","4412","Issue #4410: Do not allow whitespace after @ sign","Issue #4410","closed","abandoned,","strkkk","2017-06-03T09:25:25Z","2017-09-13T13:05:04Z"
"","4890","WIP: Issue 4409: Add MultiThreadChecker implementation","Issue #4409  WIP until #4869 (PR https://github.com/checkstyle/checkstyle/pull/4882) is merged. This PR also contains 2 commits - one from the #4882 and it will be removed as soon as #4882 is merged  This PR adds the MT mode for the Checker module","closed","discussion ongoing,","soon","2017-08-03T17:37:31Z","2019-03-30T14:22:34Z"
"","4550","Issue #4408: Uppercase letters to be allowed in package names in javadoc","Issue #4408: Uppercase letters to be allowed in package names in javadoc. Replaced PACKAGE token in JavadocLexer with PACKAGE_CLASS  Additional fix - #4769","closed","","voidfist","2017-06-28T07:43:11Z","2017-09-18T23:42:59Z"
"","4671","Updated javadoc parser grammar to enforce WS before description section in javadoc tags.","Issue #4408: Updated javadoc parser grammar to enforce WS before description section in javadoc tags.  I have not created new issue for this PR since this update has been forced and realized because of issue 4408. Please let me know if rather new issue should be created for this update.","closed","","voidfist","2017-07-09T09:53:34Z","2017-08-25T17:04:33Z"
"","4451","Issue #4405: Javadoc position to be checked before rendering ASTs","Issue #4405 : Javadoc position to be checked before rendering ASTs","closed","","voidfist","2017-06-13T17:37:31Z","2017-07-05T19:26:03Z"
"","4826","Issue #4402: increase coverage of pitest-checks-annotation to 100","Issue #4402  [report before changes](https://nimfadora.github.io/pr/com.puppycrawl.tools.checkstyle.checks.annotation/index.html)  increased coverage of pitest-checks-annotation by 1% current threshold: 100% execution time: 01:39","closed","","Nimfadora","2017-07-25T22:26:39Z","2017-07-26T20:29:53Z"
"","4793","Issue #4401: increase coverage of pitest-checks-header profile to 100%","Issue #4401   [pitest report before changes](https://nimfadora.github.io/issue4401.html)","closed","","Nimfadora","2017-07-21T21:18:35Z","2017-07-22T14:11:42Z"
"","4433","Issue #4400: increase coverage of pitest-checkstyle-common profile to 89%","Issue #4400   increased mutation threshold for pitest-checkstyle-common by 5% threshold: 89% execution time: 11:46 min  [pitest report before changes for PropertyCacheFile](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/PropertyCacheFile.java.html) [pitest report before changes for CheckstyleAntTast](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle.ant/CheckstyleAntTask.java.html) [pitest report before changes for package](https://nimfadora.github.io/issue4400.html)","closed","","Nimfadora","2017-06-07T20:43:33Z","2017-06-19T21:04:14Z"
"","4499","Issue #4400: increase coverage of pitest-checkstyle-common profile to 92%","Issue #4400   [pitest report before changes](https://nimfadora.github.io/issue4400.html)  increased mutation threshold for pitest-checkstyle-common profile by 2% current threshold: 92% execution time: 13:02 min","closed","","Nimfadora","2017-06-22T19:48:24Z","2017-06-23T14:57:35Z"
"","4621","Issue #4400: increase coverage of pitest-checkstyle-common profile to 98%","Issue #4400  increased mutation threshold for pitest-checkstyle-common by 3% threshold: 98% execution time: 08:41 min  [pitest report before changes for package](https://nimfadora.github.io/issue4400.html)","closed","","Nimfadora","2017-07-05T15:42:30Z","2017-07-06T14:18:29Z"
"","4407","Issue #4400: Increase coverage of pitest-checks-common profile to 85%","Issue #4400  increased mutation threshold for pitest-checkstyle-common by 2% threshold: 84% execution time: 04:28 min threshold will increase slowly as profile is quite big [pitest report before changes for class](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html) [pitest report before changes for package](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/index.html)  `testFinishLocalSetupFullyInitialized` kills the following mutations: [173](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_173), [415](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_415), [432](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_432), [433](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_433), [435](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_435), [436](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_436) `testAddBeforeExecutionFileFilterAsChild` kills the following mutations: [466](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_466) `testAddListenerAsChild` kills the following mutations: [474](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_474) `testCheckerProcessCallAllNeededMethodsOfChecks` kills the following mutations: [210](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_210), [217](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_217), [220](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_220) `testFileSetCheckInitWhenAddedAsChild` kills the following mutations: [461](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_461) `testSetFileSetCheckSetsMessageDispatcher` kills the following mutations: [488](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle/Checker.java.html#org.pitest.mutationtest.report.html.SourceFile@58688a38_488)","closed","","Nimfadora","2017-06-01T19:51:46Z","2017-06-07T03:14:43Z"
"","4642","Issue #4400: increase coverage of pitest-checkstyle-common profile to 100%","Issue #4400  increased mutation threshold for pitest-checkstyle-common by 2% threshold: 100%","closed","","Nimfadora","2017-07-06T22:01:22Z","2017-07-07T12:45:14Z"
"","4561","Issue #4400: increase coverage of pitest-checkstyle-common profile to 95%","Issue #4400  [pitest report before changes](https://nimfadora.github.io/issue4400.html)  increased mutation threshold for pitest-checkstyle-common profile by 3% current threshold: 95% execution time: 13:01 min","closed","","Nimfadora","2017-06-30T17:48:38Z","2017-07-03T23:44:43Z"
"","4660","Issue #4399: increase coverage of pitest-checkstyle-main profile to 99%","Issue #4399 Futher to out conversation with @romani, this pull request suppresses all mutations (that can be suppressed) for pitest-checkstyle-main profile, so that later fix and remove suppressions.  Now the situation with main profile is as follows: [report](https://nimfadora.github.io/issue4399.html)  problems:  1) [here](https://nimfadora.github.io/pr/com.puppycrawl.tools.checkstyle/Main.java.html#org.pitest.mutationtest.report.html.SourceFile@15e7538c_213)  Original: errorCounter != 0 && !cliViolations I have tried many variants:  errorCounter == 0 && !cliViolations errorCounter == 0 && cliViolations errorCounter != 0 && cliViolations !(errorCounter != 0 && !cliViolations) !(errorCounter == 0 && !cliViolations) !(errorCounter == 0 && cliViolations) !(errorCounter != 0 && cliViolations) All of them were killed by our tests, so I don't understand why in pitest they are survived.  2) All other cases except [this one](https://nimfadora.github.io/pr/com.puppycrawl.tools.checkstyle/Main.java.html#org.pitest.mutationtest.report.html.SourceFile@15e7538c_493) are connected to different ways of closing IO streams. I can test them with PowerMock, but as it uses reflection it is in a conflict with [this](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java#L150) Main test. They cannot coexist, one of them fails when I try to fix another.","closed","","Nimfadora","2017-07-08T13:15:46Z","2017-07-09T04:44:47Z"
"","4832","Issue #4399: increase coverage of pitest-checkstyle main profile to 100%","Issue #4399  [report before changes](https://nimfadora.github.io/issue4399.html)  increased coverage of pitest-checkstyle-main by 7% current threshold: 100% 95/95 mutations are killed execution time: 05:01","closed","","Nimfadora","2017-07-26T18:54:19Z","2017-07-28T13:03:25Z"
"","4663","Issue #4398: increase coverage of pitest-checkstyle-tree-walker profile to 100%","Issue #4398 Futher to out conversation with @romani, this pull request suppresses all mutations (that can be suppressed) for pitest-checkstyle-tree-walker profile, so that later fix and remove suppressions.  Now the situation with tree-walker profile is as follows: [report](https://nimfadora.github.io/issue4398.html) (some mutations are timed out and appear only when some other are excluded)","closed","","Nimfadora","2017-07-08T13:59:48Z","2017-07-09T04:15:31Z"
"","4910","Issue #4398: investigate mutations remained in pitest-checkstyle-tree-walker","Issue #4398  report on violations remained is [here](https://nimfadora.github.io/issue4398.html)  total remained violations: 16 current real threshold: 94%","closed","","Nimfadora","2017-08-07T21:35:08Z","2017-08-22T08:05:56Z"
"","4455","Issue #4398: increase coverage of pitest-checkstyle-tree-walker profile to 89%","Issue #4398  removed Main class (forgotten to be removed while splitting to profiles) from tree-walker profile threshold without Main class : 77% increased mutation threshold for pitest-checkstyle-tree-walker by 12% current threshold: 89% execution time: 9:43 min  [pitest report before changes for package](https://nimfadora.github.io/issue4398.html)","closed","","Nimfadora","2017-06-14T15:21:12Z","2017-06-22T14:58:56Z"
"","4623","Issue #4398: increase coverage of pitest-checkstyle-tree-walker profile to 94%","Issue #4398  increased mutation threshold for pitest-checkstyle-tree-walker by 5% threshold: 94% execution time: 10:31 min  [pitest report before changes for package](https://nimfadora.github.io/issue4398.html)","closed","","Nimfadora","2017-07-05T16:27:20Z","2017-07-07T13:00:37Z"
"","4654","Issue #4398: added tests to verify TreeWalker calling checks' destroy","Issue #4398  Identified in https://github.com/checkstyle/checkstyle/pull/4623#discussion_r125784524 , there were no tests verifying that TreeWalker calls checks' destroy method. When they were removed, only thing failing was code coverage.  Before PR pitest report: http://rveach.no-ip.org/checkstyle/regression/pitest-reports/1/com.puppycrawl.tools.checkstyle/TreeWalker.java.html After PR pitest report: http://rveach.no-ip.org/checkstyle/regression/pitest-reports/2/com.puppycrawl.tools.checkstyle/TreeWalker.java.html  Only thing missing is supporting the `super.destroy()`.","closed","","rnveach","2017-07-07T18:24:56Z","2017-07-08T01:03:06Z"
"","4446","Issue #4395: increase coverage of pitest-checkstyle-utils profile to 67%","Issue #4395   increased mutation threshold for pitest-checkstyle-utils by 18% threshold: 67% execution time: 01:54 min  [pitest report before changes for class](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle.utils/CheckUtils.java.html) [pitest report before changes for package](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle.utils/index.html)","closed","","Nimfadora","2017-06-10T23:11:35Z","2017-06-19T21:09:14Z"
"","4428","Issue #4395: increase coverage of pitest-checkstyle-utils profile to 49%","Issue #4395   increased mutation threshold for pitest-checkstyle-common by 9% threshold: 49% execution time: 01:36 min [pitest report before changes for class](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle.utils/ScopeUtils.java.html) [pitest report before changes for package](https://nimfadora.github.io/issue4395.html)","closed","","Nimfadora","2017-06-07T10:52:38Z","2017-06-09T00:37:48Z"
"","4485","Issue #4395: increase coverage of pitest-checkstyle-utils profile to 99%","Issue #4395   [pitest report before changes](https://nimfadora.github.io/com.puppycrawl.tools.checkstyle.utils/index.html)  increased mutation threshold for pitest-checkstyle-api-filters profile by 32% current threshold: 99% execution time: 02:38 min","closed","","Nimfadora","2017-06-21T22:07:12Z","2017-06-23T18:34:23Z"
"","4644","Issue #4395: increase coverage of pitest-checkstyle-utils profile to 100%","Issue #4395  increased mutation threshold for pitest-checkstyle-common by 1% threshold: 100% execution time: 02:40 min","closed","","Nimfadora","2017-07-07T06:07:42Z","2017-07-07T12:50:02Z"
"","4667","Issue #4394: rearranged pitest-checkstyle-api-filters profile","Issue #4394   Futher to out conversation with @romani, this pull request splits pitest-checkstyle-api-filters profile to pitest-checkstyle-api and pitest-checkstyle-filters and suppresses all mutations for pitest-checkstyle-filters profile, so that later fix and remove suppressions.  Now the situation with api profile is as follows: [report](https://nimfadora.github.io/issue4394.html) Now the situation with filters profile is as follows: [report](https://nimfadora.github.io/issue4396.html)","closed","","Nimfadora","2017-07-08T15:55:54Z","2017-07-09T04:31:30Z"
"","4464","Issue #4394: united api and filters profiles, increased coverage to 85%","Issue #4394  Profiles pitest-checkstyle-api and pitest-checkstyle-filters were united in order to increase coverage of api profile, as they have many common functionality. More then with any other profile.  Coverage of api profile before union: 67% test coverage and 45% mutation coverage. Coverage of api profile after union: 92% test coverage and 75% mutation coverage.  [pitest-checkstyle-api profile before changes](https://nimfadora.github.io/api.html) [pitest-checkstyle-api-filters profile after union before coverage increasing changes](https://nimfadora.github.io/filters_union_api.html)  increased mutation threshold for pitest-checkstyle-api-filters profile by 4% current threshold: 85% execution time: 9:51 min","closed","","Nimfadora","2017-06-17T17:22:00Z","2017-06-23T01:36:45Z"
"","4743","Issue #4394: fix last mutation","Issue #4394  last mutation is fixed, task is done","closed","","Nimfadora","2017-07-17T18:26:32Z","2017-07-17T18:55:10Z"
"","4596","Issue #4394: increase coverage of pitest-checkstyle-api-filters profile to 90%","Issue #4394  [pitest-checkstyle-api-filters profile before changes](https://nimfadora.github.io/issue4394.html)  increased mutation threshold for pitest-checkstyle-api-filters profile by 6% current threshold: 90% execution time: 18:23 min","closed","","Nimfadora","2017-07-03T21:30:58Z","2017-07-07T12:48:06Z"
"","4704","Issue #4394: increase coverage of pitest-checkstyle-api profile to 96%","Issue #4394  [pitest-checkstyle-api profile before changes](https://nimfadora.github.io/pr/com.puppycrawl.tools.checkstyle.api/index.html)  increased mutation threshold for pitest-checkstyle-api-filters profile by 8% current threshold: 96% execution time: 9:51 min","closed","","Nimfadora","2017-07-12T14:33:03Z","2017-07-14T23:29:34Z"
"","4740","Issue #4394: increase coverage of pitest-checkstyle-api profile to 100%","Issue #4394  [pitest-checkstyle-api profile before changes](https://nimfadora.github.io/issue4394.html)  increased mutation threshold for pitest-checkstyle-api profile by 4% current threshold: 100% execution time: 3:31 min  one mutation left: [I have no idea how to test it](https://nimfadora.github.io/pr/com.puppycrawl.tools.checkstyle.api/FileText.java.html#org.pitest.mutationtest.report.html.SourceFile@76e17762_175)","closed","","Nimfadora","2017-07-17T16:45:26Z","2017-07-17T17:45:50Z"
"","4418","Issue #4393: Walk and parse ASTs only when needed","Issue #4393 : ASTs to be generated and walked only when there are corresponding type of checks. No parsing if no checks are specified","closed","","voidfist","2017-06-04T09:01:09Z","2017-06-07T13:02:12Z"
"","4643","Issue #4390: Modified error handling for javadoc parsing","Issue #4390: Modified error handling of errors that are to be generated when missing HTML tags are encountered while parsing javadoc","closed","","voidfist","2017-07-07T03:36:29Z","2017-08-21T13:15:40Z"
"","4403","Issue #4387: added sevntu no error test","Issue #4387   When I tested this locally I didn't get any exception and I'm not sure why. Wercker is the same.","closed","","rnveach","2017-06-01T01:22:30Z","2017-06-03T04:41:25Z"
"","4423","Issue #4385: Custom javadoc tags shall not have a DESCRIPTION node","Issue #4385: Custom javadoc tags shall not have a DESCRIPTION node","closed","","voidfist","2017-06-06T09:40:45Z","2017-07-06T00:32:45Z"
"","4486","Issue 4381: Refactor Javadoc AST Tests","Issue #4381","closed","","voidfist","2017-06-22T00:15:59Z","2017-06-25T14:47:21Z"
"","4544","Issue #4373: add Spotbugs to the project","Issue #4373  Spotbugs was added to the project. All checks that are excluded in findbugs are also excluded here. Generating report has shown no bugs.","closed","","Nimfadora","2017-06-27T17:11:17Z","2017-06-30T03:49:23Z"
"","4388","Issue #4367: Add pitest non-checks code profiles","Issue #4367   Add pitest-checkstyle-common profile for classes in com.puppycrawl.tools.checkstyle.* ,  com.puppycrawl.tools.checkstyle.ant.* , com.puppycrawl.tools.checkstyle.doclets.* packages, except Main class and classes connected with tree. execution time 10:05 min threshold: 78  Add pitest-checkstyle-main profile for Main class. Contains many tests, executes better in separate profile. execution time 06:25 min threshold: 93  Add pitest-checkstyle-tree-walker profile for classes from the base package connected with tree. Contains many tests on TreeWalker, executes better in separate profile. execution time:09:57 min threshold: 83  api, filters, utils and gui profiles listed below contains many classes, it would be better to cover them separately and maybe unite in the end.  Add pitest-checkstyle-api profile for com.puppycrawl.tools.checkstyle.api.* package. execution time: 08:04 min threshold: 46  Add pitest-checkstyle-filters profile for com.puppycrawl.tools.checkstyle.filefilters.* and com.puppycrawl.tools.checkstyle.filters.* packages. United filters packages in one profile. execution time: 03:10 min threshold: 95  Add pitest-checkstyle-utils for com.puppycrawl.tools.checkstyle.utils.* package; execution time: 03:17 min threshold: 40  add pitest-checkstyle-gui profile for com.puppycrawl.tools.checkstyle.gui.* package; execution time: 01:48 min threshold: 30  com.puppycrawl.tools.checkstyle.grammars was skipped as it doesn't contain any classes (only interface).","closed","","Nimfadora","2017-05-29T08:16:04Z","2017-06-01T20:32:37Z"
"","4699","Issue #4365: Removed getConfigPath","Issue #4365","closed","","djydewang","2017-07-11T14:10:02Z","2017-07-11T17:23:05Z"
"","4772","Issue #4363: add vavr library to our regression testing","Issue #4363","closed","","romani","2017-07-19T23:54:01Z","2017-07-20T00:16:30Z"
"","4371","Issue #4350: expanded exception violation when haltOnException is off","Issue #4350  Expanded violation message to show full stack trace. `XMLLogger` was changed to accommodate retaining newlines in stacktrace when put to XML file. Depending on parser, if new lines aren't converted then can be changed to single spaces which will distort the stacktrace.  I noticed some issues when deciding how to code this fix.  1) [`BaseCheckTestSupport` counts lines based on the number of errors.](https://github.com/checkstyle/checkstyle/blob/2f3f4b76f04f0b5071abcaed54648a49a0db3160/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java#L244) So test can only verify the first line of the exception, and not the full trace.  2) [`AuditListener.addException` isn't called anywhere except in test code.](https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditListener.java#L73) I was thinking of making use of it for this fix, but I don't think `patch-diff-report-util` currently supports the special tag this method produces.","closed","","rnveach","2017-05-25T01:34:52Z","2017-05-26T14:47:59Z"
"","4505","Issue #4342: suppressed production code violations as they should not be fixed","Issue #4342   suppressed issues as the don't seem to be ones that should be fixed.  `AccessorMethodGeneration` as it stated [here](https://github.com/checkstyle/checkstyle/issues/4342#issuecomment-310384718) `UnusedPrivateMethod` as it generates false-positives on private methods called within a file  [pmd report](https://nimfadora.github.io/pmd-pr/pmd4342.html)","closed","","Nimfadora","2017-06-23T14:04:28Z","2017-06-23T19:38:29Z"
"","4537","Issue #4342: fix pmd dependencies which prevented it from using the latest version","Issue #4342   ``` [INFO] ------------------------------------------------------------------------ [INFO] Building checkstyle 8.0-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO]  [INFO] --- maven-pmd-plugin:3.8:pmd (default-cli) @ checkstyle --- Downloading: https://oss.sonatype.org/content/repositories/codehaus-snapshots/net/sourceforge/pmd/pmd-java/5.7.0/pmd-java-5.7.0.pom Downloading: http://sevntu-checkstyle.github.io/sevntu.checkstyle/maven2/net/sourceforge/pmd/pmd-java/5.7.0/pmd-java-5.7.0.pom Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-java/5.7.0/pmd-java-5.7.0.pom Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-java/5.7.0/pmd-java-5.7.0.pom (7 KB at 18.1 KB/sec) Downloading: https://oss.sonatype.org/content/repositories/codehaus-snapshots/net/sourceforge/pmd/pmd/5.7.0/pmd-5.7.0.pom Downloading: http://sevntu-checkstyle.github.io/sevntu.checkstyle/maven2/net/sourceforge/pmd/pmd/5.7.0/pmd-5.7.0.pom Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd/5.7.0/pmd-5.7.0.pom Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd/5.7.0/pmd-5.7.0.pom (41 KB at 184.9 KB/sec) Downloading: https://oss.sonatype.org/content/repositories/codehaus-snapshots/net/sourceforge/pmd/pmd-core/5.7.0/pmd-core-5.7.0.pom Downloading: http://sevntu-checkstyle.github.io/sevntu.checkstyle/maven2/net/sourceforge/pmd/pmd-core/5.7.0/pmd-core-5.7.0.pom Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-core/5.7.0/pmd-core-5.7.0.pom Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-core/5.7.0/pmd-core-5.7.0.pom (6 KB at 43.9 KB/sec) Downloading: https://oss.sonatype.org/content/repositories/codehaus-snapshots/net/sourceforge/pmd/pmd-javascript/5.7.0/pmd-javascript-5.7.0.pom Downloading: http://sevntu-checkstyle.github.io/sevntu.checkstyle/maven2/net/sourceforge/pmd/pmd-javascript/5.7.0/pmd-javascript-5.7.0.pom Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-javascript/5.7.0/pmd-javascript-5.7.0.pom Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-javascript/5.7.0/pmd-javascript-5.7.0.pom (5 KB at 15.6 KB/sec) Downloading: https://oss.sonatype.org/content/repositories/codehaus-snapshots/net/sourceforge/pmd/pmd-jsp/5.7.0/pmd-jsp-5.7.0.pom Downloading: http://sevntu-checkstyle.github.io/sevntu.checkstyle/maven2/net/sourceforge/pmd/pmd-jsp/5.7.0/pmd-jsp-5.7.0.pom Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-jsp/5.7.0/pmd-jsp-5.7.0.pom Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-jsp/5.7.0/pmd-jsp-5.7.0.pom (5 KB at 16.3 KB/sec) Downloading: https://oss.sonatype.org/content/repositories/codehaus-snapshots/net/sourceforge/pmd/pmd-java/5.7.0/pmd-java-5.7.0.jar Downloading: https://oss.sonatype.org/content/repositories/codehaus-snapshots/net/sourceforge/pmd/pmd-core/5.7.0/pmd-core-5.7.0.jar Downloading: https://oss.sonatype.org/content/repositories/codehaus-snapshots/net/sourceforge/pmd/pmd-javascript/5.7.0/pmd-javascript-5.7.0.jar Downloading: https://oss.sonatype.org/content/repositories/codehaus-snapshots/net/sourceforge/pmd/pmd-jsp/5.7.0/pmd-jsp-5.7.0.jar Downloading: http://sevntu-checkstyle.github.io/sevntu.checkstyle/maven2/net/sourceforge/pmd/pmd-java/5.7.0/pmd-java-5.7.0.jar Downloading: http://sevntu-checkstyle.github.io/sevntu.checkstyle/maven2/net/sourceforge/pmd/pmd-core/5.7.0/pmd-core-5.7.0.jar Downloading: http://sevntu-checkstyle.github.io/sevntu.checkstyle/maven2/net/sourceforge/pmd/pmd-jsp/5.7.0/pmd-jsp-5.7.0.jar Downloading: http://sevntu-checkstyle.github.io/sevntu.checkstyle/maven2/net/sourceforge/pmd/pmd-javascript/5.7.0/pmd-javascript-5.7.0.jar Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-java/5.7.0/pmd-java-5.7.0.jar Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-jsp/5.7.0/pmd-jsp-5.7.0.jar Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-core/5.7.0/pmd-core-5.7.0.jar Downloading: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-javascript/5.7.0/pmd-javascript-5.7.0.jar Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-javascript/5.7.0/pmd-javascript-5.7.0.jar (125 KB at 312.7 KB/sec) Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-jsp/5.7.0/pmd-jsp-5.7.0.jar (93 KB at 223.9 KB/sec) Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-java/5.7.0/pmd-java-5.7.0.jar (737 KB at 1500.0 KB/sec) Downloaded: http://repo.maven.apache.org/maven2/net/sourceforge/pmd/pmd-core/5.7.0/pmd-core-5.7.0.jar (701 KB at 1171.6 KB/sec) [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------  ```","closed","","Nimfadora","2017-06-27T08:38:55Z","2017-06-27T13:11:54Z"
"","4361","Issue #4341: Copy dtds schemas from resources dir to target/site/dtds during pre-site phase","Issue #4341   Used maven-resources-plugin to copy dtds schemes from resources folder to target/site/dtds.  Plugin goal doc: https://maven.apache.org/plugins/maven-resources-plugin/copy-resources-mojo.html  Maven phases doc: https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html  The plugin will automatically create dtds dir.   @romani  I think that pre-site phase is a good step to perform the copying.","closed","","MEZk","2017-05-17T19:11:44Z","2017-07-08T11:01:42Z"
"","4330","Issue #4329: execute git clone few times is case of failure","Issue #4329","closed","","romani","2017-05-03T19:09:54Z","2017-05-04T01:28:04Z"
"","4571","Issue #4316: put Xmx Xms to other travis build commands","Issue #4316","closed","","romani","2017-06-30T22:08:27Z","2017-06-30T23:27:49Z"
"","4558","Issue #4316: move argLine to properties to let it be overriden from CLI for Travis localized builds","Issue #4316","closed","","romani","2017-06-30T04:37:20Z","2017-06-30T21:16:59Z"
"","4533","Issue #4316: remove excludes from localized tests as they become stable","Issue #4316","closed","","romani","2017-06-27T00:25:31Z","2017-06-27T03:53:21Z"
"","4286","Issue #4250: Fix new TeamCity violations (part1)","Issue #4250","closed","","romani","2017-04-23T15:06:11Z","2017-04-23T20:27:30Z"
"","4221","Issue #4220: Modified AvoidNestedBlocksCheckTest.java and moved its input files to the avoidnestedblocks subdirectory","Issue #4220   This PR moves all inputs of AvoidNestedBlocksCheckTest of the blocks package to a new subdirectory 'avoidnestedblocks'.","closed","","subkrish","2017-04-16T10:49:08Z","2017-04-17T22:08:09Z"
"","4229","Issue #4220: Modified LeftCurlyCheckTest.java and moved its input files to leftcurly subdirectory","Issue #4220  This PR moves all inputs of LeftCurlyCheckTest of the blocks package to a new subdirectory 'leftcurly'.  Since a few tests were being shared by different tests, two new files were created.  Also `InputLeftCurlyAllInOneLine.java` shows up as deleted and a new file `InputLeftCurlyFirstLine.java` is created. This happens because the change in the name of the class of the file is relatively large to the contents present in the file. This has been done previously as well in PR #3964 with the file `InputGh47.java` when it was changed to `InputGenericWhitespaceList.java`","closed","","subkrish","2017-04-18T16:04:22Z","2017-04-20T07:26:38Z"
"","4227","Issue #4220: Modified EmptyCatchBlockCheckTest.java and moved its input files to the emptycatchblock subdirectory","Issue #4220  This PR moves all inputs of EmptyCatchBlockCheckTest of the blocks package to a new subdirectory 'emptycatchblock'.","closed","","subkrish","2017-04-18T14:51:14Z","2017-04-20T07:26:59Z"
"","4223","Issue #4220: Modified EmptyBlockCheckTest.java and moved its input files to the emptyblock subdirectory","Issue #4220  This PR moves all inputs of EmptyBlockCheckTest of the blocks package to a new subdirectory 'emptyblock'.","closed","","subkrish","2017-04-18T12:59:06Z","2017-04-24T15:22:50Z"
"","4218","Issue #4207: False positive for lambda parameters from RequireThis","Issue #4207 : Fixed false positives from RequireThis for lambdas","closed","","voidfist","2017-04-14T21:31:06Z","2017-05-23T13:02:30Z"
"","4215","Issue #4165: Split and Organize Checkstyle inputs by Test for IllegalInstantiationCheckTet IllegalThrowsCheckTest IllegalTokenCheckTest","Issue #4165 Move test resource of IllegalInstantiationCheckTet, IllegalThrowsCheckTest , IllegalTokenCheckTest to new location","closed","","izishared","2017-04-14T10:25:15Z","2017-05-02T01:33:58Z"
"","4210","Issue #4165: Split and Organize Checkstyle inputs by Test for FinalLocalVariableCheckTest HiddenFieldCheckTest IllegalCatchCheckTest","Issue #4165 Move test resource of FinalLocalVariableCheckTest, HiddenFieldCheckTest, IllegalCatchCheckTest to new location","closed","","izishared","2017-04-13T10:39:12Z","2017-04-14T10:26:47Z"
"","4204","Issue #4165: Split and Organize Checkstyle inputs by Test for FallThroughCheckTest","Issue #4165 Move test resource of FallThroughCheckTest to new location","closed","","izishared","2017-04-12T13:23:11Z","2017-04-12T18:18:10Z"
"","4203","Issue #4165: Split and Organize Checkstyle inputs by Test for ExplicitInitializationCheckTest","Issue #4165 Move test resource of ExplicitInitializationCheckTest to new location","closed","","izishared","2017-04-12T12:45:08Z","2017-04-12T18:17:43Z"
"","4202","Issue #4165: Split and Organize Checkstyle inputs by Test for EqualsHashCodeCheckTest","Issue #4165 Move test resource of EqualsHashCodeCheckTest to new location","closed","","izishared","2017-04-12T11:54:42Z","2017-04-13T10:48:00Z"
"","4197","Issue #4165: Split and Organize Checkstyle inputs by Test for EqualsAvoidNullCheckTest","Issue #4165 Move test resource of EqualsAvoidNullCheckTest to new location","closed","","izishared","2017-04-12T09:14:59Z","2017-04-12T18:20:48Z"
"","4189","Issue #4165: Split and Organize Checkstyle inputs by Test for EmptyStatementCheckTest","Issue #4165 Move test resource of EmptyStatementCheckTest to new location","closed","","izishared","2017-04-11T13:07:24Z","2017-04-11T16:33:39Z"
"","4187","Issue #4165: Split and Organize Checkstyle inputs by Test for DefaultComesLastCheckTest","Issue #4165 Move test resource of DefaultComesLastCheckTest to new location","closed","","izishared","2017-04-11T10:33:24Z","2017-04-12T05:42:48Z"
"","4185","Issue #4165: Split and Organize Checkstyle inputs by Test for DeclarationOrderCheckTest","Issue #4165 Move test resource of DeclarationOrderCheckTest to new location","closed","","izishared","2017-04-11T08:02:22Z","2017-04-11T16:28:42Z"
"","4184","Issue #4165: Split and Organize Checkstyle inputs by Test for CovariantEqualsCheckTest","Issue #4165 Move test resource of CovariantEqualsCheckTest to new location","closed","","izishared","2017-04-11T07:28:38Z","2017-04-12T05:43:25Z"
"","4186","Issue #4159: EmptyBlock should process LITERAL_DEFAULT","Issue #4159 : LITERAL_DEFAULT is now processed by EmptyBlockCheck. Corresponding UTs added","closed","","voidfist","2017-04-11T09:49:33Z","2017-04-21T12:35:39Z"
"","4120","Issue #4119: fixed verifying tokens being referenced in configs","Issue #4119  No new issues created yet. Do we need issues for our config? I will update CS 8 wiki for these google issues","closed","","rnveach","2017-03-29T19:31:15Z","2017-04-12T20:04:12Z"
"","4108","Issue #4106: organized Checkstyle inputs by Test for AbstractClassName","Issue #4106","closed","","Nimfadora","2017-03-27T21:36:33Z","2017-04-05T12:03:56Z"
"","4372","Issue #4101: changed external resources in cache to have special prefix","Issue #4101  Edit: The new assertions in `CheckerTest` were because parts of the test wasn't failing with the changes made when they should have been.","closed","","rnveach","2017-05-25T01:50:00Z","2017-05-26T01:15:30Z"
"","4173","Issue #4058: RightCurly: false negative in ALONE and anonymous classes","Issue #4058 : Added LITERAL_NEW to the list of accepted tokens for RightCurlyCheck. RightCurlyCheck with option 'ALONE' for anonymous classes. Added UT","closed","discussion ongoing,","voidfist","2017-04-09T09:35:51Z","2018-06-18T13:03:38Z"
"","4482","Issue #4035: Rename STMT in BlockOption class to STATEMENT","Issue #4035   Renamed `STMT` in BlockOption class to `STATEMENT`. Also made subsequent changes in the EmptyBlockCheck, EmptyBlockCheckTest, config_blocks.xml, property_types.xml and messages.properties.","closed","","subkrish","2017-06-21T20:06:25Z","2017-06-23T18:22:44Z"
"","4247","Issue #4022: Removed shouldStartLine property for RightCurly","Issue #4022   _Some Test cases borrowed from a comment in #3775_  **Behavioral Changes:** 1. [This](https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAloneOrSingleline.java#L108), [This](https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAloneOrSingleline.java#L141), and [This (column '9')](https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAloneOrSingleline.java#L148) are now violations  2. [This](https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAloneOrSingleline.java#L69) is no more a violation  3. All the `MSG_KEY_LINE_NEW` in errors replaced by `MSG_KEY_LINE_ALONE`   **DO NOTE**:  Unlike to what was mentioned in the comments in Issue 3775, [this](https://github.com/ps-sp/checkstyle/blob/6279c97c0e2a30c69de320bd9e136099f925a422/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyWithoutShouldStartLine.java#L58) results in violation for both option=ALONE and option=ALONE_OR_SINGLELINE","closed","","voidfist","2017-04-21T08:19:38Z","2019-01-10T20:22:52Z"
"","4028","Issue #3941: DetailAst class unclear logic in addChilld method","Issue #3941: DetailAst class unclear logic in addChilld method","closed","","GitToasterhub","2017-03-17T07:34:08Z","2017-03-17T07:39:02Z"
"","4153","Issue #3930: Modified NoWhitespaceBeforeCheckTest.java and moved its …","Issue #3930","closed","","subkrish","2017-04-04T05:41:19Z","2017-04-16T10:31:08Z"
"","4413","Issue #3907: Added period at the end of first sentence","Issue #3907","closed","","sagar-shah94","2017-06-03T10:34:44Z","2017-06-12T17:13:28Z"
"","4134","Issue #3891: Split and Organize Checkstyle inputs by Test for ArrayTrailingComma","Issue #3891: Split and Organize Checkstyle inputs by Test for ArrayTrailingComma","closed","","izishared","2017-03-31T12:13:57Z","2017-03-31T13:24:27Z"
"","4145","Issue #3891: Split and Organize Checkstyle inputs by Test for coding package","Issue #3891 Move test resource of coding package to new location","closed","","izishared","2017-04-02T18:09:19Z","2017-04-12T19:07:02Z"
"","4140","Issue #3891: Split and Organize Checkstyle inputs by Test for AvoidInlineConditionals","Issue #3891 Move test resource of AvoidInlineConditionals to new location","closed","","izishared","2017-04-01T13:20:01Z","2017-04-06T08:03:56Z"
"","4135","Issue #3891: Split and Organize Checkstyle inputs by Test for ArrayTrailingComma","Issue #3891 Move test resource of ArrayTrailingCommaCheckTest to new location","closed","","izishared","2017-03-31T13:55:15Z","2017-03-31T17:37:06Z"
"","4132","Issue #3891: Split and Organize Checkstyle inputs by Test for ArrayTrailingComma","Issue #3891 Move test resource of ArrayTrailingCommaCheckTest to new location","closed","","izishared","2017-03-31T10:04:55Z","2017-03-31T12:16:31Z"
"","4053","Issue #3888: update google java style coverage to 20170228 state","Issue #3888","closed","","romani","2017-03-19T02:16:19Z","2017-03-20T13:47:47Z"
"","4787","Issue #3810: Replaced singletonTag in nested html rules in javadoc grammar with singletonElement","Issue #3810 : Replaced singletonTag in nested html rules in javadoc grammar with singletonElement  **[antlr diff report](https://3810-antlrdiff.netlify.com/)**","closed","","voidfist","2017-07-20T20:39:26Z","2017-08-21T13:24:20Z"
"","4462","Issue #3796: No unnecessary text shall be present in Javadoc ASTs","Issue #3796: No unnecessary text shall be present in Javadoc ASTs","closed","","voidfist","2017-06-16T07:25:28Z","2017-06-21T13:09:01Z"
"","4376","Issue #3770: extending OverloadMethodsDeclarationOrderCheck","Issue #3770 extending OverloadMethodsDeclarationOrderCheck","closed","abandoned,","ilanKeshet","2017-05-26T09:26:04Z","2017-11-29T06:20:18Z"
"","4580","Issue #3752: Added tokens to SeparatorWrapCheck in google style","Issue #3752  According to https://github.com/checkstyle/checkstyle/issues/3752#issuecomment-310446430 ARRAY_DECLARATOR and ELLIPSIS updated to EOL in google style check config. Tests updated. Links to issues opened on google style added to comments.","closed","","kazachka","2017-07-01T19:17:26Z","2017-08-02T20:28:24Z"
"","4893","Issue #3671: removed maxLineLength in LeftCurlyCheck","Issue #3671  I will make required changes in 3rd parties when wercker fails.","closed","","rnveach","2017-08-03T19:05:22Z","2017-08-04T19:08:41Z"
"","4501","Issue #3666: Remove deprecated method 'getFilename' from FileContents class","Issue #3666   The method 'getFilename' has been removed as it was deprecated and the subsequent changes to FileContentsTest and findbugs-exclude.xml have been made.","closed","","subkrish","2017-06-23T03:11:40Z","2017-06-24T12:36:41Z"
"","4891","Issue #3660: removed checkstyle_packages.xml from main","Issue #3660","closed","","rnveach","2017-08-03T18:13:12Z","2017-08-05T13:55:33Z"
"","4570","Issue #3574: moved DetailAST log to AbstractCheck","Issue #3574","closed","","rnveach","2017-06-30T21:30:31Z","2017-07-06T05:59:43Z"
"","4887","Issue #3573: remove patch workaround for wercker","Issue #3573","closed","","romani","2017-08-03T07:19:38Z","2017-08-03T09:00:25Z"
"","4375","Issue #3566: adding and turning off omitIgnoredModules","Issue #3566","closed","","rnveach","2017-05-25T13:44:35Z","2017-06-19T22:31:18Z"
"","4306","Issue #3555: refactoring: CodeSelectorPModel do double copy of collection in c-tor","Issue #3555  What was made: Replaced creating temporary list and then creating unmodifiable view with `Collections.unmodifiableList` with assigning `line2position` field to new ArrayList and then adding all elements from origin list to field with `addAll()` method. All tests passed correctly/ During manual test case I checked that modifications of element's in original collection will not modify elements in copy as was supposed.","closed","","Kietzmann","2017-05-01T19:08:37Z","2017-07-06T13:52:08Z"
"","4466","Issue #3545: Remove LocalizedMessages class","Issue #3545","closed","","MEZk","2017-06-19T10:37:21Z","2017-07-08T11:01:53Z"
"","4023","Issue #3502: VariableDeclarationUsageDistance","Issue #3502: VariableDeclarationUsageDistance","closed","","GitToasterhub","2017-03-16T16:02:05Z","2017-04-03T19:29:08Z"
"","4982","Issue #3496: ReturnCount: enforce max=1 over checkstyle code","Issue #3496","closed","","romani","2017-08-22T01:55:43Z","2017-08-22T12:01:35Z"
"","4034","Issue #3491: DetailAst class unclear logic in addChilld method","Issue #3491: DetailAst class unclear logic in addChilld method","closed","","GitToasterhub","2017-03-17T17:06:35Z","2017-03-19T14:01:42Z"
"","4054","Issue #3491: DetailAst class unclear logic in addChild method","Issue #3491: DetailAst class unclear logic in addChild method","closed","","GitToasterhub","2017-03-19T08:45:45Z","2017-03-19T18:06:02Z"
"","4029","Issue #3491","Issue #3491","closed","","GitToasterhub","2017-03-17T07:44:53Z","2017-03-17T17:06:49Z"
"","4895","Issue #3440: Added new check for verifying that annotation located on same line with its target","Issue #3440   Added new check for verifying that annotation located on same line with its target.","closed","","kazachka","2017-08-03T20:41:48Z","2017-08-28T21:34:39Z"
"","4794","Issue #3435: introduce InterfaceMayBeFunctional violation, add annotations","Issue #3435  add @FunctionalInterface annotations to interfaces:  AuditEventFormatter BeforeExecutionFileFilter Configurable Contextualizable ExternalResourceHolder Filter IntFilter MatchSuppressor ModuleFactory PropertyResolver","closed","","Nimfadora","2017-07-21T22:07:31Z","2017-07-22T13:52:54Z"
"","4943","Issue #3332: Added HTML5 void-element 'embed'","Issue #3332: Added HTML void element 'embed'.","closed","","voidfist","2017-08-12T23:20:52Z","2017-08-21T21:30:46Z"
"","4148","Issue #3312: Added sourcepath property to Ant task","Issue #3312   Not sure if diff tool can handle regression issues for the ant task patches. Should I create another report? If so, where can I find an example of it?","closed","","soon","2017-04-03T11:27:00Z","2017-04-29T16:10:00Z"
"","4751","Issue #3311: Boolean indicator in AbstractJavadocCheck for decision regarding processing javadoc with unclosed HTML tags","Issue #3311 : Added method doesCheckAcceptJavadocWithUnclosedHtmlTag in AbstractJavadocCheck which can be overridden in extending checks which are not to process javadoc with unclosed HTML tags  **``** _I have added another method called `isUnlcosedTag` in `DetailNode` class. `hasUnclosedTag` would return true whenever the javadoc node or any of its successors at any level is an unclosed HTML tag. `isUnclosedTag` would only return true when the javadoc node itself is an unclosed html tag. This would help user to exactly identify and process a javadoc node which is an unclosed tag in the way he/she wants to. And if a user wants to skip an entire portion of the tree having unclosed tags with in it then he/she can just use `hasUnclosedTag` rather than `isUnclosedTag`._  _If it is undesirable to have `isUnclosedTag` then it can be removed._ **``**  Also, since this is not a grammar change I do not think ANTLR regression would be necessary. I think that regression with a javadoc check and a non-javadoc check should suffice, please let me know if you agree.","closed","","voidfist","2017-07-18T02:27:10Z","2017-09-08T12:40:03Z"
"","4720","Issue #3301: update suppress comment","Issue #3301","closed","","Nimfadora","2017-07-15T12:58:24Z","2017-07-15T12:58:57Z"
"","4317","Issue #3219: added errors of javadoc tree parsing printing","Issue #3219  Added javadoc tree parsing errors printing.","closed","","kazachka","2017-05-02T19:47:30Z","2017-05-02T23:29:49Z"
"","4444","Issue #3218: Replace terms in WritingJavadocChecks wiki-page by terms from HTML specification","Issue #3218   Replaced the tags as specified in the issue.","closed","","subkrish","2017-06-09T15:54:10Z","2017-06-15T16:20:13Z"
"","4973","Issue #3201: Add new property to ignore inline array trailing comma","Issue #3201","closed","","kukreja-vikramaditya","2017-08-19T21:00:45Z","2017-08-29T12:49:17Z"
"","4217","Issue #3134: Add AnnotationDefHandler for custom annotations","Issue #3134","closed","","kukreja-vikramaditya","2017-04-14T20:24:07Z","2017-06-27T09:46:00Z"
"","4559","Issue #3110: Modified UTs to support localized messages from DefaultLogger","Issue #3110   This PR modifies the UTs in DefaultLoggerTest and CheckstyleAntTaskTest to support the localized messages set in DefaultLogger.","closed","","subkrish","2017-06-30T05:51:24Z","2017-06-30T22:10:51Z"
"","4526","Issue #3110: Modified DefaultLogger to remove hardcoded messages and to support i18n for the messages","Issue #3110   The hardcoded messages in DefaultLogger have been removed and i18n support for those messages have been added.  EDIT: More PRs to be added for other files.","closed","","subkrish","2017-06-26T06:09:49Z","2017-06-26T23:38:13Z"
"","4553","Issue #3110: Modified Main to remove hardcoded messages and to support i18n for the messages","Issue #3110  The hardcoded messages in Main have been removed and i18n support for those messages have been added.","closed","","subkrish","2017-06-29T00:26:13Z","2017-07-08T03:14:00Z"
"","4566","Issue #3110: fix localization for TranslationCheckTest and IllegalInstantiationCheckTest","Issue #3110","closed","","romani","2017-06-30T20:05:47Z","2017-06-30T20:26:28Z"
"","4109","Issue #3048: ParenPad now correctly evaluates precedence parens","Issue #3048","closed","","subkrish","2017-03-28T01:03:57Z","2017-04-16T06:59:16Z"
"","4067","Issue #3048: ParenPad now correctly evaluates precedence parens","Issue #3048","closed","","subkrish","2017-03-20T23:45:01Z","2017-03-25T17:09:07Z"
"","4858","Issue #2943: Add DiamondOperatorForVariableDefinitionCheck","Issue #2943   I do not understand this test failure: `PackageObjectFactoryTest.testNameToFullModuleNameMap:227 Invalid canonical name`.  Any guidance on how to solve this?","closed","","AustinShalit","2017-07-30T20:56:36Z","2017-08-01T15:20:47Z"
"","4155","Issue #2899: Explanations now present to differentiate between try-with-resources tokens in Javadoc","Issue #2899","closed","","subkrish","2017-04-04T13:09:28Z","2017-04-12T12:04:27Z"
"","4154","Issue #2899: Added explanations for try-with-resources tokens in Javadoc","Issue #2899","closed","","subkrish","2017-04-04T12:07:17Z","2017-04-04T12:13:57Z"
"","4471","Issue #2883: Remove the 'cache' field and 'setCacheFile' method from TreeWalker for Checkstyle 8.0","Issue #2883   Removed the 'cache' field and 'setCacheField' method from TreeWalker because its deprecated and now used by the maven-checkstyle-plugin.","closed","","subkrish","2017-06-19T21:44:53Z","2017-06-24T16:50:32Z"
"","4318","Implement Javadoc tag parsing to accurately parse Javadoc tags that span multiple lines","Issue #2840: Extract implementations of the block and inline parsers and fix the inline tag parser to properly parse inline tags that span multiple lines. Put tests on both.","closed","","nanaze","2017-05-02T21:25:27Z","2017-05-03T20:54:13Z"
"","4331","Issue #2840: Implement Javadoc tag parsing to accurately parse Javadoc tags that span multiple lines","Issue #2840: Extract implementations of the block and inline parsers and fix the inline tag parser to properly parse inline tags that span multiple lines. Put tests on both","closed","incomplete,","nanaze","2017-05-03T20:51:39Z","2017-06-27T01:12:44Z"
"","4950","Issue #2600: add eclipse violation check as a maven plugin","Issue #2600  The eclipse verification can be executed via `mvn compile exec:exec -P eclipse`. I did not include it into any maven phase to avoid build failure for now.   The full list of available inspections you can find [here](https://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftask-using_batch_compiler.htm). Please, review them and tell what to enable and what to suppress. For now, I've enabled all of them.  Report can be found in the `target/eclipse` folder.","closed","","Nimfadora","2017-08-15T21:53:01Z","2017-08-27T05:20:18Z"
"","4181","Issue #2399: New option 'onlyObjectReferences' for ExplicitInitializationCheck","Issue #2399","closed","","subkrish","2017-04-10T15:26:31Z","2017-04-30T23:51:37Z"
"","4166","Issue #2186: Exception message extended to provide more information on incorrect parent","Issue #2186","closed","","subkrish","2017-04-06T12:08:48Z","2017-04-11T04:53:24Z"
"","4287","Issue #1571: Move all dtd schemas to sourceforge site","Issue #1571  @romani  Please, upload all dtd schemas to SourceForge and I will restart CIs build to fix failing UTs. I'll make a separate PR or commit to use http://www.mojohaus.org/xml-maven-plugin/examples/catalog.html .","closed","","MEZk","2017-04-23T17:19:23Z","2017-07-08T11:00:53Z"
"","4638","Inconsistent handling of method arguments when they are lambdas","Indentation checks treat differently method arguments which are lambdas compared to function calls / literals / local variables / fields:  For example, if I modify the unit tests `InputIndentationLambda2` like this: ```java public class InputIndentationLambda2 { //indent:0 exp:0     public int literal() { //indent:4 exp:4         return test(1, //indent:8 exp:8        2); //indent:7 exp:7     } //indent:4 exp:4      public int localVariable() { //indent:4 exp:4         int i = 0; //indent:8 exp:8         return test(i, //indent:8 exp:8        i); //indent:7 exp:7     } //indent:4 exp:4      private int i = 0; //indent:4 exp:4     public int field() { //indent:4 exp:4         return test(i, //indent:8 exp:8        i); //indent:7 exp:7     } //indent:4 exp:4      public int method() { //indent:4 exp:4         return test(f(), //indent:8 exp:8        f()); //indent:7 exp:7     } //indent:4 exp:4      private int f() { //indent:4 exp:4         return 0; //indent:8 exp:8     } //indent:4 exp:4      private int test(int f1, int f2) { //indent:4 exp:4         return f2; //indent:8 exp:8     } //indent:4 exp:4      public Consumer lambda() { //indent:4 exp:4         return params((x) -> print(x * 1), //indent:8 exp:8                       (x) -> print(x * 2)); //indent:22 exp:22     } //indent:4 exp:4     ... // rest of the existing code ```  The `IndentationCheck` fails with:  ```java java.lang.Error: Error was thrown while processing /home/jnrouvignac/git/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationLambda2.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:299) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213) 	at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:296) 	at com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest.verify(IndentationCheckTest.java:163) 	at com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest.verifyWarns(IndentationCheckTest.java:153) 	at com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest.testLambda2(IndentationCheckTest.java:1700) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) Caused by: java.lang.AssertionError: found a warning when none was expected for #0 at line 41 with message 'lambda arguments' has incorrect indentation level 22, expected level should be one of the following: 12, 16. 	at org.junit.Assert.fail(Assert.java:88) 	at com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest$IndentAudit.addError(IndentationCheckTest.java:1885) 	at com.puppycrawl.tools.checkstyle.Checker.fireErrors(Checker.java:388) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:287) 	... 28 more ```  I find it surprising: 1. It complains about the indentation for `lambda()`, but not for any of `literal()`, `localVariable()`, `field()` or `method()`. This is very inconsistent. It should complain for all or for none. 1. The suggested indentation for lambdas is wrong, 22 is totally fine in my opinion.  I can try to fix this issue, but I would like to know which indentation would be acceptable to you. I would be fine if checkstyle ignored arguments which are lambdas, just like the other arguments.","closed","indentation,","JnRouvignac","2017-07-06T14:07:06Z","2020-10-04T19:09:34Z"
"","4081","Wrong German translation of declaration.order.access in messages_de.properties","In the file src/main/resources/com/puppycrawl/tools/checkstyle/checks/coding/messages_de.properties, the value of property ""declaration.order.access"" changed to ""Es wird auf eine Variable zugegriffen, bevor diese deklariert wurde."" This seems to have happened in commit 165fb0b3135a01875b9adf6838e108aa837bcc04, before that it was correctly ""Fehlerhafte Deklarationsreihenfolge für diesen Scope.""  If there is a situation where the new value describes the warning correctly, the property should be split into two. Otherwise I suggest to revert to the old value.","closed","miscellaneous,","sirdis","2017-03-22T10:09:00Z","2017-03-23T18:14:16Z"
"","4821","config: remove gist patch for contribution/checkstyle-tester","In PR for [4714](https://github.com/checkstyle/checkstyle/issues/4714), `wercker.yml` was patched to pass checks. Project [chekstyle-tester](https://github.com/checkstyle/contribution/tree/master/checkstyle-tester) was updated recently, `SuppressionCommentFilter` and `SuppressWithNearbyCommentFilter` modules were moved to `TreeWalker` and there is no need to patch [checks-nonjavadoc-error.xml](https://github.com/checkstyle/contribution/blob/master/checkstyle-tester/checks-nonjavadoc-error.xml) now. This PR removes redundant commands from `wecker.yml` responsible for patching `checks-nonjavadoc-error.xml`","closed","","timurt","2017-07-25T12:27:30Z","2017-07-25T14:10:18Z"
"","4888","config: remove gist patch for contribution/checkstyle-tester","In PR for [3573](https://github.com/checkstyle/checkstyle/issues/3573), `wercker.yml` was patched to pass checks. Project [chekstyle-tester](https://github.com/checkstyle/contribution/tree/master/checkstyle-tester) was updated recently, `FileContentsHolder` module was removed and there is no need to patch [checks-nonjavadoc-error.xml](https://github.com/checkstyle/contribution/blob/master/checkstyle-tester/checks-nonjavadoc-error.xml) now. This PR removes redundant commands from `wecker.yml` responsible for patching `checks-nonjavadoc-error.xml`","closed","","timurt","2017-08-03T07:27:54Z","2017-08-03T09:01:11Z"
"","4104","pitest: skip Uts execution as pitest do this for wihtou mutation mode","if any UT failing , pitest print message like "" ........... did not pass without mutation.""  So we can skip UTs execution before pitest, as it will do thsi for no mutation mode.","closed","miscellaneous,","romani","2017-03-27T18:15:21Z","2017-04-05T12:02:18Z"
"","4405","CLI Javadoc tree printing does not check placement of Javadoc","Identified when talking about it at https://github.com/checkstyle/contribution/issues/237#issuecomment-305376062 and considered an issue from romani's comments at https://github.com/checkstyle/checkstyle/issues/4390#issuecomment-305358371 .  ```` $ cat TestClass.java public class TestClass {     void method() { /**","closed","javadoc,","rnveach","2017-06-01T12:44:04Z","2017-07-05T19:26:45Z"
"","4539","MethodCountCheck: class counts include anonymous methods","Identified in regression at https://github.com/checkstyle/checkstyle/pull/4535 :  ```` $ cat TestClass.java public class TestClass {     void method() {         Runnable r = (new Runnable() {                 public void run() {                 }             });     } }  $ cat TestConfig.xml                            $ java -jar checkstyle-7.8.2-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:1: Total number of methods is 2 (max allowed is 1). [MethodCount] Audit done. Checkstyle ends with 1 errors. ````  Method count is set to allow a max of 1 method per class. Checkstyle incorrectly reports that the class `TestClass` has 2 methods. It is incorrectly including the anonymous method in the counting of `TestClass`. I don't think it should be included, as it is a separate class from `TestClass`. I am expecting no violations on this code.  **Attention**: after fix, counts are expected to be lowered, so we should change our checkstyle_checks.xml","closed","approved,","rnveach","2017-06-27T13:49:40Z","2017-08-01T13:07:45Z"
"","4540","MethodCountCheck: wrong counting with nested interface definition","Identified in regression at #4535 after PR was merged :  ```` $ cat TestClass.java public class TestClass {     void method1() {     }      private @interface Generates {}      void method2() {     } }  $ cat TestConfig.xml                            $ java -jar checkstyle-7.8.2-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:1: Total number of methods is 2 (max allowed is 1). [MethodCount] Audit done. Checkstyle ends with 1 errors. ````  As shown previous release had 1 violation. However running with latest master after fix now produce no violation.  ```` $ java -jar checkstyle-nightly-2017-06-27-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  This new behavior is incorrect and there should still be 1 violations. Fix should describe how counting was broken in previous PR as it went unnoticed by 2 reviewers.","closed","high demand,","rnveach","2017-06-27T13:59:45Z","2017-06-28T12:56:42Z"
"","4175","ParenPad: deep scan picks up excess tokens not set in config","Identified in https://github.com/checkstyle/checkstyle/pull/4109#issuecomment-291590567 ,  ParenPad is doing a deep scan for tokens to check at https://github.com/checkstyle/checkstyle/blob/e70836bb3dec30734f5fd51b63d4dc6cbe24679d/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java#L179-L198 . This caused tokens that were specifically not set in the configuration to be picked up for violations as seen in Issue #3048. It is weird to validate tokens outside of check's configuration and users won't be expecting this. It even caused no differences to appear in regression reports for default module even when new token was added to the check. We only saw differences when running on very limited/specific tokens.  We need to remove this deep scan from the check. We then need to identify if there are any differences in the regression report. If there are any differences, those areas have to be identified and added as new tokens to the check. When all this is done, we expect no differences for default module in regression on final implementation. Differences on specific tokens is ok.","open","medium,","rnveach","2017-04-09T13:21:40Z","2021-05-09T07:06:30Z"
"","4871","minor: restored AllChecksTest.testAllModulesWithDefaultConfiguration","Identified at https://github.com/checkstyle/checkstyle/pull/4855#discussion_r130225340 , this PR restores `AllChecksTest.testAllModulesWithDefaultConfiguration` to its working, original condition.  Changes in `AbstractModuleTestSupport` were needed to support `TreeWalkerFilterModule`s. This is what prompted me to create Issue #4843 .  `package-info.java` was added to quiet error from `testAllModulesWithDefaultConfiguration` when `JavadocPackageCheck` was run.","closed","","rnveach","2017-07-31T20:37:11Z","2017-08-01T13:27:17Z"
"","4856","RequireThisCheck: NPE on method from base class with validateOnlyOverlapping off","Identified at https://github.com/checkstyle/checkstyle/pull/4853#issuecomment-318850557 and taken from https://raw.githubusercontent.com/sevntu-checkstyle/sevntu.checkstyle/7003e1e7ba87e50fd5654805ee6c4288544d8a97/sevntu-checks/src/test/resources/com/github/sevntu/checkstyle/checks/coding/InputAvoidModifiersForTypesCheck.java ,  ```` $ cat TestClass.java package com.github.sevntu.checkstyle.checks.coding;  import java.util.logging.Logger;  public class InputAvoidModifiersForTypesCheck {     public class Check {         private Logger log1 = Logger.getLogger(getClass().getName());     } }  $ cat TestConfig.xml                           $ java -jar checkstyle-8.1-all.jar -c TestConfig.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:508)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:431)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:209) Caused by: java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.getMethodWithoutThis(RequireThisCheck.java:801)     at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.processIdent(RequireThisCheck.java:262)     at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.visitToken(RequireThisCheck.java:231)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:419)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:556)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:359)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:205)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)     ... 4 more Checkstyle ends with 1 errors. ````","closed","approved,","rnveach","2017-07-29T18:54:58Z","2017-08-01T11:59:43Z"
"","4845","Test inputs should be completely standalone.","Identified at https://github.com/checkstyle/checkstyle/pull/4844#issuecomment-318740057 ,  Inputs should be completely standalone and not rely on Checkstyle production code or test code. It creates an usual coupling and requires changes in completely unrelated tests.  Most inputs that have references to checkstyle code: https://github.com/search?utf8=%E2%9C%93&q=path%3Asrc%2Ftest%2Fresources+filename%3AInput*.java+repo%3Acheckstyle%2Fcheckstyle+%22import+com.puppycrawl.tools.checkstyle%22&type= There could be more as that was just a general search.  Imports have to be examined why they are used, and how best to remove them and still keep the tests original purpose intact.  List of impacted files was added at https://github.com/checkstyle/checkstyle/blob/fdc127580cbe901850b11bf14f12f7665bfc5110/config/checkstyle_input_suppressions.xml#L96 . Suppressions must be removed as files are worked on to show they are resolved for this issue.  Issue can only be marked completed when all suppressions are identified and handled appropriately.","open","gsoc first issue,","rnveach","2017-07-28T19:27:11Z","2022-04-10T16:56:06Z"
"","4384","Remove strong, wildcard suppressions in configuration","Identified at https://github.com/checkstyle/checkstyle/pull/4378#pullrequestreview-40668750 ,   We have very strong suppressions for the following files at https://github.com/checkstyle/checkstyle/blob/980f9f57b6431b47ff2117b94597c5399807cb2b/config/suppressions.xml#L56-L57 : `JavadocTokenTypes` and `ParseTreeBuilder`.  Suppressing everything means we do no simple validation like import ordering or curly positioning. We should change this to suppress specific checks and the ones that are easy should be fixed and removed.","closed","easy,","rnveach","2017-05-28T13:56:39Z","2017-08-31T00:22:43Z"
"","4381","Refactor Javadoc AST Tests","Identified at https://github.com/checkstyle/checkstyle/pull/4378 and similar to https://github.com/checkstyle/checkstyle/issues/2396 ,  We should drop creating custom trees in our tests for Javadocs and compare the output printing the tree, see proposal details at #2396 . We do similar comparisons for our Java grammar in `AstRegressionTest` with `verifyAst`.  We should do this conversion for `ParseTreeBuilder`.","closed","miscellaneous,","rnveach","2017-05-28T02:52:21Z","2017-06-25T14:46:20Z"
"","4377","addException in AuditListener is never called","Identified at https://github.com/checkstyle/checkstyle/pull/4371#issue-231216405 ,  [`AuditListener.addException` isn't called anywhere except in test code.](https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditListener.java#L73) Since it is an interface inside API package, it should have a use. Otherwise it's pointless to require users to make a implementation of it.  We need to think about if we want to keep this method and find a use for it in our main code, or just remove it completely.","open","approved,","rnveach","2017-05-26T14:47:41Z","2021-12-22T04:47:12Z"
"","4947","IllegalTypeCheck: split illegalClassNames for short names to prevent runtime modification","Identified at https://github.com/checkstyle/checkstyle/issues/4870#issuecomment-322240469 and shown during analysis at https://github.com/checkstyle/checkstyle/issues/4870#issuecomment-322245561 ,  We shouldn't be modifying user defined `illegalClassNames` during execution of the check. https://github.com/checkstyle/checkstyle/blob/78de3dc771531cfee50a60ff2cee80c46b83c43b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java#L352  We should only have to do this once in the setter. It is weird to do this during check execution and will cause issues with multi-threaded mode. Since this is the only thing `IMPORT` token does, it can be removed from this check.","closed","miscellaneous,","rnveach","2017-08-14T18:56:41Z","2017-08-26T23:31:52Z"
"","4956","AuditListeners can be in config, we should allow NO OUTPUT mode in our CLI to let user control output by config","identified at #4906 taken from https://github.com/checkstyle/checkstyle/issues/4742#issuecomment-320661209   TODO: - review xdoc content to be actual - make new option in CLI  - review why we need ` rootModule.addListener(listener);` method is AuditListener is module like Checks or Filters.","open","approved,","romani","2017-08-17T14:19:55Z","2017-08-17T14:19:55Z"
"","4735","RegexpHeader not detecting '\n\n' by regex properly","I'm trying to add a checkstyle config for how code files should begin in the codebase. The format I want can be described by a pattern in java - `^package .*\n\n.*`. However, this pattern doesn't seem to work when I use it with `RegexpHeader`.  Here are steps to reproduce - ``` $ cat ShouldFail.java package my.checkstyle.frustrations; /**  * Hello world!  *  */ public class ShouldFail { }  $ cat check-style.xml                                  ```  ``` $ java -jar checkstyle-8.0-all.jar -c check-style.xml ShouldFail.java Starting audit... Audit done. ```  Expected - ``` Starting audit... [ERROR] ShouldFail.java:1: Line does not match expected header line of '^package .*\n\n.*'. [RegexpHeader] Audit done. ```  Based on my regular expression, I expect checkstyle to pass for this - ``` package my.checkstyle.frustrations;  /**  * @author Vivek Rao  */ public class ShouldPass { } ```  It should also pass for this - ``` package my.checkstyle.frustrations;  import java.lang.instrument.ClassDefinition;  /**  * @author Vivek Rao  */ public class ShouldAlsoPass { }  ```   Here is a link to the [source code](https://github.com/vivekrao1985/regexpproblems).","closed","approved,","vivekrao1985","2017-07-16T15:31:40Z","2017-08-04T17:55:58Z"
"","4484","How to extend/override an existing configuration (sun, google)","I'd like to slightly modify the existing `sun_checks.xml` without copying it into my project.  This way I'd pick up improvements in newer version of checkstyle for Sun style (or Google as well), and only keep my modifications.  In particular, I'd like to set `NewLineAtEndOfFile` property `lineSeparator` to `lf` rather than use the system ending.  The code base uses UNIX endings regardless of developer platform.  Perhaps this is a limitation of the maven plugin, and not in checkstyle?  Trying to provide configuration of both `configLocation` and `checkstyleRules` (inline config in `pom.xml`) is not supported.  Any suggestions would be appreciated!","closed","","binkley","2017-06-21T22:05:19Z","2017-06-22T02:42:26Z"
"","4222","[Feature Request] - Baseline support","I'd like to add Checkstyle to and old legacy project however the warnings and errors are in the thousands.   It would be handy if I could let Checkstyle run once, generate a baseline file and then only get new errors / warnings reported from Checkstyle.","closed","","vanniktech","2017-04-16T11:34:10Z","2017-04-16T20:01:12Z"
"","4410","NoWhitespaceAfter:  do not allow whitespace after '@' sign","I wonder if anybody does that, but compiler allows it. ``` $ javac MyClass.java $ cat MyClass.java public class MyClass {  @ interface Violated{} // expect violation here  @ Violated // expect violation here public void method(){};  @Override public String toString(){ return """";}  }  ```  ``` $ cat config.xml                                  ```  ``` $ java -jar checkstyle-7.7-all.jar -c config.xml MyClass.java Starting audit... Audit done. ``` Expect: violations at lines 3 and 5","closed","new feature,","strkkk","2017-06-02T18:09:40Z","2017-09-16T12:38:57Z"
"","4966","AnnotationUseStyleCheck defaults: mismatch between documentation and code","I was about to open a PR for this change, but I see an issue must be filed first: ```diff diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java index 58b809217..4bd5a7e96 100644 --- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java +++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java @@ -69,8 +69,8 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;   * array comma preference a {@link TrailingArrayComma#IGNORE IGNORE} type   * is provided.  Set this through the {@code trailingArrayComma} property.   * - * By default the ElementStyle is set to EXPANDED, the TrailingArrayComma - * is set to NEVER, and the ClosingParens is set to ALWAYS. + * By default the ElementStyle is set to COMPACT_NO_ARRAY, the + * TrailingArrayComma is set to NEVER, and the ClosingParens is set to NEVER.   *   * According to the JLS, it is legal to include a trailing comma   * in arrays used in annotations but Sun's Java 5 & 6 compilers will not ```  Alternatively the code could be updated to reflect the documentation (but that'd be a backwards-incompatible change).","closed","miscellaneous,","Stephan202","2017-08-19T13:12:46Z","2017-08-20T14:09:18Z"
"","4634","check source file get NullPointerException","I use checkstyle to check my source file, I get an error.  ```    ``` My source file is ``` package unistar.cpq.comm;  public enum CommError implements CPQError {      INVALID_INPUT( CPQError.COMMOM_ERROR_START + 1 ), // 1     SERVER_ERROR( CPQError.COMMOM_ERROR_START + 2 ), // 2     UNSUPPORT_DATA_TYPE( CPQError.COMMOM_ERROR_START + 3 );// 3     private int errorCode;      private CommError( int errorCode )     {         this.errorCode = errorCode;      }      @Override     public int getErrorCode()     {         return errorCode;     }      @Override     public void setErrorCode( int errorCode )     {         this.errorCode = errorCode;      } } ``` is this a bug. my checkstyle version is 4.4","closed","","Wang-Jun-Chao","2017-07-06T06:22:18Z","2017-08-01T21:33:32Z"
"","4691","Issue #2840: UnusedImportsCheck - process javadoc tags that span lines","I resurrected @nanaze 's work on PR #4331  My changes: - Rebased on [a recent commit from master](https://github.com/checkstyle/checkstyle/commits/master) (currently, `1cc633b` because that was the most recent commit to pass all 10 CI checks) - Addressed all feedback made to the original PR (#4331) - Added integration tests for the cases described in #2840 and #359 - Amended @nanaze 's commit since he really did all the work","closed","","silentj","2017-07-10T13:53:05Z","2017-07-11T01:01:54Z"
"","4346","minor: Significantly improve grammar of variable.declaration.usage.distance.extend property","I got this error in some code and felt the need to fix the grammar :)","closed","","thatchej","2017-05-11T19:05:31Z","2017-05-11T21:57:54Z"
"","4480","maven-checkstyle-plugin doesn't work when bind maven lifecycle","I don't know why this happened。When I  execute “checkstyle:check“ ,it's ok。But when binding to the   maven lifecycle,it's doesn't work。Nothing to console. `                     org.apache.maven.plugins                     maven-checkstyle-plugin                     2.17                                              true                         ${basedir}/my_cs.xml                                                                                                checkstyle-check                                                              check                                                          validate                                                              error                                 true                                 true                                 true                                                                                            `","closed","","chlk1234","2017-06-21T13:11:06Z","2017-06-21T16:43:56Z"
"","4328","Pull #4328: moved variables inside if blocks to reduce execution time","I created a check to see if variables could be moved inside if statements (ignoring loops). Changes are the result of violations the check produced.  It did produce 3 other violations, 2 of which can't be moved and are a current limitation of the check. The variables are a save and the next statements change the values for which the variable is created for. So moving is not possible. The last violation wasn't moved because other similar variables were around it and I didn't want to break the style. ```` [ERROR] checkstyle\src\main\java\com\puppycrawl\tools\checkstyle\checks\coding\FinalLocalVariableCheck.java:259:17: Variable 'prevScopeUnitializedVariableData' can be moved inside the block to restrict runtime creation. [VariablePlacement] [ERROR] checkstyle\src\main\java\com\puppycrawl\tools\checkstyle\checks\coding\FinalLocalVariableCheck.java:283:9: Variable 'poppedScopeAssignedVariableData' can be moved inside the block to restrict runtime creation. [VariablePlacement] [ERROR] checkstyle\src\main\java\com\puppycrawl\tools\checkstyle\utils\JavadocUtils.java:228:13: Variable 'tagValue' can be moved inside the block to restrict runtime creation. [VariablePlacement] ````  I will provide regression and change the commit to reference this PR.","closed","miscellaneous,","rnveach","2017-05-03T13:28:29Z","2017-05-07T22:35:35Z"
"","4742","PackageObjectFactory can't instantiate AuditListeners","I am trying to upgrade my project and custom jars from Checkstyle 7.5.1 to 8.0 and I am getting an error that one of my custom `AuditListeners` can't be instantiated by name alone even though it's package is listed in the `checkstyle_packages.xml` file.  [The issue is the new code in `PackageObjectFactory` isn't looking for `AuditListeners`.](https://github.com/checkstyle/checkstyle/blob/b024af7dbc3f53863e17147692100381f4165073/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#L247-L264) [`isCheckstyleModule` is looking for everything else except `AuditListeners`.](https://github.com/checkstyle/checkstyle/blob/ddeb553834f10570089a033fa1ac1501b74ac358/src/main/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtils.java#L71-L78) It needs to be expanded to scan for them in 3rd party packages. `ModuleReflectionUtils` requires a `isAuditListener` method as part of `isCheckstyleModule`.  I wrote a custom listener and expanded what communications it receives to gather and print metrics on it's execution time and number of times areas were called to produce reports and examine slow down areas, like modules and javadoc. You have seen these reports before. FileSets and Checks cannot receive the detailed information that a listener can as it is the most global thing we have in Checkstyle.  This is my branch: https://github.com/rnveach/checkstyle/commits/more_audits  I also have a private listener which is basically an implementation of #3242 , where on auditFinished it examines the list of defined suppressions and prints violations on any that were not used. I have to use a listener as it is the only customizable area that is called at the end once all other modules, filters, and such are done.  Listener can be defined in the configuration.","closed","approved,","rnveach","2017-07-17T18:16:27Z","2017-08-18T00:18:16Z"
"","4916","Try to load class from all of packages as classpath scanning doesn't work in Eclipse runtime environment","I am the maintainer of the Checkstyle Eclipse plugin (http://eclipse-cs.sourceforge.net/). This is a followup to #4885,  indeed the error message was misleading.  After some in-depth debugging I came to the conclusion that the classpath scanning, introduced with #3607 just does not work in more complex classloading environments such as Eclipse - which is an OSGi runtime platform. Eclipse/OSGI requires all functionality to be provided as OSGi bundle/plugin. Classloading for each bundle is isolated by specialized bundle classloaders which encapsulate which classes a plugin/bundle ""sees"". This requires both Checkstyle core and potential Checkstyle extension to be provided as plugin/bundle.  The classpath scanning uses the [Classpath](https://google.github.io/guava/releases/17.0/api/docs/com/google/common/reflect/ClassPath.html) facility from Guava, where documentation clearly states that it only supports URLClassloaders. However OSGi bundle classloading is not based on URLClassloaders, thus the classpath scanning is not able to find any custom checks in Checkstyle extensions. Checkstyle core still works because of hardwired lookup tables maintained in code.  Would you be open to discuss the current approach and a potential return the the ""old brute-force"" extension classloading?","closed","new feature,","lkoe","2017-08-08T21:01:39Z","2017-12-20T15:47:47Z"
"","4250","Fix new TeamCity violations","https://teamcity.jetbrains.com/viewLog.html?buildId=1048700&tab=Inspection&buildTypeId=Checkstyle_IdeaInspectionsPullRequest  > Number of inspection errors 92 is 92 more than the provided threshold 0 Number of inspection warnings 192 is 192 more than the provided threshold 0  from logs: ``` [23:42:06] :	 [Step 2/2] Starting up IntelliJ IDEA 2017.1.2 (build IU-171.4249.21) ...done. ``` but latest available to download is 2017.1.1 . So this is just another experiment on TC with Intellij version.  We have repeatedly kept getting these errors in new PRs, so they must be valid and did another upgrade.  ```` Code maturity issues Deprecated member is still used (1)  Code style issues Replace Optional.isPresent() checks with functional-style expressions (3)  Data flow issues Scope of variable is too broad (Errors) (19)  Declaration redundancy Simplify stream API call chains (2)  Dependency issues Class with too many transitive dependents (Errors) (8)  General Annotator (2) Redundant suppression (Errors) (2)  Java 8 Anonymous type has shorter lambda alternative (2) Lambda can be replaced with method reference (Errors) (1) Loop can be collapsed with Stream API (Errors) (56) Replace with Map.forEach (1) Replace with single Map method (6)  JUnit issues Usage of obsolete 'junit.framework.Assert' method (Errors) (5)  Naming conventions Package naming convention (30)  Probable bugs Result of method call ignored (1) Unused assignment (Errors) (1)  RegExp Duplicate branch in alternation (59) Single character alternation (85) ````  Looking at a handfull, they seem to be valid and not false errors.","closed","miscellaneous,","rnveach","2017-04-21T13:26:03Z","2017-04-23T23:45:57Z"
"","4373","Use Spotbugs tool in our build process","https://github.com/spotbugs/spotbugs  we need to start to use it.","closed","miscellaneous,","romani","2017-05-25T02:26:50Z","2017-07-04T05:19:25Z"
"","4911","Issue #4901: Implement xpath query generator","https://github.com/checkstyle/checkstyle/issues/4901","closed","","timurt","2017-08-08T09:28:00Z","2017-08-23T17:30:28Z"
"","4854","Issue #4843: TreeWalkerFilter needs to be added to ModuleReflectionUtils","https://github.com/checkstyle/checkstyle/issues/4843","closed","","timurt","2017-07-29T13:31:41Z","2017-07-31T06:38:57Z"
"","4670","Issue #4641: Avoid usage of getLines method from FileText","https://github.com/checkstyle/checkstyle/issues/4641","closed","","timurt","2017-07-09T06:22:51Z","2017-07-10T20:02:42Z"
"","4923","Issue #4422: Implement XpathFilter","https://github.com/checkstyle/checkstyle/issues/4422","closed","","timurt","2017-08-09T20:43:49Z","2017-08-23T15:11:27Z"
"","4992","Issue #4421: Support suppression-xpath element in SuppressionLoader","https://github.com/checkstyle/checkstyle/issues/4421","closed","","timurt","2017-08-23T19:53:01Z","2017-09-28T02:48:46Z"
"","4828","Issue #4419: Add token type to LocalizedMessage","https://github.com/checkstyle/checkstyle/issues/4419","closed","","timurt","2017-07-26T08:15:49Z","2017-07-27T05:23:30Z"
"","4815","Issue #4369: Investigate how to map XPath expressions onto AST nodes","https://github.com/checkstyle/checkstyle/issues/4369","closed","","timurt","2017-07-24T13:02:16Z","2017-08-09T11:05:02Z"
"","4469","Issue #4369: Investigate how to map XPath expressions onto AST nodes","https://github.com/checkstyle/checkstyle/issues/4369","closed","","timurt","2017-06-19T16:27:54Z","2017-06-20T17:17:54Z"
"","4427","Issue #4364: Design a new format of suppression dtd schema to support XPath queries","https://github.com/checkstyle/checkstyle/issues/4364","closed","","timurt","2017-06-06T21:56:47Z","2017-06-08T21:57:15Z"
"","4282","Issue #4274: ImportControl: strategyOnMismatch property","https://github.com/checkstyle/checkstyle/issues/4274","closed","","timurt","2017-04-23T13:03:24Z","2017-05-28T23:22:40Z"
"","4032","Issue #4014: Split and Organize Checkstyle inputs by Test for MethodCount","https://github.com/checkstyle/checkstyle/issues/4014","closed","","timurt","2017-03-17T15:26:32Z","2017-03-19T19:40:11Z"
"","4851","Issue #3573: resovle design problem of FileContentsHolder","https://github.com/checkstyle/checkstyle/issues/3573","closed","","timurt","2017-07-29T10:50:22Z","2017-08-01T12:01:13Z"
"","4468","Issue #3573: Resolve design problem of FileContentsHolder (step 1)","https://github.com/checkstyle/checkstyle/issues/3573","closed","","timurt","2017-06-19T13:39:30Z","2017-07-14T00:22:50Z"
"","4269","Issue #3451: ImportControl: blacklist mode","https://github.com/checkstyle/checkstyle/issues/3451","closed","","timurt","2017-04-23T04:24:42Z","2017-05-14T02:33:29Z"
"","4064","Issue #3449: IllegalImport: new property illegalClasses to let blacklist certain classes import","https://github.com/checkstyle/checkstyle/issues/3449","closed","","timurt","2017-03-20T17:27:27Z","2017-05-01T21:05:11Z"
"","4025","Issue #3234: ClassDataAbstractionCoupling : Add a regex attribut","https://github.com/checkstyle/checkstyle/issues/3234","closed","","timurt","2017-03-16T16:52:37Z","2017-04-05T11:08:24Z"
"","4525","Issue #3034: FileText should not extends AbstractList","https://github.com/checkstyle/checkstyle/issues/3034","closed","","timurt","2017-06-25T20:27:20Z","2017-07-06T20:22:49Z"
"","4867","Remove deprecated class BaseCheckTestSupport","https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java  **BaseCheckTestSupport** is now deprecated and longer supported by any of the test classes.   It must be removed once `xwiki-commons` uses the new `Abstract...TestSupport` classes,  else wercker build will fail as it did in an attempt to remove the class in PR #4655  https://github.com/checkstyle/checkstyle/pull/4655/files#diff-b05f7d983d1f3ec19e57707a34da40b2 ``` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.6.1:testCompile (default-testCompile) on project xwiki-commons-tool-verification-resources: Compilation failure: Compilation failure: [ERROR] /pipeline/source/xwiki-commons/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/test/java/org/xwiki/tool/checkstyle/SinceFormatCheckTest.java:[28,39] cannot find symbol [ERROR] symbol:   class BaseCheckTestSupport [ERROR] location: package com.puppycrawl.tools.checkstyle ```","closed","miscellaneous,","subkrish","2017-07-31T08:02:37Z","2017-10-09T23:27:11Z"
"","4900","refactoring of DetailASTTest.testTreeStructure","https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java#L244  PMD and inspection suppressions should be resolved.  test method should be named `testTreeStructureOnAllInputFiles`  test method should become like: ``` getAllFiles(); FOR (file: allFiles) {   root = parse(file)   traverse(file, root, new CallBackOnNode() {    // content of checkNode method    }   ); } ```  Issue is taken from discussion at #4880 about extra suppression of PMD.","closed","miscellaneous,","romani","2017-08-04T18:23:13Z","2019-05-19T14:11:36Z"
"","4385","unknown tags should not have DESCRIPTION AST node","https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4#L911  > | CUSTOM_NAME (WS | NEWLINE | LEADING_ASTERISK)* description?  cause AST to be: ``` |--JAVADOC_INLINE_TAG -> {@preformat a < b} [4:16] |   |--JAVADOC_INLINE_TAG_START -> { [4:16] |   |--CUSTOM_NAME -> @preformat [4:17] |   |--WS ->   [4:27] |   |--DESCRIPTION -> a < b [4:28] |   |   `--TEXT -> a < b [4:28] |   `--JAVADOC_INLINE_TAG_END -> } [4:33] ```  CUSTOME_NAME - mean that we do not know this tag, we do not know his structure, so all after tagname should be TEXT.  We do parsing for known tags that have structure like 'reference description' only.","closed","javadoc,","romani","2017-05-28T23:32:55Z","2017-08-22T13:39:52Z"
"","4978","Rename Filters which aren't module filters to FilterElement","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java#L42-L43 It is slightly confusing to see `SuppressElement` implement the filter interface even though it isn't a direct filter. The true filter is [`SuppressionFilter`](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilter.java) which fully meets the requirements of a filter by extending `AutomaticBean`. `SuppressElement` is more a sub-child of `SuppressionFilter` and therefore is more a `FilterElement`.  The following classes should be renamed as `FilterElement`s too if they have that in their name. * CsvFilter * IntFilter * IntMatchFilter * IntRangeFilter * SuppressElement","closed","miscellaneous,","rnveach","2017-08-21T15:34:03Z","2019-02-18T23:02:16Z"
"","4979","Negate SuppressElement.accept","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java#L109-L137 There is some confusion about this code from https://github.com/checkstyle/checkstyle/pull/4923#discussion_r134260942 as in a new filter we are rewriting it as a positive.  I think we should do the same in SuppressElement.  I think `isLineAndColumnMatch` in `SuppressElement` is actually named incorrectly and should be named `isLineAndColumnNotMatch` as it returns `false` in https://github.com/checkstyle/checkstyle/blob/f244f7f1e2fe49d2fcda9cd5c901d751769f73e8/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressElementTest.java#L72 which is a match.  The final code in accept should be like `!isFileNameAndModuleMatching(event) || !isLineAndColumnMatch(event);`.  It is also weird that some filters are coded as a negative of others, but I am not sure if we can do something about them. * FilterSet is true until a SubFilter returns false https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/FilterSet.java#L85-L94 * CsvFilter is false until a IntFilter returns true https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/filters/CsvFilter.java#L90-L99  @romani Please review as these NOTs are starting to confuse me.","closed","miscellaneous,","rnveach","2017-08-21T16:58:22Z","2019-02-20T03:32:11Z"
"","4983","MissingDeprecated: refactor to use javadoc AST","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java use old approach to parse javadoc and creates false positives on code like - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.java#L72. ```     /**      * '{@literal @}deprecated' literal in {@literal @}deprecated Javadoc tag.      *      * Such Javadoc tag can have one argument - {@link #DESCRIPTION}      *      * Example:      * {@code @deprecated it is deprecated method}      * Tree:      * {@code      *   |--JAVADOC_TAG[3x0] : [@deprecated it is deprecated method]      *   |--DEPRECATED_LITERAL[3x0] : [@deprecated]      *   |--WS[3x11] : [ ]      *   |--DESCRIPTION[3x12] : [it is deprecated method]      *       |--TEXT[3x12] : [it is deprecated method]      * }      *      * @see      *       * Oracle Docs      * @see #JAVADOC_TAG      */     public static final int DEPRECATED_LITERAL = JavadocParser.DEPRECATED_LITERAL; ```  output: ``` [checkstyle] Running Checkstyle 8.8-SNAPSHOT on 969 files [checkstyle] [ERROR] .../api/JavadocTokenTypes.java:72: Duplicate @deprecated tag. [MissingDeprecated] [checkstyle] [ERROR] .../api/JavadocTokenTypes.java:84: Must include both @java.lang.Deprecated annotation and @deprecated Javadoc tag with description. [MissingDeprecated]  ```  TODO: re-implement Check it to use AST traverse approach, see example in JavadocSummaryCheck.  ### Migration Notes  `skipNoJavadoc` property is removed. Users should just remove it from config.  package-info.java will now be allowed to print violations. While this doesn't work for all JDK versions, it can be disabled using our filters.  Example Suppression:  ````                             ````","closed","breaking compatibility,","romani","2017-08-22T12:29:18Z","2019-08-05T11:12:16Z"
"","4681","review all suppressed IntellijIdea inspections with comment 'till ...'","https://github.com/checkstyle/checkstyle/blob/master/config/intellij-idea-inspections.xml  comments like: `Disabled till GSoC completion` `disabled till https://githu......` ... any other place where `... enabled=""false"" ...`  Sub issues: #3435 , #3301  TODO: 1) Active all suppressed by ""till"" inspections, share report with us to review and receive guidance on what to fix and how. 2) if no reason for suppression is provided , reason comment should be created (discussed with me). 3) all suppressed cases need to reviewed and fixed is reasonable (DO NOT blindly follow recommendations from inspection)","closed","miscellaneous,","romani","2017-07-09T16:50:48Z","2017-08-22T00:47:05Z"
"","4764","NeedBraces: False Positives for LITERAL_CASE and LITERAL_DEFAULT","https://checkstyle.org/config_blocks.html#NeedBraces  ``` /var/tmp $ javac NeedBracesSwitchTest.java  ```  ``` /var/tmp $ cat NeedBracesSwitchTest.java  public class NeedBracesSwitchTest {    // NeedBraces should not raise any violations for this code   // Violation raised by Checkstyle 6.4+    // Specific cases tested:   // Raises violation: 8.0, 7.8.2, 7.7, 7.6, 7.5.1, 6.19, 6.7, 6.4.1, 6.4   // No violations: 5.9, 6.1, 6.2, 6.3    public String aMethod(int val) {       switch (val) {               case 0: {                       return ""zero"";                   }               case 1: {                       return ""one"";                   }               default: {                       return ""non-binary"";                   }           }   }  } ```  ``` /var/tmp $ cat config.xml                                               ```  ``` /var/tmp $ java -jar checkstyle-8.0-all.jar -c config.xml NeedBracesSwitchTest.java  Starting audit... [ERROR] C:\Users\gavin.keighren\Desktop\NeedBracesSwitchTest.java:12: 'case' construct must use '{}'s. [NeedBraces] [ERROR] C:\Users\gavin.keighren\Desktop\NeedBracesSwitchTest.java:15: 'case' construct must use '{}'s. [NeedBraces] [ERROR] C:\Users\gavin.keighren\Desktop\NeedBracesSwitchTest.java:18: 'default' construct must use '{}'s. [NeedBraces] Audit done. Checkstyle ends with 3 errors. ```  ``` /var/tmp $ java -jar checkstyle-6.4-all.jar -c config.xml NeedBracesSwitchTest.java Starting audit... C:\Users\gavin.keighren\Desktop\NeedBracesSwitchTest.java:12: 'case' construct must use '{}'s. C:\Users\gavin.keighren\Desktop\NeedBracesSwitchTest.java:15: 'case' construct must use '{}'s. C:\Users\gavin.keighren\Desktop\NeedBracesSwitchTest.java:18: 'default' construct must use '{}'s. Audit done. ```  ``` /var/tmp $ java -jar checkstyle-6.3-all.jar -c config.xml NeedBracesSwitchTest.java Starting audit... Audit done. ```  ---------------  I expect no violations reported. Based on local testing, the incorrect violations started being reported with Checkstyle 6.4. Please see comment in java test file for list of locally tested versions and the results.","closed","approved,","gkeighren","2017-07-19T14:34:04Z","2019-06-20T12:32:49Z"
"","4350","Expand exception violation when haltOnException is off","http://rveach.no-ip.org/checkstyle/regression/reports/44/apache-ant/index.html#A4  > Checker 	Got an exception - java.lang.ArrayIndexOutOfBoundsException: 586  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L330   ```` $ cat TestClass.java package com.github.sevntu.checkstyle.checks.coding;  import java.util.HashMap;  public class InputMapIterationInForEachLoopExtends {     public static class TestMap extends HashMap {         public void test() {             for (Entry entry : entrySet()) {             }         }     } }  $ cat TestConfig.xml                                       $ java -jar checkstyle-7.7-sevntu-1.23.1-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:0: Got an exception - java.lang.NullPointerException: null [Checker] Audit done. Checkstyle ends with 1 errors. ````  Violation message isn't very clear on what the underlying issue is. We don't know what class got the exception or what method. Regression was done on multiple files and checks. It would be very hard to go through each one by hand.  We need to expand the exception violation to be more informative without having to re-run with the option off.  I'm not sure if display should be full 'caused by' stack trace, last non-util checkstyle line in stack trace, or ....  With `haltOnException` turned on, the output is: ```` $ java -jar checkstyle-7.7-sevntu-1.23.1-all.jar -c TestConfig.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:293)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:211)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: java.lang.NullPointerException     at com.github.sevntu.checkstyle.checks.coding.MapIterationInForEachLoopCheck.getKeySetOrEntrySetNode(MapIterationInForEachLoopCheck.java:406)     at com.github.sevntu.checkstyle.checks.coding.MapIterationInForEachLoopCheck.validate(MapIterationInForEachLoopCheck.java:332)     at com.github.sevntu.checkstyle.checks.coding.MapIterationInForEachLoopCheck.visitToken(MapIterationInForEachLoopCheck.java:307)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:363)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:500)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:305)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:180)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:314)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:284)     ... 4 more Checkstyle ends with 1 errors. ````","closed","easy,","rnveach","2017-05-12T19:04:51Z","2017-05-26T14:12:35Z"
"","4818","Look into possibly adding random junit ordering","http://randomjunit.sourceforge.net - Last Published: 2011-07-23 | Version: 1.0.3  This application helps to execute jUnit tests in a random order. Stack overflow: https://stackoverflow.com/questions/1444314/how-can-i-make-my-junit-tests-run-in-random-order  junit on execution order: https://github.com/junit-team/junit4/wiki/test-execution-order > JUnit does not specify the execution order of test method invocations ... methods were simply invoked in the order returned by the reflection API > a predictable failure is better than a random failure  I can attest that running junit in Eclipse without this annotation for me always runs the test methods in the same order for multiple runs. I can also attest that if there is a order issue with tests, they are harder to track down as you are not guaranteed the same order each run.","open","approved,","rnveach","2017-07-25T02:10:39Z","2017-07-29T03:14:42Z"
"","4748","Why we support Charset in configuration when we don't support UTF-8 files?","http://checkstyle.sourceforge.net/writingchecks.html#Limitations > Java code should be written with ASCII characters only, no UTF-8 support.  Why do we support charset in configuration, some we even set to UTF-8, when we don't even support UTF-8 in general? https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_non_main_files_checks.xml#L7 https://github.com/checkstyle/contribution/blob/master/checkstyle-tester/my_check.xml#L8","closed","approved,","rnveach","2017-07-17T20:36:47Z","2021-12-21T23:13:08Z"
"","4294","Google Style: Incorrect ParenPad warning","http://checkstyle.sourceforge.net/config_whitespace.html#ParenPad  The Google Java Style Guide requires a space after `;` [1], so the following warning is incorrect.  [1] https://google.github.io/styleguide/javaguide.html#s4.6.2-horizontal-whitespace  >After ,:; or the closing parenthesis ')' of a cast  ```java class T {   {     for (; ; ) {       //     }     try (InputStream is = null; ) { // violation       //     }   } } ```  ``` $ java -jar checkstyle-7.6-all.jar -c google_checks.xml T.java [WARN] T.java:6:32: ')' is preceded with whitespace. [ParenPad] ```","closed","approved,","cushon","2017-04-25T16:08:06Z","2017-09-08T12:37:55Z"
"","4074","NewlineAtEndOfFile=lf does not create error when file uses crlf","http://checkstyle.sourceforge.net/config_misc.html#NewlineAtEndOfFile  NewlineAtEndOfFile only checks the end of the file for bytes matching the EOL type , for the length of the EOL type.  As `lf` is only one byte, it does not detect that the previous byte `cr` before the `lf`. Therefore a `crlf` combination at EOF is accepted as a valid match for `lineSeparator=lf`  ``` $ cat TestConfig.xml                   $ echo -ne ""1\r\n"" > newline.txt   $ hd newline.txt  00000000  31 0d 0a                                          |1..| 00000003   $ java -jar checkstyle-7.7-all.jar -c TestConfig.xml newline.txt  Starting audit... Audit done. ```  Expected: violation as last line is ""0d0a"" but ""0a""(lf) is expected.","closed","approved,","jayvdb","2017-03-21T19:26:16Z","2020-01-30T22:43:04Z"
"","4169","Checkstyle ignores javadoc that placed over Annotation type elements","http://checkstyle.sourceforge.net/config_javadoc.html#AtclauseOrder http://checkstyle.sourceforge.net/config_javadoc.html#SummaryJavadoc  ``` /var/tmp $ javac TestClass.java  /var/tmp $ cat YOUR_FILE.java package test;  /**  * Text  * @version 1.0  * @author Tester Testerson  *  */ public @interface TestClass {   /**    * Text    * @version 1.0    * @author Tester Testerson    */   @TestClass(""foo"")   String value() default """"; }  /var/tmp $ cat TestConfig.xml                                                    /var/tmp $ java -jar checkstyle-7.6.1-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] /var/tmp/TestClass.java:3: Forbidden summary fragment. [SummaryJavadoc] [ERROR] /var/tmp/TestClass.java:6: At-clauses have to appear in the order '[@author, @version]'. [AtclauseOrder] Audit done. Checkstyle ends with 2 errors. ```` ---------------  There must be 4 errors from, but Checkstyle does not process second javadoc . I don't think AbstractJavadocCheck#isCorrectJavadocPosition supports this token.","closed","medium,","pbludov","2017-04-07T10:47:09Z","2017-12-02T00:08:04Z"
"","4981","ImportOrder with option=bottom should not allow non-static import after static import","http://checkstyle.sourceforge.net/config_imports.html#ImportOrder  http://checkstyle.sourceforge.net/property_types.html#importOrder  /var/tmp $ javac InputImportOrderStaticGroupOrderBottom_Negative.java  (no output)  /var/tmp $ cat -n InputImportOrderStaticGroupOrderBottom_Negative.java  ```java   1 package com.puppycrawl.tools.checkstyle.checks.imports.importorder;   2   3 import org.*;   4   5 import static java.lang.Math.PI;   6 import static org.antlr.v4.runtime.Recognizer.EOF;   7   8 import java.util.Set;   9  10 public class InputImportOrderStaticGroupOrderBottom_Negative  11 {  12  13 } ```  /var/tmp $ cat config.xml  ```xml                                               ```  /var/tmp $ java -jar checkstyle-X.XX-all.jar -c config.xml InputImportOrderStaticGroupOrderBottom_Negative.java  Gives no errors, but I would expect  ``` InputImportOrderStaticGroupOrderBottom_Negative.java:8: Wrong order for 'java.util.Set' import. ```","closed","approved,","julianhyde","2017-08-22T01:52:45Z","2017-12-25T20:49:57Z"
"","4284","ImportControl: unable to disallow static import","http://checkstyle.sourceforge.net/config_imports.html#ImportControl  I failed to disallow `import static junit.framework` by ImportConrol by our config.  Intelllij inspection detected bad import usage - https://github.com/checkstyle/checkstyle/pull/4283/commits/a02397e19508caa4e4048373daae226195fcb64e#diff-737a741c85550b2b090c4d3605764679  I will provide strict issue description a bit later.","closed","miscellaneous,","romani","2017-04-23T13:48:49Z","2017-11-09T14:42:33Z"
"","4358","DesignForExtension: Special comment","http://checkstyle.sourceforge.net/config_design.html#DesignForExtension  This is Test.java:  ``` public class Test{      /**      * The do it method.      */     public void doIt(){ 	System.out.println(""Do it"");     }      public void dontDoIt(){ 	System.out.println(""Don't do it"");          } } ``` This is checkstyle.xml; ```                                      ``` This is command line: `java -jar checkstyle-7.7-all.jar -c checkstyle.xml Test.java`  This is output:  > Starting audit... > [ERROR] /home/Temp/Test.java:11:5: Class 'Test' looks like designed for extension (can be subclassed), but the method 'dontDoIt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Test' final or making the method 'dontDoIt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension] > Audit done. > Checkstyle ends with 1 errors.  As you see the only thing that is necessary to do to suppress this check is to add **any** comment. I think that is not logical, because if javadoc checks are used then we will have any comment in any case. So there is no meaning in such check. I suggest that for suppressing this error some **special** comment must be in javadoc. For example `Method can be safely overridden` or some pattern must be set in properties of the module.","closed","new feature,","PashaTurok","2017-05-16T07:14:29Z","2021-01-24T15:14:37Z"
"","4639","UnnecessaryParentheses: Reject parentheses around single parameters in lambdas","http://checkstyle.sourceforge.net/config_coding.html#UnnecessaryParentheses  ``` $ cat config.xml                                               $ cat Test.java  class Test {     int foo(int y) {         MathOperation addition = (x) -> x + x;         return (y + 1);     }     interface MathOperation {       int operation(int a);    } }  $ java -jar checkstyle-7.6-all.jar -c config.xml Test.java Starting audit... [ERROR] Test.java:4:16: Unnecessary parentheses around return value. [UnnecessaryParentheses] Audit done. Checkstyle ends with 1 errors.  $ java -jar checkstyle-7.6-all.jar -t Test.java | grep -E ""\[3|4\:"" | sed ""s/^    |       //"" |--VARIABLE_DEF -> VARIABLE_DEF [3:8] |   |--MODIFIERS -> MODIFIERS [3:8] |   |--TYPE -> TYPE [3:8] |   |   `--IDENT -> MathOperation [3:8] |   |--IDENT -> addition [3:22] |   `--ASSIGN -> = [3:31] |       `--LAMBDA -> -> [3:37] |           |--LPAREN -> ( [3:33] |           |--PARAMETERS -> PARAMETERS [3:34] |           |   `--PARAMETER_DEF -> PARAMETER_DEF [3:34] |           |       |--MODIFIERS -> MODIFIERS [3:34] |           |       |--TYPE -> TYPE [3:34] |           |       `--IDENT -> x [3:34] |           |--RPAREN -> ) [3:35] |           `--EXPR -> EXPR [3:42] |               `--PLUS -> + [3:42] |                   |--IDENT -> x [3:40] |                   `--IDENT -> x [3:44] |--SEMI -> ; [3:45] |--LITERAL_RETURN -> return [4:8] |   |--EXPR -> EXPR [4:15] |   |   |--LPAREN -> ( [4:15] |   |   |--PLUS -> + [4:18] |   |   |   |--IDENT -> y [4:16] |   |   |   `--NUM_INT -> 1 [4:20] |   |   `--RPAREN -> ) [4:21] |   `--SEMI -> ; [4:22]  ```  we need to add support for new token `LAMBDA` violate `(x)`.","closed","new feature,","JnRouvignac","2017-07-06T14:11:44Z","2017-08-10T07:46:06Z"
"","4285","ExplicitInitialization: missed violation in Main.java","http://checkstyle.sourceforge.net/config_coding.html#ExplicitInitialization  test case - https://github.com/checkstyle/checkstyle/pull/4283/commits/a02397e19508caa4e4048373daae226195fcb64e#diff-9a559b3a3dac16c021e3a267a368c6bd  violation was reported by Intellij Inspectio, but not by our check.  I will reformat issue to required format a bit later.","closed","approved,","romani","2017-04-23T13:51:35Z","2017-04-27T19:27:03Z"
"","4984","DeclarationOrder: problem with forward references","http://checkstyle.sourceforge.net/config_coding.html#DeclarationOrder  > ATTENTION: the check skips class fields which have forward references from validation due to the fact that we have Checkstyle's limitations to clearly detect user intention of fields location and grouping.   There is forward reference at https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.java#L36 but it is not ignored.  after fix, this suppression should be removed - https://github.com/checkstyle/checkstyle/blob/master/config/suppressions.xml#L58","closed","miscellaneous,","romani","2017-08-22T12:31:57Z","2017-09-15T12:26:28Z"
"","4857","resolve IDEA inspection BooleanParameter in AbstractModuleTestSupport.createChecker","hot fix - https://github.com/checkstyle/checkstyle/commit/1b7f820e208e9aa3bfb8211b0db64735baf6d4b9  need to be resolved.  @Nimfadora , please take a look.","closed","miscellaneous,","romani","2017-07-30T03:42:43Z","2017-08-19T17:39:22Z"
"","4249","IndentationCheck: Wrong indention in chained methods","Hi, I have problems with indention level in chained methods.  /var/tmp $ javac CheckstyleExample.java  /var/tmp $ cat CheckstyleExample.java  ```java package example;  public class CheckstyleExample {   public void execute() {     StringBuilder sb = new StringBuilder();      sb.append(""aaa"")         .append(new StringBuilder()             .append(""1"")             .append(""2"")             .toString()         ); // this is reported as incorrect despite alignment to first chain   } } ```  /var/tmp $ cat config.xml  ```xml                                                                                                                ```  /var/tmp $ java -jar checkstyle-7.6.1-all.jar -c config.xml CheckstyleExample.java  ```bash Starting audit... [ERROR] /path/to/example/CheckstyleExample.java:12: 'method call rparen' have incorrect indentation level 8, expected level should be 6. [Indentation] Audit done. Checkstyle ends with 1 errors. ```  ---------------  As I've mentioned in a comment in example, the align indention of right `)` is reported as incorrect, but this examples are valid:  ```java package com.pearson.adminpanel;  public class CheckstyleExample {   public void execute() {     StringBuilder sb = new StringBuilder();      sb.append(""aaa"")         .append(new StringBuilder()             .append(""1"")             .append(""2"")             .toString());  // no violation, but this is not what I would like to achieve   } } ``` ```java package com.pearson.adminpanel;  public class CheckstyleExample {   public void execute() {     StringBuilder sb = new StringBuilder();      sb.append(""aaa"")         .append(new StringBuilder()             .append(""1"")             .append(""2"")             .toString()       );  // no violation, but looks strange in a middle of above indentions   } } ``` ```java package com.pearson.adminpanel;  public class CheckstyleExample {   public void execute() {     StringBuilder sb = new StringBuilder();      sb.append(""aaa"")         .append(new StringBuilder()             .append(""1"")             .append(""2"")             .toString()         ) // no violation, but only in a middle of chaining         .append(""bbb"");    } } ```  I think there could be an extra rule for fixing this problem.","closed","indentation,","karolhor","2017-04-21T13:17:50Z","2020-10-04T19:12:30Z"
"","4198","SuppressionCommentFilter not working properly in multi-thread environment","Hi there,  we are using the `SuppressionCommentFilter` to disable Checkstyle for specific areas of our code. We are also using the Maven Checkstyle Plugin (version 2.27) to execute a Checkstyle scan when building the project. However, since we upgraded Checkstyle from 6.16 to 7.6.1 the Maven build-process fails sporadically when building with multiple threads (using `-T4C`) because of Checkstyle. It reports warnings for parts of the code, where Checkstyle was disabled (using `CHECKSTYLE:OFF`/`:ON`). So the Filter seems to not work correctly in a multi-threaded environment.  Any ideas highly appreciated.  Best","closed","","nstaeger","2017-04-12T09:32:07Z","2017-04-12T11:26:00Z"
"","4650","IllegalThrowsCheck could use a way to ignore packages","Have a package of aspects, which by nature need to throw Throwable. would be nice to be able to exclude them all at once, rather than by method name.","closed","","mebigfatguy","2017-07-07T14:18:30Z","2017-07-08T01:24:52Z"
"","4664","ConfigurationLoaderTest::testIncorrectTag is flaky","from TestingResearchIllinois/NonDex#112  `ConfigurationLoaderTest.testIncorrectTag` failed for us on commit 82bc23f but did not fail on [the corresponding Travis run](https://travis-ci.org/checkstyle/checkstyle/jobs/229572526).  Our tool confirms this test is flaky. The full stacktrace is below. We set up our build environment to be as close as possible to your Travis build environment, using Xcode 7.3.1, OS X 10.11, Java 1.8.0_92 and Maven 3.3.9.  It seems Nondex should also have caught this flaky test. @alexgyori, @romani ?  ``` Tests run: 25, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.299 sec <<< FAILURE! testIncorrectTag(com.puppycrawl.tools.checkstyle.ConfigurationLoaderTest)  Time elapsed: 0.015 sec  <<< ERROR! java.lang.IllegalArgumentException: argument type mismatch 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) 	at com.puppycrawl.tools.checkstyle.ConfigurationLoaderTest.testIncorrectTag(ConfigurationLoaderTest.java:384)   ```  This is the line in question: https://github.com/checkstyle/checkstyle/blob/82bc23f45d7d57dfa26d1a1d4ec0f7dfcd88abb2/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java#L384","closed","miscellaneous,","flakycov","2017-07-08T14:33:24Z","2017-07-11T00:00:09Z"
"","4159","EmptyBlock should process LITERAL_DEFAULT","from pull #3918 discussion.  Looks like we have the same problem for ```DEFAULT_TOKEN```. I think that it should be fixed in separate issue.  ```` $ cat TestClass.java public class TestClass {         void method(int a) {             switch (a) {}             switch (a) {default: }             switch (a) {default: {}} // violation is expected             switch (a) {                 default:             }             switch (a) {                 default: // violation is expected                 {}             }             switch (a) {                 default: // violation is expected                 {                 }             }         }     }  $ cat TestConfig.xml                                                 $ java -jar checkstyle-7.6-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````","closed","medium,","romani","2017-04-05T10:25:07Z","2017-04-21T12:36:40Z"
"","4364","Design a new format of suppression dtd schema to support XPath queries","From my and @timurt point of view, XPath for queering AST nodes will be a good idea for the new suppression model, because: 1. XPath can be used for queering AST tree nodes in a simple and transparent way; 2. There are two ready to use open-source libraries which allow to work with XPath to query AST nodes easily (Jaxen and Saxon). Both libraries are used by PMD, so we can adopt their experience. No need to reinvent the wheel; 3. XPath is a good solution for xml-format as other tools such as PMD and Sonarqube already support it, and it will be easy for the programmer to write suppression rules for the Checkstyle’s violations if the format of the suppressions will be similar. 4. User who is already familiar with AST tokens we use in the checks, can have the base understanding of tree structure which will help him to write XPath expression.   Based on the arguments, mentioned above, we decided that we need to use XPath in the new model.  **What should be done in the scope of this issue:** 1. The decision on whether to extend [the existing dtd schema](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/suppressions_1_1.dtd) or create a new one specially for the new suppression model should be made; 2. In case we decide that we need to extend the existing schema, the new format of the suppression element need to be proposed, otherwise the new format of dtd schema should be introduced.  My proposal: 1. We need to extend the existing dtd schema to avoid breaking of backward compatibility. When we introduce the new suppression model nobody should notice the problem. The projects which use the old line-based approach should have an ability to continue suppressing Checkstyle violations by lines. 2. In his [GSoC 2017 proposal](https://docs.google.com/document/d/1nwQmXRY7FQoXB4icdnstnOOc8aloJSiLKDXfEWBGHbk/edit#heading=h.8hhjmh38bbo2) @timurt suggested adding a new attribute for the existing suppression element:  ```xml  ```  I think that this is a good idea, but from my point of view, "" xpath""="""" would="""" be="""" a="""" better="""" name="""" for="""" the="""" attribute.="""" such="""" approach="""" will="""" allow="""" us="""" to="""" support="""" two="""" models="""" in="""" same="""" file.="""" user="""" not="""" need="""" rewrite="""" whole="""" suppression="""" file="""" from="""" scratch.="""" other="""" solution="""" is="""" add="""" new="""" attribute="""" existing="""" ""suppress""="""" element:="""" ```xml=""""  ```  In the second approach the influence on dtd schema will be minimal.  **Warning** In this issue we do not discuss all details of the implementation. We just discuss the new format of the dtd schema which will be a user-friendly and will not break backward compatibility.                  closedmiscellaneous,                 MEZk                2017-05-20T07:49:04Z               2017-06-18T15:44:21Z                                             4363               add vavr library to our regression testing               repo: https://github.com/vavr-io/vavr It use very functional style of java. It will be good testing for our checks.  add to https://github.com/checkstyle/contribution/blob/master/checkstyle-tester/projects-for-wercker.properties https://github.com/checkstyle/contribution/blob/master/checkstyle-tester/projects-to-test-on.properties  update wercker to actually test NoExceptions on it.               closedmiscellaneous,                 romani                2017-05-19T00:06:45Z               2017-07-20T00:16:43Z                                             4362               False positive with OverloadMethodsDeclarationOrder when having static & abstract methods               ### Java File  ``` package my.something;  import android.support.annotation.NonNull; import android.support.annotation.Nullable; import com.google.auto.value.AutoValue;  @AutoValue public abstract class OverloadsNotSplit {   public static  OverloadsNotSplit error(@NonNull final Throwable throwable) {     return new AutoValue_OverloadsNotSplit(false, throwable, null);   }    public static  OverloadsNotSplit data(@NonNull final T t) {     return new AutoValue_OverloadsNotSplit(false, null, t);   }    @Nullable public abstract Throwable error();    @Nullable public abstract T data(); } ```  ### Config file  ```xml```  ### Errors  ``` [ant:checkstyle] [ERROR] /Users/nik/tmp/sunnyspots-android/app/src/main/java/my/package/OverloadsNotSplit.java:17: Overload methods should not be split. Previous overloaded method located at line '9'. [OverloadMethodsDeclarationOrder] [ant:checkstyle] [ERROR] /Users/nik/tmp/sunnyspots-android/app/src/main/java/my/package/OverloadsNotSplit.java:19: Overload methods should not be split. Previous overloaded method located at line '13'. [OverloadMethodsDeclarationOrder] ```  ---------------  Describe what you expect in detail.  I'd expect `OverloadMethodsDeclarationOrder` to not flag the above mentioned code does not overload any methods.","closed","","vanniktech","2017-05-18T15:11:04Z","2017-05-18T15:38:06Z"
"","4739","Non-serializable field 'args' in a serializable LocalizedMessage","from Intellij Idea inspection: src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java 81: args Non-serializable field 'args' in a Serializable class   We need to investigate how to make a fix and minimize affect to users. Looks like LocalizedMessage is not completely serializable so it NOT serializable, nobody use it  as serializable .....","open","approved,","romani","2017-07-17T16:45:23Z","2017-07-17T17:17:16Z"
"","4741","API Serializable classes without proper serialization implementation","from Intellij Idea inspection: Selected: Serializable class without 'readObject()' and 'writeObject()' (16)  src/main/java/com/puppycrawl/tools/checkstyle/api  AuditEvent.java (1) 41: AuditEvent Serializable class AuditEvent does not define 'readObject()' or 'writeObject()'  CheckstyleException.java (1) 27: CheckstyleException Serializable class CheckstyleException does not define 'readObject()' or 'writeObject()'  DetailAST.java (1) 36: DetailAST Serializable class DetailAST does not define 'readObject()' or 'writeObject()'  LocalizedMessage.java (1) 49: LocalizedMessage Serializable class LocalizedMessage does not define 'readObject()' or 'writeObject()'  We need to investigate problem and fix it accurately with minimal affect on","open","approved,","romani","2017-07-17T17:01:12Z","2017-07-17T17:01:12Z"
"","4716","api: abstract classes that extending concrete class","from Intellij Idea inspection - AbstractClassExtendsConcreteClass  >Inheritance issues group   4 errors      Abstract class extends concrete class inspection   3 errors          class AbstractLoader   1 error              ERROR Class 'AbstractLoader' is declared 'abstract', and extends a concrete class              class AbstractViolationReporter   1 error              ERROR Class 'AbstractViolationReporter' is declared 'abstract', and extends a concrete class        We need to review such cases and make a decision how to refactor this bad design.","closed","miscellaneous,","romani","2017-07-13T23:30:58Z","2017-12-13T03:54:53Z"
"","4931","AuditEventDefaultFormatterTest should not use PowerMockito for testing","from https://github.com/checkstyle/checkstyle/pull/4899/commits/0dc6ed77dbc99c1b5934dd06415f367a89625eab#r131657399  AuditEventDefaultFormatterTest can create AuditEvent class and fill it with all required values  for testing. Mocks are not required here.","closed","miscellaneous,","romani","2017-08-10T21:10:14Z","2019-02-19T14:34:08Z"
"","4763","EmptyLineSeparator: does not demand empty line if comment is present","from @vivekrao1985:  https://checkstyle.org/config_whitespace.html#EmptyLineSeparator  ``` $ cat ShouldFail.java  package my.checkstyle.frustrations; /**  * Hello world!  *  */  public class ShouldFail { }  $ cat check-style.xml                                                       $ java -jar checkstyle-8.0-all.jar -c check-style.xml ShouldFail.java   Starting audit... Audit done. ```  expecting it to fail because there is no blank line directly below package.               closedapproved,                 romani                2017-07-19T13:06:42Z               2019-12-20T18:32:23Z                                             4762               Issue #4556: fixed MethodCountCheck exception for partial tokens               Issue #4556  Regression to come. This is temporary fix. Full fix can be seen at https://github.com/rnveach/checkstyle/commits/issue_4539 .               closed                rnveach                2017-07-19T09:34:26Z               2017-07-19T18:17:47Z                                             4761               Issue #4592: Tests from design, imports, indentation, javadoc, metrics packages now extend from AbstractModuleTestSupport               Issue #4592  This PR extends the tests in design, imports, indentation, javadoc, metrics packages from AbstractModuleTestSupport.               closed                subkrish                2017-07-19T03:12:32Z               2017-07-19T23:39:18Z                                             4760               Issue #4448: Updated token names and rule names in javadoc grammar in accordance with the HTML specification               Issue #4448: Updated token names and rule names in javadoc grammar in accordance with the HTML specification               closed                voidfist                2017-07-19T00:10:13Z               2017-07-27T05:31:41Z                                             4759               Issue #4396: increase coverage of pitest-checkstyle-filters profile to 100               Issue #4396  increased mutation threshold for pitest-checkstyle-filters by 5% current threshold: 100% execution time: 9:42 min  [pitest report before changes for package](https://nimfadora.github.io/issue4396.html)               closed                Nimfadora                2017-07-18T23:08:31Z               2017-07-19T00:37:32Z                                             4758               Issue #4592: Tests from annotation, blocks, coding packages now extend from AbstractModuleTestSupport               Issue #4592   This PR extends the tests in annotation, blocks, coding packages from AbstractModuleTestSupport.               closed                subkrish                2017-07-18T19:48:53Z               2017-07-19T02:28:14Z                                             4757               minor: Added 'final' to getPath in AbstractPathTestSupport and '/' to getNonCompilablePath in AbstractTreeTestSupport               This PR adds `final` to the `getPath()` method in AbstractPathTestSupport and `/` to the `getNonCompilablePath()` method and the resulting changes because of that.               closed                subkrish                2017-07-18T12:06:00Z               2017-07-18T18:01:29Z                                             4756               Could not create type checkstyle due to java.lang.NoClassDefFoundError: com/google/common/collect/Lists               Hi All,  We are working on a project in selenium and gradle. We are working on client environment where there is no internet availability. So, we have taken all project dependencies from local file system.  For static code analysis, we want to add checkstyle plugin to gradle. So, dependency related to checkstyle i.e checkstyle-6.19 is taken from local file system. Since, we cannot add mavenCentral() to the build.gradle, we make use of mavenLocal().  We are getting below error in this case.  **Could not create type checkstyle due to java.lang.NoClassDefFoundError: com/google/common/collect/Lists**  Please find the  jar details  used :  Gradle - 2.8 Checkstyle : 6.19  google-collections : 0.8.jar guava :  21.0.jar  Please find attached build.gradle and snapshot.  ![image](https://user-images.githubusercontent.com/17542484/28313805-cbff9ec0-6bd5-11e7-99ec-026a154f8172.png)  ![image](https://user-images.githubusercontent.com/17542484/28313884-17f0a20c-6bd6-11e7-920b-aef865cf7b86.png)                  closed                ravs788                2017-07-18T10:59:15Z               2017-07-18T12:40:11Z                                             4755               Issue #4714: Make SuppressionCommentFilter and SuppressWithNearbyCommentFilter children of TreeWalker               https://github.com/checkstyle/checkstyle/issues/4714               closed                timurt                2017-07-18T08:08:33Z               2017-07-24T20:38:16Z                                             4754               Issue #4592: Added AbstractModuleTestSupport and GenericWhitespaceCheckTest, ParenPadCheckTest, FileTabCharacterCheckTest, PackageAnnotationCheckTest now extend from it               Issue #4592   This PR creates `AbstractModuleTestSupport`. For now `GenericWhitespaceCheckTest`, `ParenPadCheckTest`, `FileTabCharacterCheckTest` and `PackageAnnotationCheckTest ` no longer extends `BaseCheckTestSupport` but instead uses this abstract class. This removes the file from the hierarchy.               closed                subkrish                2017-07-18T05:39:39Z               2017-07-18T16:13:23Z                                             4753               Issue #4752: Enforced WS before javadoc tag @see. Added semantic predicate for PACKAGE token in ANTLR grammar for javadoc               #4752.  **OBSOLETE:** _Added `\n` in test inputs because `PACKAGE` token has no semantic predicate saying `_input.LA(1) == EOF`, and hence `PACKAGE` before EOF won't be recognized by lexer. Adding '\n' is a better and more realistic option than modifying the predicate for `PACKAGE` token because in a java file `@see` tag can never be followed by EOF. See also: [4671#discussion](https://github.com/checkstyle/checkstyle/pull/4671#discussion_r126317734)_  **UPDATE:** The javadoc parser is separately fed the content that resides between `/**` and `*/` and hence EOF is possible inside javadoc. This detail was somehow overlooked by me. `_input.LA(1) == EOF` has been added to the predicate for `PACKAGE` token.               closed                voidfist                2017-07-18T04:35:28Z               2017-08-01T16:58:56Z                                             4752               Parsing @see tag with no double quotes to mark string               $ cat YOUR_FILE.java  ``` * @see https://www.something.com ```  $ java -jar checkstyle-8.1-SNAPSHOT-all.jar -j  test.java  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--SEE_LITERAL -> @see [0:2] |   |--WS ->   [0:6] |   |--REFERENCE -> REFERENCE [0:7] |   |   `--PACKAGE -> https [0:7] |   `--DESCRIPTION -> DESCRIPTION [0:13] |       `--TEXT -> ://www.something.com [0:13] `--EOF ->  [0:33] ```  As can be seen the javadoc tree is wrong and url should be recognized as string. This happens becuase `WS` is not enforced before description in `@see` tag and because `PACKAGE` token is being [produced by lexer without any context](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L123). Such input would also lead javadoc tool to produce errors since the quotes are missing. But still the javadoc tool would render the site with a string placed for the url.  Changing [JavadocParser.g4#L881](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4#L881) from:  ```  | SEE_LITERAL (WS | NEWLINE)* reference? (STRING | htmlElement)* (WS | NEWLINE)* description? ```  to:  ``` | SEE_LITERAL (WS | NEWLINE)* reference? ((WS | NEWLINE)+ STRING | htmlElement)* (WS | NEWLINE)* ((WS | NEWLINE)+ description)? ```  results in the following output for the same input file:  ``` Exception in thread "" main""="""" java.lang.illegalargumentexception:="""" [error:0]="""" javadoc="""" comment="""" at="""" column="""" -3="""" has="""" parse="""" error.="""" unrecognized="""" error="""" from="""" antlr="""" parser:="""" null="""" com.puppycrawl.tools.checkstyle.detailnodetreestringprinter.parsejavadocasdetailnode(detailnodetreestringprinter.java:71)="""" com.puppycrawl.tools.checkstyle.detailnodetreestringprinter.parsejavadocasdetailnode(detailnodetreestringprinter.java:83)="""" com.puppycrawl.tools.checkstyle.detailnodetreestringprinter.parsefile(detailnodetreestringprinter.java:173)="""" com.puppycrawl.tools.checkstyle.detailnodetreestringprinter.printfileast(detailnodetreestringprinter.java:59)="""" com.puppycrawl.tools.checkstyle.main.runcli(main.java:400)="""" com.puppycrawl.tools.checkstyle.main.main(main.java:209)="""" ```="""" which="""" happens="""" since="""" parser="""" no="""" place="""" to="""" fit="""" `:`="""" in="""" [reference="""" rule](https:="""" github.com="""" checkstyle="""" blob="""" master="""" src="""" main="""" resources="""" com="""" puppycrawl="""" tools="""" grammars="""" javadocparser.g4#l864),="""" **already**="""" recognized="""" as="""" `char`="""" by="""" lexer,="""" follows="""" `https`="""" been="""" `package`="""" lexer="""" and="""" hence="""" token="""" should="""" be="""" identified="""" with="""" proper="""" discretion.="""" _(reference="""" rule="""" is="""" called="""" spotted="""" the="""" parser)_="""" see="""" also:="""" [4550#issuecomment](https:="""" pull="""" 4550#issuecomment-312521474)="""" ,="""" 4550#issuecomment-312529807)","closed","","voidfist","2017-07-18T03:15:37Z","2017-08-21T14:57:18Z"
"","4734","Remove hashCode/equals from SuppressionFilter and mark SuppressFilterElement as immutable","from #4725   investigate why [SuppressFilterElement](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressFilterElement.java) and [SuppressionFilter](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilter.java) overrides hashcode/equals. If not required - remove, If required - try to avoid  suppression of inspection.  Update:  Reason - these methods are here to just make testing easier. Order of filter elements don't matter anywhere else, which would only be FilterSet which also has an equals/hashcode.  SuppressionFilter should be updated to not have equals in hashCode. SuppressFilterElement should be updated to reference that it is immutable and keep both methods. FilterSet will be updated in https://github.com/checkstyle/checkstyle/issues/6494 since it is API.","closed","miscellaneous,","romani","2017-07-16T14:19:38Z","2019-03-03T19:23:17Z"
"","4750","api class FileContents depends on non public interface CommentListener","found in scope of #4723  Idea violation: Class only used from one other package src/main/java/com/puppycrawl/tools/checkstyle/grammars/CommentListener.java (1) 28: CommentListener Class CommentListener has only dependencies on and/or dependents in package 'com.puppycrawl.tools.checkstyle.api'   TODO: make a decision on class FileContents to stay public or go to implementation, interface [CommentListener](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/grammar/CommentListener.java) need to somehow deprecated as we have comments in AST already ....","open","approved,","romani","2017-07-17T23:08:57Z","2019-03-03T15:47:35Z"
"","4119","Verifying tokens in checkstyle config handles default tokens wrong","Found in https://github.com/checkstyle/checkstyle/pull/4117#discussion_r108739172 , and confirmed by looking in our configuration file https://github.com/checkstyle/checkstyle/blob/e9f6521e0101fb685456ca5548065acbecd5eae1/config/checkstyle_checks.xml#L175-L188.  We do not validate [all tokens in `RightCurly`](https://github.com/checkstyle/checkstyle/blob/e9f6521e0101fb685456ca5548065acbecd5eae1/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java#L148). We are missing `LITERAL_IF` and `LITERAL_ELSE` and others.  Problem is with `AllChecksTest.validateAllCheckTokensAreReferencedInConfigFile` and how we handle default tokens in https://github.com/checkstyle/checkstyle/blob/e9f6521e0101fb685456ca5548065acbecd5eae1/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java#L371.  Once fixed, we will have to re-confirm all new tokens found, if they should be added to our config or not. This will also affect google config.","closed","miscellaneous,","rnveach","2017-03-29T18:50:50Z","2017-04-12T20:05:23Z"
"","4969","LocalizedMessage should have only one string identifier of who reproted event","found during discussion at #4931.  [LocalizedMessage](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java#L112)   ```     public LocalizedMessage(int lineNo,                             int columnNo,                             int tokenType,                             String bundle,                             String key,                             Object[] args,                             SeverityLevel severityLevel,                             String moduleId,                             Class sourceClass, ```  two arguments are used to make identification of who reported and event. ```                             String moduleId,                             Class sourceClass, ```  Identification argument should be single `String` type. In our case it will contain simple name of Check class or `id` from config.","open","approved,","romani","2017-08-19T13:35:32Z","2018-11-10T18:47:44Z"
"","4727","FinalLocalVariable: false-negative with anonymous class","found at https://github.com/checkstyle/checkstyle/pull/4719#pullrequestreview-50190684  ``` $ cat config.xml                           $ cat Test.java  public class Test {     public void test() {         Object testSupport = new Object() {             @Override             public String toString() {                 final String dc = new String(); // comment this line to make violation happen                 return dc;             }         };         testSupport.toString();      } }  $ java -jar checkstyle-8.0-all.jar -c config.xml Test.java  Starting audit... Audit done. ```  Expected: ``` [ERROR] Test.java:3:16: Variable 'testSupport' should be declared final. [FinalLocalVariable] ```","closed","approved,","romani","2017-07-15T17:53:42Z","2017-07-30T02:50:42Z"
"","4534","MethodCountCheck: add ANNOTATION_DEF to toknes to avoid NPE","Found at https://github.com/checkstyle/checkstyle/pull/4532#issuecomment-311238339 .  I surprised  that this code is compilable, I thought only methods signatures could be in annotation declaration.  from https://docs.oracle.com/javase/tutorial/java/annotations/declaring.html > Annotation types are a form of interface   ```` $ javac TextClass.java  $ cat TestClass.java @interface TestClass {     Object object = new Object(){         @Override         public String toString() {             return new String();         }     }; }  $ cat TestConfig.xml                                              $ java -jar checkstyle-7.8.2-all.jar -c TestConfig.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck$MethodCounter.access$000(MethodCountCheck.java:218)     at com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck.raiseCounter(MethodCountCheck.java:140)     at com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck.visitToken(MethodCountCheck.java:112)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:370)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:507)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:312)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:184)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)     ... 4 more Checkstyle ends with 1 errors. ````","closed","new feature,","rnveach","2017-06-27T03:05:33Z","2017-07-02T01:53:26Z"
"","4545","FileText: remove constructor that is only used in tests","Followed by https://github.com/checkstyle/checkstyle/pull/4525#discussion_r124260489  After merging of https://github.com/checkstyle/checkstyle/pull/4525#discussion_r124260489 (as a fix for #3034) [this constructor](https://github.com/MEZk/checkstyle/blob/154f120d7b71c30ec64f3ef801fb080a24a21c4a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java#L174-L174) will become unused. We need to remove it.  The constructor to be removed is `private FileText(File file, List lines)`.","open","breaking compatibility,","MEZk","2017-06-27T17:57:40Z","2019-09-27T23:45:04Z"
"","4523","Consider joining FileContents and FileText","Followed by https://github.com/checkstyle/checkstyle/issues/3034#issuecomment-256347194  FileContents seems to be just a special wrapper of FileText. There might be a reason in joining them together.","open","breaking compatibility,","MEZk","2017-06-24T19:12:47Z","2017-07-03T02:16:53Z"
"","4478","Refactor Checker to decrease class fan-out complexity","Followed by [3573](https://github.com/checkstyle/checkstyle/pull/4468)  In the configuration file `checkstyle_checks.xml` maximum number of classes is 25  ```                    ...   ``` Current number of classes [Checker.java](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java) relies on is 25.  Adding new class causes error  > [checkstyle] [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java:67:1: Class Fan-Out Complexity is 26 (max allowed is 25). [ClassFanOutComplexity]  In the scope of this issue it is required to decrease class fan-out complexity.","open","","timurt","2017-06-21T07:27:00Z","2019-06-02T05:17:31Z"
"","4000","Issue #3999: Split and Organize Checkstyle inputs by Test for FileLength","Fixes Issue #3999","closed","","johnyleebrown","2017-03-14T01:35:03Z","2017-03-20T21:55:51Z"
"","4343","Pull #4343: moved more variables inside if blocks to reduce execution","Fixes for new check at https://github.com/sevntu-checkstyle/sevntu.checkstyle/pull/565 .  Will rename commit to reference this PR.","closed","miscellaneous,","rnveach","2017-05-10T18:55:34Z","2017-05-12T12:31:42Z"
"","4139","Issue #4092: ClassFanOutComplexity: count complexity base annotations/extends/implements/methods params","fixes #4092","closed","incomplete,","shivanshsoni","2017-04-01T05:18:22Z","2017-07-03T18:35:15Z"
"","4010","Issue #3976: Split and Organize Checkstyle inputs by Test for EmptyForIteratorPad","fixes #3976","closed","","shivanshsoni","2017-03-15T14:16:17Z","2017-03-17T03:14:32Z"
"","4009","Issue #3976: Split and Organize Checkstyle inputs by Test for EmptyForIteratorPad","fixes #3976","closed","","shivanshsoni","2017-03-15T05:06:39Z","2017-03-15T14:12:23Z"
"","4002","Issue #3976: Split and Organize Checkstyle inputs by Test for EmptyForIteratorPad","fixes #3976","closed","","shivanshsoni","2017-03-14T16:52:44Z","2017-03-15T04:18:41Z"
"","4027","Issue #2974: EmptyLineSeparator now validates newlines before comments","fixes #2974","closed","","shivanshsoni","2017-03-17T04:25:42Z","2017-04-09T03:07:06Z"
"","4206","minor: fixed styling issue on brace","Fixed styling issue after 2 separate PRs were merged together.","closed","","rnveach","2017-04-12T20:23:05Z","2017-04-13T21:27:21Z"
"","4791","Fix German translation","Fixed some typos and errors inside the German translation.","closed","miscellaneous,","FriedrichFroebel","2017-07-21T14:11:07Z","2017-07-21T16:17:29Z"
"","4929","use javadoc tag suppression for ClassWithOnlyPrivateConstructors inspection","find a reason why we can not suppress ClassWithOnlyPrivateConstructors by javadoc tag.  patch that does not work: ``` $ git diff diff --git a/config/intellij-idea-inspections.xml b/config/intellij-idea-inspections.xml index 10da55d..deb0c07 100644 --- a/config/intellij-idea-inspections.xml +++ b/config/intellij-idea-inspections.xml @@ -332,7 +332,7 @@                   -         +                               @@ -2140,6 +2140,8 @@                                                       +                 +                                                                       diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java index a0e67d0..ac8aed0 100644 --- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java +++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java @@ -62,6 +62,7 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;   * @author Stephane Bailliez   * @author lkuehne   * @author Andrei Selkin + * @noinspection ClassWithTooManyDependencies   */  public class Checker extends AutomaticBean implements MessageDispatcher, RootModule {      /** Message to use when an exception occurs and should be printed as a violation. */ diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java index c4f780a..846edc1 100644 --- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java +++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java @@ -32,6 +32,7 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtils;   * Factory for handlers. Looks up constructor via reflection.   *   * @author jrichard + * @noinspection ClassWithTooManyDependencies   */  public class HandlerFactory {      /** diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java index eedeeca..ed12e9a 100644 --- a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java +++ b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java @@ -76,6 +76,10 @@ import com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck;  import com.puppycrawl.tools.checkstyle.filters.SuppressionFilter;  import com.puppycrawl.tools.checkstyle.utils.CommonUtils;   +/** + * Test for Checker. + * @noinspection ClassWithTooManyDependencies + */  public class CheckerTest extends AbstractModuleTestSupport {        @Rule diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java index 34b8d09..a7e8738 100644 --- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java +++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java @@ -63,6 +63,10 @@ import com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter;  import com.puppycrawl.tools.checkstyle.internal.TestUtils;  import com.puppycrawl.tools.checkstyle.utils.CommonUtils;   +/** + * Test for TreeWalker. + * @noinspection ClassWithTooManyDependencies + */  public class TreeWalkerTest extends AbstractModuleTestSupport {        @Rule ```","open","miscellaneous,","romani","2017-08-10T20:59:03Z","2017-08-10T20:59:27Z"
"","4387","problem with usage of third-party Check libraries and checkstyle 7.8","failed builds (almost all ):  https://travis-ci.org/sevntu-checkstyle/checkstyle-samples/builds/237027197#L3680 https://travis-ci.org/sevntu-checkstyle/sevntu.checkstyle/jobs/237027232#L720 https://travis-ci.org/checkstyle/checkstyle/jobs/237027341#L495  ``` ~/java/github/sevntu-checkstyle/checkstyle-samples/maven-project [master|✔]  21:13 $ mvn -X checkstyle:check  [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:check (default-cli) on project maven-project: Execution default-cli of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:check failed: Duplicate key com.github.sevntu.checkstyle.checks.design.HideUtilityClassConstructorCheck -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:check (default-cli) on project maven-project: Execution default-cli of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:check failed: Duplicate key com.github.sevntu.checkstyle.checks.design.HideUtilityClassConstructorCheck 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116) 	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80) 	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51) 	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128) 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307) 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193) 	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106) 	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863) 	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288) 	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289) 	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229) 	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415) 	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default-cli of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:check failed: Duplicate key com.github.sevntu.checkstyle.checks.design.HideUtilityClassConstructorCheck 	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:145) 	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207) 	... 20 more Caused by: java.lang.IllegalStateException: Duplicate key com.github.sevntu.checkstyle.checks.design.HideUtilityClassConstructorCheck 	at java.util.stream.Collectors.lambda$throwingMerger$0(Collectors.java:133) 	at java.util.HashMap.merge(HashMap.java:1253) 	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320) 	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169) 	at java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1548) 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) 	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) 	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) 	at com.puppycrawl.tools.checkstyle.PackageObjectFactory.generateThirdPartyNameToFullModuleName(PackageObjectFactory.java:203) 	at com.puppycrawl.tools.checkstyle.PackageObjectFactory.createModule(PackageObjectFactory.java:146) 	at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:152) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:171) 	at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:452) 	at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:171) 	at org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:218) 	at org.apache.maven.plugin.checkstyle.CheckstyleViolationCheckMojo.execute(CheckstyleViolationCheckMojo.java:538) 	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134) 	... 21 more [ERROR]  [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException  ```","closed","high demand,","romani","2017-05-29T04:16:26Z","2017-06-03T18:30:12Z"
"","4100","Enforce more checks over checkstyle resources","Expanding on Issue #3072 and from discussions in it's PR https://github.com/checkstyle/checkstyle/pull/4075#discussion_r108035623 .  New configuration will maintain small number of checks on checkstyle's resources. Right now it is being configured with `NewlineAtEndOfFileCheck`.  I would like to propose we add the following checks to the resource: `OuterTypeFilenameCheck` - main class in input should be named after file `PackageDeclarationCheck` - package name should be same as folder location  Other ideas for checks against resources as they can cause some confusion with new contributors as we disallow them in main configuration: remove trailing spaces. remove tabs.","closed","easy,","rnveach","2017-03-25T19:20:36Z","2018-06-16T23:10:46Z"
"","4216","RequireThis: xdoc examples don't produce violations like shown","Examples taken from http://checkstyle.sourceforge.net/config_coding.html#RequireThis .  https://github.com/checkstyle/checkstyle/blob/db64216a19b480855058d85f489d22fface4ff13/src/xdocs/config_coding.xml#L3472 ```` $ cat TestClass.java public static class B {   private int field1;    public A(int f) {     field1 = f;   }    String addSuffixToField(String field1) {     // Overlapping by method argument. Equal to ""return field1 = field1 + ""suffix"";""     return field1 += ""suffix""; // violation: Reference to instance variable ""field1"" needs ""this"".   } }  $ cat TestConfig.xml                        $ java -jar checkstyle-7.6.1-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  https://github.com/checkstyle/checkstyle/blob/db64216a19b480855058d85f489d22fface4ff13/src/xdocs/config_coding.xml#L3522 ```` $ cat TestClass.java public static class A {   private int field1;   private int field2;    public A(int field1) {     field1 = field1; // violation: Reference to instance variable ""field1"" needs ""this"".     field2 = 0; // violation: Reference to instance variable ""field2"" needs ""this"".     String field2;     field2 = ""0""; // No violation. Local var allowed   } }  $ cat TestConfig.xml                              $ java -jar checkstyle-7.6.1-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:6:5: Reference to instance variable 'field1' needs ""this."". [RequireThis] Audit done. Checkstyle ends with 1 errors. ```` Violation missing on line 7 for `field2 = 0;`.  https://github.com/checkstyle/checkstyle/blob/db64216a19b480855058d85f489d22fface4ff13/src/xdocs/config_coding.xml#L3539 ```` $ cat TestClass.java public static class B {   private int field1;    public A(int f) {     field1 = f; // violation:  Reference to instance variable ""field1"" needs ""this"".   }    String addSuffixToField(String field1) {     return field1 += ""suffix""; // violation: Reference to instance variable ""field1"" needs ""this"".   } }  $ cat TestConfig.xml                              $ java -jar checkstyle-7.6.1-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  All examples should be re-producible. It should be made clear which config is being used by example.","open","easy,","rnveach","2017-04-14T12:16:08Z","2022-04-24T00:03:47Z"
"","4682","find way to launch IntellijIdea inspections from command line","Each time TeamCity(TC) update IntellijIdea version we have problems on TC with different behavior of IntellijIdea on TC and on our local. Execution in IntellijIdea require special configuration that users always forget ..... so TC catch such cases but they could be prevented.  It will be good to have shell script in our repo that takes path to IntelijIdea installation and to checkstyle sources and print validation to console or to a file.  TC do run inspections by command line, so we look how they do this, ..... inside IDEA installation where is `...../idea-IU-171.4249.39/bin/inspect.sh` it might help too.","closed","CI,","romani","2017-07-09T16:55:53Z","2019-03-08T05:22:40Z"
"","4547","Add MT properties to documentation","During MT mode implementation we left all properties not documented to prevent users from using them before actual release done. After all coding work is finished we need them to appear in documentation.","open","approved,","sabaka","2017-06-27T19:47:39Z","2018-07-07T05:14:20Z"
"","4997","Column number in DetailAST should start with 1","Due to the fact that in the past in many IDEs and code editors the position of the first symbol in the line was 0, we have [this hack](https://github.com/checkstyle/checkstyle/blob/cc2886ef2ce994219bdd2427f820a7ac3738916b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java#L68) in DetailAST:  ```java // expect columns to start @ 0 columnNo = tok.getColumn() - 1; ```  Nowadays, in most popular IDEs (IntelliJ IDEA, Eclipse, sublime, VS Code, gedit) the first symbol has 1st position. The log method of AbstractCheck has a special hack to avoid confusion in the Checkstyle output:  ```java final int col = 1 + CommonUtils.lengthExpandedTabs(             getLines()[lineNo - 1], colNo, tabWidth); ```  We always increment column number at list by 1. Tab expansion is another story, and it is OK. That is why we need to consider that the first character starts on the 1st position too.  The fix will lead too the big regression.   1) We need to remove ```-1``` from DetailAST 2) We need to remove ```+1``` from AbstractCheck#log 3) We should fix all UTs. Special attention to each failing UT, some checks violations may become confusing. 4) The regression report for all failing checks has to be generated to prove that at least the number of violations will not be decreased. So the number of violations before and after fix should be equal.","open","hard,","MEZk","2017-08-24T18:58:30Z","2020-03-18T13:46:58Z"
"","4110","minor: Use HTTPS links and the SVG Travis badge","Double-checked to make sure that all links work over HTTPS.","closed","","kevinji","2017-03-28T01:54:36Z","2017-03-28T05:49:55Z"
"","4448","Replace terms in AST Tokens by terms from HTML specification","documentation was changed at #3218  https://www.w3.org/TR/html4/ beginning/closing tag -> start/end tag singleton tag -> empty tag  Reason: it is better to keep terminology of specification and to break before it become public.  Expected fix: - rename in javadoc grammar (         singletonTag --> emptyTag ;          OPEN --> START; CLOSE --> END;         xxxxOpen --> xxxxStart; xxxxClose --> xxxxEnd;         *_OPEN -> _START; *_CLOSE -> _END ) - renames is AST trees in xdoc files.","closed","breaking compatibility,","romani","2017-06-12T23:53:39Z","2017-07-27T12:15:51Z"
"","4473","Split checks in three groups for MT implementation (Umbrella issue. Discussions only)","Different checks can have different number of instances: some can have only one, meanwhile some can have new instance per thread or even per file. Here we need to discuss the way how to mark them and implement it.","open","","sabaka","2017-06-20T09:49:00Z","2018-07-07T05:14:24Z"
"","4865","NPE at NoWhitespaceAfterCheck at INDEX_OP or METHOD_REF","detected at CircleCI. suppressed by - https://github.com/checkstyle/contribution/commit/284acd31b9f3d5274f72ba489d6aff335c286437 ``` Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing /home/ubuntu/checkstyle/contribution/checkstyle-tester/src/main/java/lucene-solr/solr/core/src/test/org/apache/solr/request/SimpleFacetsTest.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)     at org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:252)     at org.apache.maven.plugin.checkstyle.AbstractCheckstyleReport.executeReport(AbstractCheckstyleReport.java:473)     ... 28 more Caused by: java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.getPositionAfter(NoWhitespaceAfterCheck.java:181)     at com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.visitToken(NoWhitespaceAfterCheck.java:139)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:419)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:556)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:359)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:205)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286) ```","closed","approved,","romani","2017-07-31T06:44:13Z","2017-08-01T21:32:18Z"
"","4749","remove AbstractComplexityCheck, AbstractIllegalCheck, AbstractIllegalMethodCheck, AbstractNestedDepthCheck","Deprecated classes: AbstractComplexityCheck, AbstractIllegalCheck, AbstractIllegalMethodCheck, AbstractNestedDepthCheck  just need to be removed from code base.","closed","breaking compatibility,","romani","2017-07-17T23:04:01Z","2017-07-21T14:10:03Z"
"","4211","HTML report: show only classes with issues","Currently the HTML reports are bloated with detail table entries for classes that do *not* have errors/warnings. It would be clearer if the report only displays issues (like in FindBugs).","closed","","thetric","2017-04-13T11:34:52Z","2017-04-14T00:04:53Z"
"","4073","NewlineAtEndOfFile default should be OS agnostic","Currently the default for `NewlineAtEndOfFile` is `system`, which means that checkstyle *will* fail on a clean repository VCS checkout on either Windows or Unix if the EOLs where not converted to native EOLs by the VCS client, if that is even an option available in the client.  If someone very definitely wanted a certain EOL type, then surely they need a (new?) check which confirms all EOLs throughout all files are using that EOL type, not merely the EOLs at EOF as done by `NewlineAtEndOfFile`.  I think `NewlineAtEndOfFile` default of `lf_cr_crlf` (added https://github.com/checkstyle/checkstyle/pull/1045) more closely matches what the configuration name implies.  That will mean the ruleset https://raw.githubusercontent.com/noveogroup/android-check/master/android-check-plugin/src/main/resources/checkstyle/checkstyle-hard.xml will work as is on Windows, without depending on the git config of the users or requiring creation of `.gitattributes`, etc","closed","breaking compatibility,","jayvdb","2017-03-21T19:22:47Z","2019-05-18T22:16:38Z"
"","4352","codeship: provide ability to skip CI executions base on commit files","continuation of #3818 .  we need to extend build script to skip CI execution if non-related files are changed only. wercker , travis, distelli, shippable are already updated.  codeship just run https://github.com/checkstyle/checkstyle/blob/master/.ci/run-link-check-plugin.sh file. So he need to be updated with same logic as we did at #3818 .","closed","CI,","romani","2017-05-13T20:02:41Z","2020-04-05T01:02:06Z"
"","4975","EqualsAvoidNull: Some feedback","Context: ```sh $ javac Container.java $ cat -n Container.java       1  import java.util.Collection;      2  import java.util.concurrent.Callable;      3         4  final class Container {      5      boolean directComparison(String s) {      6          return s.equals(""foo"");      7      }         8         9      boolean nullSafeComparison1(String s) {     10          return s != null && s.equals(""foo"");     11      }        12       13      boolean nullSafeComparison2(String s) {     14          return s == null || s.equals(""foo"");     15      }        16       17      boolean indirectComparison(Callable callable) throws Exception {     18          return callable.call().equals(""foo"");     19      }        20       21      boolean indirectComparison(Collection strings) {     22          return strings.stream().allMatch(s -> s.equals(""foo""));     23      }        24  } $ cat -n config.xml       1        2        3            4                5            6   $ java -jar checkstyle-8.1-all.jar -c config.xml Container.java  Starting audit... [ERROR] /tmp/Container.java:6:24: String literal expressions should be on the left side of an equals comparison. [EqualsAvoidNull] [ERROR] /tmp/Container.java:10:37: String literal expressions should be on the left side of an equals comparison. [EqualsAvoidNull] [ERROR] /tmp/Container.java:14:37: String literal expressions should be on the left side of an equals comparison. [EqualsAvoidNull] Audit done. Checkstyle ends with 3 errors. ```  Observations: * I agree with the warning about line 6. * The warning about line 10 is strictly speaking superfluous but points out a potential optimization, so that's okay. * The warning about line 14 is harmless but doesn't point out a potential NPE, nor does it allow the code to be optimized. * The checker doesn't warn about lines 18 and 22, but it should.","open","","Stephan202","2017-08-20T16:23:03Z","2018-03-18T19:25:39Z"
"","4972","AnnotationUseStyleCheck: Inconsistent `elementStyle` enforcement","Context: ```sh $ javac Container.java $ cat -n Container.java       1	final class Container {      2	    @interface MyInterface {      3	        String[] value() default {};      4	      5	        String[] attr2() default {};      6	    }      7	      8	    @MyInterface      9	    void minimal() {}     10	     11	    @MyInterface(""foo"")     12	    void compactWithoutArray() {}     13	     14	    @MyInterface({""foo""})     15	    void compactWithSingletonArray() {}     16	     17	    @MyInterface({""foo"", ""bar""})     18	    void compactWithTwoElementArray() {}     19	     20	    @MyInterface(value = ""foo"")     21	    void expandedWithoutArray() {}     22	     23	    @MyInterface(value = {""foo""})     24	    void expandedWithSingletonArray() {}     25	     26	    @MyInterface(value = {""foo"", ""bar""})     27	    void expandedWithTwoElementArray() {}     28	     29	    @MyInterface(attr2 = ""foo"")     30	    void otherAttrWithoutArray() {}     31	     32	    @MyInterface(attr2 = {""foo""})     33	    void otherAttrWithSingletonArray() {}     34	     35	    @MyInterface(attr2 = {""foo"", ""bar""})     36	    void otherAttrWithTwoElementArray() {}     37	} $ cat -n config.xml       1	      2	      3	          4	              5	                  6	              7	              8	                  9	             10	             11	                 12	             13	         14	 $ java -jar checkstyle-8.1-all.jar -c config.xml Container.java Starting audit... [ERROR] /tmp/Container.java:11: Annotation style must be 'EXPANDED'. [AnnotationUseStyle] [ERROR] /tmp/Container.java:14: Annotation style must be 'COMPACT_NO_ARRAY'. [AnnotationUseStyle] [ERROR] /tmp/Container.java:14: Annotation style must be 'EXPANDED'. [AnnotationUseStyle] [ERROR] /tmp/Container.java:17: Annotation style must be 'EXPANDED'. [AnnotationUseStyle] [ERROR] /tmp/Container.java:20: Annotation style must be 'COMPACT'. [AnnotationUseStyle] [ERROR] /tmp/Container.java:23: Annotation style must be 'COMPACT'. [AnnotationUseStyle] [ERROR] /tmp/Container.java:23: Annotation style must be 'COMPACT_NO_ARRAY'. [AnnotationUseStyle] [ERROR] /tmp/Container.java:26: Annotation style must be 'COMPACT'. [AnnotationUseStyle] Audit done. Checkstyle ends with 8 errors. ```  Two observations:  1. Based on the [documentation](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java#L110), I'd expect:     * `EXPANDED` to also complain about line 20.     * `COMPACT_NO_ARRAY` to also complain about lines 20 and 26.      The false negative of `EXPANDED` can perhaps be fixed by simply updating the documentation, but the false negatives for `COMPACT_NO_ARRAY` seem to require genuine code changes.  2. But at the same time I think the `elementStyle` property seems to be concerned with two orthogonal aspects that should be split up:     * A property `compact = {ALWAYS, NEVER, IGNORE}` using which to control whether `value` must (not) be omitted when possible.     * A property `singleArrayCurlies = {ALWAYS, NEVER, IGNORE}` using which to control whether single-value array values must (not) be surrounded by curly braces. (I guess `ALWAYS` requires introspection of the annotation definition and is therefore out-of-scope for Checkstyle?)      This way the styling of the `attr2` attribute in the example above can be controlled as well; right now `AnnotationUseStyleCheck` doesn't enforce the use of curlies for this attribute at all.   WDYT?","open","","Stephan202","2017-08-19T20:35:23Z","2018-03-18T19:26:10Z"
"","4962","Comment checking is ignored if there is an empty javadoc","Consider we have file Test.java ``` /**  *  */ public class Test {  } ``` now we do `java -jar checkstyle-7.7-all.jar Test.java -c config.xml` and we get ``` Starting audit... [ERROR] Test.java:0: Missing package-info.java file. [JavadocPackage] Audit done. ``` Now we change file Test.java to ``` public class Test {  }  ``` and we do `java -jar checkstyle-7.7-all.jar Test.java -c config.xml` we get ``` Starting audit... [ERROR] Test.java:0: Missing package-info.java file. [JavadocPackage] [ERROR] Test.java:1: Missing a Javadoc comment. [JavadocType] Audit done. ``` As you see Checkstyle complains about absence of javadoc only for the second variant of Test.java but not for the first one. Is this a bug or it is a defined behavior? This is my config.xml  ```                                                                                                                                                          	 	     	                                                                                                                                    	     	                                                                                                                                                                                                                             	         	                                                                                                                           	  	 	                  	 	 	 	       ```","closed","","PashaTurok","2017-08-19T11:47:07Z","2018-03-18T19:28:21Z"
"","4035","rename STMT in BlockOption class to STATEMENT","code https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/BlockOption.java#L49  Message name was changed too from ""block.noStmt"" to ""block.noStatement""  full word should be used.","closed","breaking compatibility,","romani","2017-03-17T17:36:06Z","2017-06-23T15:57:16Z"
"","4629","Checkstyle should have a way to accept long list of files to check","Checkstyle currently treats the arguments as a list of files/directories to check. However, this can run into the command length limit (which depends on the shell/OS), as I experienced while running some big experiments with Checkstyle.  We could introduce an option to the CLI to treat the argument(s) as file(s) containing lists of files to check with Checkstyle. For example:  $ cat test ``` C1.java C2.java ``` $ cat C{1,2}.java ```java class C1 {     int[] i = new int[]{ 1}; } class C2 {     int[] i = new int[]{ 2}; } ``` $ javac C{1,2}.java  $ cat config.xml ```               ``` $ java -jar checkstyle-8.1-SNAPSHOT-all.jar -c config.xml test **-F** ``` Starting audit... [ERROR] /Users/darsan/Desktop/checkstyle/C1.java:2:25: '{' is followed by whitespace. [NoWhitespaceAfter] [ERROR] /Users/darsan/Desktop/checkstyle/C2.java:2:25: '{' is followed by whitespace. [NoWhitespaceAfter] Audit done. Checkstyle ends with 2 errors. ``` Here **-F** is the option that tells Checkstyle to treat the arguments as individual files containing lists of files.","closed","","denizarsan","2017-07-05T22:00:20Z","2019-02-27T14:41:44Z"
"","4920","Indentation with caseIndent set to 0 falsely reports single line fallthrough cases as being wrongly indented","checks.xml                      MyClass.java          switch (value) {         case ""FOOBAR"":         case ""foobar"": return doSomething();         case ""Blah"": return doSomethingDifferent();         case ""BlahBlah"": return doSomethingDifferrent();         default:             break;         }  # Output: 'block' child has incorrect indentation level 12, expected level should be 16.  Checkstyle is complaining about the ""foobar"" line. This only occurs when there's a fallthrough and the return is on the same line as the next case.","open","indentation,","Tohnmeister","2017-08-09T13:18:39Z","2017-08-09T13:34:19Z"
"","4694","UniquePropertiesCheck.getLineNumber should be private","Checks are not designed for extension in general, so `protected` usage is discouraged especially `static protected` `protected static int getLineNumber(FileText fileText, String keyName) {` https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java#L104  should become `private protected`. UTs should be updated to use Check public methods to test functionality.","closed","miscellaneous,","romani","2017-07-10T20:02:11Z","2017-07-13T12:30:36Z"
"","4383","MagicNumber: new proprty ignoreAnnotationElementDefaults to ignore magic numbers in annotation default values","Check: [MagicNumber](https://checkstyle.org/config_coding.html#MagicNumber)  ```` $ cat TestClass.java @interface CustomAnnotation {   int length() default 10; }  $ cat TestConfig.xml                         $ java -jar checkstyle-8.18-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:2:24: '10' is a magic number. [MagicNumber] Audit done. Checkstyle ends with 1 errors. ````  Not expecting a violation.  Should add a new property (like ""ignoreAnnotationElementDefaults"") to allow magic numbers in annotation property default values:","closed","new feature,","krisztiankocsis","2017-05-28T07:20:55Z","2019-07-27T02:31:18Z"
"","4955","POTENTIAL problem in ANTLR","cat test.javadoc **(LINE ENDINGS=`CLRF`)**  ``` *   ```  java -jar master-8.2-all.jar -j test.javadoc  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--TEXT ->   [0:1] |--HTML_ELEMENT -> HTML_ELEMENT [0:2] |   `--HTML_TAG -> HTML_TAG [0:2] |       |--HTML_ELEMENT_START -> HTML_ELEMENT_START [0:2] |       |   |--START -> < [0:2] |       |   |--HTML_TAG_NAME -> a [0:3] |       |   |--WS ->   [0:4] |       |   |--ATTRIBUTE -> ATTRIBUTE [0:5] |       |   |   |--HTML_TAG_NAME -> href [0:5] |       |   |   |--EQUALS -> = [0:9] |       |   |   `--ATTR_VALUE -> ""attr""\r [0:10] |       |   |--NEWLINE -> \n [0:17] |       |   |--WS ->       [1:0] |       |   |--ATTRIBUTE -> ATTRIBUTE [1:6] |       |   |   |--HTML_TAG_NAME -> href2 [1:6] |       |   |   |--EQUALS -> = [1:11] |       |   |   `--ATTR_VALUE -> ""yo"" [1:12] |       |   `--END -> > [1:17] |       |--TEXT ->   [1:18] |       `--HTML_ELEMENT_END -> HTML_ELEMENT_END [1:19] |           |--START -> < [1:19] |           |--SLASH -> / [1:20] |           |--HTML_TAG_NAME -> a [1:21] |           `--END -> > [1:22] |--NEWLINE -> \r\n [1:23] `--EOF ->  [2:0] ```  Look at `ATTR_VALUE` at `[0:10]` it contains `\r` attached. This holds even for the `ParseTree` that ANTLR generates as much as it does for the `DetailNode` tree above. Don't know why ANTLR split `\r\n` like that, something is wrong. The definition of [`ATTR_VAL`](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L386-#L390) does **not** seem to be the cause of this.  Adding a `WS` after `*","open","antlr-javadoc,","voidfist","2017-08-17T12:08:29Z","2021-08-12T15:57:19Z"
"","4822","config: add more projects to Distelli CI","Build time is risen to 10 minutes 41 seconds which is still less then on Travis.","closed","","Vladlis","2017-07-25T13:37:12Z","2017-07-27T14:55:12Z"
"","4798","SummaryJavadoc: overlapping messages","Broken off from https://github.com/checkstyle/checkstyle/pull/4047#issuecomment-317188132 ,  SummaryJavadoc's messages need to be reviewed and possibly changes as they are now overlapping: > First sentence of Javadoc is incomplete (period is missing) or not present. Summary javadoc is missing.  We need to investigate ability to remove or not present.","closed","approved,","rnveach","2017-07-22T18:26:03Z","2017-08-06T02:50:29Z"
"","4800","SummaryJavadoc: remove INHERIT_DOC string field","Broken off from https://github.com/checkstyle/checkstyle/pull/4047#issuecomment-317188132 ,  Investigate the field INHERIT_DOC and see if it can be removed for matching against a token. https://github.com/checkstyle/checkstyle/blob/44efd238b3b23132bcfbe86440d82fbe87d28469/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java#L96","closed","approved,","rnveach","2017-07-22T18:30:09Z","2017-08-05T04:06:03Z"
"","4799","SummaryJavadoc: investigate methods of check","Broken off from https://github.com/checkstyle/checkstyle/pull/4047#issuecomment-317188132 ,  2 methods of SummaryJavadoc need to be investigated that are named as if they are returning the same contents so why do we need 2 of them.  `getSummarySentence` - https://github.com/checkstyle/checkstyle/blob/44efd238b3b23132bcfbe86440d82fbe87d28469/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java#L164 `getFirstSentence` - https://github.com/checkstyle/checkstyle/blob/44efd238b3b23132bcfbe86440d82fbe87d28469/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java#L226","open","approved,","rnveach","2017-07-22T18:28:49Z","2021-11-29T16:55:12Z"
"","4581","Reorganize token methods of all Checks","Broken off from https://github.com/checkstyle/checkstyle/issues/605 ,  > Acceptable >= Default >= Required  As explained from gitter: > getAcceptableTokens should call getRequiredTokens getRequiredTokens should call for return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN }; all other call getRequiredTokens  This change should be done to both Checkstyle and Sevntu on all checks.","closed","easy,","rnveach","2017-07-02T15:33:21Z","2018-01-06T06:04:12Z"
"","4582","Restore wercker CIs that have custom Checks","Broken off from #605 in commit 9135ea36c3d58dcf3cab24e680cff5d99e0f3a35 ,  3 wercker CIs had to be disabled to pass the build. We need to send PRs to them to be able to restore them to usage in our CI.  1) NoErrorTest - XWiki  2) NoErrorTest - Hibernate Search 3) NoErrorTest - checkstyle's sevntu","closed","miscellaneous,","rnveach","2017-07-02T15:36:43Z","2017-07-05T18:17:21Z"
"","4005","update google style coverage guide with note that checkstyle can not cover ""No static import for classes"" chapter","Based on the discussion at https://github.com/checkstyle/checkstyle/issues/3755#issuecomment-285851574 and according to Google Java Style Guide (3 November 2016 version) [3.3.4 No static import for classes](https://github.com/google/styleguide/commit/db0a26320f3e930c6ea7225ed53539b4fb31310c#diff-b6c9191ee5ccb7a5ef170e98e51d94d8R210) to cover the rule from the guide AvoidStaticImport should have a new option which will restrict the scope of validation only to static imports of nested classes. We should take into account that the guide says that the rule is applicable only to static **nested** classes.   **Should be taken into account during the implementation** To determine that there is an import of static nested class we can analyze import statement to find out whether it includes supposed nested class name.  For example, say we have the class MyClass which contains static nested class MyStaticNestedClass:  ```java package nested;  public class MyClass {     public static class MyStaticNestedClass {         public static void foo() {         }     } ```  Lets assume, that class MyTestClass imports static nested class MyStaticNestedClass:  ```java package main;  import static nested.MyClass.MyStaticNestedClass; // violation  public class Main {     public static void main(String[] args) {         MyStaticNestedClass.foo();     } } ```  We can check the import statement and extract the information about nested class. However, not only static nested classes can be imported this way, but also interfaces and enums. It means that we cannot say for sure that there is an import of static nested class.   **Option name and configuration** Option name: checkOnlyNestedClasses. Default value: false (to avoid breaking of backward compatibility).","closed","easy,","MEZk","2017-03-14T19:54:51Z","2017-03-19T00:19:54Z"
"","4006","NoLineWrap should validate lambdas","Based on the discussion at https://github.com/checkstyle/checkstyle/issues/3755#issuecomment-285851574 and according to [Google Java Style Guide (3 November 2016 version) ](https://github.com/google/styleguide/commit/db0a26320f3e930c6ea7225ed53539b4fb31310c#diff-b6c9191ee5ccb7a5ef170e98e51d94d8R422) to cover the rule from the guide NoLineWrap should validate lambdas. It means that LAMBDA should be included in a set of acceptable tokens and the check needs to treat LAMBDAS accordingly to Google Guide by default (as we cannot predict how users will wrap lambdas lets follow Google Guide by default).  Examples of expected behavior:  ```java (String label, Long value, Object obj) -> { // OK     ... }  Predicate predicate = str -> // OK     isReversed(str);  (String label) -> // violation (should not have new line next to the arrow in a lambda) {     ... } ```","open","","MEZk","2017-03-14T20:11:22Z","2017-03-15T18:46:28Z"
"","4624","Implement check state resetting for MT mode","Based on https://github.com/checkstyle/checkstyle/issues/4473#issuecomment-313149913  Some file-stateful checks clears state through the `clear` method of the field, e.g. [UnusedImportsCheck](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java#L100):      @Override     public void beginTree(DetailAST rootAST) {         collect = false;         imports.clear();         referenced.clear();     }  This works well for ST mode, but this approach cannot be used to clear check state in MT mode, because check clones will still hold the same reference. The code above should be rewritten as follows:      @Override     public void beginTree(DetailAST rootAST) {         collect = false;         imports = new HashSet<>();         referenced = new HashSet<>();     }  Also, in this issue a `OneCheckInstancePerThread` interface should be introduced to mark all file-stateful checks (see here https://github.com/checkstyle/checkstyle/issues/4473#issuecomment-309869446 for the interface explanations)  @rnveach @sabaka","closed","","soon","2017-07-05T18:40:25Z","2017-08-02T11:53:53Z"
"","4465","Rename LocalizedMessage to Violation","Based on https://github.com/checkstyle/checkstyle/issues/4419, AST node which caused a violation should be a part of LocalizedMessage. LocalizedMessage will become the class which stores all information about a violation. LocalizedMessage is an inappropriate name for the class. From my point of view, we need to rename the class to CheckstyleViolation.","closed","breaking compatibility,","MEZk","2017-06-18T09:10:55Z","2021-04-17T13:37:41Z"
"","4454","Fix wrong implementation of compareTo in LocalizedMessages","Based on https://github.com/checkstyle/checkstyle/issues/4409#issuecomment-308021518 and https://github.com/checkstyle/checkstyle/issues/4409#issuecomment-308231553, LocalizedMessages implements Comparable and overrides compareTo method. In the current implementation   ```java localizedMessage.compareTo(localizedMessage) == 0) == (localizedMessage.equals(localizedMessage) ```  will return false as 'compareTo' method does not take into account all fields which are used in 'equals'.   'compareTo' method should be fixed to follow the contract with equals.","open","approved,","MEZk","2017-06-14T14:14:01Z","2017-07-03T19:42:40Z"
"","4987","Fix documentation for minLineCount property in JavadocMethod","Based on discussion https://github.com/checkstyle/checkstyle/issues/4977#issuecomment-323967264 documentation for the property has to be changed to smth like `Minimal amount of lines in method to allow no documentation`.","closed","easy,","Vladlis","2017-08-22T15:58:33Z","2017-08-29T17:10:51Z"
"","4341","publish all dtd schemas to sourceforge site automatically","base on results #1571  we need find a way to copy dtd files to `target/site` folder during `mvn site -Pno-validations` command. Right now dtd files were copied by me manually ones before #1571 is merged, so we already have kind of outdated dtd files of our static website.","closed","miscellaneous,","romani","2017-05-07T23:59:41Z","2017-05-19T15:57:23Z"
"","4702","suppress NewlineAtEndOfFile on all internal javadoc files","base on reasonable point at https://github.com/checkstyle/checkstyle/pull/4697/commits/b94c6473f59be01ee79764b10ed65874d4897537#r126940483  all javadoc in our repository files should be skipped from radar of NewlineAtEndOfFile","closed","miscellaneous,","romani","2017-07-12T13:44:50Z","2017-07-12T15:34:21Z"
"","4578","config: print missed coverage during a coverage check","base on problems at #4573  it is non obvious for users how to resolve such problem, so we need to print parts of HTML report.","closed","","romani","2017-07-01T14:41:14Z","2017-07-01T15:40:09Z"
"","4092","ClassFanOutComplexity: count complexity base  annotations/extends/implements/methods params","base on https://github.com/checkstyle/checkstyle/pull/3924#issuecomment-288740206  https://checkstyle.org/config_metrics.html#ClassFanOutComplexity  Check need to consider type usage in: - annotations - extends and implements (as interfaces could have behavior from java8)  Examples need to be added to xdoc to show users what affects a calculation.","closed","has bounty,","romani","2017-03-23T21:49:52Z","2018-09-17T12:19:26Z"
"","4930","LocalizedMessage should use ModuleName in compareTo method","base on discussion at https://github.com/checkstyle/checkstyle/pull/4899#discussion_r131655519  LocalizedMessage.compareTo use ModuleId but does not use ModuleName ..... strange, ModuleName should be used","open","approved,","romani","2017-08-10T21:06:13Z","2021-03-15T01:57:09Z"
"","4986","remove DESCRIPTION node from see block tag and link, linkplain inline tags","base on [discussion at #4385](https://github.com/checkstyle/checkstyle/issues/4385#issuecomment-324025452).  `@see, @link, @linkplain`  actually are to have “label” and not description can be seen in oracle docs. Such tags should not have DESCRIPTION node.  current grammar for link, linkplain inline tags: https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4#L900 ``` | LINK_LITERAL (WS | NEWLINE | LEADING_ASTERISK)* reference description? | LINKPLAIN_LITERAL (WS | NEWLINE | LEADING_ASTERISK)* reference description? ```  current see tag: https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4#L874 `| SEE_LITERAL (WS | NEWLINE)* reference? (STRING | htmlElement)* (WS | NEWLINE)* description?`","open","antlr-javadoc,","romani","2017-08-22T13:38:10Z","2020-01-21T01:39:14Z"
"","4456","Disallowing user to use incomplete fully qualified Check names in config file","base on #4414 , #4387  code quality question was raised at https://github.com/checkstyle/checkstyle/pull/4430#pullrequestreview-43578041 , see discussion from thsi comment and down for details.  What to do: 1) no changes to functionality is expected , except for disallowing to user use names like `com.puppycrawl.tools.checkstyle.checks.naming.ConstantName`, if user use fully qualified name, it should be absolutely correct ! Expected fully qualified Check name is `com.puppycrawl.tools.checkstyle.checks.naming.ConstantNameCheck`  2) Additionally there should refactoring to avoid logic that is based on catching reflection exceptions.  We do have all information in collection like `thirdPartyNameToFullModuleNames` and `NAME_TO_FULL_MODULE_NAME` (at keys and values). So we could predict cases where will not have success to load class by reflection at `createObject`([code](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#L284))  It is expected to have code like below(deliver to user all possible classpath issues): ```     private Object createObject(String className) throws CheckstyleException {         Object instance = null;             try {                Class clazz = Class.forName(className, true, moduleClassLoader);                  final Constructor declaredConstructor = clazz.getDeclaredConstructor();                 declaredConstructor.setAccessible(true);                 instance = declaredConstructor.newInstance();             }             catch (final ReflectiveOperationException  | NoClassDefFoundError  ex) {                 throw new CheckstyleException(""Unable to instantiate "" + className, ex);             }         return instance; } ```  [code](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#L170): ```          if (instance == null) {             instance = createObject(name);         }         final String nameCheck = name + CHECK_SUFFIX;         if (instance == null) {             instance = createObject(nameCheck);         }         if (instance == null) {  ..... ``` should be extended to validate collection and call `createObject` only when we sure about success to load class.","closed","breaking compatibility,","romani","2017-06-14T21:49:30Z","2017-10-28T23:06:24Z"
"","4022","RightCurly: remove obsolete shouldStartLine property","base on #3919, #3920 , #3921 , #3922   Property `shouldStartLine` looks strange in design and conflicting with `option` property. `option` property if main property that have bigger priority and clearly define behavior.  `shouldStartLine` was added at https://github.com/checkstyle/checkstyle/commit/78e9ce870170ca3ef88fd78f8e0af0681c958eb3#diff-778fdd60391f2ca28a68b504829bfe82 to cover cases of single line IF statements.  But to cover single line statements we introduced recently new mode `alone_or_singleline` for `option`  property at https://github.com/checkstyle/checkstyle/commit/f1dced161ab0c818f0e1e125fc5b88b71f5b171e  So property `shouldStartLine` should be removed from Check ,  if user used `shouldStartLine=false` so user need to use `option=alone_or_singleline` http://checkstyle.sourceforge.net/property_types.html#rcurly .   It will be breaking compatibility update but this is ok, we have to do this.","closed","breaking compatibility,","romani","2017-03-16T13:09:17Z","2019-01-11T01:00:49Z"
"","4536","AST is inconsistent for annotation types with and without package","AST is inconsistent for annotation types with and without package. This will cause to NPE if MethodCountCheck is executed on TestClass.java without package declaration. Issue found during #4534 .  ``` $ cat TestClass.java  package com;  @interface TestClass {     String foo(); }  $ java -jar checkstyle-7.8.2-all.jar -t TestClass.java PACKAGE_DEF -> package [1:0] |--ANNOTATIONS -> ANNOTATIONS [1:8] |--IDENT -> com [1:8] `--SEMI -> ; [1:11] ANNOTATION_DEF -> ANNOTATION_DEF [3:0] |--MODIFIERS -> MODIFIERS [3:0] |--AT -> @ [3:0] |--LITERAL_INTERFACE -> interface [3:1] |--IDENT -> TestClass [3:11] `--OBJBLOCK -> OBJBLOCK [3:21]     |--LCURLY -> { [3:21]     |--ANNOTATION_FIELD_DEF -> ANNOTATION_FIELD_DEF [4:4]     |   |--MODIFIERS -> MODIFIERS [4:4]     |   |--TYPE -> TYPE [4:4]     |   |   `--IDENT -> String [4:4]     |   |--IDENT -> foo [4:11]     |   |--LPAREN -> ( [4:14]     |   |--RPAREN -> ) [4:15]     |   `--SEMI -> ; [4:16]     `--RCURLY -> } [5:0]  $ cat TestClass.java  @interface TestClass {     String foo(); }  $ java -jar checkstyle-7.8.2-all.jar -t TestClass.java ANNOTATION_DEF -> ANNOTATION_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |--AT -> @ [1:0] |--LITERAL_INTERFACE -> interface [1:1] |--IDENT -> TestClass [1:11] `--OBJBLOCK -> OBJBLOCK [1:21]     |--LCURLY -> { [1:21]     |--ANNOTATION_FIELD_DEF -> ANNOTATION_FIELD_DEF [2:4]     |   |--MODIFIERS -> MODIFIERS [2:4]     |   |--TYPE -> TYPE [2:4]     |   |   `--IDENT -> String [2:4]     |   |--IDENT -> foo [2:11]     |   |--LPAREN -> ( [2:14]     |   |--RPAREN -> ) [2:15]     |   `--SEMI -> ; [2:16]     `--RCURLY -> } [3:0] ```","closed","antlr,","romani","2017-06-27T05:46:17Z","2017-06-27T05:47:34Z"
"","4907","Pull #4907: disallow java.util.Comparator in import-control","As seen in https://github.com/checkstyle/checkstyle/pull/4899#discussion_r131524446 , using the class `java.util.Comparator` causes cobertura to drop the entire class from the code coverage report. It's use should be avoided to prevent the issue from happening again.","closed","miscellaneous,","Luolc","2017-08-07T08:45:14Z","2017-08-08T13:14:08Z"
"","4827","Incorrect tags allowed in singletonTag rule","As has been summarized here in [4448#issuecomment](https://github.com/checkstyle/checkstyle/issues/4448#issuecomment-317231986), [certain tags in singletonTag rule](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4#L785-#L799) are not allowed to be self-closing and that can be verified from the following line from HTML specification  >This error _([parse-error-non-void-html-element-start-tag-with-trailing-solidus](https://html.spec.whatwg.org/#parse-error-non-void-html-element-start-tag-with-trailing-solidus))_ occurs if the parser encounters a start tag for an element that is not in the list of void elements or is not a part of foreign content (i.e., not an SVG or MathML element) that has a U+002F (/) code point right before the closing U+003E (>) code point. The parser behaves as if the U+002F (/) is not present.  So these tags should be removed from singletonTag. To support parse error recovery as suggested in above statement or not can be discussed further.","closed","antlr,","voidfist","2017-07-26T01:24:31Z","2017-08-07T16:52:50Z"
"","4543","Cannot test Checkstyle on Windows (Cygwin or WSL)","As discussed in https://github.com/checkstyle/checkstyle/pull/4463#issuecomment-310078623 I'm not able to get Checkstyle's tests to pass on Windows. I've tried in both Cygwin and [WSL](https://msdn.microsoft.com/en-us/commandline/wsl) but run into a number of failures. I imagine they're issues with my system, given that the Windows CI is passing, but filing a separate issue seemed like a better option than having this discussion on the original pull request.  The full logs of `mvn -X test` are here: https://gist.github.com/dimo414/fbb7569970e9a2192d266e956d1f0a55  On Cygwin I see several failures related to AST parsing, such as:  ``` [ERROR] testParseFile(com.puppycrawl.tools.checkstyle.AstTreeStringPrinterTest)  Time elapsed: 0.002 s  <<< FAILURE! org.junit.ComparisonFailure: Generated AST from Java file should match pre-defined AST expected:<...DEF -> package [1:0][ |--ANNOTATIONS -> ANNOTATIONS [1:28] |--DOT -> . [1:28] |   |--DOT -> . [1:22] |   |   |--DOT -> . [1:11] |   |   |   |--IDENT -> com [1:8] |   |   |   `--IDENT -> puppycrawl [1:12] |   |   `--IDENT -> tools [1:23] |   `--IDENT -> checkstyle [1:29] `--SEMI -> ; [1:39] CLASS_DEF -> CLASS_DEF [4:0] |--MODIFIERS -> MODIFIERS [4:0] |--LITERAL_CLASS -> class [4:0] |--IDENT -> InputAstTreeStringPrinterComments [4:6] `--OBJBLOCK -> OBJBLOCK [4:40]     |--LCURLY -> { [4:40]     `--RCURLY -> } [6:0]] > but was:<...DEF -> package [1:0][ |--ANNOTATIONS -> ANNOTATIONS [1:28] |--DOT -> . [1:28] |   |--DOT -> . [1:22] |   |   |--DOT -> . [1:11] |   |   |   |--IDENT -> com [1:8] |   |   |   `--IDENT -> puppycrawl [1:12] |   |   `--IDENT -> tools [1:23] |   `--IDENT -> checkstyle [1:29] `--SEMI -> ; [1:39] CLASS_DEF -> CLASS_DEF [4:0] |--MODIFIERS -> MODIFIERS [4:0] |--LITERAL_CLASS -> class [4:0] |--IDENT -> InputAstTreeStringPrinterComments [4:6] `--OBJBLOCK -> OBJBLOCK [4:40]     |--LCURLY -> { [4:40] ]   `--RCURLY -> } [6:0] >         at com.puppycrawl.tools.checkstyle.AstTreeStringPrinterTest.testParseFile(AstTreeStringPrinterTest.java:64) ```  But I don't immediately see what's different between the actual and expected output.  On WSL the errors seem to be filesystem related, e.g.:  ``` [INFO] Running com.puppycrawl.tools.checkstyle.internal.AllChecksTest Jun 26, 2017 11:46:04 PM com.google.common.reflect.ClassPath$DefaultScanner scanDirectory WARNING: Cannot read directory /mnt/e/checkstyle/target/test-classes Jun 26, 2017 11:46:04 PM com.google.common.reflect.ClassPath$DefaultScanner scanDirectory WARNING: Cannot read directory /mnt/e/checkstyle/target/classes [ERROR] Tests run: 11, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 20.976 s <<< FAILURE! - in com.puppycrawl.tools.checkstyle.internal.AllChecksTest [ERROR] testAllCheckstyleMessages(com.puppycrawl.tools.checkstyle.internal.AllChecksTest)  Time elapsed: 3.751 s  <<< ERROR! java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.internal.AllChecksTest.verifyCheckstyleMessage(AllChecksTest.java:511)         at com.puppycrawl.tools.checkstyle.internal.AllChecksTest.testAllCheckstyleMessages(AllChecksTest.java:472) ```  But I'm not clear why these directories cannot be read; they're accessible to me:  ``` $ ls -l target total 141935 drwxrwxrwx 0 root root 4096 Jun 26 01:00 antrun -rwxrwxrwx 1 root root  588 Jun 26 23:45 ant_task_plain_output.txt -rwxrwxrwx 1 root root   87 Jun 26 23:46 cachefile-test drwxrwxrwx 0 root root 4096 Jun 26 01:00 classes drwxrwxrwx 0 root root 4096 Jun 26 01:00 generated-sources drwxrwxrwx 0 root root 4096 Jun 26 01:01 generated-test-sources -rwxrwxrwx 1 root root  557 Jun 26 23:45 log.xml drwxrwxrwx 0 root root 4096 Jun 26 01:00 maven-status drwxrwxrwx 0 root root 4096 Jun 26 23:44 surefire drwxrwxrwx 0 root root 4096 Jun 26 01:03 surefire-reports drwxrwxrwx 0 root root 4096 Jun 26 23:44 test-classes -rwxrwxrwx 1 root root    0 Jun 26 23:45 tokentypes.properties  $ ls -l target/classes total 12358 -rwxrwxrwx 1 root root   132 Jun 26 23:44 checkstylecompilation.properties -rwxrwxrwx 1 root root   856 Jun 26 01:00 checkstyle_packages.xml drwxrwxrwx 0 root root  4096 Jun 26 01:00 com -rwxrwxrwx 1 root root 11252 Jun 26 01:00 google_checks.xml -rwxrwxrwx 1 root root  6709 Jun 26 01:00 sun_checks.xml  $ wc target/classes/google_checks.xml   223   694 11252 target/classes/google_checks.xml ```","closed","","dimo414","2017-06-27T16:59:05Z","2017-06-30T12:15:37Z"
"","4391","Add a configurable timeout parameter to checkstyle","As a stopgap solution for #4390, and a potentially generally useful addition, would it be possible to add some kind of timeout controls to checkstyle, so that users could specify how long they were willing to wait for results? I don't much care whether it's done via command line flag(s) or configuration file properties; whichever is preferable to the checkstyle maintainers & developers is fine.  I see four potential granularities of control: total time for all the tests on all the code, total time for all the tests on a single file, total time for a particular test on all files, and total time for an individual test on an individual file.  This definitely interacts with the other issues I've seen planning on multithreaded support, and indeed might not even be easily doable without that infrastructure.","closed","","blerner","2017-05-30T23:03:23Z","2017-06-01T02:43:54Z"
"","4894","Prepare performance report for MT mode","As a result of MT mode implementation we need to have detailed report with comparison ST mode vs MT mode. Also would be awesome to have something about performance improvements after rewriting checks in MT mode.","open","approved,","sabaka","2017-08-03T20:35:30Z","2018-07-07T05:14:08Z"
"","4128","Expand missing testing for Checker tests","Apart from #3650 there are 5 UTs which call methods and do not verify any type of result.  1. [testNoModuleFactory](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java#L352) 2. [testFinishLocalSetupFullyInitialized](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java#L360) 3. [testSetupChildListener](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java#L388) 4. [testWithCacheWithNoViolation](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java#L490) 5. [testClearLazyLoadCacheInDetailAST](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java#L699)  The above mentioned tests are not related to PopertyCacheFile.","closed","approved,","MEZk","2017-03-30T19:26:12Z","2017-07-15T18:25:01Z"
"","4449","CheckstyleAntTask: substitude setConfig(File) with setConfig(String)","Ant's configUrl requires a full URL - relative paths don't work  Background in Issue #3119:  As I understand it, you should be able to specify a relative path (to a resource on the classpath) in the `configUrl` attribute of the Ant task. However I'm getting an error when I attempt to do so, and instead have to specify the full resource URL (`jar:file:PATH_TO_JAR!/PATH_TO_RESOURCE`), which is brittle and overspecified.  ---------------  ``` $ ant -version Apache Ant(TM) version 1.10.1 compiled on February 2 2017  $ hg diff diff -r 57a890e81233 build.xml --- a/build.xml Sat Jun 10 15:06:52 2017 -0700 +++ b/build.xml Tue Jun 13 09:18:42 2017 -0700 @@ -124,7 +124,7 @@              -       +                                  $ ant checkstyle Buildfile: /.../build.xml  init:  build:  build-test:  checkstyle:  BUILD FAILED /.../build.xml:127: java.net.MalformedURLException: no protocol: /google_checks.xml 	at java.net.URL.(URL.java:593) 	at java.net.URL.(URL.java:490) 	at java.net.URL.(URL.java:439) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) 	at org.apache.tools.ant.IntrospectionHelper$11.set(IntrospectionHelper.java:1206) 	at org.apache.tools.ant.IntrospectionHelper$AttributeSetter.setObject(IntrospectionHelper.java:1512) 	at org.apache.tools.ant.IntrospectionHelper.setAttribute(IntrospectionHelper.java:412) 	at org.apache.tools.ant.RuntimeConfigurable.maybeConfigure(RuntimeConfigurable.java:528) 	at org.apache.tools.ant.RuntimeConfigurable.maybeConfigure(RuntimeConfigurable.java:464) 	at org.apache.tools.ant.Task.maybeConfigure(Task.java:202) 	at org.apache.tools.ant.UnknownElement.configure(UnknownElement.java:200) 	at org.apache.tools.ant.UnknownElement.maybeConfigure(UnknownElement.java:164) 	at org.apache.tools.ant.Task.perform(Task.java:347) 	at org.apache.tools.ant.Target.execute(Target.java:435) 	at org.apache.tools.ant.Target.performTasks(Target.java:456) 	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1405) 	at org.apache.tools.ant.Project.executeTarget(Project.java:1376) 	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41) 	at org.apache.tools.ant.Project.executeTargets(Project.java:1260) 	at org.apache.tools.ant.Main.runBuild(Main.java:857) 	at org.apache.tools.ant.Main.startAnt(Main.java:236) 	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:287) 	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:113)  Total time: 0 seconds ```  Checkstyle runs successfully without this local mod (i.e. with the fully-qualified URL). I see this same error on both OSX and Windows.","closed","breaking compatibility,","dimo414","2017-06-13T16:26:34Z","2017-06-27T13:30:33Z"
"","4830","Update all AbstractChecks to log DetailAST","All AbstractChecks should use [log(DetailAST ast, String key, Object... args)](https://github.com/MEZk/checkstyle/blob/475ec106d6192f311758471b7fed4359bf9eb180/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java#L246-L246) method to log DetailAST.   lineNo, columnNo, and tokenType should be retrieved from DetailAST and passed to LocalizedMessage.  This issue is blocked by: https://github.com/checkstyle/checkstyle/issues/4419","closed","breaking compatibility,","MEZk","2017-07-26T16:36:42Z","2018-05-08T23:28:43Z"
"","4089","JavadocVariable: add ""allowedAnnotations"" property","Akin to the `allowedAnnotations` property on JavadocMethod, I would like to suppress the `JavadocVariable` warning for fields that have a given annotation.  For example, with a configuration: ```xml           ```  I would expect the following behavior: ```java @Property public static final int TIMEOUT = 5; // no violation  /** Contains the name. */ public static String NAME = ""Test""; // no violation  public static int TIMEOUT = 30; // violation ```","open","javadoc,","ljacqu","2017-03-23T08:53:57Z","2017-09-02T22:24:00Z"
"","4342","upgrade maven-pmd-plugin to version 3.8","after upgrade we have  these violations: ``` [INFO] --- maven-pmd-plugin:3.8:check (default) @ checkstyle --- [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:403 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:418 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:419 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:423 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:425 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:429 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:435 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:436 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:446 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:455 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:472 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:492 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:495 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader:497 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser:131 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:317 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:322 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:327 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:332 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:373 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:374 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:375 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:377 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:378 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:379 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:380 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:399 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:403 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:408 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:411 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:411 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:425 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PropertyCacheFile:310 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PropertyCacheFile:311 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PropertyCacheFile:312 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PropertyCacheFile:331 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PropertyCacheFile:332 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PropertyCacheFile:332 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask$FormatterType:643 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask$FormatterType:643 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask$Formatter:696 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AutomaticBean$RelaxedStringArrayConverter:338 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.AutomaticBean$RelaxedAccessModifierArrayConverter:362 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.FileContents:326 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.AbstractDeclarationCollector:109 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.AbstractDeclarationCollector:116 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.AbstractDeclarationCollector:164 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.AbstractDeclarationCollector:221 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck:302 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck:175 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck:198 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck:199 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck:224 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:176 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:204 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:221 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:222 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:222 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:233 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:234 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:234 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:248 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:249 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:249 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:259 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:271 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:272 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:282 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:283 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:283 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:292 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:293 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:294 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:305 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:306 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck:307 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:212 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:233 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:239 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:265 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:269 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:270 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:271 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:275 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:277 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:283 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:300 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck:308 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck$ScopeState:385 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck:356 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:231 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:245 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:254 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:255 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:269 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:295 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:298 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:302 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:346 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:375 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:378 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:383 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:457 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:467 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:471 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:501 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:505 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:535 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:541 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:542 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck:544 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck$ScopeData:710 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck$ScopeData:712 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck:438 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.MultipleStringLiteralsCheck:177 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.MultipleStringLiteralsCheck:178 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck:336 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck:394 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck:111 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck:114 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck:128 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck:129 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck:130 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck:131 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck:132 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck:134 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck:179 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck:182 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck:197 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:617 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:618 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:624 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:625 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:628 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:640 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:643 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:645 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:667 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:668 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:669 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:714 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:909 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:923 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:925 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:948 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:949 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:961 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:961 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:966 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:966 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:971 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck:972 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck:155 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck:202 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck:221 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck:260 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagContinuationIndentationCheck:99 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo:92 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo:104 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo:116 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo:154 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo:166 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo:178 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo:219 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo:279 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo:303 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.SummaryJavadocCheck:171 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck$FileContext:278 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck$ClassContext:424 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck$ClassContext:426 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck$ClassContext:439 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck$ClassContext:442 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck$ClassContext:459 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck$ClassContext:464 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck$ClassContext:465 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck$ClassContext:468 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions$Builder:141 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions$Builder:153 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions$Builder:164 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions$Builder:175 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions$Builder:186 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions$Builder:197 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions$Builder:208 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions$Builder:219 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions$Builder:228 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions$Builder:228 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions$Builder:229 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions$Builder:229 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck:140 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck:149 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck:151 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck:153 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck:155 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck:157 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck:491 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck:552 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck:232 Rule:InefficientEmptyStringCheck Priority:3 String.trim().length()==0 is an inefficient way to validate an empty String.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag:312 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag:312 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag:314 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag:319 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag:319 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag:323 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag:323 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyCommentFilter$Tag:333 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag:326 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag:326 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag:328 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag:333 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag:333 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag:339 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag:339 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag:341 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag:346 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.filters.SuppressionCommentFilter$Tag:346 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.MainFrame$FileSelectionAction:162 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.MainFrame$ReloadAction:182 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.TreeTable:107 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.TreeTable:119 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.TreeTable$TreeTableCellEditor:251 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.TreeTable$TreeTableCellEditor:283 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.TreeTable$TreeTableCellEditor:288 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.TreeTableModelAdapter$UpdatingTreeModelListener:142 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.TreeTableModelAdapter$UpdatingTreeModelListener:147 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.TreeTableModelAdapter$UpdatingTreeModelListener:152 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.gui.TreeTableModelAdapter$UpdatingTreeModelListener:157 Rule:AccessorMethodGeneration Priority:3 Avoid autogenerated methods to access private fields and methods of inner / outer classes. ```","closed","miscellaneous,","romani","2017-05-09T03:24:33Z","2017-06-29T21:24:17Z"
"","4783","config: restore sevntu on wercker","after sevntu release 1.24.2","closed","","romani","2017-07-20T12:47:17Z","2017-07-20T13:12:05Z"
"","4896","Add documentation on how to design checks in MT modes","After project is finished no one except few people which were following project progress will know we have MT mode in checkstyle. SOme docs about possible check types and recommendations to design should be added.","open","approved,","sabaka","2017-08-03T21:11:23Z","2018-07-07T05:14:04Z"
"","4409","Add MultiThread Checker implementation","After investigation @soon found, that most time consuming part of checkstyle was AST parsing and walking. We have to launch it in parallel after #4370 finished.","open","approved,","sabaka","2017-06-02T04:58:20Z","2019-03-30T14:19:58Z"
"","4086","RightCurlyCheck: split option into 2 properties","After discussing with @romani on [right curly options for `RightCurlyCheck`]( http://checkstyle.sourceforge.net/property_types.html#rcurly) when reviewing https://github.com/checkstyle/checkstyle/issues/4085#issuecomment-288577541 and how documentation for them should be expanded, it has become apparent that the rules are not so simple to fit into 3 values for a single property.  ```` $ cat TestClass.java public class Test {     public void demo() {         if (true) {doSmth();}         if (true) {doSmth();} else {doSmthElse();}         if (true) {             doSmth();         }         if (true) {             doSmth();     }         if (true) {             doSmth();         } else {             doSmthElse();         }     }      void doSmth() {}     void doSmthElse() {} }  $ cat TestConfig.xml                                                         $ java -jar checkstyle-7.6-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:9:27: '}' at column 27 should have line break before. [RightCurly] Audit done. Checkstyle ends with 1 errors. ````  As example shows, there is no consistency in how brace should be validated. Should it require `\n}`, `}\n`, or allowed to be all single line? As it stands now, our own checkstyle config will allow in bad examples if we don't see them first. IMO, `RightCurlyCheck` should control every aspect of the curlies placement.  I propose we split `option` into 2 properties to control the placement before and after the `}`. I propose the names `beforeOption` and `afterOption`. `beforeOption` will have the values `alone` and `singleline`. `afterOption` will have the values `alone` and `same`. I don't think `beforeOption` needs `same` as I can't imagine anyone writing like that. All my examples use `if` and `if-else` to show single block, multiple-blocks, and demonstrate behavior of conditional-multiblocks. Examples can apply to any other token like `try`/`catch`, etc.  `alone` means `\n` should come before or after curly. 'after' is only considered if it has a multi-block statement after it as documented further down. `if (condition) { }` violation for alone before `if (condition) { \n}` ok for alone before `if (condition) { \n test(); }` violation for alone before `if (condition) { } else {` violation for alone after `if (condition) { } \n else {` ok for alone after  `same` means `\n` should not come after curly. 'after' is only considered if it has a multi-block statement after it as documented further down. `if (condition) { }` ok for same after `if (condition) { } else {` ok for same after `if (condition) { } \n else {` violation for same after  `singleline` means `\n` should not come before the right curly unless it is not on the same line as the left curly. If it is not on the same line, it will behave as `alone`. `if (condition) { }` ok for singleline `if (condition) { \n}` ok for singleline `if (condition) { \n test(); }` violation for singleline  For `afterOption`, it is connected to the next multi-block statement (Ex: `else` of `if`, `catch` of `try`). If there is no next multi-block statement (`if` with no `else`) and no continuation of the current statement, it will specifically default to `alone` and allow nothing after it. `beforeOption` has no connection to what comes before it except for `singleline` option as described above. Examples: `if (condition) { } int i = 5;` 1 violation using any value of `afterOption`. `if (condition) { }\n` ok with any value of `afterOption`. `if (condition) { } else {` 1 violations with `alone` on `afterOption`. ok with `same`. `if (condition) { }\n else {` 1 violations with `same` on `afterOption`. ok with `alone`. ````     Thread t = new Thread(new Runnable() {     }); // violation on 'alone' on 'afterOption', ok on 'same'. This is considered ""continuation of the current statement"". ````  I finally propose that any changes we make to `RightCurlyCheck` should be mirrored in `LeftCurlyCheck`. This part could be done in a separate issue. I am just mentioning it so we don't forget.","open","","rnveach","2017-03-23T02:05:15Z","2018-06-26T01:10:11Z"
"","4178","Add LAMBDA in RightCurly to google_checks","After #3546 is fixed LAMBDA has to be added to google_checks.xml  The problem is specified here: https://github.com/checkstyle/checkstyle/pull/3969#issuecomment-292750251  > google do not mention formatting of anonymous classes and nested lambdas. We need to open issue against guide , and probably against https://github.com/google/google-java-format for details.","closed","","Vladlis","2017-04-09T16:47:24Z","2018-06-19T04:36:03Z"
"","4868","minor: Added links to new test supports in BaseCheckTestSupport","Adds links to new tests supports `AbstractPathTestSupport`, `AbstractModuleTestSupport` and `AbstractTreeTestSupport` in `BaseCheckTestSupport` as it no longer supported and has become deprecated.","closed","","subkrish","2017-07-31T08:11:07Z","2017-08-01T13:15:44Z"
"","4357","DesignForExtension and javadoc comment","According to documentation here http://checkstyle.sourceforge.net/config_design.html#DesignForExtension   > ATTENTION: If the method which can be overridden in a subclass has a javadoc comment (a good practise is to explain its self-use of overridable methods) the check will not rise a violation.  However, is not clear what javadoc comment such method must contain. When I start my javadoc with ""This implementation ..."" this check any way gives error.","closed","","PashaTurok","2017-05-15T18:49:01Z","2017-05-15T23:28:31Z"
"","4676","move AbstractTypeAwareCheck and ClassResolver to javadoc package","AbstractTypeAwareCheck is deprecated and used only in javadoc Checks for now. it is required to move all that deprecated functionality close to almost deprecated javadoc Checks that are not based on AST.","closed","breaking compatibility,","romani","2017-07-09T15:23:07Z","2017-08-06T02:52:39Z"
"","4869","Implement a class to clone checks for MT mode","A check cloning service is required to use checks in different threads. In this issue the following classes and interfaces should be created:  1. CheckCloneService - the main class for creating check clones 1. OneCheckInstancePerThread - the marker interface for thread local checks 1. OneCheckInstancePerApplication - the marker interface for global-stateful and stateless checks","open","approved,","soon","2017-07-31T18:49:03Z","2019-03-30T14:20:37Z"
"","4824","skipCurrentTokenConsuming makes Character Position in line incorrect by 1","`JavadocLexer.g4` uses `seek` method from `ANTLRInputStream` in `skipCurrentTokenConsuming` at [JavadocLexer.g4#L35](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L35). As the [documentation says](http://www.antlr.org/api/Java/org/antlr/v4/runtime/ANTLRInputStream.html#seek(int)):  > consume() ahead until p==index; can't just set p=index as we must update line and charPositionInLine. If we seek backwards, just set [p](http://www.antlr.org/api/Java/org/antlr/v4/runtime/ANTLRInputStream.html#p)  And you can see here what documentation means by it as `seek` just sets `p` which can be seen here in [ANTLRInputStream.java#L192-#L202](https://github.com/antlr/antlr4/blob/master/runtime/Java/src/org/antlr/v4/runtime/ANTLRInputStream.java#L192-#L202)  The following javadoc trees help exhibit this bug  $ cat test.javadoc ``` *@see A://www.something.com ```  $ java -jar checkstyle-8.1-SNAPSHOT-all-master.jar -j test.javadoc  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--JAVADOC_TAG -> JAVADOC_TAG [0:1] |   |--SEE_LITERAL -> @see [0:1] |   |--WS ->   [0:5] |   |--REFERENCE -> REFERENCE **[0:6]** |   |   `--CLASS -> A **[0:6]** |   `--DESCRIPTION -> DESCRIPTION **[0:8]** |       `--TEXT -> ://www.something.com **[0:8]** `--EOF ->  [0:28] ```  $ cat test2.javadoc ``` *@see a://www.something.com ```  $ java -jar checkstyle-8.1-SNAPSHOT-all-master.jar -j test2.javadoc ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--JAVADOC_TAG -> JAVADOC_TAG [0:1] |   |--SEE_LITERAL -> @see [0:1] |   |--WS ->   [0:5] |   `--DESCRIPTION -> DESCRIPTION **[0:7]** |       `--TEXT -> a://www.something.com **[0:7]** `--EOF ->  [0:28] ```  In `JavadocLexer`'s  `seeLink` mode when `CHAR` is encountered, a call to `skipCurrentTokenConsuming` is made at [JavadocLexer.g4#L138](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L138). This results in `charPositionInLine` to increase by 1 which is not corrected for either by method `seek` or by method `skipCurrentTokenConsuming`.   This behaviour can be seen when `a` in `a://www.something.com` is treated as `CHAR` and in the resultant javadoc tree the Column Number for `DESCRIPTION` is `7` even though it is at the same position as `A`, which is recognized as `CLASS` and is at `column 6`, in `A://www.something.com`.  This behavior can also be observed in just tree 1 in which `DESCRIPTION` should start at `column 7` but starts at `column 8` rather.  Either we should specify this bug in doc or try to extend `ANTLRInputStream` and override the call to `seek` and correct it somehow.","open","antlr-javadoc,","voidfist","2017-07-25T14:47:36Z","2021-08-12T15:57:47Z"
"","4113","maven-linkcheck-plugin giving false negatives on report","`doxia-linkcheck` and in turn `maven-linkcheck-plugin` and  have issues where the report will give false negative results.","open","approved,","trajano","2017-03-28T15:20:51Z","2017-03-28T15:23:11Z"
"","4541","Remove deprecated Check class","`AbstractCheck` was created in issue https://github.com/checkstyle/checkstyle/issues/2551 . We were planning to remove it in version 7. We are now in version 8 and we forgot that it should be removed. We will remove it now.","closed","breaking compatibility,","rnveach","2017-06-27T14:08:35Z","2017-06-27T16:21:30Z"
"","4070","IndentationCheck fails for chained method calls","```sh /var/tmp $ javac Main.java ``` ```java /var/tmp $ cat Main.java  import java.nio.file.Path; public class Main {      void foo(Path destpath, Path sourcePath) {          destpath .resolve(sourcePath.subpath(0,1)) //indent:0 exp:12 warn             .resolve(sourcePath.subpath(0,1));     } }  ``` ```xml /var/tmp $ cat config.xml                                                             ``` ```sh /var/tmp $ java -jar checkstyle-7.6-all.jar -c config.xml Main.java  Starting audit... Audit done. ``` ---------------  Expected error for L5 as the indentation should have been 12. This problem seems to be line with #3802 . The code for [MethodCallHandler](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java) is not able to handle complex ast structures. Currently it only requires these children in order `SLIST` `EXPR` `METHOD_CALL` for the check to work. I don't know for sure whether or not the problem is regarding the AbstractExpressionHandler's methods or the way these methods are called from MethodCallHandler.  I have 2 approach in mind for this. - 1. We go through some example codes and figure out different cases and then apply a fix for each of these. 2. Redesign MethodCallHandler completely. Find a common pattern from an example having exhaustive possibilities of method calls. Though I don't know how complex this could get.  Please advice","open","indentation,","kukreja-vikramaditya","2017-03-21T13:55:25Z","2022-01-30T11:09:07Z"
"","4425","IllegalType does not seem to handle multidimensional array types","```` /var/tmp $ javac TestClass.java [no output]  /var/tmp $ cat TestClass.java  public class TestClass {     private Boolean x;     private Boolean[] x1;     private Boolean[][] x2; // NO violation }  /var/tmp $ cat config.xml                                                /var/tmp $ java -jar checkstyle-7.8.1-all.jar -c config.xml TestClass.java  Starting audit... [ERROR] /var/tmp/TestClass.java:2:13: Declaring variables, return values or parameters of type 'Boolean' is not allowed. [IllegalType] [ERROR] /var/tmp/TestClass.java:3:13: Declaring variables, return values or parameters of type 'Boolean' is not allowed. [IllegalType] Audit done. Checkstyle ends with 2 errors.  ```` ---------------  I was expecting it to flag the variable of type Boolean[][].  The code for IllegalTypeCheck.java doesn't seem to handle Multidimensional array types properly.  --------------","closed","easy,","kevin-wayne","2017-06-06T10:20:25Z","2017-09-22T12:12:44Z"
"","4777","RequireThisCheck: Use and declare a local variable with same name as class variable cause a NPE","```` /var/tmp $ javac LocalVariableSwitch.java   /var/tmp $ cat LocalVariableSwitch.java  public class LocalVariableSwitch {     private String aVariable;      public String aMethod(int val) {         switch (val) {             case 0:                 String aVariable = """";                                  if (this.aVariable != null) {                     aVariable = this.aVariable;                 }                                  return aVariable;             default:                 return null;         }     } }  /var/tmp $ cat config.xml                          /var/tmp $ java -jar checkstyle-8.0-all.jar -c config.xml LocalVariableSwitch.java  Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing LocalVariableSwitch.java 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:430) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:362) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:177) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.isUserDefinedArrangementOfThis(RequireThisCheck.java:511) 	at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.getClassFrameWhereViolationIsFound(RequireThisCheck.java:485) 	at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.getFieldWithoutThis(RequireThisCheck.java:318) 	at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.processIdent(RequireThisCheck.java:270) 	at com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck.visitToken(RequireThisCheck.java:231) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:368) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:505) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:310) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:182) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286) 	... 4 more Checkstyle ends with 1 errors. ````  ---------------  Declare and use a local variable with the same name as a class variable in a switch cause a NPE. It's ok (no NPE), if the local variable is declared outside the switch.","closed","approved,","elehuitouze","2017-07-20T10:15:58Z","2017-07-31T06:35:42Z"
"","4417","3rd party root modules not finding by simple name","```` $ javac -cp ""checkstyle-7.8-all.jar"" com/puppycrawl/tools/checkstyle/TestRootModule.java  $ cat com/puppycrawl/tools/checkstyle/TestRootModule.java package com.puppycrawl.tools.checkstyle;  public class TestRootModule extends Checker { }  $ jar -cf MyCustom.jar com/puppycrawl/tools/checkstyle/TestRootModule.class  $ javac TestClass.java  $ cat TestClass.java public class TestClass {     void method() {     } }  $ cat TestConfig.xml            $ java -classpath MyCustom.jar;checkstyle-7.8-all.jar com.puppycrawl.tools.checkstyle.Main -c TestConfig.xml TestClass.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: Unable to instantiate 'TestRootModule' class, it is also not possible to instantiate it as com.puppycrawl.tools.checkstyle..TestRootModule, TestRootModuleCheck, com.puppycrawl.tools.checkstyle..TestRootModuleCheck. Please recheck that class name is specified as canonical name or read how to configure short name usage http://checkstyle.sourceforge.net/config.html#Packages. Please also recheck that provided ClassLoader to Checker is configured correctly.     at com.puppycrawl.tools.checkstyle.PackageObjectFactory.createModule(PackageObjectFactory.java:166)     at com.puppycrawl.tools.checkstyle.Main.getRootModule(Main.java:449)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:416)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Checkstyle ends with 1 errors. ````  Make key note to the packages it is trying to instantiate them by. They all have double periods. This is preventing custom root modules from being instantiated.  Checkstyle 7.7 doesn't have double periods and works fine. This was most likely broken by Issue #3607 . ```` $ java -classpath MyCustom.jar;checkstyle-7.7-all.jar com.puppycrawl.tools.checkstyle.Main -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  [Our test didn't pick this up because it uses a full class path to load the module](https://github.com/checkstyle/checkstyle/blob/45d5f97b47f6b392ac0170914d1776deae2005af/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java#L804).  As a side note, the list of packages it tries for the check is very limited, most likely because it doesn't even load the list from the `checkstyle_packages.xml` file.","closed","approved,","rnveach","2017-06-04T01:47:04Z","2017-06-12T22:51:51Z"
"","4058","RightCurly: false negative in ALONE and anonymous classes","```` $ cat TestClass.java public class TestClass {   void method() {      new Object() { @Override protected void finalize() { """".toString(); }  int b = 10; };   } }  $ cat TestConfig.xml                                                                      $ java -jar checkstyle-7.6-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:3:74: '}' at column 74 should be alone on a line. [RightCurly] Audit done. Checkstyle ends with 1 errors. ```` 74 is a position of `}` for method `finalize` Expected: 2 violations on line 3 (column 74 and 89). 89 is a position of `}` for anonymous class;  ` }  int b = 10; }` this two `}` should be violated. Note that shouldStartLine (false, true) does not affect the logic. So the problem is in shouldBeAloneOnLine.","closed","hard,","MEZk","2017-03-19T14:15:25Z","2022-02-17T01:16:00Z"
"","4607","Violations should print ID and observe them as unique","```` $ cat TestClass.java public class TestClass {     void method() { int test = 0;     } }  $ cat TestConfig.xml                                 $ java -jar checkstyle-8.0-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:3:5: Variable 'test' should be declared final. [FinalLocalVariable] Audit done. Checkstyle ends with 1 errors. ````  Since I have 2 instances defined each with their own unique ID, I expect 2 violations defining which instance produced the violation. Example: ```` [ERROR] TestClass.java:3:5: Variable 'test' should be declared final. [1] [ERROR] TestClass.java:3:5: Variable 'test' should be declared final. [2] ````  XML output must be updated too to show the `id`.  This change is required for regression-tool to have multiple instances in one configuration. With all modules in 1 config, we should see less execution time then if we were using multiple configurations. We need a way to identify violations with the module instance that is defined. `patch-diff-report-tool` will probably need changes to recognize this change too.","closed","approved,","rnveach","2017-07-04T15:26:10Z","2017-08-10T21:15:03Z"
"","4059","RightCurly: Update logic for option ALONE and ALONE_OR_SINGLELINE to support annonymous classes handling without shouldStartLine","```` $ cat TestClass.java public class RightCurlyTest {     public class TestClass {         void method() {             Thread t = new Thread() {@Override public void run() {                     int a; int b;} // line 5             };         }     } }  $ cat TestConfig.xml                                                                                    $ java -jar checkstyle-7.6-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  If shoudlStartLine = true there will be a violation on line for ALONE and ALONE_OR_SINGLELINE. Expected: violation in both cases (shoudlStartLine = true and shoudlStartLine = false).","closed","approved,","MEZk","2017-03-19T14:57:01Z","2017-04-23T06:09:39Z"
"","4138","ImportControl: can't disallow class of an allowed package","```` $ cat TestClass.java package test;  import java.util.Calendar; import java.util.Date;  public class TestClass {     public void test() {         new Date();         Calendar.getInstance();     } }  $ cat TestConfig.xml                                                      $ cat import_control.xml     	  	   $ java -jar checkstyle-7.6-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  I am expecting a violation on line 4. I want to be able to allow an entire package except for some specific classes in that package. I expect the disallow to take precedence because the class is more specific than the package.","closed","","rnveach","2017-03-31T22:14:55Z","2018-03-23T21:38:26Z"
"","4207","RequireThis: False positive for lambda parameters","```` $ cat TestClass.java class InputAllowLocalVars {      private String s1 = ""foo1"";      void foo1() {         final java.util.List strings = new java.util.ArrayList<>();             strings.add(""foo1"");             strings.stream().filter(s1 -> s1.contains(""f""))             .collect(java.util.stream.Collectors.toList());     } }  $ cat TestConfig.xml                                                             $ java -jar checkstyle-7.6.1-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:8:37: Reference to instance variable 's1' needs ""this."". [RequireThis] [ERROR] TestClass.java:8:43: Reference to instance variable 's1' needs ""this."". [RequireThis] Audit done. Checkstyle ends with 2 errors. ````  http://rveach.no-ip.org/checkstyle/checkstyle.php?action=view&config=2b75d3a2ecffeba47690e0416ccd9906&code=c5b8991fb27367d9bfbf7d120993a7cb&checkstyle=checkstyle-7.6.1-all.jar&printTree=  ---------------------------- Expected: no violations as ```this``` cannot be used for ```s1``` on line 8 and column 37 (compile time error); ```s1``` on line 8 and column 43 is a lambda parameter and it does not make sense to prefix it with ```this```.  Note, that if ```validateOnlyOverlapping``` is set to true, the violations disappear.","closed","medium,","MEZk","2017-04-12T20:27:30Z","2017-05-23T13:02:55Z"
"","4606","UnusedImportsCheck does not detect parameter types in javadoc block tags","``` /var/tmp $ javac InputUnusedImportWithBlockMethodParameters.java  [no output]  /var/tmp $ cat InputUnusedImportWithBlockMethodParameters.java  package com.puppycrawl.tools.checkstyle.checks.imports.unusedimports;  import java.util.Collection; import java.util.concurrent.ExecutorService; import java.util.concurrent.TimeUnit;  public class InputUnusedImportWithBlockMethodParameters {  /**  * @see ExecutorService#invokeAll(Collection, long, TimeUnit)  */     public int calculate() {         return 0;     } }  /var/tmp $ cat config.xml                             /var/tmp $ java -jar checkstyle-8.0-all.jar -c config.xml InputUnusedImportWithBlockMethodParameters.java  Starting audit... [ERROR] /private/var/tmp/InputUnusedImportWithBlockMethodParameters.java:3:8: Unused import - java.util.Collection. [UnusedImports] [ERROR] /private/var/tmp/InputUnusedImportWithBlockMethodParameters.java:5:8: Unused import - java.util.concurrent.TimeUnit. [UnusedImports] Audit done. Checkstyle ends with 2 errors. ``` ---------------  This should not be an error.  `UnusedImportCheck` fails to find `Collection` and `TimeUnit` in the javadoc. If these classes are unreferenced by the code, the imports are reported as unused.  This style works fine for inline javadoc tags (`{@link ExecutorService#invokeAll(Collection, long, TimeUnit)}`) but the difference in how [block](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java#L259) and [inline](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java#L255) tags are parsed means method parameter types aren't found for block tags.","closed","approved,","silentj","2017-07-04T15:18:19Z","2017-07-11T00:41:42Z"
"","4219","UnusedImports doesn't recognize imports shadowed by inner interfaces","``` /var/tmp $ javac HelloWorld.java  /var/tmp $ cat HelloWorld.java import java.util.List; import java.util.Set;  public class HelloWorld {      // This shadows the java.util.Set import     private interface Set {     } }  /var/tmp $ cat config.xml                         /var/tmp $ java -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java Starting audit... [ERROR] /var/tmp/HelloWorld.java:1:8: Unused import - java.util.List. [UnusedImports] Audit done. Checkstyle ends with 1 errors.  ``` ---------------  The included HellowWorld class has two `UnusedImports` violations - `java.util.List` and `java.util.Set`. The `java.util.List` violation is indeed reported, but the `java.util.Set` violation isn't, presumably because it's shadowed by the inner interface `Set`. They should both be reported.  The same behavior was observed with Checkstyle 7.6.1 and 7.6, did not check earlier versions.","closed","medium,","mureinik","2017-04-15T09:53:09Z","2021-01-18T00:35:57Z"
"","4338","ImportOrder: make imports ordering as in Eclipse","``` /var/tmp $ javac -cp lombok.jar Test.java ```  ``` /var/tmp $ cat Test.java import lombok.val; import lombok.experimental.FieldDefaults;  @FieldDefaults(makeFinal = true) class Test {         void main() {                 val value = 5;         } } ``` ``` /var/tmp $ cat checkstyle.xml                                                                                                                            ``` ``` /var/tmp $ java -jar checkstyle-7.7-all.jar -c checkstyle.xml Test.java Starting audit... [ERROR] /var/tmp/Test.java:2: Wrong order for 'lombok.experimental.FieldDefaults' import. [ImportOrder] Audit done. Checkstyle ends with 1 errors. ```  Expected: no violations for Eclipse users (Neon.3 Release (4.6.3)).  Relates to https://github.com/checkstyle/checkstyle/issues/3101  Eclipse style sorting order - compare package names, then class names. See [ImportOrderCheck.compareContainerOrder()](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java#L565) ""lombok"" should be before ""lombok.experimental"".","open","approved,","HSerg","2017-05-04T23:26:18Z","2018-04-17T00:03:31Z"
"","4085","RightCurly: update documentation for singleline statements with SAME option","``` $ cat TestClass.java public class TestClass {     void method() {         if (true) { getClass(); int i; }     } }  $ cat TestConfig.xml                                                         $ java -jar checkstyle-7.6-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ```  Expected: violation on `IF`  This issue is reproducible with the other multiblock statements as well.  If this behaviour is by design, then documentation should be extended. http://checkstyle.sourceforge.net/config_blocks.html#RightCurly","closed","miscellaneous,","Vladlis","2017-03-22T21:31:10Z","2017-04-05T12:56:46Z"
"","4091","RightCurly: False negative on multiblock tokens with ALONE_OR_SINGLELINE option","``` $ cat TestClass.java public class TestClass {     void method() {         if (true) {             getClass();}     } }  $ cat TestConfig.xml                                                      $ java -jar checkstyle-7.6-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ``` Expected: violation on `IF` Issue is reproducible with other multiblock tokens as well (for, while...)","closed","medium,","Vladlis","2017-03-23T19:01:32Z","2017-04-05T14:21:54Z"
"","4937","Drop CDATA support in javadoc grammar","`` is supported in javadoc grammar that we have. But trying to execute javadoc tool on  ``` /**  * This is   * @see test2#method1 label  */ public class test2 {  	public String b;   	public int method1() {} }  ```  generates the following output from the tool ``` Loading source file test2.java... Constructing Javadoc information... Standard Doclet version 1.8.0_102 Building tree for all the packages and classes... Generating .\test2.html... test2.java:2: error: malformed HTML  * This is             ^ test2.java:2: error: bad use of '>'  * This is                            ^ Generating .\package-frame.html... Generating .\package-summary.html... Generating .\package-tree.html... Generating .\constant-values.html... Building index for all the packages and classes... Generating .\overview-tree.html... Generating .\index-all.html... Generating .\deprecated-list.html... Building index for all classes... Generating .\allclasses-frame.html... Generating .\allclasses-noframe.html... Generating .\index.html... Generating .\help-doc.html... 2 errors ```  The tree generated by checkstyle for this input separately recognizes CDATA in javadoc and gives out no error as which can be seen below: ``` CLASS_DEF -> CLASS_DEF [5:0] |--MODIFIERS -> MODIFIERS [5:0] |   |--BLOCK_COMMENT_BEGIN -> /* [1:0] |   |   |--COMMENT_CONTENT -> *\r\n * This is \r\n * @see test2#method1 label\r\n  [1:2] |   |   |   `--JAVADOC -> JAVADOC [1:3] |   |   |       |--NEWLINE -> \r\n [1:3] |   |   |       |--LEADING_ASTERISK ->  * [2:0] |   |   |       |--TEXT ->  This is  [2:2] |   |   |       |--CDATA ->  [2:11] |   |   |       |--NEWLINE -> \r\n [2:27] |   |   |       |--LEADING_ASTERISK ->  * [3:0] |   |   |       |--WS ->   [3:2] |   |   |       |--JAVADOC_TAG -> JAVADOC_TAG [3:3] |   |   |       |   |--SEE_LITERAL -> @see [3:3] |   |   |       |   |--WS ->   [3:7] |   |   |       |   |--REFERENCE -> REFERENCE [3:8] |   |   |       |   |   |--PACKAGE -> test2 [3:8] |   |   |       |   |   |--HASH -> # [3:13] |   |   |       |   |   `--MEMBER -> method1 [3:14] |   |   |       |   |--WS ->   [3:21] |   |   |       |   `--DESCRIPTION -> DESCRIPTION [3:22] |   |   |       |       |--TEXT -> label [3:22] |   |   |       |       |--NEWLINE -> \r\n [3:27] |   |   |       |       `--TEXT ->   [4:0] |   |   |       `--EOF ->  [4:1] |   |   `--BLOCK_COMMENT_END -> */ [4:1] |   `--LITERAL_PUBLIC -> public [5:0] |--LITERAL_CLASS -> class [5:7] |--IDENT -> test2 [5:13] `--OBJBLOCK -> OBJBLOCK [5:19]     |--LCURLY -> { [5:19]     |--VARIABLE_DEF -> VARIABLE_DEF [7:1]     |   |--MODIFIERS -> MODIFIERS [7:1]     |   |   `--LITERAL_PUBLIC -> public [7:1]     |   |--TYPE -> TYPE [7:8]     |   |   `--IDENT -> String [7:8]     |   |--IDENT -> b [7:15]     |   `--SEMI -> ; [7:16]     |--METHOD_DEF -> METHOD_DEF [10:1]     |   |--MODIFIERS -> MODIFIERS [10:1]     |   |   `--LITERAL_PUBLIC -> public [10:1]     |   |--TYPE -> TYPE [10:8]     |   |   `--LITERAL_INT -> int [10:8]     |   |--IDENT -> method1 [10:12]     |   |--LPAREN -> ( [10:19]     |   |--PARAMETERS -> PARAMETERS [10:20]     |   |--RPAREN -> ) [10:20]     |   `--SLIST -> { [10:22]     |       `--RCURLY -> } [10:23]     `--RCURLY -> } [11:0] ```  Also, running the javadoc tool on the input I mentioned, one can check that the site generated only contains the phrase `This is` rather than This is ``  So `CDATA` recognition should be taken out from javadoc grammar.","closed","antlr-javadoc,","voidfist","2017-08-11T19:40:58Z","2020-05-29T15:11:09Z"
"","4843","TreeWalkerFilter needs to be added to ModuleReflectionUtils","[We identify everything inside ModuleReflectionUtils.](https://github.com/checkstyle/checkstyle/blob/ddeb553834f10570089a033fa1ac1501b74ac358/src/main/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtils.java#L72-L77) However, we didn't add `TreeWalkerFilter` to it, so it will never be recognized as one of our modules.  It must be added to ModuleReflectionUtils and verified it is picked up everywhere. Without it listed, we will have bugs similar to #4742.","closed","approved,","rnveach","2017-07-28T17:37:13Z","2017-07-31T06:39:43Z"
"","4876","internal code: terminolozy problems in ModuleReflectionUtils","[ModuleReflectionUtils](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtils.java).   There is method ```     public static boolean isCheckstyleCheck(Class clazz) {         return AbstractCheck.class.isAssignableFrom(clazz); } ```  Check is term that is used for both FileSet modules and TreeWalker modules. [JavadocPackageCheck](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java) is also a Check but this method return false on it. This is found during codereview at [TreeWalkerTest.testWithCheckNotHavingTreeWalkerAsParent](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java#L142)","closed","miscellaneous,","romani","2017-08-01T12:20:59Z","2017-12-08T14:50:10Z"
"","4860","config: remove skipping sevntu checks","@romani we forgot to restore sevntu after PR #4755 .","closed","","rnveach","2017-07-31T00:34:55Z","2017-07-31T03:28:04Z"
"","4147","Modified InputLocalFinalVariableName.java and move to its test files to subdir","1. test code modified. 2. bug fixed. 3. all unit test passed.","closed","","kuri-leo","2017-04-03T05:40:53Z","2017-04-21T10:37:29Z"
"","4146","Modified LocalFinalVariableNameCheckTest.java and move its tests to subdir","1. `LocalFinalVariableNameTestCheck.java` has been modified, 2. Its tests have been moved to the `localfinalvariablename` folder and renamed them into regular way.","closed","","kuri-leo","2017-04-03T04:11:59Z","2017-04-03T05:25:41Z"
"","4877","refactoring in configs","1) remove build.xml  2) put comment to catalog.xml to explain a reason of this file  3) ant-phase-compile.xml generate only tokentypes.properties and it is required only in jars, can we do this (execute docklet) by maven ?","closed","miscellaneous,","romani","2017-08-01T13:45:03Z","2019-02-21T06:00:51Z"
"","4472","EmptyBlock: NPE on annotation declaration","/var/tmp $ javac YOUR_FILE.java ... no errors ... /var/tmp $ cat YOUR_FILE.java ```java package com.cb4.common.annotations;                                                                                                                                                                                                                                                                                                                                                                                                     import java.lang.annotation.Documented;                                                                                                                                                                             import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target;  @Retention(RetentionPolicy.RUNTIME) @Target({ ElementType.METHOD }) @Documented public @interface Identity {     String name() default """"; } ``` /var/tmp $ cat config.xml  ```xml                                              ```  /var/tmp $ java -jar checkstyle-7.8.2-all.jar -c config.xml YOUR_FILE.java  ``` Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing com/cb4/common/annotations/Identity.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck.findLeftCurly(EmptyBlockCheck.java:246)         at com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck.visitToken(EmptyBlockCheck.java:142)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:370)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:507)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:312)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:184)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Checkstyle ends with 1 errors. ``` ---------------  I upgraded from 7.6 to 7.8.2 and simply ran checkstyle via Maven plugin version 2.17. *Note:* version 7.6 succeeds without a problem. I have tested this with 7.7 and it happens there as well - 7.6.1 passed","closed","approved,","lgoldstein","2017-06-20T08:47:47Z","2017-07-04T14:30:54Z"
"","4112","Checkstyle will crash if special unicode notation is used","/var/tmp $ javac YOUR_FILE.java  Nothing  /var/tmp $ cat YOUR_FILE.java  ``` java package test; /**  * Comment.  * @author user  *  */ public class TestClass {     /**      * Comment.      */     public void \u039cFoo() {         System.out.println(""bar"");     } } ```  /var/tmp $ cat config.xml  https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/sun_checks.xml  /var/tmp $ java -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java  D:\Entwicklung\EclipseWorkspace\Test\src\test>java -jar checkstyle-7.6.1-all.jar -c sun_checks.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:293)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:211)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: TokenStreamRecognitionException occurred during the analysis of file TestClass.java.         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:187)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:314)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:284)         ... 4 more Caused by: D:\Entwicklung\EclipseWorkspace\Test\src\test\TestClass.java:11:17: unexpected char: '\'         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaLexer.nextToken(GeneratedJavaLexer.java:405)         at antlr.TokenStreamHiddenTokenFilter.consume(TokenStreamHiddenTokenFilter.java:38)         at antlr.TokenStreamHiddenTokenFilter.nextToken(TokenStreamHiddenTokenFilter.java:134)         at antlr.TokenBuffer.fill(TokenBuffer.java:69)         at antlr.TokenBuffer.LA(TokenBuffer.java:80)         at antlr.LLkParser.LA(LLkParser.java:52)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3231)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:2542)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:634)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:556)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:389)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:202)         at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:439)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:174)         ... 7 more Checkstyle ends with 1 errors.  ---------------  I would expect that checkstyle can handle the \uXXXX notation and warns the user about this kind of notation in the source code.  --------------  Still not clear ??? - see example - http://checkstyle.sourceforge.net/report_issue.html#How_to_report_a_bug","closed","","Lesurglesum","2017-03-28T14:36:04Z","2017-03-28T14:54:58Z"
"","4766","SummaryJavadoc: false positive with @inheritDoc","/var/tmp $ javac TestMap.java  /var/tmp $ cat TestMap.java ``` interface MyMap {     /**     * Puts a new key-value pair into the map. If this map already contains     * a mapping for the specified key, overwrites the old value with the specified value.     *     * @param key a storage key     * @param value a storage value to associate with the key     * @throws IllegalArgumentException if some property of the key or the value prevents it     *                                  from being stored in this map     */     void put(int key, int value); }  public class TestMap implements MyMap {          /**     * {@inheritDoc}     *     * @param key a proof map key, must be non-negative     * @param value a storage value to associate with the key, must be a power of two     * @throws IllegalArgumentException if the size of the key is negative; or the value is not a power of two     */     public void put(int key, int value) {         // no-op     } } ``` /var/tmp $ cat config.xml ```                                                               ```  /var/tmp $ java -jar checkstyle-8.0-all.jar -c config.xml TestMap.java ``` Starting audit... [ERROR] /home/dmitry/Documents/checkstyle-bug/TestMap.java:17: First sentence of Javadoc is incomplete (period is missing) or not present. [SummaryJavadoc] Audit done. Checkstyle ends with 1 errors. ``` ---------------  Almost the same as #2805: I expect to see _no_ errors, since the inherited Javadoc has a correct first sentence.  --------------","closed","javadoc,","dmitry-timofeev","2017-07-19T16:27:01Z","2017-07-19T18:06:14Z"
"","4479","MissingOverride rule does not seem to work","/var/tmp $ javac pkg/SomeInterface.java ... no messages...  /var/tmp $ cat pkg/SomeInterface.java ```java package pkg;  public interface SomeInterface {     int getOrder();      class DefaultImpl implements SomeInterface {         public DefaultImpl() {             super();         }          // Missing @Override         public int getOrder() {             return -1;         }     } } ``` /var/tmp $ cat config.xml ```xml``` /var/tmp $ java -jar ~/workspace/checkstyle-7.8.2-all.jar -c ~/workspace/C-B4-Server/checkstyle-cb4.xml pkg/SomeInterface.java  Starting audit... Audit done.  /var/tmp $ java -version java -version openjdk version ""1.8.0_91"" OpenJDK Runtime Environment (build 1.8.0_91-b14) OpenJDK 64-Bit Server VM (build 25.91-b14, mixed mode) --------------- I expected the check to fail since `getOrder` method is missing the required `@Override` annotation and the rule is activated (my JVM is 1.8.0_91) --------------","closed","","lgoldstein","2017-06-21T10:22:11Z","2017-06-21T19:22:20Z"
"","4935","Indentation: Wrong indentation for nested annotations","/var/tmp $ javac InputIndentationAnnotationScopeIndentationCheck.java /var/tmp $ cat InputIndentationAnnotationScopeIndentationCheck.java  ``` @AssociationOverride(name = ""id.tenant"", //indent:0 exp:0     joinColumns = @JoinColumn(name = ""tenant_id"", nullable = false)) //indent:4 exp:4 @AssociationOverrides( { //indent:0 exp:0     @AssociationOverride(name = ""id.tenant"", //indent:4 exp:4         joinColumns = @JoinColumn(name = ""tenant_id"", nullable = false))}) //indent:8 exp:8 public class InputIndentationAnnotationScopeIndentationCheck { //indent:0 exp:0 } //indent:0 exp:0  @interface AssociationOverrides { //indent:0 exp:0     AssociationOverride[] value(); //indent:4 exp:4 } //indent:0 exp:0 @interface AssociationOverride { //indent:0 exp:0     String name(); //indent:4 exp:4     JoinColumn joinColumns(); //indent:4 exp:4 } //indent:0 exp:0 @interface JoinColumn { //indent:0 exp:0     String name(); //indent:4 exp:4     boolean nullable(); //indent:4 exp:4 } //indent:0 exp:0 ``` /var/tmp $ cat config.xml                                 /var/tmp $ java -jar checkstyle-8.1-all.jar -c config.xml InputIndentationAnnotationScopeIndentationCheck.java  Starting audit... [ERROR] /Users/arne/Documents/projects/checkstyle/bug/InputIndentationAnnotationScopeIndentationCheck.java:5: 'joinColumns' has incorrect indentation level 8, expected level should be 4. [Indentation] Audit done. Checkstyle ends with 1 errors.  ---------------  In the sample, when I use @AssociationOverride directly and line-break before joinColumns and indent it, checkstyle does not complain, when I indent joinColumns. When I use @AssociationOverride within @AssociationOverrides and line-break before joinColumns and indent it, checkstyle complains about wrong indentation. I would expect no error here.  --------------","open","indentation,","ArneLimburg","2017-08-11T15:00:00Z","2018-03-18T19:30:31Z"
"","4037","FinalClass: If you follow the checkstyle hint, the code breaks.","/var/tmp $ javac Foo.java /var/tmp $ cat Foo.java ``` /**  * Foo is a simple test.  */ public final class Foo {      /**      * Test.      */     private class Test {          /**          * Create a new instance.          */         private Test() {         }     }      /**      * Test 2.      */     private class Test2 extends Test {     }  } ``` /var/tmp $ cat digital_checks.xml  ```                        ``` /var/tmp $ java -Duser.language=en -jar checkstyle-7.6-all.jar -c digital_checks.xml Foo.java ``` Starting audit... [ERROR] /home/hneemann/temp/checkstyle/Foo.java:9: Class Test should be declared as final. [FinalClass] Audit done. Checkstyle ends with 1 errors. ```  ---------------  The class `Test` can not be final because `Test2` inherits from `Test`.  There should be no error at all. If you decare Test as final, the code does not compile anymore.  --------------","closed","medium,","hneemann","2017-03-18T10:18:43Z","2021-12-22T06:12:40Z"
"","4846","SuppressWarnings triggers RedundantModifier check on enum constructor","/var/tmp $ javac Foo.java  /var/tmp $ cat Foo.java ````java package com.checkstyletest;  /**  * Insert javadoc.  */ public enum Foo {     A(1, 2, 3, 4, 5);      private final int a;     private final int b;     private final int c;     private final int d;     private final int e;      @SuppressWarnings(""checkstyle:parameternumber"")     Foo(final int a, final int b, final int c, final int d, final int e) {         this.a = a;         this.b = b;         this.c = c;         this.d = d;         this.e = e;     } } ```` /var/tmp $ cat config.xml ````xml                                                                                        ````  Output: ``` /var/tmp $ java -jar checkstyle-8.1-all.jar -c config.xml Foo.java  Starting audit... [ERROR] /var/tmp/Foo.java:15:5: Redundant 'ANNOTATION' modifier. [RedundantModifier] Audit done. Checkstyle ends with 1 errors. ```  ---------------  I wanted to suppress the checkstyle error for 'too many parameters' on the enum constructor, so I added the `@SuppressWarnings(""checkstyle:parameternumber"")` but with this annotation checkstyle now warns with RedundantModifier because of the annotation. I would expect that a `@SuppressWarnings` should not trigger the RedundantModifier warning.  --------------","closed","approved,","marcelmore","2017-07-29T00:56:05Z","2017-08-10T20:37:45Z"
"","4977","Missing Javadoc warning","/var/tmp $ javac CheckstyleTest .java  NO OUTPUT  /var/tmp $ cat CheckstyleTest .java  import java.util.logging.Logger;  public class CheckstyleTest {    private static final Logger LOGGER         = Logger.getLogger(""CheckstyleTest"");    private Object someThing;     private static final CheckstyleTest INSTANCE = new CheckstyleTest();    public static CheckstyleTest getInstance() {     return INSTANCE;   }    public void bindSomething(final Object someThing) {     LOGGER.fine(""bind someting "" + someThing);     INSTANCE.someThing = someThing;   }    public void unbindSomething(final Object someThing) {     if (INSTANCE.someThing == someThing) {       LOGGER.fine(""unbind something "" + someThing);       INSTANCE.someThing = null;     }   } }  /var/tmp $ cat config.xml  __[This is google check configuration]__  ``````  /var/tmp $ java -jar checkstyle-8.1-all.jar -c /google_checks.xml CheckstyleTest.java  Beginne Pr├╝fung... [WARN] CheckstyleTest.java:23:3: Es fehlt ein Javadoc-Kommentar. [JavadocMethod] Pr├╝fung beendet.   ---------------  Describe what you expect in detail.  If there is a missing javadoc tag in line 23 (unbindSomeThing) then I expect also a warning in line 18 (bindSomeThing) for a missing javadoc tag. Or I expect that there is no warning in line 18.","closed","","Naxos84","2017-08-21T12:44:52Z","2017-08-22T13:22:13Z"
"","4156","Issue #4144: Modified LocalFinalVariableNameCheckest.java and move its tests to subdir","//I did every step again to make sure that I followed the requirements in Issue #3891 and PR rules  this is in response of the Issue #4144  changes including: 1. move the test files of LocalFinalVariableName to subdir and rename them. 2. change code in LocalFinalVariableNameCheckest to adapt the path.  Results:  1. All unit tests passed. 2. the result of `mvn clean verify` -> `Tests run: 103, Failures: 0, Errors: 0, Skipped: 0`  I'm sorry for my closing of PR #4146 and #4147 For the first, I found my mistake and wanted to reduce your work, so I cloesd my pull request. But for the second, I found that I named my branch incorrectly then I deleted it, but my request was closed automatically.  I'm terriablly sorry for my violation of the PR rules and please forgive me.","closed","","kuri-leo","2017-04-04T17:07:05Z","2017-04-21T10:47:16Z"
"","4209","Adding IDEA project files to gitignore and excluding them from checkstyle list","**Intellij IDEA** generates `checkstyle.ipr` and `checkstyle.iws` files which are not excluded from checkstyle list, that causes verification to be failed.  Files `checkstyle.ipr` and `checkstyle.iws` are not specified in **gitignore** file.","closed","miscellaneous,","timurt","2017-04-13T03:09:07Z","2017-05-17T04:06:04Z"
"","4954","IllegalImport: does not warn about static imports","* Given:     ```xml                                 ``` * When:     ```java     import org.testng.AssertJUnit;     ``` * Then:     ```     [INFO] --- maven-checkstyle-plugin:2.17:check (run-checkstyle) @ fulfillment-vrs ---     [INFO] There is 1 error reported by Checkstyle 8.1 with /some/path/target/checkstyle-rules.xml ruleset.     [ERROR] some/path/Test.java:[8,1] (imports) IllegalImport: Illegal import - org.testng.AssertJUnit.     ``` * But when     ```java     import static org.testng.AssertJUnit.assertEquals;     ``` * Then no violation is reported.  Can `IllegalImport` be extended to support static imports, or should I use some other kind of check?","open","","Stephan202","2017-08-17T11:07:28Z","2019-11-20T17:40:22Z"
"","4453","Indentation handled differently on overwritten methods","* `javac Indentation.java`  ```text ```  (compiled without error)  * `cat Indentation.java`  ```Java  import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target;  public class Indentation {      public abstract static class Base {         /**          * Demo.          *          * @param bar dummy          * @return dummy          */         public abstract @NonNull T foo(final Object bar);     }      public static class NonChild {         /**          * Demo.          *          * @param bar dummy          * @return dummy          */         public @NonNull Long foo( // Force line break                 final Object bar) {             return Long.valueOf(bar.hashCode() & 0xFFFFFFFFL);         }     }      public static class Child extends Indentation.Base {         @Override         public @NonNull Long foo( // Force line break                 final Object bar) {             return Long.valueOf(bar.hashCode() & 0xFFFFFFFFL);         }     }      @Documented     @Retention(RetentionPolicy.RUNTIME)     @Target({ ElementType.TYPE_USE, ElementType.TYPE_PARAMETER })     public @interface NonNull {     }  } ```  * `cat config.xml`  ```XML                                                                      ```  * `java -jar checkstyle-7.8.1-all.jar -c config.xml Indentation.java`  ```text Starting audit... [WARN] /home/maggu2810/workspace/checkstyle/demo/src/Indentation.java:35: 'public' has incorrect indentation level 8, expected level should be 16. [Indentation] Audit done. ```  ---------------  * It should not make any difference for the indentation check if the method overrides another one or does not override one. * I don't see the wrong indentation at all.","closed","indentation,","maggu2810","2017-06-14T11:52:26Z","2020-10-04T19:10:47Z"
"","4390","Javadoc comments containing unescaped Java code with generic types leads to enormous parsing times","(Split off from #3332 as requested)  The following code leads to enormous parsing times.  It is derived from an actual student-written homework, where the student had commented out a `@Test` method because it wasn't working...but used `/** ... **/` instead of `/* ... */`.  Since we use checkstyle as a component of our auto-grading setup, we need the checks to run automatically and quickly (and not DDoS other students by tying up the server resources). ```java class DontCare { /**   @Test   public void someTestMethod() {     List x = makeAList();     List x = makeAList();     ...add more copies of this line to make the runtime worse...     feefiefoefum     feefiefoefum     ...and add more copies of this line, too.   } **/ } ``` The problem stems from the Javadoc parser seeing `` and thinking it's an HTML tag, rather than Java code (because it's not marked off by `{@code ... }`), and therefore looking for the matching close tag.  My hunch is there's something in the parser that's forcing a backtracking search, rather than a more efficient table-driven search, and triggering pathological ANTLR behavior.  As far as I can tell: * You need at least two `List` lines before the parser performance chokes. * With ~20 lines of ""feefiefoefum"", each additional `List` line adds ~2 seconds to the parse time. * With more lines of ""feefiefoefum"", the runtime grows accordingly. * With more `List` lines, the runtime seems to grow superlinearly, though I couldn't tell exactly how badly. * If I replace every `List` with `List?Foo?`, so that the text is identical in length but contains nothing that looks like unclosed HTML tags, the runtime is ~ 1sec (including the startup time of my surrounding application, so, basically instantly). * Interleaving `List` lines with `List?Foo?` lines doesn't much seem to matter: it seems like runtime is growing as a function of the number of `List` lines and the total length of the comment, not the position of the what-appear-to-be-unclosed-tags within the comment.  Per https://github.com/checkstyle/checkstyle/issues/3332#issuecomment-302589230, this might be related to #3727 -- but unlike that issue, which tried running Javadoc checkstyle rules on a purely .java file and so could be plausibly ruled out as user error, this one is asking to run Javadoc checkstyle rules on a Java file that happens to have a Javadoc comment with egregiously weird contents.  (I'm happy to call this one student error, too...but it's student error that means I can't use checkstyle any more.)","closed","antlr,","blerner","2017-05-30T16:03:34Z","2017-08-21T13:16:19Z"
"","4213","minor: remove redundant line in .gitignore","'.nondex/*' is covered by '.nondex'","closed","","Luolc","2017-04-13T15:14:42Z","2017-04-13T19:27:17Z"
"","4633","Checkstyle parsing fails for complex annotations supported by Lombok","$ wget -q https://projectlombok.org/downloads/lombok-1.16.4.jar $ javac -cp lombok-1.16.4.jar C.java $ cat C.java ```java // simplified from https://github.com/TheLQ/pircbotx/blob/406a0f98a94693a2c8037d82f450e1400bfe767d/src/main/java/org/pircbotx/hooks/events/PrivateMessageEvent.java class C extends D { // D added just to compile with two annotations     @lombok.Getter(onMethod = @__(@Override, @Deprecated)) // need two (different) annotations!     int i; } abstract class D { abstract int getI(); } // D added just to compile ``` $ cat config.xml ```                ``` $ java -jar checkstyle-8.0-all.jar -c config.xml C.java ``` Starting audit... /tmp/C.java:3:44: expecting RPAREN, found ',' /tmp/C.java:3:57: unexpected token: ) com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing C.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:430)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:362)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:177) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: MismatchedTokenException occurred during the analysis of file C.java.         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:199)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Caused by: /tmp/C.java:5:1: expecting EOF, found '}'         at antlr.Parser.match(Parser.java:211)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:211)         at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:446)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:179)         ... 7 more Checkstyle ends with 1 errors. ``` --------------- The parsing problems that eventually lead to the exception start from `@__(@Override, @Deprecated)`, which the Lombok annotation processor can process fine, without requiring `@__({@Override, @Deprecated})`.","closed","antlr,","denizarsan","2017-07-06T04:28:34Z","2018-02-20T02:43:44Z"
"","4701","JavadocMethod: No error for a misplaced javadoc tag","$ javac TestClass.java  $ cat TestClass.java ``` package test;  public class TestClass {    /**    * Method description.    *    * @param foo    *        Parameter description. @return Error is expected here.    */   public int method(int foo) {     return foo;   } } ``` $ cat TestConfig.xml  ```                                 ``` $ java -jar checkstyle-8.0-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done.  $ java -jar checkstyle-8.0-all.jar -J TestClass.java ``` PACKAGE_DEF -> package [1:0] |--ANNOTATIONS -> ANNOTATIONS [1:8] |--IDENT -> test [1:8] `--SEMI -> ; [1:12] CLASS_DEF -> CLASS_DEF [3:0] |--MODIFIERS -> MODIFIERS [3:0] |   `--LITERAL_PUBLIC -> public [3:0] |--LITERAL_CLASS -> class [3:7] |--IDENT -> TestClass [3:13] `--OBJBLOCK -> OBJBLOCK [3:23]     |--LCURLY -> { [3:23]     |--METHOD_DEF -> METHOD_DEF [11:2]     |   |--MODIFIERS -> MODIFIERS [11:2]     |   |   |--BLOCK_COMMENT_BEGIN -> /* [5:2]     |   |   |   |--COMMENT_CONTENT -> *\n   * Method description.\n   *\n   * @param foo\n   *        Parameter description. @return Error is expected here.\n    [5:4]     |   |   |   |   `--JAVADOC -> JAVADOC [5:5]     |   |   |   |       |--NEWLINE -> \n [5:5]     |   |   |   |       |--LEADING_ASTERISK ->    * [6:0]     |   |   |   |       |--TEXT ->  Method description. [6:4]     |   |   |   |       |--NEWLINE -> \n [6:24]     |   |   |   |       |--LEADING_ASTERISK ->    * [7:0]     |   |   |   |       |--NEWLINE -> \n [7:4]     |   |   |   |       |--LEADING_ASTERISK ->    * [8:0]     |   |   |   |       |--WS ->   [8:4]     |   |   |   |       |--JAVADOC_TAG -> JAVADOC_TAG [8:5]     |   |   |   |       |   |--PARAM_LITERAL -> @param [8:5]     |   |   |   |       |   |--WS ->   [8:11]     |   |   |   |       |   |--PARAMETER_NAME -> foo [8:12]     |   |   |   |       |   |--NEWLINE -> \n [8:15]     |   |   |   |       |   `--DESCRIPTION -> DESCRIPTION [9:0]     |   |   |   |       |       |--LEADING_ASTERISK ->    * [9:0]     |   |   |   |       |       |--TEXT ->         Parameter description. @return Error is expected here. [9:4]     |   |   |   |       |       |--NEWLINE -> \n [9:66]     |   |   |   |       |       `--TEXT ->     [10:0]     |   |   |   |       `--EOF ->  [10:3]     |   |   |   `--BLOCK_COMMENT_END -> */ [10:3] ```  $ javadoc TestClass.java Loading source file TestClass.java... Constructing Javadoc information... Standard Doclet version 1.8.0_131 Building tree for all the packages and classes... Generating ./test/TestClass.html... TestClass.java:11: warning: no @return   public int method(int foo) {              ^  The javadoc tag is present, but not in the right place. As usual, the bug is related to the regex based parsing of java doc comments.","closed","javadoc,","pbludov","2017-07-12T07:16:25Z","2017-11-28T20:39:25Z"
"","4593","Indentation: possible false errors after a real one","$ javac TestClass.java  $ cat TestClass.java  ``` package test;  public class TestClass {          @Override       // [OK] 'method def modifier' has incorrect indentation level 8, expected level should be 4.     public String         toString() {    // [Why?] 'toString' has incorrect indentation level 8, expected level should be 12.          return null;     }          @Override       // [OK] 'method def modifier' has incorrect indentation level 8, expected level should be 4.     public boolean equals(         Object b) {     // [Why?] 'Object' has incorrect indentation level 8, expected level should be 12.          return false;     } }  ```  $ cat TestConfig.xml  ```                          ```  ```` $ java -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java  k$ java -jar checkstyle-8.0-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:5: 'method def modifier' has incorrect indentation level 8, expected level should be 4. [Indentation] [ERROR] TestClass.java:7: 'toString' has incorrect indentation level 8, expected level should be 12. [Indentation] [ERROR] TestClass.java:12: 'method def modifier' has incorrect indentation level 8, expected level should be 4. [Indentation] [ERROR] TestClass.java:14: 'Object' has incorrect indentation level 8, expected level should be 12. [Indentation] Audit done. Checkstyle ends with 4 errors. ````  There should be only two indentation errors. Bad indentation on an annotation implies a false bad indentation on method name or parameter.  It is not a real bug: correction of the indentation of the annotation also ""corrects"" the next (false) error.","closed","indentation,","pbludov","2017-07-03T07:01:42Z","2017-07-11T02:03:41Z"
"","4157","WhitespaceAround: Add support for varargs","$ javac Test.java  $ cat Test.java ``` public class Test {     public static void main(String... args) {} // Would like to have a violation here } ``` Actually, we need opposite of https://github.com/checkstyle/checkstyle/issues/3718","closed","easy,","pbludov","2017-04-05T06:51:08Z","2017-09-14T01:15:04Z"
"","4625","EmptyLineSeparator raises violations when static import right after plain import","$ javac StaticImportViolation.java  $ cat StaticImportViolation.java  ``` import java.math.BigDecimal; import static java.lang.Math.abs;  public class StaticImportViolation { } ```  $ cat config.xml  ```                 ```  $ java -jar checkstyle-8.0-all.jar -c config.xml StaticImportViolation.java  ``` Starting audit... [ERROR] StaticImportViolation.java:2: 'import' should be separated from previous statement. [EmptyLineSeparator] Audit done. Checkstyle ends with 1 errors. ```  ---------------  I do not expect any violation,.  --------------  Reason is that we check for tokentype to be the same for sibling - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java#L437   `STATIC_IMPORT != IMPORT` so there is a violation. Some users keep static imports separately from other imports, most IDEs do this, it is also supported by our ImportOrder check - http://checkstyle.sourceforge.net/config_imports.html#ImportOrder . Adding `STATIC_IMPORT` to acceptable tokens will not resolve problem, as we need to know in code that we need to treat them as the same tokens.   UPDATE: no new option is required. Formating/Order/.... of imports is target of http://checkstyle.sourceforge.net/config_imports.html#ImportOrder Check. Solution is to make `astType != nextToken.getType()` as `nextToken.getType() != IMPORT || nextToken.getType() != STATIC_IMPORT` , we already process imports as one block , so we just need to treat import-static as part of same group.","closed","easy,","liscju","2017-07-05T19:14:26Z","2018-07-04T03:20:37Z"
"","4564","JavadocStyleCheck crashes for some Javadoc comments with HTML comments","$ javac C.java  $ javadoc C.java > /dev/null; echo $? # even Javadoc raises no warnings, although the resulting C.html has an unbalanced comment ``` 0 ``` $ cat C.java ```java // simplified from https://github.com/BaseXdb/basex/blob/909ead894070416fad83164c8170efd288719dee/basex-core/src/main/java/org/basex/build/BuildText.java public class C {     /** DTD:               ``` $ java -jar checkstyle-7.8.2-all.jar -c config.xml C.java ``` Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing C.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: java.lang.ArrayIndexOutOfBoundsException: 1         at com.puppycrawl.tools.checkstyle.checks.javadoc.TagParser.skipHtmlComment(TagParser.java:217)         at com.puppycrawl.tools.checkstyle.checks.javadoc.TagParser.parseTags(TagParser.java:99)         at com.puppycrawl.tools.checkstyle.checks.javadoc.TagParser.(TagParser.java:57)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.checkHtmlTags(JavadocStyleCheck.java:351)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.checkComment(JavadocStyleCheck.java:214)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.visitToken(JavadocStyleCheck.java:152)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:370)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:507)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:312)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:184)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Checkstyle ends with 1 errors. ``` ---------------  The Javadoc comment has an unbalanced HTML comment, but Javadoc does not complain, whereas Checkstyle crashes with an uncaught exception.               closedjavadoc,                 denizarsan                2017-06-30T19:38:49Z               2019-02-21T06:28:05Z                                             4563               TodoCommentCheck overflows the stack for files with many comments               $ { echo ""class C {""; for i in {00000..30000}; do echo ""// ""$i; done; echo ""}""; } > C.java  $ javac C.java  $ cat config.xml ```               ``` $ java -jar checkstyle-7.8.2-all.jar -c config.xml C.java 2>log ``` Starting audit... ``` $ head log ``` Exception in thread ""main"" java.lang.Error: Error was thrown while processing C.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:299)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: java.lang.StackOverflowError         at com.puppycrawl.tools.checkstyle.api.DetailAST.setParent(DetailAST.java:205)         at com.puppycrawl.tools.checkstyle.api.DetailAST.setParent(DetailAST.java:205)         at com.puppycrawl.tools.checkstyle.api.DetailAST.setParent(DetailAST.java:205) # [...] there are 1021 more lines for the same recursive call ``` ---------------  While the input file may look like an artificial example, it is actually simplified from the real file https://github.com/robovm/robovm/blob/ef091902377c00dc0fb2db87e8d79c8afb5e9010/tests/robovm/src/test/java/org/robovm/rt/LineNumbersInStackTracesTestMethods.java               closedapproved,                 denizarsan                2017-06-30T19:36:46Z               2017-08-04T18:26:31Z                                             4562               Checkstyle does not support unicode characters in identifiers               $ javac C.java  $ cat C.java ```java class C {     int \u0069; } ``` $ cat config.xml ```                ``` $ java -jar checkstyle-7.8.2-all.jar -c config.xml C.java ``` Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing C.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: TokenStreamRecognitionException occurred during the analysis of file C.java.         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:196)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Caused by: /tmp/C.java:2:9: unexpected char: '\'         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaLexer.nextToken(GeneratedJavaLexer.java:405)         at antlr.TokenStreamHiddenTokenFilter.consume(TokenStreamHiddenTokenFilter.java:38)         at antlr.TokenStreamHiddenTokenFilter.nextToken(TokenStreamHiddenTokenFilter.java:134)         at antlr.TokenBuffer.fill(TokenBuffer.java:69)         at antlr.TokenBuffer.LA(TokenBuffer.java:80)         at antlr.LLkParser.LA(LLkParser.java:52)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:2512)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:634)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:556)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:389)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:202)         at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:448)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:179)         ... 7 more Checkstyle ends with 1 errors. ``` ---------------  That `int \u0069` should be treated the same as `int i`","closed","","denizarsan","2017-06-30T19:27:45Z","2017-06-30T20:09:58Z"
"","4556","MethodCountCheck with wrong tokens crashes Checkstyle","$ javac C.java  $ cat C.java ```java class C {    void m() {} } ```  $ cat config.xml ```                           ```  $ java -jar checkstyle-7.8.2-all.jar -c config.xml C.java ``` Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing C.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck$MethodCounter.access$000(MethodCountCheck.java:218)         at com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck.raiseCounter(MethodCountCheck.java:140)         at com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck.visitToken(MethodCountCheck.java:112)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:370)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:507)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:312)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:184)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Checkstyle ends with 1 errors. ``` ---------------  The tool crashes with a NPE for the given config and class.  The problem is that the ""tokens"" property is missing CLASS_DEF in this case (and INTERFACE_DEF when that is the case).  While this can be viewed as a bug in the config, Checkstyle should gracefully report a warning instead of crashing with an uncaught NPE.  Please let me know if you want me to help with fixing this.","closed","approved,","denizarsan","2017-06-29T23:42:33Z","2017-07-19T15:54:22Z"
"","4630","ModifiedControlVariableCheck crashes for some nested loops with multiple assignments","$ javac C.java  $ cat C.java ```java class C {     void m(int[] a) {         for (int i = 0, j = 1; ; i++, j++) {             for (int k : a) {             }         }     } } ``` $ cat config.xml ```                           ``` $ java -jar checkstyle-8.0-all.jar -c config.xml C.java ``` Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing C.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:430)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:362)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:177) Caused by: java.util.NoSuchElementException         at java.util.ArrayDeque.removeFirst(ArrayDeque.java:280)         at java.util.ArrayDeque.pop(ArrayDeque.java:517)         at com.puppycrawl.tools.checkstyle.checks.coding.ModifiedControlVariableCheck.popCurrentVariables(ModifiedControlVariableCheck.java:348)         at com.puppycrawl.tools.checkstyle.checks.coding.ModifiedControlVariableCheck.leaveForDef(ModifiedControlVariableCheck.java:338)         at com.puppycrawl.tools.checkstyle.checks.coding.ModifiedControlVariableCheck.leaveToken(ModifiedControlVariableCheck.java:226)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyLeave(TreeWalker.java:384)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:508)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:310)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:182)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Checkstyle ends with 1 errors. ``` --------------- The input class is quite minimized as removing almost any part makes the tool pass.","closed","approved,","denizarsan","2017-07-06T04:12:03Z","2017-08-02T06:53:33Z"
"","4557","NoWhitespaceAfterCheck for some array initialization crashes Checkstyle","$ javac C.java  $ cat C.java ```java class C {     int i = new int[]{1}[0]; } ```  $ cat config.xml ```               ```  $ java -jar checkstyle-7.8.2-all.jar -c config.xml C.java ``` Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing C.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.getPositionAfter(NoWhitespaceAfterCheck.java:175)         at com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.visitToken(NoWhitespaceAfterCheck.java:133)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:370)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:507)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:312)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:184)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Checkstyle ends with 1 errors. ``` ---------------  The tool crashes with a NPE for the given config and class.  The problem is the array-initialization expression that creates an array with concrete values (in this case ""1"") and then indexes into it.  Please let me know if you want me to help with fixing this.  Attention: suppressed at circleci by - https://github.com/checkstyle/contribution/commit/284acd31b9f3d5274f72ba489d6aff335c286437","closed","approved,","denizarsan","2017-06-29T23:42:38Z","2018-05-09T12:14:16Z"
"","4589","Checkstyle does not support annotations on array types","$ javac C.java  $ cat C.java ```java @java.lang.annotation.Target(java.lang.annotation.ElementType.TYPE_USE) @interface A {}  class C {     int i @A []; } ``` $ cat config.xml ```                ``` $ java -jar checkstyle-7.8.2-all.jar -c config.xml C.java ``` Starting audit... /tmp/C.java:5:14: unexpected token: [ com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing C.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: MismatchedTokenException occurred during the analysis of file C.java.         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:201)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Caused by: /tmp/C.java:6:1: expecting EOF, found '}'         at antlr.Parser.match(Parser.java:211)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:211)         at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:448)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:179)         ... 7 more Checkstyle ends with 1 errors. ``` ---------------  Such annotations are supported, at least in javac 1.8.0_131, but Checkstyle crashes.  -------","closed","has bounty,","denizarsan","2017-07-02T20:22:03Z","2020-01-25T14:23:58Z"
"","4631","EmptyBlockCheck crashes for some annotation defaults","$ javac C.java  $ cat C.java ```java @interface C {     String[] m() default """"; } ``` $ cat config.xml ```                           ``` $ java -jar checkstyle-8.0-all.jar -c config.xml C.java ``` Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing C.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:430)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:362)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:177) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck.findLeftCurly(EmptyBlockCheck.java:246)         at com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck.visitToken(EmptyBlockCheck.java:142)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:368)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:505)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:310)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:182)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Checkstyle ends with 1 errors. ``` --------------- While the report is for the most recent Checkstyle version, this also fails on checkstyle-7.8.2-all.jar but passes on checkstyle-7.6.1-all.jar, so there was some regression between 7.6.1 and 7.8.2.","closed","approved,","denizarsan","2017-07-06T04:16:19Z","2017-07-30T20:51:46Z"
"","4590","SummaryJavadocCheck crashes for some comments with ""=>""","$ javac C.java  $ cat C.java ```java // simplified from https://github.com/jclouds/legacy-jclouds/blob/1665a70471609aed0314dc60e27a80c7ffa65d45/providers/gogrid/src/main/java/org/jclouds/gogrid/services/GridServerClient.java public class C {     /**      * @return map       */     public int m() { return 0; } } ``` $ cat config.xml ```               ``` $ java -jar checkstyle-7.8.2-all.jar -c config.xml C.java ``` Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing C.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:425)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:359)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:174) Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser$DescriptiveErrorListener.syntaxError(JavadocDetailNodeParser.java:494)         at org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)         at org.antlr.v4.runtime.Lexer.notifyListeners(Lexer.java:364)         at org.antlr.v4.runtime.Lexer.nextToken(Lexer.java:144)         at org.antlr.v4.runtime.BufferedTokenStream.fetch(BufferedTokenStream.java:169)         at org.antlr.v4.runtime.BufferedTokenStream.fill(BufferedTokenStream.java:485)         at org.antlr.v4.runtime.BufferedTokenStream.getText(BufferedTokenStream.java:452)         at org.antlr.v4.runtime.BufferedTokenStream.getText(BufferedTokenStream.java:474)         at org.antlr.v4.runtime.DefaultErrorStrategy.reportNoViableAlternative(DefaultErrorStrategy.java:276)         at org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:121)         at com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.htmlElement(JavadocParser.java:886)         at com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.description(JavadocParser.java:13846)         at com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.javadocTag(JavadocParser.java:14510)         at com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.javadoc(JavadocParser.java:363)         at com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser.parseJavadocAsParseTree(JavadocDetailNodeParser.java:177)         at com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser.parseJavadocAsDetailNode(JavadocDetailNodeParser.java:118)         at com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck.visitToken(AbstractJavadocCheck.java:268)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:370)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:507)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:312)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:189)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:78)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Checkstyle ends with 1 errors. ``` ---------------  The source file can be parsed fine with Javadoc, although the resulting HTML doesn't look the best.","closed","antlr,","denizarsan","2017-07-02T20:22:49Z","2018-03-19T14:56:10Z"
"","4980","Problem with line ending immediately after javadoc tag","$ cat test.javadoc **(CRLF line endings)** ``` * @exception       Exception     Exception-description       spanning multiple lines ```  java -jar master-8.2-all.jar -j test.javadoc ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--EXCEPTION_LITERAL -> @exception [0:2] |   |--NEWLINE -> \r\n [0:13] |   |--WS ->        [1:0] |   `--DESCRIPTION -> DESCRIPTION [1:6] |       |--TEXT -> Exception     Exception-description [1:6] |       |--NEWLINE -> \r\n [1:41] |       `--TEXT ->       spanning multiple lines [2:0] `--EOF ->  [2:29] ```  **ALSO please note that `CLASS_NAME` is not being recognized in the above example which can be resolved by adding `NEWLINE` to corresponding lexer mode**  cat test.javadoc **(with LF line endings)** ``` * @exception       Exception     Exception-description       spanning multiple lines ```   java -jar master-8.2-all.jar -j test.javadoc ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--EXCEPTION_LITERAL -> @exception [0:2] |   |--NEWLINE -> \n [1:0] |   |--WS ->        [2:0] |   `--DESCRIPTION -> DESCRIPTION [2:6] |       |--TEXT -> Exception     Exception-description [2:6] |       |--NEWLINE -> \n [2:41] |       `--TEXT ->       spanning multiple lines [3:0] `--EOF ->  [3:29] ```  **SIMILAR CASES** ### `@param`  cat test.javadoc **(with CRLF line endings)** ``` * @param        parameter ```  java -jar master-8.2-all.jar -j test.javadoc  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--PARAM_LITERAL -> @param [0:2] |   |--NEWLINE -> \r\n [0:9] |   |--WS ->         [1:0] |   `--DESCRIPTION -> DESCRIPTION [1:7] |       `--TEXT -> parameter [1:7] `--EOF ->  [1:16]  ```  **ALSO please note that `PARAM_NAME` is not being recognized in the above example which can be resolved by adding `NEWLINE` to corresponding lexer mode**  **WITH LF line endings**  java -jar master-8.2-all.jar -j test.javadoc  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--PARAM_LITERAL -> @param [0:2] |   |--NEWLINE -> \n [1:0] |   |--WS ->         [2:0] |   `--DESCRIPTION -> DESCRIPTION [2:7] |       `--TEXT -> parameter [2:7] `--EOF ->  [2:16] ```  ### `@throws`  cat test.javadoc **(with CRLF line endings)** ``` * @throws      Exception     Exception-description          spanning multiple lines ```  java -jar master-8.2-all.jar -j test.javadoc  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--THROWS_LITERAL -> @throws [0:2] |   |--NEWLINE -> \r\n [0:10] |   |--WS ->       [1:0] |   `--DESCRIPTION -> DESCRIPTION [1:5] |       |--TEXT -> Exception     Exception-description [1:5] |       |--NEWLINE -> \r\n [1:40] |       `--TEXT ->          spanning multiple lines [2:0] `--EOF ->  [2:32] ```  **ALSO please note that `CLASS_NAME` is not being recognized in the above example which can be resolved by adding `NEWLINE` to corresponding lexer mode**  **WITH LF line endings**  java -jar master-8.2-all.jar -j test.javadoc  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--THROWS_LITERAL -> @throws [0:2] |   |--NEWLINE -> \n [1:0] |   |--WS ->       [2:0] |   `--DESCRIPTION -> DESCRIPTION [2:5] |       |--TEXT -> Exception     Exception-description [2:5] |       |--NEWLINE -> \n [2:40] |       `--TEXT ->          spanning multiple lines [3:0] `--EOF ->  [3:32] ```  The position of `NEWLINE` immediately after the javadoc tag is getting affected by the type of line endings in the file.  This behaviour repeats with `*7.6.2-SNAPSHOT-all.jar` too. So it's not something due to any recent changes.  This issue should relate to #4824  and the fact that there is no recognition for `NEWLINE` in the corresponding Lexer modes.  All the lexer modes with no `NEWLINE` should display the same behaviour. One easy fix would be to introduce `NEWLINE` in those lexer modes.","open","antlr-javadoc,","voidfist","2017-08-21T22:12:21Z","2020-01-21T01:39:29Z"
"","4942","Making required arguments mandatory for javadoc tags in grammar","$ cat test.javadoc  ``` * @author ```  $ java -jar master-8.2-all.jar -j test.javadoc  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--AUTHOR_LITERAL -> @author [0:2] |   `--NEWLINE -> \n [0:9] `--EOF ->  [1:0] ```  $ cat test.javadoc  ``` * @exception ```  $ java -jar master-8.2-all.jar -j test.javadoc  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--EXCEPTION_LITERAL -> @exception [0:2] |   `--NEWLINE -> \n [1:0] `--EOF ->  [2:0] ```  $ cat test.javadoc  ``` * @param ```  $ java -jar master-8.2-all.jar -j test.javadoc  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   `--PARAM_LITERAL -> @param [0:2] `--EOF ->  [0:8] ```  $ cat test.javadoc  ``` * @return ```  $ java -jar master-8.2-all.jar -j test.javadoc  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   `--RETURN_LITERAL -> @return [0:2] `--EOF ->  [0:9] ```  Javadoc trees are parsed when checkstyle should rightfully throw error for such inappropriately constructed javadocs. ANTLR grammar should be updated in all the required places for this and in javadoc tags which are supposed to have atleast 1 argument, the corresponding element must not allowed to be made optional in the grammar. For example [`CLASS_NAME` shouldn't be optional in `@exception` literal.](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4#L873)","closed","breaking compatibility,","voidfist","2017-08-12T15:22:31Z","2017-09-05T04:52:02Z"
"","4934","Add (WS | NEWLINE) in proper places for javadoc tags","$ cat test.javadoc ``` * @exception Exception-javadoc-description ```  $ java -jar master-8.2-all.jar -j test.javadoc   ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--EXCEPTION_LITERAL -> @exception [0:2] |   |--WS ->   [0:12] |   |--CLASS_NAME -> Exception [0:13] |   `--DESCRIPTION -> DESCRIPTION [0:22] |       |--TEXT -> **-javadoc-description** [0:22] |       `--NEWLINE -> \n [0:42] `--EOF ->  [1:0] ```  As can be seen the tree doesn't seem correct and `WS` should be enforced before description as even the [syntax for `@exception` in oracle docs](http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#exception) suggests.  **Another example:**  $ cat test.javadoc  ``` * @param Exception-javadoc-description ```  $ java -jar master-8.2-all.jar -j test.javadoc ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--PARAM_LITERAL -> @param [0:2] |   |--WS ->   [0:8] |   |--PARAMETER_NAME -> Exception [0:9] |   `--DESCRIPTION -> DESCRIPTION [0:18] |       |--TEXT -> **-javadoc-description** [0:18] |       `--NEWLINE -> \n [0:38] `--EOF ->  [1:0] ```  So `WS` should be added in all the right places for javadoc tags based on their syntax in [oracle docs](http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html).","closed","antlr,","voidfist","2017-08-11T11:30:43Z","2017-08-28T23:03:18Z"
"","4591","Javadoc Lexer unable to recognize references properly","$ cat test.javadoc  ``` * @see Up.LoUp.Lo is a package * @see Up.Lo#member Up.Lo is a class ```  $ java -jar checkstyle-X.XX-all.jar -j test.javadoc  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--SEE_LITERAL -> @see [0:2] |   |--WS ->   [0:6] |   |--REFERENCE -> REFERENCE [0:7] |   |   |--CLASS -> Up [0:7] |   |   |--DOT -> . [0:9] |   |   `--CLASS -> Lo [0:10] |   |--HTML_ELEMENT -> HTML_ELEMENT [0:12] |   |   `--PARAGRAPH -> PARAGRAPH [0:12] |   |       |--P_TAG_OPEN -> P_TAG_OPEN [0:12] |   |       |   |--OPEN -> < [0:12] |   |       |   |--P_HTML_TAG_NAME -> p [0:13] |   |       |   `--CLOSE -> > [0:14] |   |       |--TEXT -> Up.Lo is a package [0:15] |   |       `--P_TAG_CLOSE -> P_TAG_CLOSE [0:33] |   |           |--OPEN -> < [0:33] |   |           |--SLASH -> / [0:34] |   |           |--P_HTML_TAG_NAME -> p [0:35] |   |           `--CLOSE -> > [0:36] |   `--NEWLINE -> \r\n [0:37] |--LEADING_ASTERISK -> * [1:0] |--WS ->   [1:1] |--JAVADOC_TAG -> JAVADOC_TAG [1:2] |   |--SEE_LITERAL -> @see [1:2] |   |--WS ->   [1:6] |   `--DESCRIPTION -> DESCRIPTION [1:7] |       |--TEXT -> Up.Lo#member  [1:7] |       `--HTML_ELEMENT -> HTML_ELEMENT [1:20] |           `--PARAGRAPH -> PARAGRAPH [1:20] |               |--P_TAG_OPEN -> P_TAG_OPEN [1:20] |               |   |--OPEN -> < [1:20] |               |   |--P_HTML_TAG_NAME -> p [1:21] |               |   `--CLOSE -> > [1:22] |               |--HTML_TAG -> HTML_TAG [1:23] |               |   |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [1:23] |               |   |   |--OPEN -> < [1:23] |               |   |   |--HTML_TAG_NAME -> a [1:24] |               |   |   |--WS ->   [1:25] |               |   |   |--ATTRIBUTE -> ATTRIBUTE [1:26] |               |   |   |   |--HTML_TAG_NAME -> href [1:26] |               |   |   |   |--EQUALS -> = [1:30] |               |   |   |   `--ATTR_VALUE -> ""org.UpLo"" [1:31] |               |   |   `--CLOSE -> > [1:42] |               |   |--TEXT -> Up.Lo [1:43] |               |   `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [1:48] |               |       |--OPEN -> < [1:48] |               |       |--SLASH -> / [1:49] |               |       |--HTML_TAG_NAME -> a [1:50] |               |       `--CLOSE -> > [1:51] |               |--TEXT ->  is a  [1:52] |               |--HTML_TAG -> HTML_TAG [1:58] |               |   |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [1:58] |               |   |   |--OPEN -> < [1:58] |               |   |   |--HTML_TAG_NAME -> b [1:59] |               |   |   `--CLOSE -> > [1:60] |               |   |--TEXT -> class [1:61] |               |   `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [1:66] |               |       |--OPEN -> < [1:66] |               |       |--SLASH -> / [1:67] |               |       |--HTML_TAG_NAME -> b [1:68] |               |       `--CLOSE -> > [1:69] |               `--P_TAG_CLOSE -> P_TAG_CLOSE [1:70] |                   |--OPEN -> < [1:70] |                   |--SLASH -> / [1:71] |                   |--P_HTML_TAG_NAME -> p [1:72] |                   `--CLOSE -> > [1:73] `--EOF ->  [1:74] ```  **expected:**  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--SEE_LITERAL -> @see [0:2] |   |--WS ->   [0:6] |   |--REFERENCE -> REFERENCE [0:7] |   |   |--CLASS -> Up [0:7] |   |   |--DOT -> . [0:9] |   |   `--CLASS -> Lo [0:10] |   |--HTML_ELEMENT -> HTML_ELEMENT [0:12] |   |   `--PARAGRAPH -> PARAGRAPH [0:12] |   |       |--P_TAG_OPEN -> P_TAG_OPEN [0:12] |   |       |   |--OPEN -> < [0:12] |   |       |   |--P_HTML_TAG_NAME -> p [0:13] |   |       |   `--CLOSE -> > [0:14] |   |       |--TEXT -> Up.Lo is a package [0:15] |   |       `--P_TAG_CLOSE -> P_TAG_CLOSE [0:33] |   |           |--OPEN -> < [0:33] |   |           |--SLASH -> / [0:34] |   |           |--P_HTML_TAG_NAME -> p [0:35] |   |           `--CLOSE -> > [0:36] |   `--NEWLINE -> \r\n [0:37] |--LEADING_ASTERISK -> * [1:0] |--WS ->   [1:1] |--JAVADOC_TAG -> JAVADOC_TAG [1:2] |   |--SEE_LITERAL -> @see [1:2] |   |--WS ->   [1:6] |   |--REFERENCE -> REFERENCE [1:7] |   |   |--CLASS -> Up [1:7] |   |   |--DOT -> . [1:9] |   |   |--CLASS -> Lo [1:10] |   |   |--HASH -> # [1:12] |   |   `--MEMBER -> member [1:13] |   |--WS ->   [1:19] |   `--DESCRIPTION -> DESCRIPTION [1:20] |       `--HTML_ELEMENT -> HTML_ELEMENT [1:20] |           `--PARAGRAPH -> PARAGRAPH [1:20] |               |--P_TAG_OPEN -> P_TAG_OPEN [1:20] |               |   |--OPEN -> < [1:20] |               |   |--P_HTML_TAG_NAME -> p [1:21] |               |   `--CLOSE -> > [1:22] |               |--HTML_TAG -> HTML_TAG [1:23] |               |   |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [1:23] |               |   |   |--OPEN -> < [1:23] |               |   |   |--HTML_TAG_NAME -> a [1:24] |               |   |   |--WS ->   [1:25] |               |   |   |--ATTRIBUTE -> ATTRIBUTE [1:26] |               |   |   |   |--HTML_TAG_NAME -> href [1:26] |               |   |   |   |--EQUALS -> = [1:30] |               |   |   |   `--ATTR_VALUE -> ""org.UpLo"" [1:31] |               |   |   `--CLOSE -> > [1:42] |               |   |--TEXT -> Up.Lo [1:43] |               |   `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [1:48] |               |       |--OPEN -> < [1:48] |               |       |--SLASH -> / [1:49] |               |       |--HTML_TAG_NAME -> a [1:50] |               |       `--CLOSE -> > [1:51] |               |--TEXT ->  is a  [1:52] |               |--HTML_TAG -> HTML_TAG [1:58] |               |   |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [1:58] |               |   |   |--OPEN -> < [1:58] |               |   |   |--HTML_TAG_NAME -> b [1:59] |               |   |   `--CLOSE -> > [1:60] |               |   |--TEXT -> class [1:61] |               |   `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [1:66] |               |       |--OPEN -> < [1:66] |               |       |--SLASH -> / [1:67] |               |       |--HTML_TAG_NAME -> b [1:68] |               |       `--CLOSE -> > [1:69] |               `--P_TAG_CLOSE -> P_TAG_CLOSE [1:70] |                   |--OPEN -> < [1:70] |                   |--SLASH -> / [1:71] |                   |--P_HTML_TAG_NAME -> p [1:72] |                   `--CLOSE -> > [1:73] `--EOF ->  [1:74] ```  $ cat testWithWs.javadoc  ``` * @see Up.Lo Up.Lo is a package * @see Up.Lo#member Up.Lo is a class ```  $ java -jar checkstyle-X.XX-all.jar -j testWithWs.javadoc  ``` JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--WS ->   [0:1] |--JAVADOC_TAG -> JAVADOC_TAG [0:2] |   |--SEE_LITERAL -> @see [0:2] |   |--WS ->   [0:6] |   |--REFERENCE -> REFERENCE [0:7] |   |   |--CLASS -> Up [0:7] |   |   |--DOT -> . [0:9] |   |   `--CLASS -> Lo [0:10] |   |--WS ->   [0:12] |   `--DESCRIPTION -> DESCRIPTION [0:13] |       |--HTML_ELEMENT -> HTML_ELEMENT [0:13] |       |   `--PARAGRAPH -> PARAGRAPH [0:13] |       |       |--P_TAG_OPEN -> P_TAG_OPEN [0:13] |       |       |   |--OPEN -> < [0:13] |       |       |   |--P_HTML_TAG_NAME -> p [0:14] |       |       |   `--CLOSE -> > [0:15] |       |       |--TEXT -> Up.Lo is a package [0:16] |       |       `--P_TAG_CLOSE -> P_TAG_CLOSE [0:34] |       |           |--OPEN -> < [0:34] |       |           |--SLASH -> / [0:35] |       |           |--P_HTML_TAG_NAME -> p [0:36] |       |           `--CLOSE -> > [0:37] |       `--NEWLINE -> \r\n [0:38] |--LEADING_ASTERISK -> * [1:0] |--WS ->   [1:1] |--JAVADOC_TAG -> JAVADOC_TAG [1:2] |   |--SEE_LITERAL -> @see [1:2] |   |--WS ->   [1:6] |   |--REFERENCE -> REFERENCE [1:7] |   |   |--CLASS -> Up [1:7] |   |   |--DOT -> . [1:9] |   |   |--CLASS -> Lo [1:10] |   |   |--HASH -> # [1:12] |   |   `--MEMBER -> member [1:13] |   |--WS ->   [1:19] |   `--DESCRIPTION -> DESCRIPTION [1:20] |       `--HTML_ELEMENT -> HTML_ELEMENT [1:20] |           `--PARAGRAPH -> PARAGRAPH [1:20] |               |--P_TAG_OPEN -> P_TAG_OPEN [1:20] |               |   |--OPEN -> < [1:20] |               |   |--P_HTML_TAG_NAME -> p [1:21] |               |   `--CLOSE -> > [1:22] |               |--HTML_TAG -> HTML_TAG [1:23] |               |   |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [1:23] |               |   |   |--OPEN -> < [1:23] |               |   |   |--HTML_TAG_NAME -> a [1:24] |               |   |   |--WS ->   [1:25] |               |   |   |--ATTRIBUTE -> ATTRIBUTE [1:26] |               |   |   |   |--HTML_TAG_NAME -> href [1:26] |               |   |   |   |--EQUALS -> = [1:30] |               |   |   |   `--ATTR_VALUE -> ""org.UpLo"" [1:31] |               |   |   `--CLOSE -> > [1:42] |               |   |--TEXT -> Up.Lo [1:43] |               |   `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [1:48] |               |       |--OPEN -> < [1:48] |               |       |--SLASH -> / [1:49] |               |       |--HTML_TAG_NAME -> a [1:50] |               |       `--CLOSE -> > [1:51] |               |--TEXT ->  is a  [1:52] |               |--HTML_TAG -> HTML_TAG [1:58] |               |   |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [1:58] |               |   |   |--OPEN -> < [1:58] |               |   |   |--HTML_TAG_NAME -> b [1:59] |               |   |   `--CLOSE -> > [1:60] |               |   |--TEXT -> class [1:61] |               |   `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [1:66] |               |       |--OPEN -> < [1:66] |               |       |--SLASH -> / [1:67] |               |       |--HTML_TAG_NAME -> b [1:68] |               |       `--CLOSE -> > [1:69] |               `--P_TAG_CLOSE -> P_TAG_CLOSE [1:70] |                   |--OPEN -> < [1:70] |                   |--SLASH -> / [1:71] |                   |--P_HTML_TAG_NAME -> p [1:72] |                   `--CLOSE -> > [1:73] `--EOF ->  [1:74] ``` The second case for the file _testWithWs.javadoc_ works properly because there is a `WS` before ``. This happens becuase once [`referenceCatched`](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L123) is set true, it is set false only after a certain kind of token is encountered in certain modes. But when [`XmlTagOpen1`](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L121) token is encountered while parsing, ANTLR pushes into [`mode xmlTagDefinition`](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L273) and after that when [`CLOSE` or `SQUASH_CLOSE`](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L275-#L276) is encountered ANTLR pushes into `DEFAULT_MODE` from where it keeps switching back and forth between modes `xmlTagDefinition` and `DEFAULT_MODE` until another javadoc tag is encountered. Nowhere the variable `referenceCatched` gets set back to `false`.  So, in the above example when second `@see` is encountered and ANTLR pushes into [`mode seeLink`](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L103), `referenceCatched` is already true and ANTLR pushes the lexer back into DEFAULT_MODE as soon as [`WS`](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L104) is encountered which results in `Up.Lo#member` being recognized as plain text.   Adding `refrenceCatched = false` in overridden [`emit`](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocLexer.g4#L22) method solves this.","closed","","voidfist","2017-07-02T20:25:53Z","2017-07-02T23:42:09Z"
"","4392","AST structure: why comments and javadoc are placed in MODIFIERS ?","$ cat Test.java          /**     * standard inline tag: {@code a < b} , parsed ok.     * standard inline tag: {@code a CLASS_DEF [6:0]     |--MODIFIERS -> MODIFIERS [6:0]     |   |--BLOCK_COMMENT_BEGIN -> /* [1:0]     |   |   |--COMMENT_CONTENT -> *\n * standard inline tag: {@code a < b} , parsed ok.\n * standard inline tag: {@code a \n * standard inline tag: {@code a < b} , parsed ok.\n * standard inline tag: {@code a [1:3]     |   |   |       |--NEWLINE -> \n [1:3]     |   |   |       |--LEADING_ASTERISK ->  * [2:0]     |   |   |       |--TEXT ->  standard inline tag:  [2:2]     |   |   |       |--JAVADOC_INLINE_TAG -> {@code a < b} [2:24]     |   |   |       |   |--JAVADOC_INLINE_TAG_START -> { [2:24]     |   |   |       |   |--CODE_LITERAL -> @code [2:25]     |   |   |       |   |--WS ->   [2:30]     |   |   |       |   |--TEXT -> a < b [2:31]     |   |   |       |   `--JAVADOC_INLINE_TAG_END -> } [2:37]     |   |   |       |--TEXT ->  , parsed ok. [2:38]     |   |   |       |--NEWLINE -> \n [2:51]     |   |   |       |--LEADING_ASTERISK ->  * [3:0]     |   |   |       |--TEXT ->  standard inline tag:  [3:2]     |   |   |       |--JAVADOC_INLINE_TAG -> {@code a { [3:24]     |   |   |       |   |--CODE_LITERAL -> @code [3:25]     |   |   |       |   |--WS ->   [3:30]     |   |   |       |   |--TEXT -> a } [3:35]     |   |   |       |--TEXT ->  , parsed ok. [3:36]     |   |   |       |--NEWLINE -> \n [3:49]     |   |   |       |--LEADING_ASTERISK ->  * [4:0]     |   |   |       |--TEXT ->  Non standard  [4:2]     |   |   |       |--JAVADOC_INLINE_TAG -> {@preformat a < b} [4:16]     |   |   |       |   |--JAVADOC_INLINE_TAG_START -> { [4:16]     |   |   |       |   |--CUSTOM_NAME -> @preformat [4:17]     |   |   |       |   |--WS ->   [4:27]     |   |   |       |   |--DESCRIPTION -> a < b [4:28]     |   |   |       |   |   `--TEXT -> a < b [4:28]     |   |   |       |   `--JAVADOC_INLINE_TAG_END -> } [4:33]     |   |   |       |--TEXT ->  parsed ok. [4:34]     |   |   |       |--NEWLINE -> \n [4:45]     |   |   |       |--TEXT ->   [5:0]     |   |   |       `--EOF ->  [5:1]     |   |   `--BLOCK_COMMENT_END -> */ [5:1]     |   `--LITERAL_PUBLIC -> public [6:0]     |--LITERAL_CLASS -> class [6:7]     |--IDENT -> Test [6:13]     `--OBJBLOCK -> OBJBLOCK [6:18]         |--LCURLY -> { [6:18]         `--RCURLY -> } [7:0]   Taken from this [comment](https://github.com/checkstyle/checkstyle/pull/4378#issuecomment-305076860). It would perhaps make more sense if the `BLOCK_COMMENT_BEGIN` node was outside `MODIFIERS`    Would it make better sense if BLOCK_COMMENT_BEGIN was a child of CLASS_DEF rather than MODIFIERS ?","open","javadoc,","voidfist","2017-05-31T15:09:54Z","2019-06-17T07:26:50Z"
"","4231","RightCurly: Update logic for option ALONE and ALONE_OR_SINGLELINE to support handling METHOD_DEF and other such tokens without shouldStartLine","$ cat RightCurlyTest.java      public class RightCurlyTest {         public class TestClass {             int method(int a) {          	    System.out.println("" ""); return ++a; }   //line 4         }     }       $ cat config.xml                                                                                                                                           $ java -jar checkstyle-7.7-SNAPSHOT-all.jar -c config.xml RightCurlyTest.java     Starting audit...     Audit done.  --------------- I expected a violation at line 4 since the `rightCurly` pertaining to the `METHOD_DEF` isn't alone on line.   The issue seems to be with `isAloneOnLine` method which just checks if the `rightCurly` and the `leftCurly` and the 'nextToken` aren't on the same line.","closed","discussion ongoing,","voidfist","2017-04-19T15:08:07Z","2018-06-23T05:08:44Z"
"","4632","Java Grammar: Hard to understand message","$ cat C.java # the code does not compile ```java class C extends D<${package}.E> {} ```  $ cat config.xml ```                 ``` $ java -jar checkstyle-8.0-all.jar -c config.xml C.java ``` Starting audit...  areLtsAndGtsBalanced(currentLtLevel) Audit done. ``` --------------- The source file does not compile, so giving a warning/error message is fine, but the message is hard to understand.","closed","miscellaneous,","denizarsan","2017-07-06T04:24:57Z","2019-03-16T17:13:04Z"
"","4195","Issue #4191: Split and Organize Checkstyle inputs by Test for ParameterName","#This PR resolves the issue #4191. Following files were moved to parametername: InputOverrideAnnotaion.java (renamed to InputParameterNameOverrideAnnotation.java) InputOverrideAnnotaionNoNPE.java (renamed to InputParameterNameOverrideAnnotationNoNPE.java) InputAccessModifier.java (renamed to InputParameterNameAccessModifier.java) InputParameterNameReceiver.java","closed","","Shubhk15","2017-04-11T21:12:49Z","2017-04-13T20:56:55Z"
"","4849","Issue #4829: add NoErrorTest for sevntu project to wercker","#4829","closed","","romani","2017-07-29T02:52:12Z","2017-07-29T03:36:36Z"
"","4775","Issue #4769: Control coverage of JavadocParser and JavadocLexer","#4769 JavadocParserListener and JavadocParserVisitor are excluded from generation as they are not used at all.","closed","","Vladlis","2017-07-20T07:35:33Z","2017-07-25T11:59:29Z"
"","4825","Issue #4717: Added JavadocParserErrorStrategy which extends BailErrorStrategy","#4717","closed","","voidfist","2017-07-25T22:08:15Z","2017-07-28T07:48:43Z"
"","4703","Issue #4702: suppress NewlineAtEndOfFile on all internal javadoc files","#4702","closed","","Kietzmann","2017-07-12T14:01:52Z","2017-07-12T16:33:43Z"
"","4710","Issue #4700: Remove redundant sync for synchronizedMap (Intelllij inspection violations)","#4700   The `BUNDLE_CACHE` is defined as follows:      private static final Map BUNDLE_CACHE =         Collections.synchronizedMap(new HashMap<>());  Therefore, additional `synchronized` blocks are redundant as long as we're doing all work inside the same method (see `getBundle` changes).","closed","","soon","2017-07-13T06:56:01Z","2017-07-13T17:37:31Z"
"","4698","I4681 intellij inspections","#4681","closed","","romani","2017-07-11T13:42:14Z","2017-07-13T18:22:48Z"
"","4685","Issue #4677: remove deprecated AbstractDeclarationCollector, AbstractFormatCheck, AbstractOptionCheck","#4677","closed","","Kietzmann","2017-07-09T18:26:27Z","2017-07-10T05:00:32Z"
"","4899","Issue #4607: Added moduleId to violation messages","#4607   In XMLLogger, there would be an `id=""...""` if the module id is set. (and no `source=""...""`)  Log message would be `[SEVERITY LEVEL] filePath:lineNo:columnNo: message. [ModuleId]`, if module id is set.  I was stuck before for I didn't realize that I need to modify `compareTo` in LocalizedMessage.","closed","","Luolc","2017-08-04T17:00:18Z","2017-08-11T03:10:30Z"
"","4697","Issue #4588: Split and Organize Checkstyle inputs for MainTests to 'main' folder","#4588  Files that are left in `/checkstyle` directory is used in the other tests. All dependent resource files that was in `/checkstyle` dir were moved to `/main` directory.","closed","","Kietzmann","2017-07-11T10:18:01Z","2017-07-12T15:29:51Z"
"","4706","Issue #4588: Removed unused resource files from root package","#4588  As I've mentioned in #4588 I've removed unused resource files","closed","","Kietzmann","2017-07-12T15:53:12Z","2017-07-13T01:19:23Z"
"","4712","Issue #4588: Moved resources for AllChecksTest","#4588","closed","","Kietzmann","2017-07-13T12:16:28Z","2017-07-13T14:06:06Z"
"","4673","Issue #4587: Moved unused resource classes","#4587  What was done: 1) Moved AstRegression resources to appropriate package 2) Moved resource class for UnusedImportsCheck to appropriate package","closed","","Kietzmann","2017-07-09T14:18:48Z","2017-07-09T14:53:33Z"
"","4617","Issue #4587: Moved resources for translation and arraytypestyle check","#4587 What was done: Created package misc and two packages inside of it: translation and arraytypestyle For first - moved InputArrayTypeStyle.java, for second one - moved all resource files. Also created folder misc/translation in noncompilable resources dir","closed","","Kietzmann","2017-07-05T14:24:47Z","2017-07-05T23:44:45Z"
"","4636","Issue #4587: Moved all necessary resource files for NewlineAtEndOfFilCheckTest","#4587 1) made a copy of InputNewlineCrAtEndOfFile 2) renamed one resource file cause it is using in another test  3) changed suppressions due to file move","closed","","Kietzmann","2017-07-06T12:29:31Z","2017-07-09T06:01:31Z"
"","4658","Issue #4587: Moved resources for UniqueProperties check","#4587","closed","","Kietzmann","2017-07-08T12:12:01Z","2017-07-08T15:21:27Z"
"","4653","Issue #4587: Removed all unused resource classes form package","#4587","closed","","Kietzmann","2017-07-07T17:29:09Z","2017-07-07T20:30:40Z"
"","4649","Issue #4587: Moved all resources for SuppressWarnings check","#4587","closed","","Kietzmann","2017-07-07T13:13:34Z","2017-07-07T17:11:07Z"
"","4648","Issue #4587: Moved all resources for TrailingComment check","#4587","closed","","Kietzmann","2017-07-07T09:39:16Z","2017-07-07T12:43:06Z"
"","4647","Issue #4587: Moved all resources for UpperEll check","#4587","closed","","Kietzmann","2017-07-07T09:27:30Z","2017-07-07T12:28:46Z"
"","4646","Issue #4587: Moved all resources for UncommentedMain check","#4587","closed","","Kietzmann","2017-07-07T09:00:36Z","2017-07-07T12:35:25Z"
"","4645","Issue #4587: Moved all necessary resource files for TodoComment","#4587","closed","","Kietzmann","2017-07-07T08:36:15Z","2017-07-07T12:29:02Z"
"","4637","Issue #4587: Moved all necessary resource files for OuterTypeFilename","#4587","closed","","Kietzmann","2017-07-06T12:45:53Z","2017-07-06T20:05:41Z"
"","4635","Issue #4587: Moved resources for FinalParameters check test","#4587","closed","","Kietzmann","2017-07-06T09:20:54Z","2017-07-06T15:28:47Z"
"","4622","Issue #4587: Moved resources for FileSet check test","#4587","closed","","Kietzmann","2017-07-05T16:10:29Z","2017-07-06T00:02:39Z"
"","4620","Issue #4587: Moved resources for descendant token check test","#4587","closed","","Kietzmann","2017-07-05T15:34:59Z","2017-07-05T23:46:19Z"
"","4618","Issue #4587: Moved resources for avoidescapedunicodecharacters","#4587","closed","","Kietzmann","2017-07-05T14:42:39Z","2017-07-05T23:45:20Z"
"","4651","Issue #4586: Moved resources for AbstractTypeAware check test","#4586  I will delete all useless files at the end","closed","","djydewang","2017-07-07T14:29:34Z","2017-07-08T06:15:06Z"
"","4786","Issue #4585: Clean up","#4585","closed","","Kietzmann","2017-07-20T18:42:31Z","2017-07-20T18:51:01Z"
"","4782","Issue #4585: Moved resources for RegexpSingleline","#4585","closed","","Kietzmann","2017-07-20T11:13:51Z","2017-07-20T17:47:29Z"
"","4781","Issue #4585: Moved resources for RexepOnFilename","#4585","closed","","Kietzmann","2017-07-20T11:02:54Z","2017-07-20T17:47:18Z"
"","4780","Issue #4585: Moved resources for RexepMultiline","#4585","closed","","Kietzmann","2017-07-20T10:45:49Z","2017-07-20T16:55:19Z"
"","4779","Issue #4585: Moved resources for RegexpCheckTest","#4585","closed","","Kietzmann","2017-07-20T10:38:09Z","2017-07-20T16:55:02Z"
"","4778","Issue #4585: Moved resources for RegexpSinglelineJavaCheck","#4585","closed","","Kietzmann","2017-07-20T10:37:53Z","2017-07-20T16:54:51Z"
"","4430","Issue #4414: Simple name conflict of Checks from thirdparty ch..","#4414","closed","","Luolc","2017-06-07T15:09:00Z","2017-06-15T06:03:15Z"
"","4389","Issue #4387: problem with usage of third-party Check libraries and ch…","#4387   @romani  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#L202 The direct cause is that we have duplicate keys(the class simple name) in this stream.  I guess the reason is we have some classes that have the same simple name in both checkstyle project and sevntu.checkstyle project.  We could see `HideUtilityClassConstructorCheck` in the log,  and there are https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/main/java/com/github/sevntu/checkstyle/checks/design/HideUtilityClassConstructorCheck.java and https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java.  I am not sure which class should I use here. More specifically, to use checkstyle's HideUtilityClassConstructorCheck or sevntu.checkstyle's HideUtilityClassConstructorCheck? (same question with other classes with same name) Currently I just choose the new one in the stream.  I don't know how to reproduce the bug in IDE currently. So I was not able to use a debug mode to check the `packages` field when the bug occurs.","closed","","Luolc","2017-05-29T12:20:48Z","2017-06-28T14:16:39Z"
"","4985","Issue #4384: Remove strong, wildcard suppressions in configuration","#4384","closed","","romani","2017-08-22T12:38:20Z","2017-08-22T16:49:10Z"
"","4680","Issue #4365: Split and Organize Checkstyle inputs by Test for checks in header package","#4365","closed","","Kietzmann","2017-07-09T16:35:02Z","2017-07-10T15:40:26Z"
"","4379","Issue #4349: Digits shall be allowed in Package names","#4349: Digits shall be allowed in Package names","closed","","voidfist","2017-05-27T11:22:31Z","2017-05-28T20:20:05Z"
"","4348","Issue #4342: Modified version of maven-pmd and fixed InefficientEmptyStringCheck","#4342  The issue with InefficientEmptyStringCheck was caused by String.trim().isEmpty() which creates new String object. I added a method that checks whether String is empty or not without creating temporary String.  https://pmd.github.io/pmd-5.6.1/pmd-java/rules/java/strings.html#InefficientEmptyStringCheck","closed","","Kietzmann","2017-05-12T12:38:55Z","2017-05-18T19:43:55Z"
"","4347","infra: attempt to resolve #4316 by jdk upgrade","#4316   Base on knowledge of https://github.com/travis-ci/travis-ci/issues/4042","closed","","romani","2017-05-12T05:29:15Z","2017-05-12T12:32:26Z"
"","4351","Issue #4316: disable ConfigurationLoaderTest as experiment","#4316","closed","","romani","2017-05-13T19:50:08Z","2017-05-13T20:09:48Z"
"","4340","Issue #4314: Package design cleanup","#4314  Moved InputLocalAnnotations to package where it is used once.","closed","","Kietzmann","2017-05-06T12:53:29Z","2017-05-06T20:51:42Z"
"","4327","Issue #4314: Split and Organize Checkstyle inputs by Test for checks in design package: DesignForExtension","#4314","closed","","Kietzmann","2017-05-02T21:42:09Z","2017-05-04T20:00:02Z"
"","4326","Issue #4314: Split and Organize Checkstyle inputs by Test for checks in design package: FinalClass","#4314","closed","","Kietzmann","2017-05-02T21:41:36Z","2017-05-04T12:14:58Z"
"","4325","Issue #4314: Split and Organize Checkstyle inputs by Test for checks in design package: HideUtilityClassConstructor","#4314","closed","","Kietzmann","2017-05-02T21:41:05Z","2017-05-04T12:15:02Z"
"","4324","Issue #4314: Split and Organize Checkstyle inputs by Test for checks in design package: InnerTypeLast","#4314","closed","","Kietzmann","2017-05-02T21:40:26Z","2017-05-03T02:31:54Z"
"","4323","Issue #4314: Split and Organize Checkstyle inputs by Test for checks in design package: InterfaceIsType","#4314","closed","","Kietzmann","2017-05-02T21:39:49Z","2017-05-03T13:38:10Z"
"","4322","Issue #4314: Split and Organize Checkstyle inputs by Test for checks in design package: MutableException","#4314","closed","","Kietzmann","2017-05-02T21:38:48Z","2017-05-03T00:56:13Z"
"","4321","Issue #4314: Split and Organize Checkstyle inputs by Test for checks in design package: OneTopLevelClass","#4314","closed","","Kietzmann","2017-05-02T21:38:16Z","2017-05-03T00:07:29Z"
"","4320","Issue #4314: Split and Organize Checkstyle inputs by Test for checks in design package: ThrowsCount","#4314","closed","","Kietzmann","2017-05-02T21:36:51Z","2017-05-03T00:09:33Z"
"","4319","Issue #4314: Split and Organize Checkstyle inputs by Test for checks in design package: VisibilityModifier","#4314","closed","","Kietzmann","2017-05-02T21:35:49Z","2017-05-03T13:41:07Z"
"","4337","Issue #4313: Split and Organize Checkstyle inputs by Test for checks in annotation package: AnnotationLocation","#4313  While running receiving the same issue as here: https://github.com/policeman-tools/forbidden-apis/issues/108 @MEZk  How can I fix this in this case? Thanks","closed","","Kietzmann","2017-05-04T12:08:49Z","2017-05-10T19:45:26Z"
"","4344","Issue #4313: Split and Organize Checkstyle inputs by Test for checks in annotation package: CleanUp","#4313  Removed unused class from package /annotation","closed","","Kietzmann","2017-05-11T09:48:00Z","2017-05-11T10:43:22Z"
"","4336","Issue #4313: Split and Organize Checkstyle inputs by Test for checks in annotation package: AnnotationUseStyle","#4313","closed","","Kietzmann","2017-05-04T10:45:52Z","2017-05-06T20:24:17Z"
"","4335","Issue #4313: Split and Organize Checkstyle inputs by Test for checks in annotation package: MissingDeprecated","#4313","closed","","Kietzmann","2017-05-04T08:19:23Z","2017-05-04T12:53:27Z"
"","4334","Issue #4313: Split and Organize Checkstyle inputs by Test for checks in annotation package: MissingOverride","#4313","closed","","Kietzmann","2017-05-04T08:18:08Z","2017-05-04T12:48:59Z"
"","4333","Issue #4313: Split and Organize Checkstyle inputs by Test for checks in annotation package: PackageAnnotation","#4313","closed","","Kietzmann","2017-05-04T08:11:55Z","2017-05-04T13:53:00Z"
"","4332","Issue #4313: Split and Organize Checkstyle inputs by Test for checks in annotation package: SuppressWarnings","#4313","closed","","Kietzmann","2017-05-04T08:09:53Z","2017-05-05T13:15:07Z"
"","4283","Issue #4250: Fix new TeamCity violations (part1)","#4250","closed","","romani","2017-04-23T13:44:43Z","2017-04-23T15:12:50Z"
"","4300","Issue #4220: Split and Organize Checkstyle inputs by Test in the blocks package: EmptyBlock","#4220","closed","","Kietzmann","2017-04-27T12:05:54Z","2017-04-28T03:18:47Z"
"","4299","Issue #4220: Split and Organize Checkstyle inputs by Test in the blocks package: NeedBraces","#4220","closed","","Kietzmann","2017-04-27T12:05:34Z","2017-04-28T03:18:03Z"
"","4298","Issue #4220: Split and Organize Checkstyle inputs by Test in the blocks package: RightCurly","#4220","closed","","Kietzmann","2017-04-27T12:05:12Z","2017-04-28T03:18:21Z"
"","4212","Issue #4176: Add suppression of .DS_Store for NewlineAtEndOfFile","#4176   FYI: .gitignore: https://github.com/checkstyle/checkstyle/blob/master/.gitignore  ``` # Eclipse project files .settings .externalToolBuilders .classpath .project  # m2e-code-quality Eclipse IDE plugin temporary configuration files for Eclipse CS Checkstyle / PMD / FindBugs Plug-Ins .checkstyle .pmd .pmdruleset.xml .fbExcludeFilterFile   # NetBeans project files nbactions.xml nb-configuration.xml  # Maven build folder target bin  # IDEA project files checkstyle.iml .idea  # Temp files *~  # Java Virtual machine crash logs hs_err_pid* replay_pid*  # Apple MAC OSX hidden file .DS_Store  # NonDex files .nondex ```","closed","","Luolc","2017-04-13T15:10:56Z","2017-04-13T19:25:38Z"
"","4302","minor: Refactored getDetails method of RightCurlyCheck","#4173","closed","","voidfist","2017-05-01T10:14:12Z","2017-05-02T13:40:30Z"
"","4290","Issue #4137: Split and Organize Checkstyle inputs by Test for ClassTypeParameterName","#4173","closed","","Kietzmann","2017-04-24T21:07:30Z","2017-04-25T15:05:24Z"
"","4305","Issue #4172: Split and Organize Checkstyle inputs by Test for PackageName","#4172","closed","","Kietzmann","2017-05-01T12:14:05Z","2017-05-02T02:57:50Z"
"","4360","Issue #4165: Fixed incorrect class names in magicnumber package","#4165","closed","","Kietzmann","2017-05-16T16:23:25Z","2017-05-16T21:43:47Z"
"","4359","Issue #4165: Made refactoring of OneStatementPerLine tests to meet the requirements","#4165","closed","","Kietzmann","2017-05-16T13:33:08Z","2017-05-16T14:23:58Z"
"","4309","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: IllegalThrows","#4165","closed","","Kietzmann","2017-05-02T09:07:44Z","2017-05-02T13:41:53Z"
"","4308","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: IllegalToken","#4165","closed","","Kietzmann","2017-05-02T09:00:56Z","2017-05-02T13:41:21Z"
"","4281","Issue #4165: Moved resource class to new package /illegaltokentext","#4165","closed","","Kietzmann","2017-04-23T09:57:08Z","2017-04-25T23:15:38Z"
"","4280","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: IllegalType","#4165","closed","","Kietzmann","2017-04-23T09:55:45Z","2017-04-24T15:02:37Z"
"","4279","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: InnerAssignment","#4165","closed","","Kietzmann","2017-04-23T09:53:17Z","2017-04-25T14:30:53Z"
"","4278","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: MagicNumber","#4165","closed","","Kietzmann","2017-04-23T09:52:44Z","2017-04-24T14:49:37Z"
"","4277","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: MissingCtor","#4165","closed","","Kietzmann","2017-04-23T09:51:41Z","2017-04-24T14:49:04Z"
"","4276","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: MissingSwitchDefault","#4165","closed","","Kietzmann","2017-04-23T09:49:30Z","2017-04-24T14:50:09Z"
"","4264","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: ModifiedControlVariable","#4165","closed","","Kietzmann","2017-04-22T06:30:28Z","2017-04-24T13:38:17Z"
"","4263","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: MultipleStringLiterals","#4165","closed","","Kietzmann","2017-04-22T06:29:36Z","2017-04-24T14:50:44Z"
"","4262","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: MultipleVariableDeclarations","#4165","closed","","Kietzmann","2017-04-22T06:28:50Z","2017-04-24T13:40:27Z"
"","4261","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: NestedForDepth","#4165","closed","","Kietzmann","2017-04-22T06:27:26Z","2017-04-24T13:39:11Z"
"","4260","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: NestedIfDepth","#4165","closed","","Kietzmann","2017-04-22T06:26:32Z","2017-04-24T12:00:20Z"
"","4259","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: NestedTryDepth","#4165","closed","","Kietzmann","2017-04-22T06:25:24Z","2017-04-24T12:15:23Z"
"","4257","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: NoClone","#4165","closed","","Kietzmann","2017-04-21T17:34:49Z","2017-04-25T11:40:30Z"
"","4256","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: NoFinalizer","#4165","closed","","Kietzmann","2017-04-21T16:16:20Z","2017-04-22T13:08:59Z"
"","4255","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: OneStatementPerLine","#4165","closed","","Kietzmann","2017-04-21T16:07:12Z","2017-04-22T02:06:42Z"
"","4254","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: OverloadMethodsDeclarationOrder","#4165","closed","","Kietzmann","2017-04-21T14:29:25Z","2017-04-21T21:27:24Z"
"","4253","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: PackageDeclaration","#4165","closed","","Kietzmann","2017-04-21T14:22:37Z","2017-04-24T11:19:02Z"
"","4252","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: ParameterAssignment","#4165","closed","","Kietzmann","2017-04-21T13:41:39Z","2017-04-21T14:49:03Z"
"","4251","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: RequireThis","#4165","closed","","Kietzmann","2017-04-21T13:33:06Z","2017-04-21T14:48:49Z"
"","4248","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: ReturnCount","#4165","closed","","Kietzmann","2017-04-21T12:49:22Z","2017-04-21T14:48:33Z"
"","4246","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: SimplifyBooleanExpression","#4165","closed","","Kietzmann","2017-04-21T07:37:12Z","2017-04-21T14:50:11Z"
"","4245","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: SimplifyBooleanReturn","#4165","closed","","Kietzmann","2017-04-21T07:36:37Z","2017-04-21T14:49:57Z"
"","4244","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: StringLiteralEquality","#4165","closed","","Kietzmann","2017-04-21T07:35:55Z","2017-04-21T14:49:45Z"
"","4243","Issue #4165: Split and Organize Checkstyle inputs by Test for checks in coding package: SuperClone","#4165","closed","","Kietzmann","2017-04-21T06:52:49Z","2017-04-21T14:49:26Z"
"","4378","Issue #4164: Custom tags' content not to be parsed as HTML","#4164 : Custom tags' content not to be parsed as HTML","closed","","voidfist","2017-05-27T10:32:41Z","2017-06-19T21:46:02Z"
"","4303","Issue #4158: Split and Organize Checkstyle inputs by Test for MethodName","#4158","closed","","Kietzmann","2017-05-01T11:22:51Z","2017-05-01T19:00:02Z"
"","4304","Issue #4151: Split and Organize Checkstyle inputs by Test for MemberName","#4151","closed","","Kietzmann","2017-05-01T11:44:43Z","2017-05-01T19:03:11Z"
"","4301","Issue #4142: Split and Organize Checkstyle inputs by Test for InterfaceTypeParameterName","#4142","closed","","Kietzmann","2017-04-29T10:43:30Z","2017-04-29T14:25:12Z"
"","4293","Issue #4137: Split and Organize Checkstyle inputs by Test for ClassTypeParameterName","#4137","closed","","Kietzmann","2017-04-25T15:07:22Z","2017-04-27T12:55:42Z"
"","4289","Issue #4136: Split and Organize Checkstyle inputs by Test for CatchParameterName","#4136","closed","","Kietzmann","2017-04-24T21:06:05Z","2017-04-27T12:04:53Z"
"","4096","Issue #4091: False negative on multiblock tokens with ALONE_OR_SINGLINE option","#4091   Report: https://vladlis.github.io/4091/","closed","","Vladlis","2017-03-24T13:36:00Z","2017-04-05T19:52:34Z"
"","4103","Issue #4085: Extend documentation for RightCurlyOption.SAME","#4085","closed","","Vladlis","2017-03-26T17:22:19Z","2017-04-05T19:53:11Z"
"","4115","Issue #4082: Take ""break"" into consideration in FinalLocalVariable","#4082   Diff report: http://www.luolc.com/checkstyle-diff-report/issue4082/","closed","","Luolc","2017-03-28T16:39:32Z","2017-04-18T19:54:06Z"
"","4049","Issue #4055: Perform refactoring of AnnotationLocationCheck to increase code readability","#4055","closed","","MEZk","2017-03-18T22:43:43Z","2017-03-26T17:57:13Z"
"","4051","Issue #4044: Fix false negative in RightCurly while checking single line if blocks with brace policy ALONE","#4044  Fixed false negative in RightCurly while checking single line if blocks with brace policy ALONE. Some logic was extracted into shouldHaveLineBreakBefore to avoid CC check violations. Diff reports are on the way ...","closed","","MEZk","2017-03-18T23:25:52Z","2017-03-26T17:56:49Z"
"","4071","Issue #4013: Split and Organize Checkstyle inputsby Test for LineLength","#4013","closed","","MikhailovOlegM","2017-03-21T16:47:17Z","2017-04-05T11:27:28Z"
"","4020","Issue #4003: Indentation UTs should not use ROOT locale when they tes…","#4003   - [x] Add a test that verifies message is in property order. - [x] Load message from resource bundle and chop off property 0. Check that message matches either of the valid two (indentation.error or indentation.child.error, indentation.error.multi or indentation.child.error.multi)  Regarding the changes of `messages_tr.properties`: There is a redundant `'` in the message. In that case the substitution of arguments will fail. i.e. if we pass arguments `##0##`, `##1##`, `##2##`, then we get ``` '##0##' yanlış girinti düzeyine sahip {1}, beklenen düzeyde aşağıdakilerden biri olmalıdır: {2}. ``` It is not correct. And without fixing it, our new test for property order will fail. So we cannot split it into a separate issue.  Diff report: http://www.luolc.com/checkstyle-diff-report/issue4003/","closed","","Luolc","2017-03-16T08:37:38Z","2017-03-19T13:54:44Z"
"","4149","Issue #3951: SeparatorWrap: add support for method reference operator","#3951   Firstly, we need to confirm the check logic. As the issue mentioned: `want '::' operator at end of previous line`, but it is not correct according to google style: http://checkstyle.sourceforge.net/reports/google-java-style-20170228.html#s4.5.1-line-wrapping-where-to-break  > When a line is broken at a non-assignment operator the break comes before the symbol. > - This also applies to the following ""operator-like"" symbols: >   - the two colons of a method reference (::)  Notice that the break should come before `::`.   Configurations for Google style is updated as well.  ~~Diff report is on the way.~~  Diff report: http://www.luolc.com/checkstyle-diff-report/issue3951/","closed","","Luolc","2017-04-03T12:02:16Z","2017-04-27T04:21:42Z"
"","4315","Issue #3891: Split and Organize Checkstyle inputs by Test: coding package cleanup","#3891  What was done: Removed no longer used classes, moved `InputGregorianCalendar` to `design` package where it is using(oddly) and changed path in VisibilityModifierCheckTest to pass tests","closed","","Kietzmann","2017-05-02T10:28:38Z","2017-05-02T14:02:36Z"
"","4310","Issue #3891: Split and Organize Checkstyle inputs by Test: naming package, TypeName","#3891  Removed also resource classes in that package that are no longer used because they were moved to appropriate package.","closed","","Kietzmann","2017-05-02T09:25:25Z","2017-05-02T13:42:27Z"
"","4312","Issue #3891: Split and Organize Checkstyle inputs by Test: whitespace package cleanup","#3891  Faced with an issue that the commiter which worked on OperatorWrap didn't modify the package in class declaration so dependent interfaces were left in /whitespace package. In order to fit this package to requirements, I moved InputOperatorWrap to /operatorwrap package and renamed it","closed","","Kietzmann","2017-05-02T10:02:42Z","2017-05-04T19:55:29Z"
"","4311","Issue #3891: Split and Organize Checkstyle inputs by Test: sizes package cleanup","#3891","closed","","Kietzmann","2017-05-02T09:30:27Z","2017-05-02T13:43:07Z"
"","4056","Issue#3891 Split and Organize Checkstyle inputs by IllegalCatch","#3891","closed","","MikhailovOlegM","2017-03-19T11:39:18Z","2017-03-19T17:57:56Z"
"","4065","Issue #3837","#3837  But getting this error when `mvn verify` ``` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.8:run (ant-phase-verify) on project checkstyle: An Ant BuildException has occured: The following error occurred while executing this line: [ERROR] /Users/Greg/Desktop/check/config/ant-phase-verify.xml:26 ```","closed","","johnyleebrown","2017-03-20T21:53:55Z","2017-03-22T18:20:12Z"
"","4083","Issue #3837: lambda with no braces not reported when contents span multiple lines","#3837","closed","incomplete,","johnyleebrown","2017-03-22T18:31:54Z","2020-01-17T10:53:52Z"
"","4046","Issue #3755: Update  version of Google Java Style Guide (3 November 2016)","#3755   Based on https://github.com/checkstyle/checkstyle/issues/3755#issuecomment-285851574 and https://github.com/checkstyle/checkstyle/issues/3755#issuecomment-285870120 the following changes and updates were done in scope of the issue:  1) Points 1-12 were not addressed as they did not require changes or updates. 2) > 13 Section 3.3.4 No static import for classes requires an implementation of a new option for AvoidStaticImportCheck. The main idea is to check whether there is an import of a class or there is an import of other static member. Now we check both.  Google Java Style Guide coverage page was updated. I added a link to the issue. @romani, a link to 3.3.4 section should be updated to reference updated cached Google Java Style Guide.  3) > 14 Section 4.1.3 Empty blocks: may be concise requires new examples in IT area.  Added. Examples were taken from Google Java Style Guide.  4) > 15 This change will require the implementation of the logic which will process lambdas for NoLineWrapCheck or OperatorWrap. Now they do not treat lambdas.  Google Java Style Guide coverage page was updated. I added a link to the issue.  5) > 16 This says that any line break may (but not must) be preceded by arbitrary whitespace followed by an implementation comment. So it is not mandatory.  google_checks.xml does not include a config for TrailingComments. EmptyBlock and EmptyCatch will treat the blocks of code which have a trailing comments as non-empty. Thus, there is no need in updating the config.  Updated Google Java Style Guide coverage page: http://mezk.github.io/i3755-google-style-guide/site/google_style.html  @romani  All links which now reference Google Java Style Guide (2016-07-12) should be changed after you cache the updated guide.","closed","","MEZk","2017-03-18T21:47:26Z","2017-03-26T17:57:23Z"
"","4608","Issue #3671: Remove deprecated property maxLineLength from LeftCurlyCheck","#3671","closed","","Kietzmann","2017-07-04T15:34:38Z","2017-07-27T15:57:51Z"
"","4130","Issue #3650: Expand missing testing for PropertyCacheFile tests","#3650","closed","","MEZk","2017-03-30T21:44:30Z","2017-04-23T10:56:04Z"
"","4194","Issue #3616: Fix TC violation - Simplify stream API call chains","#3616","closed","","Vladlis","2017-04-11T21:04:53Z","2017-04-12T09:36:31Z"
"","4193","Issue #3616: Fix TC violation - Redundant suppression","#3616","closed","","Vladlis","2017-04-11T21:04:32Z","2017-04-12T10:22:31Z"
"","4192","Issue #3616: Fix TC violation - Field may be 'final'","#3616","closed","","Vladlis","2017-04-11T20:53:19Z","2017-04-11T21:34:35Z"
"","4124","Issue #3616: Fix TC ""Scope of variable is too broad"" errors","#3616","closed","","Vladlis","2017-03-30T13:04:57Z","2017-04-05T19:25:36Z"
"","4123","Issue #3616: Fix/suppress TC ""Deprecated member is still used"" errors","#3616","closed","","Vladlis","2017-03-30T10:44:07Z","2017-04-05T19:52:21Z"
"","4152","Issue #3607: Use reflection to load Checks base on checkstyle_package…","#3607   At first I didn't introduced reflections lib, instead used guava to get the classes. But later I saw #3455 , then I tried reflections. But in fact guava is also a dependency of reflections. :(  To be honest, I don't think the current fix is good enough. Please give me any suggestions that could avoid using reflections lib.   Do I need to generate a diff report for this fix?  In addition, I am not sure whether the CI would pass or not. `mvn clean verify` success on my local. But the behavior of reflections seems a bit strange, sometimes.","closed","discussion ongoing,","Luolc","2017-04-04T00:20:44Z","2017-05-19T01:19:00Z"
"","4292","Issue #3607: (using Guava) Use reflection to load Checks base on chec…","#3607  As requested at https://github.com/checkstyle/checkstyle/pull/4152#issuecomment-294670538. The mainly differences between this PR and #4152 is `generateNameToFullModuleNameMap` method.  @romani please have a check. :D","closed","","Luolc","2017-04-25T04:06:31Z","2017-05-19T01:20:33Z"
"","4674","Issue #3578: Removed 'url' property from ImportControl","#3578","closed","","Kietzmann","2017-07-09T15:01:25Z","2017-07-10T04:57:18Z"
"","4242","Issue #3496: Refactor JavadocUtils.containsInBranch method","#3496  A separate PR is needed as  method is reimplemented completely.","closed","","Vladlis","2017-04-20T22:06:46Z","2017-04-22T11:54:40Z"
"","4291","Issue #3496: Enforce ReturnCount max=1 (part 3)","#3496   This one is for com.puppycrawl.tools.checkstyle.checks.javadoc. Javadoc checks are slow, so I've made reports only on a few projects (no regression): [JavadocParagraph](https://vladlis.github.io/3496/part3/1/index.html) [JavadocTagContinuationIndentation](https://vladlis.github.io/3496/part3/2/index.html) [JavadocVariable](https://vladlis.github.io/3496/part3/3/index.html)  Did not test JavadocMethodCheck as it is deprecated.","closed","","Vladlis","2017-04-24T21:38:45Z","2017-04-25T16:04:59Z"
"","4296","Issue #3496: Enforce ReturnCount max=1 (part 5)","#3496   Reports for MissingDeprecatedCheck and SuppressWarningsCheck show no regression: https://vladlis.github.io/3496/part5/1/index.html","closed","","Vladlis","2017-04-25T21:04:26Z","2017-04-28T10:29:53Z"
"","4266","ReturnCount: enforce max=1 over checkstyle code (part 2)","#3496","closed","","Vladlis","2017-04-22T20:15:44Z","2017-04-24T19:46:39Z"
"","4239","ReturnCount: enforce max=1 over checkstyle code (part 1)","#3496","closed","","Vladlis","2017-04-20T16:13:11Z","2017-04-22T11:54:31Z"
"","4995","Issue #3332: Added void-elements","#3332 : Added void elements ``, ``, ``, ``","closed","","voidfist","2017-08-24T01:56:10Z","2017-08-25T01:34:25Z"
"","4060","Issue #3172: Regression false-positive FinalLocalVariable","#3172   Diff reports: http://www.luolc.com/checkstyle-diff-report/issue3172/ ~~No diff on regression.~~  BTW, there are two UTs for false positives but why? https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java#L122 https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java#L226","closed","","Luolc","2017-03-19T16:37:17Z","2017-03-23T18:14:25Z"
"","4678","Issue #2883: Remove `cache` field from TreeWalker in Checkstyle 8.0","#2883","closed","","Kietzmann","2017-07-09T15:30:02Z","2017-07-09T15:39:38Z"
"","4386","Issue #2329: Updated lexer grammar to allow javadocs with CR newlines","#2329: Updated lexer grammar to allow javadocs with CR newlines","closed","","voidfist","2017-05-29T00:15:59Z","2017-06-27T00:38:35Z"
"","4199","Issue #1509:  Extra comma is required in multi-line array value","#1509  Reports look good: https://vladlis.github.io/1509/","closed","","Vladlis","2017-04-12T09:41:12Z","2017-04-22T22:19:18Z"
"","4094","Issue #4093: fix broken link in README.md","### Tasks - [x] Raw link replaced with alias link  Related to issue #4093","closed","","unrealwork","2017-03-23T23:09:10Z","2017-03-25T20:55:49Z"
"","4099","Issue #4098: Grammar mistakes in PULL_REQUEST_TEMPLATE.md","### Issue #4098  - [x] Missing articles - [x] Misspelling","closed","","unrealwork","2017-03-25T10:59:03Z","2017-03-27T02:25:55Z"
"","4097","Issue #4095: Split and Organize Checkstyle inputs by Test for AbbreviationAsWordInName","### #4095 Completed tasks  - [x] Tests input resources for test `AbbreviationAsWordInNameCheckTest` replaced to separated folder `abbrevationaswordinname`","closed","","unrealwork","2017-03-24T19:59:53Z","2017-03-25T04:11:32Z"
"","4117","Issue #4037: Extended parent nested class","## Issue #4037  ### Description - [x] Added test from PR - [x] Added additional fields to `ClassDesc` class   - **declaredAsParent** - does class have subclasses   - **nodeAST** - link to node of AST, to retrieve information about postion of class in file   - **depthLevel** - level of nesting class: 0 - outside any classes, 1 - outer class, 2 - first nested, 3 - second ... - [x] Classes handling replaced to `finishTree` method - [x] Classes deque stores all classes , reason - the need to determine parent classes # ### Code review 1 - [x] Remove unnecessary stylish changes # ### Code Review 2 - [x] Move new instances to field's declaration. - [x] Semantic changes - [x] Right curly check changes - [x] Javadoc code styling as pattern - [x] Clear collections in `beginTree` method.","closed","incomplete,","unrealwork","2017-03-28T17:46:44Z","2017-07-03T18:32:27Z"
"","4143","Issue #3201: ignoreInlineArrays property","## #3201  ### Description - [x] Added ` ignoreInlineArrays` property to `ArrayTrailingCommaCheck` control handling the lack of  trailing comma in inline array initialization - [x] Updated xdocs - [x] Addet input test file","closed","incomplete,","unrealwork","2017-04-02T00:11:57Z","2017-07-03T18:36:17Z"
"","4093","README: broken link","![](http://image.prntscr.com/image/b3e635c5a1474f7c820a183943c8d146.png)  You have a broken line in README.md","closed","miscellaneous,","unrealwork","2017-03-23T23:05:36Z","2017-03-24T19:22:45Z"
"","4967","config: activate validation of xdoc files in maven site plugin","","closed","","romani","2017-08-19T13:20:34Z","2017-08-20T14:43:53Z"
"","4965","config: bump wagon-ssh to 3.0.0","","closed","","romani","2017-08-19T12:51:24Z","2017-08-20T12:53:19Z"
"","4964","config: bump powermock to 1.7.1","","closed","","romani","2017-08-19T12:48:02Z","2017-08-20T12:52:51Z"
"","4963","config: bump equalsverifier to 2.3.2","","closed","","romani","2017-08-19T12:45:01Z","2017-08-20T12:51:46Z"
"","4915","config: bump guava to 23.0","","closed","","romani","2017-08-08T14:18:15Z","2017-08-09T06:19:15Z"
"","4914","config: bump maven-compiler-plugin to 3.6.2","","closed","","romani","2017-08-08T14:13:52Z","2017-08-09T05:38:15Z"
"","4913","config: bump equalsverifier to 2.3.1","","closed","","romani","2017-08-08T14:12:04Z","2017-08-09T05:38:15Z"
"","4834","minor: extend message with details about exception.","","closed","","romani","2017-07-27T06:41:32Z","2017-07-27T12:56:03Z"
"","4823","config: remove patching for checkstyle-tester in wercker","","closed","","romani","2017-07-25T13:55:34Z","2017-07-25T14:10:30Z"
"","4776","spelling: fix typo in docs","","closed","","Vladlis","2017-07-20T09:38:49Z","2017-07-20T18:01:06Z"
"","4771","minor: fix javadoc for few methods","","closed","","romani","2017-07-19T23:43:06Z","2017-07-20T00:17:02Z"
"","4661","minor: remove BaseCheckTestSupport.getSrcPath(.....) as it is not used","","closed","","romani","2017-07-08T13:21:43Z","2017-07-08T16:55:14Z"
"","4628","config: bump spotbugs version to 3.0.6","","closed","","romani","2017-07-05T21:37:26Z","2017-07-05T23:13:06Z"
"","4627","config: bump pitest version to 1.2.1","","closed","","romani","2017-07-05T21:32:43Z","2017-07-07T05:26:15Z"
"","4602","Issue #4586:Split and Organize Checkstyle inputs by Test for checks in 'javadoc' package","","closed","","djydewang","2017-07-04T07:48:47Z","2017-07-04T12:05:52Z"
"","4574","config: excluded rnveach from commit validation","","closed","","rnveach","2017-07-01T03:51:15Z","2017-07-01T09:58:12Z"
"","4572","Revert ""config: remove com/github/hazendaz in wercker cache""","","closed","","rnveach","2017-07-01T02:05:15Z","2017-07-01T13:27:49Z"
"","4529","config: bump jgit version to 4.8.0","","closed","","romani","2017-06-26T16:25:03Z","2017-06-26T17:42:51Z"
"","4528","config: bump powermock versioon to 1.7.0","","closed","","romani","2017-06-26T16:20:42Z","2017-06-26T18:40:14Z"
"","4474","config: bump guava to 22.0","","closed","","romani","2017-06-20T13:13:39Z","2017-06-21T13:47:29Z"
"","4459","config: bump versions-maven-plugin to 2.4","","closed","","romani","2017-06-14T22:47:05Z","2017-06-15T06:04:49Z"
"","4458","config: bump org.eclipse.jgit to 4.7.1.201706071930-r","","closed","","romani","2017-06-14T22:46:53Z","2017-06-15T04:40:40Z"
"","4438","Spelling: Fix spelling of name","","closed","","ryanpcmcquen","2017-06-08T20:52:19Z","2017-06-10T02:46:44Z"
"","4416","config: bump equalsverifier version to 2.3","","closed","","romani","2017-06-03T23:40:19Z","2017-06-04T00:47:35Z"
"","4380","config: added MoveVariableInsideIfCheck from sevntu","","closed","","rnveach","2017-05-27T21:35:35Z","2017-05-27T22:22:37Z"
"","4345","config: upgrade to guava 21.0","","closed","","romani","2017-05-11T14:28:49Z","2017-05-24T01:49:35Z"
"","4339","doc: add link to contributing instructions to CONTRIBUTING.md","","closed","","nanaze","2017-05-06T02:45:36Z","2017-05-07T01:14:14Z"
"","4273","config: bump maven-surefire-xxxxxx to 2.20","","closed","","romani","2017-04-23T04:37:30Z","2017-04-23T13:07:01Z"
"","4272","config: bump maven-failsafe-plugin to 2.20","","closed","","romani","2017-04-23T04:37:18Z","2017-04-23T12:38:00Z"
"","4271","config: bump equalsverifier to 2.2.2","","closed","","romani","2017-04-23T04:37:08Z","2017-04-23T12:38:15Z"
"","4270","config: bump org.eclipse.jgit to 4.7.0.201704051617-r","","closed","","romani","2017-04-23T04:36:58Z","2017-04-23T12:38:31Z"
"","4265","spelling: unify THIRDPARTY_PACKAGE into THIRD_PARTY_PACKAGE in comments","","closed","","whym","2017-04-22T12:44:56Z","2017-04-22T20:05:20Z"
"","4201","spelling: fix grammar in messages.properties for indentation package","","closed","","Vladlis","2017-04-12T11:36:47Z","2017-04-17T19:34:21Z"
"","4196","ImportOrder option ""bottom"" allows the same static import placement as ""under""","","closed","","vrozov","2017-04-12T02:23:05Z","2017-04-14T02:34:51Z"
"","4170","doc: fix documentation for METHOD_REF token","","closed","","subkrish","2017-04-07T14:36:28Z","2017-04-07T19:33:51Z"
"","4163","config: bump pitest to 1.2.0","","closed","","romani","2017-04-05T11:40:54Z","2017-04-05T12:54:32Z"
"","4162","config: bump slf4j-simple to 1.7.25","","closed","","romani","2017-04-05T11:38:45Z","2017-04-05T12:43:56Z"
"","4161","config: bump version antlr4 to 4.7","","closed","","romani","2017-04-05T11:37:08Z","2017-04-05T12:20:33Z"
"","4133","spelling: fix typos in tests","","closed","miscellaneous,","Vladlis","2017-03-31T11:40:10Z","2017-04-05T19:52:11Z"
"","4127","spelling: fix typos in xdocs","","closed","miscellaneous,","Vladlis","2017-03-30T15:57:23Z","2017-04-05T19:52:12Z"
"","4126","Pull #4126: Fix typo in @serialField javadoc tag validation","","closed","miscellaneous,","Vladlis","2017-03-30T15:20:32Z","2017-04-05T19:52:15Z"
"","4125","spelling: fix some typos in code/javadoc/comments","","closed","","Vladlis","2017-03-30T14:29:42Z","2017-04-05T19:52:18Z"
"","4050","spelling: fix spelling and punctuation in comments (RightCurly)","","closed","","MEZk","2017-03-18T22:47:20Z","2017-03-26T17:56:39Z"
"","4048","minor: extend warning pattern in ITs to have spaces in C-style comments","","closed","miscellaneous,","Vladlis","2017-03-18T22:14:11Z","2017-03-22T21:12:00Z"
"","4033","doc: fix typos in Travis PR validation messages","","closed","","Vladlis","2017-03-17T16:36:37Z","2017-03-23T09:00:15Z"
"","4018","config: bump slf4j-simple version to 1.7.24","","closed","","romani","2017-03-16T01:04:58Z","2017-03-16T12:40:25Z"
"","4017","config: bump version of org.eclipse.jgit to 4.6.1.201703071140-r","","closed","","romani","2017-03-16T01:03:27Z","2017-03-16T12:40:09Z"
"","4016","config: bump version to commons-cli 1.4","","closed","","romani","2017-03-16T01:01:24Z","2017-03-16T12:40:00Z"