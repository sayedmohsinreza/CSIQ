"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","1545","Fix overly-strict interpretation of the Google style guide regarding …","…single-line Javadoc.  Section 7.1.1 of the Google Style Guide states ""The single-line form may be substituted when there are no at-clauses present"". It doesn't define at-clauses directly, but section 7.1.3 strongly suggests that it's referring to out-of-line tags like `@param` and `@return`, not inline tags like `@link` and `@code`. This matches my experience inside Google, and a random web search shows that at least one other Google person considers this a bug: https://github.com/grpc/grpc-java/issues/111.","closed","incomplete,","ekuefler","2015-08-03T07:12:41Z","2015-09-24T15:31:00Z"
"","1722","solution to ""FinalLocalVariable doesn't report variable when first as…","…signment is separated"" #1551","closed","incomplete,","Bhavik3","2015-08-16T17:52:50Z","2015-10-13T16:57:28Z"
"","1211","Solution to wrong variable reported because of name shadowing in Fina…","…lLocalVariableCheck. solves #1142","closed","","Bhavik3","2015-06-15T09:57:16Z","2017-03-04T00:19:35Z"
"","1255","Solution to NullPointerException at findClassOrMethodInWhichItIsDefin…","…ed method.","closed","","Bhavik3","2015-06-28T15:50:17Z","2015-06-28T17:05:23Z"
"","1280","Change default value of property ""format"" to ""^Abstract.*$"" in Abstra…","…ctClassNameCheck #1279","closed","","Bhavik3","2015-07-04T06:16:34Z","2015-07-06T03:37:56Z"
"","1994","Issue #1555: Decrease visibility of public constructor in non-public …","…class  Fixes `PublicConstructorInNonPublicClass` inspection violations.  Description:  > Reports all constructors in non-public classes that are declared public.","closed","","mkordas","2015-08-29T08:29:51Z","2015-08-29T13:13:56Z"
"","1228","skipEnhancedForLoopVariable property is added in ModifiedControlVaria…","…bleCheck. solves #1015","closed","","Bhavik3","2015-06-19T08:51:02Z","2015-06-27T15:42:30Z"
"","1423","Fix RightCurlyCheck with same option not to rise expression in single…","…-line blocks - issue #1416  Add additional guard to not raise error when block is in single line, removed test which test old behaviour of one line block(raising error)","closed","","liscju","2015-07-20T13:06:13Z","2015-08-17T10:45:17Z"
"","1191","Solution to ""Incorrect config file cause CLI finish with error but no…","… output with details"" solves #1180","closed","","Bhavik3","2015-06-08T06:51:56Z","2015-06-19T16:25:06Z"
"","1485","Make IndentationCheck accept right parantheses of annotation alone in…","… line indent same as annotation begin, fixes #1349","closed","","liscju","2015-07-26T21:19:09Z","2018-11-15T22:52:48Z"
"","1341","xml-maven-plugin reports violation in site.xml","xml-maven-plugin reports violation in site.xml https://github.com/Vladlis/checkstyle/commit/79de7c95a420e00fb358f0f40d0397e916297f0e#diff-600376dffeb79835ede4a0b285078036R1009  > [ERROR] Failed to execute goal org.codehaus.mojo:xml-maven-plugin:1.0:validate (default-cli) on project checkstyle: While parsing /home/vlad/eclipseProjects/checkstyle/src/site/site.xml, at file:/home/vlad/eclipseProjects/checkstyle/src/site/site.xml, line 24,  column 31: cvc-complex-type.3.2.2: Attribute 'width' is not allowed to appear in element 'logo'. -> [Help 1]","closed","approved,","Vladlis","2015-07-10T16:04:19Z","2015-07-12T16:29:36Z"
"","1544","100% coverage in OuterType check. Issue #1290","Without significant changes in check's code","closed","","sabaka","2015-08-02T23:06:16Z","2017-04-28T13:42:38Z"
"","1655","Coverage has been increased to 100% in DetectorOptions. Issue #1010","Without important changes in code","closed","","sabaka","2015-08-10T22:16:00Z","2015-09-03T23:34:47Z"
"","1877","Coverage has been increased to 100% in UniquePropertiesCheck. Issue #1290","without changes in code","closed","","sabaka","2015-08-24T02:34:10Z","2015-09-03T23:26:04Z"
"","1550","Coverage has been increased to 100% in DescedantTokensCheck. Issue #1290","Without changes in code","closed","","sabaka","2015-08-03T21:36:16Z","2015-09-03T23:34:59Z"
"","1703","Coverage has been increased to 100% in CheckUtils. Issue #1290","without changes in CheckUtils.","closed","","sabaka","2015-08-15T00:28:53Z","2015-09-03T23:35:15Z"
"","1669","JavadocVariableCheck configuration option to skip enum values","When you activate the JavadocVariableCheck it also requires you to add a javadoc comment to each enum value. It would be nice if there was a configuration option to disable this check for enums.","closed","","jpraet","2015-08-12T17:58:17Z","2015-09-12T14:38:20Z"
"","1511","RightCurlyCheck should print user a column number in log message.","When we use right curly policy ALONE  it is not clear to what curly brace is violated in following code example and etc:   ``` java } finally { toString(); } //line 580 ```  ![screenshot](https://cloud.githubusercontent.com/assets/7242568/8966273/2459a1e4-3639-11e5-9dd0-f166e1e16f54.png)  We need to print user a column number to exactly point him to a problem.","closed","approved,","MEZk","2015-07-29T18:32:45Z","2015-08-04T03:47:44Z"
"","1349","Indentation on annotation parameters is wrong","When using ``, during build checkstyle 6.8.1 complains about:  ```     @Cascade(         org.hibernate.annotations.CascadeType.DELETE_ORPHAN     ) ```  with:  ``` ClickConfig.java:77: ')' have incorrect indentation level 4, expected level should be 8. ```  But it should accept such formatting as the right parenthes closes a block that started on indentation level 4, so it should also be on 4, not on 8.","closed","indentation,","krzyk","2015-07-11T07:50:07Z","2016-01-03T20:07:20Z"
"","1062","Clarify misleading command line tool (CLI) output","When the version 6.6 command line tool reports Audit errors, it appends the message ""Could not execute Checkstyle: ..."", which is untrue. After that it dumps a stack trace and prints usage hints, which are pointless in this situation.   For batch processing it would be useful to map problems to the exit code, like 0 = checkstyle fine, no problems found, <0 = checkstyle failed, >0 checkstyle ok, but found Audit errors.","closed","high demand,","rs23","2015-05-08T05:20:40Z","2015-06-14T16:38:54Z"
"","1281","Error in checkstyle xml-file Unable to create a checker...","When running this setting I got the error message: Unable to create a Checker: cannot initialize module TreeWalker - Property 'ignoreInlineTags' in module TreeWalker does not exist, please check the documentation  Please change the 194 and 195 into:","closed","","hjmf1954","2015-07-04T13:51:35Z","2015-07-11T02:50:17Z"
"","1342","Checkstyle build does not work on Windows due to case insensitive paths","When introducing changes for #863, code that is not compiling on Windows was brought to Checkstyle tests.  In Unix environments it is possible to have both class `Writer` and `writer` in one path. On Windows it fails during Maven compilation phase due to case insensitivity.  First error from console:  ``` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.18.1:test (default-test) on project checkstyle: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.18.1:test failed: There was an error in the forked process [ERROR] java.lang.NoClassDefFoundError: com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck$Writer (wrong name: com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck$writer) [ERROR] at java.lang.ClassLoader.defineClass1(Native Method) [ERROR] at java.lang.ClassLoader.defineClass(ClassLoader.java:760) [ERROR] at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) [ERROR] at java.net.URLClassLoader.defineClass(URLClassLoader.java:455) [ERROR] at java.net.URLClassLoader.access$100(URLClassLoader.java:73) [ERROR] at java.net.URLClassLoader$1.run(URLClassLoader.java:367) [ERROR] at java.net.URLClassLoader$1.run(URLClassLoader.java:361) [ERROR] at java.security.AccessController.doPrivileged(Native Method) [ERROR] at java.net.URLClassLoader.findClass(URLClassLoader.java:360) [ERROR] at java.lang.ClassLoader.loadClass(ClassLoader.java:424) [ERROR] at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) [ERROR] at java.lang.ClassLoader.loadClass(ClassLoader.java:357) [ERROR] at java.lang.Class.getDeclaredMethods0(Native Method) [ERROR] at java.lang.Class.privateGetDeclaredMethods(Class.java:2693) [ERROR] at java.lang.Class.privateGetMethodRecursive(Class.java:3040) [ERROR] at java.lang.Class.getMethod0(Class.java:3010) [ERROR] at java.lang.Class.getMethod(Class.java:1776) [ERROR] at org.apache.maven.surefire.util.ReflectionUtils.tryGetMethod(ReflectionUtils.java:57) [ERROR] at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.isSuiteOnly(JUnit3TestChecker.java:64) [ERROR] at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.isValidJUnit3Test(JUnit3TestChecker.java:59) [ERROR] at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.accept(JUnit3TestChecker.java:54) [ERROR] at org.apache.maven.surefire.common.junit4.JUnit4TestChecker.accept(JUnit4TestChecker.java:52) [ERROR] at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:97) [ERROR] at org.apache.maven.surefire.junit4.JUnit4Provider.scanClassPath(JUnit4Provider.java:222) [ERROR] at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:107) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) [ERROR] -> [Help 1] ```","closed","approved,","mkordas","2015-07-10T21:13:05Z","2015-07-10T22:24:18Z"
"","1263","CustomImportOrder check: first import which does not belong to any group causes incorrect behavior","When first import in a file does not belong to any of the groups, Checksyle reports a problem with other imports, not with first one. It should be at the end of the list according to [CustomImportOrder documentation](http://checkstyle.sourceforge.net/config_imports.html#CustomImportOrder))  ``` java package java.util.concurrent.locks; // first import is not from SAME_PACKAGE import com.puppycrawl.tools.checkstyle.Utils; import java.util.*; import java.util.List;  public class InputCustomImportOrderSamePackage2 { } ```  Output:  ``` Starting audit... /home/alex/test.java:4: warning: Import statement is in the wrong order. Should be in the SAME_PACKAGE' group. /home/alex/test.java:5: warning: Import statement is in the wrong order. Should be in the SAME_PACKAGE' group. Audit done. ```  Configuration file  ``` xml                                                                                  ``` ##","open","approved,","ivanov-alex","2015-06-29T20:42:01Z","2017-03-18T18:10:25Z"
"","1304","Rethrow all exceptions further to caller of Checker","When exception happen in Checkstyle that is wrapped by eclipse-cs , there is no way to get reason(full stack) of exception. ![eclipsecs-checkstyle-exception](https://cloud.githubusercontent.com/assets/812984/8538169/90bf6270-241d-11e5-9476-35857d864f98.png)  When a check throws an exception it is caught somewhere in Treewalker and logged as a Checkstyle violation with error severity. The exception never shows up in plugin code, hence it's currently impossible to log the exception into the Eclipse error log.  Additional ""Checker"" option might be created to let plugins adjust Checkstyle to log all failures as ERROR events or catch and handle that exceptions at plugin level, but that is not good solution as Checktyle is more a library rather then execution module (cli, ant). Only caller know how to properly log Exception to EventLogger or file or its own logger or ........   Checkstyle code could be rewriten to always rethrow exception to caller (CLI(Main.java), plugins, ....). CLI need to be updated to log exception to console (so option will not be required at all), Ant extension class should rethrow exceptions to ANT.","closed","approved,","romani","2015-07-07T03:33:41Z","2015-09-01T14:14:57Z"
"","1254","JavadocVariable check wrongly reports that local variables in lambda expressions should be documented when the lambda is placed on a field initializer","When a lambda expression is placed on a field initializer, and the lambda body contains local variables, the local variables are wrongly detected by JavadocVariable check.  For example:  ``` java public class LambdaVar {     /** Runnable. */     private Runnable r = () -> {         String str = ""Hello world"";     }; } ```  JavadocVariable reports that `str` should be documented:  ``` Starting audit... /home/taku/pj/lambdavar/LambdaVar.java:4:9: Missing a Javadoc comment. Audit done. Checkstyle ends with 1 errors. ``` ##","closed","javadoc,","miyakawataku","2015-06-28T13:45:32Z","2016-12-14T18:17:54Z"
"","1021","Third Party Grouping Issues for CustomImportOrderCheck","When ""sortImportsInGroupAlphabetically"" is turned on for CustomImportOrderCheck, it creates false errors when different third party utility imports are separated by a blank line, and the alpha ordering starts over from scratch.  These blank line separations are done because, what I assume, is the classes are located in separate JARs. For me, Eclipse's automatic ""Organize Imports"" does this separating out for me, so my issue is getting CustomImportOrderCheck to stop flagging these lines since Eclipse keeps making them. I am unsure if this is a specific setting in Eclipse, turned on by default, or if this is standard for other IDEs.  Example code:  ``` package test;  import java.io.File; import java.io.IOException;  import js.blah.blah; // line 6  import com.rveach.blah1; // line 8 //WARN import com.rveach.blah2; // line 9  public class Test { } ```  Message:  ``` Test.java:8: Wrong lexicographical order for 'com.rveach.blah1' import. ```  Config:  ```                                                                                    ```  There are no errors on 9, since it is in order compared to 8.","closed","","rnveach","2015-04-29T17:50:59Z","2015-06-04T23:24:56Z"
"","1800","Unused method parameters should be removed. Issue #46","We have one more warning on this line, but I think it is not good idea to remove parameter from public method in abstract class: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java#L126","closed","","sabaka","2015-08-19T22:50:41Z","2015-09-03T23:33:04Z"
"","1799","String literals should not be duplicated. Issue #46","We have one more violation, but I disagree with it. It ask to replace ""plain"" from here https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Main.java#L154","closed","","sabaka","2015-08-19T22:43:06Z","2015-09-03T23:27:10Z"
"","1290","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks","We have following in pom:  ```           .*.checks.AbstractOptionCheck10080           .*.checks.AbstractTypeAwareCheck8784           .*.checks.AbstractTypeAwareCheck\$.*5080           .*.checks.ArrayTypeStyleCheck10094           .*.checks.AvoidEscapedUnicodeCharactersCheck9798           .*.checks.CheckUtils9197           .*.checks.ClassResolver8593           .*.checks.AbstractDeclarationCollector94100           .*.checks.DescendantTokenCheck9196           .*.checks.NewlineAtEndOfFileCheck8388           .*.checks.OuterTypeFilenameCheck7192           .*.checks.SuppressWarningsHolder7593           .*.checks.TodoCommentCheck10092           .*.checks.TrailingCommentCheck9093           .*.checks.TranslationCheck8183           .*.checks.UncommentedMainCheck8388           .*.checks.UniquePropertiesCheck\$.*7590           .*.checks.UpperEllCheck10083 ```  after tests improvement(to be 100% cevered) that lines have to be removed from pom.xml.","closed","approved,","sabaka","2015-07-05T17:56:32Z","2015-10-08T20:10:33Z"
"","1081","new Check: visibility modifier has to be written for every method","Visibility modifier for every method even when not needed for the compiler like for example ""public"" in interfaces.  Reasons: - uniform appearance                 - avoids additionally thinking about special cases like in which class am I, scroll, scroll, scroll                     oh that's a interface.                 -> reading is more important than writing ##","open","new module,","agrasmueck","2015-05-15T12:01:04Z","2016-12-14T18:17:03Z"
"","1629","Issue #1566: unused imports removed","Violations fixed: - UnusedImports Unused import - java.io.IOException.","closed","","rdiachenko","2015-08-09T05:33:25Z","2015-08-09T17:18:07Z"
"","1644","Issue #1566: TodoComment violations fixed","Violations fixed: - TodoComment Comment matches to-do format 'TODO:'.","closed","","rdiachenko","2015-08-09T22:37:58Z","2015-08-12T04:41:36Z"
"","1622","Issue #1566: column X should be alone on a line fixed","Violations fixed: - RightCurly '}' at column X should be alone on a line.","closed","","rdiachenko","2015-08-08T22:22:11Z","2015-08-09T17:18:32Z"
"","1625","Issue #1566: Line has trailing spaces violations fixed","Violations fixed: - RegexpSingleline Line has trailing spaces.","closed","","rdiachenko","2015-08-08T22:52:33Z","2015-08-09T17:18:45Z"
"","1626","Issue #1566: Line cannot start with this symbol violations fixed","Violations fixed: - RegexpSingleline Line cannot start with this symbol, move it to the previous line  **NOTE:**  This Qulice's configuration:  ```  ```  contradicts with this one:  ```                  ```  for `==` operator.  I managed to fix all such violations by moving `==` into one line with its operands.","closed","","rdiachenko","2015-08-08T23:17:23Z","2015-08-09T17:18:40Z"
"","1618","Issue #1566: WhitespaceAfter, DeclarationOrder, ArrayTrailingComma, ParenPad violations fixed","Violations fixed: - ParenPad '(' is followed by whitespace. - TrailingComment Don't use trailing comments. (partial) - ArrayTrailingComma Array should contain trailing comma. - DeclarationOrder Static variable definition in wrong order. - WhitespaceAfter ',' is not followed by whitespace. - WhitespaceAfter 'typecast' is not followed by whitespace.","closed","","rdiachenko","2015-08-08T21:44:12Z","2015-08-09T17:17:28Z"
"","1642","Issue #1566: ModifiedControlVariable violations fixed","Violations fixed: - ModifiedControlVariable Control variable 'X' is modified.","closed","","rdiachenko","2015-08-09T21:55:24Z","2015-08-31T21:38:08Z"
"","1623","Issue #1566: '(' should be on the previous line fixed","Violations fixed: - MethodParamPad '(' should be on the previous line.","closed","","rdiachenko","2015-08-08T22:25:58Z","2015-08-09T17:17:36Z"
"","1684","Issue #1566: MemberName and MethodName violations fixed","Violations fixed: - MemberName Name 'x' must match pattern '^[a-z][a-z0-9][a-zA-Z0-9]*$'. - MethodName Name 'x' must match pattern '^[a-z]{2,}[a-zA-Z]+$'.","closed","","rdiachenko","2015-08-13T20:15:22Z","2015-08-31T21:38:06Z"
"","1643","Issue #1566: MagicNumber violations fixed","Violations fixed: - MagicNumber 'X' is a magic number.","closed","","rdiachenko","2015-08-09T22:30:30Z","2015-08-31T21:38:05Z"
"","1624","Issue #1566: First sentence should end with a period violations fixed","Violations fixed: - JavadocStyle First sentence should end with a period.","closed","","rdiachenko","2015-08-08T22:45:20Z","2015-08-09T17:18:59Z"
"","1870","Issue #1566: JavadocStyle violations fixed","Violations fixed: - JavadocStyle `First sentence should end with a period.`","closed","","rdiachenko","2015-08-23T06:57:23Z","2015-08-31T21:37:59Z"
"","1620","Issue #1566: JavadocMethod @return violations fixed","Violations fixed: - JavadocMethod Expected an @return tag.","closed","","rdiachenko","2015-08-08T22:04:36Z","2015-08-09T17:18:54Z"
"","1628","Issue #1566: incorrect indentation fixed","Violations fixed: - Indentation 'X' child have incorrect indentation level Y, expected level should be Z.","closed","","rdiachenko","2015-08-09T05:29:44Z","2015-08-09T17:19:13Z"
"","1686","Issue #1566: HideUtilityClassConstructor violations fixed","Violations fixed: - HideUtilityClassConstructor - Utility classes should not have a public or default constructor.","closed","","rdiachenko","2015-08-13T21:23:10Z","2015-08-31T21:37:19Z"
"","1657","Issue #1566: HiddenField violations fixed","Violations fixed: - HiddenField 'X' hides a field.  HiddenField gave us 350 violations. After configuring the check with the following options:  ```    ```  the number of violations were reduced to 75 which were fixed manually.","closed","","rdiachenko","2015-08-10T23:57:01Z","2015-08-31T21:37:16Z"
"","1621","Issue #1566: Constructor definition in wrong order fixed","Violations fixed: - DeclarationOrder Constructor definition in wrong order.","closed","","rdiachenko","2015-08-08T22:16:24Z","2015-08-09T17:19:24Z"
"","1619","Issue #1566: AnnonInnerLength violations fixed","Violations fixed: - AnonInnerLength Anonymous inner class length is 'X' lines (max allowed is 20).","closed","","rdiachenko","2015-08-08T21:52:22Z","2015-08-09T17:16:59Z"
"","1779","Issue #1566: 'missing javadoc comment' violations partial fix","Violations fixed partially: - JavadocMethod: Missing a Javadoc comment. - JavadocVariable: Missing a Javadoc comment.","closed","","rdiachenko","2015-08-19T20:17:53Z","2015-08-31T21:31:03Z"
"","1879","Update EqualsVerifier to 1.7.4","Version 1.7.4  You can now … - …avoid adding prefab values for   - JavaFX (Java 8 only),   - javax.naming.Reference. - …avoid exceptions thrown from SBT. - …get better reporting on subclasses of versioned entities.","closed","","mkordas","2015-08-24T11:39:06Z","2015-08-25T11:05:53Z"
"","1106","Configurable ConstantName Check","Variable names which are skipped by `ConstantName` check are hardcoded   https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java#92  Allow to configure set of variable names to skip using `ConstantName` module in `checkstyle.xml`  The real use case for it is to skip on name `logger`.  As a workaround we use `@SuppressWarnings`","closed","approved,","mishadoff","2015-05-19T16:36:09Z","2015-07-13T13:53:14Z"
"","1898","Move utils classes to utils package.","Utils shouldn't be spread along all project and especially it shouldn't be placed in api package.","closed","approved,","sabaka","2015-08-25T21:46:55Z","2015-08-31T19:59:12Z"
"","1321","Issue #1293: Refactoring of HiddenFieldCheck.","UT coverage has been improved Reports on Guava project: http://baratali.github.io/ (reports are identical before and after changes)","closed","","baratali","2015-07-08T18:48:55Z","2015-07-09T10:17:16Z"
"","1239","Ordering issue with nested classes in static imports","Using CheckStyle `6.7`.  I'm trying to find a configuration of the `ImportOrder` rule that matches Eclipse's default import ordering rules. I'm currently using:  ```                                                                 ```  which works great for everything except for static imports of nested classes fields.  Eclipses insists on this order:  ``` import static io.netty.handler.codec.http.HttpHeaders.addHeader; import static io.netty.handler.codec.http.HttpHeaders.Names.DATE; ```  while `sortStaticImportsAlphabetically` wants:  ``` import static io.netty.handler.codec.http.HttpHeaders.Names.DATE; import static io.netty.handler.codec.http.HttpHeaders.addHeader; ```  At this point I'm not sure what to do besides opening this issue. I'm not sure it's a CheckStyle bug, after all Eclipse has a pretty convoluted ordering strategy. This said, it seems to make sense to give precedence to methods/fields of parent class before the methods/fields of a nested class...","closed","approved,","ddossot","2015-06-24T17:36:26Z","2015-07-29T14:53:26Z"
"","1229","catch NoClassDefFoundError in ClassResolver, #1192","Unfortunately, I've failed to reproduce the problem with CLI.","closed","","Vladlis","2015-06-19T22:05:26Z","2015-06-25T19:24:39Z"
"","1534","Remove unnecessary consecutive lines in Checkstyle code","Two or more consecutive empty lines usually are totally unnecessary.  The following regexp can be used to detect such cases: `\r?\n[\t ]*\r?\n[\t ]*\r?\n`.  Additional step could be to enforce no future violations with RegexpMultiline check.","closed","approved,","mkordas","2015-08-01T23:31:01Z","2015-08-03T01:42:12Z"
"","1208","use favicon images at web site","Two images: images/favicon.ico images/favicon.png  Apply to all pages.","closed","approved,","romani","2015-06-13T22:32:36Z","2015-06-13T22:33:32Z"
"","1518","Added tests for validating commit message. Issue #937","To specification of patterns for commit message to match (from: https://github.com/checkstyle/checkstyle/wiki/Release-notes-automation#validation-of-last-commit-message-to-reference-issue-number ) I added newline character before end of pattern because in my environment git always add it to the end of message. I cant find information in web about this behaviour , so i dont know if it is common for git or my env. Matter to discuss is extracting class like CommitMessageValidation where matching could be done, instead of doing it in test (lastCommitMessage.matches(ACCEPTED_COMMIT_MESSAGE_PATTERN) ) , if we extract it would be easier to test, but matching functionality is so small that it probably could stay in test.","closed","","liscju","2015-07-31T16:25:08Z","2015-09-06T12:37:12Z"
"","1648","Extended messages for CustomImportOrder","to make them more informative  Reports to show how messages have changed and that no more new violations added: Sevntu: [BEFORE](http://ivanov-alex.github.io/target_messages_sevntu_before/site/checkstyle.html), [AFTER](http://ivanov-alex.github.io/target_messages_sevntu_after/site/checkstyle.html), [comparison](https://www.diffchecker.com/geoblmsp) Bazel: [BEFORE](http://ivanov-alex.github.io/target_messages_bazel_before/site/checkstyle.html), [AFTER](http://ivanov-alex.github.io/target_messages_bazel_after/site/checkstyle.html), [comparison](https://www.diffchecker.com/v8mmdxy1)","closed","","ivanov-alex","2015-08-10T08:27:49Z","2015-08-27T08:32:16Z"
"","1159","PMD ExceptionAsFlowControl: Do not use exceptions as flow control to create objects in PackageObjectFactory","To instantiate each module in Checkstyle multiple exceptions are thrown: - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#L90 - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#L142  This should be refactored to not use exceptions.","closed","miscellaneous,","mkordas","2015-05-31T18:16:39Z","2016-02-16T14:32:58Z"
"","1661","Fix headers for classes in 'gui' package. #945","This will be automatically enforced in the future if only 'gui' will be removed from suppressions at https://github.com/checkstyle/checkstyle/blob/master/config/ant-phase-verify.xml#L31","closed","","mkordas","2015-08-11T20:13:23Z","2015-08-11T21:02:31Z"
"","1044","Make message-based checks invariant to Locale","This PR uses the `ROOT` locale for tests, rather than `ENGLISH` to fix compatibility issues on non-English systems.  The problem with `ENGLISH` is that Java searches for the file `messages_en.properties`, which does not exist. Instead of falling back to `messages.properties`, it tries to load the one for the current locale first. I'm not sure why it does that.  In any case, the correct way is to use `ROOT`, which explicitly uses the ""default"" and language-invariant file without language specifier.  **How to reproduce:** Set the default locale to some other language:   ``` Locale.setDefault(Locale.GERMAN); ```  in a unit test that compares text messages and it will fail.  **Note**: A few checks (about 25) are based on comparing Exception messages. They are not affected by this and thus still do not work on non-English Locales.","closed","approved,","msteiger","2015-05-02T09:49:56Z","2015-05-27T15:40:18Z"
"","1045","Add LineSeparatorOption.LF_CR_CRLF","This PR adds the `LineSeparatorOption.ANY` and the respective checks in `NewlineAtEndOfFileCheck`. Also, a unit test is added to cover the new functionality.  **Why is that useful?** Our team uses common configuration files, so we need to share one setting. However, I would like to use `LF` line endings on Windows, just as git does internally to avoid file conversions. This is currently not possible.  With the `ANY` option, the two questions ""Which line ending type is used?"" and ""Is there a new line at the end of the file"" can now be looked at separately.   I also changed the comparison method from String to byte[] in the `US_ASCII` charset, as it avoids the wrapping and is invariant to the used Locale. It is also probably a lot faster.  Sidenote: The first question is not answered yet by any of the checks yet. Maybe a new LineEnding check makes sense to ensure that all files use the same type?  I also added ""InputNewlineLfAtEndOfFile.java"" to `.gitattributes`, since the test explicitly covers `LF` line endings.  https://help.github.com/articles/dealing-with-line-endings/ http://git-scm.com/docs/gitattributes","closed","approved,","msteiger","2015-05-02T11:14:15Z","2015-05-21T18:49:27Z"
"","1387","Problem with UT coverage for ""default"" branch on switch(enum)","This issue was entered to write down the problem, research performed to find solution and decision so that it can be changed to better in the future.  ImportOrderCheck contains following peace of code in visitToken:  ``` java         switch (getAbstractOption()) {             case TOP:                 // code for top                 ...             case UNDER:                 // code for under             default:                 // code for default ```  getAbstractOption() return enum and case arguments are all options of enum. As a result, ""default"" option is never executed affecting UT coverage.  Following options to resolve were reviewed: 1) Change last option to default. Rejected because it will make code less clear. Person who analyses this code in the future will need to review several files (AbstractOptionCheck and ImportOrderOption) to understand which option is processed this way and why (which not very obvious) 2) Change enum dynamically on runtime using reflection. Rejected as a result of investigation, see description on the bottom. 3) Refactor to avoid using enum in switch, use strings (option names) or integers (option ordinal numbers). Rejected because it is significant code change to satisfy coverage plugin (not a good idea). 4) combine default with last option. Rejected because it is not obvious solution and one will try to optimize it later by removing ""case UNDER"".  ``` java             case UNDER:             default:                 // actions for UNDER option, no actions for default. ```  5) Refactor to if statements. Code will have more brackets and repeating of switch argument, so it will be less elegant comparing to switch.  6) Suppress warnings for this branch. Rejected because coverage tools cannot suppress lines of codes, only methods for now. See links on the bottom of the message. Option 5 was chosen as lesser evil. Option 6 will be a good candidate after coverage tools improvement. ##### Reflection Investigation:  Several options were found in the Internet: 1) Reflection approach1 (http://www.javaspecialists.eu/archive/Issue161.html). This article is dated 2008-05-23 and labeled ""Java version: Sun JDK 6"".  Outcome: I failed to compile code from it: some classes used are not available in packages in imports section. Looks like it is outdated Java-specific code 2) Reflection approach2. More up-to-date code: http://stackoverflow.com/questions/25355936/aspectj-is-is-possible-to-extend-an-enums-value (originating [Jérôme Kehrli's blog](from http://niceideas.ch/roller2/badtrash/entry/java_create_enum_instances_dynamically)) You can find code on: https://gist.github.com/ivanov-alex/f76bdc6483d14662e188 Outcome: It changes enum succesfully, but it doesn't help. When I run test testCoverDefaultInVisitToken() individually in Eclipse or debug it, it works. When I run test suite for the check or all tests using ""mvn clean verify"", it fails with ""java.lang.ArrayIndexOutOfBoundsException: 5"" on a switch statement. 3) Mock enum using something like Mockito (based on http://stackoverflow.com/questions/5323505/mocking-java-enum-to-add-a-value-to-test-fail-case) You can find code on: https://gist.github.com/ivanov-alex/e0cc14d3dc6fc1520283  Finally it appeared that problem cannot be solved with reflection due to physical implementation of switches: http://www.benf.org/other/cfr/switch-on-enum.html ##### Coverage links  Problem can not be suppressed due to limitations of cobertura and jacoco. Cobertura ignore options are applicable to methods only(not by line): https://github.com/cobertura/cobertura/wiki/Ant-Task-Reference#ignore-method-annotation https://github.com/cobertura/cobertura/wiki/Coverage-Annotations jacoco filters are not implemented (ignore options): https://github.com/jacoco/jacoco/issues/15 https://github.com/jacoco/jacoco/issues/14 https://github.com/jacoco/jacoco/wiki/FilteringOptions","closed","approved,","ivanov-alex","2015-07-15T05:18:01Z","2015-07-17T00:30:32Z"
"","1006","NeedBraces: false positives for single line 'if' in 'for', with allowSingleLineStatement enabled","This issue should be considered together with #1007 .  http://checkstyle.sourceforge.net/config_blocks.html#NeedBraces  For the NeedBraces check, with allowSingleLineStatement, I've identified what appear to be a false positive.  Two problems are reported for single line 'if' in single line 'for':  ``` java         for (int i = 0; i < 10; i++) if (i == 5) break; ```  One for the 'if', and one for the 'for', which are indicated as both needing braces, while they clearly don't, as both are single line. ##","closed","discussion ongoing,","dhendriks","2015-04-28T14:15:44Z","2016-12-11T16:16:51Z"
"","1007","NeedBraces: false positives for single line 'if' in 'else', with allowSingleLineStatement enabled","This issue should be considered together with #1006 .  http://checkstyle.sourceforge.net/config_blocks.html#NeedBraces  For the NeedBraces check, with allowSingleLineStatement, I've identified what appear to be a false positive.  Problems are reported for the following:   ``` java         int x = 0;         if      (x == 0) x = 1;         else if (x == 1) x = 2;         else if (x == 2) x = 3;         else             x = 4; ```  On the 3rd and 4th lines, it reports that the 'if' needs braces, while it is clearly single line. It seems to me this is a bug, as the 'if' is single line. ##","closed","discussion ongoing,","dhendriks","2015-04-28T14:17:45Z","2016-12-14T18:17:59Z"
"","1041","Fix PMD violations from SimplifyStartsWith rule, issue #949","This is very controversial change, let's discuss.","closed","","mkordas","2015-05-01T22:34:23Z","2015-05-03T18:31:32Z"
"","1059","IndentationCheck does not work with single line comments in the middle","This is not related to CommentsIndentationCheck as the comments are not stand-alone, but in the middle of a statement. These comments are in the middle of an if statement for explanations about the separate conditions. IndentationCheck incorrectly marks them as errors when they are formatted correctly with Eclipse.  Config:  ```                                                                                                              ```  Input after formatted with Eclipse (ignore ""//<-- "" as explanations of the start of the lines)  ``` package test;  public class TestClass {     public static void test() { //<-- 4:4         if ( //<-- 5:8         // comment explaining complex condition //<-- 6:8         (true) && //<-- 7:8         // comment explaining 2nd complex condition //<-- 8:8         (true)) { //<-- 9:8             System.out.println(""work""); //<-- 10:12         } //<-- 11:8     } //<-- 12:4 } ```  Errors:  ``` TestClass.java:7: 'if' child have incorrect indentation level 8, expected level should be 12. TestClass.java:9: 'if' child have incorrect indentation level 8, expected level should be 16. ```  It doesn't know the comments are there which affects the indentation on the following line. I couldn't find a specific setting in Eclipse that changed this behavior. Even the built-in formatter does it. ##","open","indentation,","rnveach","2015-05-07T02:07:12Z","2016-12-14T18:16:42Z"
"","1548","Add lambda support to indentation check","This is a first pass for lambda support in the indentation check. All unit and integration tests pass. The test case is based on the test case in this branch: https://github.com/checkstyle/checkstyle/compare/master...pirat9600q:IndentationCheck_issue281. Not all cases will be covered in this commit, but at least it's a start. I ran checkstyle against a codebase I'm working on and all the lambda related warnings disappear with this commit.  Also see #281.","closed","","pietern","2015-08-03T19:33:20Z","2017-07-10T02:32:36Z"
"","1743","Issue #1243: SuppressWarnings(deprecated) has been removed","This Eclipse violation actually is not false-positive. JDK compiler doesn't warns inner class that uses outer deprecated class. **Example:** _File1:_  ``` java @Deprecated public class MyDeprecated{     class AA {         MyDeprecated a = new MyDeprecated();     } } ```  _File 2:_  ``` java public class B {     class BB {         MyDeprecated a = new MyDeprecated();     } } ```  _Compiler output:_  ``` bizmailov@bizmailov-VirtualBox:~/test$ javac MyDeprecated.java -Xlint:deprecation bizmailov@bizmailov-VirtualBox:~/test$ javac B.java -Xlint:deprecation B.java:3: warning: [deprecation] MyDeprecated in unnamed package has been deprecated         MyDeprecated a = new MyDeprecated();         ^ B.java:3: warning: [deprecation] MyDeprecated in unnamed package has been deprecated         MyDeprecated a = new MyDeprecated();                              ^ 2 warnings bizmailov@bizmailov-VirtualBox:~/test$  ```  As we can see, there are warnings only in second file.  Reported bug about similar situation: https://bugs.eclipse.org/bugs/show_bug.cgi?id=376425","closed","","baratali","2015-08-17T13:17:36Z","2015-08-22T09:26:39Z"
"","1527","Fix SonarQube violations in pom.xml. #46","This commit should fix majority of violations in `pom.xml`: http://nemo.sonarqube.org/issues/search#resolved=false|projectUuids=93eb9164-80ec-4136-9c42-d4d23deed1db|fileUuids=c0e3f6be-c841-440c-8f1a-69445f10ba8f","closed","","mkordas","2015-08-01T17:57:29Z","2015-08-01T21:44:37Z"
"","1751","Issue #1566: First sentence in a comment should start with a capital letter","This command was used: `find . -type f -name ""*java"" -exec sed -i 's/\/\*\*\( \+\)\([^A-Z\{]\)/\/\*\*\1\u\2/g' {} +`","closed","","baratali","2015-08-18T08:41:22Z","2015-08-22T09:26:36Z"
"","1266","MagicNumber is not detected properly","There is an inconsistent behaviour on MagicNumber's detection. Here is a simple example, and some of this lines aren't detected  ``` public void test() {     Log.i(TAG, String.valueOf(60L)); //detected     Log.i(TAG, String.valueOf(getMagicNumberX4(61L))); //detected      final DummyService dummyService = DummyService.getInstance();     final DummyObject dummyObject = dummyService.getById(62L); //no detected     Log.i(TAG, String.valueOf(dummyObject.getLongX2()));      final DummyObject dummyObject1 = new DummyObject(63L);  //no detected     Log.i(TAG, String.valueOf(dummyObject1.getLongX2()));      final DummyObjectNumber dummyObjectNumber2 =  new DummyObjectNumber();     dummyObjectNumber2.setNumber(64L); //detected     Log.i(TAG, String.valueOf(dummyObjectNumber2.getLongX2()));      final long value = dummyObjectNumber2.getLongX3(65L); //no detected     Log.i(TAG, String.valueOf(value)); }  private long getMagicNumberX4(final long number) {     return number * 4L; //detected } ```","closed","approved,","DTecheira","2015-06-30T14:24:14Z","2015-07-31T06:27:51Z"
"","1068","Return count reported incorrectly with Java 8 and lambda","There is a scenario where a method return count is reported as 2 when it should be 1, where the extra return counted comes from a lambda.  I've put together a small sample project here:  https://github.com/ctl80/checkstyle-returns  (see run_checkstyle.sh script and config.xml to see configuration of checkstyle).  Here's the part that is the most relevant and flagged for having multiple returns:  ``` java public Properties getClientInfo() {     return managedResource.withConnection(conn -> {             Properties clientInfo = new Properties();             try {                 clientInfo = conn.getClientInfo();             } catch (SQLException e) {                 e.printStackTrace();             }             return clientInfo;         }); } ```","closed","high demand,","craig-landry","2015-05-11T13:11:43Z","2015-05-17T05:20:29Z"
"","1262","CustomImportOrder check: SAME_PACKAGE(n) works incorrectly","There is a problem with SAME_PACKAGE(n) group. In example below you can see that it tends to include imports from packages that are higher in hierarchy into the SAME_PACKAGE group.  ``` java package java.util.concurrent.locks; ///// All the imports #1-8 are CORRECTLY treated as a one group in case of SAME_PACKAGE(2) // Imports #1-6 are INCORRECTLY treated as ""same package group"" in case of SAME_PACKAGE(3) or SAME_PACKAGE(4) // In fact only #4-6 should be on SAME_PACKAGE(3), only #6 on SAME_PACKAGE(4) import java.util.*; //#1 import java.util.List; //#2 import java.util.StringTokenizer; //#3 import java.util.concurrent.*; //#4 import java.util.concurrent.AbstractExecutorService; //#5 import java.util.concurrent.locks.LockSupport; //#6 //These 2 imports are CORRECTLY treated as ""no group"" in case of SAME_PACKAGE(3) import java.util.regex.Pattern; //#7 import java.util.regex.Matcher; //#8  public class InputCustomImportOrderSamePackage2 { } ```  Configuration file:  ``` xml                                                                                  ```","closed","approved,","ivanov-alex","2015-06-29T20:24:02Z","2015-08-08T10:03:07Z"
"","1777","Issue #1566: First sentence in a comment should start with a capital letter (Multiline comments)","There are many false-positives. For example:  ``` checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java Warning     regexp  RegexpMultiline     First sentence in a comment should start with a capital letter  558 ```  http://rdiachenko.github.io/site-src/xref/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.html#L558","closed","","baratali","2015-08-19T12:43:10Z","2015-08-22T09:26:35Z"
"","1063","SingleLineJavadoc and inheritDoc","The SingleLineJavadocCheck flags single line javadocs like @inheritDoc, which I think is wrong.  Code:  ``` package test;  public class TestClass extends TestClass2 {     /** {@inheritDoc} */     @Override     public void test1() throws Exception {     }      /**      * {@inheritDoc}      * */     @Override     public void test2() throws Exception {     } } ```  It flags line 4, the first javadoc, and not line 9, the second javadoc. I was expecting it to flag none.  I don't see why inheritDoc would require multiple lines, as it is a very simple doc to copy the parent's doc. Google's documentation of this check just refer to the standard at-clauses. No mention of the inheritDoc specifically. http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s7.1.3-javadoc-at-clauses Even checkstyle's code uses this as a single line in most places.","closed","approved,","rnveach","2015-05-09T13:11:13Z","2015-06-13T17:37:00Z"
"","1834","Issue #1566: Class 'AbstractCellEditor' must be declared as 'abstract'","The rest of such violations are in our `suppressions.xml`:  ``` xml                      ```","closed","","baratali","2015-08-21T12:28:31Z","2015-08-22T09:26:24Z"
"","1567","Issue #1566: Checkstyle violations fixes","The following violations were fixed: - AvoidNestedBlocks - FinalLocalVariable - UnusedImports - RegexpSingleline: Using THIS as a lock is a bad practice (use class variable instead)","closed","","rdiachenko","2015-08-06T23:00:55Z","2017-05-05T20:31:35Z"
"","1430","Indentation check do not raise violations for incorrectly indented methods returning arrays","The following code should raise violation with any reasonable configuration for Indentation check:  ``` java class A { String[] incorrectlyIndentedMethodReturningArrayOfStrings() {return null;} // no indentation here } ```  but it doesn't, due to incorrect implementation in https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java#L55 ##","open","indentation,","mkordas","2015-07-20T21:08:27Z","2017-02-06T14:52:50Z"
"","1016","OneTopLevelClass check example in documentation has invalid XML syntax","The documentation for the OneTopLevelClass check provides the following example:  ``` xml        ```  This has a syntax error: the 'propery' tag is not closed. It should be:  ``` xml        ```  That is, a '/' should be added.","closed","approved,","dhendriks","2015-04-29T12:44:00Z","2015-04-30T22:23:12Z"
"","1017","OneTopLevelClass check example is broken and documentation missing, for 'tokens' property","The documentation for the OneTopLevelClass check provides the following example:  ``` xml        ```  However, when using that, I get the following output of Checkstyle:  ``` Could not execute Checkstyle: cannot initialize module TreeWalker - Token ""CLASS_DEF"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.design.OneTopLevelClassCheck@768debd com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module TreeWalker - Token ""CLASS_DEF"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.design.OneTopLevelClassCheck@768debd         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:183)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:173)         at com.puppycrawl.tools.checkstyle.Main.createChecker(Main.java:187)         at com.puppycrawl.tools.checkstyle.Main.processCommandLine(Main.java:156)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:59) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Token ""CLASS_DEF"" was not found in Acceptable tokens list in check com.puppycrawl.tools.checkstyle.checks.design.OneTopLevelClassCheck@768debd         at com.puppycrawl.tools.checkstyle.TreeWalker.registerCheck(TreeWalker.java:272)         at com.puppycrawl.tools.checkstyle.TreeWalker.setupChild(TreeWalker.java:180)         at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:173)         at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:163)         ... 4 more ```  It appears the 'OneTopLevelClassCheck' doesn't accept 'CLASS_DEF' as token. So the example seems to be broken?  I actually wanted to use the following (configured using 'Eclipse Checkstyle Plugin'):  ``` xml                  ```  Besides 'CLASS_DEF', also 'ENUM_DEF' and 'INTERFACE_DEF' seems to be unsupported as well. I could not find a way to make this check work. In fact, the 'tokens' property doesn't even seem to be documented, so it is hard to guess what, if anything, is allowed for it.","closed","approved,","dhendriks","2015-04-29T12:50:17Z","2015-05-01T07:19:00Z"
"","1096","Fix equals and hashCode in LocalizedMessage. #1088","The current `equals` and `hashCode` are clearly wrong and they do not follow contracts and standards.   Here are open questions: - Can we fix these methods (API breaking changes, but kind of bug fix)? - How much performance sensitive this code is? Maybe the author intentionally sacrificed correctness and contracts for performance reasons? - Should we include all the fields in `equals` and `hashCode` or only the ones that are currently used? Should we mark some fields as `transient` to indicate that they are ""derived""?","closed","","mkordas","2015-05-18T17:28:20Z","2015-05-21T23:34:26Z"
"","1003","Fix PMD violations from UseVarargs rule, issue #999","The changes are fully backward-compatible. Method with vararg can be invoked both using array and list of parameters.","closed","","mkordas","2015-04-27T21:11:25Z","2015-05-01T00:26:30Z"
"","1112","JavadocStyle does not properly detect incomplete/missing/unclosed HTML end tags in Javadoc","The 'JavadocStyle' check, according to the documentation, should check for:  ``` Check text for incomplete HTML tags. Verifies that HTML tags have corresponding end tags and issues an ""Unclosed HTML tag found:"" error if not. An ""Extra HTML tag found:"" error is issued if an end tag is found without a previous open tag.  ```  The 'checkHtml' property (""Whether to check for incomplete HTML tags."") is a 'boolean' property with default value 'true', so using default settings, it should check for this.  However, for the following Java file:  ``` java /** Text. */ public class Test {     /**      * Some text.      *      *       *         *     Proper item, with closing 'li' tag.      *     First 'li' to not have a closing tag.      *     Second 'li' to not have a closing tag.      *     Proper item, with closing 'li' tag.      *         *       */     public void a() {         // ...     }      /**      * Some text.      *      * Missing closing 'p' tag.      */     public void b() {         // ...     } } ```  No problems are reported. I would expect 3 problems to be reported: two for missing 'li' closing tags (for method 'a'), and one for a missing 'p' closing tag (for method 'b').  To me, this looks like a bug. ##","open","javadoc,","dhendriks","2015-05-21T07:41:32Z","2017-11-25T15:02:05Z"
"","1272","Parameter throwsIndent in Indentation check is unused in code","That's really interesting one.  There is field [throwsIndentationAmount](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java#L95), but it has just getter and setter. This field is not used anywhere, but we even have it as config in google_checks.xml:   ```  ```  There are also passing unit tests with various `throwsIndent` values and dedicated [input file](https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InvalidInputThrowsIndent.java), but apparently it magically works even if the field is deleted!  The question is: should this field be removed? Or maybe current implementation is wrong and this property should be used somehow? ##","open","indentation,","mkordas","2015-07-01T20:54:07Z","2016-12-14T18:17:14Z"
"","1010","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.regexp","that task is good for somebody who want to start contributing to Checkstyle.  http://checkstyle.sourceforge.net/cobertura/index.html make code coverage 100% for package - http://checkstyle.sourceforge.net/cobertura/frame-summary-com.puppycrawl.tools.checkstyle.checks.regexp.html","closed","approved,","romani","2015-04-28T17:03:51Z","2015-08-25T13:25:49Z"
"","1128","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.imports","that task is good for somebody who want to start contributing to Checkstyle.  http://checkstyle.sourceforge.net/cobertura/index.html make code coverage 100% for package - http://checkstyle.sourceforge.net/cobertura/frame-summary-com.puppycrawl.tools.checkstyle.checks.imports.html","closed","approved,","romani","2015-05-24T22:45:20Z","2015-07-25T19:39:48Z"
"","1001","Fixes to Release Notes for Checkstyle 6.6","Thanks for release, looks really good :)","closed","","mkordas","2015-04-27T06:24:24Z","2015-04-27T21:11:17Z"
"","1500","Issue #1287: 'JavaNCSSCheck' UT coverage improved","Test coverage was improved to 100% without code refactoring.","closed","","rdiachenko","2015-07-28T22:14:05Z","2015-07-29T21:24:08Z"
"","1491","Issue #1287: 'ClassFanOutComplexityCheck' UT coverage improved","Test coverage was improved to 100% without code refactoring.","closed","","rdiachenko","2015-07-27T23:10:31Z","2015-07-28T21:47:23Z"
"","1479","Issue #1289: 'AbstractParenPadCheck' UT coverage improved","Test coverage was improved to 100% without code refactoring.","closed","","rdiachenko","2015-07-26T02:21:42Z","2015-07-28T21:47:19Z"
"","1477","Issue #1289: 'EmptyForInitializerPadCheck' UT coverage improved","Test coverage was improved to 100% without code refactoring.","closed","","rdiachenko","2015-07-25T22:29:14Z","2015-07-28T21:47:25Z"
"","1473","Issue #1289: 'OperatorWrapCheck' UT coverage improved","Test coverage was improved to 100% without code refactoring.","closed","","rdiachenko","2015-07-25T21:56:12Z","2015-07-28T21:47:49Z"
"","1386","Issue #1289: 'EmptyForIteratorPadCheck' UT coverage improved","Test coverage was improved to 100% without code refactoring.","closed","","rdiachenko","2015-07-15T00:04:58Z","2015-07-28T21:47:28Z"
"","1385","Issue #1289: 'MethodParamPadCheck' UT coverage improved","Test coverage was improved to 100% without code refactoring.","closed","","rdiachenko","2015-07-14T23:54:22Z","2015-07-28T21:47:40Z"
"","1384","Issue #1289: 'SeparatorWrapCheck' UT coverage improved","Test coverage was improved to 100% without code refactoring.","closed","","rdiachenko","2015-07-14T23:40:27Z","2015-07-28T21:47:54Z"
"","1314","Issue #1288: 'MethodNameCheck' UT coverage improved","Test coverage was improved to 100% without code refactoring.","closed","","rdiachenko","2015-07-07T23:08:05Z","2015-07-08T21:22:49Z"
"","1313","Issue #1288: 'PackageNameCheck' UT coverage improved","Test coverage was improved to 100% without code refactoring.","closed","","rdiachenko","2015-07-07T22:57:35Z","2015-07-08T21:22:56Z"
"","1514","Issue #1296: 'SuppressionCommentFilter' UT coverage improved","Test coverage improved to 100%.  @romani please have a look at:  ``` @Test public void testAcceptNullLocalizedMessage() {...}  @Test public void testAcceptNullFileContents() {...} ```  I didn't find other way to test the following conditions using **input data and normal logic workflow**: - https://github.com/rdiachenko/checkstyle/blob/2b5dfeea5a0569649d46a0042c690044cc316c0d/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java#L383 - https://github.com/rdiachenko/checkstyle/blob/2b5dfeea5a0569649d46a0042c690044cc316c0d/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java#L390","closed","","rdiachenko","2015-07-30T00:34:02Z","2015-07-30T18:49:25Z"
"","1519","Issue #1296: 'SuppressionsLoader' refactored, UT coverage improved","Test coverage improved to 100%.","closed","","rdiachenko","2015-08-01T01:43:59Z","2015-08-09T17:18:20Z"
"","1516","Issue #1296: 'SuppressWithNearbyCommentFilter' refactored, UT coverage improved","Test coverage improved to 100%.","closed","","rdiachenko","2015-07-30T22:04:11Z","2015-08-09T17:18:25Z"
"","1079","issue1024","test coverage for getRequiredTokens() and getAcceptableTokens(), issue #1024","closed","","MEZk","2015-05-13T21:07:01Z","2015-05-13T21:56:35Z"
"","1077","test coverage for getDefaultTokens() and getAcceptableTokens(), issue…","test coverage for getDefaultTokens() and getAcceptableTokens(), issue #1024","closed","","MEZk","2015-05-13T12:29:48Z","2015-05-13T20:54:24Z"
"","1306","Issue #1293: Test Check's tokens are not null","Test Checks from coding package that their getDefaultTokens(), getAcceptableTokens() and getRequiredTokens() return not-null value. Also I renamed EqualsAvoidNullTest.java → EqualsAvoidNull**Check**Test.java","closed","","baratali","2015-07-07T09:14:30Z","2015-07-07T15:04:38Z"
"","1645","Standart output usage replaced with logger","System.out has been replaced with logger. We have one more warning and I'll fix it later. Issue #46","closed","","sabaka","2015-08-09T23:52:04Z","2015-09-03T23:24:18Z"
"","1163","Detect only label as illegal token in IllegalToken check. #1162","Switch and postfix increment/decrement are no longer considered as illegal by default.","closed","","mkordas","2015-06-01T21:12:08Z","2015-06-06T22:44:46Z"
"","1157","Fix exception in SuppressWarningsHolder on complex annotations. #1148","SuppressWarningsHolder do not throw exceptions anymore - checked on all possible source files.","closed","","mkordas","2015-05-31T17:08:10Z","2015-06-06T22:44:58Z"
"","1807","Issue #1566: IllegalType suppressions were added","Suppressions were added for IllegalType check until #1805 will be fixed.","closed","","rdiachenko","2015-08-20T21:07:57Z","2015-08-31T21:37:28Z"
"","1560","Suppress wrong root element in tests. #1555","Such changes in resources are ok","closed","","romani","2015-08-06T03:07:00Z","2015-08-06T03:34:00Z"
"","1018","XML output printed to standard output is invalid when there any errors in the code","STEPS TO REPRODUCE: 1. Create file Foo.java with contents: class Foo { } 2. Run: checkstyle-6.6.jar -f xml -c /sun_checks.xml Foo.java  Exception is thrown and usage is printed, even though the results are produced. This breaks any tool that parses the resulting XML from standard output.   ACTUAL STDOUT:  ```        usage: java com.puppycrawl.tools.checkstyle.Main [options] -c              file...  -c    Sets the check configuration file to use.  -f    Sets the output format. (plain|xml). Defaults to plain  -o    Sets the output file. Defaults to stdout  -p    Loads the properties file  -v         Print product version and exit ```  ACTUAL STDERR:  ``` Could not execute Checkstyle: Checkstyle ends with 2 errors. com.puppycrawl.tools.checkstyle.api.CheckstyleException: Checkstyle ends with 2 errors.     at com.puppycrawl.tools.checkstyle.Main.processCommandLine(Main.java:160)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:59) ```  EXPECTED RESULT: Just the XML with errors found is printed to stdout. No exception is thrown, as the case of having errors in source files is _not_ exceptional. No usage should printed, as the tool was invoked correctly.  NOTES: This is a regression from CheckStyle 6.5. This works correctly when the output is printed to XML file (specified in '-o').","closed","high demand,","michalsvagerka","2015-04-29T12:55:32Z","2015-05-06T05:40:32Z"
"","1265","Cannot use config file bundled in jar","Starting from 6.8, config file bundled in jar can no longer be used.  ``` > java -jar checkstyle-6.8-all.jar -c /sun_checks.xml MyClass.java unable to find '/sun_checks.xml'. ```  The breaking commit is https://github.com/checkstyle/checkstyle/commit/3004b4d8810fae5956864d1493ea94f183b9442c","closed","approved,","michalsvagerka","2015-06-30T07:50:55Z","2015-07-01T05:27:22Z"
"","1348","ITs rule43onestatement/OneStatementPerLineTest is failing","src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java  is failing https://travis-ci.org/checkstyle/checkstyle/jobs/70314374#L699  ``` oneStatmentTest(com.google.checkstyle.test.chapter4formatting.rule43onestatement.OneStatementPerLineTest)  Time elapsed: 0.127 sec  <<< FAILURE! java.lang.AssertionError: error message 0 expected:<0> but was:<6>     at org.junit.Assert.fail(Assert.java:88)     at org.junit.Assert.failNotEquals(Assert.java:834)     at org.junit.Assert.assertEquals(Assert.java:645)     at com.google.checkstyle.test.base.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:140)     at com.google.checkstyle.test.base.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:109)     at com.google.checkstyle.test.base.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:94)     at  ```  , due to build problem it was not noticed.  Test has to be resolved. Problem caused by #1237.","closed","approved,","romani","2015-07-11T03:45:05Z","2015-07-11T13:55:25Z"
"","1561","Minor typo on site homepage: 'desig' -> 'design'","Spotted a minor typo when on the [Sourceforge page](http://checkstyle.sourceforge.net/), so said I'd submit.","closed","","another-dave","2015-08-06T13:01:35Z","2015-08-08T03:18:36Z"
"","1401","Make ""private"" methods ""static"" where possible. #46","SonarQube rule: [""private"" methods that don't access instance data should be ""static""](http://nemo.sonarqube.org/coding_rules#rule_key=squid%3AS2325).  Rationale: private methods that don't access instance data can be static to prevent any misunderstanding about the contract of the method.","closed","","mkordas","2015-07-17T19:55:35Z","2015-07-18T04:51:46Z"
"","1087","Ensure that Check's required tokens is subset of default tokens","Somewhere on initialization phase need to recheck that Check's required tokens is subset of its default tokens: Links to possibly problematic code:  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L262 https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L280","closed","high demand,","romani","2015-05-17T05:15:42Z","2015-08-31T19:57:19Z"
"","1165","New Check: non-ASCII characters in source files","Some tools are not able to deal with non-ASCII files properly or recognize the encoding. For example not specifying the correct encoding in `javac` can cause problems.  I think that it is rarely useful or even necessary to use these characters in source code files. An exception to that rule could be (javadoc) comments in a different language than English.  Thus, I suggest adding a check for ASCII characters where only the lower 7 bits are used and chars 0x80 to 0xFF are invalid.   Grep can list lines with invalid characters (recursive, java files only, write line number, use Perl regex):  ``` bash grep -r --include ""*.java"" -n -P ""[\x80-\xFF]""  ```  I think it would be useful to have this as a proper CheckStyle rule.","closed","","msteiger","2015-06-02T15:27:15Z","2015-06-07T01:47:43Z"
"","1283","Refactoring of UnnecessaryParanthesesCheck. UT coverage was increased up to 100%","Some refactoring of the Check.","closed","","baratali","2015-07-05T11:15:18Z","2017-03-23T19:22:09Z"
"","1406","Issue #1293: Improving coverage of FallThroughCheck","Some refactoring of FallThroughCheck and more UTs to improve coverage. Checkstyle reports under Guava+HBase projects: http://baratali.github.io/fall_through/index.html **(reports before and after my changes are identical)**","closed","","baratali","2015-07-18T19:18:43Z","2015-07-18T19:51:17Z"
"","1216","UT coverage for RedundantImport check. #1128","Small changes were introduced to improve code coverage due to the fact that imports from unnamed package are not allowed: http://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.5 Based on this some part of previous code was not possible to cover with UT (unrealistic scenario).  Reports to show that changes are most likely didn't affect most code: [before](http://ivanov-alex.github.io/target_Redundant_BEFORE/site/checkstyle.html) changes [after](http://ivanov-alex.github.io/target_Redundant_AFTER/site/checkstyle.html) changes Reports are identical","closed","","ivanov-alex","2015-06-16T13:00:54Z","2015-06-24T18:12:47Z"
"","1185","Move Regexp check from miscellaneous to regexp category. #1170","Site was reviewed and tested manually.","closed","","mkordas","2015-06-06T20:33:25Z","2015-06-07T01:59:47Z"
"","1772","Updated comments for excludes of linkcheck, issue #751","Since I opened issues against all plugins, which links are broken or redirected, I've added comments with references to issue trackers.","closed","","MEZk","2015-08-18T22:44:25Z","2015-08-19T09:00:20Z"
"","1903","NPE in MutableExceptionCheck.isExtendedClassNamedAsException","Since Checkstyle 6.7, one of the classes in Apache Camel is resulting in a NPE in MutableExceptionCheck.  ``` ERROR] NullPointerException occurred during the analysis of file /Users/dkulp/working/camel/camel-core/src/main/java/org/apache/camel/util/concurrent/AtomicException.java. java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck.isExtendedClassNamedAsException(MutableExceptionCheck.java:155)     at com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck.visitClassDef(MutableExceptionCheck.java:114)     at com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck.visitToken(MutableExceptionCheck.java:91)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:393) ```  The class in question is:  https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/util/concurrent/AtomicException.java","closed","approved,","dkulp","2015-08-26T18:32:19Z","2015-09-03T13:18:17Z"
"","1882","New line check for pom.xml. Issue #46","Should fix plenty of violations, but I suppose I'll do second part for these checks Newlines should follow each element: Noncompliant Code Example  ` `  Compliant Solution  ```    ```","closed","","sabaka","2015-08-24T19:38:51Z","2015-08-26T21:10:06Z"
"","1466","Marked maxLineLength as '@Deprecated' at LeftCurlyCheck, issue #965.","See issue #965 for investigation notes.","closed","","MEZk","2015-07-25T13:26:39Z","2015-08-12T08:52:08Z"
"","1146","Fix parsing of allowedAnnotations property in JavadocMethod, #1145","See #1145","closed","","barkefors","2015-05-28T12:01:46Z","2015-05-28T18:53:25Z"
"","1158","SuppressWarningsHolder reports violations with incorrect messages","Sample report: http://mkordas.github.io/suppress-warnings-holder/checkstyle.html 1. Translations are missing for `suppress.warnings.invalid.target` and `suppress.warnings.missing.value` 2. Should this check report as warning that target is invalid? Should the list of targets be extended? 3. Should this check report empty SuppressWarnings annotation?","closed","approved,","mkordas","2015-05-31T17:47:42Z","2015-07-05T19:11:08Z"
"","1049","Fix DeclarationOrder check violations in Checkstyle code","Rule: http://checkstyle.sourceforge.net/config_coding.html#DeclarationOrder Follow-up to #945. 1. Class (static) variables. First the public class variables, then protected, then package level (no access modifier), and then private. 2. Instance variables. First the public class variables, then protected, then package level (no access modifier), and then private. 3. Constructors 4. Methods","closed","","mkordas","2015-05-03T00:02:53Z","2015-05-03T13:37:56Z"
"","1416","RightCurlyCheck with RightCurlyOption.SAME rises violation when '}' ends line with single-line block.","RightCurlyCheck with the following configuration:  ``` xml   ```  rises violation (`'}' should have line break before.`) on the following code example:   ``` java  } finally { future.cancel(true); } ```  Lets analyse.  To begin with, first `}` token. Right curly policy is RightCurlyOption.SAME (by default). It is ok that after `}` is finally statement. All right, no violation here.  Next, right curly policy is RightCurlyOption.SAME (by default), but look at the second `}`. There is no continuation of that  multi-block statement (http://google.github.io/styleguide/javaguide.html#s4.1.3-braces-empty-blocks)  after second `}` on the same line that is why the check rises violation here, but It is not a good idea to rise violation when `}` ends line with single-line block.","closed","approved,","MEZk","2015-07-19T16:55:18Z","2015-10-08T19:39:11Z"
"","1517","Investigate how to resolve copy-paste from other projects at ConfigurationLoader","review  ```     private static void parsePropertyString(String value,                                            List fragments,                                            List propertyRefs) ``` https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java#L317   Investigate how can we reuse that methods from existing libraries, new dependencies are not very desirable but we could extend our dependencies.  We could move that methods in some util class also","open","approved,","romani","2015-07-31T04:34:12Z","2017-04-22T18:54:02Z"
"","1232","move non-compilable input to resources-noncompilable","resolves the following error in eclipse:  > The declared package """" does not match the expected package ""com.puppycrawl.tools.checkstyle.imports""","closed","","Vladlis","2015-06-22T10:01:20Z","2015-06-23T11:13:42Z"
"","1483","Сoverage has been increased to 100% in RightCurlyCheck. Issue #1291","Reports: before: http://sabaka.github.io/RightCurly/master/checkstyle.html after: http://sabaka.github.io/RightCurly/checkstyle.html reports are identical","closed","","sabaka","2015-07-26T16:19:06Z","2015-07-28T23:44:59Z"
"","1484","Coverage has been increased t0 100% in LeftCurlyCheck. Issue #1291","Reports: before: http://sabaka.github.io/LeftCurly/master/checkstyle.html after: http://sabaka.github.io/LeftCurly/checkstyle.html  reports are identical","closed","","sabaka","2015-07-26T16:30:07Z","2015-07-28T23:44:50Z"
"","1481","Coverage has been increased to 100% in EmptyBlockCheck. Issue #1291","reports: before http://sabaka.github.io/EmptyBlock/master/checkstyle.html after http://sabaka.github.io/EmptyBlock/checkstyle.html  reports are identical","closed","","sabaka","2015-07-26T03:59:45Z","2015-07-28T23:46:54Z"
"","1488","Add test case and refactor JavadocUtils. #1308","Reports were generated for the following config before and after changes:  ``` xml                                                                                                                                                                                       ```  Reports are identical:  ``` diff pre/checkstyle-result.xml post/checkstyle-result.xml Files are the same. ```","closed","","mkordas","2015-07-27T19:24:27Z","2015-07-27T22:00:29Z"
"","1285","'RedundantModifierCheck' was refactored, UT coverage improved","Reports were generated and compared due to refactoring of RedundantModifierCheck: http://rdiachenko.github.io/  Reports for Guava project before check's refactoring and after are identical.","closed","","rdiachenko","2015-07-05T16:53:13Z","2015-07-06T23:07:28Z"
"","1278","'ModifierOrderCheck' was refactored, UT coverage improved","Reports were generated and compared due to refactoring of ModifierOrderCheck: http://rdiachenko.github.io/  Reports for Guava project before check's refactoring and after are identical.","closed","","rdiachenko","2015-07-03T22:19:37Z","2015-07-05T22:58:48Z"
"","1410","Remove dead code from SlistHandler in Indentation check. #1270","Reports over large codebase are the same:  ``` diff target/checkstyle-result.xml target-6.8.1/checkstyle-result.xml -U 0 --- target/checkstyle-result.xml +++ target-6.8.1/checkstyle-result.xml @@ -2 +2 @@ - + ```","closed","","mkordas","2015-07-19T14:19:24Z","2015-07-19T16:43:41Z"
"","1417","Add test coverage to BlockParentHandler in Indentation check. #1270","Reports over huge codebase are identical:  ``` --- target/checkstyle-result.xml +++ target-6.8.1/checkstyle-result.xml @@ -1,5 +1,5 @@   - + ```","closed","","mkordas","2015-07-19T17:55:12Z","2015-07-20T17:24:11Z"
"","1515","Add tests and refactor JavadocMethod check. #1308","Reports over about 10,000 files are the same:  ``` diff 6.8/checkstyle-result.xml 6.9/checkstyle-result.xml -U 0 --- 6.8/checkstyle-result.xml +++ 6.9/checkstyle-result.xml @@ -2 +2 @@ - + ```","closed","","mkordas","2015-07-30T19:47:20Z","2015-07-30T20:43:47Z"
"","1344","Add test coverage to HtmlTag in Javadoc checks. #1308","Reports on huge codebase were generated and compared - the only difference is version used to produce report:  ``` --- checkstyle-result.xml +++ checkstyle-result-2.xml @@ -1,5 +1,5 @@  - + ```","closed","","mkordas","2015-07-10T23:04:23Z","2015-07-10T23:20:51Z"
"","1213","Add possibility to configure targets for ParenPad check, #1189","Reports from checkstyle-tester: http://vladlis.github.io - there are no differences after changes in default config.","closed","","Vladlis","2015-06-16T01:13:57Z","2015-06-25T19:24:39Z"
"","1508","Issue #1287: 'AbstractClassCouplingCheck' refactored, UT coverage improved","Reports for Guava, Hibernate, Spring, pmd, findbugs projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-29T00:37:13Z","2015-07-29T21:23:51Z"
"","1506","Issue #1287: 'BooleanExpressionComplexityCheck' refactored, UT coverage improved","Reports for Guava, Hibernate, Spring, pmd, findbugs projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-28T23:47:17Z","2015-07-29T21:24:00Z"
"","1490","Issue #1287: 'NPathComplexityCheck', 'CyclomaticComplexityCheck', 'AbstractComplexityCheck' refactored, UT coverage improved","Reports for Guava, Hibernate, Spring, pmd, findbugs projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-27T22:58:26Z","2015-07-28T21:47:42Z"
"","1478","Issue #1289: 'NoWhitespaceAfterCheck' refactored, UT coverage improved","Reports for Guava, Hibernate, Spring, pmd, findbugs projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-26T01:24:57Z","2015-07-28T21:47:44Z"
"","1475","Issue #1289: 'NoWhitespaceBeforeCheck' refactored, UT coverage improved","Reports for Guava, Hibernate, Spring, pmd, findbugs projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-25T22:14:57Z","2015-07-28T21:47:48Z"
"","1472","Issue #1289: 'WhitespaceAfterCheck' refactored, UT coverage improved","Reports for Guava, Hibernate and Spring projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-25T21:45:13Z","2015-07-28T21:47:59Z"
"","1328","Issue #1288: 'AbstractTypeParameterNameCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/  Reports were generated on all child checks of AbstractTypeParameterNameCheck:  ```    ```","closed","","rdiachenko","2015-07-08T22:19:00Z","2015-07-09T21:20:53Z"
"","1329","Issue #1288: 'AbstractNameCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/  Reports were generated on all child checks of AbstractNameCheck:  ```                              ```","closed","","rdiachenko","2015-07-08T22:49:53Z","2015-07-09T21:20:47Z"
"","1331","Issue #1288: 'AbstractAccessControlNameCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/  Reports were generated on all child checks of AbstractAccessControlNameCheck:  ```                  ```","closed","","rdiachenko","2015-07-08T23:35:25Z","2015-07-09T21:20:31Z"
"","1392","Issue #1289: 'GenericWhitespaceCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-15T23:51:41Z","2015-07-28T21:47:37Z"
"","1390","Issue #1289: 'EmptyLineSeparatorCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-15T20:33:30Z","2015-07-28T21:47:33Z"
"","1383","Issue #1289: 'TypecastParenPadCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-14T23:27:55Z","2015-07-28T21:47:58Z"
"","1339","Issue #1289: 'WhitespaceAroundCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-09T23:11:54Z","2015-07-14T22:24:01Z"
"","1330","Issue #1288: 'AbstractClassNameCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-08T23:08:14Z","2015-07-09T21:20:40Z"
"","1318","Issue #1288: 'ConstantNameCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-08T00:15:49Z","2015-07-08T21:22:15Z"
"","1317","Issue #1288: 'LocalFinalVariableNameCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-07T23:57:01Z","2015-07-08T21:22:25Z"
"","1316","Issue #1288: 'LocalVariableNameCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-07T23:42:07Z","2015-07-08T21:22:35Z"
"","1315","Issue #1288: 'MemberNameCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-07T23:26:50Z","2015-07-08T21:22:42Z"
"","1312","Issue #1288: 'ParameterNameCheck' refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-07T22:45:30Z","2015-07-08T21:23:03Z"
"","1310","Issue #1288: 'StaticVariableNameCheck' was refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-07T22:17:10Z","2015-07-08T21:23:11Z"
"","1303","Issue #1288: 'AbbreviationAsWordInNameCheck' was refactored, UT coverage improved","Reports for Guava and Hibernate projects before check's refactoring and after are identical: http://rdiachenko.github.io/","closed","","rdiachenko","2015-07-06T22:24:30Z","2015-07-06T23:14:53Z"
"","1391","Remove dead code from ForHandler in Indentation check. #1270","Reports before and after the changes are exactly the same:  ``` diff checkstyle-6.8.1.html checkstyle-6.9.html --- checkstyle-6.8.1.html +++ checkstyle-6.9.html @@ -70,7 +70,7 @@ -The following document contains the results of Checkstyle 6.8.1 with my_check.xml ruleset.  +The following document contains the results of Checkstyle 6.9-SNAPSHOT with my_check.xml ruleset.  ```  ![image](https://cloud.githubusercontent.com/assets/5467276/8710866/4d207d1a-2b4d-11e5-96e6-10a5ff3ef945.png) ![image](https://cloud.githubusercontent.com/assets/5467276/8710872/5938a424-2b4d-11e5-8de4-7e6fed2d7ef4.png)","closed","","mkordas","2015-07-15T21:57:05Z","2015-07-16T23:44:35Z"
"","1436","Add test coverage to LineWrappingHandler in Indentation check. #1270","Reports are the same:  ``` diff target/checkstyle-result.xml target-6.8.1/checkstyle-result.xml -U 0 --- target/checkstyle-result.xml +++ target-6.8.1/checkstyle-result.xml @@ -2 +2 @@ - + ```","closed","","mkordas","2015-07-20T22:38:44Z","2015-07-21T03:57:25Z"
"","1462","Refactor and add test cases to JavadocParagraph check. #1308","Reports are the same:  ``` diff pre/checkstyle-result.xml post/checkstyle-result.xml -U 0 Files are the same. ```  I couldn't compare to 6.8.1 as there were functional changes introduced to that check recently.","closed","","mkordas","2015-07-24T23:05:15Z","2015-07-25T00:03:35Z"
"","1429","Remove dead code from ElseHandler in Indentation check. #1270","Reports are the same:  ``` --- target/checkstyle-result.xml +++ target-6.8.1/checkstyle-result.xml @@ -2 +2 @@ - + ```","closed","","mkordas","2015-07-20T20:39:12Z","2015-07-21T20:47:43Z"
"","1422","CustomImportOrderCheck. Fix #1263","Reports are pending...  Difference between current solution and solution after the fix is a starting point for reviewing the list of imports is a starting point. Both solutions show violations only when actual sorting problem exists. So no ""false positive"" happens in both cases. However, both solutions will return different amount of violations due to different starting point.  **Current solution** takes the very first import as a starting point. It defines ""current"" group based on this import and every time it see import from the group that should go before ""current"" group, violation is submitted. Most negative scenario: first import doesn't match any group, it is assigned to default ""no group"" section. As a result, only imports that cannot be assigned to defined groups on config will be treated as correctly placed and all the imports that match groups defined will receive violations. For example Config:  ``` xml                                                                                    ```  Source:  ``` java 1 import com.puppycrawl.tools.checkstyle.CustomImportOrderCheck; //doesn't match any group on config 2  3 import com.google.common.annotations.Beta; 4 import com.google.common.annotations.GwtCompatible; 5 6 import org.androidannotations.helper.ModelConstants.generationSuffix; 7  8 import java.io.Serializable; 9 import java.util.Iterator; 10 import java.util.Set; 11 12 import javax.annotation.Nullable; 13 14 import com.puppycrawl.tools.checkstyle.ImportOrderCheck; //doesn't match any group on config 15 import net.sourceforge.pmd.lang.ast.Node; //doesn't match any group on config ```  Result (all imports except of 1,14,15 have violations)  ``` Starting audit... test.java:3: warning: Import statement is in the wrong order. Should be in the 'SPECIAL_IMPORTS' group. test.java:4: warning: Import statement is in the wrong order. Should be in the 'SPECIAL_IMPORTS' group. test.java:6: warning: Import statement is in the wrong order. Should be in the 'THIRD_PARTY_PACKAGE' group. test.java:8: warning: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group. test.java:9: warning: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group. test.java:10: warning: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group. test.java:12: warning: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group. Audit done. ```  **Fixed solution** takes first group with imports from configuration as a starting point. All the imports from another groups that go before import from first group will receive violation. Most negative scenario: when first group on configuration has the only import placed in the end of all imports. Source  ``` java 1 import com.puppycrawl.tools.checkstyle.ImportOrderCheck; 2 3 import org.androidannotations.helper.ModelConstants.generationSuffix; 4  5 import java.io.Serializable; 6 import java.util.Iterator; 7 import java.util.Set; 8  9 import javax.annotation.Nullable; 10 11 import com.puppycrawl.tools.checkstyle.ImportOrderCheck; 12 import net.sourceforge.pmd.lang.ast.Node;  13 14 import com.google.common.annotations.Beta; 15 import com.google.common.annotations.GwtCompatible; ```  Result  ``` Starting audit... test.java:1: warning: Imports without groups should be placed at the end of the import list. test.java:3: warning: Import statement is in the wrong order. Should be in the 'THIRD_PARTY_PACKAGE' group. test.java:5: warning: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group. test.java:6: warning: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group. test.java:7: warning: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group. test.java:9: warning: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group. test.java:11: warning: Imports without groups should be placed at the end of the import list. test.java:12: warning: Imports without groups should be placed at the end of the import list. Audit done. ```","closed","incomplete,","ivanov-alex","2015-07-20T10:38:19Z","2015-10-23T16:36:45Z"
"","1656","Coverage has been increased to 100% in CommentSuppressor. Issue #1010","Reports are identical: http://sabaka.github.io/CommentSuppressor/master/checkstyle.html http://sabaka.github.io/CommentSuppressor/checkstyle.html","closed","","sabaka","2015-08-10T22:47:05Z","2015-09-03T23:35:09Z"
"","1513","Coverage has been increased to 100% in UncommentedMainCheck. Issue #1290","Reports are identical: before: http://sabaka.github.io/UncommentedMain/master/checkstyle.html after: http://sabaka.github.io/UncommentedMain/checkstyle.html","closed","","sabaka","2015-07-30T00:09:45Z","2015-09-03T23:34:00Z"
"","1543","Coverage has been increased to 100% in TrailingCommentCheck. Issue #1290","Reports are identical: before: http://sabaka.github.io/TrailingComment/master/checkstyle.html after: http://sabaka.github.io/TrailingComment/checkstyle.html","closed","","sabaka","2015-08-02T22:06:55Z","2015-09-03T23:34:09Z"
"","1502","Coverage has been increased to 100% in RegexpHeaderCheck. Issue #1292","reports are identical: before: http://sabaka.github.io/RegexpHeader/master/checkstyle.html after: http://sabaka.github.io/RegexpHeader/checkstyle.html","closed","","sabaka","2015-07-28T22:56:34Z","2015-07-29T07:03:56Z"
"","1507","100% coverage in AvoidEscapedUnicodeCharacterCheck. Issue #1290","Reports are identical: before: http://sabaka.github.io/AvoidUni/master/checkstyle.html after: http://sabaka.github.io/AvoidUni/checkstyle.html","closed","","sabaka","2015-07-29T00:34:39Z","2015-07-29T07:03:18Z"
"","1434","Remove dead code from ArrayInitHandler in Indentation check. #1270","Reports are identical:  ``` diff target/checkstyle-result.xml target-6.8.1/checkstyle-result.xml -U 0 --- target/checkstyle-result.xml +++ target-6.8.1/checkstyle-result.xml @@ -2 +2 @@ - + ```","closed","","mkordas","2015-07-20T21:55:02Z","2015-07-21T03:58:13Z"
"","1408","Add test coverage to MethodCallHandler in Indentation check. #1270","Reports are identical:  ``` diff target-6.8.1/checkstyle-result.xml target-6.9/checkstyle-result.xml --- target-6.8.1/checkstyle-result.xml +++ target-6.9/checkstyle-result.xml @@ -1,5 +1,5 @@   - + ```  ![image](https://cloud.githubusercontent.com/assets/5467276/8764025/7d0957b6-2dbb-11e5-920c-480324852c2e.png) ![image](https://cloud.githubusercontent.com/assets/5467276/8764026/85f1e942-2dbb-11e5-9351-968363c4f29c.png)","closed","","mkordas","2015-07-19T00:12:08Z","2015-07-19T07:00:29Z"
"","1523","Improve test coverage in AbstractJavadocCheck. #1308","Reports are identical:  ``` diff pre/checkstyle-result.xml post/checkstyle-result.xml -s Files pre/checkstyle-result.xml and post/checkstyle-result.xml are identical ```  The following config was used on 10,000 source files to generate reports:  ```                                                                 ```  Fixes #1308.","closed","","mkordas","2015-08-01T12:31:20Z","2015-08-01T13:57:09Z"
"","1494","Add test cases and refactor JavadocStyle check. #1308","Reports are identical:  ``` diff pre/checkstyle-result.xml post/checkstyle-result.xml -s Files pre/checkstyle-result.xml and post/checkstyle-result.xml are identical ```","closed","","mkordas","2015-07-28T16:15:04Z","2015-07-28T17:13:11Z"
"","1461","Add tests and refactor TagParser for JavadocStyle check. #1308","Reports are identical:  ``` diff 6.8.1/checkstyle-result.xml 6.9/checkstyle-result.xml -U 0 --- 6.8.1/checkstyle-result.xml +++ 6.9/checkstyle-result.xml @@ -2 +2 @@ - + ```  Config used:  ``` xml                                                   ```","closed","","mkordas","2015-07-24T21:25:04Z","2015-07-25T00:02:14Z"
"","1433","Remove dead code from ObjectBlockHandler in Indentation check. #1270","Reports are identical:  ``` --- target/checkstyle-result.xml +++ target-6.8.1/checkstyle-result.xml @@ -2 +2 @@ - + ```","closed","","mkordas","2015-07-20T21:29:54Z","2015-07-22T00:54:37Z"
"","1444","Remove dead code from AbstractExpressionHandler. #1270","Reports are identical - just version name is different:  ``` diff target/checkstyle-result.xml target-6.8.1/checkstyle-result.xml -U 0 --- target/checkstyle-result.xml +++ target-6.8.1/checkstyle-result.xml @@ -2 +2 @@ - + ```","closed","","mkordas","2015-07-21T20:33:11Z","2015-07-22T00:47:27Z"
"","1501","Coverage has been increaded to 100% in HeaderCheck. Issue #1292","Reports are identical before: http://sabaka.github.io/HeaderCheck/master/checkstyle.html after: http://sabaka.github.io/HeaderCheck/checkstyle.html","closed","","sabaka","2015-07-28T22:55:40Z","2015-07-29T07:03:40Z"
"","1419","Fix for SuperClone and SuperFinalize checks reporting violations on native methods, #1367","Reports are here: http://vladlis.github.io/ There is only one difference after changes, which is confirmed: [link](http://vladlis.github.io/reports/tester/before/site/xref/openjdk/src/share/classes/java/lang/Object.html#L213)","closed","","Vladlis","2015-07-19T20:33:43Z","2015-07-20T20:42:14Z"
"","1428","Remove dead code from HandlerFactory in Indentation check. #1270","Reports are exactly the same:  ``` --- target/checkstyle-result.xml +++ target-6.8.1/checkstyle-result.xml @@ -2 +2 @@ - + ```","closed","","mkordas","2015-07-20T20:08:46Z","2015-08-06T05:05:01Z"
"","1418","Remove dead code from NewHandler in Indentation check. #1270","Reports are exactly the same over huge codebase:  ``` --- target/checkstyle-result.xml +++ target-6.8.1/checkstyle-result.xml @@ -1,5 +1,5 @@   - + ```","closed","","mkordas","2015-07-19T18:14:16Z","2015-07-20T06:06:13Z"
"","1456","Remove dead code from JavadocType check. #1308","Reports after and before changes are exactly the same:  ``` diff pre/checkstyle-result.xml post/checkstyle-result.xml Files are the same. ```  I couldn't compare to 6.8.1, as there were functional changes introduced recently to this check that cause differences in reports.","closed","","mkordas","2015-07-24T16:08:26Z","2015-07-24T18:41:46Z"
"","1137","ThrowCountCheck should have option to skip private methods, #1136","Report: http://vladlis.github.io/ The option has suppressed 283 violations while running the Check on openjdk7 and spring.framework with default properties (from 3733 to 3450).","closed","","Vladlis","2015-05-26T21:49:19Z","2015-05-27T22:12:09Z"
"","1447","Coverage has been increased to 100% in AnnotationUseStyleCheck. Issue #908","Report before changes: http://sabaka.github.io/AnnotationUseStyle/master/checkstyle.html Report after changes: http://sabaka.github.io/AnnotationUseStyle/checkstyle.html  Tester config: https://github.com/sabaka/contribution/blob/master/checkstyle-tester/projects-to-test-on.properties","closed","","sabaka","2015-07-21T23:35:42Z","2015-07-28T23:44:42Z"
"","1130","100% test coverage for com.puppycrawl.tools.checkstyle.checks.design, #1009","removing unnecessary lines from pom.xml","closed","","Vladlis","2015-05-25T12:53:48Z","2015-05-25T23:25:06Z"
"","1298","Removed all assert statements","Removing **assert** statements in a project because it is difficult to make them 100% covered by tests (they require executions with both asserts enabled and disabled). In addition, they are not really useful in production: http://stackoverflow.com/questions/1957645/when-to-use-an-assertion-and-when-to-use-an-exception http://docs.oracle.com/javase/6/docs/technotes/guides/language/assert.html  Also reduced branch coverage for AbstractTypeParameterNameCheck to make project compile (some branches were covered, so removing lines with them reduced total coverage for this class)","closed","","ivanov-alex","2015-07-06T14:02:42Z","2015-07-07T06:23:38Z"
"","1470","100% coverage for CustomImportOrder. #1128","Removed small piece of dead code to finalize coverage. [Report](http://ivanov-alex.github.io/target_CustomImportOrder_dead_code/site/checkstyle.html) on all the projects in checkstyle-tester to prove that change doesn't result in exceptions. Report is large, with many violations, but it was completed successfully without exception.","closed","","ivanov-alex","2015-07-25T16:04:36Z","2015-07-25T22:03:52Z"
"","1305","Removed asserts from 3 classes","Removed asserts from ModifiedControlVariableCheck.java, ImportControlLoader.java, imports/PkgControl.java See justification in #1298","closed","","ivanov-alex","2015-07-07T06:31:18Z","2015-07-07T07:13:34Z"
"","1424","Update Maven Shade Plugin to 2.4.1","Release Notes - Maven Shade Plugin - Version 2.4.1  https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12317921&version=12332978  Bugs: - [MSHADE-148] - Shade Plugin gets stuck in infinite loop building dependency reduced POM - [MSHADE-194] - Reporting uses maven-invoker-plugin version 1.9 instead of 1.10","closed","","mkordas","2015-07-20T19:29:35Z","2015-07-21T03:42:01Z"
"","1175","Update maven-assembly-plugin to 2.5.5","Release Notes - Maven Assembly Plugin - Version 2.5.5 - Bug   - [MASSEMBLY-767] - Schema missing from the web site   - [MASSEMBLY-768] - JarInputStream unable to find  manifest     created by version 2.5.4   - [MASSEMBLY-769] - ZIP fileMode permissions not properly set with     dependencySet and unpackOptions","closed","","mkordas","2015-06-05T16:34:58Z","2015-06-05T17:04:49Z"
"","1055","Update maven-assembly-plugin to 2.5.4","Release Notes - Maven Assembly Plugin - Version 2.5.4 - Bug   - [MASSEMBLY-742] - Unclosed ZipFile warnings when ZIP archives are included   - [MASSEMBLY-746] - Warnings about platform dependent paths inconsistent.   - [MASSEMBLY-747] - StackOverflowError when building assembly   - [MASSEMBLY-748] - problem to extract zip files including file     names with umlauts   - [MASSEMBLY-750] - descriptor in ""dir"" format changes symbolic     links in non symlink files   - [MASSEMBLY-753] - LineEnding CR to LF conversion output is wrong     : All EOL are removed   - [MASSEMBLY-754] - Non existing folder produces NPE   - [MASSEMBLY-755] - missing whitespace in log message - Improvement   - [MASSEMBLY-764] - Upgrade to plexus-archiver 2.10 and io 2.5","closed","approved,","mkordas","2015-05-05T15:07:55Z","2015-05-06T20:07:24Z"
"","1204","Update Maven Shade Plugin to 2.4","Release Notes - Apache Maven Shade - Version 2.4  https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12317921&version=12331393  Bugs: - [MSHADE-155] - dependency-reduced-pom should use shadedArtifactId - [MSHADE-169] - Typos in warning message - [MSHADE-172] - ""java.lang.ArithmeticException: / by zero"" in MinijarFilter - [MSHADE-174] - Unable to shade Java 8 jarfiles with static interface methods using minimizeJar - [MSHADE-183] - Getting ""Error creating shaded jar: java.util.jar.Attributes cannot be                  cast to java.lang.String"" error when using ManifestResourceTransformer with Maven 3.2.5 - [MSHADE-185] - systemPath content is interpolated for system dependencies  Improvements: - [MSHADE-177] - MavenProject/MavenSession Injection as a paremeter instead as a component. - [MSHADE-178] - Removing plexus-container-default dependency - [MSHADE-179] - Fix RAT Report - [MSHADE-180] - Upgrade plexus-utils to 3.0.18 - [MSHADE-188] - Upgrade maven-dependency-tree to 2.2 - [MSHADE-191] - Upgrade plexus-utils to 3.0.22 - [MSHADE-192] - Upgrade maven-invoker to 1.10 - [MSHADE-193] - Upgrade to fluido skin 1.4.0","closed","","mkordas","2015-06-12T06:22:51Z","2015-06-15T21:31:26Z"
"","1131","Add support for canonical class names in MutableException. #1124","Regression run has been made on extended list of projects (with HBase sources included).  Before fix: ![image](https://cloud.githubusercontent.com/assets/5467276/7802677/46251460-033b-11e5-91e8-24172153cf51.png) http://mkordas.github.io/mutable-exception-before-fix/checkstyle.html  After fix: ![image](https://cloud.githubusercontent.com/assets/5467276/7802681/589ebdc6-033b-11e5-8724-7d461d3982c5.png) http://mkordas.github.io/mutable-exception-after-fix/checkstyle.html  Sample new mutable exceptions detected: https://code.google.com/p/findbugs/source/browse/plugins/jira/src/generated/com/atlassian/jira/rpc/exception/RemoteValidationException.java#10 https://github.com/apache/hbase/blob/master/hbase-client/src/main/java/org/apache/hadoop/hbase/exceptions/UnknownProtocolException.java#L31","closed","","mkordas","2015-05-25T22:15:16Z","2015-05-25T22:44:47Z"
"","1129","All Checks have to work in defalt configuration without any Exceptions","RegexpMultiline cause NPE in default config. Regexp - cause NPE  Expeceted: some weird regexp is used ""###NEVERMATCH###"" or similar.  Please recheck all other Checks (https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml) to work in default config without problem.","closed","high demand,","romani","2015-05-25T05:15:34Z","2015-07-22T00:59:02Z"
"","1407","Issue #1293: Refactoring of IllegalTokenCheck and IllegalTokenTextCheck. Coverage has been improved.","Refactoring reason: These Checks accept any token type user provide them. It means that acceptable tokens are all tokens from TokenTypes class. Now these Checks' `getAcceptableTokens()` method analyzes and copies user's set of tokens provided in a configuration. I think it is incorrect because Check's acceptable tokens should not depend on configuration. I've changed this method to return all token IDs.","closed","","baratali","2015-07-18T20:40:00Z","2015-07-19T14:17:45Z"
"","1015","ModifiedControlVariable: allow ignoring for-each loops","Recently the ModifiedControlVariable check caught the following for me:  ``` java for (int a = -10; a < 10; a++) {     for (int b = -10; a < 10; a++) {         ....     } } ```  Where due to a copy/paste bug, the second loop also changes the 'a' of the outer loop. So, this check is useful. However, I also have the following:  ``` java for (String line: lines) {     line = line.trim();     ... } ```  It would be nice if I could keep the ModifiedControlVariable, but exclude for-each loops. I believe this would be a useful extension, making it possible to use this check, without a whole bunch of false postivies for the for-each loops.","closed","approved,","dhendriks","2015-04-29T08:15:58Z","2015-06-23T14:23:04Z"
"","1537","Detect public constructors in non-public classes in RedundantModifier check","Public modifier for constructors in non-public classes is always obsolete.  ``` java public class PublicClass {     public PublicClass() {} // OK }  class PackagePrivateClass {     public PackagePrivateClass() {} // violation expected } ```","closed","approved,","mkordas","2015-08-02T14:09:52Z","2015-09-06T22:51:32Z"
"","1740","Short-circuit logic should be used in boolean contexts. Issue #46","PS: if you do review of this check you will not be happy. Ask author to recheck method names, what they do and javadoc. (Ex: line 156 getPreviousStmt look for cases only. I have no idea what should it do in fact and why it do it, but I'm sure when anyone see getPreviousStmt he think about statements, not only about cases.)","closed","","sabaka","2015-08-16T23:51:29Z","2015-09-03T23:32:47Z"
"","1960","Indentation fixes for pom.xml. Issue #46","Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers on a team also reduces the differences that are committed to source control systems, making code reviews easier.  By default this rule checks that each block of code is indented but not the size of this indent. The parameter ""indentSize"" allows the expected indent size to be defined. Only the first line of a badly indented section is reported.  Should fix all violations in pom","closed","","sabaka","2015-08-27T23:43:33Z","2015-09-03T23:27:47Z"
"","1905","Indentation fix for pom.xml. Issue #46","Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers on a team also reduces the differences that are committed to source control systems, making code reviews easier.  By default this rule checks that each block of code is indented but not the size of this indent. The parameter ""indentSize"" allows the expected indent size to be defined. Only the first line of a badly indented section is reported.  I'm not sure about other violations. If anything left after #1882 I'll fix it next time","closed","","sabaka","2015-08-26T21:41:25Z","2015-08-26T21:51:05Z"
"","1432","Fix JavadocTypeCheck not checking inner classes, fix issue #1421","Problem was that JavadocTypeCheck was only checking class when was the most outer type in file, now is checking inner classes as well, but for them is not checking for javadoc version and author params (because for them they are not appropriate).","closed","","liscju","2015-07-20T21:25:25Z","2015-07-21T16:21:33Z"
"","1203","Changed Integration Tests to use /src/it/. #1200","Problem was caused by the fact that Integration tests were picking-up wrong .java files on input. - Changed ConfigurationBuilder.java to use `endsWith(aFileName+"".java"")` instead of `contains(aFileName)`. It still may result in confusion in some cases where files have different prefixes, but works good on current set of files. - ConfigurationBuilder will search for files in `src/it/` folder. There are different files with the same name in `src/it/resources/` and `src/test/resources/`. Some errors were caused by this.","closed","","ivanov-alex","2015-06-11T15:55:38Z","2015-06-13T15:20:46Z"
"","1420","Fixing failing MainTest on Windows 8.1","Problem was a result of the fact, that Checker.process gets file path with File method getAbsolutePath() but MainTest with getCanonicalPath(). In windows getAbsolutePath() returns the lowercase drive letter but getCanonicalPath() returns the uppercase drive letter. To minimise changes in code i emulate getCanonicalPath(returning path with lowercase drive letter) by normalizing path returned by getAbsolutePath().","closed","","liscju","2015-07-19T21:56:12Z","2015-07-21T05:57:19Z"
"","1275","Incorrect xml structure at google_checks.xml","problem caused by  ""SingleLineJavadoc and inheritDoc"" #1063,  reported by #1274.  TODO:  1) update integration tests to pass. 2) update build procedure to validate all XML files against their schemas(XSL, DTD).","closed","high demand,","romani","2015-07-03T00:57:54Z","2015-07-11T13:49:41Z"
"","1065","OneTopLevelClass Check fails when analyzing package-info.java","Problem can be reproduced by running [OneTopLevelClass](http://checkstyle.sourceforge.net/config_design.html#OneTopLevelClass) on any `package-info.java` file.  ``` com.puppycrawl.tools.checkstyle.TreeWalker processFiltered SEVERE: NoSuchElementException occurred during the analysis of file com\puppycrawl\tools\checkstyle\api\package-info.java. java.util.NoSuchElementException     at java.util.TreeMap.key(TreeMap.java:1221)     at java.util.TreeMap.firstKey(TreeMap.java:285)     at com.puppycrawl.tools.checkstyle.checks.design.OneTopLevelClassCheck.finishTree(OneTopLevelClassCheck.java:147)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyEnd(TreeWalker.java:383)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:339)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:205)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:271) ```","closed","high demand,","mkordas","2015-05-10T18:52:34Z","2015-05-13T17:13:23Z"
"","1169","Generate HTML report on Maven cobertura:cobertura goal","Previously only XML report for this goal was generated.","closed","","mkordas","2015-06-04T18:50:24Z","2015-06-04T20:03:57Z"
"","1047","Complete descriptions in checks index","Previously `MissingDeprecated` and `MissingOverride` had truncated descriptions.","closed","","gaul","2015-05-02T21:42:12Z","2015-05-03T09:39:27Z"
"","1764","Decrease visibility of inner classes. #1555","Possibility to instantiate private checks was added.  Fixes `PublicInnerClass` inspection violation.  Description:  > Reports public inner classes.","closed","","mkordas","2015-08-18T20:43:08Z","2015-08-19T03:35:56Z"
"","1307","Issue #1293: UT coverage percents have been updated in pom.xml","pom.xml update after previous pull request.","closed","","baratali","2015-07-07T20:25:02Z","2015-07-08T06:38:57Z"
"","1243","Resolve all warnings from Eclipse 4.4.2","please use Eclipse 4.4.2 , default validation settings, just import checkstyle as ""existing project"" (we keep Eclipse project files in repo).  resolve all warnings on our project, there are 90 warnings .  Reference: https://github.com/checkstyle/checkstyle/pull/1219#issuecomment-115119836","closed","approved,","romani","2015-06-26T00:03:01Z","2015-08-17T04:24:46Z"
"","1358","new Check: MaximumNestedStatementsOnSingleLine","Per the discussion in issue #1007, and more specifically https://github.com/checkstyle/checkstyle/issues/1007#issuecomment-120601784, the idea is to add a new MaximumNestedStatementsOnSingleLine check. The check ensures there are no more 'nested statements on a single line' than the configured maximum.  For instance, with a maximum level of 2, the following (which has 3 levels, for/if/for) is not allowed:  ``` java for (int i = 0; i < 10; i++) if (i > 0) for (int j = 0; j < 10; j++) break; ```  while with a maximum level of 3, it will be allowed. This allows users to decide for themselves how many levels they find acceptable.  I propose to only count control flow statements (for, if, while, etc), and not the body (the assignment, break, continue, etc statement). I propose to make 1 the default, to allow the following example with one control flow statement:  ``` java for (int i = 0; i < 10; i++) x += i; ```  but not the following example with two control flow statements:  ``` java for (int i = 0; i < 10; i++)  if (i % 2 == 0) x += i; ```  Note that in my opinion, this check should be about control flow statements on a single line, but the body may still be on multiple lines. That is, the following example has two control flow statements on a single line, and would be checked by this check:  ``` java for (int i = 0; i < 10; i++)  if (i % 2 == 0) {     x += i; } ``` ##","open","new module,","dhendriks","2015-07-12T09:02:46Z","2016-12-14T18:17:01Z"
"","1916","Issue #1566: partial fix of ReturnCount violations 10","Partial fix for: - ReturnCount   `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-26T22:20:14Z","2015-08-31T21:38:25Z"
"","1915","Issue #1566: partial fix of ReturnCount violations 9","Partial fix for: - ReturnCount   `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-26T22:19:55Z","2015-08-31T21:39:33Z"
"","1914","Issue #1566: partial fix of ReturnCount violations 8","Partial fix for: - ReturnCount   `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-26T22:19:35Z","2015-08-31T21:39:32Z"
"","1913","Issue #1566: partial fix of ReturnCount violations 7","Partial fix for: - ReturnCount   `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-26T22:19:16Z","2015-08-31T21:39:29Z"
"","1912","Issue #1566: partial fix of ReturnCount violations 6","Partial fix for: - ReturnCount   `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-26T22:18:55Z","2015-08-31T21:39:26Z"
"","1911","Issue #1566: partial fix of ReturnCount violations 5","Partial fix for: - ReturnCount   `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-26T22:18:34Z","2015-08-31T21:39:24Z"
"","1910","Issue #1566: partial fix of ReturnCount violations 4","Partial fix for: - ReturnCount   `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-26T22:18:07Z","2015-08-31T21:39:22Z"
"","1909","Issue #1566: partial fix of ReturnCount violations 3","Partial fix for: - ReturnCount   `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-26T22:17:36Z","2015-08-31T21:39:13Z"
"","1908","Issue #1566: partial fix of ReturnCount violations 2","Partial fix for: - ReturnCount   `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-26T22:16:58Z","2015-08-31T21:38:48Z"
"","1907","Issue #1566: partial fix of ReturnCount violations","Partial fix for: - ReturnCount   `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-26T22:13:58Z","2015-08-31T21:38:23Z"
"","1775","Issue #1566: ReturnCount violations (partial fix)","Partial fix for ""ReturnCount: Return count is X (max allowed is 2)"" violations","closed","","rdiachenko","2015-08-19T04:13:32Z","2015-08-31T21:39:35Z"
"","1282","Raising exception for CustomImportOrder.SAME_PACKAGE","Parameter of SAME_PACKAGE should be positive integer. Throwing exception if it is <=0","closed","","ivanov-alex","2015-07-04T22:40:48Z","2015-07-06T05:39:24Z"
"","1231","Fix empty html page for extending Checkstyle","Page https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/extending.xml is empty but it should as minimum give links too all its child pages http://checkstyle.sourceforge.net/extending.html","closed","approved,","romani","2015-06-21T17:02:02Z","2015-06-23T00:16:16Z"
"","1085","Do not verify overriding methods in ThrowsCount check","Overriding methods should not be checked by [ThrowsCount check](http://checkstyle.sourceforge.net/config_design.html#ThrowsCount) and they should allowed to throw several checked exceptions.","closed","approved,","mkordas","2015-05-16T23:10:47Z","2015-05-26T22:02:47Z"
"","1002","SuppressionFilter: new option 'optional' to allow skip SuppressionFilter if config file does not exist","Our teams use a global checkstyle configuration file to ensure we all meet the same style standards. Some teams want the ability to ignore files specific to their project. Unfortunately, the suppression filter does not allow a non existent suppression filer file to exist. It throws an error. It would be painful to require every team and project branch to have this file.  Is it possible to ignore this error? Or can this be implemented?  Thanks!","closed","new feature,","erdog","2015-04-27T14:30:54Z","2016-01-25T21:35:41Z"
"","1801","Source files should not have any duplicated blocks. Issue #46","Other duplicated check won't fixed. Most of them is getAcceptableTockens, getDefaultTokens for checks, couple checks, which has similar purposes, but shouldn't be changed in my opinion and false positives.","closed","","sabaka","2015-08-19T23:41:10Z","2015-09-03T23:26:52Z"
"","1133","Remove noise from Coveralls by using one JDK for coverage builds","Oracle JDK 8 build (last one) always show about 0.1% higher code coverage:  ![enter image description here](http://i.stack.imgur.com/bgiGj.png)  Even if the pull request clearly only adds coverage, Coveralls calculates difference between worst coverage in current jobs (JDK 7) with the best one from the previous one (JDK 8), hence causing [comments in pull requests](https://github.com/checkstyle/checkstyle/pull/1098) like:   ![enter image description here](http://i.stack.imgur.com/XMomY.png)  My idea is to run Coveralls just on one JDK, not entire matrix.","closed","approved,","mkordas","2015-05-25T23:51:40Z","2015-05-27T23:50:34Z"
"","1617","Issue #1566: '&&' should be on a new line' fixed","OperatorWrap    '&&' should be on a new line violations fixed","closed","","rdiachenko","2015-08-08T21:27:10Z","2015-08-09T17:20:22Z"
"","1454","Issue #1293: Improved coverage of MultipleStringLiteralsCheck","One more unit test","closed","","baratali","2015-07-23T20:21:41Z","2015-07-26T08:37:22Z"
"","1174","Indentation check: line wrapping doesn't have expected comportment on anonymous classes","On version 6.7.  **Test configuration file**  ``` xml                                           ```  **And the following test class (which doesn't really compile but...)**  ``` java public class TestClass {      public void cacheTheWorld() {         final StrangeCacheManager strangeCacheManager = new StrangeCacheManager(tenantCacheManager);           // This is OK         decoratedCacheManager =                 new CacheManagerDecorator(                         new EmbeddedCacheManagerDecorator(new EmbeddedCacheManager() {                                     @Override                                     public Cache getCache(String name) {                                         return cacheManager.getCache(name);                                     }                                      @Override                                     public Collection getCacheNames() {                                         return cacheManager.getCacheNames();                                     }                                      @Override                                     public CacheManager getCacheManager() {                                         return cacheManager;                                     }                                 }));          // This gives indentation errors         decoratedCacheManager =                 new CacheManagerDecorator(                         new EmbeddedCacheManagerDecorator(                                 new EmbeddedCacheManager() {                                     @Override                                     public Cache getCache(String name) {                                         return cacheManager.getCache(name);                                     }                                      @Override                                     public Collection getCacheNames() {                                         return cacheManager.getCacheNames();                                     }                                      @Override                                     public CacheManager getCacheManager() {                                         return cacheManager;                                     }                                 }));           // This is OK         new EmbeddedCacheManager() {             @Override             public Cache getCache(String name) {                 return cacheManager.getCache(name);             }              @Override             public Collection getCacheNames() {                 return cacheManager.getCacheNames();             }              @Override             public CacheManager getCacheManager() {                 return cacheManager;             }         };     } } ```  **Gives the following result**  ``` PS C:\dev\apps\checkstyle> java -jar .\checkstyle-6.7-all.jar -c .\Example-checkstyle.xml .\TestClass.java Starting audit... C:\dev\apps\checkstyle\.\TestClass.java:32: warning: 'method def modifier' have incorrect indentation level 36, expected level should be one of t he following: 20, 24, 28. C:\dev\apps\checkstyle\.\TestClass.java:34: warning: 'method def' child have incorrect indentation level 40, expected level should be one of the following: 24, 28, 32. C:\dev\apps\checkstyle\.\TestClass.java:35: warning: 'method def rcurly' have incorrect indentation level 36, expected level should be one of the  following: 20, 24, 28. C:\dev\apps\checkstyle\.\TestClass.java:37: warning: 'method def modifier' have incorrect indentation level 36, expected level should be one of t he following: 20, 24, 28. C:\dev\apps\checkstyle\.\TestClass.java:39: warning: 'method def' child have incorrect indentation level 40, expected level should be one of the following: 24, 28, 32. C:\dev\apps\checkstyle\.\TestClass.java:40: warning: 'method def rcurly' have incorrect indentation level 36, expected level should be one of the  following: 20, 24, 28. C:\dev\apps\checkstyle\.\TestClass.java:42: warning: 'method def modifier' have incorrect indentation level 36, expected level should be one of t he following: 20, 24, 28. C:\dev\apps\checkstyle\.\TestClass.java:44: warning: 'method def' child have incorrect indentation level 40, expected level should be one of the following: 24, 28, 32. C:\dev\apps\checkstyle\.\TestClass.java:45: warning: 'method def rcurly' have incorrect indentation level 36, expected level should be one of the  following: 20, 24, 28. C:\dev\apps\checkstyle\.\TestClass.java:46: warning: 'object def rcurly' have incorrect indentation level 32, expected level should be one of the  following: 16, 20. Audit done. ```  I think checkstyle should not treat a method in an anonymous class as a continuity of a previous statement (line wrapping: 8) but as new statement (4). ##","open","indentation,","bananetomate","2015-06-05T15:11:52Z","2016-12-14T18:16:58Z"
"","1360","Website: Add Gradle to list of related tools; correct SonarQube name and links","On the ""related tools"" list on the website, we should list Gradle, which is one of the major build tools next to Maven, and it supports Checkstyle out of the box.  I also corrected the SonarQube name (was renamed from just ""Sonar"") and corresponding website links.","closed","","tsjensen","2015-07-12T20:32:21Z","2015-07-12T21:59:19Z"
"","1995","Issue #1566: Fixed CyclomaticComplexityCheck violation (partial)","NoWhitespaceBeforeCheck has been refactored","closed","","baratali","2015-08-29T13:50:09Z","2015-08-29T15:26:12Z"
"","1694","reimplement EqualsAvoidNullCheck, #1377","Now it only flags equals calls which are called on String fields. Reports are here: https://vladlis.github.io/ So far I've confirmed all violations on Checkstyle, SevNTU-Checkstyle, Guava, Orekit, Hibernate-orm.","closed","","Vladlis","2015-08-14T15:35:24Z","2015-08-28T17:19:31Z"
"","1930","EqualsAvoidNull check should сheck String concatenations","Now all concatenations of objects in EqualsAvoidNull check are considered unsafe, however if any String field is concatenated with any other object, then result won't be null","closed","approved,","Vladlis","2015-08-27T14:44:50Z","2015-11-18T13:29:12Z"
"","1323","Issue #1293: Refactoring of Nested*DepthCheck-family","No need to check token types every time because there is only one token type in getAcceptableTokens(). Checkstyle reports on Guava: http://baratali.github.io/ (reports are identical before and after my changes)","closed","","baratali","2015-07-08T19:34:28Z","2015-07-26T08:37:38Z"
"","1400","Remove dead code from ArrayInitHandler in Indentation check. #1270","No differences in reports:  ``` diff target-6.9/checkstyle-result.xml target-6.8.1/checkstyle-result.xml --- target-6.9/checkstyle-result.xml +++ target-6.8.1/checkstyle-result.xml @@ -1,5 +1,5 @@   - + ```  ![image](https://cloud.githubusercontent.com/assets/5467276/8755859/4265bfde-2cce-11e5-8f8a-3173a2590ed3.png) ![image](https://cloud.githubusercontent.com/assets/5467276/8755863/4e4c05d8-2cce-11e5-9867-3f024cf0f780.png)","closed","","mkordas","2015-07-17T19:54:30Z","2015-07-18T04:52:56Z"
"","1171","Provide workaround for incorrect coverage shown by Cobertura. #1167","Next step is to try to reproduce the problem in complete isolation and report it to Cobertura developers.","closed","","mkordas","2015-06-04T20:42:49Z","2015-06-04T21:26:51Z"
"","1346","update google_style.xml to point to github.io","new location of Google Java Style - http://google.github.io/styleguide/javaguide.html  we need to update our HTML (xdoc file google_style.xml) to point to new location.  Guide coverage report page should point to cached web page at our web site.  FYI , there is no way to link HTML version by commit reference as we did before, so we need always cache google style at out site as updated to new content:  ``` That's not possible currently, Roman -- only the tip of the gh-pages branch is built and served.  Let us know if you have any other questions.  Cheers, Ivan Zuzak  > https://help.github.com/articles/creating-project-pages-manually/#load-your-new-github-pages-site > > as gh-pages is just a git repo... > Is it possible to open gh-pages by commit hashcode ? > > Example: > I need to view pages http://google.github.io/styleguide/javaguide.html , but base on March 21 2014 commit > https://github.com/google/styleguide/blob/0858ea619059a0b383338d6af285c9754599b071/javaguide.html > > for now looks like only HEAD version is accessible on github.io . ```","closed","approved,","romani","2015-07-11T00:00:26Z","2015-09-21T15:31:54Z"
"","1738","Statements shouldn't be nested too deep. Issue #46","Nested if, for, while, switch and try statements is a key ingredient for making what's known as ""Spaghetti code"". Such code is hard to read, refactor and therefore maintain.","closed","","sabaka","2015-08-16T22:37:07Z","2015-08-30T22:33:04Z"
"","1530","Detect nested enums marked as static in RedundantModifier check","Nested enum types are always static by default.  ``` java public class ClassWithNestedEnums {     static enum NestedEnumWithRedundantStatic {} // violation      enum CorrectNestedEnum {} } ```","closed","approved,","mkordas","2015-08-01T18:14:06Z","2015-09-03T13:46:11Z"
"","1166","Add an option to specify legal pattern for RegexpSinglelineJava","Negating regex pattern in java is painful and the absence of an easy way to do that is definitely a large design error in the `java.util.regex` package. Therefore it'd be nice to be able to specify a legal pattern instead of an illegal pattern to `RegexpSinglelineJava` in order to overcome this java shortcoming easily.","closed","incomplete,","krichter722","2015-06-02T18:33:18Z","2015-06-24T00:16:51Z"
"","1455","Import which produces error on MacOSX jdk has been deleted","mvn cobertura:check passed, so it was not required","closed","","sabaka","2015-07-23T23:55:37Z","2015-09-03T23:28:04Z"
"","1539","MultipleVariableDeclarationsCheck throws NPE when variable is declared inside case block.","MultipleVariableDeclarationsCheckTest throws NPE when variable is declared inside case block.  Example:  ``` java void method2() {         for (int i=0, j=0; i < 10; i++, j--) {         }          for(int i=0; i<4;i++) {          }          switch("""") {             case ""0"": // no problem             case ""1"":                 // my comment                 break;             case ""2"":                 // my comment                 //comment                 // comment                 break;             case ""3"":             /* com */                 /* com */                 break;             case ""5"":                 // fall through             case ""6"":                 int k = 7; // NPE HERE                 // fall through             case ""7"":                 if (true) {}                 // fall through             case ""8"":                 break;             default:                 // comment                 break;         }     } ```  Stack trace:  ``` SEVERE: NullPointerException occurred during the analysis of file /media/andreiselkin/TOURO/IDEA_Projects/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputMultipleVariableDeclarations.java. java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.coding.MultipleVariableDeclarationsCheck.visitToken(MultipleVariableDeclarationsCheck.java:91)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:399)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:495)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:328)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:201)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:262)     at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:121)     at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:108)     at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:95)     at com.puppycrawl.tools.checkstyle.checks.coding.MultipleVariableDeclarationsCheckTest.testIt(MultipleVariableDeclarationsCheckTest.java:48)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) ```  Problem location: [nextNode](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java#L91) can equal to null and should be checked.","closed","approved,","MEZk","2015-08-02T17:40:26Z","2015-08-03T02:00:47Z"
"","1154","Improve Checkstyle 6.7 release notes","Multiple commits are made to make review easier.  ![image](https://cloud.githubusercontent.com/assets/5467276/7899512/ea0cb644-0725-11e5-9bf9-dabf3cd58dfa.png)","closed","","mkordas","2015-05-30T21:44:38Z","2015-06-06T22:45:52Z"
"","1134","Remove noise at Coveralls by using one JDK for coverage builds. #1133","Moreover, number of builds has been limited where testing on all JDKs didn't make sense.","closed","","mkordas","2015-05-26T00:01:34Z","2015-06-06T22:46:04Z"
"","1463","Continuation of :Make RedundantModifier checks if enum constructor has redundant private","modifier, fixes part of #1242, continuation of PR #1446","closed","","liscju","2015-07-25T00:20:52Z","2015-07-25T04:14:17Z"
"","1446","RedundantModifier checks if enum constructor has redundant private","modifier, fixes part of #1242","closed","","liscju","2015-07-21T22:57:48Z","2015-07-25T04:15:02Z"
"","1212","UT coverage for AvoidStarImportCheck. #1128","Minor refactoring: removed private method that was used only in one place and was containing one useful statement.","closed","","ivanov-alex","2015-06-15T19:05:15Z","2015-06-24T18:12:22Z"
"","1215","Updated description for RedundantImport","Mentioning that static imports are allowed from java.lang and same package.","closed","","ivanov-alex","2015-06-16T09:09:02Z","2015-06-24T18:13:24Z"
"","1300","Update Maven PMD Plugin to 3.5","Maven PMD Plugin version 3.5 contains update for PMD to latest 5.3.2.  The biggest functional change is better detection of boolean return that may be simplified [#1320](https://sourceforge.net/p/pmd/bugs/1320/).","closed","approved,","mkordas","2015-07-06T20:01:13Z","2015-07-09T01:54:13Z"
"","1440","Coverage has been increased to 100% in AnnotationLocationCheck","Master report: http://sabaka.github.io/AnnotationLocation/master/checkstyle.html After changes: http://sabaka.github.io/AnnotationLocation/checkstyle.html Config: https://github.com/sabaka/contribution/blob/master/checkstyle-tester/projects-to-test-on.properties","closed","","sabaka","2015-07-21T02:27:56Z","2015-07-21T03:43:53Z"
"","1293","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.coding","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.coding","closed","approved,","baratali","2015-07-05T21:19:13Z","2015-08-30T16:37:10Z"
"","1289","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.whitespace","Make code coverage 100% for package com.puppycrawl.tools.checkstyle.checks.whitespace","closed","approved,","rdiachenko","2015-07-05T17:36:53Z","2015-07-26T05:47:38Z"
"","1288","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.naming","Make code coverage 100% for package com.puppycrawl.tools.checkstyle.checks.naming","closed","approved,","rdiachenko","2015-07-05T17:36:50Z","2015-07-09T01:57:50Z"
"","1286","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.modifier","Make code coverage 100% for package com.puppycrawl.tools.checkstyle.checks.modifier","closed","approved,","rdiachenko","2015-07-05T17:29:18Z","2015-07-07T03:43:36Z"
"","1287","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.metrics","Make code coverage 100% for package com.puppycrawl.tools.checkstyle.checks.metrics","closed","approved,","rdiachenko","2015-07-05T17:36:44Z","2015-07-29T06:52:22Z"
"","1388","BaseCheckTestSupport.verify() fails on Windows","Lots of test are failing on Windows due to this method, like this:  ``` java.lang.NumberFormatException: For input string: ""\Repo\checkstyle\src\it\resources\com\google\checkstyle\test\chapter2filebasic\rule21filename\OuterTypeFilenameInput_3.java""         at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)         at java.lang.Integer.parseInt(Integer.java:580)         at java.lang.Integer.parseInt(Integer.java:615)         at com.google.checkstyle.test.base.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:138)         at com.google.checkstyle.test.base.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:109)         at com.google.checkstyle.test.base.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:94)         at com.google.checkstyle.test.chapter2filebasic.rule21filename.OuterTypeFilenameTest.outerTypeFilenameTest_3(OuterTypeFilenameTest.java:61)  ```  The problem is that on Windows, full paths contain a `:` sign, which denotes a device in the path: _D:\folder\file_. The method in question ignores this, and reads the string part after the first occurrence of `:`. This is incorrect, and also results in an exception, because that part will not be a number on Windows.","closed","approved,","WonderCsabo","2015-07-15T17:57:39Z","2015-07-18T17:22:43Z"
"","1778","Fixes logic bug in gui ParseTreeInfoPanel making linesToPositions assign","lines to inappropriate positions  Problem was pretty weird logic in filling textArea with new file content and assigning linesToPosition association between lines of code and position in text area. Before PR text area is appending once ( for the first time when text area is empty it is correct,but if not - new lines are appending at the end of old additionaly causing linesToPosition to be wrong) , clear text area and filling it once again. This PR just fix this poor behaviour moving adding lines after clearing old text area value.","closed","","liscju","2015-08-19T15:43:26Z","2015-08-28T17:49:24Z"
"","1354","new Check: Rule to prevent multiple assignments on one line","Like discussed in #1237, this Check should verify that this code is illegal.  ``` java int a = 1, b = 2; ``` ##","open","new module,","guillaumecle","2015-07-11T21:58:35Z","2016-12-14T18:17:01Z"
"","1264","Update .travis.yml","Just checking to see if coverage reports exist.  Thanks!","closed","","stevepeak","2015-06-30T01:07:54Z","2015-06-30T01:43:56Z"
"","1192","ClassNotFoundException when using inherited exception","JavadocMethodCheck is used.  I have a custom exception class which extends NestableRuntimeException from commons-lang 2.6:  `public class ApplicationException extends NestableRuntimeException { ... }`  The custom exception and the code calling it are in my own jar file, while the NestableRuntimeException is in a Maven dependency. When I run checkstyle via maven-checkstyle-plugin, this always results in a stacktrace:  [INFO] Generating ""Checkstyle"" report           --- maven-checkstyle-plugin:2.15:checkstyle-aggregate java.lang.NoClassDefFoundError: org/apache/commons/lang/exception/NestableRuntimeException     at java.lang.ClassLoader.defineClass1(Native Method)     at java.lang.ClassLoader.defineClass(ClassLoader.java:800)     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)     at java.net.URLClassLoader.defineClass(URLClassLoader.java:449)     at java.net.URLClassLoader.access$100(URLClassLoader.java:71)     at java.net.URLClassLoader$1.run(URLClassLoader.java:361)     at java.net.URLClassLoader$1.run(URLClassLoader.java:355)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:354)     at java.lang.ClassLoader.loadClass(ClassLoader.java:425)     at java.lang.ClassLoader.loadClass(ClassLoader.java:358)     at java.lang.Class.forName0(Native Method)     at java.lang.Class.forName(Class.java:274)     at com.puppycrawl.tools.checkstyle.checks.ClassResolver.safeLoad(ClassResolver.java:153)     at com.puppycrawl.tools.checkstyle.checks.ClassResolver.isLoadable(ClassResolver.java:132)     at com.puppycrawl.tools.checkstyle.checks.ClassResolver.resolveQualifiedName(ClassResolver.java:164)     at com.puppycrawl.tools.checkstyle.checks.ClassResolver.resolve(ClassResolver.java:83)     at com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.resolveClass(AbstractTypeAwareCheck.java:247)     at com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.tryLoadClass(AbstractTypeAwareCheck.java:262)     at com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck$RegularClass.getClazz(AbstractTypeAwareCheck.java:486)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.checkThrowsTags(JavadocMethodCheck.java:844)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.checkComment(JavadocMethodCheck.java:439)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.processAST(JavadocMethodCheck.java:325)     at com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.visitToken(AbstractTypeAwareCheck.java:149)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:448)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:541)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:373)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:211)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:73)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:263)     at org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:253)     at org.apache.maven.plugin.checkstyle.AbstractCheckstyleReport.executeReport(AbstractCheckstyleReport.java:473)     at org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:255)     at org.apache.maven.plugins.site.render.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:224)     at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.renderModule(DefaultSiteRenderer.java:311)     at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:129)     at org.apache.maven.plugins.site.render.SiteMojo.renderLocale(SiteMojo.java:182)     at org.apache.maven.plugins.site.render.SiteMojo.execute(SiteMojo.java:141)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:355)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:216)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:160)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) Caused by: java.lang.ClassNotFoundException: org.apache.commons.lang.exception.NestableRuntimeException     at java.net.URLClassLoader$1.run(URLClassLoader.java:366)     at java.net.URLClassLoader$1.run(URLClassLoader.java:355)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:354)     at java.lang.ClassLoader.loadClass(ClassLoader.java:425)     at java.lang.ClassLoader.loadClass(ClassLoader.java:358)     ... 59 more [INFO] There are 896 errors reported by Checkstyle 6.1.1 with config/sun_checks.xml ruleset.   The same happens with checkstyle 6.7. A similar issue was posted here: https://groups.google.com/forum/#!topic/checkstyle/9Yae7DL1kdo","closed","javadoc,","rmueller83","2015-06-08T12:18:15Z","2015-06-24T00:09:05Z"
"","1221","StackOverflow at java.util.regex.*","java.util.regex.Matcher apparently has known issues which cause will cause StackOverflow for certain RegExps on certain input (Google it, there are various blog posts, JDK bug reports which are closed or non-action-ed).   This ""fact of live"" (the JDK is not going to fix this) can cause Checkstyle to abruptly stop unexpectedly - without any indication as to which input file made it choke for what regexp (once you know that, you can use excludes or refine the regexps it seems).  Checkstyle should never fail that abruptly, and instead treat a StackOverflow at java.util.regex.\* more gracefully.  I have a unit test illustrating this problem, and a PR with proposed fixes for this issue which I'll post in a minute.  PS: This bug can be confused with https://github.com/checkstyle/checkstyle/issues/48 (like I initially did), but is actually completely unrelated to that one, which is a StackOverflow in Checkstyle's own com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.findMatch code that uses recursion itself; this one is technically completely different - other than also being about a StackOverflow.","closed","approved,","vorburger","2015-06-18T19:39:51Z","2015-07-01T05:22:51Z"
"","1012","NPE in ModifiedControlVariableCheck","java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.coding.ModifiedControlVariableCheck.checkIdent(ModifiedControlVariableCheck.java:266)     at com.puppycrawl.tools.checkstyle.checks.coding.ModifiedControlVariableCheck.visitToken(ModifiedControlVariableCheck.java:189)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:412)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:505)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:338)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:204)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:80)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:271)     at com.puppycrawl.tools.checkstyle.Main.processCommandLine(Main.java:161)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:59)     at gov.ssa.enterprisetest.server.standalone.CodeStyleCheck.main(CodeStyleCheck.java:15)  Code:  ``` import javax.faces.bean.ManagedBean; import javax.faces.bean.SessionScoped;  @ManagedBean(name=""user"") //<-- cause of exception @SessionScoped public class TestClass3 { } ```","closed","high demand,","rnveach","2015-04-29T02:56:53Z","2015-04-30T23:31:25Z"
"","1538","Apply various improvements over Checkstyle code","It's easiest to review changes commit by commit.","closed","","mkordas","2015-08-02T14:47:36Z","2015-08-05T02:07:18Z"
"","1013","NoWhitespaceAfter takes over WhitespaceAround setting","It seems a fix introduced between 6.2 and 6.3 changed the behaviour of NoWhitespaceAfter which now triggers an error with the following code, despiteWhitespaceAround is configured with at least PLUS in the tokens list :  ``` public class A {     public static int[][] create(int i, int j) {         return new int[i + j][3];     } } ```  The error is ""'i' is followed by whitespace.""  I would think that an expression inside the square brackets for the array dimensions should be parsed as an expression, regardless of it being inside the brackets.  ``` $ java -jar checkstyle-6.3-all.jar -c config.xml 3.java Starting audit... /var/tmp/3.java:3:25: 'i' is followed by whitespace. Audit done.  $ java -jar checkstyle-6.2-all.jar -c config.xml 3.java Starting audit... Audit done.  $ cat 3.java  public class A {     public static int[][] create(int i, int j) {         return new int[i + j][3];     } }  $ cat config.xml                  ```  Problem is caused by - https://github.com/checkstyle/checkstyle/commit/e6638c3344a90ec1716feb1830790efe430a123a with attempt to fix #68 and #542","closed","approved,","maisonobe","2015-04-29T06:44:25Z","2015-10-31T22:20:28Z"
"","1474","Issue #1013. Fix NoWhitespaceAfterCheck","It satisfies issue #1013 1. Behavior of NoWhitespaceAfterCheck for specific token type TokenTypes.ARRAY_DECLARATOR is overhauled.    Now check generates error if there are whitespaces in highlighted places:        int█[ ]█[ ] a;    int a█[ ]█[ ];    String█[ ]█[ ] someStuff6 = (java.lang.String█[ ]█[ ]) someStuff5;    return new Integer█[  i + j  ]█[i + j]█[0];        it does not check for whitespace validity inside brackets. 2. Token TokenTypes.INDEX_OP is added to the lists of default and accepted tokens due to its simularity with TokenTypes.ARRAY_DECLARATOR. 3. Other token types processing remains intact. 4. There is an error in Travis-CI build job no.8:    [ERROR] src/main/java/org/orekit/propagation/semianalytical/dsst/forces/DSSTThirdBody.java[1087:77](whitespace) NoWhitespaceAfter: 'fact' is followed by whitespace.    https://travis-ci.org/checkstyle/checkstyle/jobs/72631540  It happens because updated check finds waste whitespace in Orecit source: https://www.orekit.org/forge/projects/orekit/repository/revisions/master/entry/src/main/java/org/orekit/propagation/semianalytical/dsst/forces/DSSTThirdBody.java","closed","","attatrol","2015-07-25T21:59:15Z","2015-10-31T22:19:55Z"
"","1897","JavadocTagInfo has been moved to javadoc package. Part of issue #46","It reduces number of cycle dependencies between api and utils packages.","closed","","sabaka","2015-08-25T21:42:52Z","2015-09-03T23:26:38Z"
"","1486","Updated configuration for Eclipse Mars in xdoc #1464","It appears that Eclipse Mars has some problems with Organize Imports fixed and it needs separate configuration to match default settings","closed","","ivanov-alex","2015-07-27T11:48:39Z","2015-07-28T16:07:09Z"
"","1251","Use SHA-1 instead on non-standard SHA in PropertyCacheFile","Issue is in [PropertyCacheFile.java:201](../blob/master/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java#L200).  According to http://stackoverflow.com/questions/14903539/what-specific-hash-algorithm-does-messagedigest-getinstancesha-return, `SHA` is non-standard one and `SHA-1` should be used.","closed","approved,","mkordas","2015-06-28T06:25:03Z","2015-06-28T17:14:46Z"
"","1647","Deprecated methods have been removed.","Issue #46  I'm not sure in these changes because somebody outside the project may use it, but it have been marked deprecated for a while and I think it's expected. Let's discuss.  Btw there are couple false positive in sonar and I'll notify sonar team about it.","closed","","sabaka","2015-08-09T23:56:04Z","2015-09-03T23:33:54Z"
"","1646","Transient has been deleted from non-serializable classes","Issue #46","closed","","sabaka","2015-08-09T23:52:42Z","2015-09-03T23:36:11Z"
"","1178","Remove unused MethodCallLineWrapHandler","Is file [MethodCallLineWrapHandler.java](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallLineWrapHandler.java) needed for anything or used anywhere?  If not, it can be safely removed.","closed","approved,","mkordas","2015-06-05T17:16:50Z","2015-06-06T02:01:04Z"
"","1555","Fix issues reported by IntelliJ IDEA inspections in Checkstyle code","IntelliJ provides a lot of useful inspections: https://www.jetbrains.com/idea/features/code_analysis.html  All reasonable errors and warnings should be fixed.","closed","approved,","mkordas","2015-08-05T18:37:07Z","2019-01-01T06:52:15Z"
"","1382","windows folder case insensitive issue","Inside the folder ""src/it/resources/com/google/checkstyle/test/chapter5naming"" there are 2 folders with the same, case insensitive name which is causing issues with windows. ""rule521packageNames"" and ""rule521packagenames"" are the same letters/numbers but one has a captial N and the other has a lowercase n. Windows doesn't allow these 2 folders to exist in the same parent.","closed","approved,","rnveach","2015-07-14T23:15:58Z","2015-07-18T18:01:08Z"
"","1587","Issue #1566: 'Fields and methods should be before inner classes' violations fixed","Inner classes were moved to the end of outer classes.","closed","","rdiachenko","2015-08-07T21:57:03Z","2015-08-09T17:19:06Z"
"","1421","JavadocType ignores param tags in InnerClass","Inner classes are not checked with JavadocType check for missing or extra `@param` tags  The following code is Ok, but `@param` tags are wrong set in the javadoc  ``` java     /**      * Example inner class.      * @param  documented parameter      * @param  extra parameter      */      public static class InnerClass     {     } ```","closed","approved,","pbaranchikov","2015-07-20T07:44:31Z","2015-07-21T16:24:54Z"
"","1048","Duplicate error message for static final field in DeclarationOrder check","Incorrect position of `static final` field is reported once as static variable and then as variable in [DeclarationOrder](http://checkstyle.sourceforge.net/config_coding.html#DeclarationOrder).  ``` [checkstyle] com\puppycrawl\tools\checkstyle\checks\blocks\AvoidNestedBlocksCheck.java:100:5: Static variable definition in wrong order. [checkstyle] com\puppycrawl\tools\checkstyle\checks\blocks\AvoidNestedBlocksCheck.java:100:5: Variable access definition in wrong order. ```","closed","approved,","mkordas","2015-05-02T23:55:28Z","2016-02-17T17:22:40Z"
"","1180","Incorrect config file cause CLI finish with error but no output with details","Incorrect config file cause problems and no output  ``` $ java -cp checkstyle-6.7-all.jar com.puppycrawl.tools.checkstyle.Main -c my_check.xml Test.java  Checkstyle ends with 1 errors.  ✘-1 /var/tmp $ cat Test.java  package test;  public class Test { }  ✔  /var/tmp  $ cat my_check.xml    #                       ```  Workaround: use 6.6","closed","high demand,","romani","2015-06-05T20:38:47Z","2015-06-08T18:43:58Z"
"","1054","Update cobertura-maven-plugin to 2.7, issue #916","In version 2.7 the new `cobertura-integration-test` report is generated by default. As Checkstyle doesn't have `integration-test` phase, just `cobertura` report is enough and this needs to be set explicitly.  More information in #916.","closed","","mkordas","2015-05-04T15:32:24Z","2015-05-04T17:01:21Z"
"","1668","Documentation: JavadocMethod Examples typo","In the documentation http://checkstyle.sourceforge.net/config_javadoc.html, in the section for JavadocMethod: Examples, the last example reads:  "" To configure the check for ignoring methods named foo(),foo1(),foo2(), etc.: < module name=""JavadocMethodRegex"">  < property name=""ignoreMethodNamesRegex"" value=""^foo.*$""/> < /module>""  The module name should be ""JavadocMethod"" instead of ""JavadocMethodRegex"".  I'm new with checkstyle, that had me confused for a bit.  greetz Schattensilber","closed","","Schattensilber","2015-08-12T12:05:18Z","2015-09-04T02:05:12Z"
"","1325","Remove usage of deprecated methods from MainTest","In system-rules library in version 1.10.0 `StandardErrorStreamLog` and `StandardOutputStreamLog` have been replaced by `SystemErrRule` and `SystemOutRule`. These occurrences need to be replaced in `MainTest`.","closed","approved,","mkordas","2015-07-08T21:29:30Z","2015-07-09T01:54:59Z"
"","1854","New option in TrailingCommentCheck","In some places trailing comments are useful. For example:  ``` java @Override public int[] getAcceptableTokens() {     return new int[] {         TokenTypes.ASSIGN,            // '='         TokenTypes.DIV_ASSIGN,        // ""/=""         TokenTypes.PLUS_ASSIGN,       // ""+=""         TokenTypes.MINUS_ASSIGN,      //""-=""         TokenTypes.STAR_ASSIGN,       // ""*=""         TokenTypes.MOD_ASSIGN,        // ""%=""         TokenTypes.SR_ASSIGN,         // "">>=""         TokenTypes.BSR_ASSIGN,        // "">>>=""         TokenTypes.SL_ASSIGN,         // ""<<=""         TokenTypes.BXOR_ASSIGN,       // ""^=""         TokenTypes.BOR_ASSIGN,        // ""|=""         TokenTypes.BAND_ASSIGN,       // ""&=""     }; } ```  Detailed description of the problem: http://roman-ivanov.blogspot.com/2013/10/trailing-comment-check-false-positives.html  Need to investigate cases when trailing comments are required and update TrailingCommentCheck to have an option which suppresses violations on them. ##","open","approved,","baratali","2015-08-22T13:55:42Z","2017-02-20T21:10:50Z"
"","1398","Inconsistent behavior of ImportOrderCheck","In some cases ImportOrderCheck requires line separator between static imports, in some cases not. Checkstyle 6.8 Config:  ``` xml                            ```  ``` java import static com.puppycrawl.tools.checkstyle.ImportOrderCheck.MSG_SEPARATION; import static javax.lang.model.element.ElementKind.CONSTRUCTOR; import static org.androidannotations.helper.ModelConstants.generationSuffix; import static net.sourceforge.pmd.lang.ast.Node;  // /test.java:5: warning: 'org.androidannotations.helper.ModelConstants.generationSuffix' should be separated from previous imports. // /test.java:6: warning: 'net.sourceforge.pmd.lang.ast.Node' should be separated from previous imports.  import java.util.Set;  import org.*;  import com.puppycrawl.tools.checkstyle.ImportOrderCheck; ```  ``` java import static com.puppycrawl.tools.checkstyle.ImportOrderCheck.MSG_SEPARATION; import static javax.lang.model.element.ElementKind.CONSTRUCTOR; import static net.sourceforge.pmd.lang.ast.Node;  // /test.java:6: warning: 'net.sourceforge.pmd.lang.ast.Node' should be separated from previous imports.  import java.util.Set;  import org.*;  import com.puppycrawl.tools.checkstyle.ImportOrderCheck; ```  ``` java import static com.puppycrawl.tools.checkstyle.ImportOrderCheck.MSG_SEPARATION; import static javax.lang.model.element.ElementKind.CONSTRUCTOR; // no violations import java.util.Set;  import org.*;  import com.puppycrawl.tools.checkstyle.ImportOrderCheck; ```  ``` java import static com.puppycrawl.tools.checkstyle.ImportOrderCheck.MSG_SEPARATION; import static org.androidannotations.helper.ModelConstants.generationSuffix; // no violations import java.util.Set;  import org.*;  import com.puppycrawl.tools.checkstyle.ImportOrderCheck; ```  ``` java import static com.puppycrawl.tools.checkstyle.ImportOrderCheck.MSG_SEPARATION; import static net.sourceforge.pmd.lang.ast.Node; // no violations import java.util.Set;  import org.*;  import com.puppycrawl.tools.checkstyle.ImportOrderCheck; ```  ``` java import static javax.lang.model.element.ElementKind.CONSTRUCTOR; import static net.sourceforge.pmd.lang.ast.Node;  // /test.java:6: warning: 'net.sourceforge.pmd.lang.ast.Node' should be separated from previous imports.  import java.util.Set;  import org.*;  import com.puppycrawl.tools.checkstyle.ImportOrderCheck; ```","closed","approved,","ivanov-alex","2015-07-17T07:00:38Z","2015-07-21T04:12:30Z"
"","1292","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.header","In pom we have:  ```           .*.checks.header.AbstractHeaderCheck8585           .*.checks.header.HeaderCheck1845           .*.checks.header.RegexpHeaderCheck8793 ```  after tests improvement(to be 100% cevered) that lines have to be removed from pom.xml.","closed","approved,","sabaka","2015-07-05T17:59:57Z","2015-09-16T00:28:25Z"
"","1291","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.blocks","In pom we have:  ```           .*.checks.blocks.AvoidNestedBlocksCheck10090           .*.checks.blocks.EmptyBlockCheck88100           .*.checks.blocks.EmptyCatchBlockCheck9698           .*.checks.blocks.LeftCurlyCheck8794           .*.checks.blocks.NeedBracesCheck8097           .*.checks.blocks.RightCurlyCheck8895 ```  after tests improvement(to be 100% cevered) that lines have to be removed from pom.xml.","closed","approved,","sabaka","2015-07-05T17:58:11Z","2015-07-29T06:51:15Z"
"","1091","Use EqualsVerifier to test SuppressWithNearbyCommentFilter. #1088","In order to pass the test `equals` method must reference only final fields. Otherwise, if the value of this field changes, the same object may not be equal to itself at two different points in time.","closed","","mkordas","2015-05-17T16:34:18Z","2015-05-17T18:15:45Z"
"","1151","Improvemets to Checkstyle 6.7 release notes","In https://github.com/checkstyle/checkstyle/commit/034c2fa27fb47f1f8498d2d6c3c943dd23b19b27 I see a couple of things that could be improved: - Move _Breaking backward compatibility_ section below _New_ and _Bug fixes_ as it doesn't matter for normal user - Throw**s**Count, not ThrowCount - Instead of using names like _NewlineAtEndOfFileCheck_ IMO it's better to write _NewlineAtEndOfFile check_ - name without _Check_ is easier to google and it is what users use in configs - Provide the links to the modified checks, to quickly check their (possibly changed) docs - For new features provide better information what exactly was added - as a quick guide for users what they can change in configs - There are unnecessary spaces before dot at a few places like in `removing abandoned test input files . Author:  Ivan Sopov` or `Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.sizes  . Author:  MEZk` ##### Sample:  Current:  > New option value for NewlineAtEndOfFileCheck, LineSeparatorOption.LF_CR_CRLF. Author:  Martin Steiger #1045  Proposed:  > New ""crlf"" option for _lineSeparator_ property in [NewlineAtEndOfFile](http://checkstyle.sourceforge.net/config_misc.html#NewlineAtEndOfFile) check. Author: Martin Steiger #1045","closed","approved,","mkordas","2015-05-29T22:00:27Z","2015-05-31T04:43:41Z"
"","1469","CustomImportOrder not always reports lexical order violations","In example below I run ImportOrder and CustomImportOrder on one file. It has 2 imports in a wrong lexical order. ImportOrder fires 2 violation (message starts with ""Wrong order""), while CustomImportOrder fires only one (message starts with ""Wrong lexicographical order"").  CustomImportOrder should also fire violation for ""com.*""  Configuration:  ``` xml                                                                                                                            ```  Source file  ``` java package java.util.concurrent; import static java.awt.Button.ABORT; import static javax.swing.WindowConstants.*; import static java.io.File.createTempFile; import java.util.*; import java.util.StringTokenizer; import com.puppycrawl.tools.*; import com.*; import org.apache.*;  public class InputCustomImportOrder_NoSeparator { } ```  Output  ``` Starting audit... InputCustomImportOrder_NoSeparator.java:4: Wrong lexicographical order for 'java.io.File.createTempFile' import. InputCustomImportOrder_NoSeparator.java:4: Wrong order for 'java.io.File.createTempFile' import. InputCustomImportOrder_NoSeparator.java:8: Wrong order for 'com.*' import. Audit done. Checkstyle ends with 3 errors. ```","closed","approved,","ivanov-alex","2015-07-25T15:06:26Z","2015-08-29T06:33:38Z"
"","1752","Refactoring of CommentsIndentationCheck, issue #333","In accordance with the [request](https://github.com/checkstyle/checkstyle/pull/1740).  [REPORTS](http://mezk.github.io)","closed","","MEZk","2015-08-18T19:42:54Z","2015-08-20T15:03:57Z"
"","1365","Remove non-testable reflection code from JavadocUtils. #1308","In `JavadocUtils` any reflection-related exception would mean programmer's mistake with no recovery. In such cases checked exceptions are useless, so new method in utils is provided to wrap any checked exceptions into unchecked ones.","closed","","mkordas","2015-07-12T21:29:50Z","2015-07-14T00:44:48Z"
"","1324","Remove non-testable reflection code from HandlerFactory. #1270","In `HandlerFactory` any reflection-related exception would mean programmer's mistake with no recovery. In such cases checked exceptions are useless, so new methods in utils are provided to wrap any checked exceptions into unchecked ones.","closed","","mkordas","2015-07-08T20:24:49Z","2015-07-09T01:32:44Z"
"","1309","Improved UT coverage for CustomImportOrder #1128","Improved coverage. Few minor changes were introduced: removed try-catch where they are not required. Reports are prepared to justify these changes: [BEFORE](http://ivanov-alex.github.io/target_CustomImportOrder_BEFORE/site/checkstyle.html) [AFTER](http://ivanov-alex.github.io/target_CustomImportOrder_AFTER/site/checkstyle.html) **reports are identical**  Coverage will be 100% after #1263.","closed","","ivanov-alex","2015-07-07T21:33:49Z","2015-07-09T10:16:17Z"
"","1831","Issue #1566: fixed import order","ImportOrder violation fixed","closed","","rdiachenko","2015-08-20T21:27:10Z","2015-08-31T21:37:33Z"
"","1448","Add ImportOrder check to default configuration on Checkstyle","ImportOrder check is not used in default configuration on Checkstyle. It should be added.  We should also try to minimize amount of conflicts with default configurations of formatters in most common IDEs (Eclipse, IDEA, NetBeans) or advise how formatter settings should be configured to minimize (optimally avoid) conflicts with ImportOrder.","closed","approved,","ivanov-alex","2015-07-22T07:04:55Z","2015-07-25T05:29:59Z"
"","1489","Parse errors can result in a NPE in the SuppressWarningsHolder","If you have a rules file with a suppression filter configured and you attempt to parse a syntactically invalid file then a NPE will be thrown from the `SuppressWarningsHolder.isSuppressed` method as the `ENTRIES` ThreadLocal has never been populated.  This occurs as the parse exception in `TreeWalker.processFiltered` means that the `walk` methods are never called, and hence the `SuppressWarningsHolder.beginTree` method is never invoked. Then when `Checker.process` invokes `fireErrors` we hit the `isSuppressed` method and it all goes tits up.  ``` Caused by: java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder.isSuppressed(SuppressWarningsHolder.java:200)     at com.puppycrawl.tools.checkstyle.filters.SuppressWarningsFilter.accept(SuppressWarningsFilter.java:38)     at com.puppycrawl.tools.checkstyle.api.FilterSet.accept(FilterSet.java:88)     at com.puppycrawl.tools.checkstyle.Checker.fireErrors(Checker.java:358)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:276) ```  This isn't visible to users in the command line tool as the tool calls `System.exit` in the finally block, thus suppressing the exception. And as the parse exception has already been logged the user sees a sane output. However, it's a bit painful for other users of the `Checker.process` method, such as plugins (this [CheckStyle-IDEA](https://github.com/jshiell/checkstyle-idea/issues/127) issue led me to this problem).  I'm able to reproduce this using any rules file with a `SuppressionFilter` and a syntactically incorrect file, such as this example contributed by @twbecker:  ``` public class Test {     public static void main(String[] args) {         private long foo;         protected int bar = 1;         private int     }      public static class Inner {         private Long baz;     } } ```  Thanks :smile:","closed","","jshiell","2015-07-27T21:23:06Z","2015-09-02T05:10:25Z"
"","1553","Coverage has been increased to 100% in MultilineDetector. Issue #1010","identical reports: http://sabaka.github.io/MultilineDetector/master/checkstyle.html http://sabaka.github.io/MultilineDetector/checkstyle.html","closed","","sabaka","2015-08-04T22:29:54Z","2015-09-03T23:34:35Z"
"","1103","remove dead code from MutableExceptionCheck","IDENT of an EXTENDS_CLAUSE can't be null while running the check, as the code is incompilable in this case https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java#L155","closed","approved,","Vladlis","2015-05-19T01:16:38Z","2015-05-19T05:36:19Z"
"","1471","Remove from dependecies deprecated jar commons-beanutils-core.jar","IDE can not find sources of that library, there is no source in maven http://central.maven.org/maven2/commons-beanutils/commons-beanutils-core/1.8.3/  Reason: http://commons.apache.org/proper/commons-beanutils/#BeanUtils_Core_And_Modules  ```  The 1.7.x and 1.8.x releases of BeanUtils have distributed three jars:      commons-beanutils.jar - contains everything     commons-beanutils-core.jar - excludes Bean Collections classes     commons-beanutils-bean-collections.jar - only Bean Collections classes  The main commons-beanutils.jar has an optional dependency on Commons Collections  Version 1.9.0 reverts this split for reasons outlined at BEANUTILS-379. There is now only one jar for the BeanUtils library.  ```  https://issues.apache.org/jira/browse/BEANUTILS-379 `BEANUTILS-379 Remove copied Collections classes and drop creation of commons-beanutils-core.jar and commons-beanutils-bean-collections.jar  (also fixes BEANUTILS-378)`","closed","approved,","romani","2015-07-25T19:18:09Z","2015-07-25T19:21:42Z"
"","1224","NullPointerException at java.util.regex.Pattern from com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions.getPattern","I've hit the NPE below, funnily enough when using the Eclipse Checkstyle Plugin (v6.5.0 installed from http://eclipse-cs.sf.net/update today) on checkstyle's own code (this repository, not the Eclipse plug-in), and activating it's very own https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml !! ;-)  This NPE error clearly has nothing much to do with the Eclipse Plugin but comes from core CS.  I'll see if I still have the energy to submit a PR about this, or if I'll have to leave this one to you...  PS: Do you know if it's possible to easily update the core CS JAR used by the Eclipse Plugin?  ``` Error Thu Jun 18 19:43:03 CEST 2015 Errors running builder 'Checkstyle Builder' on project 'checkstyle'.  java.lang.NullPointerException     at java.util.regex.Pattern.(Pattern.java:1350)     at java.util.regex.Pattern.compile(Pattern.java:1054)     at com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions.getPattern(DetectorOptions.java:200)     at com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.processLines(MultilineDetector.java:70)     at com.puppycrawl.tools.checkstyle.checks.regexp.RegexpMultilineCheck.processFiltered(RegexpMultilineCheck.java:51)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:270)     at net.sf.eclipsecs.core.builder.Auditor.runAudit(Auditor.java:159)     at net.sf.eclipsecs.core.builder.CheckstyleBuilder.handleBuildSelection(CheckstyleBuilder.java:300)     at net.sf.eclipsecs.core.builder.CheckstyleBuilder.build(CheckstyleBuilder.java:171)     at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:734)     at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:205)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:245)     at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:300)     at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)     at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:303)     at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:359)     at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:382)     at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:144)     at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:235)     at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55) ```","closed","approved,","vorburger","2015-06-18T20:06:35Z","2015-07-01T03:41:10Z"
"","1691","Issue #1243: Useless Class variables","I'm not sure why these variable are defined. Maybe for loading a class, however ConfigurationBuilder does it by itself, so unit tests don't fail.","closed","","baratali","2015-08-14T10:05:06Z","2015-08-22T09:27:04Z"
"","1011","CovariantEqualsCheck doesn't include Enums","I'm not sure if this is a true issue, but I noticed the CovariantEqualsCheck doesn't check Enumeration classes and doesn't accept it as an acceptable token. Enums can have their own equal methods and, to me, it seems like the issue this check looks for can still happen for enumerations. If this isn't an issue and is on purpose, then what is the reason for ignoring enumerations?","closed","approved,","rnveach","2015-04-29T02:14:38Z","2015-05-01T00:43:23Z"
"","1141","Indentation: Lambda in Enum indentation error loop","I'm creating an enum with reusable pieces of code and the indentation is giving me trouble.  We have Checkstyle configured to run as a git commit hook (as well as in out IDE). Here is an example code block for what I am trying to do:  ``` package org.kapunga.weather;  /** * @author kapunga */ public enum FloatMapper {     IDENTITY(""identity"", o -> o.floatValue()),     CEL_TO_FAREN(""celToFaren"", t -> {         float f = t.floatValue();         float i = f * (float) 1.8;          return i + 32;     }),     FAREN_TO_CEL(""farenToCel"", t -> {         float f = t.floatValue();         float i = f - 32;          return i / (float) 1.8;     });      public final String name;     public final FloatMappingFunction func;      FloatMapper(String name, FloatMappingFunction func) {         this.name = name;         this.func = func;     }      @FunctionalInterface     public interface FloatMappingFunction {         float map(Number n);     } } ```  When I try and commit this, I get checkstyle warnings:  > thor@ma-lt-thor ~/work/r9/trunk (client)$ git commit project/org/kapunga/weather/FloatMapper.java > Java changes found, running Checkstyle. > Checking source files for tabs. > project/org/kapunga/weather/FloatMapper.java:9: warning: 'member def type' have incorrect indentation level 8, expected level should be 4. > project/org/kapunga/weather/FloatMapper.java:10: warning: 'member def type' have incorrect indentation level 8, expected level should be 4. > project/org/kapunga/weather/FloatMapper.java:15: warning: 'member def type' have incorrect indentation level 8, expected level should be 4. > project/org/kapunga/weather/FloatMapper.java:16: warning: 'member def type' have incorrect indentation level 8, expected level should be 4. > Commit aborted.  When I fix this to the following (Which I would argue is less readable):  ``` package org.kapunga.weather;  /** * @author kapunga */ public enum FloatMapper {     IDENTITY(""identity"", o -> o.floatValue()),     CEL_TO_FAREN(""celToFaren"", t -> {     float f = t.floatValue();     float i = f * (float) 1.8;      return i + 32;     }),     FAREN_TO_CEL(""farenToCel"", t -> {     float f = t.floatValue();     float i = f - 32;      return i / (float) 1.8;     });      public final String name;     public final FloatMappingFunction func;      FloatMapper(String name, FloatMappingFunction func) {         this.name = name;         this.func = func;     }      @FunctionalInterface     public interface FloatMappingFunction {         float map(Number n);     } } ```  I get errors as well:  > thor@ma-lt-thor ~/work/r9/trunk (client)$ git commit project/org/kapunga/weather/FloatMapper.java > Java changes found, running Checkstyle. > Checking source files for tabs. > project/org/kapunga/weather/FloatMapper.java:9: warning: 'block' child have incorrect indentation level 4, expected level should be 8. > project/org/kapunga/weather/FloatMapper.java:10: warning: 'block' child have incorrect indentation level 4, expected level should be 8. > project/org/kapunga/weather/FloatMapper.java:12: warning: 'block' child have incorrect indentation level 4, expected level should be 8. > project/org/kapunga/weather/FloatMapper.java:15: warning: 'block' child have incorrect indentation level 4, expected level should be 8. > project/org/kapunga/weather/FloatMapper.java:16: warning: 'block' child have incorrect indentation level 4, expected level should be 8. > project/org/kapunga/weather/FloatMapper.java:18: warning: 'block' child have incorrect indentation level 4, expected level should be 8. > Commit aborted.  So as you can see, I can't get this to agree on a correct indentation level.  I think the first example should be correct, the second example makes it hard to see where each enum begins.  When I do something like this:  ``` FloatMappingFunction celToFaren = t -> {     float f = t.floatValue();     float i = f * (float) 1.8;      return i + 32; }; ```  I have no checkstyle errors. ##","closed","indentation,","kapunga","2015-05-27T19:32:45Z","2021-12-24T07:20:51Z"
"","1150","extention for SingleJavadocLine, #1063","I'll provide a tester report later. So far, I've successfully tested the Check on checkstyle, sevntu-checkstyle and guava projects.","closed","","Vladlis","2015-05-29T00:26:59Z","2017-02-14T07:25:16Z"
"","1110","TypeNameCheck doesn't work for Enum Constants","I want to prevent that Enums contain special characters like umlauts.  While check an enum class name like WillNötWörk will result in errors, an enum constant like WILL_NÖT_WÖRK is ignored.  I tried with the Maven Checkstyle plugin 2.15, which uses 6.1.1 and also tried overriding its version to the latest Checkstyle 6.6. ##","closed","","cristalp","2015-05-20T08:32:30Z","2016-11-11T00:08:21Z"
"","1377","EqualsAvoidNullCheck ignores left side variables with dot in it","I noticed EqualsAvoidNullCheck will not print errors on lines were the left side of the equals method has a ""dot"" in the variable like ""this.field"" or ""MyClass.staticVariable"". I don't see a reason these can't be swapped so the literals are on the left side and why the checker shouldn't flag them as errors. The source says it ""cannot be improved"" but I couldn't find any instance were the 2 couldn't be swapped.  Example Code:  ``` package test;  public class TestClass3 {     public static String staticTest = """";     public String fieldTest = """";      public void test() {         String variable = """";          if (variable.equals(""123""))             ;          if (TestClass3.staticTest.equals(""123""))             ;          if (this.fieldTest.equals(""123""))             ;     } } ```  Check file:  ```                                      ```  checkstyle output:  ``` Starting audit... \TestClass3.java:10:36: String literal expressions should be on the left side of an equals comparison. Audit done. Checkstyle ends with 1 errors. ```  It only complains about the first if statement, while the other 2 go unnoticed. There is also nothing preventing them from being changed, without causing, issues to: ""123"".equals(outter.inner)  Source Involved: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java#L165 https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java#L173","closed","approved,","rnveach","2015-07-14T15:09:31Z","2015-08-28T13:53:05Z"
"","1878","Incorrect handling of Javadoc for generic type","I have a generic type P in my class, like this:  ``` /**  * @param  The type of p  */ public class Thing { } ```  Checkstyle gives me a warning that I have to document my generic type (I think it's parsing <P> as an HTML paragraph)","closed","","Eijsinkdavid","2015-08-24T07:37:26Z","2015-08-27T13:17:46Z"
"","1020","Standard Package wrong RegExp for CustomImportOrderCheck","I had an import from another utility with the naming ""com.rveach.javaconverter"" and CustomImportOrderCheck was flagging it in the wrong location as needed to be in ""STANDARD_JAVA_PACKAGE"". This is definitely not a standard java package.  The root of the problem is the default value for ""standardPackageRegExp"". https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java#L223  It should be something like ""^(java\.|javax\.).*"" to ensure only the first section of the import is ""java"", not that ""java"" appears anywhere in the statement.","closed","approved,","rnveach","2015-04-29T16:33:39Z","2015-05-01T00:28:19Z"
"","1237","OneStatementPerLine on multiple field initialization","I don't understand the behavior of OneStatementPerLine on multiple field initialization.  ``` java   /**    * This is detected illegal    */   private int     aField = 0,     anotherField = 0;    /**    * This is detected legal    */   private int     aMember = 0,     anotherMember = 0     ; ```  Is it the expected behavior?","closed","high demand,","guillaumecle","2015-06-23T17:41:07Z","2015-07-11T19:25:45Z"
"","1803","Issue #1566: Fix for 'Don't use trailing comments' (partial)","I don't think these violations have to be fixed: 1) http://rdiachenko.github.io/site-src/xref/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.html#L114 2) http://rdiachenko.github.io/site-src/xref/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.html#L117  Removing those comments or moving them to the new line makes code less readable.","closed","","baratali","2015-08-20T17:11:55Z","2015-08-22T09:26:27Z"
"","1004","JavaDoc: UnusedImports check fails for inline @link tags in @return JavaDoc comments","I don't think https://github.com/checkstyle/checkstyle/issues/88 is fixed.  Given:  ``` import com.foo.DateRangeValidator; import com.foo.PaymentValidator;  /**  * @return {@link PaymentValidator} or {@link DateRangeValidator}  */ ```  Checkstyle complains:  ``` (imports) UnusedImports: Unused import - com.foo.DateRangeValidator. (imports) UnusedImports: Unused import - com.foo.PaymentValidator. ``` ##","closed","javadoc,","cowwoc","2015-04-27T21:56:03Z","2017-07-11T20:16:49Z"
"","1681","Checkstyle reports errors in comments","I don't know why this is even a thing, but no static analysis tool should check things in comments.   These lines:  ``` //            List customer = getCustomer(remoteIp);  //            aSystem.out.println(spyFields(customer.get(0))); //            if (customer.size() > 0) //                aSystem.out.println(customer.get(0).getCustomerFullname());   //            return buildFromDtos() //        } catch (IllegalAccessException e) { //            e.aprintStackTrace(); ```  Give me errors, even though I've made the `system` and `printStackTrace` calls **invalid** by adding a letter in front of them. And no I'm not going to switch to using a logger just to try out a few things that I want to see very obviously in the output. I don't want a logger screwing with it.   I'm able to get around the error by adding spaces between the method calls `System. out. println`","closed","","snowe2010","2015-08-12T23:48:17Z","2015-09-01T15:57:34Z"
"","1269","Make Eclipse / m2e plugins generate valid projects","I create a new PR as requested on #1219. This is WIP, and is still subject to [MECLIPSE-735](https://issues.apache.org/jira/browse/MECLIPSE-735) being resolved in order to be able to add `` to the classpathentry in `.classpath`. Analogous changes for the maven-eclipse-plugin would be necessary.  The changes to the antlr configuration / grammar files are needded so that only one sourcepath entry is created for `${project.build.directory}/generated-sources/antlr/`, the final result is the same though.  antlr / antlr4 are both automatically executed by either the eclipse plugin for maven or the maven plugin for eclipse since they do call the `generate-sources` build phase.","closed","","jsotuyod","2015-07-01T18:14:58Z","2015-07-03T01:18:28Z"
"","1279","Change default value of property ""format"" to ""^Abstract.*$"" in AbstractClassNameCheck","I can not see any specific reason why class name with pattern ""^.*Factory$"" has to be defined Abstract. Nobody force Factory named classes to be Abstract according to spring sources.  If anyone can find reason for why Factory named classes should be abstract by default, most welcome to post evidence for the same.","closed","approved,","Bhavik3","2015-07-04T04:34:23Z","2015-07-05T19:01:01Z"
"","1395","FallThroughCheck fails on if with no else","I am using checkstyle 6.8.1.  Code Example:  ``` package test;  public class TestClass3 {     enum Test {         A, B, C     }      public static void test() {         Test test = Test.A;         int variable = 0;          switch (test) {         case A:             break;         case B:             if (variable == 1) {                 // some work                 break;             }         case C:             break;         }     } } ```  Config:  ```                                                            ```  Checkstyle Output:  ``` Starting audit... Audit done. ```  As you can see checkstyle reports no errors, but if you look closely at case B, it does have a possibility for a fall through when the if statement is false. The issue with checkstyle's source is that it is only looking at the if statement and that it has a break. Since there is no else written, it skips over the possibility of going anywhere but into the if statement. Source: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java#L231","closed","approved,","rnveach","2015-07-16T14:56:25Z","2015-07-20T17:03:02Z"
"","1367","SuperCloneCheck reports error for native method","I am using checkstyle 6.7 and SuperCloneCheck is reporting an error for a method that doesn't call it's super. The reason this error is wrongly reported is because the method is defined as native, and therefore has no possible java defined implementation. This check should overlook native methods as that is outside the scope of the static checks.  Example:  ``` public class Test {      public native Test clone(); } ```  Checkstyle 6.7 output: Test.java:2:5: Method 'clone' should call 'super.clone'.","closed","approved,","rnveach","2015-07-13T17:19:53Z","2015-07-20T17:04:48Z"
"","1389","Fix BaseCheckTestSupport.verify fails on Windows, #1388","I am not sure this is the best approach, we could check it with regex for example. I am open to any suggestions.","closed","","WonderCsabo","2015-07-15T18:45:59Z","2015-07-17T06:43:39Z"
"","1804","Java 8 supported checks?","I am looking around for Checkstyle checks that strictly enforce Java-8 syntax. Are there any that be configured to force the use of streams or lambdas?","closed","","mmoayyed","2015-08-20T18:42:37Z","2016-03-05T12:55:42Z"
"","1369","Option to do not separete static imports","I already saw #12 which tries to fit CS for Eclipse's default import formatter. But there is one difference: Eclipse do not adds blank lines between groups in static imports, but CS expect to do so. I have this configuration, which should mimic Eclipse:  ``` xml                            ```  However, it adds an error to the last import, which is properly formatted by Eclipse:  ``` java import static com.sun.codemodel.JExpr.invoke; import static com.sun.codemodel.JMod.PRIVATE; import static com.sun.codemodel.JMod.PUBLIC; import static com.sun.codemodel.JMod.STATIC; import static javax.lang.model.element.ElementKind.CONSTRUCTOR; import static org.androidannotations.helper.ModelConstants.generationSuffix; ```  `'org.androidannotations.helper.ModelConstants.generationSuffix' should be separated from previous imports.`","closed","approved,","WonderCsabo","2015-07-13T21:37:29Z","2015-09-12T14:10:52Z"
"","1217","Use forbiddenapis static code analizer as maven plugin","https://github.com/policeman-tools/forbidden-apis  New plugin to build phase:  ```            de.thetaphi       forbiddenapis       1.8                ${java.version}                  true                  false                               jdk-unsafe           jdk-deprecated                                                        check             testCheck                                  ```  Result is   ``` [INFO] --- forbiddenapis:1.8:check (default) @ checkstyle --- [INFO] Scanning for classes to check... [INFO] Reading bundled API signatures: jdk-unsafe [INFO] Reading bundled API signatures: jdk-deprecated [INFO] Loading classes to check... [INFO] Scanning for API signatures and dependencies... [ERROR] Forbidden method invocation: java.text.MessageFormat#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.api.LocalizedMessage (LocalizedMessage.java:254) [ERROR] Forbidden method invocation: java.text.MessageFormat#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.api.LocalizedMessage (LocalizedMessage.java:260) [ERROR] Forbidden method invocation: java.text.MessageFormat#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.api.LocalizedMessage (LocalizedMessage.java:275) [ERROR] Forbidden method invocation: java.text.MessageFormat#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaLexer (GeneratedJavaLexer.java:1675) [ERROR] Forbidden method invocation: java.text.MessageFormat#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaLexer (GeneratedJavaLexer.java:1727) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.TreeWalker (TreeWalker.java:202) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.TreeWalker (TreeWalker.java:214) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.TreeWalker (TreeWalker.java:300) [ERROR] Forbidden method invocation: java.lang.String#toLowerCase() [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser (JavadocParser.java:187) [ERROR] Forbidden method invocation: java.lang.String#toLowerCase() [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser (JavadocParser.java:188) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.Main (Main.java:118) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.Main (Main.java:118) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.Main (Main.java:118) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.Main (Main.java:118) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.Main (Main.java:152) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.Main (Main.java:159) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.Main (Main.java:168) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.Main (Main.java:176) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.Main (Main.java:275) [ERROR] Forbidden method invocation: java.lang.String#format(java.lang.String,java.lang.Object[]) [Uses default locale] [ERROR]   in com.puppycrawl.tools.checkstyle.Main (Main.java:373) [ERROR] Scanned 475 (and 542 related) class file(s) for forbidden API invocations (in 0.83s), 20 error(s).  ```  FYI:  https://github.com/policeman-tools/forbidden-apis/wiki/BundledSignatures , jdk-system-out  can not be used as it give false-positives in Main class that has to use system out.","closed","approved,","romani","2015-06-16T20:53:58Z","2015-10-14T03:04:15Z"
"","1267","Checking existance of config file before processing target file.","https://github.com/checkstyle/checkstyle/commit/3004b4d8810fae5956864d1493ea94f183b9442c that commit was reverted, please review #1265.  Write provide integration tests and UTs for Main to avoid such cases in future.","closed","approved,","romani","2015-07-01T03:09:40Z","2015-11-24T23:21:44Z"
"","1144","refactoring to Main.java accounrding to ThrowCountCheck","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Main.java#L208  ThrowCountCheck limit is 2.  ```     private static int runCheckstyle(CliOptions cliOptions)             throws CheckstyleException, UnsupportedEncodingException, FileNotFoundException { ```  please try to make it   ```     private static int runCheckstyle(CliOptions cliOptions)             throws CheckstyleException { ```  to clearly show that from Checkstyle execution user will return only CheckstyleException.","closed","approved,","romani","2015-05-28T00:45:02Z","2016-09-08T13:10:16Z"
"","1108","rename CheckStyleTask to CheckstyleAntTask","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java  Class has to be moved to subpackage  ""ant"" to clearly show that it is not past of library.  As we host Ant extension, we need to rename this class to clealy state that is not related to library in pure meaning of term.","closed","approved,","romani","2015-05-19T19:42:22Z","2015-10-16T20:35:39Z"
"","1510","Investigate UTs failure to MainTest on Windows","https://ci.appveyor.com/project/Checkstyle/checkstyle/build/285/job/es7cf2tftn4okjby#L664  https://travis-ci.org/checkstyle/checkstyle/jobs/73144166#L739","closed","high demand,","romani","2015-07-29T07:46:01Z","2015-07-30T03:29:02Z"
"","1496","Investigate TreeWalkerTest.testDestroyNonExistingCache failure on Windows","https://ci.appveyor.com/project/checkstyle/checkstyle/build/247/job/l23gkyt4msf9liv5#L601","closed","approved,","romani","2015-07-28T20:15:08Z","2015-07-30T17:15:06Z"
"","1571","move all dtd schemas to sourceforge site","http://www.puppycrawl.com/dtds/configuration_1_3.dtd and others dtds from configs need to be hosted at sourceforge site all configs need to be updated  As a separate commit: Additionally investigate ability to reuse dtd from local to avoid numerous build failures due to internet connection problems:  > The plugin doesn't work in offline mode. It always tries to resolve external resources and fails, if the network is not available ? >     You've got to download the resources in question once and store them as part of the project. A catalog file will replace the external resource with your local copy. See this example for details.  http://www.mojohaus.org/xml-maven-plugin/examples/catalog.html   Location of DTD - https://github.com/checkstyle/checkstyle/tree/master/src/main/resources/com/puppycrawl/tools/checkstyle  DTDs to move to ""http://checkstyle.sourceforge.net/dtds/........"": Current:  ```  ```  Should be:  ```  ```  Current:  ```  ```  Should be:  ```  ```  Current:  ```  ```  Should be:  ```  ```  Current:  ```  ```  Should be:  ```  ```  Attention: all version of config should be uploaded to sourceforge site. There should be no reference to ""puppycrawl"" at any of your sources/configs/xdoc/.... . ##","closed","for-members,","romani","2015-08-07T03:45:51Z","2017-07-10T23:54:42Z"
"","1168","Add virtual machine crash log files to .gitingore","http://www.java.com/en/download/help/error_hotspot.xml  These files can safely be ignored, as there is never need to commit crash logs.","closed","","mkordas","2015-06-04T18:41:57Z","2015-06-06T22:44:41Z"
"","1693","Issue #1243: 'A generic array is created for varargs parameter' suppressed","http://stackoverflow.com/questions/1445233/is-it-possible-to-solve-the-a-generic-array-of-t-is-created-for-a-varargs-param","closed","","baratali","2015-08-14T12:26:16Z","2015-08-22T09:26:51Z"
"","1319","Restore checkstyle validation on nemo.sonarqube.org","http://nemo.sonarqube.org/dashboard/index?id=com.puppycrawl.tools%3Acheckstyle Last analysis was done at - Version 6.8-SNAPSHOT / June 2 2015 9:51 PM   Discussion with Sonar team - https://groups.google.com/forum/#!topic/sonarqube/bYanojEy9LI  Problem is that checkstyle project is failed to build on java7 by sonar team, their command :   ``` mvn clean install cobertura:cobertura -Dcobertura.report.format=xml -Dmaven.test.failure.ignore=true -V -Dcheckstyle.skip=true -Dpmd.skip=true -Dcobertura.skip=true ```  output:  ``` [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2:37.456s [INFO] Finished at: Wed Jul 01 06:49:14 CEST 2015 [INFO] Final Memory: 44M/495M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.18.1:test (default-test) on project checkstyle: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.18.1:test failed: There was an error in the forked process [ERROR] java.lang.NoClassDefFoundError: com/puppycrawl/tools/checkstyle/api/CheckstyleException [ERROR] at java.lang.Class.getDeclaredMethods0(Native Method) [ERROR] at java.lang.Class.privateGetDeclaredMethods(Class.java:2570) [ERROR] at java.lang.Class.getMethod0(Class.java:2813) [ERROR] at java.lang.Class.getMethod(Class.java:1663) [ERROR] at org.apache.maven.surefire.util.ReflectionUtils.tryGetMethod(ReflectionUtils.java:57) [ERROR] at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.isSuiteOnly(JUnit3TestChecker.java:64) [ERROR] at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.isValidJUnit3Test(JUnit3TestChecker.java:59) [ERROR] at org.apache.maven.surefire.common.junit3.JUnit3TestChecker.accept(JUnit3TestChecker.java:54) [ERROR] at org.apache.maven.surefire.common.junit4.JUnit4TestChecker.accept(JUnit4TestChecker.java:52) [ERROR] at org.apache.maven.surefire.util.DefaultScanResult.applyFilter(DefaultScanResult.java:97) [ERROR] at org.apache.maven.surefire.junit4.JUnit4Provider.scanClassPath(JUnit4Provider.java:222) [ERROR] at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:107) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155) [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103) [ERROR] Caused by: java.lang.ClassNotFoundException: com.puppycrawl.tools.checkstyle.api.CheckstyleException [ERROR] at java.net.URLClassLoader$1.run(URLClassLoader.java:366) [ERROR] at java.net.URLClassLoader$1.run(URLClassLoader.java:355) [ERROR] at java.security.AccessController.doPrivileged(Native Method) [ERROR] at java.net.URLClassLoader.findClass(URLClassLoader.java:354) [ERROR] at java.lang.ClassLoader.loadClass(ClassLoader.java:425) [ERROR] at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) [ERROR] at java.lang.ClassLoader.loadClass(ClassLoader.java:358) [ERROR] ... 15 more [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException ```  on java7 cobertura is failing to path ""check"":  ``` [INFO] <<< cobertura-maven-plugin:2.7:check (default) @ checkstyle <<< [INFO] [INFO] --- cobertura-maven-plugin:2.7:check (default) @ checkstyle --- [INFO] Cobertura 2.1.1 - GNU GPL License (NO WARRANTY) - See COPYRIGHT file [INFO] Cobertura: Loaded information on 353 classes. [ERROR] com.puppycrawl.tools.checkstyle.filters.SuppressionsLoader failed coverage check. Line coverage rate of 76.9% is below 77.0% [ERROR] com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck failed coverage check. Line coverage rate of 89.6% is below 90.0% [ERROR] com.puppycrawl.tools.checkstyle.checks.ClassResolver failed coverage check. Line coverage rate of 92.9% is below 93.0% [ERROR] com.puppycrawl.tools.checkstyle.api.FileContents failed coverage check. Line coverage rate of 92.8% is below 93.0% [ERROR] com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck failed coverage check. Line coverage rate of 87.9% is below 88.0% [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 3:42.905s [INFO] Finished at: Mon Jul 06 08:12:32 CEST 2015 [INFO] Final Memory: 63M/495M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.codehaus.mojo:cobertura-maven-plugin:2.7:check (default) on project checkstyle: Coverage check failed. See messages above. -> [Help 1] ```","closed","approved,","romani","2015-07-08T04:04:08Z","2015-07-08T14:47:46Z"
"","1162","Change defaults for IllegaToken","http://javahow.net/questions/30562563 http://checkstyle.sourceforge.net/config_coding.html#IllegalToken#IllegalToken  Default token should be ""label"" only - a sign of goto usage, bad practice for all types of projects.","closed","approved,","romani","2015-06-01T03:16:00Z","2015-06-04T16:41:30Z"
"","1005","web site: make link object for each row of table","http://checkstyle.sourceforge.net/google_style.html  we need an ability to share exact mapping from Google rule to Check, so each line need to have an additional column - local link to it, that should be possible to copy and share. We could reuse chain image that we use for content and put it as first column","closed","approved,","romani","2015-04-28T13:19:35Z","2015-09-25T12:48:58Z"
"","1218","NPathComplexity: extend documentation to make clear how it works","http://checkstyle.sourceforge.net/config_metrics.html#NPathComplexity  just make it clear and easy to read for people that first time see that metric.","closed","approved,","romani","2015-06-18T06:28:42Z","2015-06-25T01:04:41Z"
"","1332","JavadocParagraph allows new line before the next paragraph","http://checkstyle.sourceforge.net/config_javadoc.html#JavadocParagraph created base on requirements of http://google.github.io/styleguide/javaguide.html#s7.1.2-javadoc-paragraphs  According to documentation:  > Each paragraph but the first has `` immediately before the first word, with no space after.  I could have `` tag, followed by new line. Text is continued from the next line, so the tag is not ""immediately before the first word""  ``` java /**  * First paragraph.  *   *   * Second paragraph.  */ ```  Also, even spaces are not violated:  ``` java /**  * First paragraph.  *   *  Second paragraph.  */ ```","closed","high demand,","pbaranchikov","2015-07-09T08:37:05Z","2015-07-19T14:20:37Z"
"","1393","IllegalToken description: incorrect description","http://checkstyle.sourceforge.net/config_coding.html#IllegalToken  The description says ""By default labels are prohibited."" but later it describes the default values as ""LITERAL_SWITCH, POST_INC, POST_DEC"". Label is not listed as part of the default values.  This was actually a recent change in commit dd47d21, so just the default values in the documentation have to change.","closed","approved,","rnveach","2015-07-16T01:38:28Z","2015-07-19T17:10:13Z"
"","1142","FinalLocalVariable: Wrong variable reported because of name shadowing","http://checkstyle.sourceforge.net/config_coding.html#FinalLocalVariable  Checkstyle reports that the ""text"" parameter in the ""bar"" method can be final, which is wrong. It should report the ""text"" param in the ""foo"" method instead.  ``` Java class Foo {     public void foo(String text) {         System.out.println(text);          class Bar {             void bar(String text) {                 text = ""xxx"";             }         }     } } ```","closed","high demand,","eekboom","2015-05-27T21:44:46Z","2015-06-18T21:43:41Z"
"","1238","update list of related Tools","http://checkstyle.sourceforge.net/#Related_Tools  make two tables: 1) Active tools 2) Inactive/old tools  All proejcts that are below 5.0 release (http://checkstyle.sourceforge.net/releasenotes.html#Release_5.0), should be considered as old and inactive for sure.  All project that use 6.X version should be sorted to the top.","closed","approved,","romani","2015-06-23T21:43:14Z","2015-10-26T23:41:38Z"
"","1121","setup drone.io CI to run checkstyle-tester project on JDK sources","http://blog.drone.io/ https://github.com/drone/drone/issues/6  Matrix build are released: http://readme.drone.io/build/matrix.html  We need to setup 3-4-N sub-builds(matrix elements) in CI to test JDK sources by checkstyle-tester by groups to let each launch finish in 15min (or level of drone.io). We need to make sure that droid have the same integration with Github to notify us on any failures (ERROR level).  that will let us avoid problems like - https://github.com/checkstyle/checkstyle/pull/1109#issuecomment-104077961 ,   we already did that in Travis, the only missed point is testing over JDK, sources of JDK are huge we need to find a way to split them in chunks and do testing part by part.  note: due to java grammar problem we can not use jdk8-9 , we can parse only jdk7. For details please see all issues with ""ANTLR"" label","closed","approved,","romani","2015-05-23T21:27:36Z","2015-12-16T21:39:22Z"
"","1492","Make Checkstyle GUI editor shows line number,column number and syntax","highlighting, fixes part of #951. I used RSyntaxTextArea (https://github.com/bobbylight/RSyntaxTextArea) as the easiest way to get line numbering in jtextarea, what is more it supports highlighting java syntax. Secondly i added status bar below editor to show which line number,column number caret is targeting.","closed","incomplete,","liscju","2015-07-28T00:30:39Z","2015-10-29T23:26:12Z"
"","1080","NullPointerException with ModifiedControlVariable on 6.6","Hi, I think there's a problem with ModifiedControlVariable in version 6.6. I've narrowed the problem to the following test case:  **Configuration**:  ```                          ```  **Test class**:  ``` /*  * This file is copyright 2002-2015  *  * Blablabla  */ package com.company.whatever.metadata;  import java.io.Serializable;  import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlRootElement;  /**  * Metadata model object.  *   * Refer to {@code metadata.xsd} for XML structure.  */ @XmlRootElement(name = ""metadata"") @XmlAccessorType(XmlAccessType.FIELD) public final class Metadata implements Serializable {      private static final long serialVersionUID = 1L;   } ```  **Testing with 6.5**  ``` PS C:\dev\apps\checkstyle> java -jar .\checkstyle-6.5-all.jar -c Example-checkstyle.xml .\TestClass.java Starting audit... Audit done. ```  **Testing with 6.6**  ``` PS C:\dev\apps\checkstyle> java -jar .\checkstyle-6.6-all.jar -c Example-checkstyle.xml .\TestClass.java May 14, 2015 3:04:11 PM com.puppycrawl.tools.checkstyle.TreeWalker processFiltered SEVERE: NullPointerException occurred during the analysis of file .\TestClass.java . Starting audit... C:\dev\apps\checkstyle\.\TestClass.java:0: Got an exception - null Audit done. Could not execute Checkstyle: Checkstyle ends with 1 errors. com.puppycrawl.tools.checkstyle.api.CheckstyleException: Checkstyle ends with 1 errors.         at com.puppycrawl.tools.checkstyle.Main.processCommandLine(Main.java:160)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:59) usage: java com.puppycrawl.tools.checkstyle.Main [options] -c              file...  -c    Sets the check configuration file to use.  -f    Sets the output format. (plain|xml). Defaults to plain  -o    Sets the output file. Defaults to stdout  -p    Loads the properties file  -v         Print product version and exit ```  **Removing the `name = ""metadata""` fixes the problem (but is obviously not a solution in a real project)**  ``` ... @XmlRootElement() ... ```  ``` PS C:\dev\apps\checkstyle> java -jar .\checkstyle-6.6-all.jar -c Example-checkstyle.xml .\TestClass.java Starting audit... Audit done. ```","closed","high demand,","bananetomate","2015-05-14T19:10:19Z","2015-05-15T17:02:49Z"
"","1833","Redundant modifier false positive for abstract classes in interfaces (6.9)","Hi, The new check for redundant modifier in version 6.9 triggers one false positive in our project:  https://josm.openstreetmap.de/jenkins/job/JOSM/69/checkstyleResult/NORMAL/  ""abstract"" is not redundant => removing it causes a compile error.  ``` java /**  * https://github.com/checkstyle/checkstyle/issues/1833  */ public interface Selector {      void getRange();      abstract class AbstractSelector implements Selector {      } } ```  ``` $ java -jar checkstyle-6.9-all.jar -c /sun_checks.xml Selector.java Selector.java:8:5: Redundant 'abstract' modifier. ```","closed","approved,","don-vip","2015-08-20T22:26:12Z","2015-09-04T12:33:22Z"
"","1070","Use of checkstyle and maven misses checkstyle-checker.xml","Hi,  I am currently trying to include checkstyle into my build process. As I am using maven and have configured the plugin like follows:  ``` xml                                        org.apache.maven.plugins                 maven-checkstyle-plugin                 2.15                                      src/main/checkstyle/checkstyle.xml                               ```  My checkstyle.xml just looks like the basic xml from http://checkstyle.sourceforge.net/config.html:  ``` xml                                              ```  Unfortunately, this leads to an error in the build process when executing mvn checkstyle:check :  [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.15:check (default-cli) on project backend-server: Failed during checkstyle execution: Failed during checkstyle configuration: unable to read /home/reichelt/workspaces/irpsimworkspace/backend/backend-server/target/checkstyle-checker.xml - unable to parse configuration stream - Document is invalid: no grammar found.:2:8 -> [Help 1]  This error seems to occur also to this guys: http://stackoverflow.com/questions/27273325/problems-with-specifying-headerfile-property-in-checkstyle-plugin-in-maven and http://stackoverflow.com/questions/19682455/how-to-externalise-the-checkstyle-config-for-maven-checkstyle-plugin?rq=1 - for some reason, it searches for the file checkstyle-checker.xml. As the second so-question seems to resolve this issue mainly by addind a suppressionsLocation, I've done the same.  According to http://checkstyle.sourceforge.net/config.html, suppressions are only needed if a suppressions filter is used - is this right, and this is a bug, or am I using this wrong?  After using a right, empty suppressions-xml, the main error with checkstyle-checker.xml occurs again. Is this a bug, and if not, what am I doing wrong?","closed","","DaGeRe","2015-05-12T11:27:42Z","2017-03-02T13:50:45Z"
"","1023","checkstyle erroneously detects Javadoc HTML tags inside {@code ...} and {@literal ...}","Here is an example of javadoc that does not have an error, but checkstyle rejects:   ``` This is some XML: {@code   foo  } ```  It makes no difference if it is rewritten in verbose form:  ``` This is some XML: {@literal   foo  } ``` ##","open","javadoc,","kennknowles","2015-04-30T02:12:24Z","2017-09-02T22:22:50Z"
"","1552","HiddenFieldCheck doesn't report violation when a class member is defined in static or non-static block","Here is an example for a static block:  ``` bash vlad@vlad-N61PC-M2S ~/cli $ java -jar checkstyle-6.8.1-all.jar -c my_check.xml Test.java Starting audit... Audit done.  vlad@vlad-N61PC-M2S ~/cli $ cat my_check.xml                          vlad@vlad-N61PC-M2S ~/cli $ cat Test.java class Test {     static {         String bar;     }     void method(int bar) {         bar++;     } } ```","closed","approved,","Vladlis","2015-08-04T11:17:25Z","2015-08-05T09:58:40Z"
"","1152","incorrect parsing of attributes in AtclauseOrderCheck","Here https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java#L102-L122","closed","approved,","Vladlis","2015-05-30T15:56:06Z","2015-06-02T14:08:27Z"
"","1078","removing abandoned test input files","Have not found where these files are used.  `mvn clean verify` passes without them. Seems like they were accidentally committed around 3 years ago.","closed","","isopov","2015-05-13T21:00:24Z","2015-05-13T21:20:29Z"
"","1465","Make RedundantModifier checks if inner types declared in interface ...","has redundant static modifier, fixes part of #1242. With PR #1463 closes issue #1242.","closed","","liscju","2015-07-25T11:51:14Z","2015-07-25T14:57:28Z"
"","1100","remove dead code from FinalClassCheck","Getting modifiers == null appears to be impossible while running on an input file: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java#L69 https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java#L71 https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java#L77 Also toString() in the private nested class is never used https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java#L173-L181","closed","approved,","Vladlis","2015-05-18T23:11:42Z","2015-05-19T00:11:21Z"
"","1107","removing dead code and refactoring in VisibilityModifierCheck","Getting modifiers == null appears to be impossible while running on an input file, as it is explained in #1100  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java#L569  Also, the whole method https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java#L547-L559 can be replaced by using just two methods - findFirstToken() and getNextSibling(), as it is shown here https://github.com/checkstyle/checkstyle/compare/master...Vladlis:issue%231107?expand=1#diff-67e0d412b2b09442c70b1cd03c79b858R444","closed","approved,","Vladlis","2015-05-19T17:54:03Z","2015-05-27T13:30:38Z"
"","1284","Refactoring of AbstractIllegalCheck and its children. Improved UT coverage","getRequiredTokens() and getAcceptableTokens() are useless in these Checks as they are copy-paste of getDefaultTokens() method. AbstractIllegalCheck, IllegalCatchCheck, IllegalThrowCheck - 100% UT coverage","closed","","baratali","2015-07-05T15:10:35Z","2017-03-24T19:34:27Z"
"","1509","ArrayTrailingComma: Extra coma is required in multiline array value","from MainTest.java of checkstyle source  ```         // we just reference there all violations         final String[][] outputValues = new String[][]{             {""ClassCouplingCheckTestInput"", ""InnerClass"", ""7:19""},             {""BooleanExpressionComplexityCheckTestInput"",                 ""BooleanExpressionComplexityCheckTestInput"", ""3:14"", },             {""BooleanExpressionComplexityCheckTestInput"", ""Settings"", ""53:19""},         }; ```  veird part is """"3:14"", },"" checkstyle demand that coma. Config is checkstyle_checks.xml  ##","closed","high demand,","romani","2015-07-29T07:28:32Z","2017-04-22T22:54:35Z"
"","1099","remove deprecated class PosixParser from Main","from IltellijIdea:  /home/rivanov/java/git-others/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/Main.java Warning:(43, 30) java: org.apache.commons.cli.PosixParser in org.apache.commons.cli has been deprecated Warning:(130, 43) java: org.apache.commons.cli.PosixParser in org.apache.commons.cli has been deprecated","closed","approved,","romani","2015-05-18T22:56:55Z","2015-05-21T23:32:18Z"
"","1802","replace deprecated method in HiddenCheckField","From [18.0 API Docs](http://google.github.io/guava/releases/18.0/api/docs/com/google/common/base/Objects.html#equal%28java.lang.Object,%20java.lang.Object%29):  > Note for Java 7 and later: This method should be treated as deprecated; use Objects.equals(java.lang.Object, java.lang.Object) instead.  As we now support only Java 7+, this should be replaced.","closed","","Vladlis","2015-08-20T09:35:23Z","2015-08-28T17:19:59Z"
"","1019","Allow block closing '}' to be on same line if single line block","For the RightCurly check, to check that '}' should be on a line by itself, at the start of that line, I use:  ``` xml                         ```  This allows for instance the following, as desired:  ``` java     public static void main(String[] args) {         // do something     } ```  However, it would be nice to also allow the closing '}' to be on the same line as the opening '{', for single line blocks, as follows:  ``` java     public String getTypeText() { return ""int""; } ```  It appears we have to choose between on a new line or on the same line, and can't allow both these method forms.  I propose adding an option to the 'RightCurly' check, to ignore single line blocks (blocks with opening '{' and closing '}' on the same line.)","closed","approved,","dhendriks","2015-04-29T12:57:56Z","2015-08-26T15:10:25Z"
"","1014","RightCurly: Curly brace '}' should be on line by itself not reported for method with annotation","For the RightCurly check, to check that '}' should be on a line by itself, at the start of that line, I use:  ```                         ```  The following code however, where the '}' is not on a line by itself, does not give any warnings:  ``` java     @Override     public String getTypeText() { return ""int""; } ```  The following code however, which is the same except the '@Override' annotation is removed, does give a warning:  ``` java     public String getTypeText() { return ""int""; } ```  This seems like a bug to me?","closed","approved,","dhendriks","2015-04-29T07:10:59Z","2015-07-01T03:38:30Z"
"","1138","Align method with its return type, and variable with its type","For example,  ``` java   public LongParameterizedType   foo(int arg) {     return null;   } ```  Also, fix a few typos.","closed","","julianhyde","2015-05-27T06:36:19Z","2015-07-07T18:06:17Z"
"","1058","ParenPad check can't be configured to allow spaces only around method parameters","Follow-up to the user question: http://stackoverflow.com/questions/30053174/whitespace-after-opening-and-before-closing-bracket-of-method-constructor-declar/30057579?noredirect=1#comment48277567_30057579  TL;DR - ParenPad check can't be configured allow spaces only around method/constructor parameters and disallow spaces in method calls, constructor calls and calls of super:  My idea is to achieve that by the following configuration:  ```                         ```  but it doesn't work for method calls:  ``` void methodDefinition( int a ) { // OK     methodCall(a); // ')' is not preceded with whitespace } ```  In this example `(` is `METHOD_CALL` token, but `)` is just `RPAREN`, so this configuration would enforce something strange:  ``` void methodDefinition( int a ) {     methodCall(a ); } ```  The solution would be to treat `RPAREN` with `METHOD_CALL` as a parent in the same way as `METHOD_CALL`. Similar thing is already done for `RPAREN` with `TYPECAST` as a parent: https://github.com/checkstyle/checkstyle/blob/1bd30555eac039d0486dffb3fc43b7a34117909b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java#L92-L93  @romani, what do you think? Can I proceed with implementation?","closed","","mkordas","2015-05-06T17:59:14Z","2015-06-07T18:26:42Z"
"","1089","Change location of left curly braces to end of line in Checkstyle code","Follow-up to https://groups.google.com/forum/#!topic/checkstyle-devel/MUutR3v11yU  It is industry standard to place open curly braces at the end of lines of code. Google Style Guide also enforces this kind of formatting.","closed","approved,","mkordas","2015-05-17T11:45:51Z","2015-05-17T17:10:34Z"
"","1113","Add division operator to list of allowed tokens between numbers in MagicNumber check","Follow-up to http://stackoverflow.com/questions/30337382/checkstyle-doesnt-like-quotient-expression-for-constant  According to [MagicNumberCheck.java#L109](https://github.com/checkstyle/checkstyle/blob/0f58857d73933c7b6b7e62f0c7c16ad7af51556f/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java#L109) the following tokens are allowed between the number literals and enclosing constant definition to not be considered as magic numbers: - ASSIGN (`=`), - ARRAY_INIT (array initializer), - EXPR (any expression), - UNARY_PLUS (`+`), - UNARY_MINUS (`-`), - TYPECAST (cast operator), - ELIST (list of expressions), - LITERAL_NEW (`new`), - METHOD_CALL (method call), - STAR (`*`)  There is no **DIV** (`/`) token the list and this list is unfortunately unconfigurable:  ``` java private static final int DEFAULT_SIZE_IN_BYTES = 256 * 1024; // fine  private static final double SPECIAL_RATIO = 4.0 / 3.0; // MagicNumber violations ```  My proposition is to add **DIV** to the list, as I see no harm in defining named special ratios. #### Open questions: 1. Should users be able to configure the list of allowed tokens? 2. Should this list of allowed tokens be better documented? 3. Should the following also not cause any violations by default?  ``` java private static final double SPECIAL_SUM = 2.0 + 10.0; // MagicNumber violations private static final double SPECIAL_DIFFERENCE = 4.0 - Math.PI; // MagicNumber violation ```","closed","approved,","mkordas","2015-05-21T20:17:32Z","2015-05-21T23:46:57Z"
"","1037","Fix AvoidInlineConditionals violations in Checkstyle codebase","Follow-up to #945.  We have several violations of [AvoidInlineConditionals](http://checkstyle.sourceforge.net/config_coding.html#AvoidInlineConditionals). @romani, do we really want to fix them?  ``` DefaultLogger.java:92:13: Avoid inline conditionals. Main.java:75:37: Avoid inline conditionals. Main.java:125:25: Avoid inline conditionals. Main.java:149:51: Avoid inline conditionals. PropertyCacheFile.java:110:35: Avoid inline conditionals. Utils.java:183:24: Avoid inline conditionals. api\AuditEvent.java:122:13: Avoid inline conditionals. api\FileText.java:210:13: Avoid inline conditionals. api\LineColumn.java:63:13: Avoid inline conditionals. api\LocalizedMessage.java:167:34: Avoid inline conditionals. api\LocalizedMessage.java:386:56: Avoid inline conditionals. api\LocalizedMessage.java:389:48: Avoid inline conditionals. checks\AbstractTypeAwareCheck.java:372:50: Avoid inline conditionals. checks\CheckUtils.java:121:60: Avoid inline conditionals. checks\ClassResolver.java:100:56: Avoid inline conditionals. checks\DescendantTokenCheck.java:238:48: Avoid inline conditionals. checks\DescendantTokenCheck.java:245:48: Avoid inline conditionals. checks\DescendantTokenCheck.java:259:52: Avoid inline conditionals. checks\DescendantTokenCheck.java:270:52: Avoid inline conditionals. checks\RegexpCheck.java:126:40: Avoid inline conditionals. checks\RegexpCheck.java:245:46: Avoid inline conditionals. checks\TranslationCheck.java:141:51: Avoid inline conditionals. checks\annotation\AnnotationLocationCheck.java:249:53: Avoid inline conditionals. checks\annotation\SuppressWarningsCheck.java:207:35: Avoid inline conditionals. checks\blocks\EmptyBlockCheck.java:130:17: Avoid inline conditionals. checks\blocks\EmptyBlockCheck.java:168:17: Avoid inline conditionals. checks\blocks\LeftCurlyCheck.java:194:21: Avoid inline conditionals. checks\blocks\LeftCurlyCheck.java:216:21: Avoid inline conditionals. checks\blocks\LeftCurlyCheck.java:257:40: Avoid inline conditionals. checks\blocks\LeftCurlyCheck.java:304:13: Avoid inline conditionals. checks\coding\HiddenFieldCheck.java:240:21: Avoid inline conditionals. checks\coding\IllegalInstantiationCheck.java:244:48: Avoid inline conditionals. checks\coding\IllegalTokenTextCheck.java:125:40: Avoid inline conditionals. checks\design\MutableExceptionCheck.java:125:37: Avoid inline conditionals. checks\imports\AvoidStarImportCheck.java:105:49: Avoid inline conditionals. checks\imports\CustomImportOrderCheck.java:652:30: Avoid inline conditionals. checks\imports\Guard.java:96:17: Avoid inline conditionals. checks\imports\Guard.java:140:28: Avoid inline conditionals. checks\indentation\ArrayInitHandler.java:145:43: Avoid inline conditionals. checks\indentation\ClassDefHandler.java:45:15: Avoid inline conditionals. checks\indentation\ClassDefHandler.java:46:19: Avoid inline conditionals. checks\indentation\ExpressionHandler.java:158:40: Avoid inline conditionals. checks\indentation\ExpressionHandler.java:371:23: Avoid inline conditionals. checks\indentation\MethodCallHandler.java:44:17: Avoid inline conditionals. checks\indentation\MethodDefHandler.java:44:13: Avoid inline conditionals. checks\javadoc\HtmlTag.java:62:13: Avoid inline conditionals. checks\javadoc\JavadocMethodCheck.java:575:61: Avoid inline conditionals. checks\javadoc\JavadocStyleCheck.java:188:13: Avoid inline conditionals. checks\javadoc\JavadocTypeCheck.java:231:17: Avoid inline conditionals. checks\javadoc\JavadocUtils.java:278:46: Avoid inline conditionals. checks\javadoc\JavadocVariableCheck.java:166:21: Avoid inline conditionals. checks\javadoc\TagParser.java:117:39: Avoid inline conditionals. checks\regexp\DetectorOptions.java:198:40: Avoid inline conditionals. checks\sizes\MethodCountCheck.java:117:34: Avoid inline conditionals. ```","closed","","mkordas","2015-05-01T14:16:01Z","2016-04-22T12:44:52Z"
"","1052","Fix BooleanExpressionComplexity check violations in Checkstyle code","Follow-up to #945.  http://checkstyle.sourceforge.net/config_metrics.html#BooleanExpressionComplexity  Let's decide whether we want to fix/prevent code with high boolean complexity. Currently the highest complexity (16) can be found in [FinalLocalVariableCheck](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java#L178):  ``` java if ((TokenTypes.POST_DEC == parentType         || TokenTypes.DEC == parentType         || TokenTypes.POST_INC == parentType         || TokenTypes.INC == parentType         || TokenTypes.ASSIGN == parentType         || TokenTypes.PLUS_ASSIGN == parentType         || TokenTypes.MINUS_ASSIGN == parentType         || TokenTypes.DIV_ASSIGN == parentType         || TokenTypes.STAR_ASSIGN == parentType         || TokenTypes.MOD_ASSIGN == parentType         || TokenTypes.SR_ASSIGN == parentType         || TokenTypes.BSR_ASSIGN == parentType         || TokenTypes.SL_ASSIGN == parentType         || TokenTypes.BXOR_ASSIGN == parentType         || TokenTypes.BOR_ASSIGN == parentType         || TokenTypes.BAND_ASSIGN == parentType)         && ast.getParent().getFirstChild() == ast) {     removeVariable(ast); } ```  All violations:  ``` api\JavadocTagInfo.java:73:13: Boolean expression complexity is 4 (max allowed is 3). api\JavadocTagInfo.java:91:13: Boolean expression complexity is 8 (max allowed is 3). api\JavadocTagInfo.java:113:13: Boolean expression complexity is 8 (max allowed is 3). api\JavadocTagInfo.java:134:13: Boolean expression complexity is 9 (max allowed is 3). api\JavadocTagInfo.java:189:13: Boolean expression complexity is 8 (max allowed is 3). api\JavadocTagInfo.java:210:13: Boolean expression complexity is 8 (max allowed is 3). api\JavadocTagInfo.java:231:13: Boolean expression complexity is 8 (max allowed is 3). api\JavadocTagInfo.java:288:13: Boolean expression complexity is 8 (max allowed is 3). api\JavadocTagInfo.java:330:13: Boolean expression complexity is 6 (max allowed is 3). api\JavadocTagInfo.java:370:13: Boolean expression complexity is 8 (max allowed is 3). api\JavadocTagInfo.java:407:13: Boolean expression complexity is 8 (max allowed is 3). api\JavadocTagInfo.java:429:13: Boolean expression complexity is 4 (max allowed is 3). checks\AvoidEscapedUnicodeCharactersCheck.java:216:9: Boolean expression complexity is 7 (max allowed is 3). checks\DeclarationCollector.java:410:13: Boolean expression complexity is 4 (max allowed is 3). checks\UncommentedMainCheck.java:178:9: Boolean expression complexity is 4 (max allowed is 3). checks\annotation\AnnotationLocationCheck.java:252:9: Boolean expression complexity is 4 (max allowed is 3). checks\annotation\AnnotationUseStyleCheck.java:455:14: Boolean expression complexity is 4 (max allowed is 3). checks\coding\EqualsHashCodeCheck.java:94:9: Boolean expression complexity is 4 (max allowed is 3). checks\coding\ExplicitInitializationCheck.java:152:9: Boolean expression complexity is 5 (max allowed is 3). checks\coding\FinalLocalVariableCheck.java:178:17: Boolean expression complexity is 16 (max allowed is 3). checks\coding\HiddenFieldCheck.java:298:13: Boolean expression complexity is 7 (max allowed is 3). checks\coding\IllegalInstantiationCheck.java:290:13: Boolean expression complexity is 4 (max allowed is 3). checks\coding\RequireThisCheck.java:185:9: Boolean expression complexity is 7 (max allowed is 3). checks\design\VisibilityModifierCheck.java:547:47: Boolean expression complexity is 10 (max allowed is 3). checks\design\VisibilityModifierCheck.java:636:22: Boolean expression complexity is 4 (max allowed is 3). checks\imports\CustomImportOrderCheck.java:510:9: Boolean expression complexity is 4 (max allowed is 3). checks\imports\CustomImportOrderCheck.java:595:9: Boolean expression complexity is 4 (max allowed is 3). checks\indentation\SlistHandler.java:111:9: Boolean expression complexity is 11 (max allowed is 3). checks\javadoc\JavadocMethodCheck.java:456:9: Boolean expression complexity is 4 (max allowed is 3). checks\javadoc\JavadocMethodCheck.java:493:9: Boolean expression complexity is 4 (max allowed is 3). checks\javadoc\JavadocParagraphCheck.java:164:13: Boolean expression complexity is 4 (max allowed is 3). checks\javadoc\JavadocStyleCheck.java:192:9: Boolean expression complexity is 6 (max allowed is 3). checks\javadoc\JavadocTag.java:136:9: Boolean expression complexity is 4 (max allowed is 3). checks\javadoc\JavadocTypeCheck.java:235:9: Boolean expression complexity is 6 (max allowed is 3). checks\javadoc\JavadocVariableCheck.java:172:9: Boolean expression complexity is 4 (max allowed is 3). checks\javadoc\TagParser.java:150:9: Boolean expression complexity is 4 (max allowed is 3). checks\metrics\JavaNCSSCheck.java:201:9: Boolean expression complexity is 4 (max allowed is 3). checks\modifier\RedundantModifierCheck.java:103:17: Boolean expression complexity is 4 (max allowed is 3). checks\naming\AbstractAccessControlNameCheck.java:102:9: Boolean expression complexity is 7 (max allowed is 3). checks\naming\ConstantNameCheck.java:89:9: Boolean expression complexity is 5 (max allowed is 3). checks\whitespace\EmptyLineSeparatorCheck.java:252:21: Boolean expression complexity is 4 (max allowed is 3). checks\whitespace\GenericWhitespaceCheck.java:171:22: Boolean expression complexity is 7 (max allowed is 3). checks\whitespace\WhitespaceAroundCheck.java:415:9: Boolean expression complexity is 7 (max allowed is 3). checks\whitespace\WhitespaceAroundCheck.java:497:13: Boolean expression complexity is 4 (max allowed is 3). filters\SuppressElement.java:146:9: Boolean expression complexity is 6 (max allowed is 3). ```","closed","approved,","mkordas","2015-05-03T15:14:41Z","2022-02-28T20:19:16Z"
"","1040","Fix EmptyLineSeparator violations in Checkstyle codebase","Follow-up to #945 and #1035.","closed","","mkordas","2015-05-01T15:29:12Z","2015-05-02T05:36:02Z"
"","1676","Enable Checkstyle checks for 'gui' package","Follow-up to #1661.  All Checkstyle check should be enforced also on GUI package.  Exclusion `**/gui/*` needs to be removed from https://github.com/checkstyle/checkstyle/blob/master/config/ant-phase-verify.xml#L31","closed","approved,","mkordas","2015-08-12T22:27:30Z","2015-09-01T04:38:35Z"
"","1187","Do not generate violation in SuppressWarningsHolder for empty SuppressWarnings","Follow-up to #1158.  SuppressWarningsHolder generate violation in SuppressWarningsHolder for empty SuppressWarnings. As agreed, there is no point in raising such warning.  `SuppressWarnings` annotation cannot be empty. This is illegal code:  ``` java @SuppressWarnings volatile int[] e; ```  I wonder why FindBugs has such non-compilable test case: https://code.google.com/p/findbugs/source/browse/findbugsTestCases/src/java/VolatileUsage2.java.","closed","approved,","mkordas","2015-06-06T22:37:12Z","2015-06-07T20:01:10Z"
"","1189","Add possibility to configure targets for ParenPad check","Follow-up to #1058.  Right now it is not possible to control where ParenPad check should be applied, because LPAREN and RPAREN tokens are part of multiple constructs and there is no finer-grained control over them.   Proposed solution: - remove from target LPAREN and RPAREN - user needs to configure only exact targets of interests like CTOR_CALL, METHOD_CALL, SUPER_CTOR_CALL, ANNOTATION, LITERAL_IF and so on. - do manual AST traversing to find LPAREN or RPAREN","closed","approved,","mkordas","2015-06-07T18:26:11Z","2015-06-25T17:17:46Z"
"","1559","Remove redundant characters from regular expressions. #1555","Fixes: - Obsolete single repetition - Redundant character escapes","closed","","mkordas","2015-08-05T20:08:35Z","2015-08-06T03:32:47Z"
"","1529","Add missing ""@Override"" annotations. #46","Fixes violations of [squid:S1161](http://nemo.sonarqube.org/issues/search#resolved=false|projectUuids=93eb9164-80ec-4136-9c42-d4d23deed1db|severities=MAJOR|rules=squid%3AS1161) rule.","closed","","mkordas","2015-08-01T18:02:57Z","2015-08-01T20:19:00Z"
"","1556","Collapse empty tags in XML. #1555","Fixes violations from CheckTagEmptyBody inspection.","closed","","mkordas","2015-08-05T18:40:16Z","2015-08-06T03:31:04Z"
"","1569","Remove unused assignments. #1555","Fixes UnusedAssignment inspection violations.  Description:  > This inspection points out the cases where a variable value is never used after its assignment, i.e.: > - the variable never gets read after assignment OR > - the value is always overwritten with another assignment before the next variable read OR > - the variable initializer is redundant (for one of the above two reasons) OR > - the variable is never used.","closed","","mkordas","2015-08-06T23:12:54Z","2015-08-08T04:13:01Z"
"","1361","fix eclipse package declaration error in InputPackageDeclaration","Fixes the following (from eclipse):  > The declared package ""com.puppycrawl.tools.checkstyle.checks.coding"" does not match the expected package  ""com.puppycrawl.tools.checkstyle.coding""","closed","","Vladlis","2015-07-12T20:41:26Z","2015-07-12T22:00:28Z"
"","1274","Fixes ""SingleLineJavadoc"".","Fixes the `SingleLineJavadoc` config in `google_checks.xml` to include the (currently misplaced) `ignoreInlineTags` property.","closed","","ghost","2015-07-02T20:52:31Z","2015-07-03T01:01:06Z"
"","1570","Fix suspicious method call. #1555","Fixes SuspiciousMethodCalls inspection violation.  Description:  > This inspection reports method calls to parameterized collections, where actual argument type does not correspond to the collection's elements type.  For example if you have the following code: >  > ``` java >      List list = getListOfElements(); >      list.remove(""""); > ``` >  >  the call to `remove()` will be highlighted.","closed","","mkordas","2015-08-06T23:16:54Z","2015-08-08T04:14:08Z"
"","1573","Replace subtraction in compareTo() with Integer.compare(). #1555","Fixes SubtractionInCompareTo inspection violations.  Description:  > Reports subtraction in compareTo() methods and methods implementing java.util.Comparator.compare(). While it is a common idiom to use the results of integer subtraction as the result of a compareTo() method, this construct may cause subtle and difficult bugs in cases of integer overflow.","closed","","mkordas","2015-08-07T17:22:17Z","2015-08-08T04:15:41Z"
"","1817","Use constants for empty arrays. #1555","Fixes some `ZeroLengthArrayInitialization` inspection violations.  Description:  > Reports on allocations of arrays with known lengths of zero. Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly allocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or footprint. Note that this inspection does not report zero-length arrays allocated as static final fields, as it is assumed that those arrays are being used to implement array sharing.","closed","","mkordas","2015-08-20T21:09:43Z","2015-08-21T13:06:05Z"
"","1967","Issue #1555: Decrease visibility of fields and methods in test code","Fixes some `WeakerAccess` inspection violations.  Description:  > This inspection reports all fields, methods or classes, found in the specified inspection scope, that may have their access modifier narrowed down.","closed","","mkordas","2015-08-28T19:55:10Z","2015-08-29T05:37:28Z"
"","1949","Decrease visibility of fields and methods in main and utils packages. #1555","Fixes some `WeakerAccess` inspection violations.  Description:  > This inspection reports all fields, methods or classes, found in the specified inspection scope, that may have their access modifier narrowed down.","closed","","mkordas","2015-08-27T21:04:08Z","2015-08-28T05:31:07Z"
"","1934","Decrease visibility of fields and methods where applicable. #1555","Fixes some `WeakerAccess` inspection violations.  Description:  > This inspection reports all fields, methods or classes, found in the specified inspection scope, that may have their access modifier narrowed down.","closed","","mkordas","2015-08-27T18:22:40Z","2015-08-27T19:53:13Z"
"","1925","Remove unused parameters. #1555","Fixes some `UnusedParameters` inspection violations.  Description:  > This inspection reports parameters that are not used by their methods and all method implementations/overriders.","closed","","mkordas","2015-08-26T22:22:11Z","2015-08-29T05:29:41Z"
"","1902","Use compiled pattern instead of dynamic regexp in checks. #1555","Fixes some `SpellDynamicRegexReplaceableByCompiledPattern` inspection violations.  Description:  > Reports calls to the regular expression methods of java.lang.String using constants arguments. Such calls may be profitably replaced with a private static final Pattern field so that the regular expression does not have to be compiled each time it is used.","closed","","mkordas","2015-08-26T15:35:28Z","2015-08-26T16:28:47Z"
"","1892","Use compiled pattern instead of dynamic regexp in CheckUtils. #1555","Fixes some `SpellDynamicRegexReplaceableByCompiledPattern` inspection violations.  Description:  > Reports calls to the regular expression methods of java.lang.String using constants arguments. Such calls may be profitably replaced with a private static final Pattern field so that the regular expression does not have to be compiled each time it is used.","closed","","mkordas","2015-08-24T21:39:34Z","2015-08-26T15:35:59Z"
"","1884","Use compiled pattern instead of dynamic regexp. #1555","Fixes some `SpellDynamicRegexReplaceableByCompiledPattern` inspection violations.  Description:  > Reports calls to the regular expression methods of java.lang.String using constants arguments. Such calls may be profitably replaced with a private static final Pattern field so that the regular expression does not have to be compiled each time it is used.","closed","","mkordas","2015-08-24T21:18:04Z","2015-08-25T11:32:09Z"
"","1986","Issue #1555: Fix some typos in checks package","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals.","closed","","mkordas","2015-08-29T00:10:47Z","2015-08-29T05:59:25Z"
"","1985","Issue #1555: Fix various typos","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals.","closed","","mkordas","2015-08-29T00:10:35Z","2015-08-29T05:58:53Z"
"","1947","Fix some typos in coding package. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals.","closed","","mkordas","2015-08-27T20:54:31Z","2015-08-28T05:29:22Z"
"","1946","Fix typos in properties. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals.","closed","","mkordas","2015-08-27T20:54:18Z","2015-08-28T05:28:51Z"
"","1945","Fix typos in blocks, headers and filters packages. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals.","closed","","mkordas","2015-08-27T20:49:30Z","2015-08-28T05:28:00Z"
"","1944","Fix typos in import and java8 packages. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals.","closed","","mkordas","2015-08-27T20:49:22Z","2015-08-28T05:27:22Z"
"","1943","Fix typos in utlis package. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals.","closed","","mkordas","2015-08-27T20:49:12Z","2015-08-28T05:26:40Z"
"","1927","Fix various typos in Java code. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.","closed","","mkordas","2015-08-26T22:22:53Z","2015-08-27T12:50:59Z"
"","1894","Use camel case in property names. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.","closed","","mkordas","2015-08-24T21:39:49Z","2015-08-26T15:35:40Z"
"","1893","Fix typos in xdocs. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.","closed","","mkordas","2015-08-24T21:39:43Z","2015-08-26T15:35:42Z"
"","1890","Fix typos in pom.xml. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.","closed","","mkordas","2015-08-24T21:18:56Z","2017-05-26T13:04:31Z"
"","1889","Fix various typos. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.","closed","","mkordas","2015-08-24T21:18:50Z","2015-08-26T15:36:02Z"
"","1888","Fix typos in Indentation check code. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.","closed","","mkordas","2015-08-24T21:18:41Z","2015-08-26T15:36:02Z"
"","1886","Fix typos in code and Javadoc. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.","closed","","mkordas","2015-08-24T21:18:24Z","2015-08-26T15:36:03Z"
"","1885","Fix typos in quality profile files. #1555","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.","closed","","mkordas","2015-08-24T21:18:14Z","2017-05-26T13:03:35Z"
"","1982","Issue #1555: Avoid reusing variables","Fixes some `ReuseOfLocalVariable` inspection violations.  Description:  > Reports local variables that are ""reused"", overwriting their values with new values unrelated to their original use. Such local variable reuse may be confusing, as the intended semantics of the local variable may vary with each use. It may also be prone to bugs, if code changes result in values that were thought to be overwritten actually being live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity.","closed","","mkordas","2015-08-28T23:35:19Z","2015-08-29T05:49:23Z"
"","1873","Use same parameter names in overridden methods. #1555","Fixes some `ParameterNameDiffersFromOverriddenParameter` inspection violations.  Description:  > Reports parameters that have different names from the corresponding parameters in the methods they override. While legal in Java, such inconsistent names may be confusing, and lessen the documentation benefits of good naming practices.","closed","","mkordas","2015-08-23T20:58:55Z","2015-08-25T10:48:49Z"
"","1830","Add missing space in JavaScript code. #1555","Fixes some `JSLint` inspection violations.  Description:  > JSLint: Missing space between 'for' and '('. (at line 9)","closed","","mkordas","2015-08-20T21:16:43Z","2015-08-21T13:17:14Z"
"","1923","Use explicit charset in test code. #1555","Fixes some `ImplicitDefaultCharsetUsage` inspection violations.  Description:  > Reports method and constructor calls which implicitly use the platform's default charset. These can produce different results on (e.g. foreign language) systems that use a different default charset, resulting in unexpected behaviour.","closed","","mkordas","2015-08-26T22:21:38Z","2015-08-27T12:46:23Z"
"","1984","Issue #1555: Rename methods returning boolean to use question word","Fixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.  Description:  > Reports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.","closed","","mkordas","2015-08-29T00:10:28Z","2015-08-29T05:51:01Z"
"","1921","Rename boolean methods to start with question word. #1555","Fixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.  Description:  > Reports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection","closed","","mkordas","2015-08-26T22:21:26Z","2015-08-27T12:45:09Z"
"","1568","Replace magic constant occurrences with proper constants. #1555","Fixes MagicConstant violations.   Description:  > Report occurrences where usages of ""magic"" constants only are allowed but other expressions are used instead. E.g. `new Font(""Arial"", 2 ) // not allowed` instead of `new Font(""Arial"", Font. ITALIC ) // OK`.  Please see org.intellij.lang.annotations.MagicConstant annotation description for details.","closed","","mkordas","2015-08-06T23:04:40Z","2015-08-09T01:39:11Z"
"","1558","Add tag required by schema to Cobertura configuration. #1555","Fixes IntelliJ IDEA MavenModelInspection violation.","closed","","mkordas","2015-08-05T19:42:53Z","2015-08-06T03:32:02Z"
"","1574","Replace Class.newInstance() with Constructor.newInstance(). #1555","Fixes ClassNewInstance inspection violation.  Description:  > Reports any calls to java.lang.Class.newInstance(). The newInstance method propagates any exception thrown by the no-arg constructor, including checked exceptions. Use of this method effectively bypasses the compile-time exception checking that would otherwise be performed by the compiler. Replacing such a method call with a call to the java.lang.reflect.Constructor.newInstance() method avoids this problem by wrapping any exception thrown by the constructor in a java.lang.reflect.InvocationTargetException.","closed","","mkordas","2015-08-07T17:22:30Z","2015-08-08T04:17:48Z"
"","1565","Copy collections and arrays before assigning to fields. #1555","Fixes AssignmentToCollectionFieldFromParameter violations.  Description:  > Reports any attempt to assign an array or Collection field from a method parameter. Since the array or Collection may have its contents modified by the calling method, this construct may result in an object having its state modified unexpectedly. While occasionally useful for performance reasons, this construct is inherently bug-prone.","closed","","mkordas","2015-08-06T22:28:44Z","2015-08-08T04:11:21Z"
"","1841","Simplify and remove unnecessary code. #1555","Fixes a few violations.","closed","","mkordas","2015-08-21T22:53:20Z","2015-08-22T11:35:02Z"
"","1972","Issue #1555: Use constant for empty array of zero length","Fixes `ZeroLengthArrayInitialization` inspection violations.  Description:  > Reports on allocations of arrays with known lengths of zero. Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly allocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or footprint. Note that this inspection does not report zero-length arrays allocated as static final fields, as it is assumed that those arrays are being used to implement array sharing.","closed","","mkordas","2015-08-28T22:05:02Z","2015-08-29T05:41:21Z"
"","1940","Use constants for empty arrays of zero length. #1555","Fixes `ZeroLengthArrayInitialization` inspection violations.  Description:  > Reports on allocations of arrays with known lengths of zero. Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly allocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or footprint. Note that this inspection does not report zero-length arrays allocated as static final fields, as it is assumed that those arrays are being used to implement array sharing.","closed","","mkordas","2015-08-27T18:35:06Z","2015-08-27T20:20:53Z"
"","1922","Use constant for empty array initialization. #1555","Fixes `ZeroLengthArrayInitialization` inspection violations.  Description:  > Reports on allocations of arrays with known lengths of zero. Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly allocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or footprint. Note that this inspection does not report zero-length arrays allocated as static final fields, as it is assumed that those arrays are being used to implement array sharing.","closed","","mkordas","2015-08-26T22:21:32Z","2015-08-27T12:45:42Z"
"","1702","Do not allocate arrays of zero length. #1555","Fixes `ZeroLengthArrayInitialization` inspection violations.  Description:  > Reports on allocations of arrays with known lengths of zero. Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly allocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or footprint. Note that this inspection does not report zero-length arrays allocated as static final fields, as it is assumed that those arrays are being used to implement array sharing.","closed","","mkordas","2015-08-15T00:01:57Z","2015-08-15T03:46:38Z"
"","1677","Do not allocate arrays of zero length. #1555","Fixes `ZeroLengthArrayInitialization` inspection violations.  Description:  > Reports on allocations of arrays with known lengths of zero. Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly allocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or footprint. Note that this inspection does not report zero-length arrays allocated as static final fields, as it is assumed that those arrays are being used to implement array sharing.","closed","","mkordas","2015-08-12T22:30:43Z","2015-08-14T23:31:40Z"
"","1846","Use constant for arrays with zero length. #1555","Fixes `ZeroLengthArrayInitialization` inspection violations in test code.  Description:  > Reports on allocations of arrays with known lengths of zero. Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly allocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or footprint. Note that this inspection does not report zero-length arrays allocated as static final fields, as it is assumed that those arrays are being used to implement array sharing.","closed","","mkordas","2015-08-21T22:56:13Z","2015-08-22T11:39:35Z"
"","1860","Use constants for arrays initialized with zero length. #1555","Fixes `ZeroLengthArrayInitialization` inspection violation  Description:  > Reports on allocations of arrays with known lengths of zero. Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly allocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or footprint. Note that this inspection does not report zero-length arrays allocated as static final fields, as it is assumed that those arrays are being used to implement array sharing.","closed","","mkordas","2015-08-22T22:57:02Z","2015-08-25T10:24:08Z"
"","1737","Add private constructor to test utility class. #1555","Fixes `UtilityClassWithoutPrivateConstructor` inspection violation.  Description:  > Reports utility classes which do not have private constructors. Utility classes have all fields and methods declared static. Giving such classes a private constructor prevents them from being inadvertently instantiated.","closed","","mkordas","2015-08-16T22:08:30Z","2015-08-17T03:54:51Z"
"","1575","Prevent corrupting Properties with non-String data. #1555","Fixes `UseOfPropertiesAsHashtable` inspection violations.  Description:  > Reports any calls to the java.util.Hashtable methods put(), putAll() or get() on a java.util.Properties object. For reasons lost to history, Properties inherits from Hashtable, but use of those methods is discouraged to prevent corruption of properties values with non-String data.","closed","","mkordas","2015-08-07T17:40:05Z","2015-08-08T04:18:48Z"
"","1835","Do not use Properties as Hashtable. #1555","Fixes `UseOfPropertiesAsHashtable` inspection violations in test code.  Description:  > Reports any calls to the java.util.Hashtable methods put(), putAll() or get() on a java.util.Properties object. For reasons lost to history, Properties inherits from Hashtable, but use of those methods is discouraged to prevent corruption of properties values with non-String data.","closed","","mkordas","2015-08-21T22:51:55Z","2015-08-22T11:28:52Z"
"","1603","Remove usage of Cloneable from Javadoc. #1555","Fixes `UseOfClone` inspection violation.  Description:  > Reports calls to and implementations of the clone() method and uses of java.lang.Cloneable. Some coding standards prohibit clone() usage, and recommend using a copy constructor or static factory method. Calls to clone() on arrays are ignored, because that is a common, correct, efficient and compact way to copy an array.","closed","","mkordas","2015-08-08T12:51:35Z","2017-05-07T15:13:53Z"
"","1761","Fix non-static non-final all upper-case names in test code. #1555","Fixes `UpperCaseFieldNameNotConstant` inspection violations in test code.  Description:  > Reports non-static non-final fields whose names are all upper-case. Such fields may cause confusion by breaking a common naming convention, and are often the result of developer error.","closed","","mkordas","2015-08-18T19:50:28Z","2015-08-19T03:31:40Z"
"","1768","Fix incorrect message format parameter. #1555","Fixes `UnusedMessageFormatParameter` inspection violation introduced in #1648.  Description:  > This inspection reports properties values which looks like java.text.MessageFormat format strings but do not use some of the parameters of {xx} kind. > For example: >  > ``` > # parameter {0} is not used > error.message=Something happened in line {1} > ```","closed","","mkordas","2015-08-18T20:43:40Z","2015-08-27T08:23:57Z"
"","1973","Issue #1555: Delete unnecessary imports","Fixes `UnusedImport` inspection violations.  Description:  > Reports any import statements that are unused. Since IDEA can automatically detect and fix such statements with its ""Optimize Imports"" command, this inspection is mostly useful for off-line reporting on code bases that you don't intend to change.","closed","","mkordas","2015-08-28T22:05:10Z","2015-08-29T05:42:29Z"
"","1864","Remove unused import from test code. #1555","Fixes `UnusedImport` inspection violations.  Description:  > Reports any import statements that are unused.","closed","","mkordas","2015-08-22T22:57:29Z","2015-08-25T10:30:18Z"
"","1845","Remove unused import from test code. #1555","Fixes `UnusedImport` inspection violations.  Description:  > Reports any import statements that are unused.","closed","","mkordas","2015-08-21T22:55:55Z","2015-08-22T11:39:06Z"
"","1865","Rename variables with unused exceptions. #1555","Fixes `UnusedCatchParameter` inspection violations.  Description:  > Reports any catch parameters that are unused in their corresponding blocks. This inspection will not report any catch parameters named ""ignore"" or ""ignored"". Conversely this inspection will warn on any catch parameters named ""ignore"" or ""ignored"" that are actually used.","closed","","mkordas","2015-08-22T22:57:36Z","2017-06-01T19:28:41Z"
"","1588","Rename ignored catch parameters. #1555","Fixes `UnusedCatchParameter` inspection violations.  Description:  > Reports any catch parameters that are unused in their corresponding blocks. This inspection will not report any catch parameters named ""ignore"" or ""ignored"". Conversely this inspection will warn on any catch parameters named ""ignore"" or ""ignored"" that are actually used.","closed","","mkordas","2015-08-07T22:17:37Z","2015-08-08T05:17:52Z"
"","1787","Rename unused catch parameters. #1555","Fixes `UnusedCatchParameter` inspection violations in test code.  Description:  > Reports any catch parameters that are unused in their corresponding blocks. This inspection will not report any catch parameters named ""ignore"" or ""ignored"". Conversely this inspection will warn on any catch parameters named ""ignore"" or ""ignored"" that are actually used.","closed","","mkordas","2015-08-19T20:30:08Z","2015-08-21T11:28:16Z"
"","1951","Remove unused assignment. #1555","Fixes `UnusedAssignment` inspection violations.  Description:  > This inspection points out the cases where a variable value is never used after its assignment.","closed","","mkordas","2015-08-27T21:07:04Z","2015-08-28T05:32:25Z"
"","1783","Remove unused assignments. #1555","Fixes `UnusedAssignment` inspection violations in test code.  Description:  > This inspection points out the cases where a variable value is never used after its assignment, i.e.:   > - the variable never gets read after assignment OR   > - the value is always overwritten with another assignment before the next variable read OR   > - the variable initializer is redundant (for one of the above two reasons) OR   > - the variable is never used.","closed","","mkordas","2015-08-19T20:29:28Z","2015-08-20T03:19:56Z"
"","1610","Remove redundant toString() calls. #1555","Fixes `UnnecessaryToStringCall` inspection violations.  Description:  > Reports on any calls to toString() used in string concatenations and as arguments to the print() and println() methods of java.io.PrintWriter and java.io.PrintStream, the append() method of java.lang.StringBuilder and java.lang.StringBuffer or the trace(), debug(), info(), warn() and error() methods of org.slf4j.Logger. In these cases the conversion to string will be handled by the underlying library methods and an explicit call to toString() is no needed. >  Note that without the toString() call the expression will have slightly different semantics (the string null will be used instead of throwing a NullPointerException).","closed","","mkordas","2015-08-08T15:08:06Z","2015-08-14T23:33:45Z"
"","1829","Remove unnecessary toString() call in test code. #1555","Fixes `UnnecessaryToStringCall` inspection violations in test code.  Description:  > Reports on any calls to toString() used in string concatenations and as arguments to the print() and println() methods of java.io.PrintWriter and java.io.PrintStream, the append() method of java.lang.StringBuilder and java.lang.StringBuffer or the trace(), debug(), info(), warn() and error() methods of org.slf4j.Logger. In these cases the conversion to string will be handled by the underlying library methods and an explicit call to toString() is no needed. > Note that without the toString() call the expression will have slightly different semantics (the string null will be used instead of throwing a NullPointerException).","closed","","mkordas","2015-08-20T21:13:06Z","2015-08-21T13:16:31Z"
"","1630","Remove unnecessary this keyword. #1555","Fixes `UnnecessaryThis` inspection violations.  Description:  > Reports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles. >  For example: >  > ``` >  this.a = 3; > ```","closed","","mkordas","2015-08-09T11:58:04Z","2015-08-14T23:33:08Z"
"","1938","Remove unnecessary this keyword. #1555","Fixes `UnnecessaryThis` inspection violations.  Description:  > Reports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.","closed","","mkordas","2015-08-27T18:24:16Z","2015-08-27T20:18:43Z"
"","1926","Remove unnecessary this keyword. #1555","Fixes `UnnecessaryThis` inspection violations.  Description:  > Reports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.","closed","","mkordas","2015-08-26T22:22:15Z","2015-08-27T12:49:49Z"
"","1964","Issue #1555: Remove unnecessary this keyword","Fixes `UnnecessaryThis` inspection violations introduced in recent commit.  Description:  > Reports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.","closed","","mkordas","2015-08-28T19:53:50Z","2015-08-29T05:34:34Z"
"","1828","Remove unnecessary this in test code. #1555","Fixes `UnnecessaryThis` inspection violations in test code.  Description:  > Reports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.","closed","","mkordas","2015-08-20T21:13:01Z","2015-08-21T13:14:40Z"
"","1749","Remove unnecessary this in test code. #1555","Fixes `UnnecessaryThis` inspection violations in test code.  Description:  > Reports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.","closed","","mkordas","2015-08-17T21:10:03Z","2015-08-18T05:52:17Z"
"","1696","Remove unnecessary this. #1555","Fixes `UnnecessaryThis` inspection violations after recent commits.  Description:  > Reports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.","closed","","mkordas","2015-08-14T20:56:02Z","2015-08-15T03:42:29Z"
"","1679","Remove unnecessary this. #1555","Fixes `UnnecessaryThis` inspection violations after recent commits.  Description:  > Reports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.","closed","","mkordas","2015-08-12T22:37:00Z","2015-08-14T23:31:45Z"
"","1631","Remove unnecessary calls to superclass constructors. #1555","Fixes `UnnecessarySuperConstructor` inspection violations.  Description:  > Reports any no-argument calls to a superclass constructor as the first call of a constructor. Such calls are unnecessary, and may be removed.","closed","","mkordas","2015-08-09T12:12:12Z","2015-08-14T23:33:06Z"
"","1825","Remove unnecessary parentheses in test code. #1555","Fixes `UnnecessaryParentheses` inspection violations in test code.  Description:  > Reports on any instance of unnecessary parentheses. Parentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.","closed","","mkordas","2015-08-20T21:12:27Z","2015-08-21T13:11:59Z"
"","1843","Remove unnecessary local variables. #1555","Fixes `UnnecessaryLocalVariable` inspection violations.  Description:  > Reports unnecessary local variables, which add nothing to the comprehensibility of a method. Variables caught include local variables which are immediately returned, local variables that are immediately assigned to another variable and then not used, and local variables which always have the same value as another local variable or parameter.","closed","","mkordas","2015-08-21T22:55:40Z","2015-08-22T11:36:43Z"
"","1793","Remove unnecessary local variables. #1555","Fixes `UnnecessaryLocalVariable` inspection violation.  Description:  > Reports unnecessary local variables, which add nothing to the comprehensibility of a method. Variables caught include local variables which are immediately returned, local variables that are immediately assigned to another variable and then not used, and local variables which always have the same value as another local variable or parameter.","closed","","mkordas","2015-08-19T20:31:26Z","2015-08-20T03:42:51Z"
"","1597","Remove unnecessary Javadoc tags. #1555","Fixes `UnnecessaryJavaDocLink` inspection violations.  Description:  > Reports any Javadoc @see, {@link} and {@linkplain} tags which reference the method owning the comment, the super method of the method owning the comment or the class containing the comment. Such links are unnecessary and can be safely removed using this inspections quickfix. The quickfix will remove the entire Javadoc comment if the link is its only content.","closed","","mkordas","2015-08-08T12:49:09Z","2015-08-14T23:33:36Z"
"","1754","Remove unnecessary @inheritDoc. #1555","Fixes `UnnecessaryInheritDoc` inspection violations.  Description:  > Reports any Javadoc comments which contain only the {@inheritDoc} tag. Since Javadoc copies the super class' comment if no comment is present, a comment containing only an {@inheritDoc} adds nothing.","closed","","mkordas","2015-08-18T19:47:57Z","2015-08-19T03:24:28Z"
"","1652","Remove unnecessary @inheritDoc tags. #1555","Fixes `UnnecessaryInheritDoc` inspection violations.  Description:  > Reports any Javadoc comments which contain only the {@inheritDoc} tag. Since Javadoc copies the super class' comment if no comment is present, a comment containing only an {@inheritDoc} adds nothing.","closed","","mkordas","2015-08-10T20:06:57Z","2015-08-14T23:31:30Z"
"","1750","Remove unnecessarily fully qualified names in test code. #1555","Fixes `UnnecessaryFullyQualifiedName` inspection violations in test code.  Description:  > Reports on fully qualified class names which can be shortened. The quick fix for this inspection will shorten the fully qualified names, adding import statements as necessary.","closed","","mkordas","2015-08-17T21:12:23Z","2015-08-20T03:37:34Z"
"","1758","Remove unnecessary explicit numeric cast. #1555","Fixes `UnnecessaryExplicitNumericCast` inspection violations in test code.  Description:  > Reports any primitive numeric casts which would otherwise be inserted implicitly by the compiler.","closed","","mkordas","2015-08-18T19:50:06Z","2015-08-19T03:29:24Z"
"","1609","Remove unnecessary enum modifiers. #1555","Fixes `UnnecessaryEnumModifier` inspection violations.  Description:  > Reports on any redundant modifiers on enumerated classes or components of enumerated classes.","closed","","mkordas","2015-08-08T15:07:55Z","2015-08-14T23:33:09Z"
"","1876","Remove redundant no-arg constructor. #1555","Fixes `UnnecessaryConstructor` inspection violations.  Description:  > Reports unnecessary constructors. A constructor is unnecessary if it is the only constructor of a class, has no parameters, has the same access modifiers as its containing class, and does not perform any initialization except explicitly or implicitly calling the super class constructor without arguments. Such a constructor can be safely removed as it will be generated by the compiler even if not specified.","closed","","mkordas","2015-08-23T21:00:21Z","2015-08-25T11:01:01Z"
"","1826","Remove unnecessary constant array creation expressions. #1555","Fixes `UnnecessaryConstantArrayCreationExpression` inspection violations in test code.  Description:  > Reports any constant new array expression which can be replaced with an array initializer. Array initializers omit the type declaration because that is already specified by the declaration of the variable the expression is assigned to.","closed","","mkordas","2015-08-20T21:12:42Z","2015-08-21T13:12:56Z"
"","1734","Remove unnecessary boxing in test code. #1555","Fixes `UnnecessaryBoxing` inspection violations in test code.  Description:  > Reports ""boxing"", e.g. wrapping of primitive values in objects. Boxing is unnecessary under Java 5 and newer, and can be safely removed. > This inspection only reports if the project or module is configured to use a language level of 5.0 or higher.","closed","","mkordas","2015-08-16T22:08:19Z","2015-08-17T03:51:52Z"
"","1632","Remove unnecessary qualifiers. #1555","Fixes `UnnecessarilyQualifiedStaticUsage` inspection violations.  Description:  > Reports calls to static methods or accesses of static fields on the current class which are qualified with the class name. Such qualification is unnecessary, and may be safely removed.","closed","","mkordas","2015-08-09T12:43:14Z","2017-05-08T18:14:44Z"
"","1827","Remove unnecessarily qualified statically imported elements. #1555","Fixes `UnnecessarilyQualifiedStaticallyImportedElement` inspection violations in test code.  Description:  > Reports any references to static members which are statically imported and also qualified with their containing class name. Because the elements are already statically imported such qualification is unnecessary and can be removed.","closed","","mkordas","2015-08-20T21:12:54Z","2015-08-21T13:13:49Z"
"","1608","Add additional suppression for unchecked operation. #1555","Fixes `UNCHECKED_WARNING` inspection violations.  Description:  > Unchecked overriding: return type requires unchecked conversion. Found 'java.lang.Object', required 'T' (at line 251). > Signals places where an unchecked warning is issued by the compiler, for example: >  > ``` > void f(HashMap map) { >   map.put(""key"", ""value""); >   } > ```","closed","","mkordas","2015-08-08T15:07:46Z","2015-08-14T23:33:09Z"
"","1819","Use multi-catch in test code. #1555","Fixes `TryWithIdenticalCatches` inspection violations in test code.  Description:  > Reports identical catch sections in try blocks under JDK 7. A quickfix is available to collapse the sections into a multi-catch section. > This inspection only reports if the project or module is configured to use a language level of 7.0 or higher.","closed","","mkordas","2015-08-20T21:11:45Z","2015-08-21T13:07:28Z"
"","1848","Decrease scope of variables. #1555","Fixes `TooBroadScope` inspection violations.  Description:  > Reports any variable declarations of which the scope can be narrowed. Especially useful for ""Pascal style"" declarations at the start of a method, but variables with too broad a scope are also often left over after refactorings.","closed","","mkordas","2015-08-21T22:56:37Z","2015-08-22T11:41:29Z"
"","1665","Decrease scope of variables. #1555","Fixes `TooBroadScope` inspection violations.  Description:  > Reports any variable declarations of which the scope can be narrowed. Especially useful for ""Pascal style"" declarations at the start of a method, but variables with too broad a scope are also often left over after refactorings.","closed","","mkordas","2015-08-11T20:55:50Z","2015-08-14T23:31:34Z"
"","1966","Issue #1555: Narrow scope of variable","Fixes `TooBroadScope` inspection violations introduced in recent commit.  Description:  > Reports any variable declarations of which the scope can be narrowed. Especially useful for ""Pascal style"" declarations at the start of a method, but variables with too broad a scope are also often left over after refactorings.","closed","","mkordas","2015-08-28T19:54:19Z","2015-08-29T05:36:42Z"
"","1580","Replace toArray() argument with correctly sized array. #1555","Fixes `ToArrayCallWithZeroLengthArrayArgument` inspection violation.  Description:  > Reports any call to toArray() on an object of type or subtype java.util.Collection with a zero-length array argument. When passing in an array of too small size, the toArray() method has to construct a new array of the right size using reflection. This has significantly worse performance than passing in an array of at least the size of the collection itself.","closed","","mkordas","2015-08-07T19:59:17Z","2015-08-08T05:10:42Z"
"","1797","Remove unchecked exceptions from throws clauses in test code. #1555","Fixes `ThrowsRuntimeException` inspection violations in test code.  Description:  > Reports declarations of unchecked exceptions (RuntimeException and its subclasses) in the throws clause of a method. Declaration of unchecked exceptions are not required and may be removed or moved to a Javadoc @throws tag.","closed","","mkordas","2015-08-19T20:32:43Z","2015-08-20T03:50:05Z"
"","1589","Remove unchecked exception from throws. #1555","Fixes `ThrowsRuntimeException` inspection violation.  Description:  > Reports declarations of unchecked exceptions (RuntimeException and its subclasses) in the throws clause of a method. Declaration of unchecked exceptions are not required and may be removed or moved to a Javadoc @throws tag.","closed","","mkordas","2015-08-07T22:17:48Z","2015-08-08T05:18:42Z"
"","1824","Remove call to printStackTrace() in test code. #1555","Fixes `ThrowablePrintStackTrace` inspection violations in test code.  Description:  > Reports any calls to Throwable.printStackTrace() without arguments. Such statements are often used for temporary debugging, and should probably be either removed from production code, or replaced with a more robust logging facility.","closed","","mkordas","2015-08-20T21:12:22Z","2015-08-21T13:11:21Z"
"","1936","Rename suspicious getters and setters. #1555","Fixes `SuspiciousGetterSetter` inspection violations.  Description:  > Reports suspicious getter or setter methods. A getter or setter is suspicious if it accesses a different field than would be expected by its name.","closed","","mkordas","2015-08-27T18:24:01Z","2015-08-27T19:54:49Z"
"","1867","Fix suspicious getters and setters. #1555","Fixes `SuspiciousGetterSetter` inspection violations.  Description:  > Reports suspicious getter or setter methods. A getter or setter is suspicious if it accesses a different field than would be expected by its name.","closed","","mkordas","2015-08-22T22:57:49Z","2015-08-25T10:34:27Z"
"","1850","Fix suspicious getters and setters. #1555","Fixes `SuspiciousGetterSetter` inspection violations.  Description:  > Reports suspicious getter or setter methods. A getter or setter is suspicious if it accesses a different field than would be expected by its name.","closed","","mkordas","2015-08-21T22:56:50Z","2015-08-22T11:43:22Z"
"","1806","Fix suspicious getters. #1555","Fixes `SuspiciousGetterSetter` inspection violations.  Description:  > Reports suspicious getter or setter methods. A getter or setter is suspicious if it accesses a different field than would be expected by its name.","closed","","mkordas","2015-08-20T21:07:57Z","2015-08-21T12:19:17Z"
"","1762","Fix suspicious getters and setters in IndentationCheck. #1555","Fixes `SuspiciousGetterSetter` inspection violations in IndentationCheck.  Description:  > Reports suspicious getter or setter methods. A getter or setter is suspicious if it accesses a different field than would be expected by its name.","closed","","mkordas","2015-08-18T20:42:26Z","2015-08-19T03:32:53Z"
"","1823","Use field that was unused and remove suppression. #1555","Fixes `SuppressionAnnotation` inspection violations in test code.  Description:  > Reports any inspection suppression comments or annotations.","closed","","mkordas","2015-08-20T21:12:17Z","2015-08-26T21:43:24Z"
"","1821","Add missing locale to String case conversions in test code. #1555","Fixes `StringToUpperWithoutLocale` inspection violations in test code.  Description:  > Reports any call of toUpperCase() or toLowerCase() on String objects which do not specify a java.util.Locale. Such calls are usually incorrect in an internationalized environment.","closed","","mkordas","2015-08-20T21:11:57Z","2015-08-21T13:08:45Z"
"","1586","Use StringBuilder to concatenate strings. #1555","Fixes `StringReplaceableByStringBuffer` inspection violations.  Description: Reports any variables declared as java.lang.String which are repeatedly appended to. Such variables may be more efficiently declared as java.lang.StringBuffer or java.lang.StringBuilder.","closed","","mkordas","2015-08-07T21:51:42Z","2015-08-08T05:15:08Z"
"","1637","Use isEmpty() instead of """".equals() on strings. #1555","Fixes `StringEqualsEmptyString` inspection violations.  Description:  > Reports .equals() being called to compare a String with an empty string. It is normally more performant to test a String for emptiness by comparing its .length() to zero instead.","closed","","mkordas","2015-08-09T14:00:57Z","2015-08-14T23:33:02Z"
"","1765","Remove string concatenation done inside string builders. #1555","Fixes `StringConcatenationInsideStringBufferAppend` inspection violations in test code.  Description:  > Reports String concatenation used as the argument to StringBuffer.append(), StringBuilder.append() or Appendable.append(). Such calls may profitably be turned into chained append calls on the existing StringBuffer/Builder/Appendable, saving the cost of an extra StringBuffer/Builder allocation. > This inspection ignores compile time evaluated String concatenations, which when converted to chained append calls would only worsen performance.","closed","","mkordas","2015-08-18T20:43:19Z","2015-08-20T03:25:30Z"
"","1715","Remove string concatenation in format string argument. #1555","Fixes `StringConcatenationInFormatCall` inspection violations.  Description:  > Reports non-constant string concatenations used as a format string argument. Often this is the result of mistakenly concatenating a string format argument by typing a '+' when a ',' was meant. This inspection checks calls to appropriate methods on java.util.Formatter, java.lang.String, java.io.PrintWriter, or java.io.PrintStream.","closed","","mkordas","2015-08-16T00:25:30Z","2015-08-16T04:01:37Z"
"","1721","Remove non-final static field. #1555","Fixes `StaticNonFinalField` inspection violations.  Description:  > Reports non-final static fields.","closed","","mkordas","2015-08-16T15:25:09Z","2015-08-17T04:12:20Z"
"","1760","Rename static methods not following convention in test code. #1555","Fixes `StaticMethodNamingConvention` inspection violations in test code.  Description:  > Reports static methods whose names are either too short, too long, or do not follow the specified regular expression pattern.","closed","","mkordas","2015-08-18T19:50:22Z","2015-08-20T05:04:06Z"
"","1812","Do not use static field referenced by subclass. #1555","Fixes `StaticFieldReferenceOnSubclass` inspection violations.  Description:  > Reports static field accesses where the call is qualified by a subclass of the declaring class, rather than the declaring class itself. Java allows such qualification, but such accesses may be confusing, and may indicate a subtle confusion of inheritance and overriding.","closed","","mkordas","2015-08-20T21:08:43Z","2015-08-22T11:27:51Z"
"","1576","Rename variables with 'standard' names of unexpected types. #1555","Fixes `StandardVariableNames` inspection violations.  Description:  > Reports on any variables with 'standard' names which are of unexpected types. Such names may be confusing. Standard names and types are as follows: > - i, j, k, m, n - int > - f - float > - d - double > - b - byte > - c, ch - char > - l - long > - s, str - String","closed","","mkordas","2015-08-07T18:10:52Z","2015-08-08T04:39:18Z"
"","1847","Fix variables with standard names. #1555","Fixes `StandardVariableNames` inspection violations in test code.  Description:  > Reports on any variables with 'standard' names which are of unexpected types. Such names may be confusing. Standard names and types are as follows: > - i, j, k, m, n - int > - f - float > - d - double > - b - byte > - c, ch - char > - l - long > - s, str - String","closed","","mkordas","2015-08-21T22:56:27Z","2015-08-22T11:40:30Z"
"","1816","Fix confusing variable names. #1555","Fixes `StandardVariableNames` inspection violations in test code.  Description:  > Reports on any variables with 'standard' names which are of unexpected types. Such names may be confusing. Standard names and types are as follows: > - i, j, k, m, n - int > - f - float > - d - double > - b - byte > - c, ch - char > - l - long > - s, str - String","closed","","mkordas","2015-08-20T21:09:27Z","2015-08-21T12:54:00Z"
"","1592","Optimize single character starts with. #1555","Fixes `SingleCharacterStartsWith` inspection violations.  False-negative reported to PMD: https://sourceforge.net/p/pmd/bugs/1392","closed","","mkordas","2015-08-08T12:46:18Z","2015-08-14T23:33:38Z"
"","1581","Simplify empty string check. #1555","Fixes `Simplify empty string check` inspection violations.  Description:  > Reports .equals() being called to compare a String with an empty string. It is normally more performant to test a String for emptiness by comparing its .length() to zero instead.","closed","","mkordas","2015-08-07T20:29:32Z","2015-08-08T05:11:42Z"
"","1729","Simplify JUnit assertions. #1555","Fixes `SimplifiableJUnitAssertion` inspection violation in test code.  Description:  > Reports any JUnit assertTrue calls which can be replaced by equivalent assertEquals calls. assertEquals calls will normally give better error messages in case of test failure than assertTrue can.","closed","","mkordas","2015-08-16T22:07:52Z","2015-08-18T04:38:22Z"
"","1991","Issue #1555: Avoid reusing variables","Fixes `ReuseOfLocalVariable` inspection violation.  Description:  > Reports local variables that are ""reused"", overwriting their values with new values unrelated to their original use. Such local variable reuse may be confusing, as the intended semantics of the local variable may vary with each use. It may also be prone to bugs, if code changes result in values that were thought to be overwritten actually being live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity.","closed","","mkordas","2015-08-29T08:28:57Z","2015-08-29T13:12:26Z"
"","1634","Return unmodifiable collections from methods. #1555","Fixes `ReturnOfCollectionField` inspection violations.  Description:  > Reports any attempt to return an array or Collection field from a method. Since the array or Collection may have its contents modified by the calling method, this construct may result in an object having its state modified unexpectedly. While occasionally useful for performance reasons, this construct is inherently bug-prone.","closed","","mkordas","2015-08-09T13:24:16Z","2015-08-14T23:33:05Z"
"","1789","Return unmodifiable collection from class in test code. #1555","Fixes `ReturnOfCollectionField` inspection violations in test code.  Description:  > Reports any attempt to return an array or Collection field from a method. Since the array or Collection may have its contents modified by the calling method, this construct may result in an object having its state modified unexpectedly. While occasionally useful for performance reasons, this construct is inherently bug-prone.","closed","","mkordas","2015-08-19T20:30:25Z","2015-08-20T03:38:28Z"
"","1948","Remove redundant throws declarations. #1555","Fixes `RedundantThrowsDeclaration` inspection violations.  Description:  > This inspection reports exceptions that are declared in a method's signature but never thrown by the method itself.","closed","","mkordas","2015-08-27T21:03:32Z","2015-08-28T05:29:57Z"
"","1939","Remove redundant throws declarations. #1555","Fixes `RedundantThrowsDeclaration` inspection violations.  Description:  > This inspection reports exceptions that are declared in a method's signature but never thrown by the method itself.","closed","","mkordas","2015-08-27T18:24:40Z","2015-08-27T20:20:02Z"
"","1670","Remove redundant throws declarations. #1555","Fixes `RedundantThrowsDeclaration` inspection violations.  Description:  > This inspection reports exceptions that are declared in a method's signature but never thrown by the method itself.","closed","","mkordas","2015-08-12T20:53:02Z","2015-08-14T23:31:36Z"
"","1924","Remove redundant throws declarations. #1555","Fixes `RedundantThrows` inspection violations.  Description:  > This inspection reports exceptions that are declared in a method's signature but never thrown by the method itself or its implementations/derivatives.","closed","","mkordas","2015-08-26T22:22:03Z","2015-08-27T12:47:16Z"
"","1613","Remove redundant throws declarations. #1555","Fixes `RedundantThrows` inspection violations.  Description:  > This inspection reports exceptions that are declared in a method's signature but never thrown by the method itself or its implementations/derivatives.","closed","","mkordas","2015-08-08T15:39:31Z","2015-08-14T23:33:08Z"
"","1822","Remove redundant throws. #1555","Fixes `RedundantThrows` inspection violations in test code.  Description:  > This inspection reports exceptions that are declared in a method's signature but never thrown by the method itself or its implementations/derivatives.","closed","","mkordas","2015-08-20T21:12:06Z","2015-08-21T13:09:42Z"
"","1756","Remove redundant suppressions from test code. #1555","Fixes `RedundantSuppression` inspection violations in test code.  Description:  > This inspection reports usages of > @SuppressWarning annotation, or > // noinspection line comment, or > /*\* noinspection */ JavaDoc comment > which can be safely removed because inspection they affect is no longer applicable in this context.","closed","","mkordas","2015-08-18T19:48:37Z","2015-08-19T03:27:00Z"
"","1763","Remove redundant overriding methods. #1555","Fixes `RedundantMethodOverride` inspection violations in test code.  Description:  > Reports any method that has a body and signature that are identical to its super method. Such a method is redundant and probably a coding error.","closed","","mkordas","2015-08-18T20:42:53Z","2015-08-21T12:14:47Z"
"","1607","Remove redundant empty method. #1555","Fixes `RedundantMethodOverride` inspection violation.  Description:  > Reports any method that has a body and signature that are identical to its super method. Such a method is redundant and probably a coding error.","closed","","mkordas","2015-08-08T15:07:29Z","2015-08-14T23:33:08Z"
"","1782","Remove unnecessary cast expression. #1555","Fixes `RedundantCast` inspection violations in test code.  Description:  > This inspection reports unnecessary cast expressions.","closed","","mkordas","2015-08-19T20:29:10Z","2015-08-20T03:17:55Z"
"","1781","Remove explicit array creation. #1555","Fixes `RedundantArrayCreation` inspection violations in test code.  Description:  > This inspection reports unnecessary creation of array expression to be passed as an argument to varargs parameter.","closed","","mkordas","2015-08-19T20:28:40Z","2015-08-20T03:16:34Z"
"","1577","Rename variables with questionable names. #1555","Fixes `QuestionableName` inspection violations.  Description:  > Reports on any variables, methods, or classes with questionable names. This inspection is best used to report common metasyntactic variables which may be used as names by lazy or confused developers. >  Use the list below to specify names which should be reported","closed","","mkordas","2015-08-07T19:07:56Z","2015-08-08T04:40:29Z"
"","1759","Fix questionable names in test code. #1555","Fixes `QuestionableName` inspection violations in test code.  Description:  > Reports on any variables, methods, or classes with questionable names. This inspection is best used to report common metasyntactic variables which may be used as names by lazy or confused developers.","closed","","mkordas","2015-08-18T19:50:15Z","2015-08-19T03:30:19Z"
"","1937","Decrease visibility of public inner classes. #1555","Fixes `PublicInnerClass` inspection violations.  Description:  > Reports public inner classes.","closed","","mkordas","2015-08-27T18:24:08Z","2015-08-27T19:56:04Z"
"","1840","Decrease visibility of public constructor in non-public classes. #1555","Fixes `PublicConstructorInNonPublicClass` inspection violations.  Description:  > Reports all constructors in non-public classes that are declared public.","closed","","mkordas","2015-08-21T22:53:06Z","2015-08-22T11:33:57Z"
"","1720","Decrease visibility of public constructor in non-public classes. #1555","Fixes `PublicConstructorInNonPublicClass` inspection violations.  Description:  > Reports all constructors in non-public classes that are declared public.","closed","","mkordas","2015-08-16T15:24:23Z","2015-08-17T04:13:32Z"
"","1868","Review visibility and usages of protected fields. #1555","Fixes `ProtectedField` inspection violations in test code.  Description:  > Reports protected instance variables. Constants (i.e. variables marked static and final) are not reported.","closed","","mkordas","2015-08-22T23:13:59Z","2015-08-25T13:42:52Z"
"","1808","Reduce number of parameters in method. #1555","Fixes `ParametersPerMethod` inspection violation.  Description:  > Reports methods with too many parameters. Methods with too many parameters can be a good sign that refactoring is necessary. Methods whose signatures are inherited from library classes are ignored by this inspection.","closed","","mkordas","2015-08-20T21:08:06Z","2015-08-21T12:48:13Z"
"","1667","Decrease visibility of inner classes. #1555","Fixes `PackageVisibleInnerClass` inspection violations.  Description:  > Reports package-local inner classes.","closed","","mkordas","2015-08-11T21:32:44Z","2015-08-14T23:31:34Z"
"","1699","Decrease visibility of package-local class. #1555","Fixes `PackageVisibleInnerClass` inspection violation.  Description:  > Reports package-local inner classes.","closed","","mkordas","2015-08-14T23:30:22Z","2015-08-15T03:44:47Z"
"","1875","Encapsulate package-visible fields. #1555","Fixes `PackageVisibleField` inspection violations.  Description:  > Reports package-visible instance variables. Constants (i.e. variables marked static and final) are not reported.","closed","","mkordas","2015-08-23T21:00:14Z","2015-08-25T11:00:26Z"
"","1596","Hide package-visible instance fields. #1555","Fixes `PackageVisibleField` inspection violation.  Description:  > Reports package-visible instance variables. Constants (i.e. variables marked static and final) are not reported.","closed","","mkordas","2015-08-08T12:47:32Z","2015-08-14T23:33:38Z"
"","1604","Mark methods final if they are used in constructors. #1555","Fixes `OverridableMethodCallDuringObjectConstruction` inspection violations.  Description:  > Reports any calls to overridable methods of the current class during object construction. A call is during object construction if it is made inside a constructor, in an non-static instance initializer, in a non-static field initializer or inside a clone(), readObject() or readObjectNoData() method. Methods are overridable if they are not declared final, static or private. Such calls may result in subtle bugs, as the object is not guaranteed to be initialized before the method call occurs.","closed","","mkordas","2015-08-08T12:54:08Z","2015-08-14T23:33:39Z"
"","1999","Issue #1555: Replace complex boolean expression with set of tokens","Fixes `OverlyComplexBooleanExpression` inspection violation.  Description:  > Reports boolean expressions with too many terms. Such expressions may be confusing and bug-prone.","closed","","mkordas","2015-08-29T19:55:58Z","2015-08-29T22:42:39Z"
"","1992","Issue #1555: Remove usage of obsolete collection","Fixes `ObsoleteCollection` inspection violations.  Description:  > Reports any uses of java.util.Vector or java.util.Hashtable. While still supported, these classes were made obsolete by the JDK1.2 collection classes, and should probably not be used in new development.","closed","","mkordas","2015-08-29T08:29:32Z","2015-08-29T13:12:56Z"
"","1917","Remove call to default toString() implementation. #1555","Fixes `ObjectToString` inspection violations.  Description:  > Reports any calls to .toString() which use the default implementation from java.lang.Object. The default implementation is rarely desired, but easy to use by accident. Calls to .toString() on objects of type java.lang.Object are ignored by this inspection.","closed","","mkordas","2015-08-26T22:20:44Z","2015-08-27T12:41:59Z"
"","1712","Add missing toString() methods. #1555","Fixes `ObjectToString` inspection violations.  Description:  > Reports any calls to .toString() which use the default implementation from java.lang.Object. The default implementation is rarely desired, but easy to use by accident. Calls to .toString() on objects of type java.lang.Object are ignored by this inspection.","closed","","mkordas","2015-08-15T21:33:29Z","2015-08-18T04:34:24Z"
"","1785","Remove test for default implementation of toString(). #1555","Fixes `ObjectToString` inspection violations in test code.  Description:  > Reports any calls to .toString() which use the default implementation from java.lang.Object. The default implementation is rarely desired, but easy to use by accident. Calls to .toString() on objects of type java.lang.Object are ignored by this inspection.","closed","","mkordas","2015-08-19T20:29:54Z","2015-08-20T03:29:12Z"
"","1813","Use EqualsVerifier to test equals methods. #1555","Fixes `ObjectEqualsNull` inspection violations.  Description:  > Reports on calls to .equals() which have null as an argument. The semantics of such calls are almost certainly not what was intended.","closed","","mkordas","2015-08-20T21:08:59Z","2015-08-26T22:20:52Z"
"","1820","Use String instead of constant in test code. #1555","Fixes `NumericToString` inspection violations in test code.  Description:  > Reports any call of toString() on numeric objects. Such calls are usually incorrect in an internationalized environment.","closed","","mkordas","2015-08-20T21:11:49Z","2015-08-21T13:08:00Z"
"","1837","Remove usage of null as argument to varagrs in test code. #1555","Fixes `NullArgumentToVariableArgMethod` inspection violations in test code.  Description:  > Reports any calls to a variable-argument method which has a null in the variable-argument position (e.g System.out.printf(""%s"", null) ). Such a null argument may be confusing, as it is not wrapped as a single-element array, as may be expected.","closed","","mkordas","2015-08-21T22:52:11Z","2015-08-22T11:30:42Z"
"","1672","Mark method as synchronized if it override synchronized method. #1555","Fixes `NonSynchronizedMethodOverridesSynchronizedMethod` inspection violations.  Description:  > Reports non-synchronized methods overriding synchronized methods.","closed","","mkordas","2015-08-12T21:24:46Z","2015-08-12T21:28:45Z"
"","1638","Use short circuit boolean expression. #1555","Fixes `NonShortCircuitBoolean` inspection violations.  Description:  > Reports on any uses of the non-short-circuit forms of boolean 'and' and 'or' ( & and | ). The non-short-circuit versions are occasionally useful, but their presence is often due to typos of the short-circuit forms ( && and || ), and may lead to subtle bugs.","closed","","mkordas","2015-08-09T14:02:53Z","2015-08-14T23:33:01Z"
"","1711","Remove unnecessary synchronization. #1555","Fixes `NonSerializableFieldInSerializableClass` inspection violation.  Description:  > Reports non-synchronized methods overriding synchronized methods.  Fixes `NonSynchronizedMethodOverridesSynchronizedMethod` inspection violation.  Description:  > Reports non-Serializable fields in Serializable classes. Such fields will result in runtime exceptions if the object is serialized. Fields declared transient or static are not reported, nor are fields of classes which have defined a writeObject method. For purposes of this inspection, fields with java.util.Collection or java.util.Map types are assumed to be Serializable, unless the types they are declared to contain are non-Serializable.","closed","","mkordas","2015-08-15T20:37:24Z","2015-08-16T03:55:51Z"
"","1856","Use serializable type of field in serializable class. #1555","Fixes `NonSerializableFieldInSerializableClass` inspection violation.  Description:  > Reports non-Serializable fields in Serializable classes. Such fields will result in runtime exceptions if the object is serialized. Fields declared transient or static are not reported, nor are fields of classes which have defined a writeObject method. For purposes of this inspection, fields with java.util.Collection or java.util.Map types are assumed to be Serializable, unless the types they are declared to contain are non-Serializable.","closed","","mkordas","2015-08-22T22:52:50Z","2015-08-25T10:04:54Z"
"","1594","Use protected constructors in abstract classes. #1555","Fixes `NonProtectedConstructorInAbstractClass` inspection violations.  Description:  > Reports constructors in abstract classes that are not declared protected, package-protected or private.","closed","","mkordas","2015-08-08T12:47:04Z","2015-08-14T23:33:38Z"
"","1666","Decrease visibility of constructor in abstract class. #1555","Fixes `NonProtectedConstructorInAbstractClass` inspection violation.  Description:  > Reports constructors in abstract classes that are not declared protected, package-protected or private.","closed","","mkordas","2015-08-11T21:02:51Z","2015-08-14T23:31:35Z"
"","1601","Make class final. #1555","Fixes `NonFinalUtilityClass` inspection violation.  Description:  > Reports utility classes which are not final. Utility classes have all fields and methods declared static. Giving such classes making them final prevents them from being inadvertently subclassed.","closed","","mkordas","2015-08-08T12:50:22Z","2015-08-09T02:06:15Z"
"","1887","Rename non-boolean method starting with question word. #1555","Fixes `NonBooleanMethodNameMayNotStartWithQuestion` inspection violations.  Description:  > Reports non-boolean methods whose names start with a question word. Non-boolean methods that override library methods are ignored by this inspection.","closed","","mkordas","2015-08-24T21:18:28Z","2015-08-26T15:36:04Z"
"","1874","Add arguments to created exceptions. #1555","Fixes `NewExceptionWithoutArguments` inspection violations.  Description:  > Reports exception instance creation without any arguments specified. When an exception is constructed without arguments it contains no information about the fault that happened, which makes debugging needlessly hard.","closed","","mkordas","2015-08-23T20:59:06Z","2015-08-25T10:49:34Z"
"","1928","Add argument to exception constructor invocation. #1555","Fixes `NewExceptionWithoutArguments` inspection violation.  Description:  > Reports exception instance creation without any arguments specified. When an exception is constructed without arguments it contains no information about the fault that happened, which makes debugging needlessly hard.","closed","","mkordas","2015-08-26T22:22:58Z","2015-08-27T12:51:42Z"
"","1700","Fix exception creation without any arguments specified. #1555","Fixes `NewExceptionWithoutArguments` inspection violation.  Description:  > Reports exception instance creation without any arguments specified. When an exception is constructed without arguments it contains no information about the fault that happened, which makes debugging needlessly hard.","closed","","mkordas","2015-08-14T23:37:17Z","2015-08-15T03:45:24Z"
"","1745","Remove nested assignment. #1555","Fixes `NestedAssignment` inspection violation in test code.  Description:  > Reports assignment expressions nested inside other expressions. While admirably terse, such expressions may be confusing, and violate the general design principle that a given construct should do precisely one thing.","closed","","mkordas","2015-08-17T20:34:09Z","2015-08-18T05:52:44Z"
"","1792","Rename negatively named boolean variable. #1555","Fixes `NegativelyNamedBooleanVariable` inspection violation.  Description:  > Reports negatively named variables, for example 'disabled', 'hidden', 'isNotChanged'. It is usually more clear to invert the boolean value and remove the negation from the name.","closed","","mkordas","2015-08-19T20:31:17Z","2015-08-20T03:41:36Z"
"","1842","Invert negated if-else. #1555","Fixes `NegatedIfElse` inspection violations.  Description:  > Reports if statements which contain else branches and whose conditions are negated. Flipping the order of the if and else branches will usually increase the clarity of such statements.","closed","","mkordas","2015-08-21T22:53:25Z","2015-08-22T11:35:53Z"
"","1633","Invert if statements with negated conditions. #1555","Fixes `NegatedIfElse` inspection violations.  Description:  > Reports if statements which contain else branches and whose conditions are negated. Flipping the order of the if and else branches will usually increase the clarity of such statements.","closed","","mkordas","2015-08-09T12:56:45Z","2015-08-14T23:33:05Z"
"","1965","Issue #1555: Flip negated if-else","Fixes `NegatedIfElse` inspection violations introduced in recent commit.  Description:  > Reports if statements which contain else branches and whose conditions are negated. Flipping the order of the if and else branches will usually increase the clarity of such statements.","closed","","mkordas","2015-08-28T19:53:57Z","2015-08-29T05:35:22Z"
"","1697","Invert conditional expressions that are negated. #1555","Fixes `NegatedConditional` inspection violations.  Description:  > Reports conditional expressions whose conditions are negated. Flipping the order of the conditional expression branches will usually increase the clarity of such statements.","closed","","mkordas","2015-08-14T21:00:31Z","2015-08-15T03:43:04Z"
"","1818","Simplify throws list in test code. #1555","Fixes `MultipleExceptionsDeclaredOnTestMethod` inspection violations.  Description:  > Reports JUnit test methods with more than one exception declared in the throws clause. Such a throws clause can be more concisely declared as `throws Exception`.","closed","","mkordas","2015-08-20T21:11:39Z","2015-08-21T13:06:58Z"
"","1861","Use only one exception on throws list for tests. #1555","Fixes `MultipleExceptionsDeclaredOnTestMethod` inspection violation  Description:  > Reports JUnit test methods with more than one exception declared in the throws clause. Such a throws clause can be more concisely declared as `throws Exception`.","closed","","mkordas","2015-08-22T22:57:13Z","2015-08-25T10:24:45Z"
"","1769","Add missing @Override annotations in test code. #1555","Fixes `MissingOverrideAnnotation` inspection violations in test code.  Description:  > Reports any methods which override methods in a superclass but do not have the @java.lang.Override annotation. > This inspection only reports if the project or module is configured to use a language level of 5.0 or higher.","closed","","mkordas","2015-08-18T20:43:45Z","2015-08-19T03:42:13Z"
"","1730","Flip misordered assertEquals parameters. #1555","Fixes `MisorderedAssertEqualsParameters` inspection violation in test code.  Description:  > Reports any calls to JUnit assertEquals() which have a non-literal as the expected result argument and a literal as the actual result argument. Such calls will behave fine for assertions which pass, but may give confusing error reports if their expected and actual arguments differ.","closed","","mkordas","2015-08-16T22:08:01Z","2015-08-17T03:48:05Z"
"","1784","Remove unused array declarations. #1555","Fixes `MismatchedArrayReadWrite` inspection violations in test code.  Description:  > Reports any array fields or variables whose contents are read but not written, or written but not read. Such mismatched reads and writes are pointless, and probably indicate dead, incomplete or erroneous code.","closed","","mkordas","2015-08-19T20:29:40Z","2015-08-20T03:20:50Z"
"","1671","Change name of private method conflicting with superclass method. #1555","Fixes `MethodOverridesPrivateMethod` inspection violations.  Description:  > Reports instance methods having the same name as a private method of a superclass. Such methods may result in confusing semantics, particularly if the private method is ever made publicly visible.","closed","","mkordas","2015-08-12T21:20:07Z","2015-08-14T23:31:36Z"
"","1716","Make methods static. #1555","Fixes `MethodMayBeStatic` inspection violations.  Description:  > Reports any methods which may safely be made static. A method may be static if it is not synchronized, it does not reference any of its class' non static methods and non static fields and is not overridden in a sub class.","closed","","mkordas","2015-08-16T01:24:51Z","2015-08-16T04:02:49Z"
"","1583","Make methods static. #1555","Fixes `MethodMayBeStatic` inspection violations.  Description:  > Reports any methods which may safely be made static. A method may be static if it is not synchronized, it does not reference any of its class' non static methods and non static fields and is not overridden in a sub class.","closed","","mkordas","2015-08-07T21:02:11Z","2015-08-08T05:14:16Z"
"","1770","Mark methods as static. #1555","Fixes `MethodMayBeStatic` inspection violations in test code introduced after recent commits.  Description:  > Reports any methods which may safely be made static. A method may be static if it is not synchronized, it does not reference any of its class' non static methods and non static fields and is not overridden in a sub class.","closed","","mkordas","2015-08-18T20:44:02Z","2015-08-19T03:43:21Z"
"","1950","Mark method as static. #1555","Fixes `MethodMayBeStatic` inspection violation introduced in recent commit.  Description:  > Reports any methods which may safely be made static. A method may be static if it is not synchronized, it does not reference any of its class' non static methods and non static fields and is not overridden in a sub class.","closed","","mkordas","2015-08-27T21:04:18Z","2017-05-31T20:19:01Z"
"","1920","Mark method as static. #1555","Fixes `MethodMayBeStatic` inspection violation introduced in recent commit.  Description:  > Reports any methods which may safely be made static. A method may be static if it is not synchronized, it does not reference any of its class' non static methods and non static fields and is not overridden in a sub class.","closed","","mkordas","2015-08-26T22:21:20Z","2015-08-27T12:44:12Z"
"","1810","Use varargs in test code. #1555","Fixes `MethodCanBeVariableArityMethod` inspection violations in test code.  Description:  > Reports methods with which can be converted to be a variable arity/varargs method, available in Java 5 and newer. > This inspection only reports if the project or module is configured to use a language level of 5.0 or higher.","closed","","mkordas","2015-08-20T21:08:26Z","2015-08-21T11:26:03Z"
"","1733","Convert parameters to varargs in test code. #1555","Fixes `MethodCanBeVariableArityMethod` inspection violations in test code.  Description:  > Reports methods with which can be converted to be a variable arity/varargs method, available in Java 5 and newer. > This inspection only reports if the project or module is configured to use a language level of 5.0 or higher.","closed","","mkordas","2015-08-16T22:08:14Z","2015-08-17T03:51:04Z"
"","1859","Fix local variable name in test code. #1555","Fixes `LocalVariableNamingConvention` inspection violations in test code.  Description:  > Reports local variables whose names are either too short, too long, or do not follow the specified regular expression pattern.","closed","","mkordas","2015-08-22T22:56:46Z","2015-08-25T10:23:13Z"
"","1855","Rename field to not interfere with local variable name. #1555","Fixes `LocalVariableHidingMemberVariable` inspection violation in test code.  Description:  > Reports local variables named identically to visible fields of their class or surrounding classes if it is a local variable inside of an inner or anonymous class. Such a variable name may be confusing.","closed","","mkordas","2015-08-22T22:52:44Z","2015-08-25T10:03:59Z"
"","1605","Use adapter instead of listener. #1555","Fixes `ListenerMayUseAdapter` inspection violations.  Description:  > Reports any classes which implement a listener, but may extend the corresponding adapter instead. The quickfix for this inspection will also remove any redundant empty methods left over after replacing the implementation of the listener with an extension of the corresponding adapter.","closed","","mkordas","2015-08-08T12:57:22Z","2015-08-14T23:33:40Z"
"","1582","Replace String literals of length one with char literals. #1555","Fixes `LengthOneStringsInConcatenation` inspection violations.  Description:  > Reports String literals of length one being used in concatenation. These literals may be replaced by equivalent character literals, gaining some performance enhancement.","closed","","mkordas","2015-08-07T20:54:18Z","2015-08-09T11:58:42Z"
"","1766","Use character literals in String.indexOf(). #1555","Fixes `LengthOneStringInIndexOf` inspection violations in test code.  Description:  > Reports String literals of length one being used as a parameter in String.indexOf() or String.lastIndexOf() calls. These String literals may be replaced by equivalent character literals, gaining some performance enhancement.","closed","","mkordas","2015-08-18T20:43:26Z","2015-08-20T03:24:34Z"
"","1599","Fix incorrect references in Javadoc. #1555","Fixes `JavadocReference` inspection violations.  Description:  > This inspection points out unresolved references inside javadoc","closed","","mkordas","2015-08-08T12:49:50Z","2015-08-14T23:33:36Z"
"","1600","Fix Javadoc problems. #1555","Fixes `JavaDoc` inspection violations.  Description:  > This inspection points out the following javadoc comment flaws: > - no javadoc where it is required > - required tag is missing > - invalid or incomplete tag > - javadoc description is missing or incomplete","closed","","mkordas","2015-08-08T12:50:10Z","2015-08-14T23:33:36Z"
"","1728","Make inner class static. #1555","Fixes `InnerClassMayBeStatic` inspection violation in test code.  Description:  > Reports any inner classes which may safely be made static. An inner class may be static if it doesn't reference its enclosing instance. >  A static inner class does not keep an implicit reference to its enclosing instance. This prevents a common cause of memory leaks and uses less memory per instance of the class.","closed","","mkordas","2015-08-16T22:07:11Z","2015-08-17T03:45:16Z"
"","1981","Issue #1555: Specify encoding explicitly","Fixes `ImplicitDefaultCharsetUsage` inspection violations.  Description:  > Reports method and constructor calls which implicitly use the platform's default charset. These can produce different results on (e.g. foreign language) systems that use a different default charset, resulting in unexpected behaviour.","closed","","mkordas","2015-08-28T23:35:11Z","2015-08-29T05:48:28Z"
"","1863","Specify charset used in test code. #1555","Fixes `ImplicitDefaultCharsetUsage` inspection violations.  Description:  > Reports method and constructor calls which implicitly use the platform's default charset. These can produce different results on (e.g. foreign language) systems that use a different default charset, resulting in unexpected behaviour.","closed","","mkordas","2015-08-22T22:57:25Z","2015-08-25T10:28:46Z"
"","1838","Use ignored results of calling methods in test code. #1555","Fixes `IgnoreResultOfCall` inspection violations in test code.  Description:  > Reports any calls to specific methods where the result of that call is ignored. Both methods specified in the inspection's settings and methods annotated with org.jetbrains.annotations.Contract(pure=true) are checked. For many methods, ignoring the result is perfectly legitimate, but for some methods it is almost certainly an error. Examples of methods where ignoring the result of a call is likely to be an error include java.io.inputStream.read(), which returns the number of bytes actually read, any method on java.lang.String or java.math.BigInteger, as all of those methods are side-effect free and thus pointless if ignored.","closed","","mkordas","2015-08-21T22:52:20Z","2015-08-22T11:31:42Z"
"","1651","Replace  tags with {@code ...} constructs. #1555","Fixes `HtmlTagCanBeJavadocTag` inspection violations.  Description:  > Reports use of `` tags in Javadoc comments. Since JDK1.5 these constructs may be replaced with `{@code ...}` constructs. This allows the use of angle brackets (`<`, `>`) inside the comment, instead of HTML character entities.","closed","","mkordas","2015-08-10T19:49:51Z","2015-08-14T23:31:31Z"
"","1701","Replace  tags with {@code ...} constructs. #1555","Fixes `HtmlTagCanBeJavadocTag` inspection violations.  Description:  > Reports use of  tags in Javadoc comments. Since JDK1.5 these constructs may be replaced with {@code ...} constructs. This allows the use of angle brackets (<, >) inside the comment, instead of HTML character entities.","closed","","mkordas","2015-08-14T23:57:57Z","2015-08-15T03:46:03Z"
"","1753","Replace  tags with {@code ...} constructs. #1555","Fixes `HtmlTagCanBeJavadocTag` inspection violations in test code.  Description:  > Reports use of  tags in Javadoc comments. Since JDK1.5 these constructs may be replaced with {@code ...} constructs. This allows the use of angle brackets (<, >) inside the comment, instead of HTML character entities.","closed","","mkordas","2015-08-18T19:47:50Z","2015-08-19T03:23:54Z"
"","1732","Replace  tags with {@code ...} constructs in test code. #1555","Fixes `HtmlTagCanBeJavadocTag` inspection violation in test code.  Description:  > Reports use of  tags in Javadoc comments. Since JDK1.5 these constructs may be replaced with {@code ...} constructs. This allows the use of angle brackets (<, >) inside the comment, instead of HTML character entities.","closed","","mkordas","2015-08-16T22:08:09Z","2015-08-17T03:50:02Z"
"","1735","Replace for with foreach in test code. #1555","Fixes `ForCanBeForeach` inspection violations in test code.  Description:  > Reports for loops which iterate over collections or arrays, and can be replaced with the foreach iteration syntax, available in Java 5 and newer.","closed","","mkordas","2015-08-16T22:08:24Z","2015-08-17T03:52:44Z"
"","1578","Fix comparison of double value with zero. #1555","Fixes `FloatingPointEquality` inspection violation.  Description:  > Reports floating-point values being compared with an == or != operator. Floating point values are inherently inaccurate, and comparing them for exact equality is almost never the desired semantics. This inspection ignores comparisons with zero and infinity literals.","closed","","mkordas","2015-08-07T19:35:33Z","2015-08-08T04:41:23Z"
"","1919","Remove unused field. #1555","Fixes `FieldMayBeStatic` inspection violations.  Description:  > Reports any instance variables which may safely be made static. A field may be static if it is declared final, and is initialized with a constant.","closed","","mkordas","2015-08-26T22:21:15Z","2015-08-27T12:43:18Z"
"","1814","Make field private static. #1555","Fixes `FieldMayBeStatic` inspection violations.  Description:  > Reports any instance variables which may safely be made static. A field may be static if it is declared final, and is initialized with a constant.","closed","","mkordas","2015-08-20T21:09:08Z","2015-08-21T12:52:12Z"
"","1858","Mark fields as private static final in test code. #1555","Fixes `FieldMayBeStatic` inspection violations in test code.  Description:  > Reports any instance variables which may safely be made static. A field may be static if it is declared final, and is initialized with a constant","closed","","mkordas","2015-08-22T22:56:41Z","2015-08-25T10:21:10Z"
"","1695","Mark fields as final. #1555","Fixes `FieldMayBeFinal` inspection violations.  Description:  > Reports any fields which may safely be made final. A static field may be final if it is initialized in its declaration or in one static class initializer, but not both. A non-static field may be final if it is initialized in its declaration or in one non-static class initializer or in all constructors.","closed","","mkordas","2015-08-14T20:53:05Z","2015-08-15T03:41:42Z"
"","1757","Remove unused field. #1555","Fixes `FieldCanBeLocal` inspection violation.  Description:  > This inspection searches for redundant class fields that can be replaced with local variables. If all local usages of a field are preceded by assignments to that field, the field can be removed and its usages replaced with local variables.","closed","","mkordas","2015-08-18T19:48:49Z","2015-08-19T03:28:31Z"
"","1748","Create constants out of fields in test code. #1555","Fixes `FieldCanBeLocal` inspection violation in test code.  Description:  > This inspection searches for redundant class fields that can be replaced with local variables. If all local usages of a field are preceded by assignments to that field, the field can be removed and its usages replaced with local variables.","closed","","mkordas","2015-08-17T20:54:32Z","2015-08-18T05:51:20Z"
"","1724","Correct name of exception. #1555","Fixes `ExceptionNameDoesntEndWithException` inspection violation in test code.  Description:  > Reports exception classes whose names don't end with 'Exception'.","closed","","mkordas","2015-08-16T22:05:52Z","2015-08-17T03:36:54Z"
"","1602","Do not ignore stacktrace of previous exception. #1555","Fixes `ExceptionFromCatchWhichDoesntWrap` inspection violation.  Description:  > Reports exceptions constructed and thrown from inside catch blocks, which do not ""wrap"" the caught exception. It is considered good practice when throwing an exception in response to an exception to wrap the initial exception, so that valuable context information such as stack frames and line numbers are not lost.","closed","","mkordas","2015-08-08T12:51:22Z","2015-08-09T02:08:03Z"
"","1866","Remove declared error that should not occur. #1555","Fixes `ErrorRethrown` inspection violations.  Description:  > Reports try statements which catch java.lang.Error or any subclass and which do not rethrow the error. Statements which catch java.lang.ThreadDeath are not reported by this inspection.","closed","","mkordas","2015-08-22T22:57:42Z","2015-08-25T10:33:10Z"
"","1698","Add missing case in switch. #1555","Fixes `EnumSwitchStatementWhichMissesCases` inspection violation.  Description:  > Reports switch statements over enumerated types which do not include all of the enumerated type's elements as cases.","closed","","mkordas","2015-08-14T21:43:11Z","2015-08-15T03:43:36Z"
"","1869","Remove empty methods. #1555","Fixes `EmptyMethod` inspection violations in test code.  Description:  > This inspection reports methods where: > - method is empty OR > - all implementations of interface method are empty OR > - method is empty itself and is overridden only by empty methods >   Note that a method containing only the super() call and passing its own parameter is also considered empty.  This inspection is automatically suppressed for methods annotated with special annotations, for example, EJB annotations javax.ejb.Init and javax.ejb.Remove.","closed","","mkordas","2015-08-22T23:14:17Z","2015-08-27T01:08:41Z"
"","1918","Use compiled pattern instead of dynamic regexp. #1555","Fixes `DynamicRegexReplaceableByCompiledPattern` inspection violations.  Description:  > Reports calls to the regular expression methods of java.lang.String using constants arguments. Such calls may be profitably replaced with a private static final Pattern field so that the regular expression does not have to be compiled each time it is used.","closed","","mkordas","2015-08-26T22:21:03Z","2015-08-27T12:42:41Z"
"","1844","Remove duplicates in throws lists. #1555","Fixes `DuplicateThrows` inspection violations.  Description:  > This inspection reports duplicate exceptions in a method throws list.","closed","","mkordas","2015-08-21T22:55:49Z","2015-08-22T11:37:29Z"
"","1790","Remove duplicates in throws lists. #1555","Fixes `DuplicateThrows` inspection violations in test code.  Description:  > This inspection reports duplicate exceptions in a method throws list.","closed","","mkordas","2015-08-19T20:30:30Z","2015-08-20T03:39:18Z"
"","1611","Add SuppressWarnings for known deprecation. #1555","Fixes `Deprecation` inspection violation.  Description:  > This inspection reports where deprecated code is used in the specified inspection scope.","closed","","mkordas","2015-08-08T15:08:16Z","2015-08-14T23:33:42Z"
"","1635","Fix dangling Javadoc comments. #1555","Fixes `DanglingJavadoc` inspection violations.  Description:  > Reports dangling Javadoc comments. Javadoc comment are dangling if they don't belong to any class, method or field. For example a Javadoc comment in between method declarations that have their own javadoc comments.","closed","","mkordas","2015-08-09T13:58:51Z","2015-08-14T23:33:03Z"
"","1678","Remove redundant unit in zero value form CSS. #1555","Fixes `CssRedundantUnit` inspection violations.  Description:  > This inspection highlights zero values with specified unit of measurement.","closed","","mkordas","2015-08-12T22:30:50Z","2015-08-14T23:31:43Z"
"","1736","Use diamond operator in test code. #1555","Fixes `Convert2Diamond` inspection violations.  Description:  > This inspection reports all new expressions with type arguments which can be replaced with diamond type <> > Such <> syntax is not supported under Java 1.6 or earlier JVMs.","closed","","mkordas","2015-08-16T22:08:28Z","2015-08-17T03:53:40Z"
"","1663","Move constants to right side in comparisons. #1555","Fixes `ConstantOnLHSOfComparison` inspection violations.  Description:  > Reports on comparison operations with constant values on their left-hand side. Some coding conventions specify that constants should be on the right-hand side of comparisons.","closed","","mkordas","2015-08-11T20:48:47Z","2015-08-14T23:31:34Z"
"","1591","Move constants to left side of comparison. #1555","Fixes `ConstantOnLHSOfComparison` inspection violations.  Description:  > Reports on comparison operations with constant values on their left-hand side. Some coding conventions specify that constants should be on the right-hand side of comparisons.","closed","","mkordas","2015-08-08T12:45:54Z","2015-08-14T23:33:38Z"
"","1809","Fix name for constants in test code. #1555","Fixes `ConstantNamingConvention` inspection violations in test code.  Description:  > Reports any constants whose names are either too short, too long, or do not follow the specified regular expression pattern. Constants are fields declared static final.","closed","","mkordas","2015-08-20T21:08:14Z","2015-08-21T11:26:59Z"
"","1725","Correct names for constants. #1555","Fixes `ConstantNamingConvention` inspection violation in test code.  Description:  > Reports any constants whose names are either too short, too long, or do not follow the specified regular expression pattern. Constants are fields declared static final.","closed","","mkordas","2015-08-16T22:06:01Z","2015-08-17T04:11:17Z"
"","1713","Simplify expressions that are constant. #1555","Fixes `ConstantConditions` inspection violations.  Description:  > This inspection analyzes method control and data flow to report possible conditions that are always true or false and expressions whose value is statically proven to be constant.","closed","","mkordas","2015-08-15T23:28:00Z","2015-08-16T04:01:00Z"
"","1636","Fix confusing floating point literals. #1555","Fixes `ConfusingFloatingPointLiteral` inspection violations.  Description:  > Reports any floating point numbers which do not have a decimal point, numbers before the decimal point, and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.","closed","","mkordas","2015-08-09T13:59:05Z","2015-08-14T23:33:03Z"
"","1726","Use float in canonical form in test code. #1555","Fixes `ConfusingFloatingPointLiteral` inspection violation in test code.  Description:  > Reports any floating point numbers which do not have a decimal point, numbers before the decimal point, and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.","closed","","mkordas","2015-08-16T22:06:08Z","2015-08-17T03:42:11Z"
"","1606","Remove redundant and confusing else. #1555","Fixes `ConfusingElse` inspection violation.  Description:  > Reports confusing else branches. else branches are confusing when the if statement is followed by other statements and the if branch cannot complete normally, for example because it ends with a return statement. In these cases the statements in the else can be moved after the if statement and the else branch removed.","closed","","mkordas","2015-08-08T12:59:58Z","2015-08-14T23:33:40Z"
"","1747","Mark util class as final in test code. #1555","Fixes `ClassWithOnlyPrivateConstructors` inspection violation in test code.  Description:  > Reports classes with only private constructors that are not extended by any nested class. Such classes can not be extended and should be declared final.","closed","","mkordas","2015-08-17T20:54:19Z","2015-08-18T05:50:24Z"
"","1836","Create new instance using constructor in test code. #1555","Fixes `ClassNewInstance` inspection violations in test code.  Description:  > Reports any calls to java.lang.Class.newInstance(). The newInstance method propagates any exception thrown by the no-arg constructor, including checked exceptions. Use of this method effectively bypasses the compile-time exception checking that would otherwise be performed by the compiler. Replacing such a method call with a call to the java.lang.reflect.Constructor.newInstance() method avoids this problem by wrapping any exception thrown by the constructor in a java.lang.reflect.InvocationTargetException.","closed","","mkordas","2015-08-21T22:52:02Z","2015-08-22T11:29:41Z"
"","1662","Extract nested class with other class nested to separate file. #1555","Fixes `ClassNestingDepth` inspection violation.  Description:  > Reports inner classes too deeply nested. Nesting inner classes inside inner classes is almost certain to be confusing, and is a good sign that refactoring may be necessary.","closed","","mkordas","2015-08-11T20:41:32Z","2015-08-14T23:31:33Z"
"","1654","Prevent classes to escape their scope. #1555","Fixes `ClassEscapesItsScope` inspection violation.  Description:  > Reports any references to classes which allow the class name to be used outside the class's stated scope. For instance, this inspection would report a public method which returns a private inner class, or a protected field whose type is a package-visible class. While legal Java, such references can be very confusing, and make reuse difficult.","closed","","mkordas","2015-08-10T20:39:00Z","2015-08-14T23:31:32Z"
"","1795","Collapse empty XML tags. #1555","Fixes `CheckTagEmptyBody` inspection violations.  Description:  > Reports empty tag body.","closed","","mkordas","2015-08-19T20:32:00Z","2015-08-20T03:47:09Z"
"","1811","Use unchecked exception in test code. #1555","Fixes `CheckedExceptionClass` inspection violations in test code.  Description:  > Reports checked exception classes (i.e. subclasses of Exception which are not also subclasses of RuntimeException). Certain coding standards require that all user-defined exception classes be unchecked.","closed","","mkordas","2015-08-20T21:08:35Z","2015-08-25T12:07:45Z"
"","1653","Remove obsolete method with casting that looses precision. #1555","Fixes `CastThatLosesPrecision` inspection violation.  Description:  > Reports any cast operations between built-in numeric types which may result in loss of precision. Such casts are not necessarily a problem, but may result in difficult to trace bugs if the loss of precision is unexpected.","closed","","mkordas","2015-08-10T20:31:17Z","2015-08-14T23:31:31Z"
"","1849","Mark field as final. #1555","Fixes `CanBeFinal` inspection violations.  Description:  > This inspection reports all fields, methods or classes, found in the specified inspection scope, that may have a final modifier added to their declarations.","closed","","mkordas","2015-08-21T22:56:42Z","2015-08-25T10:26:52Z"
"","1791","Mark fields as final in test code. #1555","Fixes `CanBeFinal` inspection violations in test code.  Description:  > This inspection reports all fields, methods or classes, found in the specified inspection scope, that may have a final modifier added to their declarations.","closed","","mkordas","2015-08-19T20:31:05Z","2015-08-20T03:40:20Z"
"","1598","Make field final. #1555","Fixes `CanBeFinal` inspection violation.  Description:  > This inspection reports all fields, methods or classes, found in the specified inspection scope, that may have a final modifier added to their declarations.","closed","","mkordas","2015-08-08T12:49:36Z","2015-08-14T23:33:36Z"
"","1584","Inline calls to simple setters. #1555","Fixes `CallToSimpleSetterInClass` inspection violations.  Description: Reports any calls to a simple property setter from within the property's class. A simple property setter is defined as one which simply assigns the value of its parameter to a field, and does no other calculation. Such simple setter calls may be safely inlined, at a small performance improvement. Some coding standards also suggest against the use of simple setters for code clarity reasons.","closed","","mkordas","2015-08-07T21:10:50Z","2015-08-07T22:09:55Z"
"","1815","Inline simple setters. #1555","Fixes `CallToSimpleSetterInClass` inspection violations.  Description:  > Reports any calls to a simple property setter from within the property's class. A simple property setter is defined as one which simply assigns the value of its parameter to a field, and does no other calculation. Such simple setter calls may be safely inlined, at a small performance improvement. Some coding standards also suggest against the use of simple setters for code clarity reasons.","closed","","mkordas","2015-08-20T21:09:18Z","2015-08-21T12:53:08Z"
"","1717","Remove calls to simple setters from within classes. #1555","Fixes `CallToSimpleSetterInClass` inspection violations.  Description:  > Reports any calls to a simple property setter from within the property's class. A simple property setter is defined as one which simply assigns the value of its parameter to a field, and does no other calculation. Such simple setter calls may be safely inlined, at a small performance improvement. Some coding standards also suggest against the use of simple setters for code clarity reasons.","closed","","mkordas","2015-08-16T02:24:17Z","2015-08-16T04:03:30Z"
"","1786","Remove calls to simple setters within classes. #1555","Fixes `CallToSimpleSetterInClass` inspection violations in test code.  Description:  > Reports any calls to a simple property setter from within the property's class. A simple property setter is defined as one which simply assigns the value of its parameter to a field, and does no other calculation. Such simple setter calls may be safely inlined, at a small performance improvement. Some coding standards also suggest against the use of simple setters for code clarity reasons.","closed","","mkordas","2015-08-19T20:30:00Z","2015-08-20T03:29:59Z"
"","1585","Inline calls to simple getters. #1555","Fixes `CallToSimpleGetterInClass` inspection violations.  Description: Reports any calls to a simple property getter from within the property's class. A simple property getter is defined as one which simply returns the value of a field, and does no other calculation. Such simple getter calls may be safely inlined, at a small performance improvement. Some coding standards also suggest against the use of simple getters for code clarity reasons.","closed","","mkordas","2015-08-07T21:24:15Z","2015-08-07T22:30:57Z"
"","1901","Remove calls to simple getters within classes. #1555","Fixes `CallToSimpleGetterInClass` inspection violations.  Description:  > Reports any calls to a simple property getter from within the property's class. A simple property getter is defined as one which simply returns the value of a field, and does no other calculation. Such simple getter calls may be safely inlined, at a small performance improvement. Some coding standards also suggest against the use of simple getters for code clarity reasons.","closed","","mkordas","2015-08-26T15:35:12Z","2017-05-30T13:26:16Z"
"","1857","Remove calls to simple getters withing classes. #1555","Fixes `CallToSimpleGetterInClass` inspection violations.  Description:  > Reports any calls to a simple property getter from within the property's class. A simple property getter is defined as one which simply returns the value of a field, and does no other calculation. Such simple getter calls may be safely inlined, at a small performance improvement. Some coding standards also suggest against the use of simple getters for code clarity reasons.","closed","","mkordas","2015-08-22T22:53:41Z","2015-08-25T10:06:05Z"
"","1839","Inline calls to simple getters. #1555","Fixes `CallToSimpleGetterInClass` inspection violations.  Description:  > Reports any calls to a simple property getter from within the property's class. A simple property getter is defined as one which simply returns the value of a field, and does no other calculation. Such simple getter calls may be safely inlined, at a small performance improvement. Some coding standards also suggest against the use of simple getters for code clarity reasons.","closed","","mkordas","2015-08-21T22:52:54Z","2015-08-22T11:32:58Z"
"","1971","Issue #1555: Remove unnecessary boxing","Fixes `CachedNumberConstructorCall` inspection violations.  Description:  > Reports any attempt to instantiate a new Long, Integer, Short or Byte object from a primitive long, integer, short or byte argument. It may be more efficient to use the static method valueOf() here (introduced in Java 5), which will cache objects for values between -128 and 127 inclusive. > This inspection only reports if the project or module is configured to use a language level of 5.0 or higher.","closed","","mkordas","2015-08-28T22:04:54Z","2015-08-29T05:40:48Z"
"","1974","Issue #1555: Rename boolean methods to start with question word","Fixes `BooleanMethodNameMustStartWithQuestion` inspection violations.  Description:  > Reports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.","closed","","mkordas","2015-08-28T22:05:19Z","2015-08-29T05:43:16Z"
"","1935","Rename boolean methods to start with question word. #1555","Fixes `BooleanMethodNameMustStartWithQuestion` inspection violations.  Description:  > Reports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.","closed","","mkordas","2015-08-27T18:23:33Z","2015-08-27T19:54:16Z"
"","1794","Fix always inverted boolean methods. #1555","Fixes `BooleanMethodIsAlwaysInverted` inspection violation.  Description:  > Reports methods with a boolean return type, which are only used in a negated context. Because this inspection requires global code analysis it is only available for Analyze|Inspect Code or Analyze|Run Inspection by Name and it will not report in the editor. > For example:  ``` class C {   boolean inverted() {     return true;   }    void f() {     if (!inverted()) {       return;     }   }   boolean member = !inverted(); } ```","closed","","mkordas","2015-08-19T20:31:52Z","2015-08-20T20:47:39Z"
"","1590","Replace RuntimeException with IllegalStateException. #1555","Fixes `BadExceptionThrown` inspection violations.  Description:  > Reports throw statements which throw inappropriate exceptions. One use of this inspection would be to warn of throw statements which throw overly generic exceptions (e.g. java.lang.Exception or java.io.IOException).","closed","","mkordas","2015-08-07T22:18:00Z","2015-08-08T05:19:29Z"
"","1788","Remove usage of prohibited exceptions in test code. #1555","Fixes `BadExceptionThrown` inspection violations in test code.  Description:  > Reports throw statements which throw inappropriate exceptions. One use of this inspection would be to warn of throw statements which throw overly generic exceptions (e.g. java.lang.Exception or java.io.IOException).","closed","","mkordas","2015-08-19T20:30:13Z","2015-08-20T03:33:56Z"
"","1731","Use assertSame instead of assertEquals where possible. #1555","Fixes `AssertEqualsMayBeAssertSame` inspection violation in test code.  Description:  > Reports any calls to org.junit.Assert.assertEquals() or junit.framework.Assert.assertEquals() which can be replaced with an equivalent call to assertSame(). This is possible when the arguments are instances of a final class which does not override the equals() method.","closed","","mkordas","2015-08-16T22:08:05Z","2015-08-17T03:49:10Z"
"","1755","Replace assertEquals() with arrayAssertEquals(). #1555","Fixes `AssertEqualsCalledOnArray` inspection violations in test code.  Description:  > Reports any calls to JUnit's assertEquals() method with arguments of type array. Arrays should be checked with one of the assertArrayEquals() methods.","closed","","mkordas","2015-08-18T19:48:24Z","2015-08-19T03:25:17Z"
"","1767","Replace Arrays.asList() with Collections.emptyList(). #1555","Fixes `ArraysAsListWithZeroOrOneArgument` inspection violations in test code.  Description:  > Reports any calls to Arrays.asList() with zero arguments or only one argument. Such calls could be replaced with either a call to Collections.singletonList() or Collections.emptyList() which will save some memory.","closed","","mkordas","2015-08-18T20:43:33Z","2015-08-19T03:38:04Z"
"","1579","Replace Arrays.asList() with Collections.singletonList(). #1555","Fixes `ArraysAsListWithZeroOrOneArgument` inspection violation.  Description:  > Reports any calls to Arrays.asList() with zero arguments or only one argument. Such calls could be replaced with either a call to Collections.singletonList() or Collections.emptyList() which will save some memory.","closed","","mkordas","2015-08-07T19:47:05Z","2015-08-08T05:09:27Z"
"","1780","Rename variable in anonymous class hiding other variable. #1555","Fixes `AnonymousClassVariableHidesContainingMethodVariable` inspection violations in test code.  Description:  > Reports anonymous class variables being named identically to variables of a containing method or lambda expression. Such a variable name may be confusing.","closed","","mkordas","2015-08-19T20:28:16Z","2015-08-20T03:15:19Z"
"","1612","Refactor anonymous classes with too many methods. #1555","Fixes `AnonymousClassMethodCount` inspection violation.  Description:  > Reports anonymous inner class with too many methods. Anonymous classes with more than a very low number of methods may be difficult to understand, and should probably be promoted to become named inner classes.","closed","","mkordas","2015-08-08T15:08:24Z","2015-08-14T23:33:41Z"
"","1746","Promote anonymous class to nested class. #1555","Fixes `AnonymousClassMethodCount` inspection violation in test code.  Description:  > Reports anonymous inner class with too many methods. Anonymous classes with more than a very low number of methods may be difficult to understand, and should probably be promoted to become named inner classes.","closed","","mkordas","2015-08-17T20:54:11Z","2015-08-18T05:49:20Z"
"","1595","Remove redundant abstract methods declarations. #1555","Fixes `AbstractMethodOverridesAbstractMethod` inspection violations.  Description:  > Reports abstract methods which override abstract methods. Methods with different return types or exception declarations than the method they override are not reported by this inspection.","closed","","mkordas","2015-08-08T12:47:17Z","2015-08-14T23:33:38Z"
"","1862","Use relative alignment constants. #1555","Fixes `AbsoluteAlignmentInUserInterface` inspection violations.  Description:  > Reports usages of absolute alignment constants from AWT and Swing. Internationalized applications should make use of relative alignment, because it respects locale component orientation settings.","closed","","mkordas","2015-08-22T22:57:19Z","2015-08-25T10:25:10Z"
"","1531","Remove superfluous runtime exception declarations. #46","Fixes [squid:RedundantThrowsDeclarationCheck](http://nemo.sonarqube.org/issues/search#resolved=false|projectUuids=93eb9164-80ec-4136-9c42-d4d23deed1db|severities=MINOR|rules=squid%3ARedundantThrowsDeclarationCheck) violations.","closed","","mkordas","2015-08-01T18:54:33Z","2015-08-01T20:25:06Z"
"","1710","Issue #1566: VisibilityModifier violations fixed","Fixed violations: - VisibilityModifier Variable 'X' must be private and have accessor methods.","closed","","rdiachenko","2015-08-15T20:18:14Z","2015-08-31T21:39:42Z"
"","1899","Issue #1566: MultipleStringLiterals violations fixed","Fixed violations: - MultipleStringLiterals `The String ""XXX"" appears X times in the file.`","closed","","rdiachenko","2015-08-25T23:10:32Z","2015-08-31T21:31:11Z"
"","1872","Issue #1566: MultipleStringLiterals violations partial fix (part2)","Fixed violations: - MultipleStringLiterals `The String ""XXX"" appears X times in the file.`","closed","","rdiachenko","2015-08-23T13:04:16Z","2015-08-31T21:38:16Z"
"","1871","Issue #1566: MultipleStringLiterals violations partial fix","Fixed violations: - MultipleStringLiterals `The String ""XXX"" appears X times in the file.`","closed","","rdiachenko","2015-08-23T08:29:08Z","2015-08-31T21:38:14Z"
"","1708","Issue #1566: LineLength violations fixed","Fixed violations: - LineLength Line is longer than 100 characters (found X).","closed","","rdiachenko","2015-08-15T19:59:01Z","2015-08-31T21:38:01Z"
"","1832","Issue #1566: JavadocStyle violation fixed","Fixed violations: - JavadocStyle `Extra HTML tag found: }.`","closed","","rdiachenko","2015-08-20T21:43:29Z","2015-08-31T21:37:56Z"
"","1674","Issue #1566: ImportOrder violations fixed","Fixed violations: - ImportOrder   Wrong order for 'antlr.ANTLRException' import.  We already have configuration for this check in our checkstyle_checks.xml:  ```                                          ```  But I have no idea why the build was passing. Looked at suppressions.xml, there is nothing related there. Any thoughts?","closed","","rdiachenko","2015-08-12T22:09:22Z","2015-08-31T21:37:30Z"
"","1675","Issue #1566: Constructor definition in wrong order violations fixed","Fixed violations: - DeclarationOrder Constructor definition in wrong order.  Another strange behavior. We already have `` which is turned on in our checkstyle_checks.xml but the ""verify"" phase continue passing all the checks even though the violation is present.  If you know some secret knowledge about that please share.","closed","","rdiachenko","2015-08-12T22:19:19Z","2015-08-31T21:37:14Z"
"","1739","Issue #1566: AvoidInlineConditional violations fixed","Fixed violations: - AvoidInlineConditionals Avoid inline conditionals.","closed","","rdiachenko","2015-08-16T22:55:48Z","2015-08-31T21:37:09Z"
"","1932","fixed problem with lexical order in CustomImportOrder #1469","Fixed issues in #1469  Now lexical order works only within a group, renamed few variables to better illustrate that.  Following additional improvement was done: previously violation was raised only for first lexical error in a group, in some cases after fixing this violation and rerunning the check user may see lexical violations for imports after fixed one. Now trying to raise these violations immediately. Consider scenario below:  ``` java import java.util.StringTokenizer; //#1 import java.util.*; //#2 import java.util.Arrays; //#3 ```  Config: STANDARD_JAVA_PACKAGE We had only one message:`'java.util.*' should be before 'java.util.StringTokenizer'` Once user moves _#_2 to the very beginning and reruns validation, error message will be: `'java.util.Arrays' should be before 'java.util.StringTokenizer'` It happens because check always compared to previous import. In this situation _#_2>_#_1 is  and _#_3>_#_2. We can detect this situation immediately, if we compare _#_3 to last correct import from the same group (_#_1).  There are good examples in the end of Bazel reports below.  Reports: on GUAWA to indicate no changes on good project: [before](https://ivanov-alex.github.io/i1469/target_guawa_messages/site/checkstyle.html), [after](https://ivanov-alex.github.io/i1469/target_guawa_lexic/site/checkstyle.html), [comparison](https://www.diffchecker.com/ich8fuuo) on Bazel: [before](https://ivanov-alex.github.io/i1469/target_bazel_messages/site/checkstyle.html), [after](https://ivanov-alex.github.io/i1469/target_bazel_lexic/site/checkstyle.html), [comparison](https://www.diffchecker.com/tygxobe1) on Checkstyle & Sevntu_Checkstyle: [before](https://ivanov-alex.github.io/i1469/target_checkstyle_messages/site/checkstyle.html), [after](https://ivanov-alex.github.io/i1469/target_checkstyle_lexic/site/checkstyle.html), [comparison](https://www.diffchecker.com/x4hkm2wt) Please note that there are no violations on Checkstyle (only on Sevntu): one more sign that there are no unexpected effects for existing projects.","closed","","ivanov-alex","2015-08-27T15:23:28Z","2015-09-07T14:11:11Z"
"","1563","Fixed overly strong type cast, issue #1555.","Fixed IDEA's inspection violation: ""Overly strong type cast"".  [NOTE](https://www.jetbrains.com/idea/documentation/inspections/OverlyStrongTypeCast.html): this inspection reports any instances of type casts which are overly strong. For instance, casting an object to ArrayList when casting it to List would do just as well.","closed","","MEZk","2015-08-06T15:54:20Z","2015-08-08T21:06:51Z"
"","1347","Add closing tag to SingleLineJavadoc","Fixed a syntax error where SingleLineJavadoc was missing a closing tag.","closed","","johnshunfan","2015-07-11T00:09:53Z","2015-07-11T00:37:16Z"
"","1990","Issue #1566: ReturnCount violation fixed for CheckUtils","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-29T01:21:52Z","2015-08-31T21:39:20Z"
"","1989","Issue #1566: ReturnCount violation fixed for ParseTreeModel","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-29T00:33:38Z","2015-08-31T21:39:17Z"
"","1988","Issue #1566: ReturnCount violation fixed for SuppressionCommentFilter","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-29T00:28:14Z","2015-08-31T21:39:16Z"
"","1987","Issue #1566: ReturnCount violation fixed for SuppressWithNearbyCommentFilter","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-29T00:19:51Z","2015-08-31T21:39:11Z"
"","1983","Issue #1566: ReturnCount violation fixed for WhitespaceAroundCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-28T23:53:17Z","2015-08-31T21:39:09Z"
"","1980","Issue #1566: ReturnCount violation fixed for ModifierOrderCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-28T23:16:12Z","2015-08-31T21:39:06Z"
"","1979","Issue #1566: ReturnCount violation fixed for JavadocStyleCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-28T23:08:28Z","2015-08-31T21:39:04Z"
"","1978","Issue #1566: ReturnCount violation fixed for AbstractJavadocCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-28T22:52:40Z","2015-08-31T21:39:01Z"
"","1977","Issue #1566: ReturnCount violation fixed for AbstractExpressionHandler","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-28T22:42:27Z","2015-08-31T21:38:59Z"
"","1976","Issue #1566: ReturnCount violation fixed for DesignForExtensionCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-28T22:31:06Z","2015-08-31T21:38:57Z"
"","1970","Issue #1566: ReturnCount violation fixed for UnnecessaryParenthesesCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-28T21:59:28Z","2015-08-31T21:38:55Z"
"","1968","Issue #1566: ReturnCount violation fixed for SimplifyBooleanReturnCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-28T21:46:10Z","2015-08-31T21:38:53Z"
"","1962","Issue #1566: ReturnCount violation fixed for RequireThisCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-28T00:08:01Z","2015-08-31T21:38:51Z"
"","1961","Issue #1566: ReturnCount violation fixed for MagicNumberCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-27T23:50:22Z","2015-08-31T21:38:46Z"
"","1959","Issue #1566: ReturnCount violation fixed for IllegalInstantiationCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-27T23:26:16Z","2015-08-31T21:38:43Z"
"","1958","Issue #1566: ReturnCount violation fixed for FallThroughCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-27T23:09:49Z","2015-08-31T21:38:41Z"
"","1957","Issue #1566: ReturnCount violation fixed for ExplicitInitializationCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-27T22:54:05Z","2015-08-31T21:38:40Z"
"","1956","Issue #1566: ReturnCount violation fixed for AbstractSuperCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-27T22:46:14Z","2015-08-31T21:38:36Z"
"","1955","Issue #1566: ReturnCount violation fixed for LeftCurlyCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-27T22:16:10Z","2015-08-31T21:38:34Z"
"","1954","Issue #1566: ReturnCount violation fixed for UncommentedMainCheck","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-27T22:02:43Z","2015-08-31T21:38:31Z"
"","1953","Issue #1566: ReturnCount violation fixed for FileContents","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-27T21:50:15Z","2015-08-31T21:38:29Z"
"","1952","Issue #1566: ReturnCount violation fixed for DetailAST","Fix for: - ReturnCount `Return count is X (max allowed is 2).`","closed","","rdiachenko","2015-08-27T21:34:53Z","2015-08-31T21:38:27Z"
"","1997","Issue #1566: 'missing javadoc comment' violations fixed for JavadocTokenTypes","Fix for: - JavadocMethod `Missing a Javadoc comment.` - JavadocVariable `Missing a Javadoc comment.`","closed","","rdiachenko","2015-08-29T19:06:32Z","2015-08-31T21:30:57Z"
"","1998","Issue #1566: 'missing javadoc comment' violations fixed for Check, JavadocNodeImpl","Fix for: - JavadocMethod `Missing a Javadoc comment.`","closed","","rdiachenko","2015-08-29T19:40:30Z","2015-08-31T21:31:00Z"
"","1119","Fix NeedBraces check not requiring braces in multiline statements when using allowSingleLineStatement option. #895","Fix for #895.  Previous implementaion was wrong, as detecting if an `if` statement is single line has nothing to presence of `return` statement.","closed","","mkordas","2015-05-23T21:05:37Z","2015-05-24T22:28:51Z"
"","1340","Create annotation-based suppression filter.","Filter should filter out specified checks for the node (and subnodes), marked with the specified annotations.  Described in Google Groups https://groups.google.com/forum/#!searchin/checkstyle-devel/pavel$20baranchikov/checkstyle-devel/Hb4qYTcBbF8/zTXRYuLDwAIJ  ---  from SF https://sourceforge.net/p/checkstyle/feature-requests/525/:  @Generated aims at being the standard way to mark generated code.  Very often we have to configure checkstyle to ignore generated code as we don't have any chance to fix it (especially if the generated code is cleaned and regenerated during each build).  I suggest to add an option to checkstyle that would allow to ignore packages/classes/attributes/methods that are marked with @Generated annotation.  Moreover @Generated support a ""value"" attribute that is used to give the name of the code generator.  For example I can have in my src folder:  ``` $ javac MyClassGeneratedByFoo.java  $ cat MyClassGeneratedByFoo.java  import javax.annotation.Generated;  @Generated(value=""foo"") public class MyClassGeneratedByFoo {   Boolean b = new Boolean(true);  // violation now }  class MyClassGeneratedByBar {    @Generated(value=""bar"")   public void methodGeneratedByBar() {     Boolean b = new Boolean(true); // violation now, should be allowed   }    public void methodCustom() {     Boolean b = new Boolean(true); // violation   } }  $ cat config.xml                                              $ java -jar checkstyle-8.7-all.jar -c config.xml MyClassGeneratedByFoo.java  Starting audit... [ERROR] ...MyClassGeneratedByFoo.java:5:15: Instantiation of java.lang.Boolean should be avoided. [IllegalInstantiation] [ERROR] .../MyClassGeneratedByFoo.java:12:17: Instantiation of java.lang.Boolean should be avoided. [IllegalInstantiation] [ERROR] .../MyClassGeneratedByFoo.java:16:17: Instantiation of java.lang.Boolean should be avoided. [IllegalInstantiation] Audit done. Checkstyle ends with 3 errors.  ```  Say I don't have any control on the Bar code generator output style. On the opposite say I have control on Foo code generator.   So I would like to have a way to tell checkstyle to ignore methodGeneratedByBar but not MyClassGeneratedByFoo.  For example you can add a String array parameter that would list all generator codes (matching @Generated value) that have to be excluded from the analysis.  Thanks  [1] http://java.sun.com/javase/6/docs/api/javax/annotation/Generated.html ##","open","new module,","pbaranchikov","2015-07-10T15:02:31Z","2018-10-12T01:25:13Z"
"","1975","Issue #1555: Fix false-positive in mismatched array read write rule","False-positive reported to JetBrains as [IDEA-144521](https://youtrack.jetbrains.com/issue/IDEA-144521).  Fixes `MismatchedArrayReadWrite` inspection violations.  Description:  > Reports any array fields or variables whose contents are read but not written, or written but not read. Such mismatched reads and writes are pointless, and probably indicate dead, incomplete or erroneous code.","closed","","mkordas","2015-08-28T22:05:47Z","2015-08-29T05:44:09Z"
"","1252","Add support for more complex annotations in SuppressWarnings check","Examples of not supported annotation contents in [SuppressWarnings check](http://checkstyle.sourceforge.net/config_annotation.html#SuppressWarnings) :  ``` java @SuppressWarnings(""un"" + ""used"") @SuppressWarnings((String) ""unused"") @SuppressWarnings({('u' + (char)'n') + ((""""+(((""used"" + (String)""""))))) + ((1 != 1) ? """" : """"),}) ```","closed","approved,","mkordas","2015-06-28T07:03:25Z","2015-06-28T18:35:43Z"
"","1551","FinalLocalVariable doesn't report variable when first assignment is separated","Example:  ``` public class TestClass3 {     public static void test() {         String test;         test = ""123"";         if (test != null) {}     } } ```  Config:  ```                                      ```  Checkstyle reports no errors even though the variable is only assigned once and can be given the ""final"" modifier. It should report the error on the line declaring the ""test"" variable. This fails because Checkstyle doesn't count the number of assignments. It removes the variable on the first assignment it finds, and doesn't realize that the variable declaration gave no initial assignment. Source: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java#L201","closed","approved,","rnveach","2015-08-04T00:54:31Z","2015-11-01T13:42:21Z"
"","1426","Update EqualsVerifier to 1.7.3","EqualsVerifier Version 1.7.3 - Release Notes  What’s new? Well, you can now … - …use a protected or default-visibility cachedHashCode field with #withCachedHashCode(). - …have a static final field with null value without getting a NullPointerException. - …know that several things have been improved behind-the-scenes :).","closed","approved,","mkordas","2015-07-20T19:33:21Z","2015-07-21T03:41:41Z"
"","1452","ImportOrder enabled in configuration #1448","Enabled ImportOrderCheck and reordered imports to match configuration.  I was using ""Organize Imports"" in Eclipse to do that, it removed some unused import","closed","","ivanov-alex","2015-07-23T06:12:54Z","2015-07-24T18:43:21Z"
"","1658","Issue #1243: 'Class is raw type' fixed","Eclipse warnings","closed","","baratali","2015-08-11T11:21:18Z","2015-08-11T12:50:18Z"
"","1683","Issue #1243: Resolved varargs ambiguity","Eclipse warning:  > Type null of the last argument to method fileExtensionMatches(File, String...) doesn't exactly match the vararg parameter type. Cast to String[] to confirm the non-varargs invocation, or pass individual arguments of type String for a varargs invocation.  Compiler doesn't know how to treat **null** argument: array or element of array","closed","","baratali","2015-08-13T19:25:00Z","2015-08-22T09:27:21Z"
"","1512","Coverage has been increased to 100% in SinglelineDetector. Issue #1010","Done without checks's code modification","closed","","sabaka","2015-07-29T21:02:03Z","2015-09-03T23:34:20Z"
"","1504","Coverage has been increased to 100% in RegexpMultilineCheck. Issue #1010","Done without check's code modification","closed","","sabaka","2015-07-28T23:39:32Z","2015-07-29T07:05:12Z"
"","1505","100% coverage in RegexpCheck. Issue #1010","Done without check's code changes","closed","","sabaka","2015-07-28T23:44:21Z","2015-07-29T07:05:35Z"
"","1503","Coverage has been increased to 100% in RegexpSinglelineCheck. Issue #1010","Done without changes in check's code","closed","","sabaka","2015-07-28T23:29:09Z","2015-07-29T07:04:42Z"
"","1396","Coverage has been increased to 100% in EmtyCatchBlockCheck","Does not contain any changes in logic, so without report","closed","","sabaka","2015-07-16T21:06:16Z","2015-07-18T22:52:36Z"
"","1126","Option allowPublicFinalFields does not exist in VisibilityModifier check","Documentation of [VisibilityModifier](http://checkstyle.sourceforge.net/config_design.html#VisibilityModifier) states that there is property `allowPublicFinalFields`.  However, after setting this Checkstyle fails with error `Failed during checkstyle configuration: cannot initialize module TreeWalker - Property 'allowPublicFinalFields' in module VisibilityModifier does not exist, please check the documentation`","closed","high demand,","mkordas","2015-05-24T07:16:14Z","2015-05-25T02:11:44Z"
"","1441","Coverage has been increased to 100% in MissingDeprecatedCheck #908","Didn't touch check's code","closed","","sabaka","2015-07-21T04:53:20Z","2015-07-21T20:57:06Z"
"","1026","test coverage for getDefaultTokens() and getAcceptableTokens(), issue #1022","did test coverage for getDefaultTokens() getAcceptableTokens()","closed","","andrewMistetskii","2015-04-30T15:45:02Z","2015-05-25T23:01:21Z"
"","1025","test coverage for getAcceptableTokens(), getDefaultTokens()","did test coverage for getAcceptableTokens(), getDefaultTokens() in ModifierOrderCheck.class and RedundantModifierCheck.class","closed","","andrewMistetskii","2015-04-30T13:14:22Z","2015-04-30T16:11:29Z"
"","1008","Add possibility to specify a unique ID to all Regexp checks","Description was updated by feedback from @romani and  @jsotuyod .  The rationale to specify an ID is in conjunction with all SuppressXYZWarnings/Comments. Regexp variants are useful to add additional validations that aren't possible to add with normal checkstyle checks. Unfortunately, when disabling a validation, for example with `// @cs-: RegexpSinglelineJava`, it disables all checks that extends RegexpSinglelineJava.   If it was possible to specify an ID to each Regexp variants, it could then be leveraged by the SuppressXYZ to disable only the one matching the ID. Something that could look like `// @cs-: ID`.  Update is required for all suppress filters: SuppressWithNearbyCommentFilter, SuppressWarnings, ....  Examples:  ```                                                               ```  will allow to skip violations near code that have comment like `//@cs-: `, so for your test cases it will be ""//@cs-: systemout"" and ""//@cs-: ignore"". No need to have a prefix of Check name (but it is up to you, as you can name it as ``).  Example of usage: 1) prefix ""checkstyle:"" being optional   ``` @SuppressWarnings({""checkstyle:membername"",""checkstyle:systemout""}) System.out.print(""don't do that""); // should NOT fail MemberNameCheck                                       // and any check that have id=""systemout"" ```  2)  ``` @Test public void dontUseSystemOut() {      // @cs-: systemout      System.out.print(""don't do that""); } ```","closed","new feature,","bananetomate","2015-04-28T16:04:47Z","2015-12-31T21:44:48Z"
"","1464","Update documentation with Checkstyle configuration for Organize Import in major IDEs","Default configurations of Eclipse, IDEA, NetBeans should have corresponding Checkstyle configuration of ImportOrder and CustomImportOrder that works from the box","closed","approved,","ivanov-alex","2015-07-25T05:40:31Z","2015-07-26T00:42:12Z"
"","1184","custom javadoc inline tags cause parse error","Custom javadoc inline tags like {@customTag} cause unrecognized parse error  ``` $ java -cp checkstyle-6.7-all.jar com.puppycrawl.tools.checkstyle.Main -c my_check.xml Test.java  Starting audit... /home/vlad/cli/Test.java:3: Javadoc comment at column 4 has parse error. Unrecognized error from ANTLR parser: null Audit done. Checkstyle ends with 1 errors.  vlad@vlad-N61PC-M2S ~/cli $ cat Test.java package test.javadoc; class Foo{     /** {@customTag} */     void bar() {} }  vlad@vlad-N61PC-M2S ~/cli $ cat my_check.xml                          ```  Although, this must be a valid tag, according to this https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#spellcheckingtagnames  > You can also create more complex block tags, or custom inline tags with the -taglet option.","closed","antlr,","Vladlis","2015-06-06T14:23:25Z","2016-02-05T13:31:48Z"
"","1051","Support inline definitions of suppressions because relative paths dont work well with 3rd party tools","Currently, suppressions need to be defined in a separate xml file. I think it would be useful if that was not necessary.  An example: Since Gradle 2.2 [config files can be specified as artifacts](https://gradle.org/docs/current/dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html). Thus, they can be downloaded from a Maven repository just like any jar file and are stored somewhere on disk. The problem with the suppressions file is that the `checkstyle.xml` needs to find it relative to it's own location, [which is tricky](https://discuss.gradle.org/t/checkstyle-suppressions-not-working-with-config-textresource-fromarchiveentry/9198).  The [definition of suppressions is simple](http://www.puppycrawl.com/dtds/suppressions_1_1.dtd) - supporting that in the main file should be easy and keep the complexity/length of the file almost as low as it is now. ##","closed","","msteiger","2015-05-03T08:04:08Z","2019-02-27T15:23:04Z"
"","1549","Created JaCoCo profile of pom.xml, issue #1173.","Created JaCoCo profile of pom.xml, issue #1173.  Due to the fact that ImportOrderCheck and ImportOrderOption are reported fully uncovered by JaCoCo and according to @Godin's [comment](https://github.com/checkstyle/checkstyle/issues/1173#issuecomment-127411231) we should use `jacoco:instrument`. See [offline instrumentation](http://www.eclemma.org/jacoco/trunk/doc/offline.html) for more details  To use jacoco profile:  mvn -Pjacoco clean site.  Coverage reports with excludes:  1) Cobertura: ![cobertura](https://cloud.githubusercontent.com/assets/7242568/9049485/2d42fc0e-3a4b-11e5-8a1d-5e5c86675dbe.png)  2) Jacoco: ![jacoco](https://cloud.githubusercontent.com/assets/7242568/9049524/8765fb6e-3a4b-11e5-8c95-c7a5e2d65505.png)  [FULL REPORTS](http://mezk.github.io)  Unresolved problems: https://github.com/checkstyle/checkstyle/issues/1173#issuecomment-127425818","closed","","MEZk","2015-08-03T20:35:19Z","2015-08-18T10:23:54Z"
"","1214","Update all Checks html docs with link to hosted configurations","Create new chapter ""Example of usage"" in each Check. There will be links to all configs that we host (google, checkstyle, sun). Links should be named as: ""Google style"", ""Sun style"", ""Checkstyle style"" That will help users understand how yo use Check.","closed","approved,","romani","2015-06-16T01:41:54Z","2015-09-05T18:53:05Z"
"","1373","Coverage has been increased to 100% in UpperEllCheck","Coverage increased to 100% Before changes: http://sabaka.github.io/UpperEll/master/checkstyle.html After: http://sabaka.github.io/UpperEll/checkstyle.html","closed","","sabaka","2015-07-13T22:55:37Z","2015-07-14T22:12:44Z"
"","1374","Coverage has been increased to 100%n TodoCommentCheck","Coverage increased to 100% Before changes: http://sabaka.github.io/TodoCommentChecker/master/checkstyle.html After: http://sabaka.github.io/TodoCommentChecker/checkstyle.html","closed","","sabaka","2015-07-13T23:26:51Z","2015-07-14T22:11:59Z"
"","1372","Coverage has been increased to 100% in AvoidNestedBlocksCheck","Coverage increased to 100% Before changes: http://sabaka.github.io/AvoidNestedBlocks/master/checkstyle.html After: http://sabaka.github.io/AvoidNestedBlocks/checkstyle.html","closed","","sabaka","2015-07-13T22:21:36Z","2015-07-14T22:10:36Z"
"","1375","Coverage has been increased to 100% in ArrayTypeStyleCheck","Coverage increased to 100%  Before changes: http://sabaka.github.io/ArrayTypeStyle/master/checkstyle.html After: http://sabaka.github.io/ArrayTypeStyle/checkstyle.html","closed","","sabaka","2015-07-13T23:46:56Z","2015-07-14T22:09:48Z"
"","1336","Issue #1293: One more unit test for EqualsHashCodeCheck","coverage 100%","closed","","baratali","2015-07-09T20:30:06Z","2015-07-26T08:35:39Z"
"","1334","Issue #1293: One more unit test for PackageDeclarationCheck","coverage 100%","closed","","baratali","2015-07-09T19:13:31Z","2015-07-26T08:38:21Z"
"","1805","IllegalType: add 'validateAbstractClassNames' option","Consider adding a new `validateAbstractClassNames` option for IllegalType check. Default value should be `false`.  **Note:** all the current suppressions for this check should be solved after introducing the aforementioned option.","closed","approved,","rdiachenko","2015-08-20T20:42:28Z","2015-08-28T17:48:19Z"
"","1257","NullPointerException at FinalLocalVariableCheck.findClassOrMethodInWhichItIsDefined","Configuration:  ```                             ```  File to be Analyzed:  ``` enum InputFinalLocalVariableNameShadowingEnum{     test;     final String foo1 = ""error"";     InputFinalLocalVariableNameShadowingEnum()     {         String foo = foo1;         foo += foo1;     } } ```  Output on CLI:  ``` Jun 28, 2015 9:31:49 PM com.puppycrawl.tools.checkstyle.TreeWalker processFiltered SEVERE: NullPointerException occurred during the analysis of file testing.java. java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.findClassOrMethodInWhichItIsDefined(FinalLocalVariableCheck.java:266)         at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.isSameVariables(FinalLocalVariableCheck.java:281)         at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.removeVariable(FinalLocalVariableCheck.java:312)         at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.visitToken(FinalLocalVariableCheck.java:173)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:393)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:482)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:322)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:195)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:260)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:249)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:90)  Starting audit... /home/bhavik/Documents/checkstyle-rough-work/testing.java:0: Got an exception - null Audit done. Checkstyle ends with 1 errors. ```","closed","high demand,","Bhavik3","2015-06-28T16:09:26Z","2015-09-25T12:56:37Z"
"","1148","IllegalArgumentException at SuppressWarningsHolder","Config:  ```      ```  code base as of 28 May 2015.  output:  ```     SEVERE: IllegalArgumentException occurred during the analysis of file checkstyle/contribution/checkstyle-tester/src/main/java/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/annotation/SuppressWarningsConstants.java. java.lang.IllegalArgumentException: String literal AST expected: .[13x51]   at com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder.getStringExpr(SuppressWarningsHolder.java:402)   at com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder.getAnnotationValues(SuppressWarningsHolder.java:419)   at com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder.visitToken(SuppressWarningsHolder.java:248)   at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:393)   at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:482)   at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:322)   at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:195)   at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:76)   at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:260)   at org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:253) ```","closed","high demand,","romani","2015-05-29T00:19:20Z","2015-06-03T15:10:45Z"
"","1241","add Content section to config.xml and writinglisteners.xml.vm","commit: 07d4e016716671b0a5994305cb4a980dd8d5589b  Blocked by: https://issues.apache.org/jira/browse/MSITE-748 ##","open","approved,","romani","2015-06-25T04:43:14Z","2016-12-14T18:16:42Z"
"","1774","Sections of code should not be ""commented out"". Issue #46","Comments with code examples removed.","closed","","sabaka","2015-08-19T00:04:27Z","2015-09-03T23:22:51Z"
"","1415","javadoc: deperecate overview.html and package.html support","com.puppycrawl.tools.checkstyle.api.JavadocTagInfo  first of all it is dead code, it was never used in Checkstylem but that is API, so special issue is created to describe a change, and possible braking compatibility.   overview.html: http://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javadoc.html#overviewcomment it is just HTML file, we do not have grammar for HTML to parse it reliably  package.html: http://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javadoc.html#packagecomment Deprecated , package-info.java should be used from java5, one more reason is that we do not have HTML parser.","closed","approved,","romani","2015-07-19T16:37:41Z","2015-07-19T16:39:26Z"
"","1057","Util classes should be moved out of api package","com.puppycrawl.tools.checkstyle.api.AnnotationUtility com.puppycrawl.tools.checkstyle.api.ScopeUtils  should be moved to com.puppycrawl.tools.checkstyle package with the same names and content. Old files need to be marked as deprecated and removed in 6.8 or 6.9 release.","closed","approved,","romani","2015-05-05T23:05:07Z","2015-06-06T22:50:21Z"
"","1438","FallThroughCheck handles finally incorrectly","Code:  ``` package test;  public class TestClass3 {     enum Test {         A, B, C     }      public static void test() {         Test test = Test.B;         int variable = 0;          switch (test) {         case A:             try {             }             catch (Exception e) {             }             finally {                 break;             }         case B:             try {                 break;             }             catch (Exception e) {                 break;             }             finally {             }         case C:             break;         }     } } ```  Config:  ```                                                            ```  Output:  ``` Starting audit... \TestClass3.java:30:17: Fall through from previous branch of the switch statement. Audit done. Checkstyle ends with 1 errors. ```  Sorry for being late with more issues with this check. Both A and B cases in the switch are fully terminated, but codestyle says case B isn't fully terminated. It's flaw is that it believes the ""finally"" section should be the only area to examine, and overrides anything that the try/catch do. if the ""finally"" section is terminated (thought this is bad practice), then it does override the try/catch. If it doesn't, it should fall back on the termination checks of try/catch.  Source involved: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java#L264","closed","approved,","rnveach","2015-07-21T01:00:47Z","2015-11-24T19:28:33Z"
"","1061","HideUtilityClassConstructor detects main classes as utility classes","Classes which contain a public static void main(String[] args) method are detected by the HideUtilityClassConstructor as utility class. I think such classes should be not considered as utility class (unless they contain other public static methods).  If you agree, I can adjust the check.","closed","","mirkoseifert","2015-05-07T18:31:41Z","2017-08-01T21:37:17Z"
"","1487","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.ant","CheckstyleAntTask.java should be covered by 100% UTs.  remove exclude: https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L1164","closed","miscellaneous,","romani","2015-07-27T18:31:49Z","2016-03-12T17:13:04Z"
"","1209","StringIndexOutOfBoundsException in AvoidStaticImport check trying to exclude inner class","Checkstyle throws exception  ``` SEVERE: StringIndexOutOfBoundsException occurred during the analysis of file StaticImportExample.java. java.lang.StringIndexOutOfBoundsException: String index out of range: -1     at java.lang.String.substring(String.java:1919)     at com.puppycrawl.tools.checkstyle.checks.imports.AvoidStaticImportCheck.isExempt(AvoidStaticImportCheck.java:126)     at com.puppycrawl.tools.checkstyle.checks.imports.AvoidStaticImportCheck.visitToken(AvoidStaticImportCheck.java:102)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:393)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:482)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:322)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:195)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:76)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:260)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:235)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:86) ```  when running  `java -jar checkstyle-6.7-all.jar -c ./check_static_import.xml StaticImportExample.java` on following files: check_static_import.xml:  ```                                                        ```  StaticImportExample.java:  ``` package test;  import static test.StaticExample.zero; import static test.StaticExample.InnerClass; import static test.StaticExample.InnerClass.one;  public class StaticImportExample{      public static void main(String s[]) {         System.out.println(zero);         System.out.println(InnerClass.one);         System.out.println(one);     } } ```  StaticExample.java:  ``` package test;  public class StaticExample{     public static Integer zero=0;      public static class InnerClass {         public static Integer one=1;     } } ```","closed","approved,","ivanov-alex","2015-06-14T15:52:59Z","2015-06-15T05:31:20Z"
"","1399","JavadocType does not check parameters in inner classes, fixes  #1421","Checkstyle tester output - http://pbaranchikov.github.io/checkstyle/javadoc-type/checkstyle.html","closed","","pbaranchikov","2015-07-17T09:32:07Z","2015-10-16T15:43:23Z"
"","1521","Issue #1293: Refactoring of ParameterAssignmentCheck","Checkstyle reports: http://baratali.github.io/parameter/ **Reports are identical**","closed","","baratali","2015-08-01T11:24:55Z","2015-08-22T09:27:36Z"
"","1497","Issue #1293: Improved coverage for ModifiedControlVariableCheck","Checkstyle reports: http://baratali.github.io/modified_control/index.html **Reports are identical**","closed","","baratali","2015-07-28T20:48:36Z","2017-04-23T03:06:53Z"
"","1615","Issue #1293: Improved coverage for IllegalInstantiationCheck","Checkstyle reports: http://baratali.github.io/instant/ **The reports are identical**","closed","","baratali","2015-08-08T18:01:30Z","2015-08-22T09:27:27Z"
"","1524","Issue #1293: Improved coverage for ExplicitInitializationCheck","Checkstyle reports: http://baratali.github.io/init **Reports are identical**","closed","","baratali","2015-08-01T13:12:30Z","2015-08-22T09:27:35Z"
"","1482","Issue #1293: Refactoring of IllegalTypeCheck","Checkstyle reports: http://baratali.github.io/illegal_type/ **The reports are identical**  Details: 1) Removed useless getters 2) In getCanonicalName(importAst) method, check for STAR token is not necessary because this method receives only imports without 'stars': https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java#L252","closed","","baratali","2015-07-26T11:30:38Z","2015-08-22T09:27:44Z"
"","1522","Issue #1293: Improved coverage for SimplifyBooleanReturnCheck","Checkstyle reports: http://baratali.github.io/boolean/ **Reports are identical**","closed","","baratali","2015-08-01T12:24:40Z","2015-08-22T09:27:33Z"
"","1362","Issue #1293: Refactoring of MultipleVariableDeclarationCheck","Checkstyle reports under Guava+HBase: http://baratali.github.io/multiple_var/index.html. Reports are identical, so the Check works in the same way.","closed","","baratali","2015-07-12T21:04:49Z","2015-07-13T06:56:48Z"
"","1335","Issue #1293: Refactoring of MissingCtorCheck and MissingSwitchDefaultCheck","Checkstyle reports for Guava+HBase projects: http://baratali.github.io/missing_ctor/index.html (reports are identical before and after my changes)","closed","","baratali","2015-07-09T20:00:35Z","2015-07-26T08:37:04Z"
"","1380","Issue #1293: Refactorgin of CovariantEqualsCheck","Checkstyle reports before and after this commit are same: http://baratali.github.io/covariant/index.html (They are built under Guava+HBase projects)","closed","","baratali","2015-07-14T20:41:38Z","2015-07-15T08:15:57Z"
"","1460","Issue #1293: Refactoring of InnerAssignmentCheck","Checkstyle reports before and after refactoring: http://baratali.github.io/inner_assign/index.html **The reports are identical**.","closed","","baratali","2015-07-24T21:20:20Z","2015-07-25T07:25:19Z"
"","1649","Issue #1293. Improved coverage of VariableDeclarationUsageCheck","Checkstyle reports **are identical**: https://baratali.github.io/variable (Guava+HBase) I also generated reports for following projects: - checkstyle - sevntu-checkstyle - guava - pmd - lombok-ast - spring-framework - hibernate-orm - elasticsearch - java-design-patterns - MaterialDesignLibrary - RxJava - Hbase - Orekit - apache-ant - apache-jsecurity - android-launcher  Those reports are also identical. I didn't uploaded them because their size is huge.","closed","","baratali","2015-08-10T13:00:42Z","2015-08-22T09:27:26Z"
"","1528","Issue #1293: Refactoring of AbstractSuperCheck. Code coverage has been improved.","Checkstyle reports **are identical**: http://baratali.github.io/super","closed","","baratali","2015-08-01T18:01:33Z","2015-08-22T09:27:32Z"
"","1536","Issue #1293: Improved coverage for FinalLocalVariableCheck","Checkstyle reports **are identical**: http://baratali.github.io/final","closed","","baratali","2015-08-02T10:29:44Z","2015-08-22T09:27:31Z"
"","1253","Cannot parse constructor references of array types when the element type is parameterized with ""?""","Checkstyle 6.8-SNAPSHOT (ec414646eaf9ceb7de4b6e75b6c11d446cd0971) cannot parse constructor references of array types when the element type is parameterized with ""?"".  Example source code:  ``` java import java.util.ArrayList; import java.util.function.IntFunction;  public class ArrayConstructorReference {     public static void main(String[] args) {         IntFunction fun = ArrayList[]::new;     } } ```  The source code is valid and accepted by javac, but Checkstyle outputs an error message as follows:  ``` /home/taku/pj/array/ArrayConstructorReference.java:6:39: expecting SEMI, found '<' Jun 28, 2015 9:44:46 PM com.puppycrawl.tools.checkstyle.TreeWalker processFiltered SEVERE: MismatchedTokenException occurred during the analysis of file ArrayConstructorReference.java. /home/taku/pj/array/ArrayConstructorReference.java:7:5: expecting EOF, found '}'         at antlr.Parser.match(Parser.java:211)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:210)         at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:456)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:191)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:260)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:249)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:90) ```","closed","antlr,","miyakawataku","2015-06-28T12:48:19Z","2016-03-09T13:52:29Z"
"","1853","Issue #1566: New Checks added to checkstyle_checks config","Checks from Qulice config","closed","","baratali","2015-08-22T12:27:05Z","2017-07-17T18:15:37Z"
"","1776","Detect public constructors in non-public classes in RedundantModifier","check, issue #1537","closed","","liscju","2015-08-19T09:56:01Z","2015-08-28T17:52:31Z"
"","1906","Fix for ExecutableStatementCount's violations","Check's description: Restricts the number of executable statements to a specified limit. Limit is 30.","closed","","baratali","2015-08-26T21:55:35Z","2015-08-27T13:30:43Z"
"","1437","Coverage has been increased to 100% in PackageAnnotationCheck","Changes have been done only in tests and inputs, so we don't need report","closed","","sabaka","2015-07-20T22:49:25Z","2015-07-21T20:57:18Z"
"","1125","Add possibility to set English language explicitly in config. #152","Change was also tested manually with real config.","closed","","mkordas","2015-05-24T01:25:44Z","2015-05-27T16:32:32Z"
"","1718","Checkstyle GUI throws UnsupportedOperationException","Cause is change : https://github.com/checkstyle/checkstyle/commit/13900919907b38384a0405d349cfc659b2b3d985#diff-f3e21c87ead74b564a9c54eb616d3d6dR217  getLines2position after this change returns unmodifiable copy of lines2positions but its usages use it as modifiable original list: https://github.com/checkstyle/checkstyle/blob/13900919907b38384a0405d349cfc659b2b3d985/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java#L115  https://github.com/checkstyle/checkstyle/blob/13900919907b38384a0405d349cfc659b2b3d985/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java#L117   Fix can be as easy as https://github.com/liscju/checkstyle/commit/ad9c3340f458c38aa833e88e83d506bfeb0cc76b or operation clear,add can be extracted in method","closed","","liscju","2015-08-16T11:37:32Z","2015-08-17T06:53:26Z"
"","1244","Improve exception handling in Checker class","Catching `Exception` is bad practice. The below code from com/puppycrawl/tools/checkstyle/Checker.java:174 needs to be improved:  ``` java             else {                 throw new CheckstyleException(name                         + "" is not allowed as a child in Checker"");             }         }         catch (final Exception ex) {             throw new CheckstyleException(""cannot initialize module "" + name                     + "" - "" + ex.getMessage(), ex);         } ```  Moreover, suppression from `pmd.xml` needs to be removed.","closed","approved,","mkordas","2015-06-27T14:26:40Z","2015-10-31T20:48:02Z"
"","1245","Improve exception handling in CheckstyleAntTask class","Catching `Exception` is bad practice. Code around `com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java:367` needs to be changed.  Discussion from #1195:  > interesting case ... after update it will be in case of IOException --> BuildException(""Unable to create a Checker: "") , but in case of NPE or NumberFormatException ---> NPE or NumberFormatException :). If we do not guarantee a type of exception from our code why we should bother with BuildException at all ? > Please look at https://github.com/checkstyle/checkstyle/blob/master/config/findbugs-exclude.xml#L13 > I do not claim that basic ANT taks are done in right approach, but will follow their pattern. > Here is an example of catching smth specific - https://git-wip-us.apache.org/repos/asf?p=ant.git;a=blob;f=src/main/org/apache/tools/ant/taskdefs/Chmod.java;h=ac0c3d8d143493706be0d1ae875177146db43f67;hb=HEAD#l197 >  > I did more search and found :  > https://ant.apache.org/manual/tutorial-writing-tasks.html >  > > Oh, what's that in execute()? Throw a BuildException? Yes, that's the usual way to show > >  Ant that something important is missed and complete build should fail. The string  > > provided there is written as build-failes-message. Here it's necessary because the log() > >  method can't handle a null value as parameter and throws a NullPointerException. > >  (Of course you can initialize the message with a default string.) >  > So it looks like ANT suggest to throw BuildException only if some arguments are missed or smth is not correct with initialization phase.  > So it mean that we are ok with your solution , but it would be better to somehow split initialization phase and processing and throw BuildException by initialization failure, and throw exception as is in all other cases. [That could be done as another issue]","closed","approved,","mkordas","2015-06-27T14:29:33Z","2015-08-31T05:08:34Z"
"","1200","Some integtration tests fail during ""mvn verify""","Below is output of ""maven-failsafe-plugin"":  ``` OverloadMethodsDeclarationOrderTest.overloadMethodsTest:41->BaseCheckTestSupport.verify:94->BaseCheckTestSupport.verify:109->BaseCheckTestSupport.verify:135 error message 0 expected:<...larationOrder.java:2[6: Overload methods should not be split. Previous overloaded method located at line '15]'.> but was:<...larationOrder.java:2[8: Overload methods should not be split. Previous overloaded method located at line '17]'.>   VariableDeclarationUsageDistanceTest.arrayTypeStyleTest:42->BaseCheckTestSupport.verify:94->BaseCheckTestSupport.verify:109->BaseCheckTestSupport.verify:140 error message 0 expected:<0> but was:<71>   MethodNameTest.methodNameTest:60->BaseCheckTestSupport.verify:94->BaseCheckTestSupport.verify:109->BaseCheckTestSupport.verify:135 error message 0 expected:<...rridenMethods.java:1[1:14: Method name 'F]oo' must match patte...> but was:<...rridenMethods.java:1[7:17: Method name 'PUBLICf]oo' must match patte...>   AbbreviationAsWordInNameTest.abbreviationAsWordInNameTest:49->BaseCheckTestSupport.verify:94->BaseCheckTestSupport.verify:109->BaseCheckTestSupport.verify:135 error message 0 expected:<...nTypeNameCheck.java:[50]: Abbreviation in na...> but was:<...nTypeNameCheck.java:[3]: Abbreviation in na...>   SingleLineJavadocTest.singleLineJavadocTest:38->BaseCheckTestSupport.verify:94->BaseCheckTestSupport.verify:109->BaseCheckTestSupport.verify:135 error message 0 expected:<...neJavadocCheck.java:[5]: Single-line Javado...> but was:<...neJavadocCheck.java:[4]: Single-line Javado...>   JavadocMethodTest.javadocMethodTest:37->BaseCheckTestSupport.verify:94->BaseCheckTestSupport.verify:109->BaseCheckTestSupport.verify:135 error message 0 expected:<[/home/alex/workspace/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/javadoc/InputJavadocMethodCheck_SmallMethods.java:57:5: Missing a Javadoc comment].> but was:<[Audit done].> Tests in error:    IndentationTest.correctWhileTest:105 » Runtime File ""/home/alex/workspace/chec...  Tests run: 87, Failures: 6, Errors: 1, Skipped: 0 ```","closed","approved,","ivanov-alex","2015-06-10T21:51:20Z","2015-06-11T20:15:54Z"
"","1359","Issue #1293: Refactoring of EqualsAvoidNullCheck. More UTs.","Behaviour of the Check has not changed. Checkstyle reports before and after my commit are identical: http://baratali.github.io/equals_avoid/index.html (report under Guava+HBase)","closed","","baratali","2015-07-12T14:43:15Z","2015-07-26T08:35:27Z"
"","1368","Add test coverage to JavadocTagContinuationIndentation check. #1308","Before: ![image](https://cloud.githubusercontent.com/assets/5467276/8661116/9eb14b44-29b5-11e5-92a0-0fed67bcbe8d.png)  After: ![image](https://cloud.githubusercontent.com/assets/5467276/8661126/ab0184f4-29b5-11e5-8aae-16464a1d2571.png)","closed","","mkordas","2015-07-13T21:20:12Z","2015-07-14T21:01:04Z"
"","1194","Provide additional regression test for ParenPad check. #1189","Before we proceed with any modifications in ParenPad check, it's good to have thorough regression test. Looks like this check works correctly with all the cases right now.","closed","","mkordas","2015-06-08T19:33:45Z","2015-06-08T21:24:37Z"
"","1480","Coverage has been increased to 100% in NeedBracesCheck. Issue #1291","Before changes: http://sabaka.github.io/NeedBraces/checkstyle.html After changes: http://sabaka.github.io/NeedBraces/master/checkstyle.html  Reports are identical","closed","","sabaka","2015-07-26T02:38:50Z","2015-07-28T23:45:25Z"
"","1442","Coverage has been increased to 100% in AnnotationLocationCheck #908","Before changes: http://sabaka.github.io/AnnotationLocation/master/checkstyle.html after: http://sabaka.github.io/AnnotationLocation/checkstyle.html","closed","","sabaka","2015-07-21T06:02:26Z","2015-07-21T20:57:34Z"
"","1525","BooleanExpressionComplexity complains about similar and simple expression","Base on discussion at https://github.com/checkstyle/checkstyle/pull/1468, BooleanExpressionComplexity (http://checkstyle.sourceforge.net/config_metrics.html#BooleanExpressionComplexity) Check should not raise violation (with special property) of code like this:  ```             return type == TokenTypes.PACKAGE_DEF                 || type == TokenTypes.CLASS_DEF                 || type == TokenTypes.INTERFACE_DEF                 || type == TokenTypes.ENUM_DEF                 || type == TokenTypes.ANNOTATION_DEF                 || type == TokenTypes.METHOD_DEF                 || type == TokenTypes.CTOR_DEF                 || type == TokenTypes.VARIABLE_DEF ```  It is not always possible to refactor that code and in current form performance is the same be readability is better.   before implementation, please generate report for big projects to prove that such code is common. ##","open","approved,","romani","2015-08-01T14:07:06Z","2022-03-06T16:19:07Z"
"","1143","ThrowCountCheck: change for default value","base on discussion at https://github.com/checkstyle/checkstyle/pull/1083#issuecomment-106083510  please make a default value to 4. update javadoc/xdoc with explanation why that value is used.","closed","high demand,","romani","2015-05-28T00:28:18Z","2015-06-24T00:13:07Z"
"","1173","Investigate Jacoco maven plugin for  test coverage","Base on #1167 , we can not always do workarounds and play with cobertura to make it happy.  Assignee: @MEZk   Investigate: 0) open github issue against cobertura (it could be done base on workaround at #1167) 1) convert cobertura config to jacoco at pom.xml  2) recheck how convenient HTML report of jacoco maven plugin","closed","approved,","romani","2015-06-05T00:02:16Z","2015-08-18T06:45:03Z"
"","1201","SuppressWarningsCheck fails with exception on its own input file InputSuppressWarningsHolder.java","Attempt to launch Checkstyle over its own sources (all sources , not only production code ) cause strange Exception ""java.lang.IllegalStateException: Should never get here, type: 125 text: +""  my logs ( /home/rivanov/java/git-others/checkstyle/checkstyle is clone of master from github):  ``` 21:25 /var/tmp $ java -jar checkstyle-6.8-SNAPSHOT-all.jar -c /home/rivanov/java/git-others/checkstyle/checkstyle/config/checkstyle_checks.xml -p /home/rivanov/java/git-others/checkstyle/checkstyle/config/checkstyleProperties.properties /home/rivanov/java/git-others/checkstyle/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/InputSuppressWarningsHolder.java Jun 10, 2015 9:48:48 PM com.puppycrawl.tools.checkstyle.TreeWalker processFiltered SEVERE: IllegalStateException occurred during the analysis of file /home/rivanov/java/git-others/checkstyle/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/InputSuppressWarningsHolder.java. java.lang.IllegalStateException: Should never get here, type: 125 text: +     at com.puppycrawl.tools.checkstyle.checks.annotation.SuppressWarningsCheck.visitToken(SuppressWarningsCheck.java:183)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:393)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:482)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:322)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:195)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:76)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:260)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:234)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:86)  Starting audit... ....... 21:50 /var/tmp $ cat /home/rivanov/java/git-others/checkstyle/checkstyle/config/checkstyleProperties.properties checkstyle.suppressions.file=/home/rivanov/java/git-others/checkstyle/checkstyle/config/suppressions.xml checkstyle.header.file=/home/rivanov/java/git-others/checkstyle/checkstyle/config/java.header checkstyle.importcontrol.file=/home/rivanov/java/git-others/checkstyle/checkstyle/config/import-control.xml  ```","closed","high demand,","romani","2015-06-11T04:55:23Z","2015-06-28T17:32:01Z"
"","1167","Investigate incorrect cobertura code coverage","Assigned: @MEZk   cobertura show non covered lines of code at ExecutableStatementCountCheck that definitely executed during UTs. We need to open issue against cobertura about this. We need to try substitute cobertura maven plugin with jacoco maven plugin","closed","approved,","romani","2015-06-04T04:31:35Z","2015-06-05T00:15:23Z"
"","1136","ThrowCountCheck should have option to skip private methods","Assigned to : @Vladlis   base on discussion at https://github.com/checkstyle/checkstyle/pull/1083  and report generated over openjdk, springframework, ........ . Nobody follow that rule of ""one throw"".  Even user decided to reach that target - it is will be reasonable to spit work and skip private methods as they do not cause problems for other classes and Class can decide itself on what inner level/method to do wrapping to non-checked exception to satisfy 1 throws rule.  New boolean option ""ignorePrivateMethods"", default value is TRUE.  Attention: reason of option should be explained in xdoc/javadoc to user.","closed","approved,","romani","2015-05-26T18:47:41Z","2015-05-27T17:26:13Z"
"","1009","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.design","Assigned to : @Vladlis  that task is good for somebody who want to start contributing to Checkstyle.  http://checkstyle.sourceforge.net/cobertura/index.html make code coverage 100% for package design - http://checkstyle.sourceforge.net/cobertura/frame-summary-com.puppycrawl.tools.checkstyle.checks.design.html","closed","approved,","romani","2015-04-28T17:03:00Z","2015-05-25T22:52:12Z"
"","1024","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.sizes","Assigned to : @MEZk  that task is good for somebody who want to start contributing to Checkstyle.  http://checkstyle.sourceforge.net/cobertura/index.html make code coverage 100% for package - http://checkstyle.sourceforge.net/cobertura/frame-summary-com.puppycrawl.tools.checkstyle.checks.sizes.html","closed","approved,","romani","2015-04-30T04:57:46Z","2015-06-26T15:30:51Z"
"","1022","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.modifier","assigned to :  @Lenni0693  that task is good for somebody who want to start contributing to Checkstyle.  http://checkstyle.sourceforge.net/cobertura/index.html make code coverage 100% for package - http://checkstyle.sourceforge.net/cobertura/frame-summary-com.puppycrawl.tools.checkstyle.checks.modifier.html","closed","approved,","romani","2015-04-29T18:54:46Z","2015-07-05T17:41:26Z"
"","1153","correction of parsing of attributes in AtclauseOrderCheck, #1152","as the number of uncovered with UT lines increased after changes, I also had to change a UT to increase the coverage and pass cobertura","closed","","Vladlis","2015-05-30T21:22:50Z","2015-06-02T14:59:12Z"
"","1495","Changed SAME_PACKAGE rule for CustomImportOrderCheck #1262","As a base for reports configuration from google_checks.xml was taken (referenced as OLD further), modified by replacing ""com.google"" with SAME_PACKAGE (referenced as NEW further) and executed on several projects from http:/github.com/google Switching from ""com.google"" to SAME_PACKAGE results in many errors, fixing SAME_PACKAGE logic removes them.  **Guava project:** Summary: most errors are gone, report after the change is identical to validation using configuration from google_checks.xml [Report using OLD configuration on 6.8.1](http://ivanov-alex.github.io/i1262/target_Guava_OLD/site/checkstyle.html) [Report using NEW configuration on 6.8.1](http://ivanov-alex.github.io/i1262/target_Guava_Before/site/checkstyle.html) [Report using NEW configuration on 6.9-SNAPSHOT](http://ivanov-alex.github.io/i1262/target_Guava_After/site/checkstyle.html) [comparison NEW configuration on 6.8.1 to 6.9-SNAPSHOT](https://www.diffchecker.com/mku11l4z)  **Bazel project:** Summary: most errors gone (60 instead of 5676). Few new errors on the end of report: Google project has code in com.facebook hierarchy, now Checkstyle requires them to be ordered as SAME_PACKAGE (after static) [Report using OLD configuration on 6.8.1](http://ivanov-alex.github.io/i1262/target_bazel_OLD/site/checkstyle.html) [Report using NEW configuration on 6.8.1](http://ivanov-alex.github.io/i1262/target_bazel_before/site/checkstyle.html) [Report using NEW configuration on 6.9-SNAPSHOT](http://ivanov-alex.github.io/i1262/target_bazel_After/site/checkstyle.html) [comparison NEW configuration on 6.8.1 to 6.9-SNAPSHOT](https://www.diffchecker.com/l9pec3oh)  Comparison of check using 6.8.1 code with configuration from google_checks.xml and fixed code with modified configuration where ""com.google"" replaced with SAME_PACKAGE [comparison OLD configuration on 6.8.1 to NEW on 6.9-SNAPSHOT](https://www.diffchecker.com/induceyp) Difference is on files that have ""com.facebook"" package.","closed","","ivanov-alex","2015-07-28T16:25:45Z","2015-08-10T04:04:34Z"
"","1111","Append google analytics to all HTML pages","Append google analytics to all pages. Just for fun.  https://www.google.com/analytics/web/?authuser=0#report/visitors-overview/a63181194w98599788p102620960/","closed","approved,","romani","2015-05-21T00:33:02Z","2015-05-21T14:43:02Z"
"","1397","SupressionLoaderTest fixed. Now it checks internet with sourceforge","and will not fail, if soursforge is unreachable","closed","","sabaka","2015-07-16T21:54:09Z","2015-07-18T22:52:58Z"
"","1337","UT coverage 100% for ImportControlCheck #1128","and for ImportControlLoader","closed","","ivanov-alex","2015-07-09T20:45:08Z","2015-07-12T05:24:04Z"
"","1064","Serious performance problem in All Javadoc Check that are based on ANTLR parser","Analysis of Checkstyle code (659 files) with [checkstyle_checks.xml](../blob/master/config/checkstyle_checks.xml) currently lasts more than minute.   When [AtclauseOrder](../blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java) check is disabled, then analysis completes in 7 seconds on my machine  Thanks for Csaba Kozák for reporting.","closed","approved,","mkordas","2015-05-10T08:56:48Z","2016-05-01T03:05:45Z"
"","1320","UT coverage 100% for ImportOrderCheck #1128","Also removed validation `if (ident != null)` from `private void doVisitToken(FullIdent ident, boolean isStatic, boolean previous)` because it cannot be covered (`ident==null` will not be possible on files that will be successfully compiled). You can refer reports [BEFORE](http://ivanov-alex.github.io/target_ImportOrder_BEFORE/site/checkstyle.html) and [AFTER](http://ivanov-alex.github.io/target_ImportOrder_AFTER/site/checkstyle.html) as a proof. Reports are identical.","closed","","ivanov-alex","2015-07-08T18:37:37Z","2015-07-17T10:25:32Z"
"","1084","increased coverage in class DesignForExtensionCheck, #1009","also fixed testGetRequiredTokens() methods in the package","closed","","Vladlis","2015-05-16T22:24:41Z","2015-05-18T14:37:07Z"
"","1039","Fix inner class should be static FindBugs violations, issue #928","All violations of [SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS](http://findbugs.sourceforge.net/bugDescriptions.html#SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS) are fixed.","closed","","mkordas","2015-05-01T15:24:28Z","2015-05-01T16:28:23Z"
"","1308","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.checks.javadoc","All that exclusions from pom.xml should be resolved and removed from pom.xml:  ``` xml .*.checks.javadoc.AbstractJavadocCheck9093 .*.checks.javadoc.AbstractJavadocCheck\$.*5068 .*.checks.javadoc.AtclauseOrderCheck8888 .*.checks.javadoc.HtmlTag7590 .*.checks.javadoc.JavadocMethodCheck9096 .*.checks.javadoc.JavadocNodeImpl5084 .*.checks.javadoc.JavadocPackageCheck8095 .*.checks.javadoc.JavadocParagraphCheck92100 .*.checks.javadoc.JavadocStyleCheck8997 .*.checks.javadoc.JavadocTag9285 .*.checks.javadoc.JavadocTagContinuationIndentationCheck8186 .*.checks.javadoc.JavadocTypeCheck9591 .*.checks.javadoc.JavadocUtils8391 .*.checks.javadoc.JavadocVariableCheck9390 .*.checks.javadoc.SummaryJavadocCheck93100 .*.checks.javadoc.TagParser9298 .*.checks.javadoc.WriteTagCheck10091 ```","closed","approved,","mkordas","2015-07-07T21:30:16Z","2015-08-01T13:57:55Z"
"","1296","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.filters","All that exclusions from pom.xml should be resolved and removed from pom.xml:  ```           .*.filters.IntMatchFilter10090           .*.filters.SuppressElement8288           .*.filters.SuppressionCommentFilter8393           .*.filters.SuppressionCommentFilter\$Tag9694           .*.filters.SuppressionFilter10058           .*.filters.SuppressionsLoader6877           .*.filters.SuppressWithNearbyCommentFilter7689           .*.filters.SuppressWithNearbyCommentFilter\$Tag8878 ```","closed","approved,","romani","2015-07-06T00:34:18Z","2015-08-03T02:24:35Z"
"","1294","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle","All that exclusions from pom.xml should be resolved and removed from pom.xml:  ```           .*.checkstyle.AnnotationUtility6060           .*.Checker7984           .*.ConfigurationLoader8679           .*.ConfigurationLoader\$.*6584            .*.DefaultConfiguration10092           .*.DefaultLogger7576           .*.Main8090           .*.PackageNamesLoader7872           .*.PackageObjectFactory7575           .*.PropertiesExpander5083           .*.PropertyCacheFile2219           .*.checkstyle.ScopeUtils9094           .*.TreeWalker9291           com.puppycrawl.tools.checkstyle.Utils8593           .*.XMLLogger8697  `` ```","closed","approved,","romani","2015-07-06T00:31:51Z","2015-08-05T14:07:10Z"
"","1295","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.api","All that exclusions from pom.xml should be resolved and removed from pom.xml:  ```           .*.api.AbstractFileSetCheck7587           .*.api.AbstractLoader7588           .*.api.AbstractViolationReporter10090           .*.api.AuditEvent10093           .*.api.AutomaticBean9082           .*.api.AutomaticBean\$.*7590           .*.api.Check10086           .*.api.Comment10095           .*.api.DetailAST9598           .*.api.FileContents9693           .*.api.FileText5059           .*.api.FullIdent8396           .*.api.JavadocTagInfo2577           .*.api.JavadocTagInfo\$.*08           .*.api.LocalizedMessage\$.*4166           .*.api.SeverityLevelCounter5076           .*.api.TokenTypes6280 ```","closed","approved,","romani","2015-07-06T00:32:39Z","2015-07-26T00:06:48Z"
"","1566","Fix violations reported by Checkstyle checks","All reasonable violations should be fixed.  All Checks have to be applied to Checkstyle code base.","closed","approved,","rdiachenko","2015-08-06T22:45:39Z","2015-09-01T04:16:14Z"
"","1122","Use parallel test execution mode in maven-surefire-plugin. #1122","After this change test execution time on my machine has dropped from 30 to 20 seconds.","closed","","mkordas","2015-05-23T21:39:48Z","2015-05-27T17:23:49Z"
"","1371","Fix Header causing exception with default config, issue #1129.","After fix Header does not rise any violation with [default config](https://github.com/checkstyle/checkstyle/commit/6fbce5c80b62931ad2f532819f15791a36cdb6ba#diff-6e886340e5a2ff9bd26e48165c70663dL58). In accordance with [manual](http://checkstyle.sourceforge.net/config_header.html#RegexpHeader) default value for property `header` is `null`.   [Reports](http://mezk.github.io/index.html).","closed","","MEZk","2015-07-13T22:11:29Z","2015-07-18T13:42:10Z"
"","1370","Coverage has been increased to 100% in MissingOverrideCheck","After changes: http://sabaka.github.io/MissingOverride/checkstyle.html Before: http://sabaka.github.io/MissingOverride/master/checkstyle.html  Coverage increased to 100%","closed","","sabaka","2015-07-13T21:44:42Z","2015-07-14T22:11:26Z"
"","1796","Fix too broad scope of variables. #1555","Additionally, obsolete assertions were removed.  Fixes `TooBroadScope` inspection violations.  Description:  > Reports any variable declarations of which the scope can be narrowed. Especially useful for ""Pascal style"" declarations at the start of a method, but variables with too broad a scope are also often left over after refactorings.","closed","","mkordas","2015-08-19T20:32:33Z","2015-08-20T05:15:53Z"
"","1453","LeftCurlyCheck have hidden option, issue #975","Added setter for `ignoreEnums`, updated javadoc/xdoc and provided tests for option.","closed","","MEZk","2015-07-23T18:15:57Z","2015-07-31T15:59:18Z"
"","1145","JavadocMethod parses allowedAnnotations incorrectly","According to its [documentation](http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod), `allowedAnnotations` [is a `StringSet`](http://checkstyle.sourceforge.net/property_types.html#stringSet) (referred to as ""list of strings"") whose documentation states that ""The string representation is parsed as a set of comma (',') separated strings."", but `JavadocMethodCheck#setAllowedAnnotations` actually splits the given argument on `"", ""` (comma + space), and also does not account for whitespace (e.g. line breaks, which may occur in XML attributes).","closed","approved,","barkefors","2015-05-28T11:56:48Z","2015-05-28T17:08:36Z"
"","1273","CustomImportOrder check: THIRD_PARTY_PACKAGE should exclude SAME_PACKAGE(n) imports","According to documentation THIRD_PARTY_PACKAGE imports should exclude SAME_PACKAGE(n) imports: `3) THIRD_PARTY_PACKAGE group. This group sets ordering of third party imports. Third party imports are all imports except STATIC, SAME_PACKAGE(n), STANDARD_JAVA_PACKAGE and SPECIAL_IMPORTS.`  However, in fact they are not. If THIRD_PARTY_PACKAGE preceeds SAME_PACKAGE on a list of rules and SAME_PACKAGE import matches RegExp for THIRD_PARTY_PACKAGE group (default value is "".*"" which will cover all the imports), it will be included into THIRD_PARTY_PACKAGE. For example:  ``` java package com.puppycrawl.tools.checkstyle.imports;  import com.google.common.annotations.GwtCompatible; import com.puppycrawl.tools.*; import com.google.common.annotations.Beta; ```  If configuration has THIRD_PARTY_PACKAGE before SAME_PACKAGE  ``` xml                                     ```  Output will have no errors (all 3 imports will be treated as one group: THIRD_PARTY_PACKAGE)  ``` Starting audit... Audit done. ```  If configuration has SAME_PACKAGE before THIRD_PARTY_PACKAGE  ``` xml                                     ```  Output will show error for  `import com.puppycrawl.tools.*;`  ``` Starting audit... /home/alex/test.java:4: warning: Import statement is in the wrong order. Should be in the 'SAME_PACKAGE' group. Audit done. ```","closed","approved,","ivanov-alex","2015-07-02T07:54:43Z","2015-09-18T13:01:30Z"
"","1333","Add SuppressionAnnotationFilter","A new filter is added. It satisfies issue #1340. It suppresses events generated from code elements annotated by user defined annotations. It has 3 properties: 'annotationName' - a StringSet which contains annotations' names, simple or fully-qualified; 'permittedChecks' - a StringSet which contains regular expressions for checks which bypass filter; 'modifiersExcluded' - a boolean, if true them modifiers of an annotated element are excluded from suppression (including suppressive annotations themselves), set true by default.","closed","","attatrol","2015-07-09T15:25:06Z","2017-03-30T15:49:46Z"
"","1170","Move Regexp check from miscellaneous to regexp category","`RegexpCheck` needs to be moved from `com.puppycrawl.tools.checkstyle.checks` to `com.puppycrawl.tools.checkstyle.checks.regexp`.  Documentation needs to be moved from [config_misc.html#Regexp](http://checkstyle.sourceforge.net/config_misc.html#Regexp) to [config_regexp.htm](http://checkstyle.sourceforge.net/config_regexp.htm).","closed","approved,","mkordas","2015-06-04T19:56:37Z","2015-06-07T02:21:10Z"
"","1242","RedundantModifier for inner classes and enum constructors","`RedundantModifier` should also check: - modifier of enum constructor (implicitly **private**) - modifier of inner type of interface (implicitly **static**)  ``` java public enum MyEnum {   private MyEnum() { } // private modifier is redundant }  public interface MyInterface {   static class MyInnerClass { } // static modifier is redundant } ```","closed","approved,","WonderCsabo","2015-06-25T13:50:19Z","2016-08-12T21:11:02Z"
"","1176","Make cobertura and coveralls build faster. #1176","`cobertura:check` is used instead of `verify` with exclusions. This ensures that only things needed to perform coverage verification are executed.","closed","","mkordas","2015-06-05T16:57:09Z","2015-06-05T19:28:05Z"
"","1664","Indentation check for annotations with arguments on multiple lines blows up","```` $ cat TestClass.java public class TestClass {     @JsonView({         View.Common.class,         View.EZPZ.class     })     public List metrics; }  $ cat TestConfig.xml                        $ java -jar checkstyle-7.3-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:5: '}' have incorrect indentation level 4, expected level should be 8. [Indentation] Audit done. Checkstyle ends with 1 errors. ````  [JsonView looks like it came from `org.codehaus`.](http://grepcode.com/file/repo1.maven.org/maven2/org.codehaus.jackson/jackson-mapper-asl/1.9.2/org/codehaus/jackson/map/annotate/JsonView.java)  This expects the final `})` to be indented. This seems wrong. Thanks!","closed","indentation,","zheller","2015-08-11T20:53:30Z","2017-03-02T03:54:16Z"
"","1900","Unexpected logic for '}' location with ""same"" mode","``` /var/tmp $ cat A.java  public class A {  public String getTypeText() { return ""int""; }  public String getTypeText() {          try {             System.out.println(""a"");         } catch (IllegalStateException | IllegalArgumentException e) {             throw new RuntimeException(e);         }}      static {         try {             System.out.println(""a"");         } catch (IllegalStateException | IllegalArgumentException e) {             throw new RuntimeException(e);         }     } }  /var/tmp $ cat checks.xml                                                                  /var/tmp $ java -jar checkstyle-6.9-SNAPSHOT-all.jar -c checks.xml A.java Starting audit... /var/tmp/A.java:3:45: '}' should have line break before. /var/tmp/A.java:10:10: '}' should be on a new line. /var/tmp/A.java:10:10: '}' should be on the same line. /var/tmp/A.java:18:5: '}' should be on the same line. /var/tmp/A.java:19:1: '}' should be on the same line. Audit done. Checkstyle ends with 5 errors. ```  1)  /var/tmp/A.java:10:10: '}' should be on a new line. /var/tmp/A.java:10:10: '}' should be on the same line.  that is problem and weird - the same symbol and opposite demands  2)  /var/tmp/A.java:3:45: '}' should have line break before.  that is not want described in our documentation, and that look like a bug as we have mode ""same"" it demand to place it on new line as ""alone"" do.  So we need to update xdoc to clearly state that same is for next block multi-block statement or new line. Examples in xdoc need to be exact for user to understand how each mode works.","closed","approved,","romani","2015-08-26T12:01:21Z","2015-09-03T13:43:49Z"
"","1181","defining output file cause CLI to fail as it could not find output file","``` $ java -cp checkstyle-6.7-all.jar com.puppycrawl.tools.checkstyle.Main -c my_check.xml Test.java  Starting audit... Audit done. $ java -cp checkstyle-6.7-all.jar com.puppycrawl.tools.checkstyle.Main -c my_check.xml Test.java -o file.txt Could not find file 'file.txt'.  ```  file has to be created, CLI should not expect it to exists  Workaround: use 6.6","closed","high demand,","romani","2015-06-05T20:41:10Z","2015-06-07T16:08:12Z"
"","1149","NullPointerException at PackageDeclarationCheck","```      ```  https://github.com/checkstyle/contribution/tree/master/checkstyle-tester openjdk|hg|http://hg.openjdk.java.net/jdk7/jdk7/jdk/  output:  ```       SEVERE: NullPointerException occurred during the analysis of file checkstyle/contribution/checkstyle-tester/src/main/java/ openjdk/test/com/sun/jdi/RedefineCrossStart.java. java.lang.NullPointerException   at com.puppycrawl.tools.checkstyle.checks.coding.PackageDeclarationCheck.finishTree(PackageDeclarationCheck.java:68)   at com.puppycrawl.tools.checkstyle.TreeWalker.notifyEnd(TreeWalker.java:366)   at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:324)   at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:195)   at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:76)   at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:260)   at org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:253)   at org.apache.maven.plugin.checkstyle.AbstractCheckstyleReport.executeReport(AbstractCheckstyleReport.java:473)   at org.apache.maven.plugin.checkstyle.CheckstyleReport.executeReport(CheckstyleReport.java:155)   at org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:255)   at org.apache.maven.plugins.site.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:219)   at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.renderModule(DefaultSiteRenderer.java:317)   at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:134)   at org.apache.maven.plugins.site.SiteMojo.renderLocale(SiteMojo.java:175)   at org.apache.maven.plugins.site.SiteMojo.execute(SiteMojo.java:138)   at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)   at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)   at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)   at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)   at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)   at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)   at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)   at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)   at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)   at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)   at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)   at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)   at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   at java.lang.reflect.Method.invoke(Method.java:606)   at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)   at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)   at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)   at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)  May 25, 2015 12:01:11 AM com.puppycrawl.tools.checkstyle.TreeWalker processFiltered SEVERE: NullPointerException occurred during the analysis of file checkstyle/contribution/checkstyle-tester/src/main/java/openjdk/test/com/sun/jdi/RedefineCrossEvent.java. java.lang.NullPointerException   at com.puppycrawl.tools.checkstyle.checks.coding.PackageDeclarationCheck.finishTree(PackageDeclarationCheck.java:68)   at com.puppycrawl.tools.checkstyle.TreeWalker.notifyEnd(TreeWalker.java:366)   at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:324)   at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:195)   at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:76)   at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:260)   at org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:253)   at org.apache.maven.plugin.checkstyle.AbstractCheckstyleReport.executeReport(AbstractCheckstyleReport.java:473)   at org.apache.maven.plugin.checkstyle.CheckstyleReport.executeReport(CheckstyleReport.java:155)   at org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:255)   at org.apache.maven.plugins.site.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:219)   at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.renderModule(DefaultSiteRenderer.java:317)   at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:134)   at org.apache.maven.plugins.site.SiteMojo.renderLocale(SiteMojo.java:175)   at org.apache.maven.plugins.site.SiteMojo.execute(SiteMojo.java:138)   at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)   at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)   at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)   at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)   at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)   at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)   at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)   at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)   at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)   at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)   at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)   at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)   at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   at java.lang.reflect.Method.invoke(Method.java:606)   at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)   at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)   at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)   at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352) ```  Latest content: https://github.com/openjdk/jdk12u/blob/master/test/jdk/com/sun/jdi/RedefineCrossStart.java","closed","high demand,","romani","2015-05-29T00:22:45Z","2020-04-07T13:52:13Z"
"","1405","New RegexpSinglelineJava property ignoreStrings","```       ...  ```  Strings should also be ignorable (like comments already are), because they can contain any valid text and therefore are likely to give false positive results.","closed","","robertwhitebit","2015-07-18T18:52:56Z","2022-05-18T15:52:41Z"
"","1205","Backward compatibility broken by rename of FileContents.getFilename() to getFileName()","[This recent commit](https://github.com/checkstyle/checkstyle/commit/7dd24c8c35572b5db3e5c905d440e813cfe2538c) causes problems with custom checks compiled against earlier versions of Checkstyle, because the method `getFilename()` in class FileContents has been renamed to `getFileName()`. The effects are simliar to issue #505 because custom checks stop working unless they are recompiled against the new Checkstyle version (and in fact, they must have their code changed). This is bad because SonarQube does not follow Checkstyle's fast release cycle ([they are still on 6.4.1](http://docs.sonarqube.org/display/PLUG/Checkstyle+Plugin)). So if the custom check gets reworked to run in a current IDE, it no longer works in SonarQube.","closed","approved,","tsjensen","2015-06-12T17:05:15Z","2015-06-12T22:42:33Z"
"","1246","SuppressWarnings check does not support value pair representation","[SuppressWarnings check](http://checkstyle.sourceforge.net/config_annotation.html#SuppressWarnings) recognizes annotation `@SuppressWarnings(value = UNUSED)` as empty one and produces warning `The warning '' cannot be suppressed at this location.`.  Before assuming that `SuppressWarnings` is empty, it must be checked for existence of `ANNOTATION_MEMBER_VALUE_PAIR` token.","closed","approved,","mkordas","2015-06-27T15:33:41Z","2015-06-28T17:31:39Z"
"","1378","fix JavadocParagraph allows new line before the next paragraph, #1332","[reports](http://vladlis.github.io/) show that the number of violations in guava, openjdk7, hibernate-orm and spring framework is not less, than it was before changes","closed","","Vladlis","2015-07-14T17:25:12Z","2015-07-19T14:31:59Z"
"","1124","MutableException check fails with NPE if extended class is in canonical form","[MutableException](http://checkstyle.sourceforge.net/config_design.html#MutableException) check fails with `NullPointerException` if extended class is in canonical form. #### Configuration  ``` xml  ``` #### Input file  ``` java class CustomException extends java.lang.Exception {} ``` #### Stacktrace  ``` java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck.isExtendedClassNamedAsException(MutableExceptionCheck.java:155)         at com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck.visitClassDef(MutableExceptionCheck.java:114)         at com.puppycrawl.tools.checkstyle.checks.design.MutableExceptionCheck.visitToken(MutableExceptionCheck.java:91)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:393)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:482)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:322)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:195)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:76)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:260) ```","closed","high demand,","mkordas","2015-05-23T23:31:35Z","2015-05-25T22:39:45Z"
"","1270","Make coverage 100% for Indentation check","[Indentation check](../blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java) requires 100% code coverage, as it is pure algorithm.","closed","approved,","mkordas","2015-07-01T20:11:52Z","2015-07-22T13:57:42Z"
"","1088","Use EqualsVerifier library to test equals and hashCode methods","[EqualsVerifier](https://github.com/jqno/equalsverifier) is library that can be used in Java unit tests to verify whether the contract for the `equals` and `hashCode` methods in a class is met.  Let's use it in Checkstyle to improve coverage and find all problems in custom `equals` and `hashCode` implementations.","closed","approved,","mkordas","2015-05-17T08:51:34Z","2015-05-21T23:35:38Z"
"","1035","EmptyLineSeparator always requires empty line between header and package","[EmptyLineSeparator](http://checkstyle.sourceforge.net/config_whitespace.html#EmptyLineSeparator) was created to cover [4.6.1 Vertical Whitespace](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.6.1-vertical-whitespace).  Right now it always enforces empty line between header and package  ``` java /////////////////////////////////////////////////// //HEADER /////////////////////////////////////////////////// package com.puppycrawl.tools.checkstyle.whitespace; // 'package' should be separated from previous statement. ```  There is nothing about such requirement in Google Style. It only says:  > A single blank line appears between consecutive members (or initializers) of a class: fields, constructors, methods, nested classes, static initializers, instance initializers.  We can either: 1. Provide option to configure this behavior 2. Do not check that empty line at all  Moreover, in Checkstyle codebase header is not separated from package, so we are not compliant with ourselves.  What do you think?","closed","","mkordas","2015-05-01T12:35:15Z","2016-04-25T10:00:23Z"
"","1031","Improve documentation for CovariantEquals check","[CovariantEquals](http://checkstyle.sourceforge.net/config_coding.html#CovariantEquals) has very little of description and no examples.   Even blog post was written that this is confusing: http://www.bricode.com/java-checkstyle-covariant-equals-method-fix/.  We need to explain in description, why we do Enums validation too - https://github.com/checkstyle/checkstyle/issues/1011#issuecomment-98000591","closed","miscellaneous,","mkordas","2015-04-30T22:42:36Z","2015-11-07T07:41:06Z"
"","1234","ThrowCountCheck: change for default value, issue #1143","@romani  When I changed max throws statements default value to 4 it was also necessary to update UTs for ThrowCountCheck.","closed","","MEZk","2015-06-22T16:57:24Z","2015-06-24T06:47:20Z"
"","1572","Resolved javadoc problems that reported by java 8, issue #291.","@romani  use `mvn clean javadoc:javadoc`  Should we set `failOnError` flag of maven-javadoc-plugin to `true` ?","closed","","MEZk","2015-08-07T11:07:38Z","2015-08-08T21:07:37Z"
"","1895","Fixed PMD violation 'ConfusingTernary' (partial fix), issue #974","@romani  There are 6 PMD's violations after fix:  ``` [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ConfigurationLoader:361 Rule:ConfusingTernary Priority:3 Avoid if (x != y) ..; else ..;. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.DetailAST:115 Rule:ConfusingTernary Priority:3 Avoid if (x != y) ..; else ..;. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck:229 Rule:ConfusingTernary Priority:3 Avoid if (x != y) ..; else ..;. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck:196 Rule:ConfusingTernary Priority:3 Avoid if (x != y) ..; else ..;. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck:468 Rule:ConfusingTernary Priority:3 Avoid if (x != y) ..; else ..;. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.TagParser:104 Rule:ConfusingTernary Priority:3 Avoid if (x != y) ..; else ..;. ```  Those  classes require more detailed analysis of boolean expressions.","closed","","MEZk","2015-08-24T22:58:26Z","2015-08-26T15:18:48Z"
"","1355","Add new option for RightCurlyCheck, issue #1019.","@romani  I've added new option ""alone_or_singleline"" for RightCurlyCheck to enforce ""{"" to be alone on line and allow [single-line-single-statement](https://github.com/MEZk/checkstyle/commit/a756f4db8c07505aaead9cd6df97b59182f0193c#diff-78a4d0ad2378fd234b5628cb24fcd469R41) format of block. I've also provided UTs and generated [reports](http://mezk.github.io/index.html) to see the difference between ALONE and ALONE_OR_SINGLELINE options. As you can see from the reports, new option makes sense, single-line-sigle-statement blocks are often used in methods and constructors (especially in hibernate and apache-ant).","closed","","MEZk","2015-07-12T06:46:28Z","2015-07-31T15:58:54Z"
"","1235","Replace hardcoded message in WhitespaceAfterCheck with property value  (i18n), issue #967","@romani  I replaced hardcoded message in WhitespaceAfterCheck (`message = new Object[]{""cast""}`) with property value `ws.typeCast` . I also made internationalization  (i18n) for all supported languages in accordance with: [eng](https://en.wikipedia.org/wiki/Type_conversion) [de](https://de.wikipedia.org/wiki/Typumwandlung) [es](https://es.wikipedia.org/wiki/Conversi%C3%B3n_de_tipos) [fi](http://people.uta.fi/~jl/opk/muuttujat.html#muunnos) [fr](https://fr.wikipedia.org/wiki/Conversion_de_type) [ja](https://ja.wikipedia.org/wiki/%E5%9E%8B%E5%A4%89%E6%8F%9B) [pt](https://pt.wikipedia.org/wiki/Convers%C3%A3o_de_tipos) [tr](https://technet.microsoft.com/tr-tr/library/ms191530%28v=sql.110%29.aspx)","closed","","MEZk","2015-06-23T09:30:51Z","2015-06-27T21:02:06Z"
"","1297","Fix OneStatementPerLine on multiple field initialization bug, issue #1237","@romani  I completely reworked the check, because it detected only expression statements which are on the same line. I provided a bundle of UTs with comments to explain new check logic.  [REPORTS](http://mezk.github.io)","closed","","MEZk","2015-07-06T12:31:10Z","2015-07-12T05:27:24Z"
"","1259","Fix bug at RightCurlyCheck: Curly brace '}' should be on line by itself not reported for method with annotation, #1014","@romani  Fixed issue #1014 and provided additional UTs. How many (and what) projects should I use to generate report after my changes with checkstyle-tester?","closed","","MEZk","2015-06-28T21:01:49Z","2015-07-01T07:25:09Z"
"","1350","Fix failing of ITs for OneStatementPerLineCheck, issue#1348.","@romani  Due to incorrect notation of lines with warnings  (`//violation` instead of `//warn`) at [OneStatementPerLineInput](https://github.com/checkstyle/checkstyle/commit/3973710829d87a6628e41d158452bcdd96b3dcfc#diff-83181b6028df56201d0fa5c26842a95aL6) there was a ITs failure.  Nevertheless, we've found and solved the problem at Travis CI config durning IT phase.","closed","","MEZk","2015-07-11T08:59:33Z","2017-03-30T19:00:15Z"
"","1546","Added new Check: CommentsIndentationCheck, issue #333.","@romani  Differences from code, which was implemented by original author of the Check - [alexkravin](https://github.com/alexkravin/checkstyle/tree/CommentsIndentationCheck%23333) :  1) Fixed NPE at [getPreviousStmt](https://github.com/checkstyle/checkstyle/commit/30db8928ccb80fb24ef09a55d49f2badf86afacb#diff-98a10dcd6ab0642314ef374b42c293deR158), [visitSingleLineComment](https://github.com/checkstyle/checkstyle/commit/30db8928ccb80fb24ef09a55d49f2badf86afacb#diff-98a10dcd6ab0642314ef374b42c293deR137), [visitBlockComment](https://github.com/checkstyle/checkstyle/commit/30db8928ccb80fb24ef09a55d49f2badf86afacb#diff-98a10dcd6ab0642314ef374b42c293deR254). 2) Added test inputs to check NPE [at getPreviousStmt](https://github.com/checkstyle/checkstyle/commit/30db8928ccb80fb24ef09a55d49f2badf86afacb#diff-569b036e62fe04824543623da193755fR80), [at visitSingleLineComment](https://github.com/checkstyle/checkstyle/commit/30db8928ccb80fb24ef09a55d49f2badf86afacb#diff-569b036e62fe04824543623da193755fR117), [at visitBlockComment](https://github.com/checkstyle/checkstyle/commit/30db8928ccb80fb24ef09a55d49f2badf86afacb#diff-4e4948aac8ed5aaa762044ac76e11bbfR32). 3) Resolved PMD violation: TooFewBranchesForASwitchStatement:Swith are designed complex branches, and allow branches to share treatement. Using a switch for only a few branches is ill advised, as switches are not as easy to understand as if. In this case, it's most likely is a good idea to use a if statement instead, at least to increase code readability. For more information see the following [link](http://pmd.sourceforge.net/pmd-4.3.0/rules/design.html).   Replaced switch-statementat at  [getPreviousStmt](https://github.com/MEZk/checkstyle/commit/30db8928ccb80fb24ef09a55d49f2badf86afacb#diff-98a10dcd6ab0642314ef374b42c293deR163)  ``` java switch (blockBody.getType()) {     case TokenTypes.EXPR:         prevStmt = blockBody.getFirstChild().getFirstChild();         break;         default:     prevStmt = blockBody;         break; } ```  with if-else-statement  ``` java if (blockBody.getType() == TokenTypes.EXPR) {     prevStmt = blockBody.getFirstChild().getFirstChild(); } else {     prevStmt = blockBody; } ```  4) Added ITs. 5) Replaced link to google-style java guide at [config_misc.xml](https://github.com/checkstyle/checkstyle/commit/30db8928ccb80fb24ef09a55d49f2badf86afacb#diff-6d008890c58eff0fca4d70c2f52fccbfR185). 6) Updated google style coverage page. Updated [google_style.xml](https://github.com/checkstyle/checkstyle/commit/30db8928ccb80fb24ef09a55d49f2badf86afacb#diff-36ec9d43a841041d749cc197e1cf764eR913). Added correct link to google-style java guide. Other links should be replaced according to issue #751. 7) Provided international messages for violations. 8) Fixed checkstyle violations with checkstyle_checks.xml (left curly brace should be at the end of the line, left curly brace policy is EOL). 9) [REPORTS](http://mezk.github.io).","closed","","MEZk","2015-08-03T11:42:32Z","2017-05-03T04:21:41Z"
"","1640","Corrected links on website, issue #751","@romani  Corrected all links that were reported as problematic by [linkcheck](http://checkstyle.sourceforge.net/linkcheck.html) on website and at javadoc.   Corrected all links that were mentioned by @mkordas [here](https://github.com/checkstyle/checkstyle/issues/751#issuecomment-84383870).  No longer available: 1) JSNI https://developers.google.com/eclipse/docs/gwt_jsni 2) DocCheck http://www.oracle.com/technetwork/java/javase/documentation/javadoc-137458.html  Redirect tracer: http://www.wheregoes.com/","closed","","MEZk","2015-08-09T14:35:49Z","2015-08-10T08:28:52Z"
"","1941","Added 'validateAbstractClassNames' option for IllegalTypeCheck, issue #1805","@romani  checkstyle-tester reported no violations/errors when I ran IllegalTypeCheck against checkstyle-6.10-SNAPSHOT with `src/test/**/*` as excludes.","closed","","MEZk","2015-08-27T18:46:23Z","2015-08-28T21:21:06Z"
"","1883","Removed suppression for SwitchDensity rule from PMD, issue #973","@romani  After you had committed  3eca04c940bcdf575c2f9009202a4145e9a82c15 the issue #973 was resolved.  So, I've removed suppression for SwitchDensity rule from PMD:  > SwitchDensity: A high ratio of statements to labels in a switch statement implies that the switch statement is doing too much work. Consider moving the statements into new methods, or creating subclasses based on the switch variable.","closed","","MEZk","2015-08-24T20:18:39Z","2015-08-26T15:19:44Z"
"","1616","Set parameter 'failOnError' of maven javadoc plugin to true, issue #291.","@romani  A bit confusing situation happened after we added CommentsIndentationCheck at master branch. I did not pay attention at javadoc formatting problems at the Check. So I resolved javadoc problems at CommentsIndentationCheck and set failOnError to true.","closed","","MEZk","2015-08-08T21:24:35Z","2015-08-09T10:32:40Z"
"","1404","Fix FallThroughCheck fails on if with no else, issue #1395.","@romani  [Reports issue#1395](http://mezk.github.io)  | Source | 6.8.1-RELEASE | 6.9-SNAPSHOT | Сomparison | | :-- | --: | :-: | --: | | hibernate | [8](http://mezk.github.io/hibernate_6.8.1_issue1395/checkstyle.html) | [8](http://mezk.github.io/hibernate_6.9-SNAPSHOT_issue1395/checkstyle.html) | equal | | spring | 0 | 0 | equal | | checkstyle | [67](http://mezk.github.io/checkstyle_6.8.1_issue1395/checkstyle.html) | [68](http://mezk.github.io/checkstyle_6.9-SNAPSHOT_issue1395/checkstyle.html) | +1 violation [(line 160) ](http://mezk.github.io/checkstyle_6.9-SNAPSHOT_issue1395/xref/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.html#L160) | | sevntu-checkstyle | [3](http://mezk.github.io/sevntu-checkstyle_6.8.1_issue1395/checkstyle.html) | [3](http://mezk.github.io/sevntu-checkstyle_issue1395/checkstyle.html) | equal |  [cobertura coverage report after fix](http://mezk.github.io/cobertura_issue1395/com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck.html)  Additional [test inputs](https://github.com/checkstyle/checkstyle/commit/29a3d60dfa6a7ab1c6383b68af343f9ce2757d72#diff-a66b9e060d0527888fa4f1cce592b67cR12). I'll provide more reports if needed.  And due to FinalLocalVariableCheck line 160, Travis fails the build, because the following code rises violation:  ``` java case TokenTypes.PARAMETER_DEF:     if (ScopeUtils.inInterfaceBlock(ast)          || inAbstractOrNativeMethod(ast)          || inLambda(ast)) {          break;          } // The break statement is absent  case TokenTypes.VARIABLE_DEF: //line 160     if (ast.getParent().getType() != TokenTypes.OBJBLOCK ```  ``` [checkstyle] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java:160:13: Fall through from previous branch of the switch statement. ```  Do you think that we should suppress the violation?  ``` java case TokenTypes.PARAMETER_DEF:     if (ScopeUtils.inInterfaceBlock(ast)          || inAbstractOrNativeMethod(ast)          || inLambda(ast)) {          break;          }          // fallthrough  case TokenTypes.VARIABLE_DEF: //line 160     if (ast.getParent().getType() != TokenTypes.OBJBLOCK ```","closed","","MEZk","2015-07-18T10:09:58Z","2015-07-21T23:39:00Z"
"","1256","OneStatementPerLineCheck on multiple field initialization fix, issue #1237","@romani  1) I did code refactoring to avoid duplication of the code in method getDefaultTokens since getDefaultTokens and getAcceptableTokens have the same content.  2) I removed dead code from visitSemi, so that code coverage for OneStatementPerLineCheck was increased. Here are reports: [before removing dead code](http://mezk.github.io/site_before%28full%29/checkstyle.html) [after removing dead code](http://mezk.github.io/site_after%28full%29/checkstyle.html) git diff shows no differences.  3) I fixed bug with multiple field initialization and also provided additional tests to test [similar cases (issue #1237)](https://github.com/checkstyle/checkstyle/issues/1237).  I ran checkstyle-tester and tested my changes with all projects which are specified at projects-to-test-on.properties.  Before my fix changes checkstyle-tester reports 3055 warnings and after my changes there are 2963 warnings.  For example, before my changes OneStatementPerLineCheck reports that at `Hbase/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAsyncProcess.java` there is an illegal statement:  ``` java private static HRegionInfo hri1r1 = RegionReplicaUtil.getRegionInfoForReplica(hri1, 1),     hri1r2 = RegionReplicaUtil.getRegionInfoForReplica(hri1, 2); ```  but it isn't (according to issue #1237)  After the fix OneStatementPerLineCheck rises no violations for TestAsyncProcess.java.  And there are 92 similar cases. Should I send the full report because it is very huge (over 1.2 Gb) or should I report all 92 violations somehow?   4) I also provided test inputs to cover my changes. [cobertura report](http://mezk.github.io/cobertura/com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck.html) after all changes.","closed","","MEZk","2015-06-28T16:07:49Z","2015-07-06T12:48:30Z"
"","1641","Corrected links on web site (addition), issue #751","@romani   [Linkcheck report](http://mezk.github.io/linkcheck/linkcheck.html)  **Investigation:** -  twitter (all links - false-positive, direct link)   https://twitter.com/checkstyle_java/ -  Not available any more   https://github.com/checkstyle/google-style-config-test -  Unreachable from config files:   plugin-management.html   http://maven.apache.org/plugins/maven-release-plugin/   plugins.html   http://maven.apache.org/enforcer/maven-enforcer-plugin: 301 Moved Permanently   http://maven.apache.org/surefire/maven-failsafe-plugin: 301 Moved Permanently   http://maven.apache.org/surefire/maven-surefire-plugin: 301 Moved Permanently   http://maven.apache.org/surefire/maven-surefire-report-plugin: 301 Moved Permanently   http://mojo.codehaus.org/antlr-maven-plugin: 302 Found   http://mojo.codehaus.org/build-helper-maven-plugin: 302 Found   http://mojo.codehaus.org/cobertura-maven-plugin/: 302 Found   http://mojo.codehaus.org/jdepend-maven-plugin: 302 Found   http://mojo.codehaus.org/taglist-maven-plugin: 302 Found   http://mojo.codehaus.org/xml-maven-plugin: 302 Found   http://www.antlr.org/antlr4-maven-plugin: 404 Not Found   https://twitter.com/checkstyle_java/: 307 Temporary Redirect   sonar.html    http://nemo.sonarqube.org/project/index/com.puppycrawl.tools:checkstyle: 302 Found (false-positive, direct link) - apidocs/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.html   http://kclee.com/clemens/java/javancss/: 302 Found (false-positive, redirect directly to the http://kclee.com/clemens/java/javancss/) - cmdline.html    http://iweb.dl.sourceforge.net/project/checkstyle/checkstyle/6.10-SNAPSHOT/checkstyle-6.10-SNAPSHOT-all.jar: 302 Found (6.10-SNAPSHOT has not been uploaded on sourceforge)  All links which are mentioned above can be included in excludes section of maven-linkcheck-plugin except https://github.com/checkstyle/google-style-config-test and http://iweb.dl.sourceforge.net/project/checkstyle/checkstyle/6.10-SNAPSHOT/checkstyle-6.10-SNAPSHOT-all.jar  **Redirect tracers:** http://www.wheregoes.com/retracer.php http://www.internetofficer.com/seo-tool/redirect-check/ http://redirectdetective.com/","closed","","MEZk","2015-08-09T20:24:40Z","2017-05-15T11:13:44Z"
"","1468","Add BooleanExpressionComplexity into checkstyle_checks.xml","@romani According to issue #1052 property max of BooleanExpressionComplexity has been set to 7.  Accordign to issue #945 BooleanExpressionComplexity has been added into checkstyle_checks. To avoid BooleanExpressionComplexity's violations a refactoring of checksyle code has been performed.","closed","","MEZk","2015-07-25T14:18:00Z","2015-08-01T16:46:55Z"
"","1771","Corrected acceptable, required and default token sets , issue #655","@romani  According to [documentation](http://checkstyle.sourceforge.net/config_sizes.html#MethodCount), MethodCountCheck checks the number of **methods** declared in each type. That means that user should specify only one toke from configuration - METHOD_DEF. But currect set of acceptable tokens for the check is:  ``` java TokenTypes.CLASS_DEF, TokenTypes.ENUM_CONSTANT_DEF, TokenTypes.ENUM_DEF, TokenTypes.INTERFACE_DEF, TokenTypes.METHOD_DEF ```  That means that user can use the following configuration for the check:  ``` xml          ```  With the configuration the check will throw NPE on file `checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/sizes/MethodCountCheckInput.java` :  ``` SEVERE: NullPointerException occurred during the analysis of file /media/andreiselkin/TOURO/IDEA_Projects/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/sizes/MethodCountCheckInput.java. java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck.raiseCounter(MethodCountCheck.java:138)     at com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheck.visitToken(MethodCountCheck.java:110)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:396)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:492)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:325)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:201)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:75)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:260)     at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:121)     at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:108)     at com.puppycrawl.tools.checkstyle.BaseCheckTestSupport.verify(BaseCheckTestSupport.java:95)     at com.puppycrawl.tools.checkstyle.checks.sizes.MethodCountCheckTest.testDefaults(MethodCountCheckTest.java:71)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) ```  So, to fix the problem I've changed acceptable tokens set to the following:  ``` java TokenTypes.METHOD_DEF ```  as a result, the check will become protected from malicious users who specify an unacceptable token set in the configuration file.","closed","","MEZk","2015-08-18T21:35:47Z","2015-08-30T19:35:38Z"
"","1627","UnusedImports: make 'processJavadoc' property value 'true' by default","@rdiachenko:  > > @romani there is an option in UnusedImports processJavadoc with false default value. I changed it to true so violations disappeared.  @mkordas:  > > @rdiachenko @romani - shouldn't we make it default option then? Is there any serious impact on performance with this option enabled?  @rdiachenko:  > > @mkordas there is a reason why we made the default value as false (http://checkstyle.sourceforge.net/config_imports.html#UnusedImports): > >  > > Optionally: it is referenced in Javadoc comments. This check is off by default, as it is considered bad practice to introduce a compile time dependency for documentation purposes only. As an example, the import java.util.Date would be considered referenced with the Javadoc comment {@link Date}. The alternative to avoid introducing a compile time dependency would be to write the Javadoc comment as {@link java.util.Date}.  @romani:  > > When I first run into a problem that reference in javadoc (special format of multi-line comment) require ""import"" I was surprised. > >  > > I agree that javadoc should live its own live and do not affect class implementation. Extra import is extra dependecies - should be avoided. > >  > > But for our code - we need to make processJavadoc as TRUE, as we need to use options that Checks have (just another ITs for a Check+option). > >  > > @rdiachenko , please create issue to make options as TRUE - https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L192","closed","breaking compatibility,","rdiachenko","2015-08-09T05:15:31Z","2015-11-24T23:20:29Z"
"","1147","100% test coverage for ParameterNumberCheck, OuterTypeNumberCheck, MethodLengthCheck, LineLengthCheck, FileLengthCheck, ExecutableStatementCountCheck, AnonInnerLengthCheck, issue #1024","100% test coverage for ParameterNumberCheck, OuterTypeNumberCheck, MethodLengthCheck, LineLengthCheck, FileLengthCheck, ExecutableStatementCountCheck, AnonInnerLengthCheck, issue #1024","closed","","MEZk","2015-05-28T14:07:02Z","2017-02-10T00:00:05Z"
"","1172","100% test coverage for com.puppycrawl.tools.checkstyle.checks.sizes,","100% test coverage for com.puppycrawl.tools.checkstyle.checks.sizes, issue #1024.  I made some fixes in visitToken() according to my assumptions https://github.com/checkstyle/checkstyle/issues/1167#issuecomment-109049527 and also I refactored the method.  cobertura report  http://mezk.github.io/cobertura/  checkstyle-tester report before changes in MethodCountCheck (method visitToken() ) http://mezk.github.io/site_before/index.html  checkstyle-tester report after changes in MethodCountCheck (method visitToken() ) http://mezk.github.io/site_after/index.html  git diff shows that reports before and after changes are equal.","closed","","MEZk","2015-06-04T23:40:58Z","2015-06-11T13:05:13Z"
"","1123","100% conditional coverage for visitToken(), leaveToken() and leaveMemberDef(), issue#1024","100% conditional coverage for visitToken(), leaveToken() and leaveMemberDef(), issue#1024","closed","","MEZk","2015-05-23T22:04:04Z","2015-05-26T20:15:21Z"
"","1120","100% conditional coverage for visitToken(), leaveToken() and leaveMemberDef(), issue#1024","100% conditional coverage for visitToken(), leaveToken() and leaveMemberDef(), issue#1024","closed","","MEZk","2015-05-23T21:19:46Z","2015-05-23T21:28:25Z"
"","1268","Changed SAME_PACKAGE rule for CustomImportOrderCheck #1262","1. Corrected behaviour of SAME_PACKAGE group processing in CustomImportOrderCheck to match behaviour described on #1262. 2. Added handling of exceptional situation:    - n parameter should be positive integer, throw IllegalArgumentException otherwise    - if package name has fewer domains then _n_, amount of domains in package will override _n_ defined in configuration 3. Documentation updated accordingly","closed","","ivanov-alex","2015-07-01T17:21:59Z","2015-07-07T05:50:07Z"
"","1533","Refactoring of RightCurlyCheck, issue #1511.","1) Done refactoring of `validate` method to make it static. 2) Added if/else at `visitToken` to save performance since an array which is returned by getLines() is used inside validate only when `shouldStartLine = true` .  [REPORTS](http://mezk.github.io/index.html)  diff result: ![diff](https://cloud.githubusercontent.com/assets/7242568/9023659/d5af91a8-38ad-11e5-91c4-960c4639467f.png)","closed","","MEZk","2015-08-01T21:39:45Z","2015-08-04T08:38:31Z"
"","1520","Added column number into violation messages for RightCurlyCheck and LeftCurlyCheck, issue #1511.","1) Added column number into violation messages for RightCurlyCheck and LeftCurlyCheck, issue #1511. 3) Done refactoring of [validate](https://github.com/checkstyle/checkstyle/commit/8572e8c4f3533a43a34b81279a33adaf87f0a354#diff-9b2a5f9e69b254b923cb4fd7420cb9a4R180) to make it static. 4) Added if/else at [visitToken](https://github.com/checkstyle/checkstyle/commit/8572e8c4f3533a43a34b81279a33adaf87f0a354#diff-9b2a5f9e69b254b923cb4fd7420cb9a4R159) to save performance since an array which is returned by getLines() [is used inside validate](https://github.com/checkstyle/checkstyle/commit/8572e8c4f3533a43a34b81279a33adaf87f0a354#diff-9b2a5f9e69b254b923cb4fd7420cb9a4R217) only when `shouldStartLine = true` .  5) Updated UTs / ITs. 6) Replaced tabs with whitespaces at [test inputs](https://github.com/checkstyle/checkstyle/commit/8572e8c4f3533a43a34b81279a33adaf87f0a354#diff-3e07270ac2c8370f3e36b5345cfbc68fL56)  7)   > public void setShouldStartLine(boolean flag) { > add to javadoc  What did you mean? `setShouldStartLine`  has been already explained in [javadoc](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java#L101) and [xdoc](https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_blocks.xml#L502).","closed","","MEZk","2015-08-01T10:48:07Z","2015-08-02T19:27:04Z"
"","1351","Eclipse report errors on Inputs files with "";;""","/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheckInput.java checkstyle/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineInput.java  ``` import java.lang.annotation.Annotation; ; import java.lang.String; ```  That cause compilation problem in Eclipse 4.2.2, please move test of "";;"" to non-compilable folder with comment above that it is due to Eclipse compiler (that us known Eclipse problem). We have to be friendly to Eclipse IDE - a lot of people use it.","closed","approved,","romani","2015-07-11T18:44:53Z","2015-07-12T05:08:58Z"
"","1053","Magic Number annotation detection enhanced for arbitrary parent nodes, Issue #926","..., Issue #926  TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR Type check is not necessary any more because algorithm searches for ANNOTATION node either it is found or it reaches to root of the AST.","closed","","precoder","2015-05-03T19:36:41Z","2015-05-11T20:00:16Z"
"","1993","Issue #1566: ReturnCount check activated","- ReturnCount check activated - Suppressions updated","closed","","rdiachenko","2015-08-29T08:29:42Z","2015-08-31T21:39:37Z"
"","1673","Issue #1566: InnerTypeLast turned on","- InnerTypeLast was turned on - minor formatting of ""ignoreSetter"" property line","closed","","rdiachenko","2015-08-12T21:34:57Z","2015-08-31T21:37:35Z"
"","1443","All Checks have to work in defalt configuration without any Exceptions, issue #1129.","**_Checks which are commented in checkstyle_checks.xml:**_ 1) Added UniquePropertiesCheck into checkstyle_checks.xml with default configuration. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java#L60). 2) AvoidInlineConditionalsCheck works in default config without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidInlineConditionalsCheckTest.java#L33). 3) BooleanExpressionComplexity works in default config without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheckTest.java#L32). 4) Added [test with default configuration](https://github.com/MEZk/checkstyle/commit/b8eed0ca23209ee82ca612e52c0ab6a94a06478b#diff-505cbbd2e5af4b7accc76c91e12d1256R52) for ClassDataAbstractionCouplingCheck. 5) Added [test with default configuration](https://github.com/MEZk/checkstyle/commit/f67edba12c349ec9d7e0188e21de9c7409120755#diff-01360202649d4d131dbffbe3d639c344R59) for  ClassFanOutComplexityCheck. 6) Added [test with default configuration](https://github.com/MEZk/checkstyle/commit/c858b4703cd35e20da1cf778210dadf4ee4cf39b#diff-54f1f9ded82ca9b567f0f85e7957f59bR427) for  CustomImportOrderCheck. 7) DesignForExtensionCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheckTest.java#L33). 8) Added [test with default configuration](https://github.com/MEZk/checkstyle/commit/5f2fc9c2e5f59aef9c5ae8efe078ddef8c57d84d#diff-af11b6d030c4fa9884e6119be9bbb4cdR147) for  ExecutableStatementCountCheck. 9) FinalParametersCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheckTest.java#L30). 10) HiddenFieldCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java#L62). 11) IllegalTokenCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheckTest.java#L31). 12) IllegalTypeCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java#L42). 13) ImportOrderCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java#L46). 14) InnerTypeLastCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheckTest.java#L34). 15) JavadocParagraph works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java#L49). 16) JavadocTagContinuationIndentation works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java#L42). 17) Added [test with default configuration](https://github.com/MEZk/checkstyle/commit/11793f53ae97b302089f8e00bef5b2f1973a6db0#diff-267008c864da3b98ca536cb914331fccR64) for  JavaNCSSCheck. 18) MissingCtorCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingCtorCheckTest.java#L34). 19) ModifiedControlVariableCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java#L33). 20) Added [test with default configuration](https://github.com/MEZk/checkstyle/commit/65ac9165014b9250eec386866fa7641cc7c4a47d#diff-3f28ccfc9f7fc957d8d665c777dca35eR109) for  MultipleStringLiteralsCheck. 21) NonEmptyAtclauseDescriptionCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheckTest.java#L33). 22) Added [test with default configuration](https://github.com/MEZk/checkstyle/commit/1fa57e840dd63d4734b1f6a72fe2671009254313#diff-af0c73cf17aca87f4a69141240affe78R72) for  NPathComplexityCheck. 23) OneTopLevelClassCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java#L99). 24) OverloadMethodsDeclarationOrderCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/OverloadMethodsDeclarationOrderCheckTest.java#L34). 25) PackageDeclarationCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheckTest.java#L34). 26) TrailingCommentCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java#L38). 27) RequireThisCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheckTest.java#L35). 28) ReturnCountCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheckTest.java#L31). 29) SingleLineJavadocCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheckTest.java#L31). 30) Added [test with default configuration](https://github.com/MEZk/checkstyle/commit/7f0edd77420fd805c15499b3754cc3fe120bcebb#diff-4ee920a468c047a2df4f0096396dc569R87) for  SummaryJavadocCheck. 31) Added [test with default configuration](https://github.com/checkstyle/checkstyle/commit/023e7e50d41e885d37318b3ff494a0c36caed5d6#diff-b0ea0ff8351325080c1ad76bc3035270R213) for  VariableDeclarationUsageDistanceCheck. 32) SingleLineJavadocCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java#L53). 33) IllegalCatchCheck works in default configuration without problems. [Test for default configuration](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheckTest.java#L34).  **_All checks which are specified in checkstyle_checks.xml were also checked with checkstyle-tester (checkstyle 6.8.1-RELEASE, sevntu-checkstyle) in default configuration and there were no exceptions.**_ ![screenshot-1](https://cloud.githubusercontent.com/assets/7242568/8801775/afe54fc6-2fc5-11e5-9b41-dd564d0c2d99.png) ![screenshot](https://cloud.githubusercontent.com/assets/7242568/8801776/afe66dde-2fc5-11e5-96b0-fc741627e39f.png)  [checkstyle-tester config file](http://mezk.github.io/my_check.xml) [cobertura coverage report after all additions](http://mezk.github.io/cobertura_issue1129)","closed","","MEZk","2015-07-21T08:49:36Z","2015-07-22T07:36:39Z"
"","1117","Fix equals and hashCode in SuppressElement and remove toString. #1088","#1116 needs to be merged first.","closed","","mkordas","2015-05-23T18:57:03Z","2015-05-23T19:58:48Z"
"","1140","Add a Gitter chat badge to README.md","### checkstyle/checkstyle now has a Chat Room on Gitter  @romani has just created a chat room. You can visit it here: [https://gitter.im/checkstyle/checkstyle](https://gitter.im/checkstyle/checkstyle?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).  This pull-request adds this badge to your README.md:  [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/checkstyle/checkstyle?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)  If my aim is a little off, please [let me know](https://github.com/gitterHQ/readme-badger/issues).  Happy chatting.  PS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.","closed","approved,","gitter-badger","2015-05-27T15:59:47Z","2015-05-28T17:23:07Z"
"","1258","Add known limitations to SuppressWarnings check documentation. #1252","![image](https://cloud.githubusercontent.com/assets/5467276/8397539/5eec0cac-1dcf-11e5-8fbc-46d7bda6f78d.png)","closed","","mkordas","2015-06-28T17:53:51Z","2015-06-28T18:56:46Z"
"","1996","Issue #1566: Fixed CyclomaticCompexityCheck violation in RightCurlyCheck","","closed","","baratali","2015-08-29T16:22:57Z","2015-08-30T09:19:07Z"
"","1969","Issue #1566: Added ClassDataAbstractionCoupling to checkstyle_checks","","closed","","baratali","2015-08-28T21:49:43Z","2015-08-29T05:39:17Z"
"","1963","Extended javadoc/xdoc for RightCurlyCheck, issue #1900","","closed","","MEZk","2015-08-28T15:13:46Z","2015-09-03T17:44:54Z"
"","1942","Issue #1566: Fixed JavaNSCC violations","","closed","","baratali","2015-08-27T20:47:48Z","2015-08-28T17:46:24Z"
"","1933","Issue #1566: Added NPathComplexityCheck to checkstyle_checks","","closed","","baratali","2015-08-27T17:24:17Z","2015-08-27T19:51:52Z"
"","1931","Issue #1566: Added ExecutableStatementCountCheck to checkstyle_checks","","closed","","baratali","2015-08-27T15:06:23Z","2015-08-27T16:53:51Z"
"","1929","Issue #1566: Fixed NPathComplexity violation in JavadocMethodCheck","","closed","","baratali","2015-08-27T14:05:38Z","2015-08-27T16:54:42Z"
"","1904","Fix for ExecutableStatementCount's violations","","closed","","baratali","2015-08-26T18:47:02Z","2015-08-26T19:51:03Z"
"","1896","Utils classes have been moved to utils package","","closed","","sabaka","2015-08-25T21:17:33Z","2015-09-03T23:28:55Z"
"","1891","Remove obsolete entry from PMD configuration. #877","","closed","","mkordas","2015-08-24T21:19:01Z","2015-08-26T15:36:00Z"
"","1881","Remove unused Coveralls plugin from pom.xml","","closed","","mkordas","2015-08-24T11:47:58Z","2015-08-25T11:24:57Z"
"","1880","Update ANTLR to 4.5.1-1","","closed","","mkordas","2015-08-24T11:41:02Z","2015-08-25T11:12:11Z"
"","1852","Issue #1243: Redundant import in DebugChecker","","closed","","baratali","2015-08-22T10:15:42Z","2015-08-22T10:37:42Z"
"","1851","TrailingCommentCheck was added to checkstyle_checks","","closed","","baratali","2015-08-22T09:33:47Z","2015-08-25T10:26:05Z"
"","1798","Local Variables should not be declared and then immediately returned or thrown. Issue #46","","closed","","sabaka","2015-08-19T22:41:29Z","2015-09-03T23:37:40Z"
"","1773","Local variables should not shadow class fields. Issue #46","","closed","","sabaka","2015-08-19T00:00:34Z","2015-09-03T23:33:24Z"
"","1744","Issue #1566: File length of JavadocMethodCheck has been reduced","","closed","","baratali","2015-08-17T20:00:35Z","2015-08-22T09:26:37Z"
"","1742","Sections of code should not be ""commented out"". Issue #46","","closed","","sabaka","2015-08-17T00:33:05Z","2015-09-03T23:22:48Z"
"","1741","Floating point numbers should not be tested for equality. Issue #46","","closed","","sabaka","2015-08-17T00:14:56Z","2015-09-03T23:33:45Z"
"","1727","Fix UnsupportedOperationException in GUI. #1718","","closed","","mkordas","2015-08-16T22:06:24Z","2015-08-17T03:43:46Z"
"","1723","Updated all checks to have getRequiredTokens and getAcceptableTokens, issue 655.","","closed","","MEZk","2015-08-16T18:00:41Z","2015-08-17T11:28:34Z"
"","1719","XDoc updated","","closed","","baratali","2015-08-16T13:18:48Z","2015-08-22T09:26:40Z"
"","1714","Update Maven FindBugs Plugin to 3.0.2. #1714","","closed","","mkordas","2015-08-15T23:33:10Z","2015-08-16T04:14:48Z"
"","1709","Issue #1243: Input file to resources folder","","closed","","baratali","2015-08-15T20:02:11Z","2015-08-22T09:26:42Z"
"","1707","Issue #1243: Useless local variable has been removed","","closed","","baratali","2015-08-15T19:53:00Z","2015-08-22T09:26:43Z"
"","1706","Issue #1243: Suppressed LeftCurlyCheck's deprecated field","","closed","","baratali","2015-08-15T19:08:23Z","2015-08-22T09:26:45Z"
"","1705","Issue #1243: Unsafe casts have been suppressed in UTs which use reflection","","closed","","baratali","2015-08-15T19:00:37Z","2015-08-22T09:26:46Z"
"","1704","Issue #1243: Added serialId to test classes","","closed","","baratali","2015-08-15T18:44:13Z","2015-08-22T09:26:48Z"
"","1692","Issue #1243: Input files to resources folder","","closed","","baratali","2015-08-14T10:46:07Z","2015-08-22T09:26:52Z"
"","1690","Issue #1243: Suppress test class with unused fields","","closed","","baratali","2015-08-14T09:56:03Z","2015-08-22T09:27:01Z"
"","1689","Issue #1243: Input files to resources folder","","closed","","baratali","2015-08-14T09:54:06Z","2015-08-22T09:26:53Z"
"","1688","Fixed typo in JavadocMethod's examples xdocs, issue #1668","","closed","","MEZk","2015-08-13T23:00:53Z","2015-08-16T16:37:52Z"
"","1687","Issue #1243: Suppress warnings for UTs testing deprecated code","","closed","","baratali","2015-08-13T21:58:26Z","2015-08-22T09:27:20Z"
"","1685","Enforce all checks to override getRequiredTokens method, #655","","closed","","MEZk","2015-08-13T20:42:37Z","2015-08-26T15:19:33Z"
"","1682","Issue #1243: 'Local variable is not used' fixed","","closed","","baratali","2015-08-13T15:56:57Z","2015-08-22T09:27:22Z"
"","1680","Loops have to have only one break/continue. Issue #46","","closed","","sabaka","2015-08-12T23:06:55Z","2015-09-03T23:22:09Z"
"","1660","Issue #1243: Generic types should be parameterized","","closed","","baratali","2015-08-11T18:14:38Z","2015-08-22T09:27:23Z"
"","1659","Issue #1243: Output stream has to be closed","","closed","","baratali","2015-08-11T16:36:58Z","2015-08-22T09:26:47Z"
"","1650","Updated docs of DeclarationOrderCheck","","closed","","baratali","2015-08-10T14:40:28Z","2015-08-22T09:27:25Z"
"","1639","Remove trailing whitespace from XML files. #1555","","closed","","mkordas","2015-08-09T14:08:20Z","2015-08-14T23:31:30Z"
"","1614","Suppress wrong root element in tests. #1555","","closed","","mkordas","2015-08-08T16:08:09Z","2015-08-14T23:33:08Z"
"","1593","Simplify if statement. #1555","","closed","","mkordas","2015-08-08T12:46:52Z","2015-08-14T23:33:08Z"
"","1564","Remove assignments to variables declared in for statements. #1555","","closed","","mkordas","2015-08-06T19:43:51Z","2017-05-04T17:55:42Z"
"","1562","Restricted suppression for gui-package, issue #1555.","","closed","","MEZk","2015-08-06T13:43:57Z","2015-08-10T08:28:34Z"
"","1557","Pull request branch","","closed","","m-mikula","2015-08-05T18:57:37Z","2015-08-05T20:58:14Z"
"","1554","Issue #1293: Improved coverage for ReturnCountCheck","","closed","","baratali","2015-08-05T17:20:48Z","2015-08-22T09:27:29Z"
"","1547","Fix incorrect Google Java Style links, issue #751.","","closed","","MEZk","2015-08-03T12:09:33Z","2015-08-05T07:59:46Z"
"","1542","Apply various improvements over Checkstyle test code","","closed","","mkordas","2015-08-02T21:15:18Z","2015-08-03T01:54:38Z"
"","1541","Issue #1539: Fixed NPE in MultipleVariableDeclarationsCheck","","closed","","baratali","2015-08-02T20:33:13Z","2015-08-22T09:27:30Z"
"","1540","Ensure that check required tokens are subset of default tokens. #1087","","closed","incomplete,","mkordas","2015-08-02T19:45:38Z","2015-08-16T03:48:31Z"
"","1535","Remove unnecessary consecutive lines in Checkstyle code. #1534","","closed","","mkordas","2015-08-02T09:55:43Z","2015-08-03T01:41:46Z"
"","1532","Fix some SonarQube violations. #46","","closed","","mkordas","2015-08-01T19:41:38Z","2015-08-01T20:34:49Z"
"","1526","Enable NonEmptyAtclauseDescription check on Checkstyle code. #945","","closed","","mkordas","2015-08-01T17:29:56Z","2015-08-01T20:21:03Z"
"","1499","Issue #1293: Improved coverage for OverloadMethodsDeclarationOrderCheck","","closed","","baratali","2015-07-28T21:59:17Z","2015-08-22T09:27:40Z"
"","1498","Issue #1293: Improved coverage for AbstractIllegalMethodCheck","","closed","","baratali","2015-07-28T21:22:54Z","2015-08-22T09:27:41Z"
"","1493","Fixed compilation error for CustomImportOrder input file #1470","","closed","","ivanov-alex","2015-07-28T08:43:48Z","2015-07-28T16:07:50Z"
"","1476","updated Xdoc and Javadoc for ImportOrder and CustomImportOrder #1464","","closed","","ivanov-alex","2015-07-25T22:28:01Z","2015-07-27T10:52:02Z"
"","1467","Add missing xdocs for allowMultipleEmptyLines property of EmptyLineSaparatorCheck, issue #881.","","closed","","MEZk","2015-07-25T13:53:24Z","2015-07-31T15:59:03Z"
"","1459","Enable CustomImportOrder","","closed","","ivanov-alex","2015-07-24T20:06:38Z","2015-07-25T14:08:59Z"
"","1458","fix build problem on xdoc #1448","","closed","","ivanov-alex","2015-07-24T17:41:23Z","2015-07-24T18:44:08Z"
"","1457","Add Organize Imports instructions to site. #1448","","closed","","ivanov-alex","2015-07-24T16:19:35Z","2015-07-24T16:35:22Z"
"","1451","Add test coverage to SummaryJavadoc check. #1308","","closed","","mkordas","2015-07-22T21:43:25Z","2015-07-23T01:45:02Z"
"","1450","Add test coverage to JavadocPackage check. #1308","","closed","","mkordas","2015-07-22T21:00:39Z","2015-07-23T01:44:13Z"
"","1449","Remove classes with 100% coverage from Cobertura exclusion list. #1449","","closed","","mkordas","2015-07-22T11:19:08Z","2015-07-22T13:54:07Z"
"","1445","Add test coverage to AtclauseOrder check. #1308","","closed","","mkordas","2015-07-21T21:07:17Z","2015-07-22T00:44:17Z"
"","1439","Fix EqualsAvoidNullCheck ignores left side variables with dot in it, #1377","","closed","","Vladlis","2015-07-21T01:39:17Z","2015-07-22T01:00:56Z"
"","1435","Bump total line and branch coverage rates for Cobertura","","closed","","mkordas","2015-07-20T22:03:54Z","2015-07-21T04:04:04Z"
"","1431","Add test coverage to MethodDefHandler in Indentation check. #1270","","closed","","mkordas","2015-07-20T21:12:49Z","2015-07-21T03:45:06Z"
"","1427","Update EqualsVerifier to 1.7.3. #1426","","closed","","mkordas","2015-07-20T19:34:22Z","2015-07-21T03:41:11Z"
"","1425","Update Maven Shade Plugin to 2.4.1. #1424","","closed","","mkordas","2015-07-20T19:30:43Z","2015-07-21T03:33:41Z"
"","1414","fix IllegalToken description, #1393","","closed","","Vladlis","2015-07-19T14:55:03Z","2015-07-20T20:42:12Z"
"","1413","Add test coverage to ImportHandler in Indentation check. #1270","","closed","","mkordas","2015-07-19T14:52:12Z","2015-07-19T17:09:10Z"
"","1412","Remove dead code from Indentation check. #1270","","closed","","mkordas","2015-07-19T14:32:19Z","2015-07-19T17:20:12Z"
"","1411","Add test coverage to PackageHandler in Indentation check. #1270","","closed","","mkordas","2015-07-19T14:29:07Z","2015-07-19T16:46:59Z"
"","1409","Correct typos in RightCurlyCheck.","","closed","","MEZk","2015-07-19T09:43:10Z","2015-07-19T15:38:37Z"
"","1403","ImportOrderCheck. Fix separation for static imports #1398","","closed","","ivanov-alex","2015-07-17T22:04:07Z","2017-04-11T19:33:13Z"
"","1402","Update antlr to 4.5.1","","closed","","mkordas","2015-07-17T21:35:30Z","2015-07-19T06:59:55Z"
"","1394","ImportOrderCheck. Changing SWITCH to IF to improve coverage #1387 #1128","","closed","","ivanov-alex","2015-07-16T07:04:03Z","2015-07-17T10:24:27Z"
"","1381","Issue #1293: Improved coverage for DefaultComesLastCheck","","closed","","baratali","2015-07-14T21:35:55Z","2015-07-15T06:21:38Z"
"","1379","Update system-rules to 1.12.1. #1379","","closed","","mkordas","2015-07-14T18:41:48Z","2015-07-14T21:02:00Z"
"","1376","Switch options reoganized for easier reading","","closed","","ivanov-alex","2015-07-14T06:44:26Z","2015-07-17T10:23:35Z"
"","1366","Add test coverage to getAcceptableTokens in JavadocStyle check. #1308","","closed","","mkordas","2015-07-12T21:34:02Z","2015-07-12T22:41:15Z"
"","1364","add example for ConstantName in xdoc, #1106","","closed","","Vladlis","2015-07-12T21:15:55Z","2015-07-14T14:42:15Z"
"","1363","Simplify validation of parameter in JavadocVariable check. #1308","","closed","","mkordas","2015-07-12T21:12:24Z","2015-07-12T22:02:36Z"
"","1357","fix structure of site.xml, #1341","","closed","","Vladlis","2015-07-12T08:52:45Z","2015-07-12T20:13:59Z"
"","1356","Remove dead code from TreeWalker. #1294","","closed","","mkordas","2015-07-12T07:02:29Z","2015-07-12T16:32:42Z"
"","1353","Fix integration test compilation error for Windows environment. #1342","","closed","","mkordas","2015-07-11T20:37:35Z","2015-07-12T05:07:36Z"
"","1352","Move tests which cause compilation problem in Eclipse 4.2.2 to non-compilable folder, issue #1351.","","closed","","MEZk","2015-07-11T19:32:21Z","2015-07-12T05:27:48Z"
"","1345","Add test coverage to getAcceptableTokens in Javadoc checks. #1308","","closed","","mkordas","2015-07-10T23:21:36Z","2015-07-10T23:43:46Z"
"","1343","Fix compilation error for Windows environment. #1342","","closed","","mkordas","2015-07-10T22:03:57Z","2015-07-10T22:24:00Z"
"","1338","Add test coverage to Javadoc checks. #1308","","closed","","mkordas","2015-07-09T21:29:49Z","2015-07-11T03:57:32Z"
"","1327","Remove usage of deprecated methods from MainTest. #1325","","closed","","mkordas","2015-07-08T21:32:05Z","2015-07-09T01:36:22Z"
"","1326","Remove dead code from Javadoc checks. #1308","","closed","","mkordas","2015-07-08T21:31:29Z","2015-07-09T01:34:18Z"
"","1322","Add code coverage to Indentation check. #1270","","closed","","mkordas","2015-07-08T19:13:16Z","2015-07-12T05:06:59Z"
"","1311","Add test coverage and improve toString in Javadoc checks related classes. #1308","","closed","","mkordas","2015-07-07T22:44:20Z","2015-07-08T02:38:35Z"
"","1302","Add test coverage to Indentation check","","closed","","mkordas","2015-07-06T21:06:16Z","2015-07-08T03:36:08Z"
"","1301","Update Maven PMD Plugin to 3.5. #1300","","closed","","mkordas","2015-07-06T20:02:03Z","2017-03-27T09:14:58Z"
"","1299","Solution to Magic Number is not detected properly #1266","","closed","","Bhavik3","2015-07-06T17:42:24Z","2015-07-31T07:30:02Z"
"","1277","extend target list and provide human message for SuppressWarningsHolder, #1158","","closed","","Vladlis","2015-07-03T19:48:13Z","2015-07-05T19:10:22Z"
"","1276","Fix xml structure at google_checks.xml, #1275","","closed","","Vladlis","2015-07-03T10:42:26Z","2017-03-30T08:37:29Z"
"","1271","Add test coverage to Indentation check","","closed","","mkordas","2015-07-01T20:26:21Z","2015-07-03T08:17:44Z"
"","1261","Change contributor name in release notes.","","closed","","MEZk","2015-06-29T07:20:08Z","2015-07-01T07:24:25Z"
"","1260","Fix AbstractClassName Check on checkstyle code #945","","closed","","Bhavik3","2015-06-29T04:59:12Z","2015-07-06T05:48:31Z"
"","1250","Fix AvoidEscapedUnicodeCharacters Check in Checkstyle Code. #945","","closed","","Bhavik3","2015-06-27T17:21:45Z","2015-06-28T07:12:43Z"
"","1249","Fix problems in SuppressWarnings check on complex annotations. #1201, #1246","","closed","","mkordas","2015-06-27T16:29:28Z","2015-06-28T17:31:12Z"
"","1248","Ineffective suppressions are removed","","closed","","Bhavik3","2015-06-27T16:25:07Z","2015-06-27T16:39:17Z"
"","1247","Fix AbbreviationAsWordInName Check in Checkstyle Code. #945","","closed","","Bhavik3","2015-06-27T15:40:36Z","2015-06-27T16:09:58Z"
"","1240","UT coverage for UnusedImports. #1128","","closed","","ivanov-alex","2015-06-24T18:11:04Z","2015-06-25T06:19:27Z"
"","1236","Fixes PMD violations: EmptyMethodInAbstractClassShouldBeAbstract #997","","closed","","Bhavik3","2015-06-23T15:00:54Z","2015-06-24T04:23:14Z"
"","1233","Fix empty html pages for extending Checkstyle and style configurations, #1231","","closed","","Vladlis","2015-06-22T11:43:15Z","2015-06-23T11:13:45Z"
"","1230","PMD violations: UncommentedEmptyMethod Fixed #995","","closed","","Bhavik3","2015-06-21T03:29:12Z","2015-06-27T15:42:02Z"
"","1227","Minor update in FallThroughCheck docs","","closed","","Vladlis","2015-06-18T21:50:07Z","2015-06-22T09:15:12Z"
"","1226","Fixes #1224 NullPointerException at java.util.regex.Pattern from com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions.getPattern","","closed","","vorburger","2015-06-18T20:40:21Z","2015-07-01T03:40:40Z"
"","1225","fixes #48 StackOverflow in com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.findMatch","","closed","","vorburger","2015-06-18T20:16:43Z","2015-07-01T03:42:38Z"
"","1223",".gitignore with Eclipse's .externalToolBuilders and .checkstyle from Checkstyle CS Eclipse Plug-in","","closed","","vorburger","2015-06-18T19:58:39Z","2015-06-19T05:22:21Z"
"","1222","StackOverflow in java.util.regex fixed #1221","","closed","","vorburger","2015-06-18T19:52:46Z","2015-07-01T05:22:41Z"
"","1220","Fixes PMD violations for AbstractNaming rule #983","","closed","","Bhavik3","2015-06-18T17:32:23Z","2015-06-19T16:22:31Z"
"","1219","rm .classpath (as its on .gitignore, else leads to confusing changed file status)","","closed","","vorburger","2015-06-18T17:13:34Z","2015-06-25T23:32:18Z"
"","1210","Fixed exception in AvoidStaticImport #1209","","closed","","ivanov-alex","2015-06-14T18:32:40Z","2015-06-15T07:53:59Z"
"","1207","Checking existance of config file before processing target file.","","closed","","Bhavik3","2015-06-12T19:19:45Z","2015-06-19T16:23:34Z"
"","1206","FileContents.getFileName() - resolve issue #1205","","closed","","tsjensen","2015-06-12T18:19:26Z","2015-06-12T22:42:13Z"
"","1202","Clarify misleading command line tool (CLI) output solves #1062","","closed","","Bhavik3","2015-06-11T05:33:56Z","2015-06-19T16:28:30Z"
"","1199","Enable UncommentedMain Check on Checkstyle code #945","","closed","","Bhavik3","2015-06-10T18:22:18Z","2015-06-19T16:24:39Z"
"","1198","Fix EmptyStatement Check violations in Checkstyle code. #945","","closed","","Bhavik3","2015-06-10T18:09:59Z","2015-06-19T16:24:51Z"
"","1197","Change ""Beginning Development"" page to reference JDK1.8","","closed","","ivanov-alex","2015-06-10T07:32:08Z","2015-06-11T16:14:11Z"
"","1196","Added UTs for getAcceptableTokens() and getRequiredTokens() on all objects in Imports. #1128","","closed","","ivanov-alex","2015-06-09T08:12:18Z","2015-06-09T13:53:08Z"
"","1195","Fix PMD violations of AvoidCatchingGenericException rule. #959","","closed","","mkordas","2015-06-08T20:17:27Z","2015-06-28T17:14:12Z"
"","1193","Update maven-failsafe-plugin to 2.18.1. #1193","","closed","","mkordas","2015-06-08T18:28:55Z","2015-06-08T18:44:39Z"
"","1190","Do not generate violation for empty SuppressWarnings. #1187","","closed","","mkordas","2015-06-07T18:50:50Z","2015-06-07T20:00:41Z"
"","1188","solution to CLI fails when it could not find output file. solves #1181","","closed","","Bhavik3","2015-06-07T10:26:18Z","2015-06-19T16:25:24Z"
"","1186","Configure RegexpSinglelineJava to detect non-ASCII characters. #1165","","closed","","mkordas","2015-06-06T21:06:32Z","2015-06-07T01:45:18Z"
"","1183","Add tests for equals and toString in SuppressionCommentFilter. #1088","","closed","","mkordas","2015-06-05T23:25:09Z","2015-06-07T15:14:01Z"
"","1182","Remove unused MethodCallLineWrapHandler class. #1178","","closed","","mkordas","2015-06-05T23:01:35Z","2015-06-06T22:44:07Z"
"","1179","Verify that classes with constants have private constructors. #840","","closed","","mkordas","2015-06-05T17:43:06Z","2015-06-06T22:44:12Z"
"","1177","Remove AnnotationUtility and ScopeUtils from API package. #1057","","closed","","mkordas","2015-06-05T17:10:09Z","2015-06-05T17:26:28Z"
"","1164","rename contributor in releasenotes","","closed","","Vladlis","2015-06-01T22:21:09Z","2015-06-02T14:59:04Z"
"","1161","Rename CheckStyleTask to CheckstyleAntTask. #1108","","closed","","mkordas","2015-05-31T22:15:45Z","2015-06-07T18:17:29Z"
"","1160","Fix PMD violations of ExceptionAsFlowControl rule. #962","","closed","","mkordas","2015-05-31T18:20:50Z","2015-06-06T22:44:49Z"
"","1156","Update system-rules to 1.10.0. #1156","","closed","","mkordas","2015-05-31T15:52:18Z","2015-06-01T19:36:43Z"
"","1155","Fix PackageDeclaration check for files with comments only. #1149","","closed","","mkordas","2015-05-31T15:13:29Z","2015-06-04T16:55:35Z"
"","1139","Fix typos","","closed","","julianhyde","2015-05-27T15:47:54Z","2015-05-27T16:24:58Z"
"","1135","Fix exceptions in RegexpMultiline and Regexp checks running on default config","","closed","","mkordas","2015-05-26T00:58:07Z","2015-06-06T22:45:58Z"
"","1132","Do not verify overriding methods in ThrowsCount check, #1085","","closed","","Vladlis","2015-05-25T22:39:17Z","2015-05-26T22:34:26Z"
"","1127","fix in MutableExceptionCheck, #1124","","closed","","Vladlis","2015-05-24T17:58:02Z","2015-05-25T11:07:49Z"
"","1118","Fix equals and hashCode in SuppressionFilter and remove toString. #1088","","closed","","mkordas","2015-05-23T19:53:40Z","2015-05-23T20:05:02Z"
"","1116","Fix equals and hashCode in IntRangeFilter and remove toString. #1088","","closed","","mkordas","2015-05-23T08:41:02Z","2015-05-23T19:57:47Z"
"","1115","Replace deprecated PosixParser with DefaultParser. #1099","","closed","","mkordas","2015-05-21T22:16:34Z","2015-05-21T23:31:44Z"
"","1114","Add ""/"", ""+"" and ""-"" to list of allowed tokens in MagicNumber check. #1113","","closed","","mkordas","2015-05-21T20:25:43Z","2015-05-21T23:45:00Z"
"","1109","removing dead code and refactoring in VisibilityModifierCheck, #1107","","closed","","Vladlis","2015-05-19T21:28:00Z","2015-05-24T23:18:00Z"
"","1105","100% test coverage for MutableExceptionCheck, #1009","","closed","","Vladlis","2015-05-19T07:48:18Z","2015-05-22T10:25:06Z"
"","1104","remove dead code from MutableExceptionCheck, #1103","","closed","","Vladlis","2015-05-19T01:28:22Z","2015-05-19T07:31:29Z"
"","1102","100% test coverage for FinalClassCheck, #1009","","closed","","Vladlis","2015-05-19T00:31:42Z","2015-05-19T00:45:57Z"
"","1101","remove dead code from FinalClassCheck, #1100","","closed","","Vladlis","2015-05-18T23:27:49Z","2015-05-19T00:17:13Z"
"","1098","100% test coverage for FinalClassCheck, #1009","","closed","","Vladlis","2015-05-18T22:14:11Z","2015-05-19T06:21:26Z"
"","1097","100% test coverage for ThrowsCountCheck, #1009","","closed","","Vladlis","2015-05-18T19:39:31Z","2015-05-19T18:31:08Z"
"","1095","100% test coverage for HideUtilityClassConstructor, #1009","","closed","","Vladlis","2015-05-18T14:59:57Z","2015-05-18T21:24:40Z"
"","1094","Use EqualsVerifier to test FilterSet and remove obsolete code. #1088","","closed","","mkordas","2015-05-17T22:13:02Z","2015-05-19T21:31:19Z"
"","1093","Add tests for equals, hashCode and compareTo in LineColumn. #1088","","closed","","mkordas","2015-05-17T21:32:38Z","2015-05-20T23:43:48Z"
"","1092","Use EqualsVerifier to test CSVFilter. #1088","","closed","","mkordas","2015-05-17T19:07:39Z","2015-05-18T12:57:24Z"
"","1090","Change location of left curly braces to end of line. #1089","","closed","","mkordas","2015-05-17T11:49:09Z","2015-05-17T17:39:26Z"
"","1086","Make tests of Main class platform independent. #1085","","closed","","mkordas","2015-05-16T23:11:29Z","2015-05-17T05:26:29Z"
"","1083","Fix ThrowsCount check violations in Checkstyle code. #945","","closed","","mkordas","2015-05-16T21:49:55Z","2015-05-28T21:19:51Z"
"","1082","Extend ReturnCount Check to treat lambdas  separately. #1068","","closed","","mkordas","2015-05-15T22:58:17Z","2015-05-17T05:20:13Z"
"","1076","Fix PMD violations from PrematureDeclaration rule. #948","","closed","","mkordas","2015-05-12T21:33:02Z","2015-05-13T16:58:24Z"
"","1075","Fix PMD violations from AvoidFieldNameMatchingMethodName rule. #984","","closed","","mkordas","2015-05-12T21:24:48Z","2015-05-13T16:55:00Z"
"","1074","Remove obsolete exclusion from PMD configuration. #960","","closed","","mkordas","2015-05-12T20:17:40Z","2015-05-13T17:08:12Z"
"","1073","Fix SeparatorWrap Check violations in Checkstyle code. #945","","closed","","mkordas","2015-05-12T20:10:09Z","2015-05-13T16:47:33Z"
"","1072","Fix exception in FallThrough Check for nested switch statements. #837","","closed","","mkordas","2015-05-12T19:45:47Z","2015-05-13T16:27:05Z"
"","1071","test coverage for getRequiredTokens() and getAcceptableTokens(), issue #1009","","closed","","Vladlis","2015-05-12T16:49:27Z","2015-05-14T13:32:28Z"
"","1069","Fix exception in OneTopLevelClass Check for package-info files. #1065","","closed","","mkordas","2015-05-11T16:42:56Z","2015-05-13T17:12:59Z"
"","1067","Update commons-cli to 1.3. #1067","","closed","","mkordas","2015-05-11T08:40:54Z","2015-05-12T20:10:48Z"
"","1066","Enable several Checkstyle Checks on codebase, issue #945","","closed","","mkordas","2015-05-10T19:05:08Z","2015-05-10T20:21:01Z"
"","1060","Update wagon-ssh to 2.9. #1060","","closed","","mkordas","2015-05-07T14:13:35Z","2015-05-09T16:23:45Z"
"","1056","Update maven-assembly-plugin to 2.5.4, issue #1055","","closed","","mkordas","2015-05-05T15:08:56Z","2015-05-09T16:22:45Z"
"","1050","Fix DeclarationOrder check violations in Checkstyle code, issue #1049","","closed","","mkordas","2015-05-03T00:06:39Z","2015-05-03T06:27:29Z"
"","1046","Fix FallThrough check violation in code, issue #945","","closed","","mkordas","2015-05-02T14:12:38Z","2015-05-03T18:34:22Z"
"","1043","Enable several Checkstyle checks on code, issue #945","","closed","","mkordas","2015-05-02T00:50:38Z","2015-05-02T06:50:07Z"
"","1042","Fix EmptyLineSeparator violations, issue #1040","","closed","","mkordas","2015-05-02T00:12:17Z","2015-05-02T05:35:13Z"
"","1038","Fix PMD violations from AvoidThrowingNullPointerException, issue #960","","closed","","mkordas","2015-05-01T15:24:15Z","2015-05-01T16:27:21Z"
"","1036","Fix EmptyCatchBlock violations in Checkstyle codebase, issue #945","","closed","","mkordas","2015-05-01T13:35:19Z","2015-05-01T14:28:33Z"
"","1034","Fix PMD violations from TooFewBranchesForASwitchStatement rule, issue #998","","closed","","mkordas","2015-05-01T00:39:15Z","2015-05-01T14:29:34Z"
"","1033","Remove FastStack from API, issue #989","","closed","","mkordas","2015-05-01T00:34:31Z","2015-05-01T00:53:49Z"
"","1032","Include enums in CovariantEquals check analysis, issue #1011","","closed","","mkordas","2015-04-30T23:41:04Z","2015-05-01T00:43:08Z"
"","1030","Fix NPE in ModifiedControlVariable check, issue #1012","","closed","","mkordas","2015-04-30T22:30:33Z","2015-04-30T23:48:41Z"
"","1029","Remove obsolete space from error message","","closed","","mkordas","2015-04-30T22:18:35Z","2015-04-30T23:48:20Z"
"","1028","Improve standard package regexp for CustomImportOrder check, issue #1020","","closed","","mkordas","2015-04-30T22:11:49Z","2015-05-01T00:28:07Z"
"","1027","Add missing space in error message for CustomImportOrder check","","closed","","mkordas","2015-04-30T21:54:56Z","2015-04-30T22:28:36Z"
"","1000","Repair ignored test, issue #994","","closed","","mkordas","2015-04-26T17:22:53Z","2015-04-27T21:14:00Z"