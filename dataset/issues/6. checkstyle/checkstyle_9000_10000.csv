"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","2747","Issue #2661: Enforce OverridableMethodInConstructor of sevntu-checkst…","…yle over Checkstyle source code","closed","","MEZk","2015-12-18T20:14:24Z","2015-12-20T22:18:20Z"
"","2716","Issue #2661: Enforce RequiredParameterForAnnotation of sevntu-checkst…","…yle over Checkstyle source code","closed","","MEZk","2015-12-15T19:25:47Z","2015-12-16T18:00:26Z"
"","2708","Issue #2661: Enforce NoNullForCollectionReturnCheck of sevntu-checkst…","…yle over Checkstyle source code","closed","","MEZk","2015-12-15T19:22:54Z","2015-12-16T18:00:40Z"
"","2704","Issue #2661: Enforce TernaryPerExpressionCount of sevntu-checkstyle o…","…ver Checkstyle source code","closed","","MEZk","2015-12-15T19:21:47Z","2015-12-16T18:00:37Z"
"","2701","Issue #2661: Enforce CauseParameterInException of sevntu-checkstyle o…","…ver Checkstyle source code","closed","","MEZk","2015-12-15T19:20:50Z","2015-12-16T18:00:34Z"
"","2702","Issue #2661: Enforce NameConventionForJunit4TestClassesCheck of sevnt…","…u-checkstyle over Checkstyle source code","closed","","MEZk","2015-12-15T19:21:07Z","2015-12-16T18:00:35Z"
"","2743","Issue #2661: Enforce InnerClassCheck of sevntu-checkstyle over Checks…","…tyle source code","closed","","MEZk","2015-12-18T19:39:40Z","2015-12-20T22:18:09Z"
"","2741","Issue #2661: Enforce RedundantReturn of sevntu-checkstyle over Checks…","…tyle source code","closed","","MEZk","2015-12-18T19:01:30Z","2015-12-20T22:18:28Z"
"","2712","Issue #2661: Enforce ForbidReturnInFinallyBlockCheck of sevntu-checks…","…tyle over Checkstyle source code","closed","","MEZk","2015-12-15T19:24:09Z","2015-12-16T18:00:44Z"
"","2710","Issue #2661: Enforce InterfaceTypeParameterNameCheck of sevntu-checks…","…tyle over Checkstyle source code","closed","","MEZk","2015-12-15T19:23:30Z","2015-12-16T18:00:42Z"
"","2705","Issue #2661: Enforce ReturnNullInsteadOfBooleanCheck of sevntu-checks…","…tyle over Checkstyle source code","closed","","MEZk","2015-12-15T19:22:07Z","2015-12-16T18:00:38Z"
"","2691","Issue #2080: !(lastImportStatic ^ isStatic) can be simplified to 'las…","…tImportStatic==isStatic' TCBuild=436","closed","","romani","2015-12-12T18:44:29Z","2015-12-13T00:06:21Z"
"","2742","Issue #2661: Enforce WhitespaceBeforeArrayInitializer of sevntu-check…","…style over Checkstyle source code","closed","","MEZk","2015-12-18T19:32:16Z","2015-12-20T22:18:40Z"
"","2686","Issue #2291: Fix not raising violation NeedBraces with ForEach loop w…","…stmt  Problem was strange implementation of checking if FOR_LITERAL ast is in single line. It was comparing start of FOR_LITERAL lineno with first expression found in for, which could be start of iteration expression in FOR_INIT or FOR_ITERATOR. For example such code with allowed single line statement was not raising NeedBraces  ``` java for             (String s: new String[]{""""}) break; ```  This PR fix this by comparing line of FOR_LITERAL with the last children( when last child is not SLIST - because when it is it should not raise violation).","closed","","liscju","2015-12-10T13:43:20Z","2015-12-11T16:38:33Z"
"","2654","Issue #2640: Change abbreviationAsWordInName error message to contain…","…s name that violates a format  Change error msg as issue requested. I added in com.puppycrawl.tools.checkstyle.checks.naming.AbbreviationAsWordInNameCheckTest helper method getWarningMessage which is nearly same as introduced getWarningMessage in com.google.checkstyle.test.chapter5naming.rule53camelcase.AbbreviationAsWordInNameCheckTest and they differs by first argument(class).   Why there are in two different packages test classes which have same purpose? If this is not intended i could merge them in this PR.","closed","","liscju","2015-12-01T15:14:10Z","2015-12-02T16:58:25Z"
"","2718","Issue #2661: Enforce ConfusingConditionCheck of sevntu-checkstyle ove…","…r Checkstyle source code","closed","","MEZk","2015-12-15T19:26:37Z","2015-12-16T18:00:52Z"
"","2699","Issue #2661: Enforce UselessSingleCatchCheck of sevntu-checkstyle ove…","…r Checkstyle source code","closed","","MEZk","2015-12-15T19:20:04Z","2015-12-16T18:00:28Z"
"","2830","Issue #2661: Enforce SingleBreakOrContinueCheck of sevntu-checkstyle …","…over Checkstyle source code","closed","","romani","2016-01-18T02:14:37Z","2016-01-18T05:02:00Z"
"","2796","Issue #2661: Enforce SingleBreakOrContinueCheck of sevntu-checkstyle …","…over Checkstyle source code","closed","","yaziza","2016-01-02T10:12:34Z","2016-01-18T18:55:12Z"
"","2746","Issue #2661: Enforce SimpleAccessorNameNotation of sevntu-checkstyle …","…over Checkstyle source code","closed","","MEZk","2015-12-18T20:07:15Z","2015-12-23T17:30:30Z"
"","2771","minor: fix for unexpected TeamCity build failure casued by previous c…","…ommit","closed","","romani","2015-12-25T23:34:24Z","2015-12-26T01:44:43Z"
"","2799","Issue #1349: Fix IndentationCheck to accept proper right parenthesis …","…of annotation","closed","","romani","2016-01-03T14:39:30Z","2016-01-03T18:58:43Z"
"","2717","Issue #2661: Enforce DiamondOperatorForVariableDefinitionCheck of sev…","…ntu-checkstyle over Checkstyle source code","closed","","MEZk","2015-12-15T19:26:00Z","2015-12-16T18:00:49Z"
"","2852","Issue #2822: Makes FinalClass doesnt recognise as final classes with …","…nested subclasses  In current implementation there is a problem that class with private constructor cannot be made final if there is an inner class that extends it.  Biggest problem with implementation deals with the fact that extends clause can contain class name, or class name with package for example:  ``` java private class ExtendA extends A {} private class ExtendC extends com.nonexistent.packages.C {} ```  To deal with this fact I put full class name(with package information) to ClassDesc, later when it decides if there is an inner class extending outer, we check if in extends clause there is only class name or there is package information and do appropriate comparison with outer classes names.","closed","","liscju","2016-01-27T15:31:12Z","2016-02-13T04:14:52Z"
"","2917","Issue #676: Forbid multiple violation for the same line in Indentatio…","…nCheck  In general solution is so short because every indentation handler uses IndentationCheck.indentationLog method to log violations.   There is one thing about solution which is workaround minor issue with pointing bad indentation lines in java files with 'warn'.  In method testInvalidLabelWithWhileLoop warnCountCorrection is set to -1:  ``` java @Test     public void testInvalidLabelWithWhileLoop() throws Exception {         // Configuration Lines truncated from this snippet         final String[] expected = {             ""18: "" + getCheckMessage(MSG_CHILD_ERROR_MULTI, ""label"", 9, ""4, 8""),             ""19: "" + getCheckMessage(MSG_CHILD_ERROR_MULTI, ""label"", 9, ""8, 12""),         };         verifyWarns(checkConfig, getPath(""InputInvalidLabelWithWhileLoopIndent.java""),             expected, -1);     } ```  verifyWarns has 4th as warnCountCorrection, it is used later to check if given expected error messages table length is the same as count of lines declared as 'warn' in java file to check. In general formula is:  COUNT_OF_LINES_WITH_WARN + warnCountCorrection = LENGTH_OF_EXPECTED_ERRORS  Problem with this approach occures when line is declared with 'warn' but error message for it is pointing to the previous message. In InputInvalidLabelWithLoopIndent we have:  ``` java 17: public InputInvalidLabelWithWhileLoopIndent() { //indent:4 exp:4 18:          LOOP://indent:9 exp:8 warn 19:          while (true) { //indent:9 exp:8 warn 20:             break LOOP; //indent:12 exp:13 warn 21:          } //indent:8 exp:8 22: } //indent:4 exp:4 ```  Without this patch expected violation are:  ``` java ""18: "" + getCheckMessage(MSG_CHILD_ERROR_MULTI, ""label"", 9, ""4, 8""), ""19: "" + getCheckMessage(MSG_CHILD_ERROR_MULTI, ""label"", 9, ""8, 12""), ""19: "" + getCheckMessage(MSG_ERROR_MULTI, ""while"", 9, ""8, 12""), ```  After applying this patch expected violations are:  ``` java ""18: "" + getCheckMessage(MSG_CHILD_ERROR_MULTI, ""label"", 9, ""4, 8""), ""19: "" + getCheckMessage(MSG_CHILD_ERROR_MULTI, ""label"", 9, ""8, 12""), ```  Last expected violation in before is not part of expectation violation after because this fix forbids multiple violation for line.   So now we have 3 lines with 'warn' in java file and only 2 expected violation, turning this into mentioned before formula:  3 + warnCountCorrection = 2  => so warnCountCorrection must be -1 to match this expectation.","closed","","liscju","2016-02-15T11:22:38Z","2016-02-18T14:00:30Z"
"","2814","Issue #2807: FinalLocalVariable doesn't report variable when conditio…","…n separates two assignments","closed","","Bhavik3","2016-01-09T10:49:10Z","2016-01-24T15:42:58Z"
"","2774","Issue #2773: fix for checkstyle_config.xml config only, but issue sti…","…ll not resolved","closed","","romani","2015-12-26T00:10:35Z","2015-12-26T01:40:09Z"
"","2714","Issue #2661: Enforce ForbidCCommentsInMethodsCheck of sevntu-checksty…","…le over Checkstyle source code","closed","","MEZk","2015-12-15T19:25:02Z","2015-12-16T18:00:46Z"
"","2706","Issue #2661: Enforce ReturnBooleanFromTernaryCheck of sevntu-checksty…","…le over Checkstyle source code","closed","","MEZk","2015-12-15T19:22:23Z","2015-12-16T18:00:39Z"
"","2700","Issue #2661: Enforce NestedSwitchCheck of sevntu-checkstyle over Chec…","…kstyle source code","closed","","MEZk","2015-12-15T19:20:28Z","2015-12-16T18:00:31Z"
"","2707","Issue #2661: Enforce PublicReferenceToPrivateTypeCheck of sevntu-chec…","…kstyle over Checkstyle source code","closed","","MEZk","2015-12-15T19:22:37Z","2015-12-16T18:00:40Z"
"","2435","Issue #2434: Inconvenience to debug UTs after recent changes in BaseC…","…heckTestSupport","closed","","romani","2015-10-24T13:41:29Z","2015-10-24T14:13:24Z"
"","2831","Issue #2661: NumericLiteralNeedsUnderscore Chekc is introduced from s…","…evntu","closed","","romani","2016-01-18T02:18:33Z","2016-01-18T13:49:19Z"
"","2713","Issue #2661: Enforce ForbidInstantiationCheck of sevntu-checkstyle ov…","…er Checkstyle source code","closed","","MEZk","2015-12-15T19:24:28Z","2015-12-16T18:00:45Z"
"","2711","Issue #2661: Enforce ForbidThrowAnonymousExceptionsCheck of sevntu-ch…","…eckstyle over Checkstyle source code","closed","","MEZk","2015-12-15T19:23:47Z","2015-12-16T18:00:43Z"
"","2745","Issue #2661: Enforce EnumValueNameCheck of sevntu-checkstyle over Che…","…ckstyle source code","closed","","MEZk","2015-12-18T19:49:51Z","2015-12-20T22:17:52Z"
"","2744","Issue #2661: Enforce LineLengthExtended of sevntu-checkstyle over Che…","…ckstyle source code","closed","","MEZk","2015-12-18T19:45:02Z","2015-12-20T22:19:01Z"
"","2888","Issue #2811: Makes JavadocTypeCheck recognise param names without bra…","…ckets  Problem so far was that param name was matched against pattern (""\s_]+)>._"") which recognise param names only inside ''. This patch makes it recognise if it is inside '' or is it just name.","closed","","liscju","2016-02-08T14:17:46Z","2016-02-09T15:22:21Z"
"","2720","Issue #2661: Enforce EitherLogOrThrowCheck of sevntu-checkstyle over …","…Checkstyle source code","closed","","MEZk","2015-12-15T19:26:56Z","2015-12-18T18:07:16Z"
"","2754","infra: appveyor can now execute any tasks we want in CI, defined in M…","…atrix. Powershell can not be used to run actual command as it works badly in case some nativecommand do error-output as ANTLR do, so we have to use cmd","closed","","romani","2015-12-20T13:38:03Z","2015-12-20T14:15:34Z"
"","2920","Issue #1048: Duplicate error message for static final field in Declar…","…ationOrderCheck  I had to divide ProcessModifiers into methods processModifiersState and processModifiersSubState because of CyclomaticComplexity violation when i added isStateValid variable to it.","closed","","liscju","2016-02-15T16:54:48Z","2016-02-17T16:26:06Z"
"","2892","config: travis long lines to evaluate pom version become multiline; '…","…-Dorekit.checkstyle.version' is used instead of sed pre-procesing of pom","closed","","romani","2016-02-09T12:40:01Z","2016-02-13T04:24:12Z"
"","2719","Issue #2661: Enforce AvoidDefaultSerializableInInnerClasses of sevntu…","…-checkstyle over Checkstyle source code","closed","","MEZk","2015-12-15T19:26:46Z","2015-12-16T18:01:07Z"
"","2735","infra: matrix should define whole task to let us use different tasks …","…(not only 'mvn') as CI","closed","","romani","2015-12-18T13:50:58Z","2015-12-20T16:14:36Z"
"","2775","config: fix for teamcity false alarm casued by commit 70a6e2e, no way…","… to suppress it","closed","","romani","2015-12-26T00:36:08Z","2015-12-26T01:11:30Z"
"","2641","Issue #2639: adjust AbbreviationAsWordInName in checkstyle_checks.xml…","… to catch unexpected abbreviations  list of exclusions was a bit more than I want to be, but other updates to code will be applied in other PRs.","closed","","romani","2015-11-22T01:52:42Z","2015-11-25T02:30:12Z"
"","2724","Issue #2661: skip plugin execution from build phases that do not need…","… this","closed","","romani","2015-12-16T16:30:06Z","2015-12-16T22:54:30Z"
"","2715","Issue #2661: Enforce FinalizeImplementationCheck of sevntu-checkstyle…","… over Checkstyle source code","closed","","MEZk","2015-12-15T19:25:15Z","2015-12-16T18:00:47Z"
"","2709","Issue #2661: Enforce NoMainMethodInAbstractClass of sevntu-checkstyle…","… over Checkstyle source code","closed","","MEZk","2015-12-15T19:23:09Z","2015-12-16T18:00:41Z"
"","2703","Issue #2661: Enforce EmptyPublicCtorInClassCheck of sevntu-checkstyle…","… over Checkstyle source code","closed","","MEZk","2015-12-15T19:21:24Z","2015-12-16T18:00:36Z"
"","2945","Issue #2939: Add UT checking if checks clear their state in beginTree…","… method  For now its just sketch of the solution to discuss. It doesn't comform style and failing on style checks, but i think we should discuss the algorithm and idea first, and later discuss style issues.  It declares UserDefinedOption annotation which all fields declared by users in Checks will be annotated with. This patch also contains proposal of UT test of checking if checks clear their fields in beginTree.  UT at first filters all classes which are declared in com.puppycrawl.tools.checkstyle package, then it filters all classes that extends AbstractCheck and are not at the excluded list - i took this list essentialy by copy pasting from XDocsPagesTest.   UT having filtered list of classes, it gets all non static fields that are not annotated by UserDefinedOption.   First assumption of the solution is checking ""clearance"" of fields is not possible(because there are many different ways of how this can be done, it can clear field by invoking clear() method on it, it can assign it to null etc), we can only check if values of those fields are changed by invocation of beginTree.  So to check clearance we first create object from class, we get field values, later invoke beginTree on this object and get field values again, and compare them. If they are same then beginTree doesn't do any clearance and it prints it as error on error output.  Problem with this solution appears when beginTree uses information from fields that are annotated with UserDefinedFields. Because we construct object from classes by running no parameter constructor, and later we dont assign values to fields annotated with UserDefinedFields, then if beginTree tries to manipulate on fields annotated with UserDefinedFields it leads to errors.   For example running this patch raise NullPointerException on OuterTypeFilenameCheck which tries to invoke getFileContents from super class AbstractCheck which returns null - because we didn't assign anything to this value.  Another thing that probably should be done, is to move all functionality of checking if given Class is clearing its field to another class to be able to unit test it with locally defined classes.  I am looking forward to any suggestions how to resolve this, or any other ideas how to construct this check.","closed","incomplete,","liscju","2016-02-19T13:21:23Z","2016-03-25T13:05:44Z"
"","2824","config: dead links are suppressed with a explanation to, next step is…","… enforce linkcheck to validate each commit by CI","closed","","romani","2016-01-14T15:00:57Z","2016-01-15T13:25:13Z"
"","2976","Resolved relative path for SuppressionFilter file relative to config file location","Would it be possible to add to the SuppressionFilter file resolution strategy such that relative paths to the suppression file are resolved relative to the location of the configuration file? Currently, different IDE plugins for Checkstyle handle this in different ways, making it very clumsy to share a single configuration file across the command line, Eclipse (eclipse-cs) and IntelliJ (Checkstyle-IDEA). The Eclipse plugin defines a property 'config_loc', the IntelliJ plugin requires users to define a property for this purpose, and in Gradle you need to wrap its Checkstyle plugin if you want a property defined with the location.","closed","","baron1405","2016-02-26T18:06:32Z","2016-03-02T16:59:10Z"
"","2210","create MacOS matrix item for Travis CI","workaround from: https://github.com/travis-ci/travis-ci/issues/2839#issuecomment-73199188  We need only ""mvn clean verify"" just to be sure that users can do contribution from MacOS.","closed","approved,","romani","2015-09-19T00:26:08Z","2016-05-19T13:32:07Z"
"","2083","Issue #1290: coverage has been increased to 100% in TranslationCheck","Without impotent changes in code. But I have no idea how to check messages. Check puts them to DefaultLogger and then to some PrintWriter...","closed","","sabaka","2015-09-02T23:27:05Z","2015-09-03T23:24:42Z"
"","2156","Issue #1292: AbstractHeaderCheck coverage has been increased to 100%","Without changes in check's code","closed","","sabaka","2015-09-11T00:38:45Z","2015-09-16T23:07:58Z"
"","2082","Issue #1290: Coverage has been increased to 100% in NewLineAtTheEndOfFileCheck","Without changes in check's code","closed","","sabaka","2015-09-02T22:20:47Z","2015-09-03T23:25:46Z"
"","2283","NPE with NeedBraces/allowSingleLineStatement","With NeedBraces/allowSingleLineStatement enabled the following code causes a NullPointerException. (Using Checkstyle 6.11.2 / 6.11.1)  ``` java public static void main(String[] args) {     for (;;)         break; } ```  ``` xml                          ```  ``` Exception in thread ""main"" java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.isSingleLineFor(NeedBracesCheck.java:286)     at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.isSingleLineStatement(NeedBracesCheck.java:203)     at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.isSkipStatement(NeedBracesCheck.java:177)     at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.visitToken(NeedBracesCheck.java:164)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:388)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:499)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:330)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:203)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:265)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:277)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:118) ```","closed","approved,","justurm","2015-10-08T15:13:57Z","2015-10-09T13:18:38Z"
"","2891","Issue #2729: types changed according to java spec","Will help to parse something like  `A.B.@foo C.D;` According to https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-ReferenceType it should be possible","closed","","sabaka","2016-02-08T22:36:23Z","2016-02-16T21:55:28Z"
"","2116","Change LineLength Check parent from TreeWalker to Checker","Why does LineLengthCheck need the java parser to work? It could be be based on AbstractFileSetCheck and allow any file type to use this check, like property and xml files.  It returns nothing for acceptable/required/default TokenTypes. The first thing it does is get all the lines of the file, which ""processFiltered"" will pass it. It never visits anything or use any of the ASTs. Only downside is that it would have to move out of the TreeWalker module in the configs.  **ATTENTION: Migration Notes**  Move `LineLengthCheck` outside of `TreeWalker` and place it directly in `Checker`.  By default, the changes to the check will scan all files not just Java files. If you want to restore the original behavior, using the following configuration with the `fileExtensions` property. ````      ````  If there was some suppression in code by `SuppressWithNearbyCommentFilter` with `influenceFormat` ... unfortunately there is no similar filter of Checker, the only filter in Checker: ```                                      ``` see example of migration: https://github.com/checkstyle/equalsverifier/commit/bce5a001b202a46978723572e325214bf5b14270  After implementation of #7064, suppression should be possible by SuppressWithPlainTextCommentFilter.","closed","breaking compatibility,","rnveach","2015-09-04T22:18:57Z","2020-01-10T14:34:15Z"
"","2125","Issue #2065: Remove additional context from IDEA suppression","While suppression works fine, it causes false positive in `RedundantSuppression` inspection reported as [IDEA-144818](https://youtrack.jetbrains.com/issue/IDEA-144818).  Tag `@noinspection` is self-descriptive enough on its own.","closed","","mkordas","2015-09-05T21:43:14Z","2015-09-05T22:27:44Z"
"","2995","New CLI option: suppressions no longer needed","While looking over the suppressions file for another issue, I noticed some suppressions from `CommentsTest` that are no longer needed because we refactored them to use the AST printer. https://github.com/checkstyle/checkstyle/blob/25621a3c3391ddf4bc0bb56535d23e73cd293657/config/suppressions.xml#L103-L106 Even though I believe in not using any suppressions, with CS it is apparent suppressions can become a huge list either because of broken/incomplete checks or logic that the coder feels is not warranted in a specific scenario while ok in others.  When fixing suppressions, most of the time the coder knows the suppression exists and that they are fixing it. However, when working on a completely different issue or in a team environment, it is possible a coder can fix a suppression without even knowing about it. Since suppressions hide errors, it is impossible to distinguish an error that is hidden from no error at all.  We have checks for unused imports, so we should have something to find unused suppressions. We should add a new option to the CLI to help clean up the suppressions file. When the option is enabled, it should report all suppressions from the file that were never used in the run. The error message should either report the line number the suppression starts at, or some unique way to identify the suppression out of the list.  Some of CS suppressions are multiple files, so it is possible this option won't work with them since one file out of X could report an error. We could discuss splitting one suppression per file. ##","closed","","rnveach","2016-03-02T14:16:30Z","2016-12-22T17:20:50Z"
"","2103","Wasted disk access","While looking into checkstyle and some of its hot spots on my slower machine, I noticed 2 things with how CS is gathering and using files that are creating slowdowns.  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Main.java#L198  If you provide CS with a directory, it will be gathering all the files in every sub-directory here and doing nothing more with them except making sure there is atleast one. We then duplicate the full scan here, https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Main.java#L224, actually saving the files for processing. CS should only need to do this scan once.","closed","approved,","rnveach","2015-09-03T22:31:22Z","2016-02-10T14:08:16Z"
"","2880","CS' java 8 code isn't compilable","While looking at our existing Java 8 code to try and work on new stuff, I noticed a few of our 'non-compilable' Java 8 files aren't actually compilable. Eclipse gives me around 100 errors. This can be seen in travis (https://travis-ci.org/rnveach/checkstyle/builds/107475572) when run with the command:  ```   include:     # full java 8 tests (oraclejdk8)     - jdk: oraclejdk8       env: DESC=""full java 8"" CMD=""sed -i 's/1\.7/1\.8/g' pom.xml && sed -i 's/1\.7/1\.8/g' pom.xml && cp -R src/test/resources-noncompilable/* src/test/resources && mvn clean install"" COVERAGE_CMD="""" DEPLOY=""true"" ```  We should add something like this command as a new travis node make these compilable so we are sure we are building a working parser.","closed","miscellaneous,","rnveach","2016-02-06T18:39:08Z","2016-02-13T04:20:42Z"
"","2584","Ignoring selected checks in test code?","When using Checkstyle via the Maven plugin, is there an efficient way to apply certain checks to all main code, but ignore them for tests?  For example, 'magic' numbers are common in unit tests (eg making assertions about the size of a returned list and the element at each index). Catching generic exceptions is typically appropriate in tests, too.","closed","","ThrawnCA","2015-11-12T00:33:31Z","2015-12-01T14:56:44Z"
"","2829","Anonymous class indentation is wrongly reported as incorrect in some cases","When trying to check the code, formatted according to the provided configuration, I see some strange behaviour of `checkstyle`.  The example `config.xml`:  ``` xml                                                                                                                                                               ```  For the sample `CheckstyleProblem.java`:  ``` java package example;  /**  * Inner class formatting identified by checkstyle wrongly.  */ public class CheckstyleProblem {    public interface Watcher {     public void process(CheckstyleProblem problem);   }    public CheckstyleProblem(String name, int intArgument, Watcher watcher) {     // bla bla   }    /**    * This is an example call that shows how inner class instance.    *    * @return checkstyle problem    */   public CheckstyleProblem init() {     // some example code that gets a Watcher      CheckstyleProblem result;     result =         new CheckstyleProblem(             ""problematic code formatting?"",             3334,             //             // here checkstyle considers the indentation is wrong             //             new Watcher() {               @Override               public void process(CheckstyleProblem problem) {}             });      return new CheckstyleProblem(         ""code formatting is ok from the point of view of checkstyle"",         3334,         //         // here no warning from checkstyle         //         new Watcher() {           @Override           public void process(CheckstyleProblem problem) {}         });   } } ```  running `checkstyle` on the example file shows warning that should not be there:  ``` $ java -jar checkstyle-6.14.1-all.jar -c config.xml CheckstyleProblem.java Starting audit... [WARN] CheckstyleProblem.java:33: 'method def modifier' have incorrect indentation level 14, expected level should be one of the following: 8, 10, 12. [Indentation] [WARN] CheckstyleProblem.java:35: 'object def rcurly' have incorrect indentation level 12, expected level should be one of the following: 6, 8. [Indentation] Audit done. ``` ##","open","indentation,","valgog","2016-01-17T17:51:45Z","2017-11-28T14:42:45Z"
"","2448","minor: refactoring xdoc xml validation","When starting to work on more xml parsing, I found it would be better to use some util to find elements on the xml structure instead of constantly trying to do it manually. So I started to switch to this way, and found one new validation error that was missed from the old code because of the timing when I removed the ""...""s and did the trimming.","closed","","rnveach","2015-10-25T20:58:26Z","2015-10-26T00:59:55Z"
"","2186","Exception message not informative enough for users on incorrect parent","When running Checkstyle with the following config:      ``` xml                                          ```  I get not very informative message:  ``` cannot initialize module TreeWalker - TreeWalker is not allowed as a parent of RegexpMultiline ```  I'd expect information that RegexpMultiline has parent `TreeWalker`, but should have `Checker` as parent. ##","closed","easy,","mkordas","2015-09-15T07:03:18Z","2017-04-11T04:41:13Z"
"","2788","JavadocStyleCheck: String index out of range: -1","When running Checkstyle plugin 2.4 on Sonar 5.2, with this ""[checkstyle.xml](https://github.com/checkstyle/checkstyle/files/74809/checkstyle.txt)"" file, we came across the following error during the analysis of one of our Java classes:  ``` $ cat checkstyle.xml                                                                                                   $ cat ConsultasServiceImpl.java  public class ConsultasServiceImpl {    /**      * /      */     public void buscarLaminas() {     }      }  $ java -jar checkstyle-6.13-all.jar -c checkstyle.xml ConsultasServiceImpl.java  Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing ConsultasServiceImpl.java     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:282)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:276)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:119) Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: -1     at java.lang.AbstractStringBuilder.charAt(AbstractStringBuilder.java:210)     at java.lang.StringBuilder.charAt(StringBuilder.java:76)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.trimTail(JavadocStyleCheck.java:316)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.getCommentText(JavadocStyleCheck.java:269)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.checkFirstSentenceEnding(JavadocStyleCheck.java:230)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.checkComment(JavadocStyleCheck.java:207)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.visitToken(JavadocStyleCheck.java:148)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:390)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:501)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:332)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:204)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:266)     ... 2 more Checkstyle ends with 1 errors. ```  In a [comment](https://github.com/checkstyle/checkstyle/issues/2728#issuecomment-167800504) on issue #2728, @romani suggested we disabled the JavadocStyleCheck on Sonar as a workaround. We did it, and it worked, the analysis passed. So we're going to keep it disabled till this issue is resolved.  So, here it is ""[ConsultasServiceImpl.java](https://github.com/checkstyle/checkstyle/files/80007/ConsultasServiceImpl.txt)"" file.","closed","javadoc,","snepcadep","2015-12-30T12:06:27Z","2016-02-01T18:02:26Z"
"","2461","java.lang.IllegalStateException: No match found in getMultilineNoArgTags.","When running checkstyle on a large project under Maven I am getting the following error which causes the build to fail. I have no idea how to determine what the problem is. Any help would be appreciated.  Adding text after the @return fixes the problem. Instead of reporting an error on the missing text Checkstyle is getting an exception.  ``` $ java -jar checkstyle-6.11.2-all.jar -c test.xml Test.java  Exception in thread ""main"" java.lang.IllegalStateException: No match found     at java.util.regex.Matcher.group(Matcher.java:536)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.getMultilineNoArgTags(JavadocMethodCheck.java:669)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.getMethodTags(JavadocMethodCheck.java:598)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.checkComment(JavadocMethodCheck.java:478)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.processAST(JavadocMethodCheck.java:365)     at com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.visitToken(AbstractTypeAwareCheck.java:147)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:388)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:499)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:330)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:207)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:265)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:277)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:118)   /var/tmp$ cat Test.java  /*  * File Header.  */  public class CheckError {          private long lServiceProviderId;          /**          * getter for the service provider id this phone number belongs to          *          * @return          *          */          public long getLServiceProviderId() {                 return lServiceProviderId;         } }  /var/tmp$ cat test.xml                                                                                   ```","closed","javadoc,","rgoers","2015-10-27T18:43:52Z","2015-10-28T21:58:24Z"
"","2860","JavadocPackage does not seem to honor severity","When I have the following configuration in my checkstyle xml  ```                    ```  Expect: checkstyle to ignore (i.e. not reporting error) package-info.java that has no javadoc defined.  Actual: checkstyle still reports a violation on the package-info.java that does not have javadoc. ##","closed","","testn","2016-02-01T01:07:48Z","2016-12-14T18:16:52Z"
"","2288","Issue #46: Exception logging has been added.","When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.","closed","","sabaka","2015-10-08T21:52:35Z","2016-01-05T22:39:34Z"
"","2326","If you reuse a class based on AbstractJavadocCheck, you can get stale error messages with wrong information","We use SonarQube with CheckStyle checks. We recently activated the AtclauseOrderCheck. But this caused the whole SQ analysis to fail.  The reason is the following:  We have a file A.java with JavaDoc:  ```    /**     * get the sorted list of tariffs to display in the combo box     *     * @param listOfTariffsUnsorted     * @return 2 lists: the sorted List tariffsToDisplay and the sorted List tariffVOs     */ ```  which causes a parse error because of unclosed HTML tag, which of course means that in this case the angle brackets should be escaped correctly.  Later in the analysis there is a file B.java with the following JavaDoc:  ```    /**     * @see javax.swing.tree.DefaultTreeCellRenderer.getTreeCellRendererComponent()     */ ```  which causes a syntax error because of the wrong @see reference which should of course be `@see javax.swing.tree.DefaultTreeCellRenderer#getTreeCellRendererComponent` instead.   I don't have an error or stacktrace, besides the subsequent error in SonarQube, but that is not really Checkstyle related. The effect in Checkstyle is, that you get the wrong finding for the second file.   **Example:** _Detected:_  ``` java -cp 'checkstyle-6.11.2-all.jar' com.puppycrawl.tools.checkstyle.Main -c checkstyle.xml A.java B.java Starting audit... ...\A.java:1024: warning: Javadoc comment at column 84 has parse error. Missed HTML close tag 'TariffVO'. Sometimes it means that close tag missed for one of previous tags. ...\B.java:1024: warning: Javadoc comment at column 84 has parse error. Missed HTML close tag 'TariffVO'. Sometimes it means that close tag missed for one of previous tags. Audit done. ```  _Expected:_  ``` java -cp 'target\classes;checkstyle-6.11.2-all.jar' com.puppycrawl.tools.checkstyle.Main -c checkstyle.xml A.java B.java Starting audit... ...\A.java:1024: warning: Javadoc comment at column 84 has parse error. Missed HTML close tag 'TariffVO'. Sometimes it means that close tag missed for one of previous tags. ...\B.java:26: warning: Javadoc comment at column 3 has parse error. Unrecognized error from ANTLR parser: null Audit done. ```  As it seems SQ is reusing the same instance of AtclauseOrderCheck for multiple files to be analyzed. Because of this the following happens:  The error in file B.java is recognized as syntax error, but not handled by [AbstractJavadocCheck.DescriptiveErrorListener#syntaxError](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java#L605), but by BailErrorStrategy#recoverInline([line](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java#L506)). This should be handled by AbstractJavadocCheck lines [236 - 241](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java#L236-L242) in current master file I think, but the DescriptiveErrorListener still has the last error message found which is used, instead of the new one. In this case it is the error message from A.java.  This causes a wrong message and line information, as line [237](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java#L237) is false. In our case the error in A.java is in line 1024 and the file B.java has only 42 lines. this later on causes and ArrayIndexOutOfBoundsException in the SonarQube analysis.","closed","approved,","Vampire","2015-10-11T23:36:33Z","2015-10-19T04:49:26Z"
"","2551","copy Check class to AbstractCheck class to let deprecate Check class","we need to rename Check class to AbstractCheck class. We can not do this easily and this is the main class that all Checks (most of them are out of our library) is using.  What we can do: 1) make a copy of Check class to AbstractCheck 2) Refactor all our Check to have new parent. 3) Update a Tree walker to accept custom Checks of Check.java class  and AbstractCheck. 4) Deprecate Check class, but do not remove it. 5) We will remove Check class in release 7.0 .  if smth see better way to do this , please share ideas.","closed","new feature,","romani","2015-11-07T23:20:53Z","2016-02-05T14:02:59Z"
"","2968","java8: Create compilable test inputs with all possible cases for method references","We need set of inputs to test our grammar changes for method references. They should cover all possible cases of using method references. All inputs should be compilable with java 8.  You may find this link helpful: https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-MethodReference You should ""extract"" grammar rules to possible cases in code. According to this specification, method reference are referenced only from primary expression https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-PrimaryNoNewArray It should help you to put method reference in right places  some initial commit: https://github.com/sabaka/checkstyle/commit/45b0deb2e226297daa35a1639aa311872277c497 ##","closed","miscellaneous,","sabaka","2016-02-24T22:17:42Z","2016-12-14T18:16:49Z"
"","2396","Refactor Comments AST Test","We have one test file for building an entire AST tree from scratch to verify it matches an input file. https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/CommentsTest.java#L85  I recently had the joy of understanding the flow and where new code fits in for updating it for a simple package name change.  Even if you look at my changes in the diff, https://github.com/checkstyle/checkstyle/commit/df28ab043954d0d4da8b1999ea97d95ccffe8c21#diff-ec0a7089eddbc170ebbc07b12d3095d5R93 You can not easily understand why my changes were made without looking at the original java file. It is even harder to ascertain how valid the changes are. Yes the tests pass, but it is easy to make mistakes, have them go unnoticed, and still have a valid tree. We are also assuming there are no hidden issues with the antlr tree. The raw tree is not even made in line/column order, so you have to jump around to grasp the full picture.  There is a reason we let antlr control the grammar in the normal AST building, it is not easy to read and maintain by a human. The downside is we still need to verify its structure somehow against future changes.  I propose the following change: Instead of building the raw AST tree in code, why don't we make a ""printTree"" utility method that will output antlr's AST tree in a text format, with all the necessary values to compare. We then save this as another input file with the ""Ast.txt"" suffix, and use this to then compare to antlr's generated tree. Example Text Tree output:  ``` +-- ""CLASS_DEF"" (CLASS_DEF) Line 3 Column 6      +-- ""MODIFIERS"" (MODIFIERS) Line 3 Column 6           +-- Text ""/*"" (BLOCK_COMMENT_BEGIN) Line 1 Column 49                +-- Text ""12"" (COMMENT_CONTENT) Line 1 Column 51                +-- Text ""*/"" (BLOCK_COMMENT_END) Line 1 Column 52 ```  The benefits are: 1) We don't have to create complex tree's manually for testing, but still validate the tree structure. 2) Updates will be easier to read and understand. 3) We can now generate more tree compares instantly with this utility with the assumption that the current tree structures are valid and any future changes need review. Outside of ""CommentsTest"", I couldn't find any other tests like it.","closed","miscellaneous,","rnveach","2015-10-20T14:08:43Z","2016-02-26T14:39:51Z"
"","2939","Annotate all Checks fields that are user defined options","We have nuance in Checkstyle: ` All Class fields that are not options should be reseted to initial state as the same instance of check is reused for all files. `  we need to create special annotation in for checkstyle code to mark all Check fields that are user faced options by it. Create a UT in test part of code to validate all our Checks classes to clean heir fields in `beginTree()` method. ##","open","easy,","romani","2016-02-19T00:38:18Z","2017-09-03T14:33:43Z"
"","2136","SuppressionFilter: Ignore violation for methods","We have CyclomaticComplexity checkstyle violation for hashCode and equals (autogenerated methods for legacy bean with 10 fields). Current Suppression  functionality allows to suppress violations for a line or for the whole file. Is it posible to extend Suppression functionality to suppress violation for a method? E.g. via config:  ```  ```  http://checkstyle.sourceforge.net/config_filters.html#SuppressionFilter ##","closed","approved,","ychulovskyy","2015-09-07T08:28:47Z","2018-05-31T03:33:08Z"
"","2454","xdoc token columns are unclear and possibly missing information the user needs","We have 2 columns of information on tokens in xdocs, but it is based on 3 fields (acceptable, required, default). It is unclear how the column are built from the 3 fields and may need to change? example: the columns could be direct copies of acceptable/default, or could be acceptable/default minus required tokens  Does the user need to know this information, or just enough to customize the check to their needs?  Currently if they copy the tokens to their own config, it will crash because we don't display required tokens, which they must input. But we don't display the tokens if acceptable = required = default, but in this case they can't do any customization on tokens anyways. The only issue this causes is we don't inform them which tokens the check is using. ##","open","","rnveach","2015-10-26T18:52:14Z","2016-12-14T18:16:44Z"
"","2414","minor: removed unnecessary manual class lookups","We do not need to use reflection to get a class that is public and know exactly where it resides. Let Java do the lookup for us, and keep the code a little bit simpler.","closed","","rnveach","2015-10-22T03:09:48Z","2015-10-22T13:12:11Z"
"","2659","TravisCI: tests over big projects are terminated by Travis","usually such jobs takes about 15 min.... (close to Travis limit) https://travis-ci.org/checkstyle/checkstyle/jobs/94752082#L491  ``` Running Checkstyle on src/main/java - finished linking report to index.html Removing non refernced xref files in report ... Done. Result report is locates at: target/site/index.html /home/travis/build.sh: line 112:  2411 Terminated              travis_jigger $! $timeout $cmd ```  avoid termination of jobs","closed","miscellaneous,","romani","2015-12-04T01:29:25Z","2015-12-06T00:53:48Z"
"","2895","False positive on lambda variables","Using the default version of checkstyle available in gradle 2.10, an expression like:  ``` java public static BigDecimal sum(final Collection","closed","","johnjaylward","2016-02-09T21:18:28Z","2016-02-10T14:22:50Z"
"","2918","Unable to find class for com.puppycrawl.tools.checkstyle.checks.regexp.ParenPadCheck","Using release 6.15 I'm seeing this log:  ``` [DEBUG] [com.puppycrawl.tools.checkstyle.PackageObjectFactory] Keep looking, ignoring exception com.puppycrawl.tools.checkstyle.api.CheckstyleException: Unable to find class for com.puppycrawl.tools.checkstyle.checks.regexp.ParenPadCheck ```  I believe the package is incorrect, since the `ParenPadCheck` is under a different package https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java","closed","","jsotuyod","2016-02-15T13:50:45Z","2017-06-13T18:52:31Z"
"","2729","Exception when using method reference in lamba ""Class[]::new""","Using Checkstyle version 6.13  When using the method reference ""Class[]::new"" in a lambda expression like:  ``` java //Compilable with Java8 //Issue #2729 package com.puppycrawl.tools.checkstyle.grammars.java8; import java.util.Arrays;  public class InputMethodReferences4 {     public void doSomething(final Object... arguments) {         Arrays.stream(arguments)                 .map(Object::getClass)                 .toArray(Class[]::new);     } } ```  the exception below is thrown:  ``` java Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing SomeClass.java     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:282)     at org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:252)     at org.apache.maven.plugin.checkstyle.CheckstyleViolationCheckMojo.execute(CheckstyleViolationCheckMojo.java:538)     ... 27 more Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: MismatchedTokenException occurred during the analysis of file SomeClass.java     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:218)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:266)     ... 29 more Caused by: SomeClass.java:37:13: expecting EOF, found 'Method'     at antlr.Parser.match(Parser.java:211)     at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:210)     at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:468)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:200)     ... 31 more ```  Using instead ""size -> new Class[size]"" is a workaround.","closed","antlr,","valliman","2015-12-17T11:52:24Z","2016-03-09T14:10:54Z"
"","2821","MismatchedTokenException using annotations on arrays","Using Checkstyle 6.14.1  ``` testNullAnnotations-checkstyle/src/testNullAnnotations$ javac Nullable.java NonNullUtils.java  testNullAnnotations-checkstyle/src/testNullAnnotations$ cat Nullable.java  package testNullAnnotations;  import static java.lang.annotation.ElementType.TYPE_USE;  import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target;  @Retention(RetentionPolicy.CLASS) @Target({ TYPE_USE }) public @interface Nullable { }  testNullAnnotations-checkstyle/src/testNullAnnotations$ cat NonNullUtils.java  package testNullAnnotations;  public final class NonNullUtils {      private NonNullUtils() {     }      public static  T[] checkNotNullContents(T @Nullable [] array) {         if (array == null) {             throw new NullPointerException();         }          return array;     } }  testNullAnnotations-checkstyle/src/testNullAnnotations$ cat config.xml                                               testNullAnnotations-checkstyle/src/testNullAnnotations$ java -jar checkstyle-6.14.1-all.jar -c config.xml NonNullUtils.java Starting audit... /.../testNullAnnotations-checkstyle/src/testNullAnnotations/NonNullUtils.java:8:50: expecting ELLIPSIS, found '@' com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing NonNullUtils.java     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:282)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:276)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:119) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: MismatchedTokenException occurred during the analysis of file NonNullUtils.java.     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:203)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:80)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:266)     ... 2 more Caused by: /home/emalape/Downloads/testNullAnnotations-checkstyle/src/testNullAnnotations/NonNullUtils.java:11:9: expecting EOF, found '}'     at antlr.Parser.match(Parser.java:211)     at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:210)     at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:453)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:185)     ... 4 more Checkstyle ends with 1 errors. ```  [testNullAnnotations-checkstyle2.zip](https://github.com/checkstyle/checkstyle/files/89179/testNullAnnotations-checkstyle2.zip)","closed","antlr,","MarkZ3","2016-01-13T06:43:30Z","2016-03-01T05:17:56Z"
"","2927","UnusedImports should not force us to use full class name in JavaDoc","UnusedImports is useful check, however it has one minor issue that stops us from using it. It forces us to write `{@link java.util.Date}` in JavaDoc instead of  ``` import java.util.Date; ... {@link Date} ```  because ""it is considered bad practice to introduce a compile time dependency for documentation purposes only"" http://checkstyle.sourceforge.net/config_imports.html#UnusedImports  But we would like to use short class name instead of full, especially if the class is mentioned many times in the JavaDoc.  Is it possible to introduce ""allowImportForJavaDoc"" flag to fix it?","closed","","ychulovskyy","2016-02-17T09:44:32Z","2016-02-17T16:30:50Z"
"","2492","Verification of Tokens by getRequiredToken method","triggered by https://github.com/checkstyle/checkstyle/issues/2388 .  We need to decided what to do when user specify in ""tokens"" not all tokens that are in requiredTokens list.  Possible approaches: 1) Checkstyle should give an error to user (fail-fast) when he try to put in ""tokens"" incomplete set of tokens according to getRequiredTokens.  2) The original intention of tokens was rather to specify additional tokens, not all.  So requiredTokens are always appended automatically.  That issue is also related to issue of describing to user getRequiredTokens . Issue to describe getAvailableTokens and getDefaultTokens in XDOC. ##","open","approved,","romani","2015-10-31T22:10:24Z","2019-03-20T02:11:07Z"
"","2541","Remove usage of System.out.println in IT resources","triggered by https://github.com/checkstyle/checkstyle/issues/2161#issuecomment-147886384  All usages of ""System.out.println"" should be removed and substituted with any other dummy code. List of excludes https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L897 should be minimized","closed","miscellaneous,","romani","2015-11-06T14:04:31Z","2016-09-01T12:46:31Z"
"","2969","Add the ability to validate language codes by TranslationCheck","TranslationCheck cannot validate user-specified language codes in current implementation. See https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_misc.xml#L1623  Nevertheless, we can implement such validation and inform user if the language code is incorrect. See suggestions at http://stackoverflow.com/questions/3684747/how-to-validate-a-locale-in-java","closed","new feature,","MEZk","2016-02-24T22:25:50Z","2016-03-31T23:15:21Z"
"","2473","Issue #2451: removed excess hierarchy from TrailingCommentCheck","TrailingCommentCheck now extends Check. Fields and setters copied from AbstractFormatCheck, with minor modifications. setLegalComment's parameter had to change to avoid conflicts with the format field. DEFAULT_FORMAT was removed since it was only used once.","closed","","rnveach","2015-10-30T12:12:29Z","2015-10-30T17:08:49Z"
"","2638","Print parse tree from CLI to terminal","this this good task for new contributors.  in connection with Javadoc tree #652 we need a option to main CLI to print parse tree to output. That will help a lot .  right now we are forced to use Swing gui for this.  it is not clear for now in what format to print a tree, need to be discussed.","closed","new feature,","romani","2015-11-21T03:14:52Z","2016-02-04T13:22:50Z"
"","2637","Issue #2080: Simplify JUnit assertion","This PR relates to #2080.","closed","","mkordas","2015-11-20T22:45:58Z","2015-11-22T00:24:18Z"
"","2198","Issue #2126: Make coverage 100% for TokenTypesDoclet","This PR needs to be rebased on #2196 and modified a bit to avoid [extra output](https://travis-ci.org/checkstyle/checkstyle/jobs/80798099#L614-L617).","closed","","Vladlis","2015-09-17T09:55:29Z","2015-09-24T14:55:35Z"
"","2845","Issue #2838: Make WhitespaceAround allow double-brace initialization.","This patch makes double-brace initialization allowed, alternative would be to introduce option for that - im looking forward to opinion about that.  Regarding implementation details, unfortunately i wasnt able to implement this functionality in WhitespaceAroundCheck.isNotRelevantSituation method, because in this method when we return true(is not relevant) ast is later doesnt check at all. For example:  ``` java new Properties() {{setProperty(""double curly braces"", ""are not a style error"");         }}; ```  For second left bracket in first line when we would return true from isNotRelevantSituation it wouldn't later check that the next token(setProperty) is not separated from previous token.","closed","","liscju","2016-01-25T13:25:48Z","2016-02-10T19:22:10Z"
"","2632","minor: fixed improper put that should be get","This line should be a 'get' because regardless of the contents of `current` the next statements will do another put, replacing the original put contents. This is similar to assigning a value to a variable, and then re-assigning the same variable with the same or similar value.","closed","","rnveach","2015-11-20T17:10:48Z","2015-11-20T19:43:15Z"
"","2604","Update configuration for XXXXName Checks at checkstyle_checks.xml","This issue need to addressed after completion of #2616 .  New patterns:  ``` ParameterName      - ""^(id)|([a-z][a-z0-9][a-zA-Z0-9]+)$"" LocalVariableName  - ""^(id)|([a-z][a-z0-9][a-zA-Z0-9]+)$""  MemberName         - ""^(id)|([a-z][a-z0-9][a-zA-Z0-9]+)$"" StaticVariableName - ""^(id)|([a-z][a-z0-9][a-zA-Z0-9]+)$"" ```  violations to resolve:  ``` /test/base/BaseCheckTestSupport.java:135:22: error: Name 'i' must match pattern. /test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java:95:18: error: Name 'i' must match pattern. /Checker.java:388:18: error: Name 'i' must match pattern. /TreeWalker.java:689:19: error: Name 'c' must match pattern. /XMLLogger.java:154:18: error: Name 'i' must match pattern. /ant/CheckstyleAntTask.java:445:23: error: Name 'p' must match pattern. /ant/CheckstyleAntTask.java:469:26: error: Name 'i' must match pattern. /ant/CheckstyleAntTask.java:494:18: error: Name 'i' must match pattern. /api/AbstractFileSetCheck.java:125:18: error: Name 'i' must match pattern. /api/FileContents.java:188:22: error: Name 'i' must match pattern. /api/LocalizedMessages.java:52:38: error: Name 'aMsg' must match pattern. /checks/DescendantTokenCheck.java:358:18: error: Name 'i' must match pattern. /checks/SuppressWarningsHolder.java:369:18: error: Name 'i' must match pattern. /checks/TodoCommentCheck.java:109:18: error: Name 'i' must match pattern. /checks/annotation/MissingDeprecatedCheck.java:177:18: error: Name 'i' must match pattern. /checks/blocks/EmptyBlockCheck.java:234:18: error: Name 'i' must match pattern. /checks/coding/FallThroughCheck.java:366:22: error: Name 'i' must match pattern. /checks/coding/MagicNumberCheck.java:389:18: error: Name 'i' must match pattern. /checks/coding/ModifiedControlVariableCheck.java:341:18: error: Name 'i' must match pattern. /checks/coding/UnnecessaryParenthesesCheck.java:310:18: error: Name 'i' must match pattern. /checks/header/HeaderCheck.java:95:22: error: Name 'i' must match pattern. /checks/imports/CustomImportOrderCheck.java:690:18: error: Name 'i' must match pattern. /checks/imports/ImportOrderCheck.java:236:18: error: Name 'i' must match pattern. /checks/imports/ImportOrderCheck.java:491:18: error: Name 'i' must match pattern. /checks/imports/PkgControl.java:93:29: error: Name 'pc' must match pattern. /checks/imports/PkgControl.java:139:20: error: Name 'g' must match pattern. /checks/indentation/AbstractExpressionHandler.java:284:18: error: Name 'i' must match pattern. /checks/indentation/AbstractExpressionHandler.java:331:18: error: Name 'i' must match pattern. /checks/indentation/IndentLevel.java:49:18: error: Name 'i' must match pattern. /checks/indentation/IndentLevel.java:121:18: error: Name 'i' must match pattern. /checks/javadoc/AbstractJavadocCheck.java:178:25: error: Name 'ps' must match pattern. /checks/javadoc/AbstractJavadocCheck.java:314:18: error: Name 'i' must match pattern. /checks/javadoc/AbstractJavadocCheck.java:334:18: error: Name 'j' must match pattern. /checks/javadoc/AbstractJavadocCheck.java:354:18: error: Name 'i' must match pattern. /checks/javadoc/JavadocMethodCheck.java:226:18: error: Name 'i' must match pattern. /checks/javadoc/JavadocMethodCheck.java:567:18: error: Name 'i' must match pattern. /checks/javadoc/JavadocMethodCheck.java:915:32: error: Name 'ei' must match pattern. /checks/javadoc/JavadocStyleCheck.java:287:18: error: Name 'i' must match pattern. /checks/javadoc/JavadocTypeCheck.java:279:18: error: Name 'i' must match pattern. /checks/javadoc/JavadocTypeCheck.java:303:18: error: Name 'i' must match pattern. /checks/javadoc/JavadocTypeCheck.java:326:18: error: Name 'i' must match pattern. /checks/javadoc/SingleLineJavadocCheck.java:84:21: error: Name 'sTag' must match pattern. /checks/javadoc/WriteTagCheck.java:182:18: error: Name 'i' must match pattern. /checks/metrics/AbstractComplexityCheck.java:148:59: error: Name 'by' must match pattern. /checks/sizes/LineLengthCheck.java:122:18: error: Name 'i' must match pattern. /checks/sizes/MethodLengthCheck.java:117:22: error: Name 'i' must match pattern. /checks/whitespace/GenericWhitespaceCheck.java:299:18: error: Name 'i' must match pattern. /checks/whitespace/NoWhitespaceBeforeCheck.java:112:22: error: Name 'i' must match pattern. /filters/SuppressWithNearbyCommentFilter.java:261:22: error: Name 'i' must match pattern. /filters/SuppressionCommentFilter.java:256:22: error: Name 'i' must match pattern. /gui/AbstractTreeTableModel.java:74:18: error: Name 'i' must match pattern. /gui/AbstractTreeTableModel.java:111:18: error: Name 'i' must match pattern. /gui/AbstractTreeTableModel.java:142:18: error: Name 'i' must match pattern. /gui/AbstractTreeTableModel.java:173:18: error: Name 'i' must match pattern. /gui/AbstractTreeTableModel.java:204:18: error: Name 'i' must match pattern. /gui/BaseCellEditor.java:92:18: error: Name 'i' must match pattern. /gui/BaseCellEditor.java:109:18: error: Name 'i' must match pattern. /utils/CheckUtils.java:216:18: error: Name 'i' must match pattern. /utils/CheckUtils.java:237:18: error: Name 'i' must match pattern. /utils/CommonUtils.java:73:22: error: Name 'i' must match pattern. /utils/CommonUtils.java:104:18: error: Name 'i' must match pattern. /utils/CommonUtils.java:123:18: error: Name 'i' must match pattern. /utils/CommonUtils.java:395:22: error: Name 'i' must match pattern. /utils/JavadocUtils.java:111:18: error: Name 'i' must match pattern. /utils/ScopeUtils.java:68:55: error: Name 'aAST' must match pattern. /utils/ScopeUtils.java:101:56: error: Name 'aAST' must match pattern. /utils/ScopeUtils.java:131:57: error: Name 'aAST' must match pattern. /utils/ScopeUtils.java:162:68: error: Name 'aAST' must match pattern. /utils/ScopeUtils.java:172:51: error: Name 'aAST' must match pattern. /utils/ScopeUtils.java:201:51: error: Name 'aAST' must match pattern. /utils/ScopeUtils.java:227:53: error: Name 'aAST' must match pattern. /utils/ScopeUtils.java:251:56: error: Name 'aAST' must match pattern. /AllChecksTest.java:341:18: error: Name 'i' must match pattern. /AllChecksTest.java:391:22: error: Name 'i' must match pattern. /BaseCheckTestSupport.java:164:22: error: Name 'i' must match pattern. /XDocsPagesTest.java:419:21: error: Name 'p' must match pattern. /XDocsPagesTest.java:611:33: error: Name 'p' must match pattern. /XMLLoggerTest.java:254:18: error: Name 'i' must match pattern. /checks/javadoc/WriteTagCheckTest.java:235:22: error: Name 'i' must match pattern. /checks/regexp/RegexpMultilineCheckTest.java:179:18: error: Name 'i' must match pattern. /checks/regexp/RegexpMultilineCheckTest.java:193:18: error: Name 'i' must match pattern. /grammars/comments/AllSinglelineCommentsTest.java:81:22: error: Name 'i' must match pattern. /grammars/javadoc/JavadocParseTreeTest.java:281:41: error: Name 't1' must match pattern. /grammars/javadoc/JavadocParseTreeTest.java:281:55: error: Name 't2' must match pattern. ```  ""sb"" is questionable, most likely for local variables it s ok, but for parameters it is not example - http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Joiner.html#appendTo%28java.lang.StringBuilder,%20java.lang.Iterable%29 .  Name in parameters usually used in code generations, so even we could agree to be lazy in local variables, parameters should be verbose.  UPDATE after discussion with @mkordas and @rnveach :  ""sb"" should be renamed to ""builder""","closed","miscellaneous,","romani","2015-11-15T14:52:42Z","2015-12-07T00:03:35Z"
"","2733","Issue #2645: fixed StringIndexOutOfBoundsException in Indentation check","This issue has 2 parts connected to it.  1) The main issue was `getLineStart` was trying to go past the end of the line, so I changed that. 2) I also changed `checkLineIndent` to skip empty lines, as the current implementation will require these lines to be indented too., which I believe we don't want.  I could have just done item 2 alone, but item 1 would show up later if someone had a line with just spaces in it, and this would cause the same exception. I named the test file ""separated"" because there are other issues with this problem, so they can just be added to this one case.  I changed `LINE_WITH_COMMENT_REGEX`, because it doesn't support blank lines that are just spaces, which the current implementation will require to be in the correct position. This was needed to fully test item 1. See `InputSeparatedStatementWithSpaces`. This also required fixing 1 other input file. I ended up removing `NONEMPTY_LINE_REGEX` and just doing a basic empty check, since we can have spaced out lines. Should these be in a separate commit?","closed","","rnveach","2015-12-17T22:26:28Z","2016-01-31T00:24:51Z"
"","2805","SummaryJavadoc: false ""end with a period"" reports when inheritDoc is used","This is the exact same issue as #2411 but with SummaryJavadoc instead of JavadocStyle.  TestClass.java  ``` package test;  public class TestClass {     /** {@inheritDoc} */     @Override     public void test() {     } } ```  config.xml  ```                                                               ```  output from: `java -jar checkstyle-6.14.1-all.jar -c config.xml TestClass.java`  ``` Starting audit... [ERROR] D:\Rickys\Java\EclipseStuff\checkstyle\src\main\java\test\TestClass.java:4: First sentence of Javadoc is incomplete (period is missing) or not present. [SummaryJavadoc] Audit done. Checkstyle ends with 1 errors. ```  Like the other issue, inheritDoc shouldn't require a period.","closed","javadoc,","rnveach","2016-01-07T03:30:35Z","2016-01-28T13:27:42Z"
"","2577","Issue #957: Add VisibleForTesting annotation where applicable","This is temporary solution to mark such pieces of code more visible.","closed","","mkordas","2015-11-10T23:52:48Z","2015-11-12T19:38:16Z"
"","2763","Indentation: throwsIndent should configure indentation of `throws` on next line","This is a PR based on issue #1272. This feature was previously implemented for issue #63. Other information can be found at http://sourceforge.net/p/checkstyle/feature-requests/294/ (already applied by https://github.com/checkstyle/checkstyle/pull/80).  The intention of this feature is to separately configure the indentation of the throws keyword for a method definition when it appears on the next line.  Such a definition looks like this: `void myMethod() throws Exception {` When `throws Exception` appears on the next line, it is currently required to be at the same indentation as the declaration on the line above. Some styles would choose to indent this next line one level further. The intent is that if `throwsIndent` is set, this is the expected indentation for this second line.  I originally implemented this feature and published my work on GitHub. This was before CheckStyle moved to GitHub, so this was a copy of the project instead of a fork. @ksclarke worked on integrating this work on CheckStyle 5.7 and providing test cases for it. I currently do not have the time to reimplement this feature, but I hope this information will help.","closed","indentation,","maikelsteneker","2015-12-22T11:27:45Z","2016-05-07T20:45:47Z"
"","2644","Fix 'tokens' property in JavadocStyle check","This is a fix for a problem introduced with Checkstyle 6.10 with commit [#d56a2a3](https://github.com/checkstyle/checkstyle/commit/d56a2a366c6f9e3e8639d492d548ae562b75dc81#diff-6dbb31589372edafae8e79665300f05a), which prevents the _JavadocStyle_ check from correctly evaluating the `tokens` property. Since `getRequiredTokens()` was set to return the result of `getAcceptableTokens()`, the `tokens` property was effectively disabled.  For example, the following configuration, which checks end-of-sentence format exclusively on methods, is no longer possible:  ``` xml                     ```  This PR restores the pre-6.10 behavior of configurable tokens and adds a test case for the above configuration.","closed","bug,","tsjensen","2015-11-22T19:27:11Z","2015-12-05T13:07:58Z"
"","2798","Issue #1002: Add optional attribute to suppression filter","This implementation lacks dealing with the fact that SuppressionsLoader.loadSuppressions doesnt throw exceptions only when the file is missing, the exceptions are thrown also when the supression file has bad structure.   So i have question what should i do: should SupressionsLoader.loadSuppressions should be refactored to throw CheckstyleException and FileNotFoundException or should i do sth else to deal with this(for example it can read from CheckstyleException msg and checks if it was matching file not found error msg, but this seems like ""Primitive Obsession"" code smell)?","closed","","liscju","2016-01-03T01:23:52Z","2016-01-25T21:35:13Z"
"","2588","Issue #2240: Fix false negatives in RequireThisCheck","This fixes both false-negatives from the issue. Report: https://vladlis.github.io/reports/requirethis I've reviewed almost all violations from the report, except from a lot of similar ones against guava.","closed","","Vladlis","2015-11-12T14:16:25Z","2015-11-16T06:50:24Z"
"","2225","New check: NoEmptyLinesBeforeClosingBrace","This check would prevent any amount of empty lines before `}`:  ``` java void a() {  } // violation above - delete this empty line  void b() {     if (true) {     } // OK  } // violation above - delete this empty line ```  This would be effectively the same as prohibiting occurrence of `\n\s*\n\s*\}` regexp in codebase.  Rationale: Empty lines before closing braces make code longer and they do not improve readability. ##","open","","mkordas","2015-09-23T11:50:42Z","2017-07-19T20:14:22Z"
"","2942","IndentationCheck reports break to label instruction in previous line","This can be observed in version 6.15-SNAPSHOT by running:  ``` /var/tmp $ java -jar checkstyle-6.15-SNAPSHOT-all.jar -c style.xml InputInvalidLabelWithWhileLoopIndent.java  Starting audit... [ERROR] /var/tmp/InputInvalidLabelWithWhileLoopIndent.java:18: 'label' child have incorrect indentation level 9, expected level should be one of the following: 4, 8. [Indentation] [ERROR] /var/tmp/InputInvalidLabelWithWhileLoopIndent.java:19: 'label' child have incorrect indentation level 9, expected level should be one of the following: 8, 12. [Indentation] [ERROR] /var/tmp/InputInvalidLabelWithWhileLoopIndent.java:19: 'while' have incorrect indentation level 9, expected level should be one of the following: 8, 12. [Indentation] Audit done. Checkstyle ends with 3 errors.  /var/tmp $ cat style.xml                                                                               /var/tmp $ cat InputInvalidLabelWithWhileLoopIndent.java  package com.puppycrawl.tools.checkstyle.checks.indentation; //indent:0 exp:0  /**                                                                           //indent:0 exp:0  * This test-input is intended to be checked using following configuration:   //indent:1 exp:1  *                                                                            //indent:1 exp:1  * arrayInitIndent = 4                                                        //indent:1 exp:1  * basicOffset = 4                                                            //indent:1 exp:1  * braceAdjustment = 0                                                        //indent:1 exp:1  * caseIndent = 4                                                             //indent:1 exp:1  * forceStrictCondition = false                                               //indent:1 exp:1  * lineWrappingIndentation = 4                                                //indent:1 exp:1  * tabWidth = 4                                                               //indent:1 exp:1  * throwsIndent = 4                                                           //indent:1 exp:1  */                                                                           //indent:1 exp:1 public class InputInvalidLabelWithWhileLoopIndent { //indent:0 exp:0      public InputInvalidLabelWithWhileLoopIndent() { //indent:4 exp:4          LOOP://indent:9 exp:8 warn          while (true) { //indent:9 exp:8 warn             break LOOP; //indent:12 exp:13 warn         } //indent:8 exp:8     } //indent:4 exp:4 } //indent:0 exp:0 ```  First violation on 18 line is ok( with LOOP label), but second for 19 line 'label' is incorrect because 'break LOOP' violation should be report on 20 line. ##","open","approved,","liscju","2016-02-19T07:57:16Z","2016-12-14T18:16:47Z"
"","2498","minor: methods made static","these methods can be made static","closed","","rnveach","2015-11-01T03:52:20Z","2015-11-01T13:15:00Z"
"","2373","Issue #2161: unify test input locations for header package","There were a few unused files named ""H1"" and ""H2"". I kept the configs folder intact, but added a ""getConfigPath"". If another check needs to access it, we can always move this method to the base class. InputScopeAnonInner was copied and trimmed down and renamed.  I played this on top of PR #2372 and didn't find any exceptions changed.","closed","","rnveach","2015-10-17T17:44:51Z","2015-10-18T13:44:52Z"
"","2126","Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle.doclets","There only one file to cover by UTs.  following line https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L872 should be removed.","closed","approved,","romani","2015-09-05T22:29:57Z","2015-09-18T03:24:30Z"
"","2899","Javadoc for try-with-resources tokens is not good enough","There are two different token types in `TokenTypes` for try-with-resources. ![screenshot from 2016-02-11 20-46-20](https://cloud.githubusercontent.com/assets/5467276/12988369/b194f920-d100-11e5-9057-9227b30905b4.png) The difference between these tokens should be explained there. ##","closed","easy,","mkordas","2016-02-11T19:48:57Z","2017-04-12T10:38:16Z"
"","2823","Add option to exclude annotations in ClassFanOutComplexity check","There are some classes that has many annotations on their field/methods but from the developer point of view they do not increase the complexity of a class. Spring-web controller is a great example of this.  ``` java @Controller @RequestMapping(""/user"") public class UserController {     @Autowired     private Some someService;      @RequestMapping(""/{user}"")     @ResponseBody     @PostAuthorize     public UserDto get(@PathVariable User user) {         // ...     }      @RequestMapping     @ResponseBody     @PreAuthorize(...)     public SomeReturn getSomething(@RequestParam String param) {         // ...     } } ```","closed","","fracz","2016-01-14T12:24:31Z","2022-06-24T09:50:07Z"
"","2608","Remove drag&drop from GUI","There are plenty of ugly copy-paste from web in gui package and I propose to delete drag and drop at first phase of refactoring. I don't think it's very useful. We will re implement it in future with more modern way (I'm sure we can do it better) if users complain.","closed","miscellaneous,","sabaka","2015-11-17T00:01:49Z","2015-11-19T13:30:12Z"
"","2781","Issue #2780: Fix StringIndexOutOfBoundsException in getCheckShortNamemethod of AuditEventDefaultFormatter","There are 4 formats of module name: com.package.TestModuleCheck com.package.TestModule TestModuleCheck TestModule  Now they are treated by getCheckShortName.  P.S. There is a typo in `AuditEvemtFormatter`. I'll fix it in separate PR.","closed","","MEZk","2015-12-28T23:55:09Z","2015-12-31T08:53:12Z"
"","2353","Issue #46: switch case clauses should not have too many lines.","The switch statement should be used only to clearly define some new branches in the control flow. As soon as a case clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of case clause should be extracted in a dedicated method. Default threshold of 5.","closed","","sabaka","2015-10-14T22:18:42Z","2016-01-05T22:39:19Z"
"","2495","Performance-Optimzation: Do not recompile Pattern for each file/line","The Singleline- and MultilineDetector were recompiling the regex pattern for each checked file.  The compiled pattern can be cached to improve runtime performance.","closed","bug,","fabotronix","2015-10-31T23:47:26Z","2015-11-24T23:19:14Z"
"","2689","SDK GUI not expanding nodes","The SDK GUI does not allow expanding class OBJBLOCK nodes; the last version I can see working is 6.9. For example, the following code does not expand the class node:  public class XX {     void x() {     } }","closed","","richardSch","2015-12-10T20:17:42Z","2016-01-04T19:42:41Z"
"","2749","Pull #2749: Make UT 'testNonAccessibleFile' locale independent","The problem was reported by @Vladlis . He uses Russian localse in OS Linux Mint. When he did rebase and ran UTs the 'testNonAccessibleFile' failed.  The exception message should have ended with ""file.output (Permission denied)"" for OS Linux EN or ""file.output (Access is denied)"" for OS Windows EN. But he received """"file.output (Доступ запрещен)"" as he uses OS Linux Mint RU.  So, we can assume that contributors who use locale that is differ to EN will have problems with the UT.","closed","miscellaneous,","MEZk","2015-12-18T21:55:55Z","2015-12-20T22:19:17Z"
"","2688","OneStatementPerLine check and lambda expression","The OneStatementPerLine flags the lambda expression as containing multiple statements.  I want it to not report an error in this case.  If there were multiple statements inside the lambda on the same line, then I would expect an error.  http://checkstyle.sourceforge.net/config_coding.html#OneStatementPerLine  % java -jar checkstyle-6.13-all.jar -c checks.xml Y.java Starting audit... /run/shm/Y.java:3:80: error: Only one statement per line allowed. Audit done. Checkstyle ends with 1 errors. % cat Y.java  ``` java public class Y {     void y() {         new JCheckBox().addActionListener((final ActionEvent e) -> { good(); });     } } ```  % cat checks.xml   ``` xml                             ```","closed","approved,","richardSch","2015-12-10T20:05:06Z","2016-01-01T19:23:22Z"
"","2573","Issue #2540: unify it input file names for chapter4formatting","the last of the putting 'Input' in front of the input file names","closed","","rnveach","2015-11-10T18:49:45Z","2015-11-12T13:34:08Z"
"","2987","Allow JUnit ClassRule to be public","The JUnit ClassRule should be treated the same way as JUnit Rule, as must should be declared public.  Currently only @Rule is ignored from the check and latest version complains about: Variable 'myClassRule' must be private and have accessor methods. [VisibilityModifier]  Class:  ``` /tmp/checkstyle :: cat Example.java public class Class { @org.junit.Rule public Rule rule = new Rule();  @org.junit.ClassRule public static Rule classRule = new ClassRule(); } ```  XML:  ``` /tmp/checkstyle :: cat checkstyle.xml            ```    Outcome:  ``` /tmp/checkstyle :: java -jar checkstyle-6.16-all.jar -c checkstyle.xml Example.java Starting audit... [ERROR] /tmp/checkstyle/Example.java:6:28: Variable 'classRule' must be private and have accessor methods. [VisibilityModifier] Audit done. Checkstyle ends with 1 errors. ```  JUnit rule is in the 'whitelist' in VisibilityModifierCheck class:  ``` /** Default ignore annotations canonical names. */ private static final List DEFAULT_IGNORE_ANNOTATIONS = ImmutableList.of(     ""org.junit.Rule"",     ""com.google.common.annotations.VisibleForTesting"" ); ```  but the ClassRule is not, even if it's the same principle.","closed","approved,","avano","2016-02-29T10:37:01Z","2016-03-03T15:53:33Z"
"","2027","Issue #1555: Use try-with-resources to close streams in test code","The issue was stream not being closed at all or closed, but not in finally block.  Fixes some `IOResource` inspection violations.  Description:  > Reports any I/O resource which is not safely closed in a finally block. Such resources may be inadvertently leaked if an exception is thrown before the resource is closed. I/O resources checked by this inspection include java.io.InputStream, java.io.OutputStream, java.io.Reader, java.io.Writer and java.io.RandomAccessFile. I/O resources which are wrapped by other I/O resources are not reported, as the wrapped resource will be closed by the wrapping resource.","closed","","mkordas","2015-08-30T09:03:09Z","2015-08-30T13:52:52Z"
"","2009","Issue #1555: Use try-with-resources in test code","The issue was stream not being closed at all or closed, but not in finally block.  Fixes some `IOResource` inspection violations.  Description:  > Reports any I/O resource which is not safely closed in a finally block. Such resources may be inadvertently leaked if an exception is thrown before the resource is closed. I/O resources checked by this inspection include java.io.InputStream, java.io.OutputStream, java.io.Reader, java.io.Writer and java.io.RandomAccessFile. I/O resources which are wrapped by other I/O resources are not reported, as the wrapped resource will be closed by the wrapping resource.","closed","","mkordas","2015-08-29T22:50:10Z","2015-08-30T00:50:19Z"
"","2415","IllegalTypeCheck ignores ""tokens"" configuration parameter","The IllegalTypeCheck ignores its ""token"" configuration parameter which implies that it always checks all scopes (parameter, variable, method return type) for illegal type compliance.  This bug implies that one cannot configure the IllegalType check to validate the public API of classes while having another set of rules for the class's internal state.   This - in turn - creates problems for entity classes using Date or Timestamp types where one would like a modern type representation externally (joda-time or JDK8 time API typically) but requires the internal representation for the JPA ORM types (i.e. internally one must rely on the old Calendar or Date types).","closed","approved,","lennartj","2015-10-22T08:26:27Z","2015-11-01T13:58:40Z"
"","2784","Cannot parse compilable statement written in unicode","The following method cannot be parsed by checkstyle. The code compiles and runs as expected using Java 1.8. This method is based on Puzzle 17 in Java Puzzlers by Bloch  ``` java     private static void runP17Huh() {         // the next line compiles to System.out.println(""Hello World"");         \u0053\u0079\u0073\u0074\u0065\u006d\u002e\u006f\u0075\u0074\u002e\u0070\u0072\u0069\u006e\u0074\u006c\u006e\u0028\u0022\u0048\u0065\u006c\u006c\u006f\u0020\u0057\u006f\u0072\u006c\u0064\u0022\u0029\u003b;     } ```  Here is the error  ``` Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing C:\Puzzlers\src\books\puzzlers\character\Main.java         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:282)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.processFiles(CheckstyleAntTask.java:362)         ... 18 more Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: TokenStreamRecognitionException occurred during the analysis of file C:\Puzzlers\src\books\puzzlers\character\Main.java.         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:198)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:80)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:266)         ... 19 more Caused by: C:\Puzzlers\src\books\puzzlers\character\Main.java:94:9: unexpected char: '\'         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaLexer.nextToken(GeneratedJavaLexer.java:405)         at antlr.TokenStreamHiddenTokenFilter.consume(TokenStreamHiddenTokenFilter.java:38)         at antlr.TokenStreamHiddenTokenFilter.nextToken(TokenStreamHiddenTokenFilter.java:148)         at antlr.TokenBuffer.fill(TokenBuffer.java:69)         at antlr.TokenBuffer.LA(TokenBuffer.java:80)         at antlr.LLkParser.LA(LLkParser.java:52)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.declaratorBrackets(GeneratedJavaRecognizer.java:3077)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3295)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:2542)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:633)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:555)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:388)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:201)         at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:453)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:185)         ... 21 more ```","closed","antlr,","pamcevoy","2015-12-29T21:30:22Z","2016-03-11T20:55:16Z"
"","2178","StringIndexOutOfBoundsException in JavadocStyleCheck","The following javadoc:  ``` java     /**      * .      */     public static void test() {     } ```  causes this exception:  Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: -1         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.trimTail(JavadocStyleCheck.java:315)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.getCommentText(JavadocStyleCheck.java:269)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.checkFirstSentenceEnding(JavadocStyleCheck.java:230)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.checkComment(JavadocStyleCheck.java:207)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.visitToken(JavadocStyleCheck.java:148)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:392)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:503)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:334)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:209)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:265)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.processFiles(CheckstyleAntTask.java:351)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.realExecute(CheckstyleAntTask.java:320)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.execute(CheckstyleAntTask.java:292)         at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)         at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)","closed","","ingeke","2015-09-14T09:58:52Z","2015-09-14T12:15:49Z"
"","2067","EmptyLineSeparator check does not validate newlines before class and after last method","The following input should cause two violations:  ``` java import java.util.Map;   class InputLineEmptiness { // two empy lines above     void a() {     } // two empty lines below   } ```  when the config is set to:  ``` xml      ```  but it doesn't raise any violation.  Generally this check validates if there is no more than one empty line _above_ some tokens. It works well when there are multiple unnecessary spaces above `import` or `package`. When the check reaches `class` declaration it also would validate lines above, but... - at line [EmptyLineSeparatorCheck.java#L214](https://github.com/checkstyle/checkstyle/blob/checkstyle-6.10.1/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java#L214) next sibling is obtained for `class` token and it is `null`, as there's noting else on the same level as this class in the file - because next sibling is `null` entire validation is skipped at line [EmptyLineSeparatorCheck.java#L216](https://github.com/checkstyle/checkstyle/blob/checkstyle-6.10.1/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java#L216)  The check also doesn't validate newlines after last method. To do that, check probably should also look _below_ elements, not only _above_.","closed","approved,","mkordas","2015-09-01T20:21:30Z","2016-02-26T14:22:37Z"
"","2195","Remove errors from Maven output in TokenTypesDocletTest","The following errors appear in logs after merge of #2158  ``` Running com.puppycrawl.tools.checkstyle.doclets.TokenTypesDocletTest : error - Usage: javadoc -destfile file -doclet TokenTypesDoclet ... : error - Only one -destfile option allowed. ```","closed","approved,","mkordas","2015-09-16T22:12:37Z","2015-09-18T13:37:20Z"
"","2762","Probable typo in com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck","The following code produces what seems to be an incorrect error message:  ``` public boolean doesParamCountMatch(String funcName, int paramCount) {     if (!PARAM_COUNT.containsKey(funcName)) {         return false;     }      if (funcName.equals(""now"")) { return (paramCount","closed","approved,","daytonwilliams-okta","2015-12-22T00:19:01Z","2016-02-21T14:26:52Z"
"","2029","New option in CyclomaticComplexityCheck: Treat SWITCH as single desicion point.","The Check should have an option to treat whole SWITCH as one desicion point and skip its CASE blocks. PMD already has rule with similar behaviour: [ModifiedCyclomaticComplexity](https://pmd.github.io/pmd-5.3.3/pmd-java/rules/java/codesize.html#ModifiedCyclomaticComplexity)","closed","approved,","baratali","2015-08-30T11:41:56Z","2015-09-03T12:53:03Z"
"","2031","Option 'ignoreMethods' is useless in DeclarationOrderCheck","The Check has hardcoded order of class members: 1. Static fields 2. Instance fields 3. Constructors 4 .Methods  The Check warns on class member (i.e. constructor) if something with **bigger index** has been met earlier (i.e. method).  Purpose of ignore\* option is to ignore related violation, however it still impacts on other class members.  [Example how ignores work](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java#L64)  Method has the biggest index, therefore it's impossible to have ""something with bigger index above"". As we can't get any violations for method definition, it is useless to have **ignoreMethods** option.","closed","approved,","baratali","2015-08-30T13:59:12Z","2015-08-30T16:35:29Z"
"","2694","AbbreviationAsWordInName incorrectly reports constants in annotations","The `AbbreviationAsWordInNameCheck` doesn't view attributes defined in annotations to be constants:  The `SampleAnnotation.java` source:  ``` java public @interface SampleAnnotation {     String NAME = ""SampleAnnotation""; } ```  Checkstyle config:  ``` xml                                              ```  Output:  ``` $ java -jar checkstyle-6.13-all.jar -c config.xml SampleAnnotation.java Starting audit... /Users/athielke/Development/checkstyle-issue/SampleAnnotation.java:2: error: Abbreviation in name must contain no more than '1' capital letters. Audit done. Checkstyle ends with 1 errors. ```  Since the `ignoreFinal` and `ignoreStatic` default to `true`, I would expect this usage to not raise any errors.","closed","approved,","athielke","2015-12-14T14:57:25Z","2015-12-14T20:31:12Z"
"","2191","Resovle unstability of SuppressionsLoaderTest.testLoadFromURL","That test fail too much and demand manual relaunch from admins.  https://travis-ci.org/checkstyle/checkstyle/jobs/80531821#L724  ```     @Test     public void testLoadFromURL() throws Exception {         boolean online = isInternetReachable();         Assume.assumeTrue(online); ```  assumption return false - build is failed. We need to skip a test if we are not online. Please also update Test to try to download it from github location if sourceforge is not available.","closed","high demand,","romani","2015-09-16T00:09:17Z","2015-09-26T00:45:19Z"
"","2428","remove dependency to commons-lang3 library","That task is good for somebody who want to start contribution to Checkstyle  https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L214  we need to remove that dependency, as right now we depend only util fields of that library, we could copy them to our [CommonUtils.java](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java) class. Dependency should be removed.","closed","miscellaneous,","romani","2015-10-23T18:21:12Z","2016-03-20T22:53:24Z"
"","2200","POM still references nexus.codehaus.org repo","That repo is already gone with all other Codehaus services. Remove that repo, it causes some build exceptions.","closed","approved,","michael-o","2015-09-18T06:06:46Z","2015-09-18T13:09:28Z"
"","2807","FinalLocalVariable doesn't report variable when condition separates 2 assignments","TestClass.java  ``` package test;  public class TestClass {     public void test() {         final boolean b = true;         int a;          if (b) {             a = 1;         }         else {             a = 2;         }          System.out.println(a);     }      public void test2() {         final int b = 10;         int a;          switch (b) {         case 0:             a = 1;             break;         default:             a = 2;             break;         }          System.out.println(a);     } } ```  config.xml  ```                                         ```  output from: `java -jar checkstyle-6.14.1-all.jar -c config.xml TestClass.java`  ``` Starting audit... Audit done. ```  Expected output:  ``` Starting audit... [ERROR] D:\Rickys\Java\EclipseStuff\checkstyle\src\main\java\test\TestClass.java:6:9: Variable 'a' should be declared final. [FinalLocalVariable] [ERROR] D:\Rickys\Java\EclipseStuff\checkstyle\src\main\java\test\TestClass.java:20:9: Variable 'a' should be declared final. [FinalLocalVariable] Audit done. Checkstyle ends with 2 errors. ```  Variable `a` can be declared `final` because it is only assigned once based on the result of `b`. The compiler has no issues with it actually being `final` so checkstyle should report these instances.","closed","approved,","rnveach","2016-01-07T13:55:57Z","2016-01-24T14:37:13Z"
"","2827","JavadocMethod doesn't report anonymous class methods","TestClass.java  ``` package test;  public class TestClass {     public static final MyClass myField = new MyClass() {         @Override         public void start(Object parent) {         }          @Override         public void end(Object parent) {         }     }; } ```  config.xml  ```                                                                                                                   ```  output from: `java -jar checkstyle-6.14.1-all.jar -c config.xml TestClass.java`  ``` Starting audit... Audit done. ```  Expected output:  ``` Starting audit... [ERROR] TestClass.java:6:9: Missing a Javadoc comment. [JavadocMethod] [ERROR] TestClass.java:10:9: Missing a Javadoc comment. [JavadocMethod] Audit done. Checkstyle ends with 2 errors. ```  JavadocMethod should validate all methods, including methods of anonymous classes. ##","open","easy,","rnveach","2016-01-16T02:14:44Z","2020-12-14T06:42:12Z"
"","2810","Feature to have JavadocMethod validate parameter order","TestClass.java  ``` package test;  public class TestClass {     /**      * Description.      *       * @param p2      *            Parameter 2 desc.      * @param p1      *            Parameter 1 desc.      * @param       *            Parameter T desc.      * @param p3      *            Parameter 3 desc.      */     public  void test(String p1, String p2, T p3) {     } } ```  config.xml  ```                                                                            ```  output from: `java -jar checkstyle-6.14.1-all.jar -c config.xml TestClass.java`  ``` Starting audit... Audit done. ```  To add less confusion between the javadoc order and the method when reading, I would like the at parameters to be validated in the javadoc so they both agree in terms of order. This will give new readers less headaches as they try to read and understand the method and what it's parameters mean.  With this new feature, I am expecting the javadocs for parameters 1 and T to produce errors that they are out of order in my example. If 2 and/or 3 produce errors that is fine, but I expect the main ones that go backwards in the list to definitely be there. The preferred order, imo, should be T, 1, 2, 3 like they are defined in the method definition. ##","closed","new feature,","rnveach","2016-01-08T18:25:48Z","2020-11-14T23:49:43Z"
"","2806","JavadocMethod: allowedAnnotations hides bad javadocs","TestClass.java  ``` package test;  public class TestClass {     /**      * Description.      *       * @param BAD      *            This param doesn't exist.      */     @Override     public void test() {     } } ```  config.xml  ```                                                                                         ```  output from: `java -jar checkstyle-6.14.1-all.jar -c config.xml TestClass.java`  ``` Starting audit... Audit done. ```  Expected output (seen if `allowedAnnotations` is set to an empty string)  ``` Starting audit... [ERROR] D:\Rickys\Java\EclipseStuff\checkstyle\src\main\java\test\TestClass.java:7:8: Unused @param tag for 'BAD'. [JavadocMethod] Audit done. Checkstyle ends with 1 errors. ```  This is an issue because it is basically hiding badly designed javadocs from being reported. If the user writes the javadoc, it should always be examined regardless of annotations, number of statements. IMO, the only things that should prevent a javadoc from being examined from this check is tokens, scope/excludeScope, and possibly ignoreMethodNamesRegex.  http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod `List of annotations that could allow missed documentation.` The documentation states `could allow missed`, it doesn't state that the javadoc will be completely ignored.","closed","javadoc,","rnveach","2016-01-07T03:47:59Z","2016-01-28T13:25:57Z"
"","2833","NoLineWrap rule : false-positive on annotations with CLASS_DEF,METHOD_DEF (6.12.1)","TestClass.java  ``` package test;  @MyClassAnnotation public class TestClass {      @MyMethodAnnotation     String method() {     } } ```  config.xml  ```                      ```  We get false-positive defects on annotations when using NoLineWrap rule with CLASS_DEF,METHOD_DEF   This issue was detected using CheckStyle 6.12.1.","closed","","lautou","2016-01-18T15:27:33Z","2016-01-19T14:34:45Z"
"","2812","Javadocs don't report invalid at clauses for specific types","TestClass.java  ``` package test;  /**  * TestClass.  *   * @return This doesn't exist.  * @throws Exception  *             This doesn't exist.  */ public class TestClass {     /**      * field.      *       * @return This doesn't exist.      * @param BAD      *            This doesn't exist.      * @throws Exception      *             This doesn't exist.      */     public String field; } ```  config.xml  ```                                                                                              ```  output from: `java -jar checkstyle-6.14.1-all.jar -c config.xml TestClass.java`  ``` Starting audit... Audit done. ```  Expected output:  ``` Starting audit... [ERROR] TestClass.java:6:4: Invalid 'return' tag for 'TestClass'. [ERROR] TestClass.java:7:4: Invalid 'throws' tag for 'TestClass'. [ERROR] TestClass.java:14:8: Invalid 'return' tag for 'field'. [ERROR] TestClass.java:15:8: Invalid 'param' tag for 'field'. [ERROR] TestClass.java:17:8: Invalid 'throws' tag for 'field'. Audit done. Checkstyle ends with 1 errors. ```  None of the current Javadoc Checks report issues where invalid tags are used for specific types. Classes and fields don't throw exceptions or return data, only methods do, and fields can't have params (as far as I am aware). ##","open","javadoc,","rnveach","2016-01-08T19:03:35Z","2017-09-02T22:23:59Z"
"","2811","JavadocType doesn't report unused param tag","TestClass.java  ``` package test;  /**  * TestClass.  *   * @param BAD  *            This doesn't exist.  */ public class TestClass {     public void test() {     } } ```  config.xml  ```                                                               ```  output from: `java -jar checkstyle-6.14.1-all.jar -c config.xml TestClass.java`  ``` Starting audit... Audit done. ```  Expected output:  ``` Starting audit... [ERROR] D:\Rickys\Java\EclipseStuff\checkstyle\src\main\java\test\TestClass.java:6:4: Unused @param tag for 'BAD'. [JavadocType] Audit done. Checkstyle ends with 1 errors. ```  JavadocType should validate that if a param is defined, that it is used in the class definition so the 2 stay in synch. JavadocMethod will report unused params, so Type should follow suite.  Just as a note, class parameters are used by generic classes. (Ex: ArrayList<T>, T is considered the parameter)","closed","javadoc,","rnveach","2016-01-08T18:44:48Z","2016-02-09T15:24:48Z"
"","2504","Issue #1267: validate existence of config file sooner","Test config location the same way we read the file in ""ConfigurationLoader.loadConfiguration"", so unlikely we will have false missing file.  **Questions**: Do we still need complicated Test of testing if config can be found in JAR? From written code, I assume the jar file name will have to be updated each release. Also won't running a maven command while in a maven test break something? https://github.com/Bhavik3/checkstyle/commit/5369f353d5f7dd9086e4e5f109c731c48b0e5e4e#diff-9cb7b23a8bfd6d92a3a35bdba7bac261R360  I assume we still need IT. I couldn't find any ""Main"" examples in IT currently, so I will need some guidance on what folder it should be in.","closed","","rnveach","2015-11-02T01:50:29Z","2015-11-03T21:41:14Z"
"","2327","ModifiedControlVariableCheck: NPE when SuppressWarnings is used","Test case:  ``` /var/tmp $ cat 3.java  package test; public class Test {     public String foo(String request) {         List list;         for (String eventDataType : list) {              String eventDataHandler = """";             if (eventDataHandler != null) {                 try {                     @SuppressWarnings(value = ""unchecked"")                     String eventData;                  } catch (Exception e) {                     // no smth                 }              }         }          return """";     } }  /var/tmp $ cat config.xml                   /var/tmp $ java -jar checkstyle-6.11.2-all.jar -c config.xml   3.java Exception in thread ""main"" java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.coding.ModifiedControlVariableCheck.checkIdent(ModifiedControlVariableCheck.java:278)     at com.puppycrawl.tools.checkstyle.checks.coding.ModifiedControlVariableCheck.visitToken(ModifiedControlVariableCheck.java:199)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:388)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:499)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:330)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:203)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:265)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:277)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:118) ```","closed","approved,","clausfod","2015-10-12T10:02:08Z","2015-11-01T23:56:22Z"
"","2941","Indentation check reports some incorrect indentation levels on errors","Taken from PR #2934  If indentation expects a line to be at position `X,Y` then we should report `X,Y` not `A,B`. Error messages aren't reporting the correct indentations in specific scenarios. The users either are given the wrong indentation levels in the error message than what we are checking for, or are missing a level of acceptable indentation.  **Change 1 is in `BlockParentHandler.checkLCurly`**: https://github.com/checkstyle/checkstyle/blob/617ebf2bf27d284dcc7b866f85439fcf6dab3402/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java#L165 The code is verifying indentation against `curlyIndent()` but if it is not acceptable, the error being reported is based on `getIndent()`. The difference between the 2 is the amount of `braceAdjustment`. There are no tests that currently showcase this (probably because we use a `braceAdjustment` of 0), but I found this while looking into a different indentation issue. As an example, the user will see expected indentation of `4,8,12` but we are actually checking against `8,12,16` (if `braceAdjustment` is 4). I can provide a real example if it is needed.  **Change 2 is in `ObjectBlockHandler.checkRCurly`**: https://github.com/checkstyle/checkstyle/blob/617ebf2bf27d284dcc7b866f85439fcf6dab3402/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ObjectBlockHandler.java#L99 The code is verifying indentation against a custom variable `level` but if it is not acceptable, the error being reported is based on `curlyIndent()`. The difference between the 2 is pretty big, as `level` has `braceAdjustment` plus a new acceptable indentation of `level's first indentation + lineWrappingIndentation`. This is seen in the tests as a new indentation level is displayed in the error message. **Test**: https://github.com/rnveach/checkstyle/commit/7a73706f3b452898dcee34c377c0008fed7fe563#diff-88d68aaf0963249939255684219c43b1R781 **Code**: https://github.com/checkstyle/checkstyle/blob/0ac6fe40394082ddecdfb1919754ac81413f8045/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidArrayInitIndent.java#L40 `curlyIndent()` is always 4, adding the `lineWrappingIndentation` to it, which is a value of 4, always produces the value of 8. So the acceptable indentations are 4 and 8 in the tests, and not just 4.  CLI Report:  ``` $ cat TestClass.java public class Test {     int[] array4 = new int[]   {             1,             2,             3     };      public void method() {         Class1 var =                 new Class1(                     new Class2(                         new Class3() { }));     } }  $ cat TestConfig.xml                                               $ java -jar checkstyle-6.15-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:3: 'array initialization lcurly' have incorrect indentation level 2, expected level should be 4. [Indentation] [ERROR] TestClass.java:14: 'object def rcurly' have incorrect indentation level 0, expected level should be one of the following: 16, 20. [Indentation] Audit done. Checkstyle ends with 2 errors. ```  First error says ""4"", when it should be ""4, 12"". Second error says ""16, 20"", when it should be ""16, 20, 24"".","closed","approved,","rnveach","2016-02-19T03:35:21Z","2016-02-20T01:03:17Z"
"","2518","add extra lines to checkstyle_checks.xml","taken from issues in #2500   We should add fluff lines (empty lines) to each module in checkstyle_checks.xml so we have room to expand our checks with new options and comments without having to redo the XDOC each time. This will also have the added benefit of making the modules stand out more when the user clicks the link as the modules will be separated and not scrunched together.","closed","approved,","rnveach","2015-11-03T14:35:32Z","2015-11-06T01:44:54Z"
"","2517","update xdoc validator to validate checkstyle_checks.xml line numbers","taken from #2500  We need a validation to keep xdoc links and checkstyle_checks.xml and other configs line numbers in sync.  we also need to control lines of ""config"" link at http://checkstyle.sourceforge.net/google_style.html","closed","miscellaneous,","rnveach","2015-11-03T14:29:55Z","2015-11-24T23:19:34Z"
"","2355","Issue #2161: unify test input locations for javadoc package","take 2","closed","","rnveach","2015-10-14T23:58:12Z","2017-08-03T22:54:49Z"
"","2479","Issue #2451: removed excess hierarchy from SuppressWarningsCheck","SuppressWarningsCheck now extends Check. Fields and setters copied from AbstractFormatCheck, with minor modifications. Fixed javadocs with class packages in them or needed in them.","closed","","rnveach","2015-10-30T17:13:42Z","2015-10-31T05:14:35Z"
"","2502","Deploy checkstyle-X.X-SNAPSHOT-all.jar to some public binaries repo","subtasked from #2167.  Note: most users need generation of ""checkstyle-X.X-all.jar"" , but it is hosted only at soureforge, we need to automate generation-deploy of it to https://bintray.com/ (or any other)   Another alternative is to use - https://jitpack.io/  (#7232 might be related)","open","deploy,","romani","2015-11-01T14:24:06Z","2020-01-29T19:53:15Z"
"","2547","Issue #2546: added new check RegexpOnFilenameCheck","Start of Check. No documentation until requirements are confirmed.  **Properties**: match:  true/false. report matching or mismatching of folders and/or files by Patern, default is matching folderPattern: regular expression. folder pattern to use, default is all folders regardless of match fileNamePattern: regular expression. file name pattern to use, default is all files regardless of match  All properties are optional. If none are set, fileNamePattern defaults to ""\s"" and ""match"" defaults to true.  **Explanation**: 1) If users don't specify a file or folder pattern, it defaults to looking for spaces in file names of all folders.  2) If users don't specify a folder pattern, all files using the file name pattern is matched against. If a file matches the pattern and match is true, it will report the file. If a file doesn't match the pattern and match is false, it will report the file. Like the original example, this can be used for preventing file extensions anywhere: ""{0} must be in PNG format, not GIF.""  ``` Example: Match all GIF files match = true fileNamePattern = "".*\\.gif"" ```  3) If users don't specify a file pattern, all folders using the folder pattern is matched against. If a folder matches the pattern and match is true, it will report all files in the folder. If a folder doesn't match the pattern and match is false, it will report all files in the folder. This wasn't in the original example. This can be used to for prevent folder names, folders from appearing in certain locations, or files in a specific folder.  ``` Example: Match all files that are in a directory with an uppercase letter match = true folderPattern = ""[A-Z]"" ```  4) If the users specify a folder and a file pattern: A) All folders are looking for a match. (No mismatching allowed like without fileNamePattern) B) If the folder matches, all files follow its normal matching/mismatching rules.  Like the original example, this can be used for requiring files in specific folders or specific names.  ``` Example: Match all files in resource directory that don't start with ""Input"". (CS case) match = false folderPattern = ""[\\/]src[\\/]\\w+[\\/]resources[\\/]"" fileNamePattern = ""^Input"" ```  For A):  I was originally going to go with its default way of matching/mismatching, but I am not sure if this made it too confusing to understand and I'm not sure I can come up with a valid use. Let me know if I should re-implement it.  ``` Example: Match all non-properties files not in a ""resource"" directory.  match = false folderPattern = ""[\\/]resource[\\/]"" fileNamePattern = ""^.*\\.properties$"" ```  With the way the code is implemented now, it matches all non-properties files in ""resource"" directories.  **Changes**:  > targetFolderPattern   I renamed this to folderPattern to match fileNamePattern's name, since they are so similar.  **Other**: Any ideas for a default message for ""regexp.filepath.match"" and ""regexp.filepath.mismatch""? Original forum has ""File {0} does not match '{1}' pattern"", which sorta works if we combine file pattern and folder pattern in ""{1}"".","closed","","rnveach","2015-11-06T22:44:46Z","2016-01-30T14:02:59Z"
"","2866","pre-validation FileFilters  concept in Checkstyle","splited from #2103   For me, the second scan produces around 13,000 files. After some examining, CS isn't pre-dropping these files based on my suppressions or even the file extensions specified. Here, https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Main.java#L378, it only does a plain scan picking everything up in its path. For me, these folders alone are needlessly being deep scanned for 11,000 files that will never be checked.","closed","new feature,","romani","2016-02-02T14:55:55Z","2016-10-23T05:42:30Z"
"","2963","minor: refactored LineWrappingHandler","Split from PR #2951. Lets merge this first and work backwards.  This is set as minor because I am expecting no changes to the user, besides possible speed improvements. Changes to `LineWrappingHandler`: - It is now more a utility class. It only takes `IndentationCheck` on instance, so it is more connected to `IndentationCheck` and requires us to only make one instance, instead of an instance for every AST. - Every call to `checkIndentation` now takes the nodes to examine as parameters instead of being stuck to the instance. We never called this method more than once on one instance, so I found the connection to the instance was pointless.  Regression to come, unless its not needed.","closed","","rnveach","2016-02-24T03:03:30Z","2016-02-24T13:56:02Z"
"","2419","Consider moving Custom Checks of Tim Tyler","SourceForge feature requests have a lot of reference to project  http://timtyler.org/checkstyle/ where bunch of custom Checks are implemented.  One we get out of moratorium period for new Checks, we need to review them and try to merge to main project. ##","closed","new module,","romani","2015-10-22T13:53:51Z","2018-03-26T18:07:59Z"
"","2431","LeftCurly: add Anonymous class to allowed tokens","source: https://groups.google.com/forum/#!topic/checkstyle/9yBBV_dQxOM  Solution is to add OBJBLOCK token to allowed Tokens.  ![screenshot-objblock](https://cloud.githubusercontent.com/assets/812984/10710392/e4a41138-7a0d-11e5-8052-435415c4b175.png)  ``` /var/tmp $ cat 4.xml                         /var/tmp $ cat 4.java  public class StrictDuplicateCodeTest {  public void test() {   Thread t = new Thread(new Runnable() { //","closed","approved,","romani","2015-10-24T12:12:36Z","2015-10-24T13:03:41Z"
"","2287","Issue #46: duplicated static method has been extracted to utils class.","Source files should not have any duplicated blocksю","closed","","sabaka","2015-10-08T20:26:16Z","2015-10-14T21:11:32Z"
"","2365","Issue #2161: unify test input locations for blocks package","Sorry if this is a little on the big side, most of the files are intertwined.  InputBraces.java was copied. InputSemantic.java, InputScopeInnerInterfaces.java, InputCatchOnly.java was copied and then trimmed down for the test. InputRightCurlyAnnotations.java had an annotation removed that was in another package.","closed","","rnveach","2015-10-16T22:34:20Z","2015-10-17T20:25:21Z"
"","2074","CopyPasted ITs","Some ITs are just copies of [NoFinalizerTest](https://github.com/checkstyle/checkstyle/blob/master/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/NoFinalizerTest.java): [SummaryJavadocTest](https://github.com/checkstyle/checkstyle/blob/master/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java) [AtclauseOrderTest](https://github.com/checkstyle/checkstyle/blob/master/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/AtclauseOrderTest.java) [JavadocTagContinuationIndentationTest](https://github.com/checkstyle/checkstyle/blob/master/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/JavadocTagContinuationIndentationTest.java) [NonEmptyAtclauseDescriptionTest](https://github.com/checkstyle/checkstyle/blob/master/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java)","closed","approved,","Vladlis","2015-09-02T08:30:09Z","2015-09-21T13:32:17Z"
"","2553","Issue #2161: unify it input file names for chapter3filestructure","Some files were numbered higher than 1, but had no starting 1. So I either renamed them to a lower number or removed the number.  **Comments** IT's find input file is interesting. We just give it a file name, and it searches all directories and returns the first file it finds. It is not restricted to a specific directory, and I found instances of 2 files with the same name in different directories that are exact copies of each other. Because of the find process, this is hiding one and making it unused. The 2 files are `LineLengthInput2` and `EmptyLineSeparatorInput`. I left them where they are with their new names in case this is done on purpose.","closed","","rnveach","2015-11-08T02:30:49Z","2015-11-08T15:25:14Z"
"","2881","Issue #2880 - fixing non-compilable java 8 code","Some commits and code could use some fixing, but this gets the basic idea across. Mostly opening this to ask for help on specific areas by making comments on them.  Travis failure is only from Java 8 code that is failing to compile. Current count is 13 errors in 6 files.  I made a new folder, resource-java8, to hold all compilable java8 code. I thought this was better then building a black list of all the files in noncompilable to not copy over for compiling.","closed","","rnveach","2016-02-07T05:51:09Z","2016-02-13T20:52:31Z"
"","2943","New check for ""Explicit type argument can be replaced with ""","So this:  ``` java Map EMPTY_MAP = Collections.unmodifiableMap(new HashMap()); ```  Becomes:  ``` java Map EMPTY_MAP = Collections.unmodifiableMap(new HashMap()); ``` ##","open","approved,","mmoayyed","2016-02-19T08:36:50Z","2018-10-18T12:46:13Z"
"","2159","fileExtensions is skipped by maven-checkstyle-plugin","So I wanted to add checkstyle to build process.  I used second example from this page https://maven.apache.org/plugins/maven-checkstyle-plugin/usage.html and linked with https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/sun_checks.xml  When typing `mvn validate' I got error  ``` o: Failed during checkstyle configuration: Property 'fileExtensions' in module Checker does not exist, please check the documentation ```  If I'm right the given message is not what I see https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/sun_checks.xml#L42 but anyway I removed this line and then build goes on.  Then I found that properties files are scanned as well so I've added  ```  ```  to plugin configuration in pom.xml but it did not help.  So what makes me worry is that given message is not very helpful (specially if you see that it complains about entity that is already defined). Second is that I don't know to scan only java files.","closed","","damianszczepanik","2015-09-11T20:02:52Z","2015-09-18T17:00:39Z"
"","2173","Issue #2129: Remove some non-maven output from test launches","SLF4J Simple Binding is enough for test purposes and does not require any configuration.","closed","","mkordas","2015-09-12T21:48:33Z","2015-09-13T23:33:08Z"
"","2168","Issue #2108: Split all modules to be separate at config_naming.html","Site after changes - http://vladlis.github.io/reports/site/config_naming.html","closed","","Vladlis","2015-09-12T14:14:46Z","2015-09-15T21:16:54Z"
"","2526","organize checkstyle_checks.xml","Since we removed our reliance on actual line numbers in links, we can now organize checkstyle_checks.xml however we want.  We should have all Checker checks on top, TreeWalker should always be last. Each check should be grouped by package with a comment on the package above it. Each group of package should then ordered by check name alphabetically like we do on the ""config_XXXXX.html"".","closed","miscellaneous,","rnveach","2015-11-04T16:59:58Z","2015-11-24T22:59:11Z"
"","2497","Issue #2451: isolated check methods","since we are splitting the heirachy of checks making them more standalone and not intertwined, there isn't much reason for methods of checks to be public when possible.","closed","","rnveach","2015-11-01T03:24:31Z","2015-11-01T13:15:12Z"
"","2973","Strive for 100% line coverage for java grammar","Since we added code coverage on the Java grammar in PR #2970 ( [pom.xml#L1800-L1809](https://github.com/checkstyle/checkstyle/blob/6bcc84946bd9a463b56774a2f86f5e45c40c1ee5/pom.xml#L1800-L1809)), we should try to increase the Lexer and the Recognizer's coverage to 100% line coverage so we know we are covering it all. ##","closed","miscellaneous,","rnveach","2016-02-26T17:41:30Z","2021-11-14T23:54:14Z"
"","2064","contradictory checks require final and no final","Since using the Eclipse Checkstyle plugin 6.9 (previously 6.8) we have some findings where 2 checks contradict each other: - ""Redundant modifiers"" requires to remove the final declaration - ""Final class"" requires to add it.  sample code  ``` package checkstyleissue;  /**  * interface  */ interface BugReproduction {     /**      * inner class with final constructors only - 2 different checks require the class to be final and without final      */     class InnerClass {          private InnerClass() {         }      } }  ```","closed","approved,","Bananeweizen","2015-09-01T09:16:29Z","2015-09-03T18:12:33Z"
"","2886","Changed semantics of PropertyExpander","Since this change https://github.com/checkstyle/checkstyle/commit/7d513f0 the property expander does not resolved default properties stored in passed properties.","closed","approved,","phejl","2016-02-08T12:00:39Z","2016-02-16T14:51:53Z"
"","2600","Using Eclipse compiler in CI to control 0 Warning level","Since it is not a regular Static Code Analysis tool, but a compiler I will need to investigate a way to show compiler warning/errors in the build flow. I will start from the checking this stackoverflow thread. If it will be too challenging to add it to the build we could just launch it by some command in CI.  Review and provide some shell instructions for Travis or Appveyor. http://stackoverflow.com/questions/14198977/using-eclipse-compiler-in-jenkins-to-get-compiler-warnings-errors  we already have this for IntelijIdea IDE, so  keeping Eclipse's warning to 0 by CI is also good idea.   The full list of available inspections you can find [here](https://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftask-using_batch_compiler.htm).","closed","miscellaneous,","romani","2015-11-13T02:11:34Z","2017-09-02T18:05:00Z"
"","2203","RedundantModifier check incorrectly rejects final, abstract modifiers of classes nested in interfaces","Since 6.9, the RedundantModifier check incorrectly rejects final, abstract modifiers of classes nested in interfaces.  Example that fails the check:  ``` java package test;  /**  * Test.  */ public interface Test {      /**      * Class 1.      */     final class Foo {     }      /**      * Class 2.      */     abstract class Bah {     } } ```  gives  ``` % mvn checkstyle:check [INFO] Scanning for projects... [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building RedundantModifierTest 0.0.1-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO]  [INFO] --- maven-checkstyle-plugin:2.15:check (default-cli) @ RedundantModifierTest --- [WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent! [INFO] There are 2 errors reported by Checkstyle 6.10.1 with config/sun_checks.xml ruleset. [ERROR] src/main/java/test/Test.java[11:5] (modifier) RedundantModifier: Redundant 'final' modifier. [ERROR] src/main/java/test/Test.java[17:5] (modifier) RedundantModifier: Redundant 'abstract' modifier. ```","closed","approved,","philipa","2015-09-18T12:55:23Z","2015-09-20T12:50:47Z"
"","2631","Performance issue in UnusedImportsCheck","Significant amount of time is taken by pattern compilation while analysing Javadoc: ![image](https://cloud.githubusercontent.com/assets/5467276/11285089/0be76cc6-8f0e-11e5-9901-e8853d320bc7.png) Check could be made faster by compiling patterns used in `JavadocUtils` only once.","closed","approved,","mkordas","2015-11-19T21:38:05Z","2015-12-21T14:32:01Z"
"","2730","Issue #2661: Enforce SingleSpaceSeparatorCheck of sevntu-checkstyle over Checkstyle source code","Should be merged after https://github.com/checkstyle/checkstyle/pull/2725","closed","","MEZk","2015-12-17T20:32:28Z","2015-12-18T18:07:33Z"
"","2732","Issue #2661: Enforce AvoidNotShortCircuitOperatorsForBoolean of sevntu-checkstyle over Checkstyle source code","Should be merged after #2725","closed","","MEZk","2015-12-17T21:18:51Z","2015-12-18T18:06:49Z"
"","2731","Issue #2661: Enforce llegalCatchExtendedCheck of sevntu-checkstyle over Checkstyle source code","Should be merged after #2725","closed","","MEZk","2015-12-17T20:54:38Z","2015-12-18T18:07:25Z"
"","2981","FinalParameters should not warn for non-final parameters of native methods","SForge request: 468  Created: 2007-07-28 Creator: Albert Strasheim Private: No  With the ""FinalParameters"" check turned on, the following method declaration:  `private native void foo(int bar);`  generates a warning: Parameter bar should be final  As far as I can figure, having final here serves no useful purpose here. This is similar to the abstract method case, which doesn't generate a warning:  `protected abstract void bar(int baz);`  ``` /var/tmp $ javac TestClass.java  /var/tmp $ cat TestClass.java  public class TestClass {      private native void foo(int bar); }  /var/tmp $ cat Test.xml                          /var/tmp $ java -jar checkstyle-6.16-SNAPSHOT-all.jar -c Test.xml TestClass.java Starting audit... [ERROR] /var/tmp/TestClass.java:3:33: Parameter bar should be final. [FinalParameters] Audit done. Checkstyle ends with 1 errors. ```","closed","approved,","romani","2016-02-28T00:24:00Z","2016-03-03T15:53:39Z"
"","2979","CLI: Ability To Suppress Checks By Severity From Command Line","SForge Issue: 577   Created: 2011-08-23 Creator: Anonymous  When using Checkstyle in a development environment, there are many extra checks that I provide to the development team to encourage positive coding habits. These checks may be complex/expensive but are run locally so the load is distributed. When integrating the same Checkstyle integration into our SCM, we now have one central location running these set of checks fairly often. I would like to maintain only one version of the Checkstyle.xml file, but to be able to not run any checks below a certain severity threshold. The goal here would be to only run checks that can report errors as that is what blocks a code commit, and to not run the checks that produce warnings or info messages, as no one will be reading them. ##","open","","romani","2016-02-27T00:39:52Z","2016-12-14T18:16:48Z"
"","2982","new Check: commented code","SForge issue: 453  Created: 2007-03-07 Creator: caucabin Private: No  In source code ,always see like this code:  ``` // int size = p_steps.size(); // for (int i = 0; i < size; i++)   final int size = p_steps.size();  for (int i = 0; i < size; i++) ```  The comment part is a history source code, we can get the history code from the version control tool, and don't want to see it in the code.  This already done in Sonar - http://www.sonarqube.org/commented-out-code-eradication-with-sonar/. We should think about this. ##","open","new module,","romani","2016-02-28T00:53:12Z","2018-03-26T14:51:27Z"
"","2613","Issue #2451: removed excess hierarchy from SeparatorWrapCheck","SeparatorWrapCheck now extends Check. Copied methods and fields from abstract. Added test for missing coverage.","closed","","rnveach","2015-11-17T11:42:18Z","2015-11-17T14:19:53Z"
"","2193","Several integration tests fail if locale is non-English","See:  ``` [INFO] [INFO] --- xml-maven-plugin:1.0:validate (default) @ checkstyle --- [INFO] [INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ checkstyle --- [INFO] Building jar: D:\Projekte\checkstyle\target\checkstyle-6.11-SNAPSHOT.jar [INFO] [INFO] --- maven-jar-plugin:2.6:test-jar (default) @ checkstyle --- [INFO] Building jar: D:\Projekte\checkstyle\target\checkstyle-6.11-SNAPSHOT-tests.jar [INFO] [INFO] --- maven-failsafe-plugin:2.18.1:integration-test (integration-test) @ checkstyle --- [INFO] Failsafe report directory: D:\Projekte\checkstyle\target\failsafe-reports  -------------------------------------------------------  T E S T S ------------------------------------------------------- Running com.google.checkstyle.test.base.ConfigValidationTest Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 30.297 sec - in com.google.checkstyle.test.base.ConfigValidationTest Running com.google.checkstyle.test.chapter2filebasic.rule21filename.OuterTypeFilenameTest Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.391 sec  but was: but was:   CustomImportOrderTest.customImportTest_2:74->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   OneTopLevelClassTest.bad2Test:71->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   OneTopLevelClassTest.bad3Test:89->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   OneTopLevelClassTest.badTest:42->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   OverloadMethodsDeclarationOrderTest.overloadMethodsTest:39->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   EmptyLineSeparatorTest.emptyLineSeparatorTest:43->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   NeedBracesTest.needBracesTest:73->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   LeftCurlyRightCurlyTest.leftCurlyAnnotationsTest:65->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   LeftCurlyRightCurlyTest.leftCurlyBracesTest:47->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   LeftCurlyRightCurlyTest.leftCurlyMethodsTest:93->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   LeftCurlyRightCurlyTest.rightCurlyTestAlone:112->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   EmptyBlockTest.emptyBlockTest:65->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   EmptyBlockTest.emptyBlockTestCatch:81->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   EmptyCatchBlockTest.emptyBlockTestCatch:37->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   EmptyCatchBlockTest.testViolationsByComment:66->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   EmptyCatchBlockTest.testViolationsByVariableName:83->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   OneStatementPerLineTest.oneStatementNonCompilableInputTest:73->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   OneStatementPerLineTest.oneStatementTest:55->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   LineLengthTest.lineLengthTest:40->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   MethodParamPadTest.operatorWrapTest:37->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   OperatorWrapTest.operatorWrapTest:56->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   OperatorWrapTest.operatorWrapTestAssign:109->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   SeparatorWrapTest.separatorWrapTest:33->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   EmptyLineSeparatorTest.emptyLineSeparatorTest:43->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   MultipleVariableDeclarationsTest.multipleVariableDeclarationsTest:55->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   VariableDeclarationUsageDistanceTest.arrayTypeStyleTest:39->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   ArrayTypeStyleTest.arrayTypeStyleTest:40->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   FallThroughTest.fallThroughTest:46->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   MissingSwitchDefaultTest.missingSwitchDefaultTest:40->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   AnnotationLocationTest.annotationTest:48->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   CommentsIndentationTest.commentsIndentationTest:39->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   ModifierOrderTest.modifierOrderTest:89->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   UpperEllTest.upperEllTest:55->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   AbbreviationAsWordInNameTest.abbreviationAsWordInNameTest:47->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   EmptyBlockTest.emptyBlockTestCatch:35->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   NoFinalizerTest.noFinalizerBasicTest:35->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   NoFinalizerTest.noFinalizerExtendedTest:59->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   SingleLineJavadocTest.singleLineJavadocTest:43->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   JavadocParagraphTest.javadocParagraphIncorrectTest:79->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   AtclauseOrderTest.testIncorrect:71->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected:   JavadocTagContinuationIndentationTest.testWithDefaultConfiguration:39->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   NonEmptyAtclauseDescriptionTest.testDefaultConfiguration:45->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   NonEmptyAtclauseDescriptionTest.testSpaceSequence:65->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   SummaryJavadocTest.testIncorrect:55->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:   JavadocMethodTest.javadocMethodTest:35->BaseCheckTestSupport.verify:80->BaseCheckTestSupport.verify:95->BaseCheckTestSupport.verify:121 error message 0 expected: but was:  Tests run: 91, Failures: 54, Errors: 0, Skipped: 0 ```","closed","high demand,","michael-o","2015-09-16T11:15:07Z","2015-09-20T18:26:09Z"
"","2838","WhitespaceAround should have an option allow double-brace initialization","See following snippet  ``` $ javac Fail.java  $ cat Fail.java import java.util.Properties;  public class Fail {     public Fail() {         new Properties() {{             setProperty(""double curly braces"", ""are not a style error"");         }};     } }  $ cat fail.xml                          $ java -jar checkstyle-6.14.1-all.jar -c ./fail.xml Fail.java Starting audit... [ERROR] /home/tboiko/dev/tmp/checkstyle/Fail.java:5:27: '{' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/tboiko/dev/tmp/checkstyle/Fail.java:5:27: '{' is not preceded with whitespace. [WhitespaceAround] [ERROR] /home/tboiko/dev/tmp/checkstyle/Fail.java:7:10: '}' is not followed by whitespace. [WhitespaceAround] [ERROR] /home/tboiko/dev/tmp/checkstyle/Fail.java:7:10: '}' is not preceded with whitespace. [WhitespaceAround] Audit done. Checkstyle ends with 4 errors ```  As this is a common pattern it would be nice to not raise an error by checkstyle.  Expected - either no error or at least an option to ignore those kind of errors.  As a side note - it would be nice to have that link in README.","closed","approved,","kilotaras","2016-01-22T09:36:45Z","2022-02-11T16:39:41Z"
"","2493","Issue #2451: removed excess hierarchy from MutableExceptionCheck","Same as the rest.","closed","","rnveach","2015-10-31T22:41:24Z","2015-11-01T13:18:06Z"
"","2562","Issue 2451 removed excess hierarchy from NestedTryDepthCheckTest and deprecated AbstractNestedDepthCheck","same as the others + the deprecation","closed","","rnveach","2015-11-09T13:52:06Z","2015-11-09T23:34:16Z"
"","2634","Issue #2080: Fix or suppress ErrorRethrown rule violations","Rule description:  > Reports try statements which catch java.lang.Error or any subclass and which do not rethrow the error. Statements which catch java.lang.ThreadDeath are not reported by this inspection.  This PR connects to #2080.","closed","","mkordas","2015-11-20T22:35:43Z","2015-11-20T22:49:04Z"
"","2596","Issue #2451: removed excess hierarchy from RightCurlyCheck","RightCurlyCheck now extends Check. Copied methods from abstract. Added test for missing coverage.","closed","","rnveach","2015-11-12T22:15:32Z","2015-11-13T03:22:55Z"
"","2658","Make validation of expected warnings in integration tests more strict","Right now when making assertions in integration tests, only unexpected warnings are reported: https://github.com/mkordas/checkstyle/blob/914246dd2db0b4209642876727a319120005434f/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java#L149  This means that test will fail when line has comment `// warn`, but there is no warning in that line.  However, tests will not fail, if the line with warning does not have `// warn` comment. This means that additional assertion should be added - verify that all expected warnings have proper comments.","closed","miscellaneous,","mkordas","2015-12-03T21:45:46Z","2015-12-06T23:59:01Z"
"","2619","Use Nexus Staging Maven Plugin for release process","Right now we have manual step to press ""Close"" and ""Release"" in Sonatype site to make a release. This could be automated: https://github.com/sonatype/nexus-maven-plugins/blob/master/staging/maven-plugin/README.md https://solidsoft.wordpress.com/2015/03/24/automatic-promotion-of-artifacts-to-maven-central-from-gradle/  Example: https://github.com/kentyeh/springJdbiArch/blob/d59eafc66eec4f19ea11e9694911576a434344c0/profiles.xml","closed","miscellaneous,","romani","2015-11-18T14:16:45Z","2015-12-28T16:04:42Z"
"","2666","Print name of the Check after printing violation message","right now we have format like:  ``` ~/Test1.java:5: warning: Uncommented main method found. ```  it is not clear what Module/Check producing this, it is more actual to naming Checks where format of message is the same for several Check. User do not clearly see what Check config should be adjusted and what Check to search in web documentation , ..... .   PMD has format: PMD Failure: com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.java:31 Rule:ExcessiveClassLength Priority:3 Avoid really long classes..  Findbugs format: com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheck$UniqueProperties doesn't override java.util.Hashtable.equals(Object) [com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheck$UniqueProperties] At UniquePropertiesCheck.java:[line 1] EQ_DOESNT_OVERRIDE_EQUALS  should be like (one of) (I am in favour of first or second ):  ``` ~/Test1.java:5: Check:UncommentedMain warning: Uncommented main method found. ~/Test1.java:5: warning: UncommentedMain: Uncommented main method found.  ~/Test1.java:5: warning: [UncommentedMain] Uncommented main method found. ~/Test1.java:5: warning: Uncommented main method found. [UncommentedMain] ```","closed","new feature,","romani","2015-12-05T13:44:21Z","2015-12-25T22:59:31Z"
"","2519","remove xdoc link reliance on master","Right now the links in XDOCs point straight to master. Example: https://github.com/checkstyle/checkstyle/blob/c10d886b139e2d92cca65a14b9b63fb126ea3d1c/src/xdocs/config_javadoc.xml#L989  ``` https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L268 ```  This creates issues after a release when the file keeps getting updated and causes the links to point to the wrong location.","closed","miscellaneous,","rnveach","2015-11-03T18:02:33Z","2015-11-24T22:59:29Z"
"","2929","Enforce metioning issue in PR description to create links","Right now GitHub does not create link between issue and PR, when issue is referenced just from PR title, and it is not easy to quickly see from issue all pull requests where issue was implemented.  The solution for it, adopted in many projects, is to provide link to issue somewhere in PR description, for example: #### `#1 Short PR title`  ``` More detailed explanatory text.  Further paragraphs come after blank lines.  Resolves: #1 See also: #2, #3 ```  Such approach, would guarantee great traceability in both directions between PR and issue. We can start enforcing it straight away by editing descriptions or asking authors to do that, but ideally it would be great to automate that.  My proposition is to create additional test that would basically do three tasks: - get issue number (let's say `#1`) from the latest commit (or just pass if there is no issue number) - read PR description through GitHub API or any other way - the simpler the better - make assertion that description contains at least one occurrence of `#1`","closed","approved,","mkordas","2016-02-17T17:58:51Z","2016-02-18T00:39:40Z"
"","2485","Issue #2451: removed excess hierarchy from ReturnCountCheck","ReturnCountCheck now extends Check. Copied fields and setter from AbstractFormatCheck. DEFAULT_MAX was removed since it was only used once.","closed","","rnveach","2015-10-31T14:00:21Z","2015-10-31T22:36:26Z"
"","2120","Issue #46: loops should not have more then one break or continue statement","Restricting the number of break and continue statements in a loop is done in the interest of good structured programming.  One break and continue statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.","closed","","sabaka","2015-09-05T11:00:38Z","2015-09-11T00:41:03Z"
"","2105","Issue #46: loops should not contain more then one break.","Restricting the number of break and continue statements in a loop is done in the interest of good structured programming.  One break and continue statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.","closed","","sabaka","2015-09-04T00:31:33Z","2015-09-05T10:20:21Z"
"","2025","Issue #46. Loops should not contain more than a single 'break' or 'continue' statement","Restricting the number of break and continue statements in a loop is done in the interest of good structured programming.  One break and continue statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.","closed","","sabaka","2015-08-29T23:51:40Z","2017-06-07T10:03:56Z"
"","2345","Issue #2161: unify test input locations","rest of import package","closed","","rnveach","2015-10-12T20:07:19Z","2015-10-16T22:18:54Z"
"","2544","Issue 2451: removed excess hierarchy from RequireThisCheck","RequireThisCheck was the only one using AbstractDeclarationCollector, so all fields/methods were copied. Since the abstract class had some overrides, they had to be duplicated for RequireThisCheck.","closed","","rnveach","2015-11-06T20:48:55Z","2015-11-08T01:25:13Z"
"","2623","xdoc: added verification of google/sun checks in config","Requested by mkordas from #2616.  If a xdoc specifies google/sun, then it must appear in the google/sun configuration file.  I'm not happy about the new suppression, but I didn't want to pass the new list around as a parameter or recreate it ever new file/section.  `getCheckStyleChecksReferencedInConfig` throws was changed because of the requirements of ThrowsCountCheck on the method being changed to public.  I plan to make a new issue to re-organize the internal tests.","closed","","rnveach","2015-11-18T16:38:30Z","2015-12-08T14:12:46Z"
"","2681","[New check]  Check for confusion between assignment and comparison","Requested at https://sourceforge.net/p/checkstyle/feature-requests/539/  **Consider implementing a new check to avoid confusion between assignment and comparison.**  Examples:  ``` java class Test {     void foo() {         boolean a = false;         if (a = true) { } // violation (assign in a control statement condition)     } } ```  As was discussed at https://github.com/checkstyle/checkstyle/issues/2507 it is impossible to cover the issue with DescendantToken.","closed","wontfix,","MEZk","2015-12-08T20:19:24Z","2015-12-08T20:41:36Z"
"","2167","Deploy snapshot version of checkstyle to public maven repository","request: https://github.com/checkstyle/checkstyle/issues/1369#issuecomment-125867116 and a lot of other users.  It will be so good to let Travis deploy to Maven snapshot repo ready to use jar file.  Note: most users need generation of ""checkstyle-X.X-all.jar"" , but it is hosted only at soureforge, we need to automate generation-deploy of it to https://bintray.com/  We will not build binaries for PRs, for security reasons, only approved and reviewed code will be hosted as binary at official location. Example: User can send by request malicious code and binary file will be hosted on official location.  Users can always do build themself - https://github.com/checkstyle/checkstyle/wiki/Build-all-jars-and-generate-maven-site , Travis is controlling that Linux, MacOs, Windows builds can be done for each commit.","closed","approved,","romani","2015-09-12T14:10:22Z","2015-11-01T14:24:39Z"
"","2091","Issue #1903: Fixed NPE in MutableExceptionCheck.isExtendedClassNamedAsException .","Reports: http://mezk.github.io  Reports before and after are equal.","closed","","MEZk","2015-09-03T11:47:59Z","2015-09-03T17:45:04Z"
"","2791","Issue #2729: Support of arrays in java8 method references has been added to grammar.","Reports with line length check (https://github.com/sabaka/contribution/blob/own_config/checkstyle-tester/my_check.xml) On projects: https://github.com/sabaka/contribution/blob/own_config/checkstyle-tester/projects-to-test-on.properties origin: http://sabaka.github.io/issue2729/master/checkstyle.html after changes: http://sabaka.github.io/issue2729/checkstyle.html","closed","","sabaka","2015-12-31T01:39:37Z","2016-03-07T00:28:43Z"
"","2084","Issue #1530: Detect nested enums marked as static in RedundantModifier check","Reports show no regression - https://vladlis.github.io/ For now I've only checked a few new violations, which appeared to be correct.","closed","","Vladlis","2015-09-03T00:41:47Z","2015-09-03T16:33:09Z"
"","2179","Issue #2095: Fix false negative in AtclauseOrder check","Reports over guava with google config of the check [before](http://vladlis.github.io/reports/atclauseorder/before/) and [after](http://vladlis.github.io/reports/atclauseorder/after/) changes are identical.","closed","","Vladlis","2015-09-14T11:58:18Z","2015-09-24T14:55:37Z"
"","2252","Issue #1290: Coverage has been increased to 100% in SuppressWarningsHolder.","Reports are identical before changes: http://sabaka.github.io/SuppressWarningHolder/master/checkstyle.html after changes: http://sabaka.github.io/SuppressWarningHolder/checkstyle.html","closed","","sabaka","2015-10-01T01:08:49Z","2015-10-05T22:16:21Z"
"","2563","Issue #2067: Fix false-negatives in EmptyLineSeparatorCheck","Report against CS, Sevntu-CS, Guava, pmd, Orekit: http://vladlis.github.io/reports/emptyLine/  The report looks OK, I've confirmed about a half of violations","closed","","Vladlis","2015-11-10T00:04:57Z","2015-11-12T13:28:04Z"
"","2529","Issue #2526: reorganized checkstyle_checks.xml","reorganized modules by package and then by class. Added package comments to show where package separation is.  Fixed old URL at the top.  Included #2518 and added extra blank line. I added 2 for each module. I can reduce this if you want. I didn't add extra lines between 2 of the same modules. Even though we don't have direct line links anymore, some separation is good to make it easier to see where a module starts and ends.","closed","","rnveach","2015-11-04T21:08:51Z","2015-11-05T19:21:46Z"
"","2557","UT to validate google/sun style xdocs","Renaming package names from #2556 made links in the style documentation invalid since they weren't updated. Some links for ""config"" are invalid from #2519 because they have ""Check"" in their name and we don't write ""Check"" in our configuration files. Some check names displayed end with ""Check"", others don't. Same with test classes, some have ""Check"" others don't. Some tests have 2 checks combined into one, while others have them separated.","closed","miscellaneous,","rnveach","2015-11-08T21:10:00Z","2015-11-27T01:27:05Z"
"","2663","minor: renamed suggestedChildLevel to more natural name","renamed suggestedChildLevel to getSuggestedChildLevel. It is a getter and even some methods that call it, like getLevelImpl, are getters.","closed","","rnveach","2015-12-04T18:43:27Z","2015-12-05T15:42:33Z"
"","2664","minor: renaming indentation methods to more natural name","renamed startsLine to isOnStartOfLine. boolean methods should start with 'is'. Even the javadoc for the method says 'is at the start of a line'.","closed","","rnveach","2015-12-04T18:51:53Z","2015-12-16T16:02:38Z"
"","2483","Issue #2482: Exclude lines with package in LineLength check","Renamed IMPORT_PATTERN to IGNORE_PATTERN.","closed","","rnveach","2015-10-31T03:41:37Z","2015-10-31T05:22:53Z"
"","2675","minor: renaming indentation methods to more natural name","Renamed `checkSingleLine` to `checkLineIndent`. The method that calls this is called `checkLinesIndent` and it calls `checkSingleLine` for each line, so to me it makes sense to make this method the singular form of its parent.","closed","","rnveach","2015-12-08T01:38:51Z","2015-12-08T14:12:22Z"
"","2521","Issue 2517 2519","Removed some duplicates in regexp.  **New Requirements:** Removed xml restriction in usage section, now section can only contain certain words. Added URL validation for links in usage section.","closed","","rnveach","2015-11-04T03:35:28Z","2015-11-04T18:02:05Z"
"","2463","Issue #2453: removed xdoc of CustomImportOrder.samePackageMatchingDepth","removed documentation of samePackageMatchingDepth and override in unit test.","closed","","rnveach","2015-10-28T17:17:23Z","2015-10-29T01:48:54Z"
"","2227","doc: Remove 'url' option from ImportControl xdoc","Removed description of 'url' option, since ImportControl does not have the option.","closed","","MEZk","2015-09-23T17:52:17Z","2015-09-25T15:29:39Z"
"","2429","Issue #2421: enabled line length for test folder","Removed all line length suppressions, and only suppressed lines that are common to have long ""import static"". If this isn't acceptable, please specify where I should break the imports on.","closed","","rnveach","2015-10-24T00:31:01Z","2015-10-24T03:08:47Z"
"","2586","Pull #2586: Update slf4j-simple to 1.7.13","Release notes: - Fixed LoggerFactory initialisation problem in presence of SecurityManager denying ""createSecurityManager"" runtime permission. See SLF4J-324 for further details. - Fixed issue with BasicMDCAdapter leaking MDC information to non-child threads. This problem was reported by Lukasz Cwik in SLF4J-316 who also provided the relavant pull request. - More robust handling of ill-formatted input strings by SLF4JBridgeHandler. This issue was reported in SLF4J-337 by Rodolfo Udo Labsch. - House cleaning of our project's Maven pom.xml files, an initiative undertaken by Jeremy Landis. - Added getAdditivity() method method in Category class in the log4j-over-slf4j module. This addition was requested by Milo Felipe SLF4J-309 with Dimitrios Liapis providing the    relavant pull request. - Added the assertLog(boolean, String) method in the Category class, in module log4j-over-slf4j. - In the log4j-over-slf4j module, removed misplaced Layout.java file. This issue was reported in SLF4J-218 by Joshua M Steward with Alfredo Ramos providing the relavant pull    request.","closed","miscellaneous,","mkordas","2015-11-12T09:56:33Z","2015-11-19T22:56:32Z"
"","2063","create separate web page for old release notes","release notes page is too big, and people do not need old releases. we needto create release_notes_old.html and put there all releases that older then 5.8 release.","closed","approved,","romani","2015-09-01T06:01:42Z","2015-09-03T17:53:53Z"
"","2183","Pull #2183: Update Maven Wagon to 2.10","Release Notes - Maven Wagon - Version 2.10 - [WAGON-413] Private Key authentication is no longer working with   wagon-ssh-2.6 - [WAGON-440]  wagon-ssh not able to handle JSch interactive mode","closed","","mkordas","2015-09-14T21:18:16Z","2015-09-15T22:21:13Z"
"","2464","Pull #2464: Update Maven Shade Plugin to 2.4.2","Release Notes - Apache Maven Shade Plugin  Version 2.4.2  https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12317921&version=12333008  Bugs: - [MSHADE-172] - ""java.lang.ArithmeticException: / by zero"" in MinijarFilter - [MSHADE-190] - Shade does not relocate the contents of META-INF/services files - [MSHADE-209] - [REGRESSION] ""java.lang.ArithmeticException: / by zero"" in MinijarFilter (reporter Jon McLean).  Improvements: - [MSHADE-205] - Better use of ClazzpathUnit for improved jar minimization (contribution of Benoit Perrot). - [MSHADE-207] - Replace wrong link to codehaus with correct location - [MSHADE-210] - Upgrade maven-plugins parent to version 28. - [MSHADE-211] - Keep Java 1.5","closed","","mkordas","2015-10-29T08:50:32Z","2015-10-29T12:44:30Z"
"","2182","Pull #2182: Update Maven Project Info Reports Plugin to 2.8.1","Release Notes - Apache Maven Project Info Reports Plugin - Version 2.8.1  Bug - [MPIR-300] Reporting plugins are reported with wrong version if version   specified via pluginManagement  Improvement - [MPIR-329] French translation in project-info-report_fr.properties  Task - [MPIR-333] switch to Fluido - [MPIR-332] don't warn when removing path from git scm url","closed","","mkordas","2015-09-14T21:14:32Z","2015-09-15T22:20:16Z"
"","2276","Adding ""all"" warning key in SuppressWarningsHolder","Related to the issue #2275, this pull request provides the code for supporting the `""all""` argument to `@SuppressWarnings` annotations.","closed","","gallandarakhneorg","2015-10-07T09:23:31Z","2015-10-08T13:47:18Z"
"","2470","Issue #2451: removed excess hierarchy from RegexpCheck","RegexpCheck now extends Check. Fields and setters copied from AbstractFormatCheck, with minor modifications.  **Minor changes:** Created new CommonUtils.createPattern for setting flags. Fixed minor errors in javadoc.","closed","","rnveach","2015-10-30T00:39:36Z","2017-08-28T10:17:50Z"
"","2258","Documentation: NoWhiteSpaceAfter, WhiteSpaceAround do not list GENERIC_START and GENERIC_END as acceptable token","Regarding issue #2219, documentation of both NoWhiteSpaceAfter and WhiteSpaceAround are missing new tokens GENERIC_START and GENERIC_END from the list of acceptable tokens.","closed","approved,","lkoe","2015-10-03T17:31:49Z","2015-10-03T23:45:21Z"
"","2259","Documentation: NoWhiteSpaceBefore does not list COMMA as acceptable token","Regarding changes from #2089, the change is not reflected in the documentation, as token COMMA is missing from the list of acceptable tokens.","closed","approved,","lkoe","2015-10-03T17:38:12Z","2015-10-03T23:44:22Z"
"","2285","Checkstyle internal exceptions lack contextual information","Referencing bug #2284 this seems to indicate more general issue.  The ""new"" error handling in Checkstyle (bubble exceptions up to the caller) is not yet ideal. Although the stacktrace is now available in eclipses error log, there is no contextual information on the exception, e.g. file (and possibly AST location).  This makes it very hard currently to track down the source file and location which caused the internal exception.  Checkstyle should possible catch all unhandled exception first (e.g. at TreeWalker/Checker level) and rethrow as a new CheckstyleException(?) adding the needed additional info.  This way both the full stacktrace as well as the source location can be available for troubleshooting.","closed","approved,","lkoe","2015-10-08T18:16:21Z","2016-02-16T21:24:41Z"
"","2271","Fix all issues for Java found by Codacy static analysis tool","Recently Codacy added support for Java analysis. All issues from https://www.codacy.com/app/checkstyle/checkstyle/issues should be analyzed and fixed or suppressed in their GUI.  Github integration could give us ability to use it during PR verification - https://support.codacy.com/hc/en-us/articles/207280219-GitHub","closed","miscellaneous,","mkordas","2015-10-05T20:21:46Z","2016-04-27T13:41:24Z"
"","2433","LineLength: skip imports lines from validation","Raised by https://github.com/checkstyle/checkstyle/pull/2429 Long packages names and static import of long constants.  ""imports"" are not possible to line-wrap so LineLength should skip them from validation. Special option is not required for this, Javadoc/Xdoc should be updated.  On completion, suppression for tests should be removed.","closed","approved,","romani","2015-10-24T12:33:49Z","2021-05-10T18:43:11Z"
"","2442","UTs for Xdoc validation of package subsection","Raised by @rnveach ,  https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_annotation.xml#L604 This is the 'package' section for 'AnnotationLocation'. It says ""com.puppycrawl.tools.checkstyle.checks"" but the check is located in ""com.puppycrawl.tools.checkstyle.checks.annotation"". The display should always be the check's package location, right?  So we need UT to validate ""package"" subsection.","closed","approved,","romani","2015-10-25T17:45:23Z","2015-11-06T01:45:58Z"
"","2482","LineLength: skip package lines from validation","raised by #2433  we skip imports with long lines, we should do the same for packages. Special option is not required for this, Javadoc/Xdoc should be updated.","closed","","rnveach","2015-10-31T01:37:49Z","2015-10-31T13:09:26Z"
"","2142","Issue #2141: Allow @return tags from annotation types","Provides a fix for #2141 and updates test cases.","closed","","philwebb","2015-09-08T05:39:19Z","2015-09-08T14:15:33Z"
"","2160","Use Error Prone tool to detect issues with code during compile time","Project GitHub: https://github.com/google/error-prone Documentation: http://errorprone.info  Integration with Checkstyle should be straightforward. We just need to invoke compiler second time for input files without Error Prone. ##","open","approved,","mkordas","2015-09-11T20:33:41Z","2020-11-29T11:54:33Z"
"","2587","Resolve nemo.sonarqube.org UTs coverage problem","Problem: http://nemo.sonarqube.org/dashboard/index?id=com.puppycrawl.tools%3Acheckstyle  ``` Unit Tests Coverage  - ```  Problem details: https://groups.google.com/d/msgid/sonarqube/98939a88-af9c-4975-b5d6-59deaaf03bc6%40googlegroups.com?utm_medium=email&utm_source=footer  should be controlled by : https://github.com/checkstyle/checkstyle/blob/master/.travis.yml#L58","closed","approved,","romani","2015-11-12T14:10:14Z","2015-11-16T14:33:07Z"
"","2163","Issue #809: Rearrange POM to use canonical ordering","Problem was found by Maven Tidy Plugin, which is currently disabled in the build.","closed","","mkordas","2015-09-11T21:39:39Z","2015-09-11T23:31:59Z"
"","2443","UT to validate tokens option in Check Xdoc","problem was found and fixed https://github.com/checkstyle/checkstyle/commit/edd8b1222205f82f8bfa4e87b9eda9472f4811ef  We need UT to make sure we will never make another problem like this, validate getDefaultTokens and getAcceptableTokens. We skip reference in xdoc if acceptable==default==required.","closed","approved,","romani","2015-10-25T17:47:17Z","2015-10-28T13:05:24Z"
"","2329","Javadoc is not parsed correctly in files with only CR newlines","Printing the javadoc tree by using the [JavadocTreePrinter](https://github.com/checkstyle/contribution/blob/d3b74a1ae272ba15bd6a913c7686f1fcb2ec7622/javadoc-tree-serializer/JavadocTreePrinter.java) from the contribution repository for the checkstyle test file [InputNewlineCrAtEndOfFile.java](https://github.com/checkstyle/checkstyle/blob/aaf606ee0268f140c3694baba4c13b03f7839522/src/test/resources/com/puppycrawl/tools/checkstyle/InputNewlineCrAtEndOfFile.java) will print following tree:  ``` |--TEXT[7x0] : [\r * Test case for detection of an existing CR newline at EOF, using the \r * NewlineAtEndOfFileCheck.\r * @author Martin Steiger\r *] |--EOF[7x129] : [] ```  If a file is using just CR line endings, newlines or tokens in the javadoc won't be detected. Replacing all CR by LF in the file will print the correct javacdoc tree:  ``` |--NEWLINE[7x0] : [\n] |--LEADING_ASTERISK[8x0] : [ *] |--TEXT[8x2] : [ Test case for detection of an existing CR newline at EOF, using the ] |--NEWLINE[8x71] : [\n] |--LEADING_ASTERISK[9x0] : [ *] |--TEXT[9x2] : [ NewlineAtEndOfFileCheck.] |--NEWLINE[9x27] : [\n] |--LEADING_ASTERISK[10x0] : [ *] |--WS[10x2] : [ ] |--JAVADOC_TAG[10x3] : [@author Martin Steiger\n *]     |--AUTHOR_LITERAL[10x3] : [@author]     |--WS[10x10] : [ ]     |--DESCRIPTION[10x11] : [Martin Steiger\n *]         |--TEXT[10x11] : [Martin Steiger]         |--NEWLINE[10x25] : [\n]         |--LEADING_ASTERISK[11x0] : [ *] |--EOF[11x2] : [] ```  Replacing all CR by Windows line endings CR+LF also does work correctly:  ``` |--NEWLINE[7x0] : [\r\n] |--LEADING_ASTERISK[8x0] : [ *] ... ``` ##","closed","antlr,","robertwhitebit","2015-10-12T12:45:41Z","2021-06-27T16:48:40Z"
"","2450","Issue #2442: adding xdoc check validation","preview of xdoc check validation. no fixes here, will be in separate commit. shouldn't be merged until then. use reflection alot here.  **Added the following requirements:** All sections shouldn't end with 'Check'. All sections should be able to be instantiated. All sub-sections should follow the order: Description, Properties (optional), Examples, Example of Usage, Package, Parent Module Following sub-sections can be out of order and optional: Notes, Rule Description, Use Case  Package must be the check's package location. Parent Module must be TreeWalker if it extends Check, otherwise must be Checker. Properties is optional, but must exist if there is a bean to be documented, or its tokens should be documented. (default != acceptable != required)  **Still to implement:** If tokens property is displayed, all tokens must be displayed for type (acceptable) and default value.  @romani  **Questions:** 1) Should 'Description' sub-section forbid source tags? I feel descriptions should be text only for simplicity. We should have a different section for code examples. 2) Should 'Examples' sub-section show all properties in atleast one example? Exlude tokens? 3) When I build the list of properties, I am going through all sub-classes. Some sub-classes have a property, while the main class sets it to a specific value. Right now these aren't document but could be set for any random reason, so I am making a list of ""undocumented"" beans for this. This sound ok? You can see my current list in the code. 4) Any other requirements you want me to add?","closed","","rnveach","2015-10-26T01:18:48Z","2015-10-28T12:51:53Z"
"","2081","Issue #2063: Create separate web page for old release notes","Please, take a look at the site after the changes here: http://vladlis.github.io/reports/site/","closed","","Vladlis","2015-09-02T22:17:16Z","2015-09-04T12:56:01Z"
"","2354","Issue #2161: unify test input locations for metrics package","please verify changes to MainTest. It was dependent on the metrics directory and it's messages changed when the files moved around.","closed","","rnveach","2015-10-14T22:29:24Z","2015-10-15T00:55:46Z"
"","2418","Issue #2161: unify test input file names","Pass 2 of input renames.  Since we are going with prefix names, we need to remove ""Check"" and ""Test"" from the end of the input file name to prevent confusion with the actual check/test.  Since some files have similar names and don't end with check/test, Ex 1: ""XyzCheck"" and ""XyzCheck2"" Ex 2: ""AbcCheck"" and ""AbcCheckComplex"" I ended up removing any check/test found in the file name, not just on the end.","closed","","rnveach","2015-10-22T13:10:03Z","2015-10-22T20:58:24Z"
"","2407","Issue #2161: unify test input file names","pass 1 of file renames.  Test resource file names should start with ""Input"". If I renamed a file, I also remove ""Check"" and ""Test"" from the end of its name to prevent confusion with the actual Check and Test files. Pass 2 will be more aggressive with this. I did not rename ""com.puppycrawl.tools.checkstyle.checks.design.InetSocketAddress"" as a test requires it to have the same class name as ""java.net.InetSocketAddress"".  Fixed package name identified and reported in Issue #2406, which is line 216 of VisibilityModifierCheckTest.","closed","","rnveach","2015-10-21T15:54:58Z","2015-10-22T13:11:28Z"
"","2325","Issue #957: Cleanup package-private methods","Part 1","closed","","mkordas","2015-10-11T22:35:26Z","2015-10-14T21:41:02Z"
"","2642","Fix ParseTreeBuilder's variable names to be more readable","ParseTreeBuilder class is used for build testing parse trees for unit tests. It has generated source code and a lot of wierd variable names.","closed","miscellaneous,","baratali","2015-11-22T13:08:05Z","2015-12-03T03:36:58Z"
"","2865","Issue #1184: fixed custom javadoc inline tags","Parser had incorrect `+` and needed `*`.  The test `testCustomTag` was written incorrectly, and was expecting errors on all custom tags. The check must be changed from `TempCheck` to something valid because `getDefaultJavadocTokens` returns null and this will throw an exception on valid javadocs. I changed the check to `SingleLineJavadocCheck` since that is what the original issue reported on.","closed","","rnveach","2016-02-02T02:41:06Z","2016-02-05T13:35:28Z"
"","2124","Issue #1555: Tune down inspection for overridden parameter names","ParameterNameDiffersFromOverriddenParameter does not require parameters to match names anymore if method is from external library and parameter may be wrongly named there.","closed","","mkordas","2015-09-05T21:08:11Z","2015-09-05T22:16:03Z"
"","2777","site: make a link to google_checks.xml versioned","page: http://checkstyle.sourceforge.net/google_style.html  link https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml is directed to latest version but not latest released version that cause problem as new Check could be introduced not not released yet  link should be https://github.com/checkstyle/checkstyle/blob/checkstyle-6.13/src/main/resources/google_checks.xml, master ==> checkstyle-X.XX ##","closed","approved,","romani","2015-12-26T15:50:36Z","2017-02-09T20:29:39Z"
"","2469","Issue #2451: removed excess hierarchy from PackageNameCheck","PackageNameCheck now extends Check. Fields and setters copied from AbstractFormatCheck.  **Minor changes**: Error property moved to MSG_KEY constant. Fixed minor errors in javadoc.","closed","","rnveach","2015-10-29T22:54:03Z","2015-10-30T00:33:36Z"
"","2392","Issue #2161: unify test input locations for comments package","Package was moved from ""com.puppycrawl.tools.checkstyle.comments"" to ""com.puppycrawl.tools.checkstyle.grammars.comments"".  checks pass, but please verify my new AST creation for any mistakes. I did not add new comments in the inputs, as I felt they weren't needed.","closed","","rnveach","2015-10-20T01:42:36Z","2015-10-20T11:03:37Z"
"","2251","Translation Check: wrong support for resources with language, country, variant","Original problem: SForge: 433 Creator: Tom Cunningham  Created: 2006-06-13   Translation check doesn't support filenames that contain the character ""_"" other than within the language/country/variant - for example: home_errors_en.properties resolves to basename ""home"" ( expected ""home_errors""), home_messages_en.properties resolves to basename ""home"" (expected  ""home_messages"")  Properties consept: https://docs.oracle.com/javase/tutorial/i18n/resbundle/concept.html ""The characters following the base name indicate the language code, country code, and variant"" https://docs.oracle.com/javase/tutorial/i18n/resbundle/propfile.html ""The name of this file begins with the base name of your ResourceBundle and ends with the .properties suffix."" https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html  Incorrectly implemented features: https://github.com/checkstyle/checkstyle/pull/149 that damage concept of resources pasring by delimiter (we need to revert this feature, if we will not find way to reuse ""variant"" for default resource)  Related comments: https://github.com/checkstyle/checkstyle/pull/2177#issuecomment-141797761 and https://github.com/checkstyle/checkstyle/pull/2177#issuecomment-141840685","closed","approved,","romani","2015-10-01T00:57:10Z","2016-02-16T20:30:54Z"
"","2612","Issue #2451: removed excess hierarchy from OperatorWrapCheck","OperatorWrapCheck now extends Check. Copied methods and fields from abstract. Added test for missing coverage.","closed","","rnveach","2015-11-17T11:39:41Z","2015-11-17T14:19:46Z"
"","2910","Issue 2904: identifying super clone check","Open discussion on how to fix InputSuperClone to be compilable by java 8 and appease the code coverage requirements for the check. Comments on check showcase where the issues are in the input and the code coverage.  CC = code coverage","closed","","rnveach","2016-02-13T21:51:54Z","2016-02-16T14:15:01Z"
"","2375","Issue #2161: remove unused input files for indentation package","Only unused inputs","closed","","rnveach","2015-10-17T20:07:54Z","2015-10-18T13:45:20Z"
"","2926","Issue #410: Web-page about writing Javadoc Checks","Only headers","closed","","baratali","2016-02-17T00:53:25Z","2016-02-17T13:47:46Z"
"","2455","Issue #2421: removed unneeded suppressions","Once this is merged, I feel we are done with this issue.  No violations found. Removed ""Generated[a-zA-Z]*.java"" suppression since those files are not in the ""src"" directory, so there should be no conflict.","closed","","rnveach","2015-10-26T22:38:13Z","2017-08-22T12:19:55Z"
"","2601","Checkstyle throws NumberFormatException on Japanese locale when sizes and metrics Checks are used","On Japanese, CheckStyle throws NumberFormatException. Because some 'message_ja.properties' has invalid format elements.","closed","approved,","e-taka","2015-11-13T23:58:41Z","2015-11-24T19:28:19Z"
"","2986","HeaderCheck: should have property to skip package-info.java","Old issue: [https://sourceforge.net/p/checkstyle/feature-requests/444/](url)  _package-info.java_ is not a regular Java source file.  http://java.sun.com/javase/6/docs/technotes/tools/solaris/javadoc.html#packagecomment http://java.sun.com/docs/books/jls/third_edition/html/packages.html#97374 http://www.onjava.com/pub/a/onjava/2004/04/21/declarative.html?page=last  It should therefore be not checked for a file header: http://checkstyle.sourceforge.net/config_header.html  **Note:** Java 9's _Java Module Declaration_ file _module-info.java_ might need a similar treatment: http://openjdk.java.net/projects/jigsaw/doc/lang-vm.html#jigsaw-1.2 ##   @romani Issue description comment update: ``` ➜ cat package-info.java   package com.puppycrawl.tools.checkstyle.checks.header.header;  ``` Before: ``` ➜ cat config.xml                        ➜ java -jar checkstyle-8.29-all.jar -c config.xml package-info.java Starting audit... [ERROR] /tmp/package-info.java:1: Line does not match expected header line of 'example'. [Header] Audit done. Checkstyle ends with 1 errors.  ```","closed","","sdavids","2016-02-28T08:58:26Z","2020-04-04T23:14:57Z"
"","2224","minor: Exclude OBJBLOCK from acceptable tokens of VisibilityModifier","OBJBLOCK was excluded form acceptable tokens of VisibilityModifier since it was not used during parsing at all. See [visitToken](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java#L423). The only occurrence of OBJBLOCK was in [isAnonymousClassVariable](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java#L444).","closed","","MEZk","2015-09-23T08:19:53Z","2015-09-25T15:30:31Z"
"","2621","Issue 2451: removed excess hierarchy from NPathComplexityCheck and deprecated AbstractComplexityCheck","NPathComplexityCheck now extends Check. Copied methods and fields from abstract class. Removed `getMessageID`, `leaveTokenHook`, and `visitTokenHook`. Streamlined `getCurrentValue` and `setCurrentValue` to just use the field directly.  Deprecated AbstractComplexityCheck.","closed","","rnveach","2015-11-18T15:16:17Z","2015-11-19T15:11:21Z"
"","2465","Wrong behaviour of processing token type ARRAY_DECLARATOR in NoWhitespaceAfterCheck","NoWhitespaceAfterCheck will generate warning if subject token has no whitespace after it. This behavious is correct for all token types but ARRAY_DECLARATOR and INDEX_OP, for which it is checked that there is no whitespace before it. So processing of token types ARRAY_DECLARATOR and INDEX_OP should be separated from the check. Example from  the unit test cases.       Object[] someStuff = {}; //Correct     Object [] someStuff1 = {}; //Incorrect     Object someStuff2[] = {}; //Correct     Object someStuff3 [] = {}; //Incorrect     int [] a = {}; //Incorrect     String s [] = {}; //Incorrect     double d [] = {}; //Incorrect   ##","closed","approved,","attatrol","2015-10-29T12:50:35Z","2017-03-03T23:06:19Z"
"","2144","Doc: examles order for DescedantTokenCheck has been changed.","Now it should be clearer what for this check is from the first example.","closed","","sabaka","2015-09-09T00:33:19Z","2015-09-11T00:40:10Z"
"","2693","Issue #2609: Repair CodeSelector in GUI","Now it seems to be OK, but when the GUI is started one needs to select some text manually firstly, and only then the selector works. It's very strange behaviour. Maybe someone more experienced in `swing` can give me a tip? @romani @mkordas @MEZk @rnveach","closed","","Vladlis","2015-12-13T11:58:11Z","2015-12-20T08:24:07Z"
"","2900","minor: added missing code for EXTENDS_CLAUSE token","noticed token didn't have its java code equivalent. didn't notice this on any others.","closed","","rnveach","2016-02-12T03:21:39Z","2016-02-12T18:30:01Z"
"","2543","Issue #2451: removed excess hierarchy from NoCloneCheck","Not a full direct copy from AbstractIllegalMethodCheck. ""methodName"" and ""errorKey"" fields were removed.  **Comments** I don't really agree with removing the hierarchy, but without the check being more type aware for knowing the class that is calling the method, I don't think it could made that more useful as its own Check.  Example: ""AbstractIllegalMethodCheck"" could be changed into a concrete ""IllegalMethodCheck"" where the user specifies the methodName, possibly the className, and the parameterCount and it would warn on lines that it matches. NoCloneCheck class would then extend it.","closed","","rnveach","2015-11-06T19:35:37Z","2017-09-08T01:44:10Z"
"","2269","Concurrency issue in JavadocParagraph check","Non-deterministic exception with maven concurrent build (-T):  ``` [INFO] Starting audit... XXX.java:11: warning: Empty line should be followed by  tag on the next line. Audit done. [WARNING] XXX.java[11] (javadoc) JavadocParagraph: Empty line should be followed by  tag on the next line. ```  maven-checkstyle-plugin: 2.16 checkstyle: 6.11  plugin exception:  ``` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.16:check (validate) on project amelia-humanization: You have 1 Checkstyle violation. -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.16:check (validate) on project amelia-humanization: You have 1 Checkstyle violation.     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)     at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call(MultiThreadedBuilder.java:189)     at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call(MultiThreadedBuilder.java:185)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) Caused by: org.apache.maven.plugin.MojoFailureException: You have 1 Checkstyle violation.     at org.apache.maven.plugin.checkstyle.CheckstyleViolationCheckMojo.execute(CheckstyleViolationCheckMojo.java:588)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)     ... 11 more ```","closed","","holub","2015-10-05T12:51:38Z","2015-10-05T14:22:27Z"
"","2245","problem of custom javadoc tags during mvn release:prepare","noinspection tag blocked be a release. `mvn release:prepare -DdryRun=true -Darguments='-DskipTests -DskipITs -Dcobertura.skip=true  -Dpmd.skip=true -Dfindbugs.skip=true -Dcheckstyle.ant.skip=true -Dgpg.passphrase=xxxxxxxxxxxx' ` commit to fix - d98c79e9be2ff038a4cfc2def20d04e7237d3991  we need to figure out, how to explain maven release plugin that such tag is known.    @mkordas , please take a look.","closed","approved,","romani","2015-09-28T02:24:58Z","2016-02-18T05:08:05Z"
"","2550","Issue 2451: removed excess hierarchy from NoFinalizerCheck and deprecated AbstractIllegalMethodCheck","NoFinalizerCheck extends Check. Not a full direct copy from AbstractIllegalMethodCheck. ""methodName"" and ""errorKey"" fields were removed.  AbstractIllegalMethodCheck is now deprecated.","closed","","rnveach","2015-11-07T16:00:45Z","2015-11-08T01:25:32Z"
"","2772","Issue #2376: Fixed typo in BASEFONT javadoc tag","No exceptions detected while generating Checkstyle report on OpenJDK:  ``` bizmailov@vdu-bizmailov:~/git/contribution/checkstyle-tester$ ./launch.sh -Dcheckstyle.config.location=my_check.xml Testing Checkstyle started openjdk is synchronized  Running 'mvn clean' on src/main/java ... .................. Done. Result report is locates at: target/site/index.html bizmailov@vdu-bizmailov:~/git/contribution/checkstyle-tester$ grep ""Got an exception"" target/site/checkstyle.html  bizmailov@vdu-bizmailov:~/git/contribution/checkstyle-tester$  ```  Only javadoc check is included in config file:  ```  ```","closed","","baratali","2015-12-25T23:54:41Z","2015-12-26T02:09:03Z"
"","2513","Pull #2513: Update System Rules to 1.13.0","New: - Support throwing exceptions from System.in.   Good code handles errors and good tests test these errors. Hence it   must be possible to simulate that System.in throws an error. Here is   how it is done:  ``` java     systemInMock.throwExceptionOnInputEnd(new IOException());     systemInMock.throwExceptionOnInputEnd(new RuntimeException()); ```","closed","miscellaneous,","mkordas","2015-11-03T09:45:47Z","2015-11-24T23:20:56Z"
"","2511","Pull #2511: Update System Rules to 1.13","New: - Support throwing exceptions from System.in.   Good code handles errors and good tests test these errors. Hence it   must be possible to simulate that System.in throws an error. Here is   how it is done:  ``` java     systemInMock.throwExceptionOnInputEnd(new IOException());     systemInMock.throwExceptionOnInputEnd(new RuntimeException()); ```","closed","","mkordas","2015-11-03T08:28:08Z","2015-11-03T09:45:56Z"
"","2966","maven-site-plugin:3.5 has problem to build our website","new version was detected by: https://www.versioneye.com/user/projects/5504ca834a1064774400049a  fixed issues in plugin: https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12317923&version=12331531  ``` ~/java/git-others/checkstyle/checkstyle [master|✚ 1] $ git diff diff --git a/pom.xml b/pom.xml index b877cf5..c7c1093 100644 --- a/pom.xml +++ b/pom.xml @@ -191,7 +191,7 @@      UTF-8      ${project.version}      4.5.2-1 -    3.4 +    3.5      3.0.3      3.6      0.7.6.201602180812  ~/java/git-others/checkstyle/checkstyle [master|✚ 1] $ mvn clean site ...... [INFO] Rendering site with org.apache.maven.skins:maven-default-skin:jar:1.1 skin. [INFO] Validation is switched on, xml input documents will be validated! [INFO] Skipped ""About"" report (maven-project-info-reports-plugin:2.8.1:index), file ""index.html"" already exists for the English version. [INFO] Skipped ""Surefire Report"" report (maven-surefire-report-plugin:2.19.1:report-only), file ""surefire-report.html"" already exists for the English version. [INFO] Skipped ""JDepend"" report (jdepend-maven-plugin:2.0:generate), file ""jdepend-report.html"" already exists for the English version. [INFO] Rendering 40 Doxia documents: 40 xdoc [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 04:36 min [INFO] Finished at: 2016-02-24T06:29:19-08:00 [INFO] Final Memory: 152M/804M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-site-plugin:3.5:site (default-site) on project checkstyle: Error parsing '/home/rivanov/java/git-others/checkstyle/checkstyle/src/xdocs/anttask.xml.vm': line [-1] Error validating the model: SAX2 driver class org.apache.xerces.parsers.SAXParser not found -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException  ```","closed","miscellaneous,","romani","2016-02-24T14:33:13Z","2016-05-01T12:50:25Z"
"","2379","Issue #2161: unify test input locations for javadoc package","new suppression needed  > JavadocMethodCheckTest.java:44: error: Total number of methods is 36 (max allowed is 35).  FileSetCheckLifecycleTest was using javadoc input files, but it doesn't look like it really needs a specific file, so I just picked one in its current directory.","closed","","rnveach","2015-10-18T14:03:00Z","2015-10-20T01:59:34Z"
"","2692","Issue #2666: Print name of the Check after printing violation message","New message looks like:  ``` Starting audit... [WARNING] /media/andreiselkin/TOURO/IDEA_Projects/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/InputMain.java:3:14: Name 'InputMain' must match pattern '^[a-z0-9]*$'. [TypeName] [WARNING] /media/andreiselkin/TOURO/IDEA_Projects/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/InputMain.java:5:7: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'. [TypeName] Audit done. ```","closed","","MEZk","2015-12-12T20:58:44Z","2015-12-27T15:40:06Z"
"","2560","Issue #2451: removed excess hierarchy from NestedIfDepthCheck","NestedIfDepthCheck now extends Check. Copied methods/fields from abstract. DEFAULT_MAX was merged with max.","closed","","rnveach","2015-11-09T04:00:19Z","2015-11-09T13:48:17Z"
"","2559","Issue #2451: removed excess hierarchy from NestedForDepthCheck","NestedForDepthCheck now extends Check. Copied methods/fields from abstract. DEFAULT_MAX was merged with max. Javadoc was changed to remove statements about abstract class.","closed","","rnveach","2015-11-09T03:53:56Z","2015-11-09T13:48:24Z"
"","2060","Issue #46. Statements shouldn't be nested too deep.","Nested if, for, while, switch and try statements is a key ingredient for making what's known as ""Spaghetti code"". Such code is hard to read, refactor and therefore maintain.","closed","","sabaka","2015-08-31T23:03:20Z","2015-09-03T23:28:25Z"
"","2037","Issue #46. Statements shouldn't be nested too deep","Nested if, for, while, switch and try statements is a key ingredient for making what's known as ""Spaghetti code"". Such code is hard to read, refactor and therefore maintain.","closed","","sabaka","2015-08-30T23:27:36Z","2015-09-03T23:28:20Z"
"","2026","Issue #46. statements shouldn't be nested too deep","Nested if, for, while, switch and try statements is a key ingredient for making what's known as ""Spaghetti code"". Such code is hard to read, refactor and therefore maintain.","closed","","sabaka","2015-08-30T01:40:19Z","2015-08-30T22:33:07Z"
"","2536","Issue #2161: unify test input file names","MyAnnotation is not used anywhere. Moved and renamed InputLocalAnnotations, which is just an addition file, not a direct input.","closed","","rnveach","2015-11-06T03:21:29Z","2015-11-06T12:50:17Z"
"","2622","update documentation for windows users","Most of our documentation centers around commands that only work for linux users. We should expand it to also include support for Windows users so anyone can use CS.  Examples: https://github.com/checkstyle/checkstyle/blob/71950237c1728ec9a20c9b3d6801beb1f334857d/src/xdocs/report_issue.xml#L60 https://github.com/checkstyle/checkstyle/blob/master/.github/ISSUE_TEMPLATE.md  Window users must use `type` instead of `cat`. So we need one more example block for windows users below example for Linux/Unix. Should be ""Example of report that we expect from Windows users ..............""","closed","easy,","rnveach","2015-11-18T15:43:24Z","2020-04-26T12:27:24Z"
"","2449","Issue #1238: Update list of missing tools","Modified position of projects:  - fawkeZ  - tIDE  - JArchitect  Updated link to fawkeZ","closed","","nejdaw","2015-10-25T21:39:35Z","2015-10-26T15:27:46Z"
"","2466","Issue #2451: removed excess hierarchy from MissingSwitchDefaultCheck","MissingSwitchDefaultCheck now extends only Check. No code was copied, 'visitToken' and 'containsDefaultSwitch' are brand new. Override in xdoc removed.  **1 minor change in output**: I removed the column number from this check, as descendant check was the one that wanted it, and I don't see a reason for column numbers here. I can revert this if you want.  **Issue Note**: I will only be doing 1 check per PR. I think this will keep things simplier.","closed","","rnveach","2015-10-29T14:15:31Z","2015-10-29T20:36:12Z"
"","2467","Issue #2451: removed excess hierarchy from MissingCtorCheck","MissingCtorCheck now extends Check. Very minor code change.  **1 minor change in output**: I removed the column number from this check, as descendant check was the one that wanted it, and I don't see a reason for column numbers here. I can revert this if you want.","closed","","rnveach","2015-10-29T20:47:39Z","2015-10-31T14:15:57Z"
"","2569","Issue 2451 24: removed excess hierarchy from MethodTypeParameterNameCheck and deprecated AbstractTypeParameterNameCheck","MethodTypeParameterNameCheck extends AbstractNameCheck. Copied methods over, and removed getLocation. Deprecated AbstractTypeParameterNameCheck.","closed","","rnveach","2015-11-10T13:56:23Z","2015-11-11T21:13:34Z"
"","2611","Issue #2451: removed excess hierarchy from MethodParamPadCheck","MethodParamPadCheck now extends Check. Copied methods and fields from abstract. Added test for missing coverage.","closed","","rnveach","2015-11-17T11:35:49Z","2015-11-17T14:19:40Z"
"","2627","Performance issue in Indentation check","Method [com.puppycrawl.tools.checkstyle.checks.indentation.HandlerFactory#getHandler](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java#L137) is consuming huge amount of resources:  ![image](https://cloud.githubusercontent.com/assets/5467276/11254807/22988e76-8e43-11e5-9cc6-eedcba9bb42f.png)  I think it's because `createdHandlers` cache is not updated properly and each time new instance of handler is created using reflection. ##","open","indentation,","mkordas","2015-11-18T21:27:45Z","2017-02-03T14:00:00Z"
"","2843","Issue #2815: improve cache in 'CircleCI'","Maven dependencies for checkstyle-tester are cached now. For that the tester is being run on no projects in 'dependencies' section.","closed","","Vladlis","2016-01-24T22:05:34Z","2016-01-25T20:54:04Z"
"","2101","Issue #1290: AbstractOptionCheck has been removed from list of checks to cover","Looks like it was missed in pom.","closed","","sabaka","2015-09-03T21:46:49Z","2015-09-03T23:23:36Z"
"","2545","Issue #2451: removed excess hierarchy from LocalFinalVariableNameCheck","LocalFinalVariableNameCheck now extends Check. Copied fields, methods, and a javadoc from AbstractNameCheck.  **Comments** I think out of all our abstract checks so far, this might be the perfect one to keep. It only exposes ""format"". When will we need this to be hidden? It only has one purpose, to validate the name, which is the only field we expose.  Classes affected by deprecating AbstractNameCheck: AbstractAccessControlNameCheck, AbstractTypeParameterNameCheck ConstantNameCheck, MemberNameCheck, MethodNameCheck, StaticVariableNameCheck, TypeNameCheck, LocalVariableNameCheck, ParameterNameCheck, ClassTypeParameterNameCheck, InterfaceTypeParameterNameCheck, MethodTypeParameterNameCheck.","closed","","rnveach","2015-11-06T21:48:21Z","2015-11-07T21:12:28Z"
"","2808","minor: suffix has been added to sed -i command.","Linux uses GNU sed and suffix in sed -i might be skipped, but osx uses bsd sed and we can't skip suffix here. This version works for both.","closed","","sabaka","2016-01-08T10:34:38Z","2016-01-10T15:09:04Z"
"","2847","Issue 2806","Like issue, the number of lines and annotation checks were moved to only if the javadoc is missing. If it is found, then it will always be validated. Not sure if the method name `isContentsAllowMissingJavadoc` is the best, but it is all that I can think of for right now. Second commit fixes all violations in CS' source. I just added the missing params/tags and didn't remove any javadocs.","closed","","rnveach","2016-01-25T23:56:02Z","2016-01-28T13:55:10Z"
"","2593","Issue #2451: removed excess hierarchy from LeftCurlyCheck","LeftCurlyCheck now extends Check. Copied methods from abstract. Added test for missing coverage.","closed","","rnveach","2015-11-12T20:44:18Z","2015-11-13T03:22:37Z"
"","2527","Issue #2519: removed xdoc google style links to master","just link changes","closed","","rnveach","2015-11-04T18:01:25Z","2015-11-04T18:32:20Z"
"","2090","Add boolean option allowMultipleWhitespaces to WhiteSpaceAfter and WhiteSpaceAround","Just as with the check EmptyLineSeparator there is a boolean option allowMultipleEmptyLines, it would be useful to have the ability to enforce single whitespace before/after certain tokens, e.g. using a boolean option allowMultipleWhitespaces.  Code becomes messy when an arbitrary (non-zero) number of spaces are inserted, instead of sticking to a single space where whitespace is required.  This applies to WhiteSpaceAfter and WhiteSpaceAround. ##","open","approved,","wstomv","2015-09-03T11:47:20Z","2020-04-26T18:26:59Z"
"","2280","Issue #974: PMD violation ConfusingTernary (final fix)","it will pass ""mvn pmd:check"" after all branches for #974 are merged","closed","","romani","2015-10-07T14:06:55Z","2015-10-08T01:07:57Z"
"","2201","JavadocStyle checkHtml changed in 5.8","It seems that some change in Checkstyle 5.8 broke the checkHtml feature of JavadocStyle. I suspect it might be #58 or #119 which relates to this check.  I have tested using command line version of Checkstyle and errors are detected in version 5.7, but not in version 5.8. Here is an example:  ``` /**  * First sentence.  *  *   * term  * definition  *   */ public class MyClass { } ```  Results with 5.7:  ``` MyClass.java:5:12: Extra HTML tag found:  MyClass.java:6:18: Extra HTML tag found:  ```  Results with 5.8: No error reported.","closed","javadoc,","dennisl","2015-09-18T09:17:19Z","2015-09-18T15:22:31Z"
"","2388","JavadocType ignore value INTERFACE_DEF","It seems that JavadocType is now ignoring `value=""INTERFACE_DEF""`:   ```                         ```  This was first reported in Checkstyle-IDEA here: https://github.com/jshiell/checkstyle-idea/issues/193  As reported in that bug: Looks to be a CheckStyle bug, I fear.  With CheckStyle 6.8 (from June this year):  > ``` > $ java -jar ../checkstyle-6.8-all.jar -c issue-193.xml ../src/main/java/org/infernus/idea/checkstyle/checker/ModuleClassPathBuilder.java > Starting audit... > /Users/jshiell/Projects/checkstyle-idea/test-configs/../src/main/java/org/infernus/idea/checkstyle/checker/ModuleClassPathBuilder.java:2: warning: Line does not match expected header line of '^ \* This file is copyrighted \d\d\d\d-\d\d\d\d$'. > /Users/jshiell/Projects/checkstyle-idea/test-configs/../src/main/java/org/infernus/idea/checkstyle/checker/ModuleClassPathBuilder.java:5: warning: Wrong order for 'org.apache.commons.logging.Log' import. > /Users/jshiell/Projects/checkstyle-idea/test-configs/../src/main/java/org/infernus/idea/checkstyle/checker/ModuleClassPathBuilder.java:11: warning: Wrong order for 'java.io.File' import. > Audit done. > ```  With 6.11.2 (most recent, and used in the plugin):  > ``` > $ java -jar ../checkstyle-6.11.2-all.jar -c issue-193.xml ../src/main/java/org/infernus/idea/checkstyle/checker/ModuleClassPathBuilder.java > Starting audit... > /Users/jshiell/Projects/checkstyle-idea/test-configs/../src/main/java/org/infernus/idea/checkstyle/checker/ModuleClassPathBuilder.java:2: warning: Line does not match expected header line of '^ \* This file is copyrighted \d\d\d\d-\d\d\d\d$'. > /Users/jshiell/Projects/checkstyle-idea/test-configs/../src/main/java/org/infernus/idea/checkstyle/checker/ModuleClassPathBuilder.java:5: warning: Wrong order for 'org.apache.commons.logging.Log' import. > /Users/jshiell/Projects/checkstyle-idea/test-configs/../src/main/java/org/infernus/idea/checkstyle/checker/ModuleClassPathBuilder.java:11: warning: Wrong order for 'java.io.File' import. > /Users/jshiell/Projects/checkstyle-idea/test-configs/../src/main/java/org/infernus/idea/checkstyle/checker/ModuleClassPathBuilder.java:22: warning: Missing a Javadoc comment. > Audit done. > ```   So it looks like recent versions are ignoring the JavadocType scoping.","closed","approved,","bananetomate","2015-10-19T20:22:47Z","2015-10-31T22:11:04Z"
"","2652","OverloadMethodsDeclarationOrder reports an error when static and instance method not together: opportunity for improvement?","It seems `Checkstyle OverloadMethodsDeclarationOrder` likes a static and an instance method with same name together (since they are overload of each other) and therefore generate an error if not. However this makes grouping methods by group `static` v.s. not impossible. This could be an opportunity to create an option to do this making Checkstyle more flexible.    ``` public class Item {     public String toString() {         return """";     }      public String amethod() {         return ""something"";     }      public static String toString(String str) {         return str;     } ```  }  ```    Item.java:8: error: Overload methods should not be split. Previous overloaded method located at line '2'. ```","closed","","supercobra","2015-11-29T17:39:04Z","2017-01-11T00:02:31Z"
"","2594","FallThroughCheck doesn't handle a synchronized block that definitely terminates","It probably should.","closed","","cgdecker","2015-11-12T21:02:57Z","2015-12-01T14:51:28Z"
"","2872","create a concept of automatic usage of Checks in user configurations","It is not that clear for user when new Check is appear. For user users it is much better to auto enable rules as that is done in other tools. And deactivate them in config if they do not like new rule.  Some option in Checker is required , `autoEnableChecks` to let user manage this process. ##","open","","romani","2016-02-04T15:27:06Z","2016-12-14T18:16:48Z"
"","2344","create HTML web page to describe how to open issues against Checkstyle","It is not rare case when user open issue in appropriate way, so we need to make a html page  https://github.com/checkstyle/checkstyle/issues/2327  Good example: https://github.com/checkstyle/checkstyle/issues/2250  Location of page should be some where under http://checkstyle.sourceforge.net/contributing.html, no need to show it on left panel.","closed","miscellaneous,","romani","2015-10-12T20:05:16Z","2015-11-24T19:27:28Z"
"","2757","Issue #2661: Enforce ForbidWildcardAsReturnType of sevntu-checkstyle over Checkstyle source code","It is impossible to avoid wildcard as return type, because we don't know the actual type of the returning object when we invoke the methods. That is why I suppressed some violations.","closed","","MEZk","2015-12-20T22:48:52Z","2015-12-23T17:30:10Z"
"","2858","Issue 2551 - renamed Check to AbstractCheck","Issue was done in 2 commits.  **renamed Check to AbstractCheck**: This allows us to keep the history of the original file during the move. Since `Check` didn't exist anymore, I used the compile errors to make sure all names were changed. I did my best to change all text versions of the class I could find like in JavaDocs and XDOCs since they don't give compile time errors. `XDocsPagesTest.testAllChecksPresentOnAvailableChecksPage` was changed to ignore `AbstractCheck` as it was now being picked up in the search.  **added deprecated Check for backwards compatibility**: Reinstated old `Check` as deprecated and extends `AbstractCheck`, so no copied code needed. Added test to confirm `TreeWalker` would accept the old check style because it is an instance of `AbstractCheck`.  When `Check` is removed for good, the 2nd commit can be reverted as part of the process.","closed","","rnveach","2016-01-31T05:12:01Z","2016-02-05T14:13:59Z"
"","2862","Issue #2788: fixed JavadocStyleCheck index out of range -1","Issue in user's input was from the method at line 69, `buscarLaminas`.","closed","","rnveach","2016-02-01T14:27:51Z","2016-02-07T05:22:53Z"
"","2967","Issue #2204: Add 'baseName' option for TranslationCheck","Issue https://github.com/checkstyle/checkstyle/issues/2204 .  @romani  1) Since TranslationCheck extends AbstractFileSetCheck, it also inherits 'setFileExtensions' method which allows user to specify file extensions. As was discussed at Issue https://github.com/checkstyle/checkstyle/issues/2204 we should validate files with '.properties' extension. Should we remove the description of the option from xdoc and filter files by extension. for example, in 'processFiltered' method with help of  CommonUtils#matchesFileExtension ?  2) I think it is worth changing the issue title.","closed","","MEZk","2016-02-24T22:15:14Z","2016-03-12T17:32:00Z"
"","2914","Issue #56: fix NPathComplexityCheck","Issue #56 .  This PR is currently incomplete: it lacks single mock test to satisfy cobertura 100% coverage demand. 1. It implements correct calculation of NPath complexity for conditional with complex boolean expression, even for those containing ternary operator. 2. It adds calculation for return operator. 3. It fixes calculation for switch statement. 4. It doesn't implement NPath calculation for try-catch-finally statements yet. It is a question if we need such calculation. Pmd doesn't implement this calculation and there is no formula in original paper. 5. I have no idea of how to perform regressional test for this check.","closed","incomplete,","attatrol","2016-02-14T17:35:20Z","2017-02-01T20:58:39Z"
"","2984","Issue #2981: added skip native methods for FinalParametersCheck","Issue #2981  Added new skip, added test, and updated xdoc.","closed","","rnveach","2016-02-28T07:01:15Z","2016-03-01T16:10:02Z"
"","2994","Issue #2975: added anchors to all google_style's TOC rows","Issue #2975   Added row anchors to all rows in style's TOC. Added test to verify anchors are correctly named.","closed","","rnveach","2016-03-02T13:05:48Z","2016-03-02T16:11:47Z"
"","2996","Issue #2973: added test to verify TokenType numbers","Issue #2973. Created from discussion at #2983.  As suggested, here is the JUnit to make sure we don't break TokenTypes again. We may need to look into to see if this will be a similar issue with the JavaDoc antlr tokens.  **Note:** This is based off 6.15 to confirm what the numbers use to be and needs to wait until master is fixed to be rebased and merged. Can still review if you agree with test, messages, and documentation. Travis is expected to fail until rebase.","closed","","rnveach","2016-03-02T20:32:45Z","2016-03-03T00:58:31Z"
"","2983","Issue #2973: removed unused VOCAB from java.g","Issue #2973  This one is for VOCAB. It looks like it was unused since the creation of the grammar in 2001. https://github.com/checkstyle/checkstyle/blob/0fd69594a4c3e82f92f93f0371791da66938f8c3/src/checkstyle/com/puppycrawl/tools/checkstyle/java.g#L1101-L1106 I saw the comment above it, but there is no case to prove why it is needed and regression showed no errors with it gone.","closed","","rnveach","2016-02-28T06:37:28Z","2016-03-05T23:12:47Z"
"","2985","Issue #2973: removed unused inferredParameterList from java.g","Issue #2973  This one is for `inferredParameterList`. Though this was probably added to be more like the JLS, it is never used because `parameterDeclarationList` gets all the attention. This can be seen from all our regression cases: https://github.com/checkstyle/checkstyle/blob/4820a458f0abb13c1b014800eff1aaaac9f8cd5c/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammars/InputRegressionJava8Class1Ast.txt#L473-L485 https://github.com/checkstyle/checkstyle/blob/4820a458f0abb13c1b014800eff1aaaac9f8cd5c/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammars/InputRegressionJava8Class1Ast.txt#L561-L572","closed","","rnveach","2016-02-28T07:28:14Z","2016-03-02T04:05:14Z"
"","2993","Issue #2973: removed unused annotations from java.g","Issue #2973  This is the last of the removes. It is for annotations inside postfixExpression.   This was the main one i wasn't sure about. We have no tests hitting it. Regression didn't turn up anything, but that may not mean much since this is Java 8.  This was added a year and a half ago, here: https://github.com/checkstyle/checkstyle/blob/5891815628e56f0eefe91b9de61cba7a67591381/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/java.g#L1405","closed","","rnveach","2016-03-02T04:54:29Z","2016-03-04T15:34:25Z"
"","2977","Issue #2973: removed unused FLOAT_SUFFIX from java.g","Issue #2973  I will do a separate PR for each unused grammar item. There will be 2 more, one is questionable.  This one is for FLOAT_SUFFIX. It has remained unused for atleast 5 years.","closed","","rnveach","2016-02-26T18:26:28Z","2016-03-03T01:15:03Z"
"","2951","Issue #2950: rewrote LineWrappingHandler for nodes not on first line","Issue #2950. This comes before PR #2940.  This fixes indentation for lines with some type of multiple statements on it, and rewrites `LineWrappingHandler` to be more of a utility and not require the first node to be the first on the line. This allows us to use this in places where we don't know where the node is on the line, like `throws`.  Changes to `LineWrappingHandler`: - It is now more a utility class. It only takes `IndentationCheck` on instance, so it is more connected to `IndentationCheck` and requires us to only make one instance, instead of an instance for every AST. - Every call to `checkIndentation` now takes the nodes to examine as parameters instead of being stuck to the instance. We never called this method more than once on one instance, so I found the connection to the instance was pointless. - `getFirstNodeIndent` was replaced with `getLineStart` from `AbstractExpressionHandler`. This does have the side effect of including comments that exist before code on the line, but NetBeans's formatter works this way too.  **Note:** So we stop duplicating methods between this class and `AbstractExpressionHandler`, I may make a unique base like `AbstractHandler` that both classes can use.  I consider `AbstractExpressionHandler.checkLinesIndent` and similar methods a bad emulation of `LineWrappingHandler` and am thinking of replacing them for the other. The reason is because they check all lines inbetween the 2 nodes ignoring the AST structure. This can cause full comments to be picked up in the mix. It can also be confusing which to use since one uses `basicOffset` and the other uses `lineWrappingIndentation` for indentation, and one uses `forceStrictCondition` while the other doesn't.  All changes to other classes were to make use of the new `LineWrappingHandler`. Regression to come.","closed","","rnveach","2016-02-20T23:42:58Z","2016-04-24T12:35:51Z"
"","2961","Issue #2938: add XWiki project to regeression testing","Issue #2938","closed","","romani","2016-02-23T17:14:39Z","2016-02-26T14:41:09Z"
"","2911","Issue #2905: add to profile activation that tools dependency should o…","Issue #2905: Add to profile activation that tools dependency should only be declared up to JDK 8.","closed","","peteryhwong","2016-02-13T22:07:30Z","2016-02-14T13:52:36Z"
"","2940","Issue 2763: restoration of throwsIndent","Issue #2763   This restores `throwsIndent`s code from https://github.com/checkstyle/checkstyle/commit/1ff166e1b64ddf40bd9f9cbd9834b8905f77fd94 with 1 addition.  https://github.com/rnveach/checkstyle/blob/404c1ced913286319251ee5f86549f13891c1940/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java#L78-L88 These lines are new. They allow exceptions that appear on separate lines to be indented based on line wrapping. Without it, those lines would be skipped, just like throws was before this fix.  **Gray area**: https://github.com/rnveach/checkstyle/blob/404c1ced913286319251ee5f86549f13891c1940/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java#L80-L87 This section is ugly and I may look into fixing it. The issue is `LineWrappingHandler`s first node must be the first node on the line (source https://github.com/checkstyle/checkstyle/blob/7572ba1f8e392bd0a57e87c48f4d3abefb83fe6a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java#L107-L108). If you don't give it the first node on the line, it thinks the node is still the first on the line and produces invalid indentation recommendations. I feel this is a tough requirement to meet unless we design another routine to search for the first node. I don't know how this will affect the other areas that call the class or filed issues.","closed","","rnveach","2016-02-19T02:36:49Z","2016-05-07T20:36:00Z"
"","2531","Remove dependency to commons lang3 library","issue #2428, updated CommonUtils to include methods and properties from lang3","closed","incomplete,","chrismacias","2015-11-04T23:50:15Z","2015-12-31T00:03:40Z"
"","2970","Issue #2396: added ast regression testing","Issue #2396.  Added new class for AST testing with Java grammar. This gives us a full working, printable tree of our grammar and shows the code it can process is valid Java. It also puts all of this in one test so its easier to run with than scanning the entire project. Almost every line connects to a unique part of the grammar coverage.  My final goal is to have this connected with code coverage (line coverage only). I'll make another issue for this as there seems to be some dead spots in the grammar that can be removed. Once it is connected to CC, we can make sure any additions from Java 8 are shown.  Lexer is at 91% coverage by cobertura (141 lines missing). Recognizer is at 95% (211 lines missing). I left `testUnusedMethods` in since it was a nicer version of some of my hacks on the class to get higher line coverage.  If this is merged, the issue can be closed.","closed","","rnveach","2016-02-25T04:31:58Z","2016-02-26T17:34:19Z"
"","2962","Issue #2396: changed hardcoded ast tests to use ast printer","Issue #2396 As issue discussed, removed old hardcoded AST tests that had to be made by hand and converted them to use the `AstTreeStringPrinter`. The contents of the tree are saved to a file with the same name as the java file plus `Ast`. I also extended this to `InputFullOfBlockComments` and `InputFullOfSinglelineComments`, which had no exact verifications.  **Note:** If this PR is merged, please don't close the issue as I want to push another PR that will extend the AST printing to full Java code covering all the grammar we have. This PR mainly deals with the comments which was the main point of the issue, but as I also said, we have no tests specifying how every grammar item is created. I originally talked about wanting to add the grammar to the code coverage requirements. That PR would be part of it.","closed","","rnveach","2016-02-23T20:43:01Z","2016-02-24T01:45:50Z"
"","2841","Issue #2362: Add new 'validateOnlyOverlapping' option for RequireThis","Issue #2362.","closed","","MEZk","2016-01-24T09:08:03Z","2016-03-06T16:25:15Z"
"","2956","New option to print AST with comment nodes","Issue  #652.  New option has been added. Also, a long option name added for `-t` option:  ```   -t,--tree               Print Abstract Syntax Tree(AST) of the file   -T,--treeWithComments   Print Abstract Syntax Tree(AST) of the file including comments ```  Apache CLI doesn't support `-` character in option names, so new name is in CamelCase. (Apache CLI uses [Character.isJavaIdentifierPart](https://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isJavaIdentifierPart%28char%29) to validate option names)  Examples:  ``` java /**My Class*/ class A {         // no code } ```  ``` java -jar target/checkstyle-6.16-SNAPSHOT-all.jar --tree MyClass.java CLASS_DEF -> CLASS_DEF [2:0] |--MODIFIERS -> MODIFIERS [2:0] |--LITERAL_CLASS -> class [2:0] |--IDENT -> A [2:6] `--OBJBLOCK -> OBJBLOCK [2:8]     |--LCURLY -> { [2:8]     `--RCURLY -> } [4:0] ```  ``` java -jar target/checkstyle-6.16-SNAPSHOT-all.jar --treeWithComments MyClass.java CLASS_DEF -> CLASS_DEF [2:0] |--MODIFIERS -> MODIFIERS [2:0] |--BLOCK_COMMENT_BEGIN -> /* [1:0] |   |--COMMENT_CONTENT -> *My Class [1:2] |   `--BLOCK_COMMENT_END -> */ [1:10] |--LITERAL_CLASS -> class [2:0] |--IDENT -> A [2:6] `--OBJBLOCK -> OBJBLOCK [2:8]     |--LCURLY -> { [2:8]     |--SINGLE_LINE_COMMENT -> // [3:1]     |   `--COMMENT_CONTENT ->  no code\r\n [3:3]     `--RCURLY -> } [4:0]  ```","closed","","baratali","2016-02-21T21:36:19Z","2016-02-23T16:59:53Z"
"","2988","[Issue #2987] Allow JUnit ClassRule to be public","Issue  #2987  Copied the test/behavior of Rule, changed classes lines because of new import in the beginning of the class","closed","","avano","2016-02-29T10:39:23Z","2016-03-01T14:37:06Z"
"","2565","Issue #2451: removed excess hierarchy from InterfaceTypeParameterName","InterfaceTypeParameterNameCheck now extends AbstractNameCheck. Copied methods over, and removed getLocation.  **Comment**: There is no `InterfaceTypeParameterNameCheckTest`. The file `ClassTypeParameterNameCheckTest` holds tests for all 3 checks that extend `AbstractTypeParameterNameCheck`.","closed","","rnveach","2015-11-10T03:00:22Z","2015-11-10T13:54:23Z"
"","2072","Issue #2065: Add suppression for IntelliJ IDEA inspection","Inspection in this case is right. Parameter `Properties` can be replaced with `Map`. It works fine with Checkstyle, but it breaks binary compatiblity with Maven Checkstyle Plugin, which is not acceptable.","closed","","mkordas","2015-09-01T22:27:04Z","2015-09-04T19:33:22Z"
"","2374","Issue #2161: unify test input locations for import package","InputCustomImportOrder3, InputCustomImportOrderTemp, and InputCustomImportOrderSamePackage2 were not used anywhere.","closed","","rnveach","2015-10-17T19:59:32Z","2015-10-18T13:45:08Z"
"","2539","RequireThis reports false-positive when an instance method is overloaded with a static one","Input:  ``` java public class Test {      public void foo() {}      public static void foo(int i) {}      public void bar() {         foo();      // line 8         foo(1);     // line 9     } } ```  Config:  ``` xml                                     ```  Result:  ``` Starting audit... D:\cli\Test.java:8:17: warning: Method call to 'foo' needs ""this."". D:\cli\Test.java:9:17: warning: Method call to 'foo' needs ""this."".","closed","approved,","Vladlis","2015-11-06T12:46:37Z","2015-12-31T21:42:25Z"
"","2863","StringIndexOutOfBoundsException in RightCurlyCheck","Input:  ``` java import pack;  class Test {   public static final String CONSTANT = ""This           is           constant"";} ```  Result:  ``` vlad@vlad-N61PC-M2S ~/cli $ java -jar checkstyle-6.15-all.jar -c /google_checks.xml Test.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing Test.java     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:282)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:276)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:119) Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 45     at java.lang.String.charAt(String.java:658)     at com.puppycrawl.tools.checkstyle.utils.CommonUtils.lengthExpandedTabs(CommonUtils.java:184)     at com.puppycrawl.tools.checkstyle.api.Check.log(Check.java:254)     at com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter.log(AbstractViolationReporter.java:143)     at com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck.visitToken(RightCurlyCheck.java:194)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:375)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:486)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:317)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:189)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:80)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:266)     ... 2 more Checkstyle ends with 1 errors.  ```  Config: /google_checks.xml","closed","","Vladlis","2016-02-01T20:58:00Z","2016-02-01T21:27:44Z"
"","2405","FinalLocalVariable false-positive in SWITCH","Input:  ``` java class Test {     public void method(int i) {         switch (i) {             case 1:                 int foo = 1;     // line 5                 break;             case 2:                 foo = 2;         // line 8                 break;             default:         }     } } ```  Config:  ``` xml                                         ```  Result:  ``` bash >java -jar checkstyle-6.11.2-all.jar -c my_check.xml Test.java Starting audit... C:\tmp\Test.java:5:21: warning: Variable 'foo' should be declared final. Audit done. ```  If foo is declared final on the line 5, then a compilation error appears on the line 8.","closed","approved,","Vladlis","2015-10-21T11:34:28Z","2015-12-26T21:20:42Z"
"","2240","False negative in RequireThis check","Input:  ``` java class Test {     private int foo;      void bar() {         foo++;         int foo;     }        } ```  Config:  ``` xml                           ```  Result:  ``` bash vlad@vlad-N61PC-M2S ~/cli $ java -jar checkstyle-6.10.1-all.jar -c my_check.xml Test.java Starting audit... Audit done. ```  The check should require `this` for `foo`. The problem is in check's superclass: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java#L193 - it searches by name without checking the line of variable declaration.","closed","approved,","Vladlis","2015-09-25T21:26:52Z","2015-11-15T14:24:37Z"
"","2239","RequireThis check message is not clear enough","Input:  ``` java class Test {     private int foo;      class Nested {         void bar() {             foo++;         }            } } ```  Result:  ``` bash vlad@vlad-N61PC-M2S ~/cli $ java -jar checkstyle-6.10.1-all.jar -c my_check.xml Test.java Starting audit... /home/vlad/cli/Test.java:6:13: Reference to instance variable 'foo' needs ""this."". Audit done. Checkstyle ends with 1 errors. ```  Shouldn't we extend the message? For instance:  > Reference to instance variable 'foo' needs ""Test.this.""","closed","approved,","Vladlis","2015-09-25T18:37:46Z","2015-12-24T21:57:26Z"
"","2645","StringIndexOutOfBoundsException in Indentation check","Input (valid Java file):  ``` $ javac Test.java   $ import java.io.* // indent:0 exp:0      ; //indent:4 exp:4  $ cat Test.xml                             $java -jar checkstyle-6.13-all.jar -c Test.xml Test.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing Test.java     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:282)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:276)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:119) Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 0     at java.lang.String.charAt(String.java:646)     at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getLineStart(AbstractExpressionHandler.java:251)     at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.checkSingleLine(AbstractExpressionHandler.java:351)     at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.checkLinesIndent(AbstractExpressionHandler.java:285)     at com.puppycrawl.tools.checkstyle.checks.indentation.ImportHandler.checkIndentation(ImportHandler.java:51)     at com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.visitToken(IndentationCheck.java:292)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:390)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:501)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:332)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:204)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:266)     ... 2 more Checkstyle ends with 1 errors.  ```","closed","indentation,","mkordas","2015-11-22T21:54:19Z","2016-01-30T23:21:51Z"
"","2877","Global Checkstyle preferences do not get applied","Individual projects have overrides on the global checkstyle preference option that prevent them from all being updated together. Even after trying to delete the .checkstyle for a project it still does not receive the update from the global ""default"" choosing.","closed","","Matthew7878","2016-02-05T15:53:17Z","2016-02-05T17:32:35Z"
"","2648","IndentationCheck reports False-Positive while checking anonymous classes","IndentationCheck reports FP while checking anonymous classes.  **Input file: `IndentationTest.java`**  ``` java public class Test {     private static String geLabel(String issue) {         final String label =  Iterables.tryFind(list, new Predicate() { // line 4             @Override             public boolean apply(String input) {                 return true;             } // line 8         }).orNull(); // line 9          return """";     } } ```  **Configuration file: `my_check.xml`**  ``` xml                                                                      ```  **Checkstyle 6.12.1 output**  ``` andreiselkin@andreiselkin ~/Downloads/temp $ java -jar checkstyle-6.12.1-all.jar -c my_check.xml IndentationTest.java Starting audit... /home/andreiselkin/Downloads/temp/IndentationTest.java:9: warning: '.' have incorrect indentation level 10, expected level should be 12. Audit done. ```  1) Expected indentation level is 12 as right curly brace on line 8. Why not as start token 'final' on line 4?  2)   > '.' have incorrect indentation level   Why does the Check report 'dot' token, but not `}` ?","closed","indentation,","MEZk","2015-11-22T22:54:54Z","2016-04-22T11:53:29Z"
"","2348","Issue #2161: unify test input locations","indentation package","closed","","rnveach","2015-10-14T09:40:25Z","2015-10-14T13:01:51Z"
"","2928","Duplicate error message for instance final field in DeclarationOrder check","Incorrect position of instance final field is reported once as a instance variable and then as variable in DeclarationOrder.  For code:  ``` java class Test {     private int i;     final int k; } ```  We have errors: ""Instance variable definition in wrong order"" and ""Variable access definition in wrong order."". ##","closed","approved,","liscju","2016-02-17T16:20:09Z","2019-09-22T18:29:24Z"
"","2633","GenericWhitespace: violation on generic like '...... instanceof Type;'","In the following example GenericWitesapce check triggers error  ``` public boolean foo(@Nullable Object otherObject) {     return otherObject instanceof SomeObject; } ```  There error is   ``` (whitespace) GenericWhitespace: '>' is followed by an illegal character. ```  Possible workaround is to enclose statement in the brackets (...) like so  ``` return (otherObject instanceof SomeObject); ```  but the right thing to do of course is to fix this bug.","closed","approved,","priimak","2015-11-20T18:28:12Z","2015-12-05T14:52:43Z"
"","2275","SuppressWarningHolder may support the special warning id ""all""","In several cases (generated code, etc.), it is useful to put a `@SuppressWarnings(""all"")` at the top of the code. Unfortunately, this special warning id is recognized by Eclipse, but not by checkstyle.  I suggest to add this special warning id in the implementation of SuppressWarningHolderCheck.","closed","approved,","gallandarakhneorg","2015-10-07T08:55:58Z","2015-10-08T18:21:41Z"
"","2346","Description of getDefaultTokens(), getAcceptableTokens(), getRequiredTokens()  methods","In preparation for moratorium period removal we need to explain user reason and difference between methods: getDefaultTokens(), getAcceptableTokens(), getRequiredTokens() . Even contributor of Chekcstyle right now have problems with understanding of this.  Page should be a section at: http://checkstyle.sourceforge.net/writingchecks.html","closed","miscellaneous,","romani","2015-10-13T13:14:39Z","2015-11-24T23:19:50Z"
"","2180","Correct ITs for NonEmptyAtclauseDescription and JavadocTagContinuationIndentation","In NonEmptyAtclauseDescriptionTest the only way I found possible to write ""//warn"" comments in the input file is  ``` java /**      * Some javadoc.        * @param c          */ //warn ```  But this would make the test incomplete, I guess.","closed","","Vladlis","2015-09-14T14:12:37Z","2015-09-16T02:16:24Z"
"","2677","[Feature] HiddenField Rule - property ignoreWith","In many builders you'll use `.with(varname)` and usually that one also does hide the field but since you anyway assign it, it does not really matter that much.  This is an addition for [Coding/HiddenField](http://checkstyle.sourceforge.net/config_coding.html#HiddenField).  There would be a new property for that named `ignoreWith` of type boolean with a default value of false.  Right now HiddenField correctly detects this:  ``` java public Builder withFoo(@NonNull final Foo foo) {     this.foo = foo;     return this; } ```  If however the property `ignoreWith` would be set to true, checkstyle would not raise the HiddenField warning in the above code.  All in all the new rule would work like `ignoreSetter` with the only difference that `withFoo` would be ignored rather than `setFoo`.  If you guys also like that property, I could work on that and submit a PR.","closed","","vanniktech","2015-12-08T10:58:18Z","2015-12-31T12:19:39Z"
"","2656","spelling: fix typo in word 'Existing' in google_style.xml","In http://checkstyle.sourceforge.net/google_style.html in legend there are 'Exiting check...' instead of 'Existing check...'","closed","","liscju","2015-12-03T18:50:45Z","2015-12-03T19:56:29Z"
"","2171","Deploy snapshots versions in CI","Implements #2167.  The credentials of a Sonatype JIRA account which has access to the OSSRH repo, should be added in the [Travis settings](https://travis-ci.org/checkstyle/checkstyle/settings). Two secure environment variables are needed, `CI_DEPLOY_USERNAME` and `CI_DEPLOY_PASSWORD`.  I added the deployment to the `# unit tests (oraclejdk8)` job of the build matrix. I am not sure this is appropriate, so i need opinion on that.  Also, i cannot test this PR, so hopefully this works. It can be tested locally with executing the following command:  ``` sh # set the two environment variables first mvn -s config/deploy-settings.xml deploy ```","closed","","WonderCsabo","2015-09-12T17:39:30Z","2016-06-01T13:27:55Z"
"","2778","Issue #1008: Add possibility to suppress checks by id","Implemented #1008 request for SuppressionCommentFilter, SuppressWarningsFilter, SuppressWithNearbyCommentFilter.","closed","","MEZk","2015-12-27T09:52:47Z","2016-01-12T19:15:13Z"
"","2484","Issue #2451: removed excess hierarchy from IllegalTypeCheck","IllegalTypeCheck now extends Check. Fields and setters copied from AbstractFormatCheck, with minor modifications. Removed DEFAULT_FORMAT since it was only used once.","closed","","rnveach","2015-10-31T05:22:32Z","2015-10-31T13:48:34Z"
"","2500","Issue #2451: removed excess hierarchy from IllegalThrowsCheck","IllegalThrowsCheck now extends Check. Removed AbstractIllegalCheck as it isn't used anymore.","closed","","rnveach","2015-11-01T13:26:24Z","2015-11-04T16:56:38Z"
"","2840","UnusedImports processJavadoc fails with javadoc tags that span lines","If you remove the line-break in the @link javadoc tag, the check will pass, otherwise it fails:  http://checkstyle.sourceforge.net/config_imports.html#UnusedImports  ``` /var/tmp $ cat Foo.java  import android.net.HttpResponseCache; /**  * {@link HttpResponseCache#install  *        HttpResponseCache.install}  */ class Foo {}  /var/tmp $ cat style.xml                              /var/tmp $ java -jar checkstyle-6.14.1-all.jar -c style.xml Foo.java  Starting audit... [ERROR] /var/tmp/Foo.java:1:8: Unused import: android.net.HttpResponseCache. Use :JavaImportOrganize (ECLIM) or Ctrl+Shift+O (Eclipse) to sort imports [UnusedImports] Audit done. Checkstyle ends with 1 errors. ``` ##","closed","javadoc,","JensenPaul","2016-01-22T17:39:48Z","2017-07-11T00:37:08Z"
"","2175","HiddenFieldCheck does not rise violation, when lambda parameter, which type is omitted, hides a field","If parameter types of lambda expression are omitted, HiddenFieldCheck will not rise any violations. The problem is due to the fact that ANTLR parses parameters (which types are omitted) as identifiers and HiddenFieldCheck does not take into account those cases.   Example:  ``` java /**   * Lambda parameter 'languageCode'   * hides a field 'languageCode'.   */ static List languageCodes = Arrays.asList(""de"", ""ja"", ""fr"", ""pt""); static String languageCode = new String(); {     names.forEach(languageCode -> System.out.println(languageCode)); // violation should be risen here } ```","closed","approved,","MEZk","2015-09-13T20:46:54Z","2015-09-20T14:01:55Z"
"","2934","Issue #2941: fixed incorrect expected indentations","If indentation expects a line to be at position `X,Y` then we should report `X,Y` not `A,B`.  On the 2 lines modified, right before them the indent variable being used when calling `isAcceptable` is completely different than the variable/values sent to the error message routine.","closed","","rnveach","2016-02-18T02:35:37Z","2016-02-20T00:37:04Z"
"","2387","JavadocStyleCheck: If a class contains   /**/   then ""String index out of range: -1 is thrown""","If a class contains javadoc like the following:   /**/   the following error is thrown:  ""Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: String index out of range: -1""  Example  class below:  ``` /var/tmp $ cat 3.java  package test; public class Test { /**/ public void someMethod() {} }  /var/tmp $ cat config.xml                   /var/tmp $ java -jar checkstyle-6.11.2-all.jar -c config.xml   3.java Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: String index out of range: -1     at java.lang.AbstractStringBuilder.charAt(AbstractStringBuilder.java:210)     at java.lang.StringBuilder.charAt(StringBuilder.java:76)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.trimTail(JavadocStyleCheck.java:316)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.getCommentText(JavadocStyleCheck.java:269)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.checkFirstSentenceEnding(JavadocStyleCheck.java:230)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.checkComment(JavadocStyleCheck.java:207)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.visitToken(JavadocStyleCheck.java:148)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:388)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:499)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:330)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:203)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:265)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:277)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:118) ```","closed","approved,","GoofyHTS","2015-10-19T19:05:25Z","2015-10-31T22:18:47Z"
"","2617","Issue #2616: Add CatchParameterName check for catch blocks parameters","I've set the default pattern to the very strict one: `^(e|ex|[a-z][a-z][a-zA-Z]*)$`. I'm aware, that most probably it's too controversial, but I'm waiting for your opinions @romani @rnveach @Vladlis @MEZk   This is early version of the check - any input/review is welcome.","closed","","mkordas","2015-11-17T22:50:25Z","2015-12-04T00:44:33Z"
"","2578","New Check: Odd number of indenting spaces","I've implemented a check that I find useful, for lines with an odd number of indenting spaces. Currently it's implemented as a single-line regex:  ```             ```  The `{0,6}` limit is just to keep it within regular sane bounds of indenting, but could be replaced with `*` or `+`. The exclusion for asterisk afterward is to handle Javadoc-style commenting.  Is this worth making a standard check? ##","closed","","ThrawnCA","2015-11-11T00:23:25Z","2016-12-22T18:11:52Z"
"","2107","[gradle checkstyle] java.lang.ClassNotFoundException: com.puppycrawl.tools.checkstyle.CheckStyleTask","I'm using checkstyle with Android Studio 1.3.2, gradle 2.4, when I apply the checkstyle plugin, and set toolVersion to 6.10.1, the exception is thrown.","closed","","Piasy","2015-09-04T11:53:10Z","2015-09-04T13:46:40Z"
"","2237","Concurrent execution from maven failed","I'm using checkstyle from maven with -T option. Sometime the build failed. Most likely it's concurrent issue but I'm not sure on which side it must be fixed: checkstyle or maven plugin.  ``` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.16:check (validate) on project yyy-1: Execution validate of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.16:check failed. NullPointerException -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.16:check (validate) on project yyy-1: Execution validate of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.16:check failed.     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:224)     ...     at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call(MultiThreadedBuilder.java:185)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     ...     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745) Caused by: org.apache.maven.plugin.PluginExecutionException: Execution validate of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.16:check failed.     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:145)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)     ... 11 more Caused by: java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck.visitToken(AbstractJavadocCheck.java:182)     ...     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:265)     at org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:252)     at org.apache.maven.plugin.checkstyle.CheckstyleViolationCheckMojo.execute(CheckstyleViolationCheckMojo.java:538)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)     ... 12 more ```","closed","approved,","holub","2015-09-25T12:26:32Z","2015-09-26T14:17:11Z"
"","2818","LeftCurly not working correctly with lambdas","I'm using 6.14.1 of Checkstyle.  ```                    ```  The above rule does not catch a left curly bracket that is used in a lambda like the following:  ```     (args) -> {         // some code here.     }      // Which should be     (args) ->     {         // some code here     }     ```","closed","approved,","mjpt777","2016-01-11T23:27:28Z","2016-02-17T16:31:48Z"
"","2906","XDocsPagesTest$validateCheckSection has NPath complexity of 217","I'm trying to solve issue #56, it adds some functionality into NPathComplexityCheck, and now this check generates a single error for the checkstyle:  > /checkstyle/src/test/java/com/puppycrawl/tools/checkstyle/internal/XDocsPagesTest.java:301:5: NPath Complexity is 217 (max allowed is 200). [NPathComplexity]  After i got this message i checked that method complexity manually and got the same result, so it should be refactored.","closed","","attatrol","2016-02-13T18:44:43Z","2016-02-15T15:05:39Z"
"","2794","doc: Add sbt-checkstyle-plugin to list of active tools","I'm the author of sbt-checkstyle-plugin, an SBT plugin from running Checkstyle on Java files in an SBT project. I'd like to have it added to the list of related tools at http://checkstyle.sourceforge.net/index.html#Related_Tools.  I wasn't sure if this was the best way to go about adding it - let me know if there's something else I should do.","closed","","ajsquared","2015-12-31T18:24:56Z","2015-12-31T19:34:12Z"
"","2793","Add sbt-checkstyle-plugin to list of active tools","I'm the author of [sbt-checkstyle-plugin](https://github.com/etsy/sbt-checkstyle-plugin), an SBT plugin from running Checkstyle on Java files in an SBT project.  I'd like to have it added to the list of related tools at http://checkstyle.sourceforge.net/index.html#Related_Tools.  I wasn't sure if this was the best way to go about adding it - let me know if there's something else I should do.","closed","","ajsquared","2015-12-31T17:53:34Z","2015-12-31T18:24:29Z"
"","2803","Support LITERAL_SYNCHRONIZED token for NoWhitespaceAfter Rule","I would like to create a rule to make sure there is no space before the left param for synchronized, i.e. I would like to have the style `synchronized(this)` instead of `synchronized (this)` as this is common syntax. Adding the LITERAL_SYNCHRONIZED token to NoWhitespaceAfter(http://checkstyle.sourceforge.net/config_whitespace.html#NoWhitespaceAfter) would address this issue.   Problem is in set of Allowed tokens - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java#L102  See the discussion on the mailing list here, https://groups.google.com/forum/#!topic/checkstyle/cgNOY2uJDAY. ##","closed","new feature,","elingg","2016-01-05T23:35:54Z","2016-12-12T17:17:49Z"
"","2924","Support for LAMDA token in WhitespaceAround check","I would like to be able to configure the `WhitespaceAround` check to enforce whitespace around lambda tokens (e.g. `(o) -> o.toString()` instead of `(o)->o.toString()`).  Currently, the check's token property supports a subset of `TokenType`s that does not include `LAMDA`.  **Checkstyle Version** 6.15  **Check/Module** WhitespaceAround  **Code Snippet**  ``` java public static void main(String[] args) {     Function function = (o)->o.toString(); // Should fail as there's no space before/after ""->"". } ```  **Configuration**  ``` xml        ```","closed","approved,","jjlharrison","2016-02-16T15:34:39Z","2016-03-29T16:43:09Z"
"","2625","refactor internal tests","I wish to refactor the tests that test CS' internal configurations and xdoc files.  I plan to move XDocsPagesTest and AllChecksTest in their own folder, 'internal'. They test more the resources and internal files of CS, instead of testing direct functionality.  Both files use similar utility methods (Ex: `getCheckStyleChecksReferencedInConfig`), and have so many that they are starting to flood the test files. I plan to separate the utilities out into their standalone classes.  I plan to move xdoc tests from AllChecksTest to XDocsPagesTest (Ex: `testAllCheckstyleModulesHaveXdocDocumentation`) since they belong more with validating the xdocs.  Some methods are named 'test*' but don't have the test annotation. They should be called 'validate *' or something proper.","closed","miscellaneous,","rnveach","2015-11-18T18:54:56Z","2015-12-07T13:40:09Z"
"","2510","Issue 2292","I used ""toLowerCase"" for the compare because I didn't want 'W' coming before 'a'.  **New Requirements:** Checks must be in alphabetical order on each page. Content/Overview must be the first section.","closed","","rnveach","2015-11-03T02:06:05Z","2015-11-03T15:33:33Z"
"","2869","6.15 complains about missing @return tag in a overridden method","I upgrade from 6.14.1 to 6.15 and the following code  ```  /**  * @since 7.1M2  */ @Override public String toString() {     return prepareToString().append(""context"", this.executionContext.getProperties()).toString(); } ```  gives me the following error:  ``` Expected an @return tag. [JavadocMethod] ```  This looks like a bug to me since the each tag is supposed to be automatically copied when not set in an overridden method.","closed","approved,","tmortagne","2016-02-04T09:06:22Z","2016-02-21T01:53:10Z"
"","2800","doc: Update release notes for 6.14","I think that we removed just catch parameters validation here. By saying 'remove parameters validation' everyone would think 'method parameters'. Correct me if I'm wrong","closed","","mkordas","2016-01-04T21:07:16Z","2016-01-05T13:41:17Z"
"","2472","minor: removed exceptions not thrown","I ramped up eclipse' checking and violations showed up.","closed","","rnveach","2015-10-30T01:57:57Z","2015-10-30T12:06:43Z"
"","2471","minor: removed unnecessary cast","I ramped up eclipse' checking and violations showed up.","closed","","rnveach","2015-10-30T01:48:13Z","2015-10-30T12:06:46Z"
"","2250","@SuppressWarnings does not suppress missing Javadoc on inner class","I have this class:  ``` java /**  * This is an example class.  */ public class BackgroundExecutor {      @SuppressWarnings(""checkstyle:javadoctype"")     public static abstract class Task {     } } ```  and this rule file:  ``` xml                                        ```  When i run CS i get this output:  ``` $ java -jar checkstyle-6.11-all.jar -c checkstyle-checks.xml BackgroundExecutor.java  Starting audit... BackgroundExecutor.java:6: error: Missing a Javadoc comment. Audit done. Checkstyle ends with 1 errors. ```  But this is incorrect, since the `javadoctype` violation is suppressed by the annotation.","closed","approved,","WonderCsabo","2015-09-30T18:19:07Z","2015-12-08T14:01:07Z"
"","2110","Wrong level of method arguments list indentation","I have the following configuration:  TreeWalker.tabWidth = 4 TreeWalker.Indentation.basicOffset = 4 TreeWalker.Indentation.braceAdjustment = 0 TreeWalker.Indentation.caseIndent = 4 TreeWalker.Indentation.throwsIndent = 8 TreeWalker.Indentation.lineWrappingIndentation = 8 TreeWalker.Indentation.arrayInitIndent = 4  Checkstyle produces the error ""'int' have incorrect indentation level 3, expected level should be 9."" while checking the following code:  ```     public int addDTMService(String msisdn, String[] serviceNames, String offerName, String serviceCode, String accumName, long accumValue,             int autoSpeedUp, String serviceSpdn, String reasonCode, String sourceApp) throws CustomException     { ```  Why does it expect ninth level?  P.S. I use only tabs for indentation. ##","open","indentation,","Myllyenko","2015-09-04T16:01:41Z","2016-12-14T18:16:57Z"
"","2423","WhitespaceAround check reports error on variables starting with ""if""","I have a variable named `ifStatement` which is in a code generation library. The WhitespaceAround check reports that there should be a space after the ""if"", which is incorrect.  The LITERAL_IF check (and similar ones) should look instead for `if(` and if found report that there is a missing whitespace instead of looking for `if` followed by a non-whitespace character.","closed","","ndtaylor","2015-10-22T20:44:26Z","2015-11-02T05:25:12Z"
"","2284","NPE in SuppressWarningsHolder","I got a bug filed agains eclipse-cs (https://sourceforge.net/p/eclipse-cs/bugs/395/)  ``` java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder.isSuppressed(SuppressWarningsHolder.java:207)         at com.puppycrawl.tools.checkstyle.filters.SuppressWarningsFilter.accept(SuppressWarningsFilter.java:38)         at com.puppycrawl.tools.checkstyle.api.FilterSet.accept(FilterSet.java:88)         at com.puppycrawl.tools.checkstyle.Checker.fireErrors(Checker.java:353)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:271)         at net.sf.eclipsecs.core.builder.Auditor.runAudit(Auditor.java:159)         at net.sf.eclipsecs.core.builder.CheckstyleBuilder.handleBuildSelection(CheckstyleBuilder.java:300)         at net.sf.eclipsecs.core.jobs.RunCheckstyleOnFilesJob.runInWorkspace(RunCheckstyleOnFilesJob.java:116)         at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:38)         at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54) ```","closed","approved,","lkoe","2015-10-08T18:11:36Z","2016-03-21T17:25:12Z"
"","2474","NullPointerException in EqualsAvoidNull Check","I get a NullPointerException when running EqualsAvoidCheck on this file:  ``` java import java.util.EnumSet; import java.util.HashMap; import java.util.Map;  public enum NKKLaanType {     KONTANT_LAAN(1),     KONTANT_LAAN_EURO(101),     OBLIGATIONS_LAAN(2),     OBLIGATIONS_LAAN_EURO(201),     OBL_MIX_LAAN(21),     OBL_GRUNDFORBEDRINGSLAAN(22),     OBL_STAAENDE(23),     OBL_RENTEMAX(25),     OBL_RENTEMAX_EURO(251),     OBL_PAUSELAAN(26),     OBL_PAUSELAAN_EURO(261),     RESFL_RESERVEFONDSLAAN(3),     RESFL_SAELGERPANTEBREVE(31),     TILPASNINGSLAAN(4),     TILPASNINGSLAAN_EURO(401),     RENTE_TILPASNINGSLAAN(41),     INDEXLAAN(5);      private static Map lookup = new HashMap();      private int code;      static {         for (NKKLaanType s : EnumSet.allOf(NKKLaanType.class)) {             lookup.put(s.code, s);         }     }      private NKKLaanType(int intType) {         this.code = intType;     }      public static NKKLaanType get(String code) {         return lookup.get(Integer.valueOf(code));     }      public static NKKLaanType get(int code) {         return lookup.get(code);     }      public boolean isObligationsLaan() {         if (NKKLaanType.OBL_GRUNDFORBEDRINGSLAAN.equals(this) || NKKLaanType.OBL_MIX_LAAN.equals(this)             || NKKLaanType.OBL_PAUSELAAN.equals(this) || NKKLaanType.OBL_PAUSELAAN_EURO.equals(this) || NKKLaanType.OBL_RENTEMAX.equals(this)             || NKKLaanType.OBL_RENTEMAX_EURO.equals(this) || NKKLaanType.OBL_STAAENDE.equals(this) || NKKLaanType.OBLIGATIONS_LAAN.equals(this)             || NKKLaanType.OBLIGATIONS_LAAN_EURO.equals(this) || NKKLaanType.RESFL_SAELGERPANTEBREVE.equals(this)             || NKKLaanType.RESFL_RESERVEFONDSLAAN.equals(this)) {             return true;         }         return false;     }      public boolean isKontantLaan() {         if (NKKLaanType.KONTANT_LAAN.equals(this) || NKKLaanType.KONTANT_LAAN_EURO.equals(this)) {             return true;         }         return false;     }      public boolean isTilpasningsLaan() {         if (NKKLaanType.RENTE_TILPASNINGSLAAN.equals(this) || NKKLaanType.TILPASNINGSLAAN.equals(this)             || NKKLaanType.TILPASNINGSLAAN_EURO.equals(this)) {             return true;         }         return false;     }  } ```  with this checkstyle.xml  ``` xml                         ```  java -jar checkstyle-6.11.2-all.jar -c checkstyle_no_suppression.xml NKKLaanType.java  Exception in thread ""main"" java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.ge tFieldType(EqualsAvoidNullCheck.java:453)         at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.is CalledOnStringField(EqualsAvoidNullCheck.java:393)         at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.ch eckMethodCall(EqualsAvoidNullCheck.java:280)         at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.tr averseFieldFrameTree(EqualsAvoidNullCheck.java:262)         at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.tr averseFieldFrameTree(EqualsAvoidNullCheck.java:258)         at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.tr averseFieldFrameTree(EqualsAvoidNullCheck.java:258)         at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.fi nishTree(EqualsAvoidNullCheck.java:173)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyEnd(TreeWalker.java: 374)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:332)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker .java:203)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(Abst ractFileSetCheck.java:79)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:265)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:277)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:118)","closed","approved,","clausfod","2015-10-30T12:43:06Z","2015-10-31T21:53:36Z"
"","2855","Issue #325: Check placement of Javadoc comments in AbstractJavadocCheck","I generated checkstyle reports on all projects in project-to-test-on.txt by checkstyle-tester (there was only one Javadoc check, AtclauseOrderCheck, in config file). There is no any exceptions in reports.","closed","","baratali","2016-01-28T23:30:46Z","2016-01-29T23:33:38Z"
"","2096","Issue #2065: Add suppression for IntelliJ IDEA inspection as comment","I found one more way of suppressing inspections thanks to the answer for my question: http://stackoverflow.com/questions/32363262/intellij-idea-suppresswarnings-for-inspection-with-name-of-tool/  Is it better?  Javadoc remains clear: ![image](https://cloud.githubusercontent.com/assets/5467276/9668829/18f22788-5284-11e5-8232-3daaf993e616.png)","closed","","mkordas","2015-09-03T19:39:58Z","2015-09-03T20:27:36Z"
"","2062","Message in SummaryJavadocCheck","I don't understand what does it mean ""First sentence should be present."". Imagine you get it at 4 am by maven and try to find out what you should do.","closed","approved,","sabaka","2015-09-01T04:37:00Z","2015-09-04T13:08:23Z"
"","2609","Refactor gui package","I don't like current code. Let's try to do it more close to MVC. I'm going to add some proposals soon.","closed","miscellaneous,","sabaka","2015-11-17T00:03:46Z","2016-02-09T16:21:28Z"
"","2933","Issue #2904: fixed bad code in InputInnerAssignmentLambdaExpressions","I couldn't fix both lambdas. If left as is, Eclipse gave the error `Local variable pressed defined in an enclosing scope must be final or effectively final`. I was able to fix the second one, but the first one couldn't be fixed the same way as Eclipse gave the error `Syntax error on token(s), misplaced construct(s)`. I couldn't leave the original `boolean pressed = ...` outside the lambda because Eclipse gae the error `Lambda expression's local variable pressed cannot redeclare another local variable defined in an enclosing scope.`. Code coverage was not required for the first lambda.","closed","","rnveach","2016-02-18T00:05:14Z","2016-02-18T00:36:56Z"
"","2066","IllegalAccessError in Apache Commons library","I can't use CheckStyle at all (ver 6.9 nor 6.10); upon attempting to run it, I get an `IllegalAccessError`.  ``` Exception in thread ""main"" java.lang.IllegalAccessError: tried to access method org.apache.commons.cli.Options.getOptionGroups()Ljava/util/Collection; from class org.apache.commons.cli.DefaultParser     at org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:109)     at org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:76)     at org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:60)     at com.puppycrawl.tools.checkstyle.Main.parseCli(Main.java:140)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:74) ```","closed","","jonjesbuzz","2015-09-01T14:41:05Z","2015-09-01T20:01:37Z"
"","2221","Allow finishProcessing for Checks","I am trying to write a TreeWalker check that must do some final processing, and error reporting, after all the files have been processed. My check is: All non-abstract classes must be final if they are not inherited. I am implementing it by collecting all the classes, and their parents from the 'extends' clause, into 2 lists and finding which classes aren't in the other list.  Since this requires all files to be processed first, my only choices of overriding methods is ""destroy"" and ""finishProcessing"". ""destroy"" doesn't report any messages I print out using ""log"", and Check doesn't implement the ""finishProcessing"" method.  Going by the source: https://github.com/checkstyle/checkstyle/blob/2b4a02d2c8a498a8a1ee38e9396426209fa65fad/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L275 Errors are only reported after ""process"", and each ""FileSetCheck"" must implement its own reporting code if it wants to report errors in the ""finishProcessing"" method. Example: https://github.com/checkstyle/checkstyle/blob/c899af31c112c07ea1244f6bbe2c5c6c56818ae5/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java#L267  A TreeWalker check can't access ""getMessageDispatcher"", so it can't implement its own error reporting in the ""destroy"" method like TranslationCheck does. My only choices right now, is to make a second ""FileSetCheck"" that reports the errors my ""TreeWalker"" check finds, or to make only a ""FileSetCheck"" that redoes the java parsing that TreeWalker does for me.  It would make things easier if Check implemented the ""finishProcessing"" method, and allowed us to report errors after all the files are finished. ##","closed","","rnveach","2015-09-21T18:49:01Z","2016-11-10T22:11:18Z"
"","2218","NPE when running CS with cache with Maven plugin using NewlineAtEndOfFile","I am not sure this is the problem of the Maven plugin or CS itself.   I am seeing this stacktrace after executing `mvn checkstyle:check` twice:  ``` Caused by: java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder.isSuppressed(SuppressWarningsHolder.java:151)         at com.puppycrawl.tools.checkstyle.filters.SuppressWarningsFilter.accept(SuppressWarningsFilter.java:37)         at com.puppycrawl.tools.checkstyle.api.FilterSet.accept(FilterSet.java:88)         at com.puppycrawl.tools.checkstyle.Checker.fireErrors(Checker.java:360)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:275)         at org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:252)         at org.apache.maven.plugin.checkstyle.CheckstyleViolationCheckMojo.execute(CheckstyleViolationCheckMojo.java:538)         at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134) ```  This only happens when the `checkstyle-cachefile` file is present, from a previous execution. If i delete that file, i do not see this problem. Also if i remove the `NewlineAtEndOfFile` check, this crash does not happen.  I created a minimal example [project](https://github.com/WonderCsabo/CheckstyleIssue) which reproduces the issue.","closed","approved,","WonderCsabo","2015-09-20T18:57:55Z","2016-03-16T19:07:56Z"
"","2439","Issue #2421: enabling checking on it folder","I already prepared my branches by line numbers. I found this easier since I didn't have to figure out the specific checks too ignore.  went to line 40. added test suspensions to it. removed all trailing spaces.","closed","","rnveach","2015-10-24T23:22:22Z","2015-10-25T01:53:36Z"
"","2825","Use Distelli CI for testing of Javadoc Checks","https://www.distelli.com/pricing  https://www.distelli.com/docs/reference/build-language-reference#java https://www.distelli.com/docs/tutorials/java-on-ubuntu-tutorial https://www.distelli.com/docs/reference/distelli-distelliyml-usage  Right now for performance reasons we do not do testing for any Javadoc checks that are already use ANTLR parser. We do not use old regexp based Checks only because on real projects they are too buggy (a lot of exceptions).  Todo: reuse checkstyle-tester abilities to test at least Javadoc Check that are based on ANTLR. If there is project where Javadoc Checks based on regexp are not crashing - we could test even them.","closed","miscellaneous,","romani","2016-01-15T13:54:20Z","2017-07-08T00:29:36Z"
"","2665","problem with Travis build ""assembly & run '-all' jar""","https://travis-ci.org/checkstyle/checkstyle/jobs/94940149#L99  ``` $ export CMD7="" && cat output.log | grep 'warning|(Audit done.)' | if [[ \"" /home/travis/build.sh: eval: line 45: unexpected EOF while looking for matching `""' /home/travis/build.sh: eval: line 46: syntax error: unexpected end of file ```","closed","miscellaneous,","romani","2015-12-05T12:47:55Z","2015-12-05T22:51:53Z"
"","2196","Issue #2195: Remove errors from Maven output in TokenTypesDocletTest","https://travis-ci.org/checkstyle/checkstyle/jobs/80743904#L607-L608","closed","","Vladlis","2015-09-16T23:26:35Z","2015-09-24T14:55:36Z"
"","2599","Create ITs base on jar that generated during package phase","https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#A_Build_Lifecycle_is_Made_Up_of_Phases , ""integration-test"" is right after ""package""  We need to create tests that do validate all jars that we generate during package phase and also ""....-all.jar"".  Base on discussion at: https://github.com/checkstyle/checkstyle/pull/2570#issuecomment-155629508 , base on problem #2516 ,  #1267 , #2504 ##","open","approved,","romani","2015-11-13T01:53:21Z","2017-02-13T01:16:18Z"
"","2965","DOXIA-525 - Rendering links in xdocs breaks them - is fixed","https://issues.apache.org/jira/browse/DOXIA-525  is fixed, lets try to use workaround that mentioned in this issue. See suppression in our pom.xml for ""DOXIA-525"" ##","closed","easy,","romani","2016-02-24T14:29:36Z","2018-08-04T16:32:07Z"
"","2661","Enforce Checks of sevntu.checkstyle (released version) over Checkstyle source code","https://github.com/sevntu-checkstyle/sevntu.checkstyle  0) we need to use strict released version. 1) we might need to use maven extension of sevntu and integrate it to our ""mvn verify"" phase 2) We need to try to apply all Checks that we have in sevntu. But it is ok to skip some of them (some of them are not ready)  that issue should be done in several PRs, each PR for each Check.","closed","miscellaneous,","romani","2015-12-04T14:12:36Z","2015-12-25T17:43:09Z"
"","2530","Code review of CommentsIndentationCheck.java","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java  @MEZk ,  1)   > private static DetailAST getDistributedPreviousStatementOfSingleLineComment( >             DetailAST comment) {  make it single return  2)  > handleSingleLineCommentInEmptyCaseBlock() > handleFallThroughtSingleLineComment() > handleSIngleLineCommentAtTheEndOfTheCodeBlock() > handleSingleLineCommentInEmptyCodeBlock()  does it make sense to move ""log"" to upper level call stack to consolidate ""log"" in one method ? that would require splitting handleSingleLineCommentInEmptyCodeBlock into two methods","closed","miscellaneous,","romani","2015-11-04T23:27:24Z","2015-11-19T23:15:29Z"
"","2092","Activate Translation Check in checkstyle_checks.xml","https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L378  that Check should be activated, missed translation should be added.","closed","approved,","romani","2015-09-03T13:26:05Z","2015-09-05T18:41:16Z"
"","2427","JavaDoc checks missing customizable JavaDoc tokens","https://github.com/checkstyle/checkstyle/blob/fff24e89001ce2ad9c30d1f573639cd640183669/src/xdocs/config_javadoc.xml#L978  CS' documentation makes reference to customizing what JavaDoc tags the checks process. The issue is the checks actually do not support this feature currently.  When trying the example above, I get the following exception:  > CheckstyleException: Property 'target' in module NonEmptyAtclauseDescription does not exist  AbstractJavadocCheck should have the following methods: getJavadocTokens , getRequiredJavadocTokens, getAcceptableJavadocTokens  This Check need to be updated to have properly named option for tokens: https://github.com/checkstyle/checkstyle/blob/eeec3dc1d23916462560403a27a4ae94260d61f3/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java#L90 ##","closed","high demand,","rnveach","2015-10-23T15:45:06Z","2016-11-11T13:55:51Z"
"","2802","minor: DS_Store file has been added to .gitignore","https://en.wikipedia.org/wiki/.DS_Store","closed","","sabaka","2016-01-05T23:02:21Z","2016-03-07T00:26:43Z"
"","2727","Use Codeship CI for testing","https://codeship.com/documentation/docker-integration/java/  We need to setup 3-4-N sub-builds(matrix elements) in CI to test JDK sources by checkstyle-tester in groups to let each launch finish in 15min (or level of Codeship). We need to make sure that Codeship has the same integration with Github to notify us on any failures (ERROR level).  That will let us avoid problems like - #1109 (comment) ,  We already did that in Travis, the only missed point is testing over JDK. Sources of JDK are huge so we need to find a way to split them in chunks and do the testing part by part.  Note: due to java grammar problem we can not use jdk8-9 , we can parse only jdk7. For details please see all issues with ""ANTLR"" label.","closed","miscellaneous,","Vladlis","2015-12-16T21:12:09Z","2016-01-18T18:31:46Z"
"","2460","Test more project on drone.io","https://cloud.drone.io/  Drone.io implemented matrix items, so we can reuse it as additional testing platform: http://readme.drone.io/build/matrix.html  It is required to review all java projects from http://www.yegor256.com/txt/2015/award-2015.txt that use checkstyle by maven plugin or gradle plugin. Choose candidates that enforce checkstyle in its build process and use them as we use Orekit project to catch regression - https://github.com/checkstyle/checkstyle/blob/master/.travis.yml#L63 .  Alternatively we could find usage of us by https://github.com/search?l=maven-pom&q=%22maven-checkstyle-plugin%22&type=Code&utf8=%E2%9C%93  Validation on project should NOT be very long, it is better to choose projects with interesting code style and biggest amount of Checks.  Drones launch should not be bigger then launch of Travis. ##","closed","CI,","romani","2015-10-27T14:35:09Z","2022-05-08T02:56:04Z"
"","2813","JavadocTagContinuationIndentation doesn't report some lines","https://checkstyle.org/config_javadoc.html#JavadocTagContinuationIndentation  TestClass.java  ``` package test;  public class TestClass {     /**      * Desc.      *       * @param s      * Desc. Line 8.      * Desc 2.      * Desc 3.      *                         Desc 4. Line 11. violation is expected      */     public void test(String s) {     } } ```  config.xml  ```                                         ```  output from: `java -jar checkstyle-6.14.1-all.jar -c config.xml TestClass.java`  ``` Starting audit... [ERROR] TestClass.java:9: Line continuation have incorrect indentation level,      expected level should be 4. [JavadocTagContinuationIndentation] [ERROR] TestClass.java:10: Line continuation have incorrect indentation level,       expected level should be 4. [JavadocTagContinuationIndentation] Audit done. Checkstyle ends with 2 errors. ```  Expected **extra** output:  ``` [ERROR] TestClass.java:8: Line continuation have incorrect indentation level,      expected level should be 4. [JavadocTagContinuationIndentation] [ERROR] TestClass.java:11: Line continuation have incorrect indentation level,      expected level should be 4. [JavadocTagContinuationIndentation] ```  I am unsure if line 8 is considered a ""continuation"" line, since it is technically the first of the description. I, however, still expect it to be indented correctly, as if it was a continuation line, since it is starting on a new line from its `param` tag and it will look nicer to have it at the same indentation as the following lines. If it not being indented, or placed where ever wanted, is expected and correct behavior, then it should be explained in the xdocs atleast.  Line 11 will be handled in https://github.com/checkstyle/checkstyle/issues/8182 .","closed","easy,","rnveach","2016-01-08T21:51:52Z","2020-05-03T13:40:36Z"
"","2410","JavadocStyleCheck: need to support VAR html tag","http://www.w3.org/TR/html4/struct/text.html#edef-VAR  please add tag to supported list https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java#L75 ##","closed","easy,","romani","2015-10-21T21:17:08Z","2020-03-04T14:00:40Z"
"","2535","Issue #1930: Improve EqualsAvoidNull check","http://vladlis.github.io/reports/ean/ - report against sevntu-checkstyle, guava, pmd, lombok-ast, spring-framework, hibernate-orm, elasticsearch, Hbase, Orekit. All new violations are confirmed.","closed","","Vladlis","2015-11-05T22:57:23Z","2015-11-06T21:41:28Z"
"","2579","add support for Lombok private constructor","http://jnb.ociweb.com/jnb/jnbJan2010.html https://projectlombok.org/api/lombok/NoArgsConstructor.html https://projectlombok.org/features/Constructor.html  ``` /var/tmp $ cat Test.java  import lombok.AccessLevel; import lombok.NoArgsConstructor;  @NoArgsConstructor(access = AccessLevel.PRIVATE) //","closed","easy,","Schattensilber","2015-11-11T11:40:12Z","2019-10-07T16:09:07Z"
"","2809","google_checks.xml : NO space is allowed method method name and its arguments","http://checkstyle.sourceforge.net/reports/google-java-style.html#s4.6.2-horizontal-whitespace  > Beyond where required by the language or other style rules, and apart from literals, comments and Javadoc, a single ASCII space also appears in the following places only.  main point is ""a single ASCII space also appears in the following places **only**""  Nothing is mentioned about method names and arguments in followed list, so NO space is allowed. We had a Check to validate this - http://checkstyle.sourceforge.net/config_whitespace.html#MethodParamPad It should be used to cover ""4.6.2"" point  MethodParamPad is not used at all in google style.  it should prevent code like :  `foo ( param1, param2 )`  ##","closed","new feature,","romani","2016-01-08T14:52:10Z","2016-12-11T18:26:20Z"
"","2975","all rows in coerage table google_style.html shoudl have anchor","http://checkstyle.sourceforge.net/google_style.html  anchor should be for each line, we need to be able to share direct link event to items that could not be covered.","closed","miscellaneous,","romani","2016-02-26T17:56:31Z","2016-03-03T15:53:45Z"
"","2108","split all modules to be separate at config_naming.html","http://checkstyle.sourceforge.net/config_naming.html Almost all modules are described at the same table, but should be described as all other modules - separately. Even that modules are almost the same by description they should be seprate.  Reasons:  - right now there is now way to send link to that exact module - http://checkstyle.sourceforge.net/google_style.html , ""MethodName"" reference to page not a exact module - even Checkstyle developers are confused https://github.com/checkstyle/checkstyle/pull/2104#issuecomment-137673320  Todo: split to separate modules, update google_style.html and ""Examples of Usage"".","closed","approved,","romani","2015-09-04T12:43:17Z","2015-09-16T04:00:35Z"
"","2779","new GloballyUniquePropertiesCheck: should allow a unique check across all properties files","http://checkstyle.sourceforge.net/config_misc.html#UniqueProperties  Rationale: Sometimes, the codebase provides a global helper class to get properties' values. This class reads all properties files from a directory. In such cases, duplicate keys across files will clash with each other.  Although I think that most users might actually just want to limit this option across a single directory. i.e. Check for unique keys in all property files which reside in the same folder. ##","open","","grssam","2015-12-27T21:16:27Z","2016-12-14T18:16:46Z"
"","2507","add example to DescendantToken for catching ASSIGN under EXPR token","http://checkstyle.sourceforge.net/config_misc.html#DescendantToken  please add example of forbidding ASSIGN at expressions. Requested at https://sourceforge.net/p/checkstyle/feature-requests/539/  ``` /var/tmp $ java -jar checkstyle-6.12-SNAPSHOT-all.jar -c 3.xml   3.java Starting audit... /var/tmp/3.java:5:9: error: Count of 1 for 'EXPR' descendant 'ASSIGN' exceeds maximum count 0. Audit done. Checkstyle ends with 1 errors.  /var/tmp $ cat 3.java  package test;  class Test {     Inpu boo() {         if (a = 1) {}     } }  /var/tmp $ cat 3.xml                                                 ```","closed","approved,","romani","2015-11-02T06:43:54Z","2015-12-08T20:39:14Z"
"","2424","minor: fixed invalid xml example","http://checkstyle.sourceforge.net/config_misc.html#CommentsIndentation  fixed invalid example:  ```  ```","closed","","rnveach","2015-10-23T01:44:45Z","2015-10-23T15:23:01Z"
"","2935","ImportControl: improve xdoc documentation","http://checkstyle.sourceforge.net/config_imports.html#ImportControl  > It contains documentation on each of the elements and attributes.   It is required to inline them to html. It is required to give example for each attribute and human explanation what is expected to be validated.  > which is part of the Checkstyle distribution.   distribution --> code   >  https://github.com/checkstyle/checkstyle/blob/master/config/import-control.xml  change to use all attributes of ImportControl Check in this file put comments to explain a meaning. ##","open","miscellaneous,","romani","2016-02-18T14:07:38Z","2018-04-20T21:25:06Z"
"","2453","Unable to access samePackageMatchingDepth in CustomImportOrder","http://checkstyle.sourceforge.net/config_imports.html#CustomImportOrder  We document the property ""samePackageMatchingDepth"" but we don't have a ""setter"" method that the users can use.  We should create a setter, and remove the hard coded ignore in XDocsPagesTest.","closed","approved,","rnveach","2015-10-26T17:20:53Z","2015-10-28T18:30:18Z"
"","2804","SuppressionFilter: add suppression by message","http://checkstyle.sourceforge.net/config_filters.html#SuppressionFilter  I would like an option in the ""suppression.xml"" to suppress specific messages of a check.  Currently I am trying to extend my javadoc collection. I know alot of them don't exist, but I still want to validate the ones that do exist. Most of the javadoc checks, like JavadocTypeCheck, report multiple errors including that the javadoc is missing. To prevent my console from being flooded with missing errors, I would like to suppress them, however ""suppressions.xml"" only supports suppressing the check as a whole and not the individual errors it reports. The only option currently is to suppress the check as a whole and hide errors with existing javadocs, which I don't think is a good idea. Or show all errors and try to weed out the 'missing' errors manually, which can be a pain when there are alot.  My example suppressing javadoc is missing message from all checks:  ```        ```  With this suppression and my config containing ""JavadocTypeCheck"", I expect to see no errors reporting my javadoc is missing (javadoc.missing), and expect to see other errors like a tag is missing (type.missingTag). ##","closed","medium,","rnveach","2016-01-06T19:15:57Z","2017-12-30T15:58:58Z"
"","2362","RequireThis: new option validateOnlyOverlapping","http://checkstyle.sourceforge.net/config_coding.html#RequireThis This is Check is non-usable in modern world, to make it applicable we need to update  it with option validateOnlyOverlapping with TRUE by default. It is ok to brake compatibility to let this Check be used by all, and only by minority.  It is used a lot https://github.com/search?l=xml&q=RequireThis&type=Code&utf8=%E2%9C%93  If TRUE, Check demand ""this."" to be present in methods there overlapping by validables or arguments take place.  Example:  ``` class Test {     private String value = ""value"";      void foo(String value) {             value = value; // violation     }      void foo1() {         String value = ""values"";         value = value; // violation     }      void foo2(String value1) {         value = value1; // OK     }  } ```  this example gives no warnings or errors by ""javac Test.java"".  Activate Check in our config after fix : https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L355","closed","new feature,","romani","2015-10-16T05:55:06Z","2016-03-04T14:35:18Z"
"","2399","ExplicitInitialization: new property 'onlyObjectReferences'","http://checkstyle.sourceforge.net/config_coding.html#ExplicitInitialization  Imo it's useful to assign default values to primitive member variables and I normally don't care if people do so. e.g.  ``` java private int a = 0; private int b = 1; private int c = 2; // ... private boolean a = true; private boolean b = false; private boolean c = true; private boolean d = false; private boolean e = false; ```  However, I don't see any advantages assigning null to members. e.g.  ``` java private A a = new A(); private A b = null; private C c = null; private D d = new D(); ```  Maybe it's worth a new option?  Off-Issue: A stackoverflow topic about ""Why are Explicit Initiallizations of the default value bad?"" http://stackoverflow.com/questions/19939118/why-are-explicit-initiallizations-of-the-default-value-bad ##","closed","easy,","robertwhitebit","2015-10-20T15:54:27Z","2017-05-28T23:53:37Z"
"","2889","MissingDeprecated should have an option to ignore elements without JavaDoc","http://checkstyle.sourceforge.net/config_annotation.html#MissingDeprecated  MissingDeprecated currently will trigger for cases when an element is marked @Deprecated but it does not have any JavaDoc. Since Javadoc could be optional (based on the rule set) I think it would make sense to add an option to MissingDeprecated to allow it to ignore cases when JavaDoc is missing, but still warn when JavaDoc is present but either @deprecated is missing from JavaDoc or @Deprecated is missing from the element.  Checkstyle version: 6.15  Check/Module: MissingDeprecated  Code snippet:  ``` @Deprecated public static final int MY_CONST = 123456; ```  Expected: User of Checkstyle should be able to skip elements with @Deprecated tag if they do not have Javadoc.  This new property for MissingDeprecated could be called `skipNoJavadoc`, default value is `false` to be compatible with previous implementation.  ```       ```","closed","new feature,","liutikas","2016-02-08T18:52:11Z","2016-02-17T13:50:08Z"
"","2185","ant with failOnViolation=""false"" will FAIL","http://checkstyle.sourceforge.net/anttask.html  If I use   ``` xml                                                                                           and run  ant checkstyle I get: BUILD FAILED ```","closed","miscellaneous,","hchan","2015-09-15T04:54:41Z","2016-02-16T16:36:53Z"
"","2861","Parse error of Java 8 code using generic type with double-colon operator","Hi:  I got a parse error for the code below.  The parsers complains with: `Test.java:8:22: expecting RPAREN, found '","closed","","smarr","2016-02-01T12:09:53Z","2016-02-05T14:12:37Z"
"","2219","NoWhitespaceAfter, NoWhitespaceBefore and WhitespaceAround don't support GENERIC_START nor GENERIC_END tokens","Hi, recently I've upgraded from CS 5.8 to 6.10.1 and I'm experiencing the problem mentioned in $subj - we have been using this rules-token combination for eternity and now we must upgrade to CS ver. 6 (because of Java 8).  I wonder if this is a regression (seems that was a lot of refactoring regarding acceptable tokens, like in #342) or an intended behavior (the documentation says that this combination is not valid, but I don't see any note about it in changelog). What do you think?  (PS, I tried using GenericWhitespace rule, but it produces a lot of new violations for our codebase. And unfortunately it is too strict and can't be configured.)","closed","approved,","hustodemon","2015-09-21T07:29:09Z","2015-09-22T06:13:30Z"
"","2514","Update messages_ja.properties.","Hi,  I would like to revise this messages because it sounds unnatural in Japanese. I would be happy if you accept my proposal. I believe that multi-byte characters should be represented as Unicode escape in property files. I wrote messages as Unicode Escape. I am going to revise other message files and propose them in future.  In case of checking my proposal, I wrote the above messages as Japanese, not Unicode escape. --- begin--- annotation.missing.deprecated = java.lang.Deprecated アノテーションの指定と Javadoc に @deprecated タグの両方を記述する必要があります。 annotation.missing.override = '{' @inheritDoc '}' が Javadoc タグがあるときには、 java.lang.Override アノテーションを指定する必要があります。 annotation.not.valid.on = この場所で {0} アノテーションは有効ではありません。 annotation.incorrect.style = アノテーションの書式は ''{0}'' でなければなりません 。 annotation.trailing.comma.missing = アノテーションの配列値はカンマを末尾に含める必要があります。 annotation.trailing.comma.present = アノテーションの配列値の末尾をカンマにすることはできません。 annotation.parens.missing = アノテーションは閉じ括弧を持っている必要があります。 annotation.parens.present = アノテーションは閉じ括弧を持つことはできません。 annotation.package.location = パッケージアノテーションは package-info.java に書かれるべきです。 suppressed.warning.not.allowed = この場所で、警告 ''{0}'' を抑制することはできません。 javadoc.duplicateTag = {0}タグが重複しています。 javadoc.missing = Javadoc コメントがありません。 tag.not.valid.on = この場所で、Javadoc の{0}タグは有効ではありません。 annotation.location = アノテーション ''{0}'' は、不正なインデントレベル {1} です。 期待されるレベルは {2} です。 annotation.location.alone = アノテーション ''{0}'' は行に一つであるべきです。 --- end ---  Best regards, Nobuyuki Inaba","closed","","Nobuyuki-Inaba","2015-11-03T13:04:46Z","2015-11-04T14:24:18Z"
"","2728","JavaNCSSCheck: unknown format type: numero inteiro","Hi guys,  Please, could someone help me on this?  Working with Checkstyle plugin 2.4 on Sonar 5.2, we found something that looks like a bug. Apparently, one of our (big) Java classes presents some scenario that is not being correctly handled by Checkstyle. When Checkstyle runs over a specific Java class, it fails with the following exception:  ``` ERROR: Error during Sonar runner execution ERROR: Unable to execute Sonar ERROR: Caused by: Can not execute Checkstyle ERROR: Caused by: Exception was thrown while processing /path/to/class/FooBar.java ERROR: Caused by: String index out of range: -1 ```  Due to the complexity of the class, we weren't able to spot exactly what causes this error. Has anyone experienced something similar yet?","closed","approved,","snepcadep","2015-12-17T11:17:23Z","2016-03-07T16:14:42Z"
"","2094","StringIndexOutOfBoundsException: String index out of range: -1","Hi all,  With Github version, checking a file with the below JavaDoc (notice the 'period'):  ``` /**  * .  * @throws Exception if an error occurs  */ ```  with the command:  ``` >java -jar checkstyle-6.11-SNAPSHOT-all.jar -c sun_checks.xml MyTest.java ```  throws an error:  ``` Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: String inex out of range: -1     at java.lang.AbstractStringBuilder.charAt(Unknown Source)     at java.lang.StringBuilder.charAt(Unknown Source)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.triTail(JavadocStyleCheck.java:317)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.getommentText(JavadocStyleCheck.java:271)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.chekFirstSentenceEnding(JavadocStyleCheck.java:231)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.chekComment(JavadocStyleCheck.java:208)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.vistToken(JavadocStyleCheck.java:149)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.jaa:392)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.jaa:503)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:334)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalke.java:209)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbsractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:265)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:271)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:121) ```","closed","approved,","asashour","2015-09-03T18:50:54Z","2015-09-05T22:24:38Z"
"","2999","ImportControl: allow regex in subpackage elements.","Hi all,  at the moment it is not possible to use the same import control configuration for multiple subpackages.   What I need to do is this:  ```                                     ```  This way, the package control configuration for the service subpackage would match all modules at once, like de.main.mod1.service as well as de.main.mod2.service and so on. If someone creates a mod3 module, then the configuration would still work.  I couldn't get it to work, as wildcards and regex are only valid on allow or disallow elements right now.  For this, a new attribute might need to be created for the ""subpackage"" element: ""regex""=""true/false"". That is required to be consistent with the design of  the ""allow"" element.  This will mean that http://www.puppycrawl.com/dtds/import_control_1_1.dtd must be changed to version 1.2 as well.  Thanks for any help on this, best regards Daniel","closed","new feature,","effjay","2016-03-03T12:05:50Z","2016-10-19T08:12:51Z"
"","2054","Fix all issues found by Codacy static analysis tool","Here's current status: [![Codacy Badge](https://api.codacy.com/project/badge/3adf12d434314ba8b38277ea46d3c44b)](https://www.codacy.com/app/kontakt/checkstyle)","closed","approved,","mkordas","2015-08-31T20:30:55Z","2015-09-10T12:54:18Z"
"","2188","Reduntant modifier on inner class constructor inside interface","Here's code example:  ``` public interface Keys {     Key add(Add add);      Optional find(Find find);      List findKeys(Find find);      class Find {         private final String key;          public Find(final String key) {             this.key = key;         }          public String getKey() {             return key;         }     } } ```  I get `Redundant 'public' modifier` on line with `public Find(final String key) {`, which is not correct because without public I can't construct the inner class.","closed","approved,","krzyk","2015-09-15T07:33:58Z","2015-09-18T13:21:42Z"
"","2357","checkstyle doesn't work with the prebuilt google_checks.xml","Hello there!  We have run into a problem recently when checkstyle was refusing to work with the prebuilt google_checks rules. checkstyle passed all checks even though there were a lot of code style violations. After a short investigation we noticed that google_checks.xml contained the following line:  ``` xml  ```  We decided to move the google_checks.xml file from the jar to the project's resource folder, comment that line and point maven-checkstyle-plugin to this xml file. As a result, we got a bunch of errors which checkstyle found after the check goal.  Here's a maven plugin configuration that we're using with checkstyle plugin:  ``` xml                              org.apache.maven.plugins                 maven-checkstyle-plugin                 2.16                                                               checkstyle                         validate                                                      check                                                                               src/main/resources/google_checks.xml                             true                                                                                                                              com.puppycrawl.tools                         checkstyle                         6.11.2                                                    ```  It seems that google_checks was broken from the beginning.","closed","","maseev","2015-10-15T09:54:29Z","2015-10-15T17:23:19Z"
"","2404","constructor String(byte bytes[], String charsetName) should not throw IllegalInstantiation","Hello everybody,   I'm using the  following code to read a file into a string (`java.nio.file.Files`) :   ``` java return new String(Files.readAllBytes(file.toPath()), StandardCharsets.UTF_8); ```  This should be accepted, as there is to my knowledge no other way to instantiate a String from a byte array, but checkstyle gives the following error `(coding) IllegalInstantiation: Instantiation of java.lang.String should be avoided.`  what is your opinion ? shouldn't an exception be added for that constructor ?  thanks","closed","","swisstofu","2015-10-21T08:51:12Z","2015-11-06T14:04:21Z"
"","2187","IT : Google Style naming convention","Google use lower Camel case for varaible and member names (see 5.2.5 Non-constant field names 5.2.6 Parameter names, 5.2.7 Local variable names) but in rules you uses ""^[a-z][a-z0-9][a-zA-Z0-9]_$"" format insteed of ^[a-z][a-zA-Z0-9]_$  so xMargin or yPos will be a wrong parameter name","closed","","altair2010","2015-09-15T07:11:14Z","2015-09-20T13:35:19Z"
"","2111","GenericWhiteSpaces Giving wrong validation error","GenericWhiteSpaces validation is giving the: '>' is followed by an illegal character. To a valid syntax.  extends SomeClass<E>implements GenericDao<E>  SomeClass<E>implements  Does not have spaces in between then and this is a valid syntax to the compiler (although it is ugly, but I found out that it is a bug on eclipse mars formatter, can't get rid of it)","closed","","jjcampos","2015-09-04T17:38:08Z","2015-09-04T19:34:37Z"
"","2516","Create test for checkstyle-X.X-all.jar on Travis","From: #1267 , #2504  Task is not simple to be done in scope of ITs as generation of ""checkstyle-X-X-all.jar"" is not done by maven cycles and simple maven generation of jars. It is done by special command ""mvn -Passembly clean package"" but ITs are intended to test what is generated by maven before deploy them to maven central. We could create Travis build item to build ""......-all.jar"" and test it, but it will be pure shell commands.  We need one command that use all options of CLI and get config from generated jar by maven build.","closed","miscellaneous,","romani","2015-11-03T14:03:59Z","2015-11-13T01:46:26Z"
"","2412","JavadocStyle: generates false ""Unclosed HTML tag"" when inner comment is used","From SourceForge: Created: 2009-04-20 Creator: Toby Byron   This fragment of javadoc  ```     *      *  it must take no arguments (the current command line interface is too crude to pass any in)                  *  it must not have private access (recommendation: for simplicity, use default access)     *  ```  causes the JavadocStyle check to report a false problem:     Unclosed HTML tag found: `` If I remove the html comment which occurs after the first `` tag, then the error is not reported.  Clearly, the JavadocStyle check is tripping up over the html comment.","closed","javadoc,","romani","2015-10-21T21:34:21Z","2015-11-01T05:02:02Z"
"","2411","JavadocStyle: false ""end with a period"" reports when inheritDoc is used","from SourceForge: Created: 2009-04-20 Creator: Toby Byron   ``` /var/tmp $ java -jar checkstyle-6.11.2-all.jar -c 3.xml 3.java Starting audit... /var/tmp/3.java:1: error: First sentence should end with a period. Audit done. Checkstyle ends with 1 errors.  /var/tmp $ cat 3.xml                           /var/tmp $ cat 3.java  /** * {@inheritDoc} *  * @throws IllegalArgumentException with errMsg as its message */ public class Foo { } ```  Expected: no violations for first sentence.","closed","javadoc,","romani","2015-10-21T21:29:46Z","2015-10-31T22:00:31Z"
"","2413","JavadocStyle:  problem with inline tags that contain non-escaped HTML symbols","from SourceForge: Created: 2009-03-27 Creator: Ralf   Something is wrong with the JavadocStyleCheck regarding unclosed HTML-tags.  ```   /**    * Test.    *     *     * FALSE POSITIVE: {@code List}. {@literal List}     *     *     * MISSED: List    *     *     * OK: {@code List}.     *     *     * UNCLOSED: bold    *     */ ```  FALSE POSITIVE: Text inside `{@code }` and `{@literal }` must not be treated as HTML. (also see bug 1524767)  MISSED: If you generate Javadoc from the comment, `` will be copied verbatim to the output html file. In Firefox, IE or the Javadoc-Preview of Eclipse the unknown Tag `` will not be displayed. So this should be reported by checkstyle.  OK: I guess this is only accepted, as ""String"" is not a valid HTML tag. UNCLOSED: correctly detected It looks like JavadocStyle only reports tags as unclosed, if they are known HTML tags. ##","open","javadoc,","romani","2015-10-21T21:42:22Z","2017-09-02T22:23:59Z"
"","2229","Cyclomatic complexity of switch with fallthrough error","from SourceForge issue 471 checkstyle computes the cyclomatic complexity of this method to be 16, I believe it should be 2, as the cases should all be one node.  ```   public static void switchTest(){     int i=0;     switch(i){     case 0:     case 1:     case 2:     case 3:     case 4:     case 5:     case 6:     case 7:     case 8:     case 9:     case 10:     case 11:     case 12:     case 13:     case 14:       break;     }   } ```  Normand Rivard 2007-06-01  I disagree with this. The proof is that it would take 16 test cases to prove the code is working fine. Technically speaking, the code can (and probably is) compiled into a set of 15 decisions.  On the other hand, since i is initialized with 0 at the top, all the other cases should be considered dead code, but that is a different story.  deusi 2008-02-21 I disagree on the disagree ;-)  To speak in terms of ""test cases"" - yes, there might be at last 16 different test cases. But cyclomatic complexity does not count test cases but test paths (please have a look for all the McCabe Cyclomatic Complexity documents on the web). The ""cc"" is based on graph theory and this example only has a ""cc"" of 2. Just think of a flowchart where ""case 0"" to ""case 14"" all are in one line and all lead to one node at the end. The flowchart would look like one for an IF-ELSE-statement. Furthermore, if you leave the ""break"" the ""cc"" would be still 2. The flowchart would look like one for an IF-statement. ##","open","","romani","2015-09-24T01:42:51Z","2016-12-14T18:16:43Z"
"","2620","RedundantModifier if transient on final field","from SourceForge 598 ""RedundateModifier if transient on static or final field "" Created: 2012-04-17 Creator: Daniel Holmes   http://checkstyle.sourceforge.net/config_modifier.html#RedundantModifier  http://www.xyzws.com/Javafaq/can-transient-variables-be-declared-as-final-or-static/0 This article shows that usage of ""final"" and ""static"" on transient fields doe snot make sense.  For ""static"":  >  To serialize data stored in a static variable one must provide class-specific serialization.  So it is possible by custom ""writeObject"" and ""readObject"", and up to a user. We could make special Check for this, as it might be bad practice.  For ""final"":  > Now, when you deserialize the class your logger will be a null object, since it was transient. Then you should initialize the logger manually after serialization or during the serialization process. But you can't, because logger is a final member as well. >   There is just one exception to this rule, and it is when the transient final field member is initialized to a constant expression as those defined in the JLS 15.28.   So in general it is possible to catch and it is pure mistake that we might need to catch by this Check. In chekstyle we could distinguish Constant Expreessions https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.28 even we are not Type aware tool. ##","open","","romani","2015-11-18T14:51:29Z","2016-12-14T18:17:09Z"
"","2145","Issue 46: public static final empty array has been replaced with getter, which returns the new one each time.","From sonar: ""Public arrays, even ones declared static final can have their contents edited by malicious programs. The final keyword on an array declaration means that the array object itself may only be assigned once, but its contents are still mutable. Therefore making arrays public is a security risk.  Instead, arrays should be private and accessed through methods.""  Actually there is no difference between public array or getter for private one -  anyone can change elements inside array. (not in case when array length is 0 obviously, but I had PMD warning here). So I decide to replace it with method, which returns the new one each time.","closed","","sabaka","2015-09-09T00:56:43Z","2015-09-16T23:08:09Z"
"","2406","VisibilityModifierCheck false negative on full class path","From CS' source: https://github.com/checkstyle/checkstyle/blob/6a8584adbd9ad33ae2b89c0deb6481f62dd14257/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java#L216  The test has the annotation package as ""com.puppycrawl.tools.checkstyle.AnnotatedVisibility.CustomAnnotation"" but we recently moved it to a new location and it should be ""com.puppycrawl.tools.checkstyle.**checks.design**.AnnotatedVisibility.CustomAnnotation"".  We did not update the test for the new package name, but it still passed. It should be a failure since we gave it the full package name, and that package doesn't appear anywhere in the input file so fields like ""customAnnotatedPublic"" should have been alerted as an error. ##","open","","rnveach","2015-10-21T14:32:06Z","2016-12-14T18:16:44Z"
"","2446","Indentation check is incorrect on inner annotations","For example  ``` class A {     @interface B {         int C = 4;     } } ```  fails and checkstyle demands for field C to be at indentation 4, not 8. ##","closed","indentation,","jakubadamek","2015-10-25T20:43:57Z","2020-03-25T19:51:33Z"
"","2135","NeedBraces: NPE crash","For a Java file 'Test.java':  ``` java public class StateInfo {     public boolean isInitial() {         for (int loc: srcLocs) if (loc != 0) return false;         return true;     } } ```  with Checkstyle configuration 'checkstyle.xml':  ``` xml                                ```  Checkstyle 6.10.1 crashes with a NullPointerException:  ``` $ java -jar ../checkstyle-6.10.1/checkstyle-6.10.1-all.jar -c checkstyle.xml Test.java Exception in thread ""main"" java.lang.NullPointerException         at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.isSingleLineFor(NeedBracesCheck.java:286)         at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.isSingleLineStatement(NeedBracesCheck.java:203)         at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.isSkipStatement(NeedBracesCheck.java:177)         at com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.visitToken(NeedBracesCheck.java:164)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:392)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:503)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:334)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:209)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:265)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:271)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:121) ```","closed","approved,","dhendriks","2015-09-07T08:14:48Z","2015-09-08T23:34:55Z"
"","2398","JavaDocMethod: Exception thrown for incomplete @return tag if next line is empty","For a `@return` tag with no description of what it returns, a message like `Expected an @return tag.` is expected. But if this `@return` tag is followed by a blank line, an exception is thrown instead.  This reports the expected error:  ``` java /**  * A Javadoc comment.  *  * @return  */ public String foo() {     ... } ```  This throws an exception:  ``` java /**  * A Javadoc comment.  *  * @return  *  */ public String foo() {     ... } ```  This is the important part of the stack trace:  ``` java.lang.IllegalStateException: No match found     at java.util.regex.Matcher.group(Matcher.java:536)     at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.getMultilineNoArgTags(JavadocMethodCheck.java:669) ```  A solution which seems to work is to add an if statement, but I'm not familiar enough with the code base to tell if this is the best solution:  ``` --- HEAD +++ Modified In Working Tree @@ -664,12 +664,13 @@          while (remIndex < lines.length) {              final Matcher multilineCont = MATCH_JAVADOC_MULTILINE_CONT                      .matcher(lines[remIndex]); -            multilineCont.find(); -            remIndex = lines.length; -            final String lFin = multilineCont.group(1); -            if (!lFin.equals(NEXT_TAG) -                && !lFin.equals(END_JAVADOC)) { -                tags.add(new JavadocTag(tagLine, col, param1)); +            if (multilineCont.find()) { +                remIndex = lines.length; +                final String lFin = multilineCont.group(1); +                if (!lFin.equals(NEXT_TAG) +                    && !lFin.equals(END_JAVADOC)) { +                    tags.add(new JavadocTag(tagLine, col, param1)); +                }              }              remIndex++;          } ```","closed","approved,","johnerikhalse","2015-10-20T15:07:57Z","2017-05-18T11:55:36Z"
"","2972","unexpected token: ) for lambda expression with no params","Following code block results in unexpected token: ) on first line  ``` java             Observable.fromCallable(() -> {                 String regID = """";                 try {                     regID = gcm.register(gcmKey);                 } catch (IOException e) {                     logger.error(""gcm registration failed"");                 }                 return regID;             }) ```","closed","","goldstei","2016-02-25T23:09:18Z","2016-02-26T19:01:23Z"
"","2202","SuppressWarnings should support CamelCase","Following annotation `@SuppressWarnings(""checkstyle:redundantmodifier"")` is less readable than `@SuppressWarnings(""checkstyle:RedundantModifier"")`. Maybe there is a reason why all lower case annotations were introduced, but it makes excluding checkstyle warnings very unreadable in comparison to PMD (`@SuppressWarnings(""PMD.AvoidCatchingGenericException"")`) ones.  Moreover `SuppressWithNearbyCommentFilter` supports camel case, so I think `SuppressWarningsFilter` should also.","closed","approved,","krzyk","2015-09-18T11:38:01Z","2015-10-31T22:15:31Z"
"","2213","Print cause of exception to console when using Checkstyle from CLI","Follow-up to #2189.  Latest version of Checkstyle doesn't print any cause of exception to console:  ``` Z:\>java -jar checkstyle-6.10.1-all.jar -c checks.xml Sample.java TokenStreamRecognitionException occurred during the analysis of file Sample.java. Checkstyle ends with 1 errors. ```  Checkstyle 6.9  ``` Z:\>java -jar checkstyle-6.9-all.jar -c checkstyle_checks.xml Sample.java Sep 15, 2015 10:34:08 AM com.puppycrawl.tools.checkstyle.TreeWalker processFiltered SEVERE: TokenStreamRecognitionException occurred during the analysis of file Sample.java. Starting audit... Z:\Sample.java:0: Got an exception - Unexpected character 0xa9 in identifier Audit done. Checkstyle ends with 1 errors. ```","closed","approved,","mkordas","2015-09-19T22:04:08Z","2015-09-20T13:06:01Z"
"","2080","Fix additional issues reported by IntelliJ IDEA inspections in Checkstyle code","Follow-up to #1555 .  Below is the list of all inspections, that still remain disabled in `config/intellij-idea-inspections.xml`. Some of them are not applicable to Checkstyle code, but others are very reasonable and just require additional work to fix.  ``` AbstractClassExtendsConcreteClass AbstractClassNamingConvention AbstractClassWithOnlyOneDirectInheritor AbstractClassWithoutAbstractMethods AlphaUnsortedPropertiesFile Annotation AnonymousInnerClass AntResolveInspection ArrayLengthInLoopCondition AssertMessageNotString AssertsWithoutMessages AssignmentToForLoopParameter AssignmentToNull AssignmentToStaticFieldFromInstanceMethod AutoBoxing AutoCloseableResource AutoUnboxing BooleanMethodIsAlwaysInverted BooleanParameter BooleanVariableAlwaysNegated BreakStatement CallToSimpleGetterInClass CastToConcreteClass ChainedMethodCall CheckForOutOfMemoryOnLargeArrayAllocation CheckStyle CheckedExceptionClass ClassComplexity ClassCoupling ClassHasNoToStringMethod ClassIndependentOfModule ClassInheritanceDepth ClassLoaderInstantiation ClassNamePrefixedWithPackageName ClassOnlyUsedInOnePackage ClassUnconnectedToPackage ClassWithoutConstructor ClassWithoutLogger ClassWithoutNoArgConstructor CloneableClassInSecureContext CloneableImplementsClone CollectionAddAllCanBeReplacedWithConstructor CollectionsMustHaveInitialCapacity ConditionalExpression ConstantConditions ConstantDeclaredInAbstractClass ConstantOnRHSOfComparison ContinueStatement CssConvertColorToRgbInspection CssUnusedSymbol CyclicClassDependency CyclicPackageDependency CyclomaticComplexity DanglingJavadoc DeprecatedClassUsageInspection Deprecation DeserializableClassInSecureContext DesignForExtension DisjointPackage DuplicatePropertyInspection DuplicateStringLiteralInspection Duplicates EmptyMethod EnumClass EqualsReplaceableByObjectsCall EqualsUsesNonFinalVariable ErrorRethrown Eslint ExtendsConcreteCollection ExtendsThrowable FeatureEnvy FieldAccessedSynchronizedAndUnsynchronized FieldCount FieldHasSetterButNoGetter FieldNotUsedInToString FieldRepeatedlyAccessed FinalClass FinalMethod ForLoopWithMissingComponent ForeachStatement FunctionWithMultipleLoopsJS GjsLint GuavaFluentIterable HardCodedStringLiteral HardcodedFileSeparators HardcodedLineSeparators HashCodeUsesNonFinalVariable HtmlTagCanBeJavadocTag HtmlUnknownTarget IfCanBeSwitch IfMayBeConditional IgnoreDuplicateEntry IgnoreRelativeEntry IgnoreUnusedEntry ImplicitCallToSuper ImplicitNumericConversion InconsistentResourceBundle InnerHTMLJS InstanceVariableInitialization InstanceVariableOfConcreteClass InstanceofChain InstanceofInterfaces InterfaceWithOnlyOneDirectInheritor JSDeclarationsAtScopeStart JSHint JSLint JUnitTestNG Jscs LambdaParameterNamingConvention LawOfDemeter LengthOneStringsInConcatenation LocalCanBeFinal LocalVariableOfConcreteClass LongLine MagicCharacter MagicConstant MagicNumber MavenModelInspection MethodCallInLoopCondition MethodCount MethodNamesDifferOnlyByCase MethodOnlyUsedFromInnerClass MethodReturnOfConcreteClass MethodWithMultipleLoops MissingPackageInfo ModuleWithTooManyClasses MultipleReturnPointsPerMethod NestedMethodCall NestedSwitchStatement NestedTryStatement NonCommentSourceStatements NonSerializableFieldInSerializableClass NonStaticInnerClassInSecureContext NonSynchronizedMethodOverridesSynchronizedMethod NoopMethodInAbstractClass NullableProblems ObjectAllocationInLoop ObjectEquality OverloadedVarargsMethod PackageVisibleField PackageWithTooFewClasses PackageWithTooManyClasses ParameterHidingMemberVariable ParameterOfConcreteClass ParametersPerConstructor PrivateMemberAccessBetweenOuterAndInnerClass ProblematicWhitespace ProtectedField ProtectedInnerClass PublicConstructor PublicMethodNotExposedInInterface PublicMethodWithoutLogging RedundantMethodOverride ResultOfObjectAllocationIgnored ReturnNull ReturnThis SameParameterValue SerializableClassInSecureContext SerializableHasSerializationMethods SimplifiableIfStatement SingleClassImport SpellCheckingInspection StaticMethodOnlyUsedInOneClass StaticNonFinalField StaticVariableInitialization StaticVariableOfConcreteClass StaticVariableUninitializedUse StringBufferMustHaveInitialCapacity StringCompareTo StringConcatenation StringConcatenationMissingWhitespace StringEquals StringEqualsIgnoreCase StringTokenizer SuperTearDownInFinally SuspiciousLiteralUnderscore SuspiciousLocalesLanguages SwitchStatement SwitchStatementWithTooManyBranches SynchronizationOnStaticField SyntaxError SystemExit SystemOutErr SystemProperties TailRecursion TestMethodWithoutAssertion ThisEscapedInConstructor ThreeNegationsPerMethod ThrowCaughtLocally TodoComment TooBroadCatch TooBroadThrows TrailingSpacesInProperty TransientFieldNotInitialized TryFinallyCanBeTryWithResources TsLint TypeMayBeWeakened UncheckedExceptionClass UnclearBinaryExpression UnnecessaryDefault UnnecessaryFinalOnLocalVariableOrParameter UnnecessaryUnicodeEscape UnqualifiedFieldAccess UnqualifiedInnerClassAccess UnqualifiedMethodAccess UnqualifiedStaticUsage UnusedProperty UnusedReturnValue UseOfAnotherObjectsPrivateField UseOfPropertiesAsHashtable UtilityClass UtilityClassCanBeEnum VarargParameter VariableNotUsedInsideIf WeakerAccess WrongPropertyKeyValueDelimiter XmlHighlighting XmlPathReference XmlUnboundNsPrefix unused ``` ##","closed","miscellaneous,","mkordas","2015-09-02T21:46:06Z","2017-07-09T16:51:12Z"
"","2184","Indentation check for statement-only lambda","Follow up on #1548.  Indentation is not yet checked for statement-only lambda's like this:  ``` java     foos.forEach(f -> //indent:4 exp:4         IntStream //indent:8 exp:8             .range(1, 4) //indent:12 exp:12             .forEach(i -> f.bars.add(""bar""))); //indent:12 exp:12 ```  The `.range` and `.forEach` calls may have any indentation without any warning being emitted.","closed","indentation,","pietern","2015-09-14T21:26:15Z","2016-04-22T15:29:48Z"
"","2113","Issue #2080: Add missing assertions to utils tests","Fixes some `TestMethodWithoutAssertion` inspection violations.  Description:  > Reports test methods of JUnit test case classes that do not contain any assertions. Such methods indicate either incomplete or weak test cases.","closed","","mkordas","2015-09-04T20:55:55Z","2015-09-04T21:47:41Z"
"","2127","Issue #2080: Fix typos in code","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals.","closed","","mkordas","2015-09-05T23:21:21Z","2015-09-06T12:30:32Z"
"","2118","Issue #2080: Fix typos in code","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals.","closed","","mkordas","2015-09-04T23:41:32Z","2015-09-05T00:29:43Z"
"","2114","Issue #2080: Fix typos in code","Fixes some `SpellCheckingInspection` inspection violations.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals.","closed","","mkordas","2015-09-04T20:56:12Z","2015-09-04T21:48:29Z"
"","2011","Issue #1555: Use function after definition","Fixes some `JSLint` inspection violations.  Description:  > JSLint: 'main' was used before it was defined.","closed","","mkordas","2015-08-29T22:51:00Z","2015-08-30T05:26:43Z"
"","2636","Issue #2080: Replace dangling Javadoc with plain comment","Fixes DanglingJavadoc rule violations.  Description:  > Reports dangling Javadoc comments. Javadoc comment are dangling if they don't belong to any class, method or field. For example a Javadoc comment in between method declarations that have their own javadoc comments.  This PR relates to #2080.","closed","","mkordas","2015-11-20T22:42:52Z","2015-11-23T21:25:44Z"
"","2016","Issue #1555: Remove usage of obsolete junit.framework.Assert","Fixes `UseOfObsoleteAssert` inspection violations.  Description:  > Reports any calls to methods from the junit.framework.Assert class. This class is obsolete and the calls can be replaced by calls to methods from the org.junit.Assert class.","closed","","mkordas","2015-08-29T22:52:44Z","2015-08-30T05:30:40Z"
"","2132","Issue #1555: Remove usage of obsolete junit.framework.Assert class","Fixes `UseOfObsoleteAssert` inspection violations introduced in #1518.  Description:  > Reports any calls to methods from the junit.framework.Assert class. This class is obsolete and the calls can be replaced by calls to methods from the org.junit.Assert class.","closed","","mkordas","2015-09-06T18:07:35Z","2015-09-06T22:11:31Z"
"","2010","Issue #1555: Use previously unused parameter","Fixes `UnusedParameters` inspection violations.  Description:  > This inspection reports parameters that are not used by their methods and all method implementations/overriders.","closed","","mkordas","2015-08-29T22:50:22Z","2015-08-30T00:51:59Z"
"","2019","Issue #1555: Delete unnecessary imports","Fixes `UnusedImport` inspection violations.  Description:  > Reports any import statements that are unused. Since IDEA can automatically detect and fix such statements with its ""Optimize Imports"" command, this inspection is mostly useful for off-line reporting on code bases that you don't intend to change.","closed","","mkordas","2015-08-29T22:53:00Z","2015-08-30T05:33:28Z"
"","2013","Issue #1555: Remove unused assignments","Fixes `UnusedAssignment` inspection violations.  Description:  > This inspection points out the cases where a variable value is never used after its assignment","closed","","mkordas","2015-08-29T22:51:10Z","2015-08-30T05:28:27Z"
"","2051","Issue #1555: Remove redundant initializer","Fixes `UnusedAssignment` inspection violation.  Description:  > This inspection points out the cases where a variable value","closed","","mkordas","2015-08-31T19:31:41Z","2015-09-01T04:07:00Z"
"","2100","Issue #2080: Fix typos in code","Fixes `SpellCheckingInspection` inspection violations introduced in recent commits.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals.","closed","","mkordas","2015-09-03T21:31:40Z","2015-09-04T01:06:27Z"
"","2024","Issue #1555: Fix various typos","Fixes `SpellCheckingInspection` inspection violation.  Description:  > Spellchecker inspection helps locate typos and misspelling in your code, comments and literals","closed","","mkordas","2015-08-29T22:59:41Z","2015-08-30T05:45:35Z"
"","2020","Issue #1555: Avoid reuse of local variables","Fixes `ReuseOfLocalVariable` inspection violation.  Description:  > Reports local variables that are ""reused"", overwriting their values with new values unrelated to their original use. Such local variable reuse may be confusing, as the intended semantics of the local variable may vary with each use. It may also be prone to bugs, if code changes result in values that were thought to be overwritten actually being live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity.","closed","","mkordas","2015-08-29T22:53:08Z","2015-08-30T05:34:28Z"
"","2098","Issue #2080: Replace tabs with spaces","Fixes `ProblematicWhitespace` inspection violations introduced in recent commits.  Description:  > Reports tabs used for indentation when the code style is configured to use only spaces.","closed","","mkordas","2015-09-03T21:03:47Z","2015-09-04T01:04:25Z"
"","2049","Issue #1555: Rename parameters to match names in overridden methods","Fixes `ParameterNameDiffersFromOverriddenParameter` inspection violation.  Description:  > Reports parameters that have different names from the corresponding parameters in the methods they override. While legal in Java, such inconsistent names may be confusing, and lessen the documentation benefits of good naming practices.","closed","","mkordas","2015-08-31T19:10:40Z","2015-08-31T19:47:35Z"
"","2040","Issue #1555: Rename parameters to match names","Fixes `ParameterNameDiffersFromOverriddenParameter` inspection violation.  Description:  > Reports parameters that have different names from the corresponding parameters in the methods they override. While legal in Java, such inconsistent names may be confusing, and lessen the documentation benefits of good naming practices.","closed","","mkordas","2015-08-31T03:10:12Z","2015-08-31T05:13:20Z"
"","2052","Issue #1555: Extract classes to the upper level","Fixes `PackageVisibleInnerClass` inspection violations.  Description:  > Reports package-local inner classes.","closed","","mkordas","2015-08-31T19:53:44Z","2015-09-01T04:08:23Z"
"","2021","Issue #1555: Flip negated if-else","Fixes `NegatedIfElse` inspection violation.  Description:  > Reports if statements which contain else branches and whose conditions are negated. Flipping the order of the if and else branches will usually increase the clarity of such statements.","closed","","mkordas","2015-08-29T22:54:01Z","2015-08-30T05:35:20Z"
"","2014","Issue #1555: Mark methods as static","Fixes `MethodMayBeStatic` inspection violations.  Description:  > Reports any methods which may safely be made static. A method may be static if it is not synchronized, it does not reference any of its class' non static methods and non static fields and is not overridden in a sub class.","closed","","mkordas","2015-08-29T22:51:13Z","2015-08-30T05:29:10Z"
"","2018","Issue #1555: Convert method with array parameter to vararg","Fixes `MethodCanBeVariableArityMethod` inspection violations.  Description:  > Reports methods with which can be converted to be a variable arity/varargs method, available in Java 5 and newer. > This inspection only reports if the project or module is configured to use a language level of 5.0 or higher.","closed","","mkordas","2015-08-29T22:52:56Z","2015-08-30T05:32:39Z"
"","2017","Issue #1555: Fix malformed JUnit Rule","Fixes `JUnitRule` inspection violations.  Description:  > Reports malformed @Rule/@ClassRule usages: > - Checks for any member that is annotated with @Rule but is not public. > - Checks for any member that is annotated with @ClassRule but is not public or not static.","closed","","mkordas","2015-08-29T22:52:49Z","2015-08-30T05:31:56Z"
"","2022","Issue #1555: Collapse and refactor if statement with identical branches","Fixes `IfStatementWithIdenticalBranches` inspection violation.  Description:  > Reports if statements with identical ""then"" and else branches.","closed","","mkordas","2015-08-29T22:54:10Z","2015-08-30T05:36:40Z"
"","2059","Issue #1555: Refer to collections by interface","Fixes `DeclareCollectionAsInterface` inspection violations.  Description:  > Reports on declarations of Collection variables made by using the collection class as the type, rather than an appropriate interface.","closed","","mkordas","2015-08-31T22:33:42Z","2015-09-04T19:36:10Z"
"","2102","Issue #2080: Replace ternary condition operator with if","Fixes `ConditionalExpression` inspection violations.  Description:  > Reports the ternary condition operator. Some coding standards prohibit the use of the condition operator, in favor of if-else statements.","closed","","mkordas","2015-09-03T21:58:24Z","2015-09-04T01:07:38Z"
"","2012","Issue #1555: Remove unsafe calls to Class.newInstance()","Fixes `ClassNewInstance` inspection violations.  Description:  > Reports any calls to java.lang.Class.newInstance(). The newInstance method propagates any exception thrown by the no-arg constructor, including checked exceptions. Use of this method effectively bypasses the compile-time exception checking that would otherwise be performed by the compiler. Replacing such a method call with a call to the java.lang.reflect.Constructor.newInstance() method avoids this problem by wrapping any exception thrown by the constructor in a java.lang.reflect.InvocationTargetException.","closed","","mkordas","2015-08-29T22:51:06Z","2015-08-30T05:27:34Z"
"","2015","Issue #1555: Rename method returning boolean to use question word","Fixes `BooleanMethodNameMustStartWithQuestion` inspection violations.  Description:  > Reports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.","closed","","mkordas","2015-08-29T22:51:19Z","2017-06-02T15:36:31Z"
"","2058","Issue #1555: Use curly braces in variables in bash script","Fixes `BashSimpleVarUsage` inspection violations.","closed","","mkordas","2015-08-31T21:35:27Z","2015-09-01T04:11:53Z"
"","2023","Issue #1555: Replace for loop with with while loop","Fixes `AssignmentToForLoopParameter` inspection violation.  Description:  > Reports assignment a variable declared in a for statement in the body of that statement. It also reports any attempt to increment or decrement the variable. While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.","closed","","mkordas","2015-08-29T22:54:15Z","2015-08-30T00:51:03Z"
"","2008","Issue #1555: Replace for loop with with while loop","Fixes `AssignmentToForLoopParameter` inspection violation.  Description:  > Reports assignment a variable declared in a for statement in the body of that statement. It also reports any attempt to increment or decrement the variable. While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.","closed","","mkordas","2015-08-29T22:49:38Z","2015-08-30T00:41:53Z"
"","2151","Issue #1273: CustomImportOrderCheck rule priorities","Fixed.  Also made few minor changes on Javadoc, mainly by removing `{@code }` for XML examples because it caused `<` not being resolved to `","closed","","ivanov-alex","2015-09-10T17:18:14Z","2015-10-02T13:52:50Z"
"","2554","Fixed NumberFormatException on Japanese environment","Fixed NumberFormatException, because message_ja.properties has invalid format elements.","closed","","e-taka","2015-11-08T02:45:48Z","2015-11-14T21:38:27Z"
"","2626","minor: fixed indentation documentation and method names","Fixed method names so they are more understandable and reflect what the method does. All these changes are contained to `AbstractExpressionHandler` and `LineWrappingHandler` and `BlockParentHandler`. Improving javadocs of all indentation classes so it may be easier to others to follow what is going on.  **Actual Logic Changes:** `AbstractExpressionHandler.findSubtreeLines` (now called `addAllSubtreeLines`) had a parameter `allowNesting` but its only use was to send to itself. The method is final, so no one can override the method and make use of the parameter, so I removed it.","closed","","rnveach","2015-11-18T20:06:28Z","2017-11-03T00:51:02Z"
"","2140","Issue #157: fix java grammar for unicode escape","Fixed grammar for '\u005C\uXXXX' and added 2 test cases for the issue.","closed","","rnveach","2015-09-07T21:31:14Z","2015-10-10T22:35:17Z"
"","2254","minor: fixed jgit resource leaks in commit validation","Fixed eclipse warnings in CommitValidationTest, using Luna SR2.  Description Resource    Path    Location    Type Resource leak: '' is never closed   CommitValidationTest.java   /checkstyle/src/test/java/com/puppycrawl/tools/checkstyle   line 181    Java Problem Resource leak: '' is never closed   CommitValidationTest.java   /checkstyle/src/test/java/com/puppycrawl/tools/checkstyle   line 182    Java Problem Resource leak: 'revWalk' is never closed    CommitValidationTest.java   /checkstyle/src/test/java/com/puppycrawl/tools/checkstyle   line 172    Java Problem  ""repo"" didn't show up as a warning, but it implements AutoCloseable, so it should be closed too.","closed","","rnveach","2015-10-02T01:36:05Z","2015-10-04T01:07:18Z"
"","2441","Issue #2421: enabling checking on it folder","Fixed AbstractClassName, DeclarationOrder, RightCurly, EmptyLineSeparator, Regexp, and VisibilityModifier. MagicNumber was also already being suppressed.  Test has no abstract on BaseCheckTestSupport, so I made IT the same. This was related to AbstractClassName. msgNonGroup in CustomImportOrderTest was not being used, so it was removed. This was related to VisibilityModifier.","closed","","rnveach","2015-10-25T14:17:16Z","2015-10-25T18:08:05Z"
"","2848","Issue #2805: fixed false positive in SummaryJavadoc on inheritDoc tag","Fix. Trim is needed because full line is captured with spaces around it.","closed","","rnveach","2016-01-26T00:36:31Z","2016-01-30T04:32:35Z"
"","2256","Fix typo, should say ""tech debt""","Fix typo, should say ""tech debt""","closed","","muminc","2015-10-02T15:59:01Z","2015-10-03T23:51:01Z"
"","2878","Issue #2609: Refactor GUI","Fix points 0), 2), 6) from https://github.com/checkstyle/checkstyle/issues/2609#issuecomment-168687781","closed","","Vladlis","2016-02-05T15:54:42Z","2016-02-07T18:06:52Z"
"","2041","Issue #1566: VariableDeclarationUsageDistance violations fixed","Fix for: VariableDeclarationUsageDistance `Distance between variable 'XXX' declaration and its first usage is X, but allowed 3.`","closed","","rdiachenko","2015-08-31T13:18:34Z","2015-08-31T21:31:13Z"
"","2042","Issue #1566: OverloadMethodsDeclarationOrder violations fixed","Fix for: OverloadMethodsDeclarationOrder `Overload methods should not be split. Previous overloaded method located at line 'X'.`","closed","","rdiachenko","2015-08-31T13:36:54Z","2015-08-31T21:38:19Z"
"","2046","Issue #1566: JavadocTagContinuationIndentation violations fixed","Fix for: JavadocTagContinuationIndentation `Line continuation have incorrect indentation level, expected level should be 4.`","closed","","rdiachenko","2015-08-31T17:51:00Z","2015-08-31T21:31:09Z"
"","2006","Issue #1566: 'missing javadoc comment' violations fixed in ParseTreeModel, TreeTableModelAdapter","Fix for: - JavadocMethod `Missing a Javadoc comment.` - JavadocVariable `Missing a Javadoc comment.`","closed","","rdiachenko","2015-08-29T21:28:32Z","2015-08-31T21:37:49Z"
"","2005","Issue #1566: 'missing javadoc comment' violations fixed in ParseTreeInfoPanel","Fix for: - JavadocMethod `Missing a Javadoc comment.` - JavadocVariable `Missing a Javadoc comment.`","closed","","rdiachenko","2015-08-29T21:19:17Z","2015-08-31T21:37:47Z"
"","2004","Issue #1566: 'missing javadoc comment' violations fixed in JTreeTable","Fix for: - JavadocMethod `Missing a Javadoc comment.` - JavadocVariable `Missing a Javadoc comment.`","closed","","rdiachenko","2015-08-29T21:02:41Z","2015-08-31T21:37:45Z"
"","2003","Issue #1566: 'missing javadoc comment' violations fixed in FileDrop","Fix for: - JavadocMethod `Missing a Javadoc comment.` - JavadocVariable `Missing a Javadoc comment.`","closed","","rdiachenko","2015-08-29T20:53:25Z","2015-08-31T21:37:43Z"
"","2007","Issue #1566: 'missing javadoc comment' violations fixed in Main, AbstractTreeTableModel","Fix for: - JavadocMethod `Missing a Javadoc comment.`","closed","","rdiachenko","2015-08-29T21:44:26Z","2015-08-31T21:37:53Z"
"","2002","Issue #1566: 'missing javadoc comment' violations fixed in CodeSelector","Fix for: - JavadocMethod `Missing a Javadoc comment.`","closed","","rdiachenko","2015-08-29T20:35:06Z","2015-08-31T21:37:40Z"
"","2001","Issue #1566: 'missing javadoc comment' violations fixed in AbstractJavadocCheck","Fix for: - JavadocMethod `Missing a Javadoc comment.`","closed","","rdiachenko","2015-08-29T20:23:43Z","2015-08-31T21:37:38Z"
"","2038","Issue #1566: IllegalCatch violations fixed for TreeWalker","Fix for: - IllegalCatch `Catching 'XXX' is not allowed.`","closed","","rdiachenko","2015-08-31T00:16:37Z","2015-08-31T21:37:26Z"
"","2035","Issue #1566: IllegalCatch violations fixed for CheckstyleAntTask","Fix for: - IllegalCatch `Catching 'XXX' is not allowed.`","closed","","rdiachenko","2015-08-30T22:20:56Z","2015-08-31T21:37:24Z"
"","2033","Issue #1566: IllegalCatch violations fixed for Checker","Fix for: - IllegalCatch `Catching 'XXX' is not allowed.`","closed","","rdiachenko","2015-08-30T20:48:40Z","2015-08-31T21:37:21Z"
"","2916","Issue #281: fixed line wrap handling of slist/objblock","Fix for latest in issue.  ``` String result = IntStream.range(0, 10).mapToObj(i -> {     int j = i * i;     return Integer.toString(j); }).filter(x -> x.equals(""36"")).findFirst().orElse(null); ```  Error: `'.' have incorrect indentation level 10, expected level should be 12. [Indentation]`  The issue is not with lambdas, but with `LineWrappingHandler.collectFirstNodes`. Originally it was set to skip SLIST/OBJBLOCK, so this caused it to incorrectly pick `.` (PERIOD) as the first node of the line, instead of `}`. The issue can be seen with other, non-lambda code like:  ```     String t = this.run(new Test() {     }).run().now(); ```  Because of the change to the method, null nodes can't be found anymore, so the null protections had to be removed to appease code coverage. I added the code from the issue to the input file.","closed","","rnveach","2016-02-14T22:35:44Z","2016-02-16T14:16:30Z"
"","2403","Fix for issue #2398: Exception thrown for incomplete @return tag if next line is empty","Fix for issue #2398  - Added test data to expose the error. - Added a check that regexp matching second line of a multiline tag actually finds anything.","closed","","johnerikhalse","2015-10-21T06:28:41Z","2015-10-22T12:52:18Z"
"","2050","Issue #1566: WriteTag violations fixed","Fix for `WriteTag` violations.","closed","","rdiachenko","2015-08-31T19:17:32Z","2015-08-31T21:39:44Z"
"","2048","Issue #1566: JavadocParagraph violations fixed","Fix for ``JavadocParagraph` vioilations.","closed","","rdiachenko","2015-08-31T18:52:42Z","2015-08-31T21:31:07Z"
"","2898","Issue #2886: Changed semantics of PropertyExpander","Fix for #2886.","closed","","phejl","2016-02-10T22:34:56Z","2016-02-16T22:23:44Z"
"","2674","Issue #2646 & #2250: Fix inability to suppress checkstyle violations with @SuppressWarnings annotation","Fix both #2646 & #2250.","closed","","MEZk","2015-12-07T23:48:25Z","2015-12-16T18:00:10Z"
"","2426","Issue #2425: fixed invalid xml examples in xdocs","First pass. Added new junit to find invalid XMLs or CS configurations that don't actually work, and fixed all violations. Still todo: -- Have to refactor junit code for complexity complaints. -- have to verify class' examples aren't a copy of the invalid xdocs ones  Description of the more major changes: PackageObjectFactory: I couldn't get past ""NoClassDef"" exception for ""AbstractClassName"" without this extra catch here. I don't know what I am doing different that CS' doesn't complain about this anywhere else. NonEmptyAtclauseDescriptionCheck: It doesn't support the 'target' property at all and I didn't see any work around. AllChecksPresentOnAvailableChecksPageTest: Renamed to 'XDocsPagesTest' since it will now house more xdoc checks. config_regexp.xml: The whole string was not a valid regular expression format, so most of the fixes revolve around that by santizing '\' and '['.","closed","","rnveach","2015-10-23T15:15:04Z","2015-10-24T00:24:02Z"
"","2367","Issue #2161: unify test input locations for coding package","first for coding.","closed","","rnveach","2015-10-17T01:54:48Z","2015-10-17T14:05:09Z"
"","2361","Issue #2161: unify test input locations for annotation package","final location unification for annotation package  cross folder inputs were duplicated as they were simple or no clear way to separate what was being checked InputAnnotationLocationCheckTest3 was deleted because it is not in use anywhere","closed","","rnveach","2015-10-16T02:35:39Z","2015-10-16T11:41:39Z"
"","2370","Issue #2161: unify test input locations for coding package","final for coding package, no unused files, just mis-placed ones","closed","","rnveach","2015-10-17T14:43:23Z","2015-10-18T01:09:33Z"
"","2189","Checkstyle fails to parse files with non-ASCII characters on Windows","Files with non-ASCII characters in method/variable names result in a TokenStreamRecognitionException on Windows 7 (both 32 and 64 bit). On OS X, the files parses successfully.  Using a very basic rules file:  ```           ```  And a simple sample file:  ``` public class Sample {     public void méthod() {     } } ```  We receive the following output on Windows 7 (32bit, en_US - Windows 7/IE 11 VMWare VM from https://dev.modern.ie/tools/vms/mac/):  ``` Z:\>java -jar checkstyle-6.10.1-all.jar -c checks.xml Sample.java TokenStreamRecognitionException occurred during the analysis of file Sample.java . Checkstyle ends with 1 errors. ```  CheckStyle 6.9 offers a more helpful error:  ``` Z:\>java -jar checkstyle-6.9-all.jar -c checkstyle_checks.xml Sample.java Sep 15, 2015 10:34:08 AM com.puppycrawl.tools.checkstyle.TreeWalker processFiltered SEVERE: TokenStreamRecognitionException occurred during the analysis of file Sample.java. Starting audit... Z:\Sample.java:0: Got an exception - Unexpected character 0xa9 in identifier Audit done. Checkstyle ends with 1 errors. ```  On OS X 10.10.5 (en_GB) the parse succeeds, as expected:  ``` $  java -jar checkstyle-6.10.1-all.jar -c checkstyle_checks.xml Sample.java Starting audit... Audit done. ```  This was raised due to [a bug reported against the IDEA plugin](https://github.com/jshiell/checkstyle-idea/issues/186) where the reported found it on a real Windows 7 x64 box. ##","closed","","jshiell","2015-09-15T17:35:20Z","2017-07-13T18:30:40Z"
"","2061","Issue #1555: Instructions to enable IntelliJ IDEA Inspections","File `intellij-idea-inspections.xml` is moved from contribution repo to main one.","closed","","mkordas","2015-08-31T23:07:30Z","2015-09-04T19:36:01Z"
"","2765","java8: Parsing of Java 8 explicit receiver parameters fails","Explicit receiver parameters are an obscure new language feature in Java 8. See blog post by Stephen Colebourne: http://blog.joda.org/2015/12/explicit-receiver-parameters.html  I tried it out with the Maven Checkstyle Plugin 2.17 and Checkstyle fails when parsing the code.  I think this is hardly used at all, so it's a very minor issue. But it's a language feature so maybe Checkstyle should be able to handle it.  Reproduce: 1. Check out example project https://github.com/arend-von-reinersdorff/explicit-receiver-parameters-example 2. run mvn checkstyle:check  Code to reproduce:  ``` /var/tmp $ javac Main.java  /var/tmp $ cat Main.java  public class Main {     public void print(Main this) {         System.out.println(this);     }      class Inner {         Inner(Main Main.this) {         }     } }  /var/tmp $ cat Test.xml                          /var/tmp $ java -jar checkstyle-6.13-all.jar -c Test.xml Main.java  Starting audit... /var/tmp/Main.java:2:23: unexpected token: Main com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing Main.java     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:282)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:276)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:119) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: MismatchedTokenException occurred during the analysis of file Main.java.     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:218)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:266)     ... 2 more Caused by: /var/tmp/Main.java:4:5: expecting EOF, found '}'     at antlr.Parser.match(Parser.java:211)     at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:210)     at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:468)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:200)     ... 4 more Checkstyle ends with 1 errors. ```","closed","antlr,","arend-von-reinersdorff","2015-12-23T08:29:41Z","2016-06-02T15:50:49Z"
"","2477","lineWrappingIndentation does not enforce wrapping indentation in while()","Expected 4 errors (2 additional for while, the same as if), not 2:  ``` java -jar ~/Downloads/checkstyle-6.11.2-all.jar -c 1.xml sample.java Starting audit... sample.java:14: error: 'b' have incorrect indentation level 20, expected level should be 6. sample.java:15: error: 'c' have incorrect indentation level 17, expected level should be 6. Audit done. Checkstyle ends with 2 errors.  cat -n 1.xml      1        2        5        6        7          8        9         10           11             12             13             14             15             16             17             18           19         20       21       22    cat -n sample.java       1  public class sample {      2    public static void indent() {      3      boolean a = false;      4      boolean b = false;      5      boolean c = false;      6        7      while (a ||      8                      b ||      9                   c) {     10        a = true;     11      }     12       13      if (a ||     14                      b ||     15                   c) {     16        a = true;     17      }     18    }     19  }     20   ``` ##","open","indentation,","vrozov","2015-10-30T15:56:20Z","2020-08-20T17:14:04Z"
"","2903","minor: Change expanding node method to double-click","Expanding node in node tree by clicking enter does not seem intuitive to me, in my opinion nodes in tree should expand just by double-click and in the same time selecting code that is associated with given node.","closed","","liscju","2016-02-12T12:52:47Z","2016-02-15T14:04:12Z"
"","2639","adjust AbbreviationAsWordInName in checkstyle_checks.xml to catch unexpected abbreviations","Example: https://github.com/checkstyle/checkstyle/commit/0f9490c4ab86e6df2cfe90db1ffe04e906a5edad#diff-98a10dcd6ab0642314ef374b42c293deR440  name is ""handleSIngleLineCommentAtTheEndOfTheCodeBlock"", attention to "".....SI....""","closed","miscellaneous,","romani","2015-11-22T01:17:26Z","2015-11-25T02:31:21Z"
"","2292","xdoc: Sort Checks alphabetically in content sections","Example: http://checkstyle.sourceforge.net/config_misc.html  It is hard to find Indentation Check, but content should be sorted alphabetically.  One more reference https://sourceforge.net/p/checkstyle/feature-requests/511/","closed","miscellaneous,","romani","2015-10-09T16:30:57Z","2015-11-24T23:21:18Z"
"","2726","No explanation of what is metadata tag on checkstyle config","Example:  `` https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L15  1) metadata should be described at http://checkstyle.sourceforge.net/config.html  2) metadata in our config should get smth meaningful.  Some original idea was to let other tools to store in config file their own content without requesting to change a checkstyle format. One example is to store a ""name of config"" (field of eclipse-cs) for eclipse-cs plugin - https://sourceforge.net/p/eclipse-cs/feature-requests/160/. ##","closed","easy,","romani","2015-12-16T18:47:32Z","2018-06-12T14:53:22Z"
"","2242","Localization maven report to our site","Example: https://maven.apache.org/plugins/maven-linkcheck-plugin/l10n-status.html  It should be fun to have it, as our messages are controlled by TranslationCheck already.  Plugin: https://code.google.com/p/l10n-maven-plugin/ https://code.google.com/p/l10n-maven-plugin/wiki/Usage  Plugin should just do reporting for ""site"" phase (command to build our site : ""mvn clean site -Dlinkcheck.skip=true""). if plugin can do validation and we can use it in ""verify"" phase of build it would be good (in addition to TranslationCheck).  Examples of usage: http://svn.apache.org/viewvc/maven/plugins/tags/maven-pmd-plugin-3.7/pom.xml?view=markup#l332 http://svn.apache.org/viewvc/maven/plugins/trunk/maven-pmd-plugin/src/main/resources/ ##","open","approved,","romani","2015-09-26T00:53:20Z","2016-12-14T18:16:57Z"
"","2766","Expression list token (ELIST) reports invalid line number when used as method param","Example file:  ``` java public class Main {     public class ExpressionList {         public void test() {             throw new IllegalStateException(""Wrapped""                 + "" message "" + ex.getMessage(), null             );         }     } } ```  `ELIST` and its left sibling (`LPAREN`) are on the same line, but `ELIST` will have line number +1.  Unit test I am using to reproduce the problem:  ``` java     @Test     public void expressionListTokeHasValidLineNumber() throws Exception {         final String path = ""/ExpressionList.java"";         final FileContents contents =             new FileContents(                 new FileText(                     new File(this.getClass().getResource(path).getFile()),                     StandardCharsets.UTF_8.name()                 )             );         final DetailAST ast = TreeWalker.parse(contents);         final DetailAST token = findToken(ast, TokenTypes.ELIST).get();         MatcherAssert.assertThat(             token.getLineNo(),             Matchers.equalTo(                 token.getPreviousSibling().getLineNo()             )         );     }      private static Optional findToken(final DetailAST ast,         final int type) {         DetailAST child = ast.getFirstChild();         while (child != null) {             final DetailAST token = child.findFirstToken(type);             if (token != null) {                 return Optional.of(token);             }             final Optional deep = findToken(child, type);             if (deep.isPresent()) {                 return deep;             }             child = child.getNextSibling();         }         return Optional.absent();     } ```  Checkstyle version `6.12.1`. ##","open","antlr,","Happy-Neko","2015-12-23T22:02:08Z","2016-12-14T18:16:51Z"
"","2104","Issue #1214: Update all Checks html docs with link to hosted configurations","Every link is checked twice.","closed","","Vladlis","2015-09-04T00:26:59Z","2015-09-04T12:55:58Z"
"","2816","EqualsAvoidNull checks for objects other than Strings?","Enabling `EqualsAvoidNull` for checkstyle 6.1.1 we find that it reports an issue at the final return statement in the code below  ``` java  public boolean equals(Vector y) {     if (y == null) {       return false;     }    ...     ....     return y.equals(this); } ```  Here `Vector` is an interface. It is not possible to change the statement to `return this.equals(y)` since it would lead to an infinite call (stackoverflow) - Does `EqualsAvoidNull` checks for objects other than `String` or this is bug?  - If so, it looks like the issue reported above is not correct. Is there a way to prevent checkstyle from doing checks on objects other than `String`?","closed","","srangwal","2016-01-11T05:56:36Z","2016-01-12T04:18:10Z"
"","2440","Issue #2421: enabling checking on it folder","enabled Indentation and LeftCurly. Moved suppression of MultipleStringLiterals. Removed some other checks that were already being suppressed.","closed","","rnveach","2015-10-25T01:41:36Z","2015-10-25T14:10:25Z"
"","2944","EmptyLineSeparator to check empty lines inside methods","EmptyLineSeparator checks empty lines between imports, methods, etc. It would be good to check for empty lines INSIDE methods. E.g. the following file  ``` public class Test {     public void testMethod() {         System.out.println(1);           System.out.println(2); // there are 2 empty lines above     } } ```  with the following settings:  ```                                                      ```  should fail because allowMultipleEmptyLines=false and there are 2 empty lines in a row in the source code.","closed","new feature,","ychulovskyy","2016-02-19T09:11:50Z","2016-03-29T22:52:36Z"
"","2610","Issue #2451: removed excess hierarchy from EmptyForIteratorPadCheck","EmptyForIteratorPadCheck now extends Check. Copied methods and fields from abstract. Added test for missing coverage.","closed","","rnveach","2015-11-17T11:26:50Z","2015-11-17T14:21:18Z"
"","2598","Issue #2451: removed excess hierarchy from EmptyForInitializerPadCheck","EmptyForInitializerPadCheck now extends Check. Copied methods from abstract. Added test for missing coverage.","closed","","rnveach","2015-11-12T22:17:57Z","2015-11-13T03:23:15Z"
"","2572","Issue #2451: removed excess hierarchy from EmptyBlockCheck","EmptyBlockCheck now extends Check. Copied method from AbstractOptionCheck, changed field to option to match setter. Added test for missing coverage.","closed","","rnveach","2015-11-10T17:17:11Z","2015-11-11T21:12:21Z"
"","2380","Issue #2161: unify test input locations for metrics package","duplicated one input file","closed","","rnveach","2015-10-18T14:15:59Z","2015-10-20T01:59:37Z"
"","2381","Issue #2161: unify test input locations for modifier package","duplicated 2 input files","closed","","rnveach","2015-10-18T14:44:32Z","2015-10-20T01:59:35Z"
"","2420","Issue #2085: flush audit outputs sooner","Do I need to add any new tests for this, and if so, how should I go about writing the test?","closed","","rnveach","2015-10-22T13:57:18Z","2015-10-23T15:05:41Z"
"","2322","Issue #1238: Update list of related Tools","Divide related tools into two sections:  1 Active Tools - tools sorted by last update date - tools for which I was unable to find Checkstyle version (fawkeZ, tIDE, JArchitect)  2 Inactive / Old Tools - tools using Checkstyle with version < 5.0 sorted by version number (descending)  Generated output: ![image](https://cloud.githubusercontent.com/assets/2310862/10416998/873eaa38-702d-11e5-89c8-98dce2a0276d.png)  I will raise new PR after confirming Checkstyle version for unknown tools.","closed","","nejdaw","2015-10-11T13:41:22Z","2015-10-11T16:26:54Z"
"","2629","IndentationCheck: incorrect validation for class definition","D:> type config.xml  ```                                                 ```  D:> type test.java  ``` package test;  class     Test1 {//indent:4 exp:0 // CS says invalid } public     class Test2 {//indent:4 exp:4 // CS os OK, but this should be warning } ```  D:> java -jar checkstyle-6.12.1-all.jar -c config.xml test.java  ``` Starting audit... test.java:4: error: 'class def ident' have incorrect indentation level 4, expected level should be 0. Audit done. Checkstyle ends with 1 errors. ```  I was expecting CS to not report any error on line 4 because similar code (the 2nd class) does require the line to be indented. ##","open","indentation,","rnveach","2015-11-19T01:08:33Z","2020-04-23T21:01:34Z"
"","2618","IndentationCheck: incorrect validation for imports and package","D:> type config.xml  ```                                                 ```  D:> type test.java  ``` package com.puppycrawl.tools.checkstyle.checks.indentation; //indent:0 exp:0   import java.util.Arrays; //indent:1 exp:0 // no error, invalid (line 3) import java. //indent:0 exp:0 // no error, valid (line 4)     util.Arrays; //indent:4 exp:4 // no error, CS says expecting (line 5) import java. //indent:0 exp:0 // no error, valid (line 6)                        util.Arrays; //indent:23 exp:4 // no error, invalid (line 7) ```  D:> java -jar checkstyle-6.12.1-all.jar -c config.xml test.java  ``` Starting audit... Audit done. ```  CS reports no errors on the code. I was expecting CS to give error on the line 3, that says invalid because all imports should start at column 0. I was expecting CS to give error on the line 7, that says invalid because CS gives an error saying it expected indent ""4"" if I put it at column 0 (line 5 is example), so I figured it would require exactly ""4"" for consistency.","closed","indentation,","rnveach","2015-11-18T00:26:56Z","2016-06-03T13:58:52Z"
"","2614","Issue #2451: removed excess hierarchy from CyclomaticComplexityCheck","CyclomaticComplexityCheck now extends Check. Copied methods and fields from abstract class. Added test for missing coverage.  Renamed `DEFAULT_VALUE` to `DEFAULT_COMPLEXITY_VALUE` because of similarity to `INITIAL_VALUE`. Couldn't remove the field altogether because it is a magic number. Removed `getMessageID` and `leaveTokenHook`.","closed","","rnveach","2015-11-17T12:38:14Z","2015-11-18T14:38:17Z"
"","2143","ImportOrder: Check that import groups aren't separated internally","Currently, the ImportOrder check ensures that imports are grouped in a specific order. These groups shouldn't be separated internally as well.  e.g.  ``` java import com.puppycrawl.tools.checkstyle.api.Check;  import com.puppycrawl.tools.checkstyle.api.DetailAST; import com.puppycrawl.tools.checkstyle.api.TokenTypes; ```  The empty line between Check and DetailAST should be removed. Automatically importing classes will never add such a newline. The Android Studio formatter also removes the empty line. ##","closed","approved,","robertwhitebit","2015-09-08T12:31:19Z","2018-02-03T17:20:06Z"
"","2580","[Google|Android] Test Method Naming Conventions","Currently you can only specify a single format for all method names in your project.  However, Android suggests to use  _ (underscore) in test method names [1]. So it would be awesome to specify different formats for the production and test code.  Maybe a more flexible approach should be implemented? So you can limit checks to folders/files. This would effect all checks of course.  [1] http://source.android.com/source/code-style.html#follow-test-method-naming-conventions","closed","","robertwhitebit","2015-11-11T20:16:10Z","2015-11-12T20:32:36Z"
"","2364","Issue #2266: Fixed blank line indentification for EmptyLineSeparator check","Current implementation count everything outside AntLR tree as blank lines. Javadoc and comments among them.  This patch checks, that lines between tokens are actually empty (trim().isEmpty()).  Checkstyle reports are uploaded to [my site](http://pbaranchikov.github.io/checkstyle/empty-line-separator/checkstyle.html) For guava project, found 1591 violations against 1576 for Checkstyle 6.11.2.  Validations are also fixed in Checkstyle code itself","closed","","pbaranchikov","2015-10-16T15:52:18Z","2015-10-18T19:27:13Z"
"","2421","Run CheckStyle on Full Test Directory","CS isn't being run on the entire ""test/java"" directory because of its pattern matching in ""ant-phase-verify"". https://github.com/checkstyle/checkstyle/blob/3cef81032c4d94b80c7d0780a934f94a988b7290/config/ant-phase-verify.xml#L30 We are matching only ""*Test"", but this is hiding violations for files like ""BaseCheckTestSupport"". If we remove the ""Test"" portion, 40 violations appear on our master code.  ``` Starting audit... \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:1: error: Line does not match expected header line of '////////////////////////////////////////////////////////////////////////////////'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:1: error: Line does not match expected header line of '^/{80}$'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:31:1: error: Class Data Abstraction Coupling is 11 (max allowed is 7) classes [BriefLogger, ByteArrayInputStream, ByteArrayOutputStream, Checker, DefaultConfiguration, File, InputStreamReader, LineNumberReader, MessageFormat, Predicate, Properties]. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:51:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:51:43: error: Variable 'stream' must be private and have accessor methods. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:53:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:57:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:72:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:88:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:99:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:103:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:107:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:111:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:116:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:121:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:126:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:131:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:141:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:151:5: error: Cyclomatic Complexity is 11 (max allowed is 10). \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:151:5: error: Executable statement count is 32 (max allowed is 30). \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:151:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:226:5: error: Fields and methods should be before inner classes. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseCheckTestSupport.java:230:9: error: '}' at column 9 should be alone on a line. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\BaseFileSetCheckTestSupport.java:1: error: Missing a header - not enough lines in file. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\DebugAuditAdapter.java:1: error: Line does not match expected header line of '////////////////////////////////////////////////////////////////////////////////'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\DebugAuditAdapter.java:1: error: Line does not match expected header line of '^/{80}$'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\DebugChecker.java:1: error: Line does not match expected header line of '////////////////////////////////////////////////////////////////////////////////'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\DebugChecker.java:1: error: Line does not match expected header line of '^/{80}$'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\DebugFilter.java:1: error: Line does not match expected header line of '////////////////////////////////////////////////////////////////////////////////'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\DebugFilter.java:1: error: Line does not match expected header line of '^/{80}$'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\grammars\comments\CompareTreesWithComments.java:1: error: Line does not match expected header line of '////////////////////////////////////////////////////////////////////////////////'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\grammars\comments\CompareTreesWithComments.java:1: error: Line does not match expected header line of '^/{80}$'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\grammars\comments\CompareTreesWithComments.java:10:22: error: Variable 'expectedTree' must be private and have accessor methods. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\grammars\comments\CompareTreesWithComments.java:37:5: error: Cyclomatic Complexity is 12 (max allowed is 10). \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\grammars\comments\CompareTreesWithComments.java:44:9: error: '}' at column 9 should be alone on a line. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\grammars\GeneratedJava14LexerTest.java:1: error: Line does not match expected header line of '////////////////////////////////////////////////////////////////////////////////'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\grammars\GeneratedJava14LexerTest.java:1: error: Line does not match expected header line of '^/{80}$'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\grammars\GeneratedJava14LexerTest.java:33: error: Don't use trailing comments. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\grammars\GeneratedJava14LexerTest.java:37: error: Line matches the illegal pattern '[^\p{ASCII}]'. \checkstyle\src\test\java\com\puppycrawl\tools\checkstyle\grammars\GeneratedJava14LexerTest.java:41: error: Line matches the illegal pattern '\s+$'. Audit done. Checkstyle ends with 40 errors. ```","closed","approved,","rnveach","2015-10-22T18:30:13Z","2015-10-26T23:30:33Z"
"","2978","RegexpMultilineCheck: configure the capturing group to be used for the violation position report","Created: 2012-12-03 Creator: Kai Kunstmann SForge Number: 605   One particular use-case for the RegexpMultilineCheck is to define a regular expression that conditions the context in which a match is to be found by matching a pre-condition multiple lines before the actual match, i.e. to make sure an illegal code fragment is only to be match, if it is preceded by something else multiple lines beforehand. With regular expressions, you would normally define such a conditioned context as a look-behind near the actual match to assert its validity.  Because of the limitations of Java's regular expressions, it is not possible to declare a look-behind with a non-obvious length (i.e. it's not allowed to include quantifiers and/or back-references in the look-behind). As a consequence, you have to define your regular expression such, that the pre-condition is part of the actual match. As a result, checkstyle reports the position of that said pre-condition instead of the actual match. It is then often tedious to identify the actual match manually, since it exists on any one of the following lines.  I request that RegexpMultilineCheck (or possibly every Regexp*Check) is enhanced to include an option to configure the capturing group to be used for reporting the violation. The default value for this option would naturally be '0', which represents the entire match (i.e. the current behaviour) as defined in Java's Matcher class. Since the number of capturing groups is statically defined by the regular expression itself, it is also possible to validate a proper configuration before actually running it.  I just realized, the ""non-obvious length"" limitation in a look-behind does not apply in general. There are some constructs that allow varying lengths, as ""non-obvious length"" is determined by the (very complex) Pattern-compiling process.  Nevertheless, it would be nice to have the option in checkstyle to configure any capturing group as the one used for reporting a violation to circumvent corner-cases in complex expressions.  https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html ##","open","medium,","romani","2016-02-27T00:37:01Z","2017-04-13T16:43:03Z"
"","2505","Add ENUM_CONSTANT_DEF support to MethodParamPad","Created: 2012-04-10 Creator: Eric Milles SForge feature request: 569   Add support for the token type ENUM_CONSTANT_DEF to the MethodParamPad check.  http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_CONSTANT_DEF , ENUM_CONSTANT_DEF is looks like Constructor,  we need to add it to https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java#L107","closed","new feature,","romani","2015-11-02T05:47:20Z","2015-12-09T03:15:43Z"
"","2506","new Check: IllegalJavaDocTag","Created: 2011-08-24 Creator: Zack Grossbart  Many projects prohibit @author tags in their code since they encourage individual code ownership and discourage team ownership of code. Checkstyle currently has a check to require @author tags, but not to warn if they are there.  Check should forbid ""author"" tag by default.  as it is implemented, we need to remove from checkstyle WriteTag module completely - https://github.com/checkstyle/checkstyle/issues/952 , bracking compatbility is ok.  ##","open","new module,","romani","2015-11-02T06:20:32Z","2021-05-03T13:12:51Z"
"","2230","InnerAssignment docs need to mention while idiom","Created: 2006-03-11 Creator: Jason Bennett SF issue: 418  InnerAssignment code specifically checks for the ""while idiom"" (while ( ( str = in.readLine() ) != null )) and allows it, but the documentation does not mention this. Documentation should be updated to specifically mention that code like this is allowed.","closed","approved,","romani","2015-09-24T01:52:45Z","2015-09-25T12:48:01Z"
"","2436","NeedBraces: allow no body loops","Created: 2005-05-27 Creator: Jon Schewe   Currently the check for need braces checks to ensure that single line loops have braces. However I have found there to be 3 classes of loops: 1) those with multiple lines (braces are required) 2) those with a single line (braces are optional, checkstyle should make them required) 3) those with 0 lines (braces are optional, checkstyle should allow them to be optional)  Cases 1 and 2 are currently handled just fine. I'd like to have checkstyle disallow loops without braces, UNLESS they have 0 statements. Here is one below: while(fco.removeAssignedRole(this));  In this case removeAssignedRole returns true if something was removed and false otherwise. Here I'm trying to remove all instances of this from fco.  ``` /var/tmp $ java -jar checkstyle-6.11.2-all.jar -c 3.xml 3.java Starting audit... /var/tmp/3.java:4: error: 'while' construct must use '{}'s. Audit done. Checkstyle ends with 1 errors.  /var/tmp $ cat 3.java  public class TestClass extends SomeClass{  public String toString(){     while(fco.removeAssignedRole(this));  }  }08:02 /var/tmp $ cat 3.xml                        ```","closed","new feature,","romani","2015-10-24T15:04:48Z","2015-11-24T23:18:47Z"
"","2416","Issue #2415: IllegalTypeCheck ignores tokens configuration parameter","Created patch. Created unit test case. Built to verify that it works.","closed","","lennartj","2015-10-22T08:33:27Z","2015-11-01T00:17:30Z"
"","2589","unify it test code","Created from  #2574.  Even though the IT folder isn't that big, then are a few improvements we can make to it to be more efficient and remove some of the problems we were seeing in other issues.  `getFilePath` and `ConfigurationBuilder` constantly keeps scanning the IT folder for input files every instance. It also has the problem of picking up the first file it finds by name, causing some input files to be hidden and not used, and using input files of different packages.  To be more like the Test folder, we can remove `ConfigurationBuilder` and move everything it needs to `BaseCheckTestSupport`. They can also be made static where applicable since all tests require them. Example: google configuration as a class.  `BaseCheckTestSupport` also needs some clarification on 2 asserts that have the exact same error message for the same method, which was a little confusing. https://github.com/checkstyle/checkstyle/blob/344ea5c012d1814441b5758013a2b035c6e1613a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java#L132 https://github.com/checkstyle/checkstyle/blob/344ea5c012d1814441b5758013a2b035c6e1613a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java#L141  Finally, `BaseCheckTestSupport` verifies all the expected errors are matched (`aExpected`), but it doesn't verify the expected warnings (`aWarnsExpected`), so we can be left with outdated warnings.","closed","miscellaneous,","rnveach","2015-11-12T16:25:52Z","2015-11-13T03:12:38Z"
"","2873","create  concept of inheritance/override and compositions/extension of configs","create  concept of inheritance/override and compositions of configs to support main config and custom suppression and additional changes to certain Checks without copy-paste of configs. ##","open","","romani","2016-02-04T15:28:48Z","2022-04-07T18:50:46Z"
"","2684","False negative on brace spacing when using double braces for static collection instantiation","Could there be an update to checkstyle's knowledge of Java syntax?  Double curly braces (`{{ ... }}`) are valid Java syntax for statically instantiating collections, but checkstyle falsely reports styling errors about each brace pair being together. ##","closed","","mcandre","2015-12-09T18:00:32Z","2016-11-11T00:02:36Z"
"","2494","Issue #2451: removed excess hierarchy from IllegalCatchCheck","Copy field and methods from AbstractIllegalCheck","closed","","rnveach","2015-10-31T23:14:02Z","2015-11-01T13:18:09Z"
"","2546","new Check: RegexpOnFilename","Copied from https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/256  This check applies a given regular expression to the names of files. Depending on the configuration, a warning is logged if a required match is not found, or if an illegal match is found. This is useful for situations such as: Checking that resources in certain directories follow a naming convention Resource file names contain only legal characters Files of certain types are created in the right places, e.g. Java files under src/*/java Prevent certain files or types of files altogether, by ""banning"" their names By default, this check flags leading and trailing spaces in file names.  targetFolderPattern - regular expression that will be applied to canonical folder location of the file. It does not contains filename, only folder/directory. fileNamePattern - regular expression that will be applied to filename (with extension). match - boolean option. TRUE - report matching of files by Paterns (message regexp.filepath.match will be used) , FALSE - report all mismatching of files by Paterns (message regexp.filepath.mismatch will be used)  ```                                       ```","closed","new feature,","rnveach","2015-11-06T21:57:32Z","2016-01-30T14:01:50Z"
"","2499","minor: converted to try with resource","converted old try/finally to try with resource","closed","","rnveach","2015-11-01T04:23:28Z","2015-11-01T14:09:07Z"
"","2740","Issue #2661: Enforce MultipleStringLiteralsExtended of sevntu-checkstyle over Checkstyle source code","controversial violations  ``` [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java:[470,40] (extension) MultipleStringLiteralsExtended: The String ""]"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java:[71,13] (extension) MultipleStringLiteralsExtended: The String ""br"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java:[71,19] (extension) MultipleStringLiteralsExtended: The String ""li"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java:[71,25] (extension) MultipleStringLiteralsExtended: The String ""dt"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java:[71,31] (extension) MultipleStringLiteralsExtended: The String ""dd"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java:[71,37] (extension) MultipleStringLiteralsExtended: The String ""hr"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java:[71,43] (extension) MultipleStringLiteralsExtended: The String ""img"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java:[71,50] (extension) MultipleStringLiteralsExtended: The String ""p"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java:[71,55] (extension) MultipleStringLiteralsExtended: The String ""td"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java:[71,61] (extension) MultipleStringLiteralsExtended: The String ""tr"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java:[71,67] (extension) MultipleStringLiteralsExtended: The String ""th"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java:[291,43] (extension) MultipleStringLiteralsExtended: The String ""/**"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java:[91,61] (extension) MultipleStringLiteralsExtended: The String ""\"">"" appears 2 times in the file. [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java:[118,68] (extension) MultipleStringLiteralsExtended: The String ""\"""" appears 4 times in the file. ```","closed","","MEZk","2015-12-18T18:57:34Z","2015-12-23T17:30:20Z"
"","2139","Issue #2137: Make test for FileTabCharacter locale and OS independent","Constructor of `FileInputStream` throws `FileNotFoundException`, but validation happens in native method:  ``` java     /**      * Opens the specified file for reading.      * @param name the name of the file      */     private native void open0(String name) throws FileNotFoundException; ```  Error message is locale and system dependent, so it cannot be reliably checked in test. It's better to use manual file existence validation instead.","closed","","mkordas","2015-09-07T21:16:40Z","2015-09-07T22:24:45Z"
"","2603","WhitespaceAround should have an allowEmptyLambda parameter","Consider the following code:  ``` Runnable noop = () -> {}; ```  With the `LCURLY` and `RCURLY` parameters of [`WhitespaceAround`](http://checkstyle.sourceforge.net/config_whitespace.html#WhitespaceAround), it does not seem possible to configure it to accept this construct if there is no space between the curly brackets.  It thus seems that an `allowEmptyLambda` parameter would be useful, as there is already for constructors, methods etc.","closed","new feature,","DidierLoiseau","2015-11-14T17:23:37Z","2015-12-09T13:41:04Z"
"","2260","API ConfigurationLoader.loadConfiguration(InputSource, PropertyResolver, boolean) has been removed in 6.10/6.11","ConfigurationLoader.loadConfiguration(InputSource, PropertyResolver, boolean) has been made private somewhere after Checkstyle 6.9 - without notice I might add. The eclipse-cs plugin uses this method to load Checkstyle configuration from various sources. It is unclear to me whether ConfigurationLoader.loadConfiguration(String, PropertyResolver, boolean) is a sufficient replacement - and I am not inclined to retest all ways how a checkstyle configuration can be defined in eclipse-cs plugin.  Please make the method public again, under current circumstances I will not be able to upgrade eclipse-cs to Checkstyle 6.11.1. ##","open","","lkoe","2015-10-03T18:17:39Z","2016-12-14T18:17:13Z"
"","2680","Issue #2678: Fix NPE in ParameterNameCheck","Configuration:  ``` xml                                                                  ```  No NPE on the following projects:  [checkstyle](http://mezk.github.io/checkstyle/checkstyle.html) sevntu checkstyle - 0 violations guava - 0 violations [hibernate](http://mezk.github.io/hibernate/checkstyle.html) [HBase](http://mezk.github.io/HBase/checkstyle.html) [openjdk](http://mezk.github.io/openjdk/checkstyle.html) [spring](http://mezk.github.io/spring/checkstyle.html) [Orekit](http://mezk.github.io/Orekit/checkstyle.html)","closed","","MEZk","2015-12-08T19:03:29Z","2015-12-16T18:01:13Z"
"","2678","ParameterNameCheck: NullPointerException over checkstyle's input file","config: https://github.com/checkstyle/contribution/blob/5d0634ce96420e3049250899a740296597481a90/checkstyle-tester/checks-nonjavadoc-error.xml#L152  command: https://github.com/checkstyle/checkstyle/blob/master/.travis.yml#L82  ``` Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing /home/travis/build/checkstyle/checkstyle/contribution/checkstyle-tester/src/main/java/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/InputParameterNumber.java     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:282)     at org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:252)     at org.apache.maven.plugin.checkstyle.AbstractCheckstyleReport.executeReport(AbstractCheckstyleReport.java:473)     ... 28 more Caused by: java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck.isOverriddenMethod(ParameterNameCheck.java:125)     at com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck.mustCheckName(ParameterNameCheck.java:106)     at com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.visitToken(AbstractNameCheck.java:67)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:390)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:501)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:332)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:204)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:266)     ... 30 more ```  after fix, https://github.com/checkstyle/contribution/commit/a2d7f1a64a087715dc9c698d6615ba52b6179acf need to be reverted.","closed","high demand,","romani","2015-12-08T14:23:56Z","2015-12-09T20:38:08Z"
"","2095","False negative in AtclauseOrder check","Config:  ``` xml                                                             ```  Input:  ``` java     class SomeClass {         /**          * Some text.          * @throws Exception Some text.          * @serialData Some javadoc.          * @return Some text.                 //violation          */         String method() throws Exception         {             return ""null"";         }     } ```  Result:  ``` bash vlad@vlad-N61PC-M2S ~/cli $ java -jar checkstyle-6.10.1-all.jar -c my_check.xml Test.java Starting audit... Audit done. ```","closed","approved,","Vladlis","2015-09-03T18:58:47Z","2015-09-17T20:04:54Z"
"","2997","fix TokenTypes compatibility problems between 6.15 and 6.16","Commit https://github.com/checkstyle/checkstyle/commit/23e6eba325dd5e56cbe6ccbb58de7d4768fef0f8  damaged compatibility between 6.16 and all previous releases. checkstyle-6.15-all.jar:/com/puppycrawl/tools/checkstyle/grammars/GeneratedJavaTokenTypes.txt checkstyle-6.16-all.jar:/com/puppycrawl/tools/checkstyle/grammars/GeneratedJavaTokenTypes.txt  ![screenshot-damage-compatibility-6 15-6 16](https://cloud.githubusercontent.com/assets/812984/13478781/934d41fc-e087-11e5-8a45-ea03548fa8db.png)","closed","approved,","romani","2016-03-02T23:02:17Z","2016-03-03T16:30:06Z"
"","2874","use CyclomaticComplexity.switchBlockAsSingleDecisionPoint in checkstyle_checks.xml","Comment in suppression.xml: https://github.com/checkstyle/checkstyle/blob/master/config/suppressions.xml#L129 is obsolete Issue  https://github.com/checkstyle/checkstyle/issues/2029"" is resolved but new option is not used .  update like:  ``` --- a/config/checkstyle_checks.xml +++ b/config/checkstyle_checks.xml @@ -301,7 +301,9 @@","closed","miscellaneous,","romani","2016-02-04T22:31:15Z","2016-09-08T20:07:56Z"
"","2129","remove non-maven output from test launches","command ""mvn clean test""  in output there are some print from our code, but there should be no output:  ``` Running com.puppycrawl.tools.checkstyle.CommitValidationTest SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"". SLF4J: Defaulting to no-operation (NOP) logger implementation SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details. ```  ``` Running com.puppycrawl.tools.checkstyle.TreeWalkerTest Sep 06, 2015 6:14:08 AM com.puppycrawl.tools.checkstyle.TreeWalker registerCheck WARNING: Check 'com.puppycrawl.tools.checkstyle.TreeWalkerTest$BadJavaDocCheck' waits for comment type token ('SINGLE_LINE_COMMENT') and should override 'isCommentNodesRequired()' method to return 'true' ```","closed","approved,","romani","2015-09-06T13:40:23Z","2015-09-14T01:33:24Z"
"","2797","Issue #2609: Refactor GUI package","CodeSelector now works without pre-selection and by double click. Frame model is separated from view.","closed","","Vladlis","2016-01-02T23:29:57Z","2016-01-12T09:49:49Z"
"","2068","Detect final methods in Enumeration for RedundantModifier","Code:  ``` package test;  public enum TestEnum1 {     ;      public static final TestEnum1 get() { // line 6         return null;     }      public final TestEnum1 test() { // line 10         return null;     } } ```  Config:  ```                                               ```  Output:  ``` Starting audit... Audit done. ```  I expected line 6's and 10's ""final"" to be marked as a redundant modifier but it is not. Final methods mean it cannot be overridden when the class is inherited but enumerations cannot be inherited anyways as they are not a class. Check style should treat the enumeration as if it were a final class, which it would then mark as redundant. I am using checkstyle 6.10.1 . ##","closed","miscellaneous,","rnveach","2015-09-01T21:40:36Z","2016-12-14T18:17:33Z"
"","2077","CommentsIndentationCheck reports some false positives when in the middle of a method","Code:  ``` package test;  public class TestClass3 {     public void test() {         int i = 0;         String s = """";          switch (i) {         case -2:             // what             i++;             // no break here         case 0:             // what             s.indexOf(""ignore"");             // no break here","closed","approved,","rnveach","2015-09-02T16:46:22Z","2015-10-31T22:54:57Z"
"","2078","CommentsIndentationCheck doesn't report errors at end of block","Code:  ``` package test;  public class TestClass3 {     public void test() {         int a = 0;             // wrong","closed","approved,","rnveach","2015-09-02T16:58:19Z","2015-10-31T22:53:11Z"
"","2122","Detect final methods in Anonymous Class for RedundantModifier","Code:  ``` package test;  public class TestClass3 {     public static abstract class Example {         public abstract void innerTest();     }      public static void test() {         new Example() {             @Override             public final void innerTest() { // line 11             }         };     } } ```  Config:  ```                                               ```  Output:  ``` Starting audit... Audit done. ```  I expected line 11's ""final"" to be marked as a redundant modifier but it is not unless the main class is marked as final itself. It shouldn't have to rely on the main class definition because final methods mean it cannot be overridden when the class is inherited but an anonymous class cannot be inherited anyways as they are anonymous and can't be directly referenced.","closed","approved,","rnveach","2015-09-05T17:57:32Z","2015-11-24T23:22:24Z"
"","2291","Inconsistent violations for NeedBraces/allowSingleLineStatement","Code:  ``` package test;  public class TestClass {     public static void t() {         int count = 0;          for (;;) // line 7             count++;          for (String s: new String[]{""""}) // line 10             count++;     } } ```  Config:  ```                                                               ```  Output:  ``` Starting audit... \TestClass.java:7: error: 'for' construct must use '{}'s. Audit done. Checkstyle ends with 1 errors. ```  I was expecting both lines to be reported as errors, since they are identical for loops, but the for-each loop isn't reported. I used CS 6.11.2.","closed","approved,","rnveach","2015-10-09T00:42:32Z","2015-12-11T16:38:58Z"
"","2922","Issue #2904: fixed bad code in InputFinalLocalVariableNameLambda","Code was required by code coverage but I made a compilable version.","closed","","rnveach","2016-02-16T00:59:39Z","2016-02-16T14:13:35Z"
"","2564","Issue #2451: removed excess hierarchy from ClassTypeParameterNameCheck","ClassTypeParameterNameCheck now extends AbstractNameCheck  Copied methods over, and removed getLocation. Fixed test's type.","closed","","rnveach","2015-11-10T02:51:19Z","2015-11-10T13:54:28Z"
"","2043","Issue #1566: ClassFanOutComplexity turned on","ClassFanOutComplexity was turned on.","closed","","rdiachenko","2015-08-31T14:41:38Z","2015-08-31T21:37:12Z"
"","2736","investigate why AuditEvent doesnot contain severity","class: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java  formatting of message is done by method: `protected String formErrorMessage(AuditEvent event, SeverityLevel severityLevel) {`  Why severity need to be provided separately to AuditEvent ? each check could have its own severity.","closed","","romani","2015-12-18T14:14:31Z","2015-12-23T14:26:28Z"
"","2785","Cover all xml files by xml structure validation","checkstyle/checkstyle $find . -name ""*.xml"" | grep -vE ""target|checkstyle_packages.xml|google_checks.xml|sun_checks.xml|site.xml|.idea|pom.xml""  ./src/site/resources/files/suppressions_none.xml ./src/main/resources/com/puppycrawl/tools/checkstyle/ant/antlib.xml ./src/xdocs/config_design.xml ./src/xdocs/property_types.xml ./src/xdocs/config_naming.xml ./src/xdocs/extending.xml ./src/xdocs/eclipse.xml ./src/xdocs/report_issue.xml ./src/xdocs/sun_style.xml ./src/xdocs/config_imports.xml ./src/xdocs/config_misc.xml ./src/xdocs/config_regexp.xml ./src/xdocs/config_filters.xml ./src/xdocs/config_javadoc.xml ./src/xdocs/consulting.xml ./src/xdocs/config_sizes.xml ./src/xdocs/config_modifier.xml ./src/xdocs/config_whitespace.xml ./src/xdocs/style_configs.xml ./src/xdocs/releasenotes_old.xml ./src/xdocs/running.xml ./src/xdocs/writingfilters.xml ./src/xdocs/config_annotation.xml ./src/xdocs/config_coding.xml ./src/xdocs/contributing.xml ./src/xdocs/releasenotes.xml ./src/xdocs/config_blocks.xml ./src/xdocs/config_header.xml ./src/xdocs/beginning_development.xml ./src/xdocs/idea.xml ./src/xdocs/config_reporting.xml ./src/xdocs/google_style.xml ./src/xdocs/netbeans.xml ./src/xdocs/config.xml ./src/xdocs/config_metrics.xml ./src/xdocs/checks.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/config-classname2.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/config-Incorrect.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/config-classname-prop.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_two.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_broken.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_WithNewElement.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_one-re.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_wrong.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_two-re.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_one.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_complete.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/api/import-control_complete.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/config-filelength.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppressions_no_check_and_id.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppressions_multiple.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppressions_invalid_file.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppressions_id.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppressions_no_check.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppressions_no_file.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppressions_bad_int.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/filters/suppressions_none.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/config-classname.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/config-classname2-error.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/subdir/including.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/missing_config_name.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/missing_property_value.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/missing_property_name.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/custom_messages.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/config_with_ignore.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/missing_config_parent.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/config_with_checker_ignore.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/included.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/including.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/config_nonexisting_property.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/empty_configuration.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/configs/checkstyle_checks.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/config-non-existing-classname.xml ./src/test/resources/com/puppycrawl/tools/checkstyle/import-control_complete.xml ./config/ant-phase-verify.xml ./config/checkstyle_sevntu_checks.xml ./config/findbugs-exclude.xml ./config/ant-phase-compile.xml ./config/assembly-bin.xml ./config/pmd.xml ./config/intellij-idea-inspection-scope.xml ./config/suppressions.xml ./config/intellij-idea-inspections.xml ./config/build.xml ./config/assembly-src.xml ./config/deploy-settings.xml ./config/checkstyle_checks.xml ./config/import-control.xml ./config/sevntu_suppressions.xml  All this files need to be validated by xml-maven-plugin.  Xml validation should be moved to separate Travis build item (as it is fragile by internet connection) and skipped in all other build items: `$ mvn xml:validate` `$ mvn xml:validate -Dxml.skip=true` ##","open","medium,","romani","2015-12-29T22:01:16Z","2020-04-19T10:56:13Z"
"","2270","SuppressionFilter's name attribute format is OS-dependent.","Checkstyle's suppression filter identify to ignore using _files_ attribute. Values in the attribute use system-dependent path separator.  Reporting from [stackoverflow](http://stackoverflow.com/questions/13874582/what-is-the-correct-syntax-to-suppress-specific-checkstyle-rules-on-certain-file) suggest very nasty form of workaround:  ``` xml      ```  There should be an ability to specify uniformed paths, for example in Ant-like style. ##","open","","pbaranchikov","2015-10-05T15:47:35Z","2017-08-13T09:30:36Z"
"","2738","Issue #2661: Enforce AvoidHidingCauseException of sevntu-checkstyle over Checkstyle source code","Checkstyle violation:  ``` [ERROR] src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java:[128,13] (extension) AvoidHidingCauseException: Cause exception 'ex' was lost. ```  Cause exception wont be lost because we initiate the cause by invoking `initCause` method. See https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java#L129  Is it a false positive violation?","closed","","MEZk","2015-12-18T18:32:20Z","2015-12-20T22:17:36Z"
"","2649","cannot initialize module RegexpSingleline - Property 'ignoreComments' in module RegexpSingleline does not exist, please check the documentation","Checkstyle version: 6.12.1  Config:  ``` xml               ```  Stacktrace:  > org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':advertising:checkstyle'. >     at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:69) >     at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:46) >     at org.gradle.api.internal.tasks.execution.PostExecutionAnalysisTaskExecuter.execute(PostExecutionAnalysisTaskExecuter.java:35) >     at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:64) >     at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58) >     at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:52) >     at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52) >     at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:53) >     at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43) >     at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:203) >     at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:185) >     at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:62) >     at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:50) >     at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54) >     at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40) > Caused by: : Unable to create a Checker: configLocation {/Users/nbaudy/dev/NewClient/XyralityCheckStyle/sun_checks.xml}, classpath {null}. >     at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.createChecker(CheckstyleAntTask.java:406) >     at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.realExecute(CheckstyleAntTask.java:310) >     at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.execute(CheckstyleAntTask.java:293) >     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292) >     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106) >     at org.gradle.api.internal.project.ant.BasicAntBuilder.nodeCompleted(BasicAntBuilder.java:78) >     at org.gradle.api.internal.project.antbuilder.AntBuilderDelegate.nodeCompleted(AntBuilderDelegate.groovy:80) >     at org.gradle.api.plugins.quality.Checkstyle$_run_closure1.doCall(Checkstyle.groovy:146) >     at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:67) >     at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:130) >     at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:91) >     at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder$3.execute(DefaultIsolatedAntBuilder.java:178) >     at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder$3.execute(DefaultIsolatedAntBuilder.java:160) >     at org.gradle.api.internal.project.antbuilder.ClassPathToClassLoaderCache.withCachedClassLoader(ClassPathToClassLoaderCache.java:139) >     at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder.execute(DefaultIsolatedAntBuilder.java:154) >     at org.gradle.api.internal.project.IsolatedAntBuilder$execute$4.call(Unknown Source) >     at org.gradle.api.plugins.quality.Checkstyle.run(Checkstyle.groovy:139) >     at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:75) >     at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.doExecute(AnnotationProcessingTaskFactory.java:227) >     at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:220) >     at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:209) >     at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:585) >     at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:568) >     at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:80) >     at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:61) >     ... 14 more > Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module RegexpSingleline - Property 'ignoreComments' in module RegexpSingleline does not exist, please check the documentation >     at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:168) >     at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:138) >     at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.createChecker(CheckstyleAntTask.java:403) >     ... 38 more > Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Property 'ignoreComments' in module RegexpSingleline does not exist, please check the documentation >     at com.puppycrawl.tools.checkstyle.api.AutomaticBean.tryCopyProperty(AutomaticBean.java:165) >     at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:131) >     at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:163) >     ... 40 more","closed","","vanniktech","2015-11-24T15:15:25Z","2015-11-25T10:36:33Z"
"","2376","Typo in Javadoc tag name","Checkstyle supports Javadoc tag named `basefront`: https://github.com/checkstyle/checkstyle/search?utf8=%E2%9C%93&q=basefront&type=Code  That's a typo - correct name of the tag is `basefont`: http://www.w3schools.com/tags/tag_basefont.asp  Grammar file should be changed to fix the issue.","closed","antlr,","mkordas","2015-10-17T21:31:35Z","2015-12-26T01:57:07Z"
"","2267","JavadocMethod false positive when @{code ...} is at the beginning of the line","Checkstyle reports ""First sentence should end with a period"" for the following Javadoc block:  ``` java         /**          * Method do something on, when parameter is          * @{code null}.          */ ```  The following is treated without false positive:  ``` java         /**          * Method do something on, when parameter is @{code null}.          */ ```","closed","","pbaranchikov","2015-10-05T08:24:14Z","2015-10-05T08:27:33Z"
"","2992","ThreadLocal usage in single threaded checkstyle","Checkstyle is not multi-threaded by design right now. We will make it multi-threaded.  ``` public class FileContentsHolder     extends AbstractCheck {     /** The current file contents. */     private static final ThreadLocal FILE_CONTENTS = new ThreadLocal(); ```  It was there from the beginning. https://github.com/checkstyle/checkstyle/blame/262209477f39964a63103613f3e2c985da083371/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/FileContentsHolder.java  It is a mistake. We will fix this.     --- Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/31488708-threadlocal-usage-in-single-threaded-checkstyle?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F500528&utm_medium=issues&utm_source=github).","closed","miscellaneous,","romani","2016-03-01T14:22:43Z","2016-11-28T22:35:46Z"
"","2437","Issue #2421: started enabling some checking on it folder","checkstyle is changed to run on all files under ""src"". Only exclusions are test input folders.  currently alot of the IT folder is being suppressed by CS, by lines. I will gradually work on them, line by line, hopefully in smaller pieces.  Currently violations fixed are missing headers, and files not ending with a new line. Also some spaces on the end of a line for sites.","closed","","rnveach","2015-10-24T18:46:09Z","2015-10-24T23:15:31Z"
"","2079","Java8 type-use annotations on qualified types not supported","Checkstyle fails to parse some code using type annotations on qualified types:  CheckstyleFail.java:  ``` java import java.awt.geom.Rectangle2D; import java.lang.annotation.ElementType; import java.lang.annotation.Target;  public class CheckstyleFail {     /* Causes parse failure */     Rectangle2D.@Ann Double rect = null;      /* Causes parse failure */     public final Rectangle2D.@Ann Double getRect1() {         return new Rectangle2D.Double();     }      /* Causes parse failure */     public final Rectangle2D.Double getRect2() {         return new Rectangle2D.@Ann Double();     }      /* Amazingly does not cause parse failure */     public final Rectangle2D.Double getRect3() {         Rectangle2D.@Ann Double rect = null;         return rect;     } }  @Target({ ElementType.TYPE_USE }) @interface Ann {} ```  checkstyle.xml:  ``` XML          ```  This is similar to bug [#904](https://github.com/checkstyle/checkstyle/issues/904): Java8 type-use annotations on arrays not supported","closed","antlr,","RocusHalbasch","2015-09-02T18:32:21Z","2016-02-10T14:38:06Z"
"","2575","Create directory structure needed to store cache file","Checkstyle currently cannot create directory structure to store cache file. Always existing directory needs to be provided.  For example `cacheFile` property is configured as `temp/checkstyle.cache`, but `temp` directory doesn't exist not very meaningful `IOException` is thrown","closed","approved,","mkordas","2015-11-10T22:05:47Z","2015-12-15T13:30:13Z"
"","2905","Checkstyle cannot be built using JDK9 as tools.jar has been dropped","Checkstyle cannot be built using JDK9 as tools.jar has been dropped. See https://issues.apache.org/jira/browse/MNG-5732","closed","miscellaneous,","peteryhwong","2016-02-13T13:49:58Z","2016-02-15T04:19:33Z"
"","2223","Issue #1290: SuppressWarningHolder coverage has been increased","Check modified, but reports are same: after changes: http://sabaka.github.io/SuppressWarningHolder/checkstyle.html before changes: http://sabaka.github.io/SuppressWarningHolder/master/checkstyle.html","closed","","sabaka","2015-09-22T00:56:30Z","2015-09-30T13:46:41Z"
"","2792","Config of Google Style does not include InterfaceTypeParameterName check","Check `InterfaceTypeParameterName` should be enabled in Google Style config and properly tested/documented as `MethodTypeParameterName` and `ClassTypeParameterName` currently are.","closed","approved,","mkordas","2015-12-31T14:19:25Z","2016-01-17T17:04:28Z"
"","2216","Update Error Prone to 2.0.5","Changelog: https://github.com/google/error-prone/compare/v2.0.4...v2.0.5","closed","approved,","mkordas","2015-09-19T23:20:55Z","2015-09-20T13:05:20Z"
"","2585","Pull #2585: Update FindBugs Maven Plugin to 3.0.3","Changelog: https://github.com/gleclaire/findbugs-maven-plugin/compare/findbugs-maven-plugin-3.0.2...findbugs-maven-plugin-3.0.3","closed","miscellaneous,","mkordas","2015-11-12T07:43:07Z","2015-11-19T22:56:16Z"
"","2247","Pull #2247: Update plexus-compiler-javac-errorprone to 2.6","Changelog: https://github.com/codehaus-plexus/plexus-compiler/compare/plexus-compiler-2.5...codehaus-plexus:plexus-compiler-2.6","closed","","mkordas","2015-09-28T19:36:17Z","2015-09-28T21:18:52Z"
"","2864","Issue #2795: fixed handling of tabs in LineWrapping","changed all `getColumnNo` into calls to `expandedTabsColumnNo`. `getFirstNodeIndent` had its static removed so it can call `expandedTabsColumnNo`, and slightly changed since the variable used the same name as a field. Copied `expandedTabsColumnNo` from `AbstractExpressionHandler`. We could make this class extend `AbstractExpressionHandler` if we want, but I'm not sure if it fits since `AbstractExpressionHandler` has a parent, type, and names its firstAst `mainAst`.","closed","","rnveach","2016-02-01T22:19:58Z","2018-01-17T11:05:23Z"
"","2217","Issue #2216: Update Error Prone to 2.0.5","Change from  ``` xml **/Input*.java ```  to  ``` xml **/*Input*.java ```  was needed because #2161 is not yet finished, while Error Prone analysis become stronger and raised violations on additional files.","closed","","mkordas","2015-09-19T23:35:29Z","2015-09-20T12:30:59Z"
"","2220","non blocking test failures during cobertura coverage check","caused by fix of #2129  `mvn clean verify`  in output:  ``` Results :  Failed tests:    MainTest.testWrongArgument expected: but was:  Tests run: 1566, Failures: 1, Errors: 0, Skipped: 0  [ERROR] There are test failures.  Please refer to ~/java/git-others/checkstyle/checkstyle/target/surefire-reports for the individual test results. ```  update might be related to introduction of slf4j-simple artifact to avoid another warning. ##","closed","approved,","romani","2015-09-21T14:04:06Z","2018-03-18T20:01:45Z"
"","2783","UTs should be launched in default locale","caused by #2728 .  We have no validation that all our Checks are running fine in all supported locales. This does not work :https://github.com/checkstyle/checkstyle/blob/master/.travis.yml#L220 due to  https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L780  What we need: 1) remove https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L780 2) update UTs to work fine on default Locale (defined by user) 3) update Travis to run all UTs in all supported locales to prove that all messages are correct by format. So we should have Travis UT only build item for each language that we have.","closed","miscellaneous,","romani","2015-12-29T16:44:52Z","2016-02-05T17:25:11Z"
"","2065","broken compatibility with maven-checkstyle-plugin:2.15 at checkstyle:6.10","caught by https://travis-ci.org/checkstyle/checkstyle/jobs/78162902 reason : https://github.com/checkstyle/checkstyle/compare/aa7b68597a6f...2d8f5576bb30 update of PropertiesExpander  ``` [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.15:check (default-cli) on project orekit: Execution default-cli of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.15:check failed: An API incompatibility was encountered while executing org.apache.maven.plugins:maven-checkstyle-plugin:2.15:check: java.lang.NoSuchMethodError: com.puppycrawl.tools.checkstyle.PropertiesExpander.(Ljava/util/Properties;)V [ERROR] ----------------------------------------------------- [ERROR] realm =    plugin>org.apache.maven.plugins:maven-checkstyle-plugin:2.15 [ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy [ERROR] urls[0] = file:/home/travis/.m2/repository/org/apache/maven/plugins/maven-checkstyle-plugin/2.15/maven-checkstyle-plugin-2.15.jar [ERROR] urls[1] = file:/home/travis/.m2/repository/com/puppycrawl/tools/checkstyle/6.10-SNAPSHOT/checkstyle-6.10-SNAPSHOT.jar ................ [ERROR] urls[55] = file:/home/travis/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar [ERROR] Number of foreign imports: 1 [ERROR] import: Entry[import  from realm ClassRealm[project>org.orekit:orekit:7.1-SNAPSHOT, parent: ClassRealm[maven.api, parent: null]]] [ERROR]  [ERROR] ----------------------------------------------------- [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException ``` ##","closed","","romani","2015-09-01T14:22:14Z","2016-11-11T00:14:49Z"
"","2422","Issue #2421: expanded checks on test directory","Can't test ""GeneratedJava14LexerTest.testUnexpectedChar"" since I'm windows. Removed exclude in ""ant-phase-verify"". It's only parsing the ""src"" directory, so it shouldn't be an issue. Added suppressions for ""BaseCheckTestSupport"" since it covers alot of things.  Added missing headers. Split long/complex methods into 2. Made ""CompareTreesWithComments.expectedTree"" private with a setter. If this isn't acceptable, the only other option I see here is a suppression.","closed","","rnveach","2015-10-22T19:48:56Z","2017-08-16T15:59:55Z"
"","2651","Remove maven-failsafe-plugin from linkcheck excludes, since link was fixed","Can be removed from excludes in next version update  ``` http://maven.apache.org/surefire/maven-surefire-plugin http://maven.apache.org/surefire/maven-surefire-report-plugin ```","closed","","MEZk","2015-11-27T16:28:52Z","2015-12-06T17:38:22Z"
"","2698","CheckStyles throws in warning that parameters must be final while using Java 8","But in Java 8 they are implicitly final so the warning is not really necessary or am I missing something?  For instance public void start(Stage stage) would throw a warning but public void start(final Stage stage) wouldn't. In Java 8 however, they are implicitly final.   I am still new to java, so sorry if I missed the point of the check.","closed","","Nikki1993","2015-12-15T12:42:14Z","2015-12-15T14:11:48Z"
"","2137","FileTabCharacterCheckTest.testBadFile fails if locale is non-English","Build from current master, I receive:  ``` Results :  Failed tests: FileTabCharacterCheckTest.testBadFile:93->BaseCheckTestSupport.verify:121 error message 0 expected: but was:  Tests run: 1545, Failures: 1, Errors: 0, Skipped: 1 ```  Looking at the tests, I see that the code expects an English locale which is not always the case. Make the test locale independent.","closed","approved,","michael-o","2015-09-07T15:57:28Z","2015-09-07T22:25:36Z"
"","2349","Issue #1238: Replaced outdated link for bamboo-checkstyle-plugin","Both links are forwarding to bitbucket project which is being updated.  ![image](https://cloud.githubusercontent.com/assets/2310862/10496062/3ba0ada8-72bf-11e5-86ce-a8b7d47a1e7d.png)","closed","","nejdaw","2015-10-14T20:03:54Z","2015-10-14T20:27:27Z"
"","2434","Inconvenience to debug UTs after recent changes in BaseCheckTestSupport","Before commit: ![before_commit](https://cloud.githubusercontent.com/assets/812984/10710704/9d191dd4-7a19-11e5-9e6e-24a486f345c1.png)  After commit: ![after_commit](https://cloud.githubusercontent.com/assets/812984/10710706/a09149aa-7a19-11e5-9417-b5f98b91df24.png)  caused by commit: https://github.com/checkstyle/checkstyle/blob/44cc8b53c90117295151ea6723f859287f51dda5/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java","closed","approved,","romani","2015-10-24T13:37:48Z","2015-10-24T14:13:37Z"
"","2989","SummaryJavadoc: ""period"" does not work for Unicode symbol that have space embedded","Because I am Chinese, we write javadoc in Chinese, and our period token could be ""。"",  ""！""... etc, and I've tried to set period to """" or ""。"", neither works.  I don't need have space after perion, this one :""。"", is the Chinese version of period, it is just one charactor(Unicode \u3002).  Actually I don't need period at all. For checker SummaryJavadoc, I need to write every javadoc end with one English period("".""), but because we write javadoc in Chinese, we don't need it.  This is a good javadoc(1):  ``` /**  * Good javadoc.  */ ```  But I need this(2):  ``` /**  * Good javadoc for me, but not qualifed, because of the last punctuation。  */ ```  or this(3):  ``` /**  * 合法注释。  */ ```  or even this one is good enough for me(4):  ``` /**  * Good javadoc for me, but not qualifed, because there's none period  */ ```  but not this(5):  ``` /**   *   */ ```  With default setting: `` only (1) is qualified for checkstyle  I changed my setting with this:  ```        ```  then all 5 types of javadoc are qualifed for checkstyle.   I changed my setting with this:  ```        ```  then all 5 types of javadoc are not qualifed.  T.T  ---  I can use ""。"" (Unicode \u3002), it's not javadoc issue also.  ``` E:\test>type TestClass.java public class TestClass {     /**     * First sentence。second sentence.     */    public void foo(){}     /**     * First sentence. second sentence.     */    public void foo2(){} } E:\test> javadoc TestClass.java Loading source file TestClass.java... Constructing Javadoc information... 正在装入源文件 TestClass.java... 正在构造 Javadoc 信息... 标准 Doclet 版本 1.6.0_05 正在构建所有软件包和类的树... 正在生成 TestClass.html... 正在生成 package-frame.html... 正在生成 package-summary.html... 正在生成 package-tree.html... 正在生成 constant-values.html... 正在构建所有软件包和类的索引... 正在生成 overview-tree.html... 正在生成 index-all.html... 正在生成 deprecated-list.html... 正在构建所有类的索引... 正在生成 allclasses-frame.html... 正在生成 allclasses-noframe.html... 正在生成 index.html... 正在生成 help-doc.html... 正在生成 stylesheet.css... ```  result is : ![qq 20160301232650](https://cloud.githubusercontent.com/assets/16668296/13431632/2aee534e-e005-11e5-84d7-324bddd600e3.png)  I think it is just some locale setting‘s issue.  Javadoc has an option **-locale**. It said: Specifies the locale that javadoc uses when generating documentation. The argument is the name of the locale, as described in java.util.Locale documentation, such as en_US (English, United States) or en_US_WIN (Windows variant).  Specifying a locale causes javadoc to choose the resource files of that locale for messages (strings in the navigation bar, headings for lists and tables, help file contents, comments in stylesheet.css, and so forth). It also specifies the sorting order for lists sorted alphabetically, and the **sentence separator** to determine the end of the first sentence. It does not determine the locale of the doc comment text specified in the source files of the documented classes.  [javadoc - The Java API Documentation Generator](https://docs.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html#locale) ##","closed","easy,","ybbpgfjtey","2016-02-29T16:16:56Z","2017-03-03T18:55:56Z"
"","2205","Property excludeScope in JavadocMethod check does not work correctly","Based on this http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod documentation I understand that by default it checks all scopes except private. In other words this is relevant to:   ``` xml                                ```  However I found in damianszczepanik/silencio/pull/42 that above comments generates 0 errors while following one  ``` xml                   ```  complains that https://github.com/damianszczepanik/silencio/blob/b65764da81d118f40f19ee5e640fb2540bbba7c6/src/main/java/pl/szczepanik/silencio/diagnostics/ProcessorSmokeChecker.java#L45 has violation `ProcessorSmokeChecker.java:45:5: Missing a Javadoc comment`  Is that correct that excluding `private` from checker generates errors for `public`?","closed","javadoc,","damianszczepanik","2015-09-18T17:55:35Z","2015-09-18T23:21:44Z"
"","2204","Add 'baseName' option and remove 'basenameSeparator' option of TranslationCheck","Based on https://github.com/checkstyle/checkstyle/pull/2177 and discussion https://github.com/MEZk/checkstyle/commit/4b282073d8b37fc11881f5f1e834f55ca33ed2c0#commitcomment-13272046 Translation check needs new option which allows to specify resource bundles names which should be skipped while validating existence of translations. Default value should be empty String Set which means that all resource bundles should be validated.","closed","breaking compatibility,","MEZk","2015-09-18T17:09:07Z","2016-03-12T17:32:18Z"
"","2169","Update HTML documentation to describe token option in each Check","based not a rare case : https://github.com/checkstyle/checkstyle/issues/1669#issuecomment-130411907  it is not obvious from documentation that each Check has option ""token"". We need to review all Checks and put in options description all options that has Check (all setters of Check and all setters of abstract classes of that Check)","closed","approved,","romani","2015-09-12T14:38:00Z","2015-09-27T02:14:18Z"
"","2883","Remove `cache` field from TreeWalker in Checkstyle 8.0","base on problems at https://github.com/checkstyle/checkstyle/pull/2882#issuecomment-181031148  The field 'cache' and 'setCacheFile' from TreeWalker now are used by maven-checkstyle-plugin. We need to remove 'cache' field and method 'setCacheFile' from TreeWalker in Checkstyle 8.0 since they were moved to Checker in accordance with https://github.com/checkstyle/checkstyle/issues/569.  maven plugin already moved to use cache on Checker - https://github.com/apache/maven-plugins/blob/trunk/maven-checkstyle-plugin/src/main/java/org/apache/maven/plugins/checkstyle/exec/DefaultCheckstyleExecutor.java#L388 fix was done at 2016-10-20 - https://github.com/apache/maven-plugins/commit/17c9ffe1e2a8f1c52ac220f2fd3ca291cb6af7d1 last release is 2.17 from 2015-10-15 - https://maven.apache.org/plugins/maven-checkstyle-plugin/history.html  method is already empty, so we have to just wait for new release of checkstyle maven plugin.  MIGRATION NOTES: if user use old maven checkstyle plugin v 2.XX, It might experience error like ([travis link](https://travis-ci.org/sevntu-checkstyle/checkstyle-samples/builds/513788645#L4242)): ``` [ERROR]  Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:check  (default-cli) on project maven-project: Failed during checkstyle configuration:  cannot initialize module TreeWalker - Property 'cacheFile' does not exist,  please check the documentation -> [Help 1] ``` to resolve issue, upgrade maven plugin 3.0.0 or later. Example of fix - https://github.com/sevntu-checkstyle/checkstyle-samples/commit/c4f11a73a260ad965c540dcd97134dc8b793b92f","closed","breaking compatibility,","MEZk","2016-02-07T15:32:40Z","2019-03-31T20:37:42Z"
"","2273","rename CheckUtils.isVoidMethod to isNonVoidMethod","base on https://github.com/checkstyle/checkstyle/commit/a21164df1fbaff36ba020968b3a6128ab8476756#commitcomment-13570539  name is wrong, ""Non"" was missed.","closed","approved,","romani","2015-10-06T13:53:56Z","2015-10-06T15:53:48Z"
"","2128","Multiline commit messages and consistency in format of prefixes","base on discussion of PR #1518 for issue #937 From @mkordas:  > Two questions: > 1)    why we don't want to allow multiline commit descriptions? They are very beneficial from my experience. > 2)    why some messages must start with capital letter (Issue), while others are demanded to be lowercase (minor)? Let's be at least consistent. ##","closed","","romani","2015-09-06T12:35:37Z","2016-11-11T00:06:05Z"
"","2290","ParameterName: new option to skip methods with Override annotation","base on discussion in #985 .  1) we need an option for http://checkstyle.sourceforge.net/config_naming.html#ParameterName to skip violations on parameter that are for methods with annotation `@Override`.  reason:  ``` .gui.TreeTableCellRenderer:100  Avoid variables with short names like h. .gui.TreeTableCellRenderer:100  Avoid variables with short names like w. .gui.TreeTableCellRenderer:100  Avoid variables with short names like x. .gui.TreeTableCellRenderer:100  Avoid variables with short names like y. ```  2) We need to update default usage of `` at  https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L180 to custom config to enforce name to be 2 or more symbols in size. Format ""^[a-z][a-zA-Z0-9]+$"".  3) Please refactor this Check and make option ""boolean skipCatchParameter = true"". TRUE by default to keep compatibility with previous behavior.  Reason: right not our config allow one char variables.","closed","new feature,","romani","2015-10-09T00:33:11Z","2015-11-24T19:27:45Z"
"","2616","new CatchParameterName Check: to validate names of catch-block parameters only","Base on discussion at: #2549 , #2604, #2592  Root of the problem is #2549, where do need to remove support of parameters validation in LocalVariableName Check. Yes that is braking compatibility but Check will become logical.  Unfortunately the Check ParameterName does not validate catch parameters at all, it was hardcoded in is logic till #2290 (not released yet, so we could do revert).  Two ways to resolve the conflicts: 0) support of parameters should be removed from LocalVariableName.  1) two parameters ""skipCatchParameter""(already done in #2290, but not released) and ""skipParameter"" that will do skip for all other parameters. This will allow user to create two configurations in config and by these options adjust logic to validate parameters by separate format.  2) New Check - CatchParameterName. With hardcoded logic to skip non catch parameters.  I think that juggling by parameters are not human friendly and error prone, especially in such case I can not make name better then ""skipParameter"" but it is inversion of whole name of check. Yes, we have a lot of cases where all is done by options. Creation of new Check for each case is not good also. So lets vote on what is better.  @MEZk , @mkordas , @rnveach , @Vladlis - please share your opinions.","closed","new feature,","romani","2015-11-17T14:55:39Z","2015-12-09T00:51:17Z"
"","2938","Travis: add xwiki project to regeression testing","base on discussion at #2869","closed","miscellaneous,","romani","2016-02-19T00:22:17Z","2016-02-24T00:28:54Z"
"","2231","restore ""url"" option at ImportControl","base on discussion at #2227.  Option need to be restored as we broke compatibility at 6.9 release and did not declared it.  Please update 6.9 release notes (http://checkstyle.sourceforge.net/releasenotes.html#Release_6.9) and add this to  ""Breaking backward compatibility:"" with note that option will be restored at 6.11.","closed","approved,","romani","2015-09-24T13:59:18Z","2015-09-26T22:00:46Z"
"","2268","Usage of all modules in chekstyle_checks.xml","base on #819 and #2261 .  We need to extend UT that check that all Checks are present in checkstyle_checks.xml to let it validate that all modules(Filters and AuditListeners, .... ) are used in our own config.  Documentation should be updated to provide link from example section to that configuration.  Usage of some modules (most likely some filters) will be artificial , need to be discussed with before.  Example: FileContentsHolder is not present in checkstyle_checks.xml file.","closed","approved,","romani","2015-10-05T12:51:33Z","2015-11-02T00:44:08Z"
"","2904","fix java8 compilation broblems in Inputs","base on #2881  The following files had their comment about compilable by java 8 removed until we fix them: InputFinalLocalVariableNameLambda, InputIllegalInstantiation2, InputInnerAssignmentLambdaExpressions","closed","miscellaneous,","romani","2016-02-13T04:18:34Z","2016-02-18T00:35:47Z"
"","2815","Setup 'Circle CI' to run checkstyle-tester project on JDK sources","Base on #2727.  https://circleci.com/docs/configuration https://circleci.com/docs/parallel-manual-setup  We need to setup 3-4-N sub-builds(matrix elements) in CI to test JDK sources by checkstyle-tester in groups to let each launch finish in 15min (or level of CI). We need to make sure that CI has the same integration with Github to notify us on any failures (ERROR level).  That will let us avoid problems like - #1109 (comment) ,  We already did that in Travis, the only missed point is testing over JDK. Sources of JDK are huge so we need to find a way to split them in chunks and do the testing part by part.  Note: due to java grammar problem we can not use jdk8-9 , we can parse only jdk7. For details please see all issues with ""ANTLR"" label.","closed","miscellaneous,","romani","2016-01-10T13:51:30Z","2016-01-28T14:10:07Z"
"","2523","Make DetectorOptions as final and immutable","Base on #2495.  Complicated setters are always search for a problem. As we touched this functionality lets refactor it to make it Builder (or move all arguments to c-tor) to make DetectorOptions class and related classes as immutable.","closed","miscellaneous,","romani","2015-11-04T13:41:22Z","2015-12-15T14:48:03Z"
"","2540","Unify naming of all files with IT inputs","Base on #2161.  please put ""Input"" to the prefix or as ""Suffix"" for file name at https://github.com/checkstyle/checkstyle/tree/master/src/it/resources/com/google/checkstyle/test.","closed","miscellaneous,","romani","2015-11-06T14:02:00Z","2015-12-09T16:10:35Z"
"","2846","Issue #2773: added exception for invalid AutomaticBean children","AutomaticBean will now throw an exception on setupChild if the config isn't null for the default behavior. I added 3 test cases to verify the exception in different scenarios I found.","closed","","rnveach","2016-01-25T15:54:40Z","2016-02-18T14:43:29Z"
"","2089","Allow COMMA again in NoWhiteSpaceBefore","At some point, COMMA was dropped from the tokens to which NoWhiteSpaceBefore can be applied.  I suggest to add it back in, or explain in the documentation why it was removed.","closed","approved,","wstomv","2015-09-03T11:43:42Z","2015-09-14T13:45:38Z"
"","2556","Issue #2540: fix spelling errors in it packages","As suggested:  > please rename ""rule333orderingandsoacing"" to "".......spacing"" > ""toolongpackagetotestcoveragegooglesjavastylerool"" --> "".....rule""  I also went through all the folder names and fixed any other spelling errors i saw. Let me know if you see one I missed.","closed","","rnveach","2015-11-08T16:17:28Z","2017-09-11T10:14:12Z"
"","2451","Remove access to undocumented check properties","As stated in PR #2450, there are several checks that have valid properties, not documented by us, that can be used in CS. Access to these properties shouldn't be allowed by the users as they were never meant to be used by them.  **Example:**  > ReturnCountCheck > http://checkstyle.sourceforge.net/config_coding.html#ReturnCount >  > It actually has an undocument property, ""compileFlags"", coming from ""AbstractFormatCheck"". > The following config is valid, showing that this is indeed a valid property that CS will accept, but there is no valid reason the users should use it or see it documented. >  > ``` >      >          >              >          >      > ```  Once the PR is done, we should review the list of undocumented properties and come to a conclusion on how to remove user access to them.  **Possibilities:** Remove the bean's setter method. Make beans protected and access them only using ""this."", also removing the setter method. Set the beans' value via constructor. **Last Resort:** remove extended class and only extend from Check, meaning duplicating many lines of code.","closed","breaking compatibility,","rnveach","2015-10-26T14:12:35Z","2015-12-09T16:11:54Z"
"","2141","Unused Javadoc tag with annotation @return","As discussed in [SourceForge Bug 543](http://sourceforge.net/p/checkstyle/bugs/543/) and on the [Google groups](https://groups.google.com/forum/#!topic/checkstyle/VEVFDsZKLzg) the following code:  ``` java @Target({ ElementType.TYPE, ElementType.METHOD }) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface SomeAnnotation {      /**      * Some description.      * @return something      */     String value() default """";  } ```  Will fail with the message:  ``` Unused Javadoc tag ```  Despite an explicit test for this, I believe that the assumption is wrong and `@return` tags can (and should) be used with annotation types.","closed","approved,","philwebb","2015-09-08T05:36:46Z","2016-04-01T02:00:24Z"
"","2297","Issue #2161: unify test input locations","Are you ok with ""TEST_LOCATION"" or would you rather I override ""getPath""? One PR per test?","closed","","rnveach","2015-10-10T22:29:46Z","2015-10-12T15:06:58Z"
"","2932","Add support for @hide annotation in JavaDoc","Android JavaDocs use [@hide annotation](https://code.google.com/archive/p/doclava/wikis/JavadocTags.wiki#@hide) to mark certain methods as invisible to public usage. I would like to request Checkstyle to add it as a supported Javadoc annotation.   Checkstyle 6.15 Using   ```                                       ```  Example snippet:  ``` /**  * @hide PROPOSED_NAN_API  */ public class Bananas { }  ```  Expected: No warnings  Actual: `Unknown tag 'hide' ` ##","open","javadoc,","liutikas","2016-02-17T22:59:46Z","2017-09-02T22:23:59Z"
"","2086","Issue #1290. Coverage has been increased to 100% in AbstractTypeAwareCheck","and nested classes","closed","","sabaka","2015-09-03T01:47:45Z","2015-09-03T23:25:11Z"
"","2032","IgnoreMethods option has been removed from DeclarationOrderCheck","Also, UT coverage has been improved to 100%. Checkstyle reports are identical: http://baratali.github.io/decl/ Following projects' sources were used: - checkstyle - sevntu-checkstyle - guava - spring-framework - hibernate-orm - Hbase - apache-ant","closed","","baratali","2015-08-30T15:29:59Z","2017-06-03T00:23:05Z"
"","2233","Issue #1005: Make link for each row of Google style coverage table","Also corrected wrong links: http://vladlis.github.io/reports/site/google_style.html","closed","","Vladlis","2015-09-24T18:56:05Z","2015-09-29T13:10:37Z"
"","2425","XML Examples must have a valid structure","All XML examples under the xdocs must have a valid XML structure so users can copy them as is for testing and won't get atleast parse errors.  My thoughts on requirements: A starting XML tag ("""") is not required.  Each example must be a single standalone. We do this sometimes and not others. It will make testing and reading easier if we go full standalone I think. ""..."" can be used to denote extra tags/attributes, but if removed, the structure must still remain valid.  Invalid Example: https://github.com/checkstyle/checkstyle/blob/fff24e89001ce2ad9c30d1f573639cd640183669/src/xdocs/config_coding.xml#L2777","closed","approved,","rnveach","2015-10-23T03:04:11Z","2015-10-24T00:07:59Z"
"","2662","Issue #2625: reorganized internal tests","All the changes I said I would do are in the main issue. This is just mostly moving files around and moving common utilities/fields to their own utility class. My main reason for creating fields is for caching and to eventually use these values for more tests.","closed","","rnveach","2015-12-04T18:12:13Z","2015-12-07T23:32:08Z"
"","2215","Rename test classes to match production class name + ""Test""","All test classes dedicated for checks should be named the same as check class with additional suffix ""Test"". It's not always the case. For example `SummaryJavadocCheck` has its test `SummaryJavadocTest` while it should be `SummaryJavadocCheckTest`. When following this pattern IDE navigation becomes easier, as tests are detected automatically.","closed","","mkordas","2015-09-19T22:57:21Z","2016-08-07T05:21:11Z"
"","2226","Replace line-based suppressions with inline ones for Checkstyle's suppressions.xml","All line-based suppressions from https://github.com/checkstyle/checkstyle/blob/checkstyle-6.10.1/config/suppressions.xml should be replaced with code-inline suppressions.  Code-inline suppressions are temporary solution until AST-based suppressions will be implemented.  Rationale - any change in the files with line-based suppressions may cause build failure even if an author was not modifying code related to suppression. Very few people will know that in such case also modification of `suppressions.xml` is required.","closed","miscellaneous,","mkordas","2015-09-23T16:13:01Z","2016-09-14T20:59:06Z"
"","2901","minor: removed exceptions not actually thrown","all from the test tier.","closed","","rnveach","2016-02-12T03:33:25Z","2016-02-12T18:29:53Z"
"","2475","Issue #2268: require all filters appear in checkstyle_checks.xml","All filters are now in CS. Added links, but line numbers may change depending on our conversations here.  My main goal for these new filters was to make CS' reporting act the same as it is before adding them.  **SuppressWarningsFilter**: No properties to customize, so can't put this on a 'ignore' list. Won't SuppressWarningsCheck conflict with this if someone used CS' SuppressWarnings? If so, then there is no issue allowing this filter to be as it is.  **SeverityMatchFilter**: We wish to report all violations, so I told it to accept all != ignore. So this shouldn't change any of our reportings as ignore is ignored anyways.  **SuppressWithNearbyCommentFilter and SuppressionCommentFilter**: I assumed we didn't want to really allow these comment suppressions since we don't use them now and use suppressions.xml, so 'checkFormat' is set to an invalid check name. Other properties are similar to examples, but customized slightly on how I would like the check implemented.","closed","","rnveach","2015-10-30T15:13:05Z","2015-10-31T05:29:39Z"
"","2372","minor: added missing exception checks","All expected exceptions should be verified to make sure future changes don't change the exception being thrown. For example, we are moving a lot of files around during the unification process. A missing file throws the same CheckstyleException as a ""cannot set property"" exception. If I accidentally moved a file to a wrong location, I would be changing the exception message and not realize it without these asserts in place.","closed","","rnveach","2015-10-17T17:34:34Z","2015-10-20T01:58:28Z"
"","2391","minor: added missing exception checks","All expected exceptions should be verified to make sure future changes don't change the exception being thrown.","closed","","rnveach","2015-10-20T00:58:16Z","2015-10-20T11:04:28Z"
"","2832","NumericLiteralNeedsUnderscore's new option to skeep variables by name","all details : https://travis-ci.org/checkstyle/checkstyle/jobs/103024859  code coverage should be 100%, so line https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/pom.xml#L134 should be removed.","closed","","romani","2016-01-18T05:15:45Z","2016-01-18T05:18:35Z"
"","2773","Nesting Checks in each other in config does not produce any error","All Checks should be placed under TreeWalker in config. If by mistake you place one Check config inside another Check no error is happen and Check just ignored","closed","approved,","romani","2015-12-26T00:08:26Z","2016-02-18T14:44:00Z"
"","2508","RedundantModifier flags public constructor that are really needed in serialized class","After issue #1537, RedundantModifier flags public constructors in non-public classes. It seemed fair at first but if such a class isserialized and deserialized, this triggers a runtime error at deserialization (java.io.ClassException : no valid constructor, thrown by java.io.ObjectStream).  The class was simply a class with package scope, intended to be used for a field in a public class in the same package.  Perhaps public constructors without parameters in serializable classes should be considered important and not flagged, or perhaps this corner case should be explained in the documentation so people can filter them explicitly with suppress comment filtering. ##","closed","","maisonobe","2015-11-02T15:47:21Z","2016-11-11T00:04:46Z"
"","2131","IntelijIdea code inspection config should raise 0 violations","After importing InteligIdea code inspection config to Idea http://checkstyle.sourceforge.net/idea.html#Inspections - there are 9K violation.  1) There should be 0 violations .  All Input files has to be suppressed from violations, I  found only one way to do that by marking fodler where Input files are located as ""Resource"" at ""File > Project Structure"", but there are 1.4K violations in XML, JS, ..... . If this is the only way to suppress violations at project that should be describe at http://checkstyle.sourceforge.net/idea.html#Inspections  If we can not resolve violation for now - it should be suppressed with appropriate comment.  2) All rules that are suppressed/ignored/disabled at config should have a comment why they are suppressed.","closed","approved,","romani","2015-09-06T14:48:46Z","2015-09-07T23:19:42Z"
"","2133","Issue #2131: Add inspection scope profile for IDEA analysis","After applying proper scope to analysis, number of violations is 0.","closed","","mkordas","2015-09-06T20:57:17Z","2015-09-06T22:16:27Z"
"","2452","Issue #1238: Add codeclimate-checkstyle and Checkstyles for Bitbucket Server tools","Added two new tools to _Related Tools_ section: - codeclimate-checkstyle - [build tool](https://codeclimate.com/), [available from](https://github.com/sivakumar-kailasam/codeclimate-checkstyle) - Checkstyles for Bitbucket Server - [build tool](https://bitbucket.org/product/server), [available from](https://marketplace.atlassian.com/plugins/at.apogeum.bitbucket.checkstyle)  ![image](https://cloud.githubusercontent.com/assets/2310862/10734517/f5eb0fda-7c03-11e5-936c-ba477368762a.png)  This PR should close Issue #1238","closed","","nejdaw","2015-10-26T16:10:15Z","2015-10-26T23:43:17Z"
"","2844","Issue 2836","Added test and made changes to xdoc to add check's messages. Only key and link are added. Links returns results for all languages, not just English. This should complete the issue.  May want to consider some standard for message key naming as some checks don't match others and look weird as keys.","closed","","rnveach","2016-01-24T22:28:17Z","2016-01-30T14:02:39Z"
"","2468","Issue #2268: require all checks appear in checkstyle_checks.xml","Added override for ""FileContentsHolder"" to ""isCheckstyleModule"". Only 1 change to XML file, added FileContentsHolder.  Currently skipping Filters. Issue said to ""discuss with before"".","closed","","rnveach","2015-10-29T21:49:00Z","2015-10-30T12:06:53Z"
"","2459","Issue #2428: removed dependency from commons-lang3","Added necessary methods from ArrayUtils in commons-lang3 to CommonUtils class and changed dependencies throughout the project where needed","closed","","chrismacias","2015-10-27T02:39:47Z","2015-10-28T23:42:00Z"
"","2458","issue #2428, removed dependency to commons-lang3","Added necessary methods from ArrayUtils in commons-lang3 to CommonUtils and changed dependencies instances in all documents","closed","","chrismacias","2015-10-27T01:44:30Z","2015-10-27T02:27:28Z"
"","2503","Issue #2122: Fix RedundantModifier at final methods in anonymous class","added line to xdoc. add code to input modifier for missing code coverage that it was covering before.","closed","","rnveach","2015-11-02T00:13:54Z","2015-11-03T13:55:56Z"
"","2595","Issue #2451: documented missing properties for MethodNameCheck","Added documentation for missing 'MethodNameCheck' properties. Just a simple copy/paste from another similar check.","closed","","rnveach","2015-11-12T21:42:20Z","2015-11-13T03:22:46Z"
"","2907","[2905] : Allow checkstyle to build using jdk9","Add to profile activation that tools dependency should only be declared up to JDK 8. Solving issue https://github.com/checkstyle/checkstyle/issues/2905.","closed","","peteryhwong","2016-02-13T21:25:46Z","2016-02-13T22:01:17Z"
"","2211","OneStatementPerLine: false match with try-with-resources","According to discussion on #64, the following should by allowed by OneStatementPerLine:  ``` java         try (             OutputStream fos = new FileOutputStream(""foo"");             OutputStream fos2 = new FileOutputStream(""bah"");) {         } ```  It isn't.  ``` $ java -jar checkstyle-6.11-SNAPSHOT-all.jar -c config.xml 3.java Starting audit... /var/tmp/3.java:9:60: error: Only one statement per line allowed. Audit done. Checkstyle ends with 1 errors.  $ cat config.xml                     $ cat 3.java  package test;  public class Foo {      void bah() {           try (             OutputStream fos = new FileOutputStream(""foo"");             OutputStream fos2 = new FileOutputStream(""bah"");) {         }        } } ```","closed","approved,","philipa","2015-09-19T10:20:15Z","2015-12-24T19:48:52Z"
"","2859","Pull #2859: Disallow usage of java.util.Stack and java.util.Vector in code","According to   https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html https://docs.oracle.com/javase/7/docs/api/java/util/Vector.html http://stackoverflow.com/a/1386288/1015848  > A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to Stack class.  >  > As of the Java 2 platform v1.2, Vector class was retrofitted to implement the List interface, making it a member of the Java Collections Framework. Unlike the new collection implementations, Vector is synchronized. If a thread-safe implementation is not needed, it is recommended to use ArrayList in place of Vector.  So, java.util.Vector and java.util.Stack should be prohibited in our code.  @romani  I used ForbidInstantiation and ForbidCertainImports from SevNTU Checkstyle. I did not use IllegalImport and/or ImportControl from the main project as them disallow usage of the whole package but not a certain classes from the package.","closed","miscellaneous,","MEZk","2016-01-31T12:33:58Z","2016-02-08T22:15:38Z"
"","2134","Issue 1537: Fix RedundantModifier check to recognise inner classes","accessible from global scope  https://github.com/checkstyle/checkstyle/issues/1537#issuecomment-137801779  Problem was that in previous PR i assumed that class without explicit public modifier is non public so constructor ""public"" modifier is redundant because it cant be accessed in global scope. It is simply false because it can be nested in interfaces,public classes making it globally accessible  - for example  ``` java public interface InputNestedClassInPublicInterfaceRedundantModifiers {         interface PublicInnerInterface {                 interface PublicInnerInnerInterface {                         class PublicInnerClassInNestedPublicInterfaces {                                 public PublicInnerClassInNestedPublicInterfaces() { } // OK in public class                         }                 }         } ```  Class PublicInnerClassInNestedPublicInterfaces can be accessed globally so ""public"" in constructor is not redundant.  Second bad assumption was that class with explicit ""public"" modifier must be public, but that is false as well. It can be nested pretty deep and if it is public or not depends on modifiers of their parents classes/interfaces. For example:  ``` java class PublicNestedClassInInterfaceWithPublicConstructor {                 public PublicNestedClassInInterfaceWithPublicConstructor() { } // OK in public class                 private class PrivateClassInPublicNestedClass {                         public class PublicInPrivateClass {                                 public PublicInPrivateClass() { } // Redundant in non public class                         }                 } } ```  Class PublicInPrivateClass has ""public"" modifier but it is not globally accessible - it can be accessed only within PublicNestedClassInInterfaceWithPublicConstructor.  Solution suggested by this commit is to check if given class is really accessible from global context going through parents of nested classes/interfaces and checking their accessibility.","closed","","liscju","2015-09-06T22:47:56Z","2015-09-18T13:21:13Z"
"","2597","Issue #2451: removed excess hierarchy from AbstractParenPadCheck","AbstractParenPadCheck now extends Check. Copied methods from abstract. Added test for missing coverage.","closed","","rnveach","2015-11-12T22:17:05Z","2015-11-13T03:23:05Z"
"","2533","Issue 2451 12","AbstractNameCheck now extends check. Even though this class will later be removed, this may make fixing the classes that extend this easier in future PRs. Doing this also removed 11 undocumented properties. AbstractFormatCheck is now deprecated.","closed","","rnveach","2015-11-05T19:34:02Z","2015-11-06T12:59:03Z"
"","2532","Issue #2451: removed excess hierarchy from AbstractClassNameCheck","AbstractClassNameCheck now extends Check. Removed DEFAULT_FORMAT as it was only used once. Added test for missing coverage of 'setFormat'.","closed","","rnveach","2015-11-04T23:59:16Z","2015-11-06T00:46:47Z"
"","2266","EmptyLineSeparator does not report problem, if next method is documented using Javadoc","Absence of empty line is not reported, if the bottom method has JavaDoc.  ``` java     public static void nethodPrev() {         ...     }     /**      * Some Javadoc      */     public static void methodNext(String entityId) {         ...     } ```  If I remove the JavaDoc for methodNext(), violation is reported","closed","approved,","pbaranchikov","2015-10-05T08:14:36Z","2015-10-18T12:52:22Z"
"","2640","AbbreviationAsWordInName: update message to print name that violates a format","AbbreviationAsWordInName: update message to print name that violates a format  Right now it is:  ``` .../CSVFilterTest.java:30: error: Abbreviation in name must contain no more than '1' capital letters. ```  expected:  ``` .../CSVFilterTest.java:30: error: Abbreviation in name 'CSVFilterTest' must contain no more than '1' capital letters. ```","closed","approved,","romani","2015-11-22T01:30:41Z","2015-12-05T14:53:28Z"
"","2839","JavadocStyle / checkHtml falsely reports ""unexpected closing HTML tag: ""","A doc comment like  ``` /**  * Translates the word into german.  */ String translate(String word); ```  creates the warning  ``` Style Javadoc: Unexpected closing HTML tag:  into german. ```  , although the description is perfectly correct HTML markup.  Occurred in CS version 6.4.1.","closed","javadoc,","aunkrig","2016-01-22T14:23:16Z","2018-07-14T18:38:48Z"
"","2971","VisibilityModifier: allow public final fields","`VisibilityModifier` check currently supports `allowPublicImmutableFields`, which allows a public field only if it satisfies all of the following: 1. it is `final`; 2. it is either of primitive type or of a reference type known to be immutable; 3. its enclosing class is `final`.  The third constraint above reduces the usefulness of this relaxation because it cannot be applied to a design that asks for subclasses, even though a subclass can do nothing to jeopardize the immutability of the field that satisfies 1 and 2.  A discussion was held on this topic: https://groups.google.com/forum/#!topic/checkstyle/r12blNy3ZVY  My point is quite simple: the option to allow public final fields should do so without further ado. The rest of the talk here was an attempt to show why the additonal restriction to final class is arbitrary and reduces usefulness of the option.  Example:  ``` public class Chunk {   public final long id;    private int garbage;    .... }  public class StableChunk extends Chunk {   // inherits and uses id    private final int size;   ... }  public class GrowingChunk extends Chunk {   // inherits and uses id    private int size;   ... } ```  In the above example the class Chunk is essentially non-final yet makes perfect use of a public final field. CheckStyle's current option does not allow me to codify this.  Roman Ivanov proposes a new property to the `VisibilityModifier` check: `allowPublicFinalFields`, which would only require that the field be `final`.","closed","new feature,","mtopolnik","2016-02-25T15:26:08Z","2016-06-03T12:42:35Z"
"","2867","[Java8] Issue #2821: fixed method parameter type annotation between array","`public static int checkNotNullContents(int @Nullable [] array) {`  is built into the tree as:  ```         Type ""METHOD_DEF"" (METHOD_DEF) Line 7 Column 4             Type ""MODIFIERS"" (MODIFIERS) Line 7 Column 4                 Type ""public"" (LITERAL_PUBLIC) Line 7 Column 4                 Type ""static"" (LITERAL_STATIC) Line 7 Column 11             Type ""TYPE"" (TYPE) Line 7 Column 18                 Type ""int"" (LITERAL_INT) Line 7 Column 18             Type ""checkNotNullContents"" (IDENT) Line 7 Column 22             Type ""("" (LPAREN) Line 7 Column 42             Type ""PARAMETERS"" (PARAMETERS) Line 7 Column 57                 Type ""PARAMETER_DEF"" (PARAMETER_DEF) Line 7 Column 57                     Type ""MODIFIERS"" (MODIFIERS) Line 7 Column 57                     Type ""TYPE"" (TYPE) Line 7 Column 57                         Type ""["" (ARRAY_DECLARATOR) Line 7 Column 57                             Type ""int"" (LITERAL_INT) Line 7 Column 43                             Type ""ANNOTATION"" (ANNOTATION) Line 7 Column 47                                 Type ""@"" (AT) Line 7 Column 47                                 Type ""Nullable"" (IDENT) Line 7 Column 48                             Type ""]"" (RBRACK) Line 7 Column 58                     Type ""array"" (IDENT) Line 7 Column 60             Type "")"" (RPAREN) Line 7 Column 65             Type ""{"" (SLIST) Line 7 Column 67 ```","closed","","rnveach","2016-02-03T01:53:19Z","2016-02-23T17:34:56Z"
"","2750","Issue #2211: OneStatementPerLine has false match with try-with-resources","`OneStatementPerLine#isMultilineStatement` was returning true when the `previousSibling` was a RESOURCES token.  The solution was to return false if  `previousSibling` is a RESOURCES token.  Let me know if there are any styling issues.","closed","","jonmbake","2015-12-18T23:48:13Z","2015-12-24T19:48:04Z"
"","2780","StringIndexOutOfBoundsException in getCheckShortName method of AuditEventDefaultFormatter","`getCheckShortName` method of `AuditEventDefaultFormatter` throws StringIndexOutOfBoundsException if the name of the check does not end with `Check`.  In Checkstyle main project we have name convention for checks names: XXXXCheck (each check module should end with `Check`), yet it is not a rule for Checkstyle extensions. Each developer may name check modules the way he wants. In current implementation of `getCheckShortName` it will result in StringIndexOutOfBoundsException. We should be friendly to other tools and extensions and allow different name conventions for checks modules.  Example: https://travis-ci.org/sevntu-checkstyle/checkstyle-samples/jobs/99134853","closed","approved,","MEZk","2015-12-28T21:49:36Z","2015-12-29T22:51:48Z"
"","2615","Issue 2451: removed excess hierarchy from ImportOrderCheck and deprecated AbstractOptionCheck","`getAbstractOption` was kept because of the way it is needed in the test. I kept the name the same, and the warning comment, incase it is still true even though the field is named `option` but I wasn't sure if a test will catch it if I was wrong and it is still an issue.","closed","","rnveach","2015-11-17T14:51:53Z","2015-11-18T14:37:58Z"
"","2687","FallThroughCheck generates false positive on loop label in switch statement","`FallThroughCheck` generates a false positive on code like this:  ``` switch (x) { case 1:     this.foo();     break; default: loop:              // FallThroughCheck triggers here     for (int i = 0; i < x; i++) {         if (array[i] == null)             break loop;     }     this.bar(array);     break; } ```  The problem is that it thinks `loop:` is a switch case instead of a loop label.  Instead, it should only detect a switch case for content matching either `case ...:` or `default:`.","closed","","archiecobbs","2015-12-10T17:47:02Z","2015-12-10T18:37:29Z"
"","2034","Use StandardCharsets and get rid of UnsupportedEncodingException","`DefaultLogger` and `XMLLogger` shall use `java.nio.charset.StandardCharsets#UTF_8` in the writer constructors. UTF-8 must be supported by default by any JVM implementation. This will allow to remove the `throws UnsupportedEncodingException` on the constructors.","closed","high demand,","michael-o","2015-08-30T21:01:48Z","2015-09-18T06:10:09Z"
"","2581","Deactivate 'allowSamelineSingleParameterlessAnnotation' property of AnnotationLocation in Checkstyle config","`allowSamelineSingleParameterlessAnnotation` is set to true by default. In #2577 we decided to disable that option for Checkstyle code.","closed","miscellaneous,","mkordas","2015-11-11T22:01:15Z","2015-11-12T13:38:12Z"
"","2795","Tabs are wrongly handled in Indentation check when line is wrapped","`AbstractExpressionHandler` has proper support for tab characters. It takes into consideration `tabWidth` property and nicely expands tabs to spaces, e.g.: - https://github.com/checkstyle/checkstyle/blob/6.14/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java#L469 - https://github.com/checkstyle/checkstyle/blob/6.14/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java#L576  There's no support for that in `LineWrappingHandler` and `tabWidth` property is not taken into consideration there.  The following code with config `tabWidth=4` causes `'value' have incorrect indentation level 2, expected level should be 8.`. There should be no violation, as 2 tabs are equal 8 spaces after expansion.  ``` public class SequenceGeneratorTest  {     @SuppressWarnings(         value=""""     )     public void testStartOfSequence() {     } } ```  Note that annotation uses tabs here, while method just spaces for indentation.","closed","approved,","mkordas","2016-01-01T21:52:37Z","2016-02-05T13:58:17Z"
"","2199","RedundantModifier incorrectly flags public constructor on nested class inside interface","``` public interface Iface {     class Inner {         public Inner(final int x) {         }     } } ```  I get: src/x/Iface.java:3:9: Redundant 'public' modifier.  It's not redundant; inner classes of interfaces are inherently public, so leaving out the public modifier on the constructor makes the constructor package-private instead.","closed","","nmx","2015-09-17T21:03:49Z","2015-09-17T21:34:11Z"
"","2109","CLI should print a flie name where exception is happen","``` java -jar checkstyle-6.10.1-all.jar -c sun_checks.xml *.java  Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: String index out of range: -1         at java.lang.AbstractStringBuilder.charAt(Unknown Source)         at java.lang.StringBuilder.charAt(Unknown Source)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.trimTail(JavadocStyleCheck.java:315)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.getCommentText(JavadocStyleCheck.java:269)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.checkFirstSentenceEnding(JavadocStyleCheck.java:230)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.checkComment(JavadocStyleCheck.java:207)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocStyleCheck.visitToken(JavadocStyleCheck.java:148)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:392)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:503)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:334)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:209)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:265)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:271)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:121) ```  So where is no easy way to find a reason (input file) of problem. File path should be printed.","closed","high demand,","romani","2015-09-04T15:36:50Z","2015-11-01T13:56:22Z"
"","2630","After upgrade to 6.12.1 IntelliJ plugin throws exceptions:","``` CheckStyle threw an exception when scanning: DiskStorage.java: Exception was thrown while processing /var/folders/vx/mfh0w1ld4p374hd749qg47j40000gp/T/csi-a6e8b38b-2623-4075-b9a7-ee51f8dc960d/src/main/java/com/datatorrent/bufferserver/storage/DiskStorage.java org.infernus.idea.checkstyle.exception.CheckStylePluginException: Exception was thrown while processing /var/folders/vx/mfh0w1ld4p374hd749qg47j40000gp/T/csi-a6e8b38b-2623-4075-b9a7-ee51f8dc960d/src/main/java/com/datatorrent/bufferserver/storage/DiskStorage.java     at org.infernus.idea.checkstyle.exception.CheckStylePluginException.wrap(CheckStylePluginException.java:34)     at org.infernus.idea.checkstyle.exception.CheckStylePluginException.wrap(CheckStylePluginException.java:23)     at org.infernus.idea.checkstyle.checker.CheckStyleChecker.processAndAudit(CheckStyleChecker.java:66)     at org.infernus.idea.checkstyle.checker.CheckStyleChecker.scan(CheckStyleChecker.java:40)     at org.infernus.idea.checkstyle.CheckStyleInspection.lambda$inspectFile$15(CheckStyleInspection.java:81)     at org.infernus.idea.checkstyle.CheckStyleInspection$$Lambda$55/2044049815.apply(Unknown Source)     at java.util.Optional.map(Optional.java:215)     at org.infernus.idea.checkstyle.CheckStyleInspection.inspectFile(CheckStyleInspection.java:81)     at org.infernus.idea.checkstyle.CheckStyleInspection.lambda$checkFile$14(CheckStyleInspection.java:57)     at org.infernus.idea.checkstyle.CheckStyleInspection$$Lambda$41/928200120.call(Unknown Source)     at com.intellij.openapi.application.impl.ApplicationImpl$9.call(ApplicationImpl.java:390)     at java.util.concurrent.FutureTask.run(FutureTask.java:266)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at java.lang.Thread.run(Thread.java:745)     at org.jetbrains.ide.PooledThreadExecutor$1$1.run(PooledThreadExecutor.java:55) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing /var/folders/vx/mfh0w1ld4p374hd749qg47j40000gp/T/csi-a6e8b38b-2623-4075-b9a7-ee51f8dc960d/src/main/java/com/datatorrent/bufferserver/storage/DiskStorage.java     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:282)     at org.infernus.idea.checkstyle.checker.CheckStyleChecker.processAndAudit(CheckStyleChecker.java:64)     ... 13 more Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 112     at java.lang.String.charAt(String.java:646)     at com.puppycrawl.tools.checkstyle.utils.CommonUtils.lengthExpandedTabs(CommonUtils.java:150)     at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.expandedTabsColumnNo(AbstractExpressionHandler.java:468)     at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.findSubtreeLines(AbstractExpressionHandler.java:488)     at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.findSubtreeLines(AbstractExpressionHandler.java:497)     at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.checkExpressionSubtree(AbstractExpressionHandler.java:426)     at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.checkChildren(AbstractExpressionHandler.java:400)     at com.puppycrawl.tools.checkstyle.checks.indentation.BlockParentHandler.checkIndentation(BlockParentHandler.java:279)     at com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.visitToken(IndentationCheck.java:292)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:390)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:501)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:332)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:204)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:79)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:266)     ... 14 more  ```","closed","","vrozov","2015-11-19T16:27:25Z","2015-12-01T14:10:33Z"
"","2842","FinalParameters do not included lambdas","``` [ERROR] /..../CharactersView.java:68:24: Parameter event should be final. [FinalParameters] ```  here's the line  ```         button.addClickListener( (event) -> { ```  I would like to have a LAMBDA_DEF that is seperate from METHOD_DEF  http://checkstyle.sourceforge.net/config_misc.html#FinalParameters","closed","","xenoterracide","2016-01-24T20:12:41Z","2016-01-27T14:45:37Z"
"","2409","JavadocMethod: generic type is not recognized","``` /var/tmp $ java -jar checkstyle-6.11.2-all.jar -c 3.xml 3.java Starting audit... /var/tmp/3.java:8:14: error: Expected @param tag for ''. /var/tmp/3.java:8:17: error: Expected @param tag for ''. Audit done. Checkstyle ends with 2 errors.  /var/tmp $ cat 3.java  public abstract class Shell {   /**    * Does something.    * @param callable This is a param.    * @return This is a result.    * @throws IOException This is an exception.    */   protected                        ```  Expected: no warnings.","closed","javadoc,","romani","2015-10-21T20:57:32Z","2015-10-26T12:59:35Z"
"","2822","FinalClass is over aggressive when extending happen inside class","``` /var/tmp $ cat Foo.java  public class Foo {    private Foo(String name) {    }     static Foo factory(int type) {       switch (type) {          case 1:             return new Foo1();          default:             throw new RuntimeException(""bad type"");       }    }     private static final class Foo1 extends Foo {       Foo1() {           super(""1"");       }    }  }  /var/tmp $ cat Test.xml                          /var/tmp $ java -jar checkstyle-6.14.1-all.jar -c Test.xml Foo.java  Starting audit... [ERROR] /var/tmp/Foo.java:1: Class Foo should be declared as final. [FinalClass] Audit done. Checkstyle ends with 1 errors. ```  If we add `final` modifier, source file is not compilable  ``` /var/tmp $ javac Foo.java  Foo.java:15: error: cannot inherit from final Foo    private static final class Foo1 extends Foo {                                            ^ 1 error ```","closed","approved,","jhjensen","2016-01-13T18:23:47Z","2016-02-13T04:15:23Z"
"","2974","EmptyLineSeparator check does not validate newlines before comments","``` $ javac Test.java $ cat Test.java public class Test {      public static final void method1() { }        // Method 2 must fail     public static final void method2() { }        /**      * Method 3 must fail      */     public static final void method3() { } }   $ cat config.xml                                                              $ java -jar checkstyle-6.15-all.jar -c config.xml Test.java Starting audit... Audit done. ```  **Expected:** `method2` and `method3` must fail with `... has more than 1 empty lines before. [EmptyLineSeparator]`  Related tickets: #2067   http://checkstyle.sourceforge.net/config_whitespace.html#EmptyLineSeparator","closed","medium,","vovkab","2016-02-26T17:50:13Z","2018-06-28T23:04:46Z"
"","2480","WhitespaceAround: allowEmptyTypes skip validation for non empty class","``` $ java -jar checkstyle-6.11.2-all.jar -c checkstyle.xml test.java Starting audit... Audit done.  /var/tmp $ cat test.java  public class CheckstyleTest{ // Doesn't warn - incorrect private static final int SOMETHING = 1; }  /var/tmp $ cat checkstyle.xml                                               ```  Expected: violation on first line. `/var/tmp/test.java:1:28: error: '{' is not preceded with whitespace.`","closed","approved,","romani","2015-10-30T19:41:10Z","2015-11-04T14:03:27Z"
"","2991","SummaryJavadoc custom period not always working","``` $ cat TestClass.java public class TestClass {     /** test abc */     void foo3() {}      /** test . abc */     void foo4() throws Exception {} }  $ cat TestConfig.xml                              $ java -jar checkstyle-6.16-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:6: First sentence of Javadoc is incomplete (period is missing) or not present. [SummaryJavadoc] Audit done. Checkstyle ends with 1 errors. ```  Use of period as `abc` is just an example of an extreme case. Similar results can be seen with `,` or `!`. I am expecting no errors because all example JavaDocs end with `abc`.  The issue seems to arise because we switch around using the field `period` and the field `PERIOD`. https://github.com/checkstyle/checkstyle/blob/b6ab2337e21ed8e4648859eee08026ab5b87953d/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java#L153 This doesn't seem fully related to the other summary javadoc issue. ##","closed","easy,","rnveach","2016-03-01T13:23:58Z","2017-12-05T15:15:33Z"
"","2950","Indentation: fix line wrap hanlding","``` $ cat TestClass.java public class Test { // indent 0     int var6 = 5; int var7 = 6, // indent 4 -- line #2         var8 = 5; // indent 8 -- line #3      public void method() { // indent 4         long_lined_label: if (true // indent 8 -- line #6             && true) {} // indent 12 -- line #7     } // indent 4     /* package-private */ static final void // indent 4 -- line #9         method2() {} // indent 8 -- line #10 }  $ cat TestConfig.xml                                                                  $ java -jar checkstyle-6.15-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:3: 'var8' have incorrect indentation level 8, expected level should be 22. [Indentation] [ERROR] TestClass.java:7: '&&' have incorrect indentation level 12, expected level should be 30. [Indentation] [ERROR] TestClass.java:10: 'method2' have incorrect indentation level 8, expected level should be 30. [Indentation] Audit done. Checkstyle ends with 3 errors. ```  Line wrapping currently handles instances wrong when it's starting node isn't the first on the line. I mentioned this in another issue where I wanted to use line wrapping, but had to make weird adjustments because I couldn't guarantee the node was the first on the line. If the node isn't the first on the line, line wrapping thinks it is and therefore uses that indentation as the base for the next wrapped lines. It should instead use either the current line's indentation or take as input the expected indentation from previous checks. All the cases above are wrapped correctly with 4 spaces, even though 2 (line 7 , line 10) don't follow the one statement per line rule.  **Default Auto Formatters:** I used the same code listed above, with comments and all, with the IDE's default auto format options. **IntelliJ**: splits lines 2, 6, 9 into separate lines (think of one statement per line rule). Line 3 and 7 keep their +4 indents after the split, line 10 is indented the same as line 9. **Eclipse**: only line 2 is split into separate lines, the rest stay the same. Line 3 keeps its +4 indent after the split, lines 7 and 10 are indented to the same position as their previous line. **NetBeans**: splits lines 2 and 6 into separate lines, the rest stay the same. Lines 3, 7, and 10 keep their +4 indent.","closed","approved,","rnveach","2016-02-20T20:56:04Z","2016-06-03T13:25:30Z"
"","2408","JavadocMethod: unclear message for incomplete tag","``` $ cat config.xml                           $ cat Test.java  class A {  /**  * Handle query request  *  * @param mpIdParm das  * @param planYearParm sa  * @param modelParm sd  * @return the name of the view  */ @RequestMapping(""/query/mpId/{mpId}/planYear/{planYear}"") public String handleQuery(@PathVariable(""mpId"") final String mpIdParm,         @PathVariable(""planYear"") final String planYearParm, final Model modelParm) {  } } rivanov@p5510:/var/tmp$ java -jar /var/tmp/checkstyle-8.32-all.jar \       -c config.xml Test.java  Starting audit... Audit done.  # NO RETURN TAG  $cat Test.java  class A {  /**  * Handle query request  *  * @param mpIdParm das  * @param planYearParm sa  * @param modelParm sd  */ @RequestMapping(""/query/mpId/{mpId}/planYear/{planYear}"") public String handleQuery(@PathVariable(""mpId"") final String mpIdParm,         @PathVariable(""planYear"") final String planYearParm, final Model modelParm) {  } }  $ java $RUN_LOCALE -jar /var/tmp/checkstyle-8.33-all.jar -c config.xml Test.java Starting audit... [ERROR] /var/tmp/Test.java:9: Expected @return tag. [JavadocMethod] Audit done. Checkstyle ends with 1 errors.  # EMPTY RETURN TAG $ cat Test.java  class A {  /**  * Handle query request  *  * @param mpIdParm  * @param planYearParm  * @param modelParm  * @return  */ @RequestMapping(""/query/mpId/{mpId}/planYear/{planYear}"") public String handleQuery(@PathVariable(""mpId"") final String mpIdParm,         @PathVariable(""planYear"") final String planYearParm, final Model modelParm) {  } } rivanov@p5510:/var/tmp$ java -jar /var/tmp/checkstyle-8.32-all.jar \      -c config.xml Test.java  Starting audit... [ERROR] /var/tmp/Test.java:10: Expected @return tag. [JavadocMethod] Audit done. Checkstyle ends with 1 errors. ```  Expected message: [ERROR] /var/tmp/Test.java:10: @return tag should present and have description. [JavadocMethod] ##","closed","easy,","romani","2015-10-21T20:50:31Z","2020-08-11T06:01:58Z"
"","2248","Issue #905: Resolve Doxia Site Renderer warnings","[Site](https://vladlis.github.io/reports/site/)","closed","","Vladlis","2015-09-29T18:23:35Z","2015-10-05T20:50:15Z"
"","2157","Issue #382: Fix HiddenField false positive violations for anonymous classes","[Reports & explanations](http://mezk.github.io).","closed","","MEZk","2015-09-11T14:55:03Z","2015-09-12T10:24:52Z"
"","2150","Issue #67: Added support of logging severity for all audit events","[Compatibility problem](https://groups.google.com/forum/#!topic/checkstyle-devel/3jJ4cCQ3sM0) was resolved.","closed","","MEZk","2015-09-10T09:11:14Z","2015-09-10T19:49:11Z"
"","2590","Tests for validating commit message should not allow period at the end of commit message","@romani, @liscju Tests for validating commit message which were implemented in scope of https://github.com/checkstyle/checkstyle/pull/1518 skip period at the end of commit message.  Example: https://github.com/checkstyle/checkstyle/commit/17eaaa5a0aec1943cf0f2c59a95e81fa72b740c1  It leads to a problem for future release notes xdoc generator: some commits messages can have period at the end and other cannot. It is not a big problem, yet we should follow the rules which were suggested in https://github.com/checkstyle/checkstyle/pull/1518.  @liscju  FYI: we have the following regexp to validate commit message: ""^(minor|config|infra|doc|spelling): .*$"";  Dot (.) matches any character (except newline). Proof: https://regex101.com/","closed","miscellaneous,","MEZk","2015-11-12T18:58:34Z","2015-11-24T22:55:45Z"
"","2236","Issue #1257: Fixed NPE in FinalLocalVariableCheck.findClassOrConstructorOrMethodInWhichItIsDefined .","@romani You still want me to generate a site for this?","closed","","rnveach","2015-09-24T23:51:20Z","2015-10-04T14:45:36Z"
"","2330","minor: fixed failing master","@romani Fix for failing master","closed","","rnveach","2015-10-12T14:33:58Z","2015-10-12T15:05:14Z"
"","2770","Issue #2661: Enforce AvoidConditionInversionCheck of sevntu-checkstyle over Checkstyle source code","@romani  The last check from issue https://github.com/checkstyle/checkstyle/issues/2661.","closed","","MEZk","2015-12-24T21:49:48Z","2015-12-27T15:39:47Z"
"","2070","Corrected javadoc/xdoc for IllegalTypeCheck","@romani  Since we implemented new option `validateAbstractClassNames` for the Check, I've corrected documentation.   Please also take a look at @mkordas suggestions: https://github.com/checkstyle/checkstyle/pull/1941#issuecomment-135886623","closed","","MEZk","2015-09-01T21:44:34Z","2015-09-02T17:41:06Z"
"","2828","Issue #924: Fix enforcement of declaration order which leads to illegal forward reference","@romani  OOM exception happened during Travis CI execution.","closed","","MEZk","2016-01-17T13:24:00Z","2016-02-07T13:58:07Z"
"","2672","Issue #2523: Make DetectorOptions as final and immutable","@romani  I need your advice on how to resolve PMD and IDEA Inspections violations:  PMD: ` PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions:128 Rule:AccessorClassGeneration Priority:3 Avoid instantiation through private constructors from outside of the constructors class.. ` https://pmd.github.io/pmd-5.4.1/pmd-java/rules/java/design.html#AccessorClassGeneration  IDEA Inspections: Encapsulation issues - Package-visible inner class (1) Description: `Reports package-local inner classes.  Use the first checkbox below to ignore package-local inner enums. Use the seconds checkbox below to ignore package-local inner interface. `  Memory issues - Return of instance of anonymous, local or inner class (9) Description: `Reports return statements returning an instance of an anonymous, local, or inner class. Such instances keep an implicit reference to the outer instance. Which means the instance can prevent the outer instance from being garbage collected. Any caller of a method which returns such an instance might cause a memory leak by holding on to the instance returned. Use the checkbox below to ignore returns from protected or package-local methods. Returns from private methods are always ignored. `  ``` Encapsulation issues: DetectorOptions.java (1) 132: Builder Package-visible inner class Builder ```  ``` Memory issues: DetectorOptions.java (9) 128: newBuilder() Return of instance of non-static inner class Builder 144: format() Return of instance of non-static inner class Builder 154: message() Return of instance of non-static inner class Builder 164: minimum() Return of instance of non-static inner class Builder 174: maximum() Return of instance of non-static inner class Builder 184: ignoreCase() Return of instance of non-static inner class Builder 194: reporter() Return of instance of non-static inner class Builder 204: compileFlags() Return of instance of non-static inner class Builder 214: suppressor() Return of instance of non-static inner class Builder ```","closed","","MEZk","2015-12-07T21:11:35Z","2015-12-16T18:01:10Z"
"","2148","Issue #215: Updated checkstyle_checks.xml to use ParameterNumber in default configuration","@romani  I did not remove empty lines in checkstyle_checks.xml to avoid link conflicts.","closed","","MEZk","2015-09-09T19:26:35Z","2015-09-10T06:59:58Z"
"","2679","Issue #2575: Create directory structure needed to store cache file","@romani  I cannot reproduce AppVeyor test fail on my local PC.","closed","","MEZk","2015-12-08T18:01:09Z","2017-11-01T09:09:31Z"
"","2574","minor: unify it test code","@romani  Here is an example of the start of some improvements on how we do tests in the IT folder. If you agree, I will complete this. Should this go under 2540 or a new issue?  **Changes**:  ConfigurationBuilder was removed. Its needed parts were merged into BaseCheckTestSupport with some changes. `getFilePath` was changed to be more like the Test folder, in that we will override the path and all inputs should be in the same package. This will remove us having issues finding files with duplicate names, and we remove the need for constantly scanning the folders for the files each instance. `getConfigurationFromXML` was made static so we always have the google config ready at any time instead of recreating it each instance. 2 forms of `getCheckMessage` were merged into one.  OuterTypeFilenameTest is a working example of the changes that will be done to all the tests.  ConfigValidationTest was removed because of the changes to ConfigurationBuilder, but also because I think it is duplicating what all the IT tests do, which is run the code on a Checker to verify there are no issues with antlr. I can restore this if you want.","closed","","rnveach","2015-11-10T21:53:35Z","2015-11-13T03:12:15Z"
"","2262","Correct xdocs, issue #2259 and issue #2258","@romani  Corrected xdocs in accordance with issue #2258 and #2259.  Also added WILDCARD_TYPE into list of acceptable tokens in xdocs of WhitespaceAround since it was missing.","closed","","MEZk","2015-10-03T19:07:29Z","2015-10-06T07:20:14Z"
"","2549","Remove parameters validation from LocalVariableName","@romani  1) LocalVariableName should not validate catch parameters because we already have ParameterName check to check both method and catch parameters. PARAMETER_DEF token should be removed from default and acceptable token sets of LocalVariableName. According to check's name, LocalVariableName should validate only variables, not parameters. 2) We need to update xdoc and javadoc.  Example of not appropriate behaviour:  Test.java:  ``` java public class InputOverrideAnnotation {     public void foo() {         try {}         catch (Exception ex) {}     } } ```  my_check.xml:  ``` xml                                                     ```  Result of checkstyle execution:  ``` andreiselkin@andreiselkin ~/Downloads/temp $ java -jar checkstyle-6.12.1-all.jar -c my_check.xml Test.java  Starting audit...  /home/andreiselkin/Downloads/temp/Test.java:4:26: warning: Name 'ex' must match pattern '^ABC$'.  Audit done. ```","closed","breaking compatibility,","MEZk","2015-11-07T09:39:38Z","2016-04-08T06:41:37Z"
"","2286","CommentsIndentationCheck: Fix FP at the end of the block and issue with the ""DOT"" token","@romani  1) Fixed FP violations at the end of the block. 2) Also fixed issue #2077 with the ""DOT"" token , because it can appear at the end of the block too. Issues #2078 and #2077 are both closely connected and resolved by this PR. 3) Rearranged UTs and ITs: one test - one input file, minimal dependencies between tests. Move all test input files to appropriate package. 4) Updates UTs and ITs to cover problematic cases of comments placement. 5) Fixed CommentsIndentationCheck violations on checkstyle source code after 1 and 2.  Please review and I'll generate reports.","closed","","MEZk","2015-10-08T19:16:07Z","2015-11-03T17:22:51Z"
"","2069","New option for CyclomaticComplexityCheck: Treat SWITCH as single decision point, issue #2029","@romani  1) Fixed bug in the Check. The Check did not take into account `default` label of `switch`. For example:  ``` java public class Test {     public void foo() {          // CC = 1         int i = 1;         switch(i) {             case 1:              // CC = 2                  break;            default:              // CC should be 3, but before fix was 2                  break;         }     } } ```  2) Implemented new option for the Check and provided UTs. 3) Resolved check's violation on SuppressWarningsCheck due to the fact that after fix `default` label is also calculated as decision point.","closed","","MEZk","2015-09-01T21:42:52Z","2017-06-07T08:59:35Z"
"","2952","Issue #903: Skip type annotations from validation of ModifierOrderCheck (part 2)","@romani  #903  In accordance with [jsr308](http://types.cs.washington.edu/jsr308/specification/java-annotation-design.html) source locations for annotations on types that follow modifiers are:  1) [Method return types](https://github.com/MEZk/checkstyle/blob/8e77474df0d76db7049ff60700856f485c3b1f2f/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/modifier/InputTypeAnnotations.java#L87). 2) [Method and constructor parameter definitions](https://github.com/MEZk/checkstyle/blob/8e77474df0d76db7049ff60700856f485c3b1f2f/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/modifier/InputTypeAnnotations.java#L51). 3) [Fields definitions](https://github.com/MEZk/checkstyle/blob/8e77474df0d76db7049ff60700856f485c3b1f2f/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/modifier/InputTypeAnnotations.java#L16). 4) [Constructor declarations](https://github.com/MEZk/checkstyle/blob/8e77474df0d76db7049ff60700856f485c3b1f2f/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/modifier/InputTypeAnnotations.java#L105).  Nevertheless, there are a few nuances: - Type annotations cannot be applied to void, for example:  ``` java public class MyClass {  // public @TypeAnnotation void foo() {}","closed","","MEZk","2016-02-21T07:30:45Z","2016-02-24T01:44:04Z"
"","2176","Issue #2175: Add support of lambdas which parameter types are omitted for HiddenFieldCheck","@romani   When I started to implement UTs for lambda expressions I found the following problem: if parameter types of lambda expression are omitted, HiddenFieldCheck will not rise any violations. The problem is due to the fact that ANTLR parses parameters (which types are omitted) as identifiers.   So I've implemented new logic to check lambdas separately and also I've created test examples to explain new functionality.  @mkordas , @romani If you have any suggestions for test inputs, please share your opinion.  @mkordas  FYI: https://github.com/checkstyle/checkstyle/pull/2157#issuecomment-139579396","closed","","MEZk","2015-09-13T20:56:18Z","2015-09-20T15:42:46Z"
"","2174","Issue #382: Add support of lambdas which parameter types are omitted for HiddenFieldCheck","@romani   When I started to implement UTs for lambda expressions I found the following problem: if parameter types of lambda expression are omitted, HiddenFieldCheck will not rise any violations. The problem is due to the fact that ANTLR parses parameters (which types are omitted) as identifiers.   So I've implemented new logic to check lambdas separately and also I've created test examples to explain new functionality.  @mkordas , @romani If you have any suggestions for test inputs, please share your opinion.  @mkordas  FYI: https://github.com/checkstyle/checkstyle/pull/2157#issuecomment-139579396","closed","","MEZk","2015-09-13T19:26:13Z","2015-09-13T20:51:33Z"
"","2624","Issue #2530: Refactoring of CommentsIndentationCheck","@romani   From https://github.com/checkstyle/checkstyle/issues/2530  1) Done  and also done  > Refactoring of while loop inside other while loop    2) If I move ""log"" to upper level call stack , the 'visitSingleLineComment' will become too big and difficult to understand. There are a lot of conditions in the check to cover all cases. The logic is already very difficult. Secondly, there are a lot of if-else in handleSIngleLineCommentAtTheEndOfTheCodeBlock. I don't know how to inline all of them in 'visitSingleLineComment'.","closed","","MEZk","2015-11-18T18:09:16Z","2015-11-27T15:34:30Z"
"","2909","Issue #903: Skip type annotations from validation of ModifierOrderCheck","@romani   Before fix  Checkstyle reported 9 violations on Guava. After fix Checkstyle reports 8 violations on Guava. See report after fix: http://mezk.github.io/guava-mvnstyle/checkstyle.html Input file for UT is compilable with Java 8.  Incorrect violation http://checkstyle.sourceforge.net/reports/google-style/guava/xref/com/google/common/collect/LinkedListMultimap.html#L684 disappeared.  Please,  1) Change issue title for future release notes generation. 2) Add label for issue to avoid build failure during release notes generation.  After merge I'll regenerate Checkstyle report against Guava.","closed","","MEZk","2016-02-13T21:51:32Z","2016-02-18T18:07:25Z"
"","2534","Issue #2290: ParameterNameCheck - update checkstyle_checks.xml, fix NPE, add new option","@romani   > 2) We need to update default usage of  at > https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L180 > to custom config to enforce name to be 2 or more symbols in size. Format ""^[a-z][a-zA-Z0-9]+$"".  Done. When I updated checkstyle_checks.xml and ran mvn clean verify the Check through NPE. The problem was caused by constructors and methods with implicit modifiers. Fixed and covered with UTs.  > 3) Please refactor this Check and make option ""boolean skipCatchParameter = true"". TRUE by default to keep compatibility with previous behavior.  Done.","closed","","MEZk","2015-11-05T20:41:01Z","2015-11-07T07:04:38Z"
"","2261","Issue #819: FileContentsHolder does not have HTML documentation","@romani   > 1) please create xdoc documentation for FileContentsHolder  Done.  > 2) update UT that check that all Checks are present to validate also all filters and other modules of Checker and TreeWalker.  Done.  > 3) We need to split page http://checkstyle.sourceforge.net/config.html into few pages (filter should go to separate sub page for sure). Please propose new structure.  Splitted page http://checkstyle.sourceforge.net/config.html into 11 pages. Each page describe one aspect of checkstyle's configuration as a result there is no mess in documentation.   Site after changes: http://mezk.github.io/site/","closed","","MEZk","2015-10-03T18:45:43Z","2015-10-06T07:20:29Z"
"","2913","Issue #2251: Fix wrong support for resources with language, country, variant","@romani  1)  > Add support for country and variants. No need to extend configuration of Check. During file search we should put all files that are matching by language, no matter how much ""country_variant"" we have.  Done. Now we put all files that are matching by language. Added examples in xdoc.  2)   > Review all examples of Translation Check in XDOC and make sure they are valid. > What is see strange: ""STRING_LITERAL"" and indentation problems.  Corrected.  3)  > option ""basenameSeparator"" change of meaning will be addressed at #2204 see comments there.  I still instist on removing the option. It has incorrect meaning and causes conflicts with default bundle base name meaning that is proposed by Oracle.  4)  > We need to find opensource java project on github that use a lot of translations by properties in resources and check our model on that project.  In progress.  5)  > We need to update xdoc to clearly indicate that we do not enforce requiredTranslations to be ISO code, use can put any values and we will validate such files.   I don't agree. The main idea of requiredTranslations option is to check the existence of translation files in bundle based on language codes. We can not allow user to use the options the way you propose. The language codes are strongly specified at ISO. The java resource bundles loader works only with correct java codes and it does not understand user-formatted code. It's no use to check non ISO language codes, because jvm cannot recognise and load such resource bundle.  6) Please check UT that I've added.","closed","","MEZk","2016-02-14T10:42:37Z","2016-02-18T18:07:13Z"
"","2106","Problem with site build after update for new tag usage for Idea suppressions","@mkordas , please take a look.  cmd (we need it to work as it part of release ): mvn clean site  result in :   ``` Generating /home/rivanov/java/git-others/checkstyle/checkstyle/target/site/apidocs/index.html... Generating /home/rivanov/java/git-others/checkstyle/checkstyle/target/site/apidocs/overview-summary.html... Generating /home/rivanov/java/git-others/checkstyle/checkstyle/target/site/apidocs/help-doc.html... 1 error [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 03:35 min [INFO] Finished at: 2015-09-03T18:12:23-07:00 [INFO] Final Memory: 142M/1534M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-site-plugin:3.4:site (default-site) on project checkstyle: Error generating maven-javadoc-plugin:2.10.3:javadoc: [ERROR] Exit code: 1 - /home/rivanov/java/git-others/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/PropertiesExpander.java:40: error: unknown tag: noinspection [ERROR] * @noinspection IDEA CollectionDeclaredAsConcreteClass [ERROR] ^ [ERROR]  [ERROR] Command line was: /opt/jdk1.8.0_45/jre/../bin/javadoc @options @packages [ERROR]  [ERROR] Refer to the generated Javadoc files in '/home/rivanov/java/git-others/checkstyle/checkstyle/target/site/apidocs' dir. [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException ```  Travis missed that as it is configured to have ""-Dmaven.javadoc.skip=true "" that should be removed to let it test javadoc.  Problem after commit: a3daead123f0d326e18e30f45b1020c2d194d384","closed","approved,","romani","2015-09-04T01:19:52Z","2015-09-04T23:31:08Z"
"","2837","Issue 2836","6 seperate commits to showcase the full changes I did for the unit tests to work correctly. Since there is no full list of messages, this was a manual process to make sure I got them all. When this is applied to the xdocs we can make sure that none are being missed. Until then, this is only the first step of 2836 and does not close the issue.  **renamed error message fields to match standard naming**: New pattern is `MSG_*` so all fields must match that to be picked up.  **moved inline strings to error message fields**: Only fields are picked up from the checks, so all non-fields must be converted. I also changed the tests to use the fields so everything is connected.  **changed private error message fields to public**: The majority of our messages are public and used in their respective tests, so I changed any private/package ones and fixed up the test cases to use them. **Note:** RegexpHeaderCheck was using the messages from the wrong class in the test, so I fixed this as part of this.  **changed AbstractParenPadCheck to public class**: I changed this one class to public so the fields are accessible. All the other abstract classes are public, so I didn't see why this one should be any different. I can undo this if desired.  **moved error message fields to the check that reports them**: The process to find these error messages only scans their check and their hierarchy, so the fields must be in those classes or they are not seen. This also makes it easier to view all the check's messages in the source code and enforces the check class as the place to go to for almost everything. 3 of the `Regexp` checks break this as I didn't think the messages should be moved.  **added UT for testing check's messages**: `testAllCheckstyleModulesHaveMessage` verifies all checks have atleast one error to report. 'testAllCheckstyleMessages' verifies all check errors are `public static final`, its displayed message is not empty/null, and doesn't start with `TODO`.","closed","","rnveach","2016-01-20T20:44:51Z","2016-01-21T14:52:54Z"
"","2356","Issue #2161: unify test input locations for javadoc package","3rd time is the charm","closed","","rnveach","2015-10-15T00:15:50Z","2015-10-16T22:18:51Z"
"","2336","Issue #2161: unify test input locations","2 test cases are tied together by the same input and are in the same directory","closed","","rnveach","2015-10-12T15:59:20Z","2015-10-14T09:05:49Z"
"","2319","Issue #2161: unify test input locations","2 test cases are tied together by the same input and are in the same directory","closed","","rnveach","2015-10-11T05:03:36Z","2015-10-12T15:06:23Z"
"","2307","Issue #2161: unify test input locations","2 test cases are tied together by the same input and are in the same directory","closed","","rnveach","2015-10-11T03:56:15Z","2015-10-12T15:06:44Z"
"","2385","Issue #2161: unify test input locations for naming package","2 inputs copied.","closed","","rnveach","2015-10-19T12:53:44Z","2015-10-19T20:55:49Z"
"","2384","Issue #2161: unify test input locations for whitespace package","2 inputs copied.","closed","","rnveach","2015-10-19T12:49:25Z","2015-10-19T20:55:46Z"
"","2382","Issue #2161: unify test input locations for regexp package","2 inputs copied","closed","","rnveach","2015-10-18T16:16:03Z","2015-10-19T12:34:35Z"
"","3000","Some redundant messages.","1. As DoubleCheckedLocking check removed in [Release 5.6](http://checkstyle.sourceforge.net/releasenotes_old.html#Release_5.6), message doublechecked.locking.avoid should be removed too;    It belonged to [coding](http://checkstyle.sourceforge.net/config_coding.html) before. 2. Redundant messages in com.putty.tools.checkstyle.metrics : [illegalCatch](https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22illegalCatch%22), [illegalThrows](https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22illegalThrows%22), [illegalToken](https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22illegalToken%22), [illegalType](https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22illegalType%22), [junit.methodName](https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22junit.methodName%22), [junit.methodParameters](https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22junit.methodParameters%22), [junit.methodPublicAndStatic](https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22junit.methodPublicAndStatic%22), [junit.methodPublicOrProtected](https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22junit.methodPublicOrProtected%22) and [junit.methodReturnType](https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22junit.methodReturnType%22).    I didn't see any usage of messages above in [merics](http://checkstyle.sourceforge.net/config_metrics.html)","closed","miscellaneous,","ybbpgfjtey","2016-03-03T17:49:14Z","2016-04-22T12:08:49Z"
"","2085","Remove delay on displaying ""Starting audit"", flush result after each file processing","1) When running checkstyle from the command line, I noticed the text ""Starting audit..."" actually doesn't show up until the auditing is technically done. This isn't really noticably when checkstyle finishes pretty fast, but when it takes more than a few seconds because its analyzing lots of files with many checks, you start to take notice. Sometimes I even question if the program started or not because the computer might be lagging.  2) It would be a nice feature if for the command line run, it would atleast display the ""Starting audit"" right away. It also wouldn't be bad to go the extra mile and do the same for errors after each file is analyzed.  Code wise it seems like a simple change: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java#L141 The writer just needs to be flushed after the println.","closed","approved,","rnveach","2015-09-03T01:05:18Z","2015-10-31T14:51:41Z"
"","2697","Issue #2523: Make DetectorOptions as final and immutable [resolve PMD & IDEA Inspections violations]","1) Resolved IDEA violations by setting `ignoreNonPublic` option of ReturnOfInnerClass inspection to true.  **Memory issues - Return of instance of anonymous, local or inner class (9)** Description: Reports return statements returning an instance of an anonymous, local, or inner class. Such instances keep an implicit reference to the outer instance. Which means the instance can prevent the outer instance from being garbage collected. Any caller of a method which returns such an instance might cause a memory leak by holding on to the instance returned.  2) Resolved IDEA inspections violation. Made Builder class as public.  **Encapsulation issues - Package-visible inner class (1)** Description: Reports package-local inner classes.  3) Suppressed PMD violation:  **PMD Failure: com.puppycrawl.tools.checkstyle.checks.regexp.DetectorOptions:128 Rule:AccessorClassGeneration Priority:3 Avoid instantiation through private constructors from outside of the constructors class.**  https://pmd.github.io/pmd-5.4.1/pmd-java/rules/java/design.html#AccessorClassGeneration","closed","","MEZk","2015-12-14T22:58:13Z","2015-12-16T18:01:08Z"
"","2767","Gui should have a splitter bettween tree and code and prefered columns size","1) Gui should have a splitter bettween tree and code 2) Columns ""Line"" and ""Column"" by default should have minimal size. Line and Columns for 4 digit positions width in cell. ""Tree"" columns should be the most wide.","closed","approved,","romani","2015-12-23T23:59:54Z","2016-01-01T18:26:41Z"
"","2088","Issue #1833: Fixed redundant modifier false positive for abstract classes in interfaces.","1) Fixed redundant modifier false positive for abstract classes in interfaces. 2) Extended javadoc/xdoc for classes inside of interfaces. 3) Extended javadoc/xdoc for enums.","closed","","MEZk","2015-09-03T10:06:57Z","2015-09-04T15:40:55Z"
"","2161","Unify naming of all files with test inputs","1) All files with code that is bad on purpose should be named in the same way. Let's start their names with 'Input' word.  2) All Input files should be located in the same package as UTest file and Check.","closed","miscellaneous,","mkordas","2015-09-11T20:35:28Z","2015-11-07T07:07:15Z"
"","2400","Issue #2161: unify test input locations for checkstyle package","1 input duplicated.","closed","","rnveach","2015-10-20T18:11:20Z","2015-10-22T13:12:47Z"
"","2383","Issue #2161: unify test input locations for sizes package","1 input copied. InputModifier lost the javadoc tag since this is the only place the file is for, which is not a modifier package.","closed","","rnveach","2015-10-19T12:40:29Z","2015-10-19T20:55:42Z"
"","2583","minor: separated tests so one subject per file","1 file contained tests for 3 different checks, so I split them apart to make it easier to identify the specific tests for each check.","closed","","rnveach","2015-11-11T22:16:25Z","2015-11-12T20:28:05Z"
"","2112","IllegalStateException is thrown if non-generic param in doc for class","/*\* @param x */ class Test {}  Causes IllegalStateException to be thrown.  In JavadocTypeCheck.checkUnusedTypeParamTags(), generic pattern is assumed to have matched first argument of tag, and first group of matcher is used without a check for group count.","closed","approved,","lbarowski","2015-09-04T20:16:29Z","2015-09-15T16:18:36Z"
"","2228","Issue #2191: SuppressionsLoaderTest UT was stabilized","- the test was stabilized by overcoming the problem with Assume.assumeTrue due to https://github.com/jayway/powermock/issues/428 - alternate github location was added in case sourceforge is unavailable","closed","","rdiachenko","2015-09-23T21:11:27Z","2019-02-13T14:55:19Z"
"","2209","Issue #2193: ROOT locale added in checker creation for UT; travis updated with a new check","- Missed ROOT locale was added during checker creation for UT - Travis was updated with the check which runs tests in non-English locale","closed","","rdiachenko","2015-09-19T00:19:14Z","2019-02-13T14:55:25Z"
"","2347","Issue #1217: adding 'forbiddenapis' verification tool into Checkstyle","- 'forbiddenapis' maven plugin was added and configured - violations were fixed, input resources were marked as excluded","closed","","rdiachenko","2015-10-13T23:42:52Z","2019-02-13T14:55:19Z"
"","2646","@SuppressWarnings annotation does not suppress UncommentedMain","**Problem:** @SuppressWarnings annotation does not suppress UncommentedMainCheck violations.  **Input file: `Test1.java`**  ``` java public class Test1 {     /**      * Javadoc      */     @SuppressWarnings(""checkstyle:uncommentedmain"")     public static void main(String[] args) {     } } ```  **Input file: `Test2.java`**  ``` java public class Test2 {     /**      * Javadoc      */     @SuppressWarnings(""checkstyle:UncommentedMain"")     public static void main(String[] args) {     } } ```  **Input file: `Test3.java`**  ``` java public class Test3 {     /**      * Javadoc      */     @SuppressWarnings(""uncommentedmain"")     public static void main(String[] args) {     } } ```  **Input file: `Test4.java`**  ``` java public class Test4 {     /**      * Javadoc      */     @SuppressWarnings(""UncommentedMain"")     public static void main(String[] args) {     } } ```  **Configuration file: `my_check.xml`**  ``` xml                                             ```  **Checkstyle 6.12.2 output**  ``` andreiselkin@andreiselkin ~/Downloads/temp $ java -jar checkstyle-6.12.1-all.jar -c my_check.xml Test1.java Starting audit... /home/andreiselkin/Downloads/temp/Test1.java:5: warning: Uncommented main method found. Audit done.  andreiselkin@andreiselkin ~/Downloads/temp $ java -jar checkstyle-6.12.1-all.jar -c my_check.xml Test2.java Starting audit... /home/andreiselkin/Downloads/temp/Test2.java:5: warning: Uncommented main method found. Audit done.  andreiselkin@andreiselkin ~/Downloads/temp $ java -jar checkstyle-6.12.1-all.jar -c my_check.xml Test3.java Starting audit... /home/andreiselkin/Downloads/temp/Test3.java:5: warning: Uncommented main method found. Audit done.  andreiselkin@andreiselkin ~/Downloads/temp $ java -jar checkstyle-6.12.1-all.jar -c my_check.xml Test4.java Starting audit... /home/andreiselkin/Downloads/temp/Test4.java:5: warning: Uncommented main method found. Audit done. ```  The following configuration also does not help:  ``` xml                                                               ```","closed","approved,","MEZk","2015-11-22T22:36:22Z","2015-12-08T14:00:54Z"
"","2166","TranslationCheck does not catch that some translation files are missed","**Problem:** TranslationCheck checks keys only for existing properties files. If file does not exist (like messages_ja.properties in [checkstyle/src/main/resources](https://github.com/checkstyle/checkstyle/tree/master/src/main/resources/com/puppycrawl/tools/checkstyle)), TranslationCheck will not rise violation.   **Proposal:** Create special property for TranslationCheck. Using the property user can specify which localizations (patterns: ja, pt, es, etc.) must be present for TranslationCheck. And if property file is missed, the check will rise violation, for example: ""Property file messages_ja.properties is missed.""","closed","approved,","MEZk","2015-09-12T10:17:55Z","2015-09-26T22:30:21Z"
"","2243","cobertura:check goal fails the build while executing on Travic CI","**Problem** cobertura:check goal fails the build while executing on Travis CI.   **Reason** TranslationCheck is reported as not fully covered with UT.  See https://travis-ci.org/checkstyle/checkstyle/jobs/82176441 .   **Details of investigation** On local PC cobertura:check does not fail the build.  AppVeyor also does not fail the build. See https://github.com/checkstyle/checkstyle/pull/2177#issuecomment-142131480 Details of investigation on local PC: https://github.com/checkstyle/checkstyle/pull/2177#issuecomment-142357197  **Attempts to resolve the problem** The following attemts to resolve the problem do not work: [Attempt 1](https://github.com/checkstyle/checkstyle/commit/e040b82ce9693d3dd117fca443ab184b97a2b661) [Attempt 2](https://github.com/MEZk/checkstyle/commit/24acc9ffd52e61033485c6f3a7c3b957b7f2f0be)","closed","approved,","MEZk","2015-09-26T19:33:35Z","2015-10-05T19:32:25Z"
"","2647","UncommentedMain does not rise violations if main method has varargs as parameters","**Input file: `Test.java`**  ``` java public class Test {     public static void main(String... args) {     } } ```  **Configuration file: `my_check.xml`**  ``` xml                                 ```  **Checkstyle 6.12.1 output**  ``` andreiselkin@andreiselkin ~/Downloads/temp $ java -jar checkstyle-6.12.1-all.jar -c my_check.xml Test.java Starting audit... Audit done. ```","closed","approved,","MEZk","2015-11-22T22:41:09Z","2015-12-06T14:06:34Z"
"","2998","CommentsIndentation Check - False Positive at End-of-Method","**Details**  ``` /var/tmp $ /cygdrive/c/Program\ Files/Java/jdk1.8.0_66/bin/javac.exe Test.java  /var/tmp $ cat Test.java public class Test {     private final Object anyObject = null;      public void method1() {         anyObject.toString();         // OK     }      public void method2() {         // Single-line comment         anyObject.toString();         // OK     }      public void method3() {         // Multi-line block comment         // Here is the second line         anyObject.toString();         // FALSE-POSITIVE HERE     }      public void method4() throws InterruptedException {         // Multi-line block comment         // Here is the second line         anyObject.wait();         // FALSE-POSITIVE HERE     } }  /var/tmp $ cat config.xml                /var/tmp $ java -jar checkstyle-6.16-all.jar -c config.xml Test.java Starting audit... [ERROR] /var/tmp/Test.java:20: Comment has incorrect indentation level 1, expected is 19, indentation should be the same level as line 19. [CommentsIndentation] [ERROR] /var/tmp/Test.java:28: Comment has incorrect indentation level 1, expected is 15, indentation should be the same level as line 27. [CommentsIndentation] Audit done. Checkstyle ends with 2 errors. ```  **Expected Outcome** No violations.","closed","approved,","gkeighren","2016-03-03T10:14:41Z","2016-04-25T16:13:53Z"
"","2555","Issue #2161: unify it input file names for chapter4formatting","**Comments:** This PR has 3 sets of 8 duplicated files. `FastMatcher` and `IndentationCorrect*`.","closed","","rnveach","2015-11-08T02:59:14Z","2015-11-08T15:25:29Z"
"","2558","Issue 2557","**added xdoc style validation**: Rules must be in order. Check names shouldn't end with ""Check"". Configs should to be in order of: config, test Config urls should match a defined pattern. Test urls should be a file that exists.  **unified test file names**: I went with `*Test` instead of `*CheckTest` because all but one follows this pattern, and it keeps conflicts from test folder down.  **made tests only cover one subject**: Move code around so one test covers one check.  **fixed xdoc style errors**: sun_style.xml has minor modifications to look more like google's.","closed","","rnveach","2015-11-08T22:15:06Z","2015-11-09T13:48:45Z"
"","2501","Issue #2451: removed excess hierarchy from IllegalTokenTextCheck","'updateRegexp' is a new method to centralize creating the pattern. Had to remove 'setCompileFlags' from AbstractFormatCheck to get code coverage to pass.  Everything else is a copy.","closed","","rnveach","2015-11-01T13:33:09Z","2015-11-05T14:21:59Z"
"","2289","Issue #2283: fixed NPE in NeedBraces.isSingleLineFor","'findExpressionBlockInForLoop' returns null because there is no expression in the test case, it is a plain ""break"". To avoid the NPE, the code is changed to just get the last child of the for loop.","closed","","rnveach","2015-10-09T00:32:48Z","2015-10-10T00:07:25Z"
"","2836","Add checkstyle messages to xdocs","> The obvious question is how do you know which message keys a Check uses, so that you can override them? Well, that is the tricky part. To find out which keys a Check uses you currently need to look into the Check's source code, in conjunction with the Check's messages.properties file.  The check's messages and their parameters should be added to the xdocs so it is easier for the user to find these names to override and serves to inform them what error messages to expect from the check they are implementing.","closed","miscellaneous,","rnveach","2016-01-19T22:34:36Z","2016-01-30T13:42:00Z"
"","2921","Issue #2904: fixed bad code in InputIllegalInstantiation2","> Supplier suppl = InputMethodReferencesTest2::<Integer> new;  Eclipse error highlighting `Integer`: `Explicit type arguments cannot be specified in raw constructor reference` No code coverage attached, so if no one has any alternatives, I just removed it.","closed","","rnveach","2016-02-15T22:18:50Z","2016-02-16T14:13:47Z"
"","2931","Issue #957: Resolve PMD DefaultPackage rule problems in imports package","#957.","closed","","Vladlis","2016-02-17T20:41:08Z","2016-02-18T20:04:08Z"
"","2954","I957 2","#957","closed","","romani","2016-02-21T14:10:48Z","2016-02-21T14:52:29Z"
"","2955","Issue 2944 - EmptyLineSeparator to check empty lines inside methods","#2944  It become a little bit hard to contribute because: 1. Checkstyle import order is different from standard IDEA setting (OK, it's described here http://checkstyle.sourceforge.net/idea.html but is there any reason to do so?) 2. Default IDEA indentation is different from Checkstyle setting for Array items 3. Any reason to declare each method variable as final? It's harder to read and doesn't really helps to avoid issues since if you modify the variable then Checkstyle will not ask you to mark the variable as final. 4. Failed to execute goal org.jacoco:jacoco-maven-plugin:0.7.5.201505241946:check (default-check) on project checkstyle: Coverage checks have not been met. In logs I see ""[WARNING] Rule violated for class com.puppycrawl.tools.checkstyle.checks.AbstractDeclarationCollector: lines covered ratio is 0.00, but expected minimum is 1.00"" but I haven't touched the file!","closed","incomplete,","ychulovskyy","2016-02-21T20:20:40Z","2016-02-28T13:52:27Z"
"","2908","Issue #2869: Allow missing javadoc tags if an allowed annotation is put","#2869","closed","","Vladlis","2016-02-13T21:36:55Z","2016-02-20T11:20:41Z"
"","2323","Issue #1551: Fix FinalLocalVariableCheck false-negative","#1722  > 1) please make it as ""An example of how to configure the check to validate variable definition is:""  Done.  >  2)  mismatch of documentation and getRequiredTokens(). please update all examples (javadoc, xdoc).  Corrected examples, is it OK now?  > 3) please create new class that will store all information about scope (Map + Deque).  Done.  > 4) Please create UT that show that variables in different but nested scopes are named the same and one of them final another is not final and issue is reported to required variable.  Done. https://github.com/Vladlis/checkstyle/commit/85bf34603f574445610d535a1bc55e5d69fe6d5c#diff-0b3755657c714c3c6e8b488b4d29606aR215  > 5) please generate reports against project to see that new violations are correct , please do check all of them yourself.  I've corrected all the new violations on CS sources, changes are in a in a separate commit.  > 6)  getDefaultToekns() , get AcceptableTokes() > pelase move TokenTypes.VARIABLE_DEF to the end of list to let future developer easily see a difference between collections,  Done.  > 7) private boolean defAndInitInDifferentLoop(DetailAST ast1, DetailAST ast2) > Why only Loops are checked there, that should be processing for any block structure that create extra scope (scope is ""{ }"").  There is already processing for all scopes, but here we look for loops, because there one statement can be executed more than once.","closed","","Vladlis","2015-10-11T15:57:50Z","2015-11-02T14:45:39Z"
"","2819","minor: Update Maven Surefire and Failsafe plugin","#### Release Notes - Maven Surefire - Version 2.19.1          Bug    [SUREFIRE-1185] -         single method test spews status of every single other test  [SUREFIRE-1187] -         JUnit4 Provider created unnecessary Runner instance  [SUREFIRE-1189] -         Prevent from I/O leakage. Thus close streams in finally block.  [SUREFIRE-1192] -         Fixed Sonar and FindBug issues  [SUREFIRE-1193] -         Surefire 2.19 hangs in the log4j build  [SUREFIRE-1194] -         reporter argument does not work for TestNG  [SUREFIRE-1197] -         Surefire 2.19 breaks tests under Windows due to fork problem  [SUREFIRE-1200] -         Could not run single test by full name  [SUREFIRE-1203] -         Surefire hangs after Test Execution  [SUREFIRE-1204] -         -Dtest= option is broken in 2.19  [SUREFIRE-1208] -         Start stream capture before loading tests  [SUREFIRE-1209] -         rerunFailingTestsCount does not run failed tests if forkCount and surefire-junit47 is used  [SUREFIRE-1211] -         surefire-testng runs JUnit tests  [SUREFIRE-1215] -         refs/tags/surefire-2.19.1_vote-1 slows down the Maven build in 20 seconds             Improvement    [SUREFIRE-1135] -         Improve ignore message for TestNG  [SUREFIRE-1191] -         Run Single Test with Package Name Doesn't work  [SUREFIRE-1202] -         Allow rerunFailingTestsCount, skipAfterFailureCount together","closed","","mkordas","2016-01-12T07:55:24Z","2016-01-12T13:21:25Z"
"","2324","Pull #2324: Update JGit to 4.1.0.201509280440-r","### JGit 4.1.0 Release Notes ##### Basic Support for Push Certificates - Push certificates are used to verify the pusher's identity when a git server receives a signed pack - Parsing of push certificates - Storage of push certificates, they are stored in a special ref ""refs/meta/push-certs"". The filenames in the tree are ref names followed by the special suffix ""cert"", and the contents are the latest push cert affecting that ref. - Configuration for server-side signed push verification - Support for push certificates in BaseReceivePack and RefUpdate - Ignore Handling - Allow leading/trailing spaces in ignore rules - Allow leading literal '#' and '!' in ignore rules if they are escaped - Don't trim trailing space if it is escaped with backslash ##### Other Enhancements - Add setTargetBranch in RepoCommand. - Add API to remove repositories from RepositoryCache - Add new submodule layout to SubmoduleAddCommand - Handle stale NFS file handles on packed-refs file - Add a grace period for packfiles during GC so that they are retained during GC until configured expiration age is reached ##### Performance Improvements - Use java.io.File instead of NIO to check existence of loose objects in ObjectDirectory to speed up inserting of loose objects - Reduce memory consumption when creating bitmaps during writing pack files ##### Build and Release Engineering - Enable annotation based NPE analysis in jgit - Update Jetty to 9.2.13.v20150730 - Update org.apache.httpcomponents to 4.3","closed","","mkordas","2015-10-11T17:03:04Z","2015-10-12T22:12:26Z"
"","2887","VisibilityModifier.allowPublicImmutableFields should allow public immutable fields in enums","## Code  ``` java public enum Blah {     A, B;      public final int blah = 5; } ``` ## Config  ``` xml                                                     ``` ## Observed Output  ``` bash java -jar checkstyle-6.15-all.jar -c config.xml -f plain Blah.java Starting audit... [WARN] Blah.java:4:22: Variable 'blah' must be private and have accessor methods. [VisibilityModifier] Audit done. ``` ## Expected Output  ``` bash java -jar checkstyle-6.15-all.jar -c config.xml -f plain Blah.java Starting audit... Audit done. ```","closed","approved,","scompt","2016-02-08T13:48:34Z","2016-02-15T13:44:18Z"
"","2293","Pull #2293: Update PowerMock to 1.6.3","## Change log 1.6.3 (2015-10-02) - Mock name in @Mock(name=""abc"") annotations are no longer ignored for the Mockito API extension - Fixed NPE in withArguments() constructor (thanks to Tomoyuki Saito for pull request) - Upgraded Javassist dependency to version 3.20.0-GA. - Using soft reference in classloader cache - MockClassloader now extends Javassist Loader classloader to implement findClass etc - PowerMock now works better with ByteBuddy (issue 579) - This allows creating mocks in the applyInterceptionPolicy method of MockPolicy, which in turn allows using MockPolicy together with PowerMockRule (issue 581). - Upgraded the powermock-easymock extension to use EasyMock 3.4","closed","","mkordas","2015-10-09T21:16:52Z","2015-10-09T22:23:56Z"
"","2394","Pull #2394: Update Maven Surefire and Failsafe plugins to 2.19","# Release Notes - Maven Surefire 2.19          Bug    [SUREFIRE-856] -         Running single test in Failsafe using CLI does not override <includes> configuration  [SUREFIRE-919] -         TestNG plugin fails to apply 'verbose' setting from TestNG.xml  [SUREFIRE-945] -         Top of web page is pretty opaque  [SUREFIRE-964] -         TEST-*.xml files generated by Surefire throw validation warnings in Eclipse for no grammer constraints (DTD or XML schema) referenced in the document  [SUREFIRE-983] -         'Running a Single Test' feature does not work as expected (for testng provider)  [SUREFIRE-986] -         Groovy power assert incorrect indentation  [SUREFIRE-1024] -         ""verify"" goal ignores ""dependenciesToScan"" parameter when checking tests existence  [SUREFIRE-1037] -         Elapsed time is reported incorrectly for tests run in parallel  [SUREFIRE-1067] -         Nested causes conflated with wrapper exception  [SUREFIRE-1084] -         Surefire-report stack traces appear on a single line.  [SUREFIRE-1125] -         Running multiple methods via the `test` property does not work in junit47 provider  [SUREFIRE-1126] -         Discrepancy between test exclusion docs and plugin behavior  [SUREFIRE-1127] -         Failsafe project does not fail in verify phase when a test case object errors during initialization  [SUREFIRE-1128] -         Fix mvn 2.2.1 build process https://builds.apache.org/view/All/job/maven-surefire-mvn-2.2.1  [SUREFIRE-1129] -         JDK 5 should be the min requirements in surefire project  [SUREFIRE-1131] -         Remove obsolete maven profiles  [SUREFIRE-1133] -         Surefire Windows Build fails on OOM  [SUREFIRE-1136] -         Current working directory propagation in forked mode  [SUREFIRE-1137] -         Problem with Umlauts in stdout  [SUREFIRE-1138] -         Enabling reuseForks runs all tests in series on just one fork  [SUREFIRE-1144] -         Time for testsuite on commandline does not suit with the time value given in the report file  [SUREFIRE-1146] -         rerunFailingTestsCount not working with Parameterized test  [SUREFIRE-1148] -         JUnit Method Filter (**/Class#method) should use same syntax as ""test"" parameter  [SUREFIRE-1150] -         The surefire and failsafe plugin should not be dependent on JCIP  [SUREFIRE-1151] -         surefire/failsafe home pages should link to apache.org for issues  [SUREFIRE-1152] -         Option rerunFailingTestsCount silently fails with test suites  [SUREFIRE-1154] -         TestNG and JUnit should be able to run its own tests  [SUREFIRE-1158] -         Remove startup logs of the plugin and TestNG configurator  [SUREFIRE-1159] -         JUnit47 runner failing in parallel mode  [SUREFIRE-1160] -         -DTest=... should be independent of execustion section  [SUREFIRE-1161] -         Executing selected (multiple) tests of same class gives Exception  [SUREFIRE-1167] -         Upgrade DOXIA to Version 1.6  [SUREFIRE-1173] -         Link to plugin's web site is reported as redirected by maven linkcheck plugin.  [SUREFIRE-1177] -         TestNG ""suitethreadpoolsize"" parameter can not be set by Maven Surefire  [SUREFIRE-1179] -         TestNG parallel options seem to not be honored  [SUREFIRE-1180] -         Does not overrides include/exclude using -Dtest property  [SUREFIRE-1181] -         ""forkedProcessTimeoutInSeconds"" does not kill forked JVM although interrupted build  [SUREFIRE-1182] -         Surefire 2.19 rc hangs when building maven core  [SUREFIRE-1184] -         Documentation for TestNG parameter ""testnames"" - see SUREFIRE-845             Improvement    [SUREFIRE-574] -         additionalClasspathElements-feature improved  [SUREFIRE-597] -         Surefire report creation fails on processing absent optional JUnit xml attributes  [SUREFIRE-622] -         The TestNG command line option '-testrunfactory' should be supported.  [SUREFIRE-745] -         -Dtest supports multiple test classes but not multiple test methods  [SUREFIRE-826] -         maven-surefire-plugin does not add its own plugin dependencies to the classpath  [SUREFIRE-850] -         Document how to run TestNG & JUnit 4 tests  [SUREFIRE-855] -         Allow failsafe to use actual jar file instead of target/classes  [SUREFIRE-1065] -         Allow includesFile and excludesFile parameters to be set from the commandline  [SUREFIRE-1155] -         REFACTORING for Java 5  [SUREFIRE-1162] -         Upgrade maven-shared-utils to Version 0.8  [SUREFIRE-1163] -         Upgrade maven-verifier to Version 1.6  [SUREFIRE-1174] -         Concurrent RunListeners should be annotated @ThreadSafe  [SUREFIRE-1178] -         Upgrade maven-shared-utils to Version 0.9             New Feature    [SUREFIRE-131] -         Excluding tests with command line pattern  [SUREFIRE-524] -         Forked Process not terminated if maven process aborted. Provide means to clean up.  [SUREFIRE-580] -         Allow ""fail fast"" or stop running on first failure  [SUREFIRE-1134] -         Take list of tests from file (-Dtest has upper limits for comma-separated list of tests)  [SUREFIRE-1140] -         Support anchoring all test case names","closed","","mkordas","2015-10-20T10:02:45Z","2015-11-10T23:51:46Z"
"","2130","resolve messages from maven-compiler-plugin","""mvn clean verify"" have some messages from compiler that should be resolved or suppressed.  ``` [INFO] --- maven-compiler-plugin:3.3:testCompile (default-testCompile) @ checkstyle --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 802 source files to checkstyle/target/test-classes [INFO] checkstyle/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java: Some input files use or override a deprecated API. [INFO] checkstyle/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java: Recompile with -Xlint:deprecation for details. [INFO] checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputUnnecessaryParentheses.java: Some input files use unchecked or unsafe operations. [INFO] checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputUnnecessaryParentheses.java: Recompile with -Xlint:unchecked for details. ```  ``` [INFO] --- maven-compiler-plugin:3.3:testCompile (default-testCompile) @ checkstyle --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 802 source files to checkstyle/target/test-classes [INFO] checkstyle/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java: Some input files use or override a deprecated API. [INFO] checkstyle/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java: Recompile with -Xlint:deprecation for details. [INFO] checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputUnnecessaryParentheses.java: Some input files use unchecked or unsafe operations. [INFO] checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputUnnecessaryParentheses.java: Recompile with -Xlint:unchecked for details. ```","closed","approved,","romani","2015-09-06T13:53:34Z","2015-11-09T14:39:40Z"
"","2234","Issue #2230: Add docs about while idiom to InnerAssignment check","![image](https://cloud.githubusercontent.com/assets/5467276/10094720/95804e0c-6363-11e5-8ee2-5f068408e818.png)","closed","","mkordas","2015-09-24T22:06:14Z","2015-09-25T12:47:49Z"
"","2990","config: update to slf4j-simple 1.7.18","","closed","","romani","2016-03-01T00:25:05Z","2016-03-01T01:31:20Z"
"","2980","Issue #2944: EmptyLineSeparator to check empty lines inside methods","","closed","incomplete,","ychulovskyy","2016-02-27T18:13:08Z","2016-03-24T23:40:10Z"
"","2964","minor: formatting for java.g to follow 100 symbols per line rule","","closed","","romani","2016-02-24T14:21:51Z","2016-02-24T18:37:53Z"
"","2960","Issue #2938: add XWiki project to regeression testing","","closed","","romani","2016-02-23T14:36:04Z","2016-02-23T17:05:11Z"
"","2959","Issue #2938: add XWiki project to regeression testing","","closed","","romani","2016-02-23T13:58:36Z","2016-02-23T14:34:34Z"
"","2958","infra: travis: jq tools usage for json parsing after curl","","closed","","romani","2016-02-22T23:18:49Z","2016-02-23T00:05:17Z"
"","2957","infra: travis test Issue ref in PR description","","closed","","romani","2016-02-22T01:16:51Z","2016-02-22T02:15:07Z"
"","2953","Issue #2762: Extend violation message for brace policy 'same' of RightCurlyCheck","","closed","","MEZk","2016-02-21T10:12:33Z","2016-02-21T16:02:09Z"
"","2949","Issue #957: Forbid @VisibleForTesting","","closed","","Vladlis","2016-02-20T20:45:59Z","2016-02-26T09:06:36Z"
"","2948","Issue #957: Remove PMD DefaultPackage rule from excludes","","closed","","Vladlis","2016-02-20T14:23:25Z","2016-02-26T09:06:32Z"
"","2947","Issue #2938: add XWiki project to regeression testing","","closed","incomplete,","Vladlis","2016-02-20T11:30:15Z","2016-02-26T09:06:37Z"
"","2946","doc: Improve javadoc of parameters of AnnotationLocationCheck.","","closed","","liscju","2016-02-19T14:19:20Z","2016-02-20T00:36:06Z"
"","2937","Issue #957: Resolve problems from PMD DefaultPackage rule","","closed","","Vladlis","2016-02-18T22:27:20Z","2016-02-20T11:20:43Z"
"","2936","config: maven-compiler-plugin:3.5.1","","closed","","romani","2016-02-18T14:19:07Z","2016-02-18T15:07:35Z"
"","2930","Issue #2929: Add test to verify PR description","","closed","","mkordas","2016-02-17T18:53:52Z","2016-02-23T06:13:04Z"
"","2925","Issue #957: Resolve PMD DefaultPackage rule problems in gui package","","closed","","Vladlis","2016-02-16T21:46:11Z","2016-02-17T20:07:57Z"
"","2923","Issue #1159: Resolve PMD ExceptionAsFlowControl in PackageObjectFactory","","closed","","Vladlis","2016-02-16T09:30:58Z","2016-02-16T19:15:57Z"
"","2919","config: slf4j-simple was updated to 1.7.16","","closed","","romani","2016-02-15T14:35:19Z","2016-02-16T13:30:38Z"
"","2915","Issue #2185: update Checkstyle ant task documentation","","closed","","Vladlis","2016-02-14T20:10:26Z","2016-02-15T19:35:44Z"
"","2912","Issue #2887: Fix VisibilityModifier.allowPublicImmutableFields work in enums","","closed","","Vladlis","2016-02-13T23:34:56Z","2016-02-15T19:36:02Z"
"","2902","Issue #2818: Add support for lambda expression in LeftCurlyCheck","","closed","","liscju","2016-02-12T12:27:27Z","2016-02-17T16:18:56Z"
"","2897","Issue #2285: Add possibility to track down the name of source file which caused the internal Exception or Error","","closed","","MEZk","2016-02-10T20:06:00Z","2016-02-18T18:05:55Z"
"","2896","Issue #2889: Adds skipNoJavadoc option to MissingDeprecated check","","closed","","liscju","2016-02-10T17:28:15Z","2016-02-17T13:49:42Z"
"","2894","Issue #2609: Refactor CodeSelector","","closed","","Vladlis","2016-02-09T14:55:56Z","2016-02-09T18:26:37Z"
"","2893","Issue #2609: Refactor MainFrame","","closed","","Vladlis","2016-02-09T12:57:13Z","2016-02-09T18:26:20Z"
"","2890","Issue #2609: Refactor ParseTreeTableModel","","closed","","Vladlis","2016-02-08T18:55:41Z","2016-02-08T21:20:18Z"
"","2885","Issue #2103: removed excess file gathering in main","","closed","","rnveach","2016-02-08T00:48:38Z","2016-02-12T01:33:40Z"
"","2884","Issue #2609: Refactor MainFrame","","closed","","Vladlis","2016-02-07T21:47:34Z","2016-02-08T19:23:29Z"
"","2882","Issue #569: Move TreeWalker cache to Checker","","closed","","MEZk","2016-02-07T13:59:49Z","2016-02-18T18:07:18Z"
"","2879","Correct spelling","","closed","","thomaspaulmann","2016-02-05T17:07:03Z","2016-02-06T13:31:45Z"
"","2876","Issue #2783: UTs should be launched in default locale","","closed","","Vladlis","2016-02-05T15:48:45Z","2016-02-07T18:07:03Z"
"","2875","Fix typos","","closed","","thomaspaulmann","2016-02-05T15:24:37Z","2016-02-05T17:07:13Z"
"","2871","minor: slf4j-simple version bump to 1.7.14","","closed","","romani","2016-02-04T14:27:16Z","2016-02-04T16:55:27Z"
"","2870","minor: antlr4-maven-plugin version bump to 4.5.2-1","","closed","","romani","2016-02-04T14:27:06Z","2016-02-04T16:55:13Z"
"","2868","Add Javadoc badge with automatic version detection","","closed","","valery1707","2016-02-04T06:22:46Z","2016-02-05T13:06:17Z"
"","2857","config: fix problem with not found sevntu_suppression.xml in Eclipse","","closed","","romani","2016-01-30T15:36:31Z","2016-01-30T16:07:29Z"
"","2856","Issue #2638: Print parse tree from CLI to terminal","","closed","","Vladlis","2016-01-29T17:42:42Z","2016-02-04T16:11:29Z"
"","2854","minor: maven-compiler-plugin is updated to 3.5","","closed","","romani","2016-01-27T19:48:39Z","2016-01-27T21:01:47Z"
"","2853","minor: jgit is updated to 4.2.0.201601211800-r","","closed","","romani","2016-01-27T19:48:28Z","2016-01-27T21:01:33Z"
"","2851","Issue #2815: change 'dependencies' section on circleCI","","closed","","Vladlis","2016-01-26T17:33:06Z","2016-01-31T11:34:47Z"
"","2850","Issue #2815: change 'dependencies' section on circleCI","","closed","","Vladlis","2016-01-26T15:45:44Z","2016-01-26T16:38:01Z"
"","2849","Issue #2815: change mvn command in circleCI cache","","closed","","Vladlis","2016-01-26T11:42:29Z","2016-01-31T11:34:48Z"
"","2835","Issue #2815: setup CircleCI","","closed","","Vladlis","2016-01-19T10:09:29Z","2016-01-21T20:51:13Z"
"","2834","minor: Update EqualsVerifier to 1.7.7","","closed","","mkordas","2016-01-18T21:19:35Z","2016-01-18T21:20:00Z"
"","2826","Issue #2792: Include InterfaceTypeParameterName into Config of Google Style","","closed","","MEZk","2016-01-15T17:36:54Z","2016-01-31T07:11:38Z"
"","2820","minor: Update EqualsVerifier to 1.7.6","","closed","","mkordas","2016-01-12T13:19:41Z","2016-01-12T13:51:56Z"
"","2817","minor: Update Maven Shade Plugin to 2.4.3","","closed","","mkordas","2016-01-11T09:20:13Z","2016-01-12T07:45:33Z"
"","2801","minor: year bump to 2016","","closed","","romani","2016-01-05T00:26:22Z","2016-01-05T01:03:29Z"
"","2790","minor: usage of variable defined version for pmd","","closed","","romani","2015-12-30T17:20:18Z","2015-12-30T17:56:41Z"
"","2789","Issue#2767","","closed","","liscju","2015-12-30T15:25:12Z","2016-01-01T18:26:05Z"
"","2787","spelling: fix typo in AuditEventFormatter class name","","closed","","MEZk","2015-12-29T22:14:56Z","2015-12-31T08:53:18Z"
"","2786","config: version bump for xml-maven-plugin to use skip option in future","","closed","","romani","2015-12-29T22:03:39Z","2015-12-29T22:47:21Z"
"","2782","Issue #2728: JavaNCSSCheck: unknown format type: numero inteiro","","closed","","romani","2015-12-29T16:39:02Z","2015-12-29T22:48:07Z"
"","2776","Issue #2539: Fix RequireThis check false-positive on methods","","closed","","Vladlis","2015-12-26T14:24:57Z","2016-01-12T09:49:46Z"
"","2769","Issue #2661: Enforce LogicConditionNeedOptimizationCheck of sevntu-checkstyle over Checkstyle source code","","closed","","MEZk","2015-12-24T21:29:29Z","2015-12-27T15:39:56Z"
"","2768","Issue #2619: Use Nexus Staging Maven Plugin for release process","","closed","","romani","2015-12-24T17:35:06Z","2015-12-25T00:34:45Z"
"","2764","Issue #461: Antlr4 grammar has been edited to support custom javadoc tags with dots and colons","","closed","","baratali","2015-12-22T12:22:52Z","2015-12-26T02:05:17Z"
"","2761","config: update for system-rules 1.15.1","","closed","","romani","2015-12-21T23:45:21Z","2015-12-22T00:34:11Z"
"","2760","config: update for powermock to 1.6.4","","closed","","romani","2015-12-21T16:13:37Z","2015-12-21T22:50:21Z"
"","2759","config: update for system-rules 1.15.1","","closed","","romani","2015-12-21T16:11:40Z","2015-12-21T23:45:48Z"
"","2758","config: update maven-pmd-plugin to 3.6","","closed","","romani","2015-12-21T16:08:18Z","2015-12-21T22:50:38Z"
"","2756","Pull #2756: Remove unused message","","closed","bug,","Vladlis","2015-12-20T22:18:57Z","2015-12-25T20:42:18Z"
"","2755","Issue  #2631: Optimize JavadocUtils","","closed","","Vladlis","2015-12-20T20:46:42Z","2015-12-25T20:42:20Z"
"","2753","infra: swich appveyor to definig whole task through matrix","","closed","","romani","2015-12-19T20:33:20Z","2015-12-19T21:12:43Z"
"","2752","Issue #2661: Disable AvoidHidingCauseException of sevntu-checkstyle due to the issue","","closed","","MEZk","2015-12-19T16:33:50Z","2015-12-20T22:17:43Z"
"","2751","Issue #2661: Enforce checks of sevntu-checkstyle over Checkstyle source code","","closed","","MEZk","2015-12-19T15:53:22Z","2015-12-20T22:18:51Z"
"","2748","Issue #2239: Extend RequireThis check message","","closed","","Vladlis","2015-12-18T21:25:14Z","2015-12-25T20:40:55Z"
"","2739","Issue #2661: Enforce CustomDeclarationOrder of sevntu-checkstyle over Checkstyle source code","","closed","","MEZk","2015-12-18T18:44:49Z","2015-12-24T19:18:15Z"
"","2737","Infra prepare appveyor for multi tasking2","","closed","","romani","2015-12-18T15:45:10Z","2015-12-19T15:12:43Z"
"","2734","Issue #2688: Fix OneStatementPerLine lambda validation","","closed","","liscju","2015-12-18T11:36:37Z","2016-01-01T19:21:49Z"
"","2725","Issue #2661: Enforce checks of sevntu-checkstyle over Checkstyle source code","","closed","","MEZk","2015-12-16T18:25:26Z","2015-12-18T18:07:47Z"
"","2723","minor: correct release 6.13 notes messages","","closed","","MEZk","2015-12-15T22:19:15Z","2015-12-16T18:00:22Z"
"","2722","Issue #2661: Configure checkstyle maven plugin to validate only 'src'  folder","","closed","","MEZk","2015-12-15T22:06:02Z","2015-12-16T18:00:25Z"
"","2721","Issue #2661: Enforce UselessSuperCtorCallCheck of sevntu-checkstyle over Checkstyle source code","","closed","","MEZk","2015-12-15T19:27:55Z","2015-12-16T18:00:27Z"
"","2696","Issue #2661: Enforce StaticMethodCandidateCheck of sevntu-checkstyle over Checkstyle source code","","closed","","MEZk","2015-12-14T18:35:37Z","2015-12-16T18:01:09Z"
"","2695","Issue #2694: Fixing AbbreviationAsWordInName incorrectly reports constants in annotations","","closed","","athielke","2015-12-14T15:00:28Z","2015-12-14T17:48:12Z"
"","2690","conf: update guava version to 19.0","","closed","","romani","2015-12-12T02:00:29Z","2015-12-13T00:06:08Z"
"","2685","infra: releasenotes build","","closed","","romani","2015-12-10T00:01:19Z","2015-12-10T14:22:10Z"
"","2683","Correct xdoc","","closed","","MEZk","2015-12-09T17:57:14Z","2015-12-09T19:52:48Z"
"","2682","Issue #2505: Add ENUM_CONSTANT_DEF support to MethodParamPad","","closed","","MEZk","2015-12-08T20:44:38Z","2015-12-16T18:01:15Z"
"","2676","Issue #2609: Drop abstract class and interface in gui package","","closed","","Vladlis","2015-12-08T06:36:06Z","2015-12-09T18:19:29Z"
"","2673","Issue #2507: Add example to DescendantToken xdoc for catching ASSIGN under EXPR token","","closed","","MEZk","2015-12-07T21:43:58Z","2015-12-16T18:01:16Z"
"","2671","Pull #2671: Reorganize token sets in UncommentedMain","","closed","miscellaneous,","Vladlis","2015-12-07T19:14:45Z","2015-12-09T23:46:30Z"
"","2670","Issue #2658: Repair verification of expected warnings in ITs","","closed","","Vladlis","2015-12-06T22:36:32Z","2015-12-07T19:06:05Z"
"","2669","Update configuration for XXXXName Checks at checkstyle_checks.xml","","closed","","MEZk","2015-12-06T19:15:49Z","2015-12-16T18:01:19Z"
"","2668","Fix UncommentedMain false-negatives on methods with varargs","","closed","","Vladlis","2015-12-06T08:34:31Z","2015-12-06T16:05:39Z"
"","2667","Issue #2659: looks like travis_wait does not work any more","","closed","","romani","2015-12-06T00:24:26Z","2015-12-06T00:49:35Z"
"","2660","Issue #2405: FinalLocalVariable false-positive in SWITCH","","closed","","Bhavik3","2015-12-04T08:08:58Z","2015-12-27T04:29:58Z"
"","2657","Issue #2603: add allowEmptyLambda parameter to WhitespaceAroundCheck","","closed","","liscju","2015-12-03T20:42:44Z","2015-12-09T13:40:37Z"
"","2655","Issue#2633 Fix GenericWhitespace to not trigger error when it ends line","","closed","","liscju","2015-12-02T10:51:15Z","2015-12-03T13:35:36Z"
"","2653","doc: extending documentation on how to report issue","","closed","","romani","2015-12-01T15:07:03Z","2015-12-03T14:19:55Z"
"","2650","minor: build-helper-maven-plugin version bump to 1.10","","closed","","romani","2015-11-27T06:25:32Z","2015-12-10T16:20:14Z"
"","2643","Issue #2642: ParseTreeBuilder was re-generated to have readable variable names","","closed","","baratali","2015-11-22T13:09:39Z","2015-12-03T02:35:38Z"
"","2635","Issue #2080: Exclude integration test resources from IDEA analysis","","closed","","mkordas","2015-11-20T22:36:23Z","2015-11-21T02:38:33Z"
"","2628","Issue #2608: Drag and drop has been removed from gui code.","","closed","","sabaka","2015-11-18T22:14:05Z","2015-11-23T21:36:05Z"
"","2607","Pull #2607: Update JGit to 4.1.1.201511131810-r","","closed","miscellaneous,","mkordas","2015-11-16T21:41:46Z","2015-11-19T22:57:28Z"
"","2606","Issue #2344: Fix typos and grammar on Report Issue page","","closed","","mkordas","2015-11-16T21:40:31Z","2015-11-16T22:47:34Z"
"","2605","Pull #2605: Make methods private in RequireThisCheck","","closed","miscellaneous,","Vladlis","2015-11-16T07:02:09Z","2015-12-05T16:37:09Z"
"","2602","Issue #2590: Correct regexp for validation of commit message to disallow period","","closed","","MEZk","2015-11-14T08:42:41Z","2015-11-17T16:24:41Z"
"","2592","Issue #2549: Remove parameters validation from LocalVariableName","","closed","","MEZk","2015-11-12T19:49:20Z","2015-12-06T17:38:33Z"
"","2591","doc: Correct xdoc/javadoc for ParameterNameCheck","","closed","","MEZk","2015-11-12T19:08:44Z","2017-09-16T01:03:49Z"
"","2582","Issue #2581: Enforce all annotations to be separate line for Checkstyle","","closed","","mkordas","2015-11-11T22:03:19Z","2015-11-12T13:36:41Z"
"","2576","Issue #2541: Clean up input files to not use forbidden APIs","","closed","","mkordas","2015-11-10T23:12:28Z","2015-11-11T14:08:10Z"
"","2571","infra: substitude hardcoded version with calculated","","closed","","romani","2015-11-10T16:34:19Z","2015-11-13T01:43:34Z"
"","2570","Issue #2516: Create test for checkstyle-X.X-all.jar on Travis","","closed","","romani","2015-11-10T16:28:11Z","2015-11-12T13:31:59Z"
"","2568","Issue #2540: unify it input file names for chapter6programpractice","","closed","","rnveach","2015-11-10T03:56:05Z","2015-11-10T13:53:55Z"
"","2567","Issue #2540: unify it input file names for chapter5naming","","closed","","rnveach","2015-11-10T03:51:43Z","2015-11-10T13:54:02Z"
"","2566","Issue #2540: unify it input file names for chapter4formatting","","closed","","rnveach","2015-11-10T03:43:16Z","2015-11-10T13:54:12Z"
"","2561","Issue #1438: Fix handling finally in FallThroughCheck","","closed","","Vladlis","2015-11-09T09:15:35Z","2015-11-10T11:02:07Z"
"","2552","Issue #2161: unify test input file names for chapter2filebasic","","closed","","rnveach","2015-11-08T01:42:27Z","2015-11-08T15:25:06Z"
"","2548","spelling: fix strange japanese.","","closed","","Nobuyuki-Inaba","2015-11-07T07:10:56Z","2015-11-07T14:37:45Z"
"","2542","Issue #2161: removed unnecessary excludes for forbiddenapis","","closed","","rnveach","2015-11-06T14:32:50Z","2015-11-06T15:10:58Z"
"","2538","Issue #2161: unify test input file names","","closed","","rnveach","2015-11-06T03:42:00Z","2015-11-06T12:50:07Z"
"","2537","Issue #2161: unify test input file names","","closed","","rnveach","2015-11-06T03:29:50Z","2015-11-06T12:50:10Z"
"","2528","Issue #2290: Add 'skipOverrideAnnotation' option to skip methods with @Override annotation","","closed","","MEZk","2015-11-04T18:37:36Z","2015-11-05T18:01:11Z"
"","2525","Issue #1031: Improve documentation for CovariantEquals check","","closed","","Vladlis","2015-11-04T16:55:55Z","2015-11-07T07:31:34Z"
"","2524","spelling: fix strange japanese.","","closed","","Nobuyuki-Inaba","2015-11-04T14:41:27Z","2015-11-04T16:18:45Z"
"","2522","Issue #2480: Fix skipping validation for non empty classes when allowEmptyTypes is true","","closed","","MEZk","2015-11-04T11:12:25Z","2015-11-05T18:01:48Z"
"","2520","Issue #2436:  NeedBraces: allow no body loops","","closed","","MEZk","2015-11-03T19:11:07Z","2015-11-05T18:01:30Z"
"","2515","Issue #2346: Extend 'writing checks' section in xdoc","","closed","","Vladlis","2015-11-03T13:29:17Z","2015-11-04T09:23:28Z"
"","2512","Issue #1627: Make 'processJavadoc' property 'true' by default","","closed","","Vladlis","2015-11-03T08:35:28Z","2015-11-04T09:23:30Z"
"","2509","Issue #2451: removed excess hierarchy from IllegalThrowsCheck","","closed","","romani","2015-11-03T01:12:36Z","2015-11-03T13:44:55Z"
"","2496","Issue #2415: IllegalTypeCheck , requiredTokens is set to IMPORT only","","closed","","romani","2015-11-01T00:14:23Z","2015-11-01T13:57:51Z"
"","2491","Issue #2202: Make SuppressWarningsFilter case-insensitive","","closed","","mkordas","2015-10-31T16:17:05Z","2015-10-31T22:15:20Z"
"","2490","Issue #2327: Fix NPE in ModifiedControlVariable on SuppressWarnings","","closed","","mkordas","2015-10-31T15:38:40Z","2015-10-31T22:13:58Z"
"","2489","Issue #2387: Do not recognize '/**/' as valid Javadoc","","closed","","mkordas","2015-10-31T15:17:48Z","2015-10-31T22:12:21Z"
"","2488","Issue #2388: Make JavadocType check customizable by list of tokens","","closed","","mkordas","2015-10-31T14:40:05Z","2015-10-31T22:02:16Z"
"","2487","Issue #2109: CLI should print a file name where exception is happen","","closed","","romani","2015-10-31T14:24:27Z","2015-11-01T13:54:34Z"
"","2486","Issue #2411: Fix false positive in JavadocStyle check on inheritDoc tag","","closed","","mkordas","2015-10-31T14:01:31Z","2015-10-31T22:00:13Z"
"","2481","Issue #2215: Rename tests to match tested class name with Test suffix","","closed","","mkordas","2015-10-30T21:32:36Z","2015-10-31T05:16:42Z"
"","2478","Issue #2474: Fix NPE in EqualsAvoidNull check","","closed","","Vladlis","2015-10-30T16:56:19Z","2015-11-02T14:45:39Z"
"","2476","Issue #2109: CLI should print a flie name where exception is happen","","closed","","romani","2015-10-30T15:25:24Z","2015-10-31T14:24:54Z"
"","2462","doc: Fix incorrect category for item in 6.11 release notes","","closed","","mkordas","2015-10-28T12:20:23Z","2015-10-28T22:50:04Z"
"","2457","minor: Update pom.xml with maven-clean-plugin 3.0.0","","closed","","romani","2015-10-27T00:36:47Z","2015-10-27T13:40:25Z"
"","2456","minor: Update pom.xml with maven-clean-plugin 3.0.0","","closed","","romani","2015-10-27T00:32:42Z","2015-12-10T16:21:02Z"
"","2447","Issue #792: Ignore missing Javadoc for 'serialVersionUID' fields","","closed","","mkordas","2015-10-25T20:57:21Z","2015-10-26T00:42:18Z"
"","2445","Issue #2421: enabling checking on it folder","","closed","","rnveach","2015-10-25T18:31:29Z","2015-10-25T19:23:07Z"
"","2444","Issue #2421: enabling checking on it folder","","closed","","rnveach","2015-10-25T18:13:01Z","2015-10-25T18:27:59Z"
"","2438","Issue #2433: Exclude lines with imports in LineLength check","","closed","","mkordas","2015-10-24T21:36:57Z","2015-10-24T23:13:16Z"
"","2432","Issue #2431: LeftCurly: add Anonymous class to allowed tokens","","closed","","romani","2015-10-24T12:27:32Z","2015-10-24T13:03:28Z"
"","2430","Issue #2421: enabled final local variable for test folder","","closed","","rnveach","2015-10-24T04:18:58Z","2015-10-24T22:38:03Z"
"","2417","minor: Fix indentation checks in inner annotations.","","closed","incomplete,","jakubadamek","2015-10-22T08:43:11Z","2015-12-14T21:35:47Z"
"","2402","Issue #2161: unify test input locations for java8 package","","closed","","rnveach","2015-10-20T18:38:36Z","2015-10-22T13:12:44Z"
"","2401","Issue #2161: unify test input locations for grammars package","","closed","","rnveach","2015-10-20T18:23:35Z","2015-10-22T13:12:46Z"
"","2397","Issue #2161: unify test input locations for filters package","","closed","","rnveach","2015-10-20T15:02:48Z","2015-10-20T17:34:30Z"
"","2395","Fix indentation in inner annotations","","closed","","jakubadamek","2015-10-20T13:03:31Z","2015-10-22T08:45:45Z"
"","2393","Issue #2161: unify test input locations for doclets package","","closed","","rnveach","2015-10-20T02:15:50Z","2015-10-20T11:03:54Z"
"","2390","Issue #2161: unify test input locations for api package","","closed","","rnveach","2015-10-19T21:29:00Z","2015-10-20T00:48:07Z"
"","2389","Issue #2161: unify test input locations for checks package","","closed","","rnveach","2015-10-19T21:19:37Z","2015-10-20T11:03:46Z"
"","2386","Issue #2161: unify test input locations for coding package","","closed","","rnveach","2015-10-19T13:04:11Z","2015-10-19T20:55:58Z"
"","2378","Issue #957: Decrease visibility of package-private methods","","closed","","mkordas","2015-10-17T21:53:55Z","2015-10-18T13:04:54Z"
"","2377","Issue #2080: Fix typos in code","","closed","","mkordas","2015-10-17T21:44:51Z","2015-10-18T13:04:09Z"
"","2371","Issue #2161: unify test input locations for design package","","closed","","rnveach","2015-10-17T15:29:54Z","2015-10-18T13:43:54Z"
"","2369","Issue #2161: unify test input locations for coding package","","closed","","rnveach","2015-10-17T03:30:50Z","2015-10-17T14:08:06Z"
"","2368","Issue #2161: unify test input locations for coding package","","closed","","rnveach","2015-10-17T02:53:24Z","2015-10-17T14:05:17Z"
"","2366","Issue #2080: Fix typos in code","","closed","","mkordas","2015-10-16T22:58:13Z","2015-10-16T23:37:27Z"
"","2363","minor: refactoring to minimize scope of variables","","closed","","romani","2015-10-16T15:09:52Z","2015-10-16T16:01:47Z"
"","2360","Issue #2161: unify test input locations for whitespace package","","closed","","rnveach","2015-10-16T01:33:08Z","2015-10-16T22:18:48Z"
"","2359","Issue #2161: unify test input locations for sizes package","","closed","","rnveach","2015-10-16T00:27:25Z","2015-10-16T22:18:49Z"
"","2358","Issue #2161: unify test input locations for naming package","","closed","","rnveach","2015-10-16T00:04:52Z","2015-10-16T22:18:51Z"
"","2352","Pull #2352: Change description and link to Codacy","","closed","","mkordas","2015-10-14T21:37:19Z","2015-10-14T22:35:04Z"
"","2351","Issue #2161: unify test input locations for javadoc package","","closed","","rnveach","2015-10-14T21:32:55Z","2015-10-16T22:18:53Z"
"","2350","Pull #2350: Update Maven Assembly Plugin to 2.6","","closed","","mkordas","2015-10-14T21:31:08Z","2015-10-14T22:33:46Z"
"","2343","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-12T16:47:54Z","2015-10-14T09:05:30Z"
"","2342","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-12T16:22:44Z","2015-10-14T09:05:33Z"
"","2341","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-12T16:12:15Z","2015-10-14T09:05:33Z"
"","2340","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-12T16:09:33Z","2015-10-14T09:05:37Z"
"","2339","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-12T16:06:22Z","2015-10-14T09:05:38Z"
"","2338","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-12T16:04:30Z","2015-10-14T09:05:38Z"
"","2337","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-12T16:01:46Z","2015-10-14T09:05:39Z"
"","2335","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-12T15:48:55Z","2015-10-14T09:05:50Z"
"","2334","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-12T15:44:33Z","2015-10-14T09:05:51Z"
"","2333","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-12T15:39:40Z","2015-10-14T09:05:30Z"
"","2332","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-12T15:32:43Z","2015-10-14T09:05:51Z"
"","2331","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-12T15:14:06Z","2015-10-14T09:05:53Z"
"","2328","Issue #2326: Fix reusability of JavaDoc checks","","closed","","Vampire","2015-10-12T11:19:41Z","2015-10-19T07:53:44Z"
"","2321","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T05:08:30Z","2015-10-14T09:05:54Z"
"","2320","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T05:05:36Z","2015-10-12T15:06:21Z"
"","2318","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T04:57:56Z","2015-10-12T15:06:24Z"
"","2317","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T04:55:55Z","2015-10-12T15:06:25Z"
"","2316","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T04:50:10Z","2015-10-12T15:06:32Z"
"","2315","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T04:47:31Z","2015-10-12T15:06:32Z"
"","2314","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T04:45:33Z","2015-10-12T15:06:33Z"
"","2313","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T04:43:06Z","2015-10-12T15:06:35Z"
"","2312","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T04:40:52Z","2015-10-12T15:06:36Z"
"","2311","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T04:37:58Z","2015-10-12T15:06:37Z"
"","2310","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T04:35:27Z","2015-10-12T15:06:37Z"
"","2309","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T04:17:22Z","2015-10-12T15:06:38Z"
"","2308","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T04:10:08Z","2015-10-12T15:06:42Z"
"","2306","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T03:50:48Z","2015-10-12T15:06:45Z"
"","2305","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T03:43:23Z","2015-10-12T15:06:47Z"
"","2304","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T03:39:08Z","2015-10-12T15:06:43Z"
"","2303","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T03:25:58Z","2015-10-12T15:06:47Z"
"","2302","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T03:20:59Z","2015-10-12T15:06:48Z"
"","2301","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T03:16:46Z","2015-10-12T15:06:48Z"
"","2300","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T03:12:14Z","2015-10-12T15:06:49Z"
"","2299","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T02:30:30Z","2015-10-12T15:06:55Z"
"","2298","Issue #2161: unify test input locations","","closed","","rnveach","2015-10-11T02:26:09Z","2015-10-12T15:06:51Z"
"","2296","minor: fixed test/resources wrong package location","","closed","","rnveach","2015-10-10T01:29:17Z","2015-10-10T22:34:52Z"
"","2295","minor: fixed test/resources wrong package location","","closed","","rnveach","2015-10-10T01:28:14Z","2015-10-10T22:34:54Z"
"","2294","minor: fixed test/resources wrong package location","","closed","","rnveach","2015-10-10T01:26:57Z","2015-10-10T22:34:51Z"
"","2282","Issue #996: PMD violations PreserveStackTrace","","closed","","romani","2015-10-07T19:44:55Z","2015-10-08T23:07:27Z"
"","2281","Issue #997: PMD violations EmptyMethodInAbstractClassShouldBeAbstract","","closed","","romani","2015-10-07T15:39:22Z","2015-10-08T01:08:04Z"
"","2279","Issue #974: PMD violation ConfusingTernary (partial fix)","","closed","","romani","2015-10-07T13:36:08Z","2015-10-08T01:07:50Z"
"","2278","Issue #974: PMD violation ConfusingTernary (partial fix)","","closed","","romani","2015-10-07T13:09:20Z","2015-10-08T01:07:42Z"
"","2277","Issue #974: PMD violation ConfusingTernary (partial fix)","","closed","","romani","2015-10-07T12:58:11Z","2015-10-08T01:07:35Z"
"","2274","Issue #2271: Remove underscores from method names","","closed","","mkordas","2015-10-06T19:13:27Z","2015-10-06T20:10:34Z"
"","2272","Issue #2271: Replace negated assertTrue with assertFalse","","closed","","mkordas","2015-10-05T20:24:08Z","2015-10-05T21:45:19Z"
"","2265","Issue #2243: Fix missing code coverage","","closed","","romani","2015-10-04T05:19:53Z","2015-10-05T18:52:57Z"
"","2264","Issue #2243: Fix missing code coverage","","closed","","romani","2015-10-04T05:06:01Z","2015-10-04T05:16:16Z"
"","2263","Issue #2260: Make ConfigurationLoader.loadConfiguration public","","closed","","mkordas","2015-10-03T21:50:17Z","2015-10-03T23:40:08Z"
"","2257","Issue #2243: Fix missing code coverage","","closed","","mkordas","2015-10-02T19:23:30Z","2017-07-18T22:06:17Z"
"","2255","minor: Refactoring. Add helper method. Discussed in #2232","","closed","","ivanov-alex","2015-10-02T15:28:47Z","2015-10-03T19:09:29Z"
"","2253","Issue #2245: Fix release failure due to unknown Javadoc tag","","closed","","mkordas","2015-10-01T21:40:29Z","2015-10-01T23:38:12Z"
"","2249","Issue #1290: Coverage has been increased to 100% in AbstractDeclarationCollector.","","closed","","sabaka","2015-09-29T21:47:37Z","2015-09-30T13:45:05Z"
"","2246","Pull #2246: Update JGit to 4.0.2.201509141540-r","","closed","","mkordas","2015-09-28T16:04:21Z","2015-09-28T19:33:05Z"
"","2244","doc: Update comment in google_checks.xml","","closed","","mkordas","2015-09-27T21:10:10Z","2015-12-09T03:18:17Z"
"","2241","Issue #2237: Add basic thread-safety to Javadoc checks","","closed","","mkordas","2015-09-25T22:14:01Z","2015-09-26T22:10:02Z"
"","2238","Issue #2169: Update HTML documentation to describe all options for all checks","","closed","","MEZk","2015-09-25T16:08:08Z","2015-10-06T07:20:21Z"
"","2235","Issue #2080: Fix typos in code","","closed","","mkordas","2015-09-24T22:11:02Z","2015-09-27T20:48:34Z"
"","2232","Issue#2231: restore 'url' option for ImportControl","","closed","","ivanov-alex","2015-09-24T15:50:15Z","2015-10-02T13:52:40Z"
"","2222","Issue #2080: Fix typos in code","","closed","","mkordas","2015-09-21T22:15:54Z","2015-09-21T23:59:17Z"
"","2214","Issue #2213: Print missing cause of exception to console on error","","closed","","mkordas","2015-09-19T22:33:03Z","2015-09-20T12:49:33Z"
"","2212","Issue #2203: Fix RedundantModifier check at final classes in interfaces","","closed","","mkordas","2015-09-19T22:01:17Z","2015-09-20T12:50:26Z"
"","2208","Issue #2205: Fix not working excludeScope in JavadocMethod check","","closed","","mkordas","2015-09-18T22:50:25Z","2015-09-18T23:21:34Z"
"","2207","Issue #2080: Fix typos in code","","closed","","mkordas","2015-09-18T22:02:09Z","2015-09-20T13:02:49Z"
"","2206","Issue #2080: Fix AbstractClassWithoutAbstractMethods rule violations","","closed","","mkordas","2015-09-18T21:21:08Z","2015-09-18T21:59:39Z"
"","2197","Issue #1290: ClassResolver coverage has been increased to 100%.","","closed","","sabaka","2015-09-17T00:35:12Z","2015-09-19T22:01:00Z"
"","2194","added a lot of testing stuff","","closed","incomplete,","m-mikula","2015-09-16T17:51:59Z","2015-11-11T20:35:43Z"
"","2192","Issue #2108: Anchor naming checks in google_style.xml","","closed","","Vladlis","2015-09-16T02:33:53Z","2015-09-16T11:52:21Z"
"","2190","Issue #2074: Correct AtclauseOrder IT","","closed","","Vladlis","2015-09-15T21:28:30Z","2015-09-16T02:16:21Z"
"","2181","Issue #961: Remove already fixed exclusion from PMD configuration","","closed","","mkordas","2015-09-14T21:10:40Z","2015-09-15T14:03:17Z"
"","2177","Issue #2166: Add 'requiredTranslations' option to Translation check","","closed","approved,","MEZk","2015-09-14T08:52:45Z","2015-09-26T22:56:19Z"
"","2172","Issue #2160: Add information about static analysis tools to README.md","","closed","","mkordas","2015-09-12T21:01:12Z","2015-09-14T01:36:12Z"
"","2170","Issue #2112: Fix IllegalStateException in JavadocTypeCheck","","closed","","Vladlis","2015-09-12T16:01:21Z","2015-09-16T02:18:07Z"
"","2165","Issue #2160: Configure compiler to use Error Prone for non-input sources","","closed","","mkordas","2015-09-12T05:17:29Z","2015-09-12T06:01:11Z"
"","2164","Issue #2080: Fix typos in code","","closed","","mkordas","2015-09-11T21:49:03Z","2015-09-11T23:33:02Z"
"","2162","Issue #2161: Unify naming files with test inputs","","closed","","mkordas","2015-09-11T20:52:43Z","2015-09-11T23:30:59Z"
"","2158","Issue #2126: Improve code coverage for TokenTypesDoclet","","closed","","Vladlis","2015-09-11T19:14:30Z","2015-09-16T04:00:15Z"
"","2155","Issue #46: blocks of code should not be duplicated","","closed","","sabaka","2015-09-10T23:48:00Z","2015-09-11T00:39:32Z"
"","2154","infra: Add -e switch to display stack trace of the errors in AppVeyor","","closed","","mkordas","2015-09-10T21:26:15Z","2015-09-11T15:24:15Z"
"","2153","Issue #2130: Fix ""deprecation"" compiler warnings in input files","","closed","","mkordas","2015-09-10T20:50:28Z","2015-09-11T00:12:54Z"
"","2152","Issue #2130: Fix ""rawtypes"" compiler warnings in input files","","closed","","mkordas","2015-09-10T19:21:42Z","2015-09-10T20:26:08Z"
"","2149","Issue #2130: Fix unchecked compiler warnings in input files","","closed","","mkordas","2015-09-09T22:02:20Z","2015-09-09T22:59:20Z"
"","2147","Issue #606: Extended Eclipse user guide for newbies of Checkstyle.","","closed","","MEZk","2015-09-09T12:46:00Z","2015-09-09T19:29:06Z"
"","2146","Issue #759: Create wide message for CheckstyleException in PackageObjectFactory.","","closed","","MEZk","2015-09-09T10:14:13Z","2015-09-12T10:25:01Z"
"","2138","Issue #2135: Fix exception at NeedBraces check in enhanced for loops","","closed","","mkordas","2015-09-07T21:12:15Z","2015-09-08T23:34:39Z"
"","2123","Issue #2092: Corrected xdoc for TranslationCheck.","","closed","","MEZk","2015-09-05T17:57:38Z","2015-09-07T16:37:23Z"
"","2121","Issue #2092: Activated TranslationCheck in checkstyle_checks.xml.","","closed","","MEZk","2015-09-05T13:02:51Z","2015-09-07T16:37:31Z"
"","2119","Issue #2094: fix StringIndexOutOfBoundsException","","closed","","Vladlis","2015-09-05T09:56:46Z","2015-09-07T09:20:37Z"
"","2117","Issue #2106: Fix Javadoc generation failure after addition of new tag","","closed","","mkordas","2015-09-04T23:11:44Z","2015-09-04T23:30:55Z"
"","2115","Issue #2054: Add Codacy badge to main page","","closed","","mkordas","2015-09-04T21:01:53Z","2015-09-14T19:51:12Z"
"","2099","Issue #2080: Enable AbstractClassNamingConvention inspection","","closed","","mkordas","2015-09-03T21:31:26Z","2015-09-04T01:05:13Z"
"","2097","Issue #1555: Fix recently introduced violations","","closed","","mkordas","2015-09-03T20:27:10Z","2015-09-04T01:02:37Z"
"","2093","Issue #2064: ignore classes nested in interfaces or annotations in Final Class Check","","closed","","Vladlis","2015-09-03T17:26:29Z","2015-09-04T12:56:00Z"
"","2087","Added UT which validates that all checks which exist in classpath are referenced in checkstyle_checks.xml.","","closed","","MEZk","2015-09-03T08:37:39Z","2015-09-03T17:45:13Z"
"","2076","Correct SummuryJavadoc IT, #2074","","closed","","Vladlis","2015-09-02T11:49:22Z","2015-09-03T16:33:20Z"
"","2075","Change message in SummaryJavadocCheck, #2062","","closed","","Vladlis","2015-09-02T08:40:26Z","2015-09-03T16:33:06Z"
"","2073","Tidy up in release notes","","closed","","mkordas","2015-09-02T07:38:11Z","2015-09-02T19:55:35Z"
"","2071","Minor: refactoring of TreeWalker to increase readability","","closed","","MEZk","2015-09-01T21:45:54Z","2015-09-02T17:41:18Z"
"","2057","Issue #1555: Apply boxing/unboxing and JUnit rules","","closed","","mkordas","2015-08-31T21:29:04Z","2015-09-01T04:11:26Z"
"","2056","Issue #1243: Eclipse warnings about unused fields have been fixed.","","closed","","baratali","2015-08-31T21:06:30Z","2015-09-01T04:10:46Z"
"","2055","Issue #2054:Fix issues found by Codacy static analysis tool","","closed","","mkordas","2015-08-31T20:35:39Z","2015-09-01T04:10:12Z"
"","2053","Issue #1566: Fixed SummaryJavadocCheck violations.","","closed","","baratali","2015-08-31T19:59:19Z","2015-08-31T20:01:11Z"
"","2047","Issue #1566: Fix for SummaryJavadocCheck's violations (partial)","","closed","","baratali","2015-08-31T18:29:19Z","2015-08-31T18:30:36Z"
"","2045","Issue #1566: Fix for SummaryJavadocCheck's violations (partial)","","closed","","baratali","2015-08-31T17:05:00Z","2015-08-31T17:34:04Z"
"","2044","Issue #1566: Fix for SingleLineJavadoc's violations","","closed","","baratali","2015-08-31T15:50:35Z","2015-08-31T16:00:33Z"
"","2039","Issue #1555: Various code improements","","closed","","mkordas","2015-08-31T03:09:25Z","2015-08-31T05:12:48Z"
"","2036","Fixed: Parse errors can result in a NPE in the SuppressWarningsHolder,  issue #1489","","closed","","MEZk","2015-08-30T22:37:44Z","2015-09-01T17:27:31Z"
"","2030","Fix for CyclomaticComplexityCheck violations","","closed","","baratali","2015-08-30T11:53:55Z","2015-08-30T13:54:29Z"
"","2028","Issue #1555: Fix recently introduced violations","","closed","","mkordas","2015-08-30T09:04:37Z","2015-08-30T13:53:47Z"