"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","6170","minor: converting commments to code to make it clear what is running","…without looking to script file   I simply ignored rule of thumb - no comment in code and code should be read as text . this update will help to understand output and clearly define in output what is running.","closed","","romani","2018-10-26T00:51:10Z","2018-10-26T14:56:34Z"
"","6380","Issue #6379: AnnotationLocation: add support for PACKAGE_DEF, ENUM_CO…","…NSTANT_DEF  Issue #6379   regression tests https://pbludov.github.io/issue-6379/","closed","","pbludov","2019-01-15T20:22:29Z","2019-03-02T08:08:00Z"
"","6310","minor: make ConfigurationLoaderTest#testNonExistentPropertyName jdk11…","… compatible  Issue: #6228   `SAXException` was ""fixed"" in JDK11. Formerly, there was a ""pseudo cause"" exception in the `SAXException`:  http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/jdk/internal/org/xml/sax/SAXException.java#l95 ```     public SAXException (Exception e)     {         super();         this.exception = e;     } ```  Now it is a regular exception as it should be: http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/java.xml/share/classes/org/xml/sax/SAXException.java#l99 ```     public SAXException (Exception e)     {         super(e);     } ``` As the result, the exception message is slightly different: before jdk11: `Property ${nonexistent} has not been set` after jdk11: `com.puppycrawl.tools.checkstyle.api.CheckstyleException: Property ${nonexistent} has not been set`  The exception itself is not changed. It still a `CheckstyleException` wrapped in `SAXException`wrapped in another `CheckstyleException`.  So, the idea is to check the message of the original exception. We don't have to test the jdk. It has already been tested. Instead, we need to make sure that the correct exception is nested inside and check it.","closed","","pbludov","2018-12-23T08:48:49Z","2018-12-23T15:48:54Z"
"","6223","Update shell scripts to split sha to avoid pollution in spelling white list","Workaround to avoid having parts of sha in white list: https://github.com/checkstyle/checkstyle/commit/4cda37a73a4749750768a624732294e534f58550  This is NOT super ideal but better than pollution of whitelist of our spell checker.","open","approved,","romani","2018-11-20T03:04:21Z","2019-02-18T18:14:42Z"
"","6462","Remove PARAMETER_DEF from AnnotationLocation","With the reasoning from #6416:  Quote from @romani: > All that tokens are not related to original idea of Check `Check enforce to locate annotations immediately after documentation block and before target element, annotation should be located on separate line from target element.` ... attention to `documentation block`. Line wrapping that is possible with annotation usage should be covered by some other Check, I am not ready even tell about possible design for new Check .... live/users will show us what might be valuable in such validations.  `PARAMETER_DEF` should not be supported in `AnnotationLocation` check as parameters has no documentation and this Check is mostly for targets with javadocs. If somebody need to validate location of annotation in parameters  - new Check need to be created.  This would also simplify the implementation, because parameters are specially treated anyway, having a single annotation with or without parameters on the same line with the parameter is always allowed though the documentation does not indicate this. This special treatment can also be removed.  If the `PARAMETER_DEF` handling stays, then at least the documentation should be updated to describe the special treatment of parameters for which only a small subset like multiple annotations on the same line are checked.","closed","breaking compatibility,","Vampire","2019-02-23T17:00:54Z","2019-05-11T18:52:09Z"
"","6463","Do not handle local variables for VARIABLE_DEF in AnnotationLocation","With the reasoning from #6416:  Quote from @romani: > All that tokens are not related to original idea of Check `Check enforce to locate annotations immediately after documentation block and before target element, annotation should be located on separate line from target element.` ... attention to `documentation block`. Line wrapping that is possible with annotation usage should be covered by some other Check, I am not ready even tell about possible design for new Check .... live/users will show us what might be valuable in such validations.  `AnnotationLocation` check for `VARIABLE_DEF` should only handle field definitions, but no local variable defintions as they have no documentation.  This would also simplify the implementation, because local variable definitions in for-each loops and for-loop-initializers are specially treated anyway, having a single annotation with or without parameters on the same line with the parameter is always allowed though the documentation does not indicate this. This special treatment can also be removed.  If the local variable defintion handling stays, then at least the documentation should be updated to describe the special treatment of local variable definitions in for-each loops and for-loop-initializers for which only a small subset like multiple annotations on the same line are checked.  Documentation should updated anyway, even if the local variable handling gets removed / local variables handling suppressed, the documentation should state that it is only effective on field definitions, not on local variable definitions.  ATTENTION: If users would like to validate location annotation over local variables , new Check should be created. That will have set of options to required to satisfy requirements, wihtout any conflicts with annotations over declaration elements that might have javadoc.","closed","approved,","Vampire","2019-02-23T17:05:12Z","2019-05-18T22:13:30Z"
"","6219","config: fix wercker CI, see details at #6218","will be reverted in scope of #6218","closed","","romani","2018-11-16T23:39:19Z","2018-11-17T01:19:28Z"
"","6308","Indentation: indentation level is being corrupted in class fields","While running regression for pitest, I have gotten differences that I couldn't reproduce locally on a single file run. I believe one reason is because the [`IndentLevel`](https://github.com/checkstyle/checkstyle/blob/641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java#L49) is being corrupted as we use the same class instance among multiple fields.  [I tried to remove the cache of this field](https://github.com/checkstyle/checkstyle/blob/641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java#L83), but it caused regression to stall for 10 hours on apache ant's `BlockSort.java`.  I rework IndentLevel class to be immutable, and I am seeing regression differences.  From the changes I made, [I believe `ObjectBlockHandler` is the one doing the corruption](https://github.com/rnveach/checkstyle/blob/6893affeac7285afd16f8a389c7d65023d0c327a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ObjectBlockHandler.java#L67-L69). It is modifying another class' fields by calling `addAcceptedIndent` on an `IndentLevel` it didn't create.","closed","miscellaneous,","rnveach","2018-12-22T17:52:35Z","2019-02-01T13:42:54Z"
"","6516","JavadocUtil doesn't recognize Javadocs in certain places","While looking into https://github.com/checkstyle/checkstyle/issues/5411 and verifying the statement I made: > We should have a missing for every place a javadoc is valid.  I made a bare bones check to verify we recognize all valid javadoc placements. InvalidJavadocPositionCheck https://github.com/rnveach/checkstyle/commits/InvalidJavadocPositionCheck ````     public void visitToken(DetailAST ast) {         final String commentContent = JavadocUtil.getBlockCommentContent(ast);          if (JavadocUtil.isJavadocComment(commentContent)) {             if (!JavadocUtil.isCorrectJavadocPosition(ast)) {                 log(ast, ""Invalid Javadoc Position"");             }         }     } ````  I expected no violations from this check on Checkstyle's own sources but I get the following: ```` [ERROR] \src\main\java\com\puppycrawl\tools\checkstyle\api\Configuration.java:32:5: Invalid Javadoc Position [InvalidJavadocPosition] [ERROR] \src\main\java\com\puppycrawl\tools\checkstyle\api\Configuration.java:46:5: Invalid Javadoc Position [InvalidJavadocPosition] [ERROR] \src\main\java\com\puppycrawl\tools\checkstyle\api\DetailNode.java:56:5: Invalid Javadoc Position [InvalidJavadocPosition] [ERROR] \src\main\java\com\puppycrawl\tools\checkstyle\api\TextBlock.java:29:5: Invalid Javadoc Position [InvalidJavadocPosition] ````  It looks like currently Checkstyle doesn't work with javadocs on methods with no modifiers and returns an array.  You can also see an example with: ```` $ cat TestClass.java public class TestClass {     /** Ab */     void method() {}     /** Ab */     String[] method2() { return null; } }  $ cat TestConfig.xml                        $ java -jar checkstyle-8.18-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:2:  tag should be preceded with an empty line. [JavadocParagraph] Audit done. Checkstyle ends with 1 errors. ````  There should be 2 violations as both are methods with the same javadoc.  I am going to run regression to see if there are any other cases.  Let me know if we should open another issue to add this check to Checkstyle. It is pretty simple.","closed","approved,","rnveach","2019-03-06T03:26:36Z","2019-03-16T02:13:20Z"
"","6858","Remove TreeWalker#validateDefaultTokens","While checking source code, I found following method in TreeWalker class -  https://github.com/checkstyle/checkstyle/blob/6bab0788365ba9afb713e14d9f6263f1f60b7aa2/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L277-L293  Looks like this was added as a part of #655  The thing is that this method validates that check's required tokens are subset of default tokens. But this validation is performed on startup of checkstyle and not related with user configuration, since both `getDefaultTokens` and `getRequiredTokens` are hardcoded in the check.  So, if some check, for some reason, violates this requirement, there is no way to launch this check because checkstyle will always fail on startup. Moreover, user can do nothing about it (except removing this check from their config) and this check is useless.  I don't see a reason for such validation on startup, this can be performed by unit tests to forbid such check. As a nice bonus, startup will be a bit faster.","closed","miscellaneous,","strkkk","2019-06-27T13:19:52Z","2019-07-09T04:25:53Z"
"","6041","Problems to run build offline","when you run validation offline  you may run into   ``` [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.868 s [INFO] Finished at: 2018-07-13T16:42:09-07:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.codehaus.mojo:xml-maven-plugin:1.0.2:validate  (default-cli) on project checkstyle: Failed to load schema with public ID null,  system ID http:// maven.apache.org/xsd/decoration-1.0.0.xsd: schema_reference.4:  Failed to read schema document 'null', because 1) could not find the document;  2) the document could not be read; 3) the root element of the document is  not . -> [Help 1] [ERROR]  ```  I do not think we need to cache this xsd in our repo and reference it in our catalog config. workaround is: `mvn verify -Dxml.skip=true`   ========================   Problem to execute checkstyle from maven plugin in when build execution is offline   it is reproducible during `mvn verify` on checkstyle repo: ``` [INFO] --- maven-checkstyle-plugin:3.0.0:check (sevntu-checkstyle-check) @ checkstyle --- [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 01:54 min [INFO] Finished at: 2018-07-13T16:49:23-07:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.0.0:check  (sevntu-checkstyle-check) on project checkstyle: Failed during checkstyle execution:  Failed during checkstyle configuration: unable to parse configuration stream:  Unknown host checkstyle.org -> [Help 1] ```  more detailed log: ``` [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 02:02 min [INFO] Finished at: 2018-07-13T16:53:21-07:00 [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin: 3.0.0:check (sevntu-checkstyle-check) on project checkstyle: Failed during  checkstyle execution: Failed during checkstyle configuration: unable to parse  configuration stream: Unknown host checkstyle.org -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.0.0:check (sevntu-checkstyle-check)  on project checkstyle: Failed during checkstyle execution     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:213)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded. SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute  (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:954)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke  (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke  (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced  (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode  (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.apache.maven.plugin.MojoExecutionException:  Failed during checkstyle execution     at org.apache.maven.plugins.checkstyle.CheckstyleViolationCheckMojo.execute (CheckstyleViolationCheckMojo.java:538)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded. SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute  (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:954)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke  (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced  (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch  (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode  (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main  (Launcher.java:356) Caused by: org.apache.maven.plugins.checkstyle.exec.CheckstyleExecutorException:  Failed during checkstyle configuration     at org.apache.maven.plugins.checkstyle.exec.DefaultCheckstyleExecutor. getConfiguration (DefaultCheckstyleExecutor.java:441)     at org.apache.maven.plugins.checkstyle.exec.DefaultCheckstyleExecutor. executeCheckstyle (DefaultCheckstyleExecutor.java:213)     at org.apache.maven.plugins.checkstyle.CheckstyleViolationCheckMojo. execute (CheckstyleViolationCheckMojo.java:529)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute  (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute  (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute  (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder. buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder. buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded. SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute  (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:954)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke  (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke  (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced  (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch  (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode  (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main  (Launcher.java:356) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException:  unable to parse configuration stream     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration (ConfigurationLoader.java:331)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration (ConfigurationLoader.java:245)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration (ConfigurationLoader.java:220)     at org.apache.maven.plugins.checkstyle.exec.DefaultCheckstyleExecutor. getConfiguration (DefaultCheckstyleExecutor.java:377)     at org.apache.maven.plugins.checkstyle.exec.DefaultCheckstyleExecutor. executeCheckstyle (DefaultCheckstyleExecutor.java:213)     at org.apache.maven.plugins.checkstyle.CheckstyleViolationCheckMojo. execute (CheckstyleViolationCheckMojo.java:529)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded. SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute  (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:954)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke  (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: java.net.UnknownHostException: checkstyle.org     at java.net.AbstractPlainSocketImpl.connect (AbstractPlainSocketImpl.java:184)     at java.net.SocksSocketImpl.connect (SocksSocketImpl.java:392)     at java.net.Socket.connect (Socket.java:589)     at sun.security.ssl.SSLSocketImpl.connect (SSLSocketImpl.java:673)     at sun.security.ssl.BaseSSLSocketImpl.connect (BaseSSLSocketImpl.java:173)     at sun.net.NetworkClient.doConnect (NetworkClient.java:180)     at sun.net.www.http.HttpClient.openServer (HttpClient.java:463)     at sun.net.www.http.HttpClient.openServer (HttpClient.java:558)     at sun.net.www.protocol.https.HttpsClient. (HttpsClient.java:264)     at sun.net.www.protocol.https.HttpsClient.New (HttpsClient.java:367)     at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection. getNewHttpClient (AbstractDelegateHttpsURLConnection.java:191)     at sun.net.www.protocol.http.HttpURLConnection.plainConnect0  (HttpURLConnection.java:1156)     at sun.net.www.protocol.http.HttpURLConnection.plainConnect  (HttpURLConnection.java:1050)     at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection. connect (AbstractDelegateHttpsURLConnection.java:177)     at sun.net.www.protocol.http.HttpURLConnection.getInputStream0  (HttpURLConnection.java:1564)     at sun.net.www.protocol.http.HttpURLConnection.getInputStream  (HttpURLConnection.java:1492)     at sun.net.www.protocol.https.HttpsURLConnectionImpl. getInputStream (HttpsURLConnectionImpl.java:263)     at org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity (Unknown Source)     at org.apache.xerces.impl.XMLEntityManager.startEntity (Unknown Source)     at org.apache.xerces.impl.XMLEntityManager.startDTDEntity (Unknown Source)     at org.apache.xerces.impl.XMLDTDScannerImpl.setInputSource (Unknown Source)     at org.apache.xerces.impl.XMLDocumentScannerImpl$DTDDispatcher.dispatch  (Unknown Source)     at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument (Unknown Source)     at org.apache.xerces.parsers.XML11Configuration.parse (Unknown Source)     at org.apache.xerces.parsers.XML11Configuration.parse (Unknown Source)     at org.apache.xerces.parsers.XMLParser.parse (Unknown Source)     at org.apache.xerces.parsers.AbstractSAXParser.parse (Unknown Source)     at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse (Unknown Source)     at com.puppycrawl.tools.checkstyle.XmlLoader.parseInputSource (XmlLoader.java:98)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.parseInputSource (ConfigurationLoader.java:174)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration (ConfigurationLoader.java:321)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration (ConfigurationLoader.java:245)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration (ConfigurationLoader.java:220)     at org.apache.maven.plugins.checkstyle.exec.DefaultCheckstyleExecutor. getConfiguration (DefaultCheckstyleExecutor.java:377)     at org.apache.maven.plugins.checkstyle.exec.DefaultCheckstyleExecutor. executeCheckstyle (DefaultCheckstyleExecutor.java:213)     at org.apache.maven.plugins.checkstyle.CheckstyleViolationCheckMojo. execute (CheckstyleViolationCheckMojo.java:529)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute  (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute  (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute  (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder. buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder. buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded. SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute  (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:954)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke  (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced  (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch  (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode  (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main  (Launcher.java:356) [ERROR]  [ERROR]  [ERROR] For more information about the errors and possible solutions,  please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException  ```  workaround is: `mvn verify -Dxml.skip=true -Dcheckstyle.skip=true`  But this should be fixed, checkstyle should not go to web for its own resources.   Most meaningful part ``` Caused by: java.net.UnknownHostException: checkstyle.org     at java.net.AbstractPlainSocketImpl.connect (AbstractPlainSocketImpl.java:184)     at java.net.SocksSocketImpl.connect (SocksSocketImpl.java:392)     at java.net.Socket.connect (Socket.java:589)     at sun.security.ssl.SSLSocketImpl.connect (SSLSocketImpl.java:673)     at sun.security.ssl.BaseSSLSocketImpl.connect (BaseSSLSocketImpl.java:173)     at sun.net.NetworkClient.doConnect (NetworkClient.java:180)     at sun.net.www.http.HttpClient.openServer (HttpClient.java:463)     at sun.net.www.http.HttpClient.openServer (HttpClient.java:558)     at sun.net.www.protocol.https.HttpsClient. (HttpsClient.java:264)     at sun.net.www.protocol.https.HttpsClient.New (HttpsClient.java:367)     at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient (AbstractDelegateHttpsURLConnection.java:191)     at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1156)     at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1050)     at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect (AbstractDelegateHttpsURLConnection.java:177)     at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1564)     at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1492)     at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream (HttpsURLConnectionImpl.java:263)     at org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity (Unknown Source)     at org.apache.xerces.impl.XMLEntityManager.startEntity (Unknown Source)     at org.apache.xerces.impl.XMLEntityManager.startDTDEntity (Unknown Source)     at org.apache.xerces.impl.XMLDTDScannerImpl.setInputSource (Unknown Source)     at org.apache.xerces.impl.XMLDocumentScannerImpl$DTDDispatcher.dispatch(Unknown Source)     at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument (Unknown Source)     at org.apache.xerces.parsers.XML11Configuration.parse (Unknown Source)     at org.apache.xerces.parsers.XML11Configuration.parse (Unknown Source)     at org.apache.xerces.parsers.XMLParser.parse (Unknown Source)     at org.apache.xerces.parsers.AbstractSAXParser.parse (Unknown Source)     at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse (Unknown Source)     at com.puppycrawl.tools.checkstyle.XmlLoader.parseInputSource (XmlLoader.java:98)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.parseInputSource (ConfigurationLoader.java:174)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration (ConfigurationLoader.java:321)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration (ConfigurationLoader.java:245)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration (ConfigurationLoader.java:220)     at org.apache.maven.plugins.checkstyle.exec.DefaultCheckstyleExecutor.getConfiguration (DefaultCheckstyleExecutor.java:377)  ```  due to stacktrace - it does not go to our `XmlLoader:resolveEntity(String publicId, String systemId)` where resolution actually happen to internal resource. We need to debug this case .....  Checkstyle execution in maven plugin should work offline if all resources are on local. DTDs should be taken from enbeded resources.   Strange that it works well for execution of checkstyle on classpath.   is it reproducible in CLI ? ....","closed","approved,","romani","2018-07-14T03:23:40Z","2018-08-31T01:03:13Z"
"","6386","CustomImportOrder check broken","When using the google java formatter with the google_checks.xml checkstyle configuration, checkstyle incorrectly flags import statements as being out of order. It appears that the CustomImportOrder module is incorrectly attempting to validate more import groups than are configured.  For example, this import block   ``` package com.example;  import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.JsonDeserializer; import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.annotation.JsonDeserialize; import java.io.IOException; import java.net.URI; import java.time.Instant; import java.time.ZoneId; import java.util.Arrays; import java.util.Objects; import java.util.Optional; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.lang.Nullable; import org.springframework.web.client.HttpStatusCodeException; import org.springframework.web.client.RestTemplate; ```  produces this checkstyle output  ``` [WARN] /home/user1/java-workspace/java-project/src/main/java/com/example/WsClient.java:13: 'java.io.IOException' should be separated from previous import group. [CustomImportOrder] [WARN] /home/user1/java-workspace/java-project/src/main/java/com/example/WsClient.java:20: Import statement for 'org.springframework.http.HttpEntity' is in the wrong order. Should be in the 'THIRD_PARTY_PACKAGE' group, expecting not assigned imports on this line. [CustomImportOrder] [WARN] /home/user1/java-workspace/java-project/src/main/java/com/example/WsClient.java:21: Import statement for 'org.springframework.http.HttpHeaders' is in the wrong order. Should be in the 'THIRD_PARTY_PACKAGE' group, expecting not assigned imports on this line. [CustomImportOrder] [WARN] /home/user1/java-workspace/java-project/src/main/java/com/example/WsClient.java:22: Import statement for 'org.springframework.http.HttpMethod' is in the wrong order. Should be in the 'THIRD_PARTY_PACKAGE' group, expecting not assigned imports on this line. [CustomImportOrder] [WARN] /home/user1/java-workspace/java-project/src/main/java/com/example/WsClient.java:23: Import statement for 'org.springframework.http.HttpStatus' is in the wrong order. Should be in the 'THIRD_PARTY_PACKAGE' group, expecting not assigned imports on this line. [CustomImportOrder] [WARN] /home/user1/java-workspace/java-project/src/main/java/com/example/WsClient.java:24: Import statement for 'org.springframework.http.MediaType' is in the wrong order. Should be in the 'THIRD_PARTY_PACKAGE' group, expecting not assigned imports on this line. [CustomImportOrder] [WARN] /home/user1/java-workspace/java-project/src/main/java/com/example/WsClient.java:25: Import statement for 'org.springframework.http.ResponseEntity' is in the wrong order. Should be in the 'THIRD_PARTY_PACKAGE' group, expecting not assigned imports on this line. [CustomImportOrder] [WARN] /home/user1/java-workspace/java-project/src/main/java/com/example/WsClient.java:26: Import statement for 'org.springframework.lang.Nullable' is in the wrong order. Should be in the 'THIRD_PARTY_PACKAGE' group, expecting not assigned imports on this line. [CustomImportOrder] [WARN] /home/user1/java-workspace/java-project/src/main/java/com/example/WsClient.java:27: Import statement for 'org.springframework.web.client.HttpStatusCodeException' is in the wrong order. Should be in the 'THIRD_PARTY_PACKAGE' group, expecting not assigned imports on this line. [CustomImportOrder] ```  It looks like the CustomImportOrder module is picking up the java.* imports as the STANDARD_JAVA_PACKAGE group, even though only STATIC and THIRD_PARTY_PACKAGE are configured in google_checks.xml. Packages imported after the java.* packages are then incorrectly flagged as being in the wrong group.","closed","","ringmaster217","2019-01-17T22:21:35Z","2019-01-18T01:38:52Z"
"","6607","config: ignore whitespace for pitest ignorelist","When running pitest on Windows, the diff shows all lines changed when there are ignores configured due to difference in line endings. With this change, -w is used for the diff so whitespaces are ignored.","closed","","Vampire","2019-03-25T04:21:26Z","2019-03-26T01:08:17Z"
"","6269","Pitest: add checks for missing code coverage","When reviewing reports for pitest I noticed that even though we set 100% code coverage in pitest, there are ways for it to not fail the build when running pitest because of the way it handles rounding. See https://github.com/hcoles/pitest/issues/140  Example: http://rveach.no-ip.org/checkstyle/regression/pitest-reports/18/javadoc/com.puppycrawl.tools.checkstyle.checks.javadoc/index.html `JavadocTag` has 95% code coverage, package says it has 100% and [POM has 100% required set](https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L2080) but the build is not failing.  We should add support to `pitest.sh` to look for and print errors on `NO_COVERAGE` in the report. We enforce 100% code coverage with Jacoco. There shouldn't be any reason pitests are missing code coverage.","closed","","rnveach","2018-12-10T19:43:52Z","2018-12-13T03:27:45Z"
"","6419","can't disable checkstyle","When I right-click the project in Eclipse 2018-09 (I use Checkstyle Plugin 8.12), then Checkstyle -> **Deactivate Checkstyle**, nothing happens. I still see violations. I tried re-opening file, whole project, and also cleaning it - without success.","closed","","noelo-cohelo","2019-02-11T12:24:48Z","2019-02-11T12:55:11Z"
"","6181","Suppress doesn't appear to work with id","When I have a suppression config like this: ```xml      ``` Checkstyle fails with the following error: ``` Attribute ""id"" must be declared for element type ""suppress"". ``` If I remove the ""checks"" property, then ``` Attribute ""checks"" is required and must be specified for element type ""suppress"". ```  It doesn't seem to work as described here: http://checkstyle.sourceforge.net/config_filters.html#SuppressionFilter","closed","","leventov","2018-10-30T15:18:57Z","2018-10-31T23:13:03Z"
"","6982","pitest: increase mutation coverage for pitest-main profile to 100%","We should increase coverage for pitest-main profile up to 100%. This issue is a subtask of #3708  https://github.com/checkstyle/checkstyle/blob/master/.ci/pitest.sh#L70-L78","closed","miscellaneous,","romani","2019-08-15T20:59:41Z","2019-08-21T13:31:29Z"
"","6658","pitest: increase mutation coverage for pitest-imports profile to 100%","We should increase coverage for pitest-imports profile up to 100%. This issue is a subtask of #3708  https://github.com/checkstyle/checkstyle/blob/d68d8c2d5d4037746cbe61e5d973a12e0ec886a4/.ci/pitest.sh#L106-L136  -------","closed","has bounty,","rnveach","2019-04-13T16:57:50Z","2022-08-01T03:50:22Z"
"","6659","pitest: increase mutation coverage for pitest-filters profile to 100%","We should increase coverage for pitest-filters profile up to 100%. This issue is a subtask of #3708  https://github.com/checkstyle/checkstyle/blob/d68d8c2d5d4037746cbe61e5d973a12e0ec886a4/.ci/pitest.sh#L68-L94   -------","closed","has bounty,","rnveach","2019-04-13T16:59:30Z","2019-07-16T21:52:50Z"
"","6635","pitest: increase mutation coverage for api profile to 100%","We should increase coverage for pitest-api profile up to 100% and remove the extra tests outside the api package needed. In support of https://github.com/checkstyle/checkstyle/issues/3417 . (see https://github.com/checkstyle/checkstyle/pull/6629#issuecomment-479694855 )","closed","miscellaneous,","rnveach","2019-04-05T01:18:20Z","2019-04-05T16:31:27Z"
"","6295","pitest: increase mutation coverage for javadoc profile to 100%","We should increase coverage for javadoc profile up to 100%. This issue is a subtask of #3708  -------","closed","has bounty,","rnveach","2018-12-17T01:39:15Z","2022-07-02T04:19:53Z"
"","6294","pitest: increase mutation coverage for indentation profile to 100%","We should increase coverage for indentation profile up to 100%. This issue is a subtask of #3708  -------","open","has bounty,","rnveach","2018-12-17T01:38:39Z","2021-04-30T19:32:33Z"
"","6293","pitest: increase mutation coverage for blocks profile to 100%","We should increase coverage for blocks profile up to 100%. This issue is a subtask of #3708","closed","miscellaneous,","rnveach","2018-12-17T01:37:27Z","2018-12-18T05:44:58Z"
"","6771","Use violation term as much as possible","We need to remove all usages of error  word ( with only few exceptions) from our documentation.  Example https://checkstyle.org/config_metrics.html#BooleanExpressionComplexity_Error_Messages  We need to use term violation, because error and warn is severity of violation. https://checkstyle.org/property_types.html#severity","closed","miscellaneous,","romani","2019-05-22T12:11:01Z","2019-10-12T22:34:53Z"
"","6193","LineLength violations not appearing in generated suppression.xml","We have been using checkstyle for a while. We wanted to add some new checks so we created strict_checkstyle.xml. Running this will find lots of new errors(obviously). I want to create a baseline so we don't have to fix all of these at once:  ``` $ java -jar checkstyle-8.14-all.jar -c config/strict_checkstyle.xml -gxs app/src/ > config/app_checkstyle_suppressions.xml ```  This nicely generates an xml file with ~1000 suppressions. I then add this `app_checkstyle_suppression.xml` to our `strict_checkstyle.xml` config file:  ```                                                        ... ```   I then run the checks again:  ``` $ java -jar checkstyle-8.14-all.jar -c config/strict_checkstyle.xml app/src/ ``` And I see ~150 errors still. All of them are:  `[ERROR] /Users/example.MyClass.java:41: Line is longer than 120 characters (found 122). [LineLength]`  If I look inside the `app_checkstyle_suppressions.xml` file I see there isn't a single suppression for `LineLength`.   I would expect the generated suppression file to include `LineLength` violations.","closed","","tir38","2018-11-03T02:41:54Z","2018-11-03T03:52:40Z"
"","6017","Cache should be invalidated when source are validated by new version of checkstyle","we forgot to put in cache version of Checkstyle for each file - so now we loose a lot of new vioaltions when new version of Check is running and it is expected to find more problems  I will put CLI prove a bit later.","open","approved,","romani","2018-07-09T01:18:30Z","2019-02-27T13:17:41Z"
"","6336","provide javadocs for Support clases in tests","violations from JvadocMethod. ``` src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java:63:5: Missing a Javadoc comment. src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java:112:5: Missing a Javadoc comment. src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java:118:5: Missing a Javadoc comment. src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java:122:5: Missing a Javadoc comment. src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java:150:5: Missing a Javadoc comment. src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java:160:5: Missing a Javadoc comment. src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java:170:5: Missing a Javadoc comment. src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java:183:5: Missing a Javadoc comment. src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java:204:5: Missing a Javadoc comment.  src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java:399:5: Missing a Javadoc comment.  src/it/java/org/checkstyle/suppressionxpathfilter/AbstractXpathTestSupport.java:59:5: Missing a Javadoc comment. src/it/java/org/checkstyle/suppressionxpathfilter/AbstractXpathTestSupport.java:68:5: Missing a Javadoc comment. src/it/java/org/checkstyle/suppressionxpathfilter/AbstractXpathTestSupport.java:82:5: Missing a Javadoc comment. src/it/java/org/checkstyle/suppressionxpathfilter/AbstractXpathTestSupport.java:88:5: Missing a Javadoc comment. src/it/java/org/checkstyle/suppressionxpathfilter/AbstractXpathTestSupport.java:115:5: Missing a Javadoc comment. src/it/java/org/checkstyle/suppressionxpathfilter/AbstractXpathTestSupport.java:125:5: Missing a Javadoc comment. src/it/java/org/checkstyle/suppressionxpathfilter/AbstractXpathTestSupport.java:176:9: Missing a Javadoc comment.  src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java:90:5: Missing a Javadoc comment. src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java:356:5: Missing a Javadoc comment. src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java:431:5: Missing a Javadoc comment. src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java:436:5: Missing a Javadoc comment.  src/test/java/com/puppycrawl/tools/checkstyle/AbstractPathTestSupport.java:54:5: Missing a Javadoc comment.  src/test/java/com/puppycrawl/tools/checkstyle/AbstractXmlTestSupport.java:38:5: Missing a Javadoc comment. src/test/java/com/puppycrawl/tools/checkstyle/AbstractXmlTestSupport.java:45:5: Missing a Javadoc comment. src/test/java/com/puppycrawl/tools/checkstyle/AbstractXmlTestSupport.java:50:5: Missing a Javadoc comment. src/test/java/com/puppycrawl/tools/checkstyle/AbstractXmlTestSupport.java:70:5: Missing a Javadoc comment. src/test/java/com/puppycrawl/tools/checkstyle/AbstractXmlTestSupport.java:121:5: Missing a Javadoc comment. src/test/java/com/puppycrawl/tools/checkstyle/AbstractXmlTestSupport.java:143:5: Missing a Javadoc comment. src/test/java/com/puppycrawl/tools/checkstyle/AbstractXmlTestSupport.java:160:5: Missing a Javadoc comment.  ```","closed","miscellaneous,","romani","2018-12-31T02:49:42Z","2021-09-12T22:30:34Z"
"","6378","minor: bump year to 2019 in headers","verified as  ``` $ git diff | grep -Eh ""^\+""  | grep -v ""+++ b"" | sort | uniq +// Copyright (C) 2001-2019 the original author or authors. ```","closed","","romani","2019-01-14T21:40:03Z","2019-01-15T13:46:11Z"
"","6698","config: upgrade powermock to 2.0.2","upgrade.","closed","","rnveach","2019-04-27T11:52:21Z","2019-05-01T12:28:50Z"
"","6568","updating simple-binary-encoding regression","Trying to upgrade SBE.","closed","","rnveach","2019-03-13T21:53:00Z","2019-03-14T11:04:43Z"
"","6191","investigate localization service  crowdin.com","try to register at https://crowdin.com/ to help localize chekcstyle more.  make badge like -[![Crowdin](https://d322cqt584bo4o.cloudfront.net/snipe-it/localized.svg)](https://crowdin.com/project/snipe-it)  --- Checkstyle ([settings](https://crowdin.com/project/checkstyle/settings)): [![Crowdin](https://badges.crowdin.net/checkstyle/localized.svg)](https://crowdin.com/project/checkstyle)","open","miscellaneous,","romani","2018-11-02T18:19:53Z","2021-11-16T14:23:38Z"
"","6687","set up JDK12 buid","Travis and appveyor support Java 12 so we should set up a build with it.  maven-enforcer-plugin has to be updated to 3.0.0 . `Whitebox.setInternalState` doesn't support modifying final fields, so these tests have to be excluded.  Oracle JDK 12 doesn't seem supported in travis.","closed","miscellaneous,","rnveach","2019-04-21T00:26:06Z","2019-04-26T17:38:33Z"
"","6367","Fix pitest coverage for RightCurly","TODO: revert commit - https://github.com/checkstyle/checkstyle/commit/3316f0b1a179c3ecd2ca3c21d9a81129282ba630 and https://github.com/checkstyle/checkstyle/commit/63d9db3900848b3d662383aefb5c336978f549a0  fix pitest coverage to be 100%, and kill all mutations, RightCurly should have no survived mutations.  discussion of coverage issues: https://github.com/checkstyle/checkstyle/pull/4247#pullrequestreview-189430650  -------","closed","has bounty,","romani","2019-01-10T20:19:24Z","2019-10-04T11:53:26Z"
"","6742","Issue template should clarify failure to follow template will lead to issue being closed","Title says it all.  It should be clear that the template is mandatory and not just a suggestion, and failing to follow it, will cause the ticket to be ignored and closed.  https://github.com/checkstyle/checkstyle/blob/master/.github/ISSUE_TEMPLATE.md","closed","miscellaneous,","aaime","2019-05-11T09:43:08Z","2019-05-11T15:26:48Z"
"","6984","Issue #6207: Track remaing checks to do in xpath IT","This unit test aims to ~~provide validation~~ keep track of remaining check on XPath related integration itests (IT). This idea is proposed by @romani in https://github.com/checkstyle/checkstyle/issues/6207#issuecomment-521500309 :  > it would be awesome is you create UT with list like - https://github.com/checkstyle/checkstyle/pull/6969/files#diff-67a0806621fe751520ab842060ba14fcL106 , see whole change of #6969 it show how @pbludov improve step by step , but it is very enforced validation on each change, new Checks already come in better form in first commit. so list of what is not done will be self controlled by UTs and nobody will forget to add such tests during new Check is created. We recently missed such tests creation ... .","closed","","mincong-h","2019-08-16T12:40:32Z","2019-08-19T21:29:47Z"
"","6801","split it module test support between different configurations","This should fix the issue identified at https://github.com/checkstyle/checkstyle/pull/6718#issuecomment-495584989 . When attempting to add an IT test for sun, the code falsely said that the check didn't appear in the config. I later found out it was searching the google config for the check I had only added to the sun config. The IT test support was only looking at the google config and never the sun config, even if the IT tests were for sun. This PR fixes that issue by adding a module support class for each area: google, sun, checkstyle.  I will re-amend the commit with the correct Pull #.","closed","miscellaneous,","rnveach","2019-06-04T02:40:36Z","2019-06-10T18:02:14Z"
"","6616","minor: remove unnecessary antlr classes from main code","This removes uses of ANTLR classes and uses DetailAST directly instead. This is in support of issue #3817 .","closed","","rnveach","2019-03-27T17:36:56Z","2019-03-31T02:42:40Z"
"","6617","minor: remove usage of antlr specific method in RequireThisCheck","This removes uses of an ANTLR specific method and uses the DetailAST directly instead. This is in support of issue #3817 .  Regression will be provided.","closed","","rnveach","2019-03-28T02:20:01Z","2019-03-28T06:32:26Z"
"","6907","Issue #6659: Increase mutation threshold for pitest-filters profile","This PR updates the mutation threshold for the pitest-filters profile to 100 in `pom.xml` (forgot to do as part of PR #6889 for Issue #6659)","closed","","esilkensen","2019-07-16T18:42:47Z","2019-07-16T21:52:49Z"
"","6876","Issue #6875: SuppressWithNearbyCommentFilter does not match messages","This PR fixes Issue #6875 by updating the logic of the `isMatch()` method of the `SuppressWithNearbyCommentFilter.Tag` class to correctly match messages when configured, following the implementation of the `SuppressionCommentFilter.Tag` class: https://github.com/checkstyle/checkstyle/blob/ee1d9cd79eb773c533ef8e08d590bf3ce8a7fee2/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java#L450-L467","closed","","esilkensen","2019-07-06T09:17:57Z","2019-07-09T06:08:17Z"
"","6015","Issue #6011: redo XML_Structure documentation section","this PR fixes Issue #6011","closed","","romani","2018-07-08T17:56:59Z","2018-07-11T12:16:45Z"
"","6899","Issue #6887: SuppressWithPlainTextCommentFilter ignores messageFormat","This PR fixes #6887, updating the suppression `isMatch` logic to always check the message format (instead of only when the event source format matches). It adds a test case that would fail with the current master code.  Previous PR's applied the same logic to SuppressionCommentFilter (#6882) and SuppressWithNearbyCommentFilter (#6876).","closed","","esilkensen","2019-07-13T08:52:28Z","2019-07-15T13:58:50Z"
"","6975","Issue #6207: Add xpath regression test for UnusedImports","This PR adds XPath regression test for suppression filter on [UnusedImports](https://checkstyle.org/config_imports.html#UnusedImports) check, see #6207.","closed","","mincong-h","2019-08-12T21:02:46Z","2019-08-16T12:13:26Z"
"","6985","Issue #6207: Add xpath regression test for AvoidInlineConditionals","This PR adds XPath regression test for suppression filter on [AvoidInlineConditionals](https://checkstyle.org/config_coding.html#AvoidInlineConditionals) check, see #6207. Also, fix related code snippets in documents.","closed","","mincong-h","2019-08-16T15:11:52Z","2019-08-21T05:17:06Z"
"","6979","Issue #6207: Add xpath regression test for ArrayTypeStyle","This PR adds XPath regression test for suppression filter on [ArrayTypeStyle](https://checkstyle.org/config_misc.html#ArrayTypeStyle) check, see #6207.","closed","","mincong-h","2019-08-14T20:47:37Z","2019-08-15T10:00:12Z"
"","6978","Issue #6207: Add xpath regression test for AnonInnerLength","This PR adds XPath regression test for suppression filter on [AnonInnerLength](https://checkstyle.org/config_sizes.html#AnonInnerLength) check, see #6207.","closed","","mincong-h","2019-08-14T20:04:22Z","2019-08-16T18:10:22Z"
"","6977","Issue #6207: Add xpath regression test for AbstractClassName","This PR adds XPath regression test for suppression filter on [AbstractClassName](https://checkstyle.org/config_naming.html#AbstractClassName) check, see #6207.","closed","","mincong-h","2019-08-14T05:50:34Z","2019-08-15T10:00:03Z"
"","6928","Issue #6883: Add ID format property to SuppressionCommentFilter","This PR addresses issue #6883 - adding an `idFormat` property to SuppressionCommentFilter.   Currently, when deciding if an audit event should be suppressed, this filter first matches the event source against the `checkFormat`. If that fails, it matches the event module ID against the `checkFormat`. With this PR, the filter instead matches the event module ID against the new `idFormat` property (additional details in issue description).  Initial questions/notes: * Should `idFormat` be a string or regular expression? It's a regular expression in this PR, but I think either way could make sense to me and would be happy to change it to a string.  * I think we'll want a regression report for this change? I'll run one tomorrow...","closed","","esilkensen","2019-07-27T09:35:13Z","2019-08-08T06:13:56Z"
"","6510","Issue #4073: Use lf_cr_crlf as default for NewlineAtEndOfFile check","This matches more the intention of the check and also works properly if you for example have files with Linux line ending on Windows systems as is common for cross-platform projects.  Fixes #4073  Depends on #6509","closed","","Vampire","2019-03-05T21:41:29Z","2019-05-20T09:44:46Z"
"","6111","Extend ClassMemberImpliedModifier","This issue covers work descoped from #5885.  The proposal is to add a property `violateImpliedFinalOnMethodWhenClassFinal` to `ClassMemberImpliedModifier`. The property would ensure that methods are declared `final` on `final` classes.  The reason for descoping is that it requires design consideration to determine what should or should not be checked, particularly with regard to: - methods on enums - static methods (final will prevent the method from being hidden by subclasses) - instance methods.   Potentially there is a need for more than one flag. Or possibly there is no need for the such validation at all.  Potential config view: ```                        ```","open","","jodastephen","2018-09-12T17:04:28Z","2018-09-13T14:29:09Z"
"","6115","new functionality for xpath query attribute @text to contain text of only current node","This is requirement to be able to implement Xpath query for node with several IDENT child nodes Closely related with https://github.com/checkstyle/checkstyle/issues/6240  @romani @rnveach  [Previous discussion](https://github.com/checkstyle/checkstyle/issues/1340#issuecomment-420835444)  ``` /var/tmp $ cat Main.java #[[ public class Main { 	@lombok.Generated 	public void firstTest()  	{ 	}  	@abc.def.Generated 	public void secondTest()  	{ 	}  	@Generated 	public void thirdTest()  	{ 	} } ]] ```  ``` /var/tmp $ cat checks.xml #[[                		  		 	    	 	           ]] ```  ``` /var/tmp $ cat suppressions_xpath.xml #[[      	  ]] ```    ``` /var/tmp $ java -jar checkstyle-8.13-SNAPSHOT-all.jar -c config.xml Main.java #[[ Starting audit... [ERROR] /var/tmp/Main.java:4:9: '{' at column 2 should be on the previous line. [LeftCurly] Audit done. Checkstyle ends with 1 errors. ]] ```  `//*[MODIFIERS//*[@text = 'Generated']]/descendant-or-self::node()` -  query points to all AST nodes, those have child node with token type `MODIFIERS`  and this `MODIFIERS` node has any level child nodes with `@text='Generated'`. Annotation `@lombok.Generated` has `IDENT` with `Generated` value, but method was not suppressed as others.  We assumed that node can have only one `IDENT` child node (see [here](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java#L261)), but below you can see example where `DOT` token has two `IDENT` direct child nodes. Current implementation takes first child node with token type `IDENT` for `@text` attribute. For example here `DOT` node will have `lombok` as `@text` attribute value.  ```     |--MODIFIERS -> MODIFIERS [2:1]     |   |   |--ANNOTATION -> ANNOTATION [2:1]     |   |   |   |--AT -> @ [2:1]     |   |   |   `--DOT -> . [2:8]     |   |   |       |--IDENT -> lombok [2:2]     |   |   |       `--IDENT -> Generated [2:9]     |   |   `--LITERAL_PUBLIC -> public [3:1]     |   |--TYPE -> TYPE [3:8]     |   |   `--LITERAL_VOID -> void [3:8]     |   |--IDENT -> firstTest [3:13] ```  Suggestions made by @lars-sh:  > Adding XPath attribute @text to IDENT nodes as well, allowing us to traverse via IDENT nodes directly.  We can add new attribute to the `IDENT` tokens, for example `@value`. `//ANNOTATION/DOT[@text = 'lombok']/IDENT[0]` -> `//ANNOTATION/DOT/IDENT[@value='lombok']` `//ANNOTATION/DOT[@text = 'lombok']/IDENT[1]` -> `//ANNOTATION/DOT/IDENT[@value='Generated']`  > Joining strings to produce a more reliable @text attribute (that could even allow matching ANNOTATION[@text = '@lombok.Generated'] directly), though I'm not sure if it's truely possible to achieve this approach.  We can concat all `IDENT` child nodes texts into single text. `//ANNOTATION/DOT[@text = 'lombok']` -> `//ANNOTATION/DOT[@text = 'lombok.Generated']`  What do you think?","closed","approved,","timurt","2018-09-13T17:58:36Z","2019-01-08T09:47:26Z"
"","6264","Pitest: add new mutator TRUE_RETURNS","This is not an unstable mutator, just disabled by default.  http://pitest.org/quickstart/mutators/#TRUE_RETURNS > Replaces primitive and boxed boolean return values with true. Pitest will filter out equivalent mutations to methods that are already hard coded to return true.  Report with only new mutator added, and others disabled: http://rveach.no-ip.org/checkstyle/regression/pitest-reports/19/  So it basically replaces `return variable;` with `return true;` and expects a test to fail. This shows that the method never returns false or the return of false has no effect on future logic and should probably be removed.","closed","miscellaneous,","rnveach","2018-12-09T21:09:57Z","2018-12-18T15:35:53Z"
"","6320","Pitest: add new mutator REMOVE_CONDITIONALS","This is not an unstable mutator, just disabled by default.  http://pitest.org/quickstart/mutators/#REMOVE_CONDITIONALS  > The remove conditionals mutator will remove all conditionals statements such that the guarded statements always execute Although not currently enabled by default it is highly recommended that you enable it if you wish to ensure your test suite has full coverage of conditional statements.  **Please note:** > The reason these are not enabled by default is that there is a large degree of overlap in the tests required to kill these mutations and those required to kill mutations from other default operators such as the conditional boundaries mutator.  Report with only new mutator added, and others disabled: http://rveach.no-ip.org/checkstyle/regression/pitest-reports/30/  This mutator increased the number of timeouts by 6x. And increased the number of memory errors by 93.  Every profile requires 10-15 percent of mutations to be killed, so adding this mutator will take some work. It might be recommended to work by profile instead of doing the entire mutator at once.  -------","open","has bounty,","rnveach","2018-12-27T23:23:09Z","2022-07-24T03:49:52Z"
"","6272","Pitest: add new mutator FALSE_RETURNS","This is not an unstable mutator, just disabled by default.  http://pitest.org/quickstart/mutators/#FALSE_RETURNS > Replaces primitive and boxed boolean return values with false. Pitest will filter out equivalent mutations to methods that are already hard coded to return false.  Report with only new mutator added, and others disabled: http://rveach.no-ip.org/checkstyle/regression/pitest-reports/24/ This report includes fixes created in PR https://github.com/checkstyle/checkstyle/pull/6268 . Only reports worth looking at: coding, javadoc, utils, and gui. Only 13 mutations exist.  So it basically replaces `return variable;` with `return false;` and expects a test to fail. This shows that the method never returns true or the return of true has no effect on future logic and should probably be removed.  Mutator can't be added until https://github.com/checkstyle/checkstyle/issues/6264 is done.","closed","miscellaneous,","rnveach","2018-12-12T01:33:01Z","2018-12-20T06:43:32Z"
"","6992","Protect master branch from push force but allow it for non master branches","This is just for information, as result of my long discussion with Github support.  Goal was to restrict `push --force` for master branch in repo BUT in the same time allow `push --force` for all other branches.  Changes in settings of repo: ![image](https://user-images.githubusercontent.com/812984/63366547-d91d5180-c32e-11e9-9557-94486c91f4c8.png) additional settings was deactivated on github side ( that was requested by me a long time ago to restrict push force at all as there was no granularity at that time).  I almost completely thought myself to not work in main repo, so I use my fork now. BUT it is still convenient sometime to make a simple/minor fix from web UI and make short-lived branch in main repo. So team can use this option.","closed","","romani","2019-08-20T16:45:59Z","2019-08-20T21:30:07Z"
"","6624","Remove usage of antlr specific methods from our checks","This is in support of issue #3817 .  We should  remove uses of any ANTLR specific method and uses the DetailAST directly instead. These are methods that we didn't implement and take an AST (not DetailAST). They need to be removed as we can't change the method parameter of a method we are overriding and we want to remove ANTLR classes from the API package. It is better we use our own implementation instead of one that we don't control and don't know for sure what it does.  They are only 2 of these methods, so it is not a big loss in terms of compatibility.","closed","miscellaneous,","rnveach","2019-04-03T02:06:32Z","2019-04-03T20:33:43Z"
"","6688","config: update maven-enforcer-plugin to 3.0.0-M2","This is in support of https://github.com/checkstyle/checkstyle/issues/6687 and confirmed in https://github.com/checkstyle/checkstyle/pull/6681 .","closed","","rnveach","2019-04-21T00:32:49Z","2019-04-21T02:21:30Z"
"","6270","config: expanded pitest mutators to defaults","This is in support of https://github.com/checkstyle/checkstyle/issues/6264 .  Defaults are not added by default when you start adding new mutators. Just adding the new one without the defaults results in only the new mutator running. This is what I used to generate the report in the first post of the issue.","closed","","rnveach","2018-12-10T21:54:20Z","2018-12-12T16:29:12Z"
"","6238","Upgrade Powermock2 to RC4","This is a stopper for #6228   The powermock2 RC4 was released recently. It has some issues with java 12, but is fully compatible with java 10/11","closed","miscellaneous,","pbludov","2018-12-02T11:18:08Z","2018-12-06T13:34:10Z"
"","6905","minor: refactor isMessageMatch in comment filters","This is a minor refactoring PR that cleans up `isMessageMatch` in SuppressionCommentFilter and SuppressWithNearbyComment filter, identified in https://github.com/checkstyle/checkstyle/pull/6899#discussion_r303358544","closed","","esilkensen","2019-07-15T16:17:01Z","2019-07-16T06:24:26Z"
"","6175","upgrade to latest picocli version to fix extra space in help output","This is a follow-up item from PR https://github.com/checkstyle/checkstyle/pull/6126.  After upgrading from Commons CLI to picocli,  the usage help message displays a space between short options and the option parameter. This is a known issue in picocli: https://github.com/remkop/picocli/issues/531  This ticket is a reminder to upgrade the picocli version when that ticket is fixed in picocli. (Note that the usage help message text will change so the test will also need to be modified slightly.)","closed","miscellaneous,","remkop","2018-10-28T22:03:22Z","2018-11-19T22:53:51Z"
"","6289","Pitest: add new mutator CONSTRUCTOR_CALLS","This is **an unstable mutator**.  http://pitest.org/quickstart/mutators/#CONSTRUCTOR_CALLS  > The constructor call mutator replaces constructor calls with null values.  This is all they state on it being unstable: > Please note that this mutation is fairly unstable and likely to cause NullPointerExceptions even with weak test suites.  Report with only new mutator added, and others disabled: http://rveach.no-ip.org/checkstyle/regression/pitest-reports/27/  I have seen mostly valid cases where we aren't verifying exception message, or using the initial value of the field. I have resolved 99% of the cases. For throwing exceptions, the act of throwing `null` instead creates and throws a `NullPointerException`.","closed","miscellaneous,","rnveach","2018-12-16T19:24:43Z","2018-12-20T06:40:21Z"
"","6067","Issue #5885: Add ClassMemberImpliedModifierCheck","This implements #5885.  The implementation validation provided for nested types only.  Properties `violateImpliedStaticOnNestedEnum` and `violateImpliedStaticOnNestedInterface`.  I left out the method part(`violateImpliedFinalOnMethodWhenClassFinal`) as it gets a lot more complex - decisions would need to be taken around static methods vs instance methods, and methods on enums. In my view, the nested types are more useful than enforcing `final` on methods of final classes. Getting the nested types part in now, rather than not at all seems like the right choice.  The PR closely follows the pattern of #5899 so hopefully will be reasonably accurate. Thanks for your consideration.","closed","","jodastephen","2018-08-09T19:28:26Z","2018-12-09T19:45:43Z"
"","6923","config: enable PMD cache","This commit enables caching on PMD to speed up re-runs.","closed","","rnveach","2019-07-26T22:51:25Z","2019-08-02T10:15:27Z"
"","6460","minor: changed powermock tests to normal tests for TranslationCheck","This also fixes problem with merging 2 branches that were working in the same test. It is causing failures in master.","closed","","rnveach","2019-02-23T13:29:46Z","2019-02-23T15:09:07Z"
"","6557","minor: reset the test stream for each test","These streams are reused and without the reset call, you are getting ""Audit done."" messages in assertion failures when unexpected violations happen instead of the actual unexpected violation. Resetting the streams fixes this.  This is a followup of #6511.","closed","miscellaneous,","Vampire","2019-03-11T09:00:16Z","2019-03-18T19:50:46Z"
"","6165","Issue #6115: Add attribute ""value"" to all AST nodes","These changes add a ""value"" attribute to all ElementNode objects (used for XPath expressions on the AST) in a generic way. They handle issues #6115 and #6117.  Find two new unit tests for the changes below.","closed","","lars-sh","2018-10-24T08:28:35Z","2018-11-10T23:48:29Z"
"","6164","Issue #6115: Add attribute ""value"" to all AST nodes","These changes add a ""value"" attribute to all ElementNode objects (used for XPath expressions on the AST) in a generic way. They handle issues #6115 and #6117.  Find two new unit tests for the changes below.","closed","","lars-sh","2018-10-23T23:23:09Z","2018-10-24T08:28:59Z"
"","6236","Add build instructions to README","There're no build instructions in README, not is there a CONTRIBUTING or INSTALL in the source root. The instructions should be mentioned even if they're the expected default in order to make sure they're supported. Build information should be available in at least one expected location either included or linked (including links to external/online documentation).","closed","miscellaneous,","krichter722","2018-12-01T17:33:20Z","2019-02-04T21:02:12Z"
"","6203","google_checks.xml does not allow valid lower camel case identifiers","There is an identifier regex of form `^[a-z]([a-z0-9][a-zA-Z0-9]*)?$` in several places in https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml#L149  This will not allow valid lower camel case form of expressions like ""X Factor"" (which would be ""xFactor"")","closed","","jakub-bochenski","2018-11-08T16:29:26Z","2018-11-14T07:01:48Z"
"","6913","New Check: Ordering of Methods in a Class (public -> protected -> private)","There are many ways of arranging methods in a class. One of the most popular is the following order: public, protected, private. This check would verify if a class violates this order.  Example:  ``` //does not violate public Class Demo {     public void foo(){}     private void foorbar(){} }  //violates public Class Demo {     private void foorbar(){}     public void foo(){} } ```  I know this is not the code convention, going by this:   https://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141855.html#1852  It says:  ""These methods should be grouped by functionality rather than by scope or accessibility. For example, a private class method can be in between two public instance methods. The goal is to make reading and understanding the code easier.""  Despite of what the convention is, a check like this would be incredibly useful. Code formatters like the Google Java Formatter give the option to arrange methods by visibility as well.","closed","","speedbird123","2019-07-20T10:38:06Z","2019-08-05T23:16:23Z"
"","6903","Ignore Junit5 @TempDir in VisibilityModifier check","The VisibilityModifier check has a parameter to ignore variable names if they have certain annotations. It already contains JUnit @Rule and @ClassRule in its default value for that parameter, because those are injected by the JUnit framework. See https://checkstyle.sourceforge.io/config_design.html#VisibilityModifier for the documentation of that parameter.  For the same reason the new JUnit 5 @TempDir extension annotation should be added to the default: https://junit.org/junit5/docs/current/user-guide/#writing-tests-built-in-extensions-TempDirectory.  Otherwise developers get a checkstyle violation that the @TempDir field needs to be private. Of course that is not possible for fields which are injected.","closed","","Bananeweizen","2019-07-14T17:55:23Z","2019-08-05T23:06:46Z"
"","6804","Suppression documentation links to old DTDs","The user documentation at http://checkstyle.sourceforge.net/config_filters.html#SuppressionFilter contains 2 links to the suppression XML DTD. Both of those go to the no longer existing Sourceforge DTDs and need to be updated to point to https://checkstyle.org/dtds/suppressions_1_2.dtd instead","closed","miscellaneous,","Bananeweizen","2019-06-05T08:59:57Z","2019-06-22T14:23:12Z"
"","6021","CI: spellchecker script is not ready for running manually by contributors","The spellchecker script (`.ci/test-spelling-unknown-words.sh`) has few issues that makes it failing on most popular platforms that Checkstyle contributors use.  For example, it fails on  Debian,  ~~MacOS~~ fixed in #6348  ~~and Windows (all versions of above)~~ - shell scripts are not for Windows by design.  Also, this script does not care about relative paths handling, error handling and has bad logging.  We need to redesign it so it becomes easy to use by contributors.  Some issues found so far: 1. Script only works when executed from git repo root folder and fail from anywhere else: ``` .ci/test-spelling-unknown-words.sh - works cd .ci && ./test-spelling-unknown-words.sh - fails xxx/checkstyle/.ci/test-spelling-unknown-words.sh - fails ``` It lacks proper quotation around path arguments so it fails on any catalog with spaces in name.  2. Scripts has bad logging and error handling. See the example log below from Debian Stretch - it will tell everything better than all words: ``` $ bash .ci/test-spelling-unknown-words.sh ... Run w Experimental keys on scalar is now forbidden at /home/dyaroslavtsev/Desktop/Code/opensource/checkstyle/daniilyar/checkstyle/.ci/jsoref-spellchecker/spelling-unknown-word-splitter.pl line 37. Experimental keys on scalar is now forbidden at /home/dyaroslavtsev/Desktop/Code/opensource/checkstyle/daniilyar/checkstyle/.ci/jsoref-spellchecker/spelling-unknown-word-splitter.pl line 37. xargs: /home/dyaroslavtsev/Desktop/Code/opensource/checkstyle/daniilyar/checkstyle/.ci/jsoref-spellchecker/spelling-unknown-word-splitter.pl: exited with status 255; aborting Review results There are now fewer misspellings than before. ... ```  Especially notice the exit with 255 status line in the middle. That is a critical error which breaks the logic which should stop the processing with human readable error message, but is doesn't  ~~3. Script sleeps for 5 sec before exiting without the clear reason~~ - by design, required for Travis.","closed","CI,","daniilyar","2018-07-09T20:33:20Z","2019-01-13T02:03:57Z"
"","6120","Remove restriction of commit messages to be one line only","The restriction of commit messages to be on one line and only 200 characters long is overly restrictive and destroys information. If a message really contains too much information an edit can be requested before merging. Consider  ``` minor: Remove restriction to build master only from .travis.yml  Checkstyle doesn't use a large number of branches besides master and the complications for pull request authors to get their PR branches to build on Travis CI is not worth saving a few builds. ```  in comparison to  ``` minor: Remove restriction to build master only from .travis.yml ```  I could try to fit the message on one line, but you want to have the information provided. The `git` should be a source of information to answer all question in the form of ""Why again did we do X?"". [GNOME commit message rules](https://wiki.gnome.org/Git/CommitMessages) are worth taking a look. An there's a reason why a lot of projects wouldn't merge commit without a description. It's a way better source of information than a max. 2.5 times extension of the summary line.","closed","","krichter722","2018-09-15T15:06:25Z","2018-09-16T19:27:22Z"
"","6472","Unclear rational in ExplicitInitialization","The rational says  > Rationale: Each instance variable gets initialized twice, to the same value. Java initializes each instance variable to its default value (0 or null) before performing any initialization specified in the code. So in this case, x gets initialized to 0 twice, and bar gets initialized to null twice. So there is a minor inefficiency. This style of coding is a holdover from C/C++ style coding, and it shows that the developer isn't really confident that Java initializes instance variables to default values.  Issues: - `x` is referenced but the example that is referenced is not present - `bar` is referenced but the example that is referenced is not present - `This style of coding is a holdover from C/C++ style coding, and it shows that the developer isn't really confident that Java initializes instance variables to default values.` is very negative and also wrong. I agree that explicit initialization should be left out if default is fine, but there are style guides that say that initialization should always be done explicitly. This is not necessarily a leftover from C/C++ style coding or inconfidence of the developer. The rational to have it is, that it is clear from looking at it to what it is initialized without the need to think about it. This is the same as for example `int x = arr[y++] = y;`. This construct could either be seen as ""wow, this developer knows exactly what the JVM is doing and in which order it evaluates expression parts"", or it can be seen as ""what the fuck, this is unreadable, I need to think 30 minutes about what happens in this statement each time I stumble upon it"". For this example I would prefer not using such a wonky construct that 90% of the developers will not instantly understand correctly even if it would show my excellence in understanding JVM internals.","closed","miscellaneous,","Vampire","2019-02-24T13:24:23Z","2019-03-08T02:32:37Z"
"","6490","MultipleVariableDeclarations missing from sun style","The rational of the check says the sun style demands this, but it is not part of the sun checks XML.  https://checkstyle.org/config_coding.html#MultipleVariableDeclarations","closed","miscellaneous,","Vampire","2019-02-27T21:31:53Z","2019-04-10T22:59:31Z"
"","6449","Wrong public identifier in doctype of example empty suppressions file","The public identifier in http://checkstyle.sourceforge.net/files/suppressions_none.xml is version 1.0, while the system identifier is 1.2. I guess it should actually both be 1.2 as at https://github.com/checkstyle/checkstyle/blob/master/config/suppressions.xml.  https://github.com/checkstyle/checkstyle/blob/master/src/site/resources/files/suppressions_none.xml","closed","miscellaneous,","Vampire","2019-02-22T10:19:03Z","2019-03-08T02:32:03Z"
"","6861","config: remove Oracle JDK from Travis CI","The Oracle JDK License has [changed](https://www.oracle.com/technetwork/java/javase/overview/oracle-jdk-faqs.html) for releases starting April 16, 2019.  Oracle now require users to log in to an Oracle account to download their JDK. It is also not possible to cache installers, as this falls within redistribution restrictions. The only choice we have is to stop running the build against Oracle JDK.","closed","","pbludov","2019-06-28T05:49:05Z","2019-06-29T03:53:51Z"
"","6387","Gradle console output hides later checkstyle warnings","The Gradle Checkstyle plugin stops output on the first set of warnings, so it is difficult to estimate how long it would take to resolve warnings for an entire project.","closed","","mcandre","2019-01-22T01:32:31Z","2019-01-22T09:38:36Z"
"","6816","minor: remove trailing period to correct the url","The google checkstyle url is immediately followed by a period, it appears to be a part of the url if don't pay much attention, so I suggest to remove it.  The commit in this PR follows the advice from the last closed PR #6815.","closed","","JerryChin","2019-06-13T03:25:02Z","2019-06-13T05:11:49Z"
"","6815","minor: Remove trailing period to correct the url","The google checkstyle url is immediately followed by a period, it appears to be a part of the url if don't pay much attention, so I suggest to remove it.","closed","","JerryChin","2019-06-13T01:28:34Z","2019-06-13T22:16:49Z"
"","6889","Issue #6659: increase mutation coverage for pitest-filters","The goal of this PR is to increase the mutation coverage for pitest-filters to 100% (#6659).  I will add PR comments explaining my reasoning for some of the changes, and will certainly be happy to iterate on them in response to any feedback.","closed","","esilkensen","2019-07-09T16:57:39Z","2019-07-13T06:59:13Z"
"","6421","Issue #6377: FinalLocalVariable: IllegalStateException","The goal of this PR is to fix Issue #6377, where the FinalLocalVariable check can throw an IllegalStateException when checking an enhanced for-loop.  Proposed solution is to push/pop a new `ScopeData` when entering/exiting a `LITERAL_FOR` token, and to mark `FinalVariableCandidate`'s for enhanced for-loop variables as `assigned` upon creation.  Regression report: http://esilkensen.github.io/checkstyle-tester/6377  Elasticsearch example from the Issue description: [#A119](http://esilkensen.github.io/checkstyle-tester/6377/elasticsearch/index.html#A119)  **Example of the exception:** (with my understanding of how it happens)  ``` public void method() {   for (Object o : collection) {     // do nothing   }    Object o;   if (condition) {     o = new String(""foo"");   } else {     o = new String(""bar"");   } } ```  With the existing code, the `o` introduced by the `for` loop is added to the top `method` level `ScopeData` and it does not leave that scope after the `for` loop. Then a second `o` is added to the `ScopeData` at line 6.  When the check exits the closing `}` for the `if`, the current scope has one assigned `o` variable (the `o = new String(""foo"");` and the previous scope has two unassigned `o` variables (`for (Object o` and `Object o;`).  It checks `isSameVariables` between the assigned `o` and each unassigned `o`, which returns `true` in both cases (it only checks that they are contained in the same `method`) and so two calls to `iterator.remove()` are made, throwing an exception.  **Solution:**  With the code in this PR, a `ScopeData` is pushed when the check enters a `for` loop to capture variables introduced by `FOR_INIT`/`FOR_EACH_CLAUSE` -- e.g. the `o` bound by the loop. When the check exits a `for` loop it pops that `ScopeData` because those variables are no longer in scope and can be used again. In the example above, it sees that the `o` bound by the loop was never assigned and logs it as a `final` candidate.  This avoids the IllegalStateException in the example because the `o` bound by the loop is no longer part of the scope when the check is processing the if/else, so there is only a single unassigned `o` to consider.  The other change in this PR is to set `assigned` to `true` when creating a `FinalLocalVariableCandidate` for any variable bound in an enhanced for-loop, because these loops implicitly assign the variable when starting iteration.","closed","","esilkensen","2019-02-11T22:31:12Z","2019-02-15T06:07:57Z"
"","6393","Issue #6375: FinalLocalVariable: NPE","The goal of this PR is to fix Issue #6375, where the FinalLocalVariable check throws a NullPointerException when it encounters ""receiver"" parameters.  Proposed fix is to exclude these from the check via `CheckUtil.isReceiverParameter` (these parameters are implicitly `final` and the compiler will not let them be modified).  Regression report: http://esilkensen.github.io/checkstyle-tester/6375","closed","","esilkensen","2019-01-23T23:11:14Z","2019-01-29T02:35:10Z"
"","6134","Issue #6130: AbbreviationAsWordInName false positive at end of the word","The goal of this PR is to fix Issue #6130:  - Calls to `getAbbreviationIfIllegal(String str, int beginIndex, int endIndex)` are now with inclusive indexes, regardless of whether the abbreviation is at the end of the string. - When checking if an abbreviation is allowed, the final character is not stripped when the abbreviation is at the end of the string.  Regression results: http://esilkensen.github.io/checkstyle-tester/6130","closed","","esilkensen","2018-09-30T23:14:49Z","2018-10-29T22:42:38Z"
"","6882","Issue #6879: SuppressionCommentFilter ignores messageFormat","The goal of this PR is to fix #6879 by updating the `isMatch` method in `SuppressionCommentFilter.Tag` so that it takes into account `messageFormat` when matching on module ID.  Related PR that does the same to `SuppressWithNearbyCommentFilter.Tag`: #6876","closed","","esilkensen","2019-07-08T23:29:19Z","2019-07-09T06:08:12Z"
"","6428","Issue #6301: ArrayTypeStyle support for method definitions","The goal of this PR is to address Issue #6301 by adding support for checking the [ArrayTypeStyle](https://checkstyle.org/config_misc.html#ArrayTypeStyle) of method definitions.  The following is valid Java syntax: ``` Object emptyArray()[] {     ... } ```  With this PR, method definitions with array return types like the above would be reported as violations regardless of the value of `javaStyle`. My initial thought was that since functions can't have an array return type in C, it could make sense for this check to always enforce ""Java-style"" method return types.  That said, I think it'd be an easy enough code change to only report these method return type violations when `javaStyle` is `true` - or similarly to add a new parameter (or `TokenTypes.METHOD_DEF` as an optional token?) to configure whether to check method return types.  What do you think?   Regression reports:  * http://esilkensen.github.io/checkstyle-tester/6301/true (`javaStyle=""true""` ) * http://esilkensen.github.io/checkstyle-tester/6301/false (`javaStyle=""false""`)","closed","","esilkensen","2019-02-16T08:11:19Z","2019-02-22T20:30:40Z"
"","6484","config: fixed exclude for .checkstyle from eclipse-cs","The exclude makes it look like it is excluding a folder but it is actually just a file.  There are some other around the same area that look like they might be files and not folders, but I am not sure. This is the only one that is affecting me right now.","closed","","rnveach","2019-02-26T00:28:01Z","2019-03-01T12:00:13Z"
"","6897","doc: Add missing slash for constant name check doc","The document of [ConstantName](https://checkstyle.sourceforge.io/config_naming.html#ConstantName) misses a slash. And then I check the source, and find the source misses it too. So I create this PR to fix it.","closed","","utzcoz","2019-07-12T07:02:19Z","2019-07-12T11:26:15Z"
"","6459","Misleading docs or wrong implementation for LeftCurly ignoreEnums","The description suggests that with `option = eol` and `ignoreEnums = true`, enums are ignored. I actually wondered about this, because one could simply leave out the `ENUM_DEF` token to achieve that. But as I then looked deeper I found that it only cares about one aspect, that ```java enum Foo { BAR, BAZ } ``` is allowed when the rules would mandate ```java enum Foo {     BAR,     BAZ } ``` while this will still trigger an error ```java enum Foo {     BAR,     BAZ } ```  The only thing that is allowed is, that after the Lcurly is not immediately following a newline character for enum def, to allow such one-line enum defs I'd guess. The docs should make this clearer. :-)","open","","Vampire","2019-02-23T01:08:22Z","2019-02-23T01:08:22Z"
"","6453","Overly complex default regex in SuppressWarnings format","The default regex for SuppressWarnings format is `^$|^\s+$`. I'd suggest to simplify this to just `^\s*$` which should have the same effect. Actually I would even use `^\s*+$` as little performance tweak.","closed","approved,","Vampire","2019-02-22T15:17:11Z","2019-03-08T02:30:51Z"
"","6235","minor: explain that PR-workflow with Travis CI doesn't work","The current restrictions in the use of Travis CI (see #6119 for details) contradicts the usual PR-based workflow (including forks and the ability to work on your forks) almost any FLOSS project uses. This information should be passed on to the user somehow.  Since that is not what users expect (as opposed to what the devs claim in #6119) and contradicts the design of PR-based workflow (which users are much likely expecting when contributing on a PR-workflow based platform) the information should be passed on at other important location such as https://checkstyle.org/contributing.html.","closed","discussion ongoing,","krichter722","2018-12-01T17:28:12Z","2019-02-26T07:09:40Z"
"","6081","Feature request: IllegalImport rule should allow for CDATA list of classes/packages","The current [IllegalImport rule](http://checkstyle.sourceforge.net/config_imports.html#IllegalImport) configuration allows specifying ""forbidden"" classes and/or packages as a comma separated list of expressions (be it fully-qualified or regexp(s)) as an XML **attribute**. This imposes some limitations on the number of expressions that can be written and/or makes maintenance of the list rather cumbersome if it contains too many expressions.  The suggested feature is as follows - allow `CDATA` element instead of or in addition to the attribute - e.g.  ```xml                                           ```","closed","","lgoldstein","2018-08-13T05:39:02Z","2018-08-19T22:48:03Z"
"","6068","using picocli as command line parser","The checkstyle stand-alone tool currently uses Commons CLI to parse the command line.  Would there be any interest in migrating the CLI to [picocli](http://picocli.info)? This would give a number of advantages:  * more declarative (and less) code in `com.puppycrawl.tools.checkstyle.Main` * usage help in [ANSI colors](https://picocli.info/#_ansi_colors_and_styles) * opens the possibility to add a bash/zsh command line [autocompletion](https://picocli.info/autocomplete.html) script for `Main` in the distribution * support for [@-files](https://picocli.info/#AtFiles) (argument files) for long command lines  See the [picocli github project](https://github.com/remkop/picocli) for more.  If there is interest I can supply a pull request.","closed","miscellaneous,","remkop","2018-08-10T04:00:40Z","2019-04-09T03:09:02Z"
"","6455","EmptyCatchBlock change property types to Regexp","The `EmptyCatchBlock` check documentation states that both properties are of type `String`, shouldn't this be `Regular Expression`?  https://checkstyle.org/config_blocks.html#EmptyCatchBlock","closed","miscellaneous,","Vampire","2019-02-22T19:04:14Z","2019-03-04T01:55:03Z"
"","6821","Resolve violations from IDEA 20191.3","TC upgraded version of IDEA inspection engine, and as always there is no previous version of engine for selection in settings we need to resolve all issue to unblock our PR merge process.  Violations: https://teamcity.jetbrains.com/viewLog.html?buildId=2366627&tab=Inspection&buildTypeId=Checkstyle_IdeaInspectionsMaster  BashSupport   Convert to a quoted or unquoted string   Simple use of array variable   Simple variable usage   Unresolved variable  General   Redundant suppression  Java   Declaration redundancy   Stream API call chain can be simplified   Wrapper type may be primitive   Inheritance issues   Method is identical to its super method  JUnit   JUnit test method without any assertions   Simplifiable JUnit assertion  Performance   Call to 'Arrays.asList()' with too few arguments  Probable bugs   Cast conflicts with 'instanceof'   Verbose or redundant code constructs   Duplicate branches in 'switch'  JavaScript  ECMAScript 6 migration aids   'var' used instead of 'let' or 'const'  ====  violations on local: ``` YAML   Validation by JSON Schema      .travis.yml Schema validation: Property 'apt' is not allowed Schema validation: Incompatible types. Required: string. Actual: null. ``` and ``` BashSupport Convert to a quoted or unquoted string Simple use of array variable Simple variable usage Unresolved variable ``` bash is postponed till some time in future. Related issue #5826","closed","miscellaneous,","romani","2019-06-15T17:24:51Z","2019-06-16T21:20:02Z"
"","6900","Don't use absolute checkstyle links in xdocs","Talked about at https://github.com/checkstyle/checkstyle/pull/6898#discussion_r303207386 ,  Our xdocs should not absolute links to checkstyle's own website. Using an absolute link prevents from clicking through pages in our versioned website. Example: https://checkstyle.sourceforge.io/version/6.18/config_coding.html  Links should remain absolute in our javadocs as they are in separate folder path then our relative ones. I believe the javadoc's aren't versioned in our website.","closed","miscellaneous,","rnveach","2019-07-13T18:38:22Z","2019-07-14T18:34:37Z"
"","6649","new check: InvalidJavadocPosition","Talked about at https://github.com/checkstyle/checkstyle/issues/6516 and used to verify what Checkstyle considers a javadoc or not, we should create a new check that flags javadocs in improper locations.  Javadoc is just a special block comment that is used to generate documentation on the classes. For the it to be considered a true javadoc and placed in the reports, it must be in specific locations otherwise documentation tools will just ignore it. Since some tools don't generate an error on invalid javadoc locations, it would be great if checkstyle could flag them.  Here is an example of good and bad javadocs the check should examine: ```` package /** violation */ com.puppycrawl.tools.checkstyle.checks.javadoc.invalidjavadocposition;  /** violation */ import java.lang.String;  /** violation **/ /** valid **/ class InputInvalidJavadocPosition {     /** violation **/     } /* ignore */ class InputInvalidJavadocPosition2 {     /** violation */     /** valid */     int field1;     /** valid */     int[] field2;     /** valid */     public int[] field3;     /** valid */     @Deprecated int field4;      int /** violation */ field20;     int field21 /** violation */;     @Deprecated /** violation */ int field22;      void method1() {}     /** valid */     void method2() {}     /** valid */      T method3() { return null; }     /** valid */     String[] method4() { return null; }      void /** violation */ method20() {}     void method21 /** violation */ () {}     void method22(/** violation */) {}     void method23() /** violation */ {}     void method24() { /** violation */ }     void method25() { /** violation */ int variable; } } @Deprecated /** violation */ class InputInvalidJavadocPosition3 {} class /** violation */ InputInvalidJavadocPosition4 {} class InputInvalidJavadocPosition5 /** violation */ {} /** violation */ ````  If a bad Javadoc is found, it should either be moved to the correct position, removed, or turned into a normal block comment.","closed","new module,","rnveach","2019-04-08T02:07:36Z","2019-06-27T04:14:00Z"
"","6174","ImportOrder check example for IntelliJ doesn't work","Taken from: http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.html  ```                                   ```  And any IntelliJ formatted file, e. g. starting with ``` import com.google.common.base.Predicate;  import java.io.IOException; ```  The error is ``` Extra separation in import group before 'java.io.IOException' [ImportOrder] ```","closed","","leventov","2018-10-28T20:34:57Z","2018-10-28T21:51:12Z"
"","6789","Create policy on how xdocs should be written","Taken from https://github.com/checkstyle/checkstyle/pull/6782#discussion_r288070286 ,  Right now, alot of xdocs are very old and we are reworking them with the 'alignment' and other issues. There should be some policy to clarify where to put examples on how good xdocs should be written when providing updates.  Maybe this could be somewhere on the contribution page. Brief description with relevant examples for existing checks would be great to make it easier to understand relevant requirements.","open","approved,","rnveach","2019-05-28T14:36:27Z","2019-08-09T22:37:10Z"
"","6376","Improper TYPE_UPPER_BOUNDS antlr tree","Taken from https://github.com/checkstyle/checkstyle/pull/6355#discussion_r246981352 ,  https://github.com/checkstyle/checkstyle/blob/4bd317469eb55e6f28449f53ff9ba1fd1def3077/src/test/resources/com/puppycrawl/tools/checkstyle/grammar/InputRegressionJavaClass2Ast.txt#L386-L395  it seems to me `c3` and `` should all be under 1 node and not combined with the `TYPE_EXTENSION_AND`. I would expect something similar to `TYPECAST`: ```` TYPE_UPPER_BOUNDS -> extends [43:11]    |-- TYPE    |   |-- IDENT -> c3 ....    |-- TYPE_EXTENSION_AND    |-- TYPE    |   |-- IDENT -> i1 ````","open","antlr,","rnveach","2019-01-12T21:25:58Z","2021-06-21T12:12:53Z"
"","6354","Java Grammar: use TYPE_EXTENSION_AND instead of BAND in typecast expression","Taken from https://github.com/checkstyle/checkstyle/issues/6329#issuecomment-451961090 The AST for code ``` Object field = (Cloneable & Serializable) null; ``` is ```     |--VARIABLE_DEF -> VARIABLE_DEF [5:4]     |   |--MODIFIERS -> MODIFIERS [5:4]     |   |--TYPE -> TYPE [5:4]     |   |   `--IDENT -> Object [5:4]     |   |--IDENT -> field [5:11]     |   |--ASSIGN -> = [5:17]     |   |   `--EXPR -> EXPR [5:19]     |   |       `--TYPECAST -> ( [5:19]     |   |           |--BAND -> & [5:30]     |   |           |   |--TYPE -> TYPE [5:20]     |   |           |   |   `--IDENT -> Cloneable [5:20]     |   |           |   `--TYPE -> TYPE [5:32]     |   |           |       `--IDENT -> Serializable [5:32]     |   |           |--RPAREN -> ) [5:44]     |   |           `--LITERAL_NULL -> null [5:46]     |   `--SEMI -> ; [5:50] ``` There shouldn't be the `BAND` (binary and) token.  It should be `TYPE_EXTENSION_AND`.","closed","breaking compatibility,","pbludov","2019-01-08T04:30:17Z","2019-01-12T18:53:37Z"
"","6346","ClassFanOutComplexity: false positive on var","Taken from https://github.com/checkstyle/checkstyle/issues/6316#issuecomment-451522961  ```` $ cat TestClass.java public class TestClass {     void method() { var x = 1;     } }  $ cat TestConfig.xml                            $ java -jar checkstyle-8.15-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:1:1: Class Fan-Out Complexity is 1 (max allowed is 0). [ClassFanOutComplexity] Audit done. Checkstyle ends with 1 errors. ````  `var` should not be affecting ClassFanOutComplexity by default. With `var` changed to `Object`, no violation is produced.  https://checkstyle.org/config_metrics.html#ClassFanOutComplexity should ignore var,int type should be counted ... as it is not a class..","closed","approved,","rnveach","2019-01-05T00:51:37Z","2020-10-31T05:49:40Z"
"","6485","Add tabWidth to Checker and FileSets","Taken from https://github.com/checkstyle/checkstyle/issues/2116#issuecomment-465631027 ,  `AbstractFileSetCheck` doesn't use tabWidth in the violation like `AbstractCheck` does, so the column numbers for violations is incorrect. There are no checkstyle file sets that put violations on the line AND column number, but we are a util and this could be useful to someone else making their own custom check, if not to us in the future. We should make `AbstractCheck`'s and `AbstractFileSetCheck`'s log methods similar.  FileSet's log: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java#L155-L157 AbstractCheck's log: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java#L248-L256","closed","new feature,","rnveach","2019-02-26T03:35:18Z","2019-03-14T06:17:58Z"
"","6654","Issue #6463: Only handle fields for VARIABLE_DEF in AnnotationLocation check, not local variables","Splitting followup part 2 for #6530 Fixes #6463 Regression report: http://kautler.net/cs-regression-6463/  Draft because based on fix for #6462, will rebase and un-draft once #6653 was merged.","closed","","Vampire","2019-04-10T17:47:11Z","2019-05-20T09:41:50Z"
"","6653","Issue #6462: Remove PARAMETER_DEF from AnnotationLocation","Splitting followup part 1 for #6530 Fixes #6462 Regression report: http://kautler.net/cs-regression-6462/","closed","","Vampire","2019-04-10T07:36:54Z","2019-05-19T05:49:47Z"
"","6941","minor: catch all exceptions when checking check messages","Split from https://github.com/checkstyle/checkstyle/pull/6862  An improper message during development threw something other than IAE and there was no way to tell which file or message caused the error without placing a breakpoint. This is simply to make the debugging process easier by catching all exceptions and printing the specifics of where the error occurred.","closed","","rnveach","2019-08-03T13:24:03Z","2019-08-03T18:05:02Z"
"","6705","new check: MissingJavadocPackageCheck","Split from https://github.com/checkstyle/checkstyle/issues/5411 ,  We should create a new check for missing javadocs on package-info.java files.","closed","new module,","rnveach","2019-04-29T12:35:23Z","2019-06-18T21:17:02Z"
"","6704","new check: MissingJavadocVariableCheck from JavadocVariableCheck","Split from https://github.com/checkstyle/checkstyle/issues/5411 ,  Split missing javadoc functionality from `JavadocVariableCheck` and create  `MissingJavadocVariableCheck`. It should only have the properties needed to validate if a violation should be printed on missing javadoc.","closed","","rnveach","2019-04-29T12:32:48Z","2019-06-23T05:36:31Z"
"","6703","new check: MissingJavadocMethod from JavadocMethod","Split from https://github.com/checkstyle/checkstyle/issues/5411 ,  Split missing javadoc functionality from `JavadocMethodCheck` and create  `MissingJavadocMethodCheck`. It should only have the properties needed to validate if a violation should be printed on missing javadoc.  ---------------------  **Migration Note**  JavadocMethod functionality for validating missing javadocs was split into a new check MissingJavadocMethod. `minLineCount`, `allowedAnnotations`, `scope`, `excludeScope`, and `allowMissingPropertyJavadoc`, `ignoreMethodNamesRegex`, and `tokens` properties were brought to the new check. Default scope was changed from `private` to `public`.","closed","new module,","rnveach","2019-04-29T12:31:33Z","2019-05-06T01:27:26Z"
"","6389","Line length 80 or 100, does it make sense?","Sorry for raising this topic here.  According to [4.1 Line Length] (https://www.oracle.com/technetwork/java/javase/documentation/codeconventions-136091.html#313), and the bundled ""**Sun Checks**"", line width should be  Avoid lines longer than 80 characters, since they're not handled well by **many terminals and tools**.  I think this might make sense 50 years ago (before Java was born), but to keep the rule today is rather stupid, isn't it?","closed","","zenglian","2019-01-23T02:32:01Z","2019-01-30T15:30:25Z"
"","6890","Make inner class SuppressWithPlainTextCommentFilter.Suppression private","Some internal implementation details of the class SuppressWithPlainTextCommentFilter are exposed to public. That's not necessary. Moreover, this may cause compatibility issues in the future. This class should be private. This is a minor change, but may require some changes to the tests.","closed","miscellaneous,","pbludov","2019-07-09T19:16:29Z","2019-07-10T10:55:56Z"
"","6854","Make inner class SuppressWithNearbyCommentFilter.Tag private","Some internal implementation details of the class `SuppressWithNearbyCommentFilter` are exposed to public. That's not necessary. Moreover, this may cause compatibility issues in the future. This class should be private. This is a minor change, but may require some changes to the tests.","closed","miscellaneous,","pbludov","2019-06-26T19:45:25Z","2019-07-03T05:02:43Z"
"","6058","doc: note about bounty","Some information for volunteers. I don't really know what's supposed to be there. Suggestions and comments are welcome.","closed","","pbludov","2018-08-03T19:16:47Z","2018-08-05T07:30:19Z"
"","6208","Issue #5488: Created contributing.md","Solves #5488","closed","","varunu28","2018-11-10T17:39:11Z","2018-11-16T00:30:11Z"
"","6802","Getting ""Unable to get class information for @throws tag"" when using complete class name in the javadoc","Since Checkstyle 8.21 the following fail with  > JavadocMethod: Unable to get class information for @throws tag 'org.xwiki.rendering.macro.MacroExecutionException'.  ```     /**      * @param parameters the Rss macro's parameters needed for getting the data      * @return the feed's data       * @throws org.xwiki.rendering.macro.MacroExecutionException in case the feed cannot be read      */     SyndFeed createFeed(RssMacroParameters parameters) throws MacroExecutionException; ```  If I change the javadoc to use the short name instead I don't have any failure anymore.  The complete failing source file can been seen at https://github.com/xwiki/xwiki-platform/blob/c210de4fa72bb651ff4bd1581c2f31a2fc4d7787/xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-macros/xwiki-platform-rendering-macro-rss/src/main/java/org/xwiki/rendering/internal/macro/rss/RomeFeedFactory.java#L37.","closed","","tmortagne","2019-06-04T12:35:15Z","2019-06-23T14:47:08Z"
"","6850","new check : PreferExpressionLambda","Similar to Intellij Inspection.  Description : Reports lambda expressions with code block bodies when expression-style bodies can be used  ``` /var/tmp $ cat config.xml                               /var/tmp $ cat Test.java public class Test {      Runnable oneLineValid = () -> System.out.println(""Hello""); // No Violation      Runnable oneLineInvalid = () -> { // Violation         System.out.println(""Hello world"");     };      Runnable longValid = () -> { // No Violation         System.out.println(""Hello world"");         System.out.println(""Hello world2"");     };  } ```","open","","Dichotomia","2019-06-25T19:29:52Z","2019-08-30T10:00:41Z"
"","6696","Create appveyor.bat for CI commands","Similar to https://github.com/checkstyle/checkstyle/blob/master/.ci/travis/travis.sh we should look into creating an appveyor.bat for appveyor's long commands and allow windows users to run them locally.  https://github.com/checkstyle/checkstyle/blob/master/appveyor.yml#L101-L108 and https://github.com/checkstyle/checkstyle/blob/master/appveyor.yml#L125-L133","closed","CI,","rnveach","2019-04-26T17:41:18Z","2019-07-15T14:11:47Z"
"","6083","Move UTF-8 limitation info in documentation","Should be documented as general limitation in http://checkstyle.sourceforge.net/index.html. As of now (http://checkstyle.sourceforge.net/writingchecks.html#Limitations) it is written like it was a limitation for writing own checks (and not for code that checkstyle checks).","closed","easy,","SebastianDietrich","2018-08-14T05:30:25Z","2019-02-17T18:41:47Z"
"","6217","use lgtm.com service of static code analysis","Service: https://lgtm.com (from https://semmle.com/)  see example at: https://github.com/hibernate/hibernate-search  it runs semmle tool inside: https://help.semmle.com/codeql/codeql-cli.html https://help.semmle.com/codeql/codeql-cli/procedures/analyze-codeql-database.html  All rules:  https://help.semmle.com/qldoc/java/ https://help.semmle.com/wiki/display/JAVA/Java+queries https://help.semmle.com/wiki/display/JAVA/Missing+Override+annotation migth be useful for us, as it is not enforced on our code base.","closed","","romani","2018-11-16T22:03:57Z","2022-06-26T21:39:17Z"
"","6752","New Check: UnnecessarySemicolon","Semicolon is not necessary in some places (code block end, last resource declaration, some enums) I thought checkstyle already had some check for it, but looks like it is not (or I missed something). There is an EmptyStatementCheck but cases below are not empty statements and therefore ignored by this check. ``` $ cat Test.java import java.io.*;  public class TestClass {    {/*init block*/}; // violation    static {}; // violation    TestClass(){}; // violation    class A{}; // violation    void method(){}; // violation    void method2() throws IOException {        try(            OutputStream s = new PipedOutputStream(); // violation        ){}    }    interface aa{}; //violation     enum aa1{         A,B; //violation, if no more statements in enum body, semicolon is unnecessary     }; }; // violation  $ cat conf.xml                               $ java -jar checkstyle-8.20-all.jar -c conf.xml Test.java Starting audit... Audit done.  ```  I would like to try to implement this check if this issue will be approved.  UPDATE: There is no ability to Change existing EmptyStatementCheck, name of Check is critical API point. Additionally it is better to keep Checks to address single target.","closed","","strkkk","2019-05-13T08:01:52Z","2019-05-25T19:44:44Z"
"","6489","LocalVariableName:  allowOneCharVarInForLoop should allow one char variable in loop","See comment in https://github.com/checkstyle/checkstyle/pull/6434#pullrequestreview-206133708  https://checkstyle.org/config_naming.html#LocalVariableName   Attention: test case is updated, see comments of issue.   ``` Jack@Jack MINGW64 ~/Documents/tmp (new-user) $ cat TestLocalVariableName.java class MyClass {   void MyMethod() {     for (int var = 1; var < 10; var++) {} // OK     for (int VAR = 1; VAR < 10; VAR++) {} // violation, name 'VAR' must match                                           // pattern '^[a-z][a-zA-Z0-9]*$'     for (int i = 1; i < 10; i++) {} // OK   } } Jack@Jack MINGW64 ~/Documents/tmp (new-user) $ cat config.xml                               Jack@Jack MINGW64 ~/Documents/tmp (new-user) $ java $RUN_LOCALE -jar checkstyle-8.18-all.jar -c config.xml TestLocalVariableName.java Starting audit... [WARN] C:\Users\asus\Documents\tmp\TestLocalVariableName.java:4:14: Name 'VAR' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName] Audit done. ```  Expected: violation at `i` variable, as `allowOneCharVarInForLoop` if false by default.","closed","approved,","tsunghanjacktsai","2019-02-27T14:43:33Z","2019-05-26T01:18:42Z"
"","6150","config: bump saxon to 9.9.0-1","saxon update is suppressed till #6149  this PR is based on failure of #6144","closed","","romani","2018-10-20T17:17:54Z","2018-10-20T19:51:12Z"
"","6204","Checker should use UTF-8 encoding by default","Sample class: ``` public class Test {   String X = ""ища""; // parser is ok with this line   String Y = ""н""; // parser is ok with this line   char Y = 'н'; // parser is NOT ok with this line } ```  Exception: ``` > java -jar checkstyle-8.14-all.jar -c /sun_checks.xml  Test.java com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing          at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:581)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:472)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:226) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: TokenStreamRecognitionException occurred while parsing file          at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:98)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:181)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Caused by: line line 4:14: expecting ''', found '½'         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaLexer.nextToken(GeneratedJavaLexer.java:405)         at antlr.TokenStreamHiddenTokenFilter.consume(TokenStreamHiddenTokenFilter.java:38)         at antlr.TokenStreamHiddenTokenFilter.nextToken(TokenStreamHiddenTokenFilter.java:134)         at antlr.TokenBuffer.fill(TokenBuffer.java:69)         at antlr.TokenBuffer.LA(TokenBuffer.java:80)         at antlr.LLkParser.LA(LLkParser.java:52)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3295)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:2542)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:634)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:556)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:389)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:202)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:92)         ... 8 more Checkstyle ends with 1 errors. ```  ---------------  It seems that Unicode is supported in string literals but not character literals. Is this expected behavior? Is there a simple workaround available? Otherwise we'll be filtering files containing any Unicode before scanning, just to be safe, which is undesired.  This uses the Sun checks copy/pasted from [here.](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/sun_checks.xml)  _Originally found while scanning Lucene 4.6.0._  ----------  **MIGRATION NOTES**: if during upgrade to checkstyle 8.32 or higher you got such JavaParser exception, please update you checkstyle config to place in property `charset` value of system property ""file.encoding"".  See old documentation https://checkstyle.sourceforge.io/version/8.31/config.html#Checker_Properties for previous default value. If you had no such property set in config, please explicitly define it.","closed","breaking compatibility,","tylercamp","2018-11-08T16:49:23Z","2020-04-08T13:58:30Z"
"","6615","Support for Java 14 switch/yield expression","Running checkstyle validation on a class that contains switch expression: ```         return switch (c.getLocation().toLowerCase()) {                                                                                                                                                                                   case ""query"" -> String.format(""ARGS_GET:%s"", c.getFullPath().get(0));             case ""header"" -> String.format(""REQUEST_HEADERS:%s"", c.getFullPath().get(0));             case ""cookie"" -> String.format(""REQUEST_COOKIES:%s"", c.getFullPath().get(0));             default -> """";                                                               };                                                                       ```  fails with: ``` unexpected token: switch ``` And also ``` expecting EOF, found 'case' ```  ------  FIX Summary: new Tokens are created. Syntax should be supported, Checks will be updated later on, See follow up issues.   see https://github.com/checkstyle/checkstyle/pull/8449 for more details  -------","closed","has bounty,","krzyk","2019-03-27T10:02:35Z","2020-08-25T14:12:38Z"
"","6627","Add hbase project to noerror validation in CI","Right now we use such project only for noexception validation https://github.com/checkstyle/checkstyle/search?utf8=✓&q=hbase&type=  But https://github.com/apache/hbase/blob/master/pom.xml use us, and they use Indentation check https://github.com/apache/hbase/blob/master/hbase-checkstyle/src/main/resources/hbase/checkstyle.xml , so should use them in automatic regression testing.  This is good task for Jenkins.","closed","CI,","romani","2019-04-03T13:41:41Z","2019-11-29T23:51:17Z"
"","6209","add spring-cloud-gcp project to CIs no errror regresson testing","review discusion at https://github.com/spring-cloud/spring-cloud-gcp/issues/1195#issuecomment-437443330  append this project to ""no-error"" wercker validation. Fix should be similar to fix at #6167 .  Varable with version: https://github.com/spring-cloud/spring-cloud-build/blob/master/pom.xml#L42","closed","miscellaneous,","romani","2018-11-14T06:48:54Z","2020-09-22T12:53:38Z"
"","6222","Revert ""config: fix wercker CI, see details at #6218""","Revert for Issue https://github.com/checkstyle/checkstyle/issues/6218","closed","","rnveach","2018-11-19T17:53:42Z","2018-11-20T03:23:33Z"
"","6693","minor: Small fix in unit tests: Extract initial setup into before method","Removing some redundancy from a couple of unit tests by extracting common setup into a before-method.","closed","","HerrAachen","2019-04-23T06:33:15Z","2019-04-23T14:07:56Z"
"","6678","minor: remove unnecessary pmd suppressions","Removed unnecessary PMD suppressions.","closed","","rnveach","2019-04-18T01:03:11Z","2019-04-20T12:32:17Z"
"","6372","config: substitute problematic shield.io badge of teamcity","problematic image: ![screen shot 2019-01-11 at 7 36 28 am](https://user-images.githubusercontent.com/812984/51043486-a549a480-1573-11e9-86e7-e06119d6d61a.png)","closed","","romani","2019-01-11T15:36:56Z","2019-01-11T16:26:49Z"
"","6964","Add label ""has PR"" to issue when PR is submitted","Problem: Now it is not clear what issue is available for grabs without clicking on it and checking its history, it can already have a PR.   Proposed feature: add hook to repository on PR create action to add label for issue.  Other projects have similar thing, e.g. [pmd](https://github.com/pmd/pmd/issues?q=is%3Aissue+is%3Aopen+label%3Ahas%3Apr)","closed","CI,","strkkk","2019-08-11T07:46:58Z","2020-03-08T01:40:57Z"
"","6218","use latest code of hibernate-search in CI after checkstyle violation is resolved","problem is detected at https://github.com/checkstyle/checkstyle/pull/6215#issuecomment-439541183  problem is caused by https://github.com/hibernate/hibernate-search/pull/1804  we updated wercker execution to use non master:HEAD. ones problem is resolved at hiberate-search repo, we should revert such commit.","closed","miscellaneous,","romani","2018-11-16T23:35:19Z","2018-11-20T03:00:45Z"
"","6230","Minor skip file","previous PR: https://github.com/checkstyle/checkstyle/pull/6227  it is not first time I have: `[checkstyle] [ERROR] ....checkstyle/checkstyle/.ci/jsoref-spellchecker/english.words:1: File does not end with a newline. [NewlineAtEndOfFile]`  ``` main:  execute:      [echo] Checkstyle started (checkstyle_checks.xml): 23/11/2018 06:55:40 AM [checkstyle] Running Checkstyle  on 1012 files      [echo] Checkstyle finished (checkstyle_checks.xml) : 23/11/2018 06:55:41 AM      [echo] Checkstyle started (checkstyle_non_main_files_checks.xml): 23/11/2018 06:55:40 AM [checkstyle] Running Checkstyle  on 1641 files [checkstyle] [ERROR] ....checkstyle/checkstyle/.ci/jsoref-spellchecker/english.words:1: File does not end with a newline. [NewlineAtEndOfFile]   ```","closed","","romani","2018-11-24T15:50:43Z","2018-11-24T23:17:46Z"
"","6919","CI: hide maven download text to prevent log overflow","PR: https://github.com/checkstyle/checkstyle/pull/6918#issue-300598593 Example: https://travis-ci.org/checkstyle/checkstyle/jobs/562953991 > this The job exceeded the maximum log length, and has been terminated.  When the log overflows, it terminates the CI processing and marks as a red in github. We can't determine if it is a true failure or not because the downloads take so much log space that we don't know the results of the CI.  We should try to find a way to prevent this log overflow.  https://stackoverflow.com/questions/21638697/disable-maven-download-progress-indication Some people are saying to use batch mode but its questionable how well it works.","closed","CI,","rnveach","2019-07-24T13:12:14Z","2019-08-01T18:40:24Z"
"","6149","update to saxon 9.9","PR: #6144  https://travis-ci.org/checkstyle/checkstyle/jobs/444087539  stacktrace: ``` [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 13.181 s [INFO] Finished at: 2018-10-20T14:18:43Z [INFO] Final Memory: 47M/916M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.0:compile (default-compile) on project checkstyle: Compilation failure: Compilation failure:  [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java:[302,35] iterate() in com.puppycrawl.tools.checkstyle.xpath.AbstractNode cannot implement iterate() in net.sf.saxon.om.Item [ERROR]   return type net.sf.saxon.om.SequenceIterator is not compatible with net.sf.saxon.tree.iter.UnfailingIterator [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java:[281,5] method does not override or implement a method from a supertype [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNode.java:[31,8] com.puppycrawl.tools.checkstyle.xpath.AttributeNode is not abstract and does not override abstract method iterate() in net.sf.saxon.om.GroundedValue [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java:[39,8] com.puppycrawl.tools.checkstyle.xpath.RootNode is not abstract and does not override abstract method iterate() in net.sf.saxon.om.GroundedValue [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java:[38,8] com.puppycrawl.tools.checkstyle.xpath.ElementNode is not abstract and does not override abstract method iterate() in net.sf.saxon.om.GroundedValue [ERROR] -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.0:compile (default-compile) on project checkstyle: Compilation failure     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:213)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.apache.maven.plugin.compiler.CompilationFailureException: Compilation failure     at org.apache.maven.plugin.compiler.AbstractCompilerMojo.execute (AbstractCompilerMojo.java:1215)     at org.apache.maven.plugin.compiler.CompilerMojo.execute (CompilerMojo.java:188)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356)  ```  **Attention**: ones issue is resolved, suppression of new version detection should be removed.","closed","miscellaneous,","romani","2018-10-20T17:04:35Z","2018-11-15T10:49:15Z"
"","6536","Upgrade to PMD 6.12.0","PMD 6.12.0 is released, pmd/pmd#1181 was fixed.  Blockers: - [ ] LinguisticNaming #6578  - [ ] UseUnderscoresInNumericLiterals #6579   Bumping PMD version to 6.12.0 brings some new violations: ``` [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheckTest:493 Rule:LinguisticNaming Priority:3 Linguistics Antipattern - The variable 'isStarImport' indicates linguistically it is a boolean, but it is 'Method'. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheckTest:50 Rule:LinguisticNaming Priority:3 Linguistics Antipattern - The variable 'isSubclass' indicates linguistically it is a boolean, but it is 'Method'. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck:64 Rule:LinguisticNaming Priority:3 Linguistics Antipattern - The field 'isAfterValues' indicates linguistically it is a boolean, but it is 'Deque'.  [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes:1225 Rule:UseUnderscoresInNumericLiterals Priority:3 Number 10000 should separate every third digit with an underscore. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.utils.CommonUtil:50 Rule:CyclomaticComplexity Priority:3 The class 'CommonUtil' has a total cyclomatic complexity of 77 (highest 8).. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.DetailASTTest:288 Rule:UseUnderscoresInNumericLiterals Priority:3 Number 30000 should separate every third digit with an underscore. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.JavadocTokenTypesTest:126 Rule:UseUnderscoresInNumericLiterals Priority:3 Number 10000 should separate every third digit with an underscore. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.JavadocTokenTypesTest:127 Rule:UseUnderscoresInNumericLiterals Priority:3 Number 10071 should separate every third digit with an underscore. (100 similar violations about numbers in JavadocTokenTypesTest skipped) ```  The rule `LinguisticNaming` can be fixed.  The rule `UseUnderscoresInNumericLiterals` should be configured to allow numbers up to 5 digits: `10081` is easy to read and looks better then `10_081`; for `100500` it is better to change to `100_500` .","closed","miscellaneous,","pbludov","2019-03-09T13:37:52Z","2019-03-16T13:10:21Z"
"","6401","Allow excluding certain classes from illegal imports check","Please consider adding a possibility to exclude specified classes from the illegal imports check.  --------------  An example of a scenario where this would be useful: We wanted to exclude guava (`com.google.common`) from our projects and add it under `illegalPkgs` in `IllegalImportCheck`. However, it appears that an external interface we need to implement as part of our feature uses one of the classes from that package (`com.google.common.reflect.TypeToken`) in method signatures.   It would be convenient to have a possibility to allow just specific classes from a package (in our scenario `TypeToken`) to be imported and fail the check when any other class from a specified package is imported.","closed","","OlgaMaciaszek","2019-01-31T12:05:38Z","2019-02-01T00:37:29Z"
"","6422","bug with NewlineAtEndOfFileCheck","platform: windows 10 git: configured to use unix style newline  Expected: No error. Actual: reports NewlineAtEndOfFileCheck error.  My guess: The file ends with ""\n"", but the NewlineAtEndOfFileCheck  is looking for ""\r\n"".","closed","","zenglian","2019-02-12T11:18:43Z","2019-02-12T14:33:56Z"
"","6005","add projects to no-error regression testing","pgpainless: ``` git clone https://github.com/vanitasvitae/pgpainless.git cd pgpainless/ git checkout 5ec1e1a128774361816e0e85fce36fad1c0bfc55 ./gradlew checkstyleMain ./gradlew checkstyleTest ``` if exit code is not 0 , CI execution should fail.","closed","CI,","romani","2018-07-07T04:31:27Z","2018-11-07T05:46:28Z"
"","6287","Fix HTML5 incompatible javadoc comments","Part of #6228   Starting from JDK11 the option `-html5` is on by default. This breaks the javadoc build: https://travis-ci.org/checkstyle/checkstyle/jobs/464796081#L8406   >[ERROR] Exit code: 1 - /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java:156: error: attribute not supported in HTML5: summary [ERROR]  * <table summary=""Properties"" border=""1"">  All incompatible HTML5 tags and attributes must be replaced with alternatives","closed","","pbludov","2018-12-16T12:41:18Z","2018-12-16T13:13:26Z"
"","6586","Align XDocs and Javadocs for coding package","Part of #5750   Package com.puppycrawl.tools.checkstyle.checks.coding;  - [x] ArrayTrailingComma #6587 - [x] AvoidInlineConditionals #6590 - [x] CovariantEquals #6588 - [x] DeclarationOrder #6591 - [x] DefaultComesLast #6594 - [x] EmptyStatement #6598 - [x] EqualsAvoidNull #6592 - [x] EqualsHashCode #6595 - [x] ExplicitInitialization #6663 - [x] FallThrough #6651 - [x] FinalLocalVariable #6602 - [x] HiddenField #6692 - [x] IllegalCatch #6669 - [x] IllegalInstantiation #6597 - [x] IllegalThrows #6661 - [x] IllegalToken #6676 - [x] IllegalTokenText #6625 - [x] IllegalType #6666 - [x] InnerAssignment #6652 - [x] MagicNumber #6596 - [x] MissingCtor #6599 - [x] MissingSwitchDefault #6603 - [x] ModifiedControlVariable #6684 - [x] MultipleStringLiterals #6675 - [x] MultipleVariableDeclarations #6655 - [x] NestedForDepth #6690 - [x] NestedIfDepth #6668 - [x] NestedTryDepth #6683 - [x] NoClone #6626 - [x] NoFinalizer #6691 - [x] OneStatementPerLine #6672 - [x] OverloadMethodsDeclarationOrder #6685 - [x] PackageDeclaration #6656 - [x] ParameterAssignment #6673 - [x] RequireThis  #6604 - [x] ReturnCount #6686 - [x] SimplifyBooleanExpression #6657 - [x] SimplifyBooleanReturn #6667 - [x] StringLiteralEquality #6634 - [x] SuperClone #6670  - [x] SuperFinalize #6674 - [x] UnnecessaryParentheses #6605 - [x] VariableDeclarationUsageDistance #6662","closed","miscellaneous,","pbludov","2019-03-17T20:06:51Z","2019-04-27T19:15:03Z"
"","6532","Align XDocs and Javadocs for blocks package","Part of #5750   Package com.puppycrawl.tools.checkstyle.checks.blocks;  - [x] AvoidNestedBlocks #6556 - [X] EmptyBlock #6517  - [x] EmptyCatchBlock #6534 - [x] LeftCurly #6546 - [x] NeedBraces #6535  - [x] RightCurly #6569","closed","miscellaneous,","pbludov","2019-03-09T04:18:03Z","2019-03-15T14:33:10Z"
"","6531","Align XDocs and Javadocs for annotations package","Part of #5750   Package com.puppycrawl.tools.checkstyle.checks.annotation  - [x] AnnotationLocation #6492  - [x] AnnotationOnSameLine #6537 - [x] AnnotationUseStyle #6544 - [X] MissingDeprecated #6506  - [X] MissingOverride #6507  - [x] PackageAnnotation #6576  - [x] SuppressWarnings #6545 - [x] SuppressWarningsHolder #6555","closed","miscellaneous,","pbludov","2019-03-09T04:15:27Z","2019-03-16T01:07:22Z"
"","6726","Align XDocs and Javadocs for filters package","Part of #5750  Package com.puppycrawl.tools.checkstyle.filter:  - [x] BeforeExecutionExclusionFileFilter - [x] SeverityMatchFilter #6896 - [x] SuppressionCommentFilter #6839 - [x] SuppressionFilter #6788 - [x] SuppressionXpathFilter #6898 - [x] SuppressionXpathSingleFilter #6922 - [x] SuppressWarningsFilter #6895 - [x] SuppressWithNearbyCommentFilter #6877 - [x] SuppressWithPlainTextCommentFilter #6881","closed","miscellaneous,","pbludov","2019-05-07T17:23:51Z","2019-07-29T18:15:40Z"
"","6966","Align XDocs and Javadocs for miscellaneous package","Part of #5750  Package com.puppycrawl.tools.checkstyle.checks;  - [x] ArrayTypeStyle #6967 - [x] AvoidEscapedUnicodeCharacters #6976 - [x] CommentsIndentation #6995 - [x] DescendantToken #6999 - [x] FinalParameters #6968 - [x] Indentation #7015 - [x] NewlineAtEndOfFile #7005 - [x] OrderedProperties #6996 - [x] OuterTypeFilename #6969 - [x] TodoComment #7014 - [x] TrailingComment #7001 - [x] Translation #7009 - [x] UncommentedMain #6970 - [x] UniqueProperties #6997 - [x] UpperEll #7004","closed","miscellaneous,","pbludov","2019-08-12T06:53:59Z","2019-08-25T12:53:38Z"
"","6749","Align XDocs and Javadocs for whitespace package","Part of #5750  Package com.puppycrawl.tools.checkstyle.checks.whitespace:  - [x] EmptyForInitializerPad #6751 - [x] EmptyForIteratorPad #6761 - [x] EmptyLineSeparator #6769 - [x] FileTabCharacter #6753 - [x] GenericWhitespace #6762 - [x] MethodParamPad #6754 - [x] NoLineWrap #6755 - [x] NoWhitespaceAfter #6763 #6768 - [x] NoWhitespaceBefore #6765 - [x] OperatorWrap #6770 - [x] ParenPad #6756 - [x] SeparatorWrap #6766 - [x] SingleSpaceSeparator #6757 - [x] TypecastParenPad #6758 - [x] WhitespaceAfter #6759 - [x] WhitespaceAround #6767","closed","miscellaneous,","pbludov","2019-05-12T10:05:39Z","2019-05-25T16:51:36Z"
"","6725","Align XDocs and Javadocs for design package","Part of #5750  Package com.puppycrawl.tools.checkstyle.checks.design:  - [x] DesignForExtension #6727 - [x] FinalClass #6728 - [x] HideUtilityClassConstructor #6736 - [x] InnerTypeLast #6729 - [x] InterfaceIsType #6737 - [x] MutableException #6730 - [x] OneTopLevelClass #6731 - [x] ThrowsCount #6732 - [x] VisibilityModifier #6733","closed","miscellaneous,","pbludov","2019-05-07T17:20:38Z","2019-05-12T04:15:28Z"
"","6252","Move test inputs with deprecated packages to resources-noncompilable","Parf of #6228   Some deprecated packages are still  used in `ImportOrder` and `CustomImportOrder` checks. Such tests should be moved to `resources-noncompilable`, and marked as `jdk8-` compatible.","closed","miscellaneous,","pbludov","2018-12-08T15:10:48Z","2018-12-16T03:12:19Z"
"","6475","Page that explains system properties is not accesible from main page","page https://checkstyle.org/config_reporting.html is not accessible from our index.html and any other child page.  As it have a list of system properties: lets use it for it add it in our navigation left panel,  rename page to `config_system_properties.html` this page should be linked with https://checkstyle.org/config.html#Properties in some way","closed","miscellaneous,","romani","2019-02-24T16:03:14Z","2020-04-30T15:22:25Z"
"","6689","New module PatchFilter","Our suppress violation filters - https://checkstyle.org/config_filters.html But it is still struggle to start using checkstyle in big codebase. One of approach could be to clean new/changed code only. It should be possible to get such details from patch https://linuxacademy.com/blog/linux/introduction-using-diff-and-patch/ http://www.gnu.org/software/diffutils/manual/html_node/Detailed-Unified.html#Detailed-Unified   We need to collect ideas on how to implement filter that will work on patch file, CI can easily generate patch any format, so should use patch that most easy to support.","open","new module,","romani","2019-04-21T02:20:18Z","2020-04-22T13:31:25Z"
"","6942","CLI: support sequential execution of multiple configs","Originally was reported and discussed at #991 .  Example: `java com.puppycrawl.tools.checkstyle.Main -c /google_checks.xml -c /custom_checks.xml my-source-folder/`  It is useful if we want to add our own custom checks to be run alonside a standard one, like google's. The current way around this would be to copy the google xml and append new checks to the end of it, but then we would be required to do this for every project. The configurations in jar are there so we don't have to keep reproducing it. If the original google xml should be updated, this would require users to update the custom xml, along with the jar.  There are also other times where I can't put all my checks in the same file because of the ""RegexpSingleline"" module where I want to run different regular expressions on different file types. Having them all in the same configuration on all file types will produce incorrect errors because some checks are only made for one type, and it is allowed in another. I could run checker twice with the different configurations, but that is extra work and time going through the directory tree multiple times.  Chaining of configs is reasonable also but probably it is better to implement it in application/plugins(cli, ant, maven, eclipse). As in Checkstyle we have all under Checker module, so all parsed/loaded files are under its instance. Second config will mean separate Checker instance, so nothing will be shared. CLI will be responsible reuse files-scanning is used defined target as folder. Nothing else should be shared, between executions.    This new extension of `-c` should recheck compatibility with all others arguments:  - suppression file generation should be separate as it suppose to be used in certain config. Or make such modes incompatible. - output file is consolidated or separate ??!!  Attention:  This issue is not about inheritance of configs that is separate issue - #2873 . This issue is not about ability to ""include/inline/aggregate"" some other config files - requested at https://github.com/checkstyle/checkstyle/issues/991#issuecomment-510767436 .","open","discussion ongoing,","romani","2019-08-05T21:43:24Z","2019-12-12T23:53:42Z"
"","6395","warning during build of site ""Invalid byte tag in constant pool""","originally reported at #6213, an even fixed. During release 8.17 I noticed in logs that problem still present.  still a problem: ``` ... [INFO] Rendering 43 Doxia documents: 43 xdoc [INFO] Generating ""CI Management"" report        --- maven-project-info-reports-plugin:2.9:cim [INFO] Generating ""Dependencies"" report         --- maven-project-info-reports-plugin:2.9:dependencies [WARNING] Unable to process class META-INF/versions/9/module-info.class in JarAnalyzer File /home/rivanov/.m2/repository/net/bytebuddy/byte-buddy/1.9.3/byte-buddy-1.9.3.jar org.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 19     at org.apache.bcel.classfile.Constant.readConstant(Constant.java:161)     at org.apache.bcel.classfile.ConstantPool.(ConstantPool.java:69)     at org.apache.bcel.classfile.ClassParser.readConstantPool(ClassParser.java:235)     at org.apache.bcel.classfile.ClassParser.parse(ClassParser.java:143)     at org.apache.maven.shared.jar.classes.JarClassesAnalysis.analyze(JarClassesAnalysis.java:96)     at org.apache.maven.report.projectinfo.dependencies.Dependencies.getJarDependencyDetails(Dependencies.java:259)     at org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.hasSealed(DependenciesRenderer.java:1542)     at org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.renderSectionDependencyFileDetails(DependenciesRenderer.java:545)     at org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.renderBody(DependenciesRenderer.java:240)     at org.apache.maven.reporting.AbstractMavenReportRenderer.render(AbstractMavenReportRenderer.java:83)     at org.apache.maven.report.projectinfo.DependenciesReport.executeReport(DependenciesReport.java:201)     at org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:255)     at org.apache.maven.plugins.site.render.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:230)     at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:349)     at org.apache.maven.plugins.site.render.SiteMojo.renderLocale(SiteMojo.java:198)     at org.apache.maven.plugins.site.render.SiteMojo.execute(SiteMojo.java:147)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) [WARNING] Unable to process class META-INF/versions/9/module-info.class in JarAnalyzer File /home/rivanov/.m2/repository/net/bytebuddy/byte-buddy-agent/1.9.3/byte-buddy-agent-1.9.3.jar org.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 19     at org.apache.bcel.classfile.Constant.readConstant(Constant.java:161)     at org.apache.bcel.classfile.ConstantPool.(ConstantPool.java:69)     at org.apache.bcel.classfile.ClassParser.readConstantPool(ClassParser.java:235)     at org.apache.bcel.classfile.ClassParser.parse(ClassParser.java:143)     at org.apache.maven.shared.jar.classes.JarClassesAnalysis.analyze(JarClassesAnalysis.java:96)     at org.apache.maven.report.projectinfo.dependencies.Dependencies.getJarDependencyDetails(Dependencies.java:259)     at org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.hasSealed(DependenciesRenderer.java:1542)     at org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.renderSectionDependencyFileDetails(DependenciesRenderer.java:545)     at org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.renderBody(DependenciesRenderer.java:240)     at org.apache.maven.reporting.AbstractMavenReportRenderer.render(AbstractMavenReportRenderer.java:83)     at org.apache.maven.report.projectinfo.DependenciesReport.executeReport(DependenciesReport.java:201)     at org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:255)     at org.apache.maven.plugins.site.render.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:230)     at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:349)     at org.apache.maven.plugins.site.render.SiteMojo.renderLocale(SiteMojo.java:198)     at org.apache.maven.plugins.site.render.SiteMojo.execute(SiteMojo.java:147)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)     at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)     at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356) [WARNING] The repository url 'file://${basedir}/lib' is invalid - Repository 'repo-for-signedjar-dependency' will be blacklisted. [INFO] Generating ""Dependency Information"" report --- maven-project-info-reports-plugin:2.9:dependency-info [INFO] Generating ""Distribution Management"" report --- maven-project-info-reports-plugin:2.9:distribution-management [INFO] Generating ""Issue Management"" report     --- maven-project-info-reports-plugin:2.9:issue-tracking .... ```","closed","miscellaneous,","romani","2019-01-27T19:57:14Z","2021-02-14T00:54:40Z"
"","6420","links in header comment block of sun_checks.xml are outdated","Oracle bought sun in 2009. The links in this file is not valid now. The name ""sun"" is outdated.  https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/sun_checks.xml#L13","closed","miscellaneous,","zenglian","2019-02-11T13:25:16Z","2019-03-10T05:58:40Z"
"","6167","Add equalsverifier project to wrecker ci","ones https://github.com/jqno/equalsverifier/issues/216 is fixed  add equalsverifier to wrecker ci as no-error item","closed","CI,","romani","2018-10-26T00:28:56Z","2018-10-27T07:31:30Z"
"","6628","Remove ""update"" methods from DetailAST as developers shouldn't be modifying the tree from inside a check","Once https://github.com/checkstyle/checkstyle/issues/3817 is done for DetailAST, we should break compatibility with certain methods and directly using the implementation of DetailAST and only use the interface.  Methods to break: addPreviousSibling, addNextSibling, setText, setType, getLine, getColumn, removeChildren  Update methods should be removed because users shouldn't be modifying the tree from inside a check. Only the implementation should be allowed to use these methods. Get line and column should be removed because we already have a `getLineNo` and getColumnNo` and it causes confusion on which ones to use.","closed","breaking compatibility,","rnveach","2019-04-03T17:07:39Z","2019-09-26T19:38:34Z"
"","6458","Typo in Lcurly docs","On http://checkstyle.sourceforge.net/property_types.html#lcurly `than apply nl rule` should be `then apply nl rule`.","closed","miscellaneous,","Vampire","2019-02-23T00:46:30Z","2019-03-08T02:33:13Z"
"","6329","AnnotationOnSameLineCheck: NPE","Observed when running pitest regression. Taken from openjdk10.  ```` $ cat TestClass.java import java.io.Serializable;  public class TestClass {      Object field = (Cloneable & Serializable) null;  }  $ cat TestConfig.xml                            $ java -jar checkstyle-8.15-all.jar -c TestConfig.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:217)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:390)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:313)     at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:180)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:119) Caused by: java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck.visitToken(AnnotationOnSameLineCheck.java:82)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:390)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:501)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:330)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:183)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:319)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)     ... 5 more Checkstyle ends with 1 errors. ````","closed","approved,","rnveach","2018-12-30T06:21:07Z","2019-02-17T21:26:33Z"
"","6433","doc: add File Filter section in extending.xml","Now, on the sidebar, there are 5 sections under `Extending Checkstyle` . However, in [Extending Checkstyle](https://checkstyle.org/extending.html) page, there are only 4 of them and File filter section is missing.  Let's add the File FIlter section back to extending.xml.","closed","","fzdy1914","2019-02-18T09:13:58Z","2019-02-18T17:17:27Z"
"","6360","Feature request: Warn on throwing exceptions","Now that Java 8+ supports Optionals, we can improve our API's by returning errors as values, as opposed to using convoluted try/catch logic. Could we get a rule, disabled by default, that warns when:  * RuntimeException's or child classes are thrown, as these can lead to surprising production failures * A method or interface declares that exceptions are expected to be thrown * Checked exceptions are thrown","closed","","mcandre","2019-01-09T19:08:14Z","2019-01-10T21:18:47Z"
"","6197","No documentation on how to write TreeWalkerFilter","Normal filters can be found at: http://checkstyle.sourceforge.net/writingfilters.html  There is no mention of TreeWalkerFilter. I think we can just expand this current page for a mention on TreeWalkerFilters.","open","approved,","rnveach","2018-11-04T01:39:26Z","2018-11-07T22:57:55Z"
"","6464","minor: disable external dtd load by default","no system property result in: ``` java.lang.NullPointerException     at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDProcessor.endDTD(XMLDTDProcessor.java:1349)     at com.sun.org.apache.xerces.internal.impl.XMLDTDScannerImpl.endEntity(XMLDTDScannerImpl.java:652)     at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.endEntity(XMLEntityManager.java:1401)     at com.sun.org.apache.xerces.internal.impl.XMLEntityScanner.load(XMLEntityScanner.java:1917)     at com.sun.org.apache.xerces.internal.impl.XMLEntityScanner.skipSpaces(XMLEntityScanner.java:1655)     at com.sun.org.apache.xerces.internal.impl.XMLDTDScannerImpl.skipSeparator(XMLDTDScannerImpl.java:2082)     at com.sun.org.apache.xerces.internal.impl.XMLDTDScannerImpl.scanDecls(XMLDTDScannerImpl.java:2058)     at com.sun.org.apache.xerces.internal.impl.XMLDTDScannerImpl.scanDTDExternalSubset(XMLDTDScannerImpl.java:301)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.dispatch(XMLDocumentScannerImpl.java:1175)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.next(XMLDocumentScannerImpl.java:1045)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:933)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:602)     at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:505)     at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:841)     at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:770)     at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)     at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1213)     at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:643)     at com.puppycrawl.tools.checkstyle.XmlLoader.parseInputSource(XmlLoader.java:84)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.parseInputSource(ConfigurationLoader.java:197)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:443)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:395)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:372)     at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:209)     at com.puppycrawl.tools.checkstyle.ConfigurationLoaderTest.loadConfiguration(ConfigurationLoaderTest.java:62)     at com.puppycrawl.tools.checkstyle.ConfigurationLoaderTest.testExternalEntity(ConfigurationLoaderTest.java:410)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)     at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ```","closed","","romani","2019-02-23T17:12:02Z","2019-02-25T03:11:17Z"
"","6834","Require @Override annotation for every overridden method","New checker feature request:  Verify that the `@Override` annotation is present on any overridden method or implemented interface method. Both of these examples will fail:  ```java class Foo implements Runnable {     public void run() {} } ```  ```java class MyMap extends LinkedHashMap {     protected boolean removeEldestEntry(Map.Entry eldest) {         return size() > 10;     } } ```  This check is similar to `MissingOverride`, but different enough that it seems to warrant a new check with a new name. Thoughts on what to call it?","closed","","electrum","2019-06-19T00:03:29Z","2019-06-23T05:07:20Z"
"","6772","Add ParameterNumber.ignoreAnnotations property","My company uses [Jackson](https://github.com/FasterXML/jackson) for JSON serialization/deserialization of value classes.  We normally use `@JsonCreator` on constructors to support automatic deserialization.  ```java @Immutable class Thing {     private final int id;     private final String name;       @JsonCreator     public Thing(@JsonProperty(""id"") int id,                   @JsonProperty(""name"") String name) {         this.id = id;         this.name = name;     } } ```  Sometimes beans get large (lots of properties), so we have ParameterNumber configured to ignore constructors using:  ```xml  ```  However, sometimes we need to do more validation when deserializing JSON than we do when constructing directly. In these cases, we put @JsonCreator on a factory method that calls the simpler constructor.  ```java     public Thing(int id, String name) {         this.id = id;         this.name = Preconditions.checkNotNull(name, ""'name' is required"");     }      @JsonCreator     private static Thing fromJson(@JsonProperty(""id"") int id,                                    @JsonProperty(""name"") String name) {         Preconditions.checkArgument(id > 0, ""'id' must be positive"");         Preconditions.checkArgument(!name.isEmpty(), ""'name' cannot be empty"");         Preconditions.checkArgument(isValidName(name),                                     ""'name' must consist of only letters and digits"");         // ...         return new Thing(id, name);     } ```  Note that the @JsonCreator factory method has the same argument list as the constructor, so we can’t just define another constructor (unless we play with argument order, which could be confusing).  If the number of properties is too large, we have a checkstyle violation. We’d like to be able to configure checkstyle to ignore methods (and constructors) annotated with `@JsonCreator`, much like how `ignoreOverrides` ignores methods annotated with `@Override` (#66).  I’d suggest generalizing by accepting an annotation list (a String Set like `IllegalImport`’s `illegalClasses` property). Maybe it could be called `ignoreAnnotations` or `excludeAnnotations`.  Thanks for considering it.","closed","","2is10","2019-05-23T00:30:11Z","2019-06-26T12:50:05Z"
"","6540","AnnotationUseStyle: false positive on annotation with default nested annotation inside","Moved from https://github.com/checkstyle/checkstyle/issues/6446#issuecomment-466411459.  ```` $ cat TestClass.java @Anno(@Value) // violation , but no violation is expected public class Example { }  @interface Anno {     Value value(); }  @interface Value { }  $ cat TestConfig.xml                                $ java -jar checkstyle-8.10-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:1: Annotation cannot have closing parenthesis. [AnnotationUseStyle] Audit done. Checkstyle ends with 1 errors. ````  Expecting no violation.","closed","approved,","rnveach","2019-03-10T00:48:05Z","2019-04-17T11:41:41Z"
"","6721","minor: add missing deprecated on JavadocMethod properties","Missed marking some properties as deprecated.","closed","","rnveach","2019-05-06T13:48:02Z","2019-05-07T02:52:37Z"
"","6776","spelling: inpection","Miscellaneous PR without issue: Inpection -> Inspection","closed","","pbludov","2019-05-23T08:01:04Z","2019-05-25T05:41:53Z"
"","6777","spelling: identificator","Miscellaneous PR without issue: Identificator -> Identifier","closed","","pbludov","2019-05-23T08:08:31Z","2019-08-22T18:17:06Z"
"","6593","Allow SINGLE_LINE_COMMENT to be specified in WhitespaceAfterCheck","Might just be my personal preference, but I don't like seeing comments like: ```java //comment goes here ```  I find this: ```java // easier to read ```  It doesn't even have to be in the default list, just adding it to ``getAcceptableTokens`` would be enough.  ```` $ cat TestClass.java public class TestClass { //comment goes here }  $ cat TestConfig.xml                            $ java -jar checkstyle-8.18-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  I would like to see a violation that says a whitespace is needed after `//`.  Code that would produce no violation would be: ```` public class TestClass { // comment goes here } ````  Block comments should be supported too, and be configurable separate from single line comments: ```` /*violation here*/ /* no violation here*/ /* no violation here */ ````","closed","new module,","efenderbosch","2019-03-18T20:43:57Z","2020-04-19T15:30:35Z"
"","6470","Remove AvoidInlineConditionals from sun_checks.xml","Maybe I'm blind, but where does the Sun style guide forbid the ternary operator? The sole mention I find in https://www.oracle.com/technetwork/java/codeconventions-150003.pdf is, that the condition should be parenthesized if it contains a binary operator.  https://checkstyle.org/config_coding.html#AvoidInlineConditionals  >Rationale: Some developers find inline conditionals hard to read, so their employer's coding standards forbid them.","closed","approved,","Vampire","2019-02-24T00:55:41Z","2019-03-08T02:28:55Z"
"","6241","Resolve Teamcity violations of inspection engine 2018.3","master build failure - https://teamcity.jetbrains.com/viewLog.html?buildId=1796984&tab=Inspection&buildTypeId=Checkstyle_IdeaInspectionsMaster  Teamcity inspection engine was 2018.1.4 - #5949 inspection engine upgraded to 2018.3 (TeamCity Enterprise 2018.2 RC (build 60863)), with no way to use old version ([config](https://teamcity.jetbrains.com/admin/editRunType.html?id=buildType:Checkstyle_IdeaInspectionsPullRequest&runnerId=RUNNER_439&cameFromUrl=%2Fadmin%2FeditBuildRunners.html%3Fid%3DbuildType%253ACheckstyle_IdeaInspectionsPullRequest%26init%3D1&cameFromTitle=)). Inspection version is lates version - Version: 2018.3, Build: 183.4284.148, Released: November 20, 2018  we need to resolve issues to unblock RP acceptance process and make CI green again.  Violations:   ```   Abstraction issues - Private method only used from inner class (Errors) (3) 	src/main/java/com/puppycrawl/tools/checkstyle 	ConfigurationLoader.java (2) 	169: createIdToResourceNameMap() Method createIdToResourceNameMap() 	476: replaceProperties() Method replaceProperties() 	src/main/java/com/puppycrawl/tools/checkstyle/gui 	TreeTableModelAdapter.java (1) 	115: delayedFireTableDataChanged() Method delayedFireTableDataChanged()   Code style issues - 'equals()' called on Enum value (Errors) (3) 	src/main/java/com/puppycrawl/tools/checkstyle/api 	LocalizedMessage.java (1) 	300: equals() equals() called on Enum value  	src/main/java/com/puppycrawl/tools/checkstyle/filters 	SuppressionCommentFilter.java (1) 	428: equals() equals() called on Enum value  	SuppressWithPlainTextCommentFilter.java (1) 	304: equals() equals() called on Enum value   Control flow issues - 'if' statement with identical branches (1) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks 	RightCurlyCheck.java (1) 	498: getDetailsForOthers() 'if' statement with common parts  Control flow issues - Simplifiable boolean expression (1) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc 	TagParser.java (1) 	159: isTag() column < text.length() && (Character.isJavaIdentifierStart(text.charAt(column)) ... can be simplified to 'column >= text.length()||(Character.isJavaIdentifierStart(text.charAt(column)) 	                    || text.charAt(column) == '/')'   Declaration redundancy - Declaration can have final modifier (Errors) (6) 	src/main/java/com/puppycrawl/tools/checkstyle 	Main.java (6) 	620: tabWidth Declaration can have final modifier 	631: format Declaration can have final modifier 	661: exclude Declaration can have final modifier 	666: excludeRegex Declaration can have final modifier 	676: checkerThreadsNumber Declaration can have final modifier 	681: treeWalkerThreadsNumber Declaration can have final modifier  Declaration redundancy - Simplify stream API call chains (1) 	src/main/java/com/puppycrawl/tools/checkstyle 	XpathFileGeneratorAstFilter.java (1) 	80: accept() Can be replaced with 'String.join'  Declaration redundancy - Unused declaration (13) 	src/main/java/com/puppycrawl/tools/checkstyle 	JavadocPropertiesGenerator.java (2) 	314: outputFile Field is never assigned. 	320: inputFile Field is never assigned. 	Main.java (11) 	600: configurationFile Field is never assigned. 	604: outputPath Field is never assigned. 	608: propertiesFile Field is never assigned. 	615: suppressionLineColumnNumber Field is never assigned. 	626: generateXpathSuppressionsFile Field is never assigned. 	636: printAst Field is never assigned. 	641: printAstWithComments Field is never assigned. 	646: printJavadocTree Field is never assigned. 	651: printTreeWithJavadoc Field is never assigned. 	656: debug Field is never assigned. 	671: executeIgnoredModules Field is never assigned.  Declaration redundancy - Wrapper type may be primitive (1) 	src/test/java/com/puppycrawl/tools/checkstyle/utils 	TokenUtilTest.java (1) 	152: testTokenValueIncorrect2() Type may be primitive  Dependency issues - Class with too many dependents (Errors) (1) 	src/main/java/com/puppycrawl/tools/checkstyle/api 	TokenTypes.java (1) 	33: TokenTypes Class 'TokenTypes' has too many dependents (312 > 300)  General - Duplicated Code (77) 	src/main/java/com/puppycrawl/tools/checkstyle/api 	AbstractFileSetCheck.java (1) 	129: setFileExtensions() Duplicate code: lines 129-138 	LineColumn.java (1) 	64: compareTo() Duplicate code: lines 64-71 	src/main/java/com/puppycrawl/tools/checkstyle 	AstTreeStringPrinter.java (1) 	Checker.java (3) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation 	AnnotationLocationCheck.java (2) 	AnnotationOnSameLineCheck.java (1) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/coding 	EqualsHashCodeCheck.java (1) 	FinalLocalVariableCheck.java (1) 	IllegalTypeCheck.java (1) 	MultipleVariableDeclarationsCheck.java (1) 	NoCloneCheck.java (1) 	NoFinalizerCheck.java (1) 	RequireThisCheck.java (2) 	UnnecessaryParenthesesCheck.java (2) 	src/main/java/com/puppycrawl/tools/checkstyle/checks 	DescendantTokenCheck.java (2) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/design 	DesignForExtensionCheck.java (1) 	ThrowsCountCheck.java (1) 	VisibilityModifierCheck.java (1) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/header 	AbstractHeaderCheck.java (1) 	HeaderCheck.java (1) 	RegexpHeaderCheck.java (1) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/imports 	IllegalImportCheck.java (1) 	ImportControlCheck.java (1) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation 	AbstractExpressionHandler.java (1) 	ImportHandler.java (1) 	LineWrappingHandler.java (1) 	MemberDefHandler.java (1) 	MethodDefHandler.java (1) 	PackageDefHandler.java (1) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc 	JavadocMethodCheck.java (1) 	JavadocTagInfo.java (2) 	JavadocTypeCheck.java (1) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics 	CyclomaticComplexityCheck.java (3) 	JavaNCSSCheck.java (3) 	NPathComplexityCheck.java (3) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier 	InterfaceMemberImpliedModifierCheck.java (2) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/naming 	ConstantNameCheck.java (1) 	StaticVariableNameCheck.java (1) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp 	MultilineDetector.java (1) 	SinglelineDetector.java (1) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace 	EmptyForInitializerPadCheck.java (1) 	EmptyForIteratorPadCheck.java (1) 	GenericWhitespaceCheck.java (2) 	src/main/java/com/puppycrawl/tools/checkstyle 	ConfigurationLoader.java (3) 	src/main/java/com/puppycrawl/tools/checkstyle/filters 	SuppressionCommentFilter.java (4) 	SuppressionsLoader.java (1) 	SuppressWithNearbyCommentFilter.java (1) 	SuppressWithPlainTextCommentFilter.java (2) 	src/main/java/com/puppycrawl/tools/checkstyle 	JavaParser.java (2) 	TreeWalker.java (2) 	src/main/java/com/puppycrawl/tools/checkstyle/utils 	CheckUtil.java (1) 	CommonUtil.java (1) 	JavadocUtil.java (1) 	src/main/java/com/puppycrawl/tools/checkstyle/xpath 	XpathQueryGenerator.java (1)    Javadoc - Declaration has problems in Javadoc references (2) 	src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc 	AbstractJavadocCheck.java (1) 	90: violateExecutionOnNonTightHtml Symbol firstNonTightHtmlTag is inaccessible from here 	src/test/java/com/puppycrawl/tools/checkstyle/checks 	UniquePropertiesCheckTest.java (1) 	84: testNotFoundKey() Symbol getLineNumber(FileText, String) is inaccessible from here  JVM languages - Unstable API Usage (37) 	src/main/java/com/puppycrawl/tools/checkstyle 	PropertyCacheFile.java (3) 	167: flushAndCloseOutStream() 'Flushables' is marked unstable 	169: flushAndCloseOutStream() 'Closeables' is marked unstable 	303: loadExternalResource() 'ByteStreams' is marked unstable 	src/main/java/com/puppycrawl/tools/checkstyle/utils 	ModuleReflectionUtil.java (4) 	58: getCheckstyleModules() 'ClassPath' is marked unstable 	58: getCheckstyleModules() 'ClassPath' is marked unstable 	61: getCheckstyleModules() 'ClassInfo' is marked unstable 	61: getCheckstyleModules() 'ClassPath' is marked unstable 	src/test/java/com/puppycrawl/tools/checkstyle/internal/utils 	CheckUtil.java (4) 	169: getCheckstyleModulesRecursive() 'ClassPath' is marked unstable 	169: getCheckstyleModulesRecursive() 'ClassPath' is marked unstable 	171: getCheckstyleModulesRecursive() 'ClassInfo' is marked unstable 	171: getCheckstyleModulesRecursive() 'ClassPath' is marked unstable 	src/test/java/com/puppycrawl/tools/checkstyle 	PropertyCacheFileTest.java (26)  Modularization issues - Class independent of its module (Errors) (3) 	src/test/java/com/puppycrawl/tools/checkstyle/grammar 	GeneratedJavaTokenTypesTest.java (1) 	29: GeneratedJavaTokenTypesTest Class GeneratedJavaTokenTypesTest has no dependencies or dependents in its module  	src/test/java/com/puppycrawl/tools/checkstyle/grammar/javadoc 	GeneratedJavadocTokenTypesTest.java (1) 	30: GeneratedJavadocTokenTypesTest Class GeneratedJavadocTokenTypesTest has no dependencies or dependents in its module  	src/test/java/com/puppycrawl/tools/checkstyle/internal 	AllTestsTest.java (1) 	39: AllTestsTest Class AllTestsTest has no dependencies or dependents in its module   Packaging issues - Class only used from one other package (Errors) (5) 	src/main/java/com/puppycrawl/tools/checkstyle/grammar 	CommentListener.java (1) 	28: CommentListener Class CommentListener has only dependencies on and/or dependents in package 'com.puppycrawl.tools.checkstyle.api'  	src/test/java/com/puppycrawl/tools/checkstyle/grammar/javadoc 	JavadocParseTreeTest.java (1) 	33: JavadocParseTreeTest Class JavadocParseTreeTest has only dependencies on and/or dependents in package 'com.puppycrawl.tools.checkstyle'  	src/test/java/com/puppycrawl/tools/checkstyle/internal/utils 	CloseAndFlushTestByteArrayOutputStream.java (1) 	29: CloseAndFlushTestByteArrayOutputStream Class CloseAndFlushTestByteArrayOutputStream has only dependencies on and/or dependents in package 'com.puppycrawl.tools.checkstyle'  	XdocUtil.java (1) 	44: XdocUtil Class XdocUtil has only dependencies on and/or dependents in package 'com.puppycrawl.tools.checkstyle.internal'  	XpathUtil.java (1) 	37: XpathUtil Class XpathUtil has only dependencies on and/or dependents in package 'com.puppycrawl.tools.checkstyle.xpath'   Probable bugs - Optional.get() is called without isPresent() check (2) 	src/main/java/com/puppycrawl/tools/checkstyle 	PackageObjectFactory.java (1) 	324: getShortFromFullModuleNames() Optional.get() without 'isPresent()' check 	src/test/java/com/puppycrawl/tools/checkstyle/utils 	TokenUtilTest.java (1) 	279: testFindFirstTokenByPredicate() Optional.get() without 'isPresent()' check  Resource management - AutoCloseable used without 'try'-with-resources (Errors) (5) 	src/test/java/com/puppycrawl/tools/checkstyle/internal 	AllTestsTest.java (5) 	45: testAllInputsHaveTest() 'Stream' used without 'try'-with-resources statement  	52: testAllInputsHaveTest() 'Stream' used without 'try'-with-resources statement  	56: testAllInputsHaveTest() 'Stream' used without 'try'-with-resources statement  	66: testAllTestsHaveProductionCode() 'Stream' used without 'try'-with-resources statement  	73: testAllTestsHaveProductionCode() 'Stream' used without 'try'-with-resources statement   Verbose or redundant code constructs - Redundant String operation (Errors) (12) 	src/main/java/com/puppycrawl/tools/checkstyle 	AuditEventDefaultFormatter.java (2) 	117: getCheckShortName() Call to checkFullName.length() is redundant  	117: getCheckShortName() Call to checkFullName.length() is redundant  	src/main/java/com/puppycrawl/tools/checkstyle/checks/design 	VisibilityModifierCheck.java (4) 	832: getClassShortNames() Call to canonicalClassName.length() is redundant  	832: getClassShortNames() Call to canonicalClassName.length() is redundant  	846: getClassShortName() Call to canonicalClassName.length() is redundant  	846: getClassShortName() Call to canonicalClassName.length() is redundant  	src/main/java/com/puppycrawl/tools/checkstyle/checks 	TranslationCheck.java (2) 	414: extractBaseName() Call to regexp.length() is redundant  	414: extractBaseName() Call to regexp.length() is redundant  	src/test/java/com/puppycrawl/tools/checkstyle 	MainTest.java (4) 	585: testLoadPropertiesIoException() Call to causeMessage.length() is redundant  	585: testLoadPropertiesIoException() Call to causeMessage.length() is redundant  	588: testLoadPropertiesIoException() Call to localizedMessage.length() is redundant  	588: testLoadPropertiesIoException() Call to localizedMessage.length() is redundant   XML - Deprecated elements (2) 	pom.xml (2) 	839:  The tag is marked as deprecated 	2184:  The tag is marked as deprecated ```","closed","miscellaneous,","romani","2018-12-02T15:37:33Z","2018-12-03T14:34:24Z"
"","6480","New check: AvoidDoubleBraceInitialization","Many people consider double-brace initialization as an anti-pattern, for example as it unnecessarily creates subclasses and also might break `equals` checks that most often consider instances to be non-equal if the class is not the same to ensure symmetric behavior of the `equals` method as required by its contract.  I'd like to propose a check that prevents double-brace initialization.  Logic I suggest is, that a finding is added if an `INSTANCE_INIT` token has no siblings besides `LCURLY`, other `INSTANCE_INIT`s, `RCURLY`, `SINGLE_LINE_COMMENT` or `BLOCK_COMMENT_BEGIN` which means, as soon as also some field or method is added, it is not considered double-brace initialization and thus is fine.  **_Check config:_** ```xml  ```  **_Here some code example use-cases:_** ```java // will fail List list = new ArrayList() {     {         add(null);     } }; // will fail list = new ArrayList() {     {         add(null);     }     {         add(null);     } }; // will fail list = new ArrayList() {     // foo     {         add(null);     } }; // will fail list = new ArrayList() {     {         add(null);     } // foo }; // will fail list = new ArrayList() {     {         add(null);     }     // foo }; // will fail list = new ArrayList() {     /* foo */     {         add(null);     } }; // will fail list = new ArrayList() {     {         add(null);     }     /* foo */ }; // will fail list = new ArrayList() {     {         add(null);     } /* foo */ }; // will not fail list = new ArrayList() {     {         add(null);     }      public void foo() {     } }; // will not fail list = new ArrayList() {     private Object o;     {         add(null);     } }; ```  ---  To reach this with 8.18, one could do ```xml                              ```","closed","new module,","Vampire","2019-02-25T13:36:14Z","2020-02-05T05:05:55Z"
"","6785","minor: fix snyk link in README","looks like snyk is switched to exact ID usage to show report for project","closed","","romani","2019-05-27T17:22:23Z","2019-05-27T17:25:27Z"
"","6478","Remove DTDs from http://checkstyle.sourceforge.net and from http://puppycrawl.com/","location on http://checkstyle.sourceforge.net/ is not secure.  All checkstyle version below 8.18 are not very secure, see details at #6474.  I will move DTDs to another folder to let user experience failure and find this issue as request to update configuration.  Upgrade is simple: `http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd` =>  `https://checkstyle.org/dtds/configuration_1_3.dtd` and  `http://puppycrawl.com/dtds/configuration_1_3.dtd` =>  `https://checkstyle.org/dtds/configuration_1_3.dtd`  If you can not update, please write a comment, I might return DTDs to original place to give people some time to migrate.","closed","breaking compatibility,","romani","2019-02-25T03:28:30Z","2019-04-14T13:51:49Z"
"","6764","Fix sonar warnings","List of sonar warnings to correct: 1. https://sonarcloud.io/project/issues?id=com.puppycrawl.tools%3Acheckstyle&open=AWkisA05gtFwgfOLg-aa&resolved=false&severities=MINOR&types=CODE_SMELL 2. https://sonarcloud.io/project/issues?id=com.puppycrawl.tools%3Acheckstyle&open=AWb-Jn2kTJjFgJLTEG8I&resolved=false&severities=MAJOR&types=CODE_SMELL 3. https://sonarcloud.io/project/issues?id=com.puppycrawl.tools%3Acheckstyle&open=AWb-Jn2kTJjFgJLTEG8I&resolved=false&severities=MAJOR&types=CODE_SMELL 4. https://sonarcloud.io/project/issues?id=com.puppycrawl.tools%3Acheckstyle&open=AV3yuSS3pvRVEt3b0XpD&resolved=false&severities=MINOR&types=CODE_SMELL  Also change following code for more functional style: 1. https://github.com/checkstyle/checkstyle/blob/51bf6a69f1e4d3e11503f539facdfd099a944af7/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java#L263-L267 2. https://github.com/checkstyle/checkstyle/blob/51bf6a69f1e4d3e11503f539facdfd099a944af7/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java#L278-L281","closed","miscellaneous,","strkkk","2019-05-14T09:40:15Z","2019-05-17T16:50:30Z"
"","6132","Confiruration xml inclusion/import","Let's assume we have several different projects supported by different teams inside one company. There are common checkstyle rules for all, and there are specific cases per each project If we had url http://checkstyle-repo/shared-config.xml, which provides something like this: ```xml                                                        ``` we could use something like this ```xml                                                        ``` assuming the result ```xml                                                                ``` What is the point? if we decided to add new common check, we just change one file and provide it to all the consumers instead of editing each configuration  Are there any pitfalls on this feature?  If it's ok, I'm going to try to implement it.  Looks pretty easy - requires changes in ConfigLoader and DTD  p.s. I found no issues on subj, but if exists - I'm sorry","closed","","dzharikhin","2018-09-29T00:16:55Z","2018-10-02T21:13:00Z"
"","6501","minor: removed unnecessary multi-file verify with single file","Just something I noticed when working on the other PR.","closed","","rnveach","2019-03-03T23:26:36Z","2019-03-04T02:00:37Z"
"","6665","minor: test","Just a test.","closed","","rnveach","2019-04-14T15:32:53Z","2019-04-14T17:56:52Z"
"","6228","set up JDK11 build","Java 11 was released recently. And CI (at least Travis/AppVeyor) already has ability to build the Checkstyle with JDK11.  But the Checkstyle build with jdk 11 is broken. It requires a bit of minor changes in the code to fix:  - [x] PowerMock library version is outdated and should be updated (#6238); - [x] The `PackageObjectFactoryTest` should be rewritten. It is not possible to throw an undeclared exception from a mocked method anymore, so `when(classLoader.getURLs()).thenThrow(IOException.class)` fails (#6238); - [x] `javax.annotation.Generated` annotation was removed in favor of `javax.annotation.processing.Generated` (#6252); - [x] all `sun.*` packages were completely removed (#6252); - [x] replace `` with `text` in javadoc (#5750); - [x] In the `ConfigurationLoaderTest` an exception message was changed (#6310); - [ ] add java1x parser tests and javac{10..11} to travis.sh","closed","miscellaneous,","pbludov","2018-11-24T09:13:20Z","2018-12-27T14:53:16Z"
"","6316","Grammar: add new tokens for java 10/11","Java 10 adds local variable type inference ``` var x = 1; var y = new ArrayList(); ``` Java 11 adds new syntax for an implicitly typed lambda parameter ``` Function identity = (@NotNull var value) -> value; ```  We need to update the parser to handle them correctly.","closed","antlr,","pbludov","2018-12-27T08:46:34Z","2019-05-16T13:21:03Z"
"","6138","Multiline error messages","It would be nice to support multiline error messages. For example: ```    ...     ```","closed","","leventov","2018-10-12T21:22:14Z","2018-10-17T16:13:42Z"
"","6481","New module: MatchXpath","It would be nice if you could write custom checks by simply using XPath, this way any custom check wanted could easily be configured via XPath.  Currently you have to find some check that adds a violation in a superset of the cases you want to be reported and then use `suppress-xpath` to suppress the findings you are not interested in.  For example to forbid double-brace initialization, you currently need to use ```xml                              ``` With a check like I suggest you could simply do ```xml        ```  -----  One more idea is to validate empty files, even they have whole content as commented out, example #1149.","closed","xpath,","Vampire","2019-02-25T13:45:23Z","2020-12-31T17:51:15Z"
"","6570","Exclude module-info.java from Google and Sun configurations","It would be helpful to exclude the `module-info.java` ([Reference](https://checkstyle.org/config_filefilters.html#BeforeExecutionExclusionFileFilter_Examples)) from the [google_checks.xml](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml) and [sun_checks.xml](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/sun_checks.xml).  That way these configurations would work with modular projects out of the box.","closed","miscellaneous,","mkroening","2019-03-14T11:42:15Z","2019-03-20T12:35:27Z"
"","6716","It should be clear that the template is mandatory and not just a suggestion, and failing to follow it, will cause the ticket to be ignored and closed. Fixes #6742","It should be clear that the template is mandatory and not just a suggestion, and failing to follow it, will cause the ticket to be ignored and closed.","closed","","aaime","2019-05-05T12:19:44Z","2019-05-11T14:52:08Z"
"","6679","config: remove oracle-java8-installer","It seems that we do not need the package 'oracle-java8-installer'. This is some kind of atavism. It is not needed for the build process, since the `jdk-switcher` does its job well.","closed","","pbludov","2019-04-18T07:44:44Z","2019-04-20T19:28:30Z"
"","6833","Make DetailAST iterable?","It is very common to see following pattern in checkstyle codebase: ``` for (DetailAST child = parentNode.getFirstChild();                 child != null;                 child = child.getNextSibling()) { /* some logic */ } ```  Why don't make DetailAST iterable to allow usage for foreach loop when we want to iterate over children of ast node? Example above will be like: ``` for (DetailAST child : parentNode) { /* some logic */ } ```","open","","strkkk","2019-06-18T08:47:03Z","2019-06-26T09:00:34Z"
"","6227","minor: skip temp file english.words from checkstyle validation","it is not first time I have: `[checkstyle] [ERROR] ....checkstyle/checkstyle/.ci/jsoref-spellchecker/english.words:1: File does not end with a newline. [NewlineAtEndOfFile]`  ``` main:  execute:      [echo] Checkstyle started (checkstyle_checks.xml): 23/11/2018 06:55:40 AM [checkstyle] Running Checkstyle  on 1012 files      [echo] Checkstyle finished (checkstyle_checks.xml) : 23/11/2018 06:55:41 AM      [echo] Checkstyle started (checkstyle_non_main_files_checks.xml): 23/11/2018 06:55:40 AM [checkstyle] Running Checkstyle  on 1641 files [checkstyle] [ERROR] ....checkstyle/checkstyle/.ci/jsoref-spellchecker/english.words:1: File does not end with a newline. [NewlineAtEndOfFile]   ```","closed","","romani","2018-11-23T16:18:52Z","2018-11-24T15:49:53Z"
"","6077","Unstable build due to not accesible decoration-1.0.0.xsd","it is become annoying to have CI failure due to connection problem to XSD . It is also a problem for offline build - #6041  from https://travis-ci.org/checkstyle/checkstyle/jobs/414666330#L1352 ``` [INFO] --- xml-maven-plugin:1.0.2:validate (default) @ checkstyle --- [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 08:36 min [INFO] Finished at: 2018-08-10T21:32:53Z [INFO] Final Memory: 53M/936M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.codehaus.mojo:xml-maven-plugin:1.0.2:validate (default) on project checkstyle: Failed to load schema with public ID null, system ID http://maven.apache.org/xsd/decoration-1.0.0.xsd: schema_reference.4: Failed to read schema document 'null', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not . -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.codehaus.mojo:xml-maven-plugin:1.0.2:validate (default) on project checkstyle: Failed to load schema with public ID null, system ID http://maven.apache.org/xsd/decoration-1.0.0.xsd: schema_reference.4: Failed to read schema document 'null', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not .     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:213)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.apache.maven.plugin.MojoExecutionException: Failed to load schema with public ID null, system ID http://maven.apache.org/xsd/decoration-1.0.0.xsd: schema_reference.4: Failed to read schema document 'null', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not .     at org.codehaus.mojo.xml.ValidateMojo.getSchema (ValidateMojo.java:128)     at org.codehaus.mojo.xml.ValidateMojo.validate (ValidateMojo.java:272)     at org.codehaus.mojo.xml.ValidateMojo.execute (ValidateMojo.java:318)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) Caused by: org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'null', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not .     at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException (ErrorHandlerWrapper.java:203)     at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error (ErrorHandlerWrapper.java:134)     at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError (XMLErrorReporter.java:396)     at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError (XMLErrorReporter.java:306)     at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.reportSchemaErr (XSDHandler.java:4158)     at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.reportSchemaError (XSDHandler.java:4141)     at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.getSchemaDocument1 (XSDHandler.java:2485)     at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.getSchemaDocument (XSDHandler.java:2308)     at com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler.parseSchema (XSDHandler.java:565)     at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadSchema (XMLSchemaLoader.java:610)     at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadGrammar (XMLSchemaLoader.java:569)     at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader.loadGrammar (XMLSchemaLoader.java:535)     at com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory.newSchema (XMLSchemaFactory.java:254)     at javax.xml.validation.SchemaFactory.newSchema (SchemaFactory.java:638)     at org.codehaus.mojo.xml.ValidateMojo.getSchema (ValidateMojo.java:123)     at org.codehaus.mojo.xml.ValidateMojo.validate (ValidateMojo.java:272)     at org.codehaus.mojo.xml.ValidateMojo.execute (ValidateMojo.java:318)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) [ERROR]  [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException ```","closed","miscellaneous,","romani","2018-08-10T23:04:51Z","2018-08-11T23:54:27Z"
"","6695","Issue #6694: refactor AbbreviationAsWordInName to recognize numbers","Issue: https://github.com/checkstyle/checkstyle/pull/6694  Recognizes numbers as part of abbreviations, as described in the issue.","closed","discussion ongoing,","Scrayos","2019-04-24T10:53:31Z","2019-04-27T18:40:59Z"
"","6584","Issue #6570: Exclude module-info.java from Google and Sun configurations","Issue: #6570","closed","","mkroening","2019-03-17T15:21:37Z","2019-03-20T12:33:25Z"
"","6640","Issue #6540: correct false positive AnnotationUseStyle","Issue: #6540  The example from original issue (@Anno(@Value)) was already in test class (line 71), but it was in the list of violations for both ALWAYS and NEVER rules therefore it was removed for NEVER-cases.","closed","","strkkk","2019-04-06T10:18:10Z","2021-01-29T11:40:59Z"
"","6677","Issue #6489: correct one-char loop variable in LocalVariableNameCheck","Issue: #6489  Case for one-char loop variable is treated differently now, test case was updated.  Regression report will be soon.","closed","","strkkk","2019-04-17T20:47:56Z","2019-05-23T12:52:10Z"
"","6461","Issue #6450: Fixed RedundantImportCheck to detect specific and wildcard imports from the same package","Issue: #6450","closed","awaiting changes,","Vantuz","2019-02-23T16:55:14Z","2019-05-18T22:21:26Z"
"","6317","Issue #6316: Extend grammar to support Java 10/11 syntax","Issue: #6316   [WIP] not a real PR for now, just tests from #6228","closed","","pbludov","2018-12-27T09:01:04Z","2019-01-02T12:29:02Z"
"","6178","Issue #6083: Add Limitations to 'index.xml.vm'","Issue: #6083","closed","","arjenzhou","2018-10-29T12:55:15Z","2018-10-30T09:01:56Z"
"","6089","Issue #5608: Adding support for allowedAnnotations in javadocTypeCheck","Issue: #5608  Added support of allowedAnnotations in javadocType, following the example of javadocMethod.","closed","","ngeor","2018-08-18T10:45:33Z","2018-08-18T11:24:46Z"
"","6090","Issue #5608: Adding support for allowedAnnotations in javadocTypeCheck","Issue: #5608  Copied the example of javadocMethod. Moved code to util class to avoid duplication. Added tests.","closed","","ngeor","2018-08-18T11:19:04Z","2018-11-14T12:51:37Z"
"","6313","minor: fix 8.12 release notes for ImportOrder (issue title already updated)","issue was found during https://github.com/checkstyle/sonar-checkstyle/issues/156  issue title was already updated by me.","closed","","romani","2018-12-25T18:33:16Z","2018-12-25T20:10:56Z"
"","6946","Add suppression filters to google and sun configs","issue is found during thinking on reasons of chained execution of configs - #6942   If users what to use google style as is, but some version of checkstyle got regression (false-postives) or user found bug in checkstyle that cause falsepositive kin his build .... there is no way for user to start using suppression abilities of chekstyle without making a copy of google config to his codebase.  Proposal: to add to google_checks.xml something like: ```                             ```  so user can define only suppression file path in his code base and provide chekstyle path to it. So user will be able to suppress violations from some Checks in any form he like.  Is there benefit for some other filter to be placed in config like this ?","closed","new feature,","romani","2019-08-06T23:19:35Z","2020-01-31T11:17:30Z"
"","6813","RedundantModifier: violation in public c-tor of private inner class","issue is detected at https://github.com/sevntu-checkstyle/sevntu.checkstyle/pull/742#issuecomment-498220119 documentation does not define a case that c-tor of inner classes should not have public on inner classes c-tors. It is not redundant modifier presence or absence of it do make slight difference - https://pmd.github.io/pmd-6.15.0/pmd_rules_java_bestpractices.html#accessorclassgeneration   ``` /var/tmp $ javac Test.java  /var/tmp $ cat config.xml                                   /var/tmp $ cat Test.java  public class Test {  void method(){   Inner ic = new Inner();  }  private class Inner {   public Inner(){}  } }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $java -jar checkstyle-8.21-all.jar -c config.xml Test.java  Starting audit... [ERROR] /var/tmp/Test.java:6:3: Redundant 'public' modifier. [RedundantModifier] Audit done. Checkstyle ends with 1 errors. ```  ---------------  expected is no violations","closed","","romani","2019-06-12T13:08:41Z","2020-01-06T03:13:00Z"
"","6989","Issue #6982: kill mutation survival at Main.listFiles() over canRead()","Issue #6982  it will not work on Windows, but our pitests are so linux dependent, so I think it is ok. creation of file that user does not have access , will result in pollution on users filesystem (as we will not be able to remove it), it is not good.  ![image](https://user-images.githubusercontent.com/812984/63219589-a0f8f180-c129-11e9-9aa5-04e840068086.png)  ![image](https://user-images.githubusercontent.com/812984/63219596-c685fb00-c129-11e9-9dc9-bd2bbc8e2339.png)","closed","","romani","2019-08-18T01:51:16Z","2019-08-18T17:40:39Z"
"","6990","Issue #6982:  Issue #6982: kill mutation in Main.java by always closing streams","Issue #6982  ![image](https://user-images.githubusercontent.com/812984/63219579-5bd4bf80-c129-11e9-9715-284d10cee7de.png)  ![image](https://user-images.githubusercontent.com/812984/63219583-7f980580-c129-11e9-888b-50e5b9badacc.png)","closed","","romani","2019-08-18T02:05:40Z","2019-08-21T17:09:00Z"
"","6980","Issue #6974: move error count print of CLI to stderr","Issue #6974  As side effect of change, there will be no counter of errors print when CLI is stopped with exception.","closed","","romani","2019-08-14T22:49:24Z","2019-08-16T23:38:33Z"
"","6995","Issue #6966: aligned javadoc/xdoc for CommentsIndentation","Issue #6966 (part of #5750)  No changes in the code. Some of the lines in `config_misc.xml` has been shortened to fit to the '100 character per line' limit.","closed","","pbludov","2019-08-21T19:41:33Z","2019-08-22T05:31:10Z"
"","6996","Issue #6966: aligned javadoc/xdoc for OrderedProperties","Issue #6966 (part of #5750)  No changes in the code. Almost empty PR since the check is new and already aware of `XdocsJavaDocsTest`.","closed","","pbludov","2019-08-21T19:50:12Z","2019-08-22T05:31:23Z"
"","7001","Issue #6966: aligned javadoc/xdoc for TrailingComment","Issue #6966 (part of #5750)  No changes in the code.","closed","","pbludov","2019-08-22T18:08:57Z","2019-08-23T04:50:32Z"
"","6997","Issue #6966: aligned javadoc/xdoc for UniqueProperties","Issue #6966 (part of #5750)  No changes in the code.","closed","","pbludov","2019-08-21T19:56:39Z","2019-08-22T12:10:33Z"
"","6970","Issue #6966: aligned javadoc/xdoc for UncommentedMain","Issue #6966 (part of #5750)  No changes in the code.","closed","","pbludov","2019-08-12T08:08:59Z","2019-08-13T06:34:23Z"
"","6969","Issue #6966: aligned javadoc/xdoc for OuterTypeFilename","Issue #6966 (part of #5750)  No changes in the code.","closed","","pbludov","2019-08-12T08:03:13Z","2019-08-15T11:39:06Z"
"","6968","Issue #6966: aligned javadoc/xdoc for FinalParameters","Issue #6966 (part of #5750)  No changes in the code.","closed","","pbludov","2019-08-12T07:58:28Z","2019-08-13T06:32:35Z"
"","6967","Issue #6966: aligned javadoc/xdoc for ArrayTypeStyle","Issue #6966 (part of #5750)  No changes in the code.","closed","","pbludov","2019-08-12T07:04:40Z","2019-08-13T06:34:00Z"
"","6976","Issue #6966: aligned javadoc/xdoc for AvoidEscapedUnicodeCharacters","Issue #6966 (part of #5750)  No changes in the code, but many changes in the comments.","closed","","pbludov","2019-08-13T09:57:43Z","2019-08-15T06:32:49Z"
"","6999","Issue #6966: aligned javadoc/xdoc for DescendantToken","Issue #6966 (part of #5750)  Minor changes to the `XdocsPagesTest` to treat an empty `int array` as `{}` for properties of the type `Set of Tokens`. This is need to avoid ""Default value is .""","closed","","pbludov","2019-08-22T08:25:45Z","2019-08-22T21:42:45Z"
"","6965","Issue #6954: Add ID format property to SuppressWithPlainTextCommentFilter","Issue #6954: This PR adds an `idFormat` property to SuppressWithPlainTextCommentFilter.  Related PR's added an `idFormat` property to SuppressionCommentFilter (#6928) and SuppressWithNearbyCommentFilter (#6951)  I will provide regression reports following the same pattern as in those PR's.","closed","","esilkensen","2019-08-11T20:31:07Z","2019-08-19T16:51:09Z"
"","6950","Issue #6949: spell checker is failing due to failure to get words file","Issue #6949  testing ....","closed","","romani","2019-08-07T01:06:25Z","2019-08-08T00:26:50Z"
"","6953","Issue #6948: javadoc error in NeedBracesCheck.java","Issue #6948: Fix is to escape `>` as `>`","closed","","esilkensen","2019-08-07T06:47:46Z","2019-08-07T19:27:51Z"
"","6952","Issue #6947: eclipse violation over javadoc of AtclauseOrderCheck.java","Issue #6947: this seems like a bug in Eclipse, but as a workaround I think we can just move the `{@code}` block onto one line.","closed","","esilkensen","2019-08-07T06:41:39Z","2019-08-07T15:05:37Z"
"","6939","Issue 6938: sort values for String Set properties","Issue #6938   First commit to format xdocs/javadoc. Second commit to fix `XdocsPagesTest#getModulePropertyExpectedValue`","closed","","pbludov","2019-08-02T09:18:51Z","2019-08-02T21:20:29Z"
"","6937","Issue #6936: add short versions E and w for the CLI","Issue #6936","closed","","rnveach","2019-08-02T00:02:33Z","2019-08-02T09:59:33Z"
"","6944","Issue #6933: Update link to latest version of CLI jar","Issue #6933","closed","","romani","2019-08-06T17:38:36Z","2019-08-08T17:31:43Z"
"","6940","Issue #6929: fix violations for JavadocBlockTagLocation","Issue #6931   Fixes for Javadoc only.","closed","","pbludov","2019-08-02T21:17:38Z","2019-08-22T18:12:33Z"
"","6931","Issue #6929: add check JavadocBlockTagLocation","Issue #6929   Regression report: https://pbludov.github.io/issue-6929/ Mostly parse errors. Some catches: https://pbludov.github.io/issue-6929/Hbase/index.html#A163 https://pbludov.github.io/issue-6929/hibernate-orm/index.html#A82 https://pbludov.github.io/issue-6929/hibernate-orm/index.html#A96 https://pbludov.github.io/issue-6929/hibernate-orm/index.html#A125  To discuss: use this check in google/sun configs?","closed","","pbludov","2019-07-27T21:31:21Z","2019-08-15T06:32:25Z"
"","6935","Issue #6919: warm up maven cache in batch mode to avoid progress output","Issue #6919","closed","","romani","2019-08-01T15:52:25Z","2019-08-01T18:39:49Z"
"","6927","Issue #6919: hide maven download text to prevent log overflow on Travis","Issue #6919","closed","","romani","2019-07-27T04:16:35Z","2019-08-01T15:53:06Z"
"","6917","Issue #6910: revert maven property name for sevntu-checks","Issue #6910   Maven property name for sevntu-checks was reverted because other projects might already use it (e.g.: https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/.ci/travis.sh#L86)","closed","","rdiachenko","2019-07-23T19:22:55Z","2019-07-24T05:11:57Z"
"","6912","Issue #6910: replace sevntu-checkstyle-maven-plugin with sevntu-checks","Issue #6910  `sevntu-checkstyle-maven-plugin` was replaced with `sevntu-checks` dependency","closed","","rdiachenko","2019-07-18T21:30:48Z","2019-07-23T19:26:36Z"
"","6909","Issue #6902: format xdoc/javadoc files to follow rule of LineLength","Issue #6902  Changes only in the config, comments and tests.","closed","","pbludov","2019-07-17T17:29:14Z","2019-07-19T06:28:37Z"
"","6901","Issue #6900: remove absolute checkstyle links, change javadoc routine","Issue #6900","closed","","rnveach","2019-07-13T19:42:01Z","2019-07-14T18:34:18Z"
"","6891","Issue #6890: make SuppressWithPlainTextCommentFilter.Suppression private","Issue #6890  Now we need to use reflection to access the `Suppression` class.","closed","","pbludov","2019-07-09T19:56:12Z","2019-08-22T18:14:04Z"
"","6951","Issue #6884: Add ID format property to SuppressWithNearbyCommentFilter","Issue #6884: This PR adds an `idFormat` property to SuppressWithNearbyCommentFilter.   Currently, when deciding if an audit event should be suppressed, this filter first matches the event source against the `checkFormat`. If that fails, it matches the event module ID against the `checkFormat`. With this PR, the filter instead matches the event module ID against the new `idFormat` property (additional details in issue description).  Related PR that added an `idFormat` property to SuppressionCommentFilter: #6928   I will provide regression reports following the same pattern as in that PR.","closed","","esilkensen","2019-08-07T06:11:58Z","2019-08-11T19:23:28Z"
"","6866","Issue #5941: remove spaces on the end that were connected to tests","Issue #6865 and Issue #5941  Windows would fail without #6865 . There are still 2 areas with spaces on the end, because they are connected to code coverage.","closed","","rnveach","2019-06-30T22:08:07Z","2019-07-09T09:40:12Z"
"","6859","Issue #6857: fix javadoc check on local variables","Issue #6857  Regression to come.","closed","","rnveach","2019-06-27T22:42:22Z","2019-06-29T14:12:57Z"
"","6855","Issue #6854: make SuppressWithNearbyCommentFilter.Tag private","Issue #6854  Now we need to use reflection to access the `Tag` class.","closed","","pbludov","2019-06-26T19:58:03Z","2019-07-03T08:01:17Z"
"","6853","Issue #6844: Make SuppressionCommentFilter.Tag private","Issue #6844   Now we need to use reflection to access the Tag class.","closed","","pbludov","2019-06-26T19:43:46Z","2019-08-22T18:17:49Z"
"","6843","Issue #6835: add Jsr305AnnotationsCheck to sevntu config","Issue #6835  first fix attempt was at #6836","closed","","romani","2019-06-22T15:55:13Z","2019-06-22T17:17:00Z"
"","6836","Issue #6835: add Jsr305AnnotationsCheck to sevntu config","Issue #6835","closed","blocked,","romani","2019-06-19T04:24:52Z","2019-06-22T15:55:22Z"
"","6827","Issue #6821: disable SimplifiableJUnitAssertion inspection","Issue #6821  we should merge this PR if we come to agreement at #6823","closed","","romani","2019-06-16T03:50:55Z","2019-06-16T18:14:34Z"
"","6829","Issue #6821: resolve IDEA violations 'Validation by JSON Schema'","Issue #6821  details are in issue comments. original PR #6825","closed","","romani","2019-06-16T18:44:34Z","2019-06-16T21:13:06Z"
"","6825","Issue #6821: resolve IDEA violations 'Validation by JSON Schema'","Issue #6821  details are in issue comments.","closed","","romani","2019-06-16T03:35:41Z","2019-06-16T18:45:33Z"
"","6809","Xdoc 'properties' subsection shoud be just one table","Issue #6800  This PR affects only `xdocs/config_filters.xml`, other xdocs are OK.","closed","","pbludov","2019-06-07T07:33:28Z","2019-06-12T16:25:18Z"
"","6760","Issue #6764: fix some sonar warnings and small refactoring","Issue #6764","closed","","strkkk","2019-05-13T10:38:20Z","2021-01-29T11:41:06Z"
"","6768","Issue #6749: aligned javadoc/xdoc for NoWhitespaceAfter","Issue #6749 (sequel for #6763)   Minor changes to keep in sync with `NoWhitespaceBefore`","closed","","pbludov","2019-05-19T12:22:09Z","2019-05-22T19:39:14Z"
"","6770","Issue #6749: aligned javadoc/xdoc for OperatorWrap","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-20T19:43:35Z","2019-05-22T19:39:29Z"
"","6769","Issue #6749: aligned javadoc/xdoc for EmptyLineSeparator","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-19T14:30:07Z","2019-05-25T10:02:26Z"
"","6767","Issue #6749: aligned javadoc/xdoc for WhitespaceAround","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-17T12:53:46Z","2019-05-22T19:39:43Z"
"","6766","Issue #6749: aligned javadoc/xdoc for SeparatorWrap","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-17T07:42:57Z","2019-05-17T12:54:50Z"
"","6765","Issue #6749: aligned javadoc/xdoc for NoWhitespaceBefore","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-17T07:23:49Z","2019-05-20T19:08:16Z"
"","6763","Issue #6749: aligned javadoc/xdoc for NoWhitespaceAfter","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-14T08:14:22Z","2019-05-15T10:27:14Z"
"","6762","Issue #6749: aligned javadoc/xdoc for GenericWhitespace","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-14T07:48:04Z","2019-05-17T07:10:29Z"
"","6761","Issue #6749: aligned javadoc/xdoc for EmptyForIteratorPad","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-14T07:25:21Z","2019-05-17T12:54:52Z"
"","6759","Issue #6749: aligned javadoc/xdoc for WhitespaceAfter","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-13T09:52:17Z","2019-05-14T07:14:31Z"
"","6758","Issue #6749: aligned javadoc/xdoc for TypecastParenPad","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-13T09:49:01Z","2019-05-14T07:14:21Z"
"","6757","Issue #6749: aligned javadoc/xdoc for SingleSpaceSeparator","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-13T09:47:32Z","2019-05-15T10:27:40Z"
"","6756","Issue #6749: aligned javadoc/xdoc for ParenPad","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-13T09:45:38Z","2019-05-15T10:27:27Z"
"","6755","Issue #6749: aligned javadoc/xdoc for NoLineWrap","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-13T09:39:54Z","2019-05-14T07:14:09Z"
"","6754","Issue #6749: aligned javadoc/xdoc for MethodParamPad","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-13T09:35:46Z","2019-05-14T07:13:56Z"
"","6753","Issue #6749: aligned javadoc/xdoc for FileTabCharacter","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-13T09:33:53Z","2019-05-14T07:13:42Z"
"","6751","Issue #6749: aligned javadoc/xdoc for EmptyForInitializerPad","Issue #6749 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-12T23:10:41Z","2019-05-14T07:13:46Z"
"","6744","Issue #6742: clarify in issue template to follow the rules","Issue #6742  Continuation of https://github.com/checkstyle/checkstyle/pull/6716 .  > We probably will need to your feedback on PR description too :) - https://github.com/checkstyle/checkstyle/blob/master/.github/PULL_REQUEST_TEMPLATE.md   Template already stated that CI must pass. The only thing I can think of adding is the command to run `mvn verify test` locally.","closed","","rnveach","2019-05-11T14:37:27Z","2019-05-11T15:26:23Z"
"","6839","Issue #6726: aligned javadoc/xdoc for SuppressionCommentFilter","Issue #6726 (part of #5750)  The `Notes` section now before `Properties`.","closed","","pbludov","2019-06-20T07:09:30Z","2019-07-07T06:07:04Z"
"","6930","Issue #6726: aligned javadoc/xdoc for BeforeExecutionExclusionFileFilter","Issue #6726 (part of #5750)  No changes in the code.","closed","","pbludov","2019-07-27T13:23:18Z","2019-07-29T18:12:30Z"
"","6922","Issue #6726: aligned javadoc/xdoc for SuppressionXpathSingleFilter","Issue #6726 (part of #5750)  No changes in the code.","closed","","pbludov","2019-07-26T19:00:18Z","2019-07-27T12:57:34Z"
"","6898","Issue #6726: aligned javadoc/xdoc for SuppressionXpathFilter","Issue #6726 (part of #5750)  No changes in the code.","closed","","pbludov","2019-07-13T06:31:18Z","2019-07-13T17:07:17Z"
"","6896","Issue #6726: aligned javadoc/xdoc for SeverityMatchFilter","Issue #6726 (part of #5750)  No changes in the code.","closed","","pbludov","2019-07-11T19:06:33Z","2019-07-12T09:40:48Z"
"","6895","Issue #6726: aligned javadoc/xdoc for SuppressWarningsFilter","Issue #6726 (part of #5750)  No changes in the code.","closed","","pbludov","2019-07-11T18:51:45Z","2019-07-12T09:40:31Z"
"","6881","Issue #6726: aligned javadoc/xdoc for SuppressWithPlainTextCommentFilter","Issue #6726 (part of #5750)  No changes in the code.","closed","","pbludov","2019-07-08T19:13:41Z","2019-07-09T19:17:31Z"
"","6877","Issue #6726: aligned javadoc/xdoc for SuppressWithNearbyCommentFilter","Issue #6726 (part of #5750)  No changes in the code.","closed","","pbludov","2019-07-06T17:05:30Z","2019-07-08T18:27:35Z"
"","6788","Issue #6726: aligned javadoc/xdoc for SuppressionFilter","Issue #6726 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-28T07:45:27Z","2019-06-17T05:48:03Z"
"","6737","Issue #6725: aligned javadoc/xdoc for InterfaceIsType","Issue #6725 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-09T02:23:57Z","2019-05-10T09:34:14Z"
"","6736","Issue #6725: aligned javadoc/xdoc for HideUtilityClassConstructor","Issue #6725 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-09T02:20:15Z","2019-05-10T09:35:45Z"
"","6733","Issue #6725: aligned javadoc/xdoc for VisibilityModifier","Issue #6725 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-08T04:44:58Z","2019-05-12T04:15:19Z"
"","6732","Issue #6725: aligned javadoc/xdoc for ThrowsCount","Issue #6725 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-08T04:41:24Z","2019-05-09T02:49:36Z"
"","6731","Issue #6725: aligned javadoc/xdoc for OneTopLevelClass","Issue #6725 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-08T04:38:09Z","2019-05-09T02:49:24Z"
"","6730","Issue #6725: aligned javadoc/xdoc for MutableException","Issue #6725 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-08T04:34:37Z","2019-05-09T02:50:01Z"
"","6729","Issue #6725: aligned javadoc/xdoc for InnerTypeLast","Issue #6725 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-08T04:30:38Z","2019-05-09T02:25:23Z"
"","6728","Issue #6725: aligned javadoc/xdoc for FinalClass","Issue #6725 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-08T04:28:19Z","2019-05-09T02:25:11Z"
"","6727","Issue #6725: aligned javadoc/xdoc for DesignForExtension","Issue #6725 (part of #5750)  No changes in the code.","closed","","pbludov","2019-05-08T04:25:02Z","2019-05-09T02:50:15Z"
"","6720","Issue #6713: exclude icu4j from saxon","Issue #6713","closed","","rnveach","2019-05-06T02:17:09Z","2019-05-10T11:51:53Z"
"","6639","Issue #6703: split JavadocMethod for missing javadocs","Issue #6703  Some properties are not really used anymore, but remain to not break compatibility. This also affected the google config.","closed","","rnveach","2019-04-06T00:01:19Z","2019-05-06T01:25:38Z"
"","6747","Issue #6701: create osx related builds in travis.sh","Issue #6701","closed","","ahmadshabib","2019-05-11T21:01:00Z","2019-05-15T03:09:09Z"
"","6750","Issue #6696: Create appveyor batch file","Issue #6696","closed","","ahmadshabib","2019-05-12T16:00:57Z","2019-07-14T05:59:08Z"
"","6681","Issue #6687: set up JDK12 build","Issue #6687 Confirming JDK12 build for https://github.com/checkstyle/checkstyle/pull/6664 Will create issue depending on CI results.","closed","","rnveach","2019-04-20T14:52:48Z","2019-04-26T17:39:08Z"
"","6718","Issue #6649: add InvalidJavadocPositionCheck","Issue #6649 Contribution: https://github.com/checkstyle/contribution/pull/383  Regression to come.","closed","","rnveach","2019-05-06T01:48:03Z","2019-06-27T10:44:40Z"
"","6636","Issue #6635: increase mutation coverage for api profile to 100%","Issue #6635  This completes the issue. I don't think any regression is needed as we already run CI regression and the changes don't affect a specific check directly.","closed","","rnveach","2019-04-05T01:44:39Z","2019-04-06T22:56:49Z"
"","6623","Issue #6624: remove usage of antlr method in VariableDeclarationUsage","Issue #6624  This removes uses of an ANTLR specific method and uses the DetailAST directly instead. This is in support of issue #3817 .  Regression will be provided.","closed","","rnveach","2019-04-03T01:05:22Z","2019-04-03T13:56:51Z"
"","6664","Issue #6615: Don't fail on Java 12 switch expressions","Issue #6615: This PR adjusts the ANTLR grammar to support Java 12 Switch expressions introduced in https://openjdk.java.net/jeps/325","closed","awaiting changes,","arteam","2019-04-14T12:26:53Z","2019-08-04T00:58:12Z"
"","6642","Issue #6606: catch all exceptions during reflection in AbstractTyeAware","Issue #6606","closed","","rnveach","2019-04-06T15:54:28Z","2019-04-20T14:29:54Z"
"","6666","Issue #6586: aligned javadoc/xdoc for IllegalType","Issue #6586 (part of #5750)  Second commit to turn `Default value is .` into `Default value is no tokens.`","closed","","pbludov","2019-04-14T16:24:01Z","2019-04-16T17:11:19Z"
"","6651","Issue #6586: aligned javadoc/xdoc for FallThrough","Issue #6586 (part of #5750)  Second commit to force a whitespace after period/comma/etc.","closed","","pbludov","2019-04-09T05:40:50Z","2019-04-12T06:50:48Z"
"","6657","Issue #6586: aligned javadoc/xdoc for SimplifyBooleanExpression","Issue #6586 (part of #5750)  No changes in the code.  The CI will fail till #6651 (whitespace after comma issue)","closed","","pbludov","2019-04-11T20:53:04Z","2019-04-13T01:13:00Z"
"","6692","Issue #6586: aligned javadoc/xdoc for HiddenField","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-21T17:06:24Z","2019-04-27T17:39:23Z"
"","6691","Issue #6586: aligned javadoc/xdoc for NoFinalizer","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-21T16:56:44Z","2019-04-22T19:46:43Z"
"","6690","Issue #6586: aligned javadoc/xdoc for NestedForDepth","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-21T16:34:05Z","2019-04-22T04:59:30Z"
"","6686","Issue #6586: aligned javadoc/xdoc for ReturnCount","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-20T17:47:54Z","2019-04-21T16:27:03Z"
"","6685","Issue #6586: aligned javadoc/xdoc for OverloadMethodsDeclarationOrder","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-20T17:32:16Z","2019-04-21T16:26:38Z"
"","6684","Issue #6586: aligned javadoc/xdoc for ModifiedControlVariable","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-20T17:26:52Z","2019-04-21T16:26:27Z"
"","6683","Issue #6586: aligned javadoc/xdoc for NestedTryDepth","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-20T16:26:55Z","2019-04-21T16:26:05Z"
"","6676","Issue #6586: aligned javadoc/xdoc for IllegalToken","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-16T20:30:47Z","2019-04-20T15:43:18Z"
"","6675","Issue #6586: aligned javadoc/xdoc for MultipleStringLiterals","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-16T20:25:54Z","2019-04-20T15:45:13Z"
"","6674","Issue #6586: aligned javadoc/xdoc for SuperFinalize","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-16T19:56:05Z","2019-04-20T15:44:33Z"
"","6673","Issue #6586: aligned javadoc/xdoc for ParameterAssignment","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-16T19:09:35Z","2019-04-20T15:44:08Z"
"","6672","Issue #6586: aligned javadoc/xdoc for OneStatementPerLine","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-16T19:01:52Z","2019-04-20T15:43:41Z"
"","6670","Issue #6586: aligned javadoc/xdoc for SuperClone","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-16T05:36:22Z","2019-04-16T17:11:52Z"
"","6669","Issue #6586: aligned javadoc/xdoc for IllegalCatch","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-15T19:32:41Z","2019-04-16T17:11:43Z"
"","6668","Issue #6586: aligned javadoc/xdoc for NestedIfDepth","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-15T19:15:51Z","2019-04-16T17:11:32Z"
"","6667","Issue #6586: aligned javadoc/xdoc for SimplifyBooleanReturn","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-14T16:35:10Z","2019-04-16T05:27:58Z"
"","6663","Issue #6586: aligned javadoc/xdoc for ExplicitInitialization","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-14T06:35:13Z","2019-04-15T18:28:31Z"
"","6662","Issue #6586: aligned javadoc/xdoc for VariableDeclarationUsageDistance","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-14T06:27:09Z","2019-04-14T16:03:16Z"
"","6661","Issue #6586: aligned javadoc/xdoc for IllegalThrows","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-14T06:23:48Z","2019-04-14T16:03:04Z"
"","6656","Issue #6586: aligned javadoc/xdoc for PackageDeclaration","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-11T20:43:18Z","2019-04-12T06:51:16Z"
"","6655","Issue #6586: aligned javadoc/xdoc for MultipleVariableDeclarations","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-11T20:33:44Z","2019-04-15T18:29:04Z"
"","6652","Issue #6586: aligned javadoc/xdoc for InnerAssignment","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-09T05:56:37Z","2019-04-11T20:22:30Z"
"","6634","Issue #6586: aligned javadoc/xdoc for StringLiteralEquality","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-04T19:18:47Z","2019-04-08T09:09:11Z"
"","6626","Issue #6586: aligned javadoc/xdoc for NoClone","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-03T06:19:09Z","2019-04-11T20:22:46Z"
"","6625","Issue #6586: aligned javadoc/xdoc for IllegalTokenText","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-04-03T05:16:29Z","2019-04-08T09:14:12Z"
"","6605","Issue #6586: aligned javadoc/xdoc for UnnecessaryParentheses","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-23T10:43:10Z","2019-08-22T18:15:58Z"
"","6604","Issue #6586: aligned javadoc/xdoc for RequireThisCheck","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-23T10:26:28Z","2019-04-01T07:37:41Z"
"","6603","Issue #6586: aligned javadoc/xdoc for MissingSwitchDefault","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-23T09:53:53Z","2019-04-01T07:37:38Z"
"","6602","Issue #6586: aligned javadoc/xdoc for FinalLocalVariable","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-23T09:45:38Z","2019-04-01T07:37:44Z"
"","6599","Issue #6586: aligned javadoc/xdoc for MissingCtor","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-21T19:28:46Z","2019-03-23T08:51:09Z"
"","6598","Issue #6586: aligned javadoc/xdoc for EmptyStatement","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-21T19:20:32Z","2019-03-23T08:51:09Z"
"","6597","Issue #6586: aligned javadoc/xdoc for IllegalInstantiation","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-21T05:53:26Z","2019-03-23T08:51:09Z"
"","6596","Issue #6586: aligned javadoc/xdoc for MagicNumber","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-19T20:45:53Z","2019-03-23T08:51:09Z"
"","6595","Issue #6586: aligned javadoc/xdoc for EqualsHashCode","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-19T19:08:00Z","2019-03-23T08:51:09Z"
"","6594","Issue #6586: aligned javadoc/xdoc for DefaultComesLast","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-19T19:02:46Z","2019-03-21T19:32:00Z"
"","6592","Issue #6586: aligned javadoc/xdoc for EqualsAvoidNull","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-18T06:03:04Z","2019-03-19T06:43:20Z"
"","6591","Issue #6586: aligned javadoc/xdoc for DeclarationOrder","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-18T05:50:24Z","2019-03-23T08:51:23Z"
"","6590","Issue #6586: aligned javadoc/xdoc for AvoidInlineConditionals","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-18T05:31:46Z","2019-03-19T06:43:07Z"
"","6588","Issue #6586: aligned javadoc/xdoc for CovariantEquals","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-17T20:51:35Z","2019-03-18T05:02:03Z"
"","6587","Issue #6586: aligned javadoc/xdoc for ArrayTrailingComma","Issue #6586 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-17T20:20:39Z","2019-03-18T05:02:17Z"
"","6583","Issue #6582: add option to skip static final in AbbreviationAsWordInName","Issue #6582","closed","","joca-bt","2019-03-17T12:28:19Z","2019-04-01T13:46:41Z"
"","6585","Issue #6579: Enable PMD rule UseUnderscoresInNumericLiterals","Issue #6579   `acceptableDecimalLength=6` for `UseUnderscoresInNumericLiterals` is the same as `minDecimalSymbolLength=7` for `NumericLiteralNeedsUnderscoreCheck`","closed","","pbludov","2019-03-17T19:53:21Z","2019-03-17T21:18:06Z"
"","6581","Issue #6578: Enable PMD rule LinguisticNaming","Issue #6578  `Deque isAfterValues` ->  `Deque afterValues` `Method isSubclass` -> `Method method` `Method isStarImport` -> `Method method`","closed","","pbludov","2019-03-16T19:12:38Z","2019-03-23T08:51:25Z"
"","6543","Issue #6542: expand resource validation to IT resources","Issue #6542","closed","","rnveach","2019-03-10T04:53:13Z","2019-03-10T13:20:13Z"
"","6580","Issue #6536: upgrade to PMD 6.12","Issue #6536   `LinguisticNaming` and `UseUnderscoresInNumericLiterals` are excluded for a while.  `CommonUtil` whitelisted since it is no more fit to `classReportLevel` of `CyclomaticComplexity`. The level itself is reduced to 75.","closed","","pbludov","2019-03-16T07:13:26Z","2019-03-16T16:12:31Z"
"","6546","Issue #6532: aligned javadoc/xdoc for LeftCurly","Issue #6532 (part of #5750)  Second commit to ignore `@noinspection` tag in the javadoc.","closed","","pbludov","2019-03-10T11:32:08Z","2019-03-14T06:34:01Z"
"","6569","Issue #6532: aligned javadoc/xdoc for RightCurly","Issue #6532 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-14T06:39:05Z","2019-03-15T11:37:06Z"
"","6535","Issue #6532: aligned javadoc/xdoc for NeedBraces","Issue #6532 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-09T07:59:29Z","2019-03-10T10:33:10Z"
"","6534","Issue #6532: aligned javadoc/xdoc for EmptyCatchBlock","Issue #6532 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-09T06:02:21Z","2019-03-10T10:32:46Z"
"","6556","Issue #6532: aligned javadoc/xdoc for AvoidNestedBlocks","Issue #6532  (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-11T06:32:13Z","2019-03-14T06:34:24Z"
"","6576","Issue #6531: aligned javadoc/xdoc for PackageAnnotation","Issue #6531 (part of #5750)  Second commit to allow checks without any properties.","closed","","pbludov","2019-03-15T12:05:40Z","2019-03-23T08:51:26Z"
"","6555","Issue #6531: aligned javadoc/xdoc for SuppressWarningsHolder","Issue #6531 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-11T06:23:16Z","2019-03-23T08:51:27Z"
"","6545","Issue #6531: aligned javadoc/xdoc for SuppressWarnings","Issue #6531 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-10T11:25:35Z","2019-03-11T06:12:09Z"
"","6544","Issue #6531: aligned javadoc/xdoc for AnnotationUseStyle","Issue #6531 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-10T11:14:42Z","2019-03-11T06:11:56Z"
"","6537","Issue #6531: aligned javadoc/xdoc for AnnotationOnSameLine","Issue #6531 (part of #5750)  No changes in the code.","closed","","pbludov","2019-03-09T15:11:03Z","2019-03-10T10:33:25Z"
"","6529","Issue #6516: recognized javadocs on ...","Issue #6516   Issue isn't approved. This isn't the end of the issue probably. I want to get these merged and run regression again to see if I can find anything else.","closed","","rnveach","2019-03-08T02:17:00Z","2019-03-16T01:30:38Z"
"","6498","Issue #6496: made and documented all filter elements are immutable","Issue #6496  All classes already have equals/hashCode. Mostly minor documentation changes except CsvFilterElement where a public method had to be made private as it modifies the field from the constructor. Tests were removed as they were just duplicates of others and pitest/code coverage should show this.","closed","","rnveach","2019-03-03T17:35:48Z","2019-03-03T19:36:40Z"
"","6497","Issue #6494: remove equals/hashcode from FilterSet","Issue #6494","closed","","rnveach","2019-03-03T16:20:50Z","2019-03-03T19:21:42Z"
"","6500","Issue #6485: added tabWidth to Checker and populated it to all checks","Issue #6485  I moved the standard tab width to `CommonUtil` since everyone is using it now. To be able to generate the column position in `AbstractFileSetCheck` I had to make a few changes and collect the `FileContents` and used this to pass it to TreeWalker. `FileTabCharacter` is the only file set that had to be changed to give the correct column position. This is because the changes to the log statement already included the +1 which is an exact mirror of `AbstractCheck`'s log method.","closed","","rnveach","2019-03-03T23:11:02Z","2019-03-14T11:03:42Z"
"","6476","Issue #6474: disable external dtd load by default","Issue #6474   there will be CS error ... I will fix it.","closed","","romani","2019-02-24T17:07:01Z","2019-02-25T03:07:48Z"
"","6499","Issue #6455: fixed property types for EmptyCatchBlockCheck","Issue #6455","closed","","rnveach","2019-03-03T20:05:01Z","2019-03-04T01:53:46Z"
"","6487","Issue #6451: Fixed typo in MissingDeprecated description","Issue #6451","closed","","JakSla","2019-02-26T23:50:13Z","2019-03-01T05:51:45Z"
"","6539","Issue #6446: fixed AnnotationMemberValuePair in AnnotationUseStyleCheck","Issue #6446","closed","","rnveach","2019-03-10T00:45:19Z","2019-03-10T13:21:30Z"
"","6444","Issue #6440: AnnotationLocation: named parameters must be considered parameters","Issue #6440   Regression report: https://pbludov.github.io/issue-6440/","closed","","pbludov","2019-02-20T22:18:13Z","2019-02-24T21:05:00Z"
"","6445","Issue #6439: move powermock tests away from the normal tests","Issue #6439  I am expecting pitest to fail until I add new suppressions.","closed","","rnveach","2019-02-20T23:40:40Z","2019-02-23T11:47:01Z"
"","6541","Issue #6420: fixed outdated links in sun_checks.xml","Issue #6420","closed","","rnveach","2019-03-10T01:48:26Z","2019-03-10T13:20:45Z"
"","6417","Issue #6416: AnnotationLocation: remove unhandled tokens","Issue #6416   Regression report: https://pbludov.github.io/issue-6416/ (zero impact, as expected)","closed","","pbludov","2019-02-10T13:25:39Z","2019-02-24T21:13:33Z"
"","6404","Issue #6403: fixed bad regular expression when only doing a find","Issue #6403  Regression to come.  Fun little note, originally I changed `.*?` to `.*` and the execution time doubled. I find it weird how much the `?` help.","closed","","rnveach","2019-02-02T16:12:35Z","2019-02-03T13:32:56Z"
"","6878","Issue #6402: add new SuppressionSingleFilter","Issue #6402","closed","","rnveach","2019-07-06T18:20:11Z","2019-07-15T23:00:04Z"
"","6429","Issue #6399: expanded exclude options to include files","Issue #6399","closed","","rnveach","2019-02-17T21:15:29Z","2019-02-17T23:07:01Z"
"","6438","Issue #6397: upgraded picocli to 3.9.5","Issue #6397  @romani Do we have a suppression somewhere that prevented this library from being upgraded until the issue was resolved?","closed","","rnveach","2019-02-19T13:11:58Z","2019-02-19T21:40:44Z"
"","6406","Issue #6381: Incorrect warning for empty lambda bodies with google_checks.xml","Issue #6381  I have tried to removed the `TokenTypes.LAMBDA` from `getDefaultTokens()` method in `WhitespaceAroundCheck` [here](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java#L213). However, it seems that it does not work.  While investigating on the issue, I found that there is already a [test](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java#L415) that tests the same issue. See the test with its previous test and the [test file](https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/whitespacearound/InputWhitespaceAroundAllowEmptyLambdaExpressions.java#L7).   So, let's just add this property to `google_checks.xml` so the problem is solved.","closed","","fzdy1914","2019-02-03T09:28:37Z","2019-02-20T14:00:57Z"
"","6374","Issue #6373: fixed frame tracking for EqualsAvoidNull","Issue #6373  Regression to come. No differences are expected but random issue could make it seem like there are.  Issue isn't approved so travis will fail.","closed","","rnveach","2019-01-11T23:26:52Z","2019-01-13T00:17:53Z"
"","6358","Minor: switched Jenkins from Hyper.sh to AWS EC2 spot instance(s)","Issue #6359","closed","","daniilyar","2019-01-08T19:09:34Z","2019-01-09T02:04:46Z"
"","6355","Issue #6354: Java Grammar: use TYPE_EXTENSION_AND instead of BAND in typecast expression","Issue #6354   regression reports https://pbludov.github.io/issue-6354/ https://pbludov.github.io/issue-6354/more/  AST regression report: https://pbludov.github.io/issue-6354/ast/  Note that this PR solves the NPE from #6329 but ` AnnotationOnSameLineCheck` and all other checks that use the token `TYPECAST` are still broken and should be reviewed to ensure they can handle multiple `TYPE` elements under `TYPECAST`.","closed","","pbludov","2019-01-08T05:53:50Z","2019-01-15T17:53:47Z"
"","6351","Issue #6350: kill remaining whitespace REMOVE_CONDITIONALS mutation","Issue #6350","closed","","rnveach","2019-01-06T19:19:46Z","2019-01-06T22:30:00Z"
"","6341","Issue #6340: TranslationCheck print file on IllegalArgumentException","Issue #6340  Regression can't be run for this case. Exception was halting regression.","closed","","rnveach","2019-01-02T18:43:58Z","2019-01-06T20:45:33Z"
"","6331","Issue #6330: Update eclipse compiler to R10","Issue #6330   ECJ version changed 4.7 => 4.10  `try-with-resource` part of `InputFallThrough.java` and `InputNoFinalizerFallThrough.java` extracted to `resources-noncompilable`.  `InputIllegalInstantiationNoPackage.java` and `InputPackageDeclarationNoPackage.java` moved back to compilable `recources`.","closed","","pbludov","2018-12-30T08:34:23Z","2019-01-06T04:30:25Z"
"","6347","Issue #6320: added REMOVE_CONDITIONALS mutator for whitespace","Issue #6320   Regression and comments to come.","closed","","rnveach","2019-01-06T01:03:21Z","2019-01-06T18:34:56Z"
"","6366","Issue #6320: revert of fixes for RightCurly to let merge fix for #4022 first","Issue #6320   Issue #4022  TODO: after merge ... create issue to restore mutation testing coverage.","closed","","romani","2019-01-10T15:32:52Z","2019-01-11T01:23:49Z"
"","6325","Issue #6320: added REMOVE_CONDITIONALS mutator for common 2","Issue #6320   Antlr regresssion and comments to come.","closed","","rnveach","2018-12-29T16:40:17Z","2018-12-29T21:36:18Z"
"","6407","Issue #6320: enable REMOVE_CONDITIONALS for all with moving all survived to known list","Issue #6320  this is get scope of survived items, next commit will be register all survived.","closed","","romani","2019-02-04T20:55:10Z","2019-02-09T23:22:06Z"
"","6321","Issue #6320: added REMOVE_CONDITIONALS mutator for packagenameloader","Issue #6320  This finishes packagenameloader profile which just had 1 mutation surviving.","closed","","rnveach","2018-12-28T02:45:17Z","2018-12-28T05:52:18Z"
"","6418","Issue #6320: added new tests to kill mutations for multiple packages","Issue #6320  Since we added the mutator everywhere, I am dumping all the tests I had saved up for incomplete packages that I was still working on.","closed","","rnveach","2019-02-10T15:42:13Z","2019-02-12T15:13:10Z"
"","6344","Issue #6320: added REMOVE_CONDITIONALS mutator for blocks","Issue #6320  Regression and comments to come.","closed","","rnveach","2019-01-04T02:51:28Z","2019-01-04T13:59:34Z"
"","6335","Issue #6320: added REMOVE_CONDITIONALS mutator for annotation","Issue #6320  Regression and comments to come.","closed","","rnveach","2018-12-30T22:04:05Z","2018-12-31T00:05:22Z"
"","6328","Issue #6320: added REMOVE_CONDITIONALS mutator for metrics","Issue #6320  Regression and comments to come.","closed","","rnveach","2018-12-30T00:56:46Z","2018-12-30T04:37:41Z"
"","6339","Issue #6320: added REMOVE_CONDITIONALS mutator for misc","Issue #6320  Comments and regression to come.","closed","","rnveach","2019-01-02T16:18:04Z","2019-01-03T05:20:57Z"
"","6338","Issue #6320: added REMOVE_CONDITIONALS mutator for design","Issue #6320  Comments and regression to come.","closed","","rnveach","2019-01-01T23:36:44Z","2019-01-02T17:41:45Z"
"","6337","Issue #6320: added REMOVE_CONDITIONALS mutator for treewalker","Issue #6320  Comments and regression to come.","closed","","rnveach","2018-12-31T04:45:01Z","2018-12-31T22:39:01Z"
"","6324","Issue #6320: added REMOVE_CONDITIONALS mutator for naming","Issue #6320  Comments and regression to come.","closed","","rnveach","2018-12-28T17:29:18Z","2018-12-28T19:34:26Z"
"","6415","Issue #6320: add REMOVE_CONDITIONALS to xpath config","Issue #6320","closed","","romani","2019-02-09T23:53:45Z","2019-02-10T04:52:56Z"
"","6323","Issue #6320: added REMOVE_CONDITIONALS mutator for modifier","Issue #6320","closed","","rnveach","2018-12-28T05:12:10Z","2018-12-28T15:15:23Z"
"","6322","Issue #6320: added REMOVE_CONDITIONALS mutator for sizes","Issue #6320","closed","","rnveach","2018-12-28T03:52:40Z","2018-12-28T05:52:32Z"
"","6781","Issue #6311: OrderedPropertiesCheck check that properties are ordered","Issue #6311: OrderedPropertiesCheck  new pull request on branch issue-6311 , because on master is the diff report","closed","","thomassenger","2019-05-24T11:41:10Z","2019-06-25T13:22:33Z"
"","6309","Issue #6308: made IndentLevel immutable","Issue #6308","closed","","rnveach","2018-12-22T18:05:08Z","2019-02-01T13:46:00Z"
"","6304","Issue #6303: prevented violations ImportOrder for duplicate imports","Issue #6303","closed","","rnveach","2018-12-20T03:32:47Z","2018-12-22T13:28:04Z"
"","6430","Issue #6297: removed files from cache when an exception occurs","Issue #6297","closed","","rnveach","2019-02-17T22:31:22Z","2019-02-18T13:33:58Z"
"","6314","Issue #6295: changed code to remove javadoc profile mutations","Issue #6295  Regression and comments to come.","closed","","rnveach","2018-12-26T18:06:38Z","2018-12-28T02:25:12Z"
"","6312","Issue #6295: added test cases to kill javadoc profile mutations","Issue #6295","closed","","rnveach","2018-12-25T17:19:06Z","2018-12-26T00:49:18Z"
"","6307","Issue #6294: added test cases to kill indentation profile mutations","Issue #6294  Don't know how many PRs these mutations will take. Regression isn't helping find them.","closed","","rnveach","2018-12-22T04:06:02Z","2018-12-22T12:02:59Z"
"","6298","Issue #6293: finalized pitest mutation for blocks profile","Issue #6293  Regression to come.","closed","","rnveach","2018-12-18T02:58:18Z","2018-12-18T08:26:22Z"
"","6300","Issue #6289: resolved final CONSTRUCTOR_CALLS mutation","Issue #6289   This PR will close the issue.  Discussion was at https://github.com/checkstyle/checkstyle/pull/6296#issuecomment-447990990 .","closed","","rnveach","2018-12-19T16:38:38Z","2018-12-20T11:31:43Z"
"","6296","Issue #6289: added CONSTRUCTOR_CALLS pitest mutator","Issue #6289   This is just the starting point for the PR. I will be providing talking points and regression for every unique change listed here.  This PR will close the issue once merged.","closed","","rnveach","2018-12-17T19:54:58Z","2018-12-19T16:36:18Z"
"","6290","Issue #6289: added new tests to kill CONSTRUCTOR_CALLS mutations","Issue #6289  The first of 2 PRs for this issue. The issue isn't approved so CI will fail.","closed","","rnveach","2018-12-16T19:44:31Z","2018-12-17T11:30:49Z"
"","6276","Issue #6275: enforce same sorting on all systems for pitest.sh","Issue #6275  Travis and wercker uses some sorting, but it is either just displaying the results or comparing it to another file it sorted itself. So this seems like the only area that needs it.  Travis will fail because issue isn't approved.","closed","","rnveach","2018-12-12T23:59:52Z","2018-12-13T10:56:07Z"
"","6299","Issue #6273: removed comment support from JavadocMethodCheck","Issue #6273   Like issue stated, I found this because there was a mutation surviving on it and this is the results I got when I ran regression. I will run a new regression for this PR.  Comments aren't required because the check's implementation actually looks at the Java's source, so it sees everything, including comments.  This issue is needed to finish mutations which is the only reason I bring it up for a check we consider deprecated.","closed","","rnveach","2018-12-18T15:03:06Z","2018-12-19T01:05:03Z"
"","6302","Issue #6272: added FALSE_RETURNS pitest mutator","Issue #6272  This PR will close the issue. Comments and regression to come.","closed","","rnveach","2018-12-20T00:18:44Z","2018-12-20T11:31:27Z"
"","6285","Issue #6272: added new tests to kill FALSE_RETURNS mutations","Issue #6272  The first of 2 PRs for this issue.","closed","","rnveach","2018-12-15T23:19:27Z","2018-12-18T08:26:40Z"
"","6268","Issue #6264: added new tests to kill TRUE_RETURNS mutations","Issue #6264   This PR just has all new tests for future mutations. Next PR will remove code that I believe to not be needed (with regression) and enable the new mutator. Number of classes with modifications will be 7. Anything not killed or removed will be suppressed, especially indentation and gui packages.","closed","","rnveach","2018-12-10T18:38:14Z","2018-12-12T16:29:41Z"
"","6274","Issue #6264: added TRUE_RETURNS pitest mutator","Issue #6264  This is just the starting point for the PR. I will be providing talking points and regression for every change listed here. ~Not all changes in `pitest.sh` are remaining mutations as noted in the issue description at https://github.com/checkstyle/checkstyle/issues/6264#issuecomment-446314799 . I will make notes on which ones are true changes and try to review them and see if I still can't kill them.~  This PR will close the issue once merged.","closed","","rnveach","2018-12-12T17:50:42Z","2018-12-18T15:37:35Z"
"","6263","Issue #6262: removed namespace aware from XmlLoader","Issue #6262","closed","","rnveach","2018-12-09T13:37:32Z","2018-12-09T16:50:23Z"
"","6253","Issue #6252: Move test inputs with deprecated packages to resources-noncompilable","Issue #6252   Part of #6228   from the test input `/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule333orderingandspacing/InputCustomImportOrderValid.java` one line was removed: `import com.sun.accessibility.internal.resources.*;` The line is not important and can be removed without any effect.","closed","","pbludov","2018-12-08T16:33:37Z","2018-12-20T21:16:52Z"
"","6243","Issue #6241: suppress CanBeFinal inspection on picocli options as it use reflection","Issue #6241 .","closed","","romani","2018-12-02T21:05:37Z","2018-12-02T22:37:56Z"
"","6246","Issue #6241: disable CanBeFinal and ClassWithTooManyDependents till IDEA-203424","Issue #6241  we need green CI, problematic inspections are disabled.","closed","","romani","2018-12-02T22:48:27Z","2018-12-02T23:22:33Z"
"","6248","Issue #6241: disable Duplicates inspection","Issue #6241  this is blind fix.  Attention: merge it only if fix ""General - Duplicated code fragment (77)""","closed","","romani","2018-12-03T06:10:43Z","2018-12-03T14:18:59Z"
"","6242","Issue #6241: resolved teamcity 2018.3 violations","Issue #6241  These are the ones I know can be fixed. Most others will need suppressions. I'm not sure `Control flow issues - Simplifiable boolean expression (1)` is wise because of pitest.","closed","","rnveach","2018-12-02T17:04:27Z","2018-12-03T04:42:47Z"
"","6247","Issue #6241: disable ClassIndependentOfModule till IDEA-203424","Issue #6241  reason - https://teamcity.jetbrains.com/viewLog.html?buildId=1798853&tab=Inspection&buildTypeId=Checkstyle_IdeaInspectionsMaster  on merge: do comment at https://youtrack.jetbrains.com/issue/IDEA-203424 that one more inspection is affected, with link to PR. This PR have link to master (see above), in PR status will be link to PR CI results with disablement in action.","closed","","romani","2018-12-03T05:56:58Z","2018-12-03T13:42:55Z"
"","6239","Issue #6238: Upgrade Powermock2 to RC4","Issue #6238  Part of #6238 It simply fixed one test: ``` when(classLoader.getURLs()).thenThrow(IOException.class); ``` is not a legal code, since `URLClassLoader.getURLs()` throws nothing.","closed","","pbludov","2018-12-02T12:03:50Z","2018-12-20T21:16:30Z"
"","6405","Issue #6236: add build instructions to website","Issue #6236  I will update checkstyle.org to have ""Build"" section after merge.  ![image](https://user-images.githubusercontent.com/812984/52174813-7e375a80-274e-11e9-889c-54b5cebfdac5.png)","closed","","romani","2019-02-03T08:59:55Z","2019-04-03T20:42:20Z"
"","6600","Issue #6232: Load resources relative to resources root","Issue #6232  1. Added new unit tests to illustrate problem - test fails. 2. Fixed code - test succeeds. 3. Adapted existing unit test for new behavior. ""mvn clean verify"" succeeded.","closed","","peterdemaeyer","2019-03-21T21:02:02Z","2019-06-07T01:08:14Z"
"","6229","Issue #6228: Set up JDK 11 build","Issue #6228","closed","","pbludov","2018-11-24T11:34:08Z","2018-12-28T04:58:25Z"
"","6538","Issue #6226: changed pmd's AbstractNaming to ClassNamingConventions","Issue #6226","closed","","rnveach","2019-03-09T23:30:08Z","2019-03-10T13:19:43Z"
"","6194","Issue #6185: move cached google style to git repo","Issue #6185   to address failure - https://app.codeship.com/projects/124310/builds/b5fb48ca-9c77-4ff5-b08e-89205fb04f13?step=parallel_.ci%2Frun-link-check-plugin.sh","closed","","romani","2018-11-03T14:16:39Z","2018-11-07T01:17:40Z"
"","6187","Issue #6185: switch to https://checkstyle.org","Issue #6185","closed","","rnveach","2018-10-31T17:15:41Z","2018-10-31T23:33:16Z"
"","6171","Issue #6167: Add equalsverifier project to wrecker ci","Issue #6167","closed","","romani","2018-10-26T14:49:45Z","2018-10-27T05:19:20Z"
"","6577","Issue #6133: Disable XML External Entity load in XmlUtil.java in tests","Issue #6133","closed","","romani","2019-03-15T13:19:56Z","2019-03-16T00:48:57Z"
"","6735","Issue #6125: Ignore variable reference as resource statement","Issue #6125","closed","","strkkk","2019-05-08T18:28:14Z","2019-05-16T13:58:56Z"
"","6139","Issue #6123: ignore parameters of methods with modifiers not in 'memberModifiers'","Issue #6123","closed","","ebruneton","2018-10-14T13:01:30Z","2018-11-09T15:16:08Z"
"","6122","Issue #6121: Update FullIdent to store DetailAST instead of line/column","Issue #6121   Note that the whole FullIdent::append was changed to simple ```         if (detailAST == null) {             detailAST = ast;         } ```  this is because the deepest `IDENT` in the chain as always the top- and leftmost one.","closed","","pbludov","2018-09-16T11:21:22Z","2018-10-07T18:05:19Z"
"","6140","Issue #6118: IllegalType should check extends & implements","Issue #6118   This PR brings a violation for any attempt to extend a banned class/interface ``` pubic class Bar extends ForbiddenClass {} // violation ```  regression tests: https://pbludov.github.io/issue-6118a/","closed","","pbludov","2018-10-15T06:14:22Z","2018-12-20T21:14:13Z"
"","6286","Issue #6098: revert of workaround as on 3.1.9 it works fine","Issue #6098","closed","","romani","2018-12-16T02:19:38Z","2018-12-16T05:58:39Z"
"","6109","Issue #6098: downgrade spotbugs library to previous version","Issue #6098","closed","","romani","2018-09-09T12:42:24Z","2018-09-09T14:56:06Z"
"","6231","Issue #6096: improve performance with not lazy usage of file.lastModified()","Issue #6096  continuation from: https://github.com/checkstyle/checkstyle/pull/6097","closed","","romani","2018-11-25T00:09:05Z","2018-11-27T14:50:57Z"
"","6097","Issue #6096: Improve performance of modification check","Issue #6096","closed","","Bananeweizen","2018-08-30T10:15:29Z","2018-11-27T14:52:02Z"
"","6094","Issue #6093: fix problem with circle-ci ability to restore cache","Issue #6093","closed","","romani","2018-08-29T06:49:40Z","2018-08-29T07:12:01Z"
"","6177","Issue #6083: Add Limitations to 'index.xml.vm'","Issue #6083.","closed","","arjenzhou","2018-10-29T12:11:02Z","2018-10-29T12:52:54Z"
"","6126","Issue #6068: migrate to picocli command line parser from Commons CLI","Issue #6068: migrate to picocli command line parser from Commons CLI  This PR replaces #6082.  Sorry it took so long. It was harder than I thought to get all the tests and checks to pass. :-)","closed","","remkop","2018-09-20T11:52:37Z","2018-10-29T23:33:45Z"
"","6082","#6068 Migrate command line parser to picocli from Commons CLI (initial version)","Issue #6068  Please take a look at what the source code for Main would look like with picocli.  * I was able to remove 200 lines of code, and the remaining code is more declarative and focused on the business logic.  * The usage help for `Main` now looks like this on Cygwin: https://ibb.co/j7wymU (to give some idea of the ANSI colors and styles)  This is a first cut. Please let me know if you are interested in refining this further to something that can be merged.  * TODO 1: The usage help message can be polished more. (Custom option labels, reorder options and simpler synopsis - all can be done with annotations.) * TODO 2: Some tests in MainTest fail (probably because the usage help and some error messages looks different)","closed","","remkop","2018-08-13T13:24:38Z","2018-09-20T11:54:24Z"
"","6182","Issue #6068: mention pocicli features in xdoc","Issue #6068","closed","","romani","2018-10-31T00:40:08Z","2018-10-31T11:44:02Z"
"","6180","Issue #6068: mention pocicli features in xdoc","Issue #6068","closed","","romani","2018-10-30T12:57:00Z","2018-10-31T00:40:29Z"
"","6057","spelling: add xcode","Issue #6055   missed patch for spelling whitelist","closed","","pbludov","2018-08-03T05:39:06Z","2018-08-03T07:05:03Z"
"","6056","Issue #6055: fix Travis CI build on OSX","Issue #6055","closed","","pbludov","2018-08-02T18:39:24Z","2018-08-03T07:03:50Z"
"","6059","Issue #6046: Spell check failing to get words file","Issue #6046  Grep for the file name to get most recent version.","closed","","pbludov","2018-08-04T12:41:27Z","2018-08-05T07:30:34Z"
"","6044","Issue #6043: update links to html reports for guava and sun","Issue #6043","closed","","romani","2018-07-20T03:19:04Z","2018-07-20T05:08:25Z"
"","6040","Issue #6037: resolve inspection violation 'Abstract class without abstract method","Issue #6037","closed","","romani","2018-07-14T03:22:26Z","2018-07-18T04:45:31Z"
"","6039","Issue #6037: fix inspection violations, suppress 2 inspections","Issue #6037","closed","","romani","2018-07-14T03:21:53Z","2018-07-17T02:49:43Z"
"","6195","Issue #6028: TreeWalker should be creating absolute paths for events","Issue #6028","closed","","rnveach","2018-11-03T22:56:44Z","2018-11-10T13:53:40Z"
"","6027","Issue #6018: Add to CI import order validation","Issue #6018   CI for import order checks  for `guava(v25)` and `java design patterns`","closed","","pbludov","2018-07-11T11:40:20Z","2018-07-13T04:11:04Z"
"","6010","Issue #6003: update documentation of SuppressionFilter with links to latest DTDs","Issue #6003  new section to explain what is ID. ""Suppressions XML Document"" is part of certain filter, not a whole checkstyle  ![image](https://user-images.githubusercontent.com/812984/42407596-57c668c6-8174-11e8-986e-3c7ff17e4769.png) ![image](https://user-images.githubusercontent.com/812984/42407600-667970fc-8174-11e8-9f0f-96fea7855463.png)","closed","","romani","2018-07-07T06:28:12Z","2018-07-08T14:43:58Z"
"","6388","Issue #5981: add validation of new lines before comments","Issue #5981   Checking of comments before tokens has been added to EmptyLineSeparatorCheck with corresponding tests.","closed","","kazachka","2019-01-22T17:19:17Z","2019-04-27T15:56:13Z"
"","6196","Issue #5948: removed lambda support from RightCurlyCheck","Issue #5948","closed","","rnveach","2018-11-04T00:02:28Z","2018-11-09T16:14:49Z"
"","6864","Issue #5941: remove all unnecessary spaces on end of line","Issue #5941  These removals don't require test changes. Next batch will.","closed","","rnveach","2019-06-30T03:53:59Z","2019-06-30T22:00:38Z"
"","6547","Issue #5941: removed tabs from it resources","Issue #5941  Removed tabs from IT resources. 1 tab -> 4 spaces. Use a replace all utility. Only files ignored are indentation and file tab resources.","closed","","rnveach","2019-03-10T13:56:47Z","2019-03-10T19:37:10Z"
"","6552","Issue #5941: removed trailing spaces from it resources","Issue #5941  Removed all trailing spaces from IT. Used a replace all utility. No files were skipped over.","closed","","rnveach","2019-03-10T19:54:29Z","2019-03-11T00:44:07Z"
"","6867","Issue #5941: remove all unnecessary tabs","Issue #5941","closed","","rnveach","2019-07-01T00:50:26Z","2019-07-01T11:25:07Z"
"","6448","Issue #5900: renamed format property to illegalAbstractClassNameFormat","Issue #5900","closed","","rnveach","2019-02-21T23:55:22Z","2019-02-22T09:44:37Z"
"","6548","Issue #5897: verified all modules are in no exception configs","Issue #5897  CI is expected to fail until https://github.com/checkstyle/contribution/pull/348 is merged .","closed","","rnveach","2019-03-10T16:28:20Z","2019-03-17T14:00:35Z"
"","6016","Issue #5894: Remove lambda parameters processing","Issue #5894 Remove processing of lambda from ParameterNameCheck, tests added.","closed","","kazachka","2018-07-08T20:04:07Z","2018-07-23T19:10:56Z"
"","6045","Issue #5891: renamed package grammars to grammar","Issue #5891  Renamed package grammars to grammar","closed","","mismatch","2018-07-22T20:09:31Z","2022-04-20T07:07:43Z"
"","6063","Issue #5832: Code samples for Naming Checks","Issue #5832","closed","","tsunghanjacktsai","2018-08-09T17:02:23Z","2018-08-14T18:30:42Z"
"","6061","Issue #5790: Upgrade to PMD 6.6.0","Issue #5790  Release 6.6 seems to be more stable than its 6.X predecessors.","closed","","pbludov","2018-08-05T18:04:47Z","2018-08-13T18:36:48Z"
"","6199","Issue #5777: converted line only checks to log ast","Issue #5777  Converted all easy loggers. There are still others in this issue. Regression would show too many changes as violation change from line to line:column.","closed","incomplete,","rnveach","2018-11-04T18:17:31Z","2021-12-21T00:25:48Z"
"","6503","Issue #5769: added package-info to list of valid javadocs","Issue #5769","closed","","rnveach","2019-03-04T01:27:16Z","2019-03-04T04:05:30Z"
"","6257","Issue #5759: Update Whitespace{After,Around}Check to log DetailAST","Issue #5759 Whitespace{After,Around}Check regression report https://pbludov.github.io/issue-5759/whitespace/","closed","","pbludov","2018-12-09T09:37:08Z","2018-12-20T20:37:22Z"
"","6255","Issue #5759: Update UpperEllCheck to log DetailAST","Issue #5759 UpperEllCheck regression report https://pbludov.github.io/issue-5759/upperell/","closed","","pbludov","2018-12-09T08:32:50Z","2018-12-23T16:30:16Z"
"","6256","Issue #5759: Update SingleSpaceSeparatorCheck to log DetailAST","Issue #5759 SingleSpaceSeparatorCheck regression report https://pbludov.github.io/issue-5759/sss/","closed","","pbludov","2018-12-09T08:56:37Z","2018-12-20T20:37:03Z"
"","6258","Issue #5759: Update NoWhitespace{After,Before}Check to log DetailAST","Issue #5759 NoWhitespace{After,Before}Check regression report https://pbludov.github.io/issue-5759/nowhitespace/","closed","","pbludov","2018-12-09T09:59:52Z","2018-12-19T17:51:46Z"
"","6259","Issue #5759: Update GenericWhitespaceCheck to log DetailAST","Issue #5759 GenericWhitespaceCheck regression report https://pbludov.github.io/issue-5759/genws/","closed","","pbludov","2018-12-09T10:14:53Z","2018-12-20T21:12:12Z"
"","6260","Issue #5759: Update EmptyFor{Initializer,Iterator}PadCheck to log Det…","Issue #5759 EmptyFor{Initializer,Iterator}PadCheck regression report https://pbludov.github.io/issue-5759/forpad/","closed","","pbludov","2018-12-09T10:32:03Z","2018-12-20T21:12:10Z"
"","6261","Issue #5759: Update AbstractParenPadCheck to log DetailAST","Issue #5759 AbstractParenPadCheck regression report https://pbludov.github.io/issue-5759/parenpad/","closed","","pbludov","2018-12-09T10:49:02Z","2018-12-16T22:11:48Z"
"","6221","Issue #5759: Update AbstractChecks to log DetailAST (part 1)","Issue #5759   Regression tests: https://pbludov.github.io/issue-5759/  Note that patch version reports a bit more violations, for example: https://pbludov.github.io/issue-5759/checkstyle/index.html#A1151","closed","","pbludov","2018-11-18T18:17:39Z","2018-12-20T21:14:40Z"
"","6198","Issue #5758: converted other line/column checks to log ast","Issue #5758  This fixes all checks in the issue.","closed","","rnveach","2018-11-04T02:13:44Z","2018-11-10T15:02:55Z"
"","6492","Issue #5750: aligned javadoc/xdoc for AnnotationLocation","Issue #5750   No changes in the code.","closed","","pbludov","2019-03-02T10:06:17Z","2019-03-09T15:11:22Z"
"","6288","Issue #5750: aligned javadoc/xdoc for (Custom)ImportOrder","Issue #5750   First commit to exclude internal classes from validation. The hack with `depth` counting won't work since this check validates only comment bocks, so the method `leaveToken` will be called right after the first processed comment. Instead of, the inner types now are filtered out by the scope.  Second commit for `CustomImportOrderCheck`, third for `ImportOrderCheck`","closed","","pbludov","2018-12-16T15:50:40Z","2018-12-23T16:30:20Z"
"","6783","Issue #5750: XdocsJavaDocsTest: replace whitelist with blacklist","Issue #5750  We are going to add some checks in the next release. This PR to ensure that all new checks will have javadocs and xdocs in sync.","closed","","pbludov","2019-05-26T17:06:35Z","2019-05-26T18:53:23Z"
"","6517","Issue #5750: aligned javadoc/xdoc for EmptyBlock","Issue #5750  No changes in the code.","closed","","pbludov","2019-03-06T06:53:18Z","2019-03-08T03:52:10Z"
"","6507","Issue #5750: aligned javadoc/xdoc for MissingOverride","Issue #5750  No changes in the code.","closed","","pbludov","2019-03-05T17:00:30Z","2019-03-08T03:51:57Z"
"","6506","Issue #5750: aligned javadoc/xdoc for MissingDeprecated","Issue #5750  No changes in the code.","closed","","pbludov","2019-03-04T19:48:10Z","2019-03-05T14:23:39Z"
"","6817","Issue 5750 mdash space","Issue #5750  Minor change to force a space before dash: `Covariant {@code equals()} - method that...` as we did it for the `Properties` section: `Property {@code elementStyle} - Define the...`","closed","","pbludov","2019-06-13T07:52:48Z","2019-06-15T20:37:16Z"
"","6101","Issue 5750 atclauseorder","Issue #5750","closed","","rnveach","2018-08-31T22:52:59Z","2018-09-06T03:17:12Z"
"","6589","Issue #5680: disable PMD rule UseProperClassLoader","Issue #5680","closed","","pbludov","2019-03-17T21:16:39Z","2019-03-18T05:01:53Z"
"","6562","Issue #5665: Enable PMD rule CommentDefaultAccessModifier","Issue #5665   New version. Now with `/* package */` comment.","closed","","pbludov","2019-03-11T13:40:12Z","2019-03-14T23:30:53Z"
"","6550","Issue #5506: disallowed StringBuffer","Issue #5506","closed","","rnveach","2019-03-10T17:41:32Z","2019-03-10T23:07:48Z"
"","6554","Issue #5411: split JavadocType for missing javadocs","Issue #5411  This is for MissingJavadocType. It was pretty much a copy/paste of the original check.","closed","","rnveach","2019-03-11T02:14:57Z","2019-04-05T16:33:07Z"
"","6334","Issue #5350: aviod usage of messages attribute in suppression xml","Issue #5350  I do not now how to enforce this in CI but let unblock users first.","closed","","romani","2018-12-30T15:12:20Z","2018-12-31T05:45:53Z"
"","6025","Issue #5207: LITERAL_CASE and LITERAL_DEFAULT in LeftCurlyCheck","Issue #5207 Regression report https://pbludov.github.io/issue-5207/","closed","","pbludov","2018-07-11T08:34:10Z","2018-07-21T08:51:23Z"
"","6644","Issue #5124: remove usages of branchContains for DesignForExtensionCheck","Issue #5124  This is just a simple rewrite. Fixing code to use a valid Javadoc will be handled at https://github.com/checkstyle/checkstyle/issues/5450 . Regression to come.","closed","","rnveach","2019-04-06T19:57:54Z","2019-08-29T10:30:20Z"
"","6053","Issue #5118: IllegalType does not check type arguments/parameters","Issue #5118   Regression tests: https://pbludov.github.io/issue-5118/default/","closed","","pbludov","2018-07-31T06:12:18Z","2018-10-14T15:24:09Z"
"","6641","Issue #5103: fixed multi-file reporting in TranslationCheck","Issue #5103  Regression to come.","closed","","rnveach","2019-04-06T13:23:45Z","2019-04-17T11:42:01Z"
"","6911","Issue #5008: Removed remaining coding pitest","Issue #5008.   Removed the remaining pitest mutations by introducing a utility method for testing which node is first in the AST.   The reason not to cover the mutations where they were located previously is that it requires two ast nodes with the exact same location, which in an ast build from a source file will only be the case if the compared nodes are the same node. And since the checks enforces that one of the nodes are a method invocation or field access and the other is a declaration it will never  happen that it is the same node that is being compared to it self.   I further added a test that shows a false warning generated by current master in EqualsAvoidNullCheck, due to the pitest hack with minimumSymbolsBetween.","closed","","eorloff","2019-07-18T10:55:09Z","2019-07-22T19:00:42Z"
"","6305","Issue #5008: added test cases to kill coding profile mutations","Issue #5008   This issue will probably be split into 3 PRs.","closed","","rnveach","2018-12-20T13:01:51Z","2018-12-21T05:57:48Z"
"","6862","Issue #4983: convert MissingDeprecatedCheck to use javadoc parser","Issue #4983  Regression to come.","closed","","rnveach","2019-06-29T18:20:14Z","2019-08-05T11:11:42Z"
"","6436","Issue #4979: synchronize suppress and xpath filter element","Issue #4979  Part 1 of a possible 2 part PR.","closed","","rnveach","2019-02-19T05:27:42Z","2019-02-19T14:00:39Z"
"","6432","Issue #4978: renamed sub-children filters to filter element","Issue #4978","closed","","rnveach","2019-02-18T04:24:21Z","2019-02-18T22:13:02Z"
"","6645","Issue #4900: refactored DetailASTTest.testTreeStructure","Issue #4900  Blocked by https://github.com/checkstyle/checkstyle/pull/6629","closed","","rnveach","2019-04-07T14:20:25Z","2019-05-19T14:14:33Z"
"","6441","Issue #4877: added reason for catalog.xml","Issue #4877","closed","","rnveach","2019-02-20T17:32:21Z","2019-02-21T12:02:14Z"
"","6007","Issue #4870: Mark TranslationCheck and JavadocPackageCheck with GlobalStatefulCheck annotation","Issue #4870  continuation of #5165","closed","","romani","2018-07-07T05:03:25Z","2018-07-08T15:00:47Z"
"","6013","Issue #4870: added UT to ensure multithread annotations on modules","Issue #4870","closed","","rnveach","2018-07-08T15:38:49Z","2018-07-09T14:39:19Z"
"","6621","Issue #4861: resolved escaping this from AbstractClassCouplingCheck","Issue #4861  Removed FileContext and merged it with the check itself. We don't create and use old FileContexts so creating a new instance on every new file isn't necessary. Besides merging the classes, parameters and fields have to be renamed to avoid naming conflicts, public methods made private, methods moved inside other inner class, and getters/setters removed to use the field directly.  Regression to come.","closed","","rnveach","2019-04-01T02:21:13Z","2019-04-03T00:56:14Z"
"","6622","Issue #4845: remove usage of DetailAST from input files","Issue #4845  This removes uses of DetailAST from all our inputs. This is in support of issue #3817 . No changes to production code, so no regression required.","closed","","rnveach","2019-04-02T18:30:11Z","2019-04-02T22:11:59Z"
"","6442","Issue #4814: added try/catch to setting up TreeWalker children","Issue #4814  Benefit of this PR is that most `startsWith` was removed and we are doing full `equals` now.","closed","","rnveach","2019-02-20T19:14:41Z","2019-02-23T11:54:55Z"
"","6495","Issue #4734: remove equals/hashcode from SuppressionFilter","Issue #4734","closed","","rnveach","2019-03-03T15:56:59Z","2019-03-03T19:21:30Z"
"","6265","Issue #4684: added shell script to find missing pitest files","Issue #4684  Update includes fix for files with similar names (TreeWalker versus TreeWalkerAuditEvent).  Script should have future support for https://github.com/checkstyle/checkstyle/pull/6254 .  How should I handle SuppressWarningsHolder?  > Xmlstarlet have option to define xsd, I did this to parse pom.xml  I think when I was looking at this before, it requires to put `pom:` before every node making the query longer. Let me know if you still want this.","closed","","rnveach","2018-12-09T21:52:35Z","2018-12-10T11:04:45Z"
"","6251","Issue #4684: added missing classes to pitest","Issue #4684  SuppressWarningsHolder was not added since it is listed in pitest as a comment.","closed","","rnveach","2018-12-08T14:07:56Z","2018-12-09T18:55:52Z"
"","6551","Issue #4632: override java parser report error to throw exception","Issue #4632","closed","","rnveach","2019-03-10T19:03:00Z","2019-03-16T17:12:09Z"
"","6443","Issue #4564: fixed exception on JavadocStyle's skip html comment","Issue #4564","closed","","rnveach","2019-02-20T19:57:15Z","2019-02-21T12:01:56Z"
"","6052","Issue #4092: added extends, implements and annotations processing","Issue #4092 Continuation of PR #5122","closed","","kazachka","2018-07-29T08:39:39Z","2018-09-16T17:20:36Z"
"","6292","Issue #3708: finalized pitest mutation for misc profile","Issue #3708","closed","","rnveach","2018-12-17T01:00:52Z","2018-12-17T14:10:48Z"
"","6427","Issue #3567: fixed final ForbidAnnotationElementValueCheck violation","Issue #3567","closed","","rnveach","2019-02-15T03:55:53Z","2019-02-15T14:13:42Z"
"","6504","Issue #3484: removed the last of guava","Issue #3484  This finalizes the issue imo.","closed","","rnveach","2019-03-04T04:32:21Z","2019-03-10T13:18:47Z"
"","6629","Issue #3417: split DetailAST between interface and implementation","Issue #3417  This split DetailAST (class) into DetailAST (interface) and DetailASTImpl (class). This also stricted usage of antlr classes everywhere. More will be done in https://github.com/checkstyle/checkstyle/issues/6628 .","closed","","rnveach","2019-04-03T17:28:55Z","2019-05-08T14:15:34Z"
"","6906","Issue #3383: Skip dry run build item for maven release commit","Issue #3383  @romani","closed","","ahmadshabib","2019-07-15T19:50:04Z","2019-07-21T05:54:30Z"
"","6553","Issue #2883: removed cache from treewalker","Issue #2883  Attempt rety of https://github.com/checkstyle/checkstyle/pull/5323 .","closed","","rnveach","2019-03-10T23:40:43Z","2019-03-16T01:29:51Z"
"","6643","Issue #2116: turned LineLengthCheck into an FileSet check","Issue #2116","closed","","rnveach","2019-04-06T17:14:58Z","2019-08-25T19:38:59Z"
"","6473","FinalParameters redundant as FinalLocalVariable can check parameters","Isn't `FinalParameters` redundant as `FinalLocalVariable` can check parameters too? As far as I understood, both should check the same conditions. Actually I guess they both do slightly different checks and thus could also produce slightly different results. I'd suggest to deprecate and remove `FinalParameters` in favor of `FinalLocalVariable` (maybe under a different name to make it clear that parameters are also covered) and make sure the code covers the same edge cases. Currently I think it is more confusing to the user which of the two should be used.","closed","","Vampire","2019-02-24T13:41:55Z","2019-02-25T01:29:17Z"
"","6186","automation of github actions for release.sh","interaction with github need to be automated https://github.com/checkstyle/checkstyle/wiki/How-to-make-a-release ""Close previous milestone"" ""update Release body""  https://unix.stackexchange.com/a/330574/27505 `cal -m 11`","closed","miscellaneous,","romani","2018-10-31T05:06:12Z","2020-01-27T16:26:32Z"
"","6848","Add xpath tests for new Checks of 8.22","In release https://checkstyle.org/releasenotes.html#Release_8.22 We added we Checks UnnecessarySemicolonInTryWithResources UnnecessarySemicolonInEnumeration  But we forgot to add xpath tests for them to https://github.com/checkstyle/checkstyle/tree/master/src/it/java/org/checkstyle/suppressionxpathfilter   We also need to add them to list of supported Checks at: https://checkstyle.org/config_filters.html#SuppressionXpathFilter","closed","miscellaneous,","romani","2019-06-25T13:59:41Z","2019-06-29T04:16:11Z"
"","6130","AbbreviationAsWordInName: false positive on capital letters on the end of the word","In check  description: > allowedAbbreviationLength specifies how many consecutive capital letters are allowed in the identifier. A value of 3 indicates that up to 4 consecutive capital letters are allowed,  In property description: > allowedAbbreviationLength | Indicate the number of consecutive capital letters allowed in targeted              identifiers (abbreviations in the classes, interfaces, variables and methods              names, ... ).  The first suggest the check allows `allowedAbbreviationLength + 1` characters, while the second just `allowedAbbreviationLength`.   The check is actually reporting a violation for a string `IT` when `allowedAbbreviationLength=1` (we use the google style config). So in practice it seems to work as the property description suggests.   To makes things worse the violation message is wrong, e.g. it would report > Abbreviation in name 'ComputerClientTypeIT' must contain no more than '2' consecutive capital letters.""  whereas the effective limit is  ""'1' consecutive capital letters""  Checkstyle **8.10.1**","closed","approved,","jakub-bochenski","2018-09-26T09:32:33Z","2018-10-29T22:23:36Z"
"","6233","Trailing comments in ast tree","In AST tree produced by checkstyle trailing comments appends to token, which is next to comment related token.  For example for file: ``` ~/$ cat MyClass.java  public class InputEmptyLineSeparatorWithComments {      public void testTrailingComment() { } // no violation      // Should have violation     public void testPlainComment() { }  } ``` checkstyle with following parameters ``` ~/checkstyle$ mvn exec:java \    -Dexec.mainClass=""com.puppycrawl.tools.checkstyle.Main"" \    -Dexec.args=""-J '/home/user/MyClass.java'"" ``` produce following tree: ``` CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |   `--LITERAL_PUBLIC -> public [1:0] |--LITERAL_CLASS -> class [1:7] |--IDENT -> InputEmptyLineSeparatorWithComments [1:13] `--OBJBLOCK -> OBJBLOCK [1:49]     |--LCURLY -> { [1:49]     |--METHOD_DEF -> METHOD_DEF [3:4]     |   |--MODIFIERS -> MODIFIERS [3:4]     |   |   `--LITERAL_PUBLIC -> public [3:4]     |   |--TYPE -> TYPE [3:11]     |   |   `--LITERAL_VOID -> void [3:11]     |   |--IDENT -> testTrailingComment [3:16]     |   |--LPAREN -> ( [3:35]     |   |--PARAMETERS -> PARAMETERS [3:36]     |   |--RPAREN -> ) [3:36]     |   `--SLIST -> { [3:38]     |       `--RCURLY -> } [3:40]     |--METHOD_DEF -> METHOD_DEF [6:4]     |   |--MODIFIERS -> MODIFIERS [6:4]     |   |   |--SINGLE_LINE_COMMENT -> // [3:42]     |   |   |   `--COMMENT_CONTENT ->  no violation\n [3:44]     |   |   |--SINGLE_LINE_COMMENT -> // [5:4]     |   |   |   `--COMMENT_CONTENT ->  Should have violation\n [5:6]     |   |   `--LITERAL_PUBLIC -> public [6:4]     |   |--TYPE -> TYPE [6:11]     |   |   `--LITERAL_VOID -> void [6:11]     |   |--IDENT -> testPlainComment [6:16]     |   |--LPAREN -> ( [6:32]     |   |--PARAMETERS -> PARAMETERS [6:33]     |   |--RPAREN -> ) [6:33]     |   `--SLIST -> { [6:35]     |       `--RCURLY -> } [6:37]     `--RCURLY -> } [8:0]  ``` Comment ""no violation"" on third line is trailing and related to testTrailingComment method. But in produced AST tree it appears as one of comments for testPlainComment.","open","antlr,","kazachka","2018-11-26T12:17:56Z","2021-08-13T16:38:43Z"
"","6486","import-control module doesn't complain about disallowed 'fully qualified name' usages","import-control module doesn't complain about disallowed 'fully qualified name' usages any possibility to check for illegal package access from a class to another? See https://github.com/checkstyle/checkstyle/issues/6486#issuecomment-469055664","open","","qoomon","2019-02-26T16:39:41Z","2019-05-19T05:47:17Z"
"","6469","Option to ArrayTrailingComma or new check that means the reverse","Imho it looks strange to have a trailing comma, so I'd rather like to be able to check that no trailing comma is ever used. This could either be done as a property of the `ArrayTrailingComma` that reverses its meaning or as a separate check that does the reverse.  It could also be considered to make a new check alltogether that also incorporates enums and is just called `TrailingComma`. It could be configured via `tokens` on what to apply (enum / array) and via property if commas are enforced or forbidden. Such a check would then deprecate the `ArrayTrailingComma` check actually.","closed","","Vampire","2019-02-24T00:50:46Z","2019-08-12T11:22:25Z"
"","6479","please support preceding, preceding-sibling, following and following-sibling in XPath expressions","If you use one of preceding, preceding-sibling, following and following-sibling axis in a `suppress-xpath` `query` in 8.17, you get the exception  ``` Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing .../Foo.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:217)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.processFiles(CheckstyleAntTask.java:349)         ... 157 more Caused by: java.lang.IllegalStateException: Cannot initialize context and evaluate query: //INSTANCE_INIT[not(preceding-sibling::LCURLY and following-sibling::RCURLY)]         at com.puppycrawl.tools.checkstyle.filters.XpathFilter.getItems(XpathFilter.java:194)         at com.puppycrawl.tools.checkstyle.filters.XpathFilter.isXpathQueryMatching(XpathFilter.java:160)         at com.puppycrawl.tools.checkstyle.filters.XpathFilter.accept(XpathFilter.java:123)         at com.puppycrawl.tools.checkstyle.filters.SuppressionXpathFilter.accept(SuppressionXpathFilter.java:87)         at com.puppycrawl.tools.checkstyle.TreeWalker.getFilteredMessages(TreeWalker.java:213)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:192)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:319)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)         ... 159 more Caused by: net.sf.saxon.trans.XPathException: Operation is not supported         at net.sf.saxon.expr.Expression.dynamicError(Expression.java:1437)         at net.sf.saxon.expr.AxisExpression.iterate(AxisExpression.java:1097)         at net.sf.saxon.functions.Empty$1.effectiveBooleanValue(Empty.java:138)         at net.sf.saxon.expr.OrExpression.effectiveBooleanValue(OrExpression.java:133)         at net.sf.saxon.expr.FilterIterator$NonNumeric.matches(FilterIterator.java:184)         at net.sf.saxon.expr.FilterIterator.getNextMatchingItem(FilterIterator.java:76)         at net.sf.saxon.expr.FilterIterator.next(FilterIterator.java:62)         at net.sf.saxon.om.SequenceIterator.forEachOrFail(SequenceIterator.java:127)         at net.sf.saxon.sxpath.XPathExpression.evaluate(XPathExpression.java:189)         at com.puppycrawl.tools.checkstyle.filters.XpathFilter.getItems(XpathFilter.java:191)         ... 167 more ```  which is actually caused by the suppressed ``` java.lang.UnsupportedOperationException: Operation is not supported        at com.puppycrawl.tools.checkstyle.xpath.ElementNode.throwUnsupportedOperationException(ElementNode.java:292)        at com.puppycrawl.tools.checkstyle.xpath.ElementNode.iterateAxis(ElementNode.java:230)        at com.puppycrawl.tools.checkstyle.xpath.AbstractNode.iterateAxis(AbstractNode.java:134)        at net.sf.saxon.expr.AxisExpression.iterate(AxisExpression.java:1079)        at net.sf.saxon.functions.Empty$1.effectiveBooleanValue(Empty.java:138)        at net.sf.saxon.expr.OrExpression.effectiveBooleanValue(OrExpression.java:133)        at net.sf.saxon.expr.FilterIterator$NonNumeric.matches(FilterIterator.java:184)        at net.sf.saxon.expr.FilterIterator.getNextMatchingItem(FilterIterator.java:76)        at net.sf.saxon.expr.FilterIterator.next(FilterIterator.java:62)        at net.sf.saxon.om.SequenceIterator.forEachOrFail(SequenceIterator.java:127)        at net.sf.saxon.sxpath.XPathExpression.evaluate(XPathExpression.java:189)        at com.puppycrawl.tools.checkstyle.filters.XpathFilter.getItems(XpathFilter.java:191)        at com.puppycrawl.tools.checkstyle.filters.XpathFilter.isXpathQueryMatching(XpathFilter.java:160)        at com.puppycrawl.tools.checkstyle.filters.XpathFilter.accept(XpathFilter.java:123)        at com.puppycrawl.tools.checkstyle.filters.SuppressionXpathFilter.accept(SuppressionXpathFilter.java:87)        at com.puppycrawl.tools.checkstyle.TreeWalker.getFilteredMessages(TreeWalker.java:213)        at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:192)        at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81)        at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:319)        at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)        at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:217)        at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.processFiles(CheckstyleAntTask.java:349)        at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.realExecute(CheckstyleAntTask.java:316)        at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.execute(CheckstyleAntTask.java:288)        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:293)        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.base/java.lang.reflect.Method.invoke(Method.java:566)        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)        at groovy.util.AntBuilder.performTask(AntBuilder.java:338)        at groovy.util.AntBuilder.nodeCompleted(AntBuilder.java:283)        at org.gradle.api.internal.project.ant.BasicAntBuilder.nodeCompleted(BasicAntBuilder.java:78)        at jdk.internal.reflect.GeneratedMethodAccessor867.invoke(Unknown Source)        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.base/java.lang.reflect.Method.invoke(Method.java:566)        at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:98)        at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)        at org.gradle.internal.metaobject.BeanDynamicObject$MetaClassAdapter.invokeMethod(BeanDynamicObject.java:479)        at org.gradle.internal.metaobject.BeanDynamicObject.tryInvokeMethod(BeanDynamicObject.java:191)        at org.gradle.internal.metaobject.AbstractDynamicObject.invokeMethod(AbstractDynamicObject.java:160)        at org.gradle.api.internal.project.antbuilder.AntBuilderDelegate.nodeCompleted(AntBuilderDelegate.java:118)        at groovy.util.BuilderSupport.doInvokeMethod(BuilderSupport.java:154)        at groovy.util.BuilderSupport.invokeMethod(BuilderSupport.java:67)        at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.call(PogoMetaClassSite.java:47)        at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:136)        at org.gradle.api.plugins.quality.internal.CheckstyleInvoker$_invoke_closure1.doCall(CheckstyleInvoker.groovy:58)        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.base/java.lang.reflect.Method.invoke(Method.java:566)        at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:98)        at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)        at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:264)        at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1034)        at groovy.lang.Closure.call(Closure.java:418)        at groovy.lang.Closure.call(Closure.java:434)        at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:71)        at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:53)        at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder$2.execute(DefaultIsolatedAntBuilder.java:152)        at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder$2.execute(DefaultIsolatedAntBuilder.java:134)        at org.gradle.api.internal.project.antbuilder.ClassPathToClassLoaderCache.withCachedClassLoader(ClassPathToClassLoaderCache.java:134)        at org.gradle.api.internal.project.antbuilder.DefaultIsolatedAntBuilder.execute(DefaultIsolatedAntBuilder.java:128)        at org.gradle.api.internal.project.IsolatedAntBuilder$execute$0.call(Unknown Source)        at org.gradle.api.plugins.quality.internal.CheckstyleInvoker.invoke(CheckstyleInvoker.groovy:51)        at org.gradle.api.plugins.quality.Checkstyle.run(Checkstyle.java:154)        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.base/java.lang.reflect.Method.invoke(Method.java:566)        at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)        at org.gradle.api.internal.project.taskfactory.StandardTaskAction.doExecute(StandardTaskAction.java:46)        at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:39)        at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:26)        at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:801)        at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:768)        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$1.run(ExecuteActionsTaskExecuter.java:131)        at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:300)        at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:292)        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:174)        at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90)        at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:120)        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:99)        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:77)        at org.gradle.api.internal.tasks.execution.OutputDirectoryCreatingTaskExecuter.execute(OutputDirectoryCreatingTaskExecuter.java:51)        at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:59)        at org.gradle.api.internal.tasks.execution.ResolveTaskOutputCachingStateExecuter.execute(ResolveTaskOutputCachingStateExecuter.java:54)        at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:59)        at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:101)        at org.gradle.api.internal.tasks.execution.FinalizeInputFilePropertiesTaskExecuter.execute(FinalizeInputFilePropertiesTaskExecuter.java:44)        at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:91)        at org.gradle.api.internal.tasks.execution.ResolveTaskArtifactStateTaskExecuter.execute(ResolveTaskArtifactStateTaskExecuter.java:62)        at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:59)        at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:54)        at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)        at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:34)        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.run(EventFiringTaskExecuter.java:51)        at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:300)        at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:292)        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:174)        at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90)        at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:46)        at org.gradle.execution.taskgraph.LocalTaskInfoExecutor.execute(LocalTaskInfoExecutor.java:42)        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareWorkItemExecutor.execute(DefaultTaskExecutionGraph.java:277)        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareWorkItemExecutor.execute(DefaultTaskExecutionGraph.java:262)        at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$ExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:135)        at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$ExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:130)        at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$ExecutorWorker.execute(DefaultTaskPlanExecutor.java:200)        at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$ExecutorWorker.executeWithWork(DefaultTaskPlanExecutor.java:191)        at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$ExecutorWorker.run(DefaultTaskPlanExecutor.java:130)        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)        at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)        at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)        at java.base/java.lang.Thread.run(Thread.java:834) ```  which occurs because those axis are not implemented in `com.puppycrawl.tools.checkstyle.xpath.ElementNode#iterateAxis`.  This makes some queries impossible or unnecessarily complex and slow.","closed","approved,","Vampire","2019-02-25T11:04:04Z","2019-09-28T13:42:16Z"
"","6608","minor: GeneratedJava14LexerTest depends on encoding, not on OS, so fix the assumption to represent this","If you set the encoding when running maven or if you run from IDE or if your default encoding actually is UTF-8 even on Windows, the test could pretty well run, so the assumption that is used to determine whether the test should be skipped should represent this and not check for the OS.","closed","miscellaneous,","Vampire","2019-03-25T04:26:45Z","2019-05-01T23:37:18Z"
"","6467","New check UncalledPrivateConstructor","If you have a private constructor that is not called by any code in the class, not by any other constructor, not by any factory method, not by any static field initializer, ..., there can basically only two reasons for this.  One reason is, the constructor was used previously but is superfluous now, or should have been used but is not yet.  The other reason is, to prevent instantiation, for example of a static utility class (being it an anti-pattern or not). For those, it is good practice to also throw `UnsupportedOperationException` or similar, to also prevent instantiation via reflection which would still work after making the constructor accessible, but not without bytcode manipulation if an exception is thrown.  So I'd like to suggest a new check that - reacts on all private constructors - searches calls to them - if any found   - check is done successfully - if none found   - if there is at least one other accessible constructor     - log ""uncalled private constructor""   - if all constructors are private     - check whether there is only one statement in the constructor which is an unconditional exception throw       - if not log ""should only throw exception""       - if no statement at all log ""should throw exception""","closed","","Vampire","2019-02-24T00:13:01Z","2019-12-13T00:07:44Z"
"","6619","Cached Google Style is slightly outdated and not like original","If you compare http://google.github.io/styleguide/javaguide.html and https://checkstyle.org/styleguides/google-java-style-20170228.html, you that it is displayed differently, for example original ![grafik](https://user-images.githubusercontent.com/325196/55269993-f70fea00-5299-11e9-86c8-bc86a78dae91.png) vs. cached ![grafik](https://user-images.githubusercontent.com/325196/55269987-f11a0900-5299-11e9-81ea-75df438cb09b.png)  Also the cached version got some minor changes that as far as I have seen do not change meaning, just add some clarification, as can be seen here: https://​github.com/google/styleguide/compare/594d91bfbb8dfcbcac0f148af8175f2b7ec9857b...91d6e367e384b0d8aaaf7ce95029514fcdf38651#diff-b6c9191ee5ccb7a5ef170e98e51d94d8  I'd like to suggest to update the cached version with a recent one that contains latest changes and also displays correctly.","closed","miscellaneous,","Vampire","2019-03-30T02:20:19Z","2019-05-07T15:56:40Z"
"","6558","Tests do not work properly on Windows with LF line endings","If Git is used without modifying line endings on checkout (e. g. `autocrlf=input`), you have Linux line endings on Windows too. The CS tests assume that on Windows the files have Windows line endings.  I personally hate it when a VCS mangles files automagically. I have globally set `autocrlf` to `input` just to remind me to change line ending to LF if I have it at CRLF accidentally on some file, but I don't like to have Git automatically change line endings on checkout, besides that it wastes space on my local disk.  In #6511 @rnveach mentioned that the website of CS requires to use `autocrlf` with `true`. With this the problem of course does not happen. But I'd suggest to instead fix these incompatibilities in the tests and then maybe require instead not to have `autocrlf` at `false` for CS instead? For the result in the repository this would mean the same whether it is set to `true` or `input`, which is line endings in the repository are LF. And for most users this should be the case anyway.  With the changes I propose, the tests work properly on Windows, whether someone has linux line endings or windows line endings doesn't matter anymore. You could (should?) actually also add another build job that runs with `autocrlf` set to `input` or `false` on the Windows build machines to make sure it stays like that in the future.  Followup of #6511","closed","miscellaneous,","Vampire","2019-03-11T10:13:29Z","2019-09-15T20:41:05Z"
"","6496","Make all FilterElements immutable","Identified when working on https://github.com/checkstyle/checkstyle/issues/4734 ,  Not all FilterElements are immutable. [CsvFilterElement has an add method](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/filters/CsvFilterElement.java#L71) and could be called if the instance of the class was leaked or maintained elsewhere.  We should verify all FilterElements are immutable and if not examine why they can't be and ensure other immutable classes aren't affected by them being mutable. If a FilterElement is made or is immutable, we should make it have equals/hashCode methods if it doesn't already.","closed","miscellaneous,","rnveach","2019-03-03T16:02:49Z","2019-03-03T19:37:23Z"
"","6050","config: upgraded sevntu-checkstyle-maven-plugin to 1.30.0","Identified at https://github.com/sevntu-checkstyle/sevntu.checkstyle/pull/709#issuecomment-408118508  Caused: > checkstyle-regression Unable to instantiate 'com.github.sevntu.checkstyle.checks.coding.EnumTrailingCommaAndSemicolonCheck' class","closed","","rnveach","2018-07-27T02:10:39Z","2018-07-27T02:51:16Z"
"","6606","Exception in JavadocMethod to get access to class in jdk9","Identified at https://github.com/checkstyle/eclipse-cs/issues/80#issuecomment-476021622  The following configuration in eclipse: ````                  ```` produced the following exception on JDK9: ```` !ENTRY net.sf.eclipsecs.core 4 0 2018-05-22 13:17:39.345 !MESSAGE Checkstyle-Plugin: Exception was thrown while processing /Users/rwalker/Documents/workspace/vocabs-registry/src/test/java/au/org/ands/vocabs/toolkit/test/arquillian/SubscriptionTests.java !STACK 0 com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing /Users/rwalker/Documents/workspace/vocabs-registry/src/test/java/au/org/ands/vocabs/toolkit/test/arquillian/SubscriptionTests.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at net.sf.eclipsecs.core.builder.Auditor.runAudit(Auditor.java:158)         at net.sf.eclipsecs.core.builder.CheckstyleBuilder.handleBuildSelection(CheckstyleBuilder.java:306)         at net.sf.eclipsecs.core.builder.CheckstyleBuilder.build(CheckstyleBuilder.java:172)         at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:735)         at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)         at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:206)         at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:246)         at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:301)         at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)         at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:304)         at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:360)         at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:383)         at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:142)         at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:232)         at org.eclipse.core.internal.jobs.Worker.run(Worker.java:56) Caused by: java.lang.SecurityException: Prohibited package name: java.sql         at java.base/java.lang.ClassLoader.preDefineClass(ClassLoader.java:889)         at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1005)         at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:174)         at java.base/java.net.URLClassLoader.defineClass(URLClassLoader.java:545)         at java.base/java.net.URLClassLoader.access$100(URLClassLoader.java:83)         at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:453)         at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:447)         at java.base/java.security.AccessController.doPrivileged(Native Method)         at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:446)         at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:563)         at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496)         at net.sf.eclipsecs.core.builder.ProjectClassLoader.loadClass(ProjectClassLoader.java:142)         at java.base/java.lang.Class.forName0(Native Method)         at java.base/java.lang.Class.forName(Class.java:375)         at com.puppycrawl.tools.checkstyle.checks.javadoc.ClassResolver.safeLoad(ClassResolver.java:212)         at com.puppycrawl.tools.checkstyle.checks.javadoc.ClassResolver.isLoadable(ClassResolver.java:190)         at com.puppycrawl.tools.checkstyle.checks.javadoc.ClassResolver.resolveQualifiedName(ClassResolver.java:223)         at com.puppycrawl.tools.checkstyle.checks.javadoc.ClassResolver.resolveMatchingExplicitImport(ClassResolver.java:130)         at com.puppycrawl.tools.checkstyle.checks.javadoc.ClassResolver.resolve(ClassResolver.java:78)         at com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheck.resolveClass(AbstractTypeAwareCheck.java:241)         at com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheck.tryLoadClass(AbstractTypeAwareCheck.java:258)         at com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheck$RegularClass.getClazz(AbstractTypeAwareCheck.java:470)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck$ExceptionInfo.getClazz(JavadocMethodCheck.java:1010)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck$ExceptionInfo.access$100(JavadocMethodCheck.java:968)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.isInThrows(JavadocMethodCheck.java:950)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.checkThrowsTags(JavadocMethodCheck.java:893)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.checkComment(JavadocMethodCheck.java:494)         at com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.processAST(JavadocMethodCheck.java:354)         at com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheck.visitToken(AbstractTypeAwareCheck.java:157)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:389)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:500)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:329)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:186)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 16 more ````  > Caused by: java.lang.SecurityException: Prohibited package name: java.sql at com.puppycrawl.tools.checkstyle.checks.javadoc.ClassResolver.resolve(ClassResolver.java:78)  we need to catch all exceptions at https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheck.java#L237","closed","approved,","romani","2019-03-25T02:16:40Z","2019-04-20T14:30:33Z"
"","6857","InvalidJavadocPositionCheck: false negative on javadocs with local variables","Identified at https://github.com/checkstyle/checkstyle/pull/6718#discussion_r294065700 ,  Javadocs attached to a local variable are seen as valid because it thinks they are fields and it doesn't check if they are located in the class object token or not. See https://github.com/checkstyle/checkstyle/blob/6bab0788365ba9afb713e14d9f6263f1f60b7aa2/src/it/resources/com/google/checkstyle/test/chapter7javadoc/rule711generalform/InputInvalidJavadocPosition.java#L44  `invalid` was used because IT area wouldn't allow `warn` since it doesn't produce a violation.  Extra example: ```` $ cat TestClass.java public class TestClass {     void method() { /** Test */ int field;     } }  $ cat TestConfig.xml                        $ java -jar checkstyle-8.22-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:3: First sentence of Javadoc is missing an ending period. [SummaryJavadoc] Audit done. Checkstyle ends with 1 errors. ````  Expect no violation as local variable can't have javadocs.","closed","approved,","rnveach","2019-06-27T10:51:35Z","2019-06-29T14:13:25Z"
"","6435","minor: removed non-modules from PackageObjectFactory","Identified at https://github.com/checkstyle/checkstyle/pull/6432#pullrequestreview-204617009 ,  PackageObjectFactory lists classes that are not modules and should be removed.","closed","","rnveach","2019-02-19T00:57:51Z","2019-02-19T03:44:15Z"
"","6402","new filter SuppressionSingleFilter","Identified at https://github.com/checkstyle/checkstyle/pull/6368#issuecomment-459574342 ,  Since we are creating a treewalker filter, we also need a normal filter that can filter out non-AbstractCheck violations.  See https://github.com/checkstyle/checkstyle/issues/5879#issue-328745344 for reasons why this single filter is needed in config.  -------","closed","has bounty,","rnveach","2019-02-01T13:35:54Z","2019-07-15T19:24:18Z"
"","6350","EmptyLineSeparatorCheck: surviving mutant from REMOVE_CONDITIONALS","Identified at https://github.com/checkstyle/checkstyle/pull/6347#discussion_r245495718 ,  Line surviving mutant: https://github.com/checkstyle/checkstyle/blob/ea7b2dd0a9060d427273bd88909e370cb9f88436/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java#L422  Needs file named `InputEmptyLineSeparatorCommentPackage.java`: ```` //non-compiled with javac: non-compilable annotation, for testing @Deprecated package com.puppycrawl.tools.checkstyle.checks.whitespace.emptylineseparator; ````  Brief: To meet the conditions, we need a package with a annotation that is stored in a file that isn't package-info.java . Specifics: The rest of the conditions in the method have to be met except for the line that is the surviving mutant. Child count of 0 is because there is only 1 annotation, which is the first child of the package definition, and it has no empty line or javadoc before it. Package must also be on line 2+. The mutation's condition has to be it's inverse to satisfy killing the mutation, so it must be a file that isn't package-info.java. This is what came up when I did a regression search as we have a similar file checkstyle elsewhere.  File isn't compilable because only package-infos can have annotations and we need this to be a non package-info file.  This mutation needs to be killed and was left surviving for now.","closed","miscellaneous,","rnveach","2019-01-06T17:23:42Z","2019-01-06T22:30:24Z"
"","6262","XmlLoader: remove incomplete namespaces support","Identified at https://github.com/checkstyle/checkstyle/pull/6251#issuecomment-445466617 while working on line https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/XmlLoader.java#L70 ,  Removing this code results in no test failures and I don't know how to add a test to keep it. We don't use namespaces and it seems even trying to use it results in a failure anyways so we should just remove it.  ``` /var/tmp$ java -jar checkstyle-8.12-all.jar -c config.xml TestClass.java  com.puppycrawl.tools.checkstyle.api.CheckstyleException: unable to parse configuration stream - Attribute ""xmlns:xi"" must be declared for element type ""module"".:6:69 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:447) 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:392) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:545) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:472) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:226) Caused by: org.xml.sax.SAXParseException; systemId: file:/var/tmp/config.xml; lineNumber: 6; columnNumber: 69; Attribute ""xmlns:xi"" must be declared for element type ""module"". 	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203) 	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:134) 	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:396) 	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:327) 	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:284) 	at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator.addDTDDefaultAttrsAndValidate(XMLDTDValidator.java:1253) 	at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator.handleStartElement(XMLDTDValidator.java:1917) 	at com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator.startElement(XMLDTDValidator.java:742) 	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:374) 	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl$NSContentDriver.scanRootElementHook(XMLNSDocumentScannerImpl.java:613) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:3132) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:852) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:602) 	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:112) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:505) 	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:842) 	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:771) 	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141) 	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1213) 	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:643) 	at com.puppycrawl.tools.checkstyle.XmlLoader.parseInputSource(XmlLoader.java:85) 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader.parseInputSource(ConfigurationLoader.java:194) 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:440) 	... 4 more Checkstyle ends with 1 errors.  /var/tmp$ cat config.xml                                     ```","closed","miscellaneous,","rnveach","2018-12-09T13:21:42Z","2018-12-09T17:06:01Z"
"","6220","config: forced more travis CI to run for all file changes","Identified at https://github.com/checkstyle/checkstyle/pull/6215#issuecomment-439577599 ,  Violation in `.github` file was missed because the files are part of the list that we skip validation if the commit only contains those files. This changes the travis job for `checkstyle and sevntu-checkstyle` and `Releasenotes generation` to always run.","closed","","rnveach","2018-11-17T01:59:13Z","2018-11-17T23:12:38Z"
"","6216","sync content of cli tool in xdoc and cli tool help output","identified at https://github.com/checkstyle/checkstyle/pull/6211#issuecomment-438958556  TODO: 1) We need to move content from xdoc to cli output all valuable details of how options works, looks like xdoc is more reach in explanations.  2) find way to generate content of xdoc section directly from cli tool output, to avoid manual sync in future. All hyperlinks that we use in xdoc is ok to sacrifice. Or place then in non-generated section.","closed","miscellaneous,","romani","2018-11-16T21:38:12Z","2020-04-29T14:21:52Z"
"","6207","Expand XPath IT Regression Testing","Identified at https://github.com/checkstyle/checkstyle/pull/6198#issuecomment-437386863 ,  We need to expand XPath IT Regression to all checks that support it.  All checks listed under [Currently, filter supports the following checks](http://checkstyle.sourceforge.net/config_filters.html#SuppressionXpathFilter_Description) must appear with regression tests in https://github.com/checkstyle/checkstyle/tree/master/src/it/java/org/checkstyle/suppressionxpathfilter to showcase suppression by XPath works for the check. Every log statement must be tested from the Check, so if 1 check has 3 log statements, the XPath test must have 3 tests, 1 for each log statement.  Tests can be copy of examples from our normal test tier at https://github.com/checkstyle/checkstyle/tree/master/src/test/java/com/puppycrawl/tools/checkstyle/checks just smaller.  Each PR must contain only 1 check. Each PR must contain a link to the check's documentation in the first post. (Ex: https://checkstyle.org/config_coding.html#ArrayTrailingComma for ArrayTrailingCommaCheck)","open","gsoc third issue,","rnveach","2018-11-10T14:07:26Z","2022-07-07T13:57:41Z"
"","6107","minor: fixed inlined javadoc tag from being split between lines","Identified at https://github.com/checkstyle/checkstyle/pull/6101#issuecomment-418950942","closed","","rnveach","2018-09-06T03:26:09Z","2018-09-06T11:43:46Z"
"","6273","JavadocMethod: False positive from comment inside method","Identified at https://github.com/checkstyle/checkstyle/issues/6272 ,  JavadocMethod has a mutator that is surviving at `isCommentNodesRequired`. http://rveach.no-ip.org/checkstyle/regression/pitest-reports/24/javadoc/com.puppycrawl.tools.checkstyle.checks.javadoc/JavadocMethodCheck.java.html#org.pitest.mutationtest.report.html.SourceFile@29d1b4da_339  When looking into it, yes the check is not comments aware because it access FileContents directly and has direct access to the source code. When removing this check and running regression, I found the below false positive where an AST comment is interfering with proper validation.  ```` $ cat TestClass.java public class TestClass {     @Deprecated     /** */     public void foo14() { }      @Deprecated     /** */     public void foo15() { /** */ } }  $ cat TestConfig.xml                        $ java -jar checkstyle-8.15-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:2:5: Missing a Javadoc comment. [JavadocMethod] Audit done. Checkstyle ends with 1 errors. ````  The 2 cases are exactly the same and so I am expecting the same result. The only difference between the 2 is the 2nd method has a comment inside it. This is causing the violation on line 6 to be suppressed. I am expecting violations for both lines as the javadocs are similar.","closed","javadoc,","rnveach","2018-12-12T13:11:24Z","2018-12-19T00:44:36Z"
"","6275","Pitest script order issue locally","Identified at https://github.com/checkstyle/checkstyle/issues/6264#issuecomment-446314799 and https://github.com/checkstyle/checkstyle/pull/6274 .   I am seeing some weird differences in the pitest script (locally) when adding the new mutator. I am seeing the same line move to a new location, so my commit PR was showing some differences. Example: ```` +IndentLevel.java.html:            for (int i = levels.nextSetBit(0); i >= 0;  IndentationCheck.java.html:        handlerFactory.clearCreatedHandlers();  IndentationCheck.java.html:        handlers.clear();  IndentationCheck.java.html:        primordialHandler.checkIndentation(); -IndentLevel.java.html:            for (int i = levels.nextSetBit(0); i >= 0; ```` and ```` -ElseHandler.java.html:        return getMainAst().getFirstChild();  ElseHandler.java.html:            super.checkTopLevelToken(); +ElseHandler.java.html:        return getMainAst().getFirstChild(); ````  When running in the CI on the server, it had me undo all the moves I had to make. Example: https://circleci.com/gh/checkstyle/checkstyle/13055#tests/containers/1  So there is some issue with ordering with the script on certain systems. I am using Lubuntu 17.","closed","miscellaneous,","rnveach","2018-12-12T21:03:41Z","2018-12-13T05:07:41Z"
"","6117","Xpath query for numeric node","Identified at https://github.com/checkstyle/checkstyle/issues/6115#issuecomment-421131651  https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java#L261 Just like xpath elements only have text if they have an ident, numbers don't have text so you can't make an xpath on a specific number.  ````     |      |--LITERAL_RETURN -> return [3:0]     |      |  |--EXPR -> EXPR [3:7]     |      |  |  `--NUM_INT -> 1 [3:7]","open","xpath,","rnveach","2018-09-14T12:02:39Z","2020-08-19T10:50:49Z"
"","6028","TreeWalkerAuditEvent doesn't create events on the absolute file path","Identified at https://github.com/checkstyle/checkstyle/issues/5979  The problem is that file name is not part of `LocalizedMessage`, it is stored inside `AuditEvent` and `TreeWalkerAuditEvent`  Suppose we have folder `FileNameTester` and inside this folder we have class file `InputMain.java` ``` package filenametester;  public class InputMain { 	public void test()  	{         int a = 1;         int b = 2;         int c = a + b;     } } ```  Configuration file ```                        ```  Running checkstyle will throw violation ``` Starting audit... [WARN] FileNameTester/InputMain.java:5:9: '{' at column 2 should be on the previous line. [LeftCurly] Audit done. ```  Configuration with `SuppresssionFilter` ```                                               ```  Suppressions file - suppressions.xml ```    	  ```  Running checkstyle gives no errors ``` Starting audit... Audit done. ```  Let's now use `SuppressionXpathFilter` instead of `SuppressionFilter` ```         	     	    	 	                        ```  Suppressions xpath file - suppressions_xpath.xml ```      ```  Now if you execute checkstyle with file regular expression (inside `suppressions_xpath.xml`) `files="".*InputMain""` it will throw no error, but if you use `files="".*FileNameTester""` then violation won't be suppressed.  The problem is `AuditEvent` stores smth like `/Users/timurt/Documents/FileNameTester/InputMain.java` `TreeWalkerAuditEvent` stores simple `InputMain.java`  thanks to @timurt for reproducing the issue","closed","easy,","rnveach","2018-07-11T12:47:47Z","2018-11-10T05:28:29Z"
"","6865","Javadoc mishandling NEWLINE when next to ATTRIBUTE","Identified at https://github.com/checkstyle/checkstyle/issues/5941#issuecomment-507034598 ,  This only occurs on Windows because of the `\r\n` for line endings.  ``` $ cat Test.javadoc *   $ java -jar checkstyle-8.22-all.jar -j Test.javadoc JAVADOC -> JAVADOC [0:0] |--LEADING_ASTERISK -> * [0:0] |--TEXT ->   [0:1] |--HTML_ELEMENT -> HTML_ELEMENT [0:2] |   `--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [0:2] |       `--KEYGEN_TAG -> KEYGEN_TAG [0:2] |           |--START -> < [0:2] |           |--KEYGEN_HTML_TAG_NAME -> keygen [0:3] |           |--WS ->   [0:9] |           |--ATTRIBUTE -> ATTRIBUTE [0:10] |           |   |--HTML_TAG_NAME -> attr [0:10] |           |   |--EQUALS -> = [0:14] |           |   `--ATTR_VALUE -> ""something""\r [0:15] |           |--NEWLINE -> \n [0:27] |           |--LEADING_ASTERISK -> * [1:0] |           |--WS ->   [1:1] |           |--ATTRIBUTE -> ATTRIBUTE [1:2] |           |   |--HTML_TAG_NAME -> attr2 [1:2] |           |   |--EQUALS -> = [1:7] |           |   `--ATTR_VALUE -> ""someotherting"" [1:8] |           `--END -> > [1:24] |--NEWLINE -> \r\n [1:26] ```  attention to: ``` |           |   `--ATTR_VALUE -> ""something""\r [0:15] |           |--NEWLINE -> \n [0:27] ```  `""something""\r [0:15]` shouldn't have the `\r` on the end. It should be connected to the `NEWLINE`.","closed","approved,","rnveach","2019-06-30T14:07:29Z","2019-07-09T05:27:12Z"
"","6549","IllegalType: can't produce a violation on parameters","Identified at https://github.com/checkstyle/checkstyle/issues/5506 ,  ```` $ cat TestClass.java public class TestClass {     void method(StringBuffer test) {     } }  $ cat TestConfig.xml                                               $ java -jar checkstyle-8.18-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  I am expecting a violation on the method parameter. I don't see what is wrong with the configuration.","closed","","rnveach","2019-03-10T17:38:10Z","2019-03-10T17:46:56Z"
"","6494","Remove hashCode and equals methods from FilterSet","Identified at https://github.com/checkstyle/checkstyle/issues/4734#issuecomment-469031982 ,  [FilterSet](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/FilterSet.java) should remove `hashCode` and `equals` methods as it is not immutable and we don't care about order. It is not immutable right now since it has a removeFilter method. Checker is the only class that uses this method, and it doesn't use it directly except in a test. It is just a public method anyone can use it if they use the direct class. It is not supported by RootModule interface.  With such override, user can put object to map, changes object, try to find the same object in map, got nothing. But this class is API, it has to be done with breacking compatibility label.","closed","breaking compatibility,","rnveach","2019-03-03T15:37:26Z","2019-03-03T17:52:50Z"
"","6660","update CLI to allow show tree branch that match xpath","idea is taken from #4944  We need CLI version of it. User should define file and xpath expression, and cli print brach of AST that match.   ---  Bounty will be 30","closed","has bounty,","romani","2019-04-13T17:50:27Z","2019-09-08T13:05:32Z"
"","6348","minor: refactor paths for spellchecker script","I'm about to offer the Travis integration to another project that uses Travis, so I revisited the script and it seems like there are only two minor changes I wanted to make in order to make it easier to reuse with different paths.","closed","","jsoref","2019-01-06T06:58:39Z","2019-01-06T18:34:59Z"
"","6237","minor: Test build command in Travis CI","I'd like to test whether the build with `mvn install` works on Travis CI and am firing away and opening this unnecessary PR following #6119.","closed","","krichter722","2018-12-01T17:34:39Z","2019-02-26T07:09:51Z"
"","6810","Enforcing collections be non-null","I'd like to enforce that collections in our domain objects be non-null.  ``` public class Order {     // if this isn't initialized, flag it     private List lineItems = new ArrayList();      // if this isn't tagged w/ @Nonnull, flag it     @Nonnull     public List getLineItems() {        return lineItems;     }      // if this isn't tagged w/ @Nonnull, flag it    public void setLineItems(@Nonnull List lineItems) {         this.lineItems = lineItems;     } } ```  Is this something that would make a good checkstyl check? Or be more appropriate for spotbugs/fb-contrib?   I'm willing to do the work to write the detector, but not sure if this is something that either project would like contributed, or would be more appropriate for our internal checks.","closed","","efenderbosch","2019-06-07T14:08:08Z","2019-08-09T02:17:42Z"
"","6116","how to ensure an expression to an Boolean type in the rule BooleanExpressionComplexity?","I want to know u how to parse an expression like (classA.methodB.methedCreturnObj.objProperty)as an bool type. Which part of code I can refer to.  I'll be very appreciate with your answer.Thank you very much！！","closed","","dads546","2018-09-14T06:57:50Z","2018-09-14T07:32:32Z"
"","6719","minor: fix version numbers for MissingJavadocMethodCheck","I looked over the PR before merging but didn't realize the version numbers were still outdated.","closed","","rnveach","2019-05-06T01:54:12Z","2019-05-06T10:52:14Z"
"","6396","Improve documentation of ""cacheFile"" property","I just stumbled over the ""cacheFile"" property by accident. The documentation at http://checkstyle.sourceforge.net/config.html#Properties is very short, it basically just describes how to set the file name.  What is really missing in the documentation, however, is an answer to the question, when is caching safe to be used and when not? Do I as a user have to watch for some corner cases, or can I always enable this locally and on my CI server? Is it okay to re-use a cachefile from another branch, when running multi-branch-builds on Jenkins?  Side note: Depending on the outcome, we may also want to check if that property should be set by the eclipse plugin by default.","closed","","Bananeweizen","2019-01-28T12:50:31Z","2019-01-31T10:35:57Z"
"","6311","new check: OrderedProperties","I have written a new check OrderedPropertiesCheck. It checks property files if they are in correct sort order.  In the same way your development environment will do. If you do merges and continuous builds, than you would like to check this automatically.  ``` cat OrderedPropertiesCheckConfig.xml          ```   # Here some examples  ## Only the order of keys is important. Here the value are in correct order, but it is not relevant.  ``` cat src/test/resources/com/puppycrawl/tools/checkstyle/checks/orderedproperties/InputOrderedProperties1OrderKey.properties #only order of keys are important key2=value1 key1=value2 - violation ```  Now correctly sorted:  ``` cat src/test/resources/com/puppycrawl/tools/checkstyle/checks/orderedproperties/ExpectedOrderedProperties1OrderKey.properties key1=value2 #only order of keys are important key2=value1 ```  ## Test the order of an empty value.   An empty value is not relevant. key11 was only added because I no not know how to ""verify"" without errors.  ``` cat src/test/resources/com/puppycrawl/tools/checkstyle/checks/orderedproperties/InputOrderedProperties2EmptyValue.properties key1= key2=value2 key11=value1 - violation ```  ## Here we would like to use an Locale independent order mechanism, an binary order.   This is available with String.compareTo() method. As reference you can use the ascii table.   * The @ sign is on position 64 and comes first  * The capital A is on 65 and the lowercase a is on position 97 on the ascii table  * On line 4 you have an a umlaut. This belongs to the extended ascii table and comes at last position. This is the violation here.  * Key and subkey are in correct order here, because only keys are relevant.   Therefore on line 5 you have only ""key"" an nothing behind.  On line 6 you have ""key."" The dot is on position 46 which is higher than nothing.   ``` cat -b  src/test/resources/com/puppycrawl/tools/checkstyle/checks/orderedproperties/InputOrderedProperties3BinaryOrder.properties      1	@=64      2	A=65      3	a=97      4	ä=132 - violation      5	key=107 than nothing      6	key.sub=k is 107 and dot is 46 ```  ## Number before text  ``` cat src/test/resources/com/puppycrawl/tools/checkstyle/checks/orderedproperties/InputOrderedProperties4Numbers.properties hello=Hello # key cancel should be before hello cancel=Cancel - violation 3=3 - violation 22=22 - violation 111=111 - violation 01=01 - violation  ```  Now correctly sorted:  ``` cat src/test/resources/com/puppycrawl/tools/checkstyle/checks/orderedproperties/ExpectedOrderedProperties4Numbers.properties 01=01 111=111 22=22 3=3 # key cancel should be before hello cancel=Cancel hello=Hello  ```   # Implementation  The implementation can be found here:  https://github.com/thomassenger/checkstyle/tree/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/OrderedPropertiesCheck.java","closed","new module,","thomassenger","2018-12-23T15:32:56Z","2019-06-21T15:36:40Z"
"","6390","NoWhitespaceAfter and NoWhitespaceBefore false positives in method signatures","I have the following configs: ```xml                                                 ```  These two methods should not trigger either:  ```java        # ImmutableAbstractCollection.java 178    @Override 179    @SuppressWarnings(""SuspiciousToArrayCall"") 180    public final  T[] toArray(final T[] prototype) 181    { 182        synchronized(this.internalCollection) 183        { 184            this.checkValidity(); 185            return this.internalCollection.toArray(prototype); 186        } 187    }         # LicenseManager.java 144    public static synchronized LicenseManager getInstance() 145    { 146        if(LicenseManager.instance == null) 147        { 148            LicenseManager.instance = new LicenseManager(); 149        } 150 151        return LicenseManager.instance; 152    } ```  However, I get these errors and have to suppress them:  ``` ... ImmutableAbstractCollection.java [180,18] (whitespace) NoWhitespaceBefore: '","closed","awaiting response,","beamerblvd","2019-01-23T04:23:30Z","2019-09-26T12:31:14Z"
"","6106","Potentially invalid Indentation and WhitespaceAround violations with google_checks.xml with code formatted by google-java-format.","I have made the following repository to demonstrate the failures when running with the google_checks.xml against code formatted by the latest version of google-java-format.  I believe the violations reported are incorrect as the code is formatted by the google java formatter and the formatters check passes the code, is it simply the case that the google_checks.xml is out of date in regards to formatting lambdas?  A repository that contains example code to demonstrate the issue: https://bitbucket.org/nburrell/google-style  CI build that demonstrates the issue: https://bitbucket.org/nburrell/google-style/addon/pipelines/home#!/results/4  Code that is formatted correctly yet checkstyle violates:  [IndentCheck](https://bitbucket.org/nburrell/google-style/src/master/src/main/java/com/atlassian/IndentCheck.java) [WhitespaceAround](https://bitbucket.org/nburrell/google-style/src/master/src/main/java/com/atlassian/WhitespaceAroundCheck.java)  The first command formats the code: `mvn com.coveo:fmt-maven-plugin:format`  > [INFO] Processed 2 files (0 reformatted).   The second uses the formatter check method to check the formatted code: `mvn com.coveo:fmt-maven-plugin:check`  > [INFO] Processed 2 files (0 non-complying).  The third runs checkstyle which reports multiple violations: `mvn checkstyle:check`  > [INFO] Starting audit... > [WARN] /home/nburrell/code/java/google-style/src/main/java/com/atlassian/WhitespaceAroundCheck.java:11:24: WhitespaceAround: '{' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3) [WhitespaceAround] > [WARN] /home/nburrell/code/java/google-style/src/main/java/com/atlassian/WhitespaceAroundCheck.java:11:24: WhitespaceAround: '}' is not preceded with whitespace. [WhitespaceAround] > [WARN] /home/nburrell/code/java/google-style/src/main/java/com/atlassian/IndentCheck.java:15: 'lambda arguments' have incorrect indentation level 12, expected level should be one of the following: 6, 8. [Indentation] > [WARN] /home/nburrell/code/java/google-style/src/main/java/com/atlassian/IndentCheck.java:16: 'block' child have incorrect indentation level 14, expected level should be one of the following: 8, 10, 12. [Indentation] > [WARN] /home/nburrell/code/java/google-style/src/main/java/com/atlassian/IndentCheck.java:17: 'block rcurly' have incorrect indentation level 12, expected level should be one of the following: 6, 8. [Indentation] > Audit done. > [WARNING] src/main/java/com/atlassian/WhitespaceAroundCheck.java:[11,24] (whitespace) WhitespaceAround: WhitespaceAround: '{' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3) > [WARNING] src/main/java/com/atlassian/WhitespaceAroundCheck.java:[11,24] (whitespace) WhitespaceAround: WhitespaceAround: '}' is not preceded with whitespace. > [WARNING] src/main/java/com/atlassian/IndentCheck.java:[15] (indentation) Indentation: 'lambda arguments' have incorrect indentation level 12, expected level should be one of the following: 6, 8. > [WARNING] src/main/java/com/atlassian/IndentCheck.java:[16] (indentation) Indentation: 'block' child have incorrect indentation level 14, expected level should be one of the following: 8, 10, 12. > [WARNING] src/main/java/com/atlassian/IndentCheck.java:[17] (indentation) Indentation: 'block rcurly' have incorrect indentation level 12, expected level should be one of the following: 6, 8.","open","","nathanburrell","2018-09-04T04:14:12Z","2018-09-09T14:58:17Z"
"","6128","mvn checkstyle:checkstyle ignores local suppressions","I have a project that I'm running `mvn checkstyle:checkstyle` on and it produces errors since it ignores the local suppressions. Our organization uses a library with common pom settings which specifies the default suppressions location. ```         8.5         2.17         3.0.0         2.5.2         3.0.2         checkstyle/checkstyle.xml         checkstyle/common-suppressions.xml ``` The project I'm running the command on has an additional checkstyle/suppresions.xml file. When running `mvn install` or `mvn test`, those suppressions get picked up and the project builds fine.","closed","","stanislavkozlovski","2018-09-24T11:21:56Z","2018-10-18T02:59:27Z"
"","6932","Error reading configuration file in Eclipse behind corporate proxy","I get the following stack trace in Eclipse when the network does not work correctly (i'm behind a corporate proxy) :  ``` com.puppycrawl.tools.checkstyle.api.CheckstyleException: unable to parse configuration stream 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:453) 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:415) 	at net.sf.eclipsecs.core.builder.CheckerFactory.createCheckerInternal(CheckerFactory.java:275) 	at net.sf.eclipsecs.core.builder.CheckerFactory.createChecker(CheckerFactory.java:133) 	at net.sf.eclipsecs.core.builder.Auditor.runAudit(Auditor.java:141) 	at net.sf.eclipsecs.core.builder.CheckstyleBuilder.handleBuildSelection(CheckstyleBuilder.java:307) 	at net.sf.eclipsecs.core.jobs.RunCheckstyleOnFilesJob.runInWorkspace(RunCheckstyleOnFilesJob.java:119) 	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:42) 	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63) Caused by: java.net.ConnectException: Connection refused: connect 	at java.net.DualStackPlainSocketImpl.connect0(Native Method) 	at java.net.DualStackPlainSocketImpl.socketConnect(Unknown Source) 	at java.net.AbstractPlainSocketImpl.doConnect(Unknown Source) 	at java.net.AbstractPlainSocketImpl.connectToAddress(Unknown Source) 	at java.net.AbstractPlainSocketImpl.connect(Unknown Source) 	at java.net.PlainSocketImpl.connect(Unknown Source) 	at java.net.SocksSocketImpl.connect(Unknown Source) 	at java.net.Socket.connect(Unknown Source) 	at sun.security.ssl.SSLSocketImpl.connect(Unknown Source) 	at sun.security.ssl.BaseSSLSocketImpl.connect(Unknown Source) 	at sun.net.NetworkClient.doConnect(Unknown Source) 	at sun.net.www.http.HttpClient.openServer(Unknown Source) 	at sun.net.www.http.HttpClient.openServer(Unknown Source) 	at sun.net.www.protocol.https.HttpsClient.(Unknown Source) 	at sun.net.www.protocol.https.HttpsClient.New(Unknown Source) 	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(Unknown Source) 	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(Unknown Source) 	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(Unknown Source) 	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(Unknown Source) 	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(Unknown Source) 	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(Unknown Source) 	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(Unknown Source) 	at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.setupCurrentEntity(Unknown Source) 	at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.startEntity(Unknown Source) 	at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.startDTDEntity(Unknown Source) 	at com.sun.org.apache.xerces.internal.impl.XMLDTDScannerImpl.setInputSource(Unknown Source) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.dispatch(Unknown Source) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.next(Unknown Source) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(Unknown Source) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(Unknown Source) 	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source) 	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown Source) 	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown Source) 	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(Unknown Source) 	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(Unknown Source) 	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source) 	at com.puppycrawl.tools.checkstyle.XmlLoader.parseInputSource(XmlLoader.java:84) 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader.parseInputSource(ConfigurationLoader.java:197) 	at com.puppycrawl.tools.checkstyle.ConfigurationLoader.loadConfiguration(ConfigurationLoader.java:443) 	... 8 more ```  I guess that checkstyle is trying to download the configuration dtd (maybe?). I think that it should not and should use a local dtd if this is the case.","closed","","nicolashenry","2019-07-29T16:10:03Z","2019-08-05T03:02:24Z"
"","6080","fails on ß","I get the following exception when parsing a method with a ß (german eszett) in its name: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing C:\Users\Sebastian\git\pipe.line\web-test\src\test\java\at\wrwks\transformers\cucumber\steps\BuildingSearchSteps.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:581)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:472)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:226) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: TokenStreamRecognitionException occurred while parsing file C:\Users\Sebastian\git\pipe.line\web-test\src\test\java\at\wrwks\transformers\cucumber\steps\BuildingSearchSteps.java.         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:98)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:181)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)          at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Caused by: line 585:37: Unexpected character 0xbc in identifier         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaLexer.nextToken(GeneratedJavaLexer.java:405)         at antlr.TokenStreamHiddenTokenFilter.consume(TokenStreamHiddenTokenFilter.java:38)         at antlr.TokenStreamHiddenTokenFilter.nextToken(TokenStreamHiddenTokenFilter.java:134)         at antlr.TokenBuffer.fill(TokenBuffer.java:69)         at antlr.TokenBuffer.LA(TokenBuffer.java:80)         at antlr.LLkParser.LA(LLkParser.java:52)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.modifiers(GeneratedJavaRecognizer.java:519)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3232)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:2542)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.class Definition(GeneratedJavaRecognizer.java:634)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:556)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:389)         at com.puppycrawl.tools.checkstyle.grammar.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:202)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:92)         ... 8 more Checkstyle ends with 1 errors.","closed","","SebastianDietrich","2018-08-12T22:57:51Z","2018-08-14T05:31:58Z"
"","6088","Issue #5608: Javadoc type allowed annotations","I followed the example from allowedAnnotations in javadocMethod and implemented it in javadocType. As the functionality is identical, I made a utility class AllowedAnnotationsUtil to avoid code duplication. There is also a unit test added that proves the feature works.  I only don't know what to put in the ""since"" version. I added ""8.13"" because that's what I found in the pom.  Please let me know what else I might be missing! :-)","closed","","ngeor","2018-08-18T07:33:36Z","2018-08-18T11:24:46Z"
"","6465","Anonymous inner class should be lambda","I don't know whether Checkstyle has enough information to do this, but it would be nice to have a check that complains about anonymous inner classes that should be replaced by an according lambda, expression lambda or method reference.","open","","Vampire","2019-02-23T17:33:24Z","2019-03-25T12:10:52Z"
"","6359","Jenkins: switch the build machine (slave) from hyper.sh to AWS spot instance","Hyper.sh cloud will be terminated at Jan 15, so we need a stable replacement. As Jenkins is living at AWS EC2 already, the best idea seems to be to use AWS EC2 Spot instances as new slaves via https://wiki.jenkins.io/display/JENKINS/Amazon+EC2+Plugin","closed","CI,","daniilyar","2019-01-08T20:27:55Z","2019-01-10T14:43:29Z"
"","6957","config: bump maven.site.plugin.version to 3.8.2","https://travis-ci.org/checkstyle/checkstyle/jobs/569019879#L1175","closed","","romani","2019-08-08T17:27:33Z","2019-08-08T20:47:28Z"
"","6956","config: bump maven-javadoc-plugin to 3.1.1","https://travis-ci.org/checkstyle/checkstyle/jobs/569019879#L1160","closed","","romani","2019-08-08T17:23:08Z","2019-08-08T20:47:11Z"
"","6955","config: bump maven.spotbugs.plugin.version to 3.1.12.1","https://travis-ci.org/checkstyle/checkstyle/jobs/569019879#L1149","closed","","romani","2019-08-08T17:20:16Z","2019-08-08T23:01:14Z"
"","6958","config: bump slf4j-simple to 1.7.27","https://travis-ci.org/checkstyle/checkstyle/jobs/569019879#L1131","closed","","romani","2019-08-08T17:29:25Z","2019-08-08T23:51:49Z"
"","6959","config: bump picocli to 4.0.1","https://travis-ci.org/checkstyle/checkstyle/jobs/569019879#L1115","closed","","romani","2019-08-08T17:31:26Z","2019-08-08T23:52:28Z"
"","6795","config: bump jacoco-maven-plugin to 0.8.4","https://travis-ci.org/checkstyle/checkstyle/jobs/538908990#L2826","closed","","romani","2019-06-01T14:01:38Z","2019-06-01T19:52:08Z"
"","6794","config: bump maven-jar-plugin to 3.1.2","https://travis-ci.org/checkstyle/checkstyle/jobs/538908990#L2813","closed","","romani","2019-06-01T13:59:28Z","2019-06-01T19:51:13Z"
"","6792","minor: bump maven checkstyle to 3.1.0","https://travis-ci.org/checkstyle/checkstyle/jobs/538908990#L2800  @rnveach , looks like we do not validate trailing spaces in xml files.","closed","","romani","2019-06-01T13:54:09Z","2019-06-01T16:10:00Z"
"","6793","config: bump pitest to 1.4.8","https://travis-ci.org/checkstyle/checkstyle/jobs/538908990#L2787","closed","","romani","2019-06-01T13:56:57Z","2019-06-01T16:26:52Z"
"","6796","config: bump equalsverifier to 3.1.9","https://travis-ci.org/checkstyle/checkstyle/jobs/538908990#L2758","closed","","romani","2019-06-01T14:03:27Z","2019-06-01T19:55:12Z"
"","6797","config: bump Saxon-HE to 9.9.1-3","https://travis-ci.org/checkstyle/checkstyle/jobs/538908990#L2746","closed","","romani","2019-06-01T14:05:52Z","2019-06-04T06:40:09Z"
"","6410","config: bump jacoco-maven-plugin to 0.8.3","https://travis-ci.org/checkstyle/checkstyle/jobs/489695919#L2915","closed","","romani","2019-02-09T15:41:04Z","2019-02-09T19:23:59Z"
"","6414","config: bump pitest to 1.4.5","https://travis-ci.org/checkstyle/checkstyle/jobs/489695919#L2901","closed","","romani","2019-02-09T15:49:36Z","2019-02-09T21:20:04Z"
"","6411","config: bump spotbugs-maven-plugin to 3.1.11","https://travis-ci.org/checkstyle/checkstyle/jobs/489695919#L2889","closed","","romani","2019-02-09T15:43:00Z","2019-02-09T19:24:18Z"
"","6413","config: bump jacoco to 0.8.3","https://travis-ci.org/checkstyle/checkstyle/jobs/489695919#L2872","closed","","romani","2019-02-09T15:47:28Z","2019-02-09T20:31:34Z"
"","6412","config: bump saxon to saxon-9.9.1-1","https://travis-ci.org/checkstyle/checkstyle/jobs/489695919#L2857","closed","","romani","2019-02-09T15:45:07Z","2019-02-09T19:54:37Z"
"","6384","config: bump sonar-maven-plugin to 3.6.0.1398","https://travis-ci.org/checkstyle/checkstyle/jobs/480532825#L2884","closed","","romani","2019-01-17T15:14:02Z","2019-01-29T21:24:43Z"
"","6383","config: bump jgit to 5.2.1.201812262042-r","https://travis-ci.org/checkstyle/checkstyle/jobs/480532825#L2871","closed","","romani","2019-01-17T15:12:14Z","2019-01-17T22:07:05Z"
"","6382","config: bump picocli to 3.9.1","https://travis-ci.org/checkstyle/checkstyle/jobs/480532825#L2855","closed","","romani","2019-01-17T15:09:47Z","2019-01-30T14:49:53Z"
"","6365","config: bump maven-assembly-plugin to 3.1.1","https://travis-ci.org/checkstyle/checkstyle/jobs/477492200#L2913","closed","","romani","2019-01-10T14:57:23Z","2019-01-10T20:16:58Z"
"","6364","config: bump powermock to 2.0.0","https://travis-ci.org/checkstyle/checkstyle/jobs/477492200#L2888","closed","","romani","2019-01-10T14:54:57Z","2019-01-10T20:16:42Z"
"","6363","config: bump equalsverifier to 3.1.4","https://travis-ci.org/checkstyle/checkstyle/jobs/477492200#L2875","closed","","romani","2019-01-10T14:52:36Z","2019-01-10T20:16:26Z"
"","6362","config: bump picocli to 3.9.0","https://travis-ci.org/checkstyle/checkstyle/jobs/477492200#L2856","closed","","romani","2019-01-10T14:50:22Z","2019-01-10T20:16:08Z"
"","6319","config: bump spotbugs-maven-plugin to 3.1.10","https://travis-ci.org/checkstyle/checkstyle/jobs/472422393#L2866","closed","","romani","2018-12-27T14:55:50Z","2018-12-27T17:25:46Z"
"","6318","config: bump equalsverifier to 3.1.2","https://travis-ci.org/checkstyle/checkstyle/jobs/472422393#L2855","closed","","romani","2018-12-27T14:48:48Z","2018-12-27T16:47:47Z"
"","6306","config: bump antly to 4.7.2","https://travis-ci.org/checkstyle/checkstyle/jobs/470168476#L2841","closed","","romani","2018-12-20T15:07:51Z","2018-12-20T19:30:20Z"
"","6281","config: bump picocli to 3.8.2","https://travis-ci.org/checkstyle/checkstyle/jobs/467147401#L2850","closed","","romani","2018-12-13T15:15:17Z","2018-12-14T14:16:24Z"
"","6280","config: bump jgit to 5.2.0.201812061821-r","https://travis-ci.org/checkstyle/checkstyle/jobs/467147401#L2850","closed","","romani","2018-12-13T15:15:03Z","2018-12-14T14:16:58Z"
"","6279","Spotbugs maven plugin 3.1.9","https://travis-ci.org/checkstyle/checkstyle/jobs/467147401#L2850","closed","","romani","2018-12-13T15:14:42Z","2018-12-16T02:21:24Z"
"","6278","config: bump maven-jar-plugin to 3.1.1","https://travis-ci.org/checkstyle/checkstyle/jobs/467147401#L2850","closed","","romani","2018-12-13T15:14:31Z","2018-12-14T14:20:30Z"
"","6225","config: bump guava to 27.0.1-jre","https://travis-ci.org/checkstyle/checkstyle/jobs/458092683#L2861","closed","","romani","2018-11-23T15:01:58Z","2018-11-23T16:51:26Z"
"","6224","config: bump system-rules to 1.19.0","https://travis-ci.org/checkstyle/checkstyle/jobs/458092683#L2848","closed","","romani","2018-11-23T14:59:43Z","2018-11-23T16:01:40Z"
"","6226","resolve warning in build output from PMD","https://travis-ci.org/checkstyle/checkstyle/jobs/456413115#L738  `[WARNING] Discontinue using Rule name category/java/codestyle.xml/AbstractNaming as it is scheduled for removal from PMD. PMD 7.0.0 will remove support for this Rule.`  ``` [INFO] --- maven-pmd-plugin:3.11.0:pmd (pmd) @ checkstyle --- [WARNING] Discontinue using Rule name category/java/codestyle.xml/AbstractNaming as it is scheduled for removal from PMD. PMD 7.0.0 will remove support for this Rule. [WARNING] Discontinue using Rule name category/java/codestyle.xml/AbstractNaming as it is scheduled for removal from PMD. PMD 7.0.0 will remove support for this Rule. [INFO] ```","closed","miscellaneous,","romani","2018-11-23T16:16:57Z","2019-03-10T06:03:43Z"
"","6214","config: bump maven-shade-plugin to 3.2.1","https://travis-ci.org/checkstyle/checkstyle/jobs/455142812#L2861","closed","","romani","2018-11-15T08:58:42Z","2018-11-15T10:55:59Z"
"","6212","warning during maven-shade-plugin:shade execution","https://travis-ci.org/checkstyle/checkstyle/jobs/454829808#L785 ``` $ ./.ci/travis/travis.sh assembly-run-all-jar ... [INFO] Including net.sf.saxon:Saxon-HE:jar:9.8.0-14 in the shaded jar. [WARNING] guava-27.0-jre.jar, failureaccess-1.0.jar define 2 overlapping classes:  [WARNING]   - com.google.common.util.concurrent.internal.InternalFutureFailureAccess [WARNING]   - com.google.common.util.concurrent.internal.InternalFutures [WARNING] maven-shade-plugin has detected that some class files are [WARNING] present in two or more JARs. When this happens, only one [WARNING] single version of the class is copied to the uber jar. [WARNING] Usually this is not harmful and you can skip these warnings, [WARNING] otherwise try to manually exclude artifacts based on [WARNING] mvn dependency:tree -Ddetail=true and the above output. [WARNING] See http://maven.apache.org/plugins/maven-shade-plugin/ ```","open","approved,","romani","2018-11-15T08:47:01Z","2018-11-15T08:51:43Z"
"","6213","warning during build of site with equalsverifier-3.0.2","https://travis-ci.org/checkstyle/checkstyle/jobs/454829799#L867  ``` $ ./.ci/travis/travis.sh site ... [INFO] Generating ""Dependencies"" report  --- maven-project-info-reports-plugin:2.9:dependencies [WARNING] Unable to process class META-INF/versions/9/module-info.class in JarAnalyzer File /home/travis/.m2/repository/nl/jqno/equalsverifier/equalsverifier/3.0.2/equalsverifier-3.0.2.jar org.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 19     at org.apache.bcel.classfile.Constant.readConstant (Constant.java:161)     at org.apache.bcel.classfile.ConstantPool. (ConstantPool.java:69)     at org.apache.bcel.classfile.ClassParser.readConstantPool (ClassParser.java:235)     at org.apache.bcel.classfile.ClassParser.parse (ClassParser.java:143)     at org.apache.maven.shared.jar.classes.JarClassesAnalysis.analyze (JarClassesAnalysis.java:96)     at org.apache.maven.report.projectinfo.dependencies.Dependencies.getJarDependencyDetails (Dependencies.java:259)     at org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.hasSealed (DependenciesRenderer.java:1542)     at org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.renderSectionDependencyFileDetails (DependenciesRenderer.java:545)     at org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.renderBody (DependenciesRenderer.java:240)     at org.apache.maven.reporting.AbstractMavenReportRenderer.render (AbstractMavenReportRenderer.java:83)     at org.apache.maven.report.projectinfo.DependenciesReport.executeReport (DependenciesReport.java:201)     at org.apache.maven.reporting.AbstractMavenReport.generate (AbstractMavenReport.java:255)     at org.apache.maven.plugins.site.render.ReportDocumentRenderer.renderDocument (ReportDocumentRenderer.java:230)     at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render (DefaultSiteRenderer.java:349)     at org.apache.maven.plugins.site.render.SiteMojo.renderLocale (SiteMojo.java:198)     at org.apache.maven.plugins.site.render.SiteMojo.execute (SiteMojo.java:147)     at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:134)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:208)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:154)     at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:146)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)     at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)     at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:51)     at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:309)     at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:194)     at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:107)     at org.apache.maven.cli.MavenCli.execute (MavenCli.java:955)     at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:290)     at org.apache.maven.cli.MavenCli.main (MavenCli.java:194)     at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke (Method.java:498)     at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)     at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)     at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)     at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356) [WARNING] The repository url 'file://${basedir}/lib' is invalid - Repository 'repo-for-signedjar-dependency' will be blacklisted. [WARNING] The repository url 'https://repository.apache.org/releases/' is invalid - Repository 'sonatype-apache' will be blacklisted. [INFO] Generating ""Dependency Information"" report --- maven-project-info-reports-plugin:2.9:dependency-info  ```","closed","miscellaneous,","romani","2018-11-15T08:50:55Z","2018-11-16T21:55:31Z"
"","6205","config: bump spotbugs-maven-plugin to 3.1.8","https://travis-ci.org/checkstyle/checkstyle/jobs/452041949#L2857","closed","","romani","2018-11-09T14:36:27Z","2018-11-10T05:15:55Z"
"","6188","config: bump maven-pmd-plugin to 3.11.0","https://travis-ci.org/checkstyle/checkstyle/jobs/449014145#L2891","closed","","romani","2018-11-01T14:09:14Z","2018-11-01T17:32:30Z"
"","6189","config: bump equalsverifier to 3.0.2","https://travis-ci.org/checkstyle/checkstyle/jobs/449014145#L2879","closed","","romani","2018-11-01T14:11:04Z","2018-11-01T17:32:34Z"
"","6190","config: bump guava to 27.0-jre","https://travis-ci.org/checkstyle/checkstyle/jobs/449014145#L2862","closed","","romani","2018-11-01T14:12:48Z","2018-11-01T17:33:01Z"
"","6169","config: bump jgit to 5.1.3.201810200350-r","https://travis-ci.org/checkstyle/checkstyle/jobs/445829260#L2916","closed","","romani","2018-10-26T00:35:45Z","2018-10-26T04:18:55Z"
"","6168","config: bump equalsverifier to 3.0","https://travis-ci.org/checkstyle/checkstyle/jobs/445829260#L2900","closed","","romani","2018-10-26T00:33:52Z","2018-10-26T20:04:40Z"
"","6156","config: bump versions-maven-plugin to 2.7","https://travis-ci.org/checkstyle/checkstyle/jobs/442841783#L3020","closed","","romani","2018-10-20T17:32:58Z","2018-10-20T22:20:20Z"
"","6155","config: bump maven-surefire-plugin to 2.22.1","https://travis-ci.org/checkstyle/checkstyle/jobs/442841783#L3006","closed","","romani","2018-10-20T17:31:05Z","2018-10-20T20:43:47Z"
"","6154","config: bump maven-failsafe-plugin to 2.22.1","https://travis-ci.org/checkstyle/checkstyle/jobs/442841783#L2993","closed","","romani","2018-10-20T17:29:29Z","2018-10-20T20:17:37Z"
"","6153","Maven failsafe plugin 2.22.1","https://travis-ci.org/checkstyle/checkstyle/jobs/442841783#L2993","closed","","romani","2018-10-20T17:27:41Z","2018-10-20T17:28:10Z"
"","6152","config: bump forbiddenapis to 2.6","https://travis-ci.org/checkstyle/checkstyle/jobs/442841783#L2980","closed","","romani","2018-10-20T17:25:31Z","2018-10-20T19:52:52Z"
"","6151","config: bump pitest to 1.4.3","https://travis-ci.org/checkstyle/checkstyle/jobs/442841783#L2968","closed","","romani","2018-10-20T17:23:49Z","2018-10-20T19:53:32Z"
"","6148","config: bump sonar-maven-plugin to 3.5.0.1254","https://travis-ci.org/checkstyle/checkstyle/jobs/442841783#L2954","closed","","romani","2018-10-20T14:42:23Z","2018-10-20T19:52:26Z"
"","6147","config: bump maven-shade-plugin to 3.2.0","https://travis-ci.org/checkstyle/checkstyle/jobs/442841783#L2941","closed","","romani","2018-10-20T14:39:51Z","2018-10-20T19:50:43Z"
"","6146","config: bump spotbugs to 3.1.7","https://travis-ci.org/checkstyle/checkstyle/jobs/442841783#L2928","closed","","romani","2018-10-20T14:37:44Z","2018-10-20T17:20:48Z"
"","6145","config: bump jgit to 5.1.2.201810061102-r","https://travis-ci.org/checkstyle/checkstyle/jobs/442841783#L2915","closed","","romani","2018-10-20T14:19:15Z","2018-10-20T17:19:18Z"
"","6112","config: bump jgit to 5.0.3.201809091024-r","https://travis-ci.org/checkstyle/checkstyle/jobs/427828508#L1162","closed","","romani","2018-09-13T01:09:12Z","2018-09-13T03:16:30Z"
"","6001","Checkstyle Ant prints null for checkstyle version","https://travis-ci.org/checkstyle/checkstyle/jobs/399849113#L797 > ```      [echo] Checkstyle started (checkstyle_checks.xml): 04/07/2018 03:42:24 AM [checkstyle] Running Checkstyle null on 1004 files      [echo] Checkstyle finished (checkstyle_checks.xml) : 04/07/2018 03:43:22 AM ```  `CheckstyleAntTaskTest.testExecuteLogOutput` verifies the start of the message is printed, not the version number.","closed","miscellaneous,","rnveach","2018-07-04T16:20:19Z","2018-07-05T15:52:00Z"
"","6579","Enable PMD rule UseUnderscoresInNumericLiterals","https://pmd.github.io/latest/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals  Part of #6536   ``` [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes:1225 Rule:UseUnderscoresInNumericLiterals Priority:3  Number 10000 should separate every third digit with an underscore. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.DetailASTTest:288  Rule:UseUnderscoresInNumericLiterals Priority:3  Number 30000 should separate every third digit with an underscore. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.JavadocTokenTypesTest:126  Rule:UseUnderscoresInNumericLiterals Priority:3  Number 10000 should separate every third digit with an underscore. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.api.JavadocTokenTypesTest:127  Rule:UseUnderscoresInNumericLiterals Priority:3  Number 10071 should separate every third digit with an underscore. ... ```","closed","miscellaneous,","pbludov","2019-03-16T06:27:17Z","2019-03-17T20:50:54Z"
"","6578","Enable PMD rule LinguisticNaming","https://pmd.github.io/latest/pmd_rules_java_codestyle.html#linguisticnaming  Part of #6536  ``` [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheckTest:493  Rule:LinguisticNaming Priority:3 Linguistics Antipattern -  The variable 'isStarImport' indicates linguistically it is a boolean, but it is 'Method'. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractTypeAwareCheckTest:50  Rule:LinguisticNaming Priority:3 Linguistics Antipattern -  The variable 'isSubclass' indicates linguistically it is a boolean, but it is 'Method'. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck:64  Rule:LinguisticNaming Priority:3 Linguistics Antipattern -  The field 'isAfterValues' indicates linguistically it is a boolean, but it is 'Deque'.  ```","closed","miscellaneous,","pbludov","2019-03-16T06:25:14Z","2019-03-17T05:46:53Z"
"","6173","Update vim plugin details","https://medium.com/@Sohjiro/setup-vim-checkstyle-java-d0dd74dca1e1  ""Inactive / Old Tools"" , remove old link and create an recods in active tools, based on link above.","open","approved,","romani","2018-10-28T01:09:13Z","2020-04-18T21:02:48Z"
"","6018","Add to CI import order validation on certain projects","https://github.com/checkstyle/contribution/tree/master/checkstyle-tester/checks-import-order  No diff is expected on such configs. No errors validations could be used.","closed","miscellaneous,","romani","2018-07-09T14:11:22Z","2018-07-13T01:56:38Z"
"","6991","Make test on file that have no read access but has write access","https://github.com/checkstyle/checkstyle/pull/6989#issuecomment-522315711","closed","miscellaneous,","romani","2019-08-18T17:40:13Z","2019-08-23T22:12:12Z"
"","6863","Issue #6479: please support preceding, preceding-sibling, following a…","https://github.com/checkstyle/checkstyle/issues/6479","closed","","timurt","2019-06-29T19:02:52Z","2019-09-28T13:22:46Z"
"","6357","Issue #6356: Xpath: change implementation of the @text attribute","https://github.com/checkstyle/checkstyle/issues/6356","closed","","timurt","2019-01-08T14:56:58Z","2019-03-28T06:36:58Z"
"","6315","Issue #6240: SuppressionXpathFilter: rename @text to @firstIdentText at ""query"" attribute","https://github.com/checkstyle/checkstyle/issues/6240","closed","","timurt","2018-12-26T18:06:48Z","2019-01-08T09:45:44Z"
"","6160","config: update to saxon 9.9","https://github.com/checkstyle/checkstyle/issues/6149","closed","","timurt","2018-10-22T15:39:00Z","2018-11-15T10:48:35Z"
"","6159","config: update to saxon 9.9","https://github.com/checkstyle/checkstyle/issues/6149","closed","","timurt","2018-10-22T09:22:57Z","2018-10-22T15:21:11Z"
"","6158","config: update to saxon 9.9","https://github.com/checkstyle/checkstyle/issues/6149","closed","","timurt","2018-10-22T09:16:34Z","2018-10-22T09:18:14Z"
"","6157","config: update to saxon 9.9","https://github.com/checkstyle/checkstyle/issues/6149","closed","","timurt","2018-10-22T09:11:42Z","2018-10-22T15:21:18Z"
"","6161","Issue #6115: Xpath query for node with several IDENT child nodes","https://github.com/checkstyle/checkstyle/issues/6115","closed","","timurt","2018-10-22T17:48:30Z","2019-01-08T09:45:51Z"
"","6033","Issue #5984: XpathSuppression generation should support module id","https://github.com/checkstyle/checkstyle/issues/5984","closed","","timurt","2018-07-12T13:44:25Z","2018-07-13T12:15:50Z"
"","6034","doc: reference in SuppressionXpathFilter doc about ability to generate suppressions by CLI","https://github.com/checkstyle/checkstyle/issues/5980","closed","","timurt","2018-07-12T14:22:14Z","2018-07-12T19:07:47Z"
"","6026","Issue #5979: XpathFileGeneratorAstFilter: EVENTS and QUERIES as single map","https://github.com/checkstyle/checkstyle/issues/5979","closed","","timurt","2018-07-11T10:57:24Z","2018-07-12T03:15:59Z"
"","6812","Issue #4764: fix false-positive violation in NeedBracesCheck","https://github.com/checkstyle/checkstyle/issues/4764  1. Fixed false-positive violation for braces for case and default blocks.  2. Test cases were updated with example from original issue + lambda test case added. 3.  Code was refactored: - single line checks for `case` and `default` was merged into one - original logic for violation detection in `visitTree` was refactored to avoid useless checks - couple of utility methods were added - `isInAnnotationField` method was removed because this check was applied only to `default` keyword and it is covered by `hasUnbracedStatements` method","closed","","strkkk","2019-06-11T07:28:58Z","2021-01-29T11:41:53Z"
"","6008","SuppressWarningsHolder should not be StatelessCheck","https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java  ``` @StatelessCheck public class SuppressWarningsHolder     extends AbstractCheck {      private static final ThreadLocal ENTRIES =             ThreadLocal.withInitial(LinkedList::new); ```  implementation should be FileStateful","closed","","romani","2018-07-07T05:12:50Z","2018-07-07T19:48:08Z"
"","6137","investigate usage of jdeprscan tool in our CI","https://docs.oracle.com/en/java/javase/11/tools/jdeprscan.html  it might be good t one alarmed in advance that we use or depend on some functionality that about to be removed form jdk,","open","approved,","romani","2018-10-08T17:28:38Z","2020-04-24T18:31:44Z"
"","6707","Space betwee type annoation and [] or ... not verifiable for Google Style","https://checkstyle.org/styleguides/google-java-style-20180523/javaguide.html  `$ cat config.xml` ```xml                        ``` `$ cat Test.java` ```java public class Test {      @C int @A [] @B [] f;      public void foo(final char @NonNull [] param) {}      void test1(String @NonNull ... param) {} // violation      void test2(String @NonNull... param) {} // OK  } ``` ``` $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" $ java $RUN_LOCALE -jar /var/tmp/checkstyle-8.31-SNAPSHOT-all.jar \           -c config.xml Test.java Starting audit... [ERROR] /var/tmp/Test.java:7:32: '...' is preceded with whitespace. [NoWhitespaceBefore] Audit done. Checkstyle ends with 1 errors. ```  --------------------   > 4.6.2 Horizontal whitespace ........ Between a type annotation and [] or ....  Latest version of Google Style Guide mandates that there is a single space between a type annotation and `[]` or `...`. There is currently no rule to check this.  Actually it is even worse, the [current config](https://checkstyle.org/google_style.html#a4.6.2) (`NoWhitespaceBefore` with `ELLIPSIS` token) will not only not allow to verify the Google style guide, but report violations where it shouldn't as it does not allow spaces in front of ellipsis tokens.","closed","google style,","Vampire","2019-04-30T16:40:02Z","2020-05-30T12:10:46Z"
"","6447","WhiteSpaceAroundCheck: update documentation for SLIST and LCURLY usage","https://checkstyle.org/config_whitespace.html#WhitespaceAround  ``` $ javac MyClass.java  $ cat config.xml             		   		   	        $ cat MyClass.java public class MyClass { 	public void myMethod(){ 		if (true){ 		} 		for (int x = 0; x < 4; x++){ 		} 	} }  $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" $ java $RUN_LOCALE -jar checkstyle-8.17-all.jar -c config.xml MyClass.java Starting audit... Audit done. ```  ---------------  I would expect the audit to fail after `myMethod()`, `if (true)` and `for (int x = 0; x < 4; x++)` since no whitespace exists before `{`.  --------------","open","approved,","zentol","2019-02-21T11:14:38Z","2019-06-16T23:53:31Z"
"","6706","Handling of ARRAY_DECLARATOR and INDEX_OP in NoWhitespaceAfter check is pretty confusing","https://checkstyle.org/config_whitespace.html#NoWhitespaceAfter  ``` /var/tmp $ javac Foo.java  /var/tmp $ cat config.xml                                                                                                        /var/tmp $ cat Foo.java class Foo {     int[] ia1 = new int[0];     int[]ia2 = new int[0];     int [] ia3 = new int[0];     int[] ia4 = new int [0];     int[] ia5 = new int [0] ;      { int i = ia1[0]; }     { int i = ia1 [0]; }     { int i = ia1 [0] ; } }  /var/tmp $ java -Duser.language=en -Duser.country=US -jar \     checkstyle-8.20-all.jar -c config.xml Foo.java Starting audit... [ERROR] D:\tmp\Foo.java:4:9: 'int' is followed by whitespace. [NWA ARRAY_DECLARATOR] [ERROR] D:\tmp\Foo.java:5:25: 'int' is followed by whitespace. [NWA ARRAY_DECLARATOR] [ERROR] D:\Foo.java:6:25: 'int' is followed by whitespace. [NWA ARRAY_DECLARATOR] [ERROR] D:\Foo.java:9:19: 'ia1' is followed by whitespace. [NWA INDEX_OP] [ERROR] D:\tmp\Foo.java:10:19: 'ia1' is followed by whitespace. [NWA INDEX_OP] Audit done. Checkstyle ends with 5 errors. ```  ---------------  - The description of the `NoWhitespaceAfter` check mentions that for `ARRAY_DECLARATOR` and `INDEX_OP` the check behaves specially and checks that there is no space **before** instead of after like the name suggests. This alone is already confusing enough, especially as there is also a `NoWhitespaceBefore` check that actually cannot check these tokens. - The output for violations isn't any better, especially if you didn't read the documentation closely, it mentions the token that is present before the violating token, with the coordinates of the actual violating token (the `[`), which both is confusing as the coordinates do not match the mentioned token position and the mentioned token does not reflect what was configured as tokens to check.  I'd suggest removing these two tokens from this check and instead moving them to the `NoWhitespaceBefore` check which seems to be a much better, clearer and more intuitive place for me.  --------------","open","approved,","Vampire","2019-04-30T16:30:39Z","2021-04-26T15:18:43Z"
"","6392","google_checks.xml: incorrect indentation error with block statement in switch","https://checkstyle.org/config_misc.html#Indentation  ```java class T {   int main(int i) {     switch (i) {       case 42:         {           int j = i;           return j;         }       default:         return 01;     }   } } ```  ``` $ java -jar checkstyle-8.15-all.jar -c google_checks.xml T.java Starting audit... [WARN] /tmp/tmp.XMfnmlPDg1/T.java:5: 'block lcurly' has incorrect indentation level 8, expected level should be 6. [Indentation] [WARN] /tmp/tmp.XMfnmlPDg1/T.java:5:9: '{' at column 9 should be on the previous line. [LeftCurly] [WARN] /tmp/tmp.XMfnmlPDg1/T.java:6: 'block' child has incorrect indentation level 10, expected level should be 8. [Indentation] [WARN] /tmp/tmp.XMfnmlPDg1/T.java:7: 'block' child has incorrect indentation level 10, expected level should be 8. [Indentation] [WARN] /tmp/tmp.XMfnmlPDg1/T.java:8: 'block rcurly' has incorrect indentation level 8, expected level should be 6. [Indentation] Audit done. ```  (`google_checks.xml` was downloaded from: https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/google_checks.xml)  The warning is incorrect. The Google Java Style Guide [§4.8.4](https://google.github.io/styleguide/javaguide.html#s4.8.4-switch) says:  > After a switch label, there is a line break, and the indentation level is increased +2, exactly as if a block were being opened. The following switch label returns to the previous indentation level, as if a block had been closed.","closed","indentation,","cushon","2019-01-23T17:50:54Z","2020-10-05T05:48:46Z"
"","6301","ArrayTypeStyle: add support for brackets in method definition after parameters","https://checkstyle.org/config_misc.html#ArrayTypeStyle  ```` $ cat TestClass.java class BracketsAfterMethodSignature {   Object emptyArray()[] {     return new Object[]{};   } }  $ javac BracketsAfterMethodSignature.java ✔  $ cat TestConfig.xml                                    $ java -jar checkstyle-8.15-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  There should be a violation to make it possible to enforce method definiton to be written like  `Object[] emptyArray() {` vs `Object emptyArray()[] {`.","closed","approved,","rnveach","2018-12-19T22:14:26Z","2019-02-28T14:53:32Z"
"","6192","new Check: RequireEmptyLineBeforeBlockTagGroup to complain about missing blank line before at-clauses","https://checkstyle.org/config_javadoc.html#JavadocParagraph  ``` side_projects / checkStyleIssue / $ javac Test.java side_projects / checkStyleIssue / $ cat Test.java public class Test {      /**      * Checkstyle should complain about this line or the following line.      * @param param This param does something      */     public void function(String param) {     }  } side_projects / checkStyleIssue / $ cat checkstyle.xml                                 /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar ~/Downloads/checkstyle-8.14-all.jar -c checkstyle.xml Test.java  Starting audit... Audit done. ```  https://checkstyle.org/config_javadoc.html#JavadocParagraph I expect checkstyle to complain about line 4, or 5 because JavadocParagraph docs say:  >  Checks that ... There is ... one blank line before the at-clauses block if it is present.   The quotation is taken from http://checkstyle.sourceforge.net/config_javadoc.html#JavadocParagraph","closed","google style,","josephmate","2018-11-02T20:56:35Z","2020-10-04T21:35:23Z"
"","6450","RedundantImportCheck does not detect specific and wildcard imports from the same package","https://checkstyle.org/config_imports.html#RedundantImport  ``` /var/tmp $ javac TestClass.java  /var/tmp $ cat checkstyle.xml                                 /var/tmp $ cat TestClass.java import java.util.*; import java.util.ArrayList; import java.util.List;  public class TestClass {     private List list = new ArrayList(); }   /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.17-all.jar -c checkstyle.xml TestClass.java Starting audit... Audit done.  ```  --------------- Checkstyle reports no errors here  I expect Checkstyle to report violations:  - on line 2 that says that `java.util.ArrayList` import is redundant - on line 3 that says that `java.util.List` import is redundant  --------------","open","approved,","Vantuz","2019-02-22T14:06:13Z","2019-09-30T19:50:39Z"
"","6805","InnerAssignment reports violation when && condition is in WHILE expression","https://checkstyle.org/config_coding.html#InnerAssignment  ``` /var/tmp$ cat TestConfig.xml                         /var/tmp$ cat TestClass.java  public class TestClass {   void method() {     while ((line = file.read()) != null && noOfSQLErrors < maxErrors) {} // violation     while ((line = file.read()) != null) {} // no violatin; specially allowed by Check, see doc   } }  /var/tmp$ java -jar checkstyle-8.21-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] /var/tmp/TestClass.java:3:18: Inner assignments should be avoided. [InnerAssignment] Audit done. Checkstyle ends with 1 errors. ```  Expected: no violations","closed","approved,","kec2","2019-06-06T05:57:35Z","2019-07-23T11:50:08Z"
"","6353","EqualsAvoidNull: disappearing violation on different runs","https://checkstyle.org/config_coding.html#EqualsAvoidNull  While doing mutations for the coding package, I found a case I couldn't reproduce locally. Thinking this was another corruption issue, I created a special branch to force checkstyle to do single file runs and randomize the order the files are worked on. Here are the results of all non-javadoc checks after an 8 hour run.  Branch: https://github.com/rnveach/checkstyle/commits/single_file_single_instance_run  All the branch does is re-create the root module and re-configure it for every file and randomize the order of the files. It should result in checkstyle mimicking a single-file.  Regression: http://rveach.no-ip.org/checkstyle/regression/reports/220/  Specifically: http://rveach.no-ip.org/checkstyle/regression/reports/220/openjdk10/index.html#A7 http://rveach.no-ip.org/checkstyle/regression/reports/220/openjdk10/xref/src/java.desktop/share/classes/sun/applet/AppletViewer.java.html#L1156  This was the exact case I was looking into for this exact check. No other checks or projects show up except for exceptions. I will need to see if I can hunt down this issue.","closed","bug,","rnveach","2019-01-07T13:00:42Z","2019-01-11T23:25:00Z"
"","6466","RightCurly false-positives for multi-block continuation","https://checkstyle.org/config_blocks.html#RightCurly https://checkstyle.org/property_types.html#rcurly `same` is default mode  ``` /var/tmp $ javac Foo.java  /var/tmp $ cat config.xml                                                                         /var/tmp $ cat Foo.java class Foo {     public Foo() {         Thread t = new Thread(new Runnable() {            @Override            public void run() {            } //","closed","approved,","Vampire","2019-02-23T20:52:27Z","2019-04-17T12:06:06Z"
"","6807","False-positive RightCurly in google_checks since 8.20","https://checkstyle.org/config_blocks.html#RightCurly https://checkstyle.org/property_types.html#rcurly  ``` /var/tmp $ javac RightCurly.java  /var/tmp $ cat RightCurly.java public class RightCurly {   public RightCurly() {} }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.21-all.jar -c /google_checks.xml RightCurly.java Starting audit... [WARN] /var/tmp/RightCurly.java:2:24: '}' at column 24 should be alone on a line. [RightCurlyAlone] Audit done. ```  ---------------  I expected no warning because of section [4.1.3 Empty blocks: may be concise](https://google.github.io/styleguide/javaguide.html#s4.1.3-braces-empty-blocks) in Google Java Style Guide. > An empty block or block-like construct may be in K & R style (as described in Section 4.1.2). Alternatively, it may be closed immediately after it is opened, with no characters or line break in between ({}), unless it is part of a multi-block statement (one that directly contains multiple blocks: if/else or try/catch/finally).  --------------  Problem exists since Checkstyle 8.20, with Checkstyle 8.19 there is no such warning.  **Checkstyle 8.20**  ```  $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.20-all.jar -c /google_checks.xml RightCurly.java Starting audit... [WARN] /var/tmp/RightCurly.java:2:24: '}' at column 24 should be alone on a line. [RightCurlyAlone] Audit done. ```  **Checkstyle 8.19**  ```  $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.19-all.jar -c /google_checks.xml RightCurly.java Starting audit... Audit done. ```   Google config: https://github.com/checkstyle/checkstyle/blob/dbbc42c7273658ea63438897d325a34f2abc65d1/src/main/resources/google_checks.xml#L91-L97 ```                                                  ``` https://checkstyle.org/config_blocks.html#RightCurly https://checkstyle.org/property_types.html#rcurly   -------","closed","has bounty,","alexbde","2019-06-06T12:14:23Z","2020-02-26T14:02:06Z"
"","6457","two-way forced variable name for EmptyCatchBlock","https://checkstyle.org/config_blocks.html#EmptyCatchBlock  It would be nice if the `EmptyCatchBlock` check could enforce a variable name two-way. What I mean is a regex property like `forcedVariableName` that ensures that the variable name of an empty catch block (besides comments) matches the regex and also that a catch block where the regex matches is empty (besides comments).  Having the forced name should not suppress the finding alone though. Whether an empty catch block is ok or not should still be configurable separately.  What I mean is achievable with 8.18 using ```xml                                                 ```  But a simple regex on the `EmptyCatchBlock` check would be so much more user-friendly. :-)","open","","Vampire","2019-02-23T00:07:16Z","2019-02-25T15:16:56Z"
"","6452","MissingOverride javaFiveCompatibility true in checkstyle_checks.xml","https://checkstyle.org/config_annotation.html#MissingOverride  The description of MissingOverride javaFiveCompatibility says that it should be avoided and is recommended to only use it on Java 5 source. But in `checkstyle_checks.xml` it is set to true. Your sources are Java 8 and this file is recommended as a starter for new users that want all checks, so maybe this should be set to false / removed?  https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L175","closed","miscellaneous,","Vampire","2019-02-22T15:10:41Z","2019-03-08T02:34:10Z"
"","6446","False positive in AnnotationUseStyle for version 8.17","https://checkstyle.org/config_annotation.html#AnnotationUseStyle https://checkstyle.org/property_types.html#closingParens  ``` /var/tmp $ javac Example.java  /var/tmp $ cat config.xml                         /var/tmp $ cat Example.java @Anno(@Value) public class Example { }  @interface Anno {     Value value(); }  @interface Value { }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.17-all.jar -c config.xml Example.java Starting audit... [ERROR] /var/tmp/Example.java:1: Annotation cannot have closing parenthesis. [AnnotationUseStyle] Audit done. Checkstyle ends with 1 errors. ``` ---------------  I don't expect an error, as the closing parenthesis is for the outer annotation.  --------------","closed","approved,","davidburstromspotify","2019-02-21T09:40:01Z","2019-03-10T05:55:35Z"
"","6379","AnnotationLocation: add support for PACKAGE_DEF, ENUM_CONSTANT_DEF","https://checkstyle.org/config_annotation.html#AnnotationLocation  $ javac TestClass.java package-info.java  (no output)  $ cat TestConfig.xml ```                                            ```  $ cat TestClass.java ``` package test;  import java.lang.annotation.ElementType; import java.lang.annotation.Target;  @Ann enum TestEnum { // ok (line 6)      @Ann ENUM_VALUE(); // missing violation      TestEnum() {         Object o = (@Ann TestEnum & @Ann Cloneable) null; // missing violation  or ... ??     } }  @Target({ElementType.TYPE_USE, ElementType.PACKAGE, ElementType.FIELD}) @interface Ann {} ``` $cat package-info.java ``` @Ann package test; //missing violation ``` $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" $RUN_LOCALE java -jar checkstyle-8.16-all.jar -c TestConfig.xml TestClass.java package-info.java ``` Starting audit... [WARN] TestClass.java:6: Annotation 'Ann' should be alone on line. [AnnotationLocation] Audit done. ``` Expected 2 more violations.   The tokens `PACKAGE_DEF`, `ENUM_CONSTANT_DEF`,  have no `MODIFIERS`, their annotations are under `ANNOTATIONS` token:  for example ```     @Ann   ENUM_VALUE(); ``` is ```     |--ENUM_CONSTANT_DEF     |   |--ANNOTATIONS     |   |   |--ANNOTATION ``` `AnnotationLocation` does not support `ANNOTATIONS` at all. This is a bug and should be fixed.","closed","new feature,","pbludov","2019-01-15T18:06:56Z","2019-03-01T05:55:58Z"
"","6974","[Java] Checkstyle CLI while generating xpath suppressions provides extraneous stdout output.","https://checkstyle.org/cmdline.html#Command_line_usage  ```bash $ cat config.xml                     $ cat Test.java  class T_est {} rivanov@p5510:/var/tmp$ java -jar checkstyle-8.24-SNAPSHOT-all.jar -c config.xml Test.java  Starting audit... [ERROR] /var/tmp/Test.java:1:7: Name 'T_est' must match pattern '^[A-Z][a-zA-Z0-9]*$'. [TypeName] Audit done. Checkstyle ends with 1 errors.  $ java -jar checkstyle-8.24-SNAPSHOT-all.jar -g -c config.xml Test.java       Checkstyle ends with 1 errors.  $ java -jar checkstyle-8.24-SNAPSHOT-all.jar -g -o suppresion.xml -c config.xml Test.java  Checkstyle ends with 1 errors.  $ cat suppresion.xml        $ java -jar checkstyle-8.24-SNAPSHOT-all.jar -o out.txt -c config.xml Test.java  Checkstyle ends with 1 errors.  $ cat out.txt  Starting audit... [ERROR] /var/tmp/Test.java:1:7: Name 'T_est' must match pattern '^[A-Z][a-zA-Z0-9]*$'. [TypeName] Audit done.  $ java -jar checkstyle-8.24-SNAPSHOT-all.jar -o out.xml -f xml -c config.xml Test.java  Checkstyle ends with 1 errors.  $ cat out.xml         $ cat Test.java  class Test {}  $ java -jar checkstyle-8.24-SNAPSHOT-all.jar -c config.xml Test.java  Starting audit... Audit done.  ```  OUTPUT  ""Checkstyle ends with n errors"" is displayed if violations exist. This is output to stdout instead of stderr, unlike the log messages. This occurs whether the -o option is in use or not. No xml document is generated if violations under TreeWalker module are not detected.   *******  Describe what you expect in detail.   The informative message should not be output as stdout message when the -g option is used. My understanding is that the -g option is used for generating the suppression document specifically. No other stdout output should be provided. Log and other messages must be stderr output. This way, the stdout xml document can be captured cleanly and saved in a file, if needed.    -------------  Spun off from https://github.com/checkstyle/checkstyle/issues/6934","closed","miscellaneous,","Fernal73","2019-08-12T17:11:01Z","2019-08-16T23:39:18Z"
"","6934","Command line option -o does not produce output with -g option","https://checkstyle.org/cmdline.html#Command_line_usage  >-g,--generate-xpath-suppression - generate to output a suppression.xml to use to suppress all violations from user's config.   ```bash java -cp {classpath/jarfile}\  com.puppycrawl.tools.checkstyle.Main\  -g\  -c {config file}\  -p {properties file}\  -o cs.errors\  {list of java sources}   ``` Detected:  Suppressions xpath xml output is generated if checkstyle rules under Tree Walker module are violated.  Argument '-o cs.errors'  is ignored, by design, but it would be better to respect `-o`.    --------------- Expected: Error file as specified in option -o must be output of `-g`.   -------------- Versions run against : 8.22, 8.23.","closed","approved,","Fernal73","2019-08-01T01:19:08Z","2019-09-12T04:59:10Z"
"","6933","Update link to latest version of CLI jar","https://checkstyle.org/cmdline.html  > The latest version of Checkstyle can be found at https://checkstyle.org.  we should use there link to https://github.com/checkstyle/checkstyle/releases","closed","miscellaneous,","romani","2019-07-31T20:22:24Z","2019-08-08T12:02:16Z"
"","6282","minor: fix issue linkcheck plugin","https://app.codeship.com/projects/67b814a0-8fee-0133-9b59-02a170289b8c/builds/f3d57918-f92a-44c6-a87c-8e972ba12cfc?line=0e134d18-42a9-44af-9815-a16d8a4493b0&step=parallel_.ci%2Frun-link-check-plugin.sh","closed","","romani","2018-12-13T15:22:36Z","2018-12-14T17:08:53Z"
"","6835","Activate in ignore mode sevntu Jsr305AnnotationsCheck","http://sevntu-checkstyle.github.io/sevntu.checkstyle/#1.34.0  we need to add to sevntu config Jsr305AnnotationsCheck  Share in issue all violations  use ignore mode if amount of violations is too much  ```                       ```  TODO: - remove a hack I did to bring back CI to green state - https://github.com/checkstyle/checkstyle/commit/c62b223148297cc9461c7ebabf67d268f081707c (we can comment out code, to reuse next time)","closed","blocked,","romani","2019-06-19T04:22:02Z","2019-06-22T17:17:17Z"
"","6717","RegexpMultiline not detecting matches across multiple lines","http://checkstyle.sourceforge.net/config_regexp.html#RegexpMultiline >  A check for detecting that matches across multiple lines. > Rationale: This check can be used to when the regular expression can be span multiple lines.   ```` $ cat TestClass.java public class TestClass {     void method() { // abc // def     } }  $ cat TestConfig.xml                                            $ java -jar checkstyle-8.20-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ````  I am expecting a violation on line 3.","closed","new feature,","rnveach","2019-05-05T16:00:41Z","2019-09-28T17:29:10Z"
"","6456","Specify XPath version in documentation","http://checkstyle.sourceforge.net/config_filters.html#SuppressionXpathFilter does not state which XPath version is supported.  In PMD for example currently only XPath 1.0 is supported for `violationSuppressXPath` while for XPath based checks also 2.0 is supported.  The main problem with this is, that XPath 2.0 is not backwards compatible to XPath 1.0, for example `""4"" > ""4.0""` will be a numerical comparison in 1.0 but a string comparison in 2.0 and thus get different results, besides that it is nice to know that you can use more advanced constructs in your queries.","open","xpath,","Vampire","2019-02-22T19:09:39Z","2020-03-14T23:18:25Z"
"","6003","update documentation of SuppressionFilter with links to latest DTDs","http://checkstyle.sourceforge.net/config_filters.html#SuppressionFilter  By web documentation I failed to upgrade Hbase config to skip violation by message. It was forced me to look at our configs to find a solution for problems.  Problems: no links to latest DTDs Example should use latest DTD. format first code block (example) file http://checkstyle.sourceforge.net/files/suppressions_none.xml  use old DTD.","closed","miscellaneous,","romani","2018-07-06T06:55:13Z","2018-07-08T14:44:19Z"
"","6011","redo XML_Structure documentation section","http://checkstyle.sourceforge.net/config.html#XML_Structure ""Package Names XML Document"" should be moved to http://checkstyle.sourceforge.net/config.html#Packages if smth is valuable is present. Keeping one more copy of DTD is not required for sure. It is better to remove DTD content copy-paste at all and give link to most recent version of DTD file.  http://checkstyle.sourceforge.net/config.html#XML_Structure  should serve only ""Configuration XML Document""  Links to google style and checkstyle_checks should be provided. I propose to drop copy-paste of DTD and just give a link to actual DTD file. I doubt that most people in read DTD easily and do not need full file to understand how xml should be written.","closed","miscellaneous,","romani","2018-07-07T17:41:25Z","2018-07-11T03:29:01Z"
"","6049","How to not check the javadoc of the constructor","How to not check the javadoc of the constructor，I didn't find it on the document.","closed","","GongZiZhang","2018-07-26T02:50:47Z","2018-07-26T03:08:52Z"
"","6085","Java 11 Compatibility check: checkstyle","Hi, We are reaching out to you to check Java 11 compatibility of the library checkstyle.  Could you help us by answering the following questions:  1. Library Name:  2. Latest version:  3. Latest version Is the library compatible with Java 11 Compatible? (Y/N) 4. Is the library supported with Java 11? (Y/N) 5. (If “N” in compatibility or support) What is the versions that would be compatible and Supported? 6. Date of support availability?  Appreciate your response by 19.08.2018.  Thanks, Krzysztof Dragan, PTC Inc. Contractor","closed","","KryniuPL","2018-08-16T08:50:15Z","2018-08-16T14:13:32Z"
"","6019","NullPointerException when using lambda expressions for member variables","Hi,  I have a member variable that is initialized from a lambda function. It is throwing a null pointer exception, the error goes away if I switch to anonymous class.  We use lambda functions in other places in the code but not for initializing member variables.  Below is stack trace of the exception thrown by check style.  Thanks, Zuber  java.lang.NullPointerException at com.puppycrawl.tools.checkstyle.checks.coding.ReturnCountCheck.visitToken(ReturnCountCheck.java:111) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:401) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:479) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:334) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:188) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:73) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:263) 	at com.puppycrawl.tools.checkstyle.CheckStyleTask.realExecute(CheckStyleTask.java:318) 	at com.puppycrawl.tools.checkstyle.CheckStyleTask.execute(CheckStyleTask.java:262)","closed","","smzuber","2018-07-09T14:18:11Z","2018-07-09T19:33:56Z"
"","6921","Checkstyle HTML (XML) reports which contain files with no violations","Here is my checkstyle configuration in build.gradle:   ```  apply plugin: 'checkstyle'      checkstyle {         toolVersion '8.21'     }      task checkstyle(type: Checkstyle) {          configFile = file(""${rootDir}/config/checkstyle/checkstyle.xml"")          source 'src/main/java' /*'src/test/java', 'src/androidTest/java'*/         include '**/*.java'         exclude '**/gen/**'          def checkstyleConfigFile = rootProject.file('config/checkstyle/checkstyle.xml')         configProperties.checkstyleConfigDir = checkstyleConfigFile.parentFile          ignoreFailures = false          classpath = files()          reports {             xml.enabled false             html.enabled true         }     } ```  My config file (checkstyle.xml):  ```                                                                                                                                                                                                                                                                                                                                                                                                                                   ```  ---------------  Steps to reproduce: 1) Make violation of checkstyle in 1 file 2) run `./gradlew checkstyle` 3) see HTML report.  Expected result: HTML report contains 1 file with violation Actual result: HTML report contains many files without violations and 1 file with violation. (see [screenshot](https://prnt.sc/ojwniq) ).","closed","awaiting changes,","antonid08","2019-07-25T13:00:46Z","2019-09-25T04:19:03Z"
"","6210","Indentation incorrect level for chained method with bracket on new line","Hello, https://checkstyle.org/config_misc.html#Indentation I'm using checkstyle 8.14 and I have a problem with Indentation check.   ``` /var/tmp $ cat config.xml                                   /var/tmp $ cat MyClass.java          assertThat(result).hasSize(2)                 .extracting(                         MyDto::getField1,                         MyDto::getField2,                         MyDto::getField3)                 .containsOnly(     //","closed","indentation,","ati90ati","2018-11-14T18:10:36Z","2020-02-03T16:40:33Z"
"","6271","org/apache/commons/cli/ParseException missing in checkstyle-8.15-all.jar","Hello,  I upgraded my checkstyle environment with checkstyle-8.15-all.jar. Unfortunatelly, I've got an error: ` 2018-12-11 10:28:11 [WARN]  Error: A JNI error has occurred, please check your installation and try again 2018-12-11 10:28:11 [WARN]  Exception in thread ""main"" java.lang.NoClassDefFoundError: org/apache/commons/cli/ParseException `  The class org.apache.commons.cli.ParseException.class is missing in the -all package.  F.","closed","","breizh31","2018-12-11T10:51:20Z","2018-12-12T10:11:56Z"
"","6234","Invoking Checkstyle directly from Java","Hello Checkstyle team! Thank you for the tool - we have been using if for years!  ### Problem  I'm trying to cleanly integrate Checkstyle with Gradle and for this I need to programmatically invoke Checkstyle from Java (https://github.com/gradle/gradle/issues/7867). com.puppycrawl.tools.checkstyle.Main#main() does not work because it calls System.exit().  ### Suggested solution  Options:  a) provide Java API b) avoid System.exit() in main() c) offer a CLI flag / system property to prevent System.exit() in main() d) as a user I can use security manager to catch ""exitVM"" attempts  a) From what I gathered there isn't a Java API today. Adding it is an extra work, test, future maintenance. As a user I actually prefer to call main() because it is more stable (minimum API footprint) for the long game. It reuses CLI code so I feel safer as user that it won't break. b) An incompatible change. c) Good, pragmatic option. d) I am experimenting with this workaround now. I'm not entirely happy with it because in the past I did not find SecurityManager as a reliable solution to this use case (preventing 3rd party code from exiting vm).  I suggest we go for c). I can put together a PR but first I would like know if you would accept it.","closed","","mockitoguy","2018-11-30T21:55:18Z","2018-12-08T06:36:39Z"
"","6035","minor: fix bug with hashtag in url for anchors","Go to `http://checkstyle.sourceforge.net/config_annotation.html#AnnotationLocation` . Click on any anchor, AnnotationLocation for example, and the new URL becomes `http://checkstyle.sourceforge.net/config_annotation.html#AnnotationLocation#AnnotationLocation`. This issue always messes me up when switching to other anchor tags as most browsers will take this double hashtag as nonsense and not take you to either anchor on a page refresh. This fixes this bug so it is always using the page's raw location.","closed","","rnveach","2018-07-12T20:06:40Z","2018-07-13T12:14:18Z"
"","6943","new Check: report unneeded null check when using instanceOf","Given:  ``` if (myObj != null && myObj instanceof SomeObject) {     // ... } ```  I should be warned that `myObj != null` is not needed, given that instanceOf handles that under the hood.","open","approved,","tir38","2019-08-06T17:05:40Z","2021-03-15T01:48:20Z"
"","6093","CircleCI is failing due to missed checkout content","from: https://circleci.com/gh/checkstyle/checkstyle/9350  failing like:  ``` cat: .ci-temp/skip_ci: No such file or directory Exited with code 1 ``` caused by ""warning"" from previous step: ``` Saving Cache Warning: skipping this step: disabled in configuration ```","closed","CI,","romani","2018-08-29T06:31:53Z","2018-08-29T07:12:39Z"
"","6046","Spell check failing to get words file","From https://travis-ci.org/checkstyle/checkstyle/jobs/406904395#L661  Problem to download file linux.words Repository:https://rpmfind.net/linux/fedora/linux/development/rawhide/Everything/aarch64/os/Packages/w/  https://github.com/checkstyle/checkstyle/blob/master/.ci/test-spelling-unknown-words.sh#L17 There is no file words-3.0-28.fc28.noarch.rpm , there is 29th version of it   ``` cpio: Malformed number 64' _sys cpio: Malformed number 4' _syst /usr/bin/unlzma: (stdin): File format not recognized cpio: premature end of archive ```","closed","miscellaneous,","romani","2018-07-23T07:22:32Z","2018-08-05T05:10:51Z"
"","6819","config: switch travis to openjdk8","From https://travis-ci.community/t/install-of-oracle-jdk-8-failing/3038  > As of today, Oracle licensing has changed and the JDK cannot be downloaded from Oracle any longer without logging in.  This PR to make sure that everything is going fine with openjdk8.","closed","","pbludov","2019-06-13T08:10:19Z","2019-06-13T22:12:33Z"
"","6938","Xdocs: sort values for String Set properties","From https://github.com/checkstyle/checkstyle/pull/6931#discussion_r309848231  Some checks have properties of type `String Set`, [for example](https://checkstyle.org/config_design.html#DesignForExtension_Properties): ![image](https://user-images.githubusercontent.com/900805/62347776-7e4cc300-b503-11e9-9b6e-c57e251f3e7b.png)  For better readability, all of them should have default values sorted alphabetically to make it easier to find any value within the set.  `XdocsPagesTest.validatePropertySectionPropertyEx` should validate this.","closed","miscellaneous,","pbludov","2019-08-02T06:04:32Z","2019-08-02T20:52:27Z"
"","6929","New check: JavadocBlockTagLocation","From https://github.com/checkstyle/checkstyle/pull/6922#discussion_r307949256  ``` /var/tmp $ javadoc -Xdoclint:all TestClass.java Loading source file TestClass.java... Constructing Javadoc information... Standard Doclet version 11.0.3 Building tree for all the packages and classes... Generating ./test/TestClass.html... Generating ./test/package-summary.html... Generating ./test/package-tree.html... Generating ./constant-values.html... Building index for all the packages and classes... Generating ./overview-tree.html... Generating ./index-all.html... Building index for all classes... Generating ./allclasses-index.html... Generating ./allpackages-index.html... Generating ./deprecated-list.html... Building index for all classes... Generating ./allclasses.html... Generating ./allclasses.html... Generating ./index.html... Generating ./help-doc.html...  /var/tmp $ cat TestClass.java package test;  /**  * Summary. @author Me  */ public class TestClass {     /**      * Summary.      *      * @author Me  `   */     public TestClass() {} } ``` The javadoc tool output: ![image](https://user-images.githubusercontent.com/900805/61993130-c9805500-b06f-11e9-9e38-09e7a8ca5ac1.png)  The javadoc tool reports no error, but the output isn't expected: the `@author` tag goes to the summary.   From [the specs](https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#javadoctags):  > A tag must start at the beginning of a line (after any leading spaces and an optional asterisk) or it is treated as normal text. By convention, tags with the same name are grouped together. For example, put all @see tags together.  We need a check to validate that all javadoc tags (except inlines) are at the beginning of a line. If such a tag is intended to be a plain text, then the `at` character should be escaped.  Rationale:  to prevent accidental deformation of documentation during refactoring.","closed","new module,","pbludov","2019-07-27T10:18:29Z","2019-08-14T21:44:15Z"
"","6954","Add ID format property to SuppressWithPlainTextCommentFilter","From https://github.com/checkstyle/checkstyle/pull/6876#discussion_r300832892:  [SuppressWithPlainTextCommentFilter](https://checkstyle.sourceforge.io/config_filters.html#SuppressWithPlainTextCommentFilter) currently has `checkFormat` and `messageFormat` properties. When deciding if an audit event should be suppressed, it first matches the event source against the `checkFormat`. If that fails, it matches the event module ID against the `checkFormat`.  For an event to be suppressed, one of those matches has to succeed, and the event message must also be matched against the `messageFormat`.  This issue is a proposal to define a new property, `idFormat`, as a regular expression, and use it to match the event module ID rather than reusing the `checkFormat`. Then an audit event could be suppressed if all three matches succeed.  This new property should be consistent with [SuppressionFilter](https://checkstyle.sourceforge.io/config_filters.html#SuppressionFilter) where `suppression` XML elements can have attributes including: >* `checks` - a Regular Expression matched against the name of the check associated with an audit event. Optional as long as id or message is specified. >* `message` - a Regular Expression matched against the message of the check associated with an audit event. Optional as long as checks or id is specified. >* `id` - a string matched against the check id associated with an audit event. Optional as long as checks or message is specified.  Related issues: * SuppressionCommentFilter: #6883  * SuppressWithNearbyCommentFilter: #6884   ----  Migration note: Recommended migration for users is to rename any checkFormat property that matches check ID's to instead be named idFormat OR Make a copy of SuppressWithPlainTextCommentFilter config and use idFormat.","closed","new feature,","esilkensen","2019-08-07T07:02:07Z","2019-08-19T13:40:40Z"
"","6884","Add ID format property to SuppressWithNearbyCommentFilter","From https://github.com/checkstyle/checkstyle/pull/6876#discussion_r300832892:  [SuppressWithNearbyCommentFilter](https://checkstyle.sourceforge.io/config_filters.html#SuppressWithNearbyCommentFilter) currently has `checkFormat` and `messageFormat` properties. When deciding if an audit event should be suppressed, it first matches the event source against the `checkFormat`. If that fails, it matches the event module ID against the `checkFormat`.  For an event to be suppressed, one of those matches has to succeed, and the event message must also be matched against the `messageFormat`.  This issue is a proposal to define a new property, possibly named `idFormat`, as either a plain string or regular expression, and use it to match the event module ID rather than reusing the `checkFormat`. Then an audit event could be suppressed if all three matches succeed.  This new property could be consistent with [SuppressionFilter](https://checkstyle.sourceforge.io/config_filters.html#SuppressionFilter) where `suppression` XML elements can have attributes including: >* `checks` - a Regular Expression matched against the name of the check associated with an audit event. Optional as long as id or message is specified. >* `message` - a Regular Expression matched against the message of the check associated with an audit event. Optional as long as checks or id is specified. >* `id` - a string matched against the check id associated with an audit event. Optional as long as checks or message is specified.  Related issue for SuppressionCommentFilter: #6883","closed","new feature,","esilkensen","2019-07-09T08:20:01Z","2019-08-11T18:32:01Z"
"","6883","Add ID format property to SuppressionCommentFilter","From https://github.com/checkstyle/checkstyle/pull/6876#discussion_r300832892:  [SuppressionCommentFilter](https://checkstyle.sourceforge.io/config_filters.html#SuppressionCommentFilter) currently has `checkFormat` and `messageFormat` properties. When deciding if an audit event should be suppressed, it first matches the event source against the `checkFormat`. If that fails, it matches the event module ID against the `checkFormat`.  For an event to be suppressed, one of those matches has to succeed, and the event message must also be matched against the `messageFormat`.  This issue is a proposal to define a new property, possibly named `idFormat`, as either a plain string or regular expression, and use it to match the event module ID rather than reusing the `checkFormat`. Then an audit event could be suppressed if all three matches succeed.  This new property could be consistent with [SuppressionFilter](https://checkstyle.sourceforge.io/config_filters.html#SuppressionFilter) where `suppression` XML elements can have attributes including: >* `checks` - a Regular Expression matched against the name of the check associated with an audit event. Optional as long as id or message is specified. >* `message` - a Regular Expression matched against the message of the check associated with an audit event. Optional as long as checks or id is specified. >* `id` - a string matched against the check id associated with an audit event. Optional as long as checks or message is specified.  Related issue to for SuppressWithNearbyCommentFilter: #6884  ----  Migration note: Recommended migration for users is to rename any `checkFormat` property that matches check ID's to instead be named `idFormat` OR Make a copy of SuppressionCommentFilter config and use `idFormat`.","closed","new feature,","esilkensen","2019-07-09T08:17:29Z","2019-08-07T02:14:39Z"
"","6844","Make inner class SuppressionCommentFilter.Tag private","From https://github.com/checkstyle/checkstyle/pull/6839#issuecomment-504560192  Some internal implementation details of the class `SuppressionCommentFilter` are exposed to public. That's not necessary. Moreover, this may cause compatibility issues in the future. This class should be private. This is a minor change, but may require some changes to the tests.","closed","miscellaneous,","pbludov","2019-06-24T07:42:26Z","2019-07-04T14:09:50Z"
"","6611","minor: make RequireThisCheck.{Catch,For}Frame private","From https://github.com/checkstyle/checkstyle/pull/6604/files#r268451734 Fixes #6604  `RequireThisCheck.CatchFrame` and `RequireThisCheck.ForFrame` should be private or documented. The second option is questionable because all other frame classes are private.","closed","","pbludov","2019-03-25T18:38:40Z","2019-03-25T19:28:36Z"
"","6055","Travis CI: MAC build is broken","From https://github.com/checkstyle/checkstyle/pull/6053#issuecomment-409843689  We should add ```     - os: osx       osx_image: xcode8 ``` to the build matrix","closed","miscellaneous,","pbludov","2018-08-02T18:27:27Z","2018-08-03T12:12:10Z"
"","6036","LeftCurlyCheck: An empty line should not be treated as a wrap","from https://github.com/checkstyle/checkstyle/pull/6025#issuecomment-404537343  https://checkstyle.org/config_blocks.html#LeftCurly https://checkstyle.org/property_types.html#LeftCurlyOption  An empty line should not be treated as a wrap. option=NLOW  an empty line implies wrap. More generally: ``` // option = NLOW public class TestClass {      public void testIf() {       if (1 < 2)       { // warn '{' at column 7 should be on the previous line                }        if (1 < 2)        { // OK, blank line here                }     }      public void testSwitch(int x) {         switch (x) {             case 0:             { // warn '{' at column 13 should be on the previous line             }             case 0:              { // OK, blank line here                 break;             }         }     } } ```  Also, a comment triggers a wrap: openjdk10/make/src/classes/build/tools/cldrconverter/LDMLParseHandler.java.html#L267 ```         case ""dayPeriodContext"":              // for FormatData              // need to keep stand-alone and format, to allow for multiple inheritance in CLDR              // for FormatData              // need to keep stand-alone and format, to allow for multiple inheritance in CLDR              {                  String type = attributes.getValue(""type""); ```   spotbugs/spotbugs/src/main/java/edu/umd/cs/findbugs/OpcodeStack.java.html#L1562 ```             case Const.IF_ICMPGE:                {                  seenTransferOfControl = true; ```","closed","","romani","2018-07-13T04:59:53Z","2020-11-30T15:53:56Z"
"","6849","extend EmptyStatementCheck to check fields","From https://github.com/checkstyle/checkstyle/issues/6775#issuecomment-496278830  ``` $ cat TestClass.java public class TestClass {      int field;; // violation expected     enum A {    C, D;; // violation expected    } };  $ cat conf.xml                               $ java -jar checkstyle-8.22-all.jar -c conf.xml Test.java Starting audit... here is violations at lines commented with // violation ```","closed","","strkkk","2019-06-25T14:41:23Z","2019-06-26T08:13:17Z"
"","6775","new check: UnnecessarySemicolonInObjectBlock","From https://github.com/checkstyle/checkstyle/issues/6752#issuecomment-493911181 Semicolons after code blocks are not necessary and should be detected as violations. It also includes empty statements. ``` $ cat TestClass.java public class TestClass {      {/*init block*/}; // violation      static {}; // violation      TestClass (){}; // violation      class A{}; // violation      void method(boolean cond){         while(cond){}; // violation         if(cond){}; // violation         if(cond){}; // violation         if(cond); else {}; // violation         for(;cond;){}; // violation         {}; // violation         ; // violation     }; // violation      interface aa{}; //violation      enum aa1{}; // violation      @interface anno {}; // violation  }; // violation  $ cat conf.xml                               $ java -jar checkstyle-8.20-all.jar -c conf.xml Test.java Starting audit... here is violations at lines commented with // violation ```  Following cases are empty statements and can be ignored with additional property `ignoreEmptyStatements` ``` $ cat EmptyStatements.java public class EmptyStatements {      void ignoreMethodEmptyStatements(boolean cond){       // all unnecessary semis below are ignored, these are empty statements         while(cond){};         if(cond){};         if(cond){};         if(cond); else {};         for(;cond;){};         {};         ;     } } $ cat conf.xml                                                    $ java -jar checkstyle-8.20-all.jar -c conf.xml EmptyStatements.java Starting audit... Audit done. ```","closed","","strkkk","2019-05-23T07:28:08Z","2019-06-25T14:42:44Z"
"","6773","new check: UnnecessarySemicolonInEnumeration","From https://github.com/checkstyle/checkstyle/issues/6752#issuecomment-493788510 When enum has nothing but constants declaration, trailing semicolon is unnecessary. It should be detected and reported as violation  ``` $ cat TestClass.java enum Nothing {   A,B } enum Comma {   A,B, } enum Semicolon {   A,B; // violation } enum EvenThis {   A,B,; // violation }  enum Normal { A,B; // OK Normal(){} }  $ cat conf.xml                               $ java -jar checkstyle-8.20-all.jar -c conf.xml Test.java Starting audit... here is violations at lines commented with // violation ```","closed","new module,","strkkk","2019-05-23T07:08:49Z","2019-06-02T00:44:58Z"
"","6121","Update FullIdent to store DetailAST instead of line/column","From https://github.com/checkstyle/checkstyle/issues/4830#issuecomment-383102616 >FullIdent could be modified to save the AST that starts the type so we can then retrieve the correct AST.  Part of https://github.com/checkstyle/checkstyle/issues/5758","closed","miscellaneous,","pbludov","2018-09-16T09:05:27Z","2018-10-15T06:17:42Z"
"","6800","Limit xdoc Properties subsection to one table","From comment https://github.com/checkstyle/checkstyle/pull/6788#pullrequestreview-243464770  The properties section has a special purpose: the properties table. Everything else should be moved to `Nodes` or `Description`.  The test `XdocsPagesTest#validatePropertySection` should verify this limit.","closed","miscellaneous,","pbludov","2019-06-03T18:43:03Z","2019-06-12T05:23:03Z"
"","6947","eclipse violation over javadoc of AtclauseOrderCheck.java","from : https://travis-ci.org/checkstyle/checkstyle/jobs/567697101#L588  ``` 1. ERROR in /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/ checkstyle/checks/javadoc/AtclauseOrderCheck.java (at line 68) 	* Default value is {@code @author, @deprecated, @exception, @param, @return, 	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Javadoc: Missing closing brace for inline tag ```  it will become a failure in master ones I merge https://github.com/checkstyle/checkstyle/pull/6945 .  introduced by https://github.com/checkstyle/checkstyle/commit/7493dd41a4fe26e357de5cd8945717b13d13d86c#diff-6d4b0d5911e5ed5f47a227650ec06fa0R68 .  simiar issue was in Eclipse , but fixed in 4.7: https://bugs.eclipse.org/bugs/show_bug.cgi?id=206345 we are using 4.10 - https://github.com/checkstyle/checkstyle/blob/master/.ci/eclipse-compiler-javac.sh#L11","closed","miscellaneous,","romani","2019-08-06T23:41:58Z","2019-08-11T20:28:56Z"
"","6774","new check: UnnecessarySemicolonInTryWithResources","From #6752  For last resource in resources declaration semicolon is unnecessary. It should be detected and reported as violation. If closing paren is not on same line, no violation in default configuration. ``` $ cat Test.java import java.io.*;  public class TestClass {   void method(){        try( OutputStream s = new PipedOutputStream();)  // violation        {}        try(            OutputStream s1 = new PipedOutputStream();            OutputStream s2 = new PipedOutputStream();)  // violation        {}        try(            OutputStream s1 = new PipedOutputStream();            OutputStream s2 = new PipedOutputStream(); // no violation, closing paren on next line        ){}    } };   $ cat conf.xml                               $ java -jar checkstyle-8.20-all.jar -c conf.xml Test.java Starting audit... here is violations at lines commented with // violation ``` Additional boolean property `allowWhenNoBraceAfterSemicolon` (default values is true) to make an exception for lines, where closing parentheses is on the next line: ``` $ cat Test.java import java.io.*;  public class TestClass {   void method(){        try(              OutputStream s = new PipedOutputStream();)  // violation        {}        try(            OutputStream s1 = new PipedOutputStream();            OutputStream s2 = new PipedOutputStream();)  // violation        {}        try(            OutputStream s = new PipedOutputStream(); // violation            ) {}        try(            OutputStream s1 = new PipedOutputStream();            OutputStream s2 = new PipedOutputStream(); // violation         ){}    } };   $ cat conf.xml                                                  $ java -jar checkstyle-8.20-all.jar -c conf.xml Test.java Starting audit... here is violations at lines commented with // violation ```","closed","new module,","strkkk","2019-05-23T07:14:28Z","2019-06-15T22:23:14Z"
"","6416","AnnotationLocation: Remove unused tokens","From #6379   https://checkstyle.org/config_annotation.html#AnnotationLocation  Acceptable tokens for `AnnotationLocationCheck` [are ](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java#L238) ```     public int[] getAcceptableTokens() {         return new int[] {             TokenTypes.CLASS_DEF,             TokenTypes.INTERFACE_DEF,             TokenTypes.PACKAGE_DEF,             TokenTypes.ENUM_CONSTANT_DEF,             TokenTypes.ENUM_DEF,             TokenTypes.METHOD_DEF,             TokenTypes.CTOR_DEF,             TokenTypes.VARIABLE_DEF,             TokenTypes.PARAMETER_DEF,             TokenTypes.ANNOTATION_DEF,             TokenTypes.TYPECAST,             TokenTypes.LITERAL_THROWS,             TokenTypes.IMPLEMENTS_CLAUSE,             TokenTypes.TYPE_ARGUMENT,             TokenTypes.LITERAL_NEW,             TokenTypes.DOT,             TokenTypes.ANNOTATION_FIELD_DEF,         };     } ``` Tokens `LITERAL_THROWS`, `DOT`, `IMPLEMENTS_CLAUSE` shouldn't be here. They have no annotation tokens among children. Tokens `TYPECAST` and `LITERAL_NEW` may have annotations, but they aren't fit to the check: ``` Object var = @Ann                     new Type(); return (@Ann           ) var; ``` This code will compile, but no one will use this style. For now, `AnnotationLocationCheck` ignores these tokens, although they are acceptable.  Full list of removed tokens: ```             TokenTypes.TYPECAST,             TokenTypes.LITERAL_THROWS,             TokenTypes.IMPLEMENTS_CLAUSE,             TokenTypes.TYPE_ARGUMENT,             TokenTypes.LITERAL_NEW,             TokenTypes.DOT, ```","closed","breaking compatibility,","pbludov","2019-02-10T09:55:37Z","2019-02-25T03:43:24Z"
"","6493","New Check: AnnotationAmongModifiers","From #3213  ``` $ cat TestClass.java public class TestClass {     @Nullable     /**      * Some javadoc here      */     protected @Nonnull static boolean doSomething() {         System.out.print(""Hello, world!"");     } }  $ cat TestConfig.xml                        $ java -jar checkstyle-8.18-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done.  java -jar checkstyle-8.18-all.jar -T TestClass.java  CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |   `--LITERAL_PUBLIC -> public [1:0] |--LITERAL_CLASS -> class [1:7] |--IDENT -> TestClass [1:13] `--OBJBLOCK -> OBJBLOCK [1:23]     |--LCURLY -> { [1:23]     |--METHOD_DEF -> METHOD_DEF [2:4]     |   |--MODIFIERS -> MODIFIERS [2:4]     |   |   |--ANNOTATION -> ANNOTATION [2:4]     |   |   |   |--AT -> @ [2:4]     |   |   |   `--IDENT -> Nullable [2:5]     |   |   |--BLOCK_COMMENT_BEGIN -> /* [3:4]     |   |   |   |--COMMENT_CONTENT -> *\n     * Some javadoc here\n      [3:6]     |   |   |   `--BLOCK_COMMENT_END -> */ [5:5]     |   |   |--LITERAL_PROTECTED -> protected [6:4]     |   |   |--ANNOTATION -> ANNOTATION [6:14]     |   |   |   |--AT -> @ [6:14]     |   |   |   `--IDENT -> Nonnull [6:15]     |   |   `--LITERAL_STATIC -> static [6:23]     |   |--TYPE -> TYPE [6:30]     |   |   `--LITERAL_BOOLEAN -> boolean [6:30]     |   |--IDENT -> doSomething [6:38] ```  According to the specs https://docs.oracle.com/javase/specs/jls/se11/html/jls-9.html#jls-9.7.4  > It is customary, though not required, to write declaration annotations before all other modifiers, and type annotations immediately before the type to which they apply.  The idea is to make a new check which enforces that all `ANNOTATION` children should be grouped in the beginning (actually, right after javadoc) or end of `MODIFIERS`:  ```           @Ann1 @Ann2 protected  static boolean doSomething(); // OK     @Ann1 protected @Ann2  static boolean doSomething(); // warn     protected  static  @Ann1 @Ann2 boolean  doSomething(); // warn            @Ann1 @Ann2 protected  static boolean doSomething(); // warn     @Ann1 protected @Ann2  static boolean doSomething(); // warn     protected  static  @Ann1 @Ann2 boolean  doSomething(); // OK  ```  Another possibility is not to create a new check, but to add a property to the 'AnnotationLocation'. ```      ```","open","","pbludov","2019-03-03T09:09:05Z","2019-12-13T00:05:40Z"
"","6254","config: add wildcards for nested classes since pitest wont add them","Found one line with a * on the end and it seemed weird it did it and none of the others did. Removing that star and running the pitest report for it showed that the nested class never had any mutations calculated. Without the *, pitest by default ignores nested classes when we specify the class name. This change is to add * to all class names so we don't have to worry about remembering this for future changes.","closed","","rnveach","2018-12-09T01:31:35Z","2018-12-10T16:19:30Z"
"","6560","Tests fail with German locale on Windows with default encoding","Followup of #6511  CS tests fail with German locale on Windows with default encoding due to encoding problems. CI with German locale is most probably passing because it is run on Linux where default encoding is `UTF-8`.  When I run `mvn clean test -DargLine='-Duser.language=de -Duser.country=DE -Dfile.encoding=Cp1252' -Dtest=com.puppycrawl.tools.checkstyle.DefaultLoggerTest#testAddError` on the latest master, I get errors like: ![grafik](https://user-images.githubusercontent.com/325196/54116819-dc132e00-43ef-11e9-9789-7e16a8293691.png)  Using the checkstyle all jar, it always outputs in `UTF-8` which might be fine in a generated file, but is bad on the commandline. ![grafik](https://user-images.githubusercontent.com/325196/54125573-aed17a80-4405-11e9-9f78-aa4b25c3e995.png) (the prompt is Cygwin, but looks the same in `cmd.exe`, I just tried)  Default encoding for Windows in most western european locales is Cp1252, so is it here.  I propose to run the tests by default with `en_US.UTF-8` locale, for better build reproducability and test stability.","closed","miscellaneous,","Vampire","2019-03-11T10:23:01Z","2020-08-02T16:01:27Z"
"","6972","New Check NoEnumTrailingComma","Followup 2 to #6469  Imho it looks strange to have a trailing comma, so I'd rather like to be able to check that no trailing comma is ever used. This will be directly competing with `EnumTrailingComma`.  **_Examples:_** ```java enum Foo1 {   FOO, // OK   BAR, // violation   ; } enum Foo2 {   FOO, // OK   BAR,; // violation } enum Foo3 { FOO, BAR,; } // violation enum Foo4 {   FOO, // OK   BAR, // violation } enum Foo5 { FOO, BAR, } // violation enum Foo6 {   FOO, // OK   BAR // OK   ; } enum Foo7 {   FOO, // OK   BAR; // OK } enum Foo8 { FOO, BAR; } // OK enum Foo9 {   FOO, // OK   BAR // OK } enum Foo10 { FOO, BAR } // OK ```  **_Current Work-Around only for enums:_** ```xml                              ```  **_Current Work-Around for arrays and enums:_** ```xml                              ```","closed","new module,","Vampire","2019-08-12T11:21:56Z","2020-01-09T14:51:49Z"
"","6971","New Check NoArrayTrailingComma","Followup 1 to #6469  Imho it looks strange to have a trailing comma, so I'd rather like to be able to check that no trailing comma is ever used. This will be directly competing with `ArrayTrailingComma`.  **_Examples:_** ```java String[] foo1 = {   ""FOO"", // OK   ""BAR"", // violation }; String[] foo2 = { ""FOO"", ""BAR"", }; // violation String[] foo3 = {   ""FOO"", // OK   ""BAR"" // OK }; String[] foo4 = { ""FOO"", ""BAR"" }; // OK ```  **_Current Work-Around only for arrays:_** ```xml                              ```  **_Current Work-Around for arrays and enums:_** ```xml                              ```","closed","new module,","Vampire","2019-08-12T11:21:53Z","2019-12-28T19:10:21Z"
"","6714","Forum link reports 401","Following the README.md link to the forum returns a 401 (Unauthorized), wondering if there are security setup issues?  https://groups.google.com/forum/?hl=en#!forum/checkstyle","closed","","aaime","2019-05-05T07:58:44Z","2019-05-05T13:16:11Z"
"","6095","Issue #6000: Fix zero line violations","Fixes https://github.com/checkstyle/checkstyle/issues/6000","closed","","li-boxuan","2018-08-30T02:04:40Z","2018-09-05T12:58:02Z"
"","6620","Issue #6619: Update cached Google Style Guide","Fixes #6619","closed","","Vampire","2019-03-30T02:23:34Z","2019-05-07T15:55:48Z"
"","6613","Issue #6612: do not complain about illegal types as parameters of methods with @Override annotation","Fixes #6612","closed","","Vampire","2019-03-26T01:39:38Z","2019-05-01T23:47:38Z"
"","6561","Issue #6560: run tests with English locale and UTF-8 encoding by default","Fixes #6560","closed","","Vampire","2019-03-11T10:26:21Z","2019-03-17T18:23:21Z"
"","6559","Issue #6558: make tests work reliably on Windows with LF line endings","Fixes #6558","closed","","Vampire","2019-03-11T10:16:28Z","2019-09-15T20:38:22Z"
"","6515","Issue #6513: Do not depend on system line separator in empty catch block check","Fixes #6513","closed","","Vampire","2019-03-06T03:12:53Z","2019-05-02T14:49:21Z"
"","6509","Issue #6508: Do not fail NewlineAtEndOfFile check with LF_CR_CRLF if file consists only of a newline character","Fixes #6508","closed","","Vampire","2019-03-05T19:10:48Z","2019-05-13T19:06:54Z"
"","6566","Issue #6491: Fix wrong JavaDoc example for NestedForDepth check","Fixes #6491","closed","","Vampire","2019-03-12T17:20:06Z","2019-03-18T19:50:46Z"
"","6567","Issue #6490: Add MultipleVariableDeclarations check to Sun style config","Fixes #6490","closed","","Vampire","2019-03-12T18:55:41Z","2019-04-11T10:31:43Z"
"","6618","Issue #6488: Fix documentation of InnerAssignment check","Fixes #6488","closed","","Vampire","2019-03-30T01:47:17Z","2019-04-08T18:45:59Z"
"","6533","Issue #6478: fix last urls that reference old web site and old dtd location","fixes #6478","closed","","romani","2019-03-09T05:33:11Z","2019-04-03T20:42:11Z"
"","6564","Issue #6477: Improve IllegalType check documentation and extend default forbidden classes","Fixes #6477","closed","discussion ongoing,","Vampire","2019-03-12T02:35:12Z","2019-04-17T11:44:15Z"
"","6522","Issue #6472: Clean up rationale of ExplicitInitialization check","Fixes #6472","closed","","Vampire","2019-03-07T02:20:20Z","2019-03-08T08:40:30Z"
"","6524","Issue #6470: Remove AvoidInlineConditionals check from sun_checks.xml","Fixes #6470","closed","","Vampire","2019-03-07T02:30:45Z","2019-03-08T08:37:32Z"
"","6523","Issue #6468: Fix typo in rationale of VisibilityModifier check","Fixes #6468","closed","","Vampire","2019-03-07T02:23:42Z","2019-03-08T08:38:18Z"
"","6565","Issue #6466: do not complain in same-mode about constructs that are not multi-part","Fixes #6466 Also fixes #3775","closed","","Vampire","2019-03-12T03:24:35Z","2019-05-02T00:22:38Z"
"","6530","Issue #6462 and #6463","Fixes #6462: Remove PARAMETER_DEF from AnnotationLocation Fixes #6463: Only handle fields for VARIABLE_DEF in AnnotationLocation check, not local variables","closed","","Vampire","2019-03-08T08:34:06Z","2019-06-12T13:09:04Z"
"","6518","Issue #6458: Correct typo in Lcruly property type description","Fixes #6458","closed","","Vampire","2019-03-06T22:50:21Z","2019-03-08T08:41:34Z"
"","6521","Issue #6453: Change default format regex of SuppressWarnings check to ^\s*+$","Fixes #6453","closed","","Vampire","2019-03-07T02:12:07Z","2019-03-08T08:39:27Z"
"","6519","Issue #6452: Use default value false for javaFiveCompatibility property of MissingOverride check in checkstyle_checks.xml","Fixes #6452","closed","","Vampire","2019-03-06T22:54:47Z","2019-03-08T08:42:11Z"
"","6520","Issue #6449: Fix doctype declaration of suppressions_none.xml","Fixes #6449","closed","","Vampire","2019-03-07T02:07:49Z","2019-03-08T08:39:59Z"
"","6505","Issue #6345: RightCurly with option alone false negative for class, method and constructor","Fixes #6345.  When I working with this pr, I found that this may be an intended behavior of checkstyle. See [here](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java#L225), it allows empty body.  If it is not the intended behavior, I will just delete the line that allows empty body.","closed","","fzdy1914","2019-03-04T15:16:13Z","2019-04-07T06:28:47Z"
"","6423","Issue #6083: Add Limitation in index.xml.vm","Fixes #6083","closed","","fzdy1914","2019-02-13T12:09:45Z","2019-02-18T09:01:07Z"
"","6525","spelling: Update messages_fr.properties","Fixed syntax (En français, ""espace"" est féminin quand il s'agit du caractère.)","closed","","sebastienaubry","2019-03-07T09:51:38Z","2019-03-08T02:23:24Z"
"","6918","doc: Serialisation -> serialization","fix typo","closed","","strkkk","2019-07-24T07:40:00Z","2019-07-24T12:21:06Z"
"","6176","fix issue#6083","fix issue[#6083](https://github.com/checkstyle/checkstyle/issues/6083)","closed","","arjenzhou","2018-10-29T11:13:10Z","2018-10-29T11:57:08Z"
"","6601","doc: added documentation for global tabWidth","Finalization of https://github.com/checkstyle/checkstyle/issues/6485","closed","","rnveach","2019-03-23T02:53:19Z","2019-03-23T09:02:03Z"
"","6143","How to allow comments while enforcing EmptyLineSeparator?","File causing the issue: ``` Java // Declare our package package se.dequeue.calculator; ... ```  yields  ``` .../src/App.java:2: 'package' should be separated from previous statement. [EmptyLineSeparator] ```  My check style.xml: https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml  ---------------  I would like to be able to allow comments while still blocking usage of empty lines. I could not find it mentioned in the documentation for `EmptyLineSeparator`.   A similar issue seems to be that comments are thought to be sections.  ```Java // Import all assertion types from the framework import static org.junit.jupiter.api.Assertions.assertEquals;  // Import the main testing framework (JUnit 5) import org.junit.jupiter.api.Test; // Import our app to test import se.dequeue.calculator.App; ```  yields  ``` .../src/test/AppTest.java:5: 'org.junit.jupiter.api.Test' should be separated from previous import group by one line. [CustomImportOrder] ```","closed","","AlexGustafsson","2018-10-17T08:44:53Z","2019-02-27T13:12:26Z"
"","6961","New Check PreferExpressionLambda","Extracted from comment in #120, a new check would be nice that advices to use expression lambdas if a full-fledged lambda contains only one expression the result of which is returned.  For example `Stream.of(""1"", ""2"", ""3"").map(string -> { return Integer.valueOf(string, 10); });` should be advised to `Stream.of(""1"", ""2"", ""3"").map(string -> Integer.valueOf(string, 10));` or `Stream.of(""1"", ""2"", ""3"").map(string -> { return string.indexOf('a'); });` to `Stream.of(""1"", ""2"", ""3"").map(string -> string.indexOf('a'));`  Why I thought it might make sense to have this combined with the PreferMethodReferenceCheck is, because if this is a separate check it will either partly report the same lambdas as PreferMethodReferenceCheck. An option would be to optionally also check whether it could even be a method reference and do not report a violation in that case. This would make the check more complex than necessary though, as without the check should be pretty straight-forward. And even if this check is done, it should be controllable by a property, as one might dislike method references but still want to have expression lambdas suggested.  For example `Stream.of(1, 2, 3).map(integer -> { return integer.doubleValue(); });` will be reported (I hope) by PreferMethodReferenceCheck to be changed to `Stream.of(1, 2, 3).map(Integer::doubleValue);` while it will also be reported by this check to be changed to `Stream.of(1, 2, 3).map(integer -> integer.doubleValue());`","closed","","Vampire","2019-08-09T15:53:23Z","2019-08-09T16:38:21Z"
"","6542","Expand checkstyle_resources_checks.xml to IT resources","Expand checkstyle_resources_checks.xml to IT resources so all resources are covered.  ````      [echo] Checkstyle started (checkstyle_resources_checks.xml) [checkstyle] Running Checkstyle  on 1517 files [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter2filebasic\rule21filename\InputOuterTypeFilename3.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter3filestructure\rule341onetoplevel\InputOneTopLevelClassBad1.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule413emptyblocks\InputEmptyBlock.java:11: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule413emptyblocks\InputEmptyBlockBasic.java:11: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule413emptyblocks\InputEmptyBlockCatch.java:11: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule42blockindentation\InputIndentationCorrectFieldAndParameter.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule42blockindentation\InputIndentationCorrectForAndParameter.java:9: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule42blockindentation\InputIndentationCorrectIfAndParameter.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule42blockindentation\InputIndentationCorrectReturnAndParameter.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule42blockindentation\InputIndentationCorrectWhileDoWhileAndParameter.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule452indentcontinuationlines\InputIndentationCorrectFieldAndParameter.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule452indentcontinuationlines\InputIndentationCorrectForAndParameter.java:9: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule452indentcontinuationlines\InputIndentationCorrectIfAndParameter.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule452indentcontinuationlines\InputIndentationCorrectReturnAndParameter.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule452indentcontinuationlines\InputIndentationCorrectWhileDoWhileAndParameter.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule462horizontalwhitespace\InputWhitespaceAroundBasic.java:7: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule4841indentation\InputIndentationCorrectFieldAndParameter.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule4841indentation\InputIndentationCorrectForAndParameter.java:9: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule4841indentation\InputIndentationCorrectIfAndParameter.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule4841indentation\InputIndentationCorrectReturnAndParameter.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter4formatting\rule4841indentation\InputIndentationCorrectWhileDoWhileAndParameter.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter5naming\rule522typenames\InputTypeName.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter5naming\rule525nonconstantfieldnames\InputMemberNameSimple.java:4: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter5naming\rule527localvariablenames\InputLocalVariableNameOneCharVarName.java:7: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter5naming\rule527localvariablenames\InputLocalVariableNameSimple.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter5naming\rule528typevariablenames\InputClassTypeParameterName.java:5: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter5naming\rule528typevariablenames\InputMethodTypeParameterName.java:5: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter5naming\rule53camelcase\InputAbbreviationAsWordInTypeNameCheck.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter6programpractice\rule62donotignoreexceptions\InputEmptyBlockCatch.java:11: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter6programpractice\rule64finalizers\InputNoFinalizeExtend.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter7javadoc\rule711generalform\InputSingleLineJavadocCheck.java:3: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter7javadoc\rule712paragraphs\InputIncorrectJavadocParagraphCheck.java:9: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter7javadoc\rule713atclauses\InputCorrectAtClauseOrderCheck.java:14: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter7javadoc\rule713atclauses\InputIncorrectAtClauseOrderCheck.java:14: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\com\google\checkstyle\test\chapter7javadoc\rule713atclauses\InputJavaDocTagContinuationIndentation.java:17: The name of the outer type and the file do not match. [OuterTypeFilename] [checkstyle] [ERROR] \checkstyle\src\it\resources\org\checkstyle\suppressionxpathfilter\whitespacearound\SuppressionXpathRegressionWhitespaceAroundNotFollowed.java:1: Package name is not same as directory. [PackageDeclaration] [checkstyle] [ERROR] \checkstyle\src\it\resources\org\checkstyle\suppressionxpathfilter\whitespacearound\SuppressionXpathRegressionWhitespaceAroundNotPreceded.java:1: Package name is not same as directory. [PackageDeclaration] ````","closed","miscellaneous,","rnveach","2019-03-10T03:33:17Z","2019-03-10T06:01:00Z"
"","6297","Cache: file skipped on 2nd run when exception happened on it in first run","Exceptions are a rare case in checkstyle.  ``` $diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java index fc59988..4d5b65a 100644 --- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java +++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java @@ -297,7 +297,7 @@      private static DetailAST getFirstAnnotationOnSameLine(DetailAST annotation) {          DetailAST previousAnnotation = annotation;          final int lastAnnotationLineNumber = previousAnnotation.getLineNo(); -        while (previousAnnotation.getPreviousSibling() != null +        while (previousAnnotation.getPreviousSibling() == null                  && previousAnnotation.getPreviousSibling().getLineNo()                      == lastAnnotationLineNumber) {              previousAnnotation = previousAnnotation.getPreviousSibling();  $ java -jar checkstyle-master-all.jar -c config\checkstyle_checks.xml src\test\resources\com\puppycrawl\tools\checkstyle\checks\sizes\methodcount\InputMethodCount2.java -Dcheckstyle.header.file=""${workspace_loc}\checkstyle\config\java.header"" -Dcheckstyle.suppressions.file=""${workspace_loc}\checkstyle\config\suppressions.xml"" -Dcheckstyle.suppressions-xpath.file=""${workspace_loc}\checkstyle\config\suppressions-xpath.xml"" -Dcheckstyle.regexp.header.file=""${workspace_loc}\checkstyle\config\java_regexp.header"" -Dcheckstyle.importcontrol.file=""${workspace_loc}\checkstyle\config\import-control.xml"" -Dcheckstyle.importcontroltest.file=""${workspace_loc}\checkstyle\config\import-control-test.xml"" -Dcheckstyle.cache.file=""${workspace_loc}\checkstyle\target\cachefilet"" Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing M:\checkstyleWorkspace\checkstyle\src\test\resources\com\puppycrawl\tools\checkstyle\checks\sizes\methodcount\InputMethodCount2.javaCheckstyle ends with 1 errors.  	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:297) 	at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:217) 	at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:390) 	at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:313) 	at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:180) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:119) Caused by: java.lang.NullPointerException 	at com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck.getFirstAnnotationOnSameLine(LeftCurlyCheck.java:301) 	at com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck.skipAnnotationOnlyLines(LeftCurlyCheck.java:284) 	at com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck.visitToken(LeftCurlyCheck.java:182) 	at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:390) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:501) 	at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:330) 	at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:183) 	at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81) 	at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:319) 	at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289) 	... 5 more  $ cat cachefilet #Mon Dec 17 19:43:20 EST 2018 M\:\\checkstyleWorkspace\\checkstyle\\src\\test\\resources\\com\\puppycrawl\\tools\\checkstyle\\checks\\sizes\\methodcount\\InputMethodCount2.java=1544361750340 module-resource*?\:M\:\\checkstyleWorkspace\\checkstyle\\config\\suppressions.xml=52C73A2BBFD057C34F37A85D9B94F1F0F64A3380 module-resource*?\:file\:/M\:/checkstyleWorkspace/checkstyle/config/import-control-test.xml=5BAC39384EF046C9FA74A807FEAE02A1D747CB3B module-resource*?\:file\:/M\:/checkstyleWorkspace/checkstyle/config/java_regexp.header=A70107549356B0396EBC37EA095790DE75CC5193 module-resource*?\:file\:/M\:/checkstyleWorkspace/checkstyle/config/import-control.xml=6D0857449EC5F13E840DAE1AFF27AE173F362562 module-resource*?\:file\:/M\:/checkstyleWorkspace/checkstyle/config/java.header=161CF9951A52797C446FABDE4A493DFE7DE2A819 module-resource*?\:M\:\\checkstyleWorkspace\\checkstyle\\config\\suppressions-xpath.xml=F6BE4270F2DFC3FC154076CCA45D379085FDA4F6 configuration*?=4A64B8FDA513A8C0126E4073E611CC65B0A81CF1 ```  I am expecting the java file to not be added to the cache file. The 2nd time it is run, it sees the file in the cache and skips over it resulting in no exception on the 2nd run. The exception should continue until it is added to `BeforeExecutionExclusionFileFilter` or the check has been fixed.","closed","miscellaneous,","rnveach","2018-12-18T00:53:31Z","2019-02-18T13:36:47Z"
"","6701","move OSX executions from travis.yml to travis.sh","example: https://github.com/checkstyle/checkstyle/blob/master/.travis.yml#L172-L183 ``` - exclude1=""!FileContentsTest#testGetJavadocBefore,!FileTextTest#testFindLine*,"" - exclude2=""!MainFrameModelPowerTest#testOpenFileWithUnknownParseMode,"" - exclude3=""!TokenUtilTest#testTokenValueIncorrect2,"" - exclude4=""!ImportControlLoaderPowerTest#testInputStreamThatFailsOnClose"" - CMD1=""mvn -e package -Dlinkcheck.skip=true -Dtest=$exclude1$exclude2$exclude3$exclude4"" - CMD2=""mvn -e package -Passembly -Dtest=$exclude1$exclude2$exclude3"" - CMD=""export JAVA_HOME=$(/usr/libexec/java_home) && $CMD1 && $CMD2"" ```  if osx user try to execute the same as travis do ... it will be an unpleasant exercise. but user should just copy single line and execute it.  should be: ``` - CMD1=""/.ci/travis/travis.sh osx-jdk12-package"" - CMD2=""/.ci/travis/travis.sh osx-jdk12-assembly"" - CMD=""$CMD1 && $CMD2"" ```  note: `export JAVA_HOME=$(/usr/libexec/java_home)` should be in defined in each step of travis.sh for osx.","closed","CI,","romani","2019-04-27T15:27:40Z","2019-05-15T03:10:14Z"
"","6129","How to ignore some situations in the rule of magic number","ex.int [] arr = new int[5]; arr[4] =3; ""5"" in first line and 4 in second line are both taken as magic numbers, I want to ignore such situations. I tried to add INDEX_OP and LBRACK to constantWaiverParentToken, but it didn't work. Can  you give me some suggestions?","closed","","zjufirice","2018-09-25T08:49:47Z","2018-10-23T04:56:04Z"
"","6091","Document relation to tokens of LeftCurly and RightCurly","Even though it might be clear from intuition or logic (it's not for me and I think I can say it's tricky, especially if you don't configure checkstyle every day) a clear statement whether the configured `tokens` for `LeftCurly` and `RightCurly` occur before or after the token occurs in the source code. If that's not possible (then I'd be completely confused because I didn't understand the mechanism at all), please expand the explanation about the effect or including or excluding a token on one of the checks (and link from the other).  I'm referring to http://checkstyle.sourceforge.net/config_blocks.html assuming it's the latest documentation.","open","","krichter722","2018-08-19T20:54:26Z","2018-08-19T20:54:26Z"
"","6638","Support for several aliases for one check in SuppressWarningsHolder","Enhancement request:  I would like to use IDEA `@SuppressWarnings` values for Checkstyle.  Unfortunately, there are some discrepancies in checks. Checkstyle's `HiddenField` check is equivalent to two different in IDEA checks: `LocalVariableHidesMemberVariable` and `ParameterHidesMemberVariable`. And I can't add both to `SuppressWarningsHolder`, only one is possible.  Also, due to #6637, I can't add the one most common check (`ParameterHidesMemberVariable`) as alias and use combination `@SuppressWarnings({""checkstyle:hiddenfield"", ""LocalVariableHidesMemberVariable""})` for another.  Please, add to `SuppressWarningsHolder` support for several aliases.","open","awaiting response,","grv87","2019-04-05T14:21:21Z","2022-07-13T12:38:28Z"
"","7002","Ensure checkstyle all jar is signed","Due to recent security vulnerabilities being found in open source software, we should do some checks to make sure our repository is secure and can have no known issues.  We sign our jars when we deploy them to the maven repository. Currently we don't believe our all jar released to github is signed.  If possible, we should look into signing it and ensure it stays signed in future releases.","open","","rnveach","2019-08-22T21:14:24Z","2019-09-03T16:32:05Z"
"","7003","Look into signing commits","Due to recent security vulnerabilities being found in open source software, we should do some checks to make sure our repository is secure and can have no known issues.   During discussion signing all our jars, https://github.com/checkstyle/checkstyle/issues/7002 , it was brought up about signing our commits as well. No one in our group is familiar with this and if it will provide security benefits and what type of benefits.  We should look into how to sign our commits, the benefits they may provide, and how to make it as seamless as possible.","open","","rnveach","2019-08-22T21:24:36Z","2019-08-22T21:24:36Z"
"","6144","config: bump saxon to 9.9.0-1","due to https://travis-ci.org/checkstyle/checkstyle/jobs/442841783#L2886","closed","","romani","2018-10-20T14:16:25Z","2018-10-20T17:18:14Z"
"","6206","minor: fix antlr links to be https (linkcheck plugin)","due to failure - https://app.codeship.com/projects/124310/builds/dbf362bb-4c9f-4c38-be9b-95c29ef19154?line=a66390bc-e0d1-49ac-899b-490e89501ae9&step=parallel_.ci%2Frun-link-check-plugin.sh","closed","","romani","2018-11-10T06:33:46Z","2018-11-10T17:51:04Z"
"","6136","minor: change oracle.com links to use https","due to failres at https://app.codeship.com/projects/124310/builds/f594dafb-cbdf-4e01-b70e-77fc0bd497a8  as https://app.codeship.com/projects/124310/builds/72b0cf8d-ba0b-41ce-b5fd-dbc6b1e9e84b pass , should be ok to merge","closed","","romani","2018-10-06T12:33:57Z","2018-10-06T14:58:10Z"
"","6439","Remove powermock","Drop powermock completely and use a suppression list similar to pitest to manage uncovered code coverage or rewrite production code so just reflection can be used without mocking. If that isn't acceptable, the next best thing is to completely isolate powermock tests to their own class(es) but this probably won't solve the main problem.  Reasons supporting removal of powermock: https://github.com/checkstyle/checkstyle/pull/6438#discussion_r258037140 https://github.com/checkstyle/checkstyle/pull/6435#issuecomment-464937668 https://github.com/checkstyle/checkstyle/pull/6424#issuecomment-463593931 https://github.com/hcoles/pitest/issues/230#issuecomment-463622773 https://github.com/checkstyle/checkstyle/issues/5678#issuecomment-379553644","closed","miscellaneous,","rnveach","2019-02-19T14:35:41Z","2019-02-23T11:47:48Z"
"","6037","Resolve violations from IDEA 2018.1.6","Download latest IDEA Community edition 2018.1.6 Run inspections from IDEA.   Following violations appear:  Inheritance issues   Abstract class without abstract methods  File:    AbstractXpathTestSupport  Message: Class 'AbstractXpathTestSupport' is declared 'abstract', and has no 'abstract' methods   TODO: this should not be abstract, need to be fixed.  Nuance (probably is reason why it become Abstract): If we fix we run into checkstyle violation -  `[checkstyle] [ERROR] src/it/java/org/checkstyle/suppressionxpathfilter/XpathTestSupport.java:0: File not match folder pattern '[\\/]src[\\/]it[\\/]java[\\/]' and file pattern '^((\w+Test)|(Abstract\w+))\.java$'. [RegexpOnFilename] `   ===============   J2ME issues - Abstract class which has only one direct inheritor Abstract class 'XXXXXXX' has only one direct inheritor  Files: AbstractIndentationTestSupport AbstractPathTestSupport  IDEA description: This inspection is intended for J2ME and other highly resource constrained environments. Applying the results of this inspection without consideration might have negative effects on code clarity and design. Reports abstract classes which have precisely one direct inheritor. While such classes may offer admirable clarity of design, in memory-constrained or bandwidth-limited environments, they needlessly increase the total footprint of the application. Consider merging the abstract class with its inheritor.    TODO: we need to suppress this inspection with note: ""we are not limited in resources and we a library so there are more usages outside of our code""   =========================  Javadoc - Declaration has problems in Javadoc references  file: AbstractModuleTestSupport  Messages: Cannot resolve symbol 'getConfiguration()' Cannot resolve symbol 'getConfiguration()' Cannot resolve symbol 'getConfiguration()'  TODO: just fix such problems  =========================  Performance - 'Collection.toArray()' call style  Message: Call to 'toArray()' with pre-sized array argument 'new Integer[result.size()]'  Files: AbstractIndentationTestSupport AbstractModuleTestSupport  Description:  There are two styles to convert a collection to an array: either using a pre-sized array (like c.toArray(new String[c.size()])) or using an empty array (like c.toArray(new String[0]). In older Java versions using pre-sized array was recommended, as the reflection call which is necessary to create an array of proper size was quite slow. However since late updates of OpenJDK 6 this call was intrinsified, making the performance of the empty array version the same and sometimes even better, compared to the pre-sized version. Also passing pre-sized array is dangerous for a concurrent or synchronized collection as a data race is possible between the size and toArray call which may result in extra nulls at the end of the array, if the collection was concurrently shrunk during the operation. This inspection allows to follow the uniform style: either using an empty array (which is recommended in modern Java) or using a pre-sized array (which might be faster in older Java versions or non-HotSpot based JVMs).   After a fix there is violation from another inspection  ""Memory - Zero-length array allocation""  Decription: Reports on allocations of arrays with known lengths of zero. Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly allocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or footprint. Note that this inspection does not report zero-length arrays allocated as static final fields, as it is assumed that those arrays are being used to implement array sharing.    Lets suppress ""Zero-length array allocation"" completely with note: ""conficting with ""    ========================","closed","miscellaneous,","romani","2018-07-14T03:17:24Z","2018-07-28T07:01:25Z"
"","6333","update release.sh with minor improvments","done: ~why site phase is not executed ? during release - make it exact ""mvn site""~  Not required any more: ~update MD to store whole build output to file  (tee)~  Done: ~put verification of vrsion before continue to release.sh~ by means of version calculation from sources.  Done: ~make some ""test"" of generated site, to avoid problem with no site generation~  Done: ~add TKN and updates of github release page automatically~  Before execution of release.sh we should check that release notes are placed into releasenotes.xml","closed","CI,","romani","2018-12-30T13:21:31Z","2020-01-27T16:26:32Z"
"","6488","Wrong documentation for InnerAssignment","Documentation shows how to configure the check for specific tokens, but possible tokens are not documented. Looking at the code suggests that all supported tokens are required, so is the setting possible at all? If so, please add valid tokens to documentation. If not, why doesn't the analysis fail or show an error if you use the setting?  https://checkstyle.org/config_coding.html#InnerAssignment","closed","miscellaneous,","Vampire","2019-02-27T09:08:43Z","2019-03-31T13:05:04Z"
"","6468","Typo in docs of VisibilityModifier","Docs say `Rationale: Forcing all fields of class to have private modified by default is good in most cases` should probably be `Rationale: Forcing all fields of class to have private modifier by default is good in most cases`","closed","miscellaneous,","Vampire","2019-02-24T00:30:34Z","2019-03-08T02:30:04Z"
"","6973","Issue #6934: correct doc for suppression generation","doc fix for #6934","closed","","strkkk","2019-08-12T16:00:44Z","2019-08-12T21:31:20Z"
"","6054","Issue #3161: Format for trailing comma check in enums","Discussed in sevntu-checkstyle/sevntu.checkstyle#709  Related to issue 3161","closed","","kariem","2018-07-31T23:45:03Z","2018-08-14T04:07:28Z"
"","6277","config: remove coverage/mutation threshold because pitest rounding issue","Discussed at https://github.com/checkstyle/checkstyle/issues/4684#issuecomment-445939995 ,  Coverage/Mutation removed. Default values are 0 for both. See https://github.com/hcoles/pitest/blob/333c3215643b578c37c5925a3ed9aa75147b0b73/pitest-maven/src/main/java/org/pitest/maven/AbstractPitMojo.java#L259 and https://github.com/hcoles/pitest/blob/333c3215643b578c37c5925a3ed9aa75147b0b73/pitest-maven/src/main/java/org/pitest/maven/AbstractPitMojo.java#L247 . When thresholds are 0, no check occurs. See https://github.com/hcoles/pitest/blob/333c3215643b578c37c5925a3ed9aa75147b0b73/pitest-maven/src/main/java/org/pitest/maven/AbstractPitMojo.java#L430-L431 and https://github.com/hcoles/pitest/blob/333c3215643b578c37c5925a3ed9aa75147b0b73/pitest-maven/src/main/java/org/pitest/maven/AbstractPitMojo.java#L442 .","closed","","rnveach","2018-12-13T03:23:07Z","2018-12-27T21:11:46Z"
"","6981","Enforce input naming convention in IT","Discovered at https://github.com/checkstyle/checkstyle/issues/6207 ,  Our UTs should have been checking the input files naming pattern but it was brought to light they aren't being checked. I looked at the IT folder some and we don't have good input file names or their folder names too. It would require renaming all our files and folders there.  I believe this was missed because of the google folders and we just skipped them. Though they should be named `Input` even in google, I am not sure we forced the folder to match the name of the test like we did in `test` folder.  Test should be fixed to validate the IT folder some. Our regression area in IT should be fixed to match our pattern in Test folder. Google and Sun area should atleast start with Input, but their folder structure follows a different pattern.","open","approved,","rnveach","2019-08-15T09:42:49Z","2020-05-07T06:30:33Z"
"","6397","update to picocli 3.9.1 result in UT MainTest.testNonExistentOutputFormat failure","detected in #6382.  Test: https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java#L290  In  debug it is clear that  exit code is `-1` as required. But for some reason junit consider test as failed. On new picocli and old picocli there is exception throw at https://github.com/stefanbirkner/system-rules/blob/master/src/main/java/org/junit/contrib/java/lang/system/internal/NoExitSecurityManager.java#L24  but on new version of picocli it is considered as failure.  Full UT failure stacktrace: ``` org.junit.contrib.java.lang.system.internal.CheckExitCalled: Tried to exit with status -1.  	at org.junit.contrib.java.lang.system.internal.NoExitSecurityManager.checkExit(NoExitSecurityManager.java:24) 	at java.lang.Runtime.exit(Runtime.java:107) 	at java.lang.System.exit(System.java:971) 	at com.puppycrawl.tools.checkstyle.Main.main(Main.java:143) 	at com.puppycrawl.tools.checkstyle.MainTest.testNonExistentOutputFormat(MainTest.java:298) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:68) 	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:326) 	at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:89) 	at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:97) 	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.executeTest(PowerMockJUnit44RunnerDelegateImpl.java:310) 	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTestInSuper(PowerMockJUnit47RunnerDelegateImpl.java:131) 	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.access$100(PowerMockJUnit47RunnerDelegateImpl.java:59) 	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner$TestExecutorStatement.evaluate(PowerMockJUnit47RunnerDelegateImpl.java:147) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.contrib.java.lang.system.ExpectedSystemExit$1.evaluate(ExpectedSystemExit.java:130) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30) 	at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48) 	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26) 	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30) 	at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48) 	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26) 	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.evaluateStatement(PowerMockJUnit47RunnerDelegateImpl.java:107) 	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTest(PowerMockJUnit47RunnerDelegateImpl.java:82) 	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runBeforesThenTestThenAfters(PowerMockJUnit44RunnerDelegateImpl.java:298) 	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:87) 	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:50) 	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.invokeTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:218) 	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.runMethods(PowerMockJUnit44RunnerDelegateImpl.java:160) 	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$1.run(PowerMockJUnit44RunnerDelegateImpl.java:134) 	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:34) 	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44) 	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:136) 	at org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:117) 	at org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:57) 	at org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:59) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) 	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ```","closed","miscellaneous,","romani","2019-01-29T15:34:10Z","2019-02-20T00:45:00Z"
"","6713","investigate increase of '-all' jar","detected at https://github.com/checkstyle/eclipse-cs/pull/158#issuecomment-489078070  https://github.com/checkstyle/checkstyle/releases checkstyle-8.19-all.jar 23.1 MB checkstyle-8.18-all.jar 11 MB  quick compare of unzipped jars show diff:","closed","miscellaneous,","romani","2019-05-03T12:55:38Z","2019-05-10T04:18:59Z"
"","6745","Improve VisibilityModifier documentation for Rationale","detected at https://github.com/checkstyle/checkstyle/pull/6733  at https://checkstyle.org/config_design.html#VisibilityModifier  there are two ""Rationale"", one is for Check and second is for property.  Second ""Rationale:"" is better to reword to ""Property Rationale:""","closed","miscellaneous,","romani","2019-05-11T15:24:16Z","2020-04-07T13:31:54Z"
"","6162","use openjdk10 code base in regression testing by CIs","detected at https://github.com/checkstyle/checkstyle/pull/6140#issuecomment-431965937  file openjdk10/src/jdk.jlink/share/classes/jdk/tools/jlink/internal/plugins/SystemModulesPlugin.java  config: default checks IllegalType and UnusedImports  Exception: ``` Got an exception - java.lang.NullPointerException #x9;at com.puppycrawl.tools.checkstyle.api.FullIdent.createFullIdentBelow(FullIdent.java:67) #x9;at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.checkIdent(IllegalTypeCheck.java:351) #x9;at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.checkType(IllegalTypeCheck.java:362) #x9;at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.checkTypeArguments(IllegalTypeCheck.java:414) #x9;at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitMethodCallOrRef(IllegalTypeCheck.java:296) #x9;at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitToken(IllegalTypeCheck.java:201) #x9;at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:390) #x9;at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:501) #x9;at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:330) #x9;at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:183) #x9;at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81) #x9;at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316) #x9;at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286) #x9;at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213) ```","closed","approved,","romani","2018-10-23T00:49:16Z","2021-06-06T21:31:27Z"
"","6892","Ignore rules for hashCode() and equals() methods","Describe what you expect in detail.  CheckStyle keeps noticing `31` as magic number in automatically generated `hashCode()` and keeps marking `if` without brackets in `equals()`.  Is there a way to halt those rules for these special methods?","closed","","Danon","2019-07-10T09:19:42Z","2019-07-15T15:29:12Z"
"","6326","New Check: ReturnSeparation","Describe what you expect in detail.  ``` /var/tmp $ javac SampleBadFile.java  /var/tmp $ cat checkstyle_checks.xml     ...  ...  /var/tmp $ cat SampleBadFile.java public class SampleBadFile {   String someValue;    public int foo() {     int something = 982;     return something + 42; // Violation - must have an empty line before the return statement   } }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c checkstyle_checks.xml SampleBadFile.java java/com/puppycrawl/tools/checkstyle/api/SampleBadFile.java:6:9: A return statement must be separated by an empty line. [ReturnSeparation] ``` --------------   **ReturnSeperation** - Ensures that there is an empty line or comment immediately before a return statement, or that its the only statement in the block.  Valid sample: ```   public int foo() {     int something = someCall();      return something + 42;   } ```  Where as this is a sample in violation: ```   public int foo() {     int something = someCall();     return something + 42; // Violation - must have an empty line before the return statement   } ```  See https://github.com/jdstapleton/checkstyle-ext/commit/master#diff-024043c44877e8fa313787856f5b38e4 for more samples  I started integrating the check into the checkstyle project ... but there are a few violations and would be a bit of work to go through them all, and the maven project has it run over all checks over the existing checkstyle code base.  So I didn't want to do the work for it if the new checks wouldn't be accepted.  So I have https://github.com/jdstapleton/checkstyle-ext which just has the code for the checks and then a fork/branch https://github.com/jdstapleton/checkstyle/commit/return-multiline-checks that has the code integrated into it.","open","","jdstapleton","2018-12-29T18:57:21Z","2018-12-30T00:20:13Z"
"","6327","New Check: MultilineStatementSeperation","Describe what you expect in detail.  ``` /var/tmp $ javac SampleBadFile.java  /var/tmp $ cat checkstyle_checks.xml     ...       ...  /var/tmp $ cat SampleBadFile.java public class SampleBadFile {   String someValue;    public String bar() {     this.someValue = System.getenv(""SOME_VALUE"");     if (someValue.isEmpty()) { // violation - need new lines on both sides of the if block       this.someValue = ""Empty"";     }     this.someValue = this.someValue        + ""."";  // violation - need new lines on both sides of this multi-line statement     return this.someValue;   } }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c checkstyle_checks.xml SampleBadFile.java java/com/puppycrawl/tools/checkstyle/api/SampleBadFile.java:11: A multiple line statement must be separated by empty lines. [MultilineStatement] java/com/puppycrawl/tools/checkstyle/api/SampleBadFile.java:14: A multiple line statement must be separated by empty lines. [MultilineStatement] ``` -------------- **MultilineStatementSeperation** - A multiline statement or block, must be preceeded by an empty line.  Optionally allowing a variable definition to be immediately before it  Valid sample: ``` public String foo() {   this.someValue = calculateValue();    if (someValue.isEmpty()) {     this.someValue = ""Empty"";   }    return this.someValue; } ```  Where as this is a sample in violation: ``` public String foo() {   this.someValue = calculateValue();   if (someValue.isEmpty()) { // violation - need new lines on both sides of the if block     this.someValue = ""Empty"";   }   this.someValue = this.someValue      + ""."";  // violation - need new lines on both sides of this multi-line statement   return this.someValue; } ```  This one ended up being pretty complex, and there are many more example violations and proper code for it.  See https://github.com/jdstapleton/checkstyle-ext/commit/master#diff-1e0a44203e6a18b2699778ea4ccb9f37 for more samples.  I started integrating the check into the checkstyle project ... but there are many many violations and would be a bit of work to go through them all, and the maven project has it run over all checks over the existing checkstyle code base.  So I didn't want to do the work for it if the new checks wouldn't be accepted.  So I have https://github.com/jdstapleton/checkstyle-ext which just has the code for the checks and then a fork/branch https://github.com/jdstapleton/checkstyle/commit/return-multiline-checks that has the code integrated into it.","open","","jdstapleton","2018-12-29T21:40:31Z","2018-12-29T22:13:32Z"
"","6142","Exception: cannot initialize module TreeWalker - Unable to instantiate' class","custom_checks.xml ```xml    	 	 	 	  	 	  	 	  	 	  	 	  	 	 		 		 			 		 		 		 		  		 		 			 			 			 		  		 		 			 			 			 		 		 		 		  		 		 			 		 		 		 		  		 		 			 		 	 		 		 			 			 			 		  		                   		                   		                  	           		 		 			 		  		 		 			 		 		 		 		 			 		 		 		 		  		 		 		 		 		 		 		 		  		 		 			 			 			 			 			 		 		 		 		 			 		 		 		 		 		 		 		 		 		 		 			 		  		 		 			 		  		 		 		 		 		 		 		 		 			 			 			 		 		 		 		 		 		 		 		 		 		 		 		 		 		 		 		 		 		 		 		 		 		  		 		 			 			 			 			 		 		 		 		 			 			 			 			 		 		 		 		 		 		 		  		 		 			 		  		 		 			 		 		 		 		  		 		 			 			 		  		 		 			 			 			 		 		 		 		 		 		 		  		 		  		 		 		 		 		 		          		                   		           		 		 			 		          		                   		          	 		 		 			 		 		 		 		 	 		 		 		 		 		  		                     		                                                      		                   		          			                                		                                 		 		 			 		          		                   		                                         		          			                   		           		           		 		          		                   		                  	                   		           		 		 		 		 		 		 		 		 	 		 		 	 		 		 			 			 		 	 		 		 			 			 		  		 		 			 			 		 		 		          		 		 		 		 		 		 		 		 		 	 		 		 			 			 			 		  		 		 			 			 		 		 		 		 			 		 		 		           		 		  		 		 			 		 		 		 		 		 		 		 		 		 		  		 		 	 		 		 			 		  		 		 			 		 		 		 		 			 		 		 		 		 		 		 		  		 		 		 		 		 		 		 		  		 		 	 		 		 			 			 		 		 		 		 			 			 			 		 	 		 		 			 			 			 		 		 		 		 			 			 			 		 		 		 		 		 		 		 	 		 		 		 		 		 	 		 		 			 		 		 		 		 	 		 		 			 		 		 		 		 		 		 		 		 		 		 	 		 		 			 		 	 		 		 			 			 			 		  		 		 			 			 			 		  		 		 		 		 		 		 		 		 		 		 		 			 		 		 		 		 		 		 		 		 		 		 		 		 		 			 			 			 			 			 		  		 		 			 			 			 		 	  ```  Stack trace  ```java [ERROR] Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:3.0.0:check (default-cli) on project gitlab-ci-test: Failed during checkstyle configuration: cannot initialize module TreeWalker - Unable to instantiate 'InterfaceMemberImpliedModifier' class, it is also not possible to instantiate it as com.puppycrawl.tools.checkstyle.checks.annotation.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.blocks.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.coding.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.design.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.header.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.imports.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.indentation.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.javadoc.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.metrics.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.naming.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.regexp.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.sizes.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.whitespace.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.checks.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.filters.InterfaceMemberImpliedModifier, com.puppycrawl.tools.checkstyle.InterfaceMemberImpliedModifier, InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.annotation.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.blocks.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.coding.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.design.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.header.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.imports.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.indentation.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.javadoc.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.metrics.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.naming.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.regexp.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.sizes.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.whitespace.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.checks.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.filters.InterfaceMemberImpliedModifierCheck, com.puppycrawl.tools.checkstyle.InterfaceMemberImpliedModifierCheck. Please recheck that class name is specified as canonical name or read how to configure short name usage http://checkstyle.sourceforge.net/config.html#Packages. Please also recheck that provided ClassLoader to Checker is configured correctly. -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException ```  ---------------  When i uncomment any module that is with FIXME comment and execute `mvn checkstyle:check' occurs this error.  This errors occurs in: * InterfaceMemberImpliedModifier * LambdaParameterName * regexpsingleline * SingleSpaceSeparator --------------","closed","","ThomasSousa96","2018-10-17T01:24:33Z","2018-10-18T03:25:31Z"
"","6092","[New check] EmptyBlockCheck","Currently, Checkstyle does not have a policy for empty code blocks. We have ```     /** Prevent instances. */     private CheckUtils() {     } ``` and ```     /** Default constructor.*/     private DetectorOptions() { } ``` Both cases are valid for now. The idea is to create a new check ```  	  ```  For example: ```     /**      * option=BLANK_LINE.      */     public static class BlankLine {      }      /**      * option=INLINE.      */     public static class Inline { }      /**      * option=NEW_LINE.      */     public static class NewLine {     }      /**      * Also option=NEW_LINE, the check LeftCurlyCheck set to the allman style.      */     public static class NewLine     {     } ```  Please share your comments and suggestions.","open","","pbludov","2018-08-26T15:16:35Z","2018-10-14T06:50:19Z"
"","6563","Site files are not schema-valid","Currently the `validate` property of the `maven-site-plugin` is disabled because of a bug in `xml-maven-plugin` that was fixed in `1.0.2`. Since checkstyle in the meantime uses that version, the `validate` could be enabled again. Unfortunately in the long time it was off, some invalid markup made it into the site files.  I'd like to suggest to reenable the validation and fix the invalid parts. In detail this would be: - text directly within `` needs to be wrapped in paragraphs - block tags like `` or `` must not occur within paragraphs, but besides - `` tag does not allow `class` attribute but instead you have to wrap a `` around it and adapt the CSS accordingly to have the wanted effect - Within `` only `` is allowed, not `` like in the release notes, but via CSS placement it can still look the same in the end even with the release date within the section which is semantically cleaner anyway as it belongs to the respective version (this also needs to be changed in the release notes generator template) - Not exactly due to schema-validity, but because the `wrap-content` style needs to be changed anyway I also suggest to change it a tad bit, so that not `white-space: pre-wrap` but `white-space: pre-line` is used.  With the former all whitespace is preserved, but if space gets narrow (too long text, too much zoom) the text is automatically wrapped. With the latter line-breaks are preserved, but leading spaces are stripped from each line. This means, that you can then properly indent the code in the sources or you can have them at column 0 or anywhere in between and it will look the same on the final page so it doesn't matter if someone indents it accidentally for example unlike currently. This also means if you want to have visual indentation on the page, you have to use a non-breaking space as ` `. Another big plus you get which is why I looked into it actually is, that also trailing spaces get removed which looks nicer in the result. ![grafik](https://user-images.githubusercontent.com/325196/54167991-c4c65600-446c-11e9-9e1a-636ad8174c56.png) vs. ![grafik](https://user-images.githubusercontent.com/325196/54167932-947eb780-446c-11e9-8f14-7b92d49a54a4.png) And in the code ![grafik](https://user-images.githubusercontent.com/325196/54168106-41593480-446d-11e9-9662-74e3c1a7a56c.png) vs. ![grafik](https://user-images.githubusercontent.com/325196/54168071-1ec71b80-446d-11e9-90f3-0a36568d214e.png)","closed","miscellaneous,","Vampire","2019-03-12T01:21:01Z","2019-03-16T13:32:24Z"
"","6110","internal improvement: checkstyle should apply checks for vertical whitespace","Currently code reviewers of the checkstyle project have to keep an eye out for inconsistent vertical whitespace (e.g. extra blank lines). This is tiring, error prone, and exactly the sort of thing that checkstyle can solve.  Consider strengthening the checkstyle rules configuration which are applied to checkstyle itself. An example could be to implement the [EmptyLineSeparator](http://checkstyle.sourceforge.net/config_whitespace.html#EmptyLineSeparator).","open","discussion ongoing,","ngeor","2018-09-09T16:04:20Z","2018-09-12T12:45:27Z"
"","6988","Xpath results are not sorted in document order","Current xpath implementation works well (I hope:) ), but I faced one problem,  When you want to access xpath results by index `[index]` and you care about ordering of the results, but results are sorted in alphabetic order. Logically results should ordered as they appear in document  **XML Path Language (XPath)** [link](https://www.w3.org/TR/1999/REC-xpath-19991116/#dt-document-order)  > There is an ordering, document order, defined on all the nodes in the document corresponding to the order in which the first character of the XML representation of each node occurs in the XML representation of the document after expansion of general entities. Thus, the root node will be the first node. Element nodes occur before their children. Thus, document order orders element nodes in order of the occurrence of their start-tag in the XML (after expansion of entities). The attribute nodes and namespace nodes of an element occur before the children of the element. The namespace nodes are defined to occur before the attribute nodes. The relative order of namespace nodes is implementation-dependent. The relative order of attribute nodes is implementation-dependent. Reverse document order is the reverse of document order.  **XSLT 2.0 and XPath 2.0 Programmer's Reference by Michael Kay, page 492**  > The nodes in a sequence can always be sorted into document order. For elements from the same document, document order is the same as the order of the start tags in the original source. In terms of the tree structure, a node is ordered after its preceding siblings, and these are ordered after their parent node.  The following test demonstrates such situation with sorting and indexing  Example ``` /var/tmp $ cat InputXpathMapperAst.java package com.puppycrawl.tools.checkstyle.xpath.xpathmapper;  public class InputXpathMapperAst {      /**      * Returns if current node has children.      * @return if current node has children      */     public void callSomeMethod() {         int variable = 123;         String another = ""HelloWorld"";         String[] array = new String[3];         for (String cycle : array) {          }     }      /**      * Returns if current node has children.      * @return if current node has children      */     public String getSomeMethod() {         return ""HelloWorld"";     } } ``` ``` /var/tmp $ java -jar checkstyle-8.24-SNAPSHOT-all.jar -J InputXpathMapperAst.java ...     |   `--SLIST -> { [9:33]     |       |--VARIABLE_DEF -> VARIABLE_DEF [10:8]     |       |   |--MODIFIERS -> MODIFIERS [10:8]     |       |   |--TYPE -> TYPE [10:8]     |       |   |   `--LITERAL_INT -> int [10:8]     |       |   |--IDENT -> variable [10:12]     |       |   `--ASSIGN -> = [10:21]     |       |       `--EXPR -> EXPR [10:23]     |       |           `--NUM_INT -> 123 [10:23]     |       |--SEMI -> ; [10:26]     |       |--VARIABLE_DEF -> VARIABLE_DEF [11:8]     |       |   |--MODIFIERS -> MODIFIERS [11:8]     |       |   |--TYPE -> TYPE [11:8]     |       |   |   `--IDENT -> String [11:8]     |       |   |--IDENT -> another [11:15]     |       |   `--ASSIGN -> = [11:23]     |       |       `--EXPR -> EXPR [11:25]     |       |           `--STRING_LITERAL -> ""HelloWorld"" [11:25]     |       |--SEMI -> ; [11:37]     |       |--VARIABLE_DEF -> VARIABLE_DEF [12:14]     |       |   |--MODIFIERS -> MODIFIERS [12:14]     |       |   |--TYPE -> TYPE [12:14]     |       |   |   `--ARRAY_DECLARATOR -> [ [12:14]     |       |   |       |--IDENT -> String [12:8]     |       |   |       `--RBRACK -> ] [12:15]     |       |   |--IDENT -> array [12:17]     |       |   `--ASSIGN -> = [12:23]     |       |       `--EXPR -> EXPR [12:25]     |       |           `--LITERAL_NEW -> new [12:25]     |       |               |--IDENT -> String [12:29]     |       |               `--ARRAY_DECLARATOR -> [ [12:35]     |       |                   |--EXPR -> EXPR [12:36]     |       |                   |   `--NUM_INT -> 3 [12:36]     |       |                   `--RBRACK -> ] [12:37]     |       |--SEMI -> ; [12:38]     |       |--LITERAL_FOR -> for [13:8]     |       |   |--LPAREN -> ( [13:12]     |       |   |--FOR_EACH_CLAUSE -> FOR_EACH_CLAUSE [13:13]     |       |   |   |--VARIABLE_DEF -> VARIABLE_DEF [13:13]     |       |   |   |   |--MODIFIERS -> MODIFIERS [13:13]     |       |   |   |   |--TYPE -> TYPE [13:13]     |       |   |   |   |   `--IDENT -> String [13:13]     |       |   |   |   `--IDENT -> cycle [13:20]     |       |   |   |--COLON -> : [13:26]     |       |   |   `--EXPR -> EXPR [13:28]     |       |   |       `--IDENT -> array [13:28]     |       |   |--RPAREN -> ) [13:33]     |       |   `--SLIST -> { [13:35]     |       |       `--RCURLY -> } [15:8]     |       `--RCURLY -> } [16:4] ...  ```  XpathMapperTest ``` @Test public void testOrdering() throws Exception {     final String xpath =         ""(//METHOD_DEF[./IDENT[@text='callSomeMethod']]/SLIST/*)[1]"";     final RootNode rootNode = getRootNode(""InputXpathMapperAst.java"");     final DetailAST[] actual = convertToArray(getXpathItems(xpath, rootNode));     final DetailAST expectedVariableDefNode = getSiblingByType(            rootNode.getUnderlyingNode(), TokenTypes.CLASS_DEF)             .findFirstToken(TokenTypes.OBJBLOCK)             .findFirstToken(TokenTypes.METHOD_DEF)             .findFirstToken(TokenTypes.SLIST)             .getFirstChild();     final DetailAST[] expected = {expectedVariableDefNode};     assertArrayEquals(""Result nodes differ from expected"", expected, actual); } ```  As you can see first result must be `VARIABLE_DEF [10:8]`, because it appears earlier in document But our xpath returns `for [13:8]`, simply because of lexicographic order  I think problem is in [here](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java#L147), maybe this method should be rewritten based on line/column and tree level ```  @Override     public int compareOrder(NodeInfo nodeInfo) {         return getLocalPart().compareTo(nodeInfo.getLocalPart());     } ```  @rnveach @romani","closed","xpath,","timurt","2019-08-17T06:10:59Z","2020-04-18T13:11:00Z"
"","6784","Create integration tests in CI to alarm on breaking compatibility","Create CI build items to prevent case like https://github.com/checkstyle/checkstyle/issues/3417#issuecomment-495998320  We probably can clone samples repo and use just built snapshot version.  As breaking changes are confirmed to be introduced, we will disable such build items till sevntu update.","open","CI,","romani","2019-05-26T20:40:48Z","2019-05-26T20:41:27Z"
"","6477","Documentation of IllegalType","Could you maybe improve a bit the documentation of `IllegalType`?  The only thing it says is ""Checks that particular classes or interfaces are never used. Rationale: Helps reduce coupling on concrete classes."".  But why should one never use a `HashMap` or a `TreeSet` or the other classes in the default list? And if those, why not also `ArrayList`, `ConcurrentHashMap` and so on?","open","approved,","Vampire","2019-02-25T02:15:03Z","2019-11-15T06:59:05Z"
"","6166","IndentationCheck false positive conflict - reports 2 opposite failures","Correcting the indentation level of an array of values being passed as arguments to a method, results in an opposite failure.  Given this config using checkstyle 8.14: ```    	 		 			 		 	  ```  ... and this class: ```  package com.myproject.config; import org.springframework.web.servlet.config.annotation.CorsRegistry; public class CorsConfigMin {     public void addCorsMappings(CorsRegistry reg) {         reg.addMapping(""/**"")             .allowedHeaders(""Origin"", ""x-requested-with"", ""Content-Type"", ""Authorization"", ""Accept"",             ""Access-Control-Request-Method"", ""Access-Control-Request-Headers"");     } } ```  Reports incorrect indentation: ```   ```  BUT ... changing the indentation to 16 characters reports the opposite: ```  ``` It should be possible to correct the indentation failure to the expected level and have the code pass the check. I have reproduced this error in 8.14 and 6.18 (default with Maven plugin).  Java version: 1.8.0_151, vendor: Oracle Corporation","open","indentation,","stephen-masters","2018-10-25T09:38:13Z","2018-10-26T00:09:12Z"
"","6874","Convert JavadocType to extend AbstractJavadocCheck","Convert [JavadocType](https://checkstyle.org/config_javadoc.html#JavadocType) to extend AbstractJavadocCheck instead of AbstractCheck.  *Breaking Compatibility*  Property `tokens` is renamed to `targets`. Property `versionFormat` and `authorFormat` have to take into account blank spaces and new lines at the end of the tag's description that goes until the next tag.","open","javadoc,","rnveach","2019-07-04T23:22:05Z","2019-08-05T22:32:43Z"
"","6283","config: update xwiki to address issue of pull #6266","continuation of https://github.com/checkstyle/checkstyle/pull/6266","closed","","romani","2018-12-13T15:48:22Z","2018-12-14T17:07:54Z"
"","6361","Support additional type bound in TYPECAST","Continuation of #6354   These checks use `TYPECAST` and should be reviewed:  - [ ] AnnotationLocation - [ ] AnnotationOnSameLine - [ ] NoWhitespaceAfter - [ ] WhitespaceAfter - [ ] TypecastParenPad","open","approved,","pbludov","2019-01-10T02:15:35Z","2019-01-15T17:58:48Z"
"","6342","Review javadoc validations of eclipse compiler","continuation of #5060 and #2600  Disabled validations: `org.eclipse.jdt.core.compiler.problem.missingJavadocComments=ignore org.eclipse.jdt.core.compiler.problem.missingJavadocTags=ignore`  Enabling these checks results in 4702 errors for missing javadoc comments in the test code.","closed","","pbludov","2019-01-03T04:23:54Z","2019-01-04T16:42:52Z"
"","6014","Add XDoc SubSection Anchor","Continuation and extension of https://github.com/checkstyle/checkstyle/issues/586 . Add subsection anchor so users and maintainers can link directly to a specific area.  Here is an example on how to enable the anchor: ```` diff --git a/src/site/resources/css/site.css b/src/site/resources/css/site.css index f77781f..dc684f9 100644 --- a/src/site/resources/css/site.css +++ b/src/site/resources/css/site.css @@ -42,7 +42,7 @@    float: right;  }   -h2:hover .anchor { +h2:hover .anchor, h3:hover .anchor {    display: inline-block;  }   diff --git a/src/site/resources/js/anchors.js b/src/site/resources/js/anchors.js index 7c63f7a..aa32147 100644 --- a/src/site/resources/js/anchors.js +++ b/src/site/resources/js/anchors.js @@ -22,6 +22,27 @@              anchor.appendChild(a);              anchorItem.appendChild(anchor);          }); + + +        var anchors = document.getElementsByTagName(""h3""); +        [].forEach.call(anchors, function (anchorItem) { +            var name = anchorItem.parentNode.previousElementSibling.name; +            var link = """" + url + ""#"" + name + """"; + +            var a = document.createElement(""a""); +            a.setAttribute(""href"", link); + +            var image = document.createElement(""img""); +            image.setAttribute(""src"", ""images/anchor.png""); + +            var anchor = document.createElement(""div""); +            anchor.className = ""anchor""; + +            a.appendChild(image); +            anchor.appendChild(a); +            anchorItem.appendChild(anchor); +        });      });  }());   diff --git a/src/xdocs/config_filters.xml b/src/xdocs/config_filters.xml index ebabf42..8e0666e 100644 --- a/src/xdocs/config_filters.xml +++ b/src/xdocs/config_filters.xml @@ -23,7 +23,7 @@               -       +                Since Checkstyle 3.2                      Filter SeverityMatchFilter decides ````  All subsections will need to have this `id` added and ensured it is a combination of the section name and the subsection name. We should have a test to validate this.","closed","miscellaneous,","rnveach","2018-07-08T17:04:04Z","2018-07-13T04:53:04Z"
"","6671","Cannot exclude public scope with JavadocMethod module","checkstyle.xml ```                           	            ``` CheckstyleTest.java ``` package test;  public class CheckstyleTest {  	public void publicMethod() { 		System.out.println(""public method""); 	} 	 	protected void protectedMethod() { 		System.out.println(""protected method""); 	} 	 	void packageMethod() { 		System.out.println(""package method""); 	} 	 	private void privateMethod() { 		System.out.println(""private method""); 	} } ```  Console ``` java -jar checkstyle-8.19-all.jar CheckstyleTest.java -c=checkstyle.xml  Starting audit... Audit done. ```  ---------------  Expected output: ``` Starting audit... [WARN] TestProject\test\CheckstyleTest.java:9:9: Missing a Javadoc comment. [JavadocMethod] [WARN] TestProject\test\CheckstyleTest.java:13:9: Missing a Javadoc comment. [JavadocMethod] [WARN] TestProject\test\CheckstyleTest.java:17:9: Missing a Javadoc comment. [JavadocMethod] Audit done. ```  --------------  Checkstyle seems to ignore the complete check if scope is set to public. Is this a bug?","open","approved,","Lesurglesum","2019-04-16T16:33:28Z","2019-05-19T21:38:44Z"
"","6043","Checkstyle's html report related links are not working","Checkstyle's html report for Guava library(https://checkstyle.org/reports/google-style/guava/) link on the following page, https://checkstyle.org/google_style.html Checkstyle's html report for Open JDK library (javadoc validation)(https://checkstyle.org/reports/javadoc/openjdk8/) link on the following page, https://checkstyle.org/sun_style.html  are not working(404 Error).  To-do: make urls to reference sourseforge location.","closed","miscellaneous,","romani","2018-07-19T15:46:12Z","2018-07-20T05:08:43Z"
"","6048","Possible False Positive for some continuation indents? (checkstyle:com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck)","Checkstyle version: 8.10.1  I'm using Android Studio which has an indent setting called ""Continuation"" which is set to 8 characters. Checkstyle thinks this is OK (so do I):  ``` private String formatTime(long time) { // 4 character indent     final LocalDateTime date = new LocalDateTime(time); // 8 character indent     return String.format(Locale.ROOT, ""%s %02d:%02d"", // 8 character indent             date.toLocalDate(), // 16 character indent, OK             date.toLocalTime().getHourOfDay(),             date.toLocalTime().getMinuteOfHour()         ); } ``` However, Checkstyle does not think that this is OK:  ``` @Override protected int[] getFieldsWithCounters() {  // 4 character indent     return new int[]{R.id.editText_registration_password, // 8 character indent             R.id.editText_registration_passwordRepeat, R.id.editText_registration_email} // 16 character indent, not OK } ```  ""'array initialization' child has incorrect indentation level 16, expected level should be one of the following: 12, 25, 28.""","closed","","alixwar","2018-07-25T08:33:57Z","2018-07-25T11:08:28Z"
"","6266","XWiki checkstyle is not fully executed anymore","Checkstyle setup  changed in XWiki a while ago and since then this build hasn't really validated anything in practice.","closed","","tmortagne","2018-12-10T10:37:27Z","2018-12-13T15:49:11Z"
"","6715","Check empty","Checkstyle is not reporting issues about method parameters with no description in javadoc:  ```     /**      * Converts an OGR feature into a GeoTools one      *      * @param schema      * @param ogrFeature      * @return      * @throws IOException      */     SimpleFeature convertOgrFeature(Object ogrFeature) throws IOException {      } ```  In particular:  - ``schema`` is not a method parameter (it would have been reported if it had a description) - ``ogrFeature`` is, but I would like it to be reported as having a missing description  The configuration for javadoc checks is:  ```                                                     ```  My undrestanding from the ``allowMissingJavadoc`` documentation is that it should ignore methods without a javadoc, but does not say anything about the method itself.","closed","","aaime","2019-05-05T08:06:47Z","2019-05-05T12:30:04Z"
"","6872","CheckStyle still marking lines as magic number","Checkstyle is checking some lines as magic number although they are not.  myFile.java  public abstract class FaceSampleDao {     ...     private static final int AGE_INTERVAL = 9;     private static final int MAX_AGE = 100;     private static final int INCREMENT_AGE = 10;     .... }  checkstyle.xml  ```      ...                                                         ...  ``` Then I use gradlew to checkstyle and I get: ./gradlew checkstyle  Checkstyle violations by severity: [warning:138, error:3]  And if I check the generated .html file: '10' is a magic number. Line 27  Any reason why is it acting like this? Do I need to add something in my XML?","closed","awaiting changes,","raphaelcfernandes","2019-07-03T20:34:19Z","2019-12-12T23:57:28Z"
"","6119","minor: Remove restriction to build master only from .travis.yml","Checkstyle doesn't use a large number of branches besides master and the complications for pull request authors to get their PR branches to build on Travis CI is not worth saving a few builds.  Some Travis CI build task seem to need adjustment, though: https://travis-ci.org/krichter722/checkstyle/builds/428993850","closed","","krichter722","2018-09-15T14:27:20Z","2019-02-26T07:09:24Z"
"","6096","Performance issue with file.lastModified()","Checkstyle checks the file time stamp to avoid checking an unmodified file again. At least on Windows, this can be quite costly. On a project with about 300.000 LOC Yourkit tells me that I spend almost a minute in File.lastModified().  This can be improved by not querying the timestamp as the first cancellation condition in the Checker at https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L277, but only as late as possible. First we should check cancellation by name.","closed","miscellaneous,","Bananeweizen","2018-08-30T10:10:14Z","2018-11-27T14:51:34Z"
"","6814","Error was thrown while processing java file with checkstyle 8.21","Checkstyle 8.20 works with same java file,  8.21 failed to process the file with following exception looks like caused by EmptyPublicCtorInClassCheck, please help to check  Executor.java ``` public interface Executor {      Future submit(String action, Callable task);      default Future submit(String action, Task task) {         return submit(action, () -> {             task.execute();             return null;         });     }      void submit(String action, Task task, Duration delay); } ```  Exception thrown by checkstyle, root cause is ""Found interface com.puppycrawl.tools.checkstyle.api.DetailAST, but class was expected""  ``` Caused by: java.lang.Error: Error was thrown while processing /.../core-ng-project/core-ng/src/main/java/core/framework/async/Executor.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:315)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:220)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.processFiles(CheckstyleAntTask.java:349)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.realExecute(CheckstyleAntTask.java:316)         at com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask.execute(CheckstyleAntTask.java:288)         at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:293)         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)         ... 119 more Caused by: java.lang.IncompatibleClassChangeError: Found interface com.puppycrawl.tools.checkstyle.api.DetailAST, but class was expected         at com.github.sevntu.checkstyle.checks.coding.EmptyPublicCtorInClassCheck.visitToken(EmptyPublicCtorInClassCheck.java:197)         at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:363)         at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:470)         at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:304)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:162)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:85)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:332)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:294)         ... 128 more ```","closed","","neowu","2019-06-12T16:36:52Z","2020-01-08T11:27:36Z"
"","6724","new check: JavadocContentLocationCheck","Checks the location where starts the summary for multi-line javadoc comments.  * Property `location`: `secondLine` for java style, `firstLine` for scala style.  * location=secondLine (default) ``` /**  * OK  */  /** violation  */  /** OK (one-line comments ignored) **/ ```  * location=firstLine ``` /**  * violation  */  /** OK  */  /** OK (one-line comments ignored) **/ ```","closed","new module,","pbludov","2019-05-07T16:42:06Z","2019-11-16T20:01:43Z"
"","6723","new check: LeadingAsteriskAlignCheck","Checks that the leading asterisk on each line is vertically aligned.  * property `align`: `left` for r-shaped comments, `right` for 1-shaped comments  *  align=left (default) ``` /**  * OK (asterisk's column == left asterisk's column from `/**` )    Missing asterisk ignored  ** violation   * violation * violation      * violation  */ ``` *  align=right ``` /**   * OK (asterisk's column == right asterisk's column from `/**` )    Missing asterisk ignored  ** violation  * violation * violation      * violation  */","open","new module,","pbludov","2019-05-07T16:27:20Z","2021-05-06T18:29:06Z"
"","6722","new check: JavadocMissingLeadingAsteriskCheck","Checks that each doc comment line start with the asterisk symbol (`*`)  Rationale: messy comments usually indicates a write-only code. At the very least, they should be arranged.  ``` /**   * OK   */  /**  ** OK  *     violation  **/  /** Some text spawn      multiple lines */      // violation  Even for code blocks: /**  * {@code  *  int foo; // OK     int bar; // violation     }   // violation  */ ```","closed","new module,","pbludov","2019-05-07T16:15:57Z","2020-11-28T13:11:57Z"
"","6702","New check: JavadocAsterisk","Checks that all leading asterisks are present and vertically aligned. ---------------------------------------------------------------------------------- ``` /**  * Some useful information.       // OK *                                 // violation: unaligned asterisk    *                              // violation: unaligned asterisk  **                               // violation: missing asterisk                                   // violation: missing asterisk  **/                              // violation? Perhaps an option? public class TestClass { } ``` Currently, we use different styles:  - c-shaped for [token types](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java#L2486): ```     /**      * The {@code ~} (bitwise complement) operator.      *      * @see Java      * Language Specification, §15.15.5      * @see #EXPR      **/     public static final int BNOT = GeneratedJavaTokenTypes.BNOT; ``` - 1-shaped for [DescendantTokenCheck](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java#L389): ``` /**   * Sets a maximum count for descendants.   * @param maximumNumber the maximum count for descendants.   */ ``` - r-shaped for [the rest](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java#L32): ``` /**  * Contains the constants for all the tokens contained in the Abstract  * Syntax Tree.  */ public final class TokenTypes { ```  Let's start with a simple check to catch mistypes [like this](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java#L36), then we will collect the wishes of the teams and add support for different styles, if it turns out to be useful.","closed","","pbludov","2019-04-28T09:35:54Z","2019-05-19T18:07:31Z"
"","6098","exception in build log from spotbugs","build item: https://travis-ci.org/checkstyle/checkstyle/jobs/417308567#L763 reproducing on local too.  reproducible as `mvn clean compile spotbugs:check`: ``` [INFO] --- spotbugs-maven-plugin:3.1.6:spotbugs (spotbugs) @ checkstyle --- [INFO] Fork Value is true      [java] Picked up _JAVA_OPTIONS: -Xmx2048m -Xms512m      [java] The following errors occurred during analysis:      [java]   Error processing opcode checkcast @ 31 in org.apache.tools.ant.AntClassLoader.initializeClass : (Ljava.lang.Class;)V      [java]     java.lang.IllegalArgumentException: Unknown signature [Ljava/lang/Object; for number 256      [java]       At edu.umd.cs.findbugs.OpcodeStack$Item.(OpcodeStack.java:671)      [java]       At edu.umd.cs.findbugs.OpcodeStack.sawOpcode(OpcodeStack.java:1725)      [java]       At edu.umd.cs.findbugs.bcel.OpcodeStackDetector.afterOpcode(OpcodeStackDetector.java:83)      [java]       At edu.umd.cs.findbugs.visitclass.DismantleBytecode.visit(DismantleBytecode.java:884)      [java]       At edu.umd.cs.findbugs.detect.FieldItemSummary.visit(FieldItemSummary.java:130)      [java]       At edu.umd.cs.findbugs.visitclass.BetterVisitor.visitCode(BetterVisitor.java:218)      [java]       At edu.umd.cs.findbugs.visitclass.PreorderVisitor.visitCode(PreorderVisitor.java:243)      [java]       At edu.umd.cs.findbugs.bcel.OpcodeStackDetector.visitCode(OpcodeStackDetector.java:65)      [java]       At org.apache.bcel.classfile.Code.accept(Code.java:132)      [java]       At edu.umd.cs.findbugs.visitclass.PreorderVisitor.doVisitMethod(PreorderVisitor.java:315)      [java]       At edu.umd.cs.findbugs.visitclass.PreorderVisitor.visitJavaClass(PreorderVisitor.java:403)      [java]       At org.apache.bcel.classfile.JavaClass.accept(JavaClass.java:213)      [java]       At edu.umd.cs.findbugs.BytecodeScanningDetector.visitClassContext(BytecodeScanningDetector.java:38)      [java]       At edu.umd.cs.findbugs.DetectorToDetector2Adapter.visitClass(DetectorToDetector2Adapter.java:76)      [java]       At edu.umd.cs.findbugs.FindBugs2.analyzeApplication(FindBugs2.java:1080)      [java]       At edu.umd.cs.findbugs.FindBugs2.execute(FindBugs2.java:281)      [java]       At edu.umd.cs.findbugs.FindBugs.runMain(FindBugs.java:401)      [java]       At edu.umd.cs.findbugs.FindBugs2.main(FindBugs2.java:1185)      [java]   Error processing opcode checkcast @ 31 in org.apache.tools.ant.AntClassLoader.initializeClass : (Ljava.lang.Class;)V      [java]     java.lang.IllegalArgumentException: Unknown signature [Ljava/lang/Object; for number 256      [java]       At edu.umd.cs.findbugs.OpcodeStack$Item.(OpcodeStack.java:671)      [java]       At edu.umd.cs.findbugs.OpcodeStack.sawOpcode(OpcodeStack.java:1725)      [java]       At edu.umd.cs.findbugs.bcel.OpcodeStackDetector.afterOpcode(OpcodeStackDetector.java:83)      [java]       At edu.umd.cs.findbugs.visitclass.DismantleBytecode.visit(DismantleBytecode.java:884)      [java]       At edu.umd.cs.findbugs.detect.FindNoSideEffectMethods.visit(FindNoSideEffectMethods.java:492)      [java]       At edu.umd.cs.findbugs.visitclass.BetterVisitor.visitCode(BetterVisitor.java:218)      [java]       At edu.umd.cs.findbugs.visitclass.PreorderVisitor.visitCode(PreorderVisitor.java:243)      [java]       At edu.umd.cs.findbugs.bcel.OpcodeStackDetector.visitCode(OpcodeStackDetector.java:65)      [java]       At org.apache.bcel.classfile.Code.accept(Code.java:132)      [java]       At edu.umd.cs.findbugs.visitclass.PreorderVisitor.doVisitMethod(PreorderVisitor.java:315)      [java]       At edu.umd.cs.findbugs.visitclass.PreorderVisitor.visitJavaClass(PreorderVisitor.java:403)      [java]       At org.apache.bcel.classfile.JavaClass.accept(JavaClass.java:213)      [java]       At edu.umd.cs.findbugs.BytecodeScanningDetector.visitClassContext(BytecodeScanningDetector.java:38)      [java]       At edu.umd.cs.findbugs.DetectorToDetector2Adapter.visitClass(DetectorToDetector2Adapter.java:76)      [java]       At edu.umd.cs.findbugs.FindBugs2.analyzeApplication(FindBugs2.java:1080)      [java]       At edu.umd.cs.findbugs.FindBugs2.execute(FindBugs2.java:281)      [java]       At edu.umd.cs.findbugs.FindBugs.runMain(FindBugs.java:401)      [java]       At edu.umd.cs.findbugs.FindBugs2.main(FindBugs2.java:1185) [INFO] Done SpotBugs Analysis.... [INFO]  [INFO]","closed","miscellaneous,","romani","2018-08-30T23:09:04Z","2018-09-09T14:56:24Z"
"","6949","spell checker is failing due to failure to get words file","build failure: https://travis-ci.org/checkstyle/checkstyle/jobs/568596942#L307  ``` Retrieve ./usr/share/dict/linux.words   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100 1271k  100 1271k    0     0   326k      0  0:00:03  0:00:03 --:--:--  326k /usr/bin/unlzma: (stdin): File format not recognized ./.ci/test-spelling-unknown-words.sh failed to extract words  (https://rpmfind.net/linux/fedora /linux/development/rawhide/Everything/aarch64/os/Packages/ w/words-3.0-34.fc31.noarch.rpm  as .ci-temp/words.rpm) (1 0) ```  spellcheker is disabled at https://github.com/checkstyle/checkstyle/pull/6945 , till issue is resolved.  spellcheker works fine on local(ubuntu 16.04)","closed","miscellaneous,","romani","2019-08-07T00:00:27Z","2019-08-08T00:59:26Z"
"","6948","javadoc error in NeedBracesCheck.java","build failure https://travis-ci.org/checkstyle/checkstyle/jobs/568596932#L3215 :  ``` [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time:  06:17 min [INFO] Finished at: 2019-08-06T23:40:17Z [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-site-plugin:3.7.1:site (default-site) on project checkstyle: Error generating maven-javadoc-plugin:3.1.0:javadoc report:  [ERROR] Exit code: 1 - /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/ tools/checkstyle/checks/blocks/NeedBracesCheck.java:137: error: bad use of '>' [ERROR]  * allowedFuture.addCallback(result -> assertEquals(""Invalid response"", [ERROR]                                      ^ [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/ checkstyle/checks/blocks/NeedBracesCheck.java:139: error: bad use of '>' [ERROR]  *   ex -> fail(ex.getMessage())); // OK [ERROR]          ^ [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools /checkstyle/checks/blocks/NeedBracesCheck.java:141: error: bad use of '>' [ERROR]  * allowedFuture.addCallback(result -> { [ERROR]                                      ^ [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/ checkstyle/checks/blocks/NeedBracesCheck.java:145: error: bad use of '>' [ERROR]  *   ex -> fail(ex.getMessage())); [ERROR]          ^ [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/ checkstyle/checks/javadoc/AtclauseOrderCheck.java:44: error: element not closed: ul [ERROR]  *  [ERROR]    ^ [ERROR] ```   errors: ``` [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/ checkstyle/checks/javadoc/AtclauseOrderCheck.java:68: error: unterminated inline tag [ERROR]  * Default value is {@code @author, @deprecated, @exception, @param, @return, [ERROR]                     ^ [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java:69: error: unexpected content [ERROR]  * @see, @serial, @serialData, @serialField, @since, @throws, @version}. [ERROR]    ^ ``` will be fixed in #6947","closed","miscellaneous,","romani","2019-08-06T23:48:35Z","2019-08-07T18:06:33Z"
"","6141","config: bump jgit to 5.1.1.201809181055-r","Broken from https://github.com/checkstyle/checkstyle/pull/6131","closed","","rnveach","2018-10-16T12:03:34Z","2018-10-16T13:23:03Z"
"","6936","CLI: Add short versions for 'executeIgnoredModules' and 'tabWidth'","Because of picocli update at https://github.com/checkstyle/checkstyle/pull/6924 ,  we don't like the new ordering of options being displayed for the CLI, so we have decided to have short names for these options.  `executeIgnoredModules` will have the short name `-E` `tabWidth` will have the short name `-w`","closed","miscellaneous,","rnveach","2019-08-01T23:42:50Z","2019-08-02T01:43:33Z"
"","6403","Slowdown with UnusedImportsCheck","Based on the DebugListener I created in https://github.com/rnveach/checkstyle/commits/more_audits to show how long checkstyle spends executing in various parts during a run, `UnusedImportsCheck` takes the most time to execute of all our Checks. A total of 3.3 seconds during a 33 second run.  ```` Starting audit... ------------------ Run Time: 32.841  ...  Checks: (141) ... UnusedImportsCheck	448037	3.302	0.0	0.271	0.0 ... ```` (columns are total calls, total time in seconds, min time, max time, and average)  When I added custom watches to see where the issue was, it was happening with the `INLINE_TAG_PATTERN` when calling `find()`. https://github.com/checkstyle/checkstyle/blob/a73ff0890c27cbe8affc1a55f2710a231687bd85/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtil.java#L39   The regular expression is bad because it starts with `.*?` and is only doing a `find` and not a match all. When this section is removed the time for the check run drops almost to 0.3.","closed","approved,","rnveach","2019-02-02T16:10:17Z","2019-02-03T07:08:42Z"
"","6022","config: run check goal for jacoco coverage verification","based on problem https://github.com/checkstyle/checkstyle/pull/6016#issuecomment-403696636","closed","","romani","2018-07-10T05:12:39Z","2018-07-10T15:44:45Z"
"","6910","Replace sevntu-checkstyle-maven-plugin with explicit dependency to sevntu-checks","Based on https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/766  `sevntu-checkstyle-maven-plugin` will be removed, `sevntu-checks` dependency should be used instead.","closed","miscellaneous,","rdiachenko","2019-07-17T23:14:22Z","2019-07-19T04:41:53Z"
"","6087","use android sources in CIs for no error rgression testing","based on guidance at https://github.com/checkstyle/checkstyle/issues/5279#issuecomment-411486602  This project (and this branch): https://android.googlesource.com/platform/frameworks/support/+/androidx-master-dev  it uses: https://android.googlesource.com/platform/prebuilts/checkstyle/+/master/android-style.xml (which pulls in default-copyright-check.xml, default-javadoc-checks.xml, etc using xml entity linking. Attention to https://android.googlesource.com/platform/prebuilts/checkstyle/+/master/checkstyle.py#61 if this script is used - looks like only 2 checks are producing errors.  TODO:  create shell command to run clone and validation from command line.","open","miscellaneous,","romani","2018-08-17T20:56:55Z","2018-08-17T20:56:55Z"
"","6373","EqualsAvoidNull: improper frame tracking","Based on discussions in https://github.com/checkstyle/checkstyle/issues/6353 ,  EqualsAvoidNull is not tracking the frames proper for when variables and parameters are declared. It causing random ordering issues on different runs because it sees variables in 2 different frames as wrongly being in the same frame and causing the 2 variables to be picked at random for violation discerning.","closed","approved,","rnveach","2019-01-11T23:24:51Z","2019-01-13T00:17:27Z"
"","6240","SuppressionXpathFilter: rename @text to @firstIdentText at ""query"" attribute","based on agreement at https://github.com/checkstyle/checkstyle/pull/6161#discussion_r238072998  our original naming design of `@text` was a mistake. It suppose to be named `@firstIdentText` and it will never be a problem to understand how to use it. It it will be clear that such attributes are taking value from the same property of AST - getText, but `@firstIdentText` is convenience shortcut over new meaning of  `@text`. Now we have problem even in code with terminology .... the same will be users.  We need to:  rename `@text` to `@firstIdentText` in one issue/pr. It is kind of breaking changes, but it better to make it now, before xpath become primary way of suppression. as second step(#6115), make new `@text` that will work only for current tree node. Ones we do this, all will be clear even without that much of documentation. But we still need to explain why not all nodes have `@text`(in new meaning), but it is ok.  **Migration notes:**  simply rename attribute from `@text` to `@firstIdentText`. If #6115 released in the same release, than there will be exception during filter execution on null value of `@text` on non IDENT nodes, you need just rename `@text` to `@firstIdentText`.","open","breaking compatibility,","romani","2018-12-02T14:50:41Z","2018-12-05T05:20:43Z"
"","6051","minor: added date formatting for release notes","based off of changes in https://github.com/checkstyle/contribution/pull/323","closed","","rnveach","2018-07-28T12:37:10Z","2018-07-30T11:31:01Z"
"","6610","activate new sevntu ForbidCertainMethodCheck","at https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_sevntu_checks.xml Check availbable form 1.33.0 version of extension","closed","approved,","romani","2019-03-25T15:59:51Z","2019-03-25T20:40:27Z"
"","6185","update sources to avoid usage of sourceforge.net URLs","as we are migrating to checkstyle.org - #5601 it is better to reduce amount of files that have link with full url and reference to checkstyle.sourceforge.net if possible, links should be with relative path.  ```  $ ag ""checkstyle.sourceforge.net"" test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java 74:            ""http://checkstyle.sourceforge.net/files/suppressions_none.xml"",  test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilterTest.java 143:                ""http://checkstyle.sourceforge.net/non_existent_suppression.xml""; 173:            ""http://checkstyle.sourceforge.net/files/suppressions_none.xml"",  test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java 376:                attrValue = ""http://checkstyle.sourceforge.net/"" + attribute.getNodeValue();  main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java 624:         *     href=""http://checkstyle.sourceforge.net/writingjavadocchecks.html#Tight-HTML_rules""> 666:         *     href=""http://checkstyle.sourceforge.net/writingjavadocchecks.html#Tight-HTML_rules"">  main/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheck.java 53: * CLASS_DEF, 54: * INTERFACE_DEF, 55: * ENUM_DEF, 56: * ANNOTATION_DEF.  main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java 41: *  ""http://checkstyle.sourceforge.net/reports/google-java-style-20170228.html#s5.3-camel-case""> 78: * CLASS_DEF, 79: * INTERFACE_DEF, 80: * ENUM_DEF, 81: * ANNOTATION_DEF, 82: * ANNOTATION_FIELD_DEF, 83: * PARAMETER_DEF, 84: * VARIABLE_DEF, 85: * METHOD_DEF.  main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheck.java 40: * VARIABLE_DEF, 41: * PARAMETER_DEF, 42: * RESOURCE.  main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java 37: * ""http://checkstyle.sourceforge.net/reports/google-java-style-20170228.html#s4.8.6.1-block-comment-style"">  main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java 53: * CLASS_DEF, 54: * INTERFACE_DEF, 55: * ENUM_DEF, 56: * METHOD_DEF, 57: * CTOR_DEF, 58: * VARIABLE_DEF.  main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java 92:     * @see  143:     * @see  153:     * @see   main/resources/com/puppycrawl/tools/checkstyle/messages_fr.properties 17:  configurer l`utilisation du nom court http://checkstyle.sourceforge.net/config.html\#Packages. \  main/resources/com/puppycrawl/tools/checkstyle/messages_zh.properties 17:   http://checkstyle.sourceforge.net/config.html\#Packages.  \  main/resources/com/puppycrawl/tools/checkstyle/messages_es.properties 19:  a corto http://checkstyle.sourceforge.net/config.html\#Packages. Por favor, vuelva \  main/resources/com/puppycrawl/tools/checkstyle/messages_fi.properties 19:  http://checkstyle.sourceforge.net/config.html\#Packages. Muista myös tarkista, \  main/resources/com/puppycrawl/tools/checkstyle/messages_tr.properties 18:  kullanımını http://checkstyle.sourceforge.net/config.html\#Packages nasıl \  main/resources/com/puppycrawl/tools/checkstyle/messages_de.properties 18:  abgekürzte Namen konfigurieren: http://checkstyle.sourceforge.net/config.html\#Packages. \  main/resources/com/puppycrawl/tools/checkstyle/messages.properties 18:   short name usage http://checkstyle.sourceforge.net/config.html\#Packages. Please also \  main/resources/com/puppycrawl/tools/checkstyle/messages_ja.properties 17:  http://checkstyle.sourceforge.net/config.html\#Packages をお読みください。 \  main/resources/com/puppycrawl/tools/checkstyle/messages_pt.properties 19:  http://checkstyle.sourceforge.net/config.html\#Packages. Por favor, também verifique \  main/resources/sun_checks.xml 37:        http://checkstyle.sourceforge.net/5.x/config.html#Checker  xdocs/cmdline.xml.vm 29:        href=""http://checkstyle.sourceforge.net"">http://checkstyle.sourceforge.net.  xdocs/contributing.xml 120:        Here is how to do it from   xdocs/sun_style.xml 30:                      xdocs/sponsoring.xml 37:","closed","miscellaneous,","romani","2018-10-31T04:42:40Z","2018-11-01T02:12:22Z"
"","6512","Skip JDepend in no-validations and assembly profiles","As far as I understood the `no-validations` and `assembly` Maven profiles, they are intended to skip all validation tasks (and the latter additionally the site generation). When I executed a build with `no-validations` profile I observed that the JDepend tasks are nevertheless run. This change correct this and excludes JDepend validation in said profiles.","closed","","Vampire","2019-03-06T00:34:26Z","2019-03-08T08:44:09Z"
"","6748","doc: fix my name in release notes","as discussed in #6560","closed","","Vampire","2019-05-12T01:23:52Z","2019-05-12T18:35:34Z"
"","6163","Issue #5510: fixes ImportOrder example for IntelliJ IDEA","As discussed in #5510.","closed","","jqno","2018-10-23T07:45:47Z","2018-10-26T00:49:09Z"
"","6916","Upgrade to junit 5","As discussed at https://github.com/checkstyle/checkstyle/pull/6914#issuecomment-514079718,  We should try to upgrade to junit 5. https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4","closed","miscellaneous,","rnveach","2019-07-23T11:44:41Z","2020-10-31T10:34:09Z"
"","6385","Hardcode google tokens in config","As discussed at https://github.com/checkstyle/checkstyle/issues/6381 ,  I think we should remove all default token usage in google's config and hardcode the list of tokens it uses for all checks. This way, if a new default token is added to a check then `AllChecksTest.testAllCheckTokensAreReferencedInGoogleConfigFile`([link](https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java#L369)) should ping it as not being used for google and force us to review it.","closed","easy,","rnveach","2019-01-17T22:09:30Z","2019-12-26T16:54:38Z"
"","6399","Command Line arguments should allow to exclude a file","Ant allows to exclude a specific file.  https://github.com/checkstyle/checkstyle/blob/c5c8c32f999c692605166648900a576c496eb599/config/ant-phase-verify.xml#L142-L148  http://checkstyle.sourceforge.net/cmdline.html#Command_line_usage  >  -e, --exclude excludedDirectory - Directory to exclude from CheckStyle. The directory can be the full, absolute path, or relative to the current path. Multiple excludes are allowed. -x, --exclude-regexp excludedDirectoryPattern - Directory pattern to exclude from CheckStyle. Multiple excludes are allowed.   Both options say to exclude directory, not a file, and the source code agrees with the documentation.  https://github.com/checkstyle/checkstyle/blob/c5c8c32f999c692605166648900a576c496eb599/src/main/java/com/puppycrawl/tools/checkstyle/Main.java#L214-L215  I want to specify a file, because I was checking some things out with running `checkstyle_resources_checks.xml` through the command line and I can't fully reproduce it in the command line because I can't tell it to exclude the files that cause an exception.  UPDATE: exclusion by file is possible by extending of existing CLI argument `-e, --exclude excludedPath - Directory/file to exclude from           CheckStyle. The path can be the full, absolute path, or relative to the current path.`","closed","breaking compatibility,","rnveach","2019-01-30T13:56:10Z","2019-02-25T03:40:46Z"
"","6502","minor: removed unnecessary createChecker for verify method call","Another minor thing I noticed.","closed","","rnveach","2019-03-04T00:31:56Z","2019-03-04T01:56:48Z"
"","6250","config: ignore input files for pitest","Annotation pitest couldn't scan entire package with wildcards because pitest was throwing an entire on some class. See https://github.com/hcoles/pitest/issues/302 . It turns out the issue was pitest was loading our input files and it failed on one of them. The specific file in our case was `InputAnnotationLocationDeprecatedAndCustom$Annotation`.  I changed all pitest profiles to ignore input files when we use a wildcard in test area and to now scan the entire annotation package.","closed","","rnveach","2018-12-06T11:57:56Z","2018-12-06T21:32:06Z"
"","6409","Allow EmptyLineSeparator allowNoEmptyLineBetweenFields to only apply to fields that are on a single line","allowNoEmptyLineBetweenFields on EmptyLineSeparator check allows for having no blank line between fields. The problem is that applies to all fields. I would like to distinguish between fields that fit on a single line and field declarations that span multiple lines (e.g. has an annotation or a long initializer). In my view multi-line field declarations should require the separator.","closed","","dalewking","2019-02-07T15:01:31Z","2019-12-13T00:12:20Z"
"","7000","config: bump commons-beanutils to 1.9.4","all details at https://github.com/checkstyle/checkstyle/pull/6998  it was detected before PR from snyk at https://travis-ci.org/checkstyle/checkstyle/jobs/575015020#L1113","closed","","romani","2019-08-22T16:34:52Z","2019-08-23T15:11:33Z"
"","6424","minor: solved pitest issues with ImportOrderCheck","After examining issues at https://github.com/checkstyle/checkstyle/pull/6421#issuecomment-462543909 ,  I looked into this memory and noticed ImportOrderCheck was using like 8 gigs of memory and 25 minutes to complete pitest. When looking at the report only 1 line said memory error. I changed the code around this mutation and now it completes the 1 check under a minute with no excess memory usage. Test was removed because code changed was directly connected to it.  I don't know if this fixes random issue we have seen in CI. It could be related since probably not all CIs will have huge chunks of memory for usage.  As a side note, this also helps solve https://github.com/checkstyle/checkstyle/issues/3567 as that test was still waiting further review.","closed","miscellaneous,","rnveach","2019-02-14T03:41:24Z","2019-02-15T04:31:27Z"
"","6614","Issue #6367: Improve pitest coverage for RightCurly","address one survival of #6367","closed","","fzdy1914","2019-03-26T15:00:49Z","2019-04-01T04:49:54Z"
"","6483","minor: expanded PackageObjectFactory test for invalid classes","Add test created at https://github.com/checkstyle/checkstyle/pull/6435#issuecomment-464937668 but couldn't add because of powermock interference.","closed","","rnveach","2019-02-25T22:06:09Z","2019-03-01T12:01:33Z"
"","6914","Issue #6903: Ignore JUnit TempDir annotation in VisibilityModifierCheck","Add JUnit TempDir to the list of annotations that lead to ignoring a field in VisibilityModifierCheck. @TempDir uses field injection like JUnit @Rule, therefore the user cannot make the field less accessible.  Also improve the documentation to explicitly mention the use case of field injection for the annotation ignore option of VisibilityModifierCheck.  There is no unit test, since I did not understand how to add the necessary JUnit 5 dependency to a test input file (InputVisibilityModifier*) without breaking the JUnit version of the checkstyle tests at the same time.","closed","discussion ongoing,","Bananeweizen","2019-07-22T05:15:39Z","2019-07-31T21:06:06Z"
"","6135","Replacement for DoubleCheckedLocking check","According to this discussion on Stackoverflow https://stackoverflow.com/questions/13479021/double-checked-locking-disappeared-from-checkstyle-why, the DoubleCheckedLocking check was removed from CheckStyle because of the adoption of Java 1.5+. However, the same discussion suggests the bug is still possible, just less likely in Java 1.5+. I wonder whether the check should be updated and restored in CheckStyle?","closed","","VaughanJackson","2018-10-06T12:17:15Z","2019-09-25T04:26:30Z"
"","6232","Loading config.xml from classpath doesn't work properly","According to [the Command Line Usage documentation](http://checkstyle.sourceforge.net/cmdline.html), it should be possible to load `config.xml` from classpath using the same `-c` option as when loading it from file directly. This is a nice feature, and I'd like to exploit it for all my projects, except that it doesn't work properly.  ### Steps to reproduce:  1. Assume a standard Maven project structure with sources, resources, and test sources. 2. Define a Checkstyle config file `src/main/java/resources/my_checks.xml`: ```    ``` 3. Define a unit test `src/test/java/CheckstyleTest.java`: ``` import java.io.File; import java.io.FileOutputStream;  import org.junit.Test;  public class CheckstyleTest {  	@Test 	public void loadConfigFromClasspath() throws Throwable { 		String configurationResource = ""my_checks.xml""; 		String javaSource = ""class MyClass {}""; 		File javaSourceFile = File.createTempFile(""MyClass"", "".java""); 		try (FileOutputStream out = new FileOutputStream(javaSourceFile)) { 			out.write(javaSource.getBytes(""UTF-8"")); 		} 		com.puppycrawl.tools.checkstyle.Main.main(""-c"", configurationResource, javaSourceFile.getCanonicalPath()); 	} } ``` 4. Run the test.   * *Expected:* test is green.   * *Actual:* test fails with ""Could not find config XML file 'my_checks.xml'."", ""Process finished with exit code 255"".  ### Root cause  The root cause is a bug in the method `com.puppycrawl.tools.checkstyle.utils.CommonUtil.getUriByFilename`, line 286 in version 8.14:  ``` URL configUrl = CommonUtil.class.getResource(filename); ```  That call loads `filename` relative to the package of `CommonUtil`, which is `com/puppycrawl/tools/checkstyle/utils`. I can hardly imagine this is the intent, it would make much more sense to load it relative to the ""root"" of the classpath. The fix is very easy (and I hope will be included in the one of the next versions of Checkstyle soon):  ``` URL configUrl = CommonUtil.class.getClassLoader().getResource(filename); ```  ### Workaround  Now that we know the root cause, it's easy to come up with a workaround.  The first workaround is to use an absolute (resource) path to load the resource in my test: ``` 		String configurationResource = ""/my_checks.xml""; ``` This forces the class loader to look in the root of the classpath. It's not so elegant, but I can live with it.  The second workaround is to move `src/main/resources/my_checks.xml` to `src/main/resources/com/puppycrawl/tools/checkstyle/utils/my_checks.xml`, which is not so elegant either.","closed","approved,","peterdemaeyer","2018-11-25T13:31:15Z","2019-06-07T01:08:58Z"
"","6474","Disable loading external DTDs by default, create system property to activate it","Ability to load external DTDs is considered as security issue, especially if DTDs are not hosted on `https` hosting. Checkstyle used to rely on remote DTD files previously so such ability was enabled by default. From 8.11 version checkstyle do not rely on remove DTDs if you use standard config, with standard DTDs.  UPGRADE INSTRUCTIONS: Users still can activate not very secure behavior by system property `checkstyle.enableExternalDtdLoad`, so simply make your CLI execution like `java -Dcheckstyle.enableExternalDtdLoad=true -jar ......`. Or activate system property by any other way in your checkstyle execution.  ATTENTION: user on old versions of checkstyle that reference to DTD files `http` (not secure) hosting on sourceforge.net will be forced to upgrade to at least to `https` versions of DTD files. Removal of DTDs on `http` hosting will be done in scope of -  #6478.","closed","breaking compatibility,","romani","2019-02-24T15:42:58Z","2019-04-24T00:25:29Z"
"","6330","Update eclipse compiler to R10","A new version of the Eclipse compiler was recently [released](https://www.eclipse.org/eclipse/news/4.10/jdt.php)  One bug (class definition without package) was fixed, a new one [introduced](https://bugs.eclipse.org/bugs/show_bug.cgi?id=543090)  Also, is brings full support for java 11 syntax.","closed","miscellaneous,","pbludov","2018-12-30T07:50:49Z","2019-01-05T06:35:27Z"
"","6491","Wrong JavaDoc example for NestedForDepthCheck","`NestedForDepthCheck` JavaDoc shows an example for `CatchWithLostStackCheck`  https://github.com/checkstyle/checkstyle/blob/a73ff0890c27cbe8affc1a55f2710a231687bd85/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheck.java#L37","closed","miscellaneous,","Vampire","2019-02-27T21:59:41Z","2019-03-16T13:05:47Z"
"","6873","Convert JavadocMethodCheck to be based on AbstractJavadocCheck (AST based)","`JavadocMethodCheck` should be converted to an `AbstractJavadocCheck`. It might be good to split Check in multiple to not let it do too much.","open","approved,","rnveach","2019-07-04T22:48:17Z","2021-05-11T07:44:06Z"
"","6124","What's the Specific rule of  Magic Numer ？","`I found that the rule of magic number mistook some situation like Array subscript. ex.int [] arr = new int[5];     arr[4] =3; ""5"" in first line and 4 in second line are both mistaken as magic numbers. I want to improve the rule to eliminate such situation. But I was confused by the realization of this rule . Can you give me more concrete explanation ？","closed","","zjufirice","2018-09-18T09:19:40Z","2018-09-25T15:23:27Z"
"","6127","EqualsHashCode is overly strict","`EqualsHashCode` is overly strict. It fails not only when there is an `equals` without `hashCode`, but also when there is a `hashCode` without `equals`. The former is a bug, the latter not necessarily. This behavior has changed somewhere in between Checkstyle 6.18 and 8.12.  Expected: a way to configure Checkstyle to fail on `equals` without `hashCode`, but _not_ on `hashCode` without `equals`. A potential solution could be to extend `EqualsHashCode` with an additional property.  Workaround: add `equals` methods on all affected classes and delegate the call to `super.equals`. That makes Checkstyle happy again, but introduces useless code.  Template for bug reporting:  ```bash peter@pangolin:~/IdeaProjects/Checkstyle#6127$ javac src/HashCodeNoEquals.java  peter@pangolin:~/IdeaProjects/Checkstyle#6127$ cat config.xml                         peter@pangolin:~/IdeaProjects/Checkstyle#6127$ cat src/HashCodeNoEquals.java  public class HashCodeNoEquals {      @Override     public int hashCode() {         return super.hashCode();     } }  $ java $RUN_LOCALE -jar checkstyle-8.13-all.jar -c config.xml src/HashCodeNoEquals.java  Starting audit... [ERROR] /home/.../HashCodeNoEquals.java:6:5: Definition of 'hashCode()' without corresponding definition of 'equals()'. [EqualsHashCode] Audit done. Checkstyle ends with 1 errors. ```  Expected: an option to configure the check to report a violation for `hashCode` without equals but not for equals without `hashCode`.  Actual: no such option, the workaround is to use suppressions as suggested by @rnveach (I didn't test it) or just implement `hashCode` everywhere with a silly `super.hashCode`.","closed","","peterdemaeyer","2018-09-21T12:28:37Z","2018-11-18T00:26:32Z"
"","6349","minor: rewrite cpio handling to support bsd","`cpio ... --to-stdout` is a gnu-ism which of course doesn't work on *bsd (esp macOS).  This doesn't matter much when one uses Travis on Linux, but I develop on macOS... so it's helpful for the script to work there.  I've looked at `pax` and `cpio` and `tar`, and none of them seem to support pipe-to-pipe extraction (which is really disappointing).  This approach seems to work ""well enough"" for this one rpm, and I suspect it's fairly close to correct based on https://www.mkssoftware.com/docs/man4/cpio.4.asp namely, each row has a `0707` magic field at the start, and there's a `\0` delimiter.  (mks is wrong about the magic field, it's only 0707...)","closed","","jsoref","2019-01-06T10:33:24Z","2019-01-10T16:45:51Z"
"","6837","Java parser bug","```java try (SomeOtherClass.STATIC_FIELD) { ```  This line leads to such an error:  ``` [ant:checkstyle] /home/boris/project/SomeFile.java:40:44: expecting IDENT, found ')' ```","closed","antlr,","boris-petrov","2019-06-19T16:07:25Z","2019-06-20T06:42:29Z"
"","6391","Regression in 8.3: Extra separation in import group","```java package p;  import static foo.Bar.baz;  import foo.Bar;  class T {    void main() {     baz();     new Bar();   } } ```  ```xml                                                                            ```  ``` $ java -jar checkstyle-8.2-all.jar -c config.xml T.java Starting audit... Audit done. $ java -jar checkstyle-8.3-all.jar -c config.xml T.java Starting audit... [WARN] /tmp/tmp.CPAqh4ySLj/T.java:5: Extra separation in import group before 'foo.Bar' [ImportOrder] Audit done. ```  The 'Extra separation in import group' error is unwanted. Explicitly setting `` suppresses the warning.  Was changing the default behaviour here deliberate?","closed","","cushon","2019-01-23T17:30:47Z","2019-01-28T19:02:39Z"
"","6303","ImportOrder reports incorrect errors for redundant imports","```java import java.util.List; import java.util.List;  public class T {   private List l; } ```  ```xml                      ``` ## Actual  ```shell java -jar checkstyle-8.15-all.jar -c config.xml T.java Starting audit... [ERROR] T.java:2: Wrong order for 'java.util.List' import. [ImportOrder] [ERROR] T.java:2:1: Duplicate import to line 1 - java.util.List. [RedundantImport] Audit done. Checkstyle ends with 2 errors. ```  ## Expected  The `ImportOrder` finding is incorrect: the two imports of `java.util.List` are identical, and are not out of order. The real issue is the one reported by `RedundantImport`.","closed","approved,","cushon","2018-12-20T02:15:13Z","2018-12-22T13:16:00Z"
"","6381","Incorrect warning for empty lambda bodies with google_checks.xml","```java class T {   Runnable runnable = () -> {}; } ```  ``` $ java -jar checkstyle-8.16-all.jar -c google_checks.xml T.java Starting audit... [WARN] /tmp/T.java:2:29: WhitespaceAround: '{' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3) [WhitespaceAround] [WARN] /tmp/T.java:2:30: WhitespaceAround: '}' is not preceded with whitespace. [WhitespaceAround] Audit done. ```  I used `google_checks.xml` from: https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/google_checks.xml  Both warnings are incorrect.   The first warning cites [§4.1.3](https://google.github.io/styleguide/javaguide.html#s4.1.3-braces-empty-blocks), but the style guide clarifies that 'multi-block statement' refers to `if/else` or `try/catch/finally`. An empty lambda like `() -> {}` doesn't contain multiple blocks (and also isn't a statement).  The style guide provides a complete list of places where horizontal whitespace is required in [§4.6.2](https://google.github.io/styleguide/javaguide.html#s4.6.2-horizontal-whitespace) and does not mention lambda bodies.","closed","easy,","cushon","2019-01-16T15:22:02Z","2019-02-20T13:27:39Z"
"","6868","Upgrade PMD to 6.17.0","```` [INFO] --- maven-pmd-plugin:3.11.0:check (default) @ checkstyle --- [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Checker:70 Rule:ProperLogger Priority:3 Logger should be defined private static final and have the correct class. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.DefaultLogger:125 Rule:CloseResource Priority:3 Ensure that resources like this OutputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.DefaultLogger:132 Rule:CloseResource Priority:3 Ensure that resources like this OutputStreamWriter object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.DefaultLogger:187 Rule:CloseResource Priority:3 Ensure that resources like this OutputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.DefaultLogger:194 Rule:CloseResource Priority:3 Ensure that resources like this OutputStreamWriter object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.JavaParser:79 Rule:CloseResource Priority:3 Ensure that resources like this StringReader object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.Main:472 Rule:CloseResource Priority:3 Ensure that resources like this OutputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PropertyCacheFile:148 Rule:CloseResource Priority:3 Ensure that resources like this OutputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.PropertyCacheFile:248 Rule:CloseResource Priority:3 Ensure that resources like this OutputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.XmlLoader:96 Rule:CloseResource Priority:3 Ensure that resources like this InputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask:468 Rule:CloseResource Priority:3 Ensure that resources like this LogOutputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask:469 Rule:CloseResource Priority:3 Ensure that resources like this LogOutputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask$Formatter:684 Rule:CloseResource Priority:3 Ensure that resources like this OutputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.TranslationCheck:165 Rule:ProperLogger Priority:3 Logger should be defined private static final and have the correct class. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.XpathFileGeneratorAuditListenerTest:298 Rule:CloseResource Priority:3 Ensure that resources like this TestByteArrayOutputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheckTest:202 Rule:CloseResource Priority:3 Ensure that resources like this  object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.internal.powermock.DefaultLoggerPowerTest:44 Rule:CloseResource Priority:3 Ensure that resources like this OutputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.internal.powermock.ImportControlLoaderPowerTest:49 Rule:CloseResource Priority:3 Ensure that resources like this InputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.internal.powermock.ImportControlLoaderPowerTest:74 Rule:CloseResource Priority:3 Ensure that resources like this InputStream object are closed after use. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.utils.CommonUtilTest:263 Rule:CloseResource Priority:3 Ensure that resources like this TestCloseable object are closed after use. [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 52.865 s (Wall Clock) [INFO] Finished at: 2019-07-03T13:23:52-04:00 [INFO] Final Memory: 92M/247M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-pmd-plugin:3.11.0:check (default) on project checkstyle: You have 20 PMD violations. For more details see: M:\checkstyleWorkspace\checkstyle\target\pmd.xml -> [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-pmd-plugin:3.11.0:check (default) on project checkstyle: You have 20 PMD violations. For more details see: M:\checkstyleWorkspace\checkstyle\target\pmd.xml ````","closed","miscellaneous,","rnveach","2019-07-03T17:27:19Z","2019-08-23T20:59:28Z"
"","6924","config: upgrade picocli to 4.0.0","```` [Console output redirected to file:M:\output.txt] Usage: checkstyle [-dEghjJtTV] [-c=] [-C=] [-f=]                   [-o=] [-p=] [-s=]                   [-w=] [-W=] [-e=]...                   [-x=]... ... Checkstyle verifies that the specified source code files adhere to the specified rules. By default errors are reported to standard out in plain format. Checkstyle requires a configuration XML file that configures the checks to apply.       ...            One or more source files to verify   -c=    Sets the check configuration file to use.   -C, --checker-threads-number=                             (experimental) The number of Checker threads (must be greater than zero)   -d, --debug               Print all debug logging of CheckStyle utility   -e, --exclude=   Directory/File path to exclude from CheckStyle   -E, --executeIgnoredModules                             Allows ignored modules to be run.   -f=               Sets the output format. Valid values: xml, plain. Defaults to plain   -g, --generate-xpath-suppression                             Generates to output a suppression.xml to use to suppress all violations                               from user's config   -h, --help                Show this help message and exit.   -j, --javadocTree         Print Parse tree of the Javadoc comment   -J, --treeWithJavadoc     Print full Abstract Syntax Tree of the file   -o=           Sets the output file. Defaults to stdout   -p=       Loads the properties file   -s=                             Print xpath suppressions at the file's line and column position.                               Argument is the line and column number (separated by a : ) in the                               file that the suppression should be generated for   -t, --tree                Print Abstract Syntax Tree(AST) of the file   -T, --treeWithComments    Print Abstract Syntax Tree(AST) of the file including comments   -V, --version             Print version information and exit.   -w, --tabWidth= Sets the length of the tab character. Used only with ""-s"" option.                               Default value is 8   -W, --tree-walker-threads-number=                             (experimental) The number of TreeWalker threads (must be greater than                               zero)   -x, --exclude-regexp=                             Regular expression of directory/file to exclude from CheckStyle ````","closed","","rnveach","2019-07-26T23:13:23Z","2019-08-05T07:54:00Z"
"","6340","Translation doesn't obey no halt on exception and doesn't show path to bad file","```` $ cat TestConfig.xml                                                   $ java -Xmx3024m -jar /home/ricky/opensource/checkstyle/target/checkstyle-8.17-SNAPSHOT-all.jar -c TestConfig.xml -f xml -o results.xml /home/ricky/regression_repositories/openjdk7 -e /home/ricky/regression_repositories/openjdk7/.git Exception in thread ""main"" java.lang.IllegalArgumentException: Malformed \uxxxx encoding.     at java.util.Properties.loadConvert(Properties.java:574)     at java.util.Properties.load0(Properties.java:391)     at java.util.Properties.load(Properties.java:341)     at com.puppycrawl.tools.checkstyle.checks.TranslationCheck.getTranslationKeys(TranslationCheck.java:481)     at com.puppycrawl.tools.checkstyle.checks.TranslationCheck.checkTranslationKeys(TranslationCheck.java:442)     at com.puppycrawl.tools.checkstyle.checks.TranslationCheck.finishProcessing(TranslationCheck.java:255)     at java.util.ArrayList.forEach(ArrayList.java:1255)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:390)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:313)     at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:180)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:119) ````  I am expecting the exception not to stop Checkstyle execution and it to run to completion. I am also expecting Checkstyle to tell me which file caused the exception.","closed","approved,","rnveach","2019-01-02T17:39:41Z","2019-01-06T20:46:26Z"
"","6125","OneStatementPerLine: false-positive on try-with-resource when objects just referenced","```` $ cat TestClass.java public class TestClass {     void method() {         var stream1 = new PipedOutputStream();         var stream2 = new PipedOutputStream();         try (stream1; stream2; var stream3 = new PipedOutputStream()) {         }     } }  $ cat TestConfig.xml                               $ java -jar checkstyle-8.12-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:5:30: Only one statement per line allowed. [OneStatementPerLine] Audit done. Checkstyle ends with 1 errors. ````   This gives a `OneStatementPerLine` warning which is wrong I think. Checkstyle 8.12, Java 10.0.2.","closed","approved,","boris-petrov","2018-09-20T07:56:13Z","2019-05-16T13:45:41Z"
"","6375","FinalLocalVariable: NPE with PARAMETER_DEF on methods of inner classes","```` $ cat TestClass.java package com.puppycrawl.tools.checkstyle.checks.coding.requirethis;  public class InputRequireThisReceiver {     public void foo4(InputRequireThisReceiver this) {}      private class Inner {         public Inner(InputRequireThisReceiver InputRequireThisReceiver.this) {}     } }   $ cat TestConfig.xml                                        $ java -jar checkstyle-8.16-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:1: Got an exception - java.lang.NullPointerException     at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.insertParameter(FinalLocalVariableCheck.java:465)     at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.visitToken(FinalLocalVariableCheck.java:209)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:390)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:501)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:330)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:183)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:319)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:217)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:390)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:313)     at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:180)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:119) [Checker] Audit done. Checkstyle ends with 1 errors. ````","closed","approved,","rnveach","2019-01-12T11:09:19Z","2019-01-27T19:15:41Z"
"","6377","FinalLocalVariable: IllegalStateException","```` $ cat TestClass.java /*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the ""License""); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.elasticsearch.search.aggregations.metrics.scripted;  import org.elasticsearch.common.io.stream.StreamInput; import org.elasticsearch.common.io.stream.StreamOutput; import org.elasticsearch.common.xcontent.XContentBuilder; import org.elasticsearch.script.ExecutableScript; import org.elasticsearch.script.ScriptService.ScriptType; import org.elasticsearch.search.aggregations.AggregationStreams; import org.elasticsearch.search.aggregations.InternalAggregation; import org.elasticsearch.search.aggregations.metrics.InternalMetricsAggregation;  import java.io.IOException; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class InternalScriptedMetric extends InternalMetricsAggregation implements ScriptedMetric {      public final static Type TYPE = new Type(""scripted_metric"");      public final static AggregationStreams.Stream STREAM = new AggregationStreams.Stream() {         @Override         public InternalScriptedMetric readResult(StreamInput in) throws IOException {             InternalScriptedMetric result = new InternalScriptedMetric();             result.readFrom(in);             return result;         }     };      public static void registerStreams() {         AggregationStreams.registerStream(STREAM, TYPE.stream());     }      private String scriptLang;     private ScriptType scriptType;     private String reduceScript;     private Map reduceParams;     private Object aggregation;      private InternalScriptedMetric() {     }      private InternalScriptedMetric(String name) {         super(name);     }      public InternalScriptedMetric(String name, Object aggregation, String scriptLang, ScriptType scriptType, String reduceScript,             Map reduceParams) {         this(name);         this.aggregation = aggregation;         this.scriptType = scriptType;         this.reduceScript = reduceScript;         this.reduceParams = reduceParams;         this.scriptLang = scriptLang;     }      @Override     public Object aggregation() {         return aggregation;     }      @Override     public InternalAggregation reduce(ReduceContext reduceContext) {         List aggregationObjects = new ArrayList();         for (InternalAggregation aggregation : reduceContext.aggregations()) {             InternalScriptedMetric mapReduceAggregation = (InternalScriptedMetric) aggregation;             aggregationObjects.add(mapReduceAggregation.aggregation());         }         InternalScriptedMetric firstAggregation = ((InternalScriptedMetric) reduceContext.aggregations().get(0));         Object aggregation;         if (firstAggregation.reduceScript != null) {             Map params;             if (firstAggregation.reduceParams != null) {                 params = new HashMap(firstAggregation.reduceParams);             } else {                 params = new HashMap();             }             params.put(""_aggs"", aggregationObjects);             ExecutableScript script = reduceContext.scriptService().executable(firstAggregation.scriptLang, firstAggregation.reduceScript,                     firstAggregation.scriptType, params);             aggregation = script.run();         } else {             aggregation = aggregationObjects;         }         return new InternalScriptedMetric(firstAggregation.getName(), aggregation, firstAggregation.scriptLang, firstAggregation.scriptType,                 firstAggregation.reduceScript, firstAggregation.reduceParams);      }      @Override     public Type type() {         return TYPE;     }      @Override     public void readFrom(StreamInput in) throws IOException {         name = in.readString();         scriptLang = in.readOptionalString();         scriptType = ScriptType.readFrom(in);         reduceScript = in.readOptionalString();         reduceParams = in.readMap();         aggregation = in.readGenericValue();     }      @Override     public void writeTo(StreamOutput out) throws IOException {         out.writeString(name);         out.writeOptionalString(scriptLang);         ScriptType.writeTo(scriptType, out);         out.writeOptionalString(reduceScript);         out.writeMap(reduceParams);         out.writeGenericValue(aggregation);     }      @Override     public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {         return builder.field(""value"", aggregation);     }  }  $ cat TestConfig.xml                               $ java -jar checkstyle-8.16-all.jar -c TestConfig.xml TestClass.java Starting audit... com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing TestClass.java     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:298)     at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:217)     at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:390)     at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:313)     at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:180)     at com.puppycrawl.tools.checkstyle.Main.main(Main.java:119) Caused by: java.lang.IllegalStateException     at java.util.ArrayDeque$DeqIterator.remove(ArrayDeque.java:656)     at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.updateUninitializedVariables(FinalLocalVariableCheck.java:389)     at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.updateAllUninitializedVariables(FinalLocalVariableCheck.java:364)     at com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck.leaveToken(FinalLocalVariableCheck.java:264)     at com.puppycrawl.tools.checkstyle.TreeWalker.notifyLeave(TreeWalker.java:406)     at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:504)     at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:330)     at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:183)     at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81)     at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:319)     at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)     ... 5 more Checkstyle ends with 1 errors. ````","closed","approved,","rnveach","2019-01-13T02:29:02Z","2019-02-15T01:29:56Z"
"","6841","Caching file has entry for non-existent suppressions.xml","```#Thu Jun 20 03:32:04 UTC 2019 module-resource*?\:file\:/data/data/com.termux/files/home/LearnJava/Networks/java_regexp.header=C3EDE72E0043C9DB230B7B7E05AD2D223D7369E1 module-resource*?\:suppressions-xpath.xml=43845B65C4CB195740C2EB0E1F364C896E983118 /data/data/com.termux/files/home/LearnJava/Networks/networking/EncoderTest.java=1561001507747 /data/data/com.termux/files/home/LearnJava/Networks/networking/SpamCheck.java=1561001507657 /data/data/com.termux/files/home/LearnJava/Networks/networking/ContentGetter.java=1561001507827 /data/data/com.termux/files/home/LearnJava/Networks/networking/EncodingException.java=1560904753236 /data/data/com.termux/files/home/LearnJava/Networks/com/javacodegeeks/snippets/core/package-info.java=1560660129887 /data/data/com.termux/files/home/LearnJava/Networks/networking/IBiblioAliases.java=1561001507677 /data/data/com.termux/files/home/LearnJava/Networks/networking/EncodingAwareSourceViewer.java=1561001507997 /data/data/com.termux/files/home/LearnJava/Networks/networking/ReverseTest.java=1561001507547 /data/data/com.termux/files/home/LearnJava/Networks/networking/InterfaceLister.java=1561001507717 /data/data/com.termux/files/home/LearnJava/Networks/networking/QueryString.java=1561001507947 /data/data/com.termux/files/home/LearnJava/Networks/networking/package-info.java=1560421179634 /data/data/com.termux/files/home/LearnJava/Networks/networking/SourceViewer2.java=1561001507977 /data/data/com.termux/files/home/LearnJava/Networks/networking/LocalProxySelector.java=1561001507787 /data/data/com.termux/files/home/LearnJava/Networks/networking/OReillyByName.java=1561001507527 configuration*?=49F00D2B45BB8426140F5D0492D440689D779C3 /data/data/com.termux/files/home/LearnJava/Networks/networking/URLEquality.java=1561001507927 /data/data/com.termux/files/home/LearnJava/Networks/networking/AddressTests.java=1561001507567 /data/data/com.termux/files/home/LearnJava/Networks/networking/GoogleSearch.java=1561001507847 module-resource*?\:suppressions.xml=207DD88262E4D77234449B0BC16D6B90BD0AA7B7 /data/data/com.termux/files/home/LearnJava/Networks/networking/SourceViewer.java=1561001507697 /data/data/com.termux/files/home/LearnJava/Networks/networking/URLSplitter.java=1561001507907 /data/data/com.termux/files/home/LearnJava/Networks/networking/LookupTask.java=1561001507637 /data/data/com.termux/files/home/LearnJava/Networks/networking/NoGovernmentCookies.java=1561001507807 /data/data/com.termux/files/home/LearnJava/Networks/networking/ProtocolTester.java=1561001507887 /data/data/com.termux/files/home/LearnJava/Networks/networking/MyAddress.java=1561001507497 /data/data/com.termux/files/home/LearnJava/Networks/networking/PooledWebLog.java=1561001507867 /data/data/com.termux/files/home/LearnJava/Networks/networking/WebLog.java=1561001507617 /data/data/com.termux/files/home/LearnJava/Networks/networking/IPCharacteristics.java=1561001507767 /data/data/com.termux/files/home/LearnJava/Networks/com/javacodegeeks/snippets/core/ProtectedUrlAccess.java=1561001508037 ```  ---------------  The above is the cache file generated   for my project Networks on my Github repository:  https://github.com/Fernal73/LearnJava.   Configuration: https://github.com/Fernal73/LearnJava/blob/master/csrules.xml  The cache file contains an entry for suppressions.xml but I have never created such a file for this project.   Is this entry deliberate?  There is no entry created for file java.header. The file is empty.  Caching works as expected. This is an efficient bug.   If you intend to clone my repository, you will need Ivy besides Ant installed on your machine. First run the build.xml in the root directory to generate the classpath files and then you can run any individual project's build.xml. -------------","closed","","Fernal73","2019-06-21T00:06:39Z","2020-06-13T15:45:04Z"
"","6200","google_checks.xml does not report ordering and spacing error on import statements","``` ~/projects/test/checkstyle$ javac Test.java   $ cat Test.java  import java.io.BufferedInputStream;  import java.util.Date; import java.util.Scanner;  public class Test {    public static void main(String[] args) {     System.out.println(""Hello World!"");   } }   $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" $ java $RUN_LOCALE -jar checkstyle-8.14-all.jar -c /google_checks.xml Test.java  Starting audit... Audit done.  ```  ---------------  Ordering and spacing section of the [Google Java Style Guide](http://google.github.io/styleguide/javaguide.html#s3.3.3-import-ordering-and-spacing) says:  > If there are both static and non-static imports, a single blank line separates the two blocks. There are no other blank lines between import statements.  When analysing this class with [google_checks.xml](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml) the Checkstyle does not report the error regards a blank line between import statements: **Unnecessary empty line inside the non-static imports block**  The issue seems to be related to the [CustomImportOrder ](http://checkstyle.sourceforge.net/config_imports.html#CustomImportOrder)check.","closed","google style,","vimal4david","2018-11-06T12:54:53Z","2020-04-19T14:32:41Z"
"","6790","OneStatementPerLine: add treatTryResourcesAsStatement property","``` ~/checkstyle_test $ cat TestClass.java public class TestClass {     void method() {         try (OutputStream os1 = new Stream(); OutputStream os2 = new Stream()) {         }     } }  ~/checkstyle_test $ cat TestConfig.xml                               ~/checkstyle_test $ java -jar checkstyle-8.20-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done.  ~/checkstyle_test $ java -jar checkstyle-8.21-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] C:\TestClass.java:3:60: Only one statement per line allowed. [OneStatementPerLine] Audit done. Checkstyle ends with 1 errors.  ```  ---------------  It looks like the fix for #6125 made OneStatementPerLine reject multiple resources on the same row.  From https://github.com/checkstyle/checkstyle/issues/6125#issuecomment-492650963: > I am pretty sure there will be bunch of users who disagree. But lets give them a chance to request new feature/property in Check to no treat ""try-with-resources"" expressions as statements at all.  I'm one of those users that disagree and would very much like that option :)","closed","new feature,","snago","2019-05-29T10:25:53Z","2019-07-10T10:55:28Z"
"","6885","Magic Number suppression does not work when space character encountered in Xpath expression","``` package cstests;  public interface TestMagicNumber {    static byte[] getAsciiRotator() {     byte[] rotation = new byte[95 * 2];     for (byte i = ' '; i","closed","","Fernal73","2019-07-09T08:45:22Z","2019-12-02T23:54:16Z"
"","6064","Exception during processing file ArrayClass.java:8:49: expecting IDENT, found 'int'","``` D:\projects\untitled2\src>javac ArrayClass.java D:\projects\untitled2\src>  /var/tmp $ cat config.xml                  /var/tmp $ cat ArrayClass.java import java.lang.annotation.ElementType; import java.lang.annotation.Target;  public class ArrayClass {  	int[][][] i = new @TypeAnnotation(integer = 1) int[0][][];  	@Target({ ElementType.TYPE_USE }) 	@interface TypeAnnotation { 		int integer() default 0; 	} }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c config.xml ArrayClass.java  D:\projects\spoon\src\test\java\spoon\test\arrays\testclasses\ArrayClass.java:8:49: expecting IDENT, found 'int' com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing src\test\java\spoon\test\arrays\testclasses\ArrayClass.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:581)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:472)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:226) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: MismatchedTokenException occurred while parsing file D:\projects\spoon\src\test\java\spoon\test\arrays\testclasses\ArrayClass.java.         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:98)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:180)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Caused by: D:\projects\spoon\src\test\java\spoon\test\arrays\testclasses\ArrayClass.java:10:2: expecting EOF, found 'int'         at antlr.Parser.match(Parser.java:211)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:211)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:92)         ... 8 more Checkstyle ends with 1 errors. PS D:\projects\spoon>  ```  --------------- java -jar .\checkstyle-8.11-all.jar -c .\checkstyle.xml  ArrayClass.java  Checkstyle ended with exception. It should provide list of code style violations D:\projects\spoon\src\test\java\spoon\test\arrays\testclasses\ArrayClass.java:8:49: expecting IDENT, found 'int'  -------","closed","has bounty,","zielint0","2018-08-09T17:57:18Z","2020-03-23T00:02:55Z"
"","6371","ParenPad, WhitespaceAfter and WhitespaceAround inconsistent treating of comments","``` /var/tmp% javac MyClass.java  /var/tmp% cat config.xml                                                                                              /var/tmp% cat MyClass.java                                  package com.example;  import java.util.stream.Stream;  public class MyClass {      public static void main2(String[] args) {// 1         Stream.concat(// 2                 Stream.of(""1""),// 3 // line 9                 Stream.of(""2"")// 4         ).forEach(System.out::println);     }      public static void main(String[] args) { // 1         Stream.concat( // 2 // line 15                 Stream.of(""1""), // 3                 Stream.of(""2"") // 4         ).forEach(System.out::println);     }  }  /var/tmp% RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp% java $RUN_LOCALE -jar checkstyle-8.16-all.jar -c config.xml MyClass.java Starting audit... [ERROR] /var/tmp/MyClass.java:9:31: ',' is not followed by whitespace. [WhitespaceAfter] [ERROR] /var/tmp/MyClass.java:15:22: '(' is followed by whitespace. [ParenPad] Audit done. Checkstyle ends with 2 errors. ```  Default settings of WhitespaceAfter (or WhitespaceAround) require me to put a space between my code and a comment (line 9) but default settings of ParenPad require me to remove a space between my code and a comment (line 15)  ---------------  Default properties of checks should work out of the box and don't force an inconsistent code style.  Either comments should be ignored or one style should be enforced by both rules (i.e., either always space or never space before a comment). I would prefer ignoring comments, as automatic code formatting in IntelliJ does not touch comments.  Either main() or main2() should be completely free of CheckStyle errors when given config is used.","open","","pkubowicz","2019-01-11T11:19:33Z","2019-08-12T13:42:12Z"
"","6065","com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing src\test\resources\noclasspath\A2.java","``` /var/tmp $ javac YOUR_FILE.java Project builds successfully using IntelliJ IDEA/Maven.  /var/tmp $ cat config.xml https://github.com/INRIA/spoon/blob/master/checkstyle.xml                                                                                                                                                                                                                                                                                   /var/tmp $ cat YOUR_FILE.java spoon/test/visibility/testclasses/A2.java  package spoon.test.visibility.testclasses;  public class A2 { 	public class B { 		public static final int i = 0; 		public boolean m(Object o) { 			return i == 0; 		} 	}  	public class C { 	}  	public boolean instanceOf(Object o) { 		return o instanceof A2.B; 	}  	public C returnType() { 		return new C(); 	}  	public Foo.Bar returnType2(String s) { 		return null; 	}  	public void aMethod() { 		class D { 		} 		new D(); 	} }   /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java  com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing src\test\resources\noclasspath\A2.java         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:295)         at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:213)         at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:581)         at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:472)         at com.puppycrawl.tools.checkstyle.Main.main(Main.java:226) Caused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: MismatchedTokenException occurred while parsing file D:\projects\spoon\src\test\resources\noclasspath\A2.java.         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:98)         at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:180)         at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:81)         at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:316)         at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:286)         ... 4 more Caused by: D:\projects\spoon\src\test\resources\noclasspath\A2.java:19:1: expecting EOF, found '}'         at antlr.Parser.match(Parser.java:211)         at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:211)         at com.puppycrawl.tools.checkstyle.JavaParser.parse(JavaParser.java:92)         ... 8 more Checkstyle ends with 1 errors. ```  --------------- java -jar .\checkstyle-8.11-all.jar -c .\checkstyle.xml src  Checkstyle ended with exception. It should provide list of violations. com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing src\test\resources\noclasspath\A2.java  --------------","closed","","zielint0","2018-08-09T18:09:59Z","2018-08-09T20:14:08Z"
"","6066","com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing src\test\resources\printer-test\spoon\test\AnnotationSpecTest.java","``` /var/tmp $ javac YOUR_FILE.java Project builds successfully using IntelliJ IDEA/Maven.  /var/tmp $ cat config.xml https://github.com/INRIA/spoon/blob/master/checkstyle.xml                                                                                                                                                                                                                                                                                   /var/tmp $ cat YOUR_FILE.java  package com.squareup.javapoet;  import com.google.testing.compile.CompilationRule; import java.lang.annotation.Annotation; import java.lang.annotation.Inherited; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import javax.lang.model.element.TypeElement; import org.junit.Rule; import org.junit.Test;  import static com.google.common.truth.Truth.assertThat;  public final class AnnotationSpecTest {    @Retention(RetentionPolicy.RUNTIME)   public @interface AnnotationA {   }    @Inherited   @Retention(RetentionPolicy.RUNTIME)   public @interface AnnotationB {   }    @Retention(RetentionPolicy.RUNTIME)   public @interface AnnotationC {     String value();   }    public enum Breakfast {     WAFFLES, PANCAKES;     public String toString() { return name() + "" with cherries!""; };   }    @Retention(RetentionPolicy.RUNTIME)   public @interface HasDefaultsAnnotation {      byte a() default 5;      short b() default 6;      int c() default 7;      long d() default 8;      float e() default 9.0f;      double f() default 10.0;      char[] g() default {0, 0xCAFE, 'z', '€', 'ℕ', '""', '\'', '\t', '\n'};      boolean h() default true;      Breakfast i() default Breakfast.WAFFLES;      AnnotationA j() default @AnnotationA();      String k() default ""maple"";      Class","closed","","zielint0","2018-08-09T18:16:01Z","2018-08-09T22:29:43Z"
"","6708","Question marks in Generic type triggers error from WhitespaceAround.","``` /var/tmp $ javac YOUR_FILE.java foo.java:3:25: '?' is not preceded with whitespace. [WhitespaceAround]  /var/tmp $ cat config.xml                    (The GENERIC_* things are removed from the list.)  /var/tmp $ cat YOUR_FILE.java         final String modelClassName = ""Foo"";         try {             final Class modelClazz = Class.forName(modelClassName);         } catch (final ClassNotFoundException | InstantiationException | IllegalAccessException ex) {             throw new InternalServerError(""Error while creating java bean for model: "" + model.getId(), ex);         } It is fussing about the ? in the .  It also complains if it is","closed","","GregJSharp","2019-05-01T19:52:09Z","2019-06-01T23:52:00Z"
"","6108","javadoc check does not detect duplicate javadocs","``` /var/tmp $ javac YOUR_FILE.java /**  * first valid comment.  */  /**   * second valid comment.  * @author me  */  /var/tmp $ cat config.xml using all javadocs checks  ```  ---------------  checkMultipleSameLevelJavadocs parameter for javadoc check is missing  --------------  In the above case either a setting ""checkMultipleSameLevelJavadocs"" with default enabled shall be available. This issues arrises often to juniors, who use javadoc generator and do not really check for the valid output This issue arrises especially at the package-info.java level often. Similar task to #5769","closed","","dpalic","2018-09-09T10:10:53Z","2019-07-04T23:24:52Z"
"","6437","RuleUtil.java throws","``` /var/tmp $ javac YOUR_FILE.java #[[PLACE YOUR OUTPUT HERE]]  /var/tmp $ cat config.xml #[[PLACE YOUR OUTPUT HERE]]  /var/tmp $ cat YOUR_FILE.java #[[PLACE YOU OUTPUT HERE]]  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java #[[PLACE YOUR OUTPUT HERE]] ```  ---------------  LIne 95 throws StringIndexOutOfBoundsException when '.' is placed at the end of the line:  `object.method().    method2()`  --------------  Still not clear ??? see example - https://checkstyle.org/report_issue.html#How_to_report_a_bug","closed","","maciej-kizlich","2019-02-19T09:39:53Z","2019-02-19T09:45:09Z"
"","6637","SuppressWarningsHolder aliasList members don't act like aliases","``` /var/tmp $ javac YOUR_FILE.java #[[PLACE YOUR OUTPUT HERE]]  /var/tmp $ cat config.xml                                                             /var/tmp $ cat YOUR_FILE.java package test; class Test {   private int a;   void withOriginal() {     @SuppressWarnings({""hiddenfield""})     int a = 1;   }   void withAlias() {     @SuppressWarnings(""LocalVariableHidesMemberVariable"")     int a = 1;   } }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java Starting audit... [ERROR] r:\!spikes\!Checkstyle\alias\src\main\java\test\Test.java:6:9: 'a' hides a field. [HiddenField] Audit done. Checkstyle ends with 1 errors. ```  And variant 2:  ``` /var/tmp $ javac YOUR_FILE.java #[[PLACE YOUR OUTPUT HERE]]  /var/tmp $ cat config.xml                                                             /var/tmp $ cat YOUR_FILE.java package test; class Test {   private int a;   void withOriginal() {     @SuppressWarnings({""hiddenfield""})     int a = 1;   }   void withAlias() {     @SuppressWarnings(""LocalVariableHidesMemberVariable"")     int a = 1;   } }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java Starting audit... [ERROR] r:\!spikes\!Checkstyle\alias\src\main\java\test\Test.java:10:9: 'a' hides a field. [HiddenField] Audit done. Checkstyle ends with 1 errors. ```  So, I either have one `@SuppressWarnings` working or another, not both at the same time. [Documentation](http://checkstyle.sourceforge.net/config_annotation.html#SuppressWarningsHolder_Properties) says that `aliasList` property specifies *aliases*. [Alias](https://en.wiktionary.org/wiki/alias#Noun) means `another name`. So, it should not replace existing name, but add another one.","open","approved,","grv87","2019-04-05T14:11:19Z","2022-07-08T14:47:39Z"
"","6746","Add ability to detect declared but undocumented parameters","``` /var/tmp $ javac UndocumentedParam.java # no output produced, compiles properly  /var/tmp $ cat config.xml                                                                   /var/tmp $ cat UndocumentedParam.java public class UndocumentedParam {      /**      * A method with an undocumented param.      * Would be nice to have a flag to report an error for it,      * while not complaining for undocumentedParam2       *      * @param undocumentedParam1      */     void testEmpty(Object undocumentedParam1, Object undocumentedParam2) {                  } }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $  java $RUN_LOCALE -jar ../checkstyle-8.20-all.jar \       -c config.xml UndocumentedParam.java  Starting audit... Audit done. ```  ---------------  The ``undocumentedParam1`` is not reported as lacking documentation. I would like to have a way to ignore missing parameters just like now, but if a parameter has been added in the javadoc, then it should be documented. Once upon a time it might have been useful for code completion, thinking about Netbeans in the early 2000, but right now, it does not seem to make sense to me, if one goes to throught the trouble of naming a parameter in the javadoc, some bits of documentation about it should also be present.  In short, I'd expect the output to report ``undocumentedParam1`` (something gone wrong there, took the time to add it in the javadoc, but then wrote no description) but not ``undocumentedParam2`` (not even in the list of params in the javadoc, keep current behavior and move on).  --------------","open","javadoc,","aaime","2019-05-11T17:08:07Z","2021-09-04T19:20:18Z"
"","6123","IllegalType should ignore parameters of methods with modifiers not in 'memberModifiers'","``` /var/tmp $ javac TestClass.java /var/tmp $ cat config.xml                             /var/tmp $ cat TestClass.java import java.util.HashSet; class TestClass {   private void m(HashSet param) {} }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.12-all.jar -c config.xml TestClass.java Starting audit... [ERROR] TestClass.java:3:18: Declaring variables, return values or parameters of type 'HashSet' is not allowed. [IllegalType] Audit done. Checkstyle ends with 1 errors. ```  ---------------  I would expect no error, since method 'm' is not public, and the check is configured for LITERAL_PUBLIC. The code seems to implement this logic (https://github.com/checkstyle/checkstyle/blob/45d2cabd2fee4a9bb7864945f19e9219a579087d/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java#L272), but this is somehow not working?","closed","approved,","ebruneton","2018-09-16T15:54:36Z","2018-11-09T15:17:30Z"
"","6398","IllegalType: allow ignoring type checks in generics","``` /var/tmp $ javac Test.java #[[PLACE YOUR OUTPUT HERE]]  /var/tmp $ cat config.xml                                                /var/tmp $ cat Test.java public class Test {     private java.util.TreeSet set; }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.17-all.jar -c config.xml Test.java Starting audit... [ERROR] /n/fs/lift/checkstyle/Test.java:2:27: Usage of type 'Integer' is not allowed. [IllegalType] Audit done. Checkstyle ends with 1 errors. ```  ---------------  As per #5118, Checkstyle 8.17 now flags type parameters, which is a welcome feature. However, sometimes I want to enforce the IllegalType check with { variables, parameters, return types } but not with type parameters. My main use case is with wrapper types, where the wrapper type is used only because Java requires the type parameter to be a reference type (and autoboxes/unboxes it back and forth).","closed","","kevin-wayne","2019-01-29T22:01:20Z","2019-02-19T18:16:32Z"
"","6791","Dynamic variables support for ImportControl check (property expansion)","``` /var/tmp $ javac Test.java # no output produced, compiles properly  /var/tmp $ cat config.xml                                                 /var/tmp $ cat import-control.xml               /var/tmp $ cat Test.java package foo.bar;  import java.util.ArrayList; import java.util.Collection;  class Test {     Collection collection = new ArrayList(); }  /var/tmp $ java -Duser.language=en -Duser.country=US -Dpackage_name=bar \               -jar checkstyle-8.21-all.jar -c config.xml TestImportControl.java Starting audit... [ERROR] /Test.java:1:1: Import control file does not handle this package. [ImportControl] Audit done. Checkstyle ends with 1 errors.  ```  ---------------  Expected result: ``` Starting audit... [ERROR] /Test.java:3:1: Disallowed import - java.util.ArrayList. [ImportControl] [ERROR] /Test.java:4:1: Disallowed import - java.util.Collection. [ImportControl] Audit done. Checkstyle ends with 2 errors. ```  Property expansion is not implemented for import control check.  --------------  Problem: cannot find a way to create generic import-control config to allow import  for some subpackages only from the same modules - really useful for multimodule project with the same module structures and rules.  From the current available options to resolve this issue the most suitable one is probably property expansion. Currently it is not possible to use property expansion functionality for ImportControl configuration, as it is always must be a separate config file linked by root config, for instance: ```                                            ``` While it is possible to declare variable properties using `${prop_name}` syntax in the snippet above, one cannot do the same with `import-control.xml` file.  With this support it must be allowed to write something like this. ```                      ```  Any ideas of how to resolve the problem with different approaches are really appreciated.","open","approved,","merzbird","2019-05-30T19:59:34Z","2019-06-23T13:08:32Z"
"","6104","GenericWhitespace complains about normal spacing with generic constructor","``` /var/tmp $ javac Test.java  /var/tmp $ cat config.xml     	 		 	   /var/tmp $ cat Test.java class Test { 	public  Test(T t) { 	}  	public static void test() { 		new Test(""a""); // violation 	} }   /var/tmp $ export RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.12-all.jar -c config.xml Test.java Starting audit... [ERROR] /tmp/Test.java:6:20: '' is followed by an illegal character. [GenericWhitespace] Audit done. Checkstyle ends with 2 errors. ```  I would expect this code to pass correctly.","closed","approved,","victornoel","2018-09-03T14:38:22Z","2020-02-11T18:15:05Z"
"","6400","IllegalType rule misfires on classes that extend 'illegalClassNames'","``` /var/tmp $ javac SetMultiKeyMap.java #[[Nothing to report]]  /var/tmp $ cat config.xmlvar/tmp $ cat SetMultiKeyMap.java #[[  package foo;  import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashSet; import java.util.LinkedHashMap; import java.util.Map; import java.util.Set; import java.util.function.Function;  // NOTE: we extend LinkedHashMap since we want to be able to use it as cache public class SetMultiKeyMap extends LinkedHashMap {     private static final long serialVersionUID = -3398107541910390020L;      public SetMultiKeyMap() {         super();     }      public SetMultiKeyMap(int initialCapacity) {         super(initialCapacity);     }      public SetMultiKeyMap(Map","closed","","lgoldstein","2019-01-31T05:35:49Z","2019-01-31T20:43:53Z"
"","6845","RequireThis false positive with shadowing try-with-resources variable","``` /var/tmp $ javac RequireThisAndTryWithResources.java  /var/tmp $ cat config.xml                                                           /var/tmp $ cat RequireThisAndTryWithResources.java public class RequireThisAndTryWithResources {     private int value;      public void printVariable() throws Exception {         final AutoCloseable value = () -> System.out.println(""Closing."");         try (value) {             System.out.println(value); // No violation.         }     }      public void printResource() throws Exception {         try (AutoCloseable value = () -> System.out.println(""Closing."")) {             System.out.println(value); // Violation???         }     } }  /var/tmp $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.22-all.jar -c config.xml RequireThisAndTryWithResources.java Starting audit... [ERROR] P:\RequireThisAndTryWithResources.java:13:32: Reference to instance variable 'value' needs ""this."". [RequireThis] Audit done. Checkstyle ends with 1 errors. ```  ---------------  I expect no violation to be found in the `printResource` method. The `printVariable` method shows that the expected happens when the variable is declared before the try-with-resources statement (tested with Java 11).","open","approved,","Kiena","2019-06-24T21:39:09Z","2020-04-19T02:17:04Z"
"","6694","AbbreviationAsWordInName: Numbers break Abbreviation-Scan","``` /var/tmp $ javac PlatformEntryPoint.java **no output**  /var/tmp $ cat config.xml                                                                                                      /var/tmp $ cat PlatformEntryPoint.java package net.justchunks.jcinclude.object.internal;  /**  * Working javadoc.  */ public interface PlatformEntryPoint {      /**      * Another working java-doc.      *      * @return Local SLF4J-Handler.      */     String getSLF4JLogger(); }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.20-all.jar \                     -c config.xml PlatformEntryPoint.java Starting audit... [WARN] ../PlatformEntryPoint.java:13: Abbreviation in name 'getSLF4JLogger'  must contain no more than '2' consecutive capital letters. [AbbreviationAsWordInName] Audit done. ```  ---------------  I'd expect to be able to allow abbreviations containing numbers through the allowedAbbreviations"" property of the ""AbbreviationAsWordInName""-Check.  --------------    there happens to be a lot of abbreviations in my use case, that contain numbers. The most famous would be ""SLF4J"", which I tried to whitelist through the [property](http://checkstyle.sourceforge.net/config_naming.html#AbbreviationAsWordInName_Properties) ""allowedAbbreviations"". This did not work and once I looked into the [responsible check](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java#L376) it became clear why that is.  In my Opinion, Numbers should neither start nor end the ""abbreviation counter"", but they should continue it. That would mean: ""myMETH0DName"" would be counted as 7,  ""my4THMethod"" would be counted as 3, ""goodN8"" would be counted as 2.  I'll prepare a PR to align this with what I would expect, but of course I am open to other opinions regarding this method. The current behavior however, is totally unexpected for me, even though from a ""technical"" perspective it may makes sense.","open","approved,","Scrayos","2019-04-24T10:41:16Z","2022-04-03T18:07:30Z"
"","6527","Google Java style rules fail with code formatted using Google Java Format tool","``` /var/tmp $ javac org/example/StyleTest.java (no output)  /var/tmp $ cat config.xml Using https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml Specifically:  [google_checks.xml.gz](https://github.com/checkstyle/checkstyle/files/2943538/google_checks.xml.gz)  /var/tmp $ cat org/example/StyleTest.java (very long due to level of detail - see attached) [StyleTest.java.gz](https://github.com/checkstyle/checkstyle/files/2943446/StyleTest.java.gz)  /var/tmp $  java -Duser.language=en -Duser.country=US -jar ~/Downloads/checkstyle-8.18-all.jar -c ~/Downloads/google_checks.xml src/org/example/StyleTest.java Starting audit... [WARN] /src/org/example/StyleTest.java:16: '""This is an annotation that accepts a list.""' has incorrect indentation level 2, expected level should be 4. [Indentation] [WARN] /src/org/example/StyleTest.java:17: '""When that list has many entries, it will become multiline.""' has incorrect indentation level 2, expected level should be 4. [Indentation] [WARN] /src/org/example/StyleTest.java:18: '""Multiline format isn't liked by Checkstyle.""' has incorrect indentation level 2, expected level should be 4. [Indentation] [WARN] /src/org/example/StyleTest.java:24: Line is longer than 100 characters (found 109). [LineLength] [WARN] /src/org/example/StyleTest.java:32:14: Member name 'aFieldWith2ndNameCharUppercase' must match pattern '^[a-z][a-z0-9][a-zA-Z0-9]*$'. [MemberName] [WARN] /src/org/example/StyleTest.java:38:14: Member name 'x' must match pattern '^[a-z][a-z0-9][a-zA-Z0-9]*$'. [MemberName] [WARN] /src/org/example/StyleTest.java:45:14: Member name 'FieldStartingWithUppercase' must match pattern '^[a-z][a-z0-9][a-zA-Z0-9]*$'. [MemberName] [WARN] /src/org/example/StyleTest.java:47: First sentence of Javadoc is missing an ending period. [SummaryJavadoc] [WARN] /src/org/example/StyleTest.java:49:11: Parameter name 'aParameterWith2ndNameCharUppercase' must match pattern '^[a-z]([a-z0-9][a-zA-Z0-9]*)?$'. [ParameterName] [WARN] /src/org/example/StyleTest.java:49:58: Parameter name 'ParameterStartingWithUppercase' must match pattern '^[a-z]([a-z0-9][a-zA-Z0-9]*)?$'. [ParameterName] [WARN] /src/org/example/StyleTest.java:55: First sentence of Javadoc is missing an ending period. [SummaryJavadoc] [WARN] /src/org/example/StyleTest.java:57:9: Local variable name 'aVarWith2ndNameCharUppercase' must match pattern '^[a-z]([a-z0-9][a-zA-Z0-9]*)?$'. [LocalVariableName] [WARN] /src/org/example/StyleTest.java:59:9: Local variable name 'VarStartingWithUppercase' must match pattern '^[a-z]([a-z0-9][a-zA-Z0-9]*)?$'. [LocalVariableName] [WARN] /src/org/example/StyleTest.java:62:3: Missing a Javadoc comment. [JavadocMethod] [WARN] /src/org/example/StyleTest.java:73:3: Missing a Javadoc comment. [JavadocMethod] [WARN] /src/org/example/StyleTest.java:76: 'block lcurly' has incorrect indentation level 8, expected level should be 6. [Indentation] [WARN] /src/org/example/StyleTest.java:76:9: '{' at column 9 should be on the previous line. [LeftCurly] [WARN] /src/org/example/StyleTest.java:77: 'block' child has incorrect indentation level 10, expected level should be 8. [Indentation] [WARN] /src/org/example/StyleTest.java:78: 'block' child has incorrect indentation level 10, expected level should be 8. [Indentation] [WARN] /src/org/example/StyleTest.java:79: 'block rcurly' has incorrect indentation level 8, expected level should be 6. [Indentation] [WARN] /src/org/example/StyleTest.java:81: 'block lcurly' has incorrect indentation level 8, expected level should be 6. [Indentation] [WARN] /src/org/example/StyleTest.java:81:9: '{' at column 9 should be on the previous line. [LeftCurly] [WARN] /src/org/example/StyleTest.java:82: 'block' child has incorrect indentation level 10, expected level should be 8. [Indentation] [WARN] /src/org/example/StyleTest.java:83: 'block' child has incorrect indentation level 10, expected level should be 8. [Indentation] [WARN] /src/org/example/StyleTest.java:84: 'block rcurly' has incorrect indentation level 8, expected level should be 6. [Indentation] [WARN] /src/org/example/StyleTest.java:89:21: Array brackets at illegal position. [ArrayTypeStyle] [WARN] /src/org/example/StyleTest.java:92: First sentence of Javadoc is missing an ending period. [SummaryJavadoc] [WARN] /src/org/example/StyleTest.java:95:5: '{' at column 5 should be on the previous line. [LeftCurly] [WARN] /src/org/example/StyleTest.java:100: First sentence of Javadoc is missing an ending period. [SummaryJavadoc] [WARN] /src/org/example/StyleTest.java:104:5: '{' at column 5 should be on the previous line. [LeftCurly] [WARN] /src/org/example/StyleTest.java:122: Abbreviation in name 'EOL_COMMENT_ORIGINAL' must contain no more than '2' consecutive capital letters. [AbbreviationAsWordInName] [WARN] /src/org/example/StyleTest.java:123: Line is longer than 100 characters (found 117). [LineLength] [WARN] /src/org/example/StyleTest.java:127: Comment has incorrect indentation level 20, expected is 4, indentation should be the same level as line 128. [CommentsIndentation] [WARN] /src/org/example/StyleTest.java:128:5: '{' at column 5 should be on the previous line. [LeftCurly] [WARN] /src/org/example/StyleTest.java:136: Abbreviation in name 'EOL_COMMENT_ORIGINAL' must contain no more than '2' consecutive capital letters. [AbbreviationAsWordInName] [WARN] /src/org/example/StyleTest.java:137: Line is longer than 100 characters (found 117). [LineLength] [WARN] /src/org/example/StyleTest.java:142:5: '{' at column 5 should be on the previous line. [LeftCurly] [WARN] /src/org/example/StyleTest.java:148: Block comment has incorrect indentation level 8, expected is 6, indentation should be the same level as line 149. [CommentsIndentation] [WARN] /src/org/example/StyleTest.java:149: 'method def lcurly' has incorrect indentation level 6, expected level should be 2. [Indentation] [WARN] /src/org/example/StyleTest.java:149:7: '{' at column 7 should be on the previous line. [LeftCurly] [WARN] /src/org/example/StyleTest.java:155: Top-level class ClassThatShouldBeInItsOwnFileButIsNot has to reside in its own source file. [OneTopLevelClass] [WARN] /src/org/example/StyleTest.java:158: Top-level class badClassNameStartingWithLowercase has to reside in its own source file. [OneTopLevelClass] [WARN] /src/org/example/StyleTest.java:158:7: Type name 'badClassNameStartingWithLowercase' must match pattern '^[A-Z][a-zA-Z0-9]*$'. [TypeName] ```  ---------------  In a pure form, Checkstyle ""Google Checks"" rule should agree with and not fail the output of the very Google Java Format tool.   Granted, there are cases that could (and should) be formatted better than the Google Java Format tool can or does but present disagreement is nevertheless a problem. Specifically:  1. If one is running Google Java Format always (i.e. ""on save"" or similarly), Checkstyle isn't helpful in any sort of way to begin with as the format cannot be influenced - Google formatter will modify even the code that does (in principle) conform to the described Google style guide. 2. If the Google Java Format is only used as an occasional helper, it may produce code that Checkstyle won't like, thus it isn't a helper. Yet it is considered to be the authority in terms of Google style. 3. Those with legacy code who want to reformat once and just maintain (using Checkstyle) thereafter it may face huge challenges as GJF will produce or leave out many things that Checkstyle won't like - in my case thousands of them, something that cannot be easily overcome.  I do not ""believe"" in formatters as we have available today. Code style is not for machines, it is for humans. There are many different ways to *properly* style the same code - i.e. to wrap a long line or indent that long expression, comment or a SQL statement concatenated in multiple lines - each may hugely improve readability yet are beyond automated formatter's ""comprehension"".  This is why we are trying to let humans style their code for humans, and only apply reasonable style restrictions via Checkstyle. That is hard, though, when the tools don't cooperate with each other or when the tools (Checkstyle in this case) don't accept clearly accepted code styles.  I realize that this is (probably) many issues, but I did not want to break them into bits myself. Some are easily addressable, such as the identifier patterns but the indentation and brace positions issues are both related and rigid - i.e. I have not found workarounds.    --------------  Still not clear ??? see example - https://checkstyle.org/report_issue.html#How_to_report_a_bug","closed","","GwtarPlayer","2019-03-07T21:55:49Z","2019-03-09T05:10:31Z"
"","6345","RightCurly with option alone false negative for class, method and constructor","``` /var/tmp $ javac MyClass.java  /var/tmp $ cat config.xml                                                                 /var/tmp $ cat MyClass.java public final class MyClass {     public MyClass() {} // Doesn't warn - incorrect          public void main() {} // Doesn't warn - incorrect          class Foo {} // Doesn't warn - incorrect }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.16-all.jar -c config.xml MyClass.java Starting audit... Audit done. ```  ---------------  In all three cases (constructor, method, class), the right curly brace is on the same line as the left curly brace. However, the option `alone` should force the right curly brace to be on it's own line,  Correct: ```java public final class MyClass {     public MyClass() {     }          public void main() {     }          class Foo {     } } ```  --------------- https://groups.google.com/forum/#!topic/checkstyle/q_kVS42ITt0","closed","approved,","robertpainsi","2019-01-04T12:18:17Z","2019-04-29T20:58:12Z"
"","6808","Missing error for module JavadocType since 8.20","``` /var/tmp $ javac JavadocType.java  /var/tmp $ cat JavadocType.xml                          /var/tmp $ cat JavadocType.java public class JavadocType {  }  /var/tmp $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.21-all.jar -c JavadocType.xml JavadocType.java Starting audit... Audit done. ```  ---------------  Expected error `Missing a Javadoc comment. [JavadocType]` is missing.  --------------  Problem exists since Checkstyle 8.20, with Checkstyle 8.19 error displays as expected (see below).  **Checkstyle 8.20**  ``` $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.20-all.jar -c JavadocType.xml JavadocType.java Starting audit... Audit done. ```  **Checkstyle 8.19**  ``` $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.19-all.jar -c JavadocType.xml JavadocType.java Starting audit... [ERROR] /var/tmp/JavadocType.java:1: Missing a Javadoc comment. [JavadocType] Audit done. Checkstyle ends with 1 errors. ```","closed","","alexbde","2019-06-06T13:49:17Z","2019-06-07T04:56:41Z"
"","6902","format xdoc/javadoc files to follow rule of LineLength (max ia 100)","``` /var/tmp $ javac InputLineLengthLongLink.java  /var/tmp $ cat config.xml                                                         /var/tmp $ cat InputLineLengthLongLink.java package com.puppycrawl.tools.checkstyle.checks.sizes.linelength;  1 /** 2  * with inline title 3  *  4  * with wrapped title 5  */ 6 public class InputLineLengthLongLink { 7 }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c config.xml InputLineLengthLongLink.java Starting audit... Audit done. ```  Expected violation in the line 2. This line could be wrapped. The fix is simple: change the RegExp to something like ```        ``` to ensure that the line ends with `"">`","closed","miscellaneous,","pbludov","2019-07-14T10:35:20Z","2019-07-26T19:13:30Z"
"","6528","JavadocStyle does not report consistently and not like documented","``` /var/tmp $ javac Foo.java /var/tmp $ cat config.xml                        /var/tmp $ cat Foo.java /**  * Foo.  * }  * }}  * }}}  *   * }}}}  */ class Foo { } /var/tmp $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.18-all.jar -c config.xml Foo.java Starting audit... [ERROR] D:\Sourcecode\other\discord-logger\tmp\Foo.java:4:9: Extra HTML tag found: }} [JavadocStyle] [ERROR] D:\Sourcecode\other\discord-logger\tmp\Foo.java:5:9: Extra HTML tag found: }}} [JavadocStyle] [ERROR] D:\Sourcecode\other\discord-logger\tmp\Foo.java:7:4: Extra HTML tag found: }}}} [JavadocStyle] Audit done. Checkstyle ends with 3 errors. ```  ---------------  Documentation says: - start tag without end tag => ""Unclosed HTML tag found:"" - end tag without start tag => ""Extra HTML tag found:"" - not allowed HTML tag found => unspecified error message  Expected behavior: - complain 5 times about not allowed HTML tag - complain 1 time about ""Unclosed HTML tag found: ``"" - complain 1 time about ""Extra HTML tag found: ``"" - when complaining about extra HTML tag like is correctly done for ``, do not include extra characters in the error message  --------------","open","","Vampire","2019-03-08T00:14:00Z","2019-06-17T00:48:32Z"
"","6183","Inconsistent evaluation of array initialization indentation","``` /var/tmp $ javac Foo.java (no output)  /var/tmp $ cat config.xml                                                                /var/tmp $ cat Foo.java public class Foo { 	private static class Bar { 		private String[] aaaa; 	}  	private void fooMethod() { 		Bar in = new Bar(); 		in.aaaa = new String[]{""0"", ""0"", ""0"", ""0"", ""0"", 					""0"", ""0"", ""0"", ""0""}; 		in.aaaa = new String[] {""0"", ""0"", ""0"", ""0"", ""0"", 					""0"", ""0"", ""0"", ""0""}; // line 11 	} }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.14-all.jar -c config.xml Foo.java Starting audit... [WARN] /tmp/Foo.java:11: 'array initialization' child has incorrect indentation level 40, expected level should be one of the following: 17, 18, 41. [Indentation] Audit done. ```  ---------------  expect:  The white space before the left curly bracket on line 10 should not affect the evaluation of the indentation on line 11.  Likewise, the lack of white space before the left curly bracket on line 8 should not influence the correctness on line 9.","open","indentation,","rcsanchez97","2018-10-31T00:48:59Z","2018-10-31T13:24:54Z"
"","6513","EmptyCatchBlock check does not work properly with non-system line endings in files","``` /var/tmp $ javac Foo.java  /var/tmp $ cat config.xml                                               /var/tmp $ cat Foo.java import java.io.IOException;  class Foo {     private void foo() {         try {             throw new IOException();         } catch (IOException e) {             /*              * some comment              * This is expected              */         }     } }  /var/tmp $ xxd Foo.java 00000000: 696d 706f 7274 206a 6176 612e 696f 2e49  import java.io.I 00000010: 4f45 7863 6570 7469 6f6e 3b0a 0a63 6c61  OException;..cla 00000020: 7373 2046 6f6f 207b 0a20 2020 2070 7269  ss Foo {.    pri 00000030: 7661 7465 2076 6f69 6420 666f 6f28 2920  vate void foo() 00000040: 7b0a 2020 2020 2020 2020 7472 7920 7b0a  {.        try {. 00000050: 2020 2020 2020 2020 2020 2020 7468 726f              thro 00000060: 7720 6e65 7720 494f 4578 6365 7074 696f  w new IOExceptio 00000070: 6e28 293b 0a20 2020 2020 2020 207d 2063  n();.        } c 00000080: 6174 6368 2028 494f 4578 6365 7074 696f  atch (IOExceptio 00000090: 6e20 6529 207b 0a20 2020 2020 2020 2020  n e) {. 000000a0: 2020 202f 2a0a 2020 2020 2020 2020 2020     /*. 000000b0: 2020 202a 2073 6f6d 6520 636f 6d6d 656e     * some commen 000000c0: 740a 2020 2020 2020 2020 2020 2020 202a  t.             * 000000d0: 2054 6869 7320 6973 2065 7870 6563 7465   This is expecte 000000e0: 640a 2020 2020 2020 2020 2020 2020 202a  d.             * 000000f0: 2f0a 2020 2020 2020 2020 7d0a 2020 2020  /.        }. 00000100: 7d0a 7d0a                                }.}.  /var/tmp $ java -Duser.language=en -Duser.country=US -Dline.separator=$'\n' -jar checkstyle-8.18-all.jar -c config.xml Foo.java Starting audit... [ERROR] D:\Sourcecode\other\discord-logger\tmp\Foo.java:7: Empty catch block. [EmptyCatchBlock] Audit done. Checkstyle ends with 1 errors.  /var/tmp $ java -Duser.language=en -Duser.country=US -Dline.separator=$'\r\n' -jar checkstyle-8.18-all.jar -c config.xml Foo.java Starting audit... Audit done. ```  ---------------  When having non-system line endings in files as is quite common for cross-platform projects, the `EmptyCatchBlock` check fails to properly extract the first line of a block comment with CS 8.18 to check it against the comment format pattern. Instead for example the full comment will be used when a file has linux line endings on windows, or the comment to test has an extra carriage return character in the end when a file has windows line endings on linux. This even happens in `EmptyCatchBlockCheckTest#testWithUserSetValues` when the `InputEmptyCatchBlockDefault.java` file has linux line endings and you run the test on a windows system.","closed","approved,","Vampire","2019-03-06T01:45:10Z","2019-05-02T14:47:55Z"
"","6612","IllegalType: illegal types in overridden methods should not be reported","``` /var/tmp $ javac Foo.java  /var/tmp $ cat config.xml                                               /var/tmp $ cat Bar.java interface Bar {     void bar(StringBuffer buffer);     StringBuffer bar();     Object baz(); }  /var/tmp $ cat Foo.java class Foo implements Bar {     public void foo(StringBuffer buffer) { // line 2     }     public StringBuffer foo() { // line 4         return null;     }     @Override     public void bar(StringBuffer buffer) { // line 8     }     @Override     public StringBuffer bar() { // line 11         return null;     }     @Override     public StringBuffer baz() { // line 15         return null;     } }  /var/tmp $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.18-all.jar -c config.xml Foo.java Starting audit... [ERROR] D:\Sourcecode\other\discord-logger\tmp\Foo.java:2:21: Usage of type 'StringBuffer' is not allowed. [IllegalType] [ERROR] D:\Sourcecode\other\discord-logger\tmp\Foo.java:4:12: Usage of type 'StringBuffer' is not allowed. [IllegalType] [ERROR] D:\Sourcecode\other\discord-logger\tmp\Foo.java:8:21: Usage of type 'StringBuffer' is not allowed. [IllegalType] [ERROR] D:\Sourcecode\other\discord-logger\tmp\Foo.java:11:12: Usage of type 'StringBuffer' is not allowed. [IllegalType] [ERROR] D:\Sourcecode\other\discord-logger\tmp\Foo.java:15:12: Usage of type 'StringBuffer' is not allowed. [IllegalType] Audit done. Checkstyle ends with 5 errors. ```  ---------------  The 8:21 finding should not be there. If you override a method, there is no chance to change the parameter types in any way or you overload the method instead.  --------------  **_Additionally demanded by project maintainers:_** 11:12 and 15:12 should not be reported either. Even though original return type is `Object` and can be changed in the overridden class as seen in the example. It will be hard to decide where to raise violation and where not to. It is better to have some false negatives rather than false positives. I'm not sure it is possible to write good suppression for such cases. All overridden methods should be ignored from validation.  --------------","closed","approved,","Vampire","2019-03-26T01:22:26Z","2019-04-27T16:17:51Z"
"","6987","Checkstyle hangs indefinately while checking java file with a specific line of code","``` /var/tmp $ javac Field.java Note: Field.java uses unchecked or unsafe operations. Note: Recompile with -Xlint:unchecked for details.  /var/tmp $ cat sun_checks.xml                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  	                                                                                                                                                  	     	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     /var/tmp $ cat suppressions.xml               /var/tmp $ cat Field.java import java.util.Set;  class Field{     public static String CQB_ABCDE_TABLE = """";     public static String LB_ABCDE_TABLE = """";     public static String ABCDE_TABLE = """";       public static void main(String[] args){         // This line below causes checkstyle to bug out         final Set abcdeTableServices = Sets.asSet(Field.CQB_ABCDE_TABLE, Field.LB_ABCDE_TABLE, Field.ABCDE_TABLE);     }      private static class Sets{         private static Set asSet(Object... o){             return (Set) new Object();         }     } }   /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java  -DsuppressFile=suppressions.xml $RUN_LOCALE -jar ~/Developer/checkstyle-8.23-all.jar  -c sun_checks.xml Field.java  Starting audit... ```  I expect checkstyle to complete at the most 10 seconds for a single Java file. The line mentioned in Field.java causes it to hang.","closed","","jack-cole","2019-08-16T20:48:52Z","2019-08-17T22:15:22Z"
"","6743","Unused param not reported when missing description","``` /var/tmp $ javac EmptyMethodParams.java # no output produced, compiles properly  /var/tmp $ cat config.xml                                                                  /var/tmp $ cat EmptyMethodParams.java import java.io.IOException;  public class EmptyMethodParams {      /**      * A method with an undocumented param and a missing param.      * Checkstyle should at least      * missingParam, ideally would be nice to have a flag to report      * also undocumentedParam      *      * @param param1 some text      * @param unexpectedParam      * @return      */     void testEmpty(Object param1) {                  } }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.20-all.jar \      -c config.xml EmptyMethodParams.java Starting audit... Audit done. ```  ---------------  The `unexpectedParam` is not reported as being mismatched, however, adding even a single character of description to it, results in the output I was expecting:  `` Starting audit... [ERROR] /home/aaime/devel/checkstyle-empty-report/src/EmptyMethodParams.java:12:8: Unused @param tag for 'unexpectedParam'. [JavadocMethod] Audit done. ``  FYI: #6746","closed","javadoc,","aaime","2019-05-11T10:37:25Z","2019-11-03T18:51:32Z"
"","6680","CustomImportOrder:  unexpected violation for extra empty line between package and import","``` /var/tmp $ javac CustomImportOrder.java ```  ``` /var/tmp $ cat config.xml                                     ```  ``` /var/tmp $ cat CustomImportOrder.java package com.example;   import java.util.Arrays;  class CustomImportOrder { } ```  ``` /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.19-all.jar \     -c config.xml CustomImportOrder.java Starting audit... [ERROR] /var/tmp/CustomImportOrder.java:4: 'java.util.Arrays' should be separated  from previous import group by one line. [CustomImportOrder] Audit done. Checkstyle ends with 1 errors. ```  ---------------  Obviously it's a misleading error message, since there're no import groups before the only one `import java.util.Arrays;` .  I'd like to propose that we clarify the violation error message, such as `should be separated from package define by one line`  Inspired by https://github.com/checkstyle/checkstyle/issues/5304  --------------","closed","approved,","gmshake","2019-04-18T16:42:59Z","2019-12-10T21:34:52Z"
"","6508","NewlineAtEndOfFile with LF_CR_CRLF does not work properly","``` /var/tmp $ cat config.xml                         /var/tmp $ xxd foo.properties 00000000: 0a                                       .  /var/tmp $ java -Duser.language=en -Duser.country=US -jar checkstyle-8.18-all.jar -c config.xml foo.properties Starting audit... [ERROR] D:\Sourcecode\other\discord-logger\tmp\foo.properties:1: File does not end with a newline. [NewlineAtEndOfFile] Audit done. Checkstyle ends with 1 errors. ```  ---------------  With a file that only contains a linefeed character the `NewlineAtEndOfFile` check fails, because `NewlineAtEndOfFile` with `LF_CR_CRLF` requires to have at least two characters in the file with CS 8.18, even when technically only the latter is checked actually. Expected would be no violation.  https://checkstyle.org/property_types.html#lineSeparator  `lf_cr_crlf` is ""lf, cr or crlf"" in other words ANY","closed","approved,","Vampire","2019-03-05T18:57:45Z","2019-05-13T19:02:56Z"
"","6633","""basicOffset"" and ""lineWrappingIndentation"" conflict each other","``` /var/tmp $ cat build.gradle  plugins {     id 'checkstyle' }  repositories {     mavenCentral() }  apply plugin: 'java'  /var/tmp $ cat src/main/java/hello/HelloWorld.java  package hello;  import java.util.ArrayList; import java.util.function.Function; import java.util.Map; import java.util.Optional; import javafx.util.Pair;  public class HelloWorld {   public static void main(String[] args) {     Greeter greeter = new Greeter();     System.out.println(greeter.sayHello());      ArrayList pairs = new ArrayList();     pairs.add(new Pair(new Pair(""this"", ""that""), Optional.of(new Integer(1))));      Function fn = (ps) -> {       int c = 0;       for (Pair p : ps ) {**         System.out.println(p.getKey());         c ++;       }       return c;     };      fn.apply(pairs);   } }  /var/tmp $ cat src/main/java/hello/Greeter.java  package hello;  public class Greeter {   public String sayHello() {     return ""Hello world!"";   } }  /var/tmp $ cat config/checkstyle/checkstyle.xml                                                                                                                                         /var/tmp $ gradle checkstyleMain  BUILD SUCCESSFUL in 0s 2 actionable tasks: 2 up-to-date /var/tmp$ gradle checkstyleMain  > Task :compileJava Note: /var/tmp/src/main/java/hello/HelloWorld.java uses unchecked or unsafe operations. Note: Recompile with -Xlint:unchecked for details.  > Task :checkstyleMain [ant:checkstyle] [WARN] /var/tmp/src/main/java/hello/HelloWorld.java:20: 'member def type' has incorrect indentation level 10, expected level should be 8. [Indentation] Checkstyle rule violations were found. See the report at: file:///var/tmp/build/reports/checkstyle/main.html Checkstyle files with violations: 1 Checkstyle violations by severity: [warning:1]   BUILD SUCCESSFUL in 0s 2 actionable tasks: 2 executed  /var/tmp $ cat src/main/java/hello/HelloWorld.java  package hello;  import java.util.ArrayList; import java.util.function.Function; import java.util.Map; import java.util.Optional; import javafx.util.Pair;  public class HelloWorld {   public static void main(String[] args) {     Greeter greeter = new Greeter();     System.out.println(greeter.sayHello());      ArrayList pairs = new ArrayList();     pairs.add(new Pair(new Pair(""this"", ""that""), Optional.of(new Integer(1))));      Function fn = (ps) -> {       int c = 0;       for (Pair p : ps ) {         System.out.println(p.getKey());         c ++;       }       return c;     };      fn.apply(pairs);   } }  /var/tmp $ gradle checkstyleMain  > Task :compileJava Note: /var/tmp/src/main/java/hello/HelloWorld.java uses unchecked or unsafe operations. Note: Recompile with -Xlint:unchecked for details.  > Task :checkstyleMain [ant:checkstyle] [WARN] /var/tmp/src/main/java/hello/HelloWorld.java:20: 'Optional' has incorrect indentation level 8, expected level should be 10. [Indentation] Checkstyle rule violations were found. See the report at: file:///var/tmp/build/reports/checkstyle/main.html Checkstyle files with violations: 1 Checkstyle violations by severity: [warning:1]   BUILD SUCCESSFUL in 0s 2 actionable tasks: 2 executed  ```  ---------------  The initialization statement inside the 'for' statement causes a conflicting indentation error when ""basicOffset"" and ""lineWrappingIndentation"" are not same. When the initialization statement is complicated, a random line break will cause conflicting error, which does not allow any correct indentation except having a line break after type declaration. ```       for (Pair p : ps ) { ```  If the code looks like below, checkstyle allows one indentation. ```       for (Pair           p : ps ) { ```  --------------","open","indentation,","juria90","2019-04-04T00:41:41Z","2020-05-08T04:36:47Z"
"","6650","Erroneous Javadoc parse error reported","``` /**  * A validator to check whether the selection is valid. The validator is invoked whenever the selection changes.  * @see {@link org.eclipse.ui.dialogs.ElementTreeSelectionDialog#setValidator(ISelectionStatusValidator)}  */ public class BindingConfigSelectionValidator implements ISelectionStatusValidator {     /** {@inheritDoc} */     @Override     public IStatus validate(Object[] selection) {             return new Status(IStatus.OK, ""some-id"", IStatus.OK, """", null);         }     } }  OUTPUT: Description	Resource	Path	Location	Type Javadoc comment at column 9 has parse error. Details: no viable alternative at input '{' while parsing JAVADOC_TAG	BindingConfigSelectionValidator.java	/com.tibco.xpd.forms.designer.editor/src/com/tibco/xpd/forms/designer/editor/design/pickers/binding	line 33	Checkstyle Problem ```  ---------------  Looks like the CheckStyle Javadoc comment parser can't handle an @see tag whose comment text consists of an {@link ...} directive.  --------------","closed","","demonfiddler","2019-04-08T09:05:14Z","2019-09-25T04:19:53Z"
"","6184","Option to remove folder name / directory from output (show only ""basename"" / filename in output)","``` ... ```  --------------- Present output: ```  [ERROR] /home/user/folder/more folders/another one/deeper/xyz/abc/long_folder_name_2018-10-01-00-00-00_abc-123/abc-123/UI.java:40:101: '4' is a magic number. [MagicNumber]  ```  Desired output: ```  [ERROR] UI.java:40:101: '4' is a magic number. [MagicNumber]  ```","closed","","davidshumway","2018-10-31T02:55:58Z","2018-11-01T12:50:39Z"
"","6440","AnnotationLocation: named parameters must be considered parameters.","``` $ javac test.java (no output)  $ cat config.xml                   $ cat test.java @Ann(""foo"") class Cls1 {} // violation @Ann(value = ""foo"") class Cls2 {} // no violation  @interface Ann {     String value(); }  $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" $ java $RUN_LOCALE -jar checkstyle-8.17-all.jar -c config.xml test.java Starting audit... [ERROR] test.java:1: Annotation 'Ann' should be alone on line. [AnnotationLocation] Audit done. Checkstyle ends with 1 errors.  $ java -jar checkstyle-8.17-all.jar -t test.java  CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |   `--ANNOTATION -> ANNOTATION [1:0] |       |--AT -> @ [1:0] |       |--IDENT -> Ann [1:1] |       |--LPAREN -> ( [1:4] |       |--EXPR -> EXPR [1:5]                                       // EXPR here |       |   `--STRING_LITERAL -> ""foo"" [1:5] |       `--RPAREN -> ) [1:10] |--LITERAL_CLASS -> class [1:12] |--IDENT -> Cls1 [1:18] `--OBJBLOCK -> OBJBLOCK [1:23]     |--LCURLY -> { [1:23]     `--RCURLY -> } [1:24] CLASS_DEF -> CLASS_DEF [2:0] |--MODIFIERS -> MODIFIERS [2:0] |   `--ANNOTATION -> ANNOTATION [2:0] |       |--AT -> @ [2:0] |       |--IDENT -> Ann [2:1] |       |--LPAREN -> ( [2:4] |       |--ANNOTATION_MEMBER_VALUE_PAIR -> ANNOTATION_MEMBER_VALUE_PAIR [2:5] |       |   |--IDENT -> value [2:5] |       |   |--ASSIGN -> = [2:11] |       |   `--EXPR -> EXPR [2:13]                               // EXPR under ANNOTATION_MEMBER_VALUE_PAIR |       |       `--STRING_LITERAL -> ""foo"" [2:13] |       `--RPAREN -> ) [2:18] |--LITERAL_CLASS -> class [2:20] |--IDENT -> Cls2 [2:26] `--OBJBLOCK -> OBJBLOCK [2:31]     |--LCURLY -> { [2:31]     `--RCURLY -> } [2:32] ```  Expected two violations here. The buggy method is `AnnotationLocationCheck#isParameterized` ```     private static boolean isParameterized(DetailAST annotation) {         return annotation.findFirstToken(TokenTypes.EXPR) != null;     } ```  There should be `findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)` also.","closed","approved,","pbludov","2019-02-19T20:15:36Z","2019-02-23T05:40:21Z"
"","6454","AnnotationLocation: Align annotations from different lines","``` $ javac test.java (no output)  $ cat config.xml                   $ cat test.java     @Ann1 // Line 1 class Test1 {}      @Ann1 @Ann2  // Line 5 class Test2 {}  @Ann1     @Ann2 // Line 9 class Test3 {}  @interface Ann1 {} @interface Ann2 {}  $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" $ java $RUN_LOCALE -jar checkstyle-8.18-all.jar -c config.xml test.java Starting audit... [ERROR] /home/pbludov/src/tmp/TestClass.java:5: Annotation 'Ann2' have incorrect indentation level 0, expected level should be 4. [AnnotationLocation] [ERROR] /home/pbludov/src/tmp/TestClass.java:9: Annotation 'Ann2' have incorrect indentation level 4, expected level should be 0. [AnnotationLocation] Audit done. ``` `AnnotationLocation` reports a violation when annotations from different lines aren't aligned. This is [undocumented](https://checkstyle.org/config_annotation.html#AnnotationLocation) feature. And it works a bit oddly. Validation requires that all annotations begin with the same column as the first one. With all this, the first annotation can start anywhere. This behavior should be corrected and documented.","closed","","pbludov","2019-02-22T18:11:34Z","2019-12-15T17:39:18Z"
"","6024","Indentation is incorrect with line wrapping and nested parentheses (method calls)","``` $ javac IndentationWithNestedMethodCalls.java $  $ cat config.xml                                                           $ cat IndentationWithNestedMethodCalls.java import java.util.*;  public class IndentationWithNestedMethodCalls {     public static void main(String[] args) {         Arrays.asList(true,             true,             Arrays.asList(true,                 true, // Violation, line 8                 true)); // Violation, line 9          Arrays.asList(true,             true,             Arrays.asList(true,             true,  // No violation, but should be             true)); // No violation, but should be.          // Works correctly with arrays/curly braces.         Object[] array = new Object[] {             1,             new Object[] {                 1,                 2,                 3             },             new Object[] {                 1,                 2,                 new Object[] {                     1,                     2                 }             }         };     } }  $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" $ java $RUN_LOCALE -jar checkstyle-8.11-all.jar -c config.xml IndentationWithNestedMethodCalls.java Starting audit... [ERROR] /private/tmp/IndentationWithNestedMethodCalls.java:8: 'true' has incorrect indentation level 16, expected level should be 12. [Indentation] [ERROR] /private/tmp/IndentationWithNestedMethodCalls.java:9: 'true' has incorrect indentation level 16, expected level should be 12. [Indentation] Audit done. Checkstyle ends with 2 errors. ```  ---------------  When the argument to a method call is another method call, then the inner method should be further indented by the lineWrappingIndentation amount. Currently, it indents the inner method calls as continuations of the outer method.  The same type of nesting works correctly with arrays/curly braces.  --------------  Let me know if there are any questions!","open","indentation,","marquiswang","2018-07-10T18:39:25Z","2022-03-05T08:13:07Z"
"","6029","Line wrapped chained method calls are indented incorrectly","``` $ javac IndentationWithLineWrappedChainedMethodCalls.java $  $ cat config.xml                                                           /var/tmp $ cat IndentationWithLineWrappedChainedMethodCalls.java public class IndentationWithLineWrappedChainedMethodCalls {      void foo() {         // Chained method call is indented with lineWrappingIndentation         // Correctly passes indentation         new Chainable()             .chain()             .chain();          // Line wrapped chained method call is indented with lineWrappingIndentation         // Incorrectly fails indentation, despite being consistent with the above.         Chainable chainable1 =             new Chainable()                 .chain() // Violation: line 14                 .chain(); // Violation: line 15          // Line wrapped chained method call is indented with lineWrappingIndentation         // Incorrectly passes Identation.         Chainable chainable2 =             new Chainable()             .chain()             .chain();          // Same problem with method calls instead of assignments.         // Incorrectly fails indentation         bar(             new Chainable()                 .chain() // Violation: line 28                 .chain()); // Violation: Line 29     }      void bar(Chainable c) {     }      class Chainable {         Chainable chain() {             return this;         }     } }   /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.11-all.jar -c config.xml IndentationWithLineWrappedChainedMethodCalls.java Starting audit... [ERROR] /Users/mwang/code/omm/par/risk-webui/src/main/java/IndentationWithLineWrappedChainedMethodCalls.java:14: '.' has incorrect indentation level 16, expected level should be 12. [Indentation] [ERROR] /Users/mwang/code/omm/par/risk-webui/src/main/java/IndentationWithLineWrappedChainedMethodCalls.java:15: '.' has incorrect indentation level 16, expected level should be 12. [Indentation] [ERROR] /Users/mwang/code/omm/par/risk-webui/src/main/java/IndentationWithLineWrappedChainedMethodCalls.java:28: '.' has incorrect indentation level 16, expected level should be 12. [Indentation] [ERROR] /Users/mwang/code/omm/par/risk-webui/src/main/java/IndentationWithLineWrappedChainedMethodCalls.java:29: '.' has incorrect indentation level 16, expected level should be 12. [Indentation] Audit done. Checkstyle ends with 4 errors. ```  ---------------  Chained method calls that are line wrapped are indented incorrectly when the first line of the chain is itself line wrapped. Difficult to describe, but I think the example code shows it pretty clearly.","open","indentation,","marquiswang","2018-07-11T18:32:14Z","2020-01-24T20:01:53Z"
"","6020","IndentationCheck breaks on wrapped lines in chained methods if the last method is wrapped","``` $ javac IndentationWithChainedFunction.java $  $ cat config.xml                                                           $ cat IndentationWithChainedFunction.java public class IndentationWithChainedFunction {     public static void main(String[] args) {         // Correctly passes Identation         new Chainable()                 .foo(1                         + 1)                 .foo(1                         + 1)                 .foo(1 + 1);          // Incorrectly failed Indentation         new Chainable()                 .foo(1                         + 1) // violation , line 14                 .foo(1                         + 1) // violation , line 16                 .foo(1                         + 1); // violation , line 18          // Incorrectly passes Indentation         new Chainable()                 .foo(1                 + 1) // no violation, but should be                 .foo(1                 + 1) // no violation, but should be                 .foo(1                 + 1); // no violation, but should be     }      static class Chainable {         Chainable foo(int x) {             return this;         }     } }  $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" $ java $RUN_LOCALE -jar checkstyle-8.11-all.jar -c config.xml IndentationWithChainedFunction.java Starting audit... [ERROR] /private/tmp/IndentationWithChainedFunction.java: 14: '+' has incorrect indentation level 24, expected level should be 16. [Indentation] [ERROR] /private/tmp/IndentationWithChainedFunction.java: 16: '+' has incorrect indentation level 24, expected level should be 16. [Indentation] [ERROR] /private/tmp/IndentationWithChainedFunction.java: 18: '+' has incorrect indentation level 24, expected level should be 16. [Indentation] Audit done. Checkstyle ends with 3 errors. ```  ---------------   I've included 3 examples in my code. The first one works correctly - the two chained method calls with line wrapping are indented to 8 characters. The second one fails, including on the two lines that are identical to the first example. The third example passes even though the wrapped lines are not indented correctly.  --------------  Please let me know if there's anything that is unclear!","open","indentation,","marquiswang","2018-07-09T19:27:08Z","2018-07-10T05:49:00Z"
"","6887","SuppressWithPlainTextCommentFilter ignores messageFormat when matching on ID","``` $ cat TestText.sql -- CSOFF tabs 	SELECT * FROM users -- won't warn here if there is a tab character on line -- CSON tabs  $ cat TestConfig.xml                                                                                            $ java -jar checkstyle-8.22-all.jar -c TestConfig.xml TestText.sql Starting audit... Audit done. ```  ---------------  Identified in https://github.com/checkstyle/checkstyle/pull/6876#discussion_r300830774, this is an edge case where if the filter matches on the module ID (`tabs`) rather than the source name (`FileTabCharacterCheck`), the `messageFormat` is ignored.   In the example above, the configured `""NonMatchingMessage""` message format does not match the `""File contains tab characters (this is the first instance).""` message, so the violation should not be suppressed.  Expected output: ``` $ java -jar checkstyle-8.22-all.jar -c TestConfig.xml TestText.sql Starting audit... [WARN] TestText.sql:2:1: File contains tab characters (this is the first instance). [tabs] Audit done. ```","closed","approved,","esilkensen","2019-07-09T14:47:37Z","2019-07-15T12:12:11Z"
"","6818","AnnotationUseStyle does not detect all violations in EXPANDED style","``` $ cat TestClass.java public class TestClass {     @MyAnnotation(@Deprecated) // violation         class Example1 {}         @MyAnnotation({}) // violation         class Example2 {}         @MyAnnotation(@Deprecated()) // violation         class Example3 {}          @interface MyAnnotation {         Deprecated[] value();         } }  $ cat config.xml                             $ java -jar checkstyle-8.20-all.jar -c config.xml TestClass.java Starting audit... Audit done. ```  Expected: violations on lines commented with `// violation`","closed","approved,","strkkk","2019-06-13T07:57:38Z","2019-06-15T19:31:57Z"
"","6847","new check: UnnecessarySemicolonAfterTypeMemberDeclaration","``` $ cat TestClass.java public class TestClass {     int field;; // violation expected     enum A {         C, D;; // violation expected     }; // violation expected      {/*init block*/}; // violation          static {}; // violation      TestClass (){}; // violation      class A{}; // violation      void method(boolean cond){     }; // violation      interface aa{}; //violation      enum aa1{}; // violation      @interface anno {}; // violation  }; // violation  $ cat conf.xml                               $ java -jar checkstyle-8.20-all.jar -c conf.xml Test.java Starting audit... here is violations at lines commented with // violation ```","closed","new module,","strkkk","2019-06-25T09:55:46Z","2019-08-11T18:35:13Z"
"","6875","SuppressWithNearbyCommentFilter does not match messages","``` $ cat TestClass.java package com.puppycrawl.tools.checkstyle.filters.suppresswithnearbycommentfilter;  public class InputSuppressWithNearbyCommentFilter {     public void doit() {         try {             // do it         } catch (RuntimeException e) {             // OK to catch RuntimeException here         }     } }  $ cat TestConfig.xml                                                                                                               $ java -jar checkstyle-8.22-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ```  ---------------  Since the configured message format `""NonMatchingMessage""` does not match `""Catching 'RuntimeException' is not allowed.""`, I don't think this error should be suppressed.  Expected output:  ``` $ java -jar checkstyle-8.22-all.jar -c TestConfig.xml TestClass.java Starting audit... [WARN] TestClass.java:7:11: Catching 'RuntimeException' is not allowed. [IllegalCatch] Audit done. ```  Related issue: https://github.com/checkstyle/checkstyle/issues/3414  The `messageFormat` property is documented (under [SuppressWithPlainTextCommentFilter](https://checkstyle.sourceforge.io/config_filters.html#SuppressWithPlainTextCommentFilter); I assume the same applies here) as: >To configure a filter to suppress Check's violation message **which matches specified message in messageFormat** (so suppression will not be only by Check's name, but also by message text, as the same Check can report violations with different message format)","closed","approved,","esilkensen","2019-07-06T08:39:10Z","2019-07-09T04:23:08Z"
"","6879","SuppressionCommentFilter ignores messageFormat when matching on ID","``` $ cat TestClass.java package com.puppycrawl.tools.checkstyle.filters.suppressioncommentfilter;  public class InputSuppressionCommentFilter {     // CSOFF naming     public int ABC;     // CSON naming }  $ cat TestConfig.xml                                                                                                                                     $ java -jar checkstyle-8.22-all.jar -c TestConfig.xml TestClass.java Starting audit... Audit done. ```  ---------------  Identified in https://github.com/checkstyle/checkstyle/pull/6876#discussion_r300830774, this is an edge case where if the filter matches on the module ID (`naming`) rather than the source name (`MemberName`), the `messageFormat` is ignored.   In the example above, the configured `""NonMatchingMessage""` message format does not match the `""Name 'ABC' must match pattern ...""` message, so the violation should not be suppressed.  Expected output: ``` $ java -jar checkstyle-8.22-all.jar -c TestConfig.xml TestClass.java Starting audit... [WARN] TestClass.java:5:16: Name 'ABC' must match pattern '^[a-z][a-zA-Z0-9]*$'. [naming] Audit done. ```","closed","approved,","esilkensen","2019-07-07T05:36:04Z","2019-07-09T04:17:27Z"
"","6986","Extend plain and xml reports with statistic of violations count based on severity","``` $ cat config.xml                  $ cat Test.java  class T_est {}  $ java -jar checkstyle-8.23-all.jar -f plain -c config.xml Test.java Starting audit... [ERROR] /var/tmp/Test.java:1:7: Name 'T_est' must match pattern '^[A-Z][a-zA-Z0-9]*$'. [TypeName] Audit done. Checkstyle ends with 1 errors.  $ java -jar checkstyle-8.23-all.jar -f xml -c config.xml Test.java > report.xml rivanov@p5510:/var/tmp$ cat report.xml        Checkstyle ends with 1 errors.  $ xmllint report.xml  report.xml:7: parser error : Extra content at the end of the document Checkstyle ends with 1 errors. ^ ```  There are extra line in output of CLI `Checkstyle ends with 1 errors.` that is not belong to xml and plain report. In case of XML it even damage format.  Proposal: make such statistic as part of reports content. Plain will be: ``` Starting audit... {{{ VIOATIONS of with different severities }}} Audit done. Checkstyle ends with X errors Y warnings Z info. ```  XML will be: ```       ```","open","approved,","romani","2019-08-16T17:43:37Z","2019-09-21T14:09:22Z"
"","6893","Generated xpath suppressions should escape xml symbols","``` $ cat checkstyle.xml                                  $ cat Test.java class A {         {                 String a = ""\""escaped\"""" +                 ""that"";                 String b = ""'apos'"" +                 ""2"";         } }  $ java -jar checkstyle-8.20-all.jar -g -c checkstyle.xml Test.java     ----------------------^---------^ here invalid quotes  ----------------------^-----^ here invalid quotes  Checkstyle ends with 2 errors.  ``` Generated xpath is invalid, because apos and quotes should be escaped. Probably. other xml symbols should be escaped as well.  This issue affect string and char literals  Writeup on affected areas that should be fixed can be found at https://github.com/checkstyle/checkstyle/issues/6893#issuecomment-541418449","closed","xpath,","strkkk","2019-07-10T12:05:32Z","2021-03-29T05:51:28Z"
"","6284","Is there any good strategy to satisfy this compute situation ?","```  $ javac Test.java   $ cat config.xmlcat Test.java  import java.io.IOException; public class Test {     private static final int MAX_DIGITS = 10; // log10(Integer.MAX_VALUE) ~= 9.3      /**      * Appends all digits to the given buffer.      *      * @param buffer the buffer to append to.      * @param value the value to append digits from.      */     private static void appendFullDigits(final Appendable buffer, int value, int minFieldWidth) throws IOException {         // specialized paths for 1 to 4 digits -> avoid the memory allocation from the temporary work array         // see LANG-1248         if (value < 10000) {             // less memory allocation path works for four digits or less             int nDigits = 4;             if (value < 1000) {                 --nDigits;                 if (value < 100) {                     --nDigits;                     if (value < 10) {                         --nDigits;                     }                 }             }             // left zero pad             for (int i = minFieldWidth - nDigits; i > 0; --i) {                 buffer.append('0');             }             switch (nDigits) {                 case 4:                     buffer.append((char) (value / 1000 + '0'));                     value %= 1000;                 case 3:                     if (value >= 100) {                         buffer.append((char) (value / 100 + '0'));                         value %= 100;                     } else {                         buffer.append('0');                     }                 case 2:                     if (value >= 10) {                         buffer.append((char) (value / 10 + '0'));                         value %= 10;                     } else {                         buffer.append('0');                     }                 case 1:                     buffer.append((char) (value + '0'));                 default:                     break;             }         } else {             // more memory allocation path works for any digits              // build up decimal representation in reverse             final char[] work = new char[MAX_DIGITS];             int digit = 0;             while (value != 0) {                 work[digit++] = (char) (value % 10 + '0');                 value = value / 10;             }              // pad with zeros             while (digit < minFieldWidth) {                 buffer.append('0');                 --minFieldWidth;             }              // reverse             while (--digit >= 0) {                 buffer.append(work[digit]);             }         }     } }  /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar  checkstyle-8.15-all.jar -c config.xml Test.java Starting audit... [ERROR] /media/gwd/UBUNTU/home/gwd/Projects/Debug/Test.java:42:17: Fall through from previous branch of the switch statement. [FallThrough] [ERROR] /media/gwd/UBUNTU/home/gwd/Projects/Debug/Test.java:49:17: Fall through from previous branch of the switch statement. [FallThrough] [ERROR] /media/gwd/UBUNTU/home/gwd/Projects/Debug/Test.java:56:17: Fall through from previous branch of the switch statement. [FallThrough] [ERROR] /media/gwd/UBUNTU/home/gwd/Projects/Debug/Test.java:58:17: Fall through from previous branch of the switch statement. [FallThrough] Audit done. Checkstyle ends with 4 errors.  ```    `Wanted to do a compute work, appendFullDigits. But, with no idea about FaillThrough error about switch case. Just want the switch codes could do that work. when the code found the case, will continue the next case. Is there any strategy to do this work about checkstyle. May be refer: https://github.com/checkstyle/checkstyle/issues/2229`","closed","","gwdgithubnom","2018-12-14T12:51:06Z","2018-12-14T14:30:16Z"
"","6915","InnerAssignment: false positives on for and do-while loops","_Originally posted by @romani in https://github.com/checkstyle/checkstyle/pull/6886_  from https://checkstyle.org/config_coding.html#InnerAssignment > Rationale: With the exception of for iterators and assignment in while idiom  ``` $ cat config.xml                  $ cat Test.java  import java.io.Reader; import java.io.IOException;  class Test {   public void foo(Reader reader) throws IOException {     int value;     while ((value = reader.read()) != 0) { // OK, no violation is expected       // process     }      do {       // process     } while ((value = reader.read()) != 0);  // violation, but no expected      for (;(value = reader.read()) != 0;) {  // violation, but no expected       // process     }   } }  $ java -jar checkstyle-8.23-all.jar -c config.xml Test.java Starting audit... [ERROR] Test.java:13:21: Inner assignments should be avoided. [InnerAssignment] [ERROR] Test.java:15:18: Inner assignments should be avoided. [InnerAssignment] Audit done. Checkstyle ends with 2 errors. ```  Expected:  no violations in all cases of loop.   ATTENTION: After fix, doc should be  updated to name idion it as `Loop-idiom`  and make tests for FOR/do_while too.","closed","approved,","strkkk","2019-07-22T07:13:32Z","2020-11-22T14:57:34Z"
"","6734","ClassFanOutComplexityCheck / AbstractClassCouplingCheck defaultExcludedClasses override include defaults","[ClassFanOutComplexityCheck](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassFanOutComplexityCheck.java)   Looking at the implementation of [AbstractClassCouplingCheck](https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java), when one overrides the excludedClasses, the default ones are not concatenated by design.  Would by default including the default list not make sense here? We found this counter intuitive to be honest and had to dive into the source code  The alternative is using the regex off course.","closed","","wvdhaute","2019-05-08T09:55:22Z","2019-05-27T15:32:54Z"
"","6582","AbbreviationAsWordInName: static final option","[AbbreviationAsWordInName](http://checkstyle.sourceforge.net/config_naming.html#AbbreviationAsWordInName) allows skipping either `static` or `final` variables but not `static final` as per https://google.github.io/styleguide/javaguide.html#s5.2.4-constant-names.  Currently, there is no way to enforce rule `AbbreviationAsWordInName` for everything except `static final` variables.  Given:  ``` > cat Test.java  public class Test {     public int AAAA = 1;              // line 2     public final int BBBB = 2;        // line 3     public static int CCCC = 3;       // line 4     public static final int DDDD = 4; // line 5 } ```  we would like to print a Checkstyle violation for lines 2-4, which currently we cannot. The following is the current behaviour:  ``` > cat config1.xml                                                              > java -jar checkstyle-8.18-all.jar -c config1.xml Test.java  Starting audit... [ERROR] C:\Development\home\checkstyle\Test.java:2: Abbreviation in name 'AAAA' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] C:\Development\home\checkstyle\Test.java:3: Abbreviation in name 'BBBB' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] Audit done. Checkstyle ends with 2 errors. ```  ``` > cat config2.xml                                                              > java -jar checkstyle-8.18-all.jar -c config2.xml Test.java  Starting audit... [ERROR] C:\Development\home\checkstyle\Test.java:2: Abbreviation in name 'AAAA' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] C:\Development\home\checkstyle\Test.java:4: Abbreviation in name 'CCCC' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] Audit done. Checkstyle ends with 2 errors. ```  ``` > cat config3.xml                                                                           > java -jar checkstyle-8.18-all.jar -c config3.xml Test.java  Starting audit... [ERROR] C:\Development\home\checkstyle\Test.java:2: Abbreviation in name 'AAAA' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] C:\Development\home\checkstyle\Test.java:3: Abbreviation in name 'BBBB' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] C:\Development\home\checkstyle\Test.java:4: Abbreviation in name 'CCCC' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] C:\Development\home\checkstyle\Test.java:5: Abbreviation in name 'DDDD' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] Audit done. Checkstyle ends with 4 errors. ```  My proposal is to add a new option `ignoreStaticFinal` to `AbbreviationAsWordInName` in order to cater for this case. This will allow Checkstyle to enforce https://google.github.io/styleguide/javaguide.html#s5.2.4-constant-names.  ``` > cat config4.xml                                                                                        > java -jar checkstyle-8.18-SNAPSHOT-all.jar -c config4.xml Test.java  Starting audit... [ERROR] C:\Development\home\checkstyle\Test.java:2: Abbreviation in name 'AAAA' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] C:\Development\home\checkstyle\Test.java:3: Abbreviation in name 'BBBB' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] [ERROR] C:\Development\home\checkstyle\Test.java:4: Abbreviation in name 'CCCC' must contain no more than '1' consecutive capital letters. [AbbreviationAsWordInName] Audit done. Checkstyle ends with 3 errors. ```","closed","new feature,","joca-bt","2019-03-17T11:08:30Z","2020-04-18T19:34:33Z"
"","6356","Xpath: change implementation of the @text attribute","@romani @rnveach   Followed by [Issue#6240](https://github.com/checkstyle/checkstyle/issues/6240) and [Issue#6115](https://github.com/checkstyle/checkstyle/issues/6115)  Current implementation does not allow us to query elements by their values. For example, we want to query the following variable ``` $ cat TestClass.java class TestClass {   String country = ""Kazakhstan""; }  $ java -jar checkstyle-8.15-all.jar -t TestClass.java CLASS_DEF -> CLASS_DEF [1:0] |--MODIFIERS -> MODIFIERS [1:0] |--LITERAL_CLASS -> class [1:0] |--IDENT -> TestClass [1:6] `--OBJBLOCK -> OBJBLOCK [1:16]     |--LCURLY -> { [1:16]     |--VARIABLE_DEF -> VARIABLE_DEF [2:2]     |   |--MODIFIERS -> MODIFIERS [2:2]     |   |--TYPE -> TYPE [2:2]     |   |   `--IDENT -> String [2:2]     |   |--IDENT -> country [2:9]     |   |--ASSIGN -> = [2:17]     |   |   `--EXPR -> EXPR [2:19]     |   |       `--STRING_LITERAL -> ""Kazakhstan"" [2:19]     |   `--SEMI -> ; [2:31]     `--RCURLY -> } [3:0] ``` We can query variable by its name `country` (`//VARIABLE_DEF[@text='country']`), but we cannot query it by its value `Kazakhstan`.  New implementation will make it possible to query by name and by value Example xpath queries for previous variable: ``` By name: //VARIABLE_DEF[./IDENT[@text='country']] By value: //VARIABLE_DEF[.//STRING_LITERAL[@text='Kazakhstan']] ```  Migration note: for migration of xpath queries please look at https://github.com/checkstyle/checkstyle/commit/a1cd7a5600843dd25318cb66cb7253be1c183a8c for bunch of examples.","closed","breaking compatibility,","timurt","2019-01-08T10:04:35Z","2019-03-28T15:12:15Z"
"","6682","Indentation properties not applied properly to lambdas","@rnveach In below example, it passed the first lamda, but failed at the second. Using google_checks, version=8.16  ``` import java.time.Instant; import java.util.UUID; import java.util.function.Supplier;  import lombok.extern.slf4j.Slf4j;  @Slf4j public class LazyLog {   public static void main(String[] args) {     info(""arg1 = {}, arg2 = {}"", () -> {       System.out.println(Instant.now().toString() + "" constructing arg 1"");       return UUID.randomUUID();     }, () -> {       System.out.println(Instant.now().toString() + "" constructing arg 2"");       return UUID.randomUUID();     });   }    @SafeVarargs   private static void info(final String message, final Supplier... suppliers) {     if (log.isInfoEnabled()) {       Object[] args = new Object[suppliers.length];       for (int i = 0; i < suppliers.length; i++) {         args[i] = suppliers[i].get();       }       log.info(message, args);     }   } } ```","closed","indentation,","zenglian","2019-04-20T15:53:00Z","2019-04-21T05:23:26Z"
"","6291","minor: remove Check suffix in SuppressionXpathFilter Description","@pbludov , fyi.","closed","","romani","2018-12-16T20:29:07Z","2018-12-16T22:12:05Z"
"","6118","IllegalType should check extends & implements and class/interface type parameters","/var/tmp $ javac TestClass.java  /var/tmp $ cat config.xml ```         		 			 		       ``` /var/tmp $ cat TestClass.java ``` class TestClass extends BadClass implements EvilInterface { } ``` /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java #[[PLACE YOUR OUTPUT HERE]] ``` Starting audit... Audit done. ```  Two violations are expected. Rationale: give a hint to the user to switch to some other implementation. A kind of `@Deprecated` for a third party library.","closed","new feature,","pbludov","2018-09-15T10:05:30Z","2018-10-23T20:37:59Z"
"","6332","Java9: try-with-resources should accept fields","/var/tmp $ javac -version ``` javac 11 ```  /var/tmp $ javac TestClass.java (no output)  /var/tmp $ cat TestClass.java ``` public class TestClass {     final AutoCloseable closable = () -> {};      public void method(TestClass cls) throws Exception {         try (closable) { // OK         }         try (cls.closable) { // Fails here         }         try (this.closable) { // And here         }     } } ``` /var/tmp $ RUN_LOCALE=""-Duser.language=en -Duser.country=US"" /var/tmp $ java $RUN_LOCALE -jar checkstyle-8.16-all.jar -t TestClass.java ``` Starting audit... /home/pbludov/src/tmp/TestClass.java:7:26: expecting IDENT, found ')' Audit done. ``` JDK11 parser [grammar](http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java#l3035): ```     /** Resource = VariableModifiersOpt Type VariableDeclaratorId ""="" Expression      *           | Expression      */ ```  Checkstyle [grammar](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/grammar/java.g#L1216): ``` resource     : IDENT       | modifiers typeSpec[true] IDENT resource_assign       {#resource = #([RESOURCE, ""RESOURCE""], #resource);} ; ```  -------","closed","has bounty,","pbludov","2018-12-30T13:19:00Z","2020-05-04T18:14:00Z"
"","6780","Custom message and default message are both displayed","---------------  configuration for rule with a custom message: ```                                     ```  The expected output ``` [ERROR] src/main/java/com/.....java:[40,33] (naming) ConstantName: Member 'myselfConstant' must start with a lowercase letter followed by any letters or digits  (checked pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'). ```  The current output ``` [ERROR] src/main/java/com/....java:[40,33] (naming) ConstantName: Member 'myselfConstant' must start with a lowercase letter followed by any letters or digits  (checked pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'). [ERROR] src/main/java/com/....java:[40,33] (naming) ConstantName: Name 'myselfConstant' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'. ``` --------------","closed","","dwightmulcahy","2019-05-23T21:40:02Z","2019-05-23T22:59:45Z"
"","6514","Issue #6563: Fix Invalid Doc","- re-enable maven-site-plugin validation as underlying problem was fixed in xml-maven-plugin 1.0.2 - fix invalid markup  Fixes #6563","closed","","Vampire","2019-03-06T02:04:07Z","2019-03-17T22:59:18Z"
"","6511","Improve Test Reliability","- make tests work more reliably on Windows    If Git is used without modifying line endings, you have   Linux line endings on Windows too. The tests assumed that   on Windows the files have Windows line endings.   With this commit, it works properly with both.  - run tests with English locale and UTF-8 encoding    This improves reliability of tests, as for example on a German Windows system   the tests break without this because of encoding of error messages.  - reset the test stream for each test    Without the reset, the stream fills with ""Audit done."" messages   and the real unexepcted message does not get print in the failure message.","closed","","Vampire","2019-03-05T23:55:41Z","2019-03-11T10:28:28Z"
"","6471","Documentation of EqualsHashCode","- In the JavaDoc of `isEqualsMethod` `{code ast}` should be `{@code ast}` - In the JavaDoc of `isHashCodeMethod` `{code ast}` should be `{@code ast}` - In http://checkstyle.sourceforge.net/config_coding.html#EqualsHashCode `Object.equals(Object)}` should be `Object.equals(Object)` - In http://checkstyle.sourceforge.net/config_coding.html#EqualsHashCode at least to me it is a bit unclear what you mean with the sentence `This checks only verifies that the method declarations match Object.equals(Object)} and Object.hashCode() exactly to be considered an override. This check does not verify invalid method names, parameters other than Object, or anything else.`, could you elaborate a little bit more on it? What else could be checked than the signature? What is meant with invalid method names? Parameter list and types are checked, so that is meant with the last part?","open","","Vampire","2019-02-24T13:15:15Z","2019-02-24T13:15:15Z"
"","6820","config: remove oracle9 configuration from travis ci","* OracleJdk9 build removed; * javac9 build switched to openjdk9.","closed","","pbludov","2019-06-13T19:36:43Z","2019-06-13T22:13:08Z"
"","6451","MissingDeprecated description has a typo","> When this property is set to true check ignore cases when JavaDoc is missing, but still warns when JavaDoc is present but either `@deprecated` is missing from JavaDoc or `@deprecated` is missing from the element.  should be  > When this property is set to true check ignore cases when JavaDoc is missing, but still warns when JavaDoc is present but either `@deprecated` is missing from JavaDoc or `@Deprecated` is missing from the element.","closed","miscellaneous,","Vampire","2019-02-22T15:08:12Z","2019-03-01T05:52:14Z"
"","6630","config: upgrade pitest to 1.4.6","> upgrade to ASM 7.1 Ant support for testPlugin and failWhenNoMutations Allow empty elements in maven configuration","closed","","rnveach","2019-04-03T20:39:23Z","2019-04-03T22:29:03Z"
"","6201","NestedTryDepth false-positive","$ cat TestClass.java ```java public class TestClass {     void method() {         try (var output = new PipedOutputStream()) {             qwe(() -> {                 try (var input = new PipedInputStream(output)) {                     try {                         bar(input);                     } finally {                         baz(input);                     }                 }             });         }     }      void bar(PipedInputStream input) {     }      void baz(PipedInputStream input) {     } } ```  $ cat TestConfig.xml ```xml                              ```  $ java -jar checkstyle-8.14-all.jar -c TestConfig.xml TestClass.java ``` Starting audit... [ERROR] /home/boris/TestClass.java:6:41: Nested try depth is 2 (max allowed is 1). [NestedTryDepth] Audit done. Checkstyle ends with 1 errors. ```  I think this should be considered as a bug - there is no way to rewrite this without a nested `try`. Note that if you remove the outermost `try` and the `qwe` method call - then the bug disappears.","closed","","boris-petrov","2018-11-07T11:00:48Z","2018-11-07T15:23:02Z"
"","6993","Issue #6991: Make test on file that have no read access but has write acces","#6991","closed","","romani","2019-08-21T00:28:44Z","2019-08-25T18:38:06Z"
"","6963","Issue #6934: fix suppression generation with custom output location","#6934 fix","closed","","strkkk","2019-08-10T19:56:40Z","2021-01-29T11:41:37Z"
"","6962","Issue #6916: migrate integration tests to junit5","#6916 it tests migration","closed","","strkkk","2019-08-09T19:25:20Z","2021-01-29T11:41:34Z"
"","6880","Issue #6858: Remove TreeWalker#validateDefaultTokens","#6858","closed","","strkkk","2019-07-07T20:13:24Z","2019-07-09T06:55:25Z"
"","6856","config: define explicitly dist version for Travis, to address #6851","#6851","closed","","romani","2019-06-27T05:44:54Z","2019-06-29T03:50:52Z"
"","6852","Issue #6848: add xpath regression test for UnnecessarySemicolonInTryW…","#6848","closed","","strkkk","2019-06-26T15:13:03Z","2021-01-29T11:41:49Z"
"","6851","Issue #6848: add xpath regression test for UnnecessarySemicolonInEnum…","#6848","closed","","strkkk","2019-06-26T14:08:11Z","2021-01-29T11:41:48Z"
"","6888","Issue #6847: Add UnnecessarySemicolonAfterTypeMemberDeclarationCheck","#6847  Old reg report: https://strkkk.github.io/6752/ Current reg report: https://strkkk.github.io/6752_2/ contrib PR - https://github.com/checkstyle/contribution/pull/392","closed","","strkkk","2019-07-09T15:39:08Z","2021-01-29T11:41:41Z"
"","6860","Issue #6845: add resource recognition to RequireThis","#6845","closed","abandoned,","Kiena","2019-06-28T00:40:43Z","2019-08-04T01:01:43Z"
"","6838","Issue #6835: bump sevntu version","#6835","closed","","romani","2019-06-20T05:18:37Z","2019-06-20T21:38:04Z"
"","6822","Issue #6821: update IDEA config to resolve 'JUnit test method withoutany assertions' violations","#6821 .  Example of violation: ``` src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename OuterTypeFilenameTest.java (3) 39: testOuterTypeFilename1() JUnit test method testOuterTypeFilename1() contains no assertions  ```","closed","","romani","2019-06-15T17:40:52Z","2019-06-16T03:28:07Z"
"","6823","Issue #6821: resolve 'Simplifiable JUnit assertion'","#6821   Below are violation, BUT after a fix a realized that assert become harder to read. When it was ""AssertTrue"" .... you simply read message and move further to condition and expresson like `!sectionName.endsWith(""Check"")` is easy to read as `not sectionName endsWith(""Check"")` You do not need to remember what was in the beginning of AssertTrue or AssertFalse.  Your reading is simple, last expression should be TRUE, `!` is located very close to expression so it is easy to interpretate it.  BUT  after a fix, you have to pay attention to type of assertion, as it might be negative `AssertFalse`, so last expression should be interpretated with caution, and negative sign is located too far from expression. This become more the issue as we use messages in each assert, so  `AssertFalse(sectionName.endsWith(""Check""))` is not same as ``` AssertFalse(fileName + "" section '"" + sectionName                         + ""' shouldn't end with 'Check'"", sectionName.endsWith(""Check"")) ``` ======  I am in favor to disable this condition, in our case it make code hard to read. Before I will do this, please read this PR, and lets discuss.  ======  Voilations: src/test/java/com/puppycrawl/tools/checkstyle/internal AllTestsTest.java (2) 52: testAllInputsHaveTest() assertTrue() can be simplified to 'assertFalse()'  70: testAllTestsHaveProductionCode() assertTrue() can be simplified to 'assertFalse()'  XdocsPagesTest.java (3) 422: testAllCheckSections() assertTrue() can be simplified to 'assertFalse()'  595: validatePropertySection() assertTrue() can be simplified to 'assertFalse()'  1595: validateStyleModules() assertTrue() can be simplified to 'assertFalse()'","closed","","romani","2019-06-15T17:54:24Z","2019-06-16T18:14:39Z"
"","6828","Issue #6821: idea violations java2","#6821","closed","","romani","2019-06-16T03:55:28Z","2019-06-16T18:18:48Z"
"","6826","Issue #6821: remove IDEA suppressions fix for violation 'Redundant suppression'","#6821","closed","","romani","2019-06-16T03:44:05Z","2019-06-16T18:16:36Z"
"","6824","6821 idea violations java","#6821","closed","","romani","2019-06-16T03:25:11Z","2019-06-16T03:56:13Z"
"","6806","Issue #6818: fix expanded style in AnnotationUseStyleCheck","#6818 also removes usage ob branchContains for #5124  Report - https://strkkk.github.io/5124_anno/","closed","","strkkk","2019-06-06T12:04:20Z","2019-06-15T20:08:27Z"
"","6886","Issue #6805: fix false-positive in while idiom for InnerAssingmentCheck","#6805 Reg report: https://strkkk.github.io/6805/","closed","","strkkk","2019-07-09T12:31:29Z","2019-07-23T12:47:53Z"
"","6842","Issue #6804: redirect sourceforge.io dtds to checkstyle.org site","#6804 final fix","closed","","romani","2019-06-22T06:39:36Z","2019-06-22T15:28:50Z"
"","6831","6804 https sourceforge","#6804   PR it does not fix issue but just do prestep. bluej site is removed, as it is dead project, I do not want complicate regexp to keep it.   should be merged only when http://checkstyle.sourceforge.net/ become redirected to https  nothing works on sourceforge , waiting for conversion to http, support ticket is shared in issue.","closed","","romani","2019-06-18T05:09:00Z","2019-06-22T06:40:16Z"
"","6832","Issue #6790: add treatTryResourcesAsStatement property to OneStatementPerLine","#6790 Report https://strkkk.github.io/6790/","closed","","strkkk","2019-06-18T08:10:24Z","2021-01-29T11:41:56Z"
"","6799","Issue #6774: Add UnnecessarySemicolonInTryWithResourcesCheck","#6774  Contribution repo PR  https://github.com/checkstyle/contribution/pull/378  Reg. report https://strkkk.github.io/6774/index.html","closed","","strkkk","2019-06-03T12:33:18Z","2021-01-29T11:41:54Z"
"","6782","Issue #6773: Add UnnecessarySemicolonInEnumerationCheck","#6773","closed","","strkkk","2019-05-26T15:15:48Z","2021-01-29T11:41:08Z"
"","6994","Issue #6771: update some 'error' to 'violation' and 'audit event'","#6771  it is not all, too much ""error"", I just did some.  We have big mess in terminology, following are kind of terms that are used: Audit Event - name of class Violation - I like this term Error - some time it is violation of error severity BUT we have Error in meaning of problem of exception like Exception - exception reporting from Checkstyle.","closed","","romani","2019-08-21T02:03:35Z","2019-08-24T13:15:00Z"
"","6798","Issue #6705: Add MissingJavadocPackageCheck","#6705 Contribution PR - https://github.com/checkstyle/contribution/pull/377 Reg report: https://strkkk.github.io/6705/index.html","closed","","strkkk","2019-06-03T08:59:38Z","2021-01-29T11:41:51Z"
"","6830","Issue #6680: fixed CustomImportOrder regression introduced by #3551","#6680  ~1. restore the previous behavior of CustomImportOrder before #3551~ ~2. add test cases for CommonUtil.getCountOfEmptyLinesBefore()~ ~3. slightly changed logic of CommonUtil.getCountOfEmptyLinesBefore() to parse mutation tests~  1. Fixed unexpected violation for extra empty line between package and import 2. Added test cases for CustomImportOrder#getCountOfEmptyLinesBefore(int, String[]) 3. Added test cases to prevent future regression","closed","","gmshake","2019-06-17T11:13:56Z","2019-09-29T12:07:32Z"
"","6343","Issue: #6311 new check: OrderedProperties","#6311   The OrderedProperties Check is almost ready.  There are the following open issues: - builds only with: mvn package -Dcheckstyle.ant.skip=true -Dcheckstyle.skip=true -DskipTests -- I need help with failure: XdocsPagesTest.testAllCheckSections:356->validateCheckSection:451->validateParentSection:1300 config_misc.xml section 'OrderedProperties' should have matching parent expected: but was:","closed","","thomassenger","2019-01-03T09:58:43Z","2019-05-24T17:48:58Z"
"","6245","Issue #6241: allow disablement of ClassWithTooManyDependents inspection","#6241   it does not work for my local IDEA, if still be an issue on remote, I will open issue on IDEA and disable inspection.  the same problem is with violations like: ``` Modularization issues Class independent of its module AllTestsTest.java Class 'AllTestsTest' has no dependencies or dependents in its module ```","closed","","romani","2018-12-02T21:48:05Z","2018-12-02T22:37:38Z"
"","6244","Issue #6241: temporary disable 'unused' inspection, till IDEA-203421","#6241","closed","","romani","2018-12-02T21:30:06Z","2018-12-02T22:22:41Z"
"","6215","Issue #6213: warning during build of site with equalsverifier-3.0.2","#6213","closed","","romani","2018-11-16T20:47:56Z","2018-11-17T03:43:31Z"
"","6211","Issue #6175: bump picocli to 3.8.0","#6175  ``` $ java -jar checkstyle-8.15-SNAPSHOT-all.jar --help Usage: checkstyle [-dghjJtTV] [--executeIgnoredModules] [--tabWidth=]                   [-c=] [-C=] [-f=]                   [-o=] [-p=] [-s=]                   [-W=] [-e=]... [-x=]... ... Checkstyle verifies that the specified source code files adhere to the specified rules. By default errors are reported to standard out in plain format. Checkstyle requires a configuration XML file that configures the checks to apply.       ...            One or more source files to verify       --executeIgnoredModules                             Allows ignored modules to be run.       --tabWidth= Sets the length of the tab character. Used only with ""-s"" option. Default                               value is 8   -c=    Sets the check configuration file to use.   -C, --checker-threads-number=                             (experimental) The number of Checker threads (must be greater than zero)   -d, --debug               Print all debug logging of CheckStyle utility   -e, --exclude=   Directory path to exclude from CheckStyle   -f=               Sets the output format. Valid values: xml, plain. Defaults to plain   -g, --generate-xpath-suppression                             Generates to output a suppression.xml to use to suppress all violations from                               user's config   -h, --help                Show this help message and exit.   -j, --javadocTree         Print Parse tree of the Javadoc comment   -J, --treeWithJavadoc     Print full Abstract Syntax Tree of the file   -o=           Sets the output file. Defaults to stdout   -p=       Loads the properties file   -s=                             Print xpath suppressions at the file's line and column position. Argument is                               the line and column number (separated by a : ) in the file that the                               suppression should be generated for   -t, --tree                Print Abstract Syntax Tree(AST) of the file   -T, --treeWithComments    Print Abstract Syntax Tree(AST) of the file including comments   -V, --version             Print version information and exit.   -W, --tree-walker-threads-number=                             (experimental) The number of TreeWalker threads (must be greater than zero)   -x, --exclude-regexp=                             Regular expression of directory to exclude from CheckStyle ```","closed","","romani","2018-11-15T08:24:04Z","2018-11-16T21:40:39Z"
"","6267","IllegalType extends check is too strict","#6118 introduced checking for illegal types in extends/implements.  The problem is that code like the following is a common way to work around Java generics type erasure:  ```java public class StringFooMap 	extends HashMap {} ```  See [this Jackson issue](https://github.com/FasterXML/jackson-databind/issues/1606#issuecomment-294570555) for an example.  It would be nice if you could add an option to disable checking of extends.  ```` $ cat TestClass.java public class StringFooMap     extends HashMap {}  $ cat TestConfig.xml                         $ java -jar checkstyle-8.15-all.jar -c TestConfig.xml TestClass.java Starting audit... [ERROR] TestClass.java:2:13: Usage of type 'HashMap' is not allowed. [IllegalType] Audit done. Checkstyle ends with 1 errors. ````","closed","","huxi","2018-12-10T13:57:58Z","2019-01-30T13:52:11Z"
"","6078","Issue #6077: cache decoration-1.0.0.xsd file in our repo","#6077","closed","","romani","2018-08-11T00:03:05Z","2018-08-12T13:46:04Z"
"","6047","Issue #6046: fix link to linux.words file","#6046  This doesn't fix issue, it is just workaround.","closed","","romani","2018-07-23T10:34:24Z","2018-07-23T11:29:21Z"
"","6370","Spelling error handling","#6021","closed","","jsoref","2019-01-11T06:29:36Z","2019-01-13T00:24:54Z"
"","6369","Issue #6021: treat pipeline failures for spellchecker as fatal errors","#6021","closed","","jsoref","2019-01-10T22:09:41Z","2019-01-16T16:42:31Z"
"","6030","Issue #6014: added subsection anchors to xdoc","#6014","closed","","rnveach","2018-07-12T01:10:14Z","2018-07-13T12:13:58Z"
"","6002","Issue #6001: print no version if it is null","#6001","closed","","romani","2018-07-05T08:15:33Z","2018-07-05T15:51:26Z"
"","6368","Issue #5879: Suppression xpath single filter","#5879","closed","","tsunghanjacktsai","2019-01-10T20:36:48Z","2019-02-07T13:27:11Z"
"","6172","Issue #5879: Suppression xpath single filter","#5879","closed","","tsunghanjacktsai","2018-10-27T22:52:43Z","2019-01-10T20:33:21Z"
"","6084","Issue #5832: Code samples for Naming Checks","#5832   The CLI test for the case:  ``` Jack@Jack MINGW64 ~/Documents/tmp (master) $ javac TestCatchParameterNameCheck.java  Jack@Jack MINGW64 ~/Documents/tmp (master) $ cat config.xml                                    Jack@Jack MINGW64 ~/Documents/tmp (master) $ cat TestCatchParameterNameCheck.java class FirstException extends Exception {} class SecondException extends Exception {} class ThirdException extends Exception {}  public class TestCatchParameterNameCheck {   public void MyTest() {     String str = null;     try {       if (str.equals(""1"")) {         throw new FirstException();       } else if (str.equals(""2"")) {         throw new SecondException();       } else {         throw new ThirdException();       }     } catch (FirstException ex) { // OK       // ...     } catch (SecondException ex2) { // OK       // ...     } catch (ThirdException thirdException) { // OK       // ...     }   } } Jack@Jack MINGW64 ~/Documents/tmp (master) $ RUN_LOCALE=""-Duser.language=en -Duser.country=US""  Jack@Jack MINGW64 ~/Documents/tmp (master) $ java $RUN_LOCALE -jar checkstyle-8.11-all.jar -c config.xml TestCatchParameterNameCheck.java Starting audit... Audit done. ```  Please have a check. I have done whole mvn verify test locally and it shows that I didn't got any error for this case. However, the CI test still told me that it has the LifecycleExecutionException. Could you please tell me why this exception keep showing up?","closed","","tsunghanjacktsai","2018-08-14T18:30:07Z","2018-08-17T17:58:35Z"
"","6779","Issue #5832: Add javadoc and xdoc Example for PackageName","#5832","closed","","tsunghanjacktsai","2019-05-23T18:27:19Z","2019-05-25T05:48:36Z"
"","6778","Issue #5832: Add javadoc and xdoc Example for MethodTypeParameterName","#5832","closed","","tsunghanjacktsai","2019-05-23T17:57:10Z","2019-05-25T05:44:43Z"
"","6697","Issue #5832: Add javadoc and xdoc Example for MemberName","#5832","closed","","tsunghanjacktsai","2019-04-27T11:43:54Z","2019-05-10T03:22:24Z"
"","6434","Issue #5832: Add javadoc and xdoc Example for LocalVariableName","#5832","closed","","tsunghanjacktsai","2019-02-18T14:51:15Z","2019-03-05T13:11:14Z"
"","6431","Issue #5832: Add javadoc and xdoc Example for LocalFinalVariableName","#5832","closed","","tsunghanjacktsai","2019-02-18T02:07:01Z","2019-02-19T01:50:37Z"
"","6426","Issue #5832: Add javadoc and xdoc Example for InterfaceTypeParameterName","#5832","closed","","tsunghanjacktsai","2019-02-14T15:52:36Z","2019-02-18T14:31:33Z"
"","6425","Issue #5832: Add javadoc and xdoc Example for ConstantName","#5832","closed","","tsunghanjacktsai","2019-02-14T12:41:17Z","2019-02-17T20:32:09Z"
"","6408","Issue #5832: Add javadoc and xdoc Example for MethodName","#5832","closed","","tsunghanjacktsai","2019-02-07T13:26:43Z","2019-02-13T13:17:29Z"
"","6105","Issue #5832: Add javadoc and xdoc Example for ClassTypeParameterName","#5832","closed","","tsunghanjacktsai","2018-09-03T15:36:42Z","2018-10-17T09:06:11Z"
"","6103","Issue #5832: Add javadoc and xdoc Example for AbstractClassName","#5832","closed","","tsunghanjacktsai","2018-09-02T15:58:30Z","2018-10-17T09:06:03Z"
"","6102","Issue #5832: Add javadoc and xdoc Example for AbbreviationAsWordInName","#5832","closed","","tsunghanjacktsai","2018-09-01T16:57:37Z","2018-10-17T09:05:51Z"
"","6086","Issue #5832: Add javadoc and xdoc Example for CatchParameterName","#5832","closed","","tsunghanjacktsai","2018-08-17T18:35:35Z","2018-10-17T09:05:22Z"
"","6114","minor: correct xdoc to reflect actual behavior of CustomImportOrder","#5304","closed","","romani","2018-09-13T15:18:06Z","2018-09-16T03:20:51Z"
"","6811","Issue #5124: remove branchContains for OneStatementPerLineCheck","#5124  Reg report (no differences) - https://strkkk.github.io/5124_one_statement/","closed","","strkkk","2019-06-09T11:53:49Z","2021-01-29T11:41:12Z"
"","6904","Issue #5008: Increased coding pitest coverage to 100%","#5008  HiddenFieldCheck.java:278: Removed unused call. It was always called with LPAREN, the actual params are handled by visitToken with PARAMETER_DEF.  MultipleVariableDeclarationsCheck.java:124: Cleaned up method since the AST is sorted.   RequireThisCheck.java:454: Removed check for method call since these has already been handled by parentType == METHOD_CALL in processIdent prior to handling field.","closed","","eorloff","2019-07-15T11:19:17Z","2019-07-17T01:40:07Z"
"","6983","Issue #4763: fix empty statement for comment under package","#4763  Reg report: https://strkkk.github.io/4763/","closed","","strkkk","2019-08-16T09:02:27Z","2019-09-03T10:39:13Z"
"","6840","Issue #4383: add ignoreAnnotationElementDefaults property in MagicNumber","#4383  Reg report: https://strkkk.github.io/4383/","closed","invalid,","strkkk","2019-06-20T09:48:18Z","2019-07-02T18:22:48Z"
"","6894","Issue #3837: report lambda with no braces when contents span multiple lines","#3837 Fix + changes to resolve violations in checkstyle code. Reg report https://strkkk.github.io/3837/","closed","","strkkk","2019-07-11T10:12:27Z","2021-01-29T11:41:43Z"
"","6803","Issue #3210: fix compact_no_array in AnnotationUseStyleCheck","#3210  Reg. report: https://strkkk.github.io/3210/","closed","","strkkk","2019-06-04T13:01:53Z","2019-06-14T14:16:16Z"
"","6846","Issue #120: Add PreferMethodReferenceCheck","#120  Reg report - https://strkkk.github.io/120/ Contrib PR - https://github.com/checkstyle/contribution/pull/384","closed","awaiting changes,","strkkk","2019-06-25T09:41:58Z","2019-08-11T19:28:19Z"
"","6998","[Snyk] Fix for 1 vulnerable dependencies","#### Description This PR fixes one or more vulnerable packages in the `maven` dependencies of this project. See the [Snyk test report](https://app.snyk.io/org/checkstyle/test/github/7925c77b-98f3-4e70-93eb-5015337e58db/master..snyk-fix-6d506a6a5b19d6c1830073756efe7c8d) for more details.  #### Snyk Project: [checkstyle/checkstyle:pom.xml](https://app.snyk.io/org/checkstyle/project/7925c77b-98f3-4e70-93eb-5015337e58db) #### Snyk Organization: [checkstyle](https://app.snyk.io/org/checkstyle)   #### Changes included in this PR  - Changes to the following files to upgrade the vulnerable dependencies to a fixed version:     - pom.xml   #### Vulnerabilities that will be fixed ##### With an upgrade:   - `pom.xml`       - `commons-beanutils:commons-beanutils@1.9.3 > commons-beanutils:commons-beanutils@1.9.4`            - [Deserialization of Untrusted Data](https://snyk.io/vuln/SNYK-JAVA-COMMONSBEANUTILS-460111)    You can read more about Snyk's upgrade and patch logic in [Snyk's documentation](https://snyk.io/docs/using-snyk/).  Check the changes in this PR to ensure they won't cause issues with your project.  Stay secure, The Snyk team  _**Note**: You are seeing this because you or someone else with access to this repository has authorised Snyk to open Fix PRs. To review the settings for this Snyk project please go to the [project settings page](https://app.snyk.io/org/checkstyle/project/7925c77b-98f3-4e70-93eb-5015337e58db/settings)._  [//]: # (snyk:metadata:{""type"":""auto"",""packageManager"":""maven"",""vulns"":[""SNYK-JAVA-COMMONSBEANUTILS-460111""],""patch"":[],""upgrade"":[""SNYK-JAVA-COMMONSBEANUTILS-460111""],""isBreakingChange"":false,""env"":""prod"",""dependencies"":[{""name"":""commons-beanutils:commons-beanutils"",""from"":""1.9.3"",""to"":""1.9.4""}],""prType"":""fix""})","closed","","snyk-bot","2019-08-22T06:41:56Z","2019-08-22T17:22:01Z"
"","6133","Disable XML External Entity load in XmlUtil.java in tests","# The Issue  An XML External Entity attack is a type of attack against an application that parses XML input. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. This attack may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the perspective of the machine where the parser is located, and other system impacts.  # Where the Issue Occurred  The following code snippets display the usage of `XMLReader` without securely disabling entities:  https://github.com/checkstyle/checkstyle/blob/27512b0acc3ad3cb4e28306d4f8936b9108c5bca/src/test/java/com/puppycrawl/tools/checkstyle/internal/utils/XmlUtil.java#L56","closed","miscellaneous,","prodigysml","2018-09-29T13:15:23Z","2019-03-16T12:27:01Z"
"","6920","change block indent 2 to 4 spaces","![image](https://user-images.githubusercontent.com/48787027/61841185-7919c380-aec6-11e9-9db7-deab823c33ab.png)  ![image](https://user-images.githubusercontent.com/48787027/61841209-86cf4900-aec6-11e9-8d19-57261605b3fa.png)      --------------- Describe what you expect in detail.  I want to block indent is 4 spaces --------------","closed","","leo1515416043","2019-07-25T02:27:07Z","2019-08-07T01:57:39Z"
"","6960","config: update wercker to use latest tagged version of Orekit","","closed","","romani","2019-08-08T20:25:14Z","2019-08-08T23:49:18Z"
"","6945","config: set -e over eval to make sure exit code is not ignored","","closed","","romani","2019-08-06T22:46:47Z","2019-08-07T00:05:49Z"
"","6926","config: upgrade pitest to 1.4.9","","closed","","rnveach","2019-07-26T23:16:15Z","2019-07-27T08:14:25Z"
"","6925","config: upgrade spotbugs to 3.1.12","","closed","","rnveach","2019-07-26T23:14:54Z","2019-07-27T08:14:51Z"
"","6908","config: bump sevntu to 1.35.0","","closed","","romani","2019-07-16T19:28:01Z","2019-07-17T01:41:28Z"
"","6871","config: upgrade guava to 28.0","","closed","","rnveach","2019-07-03T20:15:41Z","2019-07-03T22:01:06Z"
"","6870","config: upgrade saxon to 9.9.1-4","","closed","","rnveach","2019-07-03T17:58:59Z","2019-07-03T19:26:16Z"
"","6869","config: upgrade jgit to 5.4.0.201906121030-r","","closed","","rnveach","2019-07-03T17:55:05Z","2019-07-03T19:25:33Z"
"","6787","minor: update sync link to show by project ID (the only way to honor …","","closed","","romani","2019-05-27T17:31:49Z","2019-05-30T13:08:18Z"
"","6786","minor: fix snyk link","","closed","","romani","2019-05-27T17:26:10Z","2019-05-27T17:40:02Z"
"","6741","config: upgrade maven surefire to 2.22.2","","closed","","rnveach","2019-05-10T03:04:59Z","2019-05-10T16:58:31Z"
"","6740","config: upgrade maven-failsafe to 2.22.2","","closed","","rnveach","2019-05-09T22:24:46Z","2019-05-10T03:02:25Z"
"","6739","config: upgrade maven compiler to 3.8.1","","closed","","rnveach","2019-05-09T22:22:51Z","2019-05-10T00:10:14Z"
"","6738","config: upgrade ant to 1.10.6","","closed","","rnveach","2019-05-09T22:21:21Z","2019-05-10T00:09:52Z"
"","6712","config: upgrade pmd to 6.14.0","","closed","","Dichotomia","2019-05-02T15:28:31Z","2019-05-03T10:30:49Z"
"","6711","config : upgrade pmd to 3.14.0","","closed","","Dichotomia","2019-05-02T14:33:53Z","2019-05-02T15:27:17Z"
"","6710","config : Upgrade pmd from 6.13.0 to 6.14.0","","closed","","Dichotomia","2019-05-02T13:43:54Z","2019-05-02T14:34:16Z"
"","6709","config: upgrade jgit to 5.3.1.201904271842-r","","closed","","rnveach","2019-05-01T20:53:13Z","2019-05-01T21:49:27Z"
"","6700","config: upgrade maven-pmd to 3.12.0","","closed","","rnveach","2019-04-27T11:56:00Z","2019-05-01T12:28:22Z"
"","6699","config: upgrade pitest to 1.4.7","","closed","","rnveach","2019-04-27T11:54:16Z","2019-05-01T16:13:33Z"
"","6648","config: upgrade pmd to 6.13.0","","closed","","rnveach","2019-04-07T16:10:04Z","2019-04-07T17:28:36Z"
"","6647","config: upgrade equalsverifier to 3.1.8","","closed","","rnveach","2019-04-07T15:25:04Z","2019-04-07T17:28:09Z"
"","6646","config: upgrade picocli to 3.9.6","","closed","","rnveach","2019-04-07T15:23:15Z","2019-04-07T17:27:49Z"
"","6632","config: upgrade maven-javadoc-plugin to 3.1.0","","closed","","rnveach","2019-04-03T20:40:24Z","2019-04-04T03:01:34Z"
"","6631","config: updated equalsverifier to 3.1.7","","closed","","rnveach","2019-04-03T20:39:33Z","2019-04-04T03:01:16Z"
"","6609","config: bump sevntu to 1.33.0","","closed","","romani","2019-03-25T15:37:26Z","2019-03-25T19:46:31Z"
"","6575","config: bump guava to 27.1-jre","","closed","","rnveach","2019-03-14T22:47:14Z","2019-03-15T14:33:23Z"
"","6574","config: bump saxon to 9.9.1-2","","closed","","rnveach","2019-03-14T22:41:47Z","2019-03-15T02:16:12Z"
"","6573","config: bump equalsverifier to 3.1.6","","closed","","rnveach","2019-03-14T22:41:33Z","2019-03-15T02:15:51Z"
"","6572","config: bump jgit to 5.3.0.201903130848-r","","closed","","rnveach","2019-03-14T22:41:21Z","2019-03-15T02:15:27Z"
"","6571","config: bump slf4j to 1.7.26","","closed","","rnveach","2019-03-14T22:41:02Z","2019-03-15T00:25:42Z"
"","6526","spelling: fix then / than typos","","closed","","Vampire","2019-03-07T13:14:27Z","2019-03-08T08:35:08Z"
"","6482","minor: changed more powermock tests to normal tests","","closed","","rnveach","2019-02-25T22:01:43Z","2019-03-01T12:01:17Z"
"","6394","doc: Fixed grammar errors","","closed","","Glusk","2019-01-25T12:30:39Z","2019-01-30T07:05:50Z"
"","6179","Issue #6803: Add limitation in index.xml.vm","","closed","","arjenzhou","2018-10-30T08:58:26Z","2018-10-31T00:56:57Z"
"","6131","Version Bumps for equalsverfier 3.0","","closed","","rnveach","2018-09-26T20:34:48Z","2018-10-27T15:57:28Z"
"","6113","minor: fix typo in google style","","closed","","romani","2018-09-13T14:42:01Z","2018-09-14T02:57:44Z"
"","6100","config: bump jacoco 0.8.2","","closed","","romani","2018-08-30T23:21:07Z","2018-08-31T18:24:17Z"
"","6099","config: bump equalsverifier to 2.5.2","","closed","","romani","2018-08-30T23:16:43Z","2018-08-30T23:55:19Z"
"","6079","minor: disable Jenkins timestamps to fix periodical build failures","","closed","","daniilyar","2018-08-11T08:44:53Z","2018-08-11T15:09:08Z"
"","6076","config: bump maven-compiler-plugin to 3.8.0","","closed","","romani","2018-08-10T20:01:44Z","2018-08-11T23:59:26Z"
"","6075","config: bump pitest to 1.4.1","","closed","","romani","2018-08-10T19:58:50Z","2018-08-11T23:58:58Z"
"","6074","config: bump spotbugs-maven-plugin to 3.1.6","","closed","","romani","2018-08-10T19:57:06Z","2018-08-11T23:58:15Z"
"","6073","config: bump jgit to 5.0.2.201807311906-r","","closed","","romani","2018-08-10T19:54:55Z","2018-08-11T23:57:44Z"
"","6072","config: bump equalsverifier to 2.5.1","","closed","","romani","2018-08-10T19:51:40Z","2018-08-11T23:57:14Z"
"","6071","config: bump saxon to 9.8.0-14","","closed","","romani","2018-08-10T19:43:48Z","2018-08-11T23:56:45Z"
"","6070","Saxon 9.8.0 14","","closed","","romani","2018-08-10T19:42:15Z","2018-08-10T19:42:39Z"
"","6069","config: bump guava to 26.0-jre","","closed","","romani","2018-08-10T19:39:34Z","2018-08-11T22:10:30Z"
"","6062","minor: test","","closed","","romani","2018-08-08T21:59:20Z","2018-08-08T22:42:13Z"
"","6060","Issue #5832: extend examples for CatchParameterName","","closed","","tsunghanjacktsai","2018-08-05T17:24:53Z","2018-08-09T16:50:47Z"
"","6042","config: bump ant to 1.10.5","","closed","","romani","2018-07-19T13:25:22Z","2018-07-19T14:38:30Z"
"","6038","minor: make inspection chapter in idea xdoc page to be easier to read","","closed","","romani","2018-07-14T03:21:27Z","2018-07-20T02:41:55Z"
"","6032","config: bump sonar-maven-plugin to 3.4.1.1168","","closed","","romani","2018-07-12T03:39:39Z","2018-07-12T05:11:13Z"
"","6031","config: bump equalsverifier to 2.4.8","","closed","","romani","2018-07-12T03:37:12Z","2018-07-12T05:10:58Z"
"","6023","minor: fix commands at begining of development page","","closed","","romani","2018-07-10T06:20:21Z","2018-07-11T03:24:10Z"
"","6012","minor: Jenkins pipeline: timestamps, retries, volumes cleanup","","closed","","daniilyar","2018-07-08T01:13:32Z","2018-07-09T06:46:38Z"
"","6009","minor: if build is triggered by PR, use PR branch, otherwise use master","","closed","","daniilyar","2018-07-07T05:43:24Z","2018-07-09T20:37:45Z"
"","6006","minor: log the build cause in Jenkins pipeline","","closed","","daniilyar","2018-07-07T04:56:26Z","2018-07-07T05:21:52Z"
"","6004","NOT FOR MERGE: Test commit to test Jenkins PR builds integration","","closed","","daniilyar","2018-07-07T04:16:17Z","2018-07-23T11:38:00Z"