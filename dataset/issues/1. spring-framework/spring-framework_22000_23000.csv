"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","7932","AbstractUrlHandlerMapping do not exposes rootHandler for overriding [SPR-3247]","**[Łukasz Bałamut](https://jira.spring.io/secure/ViewProfile.jspa?name=luki)** opened **[SPR-3247](https://jira.spring.io/browse/SPR-3247?redirect=false)** and commented  org.springframework.web.servlet.handler.AbstractUrlHandlerMapping is meant to be overriden but it blocks it by making inaccessible (private) field:  rootHandler  Please make it protected or provide at least protected getter method which will be used every time rootHandler is accessed within AbstractUrlHandlerMapping and its superclasses.  I am overriding this class to have locale prefixed uris. Now in 2.0.3 i do not have any means to support it for ""/"", only way for me is not to use AbstractUrlHandlerMapping.  Thanks for support!   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-09T19:08:54Z","2012-06-19T03:51:19Z"
"","7920","FormTag is difficult to extend [SPR-3234]","**[Łukasz Bałamut](https://jira.spring.io/secure/ViewProfile.jspa?name=luki)** opened **[SPR-3234](https://jira.spring.io/browse/SPR-3234?redirect=false)** and commented  It is very inconvinient to extend org.springframework.web.servlet.tags.form.FormTag becouse It has assertrs in optional attributes: setCommandName(String commandName), setMethod(String method))  and resolveAction() is private not protected while resolveCommandName() is protected.  Thanks for changing it in next version.  I think this problem may be in other tags, as soon as I find them i will create new issue   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-03-05T20:26:28Z","2012-06-19T03:50:05Z"
"","8519","ClassUtils.forName() fails on byte arrays types [SPR-3839]","**[Zvika Markfeld](https://jira.spring.io/secure/ViewProfile.jspa?name=zvizvi)** opened **[SPR-3839](https://jira.spring.io/browse/SPR-3839?redirect=false)** and commented  I was trying to set up a JMX client proxy. one of the interface method signatures contains byte[], and when setting up the client proxy, I get the exception below. seems like byte[].class.getName() returns '[B', and ClassUtils tries to use that as the name of the class when calling loadClass, a call which, evidently, fails.  btw, I tried changing the signature to Byte[], but then I got the same error for '[Ljava.lang.Byte;'.  java.lang.ClassNotFoundException: [B at java.net.URLClassLoader$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at org.springframework.util.ClassUtils.forName(ClassUtils.java:201) at org.springframework.util.ClassUtils.forName(ClassUtils.java:171) at org.springframework.jmx.support.JmxUtils.parameterInfoToTypes(JmxUtils.java:141) at org.springframework.jmx.access.MBeanClientInterceptor.retrieveMBeanInfo(MBeanClientInterceptor.java:239) at org.springframework.jmx.access.MBeanClientInterceptor.afterPropertiesSet(MBeanClientInterceptor.java:169) at org.springframework.jmx.access.MBeanProxyFactoryBean.afterPropertiesSet(MBeanProxyFactoryBean.java:81) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1201) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1171) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:425) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:284) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:91) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:75)   ---  **Affects:** 2.0.6, 2.1 M3","closed","in: core,","spring-projects-issues","2007-09-03T01:45:54Z","2012-06-19T03:46:35Z"
"","7899","weak reference [SPR-3213]","**[Zhihong ""John"" Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=zhihong_w)** opened **[SPR-3213](https://jira.spring.io/browse/SPR-3213?redirect=false)** and commented  To resolve the circular dependency problems as stated in #6186, we can specify a reference to be weak in the sense that the reference is not used during the bean's construction but after the ApplicationContext is fully initialized. This will privde users a way to break circular dependencies. Thus, the order of bean specifications in ApplicationContext does not matter any more.  ---  No further details from [SPR-3213](https://jira.spring.io/browse/SPR-3213?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-02-27T05:40:33Z","2019-01-11T17:14:57Z"
"","8265","JDBCOperations.batchUpdate return -2 [SPR-3583]","**[yc](https://jira.spring.io/secure/ViewProfile.jspa?name=jadedr)** opened **[SPR-3583](https://jira.spring.io/browse/SPR-3583?redirect=false)** and commented  I am using SimpleJdbcTemplate.getJdbcOperations().batchUpdate(""INSERT INTO params (paramid, instantreportid, type, name, value) VALUES ( PARAMS_SEQUENCE.NEXTVAL, ?, ?, ?,? "", BatchPreparedStatementSetter) to do batch update. The call did insert the right rows in db. But it returned an array of -2 instead of an array of positive number to indicate rows inserted. And I checked the BatchPreparedStatementSetter.getBatchSize() returned the right size.  I verified my jdbc driver does return right number for batch update. Here is the code I put before the old batchUpdate code: org.springframework.jdbc.core.ConnectionCallback callback=new org.springframework.jdbc.core.ConnectionCallback(){ public Object doInConnection(Connection con) throws SQLException{ java.sql.Statement st=con.createStatement(); st.addBatch(""INSERT INTO params (paramid, instantreportid, type, name, value) VALUES ( PARAMS_SEQUENCE.NEXTVAL, 100001, '0', 'abc', '123' )""); st.addBatch(""INSERT INTO params (paramid, instantreportid, type, name, value) VALUES ( PARAMS_SEQUENCE.NEXTVAL, 100001, '0', 'abc1', '123a' )""); st.addBatch(""INSERT INTO params (paramid, instantreportid, type, name, value) VALUES ( PARAMS_SEQUENCE.NEXTVAL, 100001, '0', 'abc2', '123b' )"");                         int[] t=st.executeBatch();                        for(int i=0; i","closed","status: declined,","spring-projects-issues","2007-06-13T09:20:30Z","2019-01-12T16:40:03Z"
"","8323","please don't  generate a proxy override methods equals() and hashCode() using ""final"" [SPR-3642]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-3642](https://jira.spring.io/browse/SPR-3642?redirect=false)** and commented  http://jira.jboss.com/jira/browse/JBRULES-960   ---  **Affects:** 2.0.6, 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-07-02T12:07:07Z","2008-10-22T02:39:33Z"
"","8243","org.springframework.beans.factory.support.AbstractBeanFactory should add a method 'findPropertyEditor' [SPR-3560]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-3560](https://jira.spring.io/browse/SPR-3560?redirect=false)** and commented  public java.beans.PropertyEditor findPropertyEditor(Class type)  I think it's necessary to expose such a method for developer because spring not use standard java.beans.PropertyEditorManager   ---  **Affects:** 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-06-05T14:56:42Z","2012-06-19T09:37:28Z"
"","8242","org.springframework.beans.factory.config.PropertyPlaceholderConfigurer should add a public method 'parseStringValue' [SPR-3559]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-3559](https://jira.spring.io/browse/SPR-3559?redirect=false)** and commented  public String parseStringValue(String placeholder)  developer can reuse placeholder programmatically not only in xml configuration,for example,when  use spring-javaconfig  `@Configuration`(defaultAutowire = Autowire.BY_NAME) public abstract class Config {      @ExternalBean     public abstract PropertyPlaceholderConfigurer propertyPlaceholderConfigurer();          @Bean(destroyMethodName = ""close"")     public DataSource dataSource() {     	BasicDataSource ds = new BasicDataSource();     	ds.setUrl(propertyPlaceholderConfigurer().parseStringValue(""${jdbc.url}"")));     	ds.setUsername(propertyPlaceholderConfigurer().parseStringValue(""${jdbc.username}""));     	ds.setPassword(propertyPlaceholderConfigurer().parseStringValue(""${jdbc.password}""));     	ds.setDriverClassName(propertyPlaceholderConfigurer().parseStringValue(""${jdbc.driverClassName}""));     	ds.setPoolPreparedStatements(true);     	return ds;     }  }  ---  **Affects:** 2.1 M2  **Attachments:** - [PropertyPlaceholderConfigurer.java](https://jira.spring.io/secure/attachment/12642/PropertyPlaceholderConfigurer.java) (_17.12 kB_) - [PropertyResourceConfigurer.java](https://jira.spring.io/secure/attachment/12643/PropertyResourceConfigurer.java) (_4.85 kB_)  **Issue Links:** - #11823 Need a way to ask PropertyPlaceholderConfigurer to resolve a placeholder string (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2007-06-05T14:38:45Z","2019-01-11T19:08:49Z"
"","8013","org.springframework.web.filter.CharacterEncodingFilter should set response's character encoding also [SPR-3328]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-3328](https://jira.spring.io/browse/SPR-3328?redirect=false)** and commented  when use sitemesh decorate static pages,the decorator page content cannot dispaly normally if  use non-ascii characters,it can be resolved by setting response's character encoding,so I suggest  do this in org.springframework.web.filter.CharacterEncodingFilter.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-31T20:28:58Z","2012-06-19T03:50:07Z"
"","8272","SmartInstantiationAwareBeanPostProcessor API doc issue [SPR-3590]","**[Yagiz Erkan](https://jira.spring.io/secure/ViewProfile.jspa?name=yagiz)** opened **[SPR-3590](https://jira.spring.io/browse/SPR-3590?redirect=false)** and commented  The API documentation of SmartInstantiationAwareBeanPostProcessor specifies: ""...application-provided post-processors should simply implement the plain InstantiationAwareBeanPostProcessor interface or derive from the InstantiationAwareBeanPostProcessorAdapter class.""  However, the API documentation of InstantiationAwareBeanPostProcessor states: ""...It is recommended to implement the plain BeanPostProcessor interface as far as possible, or to derive from InstantiationAwareBeanPostProcessorAdapter in order to be shielded from extensions to this interface.""  So I think that the ""Note"" section of the SmartInstantiationAwareBeanPostProcessor API doc should mimic the InstantiationAwareBeanPostProcessor's.   ---  **Affects:** 2.0.5, 2.1 M1, 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-06-15T03:10:26Z","2012-06-19T03:50:04Z"
"","8261","..core.NestedIOException API doc issue [SPR-3579]","**[Yagiz Erkan](https://jira.spring.io/secure/ViewProfile.jspa?name=yagiz)** opened **[SPR-3579](https://jira.spring.io/browse/SPR-3579?redirect=false)** and commented  In NestedIOException class, the constructor documentation (for both constructors) states that the constructors create a ""NestedServletException"". This should read ""NestedIOException"".   ---  **Affects:** 2.0.5, 2.1 M1, 2.1 M2","closed","type: bug,","spring-projects-issues","2007-06-12T03:20:21Z","2012-06-19T03:50:23Z"
"","8259","ReflectionUtils.doWithFields() API doc issue [SPR-3577]","**[Yagiz Erkan](https://jira.spring.io/secure/ViewProfile.jspa?name=yagiz)** opened **[SPR-3577](https://jira.spring.io/browse/SPR-3577?redirect=false)** and commented  In the two ""org.springframework.util.ReflectionUtils.doWithFields()"" methods, there is a mismatch between what the javadoc says and what the methods do. ""doWithFields()"" uses ""java.lang.Class.getDeclaredFields()"" method, which returns ""all"" the fields (except the inherited ones but ""doWithFields()"" deal with them in a loop). However the javadocs for the ""doWithFields()"" methods say ""all private fields"" so I think this should be ""all fields"".   ---  **Affects:** 2.1 M2","closed","type: bug,","spring-projects-issues","2007-06-11T20:36:07Z","2012-06-19T03:50:43Z"
"","8257","GenericCollectionTypeResolver javadoc issue [SPR-3575]","**[Yagiz Erkan](https://jira.spring.io/secure/ViewProfile.jspa?name=yagiz)** opened **[SPR-3575](https://jira.spring.io/browse/SPR-3575?redirect=false)** and commented  org.springframework.core.GenericCollectionTypeResolver.getMapKeyReturnType(Method method) org.springframework.core.GenericCollectionTypeResolver.getMapKeyReturnType(Method method, int nestingLevel) org.springframework.core.GenericCollectionTypeResolver.getMapValueReturnType(Method method) org.springframework.core.GenericCollectionTypeResolver.getMapValueReturnType(Method method, int nestingLevel)  The javadocs for the methods above state ""... given Map parameter."" It has to read ""return type"" instead of ""parameter"". It's a tiny mistake but I didn't want to let it pass. ;)   ---  **Affects:** 2.0.5, 2.1 M1, 2.1 M2","closed","type: bug,","spring-projects-issues","2007-06-11T03:52:59Z","2012-06-19T03:50:10Z"
"","8249","ObjectUtils.identityToString(Object) API doc error [SPR-3566]","**[Yagiz Erkan](https://jira.spring.io/secure/ViewProfile.jspa?name=yagiz)** opened **[SPR-3566](https://jira.spring.io/browse/SPR-3566?redirect=false)** and commented  The API doc for ""org.springframework.util.ObjectUtils.identityToString(Object)"" indicates that this method returns null when a null parameter is passed. However, this method returns an empty string if the parameter is null.   ---  **Affects:** 2.0.5, 2.1 M2","closed","type: bug,","spring-projects-issues","2007-06-07T19:16:56Z","2012-06-19T03:50:40Z"
"","8724","Possibility to call httpInvoker from outside a spring container [SPR-4045]","**[Wouter Hendrickx](https://jira.spring.io/secure/ViewProfile.jspa?name=daboe)** opened **[SPR-4045](https://jira.spring.io/browse/SPR-4045?redirect=false)** and commented  I have an application running a DispatcherServlet inside a lightweight Jetty webserver. The DispatcherServlet itself hosts a spring container containing one (or more) HttpInvokerServiceExporter(s). I would like to call the exported service without explicitly constructing a Spring Container within the client application. What works is :      HttpInvokerClientInterceptor interceptor = new HttpInvokerClientInterceptor();     interceptor.setServiceUrl( url );     return (ProxyService) ProxyFactory.getProxy( ProxyService.class, interceptor );  (where ProxyService is my interface class).  Although the above works, I'm probably using code in a way it's not intended to be used. However, I could find another way to do what I wanted... In particular, the most recent version of HttpInvokerClientInterceptor is BeanClassLoaderAware.  Any thoughts on the subject will be very welcome.   --- No further details from [SPR-4045](https://jira.spring.io/browse/SPR-4045?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-11-04T20:48:28Z","2012-06-19T09:36:14Z"
"","8073","Better error handling from the  tag [SPR-3390]","**[William Shields](https://jira.spring.io/secure/ViewProfile.jspa?name=wshields)** opened **[SPR-3390](https://jira.spring.io/browse/SPR-3390?redirect=false)** and commented   is a pretty crude mechanism for displaying multiple errors.  It uses a default delimieter of \.  It should allow for more sophisticated methods of displaying errors.  In the simple case, I would like to see ""schemes"" introduced.  For example:    which would craete:  \ \error1\ \error2\ \  Note: if there were no errors the enclosing \ tag should not be rendered.  Example schemes could be:  table ul ol  Potentially this may require another attribute to distinguish between the CSS class given to the enclosing tags and that given to each element, although if the enclosing tag got the value of cssClass, a CSS selector could resolve that problem without adding an attribute.  In the more complicated example, it is possibly worthwhile (although arguably unnecessary if you have sufficient schemes as defined above) to allow either the programmer to write their own schemes or to have sufficient attributes to achieve the same thing.  Example:      \ \ \Error #\ \Error Description\ \ \    \ \\\ \\\ \ \    \ \    The simple example of this kind of thing would be adding attributes:    alternatively have a heading block within:    \The following errors have occurred:\ \ Anywa, you get the idea.  ---  **Affects:** 2.0.4  **Issue Links:** - #13859 Extend  with something like errorElement (_**""is duplicated by""**_)  20 votes, 14 watchers","closed","status: bulk-closed,","spring-projects-issues","2007-04-18T15:12:41Z","2019-01-12T03:51:06Z"
"","8072","Nicer handling of Java 5 enums by the Spring MVC form taglib. [SPR-3389]","**[William Shields](https://jira.spring.io/secure/ViewProfile.jspa?name=wshields)** opened **[SPR-3389](https://jira.spring.io/browse/SPR-3389?redirect=false)** and commented  Enums aren't really handled well and could be handled much more nicely by some of the form tags.  For example,  should be able to autopopulate enum values and would save a lot of boilerplate if this were the case.  I'm thinking of a syntax like:       The empty  in this case could, via a PropertyDescriptor, discover the type of the property (being enum Gender) and create the options based on Gender.values() with value of name() and label of toString().  Optional attributes could set the value and label properties eg:       assuming:  public enum Gender { MALE(""M"",""Male""), FEMALE(""F"",""Female"");  private String code; private String description;  Gender(String code, String description) { this.code = code; this.description = description; }  public String getCode() { return code; } public String getDescription() { return description; } public String toString() { return description; } }  Additionally, I would suggest adding a new tag:    to create groups of radio buttons.   ---  **Issue Links:** - [ROO-254](https://jira.spring.io/browse/ROO-254) enums cannot be entered in web interface  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8e261e5833e24a31564fc386cf1def2166e8a4d7  1 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2007-04-18T14:59:22Z","2019-01-11T18:17:50Z"
"","8071","tag library assumes the value of a Java 5 enum property is the value of toString() [SPR-3388]","**[William Shields](https://jira.spring.io/secure/ViewProfile.jspa?name=wshields)** opened **[SPR-3388](https://jira.spring.io/browse/SPR-3388?redirect=false)** and commented  In XML Spring config files, you can use name() of an enum value when setting the property, for example:  \ \ ... \  for  public enum Gender { MALE, FEMALE };  It does this lookup based on name().  The Spring MVC form tag library is different and uses toString().  A similar issue was raised in Spring Webflow and fixed in the latest 1.0.2 release.  This should also be fixed in Spring MVC.  The default implementation of a Java 5 enum is effectively:  public String toString() { return name(); }  however it is reasonable and common to override this.  For example:  public Gender { MALE(""Male""), FEMALE(""Female"");  private String description;  Gender(String description) { this.description = description; }  public String toString() { return description; } }  Why do this?  Because the name can be considered the value whereas the toString() can be viewed as the description the user sees and selects, which brings up the issue that there really isn't a nice way to do this.    ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-04-18T14:51:04Z","2012-06-19T03:50:03Z"
"","8070","DataBinding error with Java 5 enums [SPR-3387]","**[William Shields](https://jira.spring.io/secure/ViewProfile.jspa?name=wshields)** opened **[SPR-3387](https://jira.spring.io/browse/SPR-3387?redirect=false)** and commented  BeanWrapperImpl uses TypeConverterDelegate.  This class is not open to extension and not easily pluggable in a Spring MVC or Webflow environment.  That aside, it has what I consider to be a bug.  In convertIfNecessary() you have the following fallback code block for Java 5 enums:      try {          Field enumField = requiredType.getField((String) convertedValue);          convertedValue = enumField.get(null);     }     catch (Throwable ex) {          if (logger.isTraceEnabled()) {                   logger.trace(""Field ["" + convertedValue + ""] isn't an enum value"", ex);          }     }  IMHO this should be changed to:      try {                          if (StringUtils.hasText((String)convertedValue) {              Field enumField = requiredType.getField((String) convertedValue);              convertedValue = enumField.get(null);                          } else {                               convertedValue = null;                          }     }     catch (Throwable ex) {          if (logger.isTraceEnabled()) {                   logger.trace(""Field ["" + convertedValue + ""] isn't an enum value"", ex);          }     }  This is to circumvent a problem where you can't set null values for Java 5 enum properties, which is particularly a problem for Web pages.  Consider the example:        assuming:  public enum Gender { MALE, FEMALE; }  and the gender property being of type Gender.  This forces you to:  - use a custom property editor; - use an empty dummy value (like a Gender instance of NOT_SELECTED); or - not use Java 5 enums.  Not selecting an option (translating to a null value) is a valid and common scenario.  A custom property editor shouldn't be required for this.   ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-04-18T14:41:00Z","2012-06-19T03:50:36Z"
"","8649","JNI support for Spring? [SPR-3969]","**[William Lieu](https://jira.spring.io/secure/ViewProfile.jspa?name=wklieu)** opened **[SPR-3969](https://jira.spring.io/browse/SPR-3969?redirect=false)** and commented  I was just wondering if you will ever create any libraries or templates to make life easier when writing JNI code.  Even though my company might use your product the part I fear most is interfacing with hardware then using JNI to write Java code then exposing that piece of hardware as a web service.  I was hoping that the Spring Framework would provide something like this so that development life would be a lot easier.    --- No further details from [SPR-3969](https://jira.spring.io/browse/SPR-3969?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-10-11T07:37:33Z","2012-06-19T09:36:12Z"
"","8236","Specifying proxyInterface for JndiObjectFactyoryBean is incompatible with Weblogic 8.1.5 JMS implementation [SPR-3553]","**[William Ferguson](https://jira.spring.io/secure/ViewProfile.jspa?name=william_ferguson_au@yahoo.com)** opened **[SPR-3553](https://jira.spring.io/browse/SPR-3553?redirect=false)** and commented  We have JMS Queues defined in our Weblogic Server.  If I configure a Spring Bean to point to a Queue using the JndiFactoryObjectBean everything works OK until I specify a proxyInterface at which point the Weblogic ConnectionFactory can no longer return a QueueReceiver because the Queue created by the JndiFactoryObjectBean is a dynamic proxy and is not an instanecof the weblogic.common.jms.DestinationImpl class.  2007-06-05 14:55:39,748 ERROR org.springframework.jms.listener.DefaultMessageListenerContainer102 - Setup of JMS message listener invoker failed - trying to recover weblogic.jms.common.InvalidDestinationException: Foreign destination, ConSolEmailJMSQueue at weblogic.jms.common.Destination.checkDestinationType(Destination.java:106) at weblogic.jms.client.JMSSession.createConsumer(JMSSession.java:1626) at weblogic.jms.client.JMSSession.createReceiver(JMSSession.java:1530) at org.springframework.jms.listener.DefaultMessageListenerContainer102.createConsumer(DefaultMessageListenerContainer102.java:101) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.createListenerConsumer(AbstractPollingMessageListenerContainer.java:216) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:297) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:234) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:871) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:811) at java.lang.Thread.run(Thread.java:534)  Here is my queue config:           	     	     	     	       I need to specify the proxyInterface to switch of caching (transactions) and switch off lookupOnStartup (clusters).   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-06-04T16:14:35Z","2007-08-29T10:32:49Z"
"","8237","Case Sensitive ControllerClassNameHandlerMapping [SPR-3554]","**[Warren Oliver](https://jira.spring.io/secure/ViewProfile.jspa?name=woliver80)** opened **[SPR-3554](https://jira.spring.io/browse/SPR-3554?redirect=false)** and commented  I recently modified the ControllerClassNameHandlerMapping class to handle case sensitive paths.  I also noticed Matt Raible posted a request for this so i've posted my code.  The custom class also allows you to define a path prefix which i found useful when my url's became a little more complicated.  Warren   ---  **Affects:** 2.0.4  **Attachments:** - [CustomControllerClassNameHandlerMapping.java](https://jira.spring.io/secure/attachment/12644/CustomControllerClassNameHandlerMapping.java) (_4.80 kB_) - [CustomControllerClassNameHandlerMapping.java](https://jira.spring.io/secure/attachment/12639/CustomControllerClassNameHandlerMapping.java) (_3.22 kB_) - [CustomControllerClassNameHandlerMappingTest.java](https://jira.spring.io/secure/attachment/12645/CustomControllerClassNameHandlerMappingTest.java) (_2.29 kB_) - [CustomControllerClassNameHandlerMappingTest.java](https://jira.spring.io/secure/attachment/12640/CustomControllerClassNameHandlerMappingTest.java) (_1.22 kB_) - [ViewShoppingCartController.java](https://jira.spring.io/secure/attachment/12646/ViewShoppingCartController.java) (_471 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-06-05T00:18:24Z","2012-06-19T03:50:58Z"
"","8789","Replacing spring-aop.jar version 2.0.6 with version 2.0.7 : load time weaving of @Configurable does not happen anymore [SPR-4110]","**[Ward Bryon](https://jira.spring.io/secure/ViewProfile.jspa?name=wardbryon)** opened **[SPR-4110](https://jira.spring.io/browse/SPR-4110?redirect=false)** and commented  I was updating my modules of my webapp from Spring version 2.0.6 to version 2.0.7  When testing on my freshly deployed Tomcat Application, I discovered that my `@Configurable` beans were not weaved (although no weaving related error appeared in my server log, the beans were simply not weaved at load time which caused other problems)  I use `@Configurable`(autowire=Autowire.BY_TYPE)  I traced down the problem to spring-aop.jar : when I just revert this back to version 2.0.6 the problem disappeared.  Version 2.0.8-20071114-134 suffers from the same problem.   ---  **Affects:** 2.0.7","closed","in: core,","spring-projects-issues","2007-11-15T08:10:21Z","2019-01-11T16:00:36Z"
"","8001","Fail on ClassPathXmlApplicationContext init() method: Class [org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler] does not implement the NamespaceHandler interface. [SPR-3316]","**[Vladimiras Makarovas](https://jira.spring.io/secure/ViewProfile.jspa?name=chess2001)** opened **[SPR-3316](https://jira.spring.io/browse/SPR-3316?redirect=false)** and commented  spring-framework-2.0.4-with-dependencies-20070327-26.zip  trace: javax.security.auth.login.LoginException: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [conf/netsvep-aas-context.xml]; nested exception is java.lang.IllegalArgumentException: Class [org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler] does not implement the NamespaceHandler interface Caused by: java.lang.IllegalArgumentException: Class [org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler] does not implement the NamespaceHandler interface at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.initHandlerMappings(DefaultNamespaceHandlerResolver.java:119) at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.\(DefaultNamespaceHandlerResolver.java:96) at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.\(DefaultNamespaceHandlerResolver.java:82) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.createDefaultNamespaceHandlerResolver(XmlBeanDefinitionReader.java:489) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.createReaderContext(XmlBeanDefinitionReader.java:478) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:458) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:353) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:280) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:131) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:147) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:173) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:112) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:79) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:100) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:298) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:91) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:75) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:65) at com.asw.netsvep.modules.aas.DatabaseServerLoginModuleRC.getAuthService(Unknown Source)  code: protected DatabaseServerAuthService getAuthService() { String path = ""classpath:conf/netsvep-aas-context.xml""; ApplicationContext ctx = new ClassPathXmlApplicationContext(path);	 DatabaseServerAuthService auth = (DatabaseServerAuthService) ctx.getBean(""authService""); return auth; }   ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-03-28T06:07:33Z","2019-01-11T18:14:27Z"
"","8145","Potential NullPointerException in SQLErrorCodeSQLExceptionTranslator with debug logging [SPR-3462]","**[Vladimir Shor](https://jira.spring.io/secure/ViewProfile.jspa?name=vovencij)** opened **[SPR-3462](https://jira.spring.io/browse/SPR-3462?redirect=false)** and commented  Class org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator at line 266 throws NullPointerException if sqlErrorCodes is null  This condition can occur with Oracle 9i JDBC drivers.   ---  **Affects:** 2.0.5","closed","in: core,","spring-projects-issues","2007-05-07T22:03:14Z","2012-06-19T03:50:34Z"
"","8587","PropertyChangeEvent and TypeMismatchException not Serializable [SPR-3907]","**[Vincent De Rijcke](https://jira.spring.io/secure/ViewProfile.jspa?name=gutnor)** opened **[SPR-3907](https://jira.spring.io/browse/SPR-3907?redirect=false)** and commented  When injecting a not serializable bean into a not type-compatible property, the resulting TypeMismatchException and the underlying PropertyChangeEvent object are not serializable.  The problem is caused by the offending object being referenced directly in the properties TypeMismatchException.value PropertyChangeEvent.newValue PropertyChangeEvent.oldValue  Here is an example that cause the java.io.NotSerializableException  // //TestCaseSpring.java // import java.io.ByteArrayOutputStream; import java.io.NotSerializableException; import java.io.ObjectOutputStream; import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext;  public class TestCaseSpring { public static void main(String[] args) throws Exception { ApplicationContext context = new ClassPathXmlApplicationContext(""TestErrorSerialization.xml""); Exception springexception = null;          try /* to generate a spring exception */ {             context.getBean(""someBean"");         } catch (Exception e) {             springexception = e;          }                  // Try to serialize the exception          try {             ObjectOutputStream out = new ObjectOutputStream(new ByteArrayOutputStream());             out.writeObject( springexception );         } catch (NotSerializableException e) {             // That's what we wanted to show             e.printStackTrace();         }      }     /**      * Simple class mapped into a Spring bean.      * Notice that the property anotherBean is not an instance of AnotherBean      * This is done on purpose to generate an exception.      */     public static class SomeBean {         private String anotherBean;         public String getAnotherBean() {             return anotherBean;         }         public void setAnotherBean(String anotherBean) {             this.anotherBean = anotherBean;         }     }     /**      * Simple class mapped into a Spring bean.       * It will be unsuccessfully injected      * in the property anotherBean of SomeBean      */     public static class AnotherBean {     }     } // // //  with the config file 'TestErrorSerialization.xml'  \  \                               \   ---  **Affects:** 2.0.2, 2.0.6, 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-23T21:47:32Z","2012-06-19T03:47:17Z"
"","8602","Changes in properties file should get reflected with out restarting  server (Tomcat) [SPR-3922]","**[vikram bethu](https://jira.spring.io/secure/ViewProfile.jspa?name=vikramb)** opened **[SPR-3922](https://jira.spring.io/browse/SPR-3922?redirect=false)** and commented  Hi      I have a requirement such that   1.if there is any change in  poperties file(eg: tomcat_home/prop/app.properties)  tomcat cache should be refreshed with out restarting it , Request to tell me how to proceed  in this issue.  Regards Vikram   --- No further details from [SPR-3922](https://jira.spring.io/browse/SPR-3922?redirect=false)","closed","status: declined,","spring-projects-issues","2007-09-25T20:06:07Z","2012-06-19T09:36:12Z"
"","8063","OpenSessionInViewFilter cannot depend on classes in spring-web.jar, or should be in spring-web.jar [SPR-3380]","**[vijay garla](https://jira.spring.io/secure/ViewProfile.jspa?name=vngarla)** opened **[SPR-3380](https://jira.spring.io/browse/SPR-3380?redirect=false)** and commented  This is related to bug #5797 (marked as Won't fix).  The resolution given there was that all of spring (spring.jar) should be deployed in the Enterprise application.  However, when using JSF, the org.springframework.web.jsf.DelegatingVariableResolve class must be loaded from the Web Application WEB-INF/lib: this class depends on JSF Classes, which are only found in the Web Application classloader.  So, we are putting spring-web.jar in the Web Application WEB-INF/lib, and the other parts of spring (i.e. those that we need), in the Enterprise Application.  However, org.springframework.orm.hibernate3.support.OpenSessionInViewFilter depends on classes from spring-web.jar; attempts to initialize the filter during the deployment of the WebApplication fail: the OncePerRequestFilter superclass is not visible from the EAR classloader.  Thus, it is not possible to use JSF and the OpenSessionInViewFilter.  We cannot place all of spring, and all spring beans in the web app, as multiple Web Applications and EJBs need to use the same application context (and hibernate session factory).  As a workaround, I have moved the content of OpenSessionInViewFilter into a plain-vanilla javax.servlet.Filter, which takes care of the cross dependency between spring-hibernate3.jar and spring-web.jar; however, this is an ugly hack.  IMHO mutual-dependencies between spring-hibernate.jar and spring-web.jar should be eliminated, so that hibernate and jsf can be used in an enterprise application.  ---  **Affects:** 2.0.4  **Issue Links:** - #7449 UI related classes inside spring hibernate jar file causes deployment failure - #6749 Spring packaging problem with HttpInvokerServiceExporter","closed","type: enhancement,","spring-projects-issues","2007-04-16T23:37:13Z","2019-01-11T18:17:42Z"
"","8131","maxElementsOnDisk property for EhCacheFactoryBean [SPR-3448]","**[Victor Gluschnko](https://jira.spring.io/secure/ViewProfile.jspa?name=hvicha)** opened **[SPR-3448](https://jira.spring.io/browse/SPR-3448?redirect=false)** and commented  Hello All,  There is no property maxElementsOnDisk in EhCacheFactoryBean. I've  tried to set property in configuration file of  EhCacheManagerFactoryBean without success. :-( maxElementsOnDisk is equals to 0 always, it means unlimited number of objects in cache.  Best regards, Victor   --- No further details from [SPR-3448](https://jira.spring.io/browse/SPR-3448?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-05-03T01:10:04Z","2012-06-19T03:50:44Z"
"","8358","FactoryBean to extract map value by the specified key [SPR-3677]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-3677](https://jira.spring.io/browse/SPR-3677?redirect=false)** and commented  Implementation follows:  import java.util.Map;  import org.springframework.beans.factory.config.AbstractFactoryBean;  /** * Factory bean that extracts map value by key and provides it as bean reference. If this * map is null or doesn't contain a mapping for the specified key exception is thrown. *  * `@author` Vasily Ivanov   */   public class MapValueFactoryBean extends AbstractFactoryBean   {  private Map map; private Object key;  protected Object createInstance() { if (map == null || map.isEmpty()) { throw new IllegalArgumentException(""map must not be null""); }      if (!map.containsKey(key)) {       throw new IllegalArgumentException(""map doesn't contain key specified: "" + key);     }          return map.get(key);  }  public Class getObjectType() { return Object.class; }  public void setMap(Map map) { this.map = map; }  public void setKey(Object key) { this.key = key; }  }  and configuration:  \ \ \ \ \ \classpath:/prop1.properties\ \classpath:/prop2.properties\ \ \ \ \ \ \   --- No further details from [SPR-3677](https://jira.spring.io/browse/SPR-3677?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-07-10T15:35:29Z","2012-06-19T09:37:33Z"
"","8357","FactoryBean to join several Objects into one String [SPR-3676]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-3676](https://jira.spring.io/browse/SPR-3676?redirect=false)** and commented  That would be nice to have FactoryBean that gets a list of Objects as an input and returns String as a result of joining all those Objects together.  I have created simple FactoryBean to do this kind of stuff:  import org.apache.commons.lang.StringUtils; import org.springframework.beans.factory.config.AbstractFactoryBean;  /** * `@author` Vasily Ivanov   */   public class ValuesJoinFactoryBean extends AbstractFactoryBean   {  private Object[] values; private String separator; private int start = Integer.MIN_VALUE; private int end = Integer.MAX_VALUE;  protected Object createInstance() { if (start == Integer.MIN_VALUE || end == Integer.MAX_VALUE) { return StringUtils.join(values, separator); }      return StringUtils.join(values, separator, start, end);  }  public Class getObjectType() { return String.class; }  public void setEnd(int end) { this.end = end; }  public void setSeparator(String separator) { this.separator = separator; }  public void setStart(int start) { this.start = start; }  public void setValues(Object[] values) { this.values = values; } }  and configuration:  \ \ \ \ \some_static_string_here\ \ \ \ \ \  If target.path1 returns value1 and target.path2 returns value2, than FactoryBean will result in the reference to a String object with value: value1:some_static_string_here:target.path2  All properties are optional with ""smart"" defaults. I know it requires Commons Lang, but join method can be rewritten locally.  This is very useful to build say URLs in the application context.  Also, that would be nice to have something like this:    --- No further details from [SPR-3676](https://jira.spring.io/browse/SPR-3676?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-07-10T00:41:36Z","2012-06-19T09:37:41Z"
"","8301","TimerFactoryBean and ScheduledTimerTask should support Date at wich task is to be executed [SPR-3619]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-3619](https://jira.spring.io/browse/SPR-3619?redirect=false)** and commented  TimerFactoryBean and ScheduledTimerTask should support following Timer's methods to start task at particular Date:  java.util.Timer#schedule(java.util.TimerTask, java.util.Date) java.util.Timer#schedule(java.util.TimerTask, java.util.Date, long) java.util.Timer#scheduleAtFixedRate(java.util.TimerTask, java.util.Date, long)   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-06-25T18:22:06Z","2012-06-19T09:37:27Z"
"","8014","DefaultMessageListenerContainer keeps refreshing shared Connection even if container is not running [SPR-3329]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-3329](https://jira.spring.io/browse/SPR-3329?redirect=false)** and commented  DefaultMessageListenerContainer default implementation's refreshConnectionUntilSuccessful() method calls refreshSharedConnection() even if container is NOT actually running:  if (sharedConnectionEnabled()) { refreshSharedConnection(); if (isRunning()) { startSharedConnection(); } } else { Connection con = createConnection(); JmsUtils.closeConnection(con); }  I think it should be like this: if (isRunning()) { if (sharedConnectionEnabled()) { refreshSharedConnection(); startSharedConnection(); } else { Connection con = createConnection(); JmsUtils.closeConnection(con); } }  This is really critical BUG because ConnectionFactory might not be available in Jndi at that point, so by stopping MessageListenerContainer I want to stop ALL attempts to do anything, but MessageListenerContainer keeps endless attempts to get Connection from ConnectionFactory that is not available.   ---  **Affects:** 2.0.3","closed","type: bug,","spring-projects-issues","2007-04-01T11:01:36Z","2012-06-19T03:50:26Z"
"","8012","Misspelling in AdvisedSupport.getInterceptorsAndDynamicInterceptionAdvice() method javadoc [SPR-3327]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-3327](https://jira.spring.io/browse/SPR-3327?redirect=false)** and commented  AdvisedSupport.getInterceptorsAndDynamicInterceptionAdvice() method javadoc comment says: ""Determine a list of MethodInterceptor objects for the given method, _bsaed_ on this configuration.""  Just typo I guess.   ---  **Affects:** 2.0.3","closed","in: core,","spring-projects-issues","2007-03-31T12:51:18Z","2012-06-19T03:50:26Z"
"","8006","JndiObjectTargetSource.getTargetClass() returns null when lookupOnStartup=false [SPR-3321]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-3321](https://jira.spring.io/browse/SPR-3321?redirect=false)** and commented  JndiObjectTargetSource.getTargetClass()  returns null when lookupOnStartup=false.  For example, this is really annoying when trying to apply AbstractTraceInterceptor (with useDynamicLogger=true and hideProxyClassNames=true) to JndiObjectFactoryBean (lookupOnStartup=false). Interceptor tries to get getTargetClass() from Proxy which delegates to JndiObjectTargetSource.getTargetClass()  which returns null.  Should targetClass be equal to expectedType or should it be explicitly set by dependency injection or what?   ---  **Affects:** 2.0.3","closed","in: core,","spring-projects-issues","2007-03-29T10:49:55Z","2012-06-19T03:51:04Z"
"","8005","JndiObjectFactoryBean should be able to accept multiple proxyInterfaces (or introspect expectedType) when lookupOnStartup=false and/or cache=false [SPR-3320]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-3320](https://jira.spring.io/browse/SPR-3320?redirect=false)** and commented  JndiObjectFactoryBean should be able to accept multiple proxyInterfaces:  \ \ \ \ \ \ \ \Interface1\ \Interface2\ \ \ \  In this case you will need to call proxyFactory.setInterfaces(jof.proxyInterfaces) instead of proxyFactory.addInterface(jof.proxyInterface) when creating JndiObjectProxy underneath.  Also that would be handy to proxy all of the interfaces that the expectedType implements if proxyInterface nor proxyInterfaces has been set. It is significantly less configuration work, and less prone to typos.  Workaround: In fact this the same as defining separate ProxyFactoryBean (with multiple interfaces) and JndiObjectTargetSource.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-29T10:25:01Z","2012-06-19T03:51:00Z"
"","7994","AbstractJmsListeningContainer should not create a shared JMS connection if autoStartup is false [SPR-3309]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-3309](https://jira.spring.io/browse/SPR-3309?redirect=false)** and commented  AbstractJmsListeningContainer tries to create shared JMS connection on startup even if autoStartup flag is set to false.  I'm using DefaultMessageListenerContainer which should be self-recovering in theory. It overrides establishSharedConnection() method to catch JMSException, but I'm getting expected NamingException at that point (jndi resources are not available) and there is no way to prevent that.  I don't see any point why AbstractJmsListeningContainer establishes connection on startup regardless of autoStart value. It should do that only when start() method is called.  ---  **Affects:** 2.0.3  **Issue Links:** - #7840 AbstractMessageListenerContainer listener should not be mandatory if autoStartup=false","closed","type: enhancement,","spring-projects-issues","2007-03-27T10:30:03Z","2019-01-11T18:14:33Z"
"","8401","Spring Reference Documentation idref example incorrect [SPR-3720]","**[umesha balasubramaniam](https://jira.spring.io/secure/ViewProfile.jspa?name=umeshajb)** opened **[SPR-3720](https://jira.spring.io/browse/SPR-3720?redirect=false)** and commented  In section 3.3.3.1.1 (The idref element) the example exactly equivalent xml configuration seems incorrect. The documentation contains \ \ \theTargetBean\ \ \  This is not a way to set a dependent bean. I would think it should be \ \ \   ---  **Affects:** 2.1 M2","closed","","spring-projects-issues","2007-07-30T23:17:17Z","2019-01-11T19:30:33Z"
"","8577","SpringTEST: MockServletContext.getContext implementation [SPR-3897]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-3897](https://jira.spring.io/browse/SPR-3897?redirect=false)** and commented  In order to test portlet containers a cross context resolving should be enabled. Since new servlet api supports context path resolving directly from servlet context the method could at least resolve to itself when exact match is asked although a similar mechanism compared to init parameters is preferred in order to register alternative contexts.   ---  **Affects:** 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-20T23:52:56Z","2012-06-19T03:47:46Z"
"","8415","Make it easier to disallow bean definition overriding [SPR-3734]","**[Trent Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=trentandrews)** opened **[SPR-3734](https://jira.spring.io/browse/SPR-3734?redirect=false)** and commented  If  you have two beans in the same xml(Example 1) file spring will detect that you have two beans with the same name and throw XmlBeanDefinitionStoreException  ===== Example 1 ===== \\\ \\\  ---  But if you import one xml file into another it does not see the problem and I believe that it should.  ==== Example 2 ====  ---  File 1  ---             ---  File 2(file2.xml)  ---        ---  ---  **Affects:** 2.0.6  **Attachments:** - [Spring.zip](https://jira.spring.io/secure/attachment/12745/Spring.zip) (_2.97 kB_)  **Issue Links:** - #6741 Circular dependence forbidding cannot be easily configured.  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-08-01T23:37:54Z","2019-01-13T22:42:27Z"
"","8258","Tooling API: ConfigBeanDefinitionParser does not report BeanDefinition for pointcut attribute [SPR-3576]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-3576](https://jira.spring.io/browse/SPR-3576?redirect=false)** and commented  In XmlReaderContext.registerWithGeneratedName() the given BeanDefinition is registered without calling ReaderEventListener..componentRegistered().   ---  **Affects:** 2.0.5, 2.1 M1  **Referenced from:** commits https://github.com/spring-projects/spring-ide/commit/1067c655792f8ff87c447919acaa6c1fe600ff86, https://github.com/spring-projects/spring-ide/commit/b8ca521eec32e17b414e931d69ccf0f7cf174954","closed","type: enhancement,","spring-projects-issues","2007-06-11T09:57:41Z","2012-06-19T03:50:50Z"
"","8229","Tooling API: Missing bean name isn't reported via ProblemReporter API in org.springframework.aop.config.ConfigBeanDefinitionParser.parseAdvisor() [SPR-3546]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-3546](https://jira.spring.io/browse/SPR-3546?redirect=false)** and commented  org.springframework.aop.config.ConfigBeanDefinitionParser.parseAdvisor() doen't check for a missing bean name in an advisor definition. Instead this is done ine the RuntimeBeanReference's constructor which isn't aware of the tooling API's ProblemReporter API.  java.lang.IllegalArgumentException: 'beanName' must not be empty at org.springframework.util.Assert.hasText(Assert.java:160) at org.springframework.beans.factory.config.RuntimeBeanReference.\(RuntimeBeanReference.java:58) at org.springframework.beans.factory.config.RuntimeBeanReference.\(RuntimeBeanReference.java:46) at org.springframework.aop.config.ConfigBeanDefinitionParser.parseAdvisor(ConfigBeanDefinitionParser.java:184) at org.springframework.aop.config.ConfigBeanDefinitionParser.parse(ConfigBeanDefinitionParser.java:146) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1114) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1104) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:133) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:90) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:458) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:353) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:280)   ---  **Affects:** 2.0.5, 2.1 M1, 2.1 M2","closed","in: core,","spring-projects-issues","2007-06-03T09:27:52Z","2012-06-19T03:50:12Z"
"","8219","Tooling API: Combine imported beans and aliases into a CompositeComponentDefinition [SPR-3536]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-3536](https://jira.spring.io/browse/SPR-3536?redirect=false)** and commented  In Spring IDE we need as the source location of an imported artifact (bean, alias or import) the source location of the corresponding import tag instead of the artifact itself. For every import tag (nested as well) the ParserContext could create a CompositeComponentDefinition (associated with the import tag) which holds all imported artifacts. This CompositeComponentDefinition could be provided via the ImportDefinition used by the ReaderEventListener.   ---  **Affects:** 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-05-31T09:37:44Z","2012-06-19T03:50:29Z"
"","7902","Tooling API: NPE in BeanDefinitionParserDelegate for non-existent property value [SPR-3216]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-3216](https://jira.spring.io/browse/SPR-3216?redirect=false)** and commented  If no value or bean ref is specified for a bean property or constructor arg then a NPE is thrown. This is because after the error report is created then parsePropertyValue() coninues with a subElement of null.   ---  **Affects:** 2.0.2  **Attachments:** - [Spring20_NPE_in_BeanDefinitionParserDelegate.patch](https://jira.spring.io/secure/attachment/12431/Spring20_NPE_in_BeanDefinitionParserDelegate.patch) (_2.30 kB_)","closed","in: core,","spring-projects-issues","2007-02-27T12:15:43Z","2012-06-19T03:50:16Z"
"","7901","Tooling API: DefaultBeanDefinitionDocumentReader does not leverage ProblemReporter API fully [SPR-3215]","**[Torsten Juergeleit](https://jira.spring.io/secure/ViewProfile.jspa?name=torsten)** opened **[SPR-3215](https://jira.spring.io/browse/SPR-3215?redirect=false)** and commented  While loading a resource in importBeanDefinitionResource() or registering a BeandDefinition in processBeanDefinition() the ProblemReporter API isn't leveraged yet.  Cheers, Torsten   ---  **Affects:** 2.0.2  **Attachments:** - [Spring20_LeverageProblemReporterAPI_in_DefaultBeanDefinitionDocumentReader.patch](https://jira.spring.io/secure/attachment/12430/Spring20_LeverageProblemReporterAPI_in_DefaultBeanDefinitionDocumentReader.patch) (_3.10 kB_)","closed","in: core,","spring-projects-issues","2007-02-27T09:32:36Z","2012-06-19T03:51:05Z"
"","8312","PathMatchingResourcePatternResolver has one performance issue for concurrent case. [SPR-3631]","**[Torr](https://jira.spring.io/secure/ViewProfile.jspa?name=loveyly)** opened **[SPR-3631](https://jira.spring.io/browse/SPR-3631?redirect=false)** and commented  public class PathMatchingResourcePatternResolver implements ResourcePatternResolver {      protected final Log logger = LogFactory.getLog(getClass());  we can find out that the logger is not a staic member, so it will get the logger for each instance. but the LogFactory.getLog() has some synchronized block, so there is one performance issue when concurrent access for this class.   ---  **Affects:** 2.0.5, 2.1 M1","closed","type: enhancement,","spring-projects-issues","2007-06-27T21:20:39Z","2012-06-19T03:50:25Z"
"","8089","MBeanClientInterceptor NoSuchMethodError [SPR-3406]","**[Tonny Bruckers](https://jira.spring.io/secure/ViewProfile.jspa?name=torghal)** opened **[SPR-3406](https://jira.spring.io/browse/SPR-3406?redirect=false)** and commented  When switching from spring 2.0 to spring 2.0.4 I get the following error which was'nt there before:  java.lang.NoSuchMethodError: org.springframework.jmx.access.MBeanClientInterceptor.setObjectName(Ljava/lang/String;)V at eu.eudin.common.jmx.ActiveMQJmxFacade.getQueueViewMBean(ActiveMQJmxFacade.java:60) at eu.eudin.common.jmx.ActiveMQJmxFacade.getQueueSize(ActiveMQJmxFacade.java:69) at eu.eudin.common.service.JmsService.getQueueSize(JmsService.java:52) at eu.eudin.mod2.common.service.MessageService.hasReachedMaximumCapacity(MessageService.java:305) at eu.eudin.mod2.common.service.MessageService.verifyForDistribution(MessageService.java:232) at eu.eudin.mod2.common.service.MessageService.distributeMessage(MessageService.java:184) at eu.eudin.mod2.mule.component.MessageDistributor.onCall(MessageDistributor.java:24) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.mule.impl.model.resolvers.DynamicEntryPoint.invokeMethod(DynamicEntryPoint.java:314) at org.mule.impl.model.resolvers.DynamicEntryPoint.invoke(DynamicEntryPoint.java:261) at org.mule.impl.DefaultLifecycleAdapter.intercept(DefaultLifecycleAdapter.java:217) at org.mule.impl.InterceptorsInvoker.execute(InterceptorsInvoker.java:47) at org.mule.impl.model.DefaultMuleProxy.run(DefaultMuleProxy.java:482) at org.mule.impl.work.WorkerContext.run(WorkerContext.java:310) at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595)  ********************************************************************************  Here's the involked method on the ActiveMQJmxFacade:  private QueueViewMBean getQueueViewMBean(String queueName) throws Exception { MBeanProxyFactoryBean proxyFactory = new MBeanProxyFactoryBean(); proxyFactory.setProxyInterface(QueueViewMBean.class); proxyFactory.setServiceUrl(getServiceUrl()); String jmxQueueName = getObjectName() + queueName;		 proxyFactory.setObjectName(jmxQueueName); proxyFactory.afterPropertiesSet(); QueueViewMBean proxy = (QueueViewMBean) proxyFactory.getObject();		 return proxy; }  where  jmxQueueName = ""org.apache.activemq:BrokerName=localhost,Type=Queue,Destination=out.for.receipt""    --- No further details from [SPR-3406](https://jira.spring.io/browse/SPR-3406?redirect=false)","closed","in: core,","spring-projects-issues","2007-04-23T20:33:19Z","2019-01-12T16:40:14Z"
"","7943","The sources jar deployed to https://svn.sourceforge.net/svnroot/springframework/repos/repo/  is missing some packages [SPR-3258]","**[Tomislav Stojcevich](https://jira.spring.io/secure/ViewProfile.jspa?name=stojcevicht)** opened **[SPR-3258](https://jira.spring.io/browse/SPR-3258?redirect=false)** and commented  There are packages missing from https://svn.sourceforge.net/svnroot/springframework/repos/repo/org/springframework/spring/2.0.3/spring-2.0.3-sources.jar The spring-src.zip file contained in the spring-framework-2.0.3.zip file downloadable from sourceforge seems to be complete.   ---  **Affects:** 2.0.3","closed","status: declined,","spring-projects-issues","2007-03-13T06:32:44Z","2007-09-25T09:05:36Z"
"","8029","Problem with database name in parameterized SQL query [SPR-3345]","**[Tomislav Novosel](https://jira.spring.io/secure/ViewProfile.jspa?name=tnovosel)** opened **[SPR-3345](https://jira.spring.io/browse/SPR-3345?redirect=false)** and commented  When I specify database name using colon in SQL query, an exception occurs. Database name in Informix is similar to schema in Oracle.  Database name in Informix is possible to define in SQL query using syntax:    database_name:table_name  Everything works fine in Spring framework 1.2.8 but Spring framework 2.0 can use named parameters so it is not possible to define database name using colons.  Code example:  private static String query = ""SELECT * from glparam:sfd_operater operater "" + ""WHERE operater.login = ?"";  public PasswordQuery(DataSource ds){ super(ds, query); super.declareParameter(new SqlParameter(Types.CHAR)); }  Exception stack trace:  javax.faces.el.EvaluationException: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT * from glparam:sfd_operater operater WHERE operater.login = ?]; nested exception is java.sql.SQLException: A syntax error has occurred. javax.faces.FacesException: #{authentication.login}: javax.faces.el.EvaluationException: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT * from glparam:sfd_operater operater WHERE operater.login = ?]; nested exception is java.sql.SQLException: A syntax error has occurred. at com.sun.faces.application.ActionListenerImpl.processAction(ActionListenerImpl.java:78) at javax.faces.component.UICommand.broadcast(UICommand.java:312) at org.ajax4jsf.framework.ajax.AjaxViewRoot.processEvents(AjaxViewRoot.java:180) at org.ajax4jsf.framework.ajax.AjaxViewRoot.broadcastEvents(AjaxViewRoot.java:158) at org.ajax4jsf.framework.ajax.AjaxViewRoot.processApplication(AjaxViewRoot.java:329) at com.sun.faces.lifecycle.InvokeApplicationPhase.execute(InvokeApplicationPhase.java:75) at com.sun.faces.lifecycle.LifecycleImpl.phase(LifecycleImpl.java:200) at com.sun.faces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:90) at javax.faces.webapp.FacesServlet.service(FacesServlet.java:197) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595) Caused by: javax.faces.el.EvaluationException: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT * from glparam:sfd_operater operater WHERE operater.login = ?]; nested exception is java.sql.SQLException: A syntax error has occurred. at com.sun.faces.el.MethodBindingImpl.invoke(MethodBindingImpl.java:130) at com.sun.faces.application.ActionListenerImpl.processAction(ActionListenerImpl.java:72) ... 22 more Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT * from glparam:sfd_operater operater WHERE operater.login = ?]; nested exception is java.sql.SQLException: A syntax error has occurred. at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:230) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:554) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:588) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:613) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:645) at org.springframework.jdbc.object.SqlQuery.execute(SqlQuery.java:111) at org.springframework.jdbc.object.SqlQuery.execute(SqlQuery.java:121) at hr.helix.hbor.queries.password.UserPassword.getEncrPass(Unknown Source) at hr.helix.hbor.backbeans.AuthenticationBean.login(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.sun.faces.el.MethodBindingImpl.invoke(MethodBindingImpl.java:126) ... 23 more Caused by: java.sql.SQLException: A syntax error has occurred. at com.informix.util.IfxErrMsg.getSQLException(IfxErrMsg.java:373) at com.informix.jdbc.IfxSqli.a(IfxSqli.java:3208) at com.informix.jdbc.IfxSqli.E(IfxSqli.java:3518) at com.informix.jdbc.IfxSqli.dispatchMsg(IfxSqli.java:2353) at com.informix.jdbc.IfxSqli.receiveMessage(IfxSqli.java:2269) at com.informix.jdbc.IfxSqli.executePrepare(IfxSqli.java:1153) at com.informix.jdbc.IfxPreparedStatement.e(IfxPreparedStatement.java:318) at com.informix.jdbc.IfxPreparedStatement.a(IfxPreparedStatement.java:298) at com.informix.jdbc.IfxPreparedStatement.\(IfxPreparedStatement.java:168) at com.informix.jdbc.IfxSqliConnect.h(IfxSqliConnect.java:5918) at com.informix.jdbc.IfxSqliConnect.prepareStatement(IfxSqliConnect.java:1999) at com.mchange.v2.c3p0.impl.NewProxyConnection.prepareStatement(NewProxyConnection.java:190) at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.createPreparedStatement(PreparedStatementCreatorFactory.java:241) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:532) ... 35 more Caused by: java.sql.SQLException at com.informix.util.IfxErrMsg.getSQLException(IfxErrMsg.java:373) at com.informix.jdbc.IfxSqli.E(IfxSqli.java:3523) ... 46 more ERROR 2007-04-05 15:48:31,015 [http-8080-Processor23] org.apache.catalina.core.StandardWrapperValve (line 253): Servlet.service() for servlet Faces Servlet threw exception javax.faces.FacesException: #{authentication.login}: javax.faces.el.EvaluationException: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT * from glparam:sfd_operater operater WHERE operater.login = ?]; nested exception is java.sql.SQLException: A syntax error has occurred. at com.sun.faces.application.ActionListenerImpl.processAction(ActionListenerImpl.java:78) at javax.faces.component.UICommand.broadcast(UICommand.java:312) at org.ajax4jsf.framework.ajax.AjaxViewRoot.processEvents(AjaxViewRoot.java:180) at org.ajax4jsf.framework.ajax.AjaxViewRoot.broadcastEvents(AjaxViewRoot.java:158) at org.ajax4jsf.framework.ajax.AjaxViewRoot.processApplication(AjaxViewRoot.java:329) at com.sun.faces.lifecycle.InvokeApplicationPhase.execute(InvokeApplicationPhase.java:75) at com.sun.faces.lifecycle.LifecycleImpl.phase(LifecycleImpl.java:200) at com.sun.faces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:90) at javax.faces.webapp.FacesServlet.service(FacesServlet.java:197) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595) Caused by: javax.faces.el.EvaluationException: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT * from glparam:sfd_operater operater WHERE operater.login = ?]; nested exception is java.sql.SQLException: A syntax error has occurred. at com.sun.faces.el.MethodBindingImpl.invoke(MethodBindingImpl.java:130) at com.sun.faces.application.ActionListenerImpl.processAction(ActionListenerImpl.java:72) ... 22 more Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT * from glparam:sfd_operater operater WHERE operater.login = ?]; nested exception is java.sql.SQLException: A syntax error has occurred. at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:230) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:554) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:588) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:613) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:645) at org.springframework.jdbc.object.SqlQuery.execute(SqlQuery.java:111) at org.springframework.jdbc.object.SqlQuery.execute(SqlQuery.java:121) at hr.helix.hbor.queries.password.UserPassword.getEncrPass(Unknown Source) at hr.helix.hbor.backbeans.AuthenticationBean.login(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.sun.faces.el.MethodBindingImpl.invoke(MethodBindingImpl.java:126) ... 23 more Caused by: java.sql.SQLException: A syntax error has occurred. at com.informix.util.IfxErrMsg.getSQLException(IfxErrMsg.java:373) at com.informix.jdbc.IfxSqli.a(IfxSqli.java:3208) at com.informix.jdbc.IfxSqli.E(IfxSqli.java:3518) at com.informix.jdbc.IfxSqli.dispatchMsg(IfxSqli.java:2353) at com.informix.jdbc.IfxSqli.receiveMessage(IfxSqli.java:2269) at com.informix.jdbc.IfxSqli.executePrepare(IfxSqli.java:1153) at com.informix.jdbc.IfxPreparedStatement.e(IfxPreparedStatement.java:318) at com.informix.jdbc.IfxPreparedStatement.a(IfxPreparedStatement.java:298) at com.informix.jdbc.IfxPreparedStatement.\(IfxPreparedStatement.java:168) at com.informix.jdbc.IfxSqliConnect.h(IfxSqliConnect.java:5918) at com.informix.jdbc.IfxSqliConnect.prepareStatement(IfxSqliConnect.java:1999) at com.mchange.v2.c3p0.impl.NewProxyConnection.prepareStatement(NewProxyConnection.java:190) at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.createPreparedStatement(PreparedStatementCreatorFactory.java:241) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:532) ... 35 more Caused by: java.sql.SQLException at com.informix.util.IfxErrMsg.getSQLException(IfxErrMsg.java:373) at com.informix.jdbc.IfxSqli.E(IfxSqli.java:3523)   ---  **Affects:** 2.0.3","closed","type: bug,","spring-projects-issues","2007-04-05T01:24:25Z","2012-06-19T03:50:45Z"
"","8692","jee:jndi-lookup do not provide a way to define a default object [SPR-4012]","**[Tomasz Pik](https://jira.spring.io/secure/ViewProfile.jspa?name=pikus)** opened **[SPR-4012](https://jira.spring.io/browse/SPR-4012?redirect=false)** and commented  jee:jndi-lookup do not provide a way to define a default object (or at least documentation do not show how to setup such a thing, also xsd do not highlight any way to define it) so it cannot be used a as drop-in replacement for org.springframework.jndi.JndiObjectFactoryBean (there's no equivalent of setDefaultObject(Object) please, provide such a possibility for jee:jndi-lookup  ---  **Issue Links:** - #8465 Add defaultObject attribute to  tag (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2007-10-26T04:48:43Z","2019-01-11T16:17:08Z"
"","8772","Reference for JCA 1.5 message endpoint management [SPR-4093]","**[Tomasz Blachowicz](https://jira.spring.io/secure/ViewProfile.jspa?name=tblachowicz)** opened **[SPR-4093](https://jira.spring.io/browse/SPR-4093?redirect=false)** and commented  Please, include reference documentation on JCA 1.5 message endpoint management.   ---  **Affects:** 2.5 RC2","closed","type: documentation,","spring-projects-issues","2007-11-13T20:49:06Z","2012-06-19T03:46:55Z"
"","8771","Describe deployment a Spring application context as JCA adapter [SPR-4092]","**[Tomasz Blachowicz](https://jira.spring.io/secure/ViewProfile.jspa?name=tblachowicz)** opened **[SPR-4092](https://jira.spring.io/browse/SPR-4092?redirect=false)** and commented  Please, create a chapter explaining how to deploy a Spring application context as JCA adapter. There is comprehensive JavaDoc. I guess, it should be also in reference documentation.   ---  **Affects:** 2.5 RC2  1 votes, 2 watchers","closed","type: documentation,","spring-projects-issues","2007-11-13T20:43:53Z","2012-06-19T03:47:44Z"
"","8464","Implement 'call' pointcut primitive [SPR-3784]","**[Tomasz Blachowicz](https://jira.spring.io/secure/ViewProfile.jspa?name=tblachowicz)** opened **[SPR-3784](https://jira.spring.io/browse/SPR-3784?redirect=false)** and commented  Please, implement 'call' pointcut primitive in Spring AspectJ AOP. So far the 'execution' designator has been implmented in Spring. Because of the important differences between 'call' and 'execution' it'd be good to be able to use it in Spring AOP. Please refer to #8463 in order to see the example that shows the limitations of 'execution' designator.  ---  No further details from [SPR-3784](https://jira.spring.io/browse/SPR-3784?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-08-17T23:10:43Z","2019-01-11T19:34:46Z"
"","8463","Incorrect AspectJ pointcut matching (execution and this primitives) [SPR-3783]","**[Tomasz Blachowicz](https://jira.spring.io/secure/ViewProfile.jspa?name=tblachowicz)** opened **[SPR-3783](https://jira.spring.io/browse/SPR-3783?redirect=false)** and commented  I've been encountering issues with AspectJ pointcut matching in Spring.  * An interface X defines a method void callMe() * An abstract class AbstractXImpl implements interface X and provides implementation of method callMe() * An interface Foo extends interface X and defines other method callMeToo() * A class FooImpl implments interface Foo and extends abstract class AbstractXImpl and provides implementation of method callMeToo() * An interface Bar extends interface X * A class BarImpl implements interface Bar and extends abstract class AbstractXImpl * An interceptor Interceptor is an around advice (MethodInterceptor)  My goal is to invoke Interceptor while calling any public method on instance of class that implements interface Foo only. In other words when I have instance of class FooImpl I expect to invoke the Interceptor while calling methods X.callMe() and Foo.callMeToo(). But when I have instance of class BarImpl and call method X.callMe() on it I don't want to invoke Interceptor at all.  Perhaps my example is a bit abstract, but the patter is similar to well-known Hibernate's Generic Data Access Objects (http://www.hibernate.org/328.html). Let's assume I define ClientDAO and ProductDAO and have AuditInterceptor that should be applied only to execution of ProductDAO methods. I hope you got my point :)  The pointcut that would do it for me in AspectJ is: 'call(* X.**(..))', but unfortunately 'call' is not supported by Spring. In AspectJ I can use pointcut: '(execution(** X.**(..)) && target(Foo)) || execution(** Foo.*(..))' instead. The thing is that this pointcut doesn't match the method X.callMe() when calling on FooImpl instance. I think it's a bug in Spring, because the above pointcut works well in AspectJ.   ---  **Affects:** 2.0.7  **Attachments:** - [AspectJExecutionPointcutTest.java.patch.txt](https://jira.spring.io/secure/attachment/12808/AspectJExecutionPointcutTest.java.patch.txt) (_3.73 kB_) - [AspectJExecutionPointcutTest.xml.patch.txt](https://jira.spring.io/secure/attachment/12809/AspectJExecutionPointcutTest.xml.patch.txt) (_1.47 kB_)","closed","in: core,","spring-projects-issues","2007-08-17T22:53:06Z","2012-06-19T03:50:04Z"
"","8285","spring-aop maven artifact not being installed properly [SPR-3603]","**[Tomasz Blachowicz](https://jira.spring.io/secure/ViewProfile.jspa?name=tblachowicz)** opened **[SPR-3603](https://jira.spring.io/browse/SPR-3603?redirect=false)** and commented  When one run 'installmaven' Ant task the 'spring-aop' artifact is not being installed properly i.e. it's missing and the 'spring' artifact is being overriden with the content of spring-aop.jar file. That happens because incorrect POM file is specified for maven:install. The fix is trivial, see patch.   ---  **Affects:** 2.1 M2  **Attachments:** - [SPR-3603.patch](https://jira.spring.io/secure/attachment/12678/SPR-3603.patch) (_650 bytes_)","closed","type: bug,","spring-projects-issues","2007-06-20T00:28:01Z","2012-06-19T03:50:28Z"
"","7881","AbstractSingleSpringContextTests should allow for setting the ""allowRawInjectionDespiteWrapping"" flag [SPR-3196]","**[Tomasz Blachowicz](https://jira.spring.io/secure/ViewProfile.jspa?name=tblachowicz)** opened **[SPR-3196](https://jira.spring.io/browse/SPR-3196?redirect=false)** and commented  I have an application with a bunch of beans that uses Spring 1.2.x. It needs to be upgraded to Spring 2.0. Unfortunately I encountered org.springframework.beans.factory.BeanCurrentlyInCreationException exception. There is a ticket #7104, that describes the problem and what's more Jourgen has provided fix for that which works very well.  There is only one issue. I can't run test that loads the whole application context, because it uses ClasspathXmlApplicationContext class internally and ther is no way to set the flag allowRawInjectionDespiteWrapping for BeanFactory.  ---  **Affects:** 2.0.2  **Attachments:** - [AbstractSingleSpringContextTests.patch](https://jira.spring.io/secure/attachment/12417/AbstractSingleSpringContextTests.patch) (_1.61 kB_)","closed","type: enhancement,","spring-projects-issues","2007-02-23T00:13:39Z","2019-01-11T17:36:04Z"
"","8099","Inner transaction using PROPAGATION_REQUIRES_NEW affects outer transactions using savepoints (or PROPAGATION_NESTED) [SPR-3416]","**[Tom Walker](https://jira.spring.io/secure/ViewProfile.jspa?name=mrtom)** opened **[SPR-3416](https://jira.spring.io/browse/SPR-3416?redirect=false)** and commented  When an inner transaction using PROPAGATION_REQUIRES_NEW completes any savepoints in the outer transaction are lost and so can't be rolled back. Obviously this also affects transactions that have PROPAGATION_NESTED.  Exception thrown is: org.springframework.transaction.TransactionSystemException: Could not roll back to JDBC savepoint; nested exception is java.sql.SQLException: ORA-01086: savepoint 'SAVEPOINT_1' never established   ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-04-25T19:58:56Z","2019-01-11T17:42:40Z"
"","8149","Step by Step Tutorial didn't work on Step 22 - Adding a form [SPR-3466]","**[Tom Turner](https://jira.spring.io/secure/ViewProfile.jspa?name=tturner)** opened **[SPR-3466](https://jira.spring.io/browse/SPR-3466?redirect=false)** and commented  With base eclipse 3.2 and WTP plugin, eclipse wasn't aware of any Spring tags.  e.g.    Once the Spring IDE plugin was added the errors went away.  ---  **Affects:** 2.0.5  **Issue Links:** - #6878 Rewrite MVC step-by-step guide for 2.5","closed","type: task,","spring-projects-issues","2007-05-09T11:21:44Z","2019-01-11T18:01:27Z"
"","8148","Step by Step Tutorial didn't work on Step 13 - Improve index.jsp [SPR-3465]","**[Tom Turner](https://jira.spring.io/secure/ViewProfile.jspa?name=tturner)** opened **[SPR-3465](https://jira.spring.io/browse/SPR-3465?redirect=false)** and commented  Step 13 - Improve index.jsp - got error Servlet.service() for servlet springapp threw exception org.apache.jasper.JasperException: /WEB-INF/jsp/hello.jsp(8,33) According to TLD or attribute directive in tag file, attribute value does not accept any expressions  when using this     changed to the following and it worked.     ---  **Affects:** 2.0.5  **Issue Links:** - #6878 Rewrite MVC step-by-step guide for 2.5","closed","type: task,","spring-projects-issues","2007-05-09T11:08:21Z","2019-01-11T18:01:29Z"
"","8227","Client-side JAX-WS Support in Spring Core [SPR-3544]","**[Tom Kerigan](https://jira.spring.io/secure/ViewProfile.jspa?name=tomkerigan)** opened **[SPR-3544](https://jira.spring.io/browse/SPR-3544?redirect=false)** and commented  In the latest version of Spring, a developer has the ability to access a web service using out-of-the-box web service proxies (namely, the LocalJaxRpcServiceFactoryBean and JaxRpcPortProxyFactoryBean).  This is a formal request to include support for invoking a JAX-WS web service in a similar fashion.  ---  **Issue Links:** - #9489 HTTP BASIC authentication with JAX-WS  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-06-02T12:58:32Z","2019-01-11T19:09:01Z"
"","7926","@Configurable fails when injected attribute has default value [SPR-3241]","**[Tom Duffey](https://jira.spring.io/secure/ViewProfile.jspa?name=tduffey)** opened **[SPR-3241](https://jira.spring.io/browse/SPR-3241?redirect=false)** and commented  The change from #7584 breaks `@Configurable` injection when the injected attributes have default values.  The beans are still configured but afterward the injected value is overwritten by the class' default value.  For example, if you have something like:      @Configurable(autowire=Autowire.BY_TYPE)     private static class ShouldBeConfiguredBySpringUsingAutowireByType {          	private TestBean friend = null;          	public TestBean getFriend() {     		return friend;     	}          	public void setFriend(TestBean friend) {     		this.friend = friend;     	}     }  the ""friend"" attribute is injected but then set back to null afterward.  I did not experience this behavior prior to the aforementioned change.  ---  **Affects:** 2.0.3  **Attachments:** - [BeanConfigurerTests.java.patch](https://jira.spring.io/secure/attachment/12457/BeanConfigurerTests.java.patch) (_598 bytes_)","closed","in: core,","spring-projects-issues","2007-03-07T15:46:22Z","2019-01-13T22:43:58Z"
"","8155","Bad interactions betwen advice when one binds the original method parameters and one does not. [SPR-3472]","**[Tom DeWire](https://jira.spring.io/secure/ViewProfile.jspa?name=tomdewire)** opened **[SPR-3472](https://jira.spring.io/browse/SPR-3472?redirect=false)** and commented  Repeated from my original forum post: (http://forum.springframework.org/showthread.php?t=38619)  We have two pieces of advice that we would like to execute ""around"" a service method. The service method takes a single parameter.  The first piece of advice (AdviceA in this example) wants to capture all of the methods in the class. It does not care about the parameters passed into those methods.  The second piece of advice (AdviceB in this example) wants to capture a specific method. It does care about the parameter. It wants to record this transaction into the logs if certain criteria are met.  This was all working fine in spring 2.0.2. We recently attempted to upgrade to 2.0.5, and we ran into some failures. We backed off the versions and determined the root cause appears to be a change introduced with 2.0.3.  Specifically, we're receive this error immediately after calling proceed() from the first piece of advice:  Exception in thread ""main"" java.lang.IllegalStateException: Required to bind 2 arguments, but only bound 1 (JoinPointMatch was NOT bound in invocation)  It seems worth noting that either of these pieces of advice will execute just fine if they are allowed to execute alone. It is only when **both** pieces of advice are applied that we run into this issue.  I've managed to replicate this behavior in a very small test. I'll attempt to attach that to this bug (if i'm allowed to do that sort of thing).  ---  **Affects:** 2.0.3, 2.0.4, 2.0.5  **Attachments:** - [aop-test.zip](https://jira.spring.io/secure/attachment/12591/aop-test.zip) (_12.96 kB_) - [aop-test-dependencies-corrected.zip](https://jira.spring.io/secure/attachment/12595/aop-test-dependencies-corrected.zip) (_13.13 kB_)  **Issue Links:** - #8202 around advice does not bind parameters if another advise is active on same join point (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2007-05-11T03:16:59Z","2019-01-11T18:01:02Z"
"","8757","ControllerBeanNameHandlerMapping to register all Controllers (and ThrowawayControllers) by their bean name regardless of the format of the name or alias. [SPR-4079]","**[Tom Czarniecki](https://jira.spring.io/secure/ViewProfile.jspa?name=tomczarniecki)** opened **[SPR-4079](https://jira.spring.io/browse/SPR-4079?redirect=false)** and commented  This class differs from the BeanNameUrlHandlerMapping by registering all beans that implement the Controller and ThrowawayController interfaces, regardless of the format of the alias or bean name. However, the bean name and aliases are converted to a URL format before registration. This allows us to have the same controller class appear in different beans, as opposed to the ControllerClassNameHandlerMapping.  ---  **Attachments:** - [ControllerBeanNameHandlerMapping.java](https://jira.spring.io/secure/attachment/13095/ControllerBeanNameHandlerMapping.java) (_6.59 kB_)  **Issue Links:** - #8808 Allow ControllerClassNameHandlerMapping and `@Controller` to work together","closed","type: enhancement,","spring-projects-issues","2007-11-11T07:22:07Z","2019-01-13T08:06:46Z"
"","8193","StoredProcedure enhancement to allow parameters to be optional [SPR-3510]","**[toddmcgrath](https://jira.spring.io/secure/ViewProfile.jspa?name=toddmcgrath)** opened **[SPR-3510](https://jira.spring.io/browse/SPR-3510?redirect=false)** and commented  Extending StoredProcedure is working great.  ``` public SampleStoredProcedure(DataSource dataSource, String sprocName) {     super(dataSource, sprocName);     declareParameter(new SqlReturnResultSet(""rs"", new EventMapper()));     declareParameter(new SqlParameter(""EventTitle"", Types.VARCHAR));     declareParameter(new SqlParameter(""EventType"", Types.VARCHAR));     declareParameter(new SqlParameter(""StartDate"", Types.DATE));     declareParameter(new SqlParameter(""EndDate"", Types.DATE));     declareParameter(new SqlParameter(""Location"", Types.VARCHAR));     declareParameter(new SqlParameter(""MinPrice"", Types.INTEGER));     declareParameter(new SqlParameter(""MaxPrice"", Types.INTEGER));     compile(); } ```  There are times when I don't want to supply a MinPrice, MaxPrice values and use the defaults I've set in the sproc. But, I can't figure out how to avoid having to set every parameter declared. Know what I mean? Example- if I set 5 of the parameters in the map, I receive an exception about requiring 7 inputs.  Forum Reference: http://forum.springframework.org/showthread.php?t=39086  ---  **Issue Links:** - #17398 Support for named parameters in SimpleJdbcCall - #9084 Support named parameters in CallableStatementCreator implementation  12 votes, 8 watchers","closed","status: bulk-closed,","spring-projects-issues","2007-05-22T13:31:12Z","2019-01-12T02:38:57Z"
"","8033","BeanFactory driven DI for Quartz Jobs [SPR-3349]","**[Tobias Mattsson](https://jira.spring.io/secure/ViewProfile.jspa?name=sigget)** opened **[SPR-3349](https://jira.spring.io/browse/SPR-3349?redirect=false)** and commented  I'm providing a class that extends MethodInvokingJobDetailFactoryBean and directs invocations onto a bean resolved from the bean factory. This enables the use of regular dependency injection by specifying dependencies in bean definitions. Apart from giving a more 'natural' way of doing DI for quartz jobs it also fixes the issue filed as issue #7588 and in doing that it also gets `@Required` working again which is also broken for DI managed by QuartzSpringBean. This is also related to #6390.  ---  **Affects:** 2.0.3  **Attachments:** - [BeanDelegatingJobDetail.java](https://jira.spring.io/secure/attachment/12522/BeanDelegatingJobDetail.java) (_2.30 kB_)","closed","type: enhancement,","spring-projects-issues","2007-04-05T23:28:39Z","2019-01-11T18:16:23Z"
"","8319","Spring's JSF DelegatingPhaseListenerMulticaster could be made faster [SPR-3638]","**[Titi Wangsa](https://jira.spring.io/secure/ViewProfile.jspa?name=blacksnow666)** opened **[SPR-3638](https://jira.spring.io/browse/SPR-3638?redirect=false)** and commented  i'm proposing a new class that still delages the phase listeners but less with less lookup, lookup is done at the beginning. The only drawback is that all the phase listeners must be singleton (which is not a big problem)  import java.util.Collection; import java.util.Iterator;  import javax.faces.context.FacesContext; import javax.faces.event.PhaseEvent; import javax.faces.event.PhaseId; import javax.faces.event.PhaseListener;  import org.springframework.beans.factory.BeanFactoryUtils; import org.springframework.beans.factory.ListableBeanFactory; import org.springframework.util.Assert; import org.springframework.web.context.WebApplicationContext; import org.springframework.web.jsf.FacesContextUtils;  public class SingletonDelegatingPhaseListenerMulticaster implements PhaseListener {      /**      *       */     private static final long serialVersionUID = -7398561695796546546L;     private final Collection delegates = getDelegates(FacesContext     		.getCurrentInstance());          public PhaseId getPhaseId() {     	return PhaseId.ANY_PHASE;     }          public void beforePhase(PhaseEvent event) {     	Collection listeners = getDelegates();     	Iterator it = listeners.iterator();     	while (it.hasNext()) {     		PhaseListener listener = (PhaseListener) it.next();     		listener.beforePhase(event);     	}     }          public void afterPhase(PhaseEvent event) {     	Collection listeners = getDelegates();     	Iterator it = listeners.iterator();     	while (it.hasNext()) {     		PhaseListener listener = (PhaseListener) it.next();     		listener.afterPhase(event);     	}     }          private Collection getDelegates() {     	return delegates;     }          protected Collection getDelegates(FacesContext facesContext) {     	ListableBeanFactory bf = getBeanFactory(facesContext);     	final Collection withPrototype = BeanFactoryUtils     			.beansOfTypeIncludingAncestors(bf, PhaseListener.class, true,     					false).values();     	final Collection withoutPrototype = BeanFactoryUtils     			.beansOfTypeIncludingAncestors(bf, PhaseListener.class, false,     					false).values();     	Assert.isTrue(withPrototype.size() == withoutPrototype.size(),     			""Bean definition contains prototype beans"");     	return withoutPrototype;          }          protected ListableBeanFactory getBeanFactory(FacesContext facesContext) {     	return getWebApplicationContext(facesContext);     }          protected WebApplicationContext getWebApplicationContext(     		FacesContext facesContext) {     	return FacesContextUtils.getRequiredWebApplicationContext(facesContext);     }  }   --- No further details from [SPR-3638](https://jira.spring.io/browse/SPR-3638?redirect=false)","closed","in: web,","spring-projects-issues","2007-07-01T12:23:16Z","2019-01-11T18:33:19Z"
"","8277","bad javadoc for org.springframework.test.annotation.Timed [SPR-3595]","**[Titi Wangsa](https://jira.spring.io/secure/ViewProfile.jspa?name=blacksnow666)** opened **[SPR-3595](https://jira.spring.io/browse/SPR-3595?redirect=false)** and commented  the documentation of org.springframework.test.annotation.Timed of spring 2.0.5 says  Code:  /** * Test annotation to indicate that a test * method should be invoked repeatedly. *  * `@author` Rod Johnson * `@since` 2.0   */  but.. (1) that's the exact documentation for class org.springframework.test.annotation.Repeat (2) there is an attribute long millis(); which conflicts with the documentation   ---  **Affects:** 2.0.5","closed","type: bug,","spring-projects-issues","2007-06-15T23:47:50Z","2012-06-19T03:51:07Z"
"","7986","Spring MockHttpServletResponse does not commit if the outputstream is over buffer size. [SPR-3301]","**[Ting Yu](https://jira.spring.io/secure/ViewProfile.jspa?name=ting)** opened **[SPR-3301](https://jira.spring.io/browse/SPR-3301?redirect=false)** and commented  For normal HttpServletResponse, the response will set to be committed if the data in the outputstream exceeds the buffer size. So we cannot set the content type, reset the response or do some other operations. MockHttpServletResponse does not have this behaviour, so it is not easy to test large outputstream for response. The patch of fix and test is as follows: Index: mock/org/springframework/mock/web/DelegatingServletOutputStream.java  ---  RCS file: /cvsroot/springframework/spring/mock/org/springframework/mock/web/DelegatingServletOutputStream.java,v retrieving revision 1.6 diff -u -r1.6 DelegatingServletOutputStream.java --- mock/org/springframework/mock/web/DelegatingServletOutputStream.java	15 Oct 2006 18:23:22 -0000	1.6 +++ mock/org/springframework/mock/web/DelegatingServletOutputStream.java	23 Mar 2007 07:07:29 -0000 @@ -16,6 +16,7 @@  package org.springframework.mock.web;  +import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.OutputStream;  @@ -34,6 +35,7 @@ public class DelegatingServletOutputStream extends ServletOutputStream {      private final OutputStream targetStream;  + private final MockHttpServletResponse aResponse;    /**   @@ -42,8 +44,21 @@   */   public DelegatingServletOutputStream(OutputStream targetStream) {   this.targetStream = targetStream;  +         aResponse = null;    }  +         /**  +         * Create a new DelegatingServletOutputStream.  +         * This is a special case for testing servlet response. The response should  +         * be committed if its outputstream exceeds the buffer size. So callback is  +         * needed in write(int)  +         * @param pResponse the servlet response  +         */  +         public DelegatingServletOutputStream(MockHttpServletResponse pResponse) {  +         this.targetStream = pResponse.getContent();  +         aResponse = pResponse;  +         }  + public OutputStream getTargetStream() {   return targetStream;   }   @@ -51,6 +66,10 @@    public void write(int b) throws IOException {   this.targetStream.write(b);  +         ByteArrayOutputStream lOutput = (ByteArrayOutputStream) targetStream;  +         if (aResponse != null && lOutput.size() > aResponse.getBufferSize()) {  +         aResponse.setCommitted(true);  +         }    }    public void flush() throws IOException {   Index: mock/org/springframework/mock/web/MockHttpServletResponse.java   ================================================================================================================    RCS file: /cvsroot/springframework/spring/mock/org/springframework/mock/web/MockHttpServletResponse.java,v   retrieving revision 1.16   diff -u -r1.16 MockHttpServletResponse.java   --- mock/org/springframework/mock/web/MockHttpServletResponse.java	14 Jan 2007 14:06:09 -0000	1.16   +++ mock/org/springframework/mock/web/MockHttpServletResponse.java	23 Mar 2007 07:07:29 -0000   @@ -68,7 +68,7 @@    private final ByteArrayOutputStream content = new ByteArrayOutputStream();  - private final DelegatingServletOutputStream outputStream = new DelegatingServletOutputStream(this.content);  + private final DelegatingServletOutputStream outputStream = new DelegatingServletOutputStream(this);    private PrintWriter writer;  @@ -160,12 +160,16 @@ } if (this.writer == null) { Writer targetWriter = (this.characterEncoding != null ?  ---      new OutputStreamWriter(this.content, this.characterEncoding) : new OutputStreamWriter(this.content));  -         this.writer = new PrintWriter(targetWriter);  +         new OutputStreamWriter(this.outputStream, this.characterEncoding) : new OutputStreamWriter(this.outputStream));  +            this.writer = new MockPrintWriter(targetWriter, true);       }       return this.writer;    }  + public ByteArrayOutputStream getContent() {  +         return this.content;  +         }  + public byte[] getContentAsByteArray() {   flushBuffer();   return this.content.toByteArray();   @@ -447,4 +451,25 @@   return this.includedUrl;   }  +         /**  +         * MockPrintWriter to flush into the outputstream once  +         * write.  +         */  +         private class MockPrintWriter extends PrintWriter {  +         public MockPrintWriter(Writer pWriter, boolean pAutoFlush) {  +         super(pWriter, pAutoFlush);  +         }  +   +         public void write(char buf[], int off, int len) {  +         super.write(buf, off, len);  +         flush();  +         }  +   +         public void write(String s, int off, int len) {  +         super.write(s, off, len);  +         flush();  +         }  +   +         }  +   } Index: test/org/springframework/mock/web/MockHttpServletResponseTests.java  ---  RCS file: /cvsroot/springframework/spring/test/org/springframework/mock/web/MockHttpServletResponseTests.java,v retrieving revision 1.4 diff -u -r1.4 MockHttpServletResponseTests.java --- test/org/springframework/mock/web/MockHttpServletResponseTests.java	27 Oct 2006 16:26:14 -0000	1.4 +++ test/org/springframework/mock/web/MockHttpServletResponseTests.java	23 Mar 2007 07:07:40 -0000 @@ -16,6 +16,8 @@  package org.springframework.mock.web;  +import java.io.IOException; +import java.util.Arrays; import junit.framework.TestCase; import org.springframework.web.util.WebUtils;  @@ -52,4 +54,22 @@ assertEquals(""HTTP header casing not being preserved"", headerName, responseHeaders.iterator().next()); }  + public void testServletOutputStreamIsCommittedLogic() throws IOException {  +         MockHttpServletResponse lResponse = new MockHttpServletResponse();  +         assertFalse(lResponse.isCommitted());  +         int size = lResponse.getBufferSize() + 1;  +         lResponse.getOutputStream().write(new byte[size]);  +         assertTrue(lResponse.isCommitted());  + }  +   + public void testServletWriterIsCommittedLogic() throws IOException {  +         MockHttpServletResponse lResponse = new MockHttpServletResponse();  +         assertFalse(lResponse.isCommitted());  +         int size = lResponse.getBufferSize() + 1;  +         char[] data = new char[size];  +         Arrays.fill(data, 'p');  +         lResponse.getWriter().write(data);  +         assertTrue(lResponse.isCommitted());  + }  +   }  ---  **Affects:** 2.0 final  **Attachments:** - [mock.patch](https://jira.spring.io/secure/attachment/12491/mock.patch) (_5.66 kB_)","closed","type: enhancement,","spring-projects-issues","2007-03-25T08:09:26Z","2019-01-13T22:43:47Z"
"","8057","Add initializing options to ResourceBundleViewResolver [SPR-3373]","**[Tim Kettering](https://jira.spring.io/secure/ViewProfile.jspa?name=timster)** opened **[SPR-3373](https://jira.spring.io/browse/SPR-3373?redirect=false)** and commented  We were having issues with our web application throwing errors on the first request on the site.  We tracked down the issue to be a combination of the spring context being refreshed when the view resolver was forcing a refresh when adding the locale resource bundle - this was refreshing the application context as a whole and wiping out thread-bound variables (due to application bootstrap cleanup.. not anything spring specific).  We wanted to find a way to try forcing the view resolver to initialize before the first web request.  The current setup of ResourceBundleViewResolver does not offer much in this regard.  I realize that part of the difficulty is that it would probably be impratical to have to initialize the bundles for every known locale for a pre-init to work properly.  We wrote a subclass - where we could pass in a list of locales as a property and expose a initialize method that would pre-init those locales.  Since we know which locales we are supporting on our webapplication, we can pass in all the locales we know will need to be initialized.  This is not a true solution though, and was opening this issue in the hopes of starting some discussion on a improved approach.. either by eliminating the need for a context refresh when the cache is updated, or a way to easily preload known locales...   ---  **Affects:** 2.0.4  **Attachments:** - [NonLazyInitResourceBundleViewResolver.java](https://jira.spring.io/secure/attachment/12532/NonLazyInitResourceBundleViewResolver.java) (_1.58 kB_)","closed","type: enhancement,","spring-projects-issues","2007-04-13T05:44:45Z","2012-06-19T03:50:38Z"
"","8103","Problem upgrading from Spring 1.2.8 to 2.0.2 due to new ""extractPathWithinPattern"" method in PathMatcher interface [SPR-3420]","**[Tiago Brito Spindola](https://jira.spring.io/secure/ViewProfile.jspa?name=tbspindola)** opened **[SPR-3420](https://jira.spring.io/browse/SPR-3420?redirect=false)** and commented  I've developed a Web Report Engine based on Spring 1.2.8 for replacing a retired commercial product. When Spring 2.0 was released I tried to migrate the engine to the new Spring version by just replacing the necessary JAR files. Unfortunately this could not be done because I've implemented a PathMatcher 's regular expression version, which of course did not have the new method extractPathWithinPattern. 1. Is it correct to create a PathMatcher implementation when necessary or is it an ""internal"" interface that should not be implemented in the application code? 2. Is the new method extractPathWithinPattern applicable for any kind of PathMatcher or is it more related to AntPathMatchers? In my application URLs like ""/faap\.report_[\w$#]+\.view"" are mapped to a controller and ""/faap\.menu_[\w$#]+\.view"" to another controller. The mappings should be also case insensitive, i.e. ""/faap.menu_test1.view"" and ""/FAAP.menu_Test1.view"" should match the same controller.    Thanks is advance!    ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-04-26T08:30:45Z","2012-06-19T03:50:06Z"
"","8591","requires EntityManagerFactory when deploying in Tomcat [SPR-3911]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-3911](https://jira.spring.io/browse/SPR-3911?redirect=false)** and commented  Deploying a web app using  on Tomcat 6.0.13 throws exception looking for javax.persistence.EntityManagerFactory.  SEVERE: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: javax/persistence/EntityManagerFactory at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:557) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:238) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:167) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:235) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:167) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:867) at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:588) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:351) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:245) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:188) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3827) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4334) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:553) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:488) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1138) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053) at org.apache.catalina.core.StandardHost.start(StandardHost.java:719) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:516) at org.apache.catalina.core.StandardServer.start(StandardServer.java:710) at org.apache.catalina.startup.Catalina.start(Catalina.java:566) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413) Caused by: java.lang.NoClassDefFoundError: javax/persistence/EntityManagerFactory at java.lang.Class.getDeclaredMethods0(Native Method) at java.lang.Class.privateGetDeclaredMethods(Class.java:2365) at java.lang.Class.getDeclaredMethods(Class.java:1763) at java.beans.Introspector$1.run(Introspector.java:1265) at java.security.AccessController.doPrivileged(Native Method) at java.beans.Introspector.getPublicDeclaredMethods(Introspector.java:1263) at java.beans.Introspector.getTargetMethodInfo(Introspector.java:1129) at java.beans.Introspector.getBeanInfo(Introspector.java:387) at java.beans.Introspector.getBeanInfo(Introspector.java:159) at org.springframework.beans.CachedIntrospectionResults.\(CachedIntrospectionResults.java:242) at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:141) at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:247) at org.springframework.beans.BeanWrapperImpl.getPropertyDescriptors(BeanWrapperImpl.java:254) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1105) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:968) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529) ... 34 more    ---  **Affects:** 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-24T06:11:12Z","2012-06-19T03:47:15Z"
"","8518","Document new features in SimpleJdbcTemplate and new SimpleJdbcInsert and SimpleJdbcCall  [SPR-3838]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-3838](https://jira.spring.io/browse/SPR-3838?redirect=false)** and commented  Need new documentation of new features in SimpleJdbcTemplate and new SimpleJdbcInsert and SimpleJdbcCall  ---  **Affects:** 2.1 M4  **Issue Links:** - #6764 Complete SimpleJdbc classes and move out of sandbox","closed","type: documentation,","spring-projects-issues","2007-09-03T01:13:19Z","2019-01-11T19:17:53Z"
"","8397","SqlOutParameter should support scale [SPR-3716]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-3716](https://jira.spring.io/browse/SPR-3716?redirect=false)** and commented  Scale was added to SqlParameter - we should add it to SqlOutParameter as well so we can control the scale returned from stored procedure calls.  ---  **Affects:** 2.1 M2  **Issue Links:** - #7004 SqlParameter should support scale for double values - #9877 SqlInOutParameter needs a constructor accepting scale","closed","type: enhancement,","spring-projects-issues","2007-07-27T01:43:19Z","2019-01-11T19:30:37Z"
"","8224","Align usage of RowSetMetaData with recent clarifications from JDBC EG regarding the use of column aliases [SPR-3541]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-3541](https://jira.spring.io/browse/SPR-3541?redirect=false)** and commented  MySQL ConectorJ implementations 5.0 and later for the ResultSetMetaData return the column alias in the getColumnLabel method and the name of the actual column in the getColumnName method.  This causes a problem when we map row data based on the meta data.   This change in behavior is based on clarifications from the JDBC EG.  According to the new JDBC 4.0 specification the way to account for any column aliases used in a SQL query is by accessing the ResultSetMetaData.getColumnLabel rather than getColumnName.  ""columnLabel - the label for the column specified with the SQL AS clause. If the SQL AS clause was not specified, then the label is the name of the column""  We should, when it's available, use ColumnLabel instead of ColumnName for BeanPropertyRowMapper and ColumnMapRowMapper implementations.    ---  **Affects:** 1.2.9, 2.0.5, 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-06-01T02:18:47Z","2012-06-19T03:50:43Z"
"","8151","Add exception translation for Java 6 SQLException sub-classes [SPR-3468]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-3468](https://jira.spring.io/browse/SPR-3468?redirect=false)** and commented  Java 6 introduces sub-classes for SQLException and we should use these sub-classes as a basis for the exception translation   ---  **Affects:** 2.1 M1","closed","type: enhancement,","spring-projects-issues","2007-05-10T08:27:39Z","2012-06-19T03:50:43Z"
"","8759","JavaDoc for PropertyEditorRegistry.registerCustomEditor inconsistent [SPR-4097]","**[Thomas Klaeger](https://jira.spring.io/secure/ViewProfile.jspa?name=tomy)** opened **[SPR-4097](https://jira.spring.io/browse/SPR-4097?redirect=false)** and commented  The sentence  For example, if you wanted to register an editor for ""items[n].quantity"" (for all values n), you would use ""items.quality"" as the value of the 'propertyPath' argument to this method.  should mention the same property everytime - ie either quantity or quality   ---  **Affects:** 2.0.7, 2.5 RC2  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-11-13T23:06:50Z","2012-06-19T03:46:49Z"
"","8135","Doc: Nested declarative transaction management leads to UnexpectedRollbackException in case of a silent inner setRollbackOnly call [SPR-3452]","**[Thomas Hoppe](https://jira.spring.io/secure/ViewProfile.jspa?name=thoppe)** opened **[SPR-3452](https://jira.spring.io/browse/SPR-3452?redirect=false)** and commented  Hi,  First off: I'm not sure whether this is really a bug!  As I could not get a hint in the forum, nor the documentation, on the topic discussed here:  http://forum.springframework.org/showthread.php?t=36298  I'm filing this as a bug.  A similar problem is described here: http://forum.springframework.org/showthread.php?t=26574  The author describes his problem with an UnexpectedRollbackException and Jürgen Höller responds that ...in the case of nested transactions with JTA, you have to roll back in the outer most transaction...  I think I'm doing this by defining propagation=""REQUIRED"" for nested method calls but rolling back only works when I roll back in the outer most method. But why? With propagation=""REQUIRED"" all nested method invocations should pick up the transaction of the outer most method (I confirmed this by looking at the debug output)    ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-05-04T02:32:34Z","2012-10-22T10:09:01Z"
"","7976","Documnetation of OSIV Filter could state that the flush mode is changed  [SPR-3291]","**[Thomas Hoppe](https://jira.spring.io/secure/ViewProfile.jspa?name=thoppe)** opened **[SPR-3291](https://jira.spring.io/browse/SPR-3291?redirect=false)** and commented  I would describe the behaviour of the filter a bit more detailed and structured. I had the problem that I was very surprised that the flush mode changes to AUTO in conjunction with a transaction. Therefore I would put the ""NOTE"" section like this:  ---  NOTE: This filter will by default not flush the Hibernate Session, the flush mode is set to FlushMode.NEVER therefore. The created session is assumes to be used in combination with service layer transactions that care for the flushing, or HibernateAccessors with flushMode FLUSH_EAGER. If a transaction manager like HibernateTransactionManager or JtaTransactionManager is used, sessions pre-bound by this filter will automatically be used for the transactions. The transaction managers will change the the flush mode to FlushMode.AUTO during the transaction. If you want this filter to flush after completed request processing, override closeSession  and invoke flush on the Session before closing it. Additionally, you will also need to override getSession() to return a Session in a flush mode other than the default flush mode. Note that getSession  and closeSession will just be invoked in single session mode!  ---  This might make the sentence:  ""In the latter case, Sessions pre-bound by this filter will automatically be used for the transactions and flushed accordingly.""  obselete  ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-22T22:15:28Z","2019-01-13T22:43:49Z"
"","7963","Include quartz-all.jar instead of core quartz.jar only [SPR-3278]","**[Thomas Hoppe](https://jira.spring.io/secure/ViewProfile.jspa?name=thoppe)** opened **[SPR-3278](https://jira.spring.io/browse/SPR-3278?redirect=false)** and commented  The class  org.quartz.impl.jdbcjobstore.oracle.OracleDelegate  seems to be missing in the Quartz distribution which is bundled with Spring 2.0.3. Delegate classes for all other popular DBMS seem to be there.   ---  **Affects:** 2.0.3","closed","in: core,","spring-projects-issues","2007-03-21T02:48:26Z","2012-06-19T03:50:22Z"
"","8821","TagWriter should support free form text [SPR-4143]","**[Thom Hehl](https://jira.spring.io/secure/ViewProfile.jspa?name=thehl)** opened **[SPR-4143](https://jira.spring.io/browse/SPR-4143?redirect=false)** and commented  I am attempting to create a new tag subclass of AbstractHtmlInputElementTag. My tag actually creates multiple form fields.  The issue is that TagWriter doesn't allow you to write any free form text to the tag output outside of the tag methods except for appendValue which only works while inside of a tag.  I'd like to see one of three features added to this class:  1) allow appendValue to work outside of a tag.  2) add a new method that will simply write to the underlying writer without being in a tag.  3) give protected access to the writer (getWriter()) so that I may subclass TagWriter and write to the underlying writer myself.  Thanks.  ---  **Affects:** 2.0.7  **Issue Links:** - #8828 Spring MVC form tags made easily extendable - #9468 Expose TagWriter to subclasses","closed","type: enhancement,","spring-projects-issues","2007-11-21T00:29:30Z","2019-01-11T15:45:52Z"
"","8392","Allow international alias of message bundles [SPR-3711]","**[Thom Hehl](https://jira.spring.io/secure/ViewProfile.jspa?name=thehl)** opened **[SPR-3711](https://jira.spring.io/browse/SPR-3711?redirect=false)** and commented  Currently, messages are resolved by interpreting the locale from the HTTP header and looking for a file with basename_ln_CC.properties. This works as it should.  The problem is that I don't wish to maintain separate files for, e.g., US and CA. In addition Safari's only supports the locale English with no country code. I'd like all of these be aliases of the same file.  I am trapped on windows, so I cannot solve this problem using sym-links, so what I 'd like is to feed the ResourceBundleMessageSource an optional list of from and to locales so if it is unable to locate messages_en_CA.properties, I can tell it to use messages_en_US.properties.  This seems like a good mod and would be very inexpensive to implement.  Thanks!   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-07-24T23:09:33Z","2012-06-19T09:37:37Z"
"","8191","Singleton ActionSupport beans overlapping instance data [SPR-3508]","**[Thom Hehl](https://jira.spring.io/secure/ViewProfile.jspa?name=thehl)** opened **[SPR-3508](https://jira.spring.io/browse/SPR-3508?redirect=false)** and commented  I have two ActionSupport beans defined in my XML file:           	../do/ruleReview     	true     	     	     	     	                	       	                           	         	  	     	                               	../do/ruleReview     	false     	     	     	     	                	       	                           	       	                  These two beans are used in different parts of the application. If you notice, the property excuseStatements contains one bean for /ruleReview and no beans for /ruleReview2.  the first time I access /ruleReview it has one bean for excuseStatements. The second time, it has 0 beans. 100% re-creatable.  I place singleton=""false"" on both bean definitions and the problem evaporated. I am never modifying the contents of this list outside the XML configuration.  Thanks.   ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-05-22T08:29:16Z","2019-01-11T19:07:01Z"
"","8675","eager loading of handler mappings forces unnecessary classpath scans [SPR-3995]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3995](https://jira.spring.io/browse/SPR-3995?redirect=false)** and commented  Since code is quite similar/duplicate, the issue is quite similar to #8543 At the moment handler mappings are loader eagerly (see DefaultNamespaceHandlerResolver).  A lazy loading implementation would perform just as well in the scenario when mappings are actually consulted. In the scenario where mappings are never used (eg. only ""beans"" namespace elements) this should provide a noticeable performance increase.  ---  **Affects:** 2.0.7, 2.1 M4  **Issue Links:** - #8669 Lazy loading of NamespaceHandlers when a namespace is actually accessed","closed","in: core,","spring-projects-issues","2007-10-21T21:25:04Z","2019-01-11T21:17:09Z"
"","8627","AspectJAdviceParameterNameDiscoverer  never gets consulted is ASM not in classpath [SPR-3947]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3947](https://jira.spring.io/browse/SPR-3947?redirect=false)** and commented  AbstractAspectJAdvice#createParameterNameDiscoverer() creates a chain of two discoverers: 1) a LocalVariableTableParameterNameDiscoverer (which uses ASM to access the local variable table - if present) 2) a AspectJAdviceParameterNameDiscoverer (which tries to deduce names from the pointcut expression)  The second discoverer (AspectJAdviceParameterNameDiscoverer) contains a nice long comment about the implementation, and ends with the smarty-pants comment ""Was that perfectly clear? ;)""  Unfortunately it seems things were not perfectly clear to the author of the code: since LocalVariableTableParameterNameDiscoverer contains a load-time dependency on ASM classes, the absence of ASM on the classpath will trigger a ""java.lang.NoClassDefFoundError: org/objectweb/asm/ClassVisitor"" when AbstractAspectJAdvice#createParameterNameDiscoverer() runs.  Ironically, the amount of users compiling with ""-g:vars"" for the sake of Spring AOP is probably zero - but the current implementation forces a dependency on ASM just to discover an absent LocalVariableTable. While the size of the ASM jars is trivial the absence of a versioning strategy is not - making it all to easy to end up with conflicting dependencies on different ASM versions.  Was that perfectly clear? ;) In case it was not, surrounding ASM-dependent code with a ClassUtils#isPresent() check would be a good idea.   ---  **Affects:** 2.0.6, 2.1 M4","closed","in: core,","spring-projects-issues","2007-09-30T00:21:45Z","2012-06-19T03:47:31Z"
"","8601","Reference manual section on using parameterized pointcuts in XML style  [SPR-3921]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3921](https://jira.spring.io/browse/SPR-3921?redirect=false)** and commented  Section 6.3.2 of the reference manual states: — Note that pointcuts defined in this way are referred to by their XML id, and cannot define pointcut parameters. The named pointcut support in the schema based definition style is thus more limited than that offered by the `@AspectJ` style. —  This seems not completely correct - or at least incomplete.  For example, consider the following: —                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             — public Object around(ProceedingJoinPoint pjp, String a, String b) throws Throwable { // ... } — It seems that - in effect - it actually is possible to define a pointcut in XML style that contains parameters (the `@Pointcut` analog would be using pointcut parameters). I think a bit of clarification could be added to this section of the manual - or at least the wording could be more explicit about what's supported and what's not.   ---  **Affects:** 2.0.6, 2.1 M4","closed","in: core,","spring-projects-issues","2007-09-25T19:04:14Z","2012-06-19T03:46:40Z"
"","8599","spring tlds missing type declarations [SPR-3919]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3919](https://jira.spring.io/browse/SPR-3919?redirect=false)** and commented  The TLDs for the spring tag libraries are missing type declaration for the various attributes.  At least for boolean attributes, a declaration enabled IDEs to provide ""true""/""false"" completion (and validation).   ---  **Affects:** 2.0.6, 2.1 M4","closed","status: declined,","spring-projects-issues","2007-09-25T08:25:53Z","2019-01-12T16:39:47Z"
"","8598","jms schema missing annotations [SPR-3918]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3918](https://jira.spring.io/browse/SPR-3918?redirect=false)** and commented  Attributes ""connection-factory"", ""task-executor"", many more...   ---  **Affects:** 2.1 M4","closed","type: bug,","spring-projects-issues","2007-09-25T08:22:43Z","2012-06-19T03:47:31Z"
"","8597","Minor typos in aop reference doc [SPR-3917]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3917](https://jira.spring.io/browse/SPR-3917?redirect=false)** and commented  Example code in section 6.3.4 contains: -a comma that shouldn't be there:    types-matching=""com.xzy.myapp.service.*+"", -""implement-interface"" attribute uses an unqualified type (""UsageTracked"")   ---  **Affects:** 2.0.6, 2.1 M4","closed","in: core,","spring-projects-issues","2007-09-25T08:20:29Z","2012-06-19T03:46:51Z"
"","8574","Revise BeanDefinitionParsers to not rely on XSD defaulting [SPR-3894]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3894](https://jira.spring.io/browse/SPR-3894?redirect=false)** and commented  In some scenarios it's preferable to disable XSD validation: -performance-sensitive infrastructure -an environment where the XML parser doesn't support XSD validations (or perhaps has limited/buggy XSD support)  Fortunately Spring allows to customize the validation strategy. In the example below, we're overriding ClassPathXmlApplicationContext:  ``` public class CustomClassPathXmlApplicationContext extends ClassPathXmlApplicationContext {     public CustomClassPathXmlApplicationContext(String s, Class aClass) throws BeansException {         super(s, aClass);     }      protected void initBeanDefinitionReader(XmlBeanDefinitionReader beanDefinitionReader) {         beanDefinitionReader.setValidationMode(XmlBeanDefinitionReader.VALIDATION_NONE);         beanDefinitionReader.setNamespaceAware(true);     } } ```  The problem is that some ""core"" namespaces depend on XSD attribute defaulting. One example is : attribute ""transaction-manager"" is defined as:  ```     ...  ```  When XSD validation is turned off, such default will not be ""expanded"" by the parser at runtime. This results is an empty attribute value being read in `org.springframework.transaction.config.AnnotationDrivenBeanDefinitionParser#registerTransactionAspect`.  For example, consider this beans xml fragment:  ```          ```  Loading it with XSD validation disabled results in:  ``` Exception in thread ""main"" org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [test.xml]; nested exception is java.lang.IllegalArgumentException: 'beanName' must not be empty 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:375) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:280) 	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) 	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:108) 	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:79) 	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:101) 	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:406) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:338) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:184) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:159) 	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:145) 	at org.foo.test.CustomClassPathXmlApplicationContext.(CustomClassPathXmlApplicationContext.java:9) 	at org.foo.test.ParseTest.main(ParseTest.java:9) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:585) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90) Caused by: java.lang.IllegalArgumentException: 'beanName' must not be empty 	at org.springframework.util.Assert.hasText(Assert.java:162) 	at org.springframework.beans.factory.config.RuntimeBeanReference.(RuntimeBeanReference.java:58) 	at org.springframework.beans.factory.config.RuntimeBeanReference.(RuntimeBeanReference.java:46) 	at org.springframework.transaction.config.AnnotationDrivenBeanDefinitionParser$AopAutoProxyConfigurer.configureAutoProxyCreator(AnnotationDrivenBeanDefinitionParser.java:109) 	at org.springframework.transaction.config.AnnotationDrivenBeanDefinitionParser.parse(AnnotationDrivenBeanDefinitionParser.java:77) 	at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1252) 	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1242) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:133) 	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:90) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:458) 	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:353) 	... 18 more ```  The implementation of some ""code"" namespace elements has a dependency on XSD validation being enabled. This obviously conflicts with any scenario where such validation is disabled.  The use of XSD attribute defaulting is a widely documented ""Schema anti-pattern"". It combines concerns that are better separated: validation and transformation (inserting of default values). Even experienced developers fall into this trap, see #8268 for an example.  There is no need to use XSD defaulting at all: selection of default can be easily implemented in the code that's processing the XML (in this specific case `AnnotationDrivenBeanDefinitionParser`).  Implemented that way: -the code will always work, and won't be influenced by the current validation setting -the logic will be in one place  ---  **Affects:** 2.0.6, 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-19T19:27:34Z","2019-01-11T19:20:15Z"
"","8543","XmlBeanDefinitionReader handling of entityResolver forces full classpath scan [SPR-3863]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3863](https://jira.spring.io/browse/SPR-3863?redirect=false)** and commented  XmlBeanDefinitionReader allows customization of the ""entityResolver"" strategy.  However, the (only) constructor instantiates either a DelegatingEntityResolver, or a ResourceEntityResolver (which extends DelegatingEntityResolver). The DelegatingEntityResolver constructor, in turn, instantiates a PluggableSchemaResolver, which will perform a full scan of the current classpath (using org.springframework.core.io.support.PropertiesLoaderUtils#loadAllProperties).  So, even if I supply a super-efficient entityResolver strategy, Spring is so nice to scan my classpath of 200 JAR files anyway ;-)   ---  **Affects:** 2.0.6, 2.1 M4","closed","in: core,","spring-projects-issues","2007-09-11T09:28:19Z","2012-06-19T03:47:32Z"
"","8504","wrong 'expected-type' annotation for /@advice-ref [SPR-3824]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3824](https://jira.spring.io/browse/SPR-3824?redirect=false)** and commented  The various AOP schemas contain an erroneous annotation for the  element definition.  Attribute ""advice-ref"" is annotated as having an ""expected-type"" of ""org.springframework.aop.Advisor"". (line 365 in spring-aop-2.0.xsd for me) Looking at the actual implementation (or the documentation: http://static.springframework.org/spring/docs/2.0.x/reference/aop.html#aop-schema-advisors) shows the value should probably be ""org.aopalliance.aop.Advice"".  In addition, could you please take a look at #8269? That one has considerable usability impact, and seems to be sitting unnoticed in JIRA for months..  ---  **Affects:** 2.0.6, 2.1 M3","closed","in: core,","spring-projects-issues","2007-08-30T07:30:35Z","2019-01-11T19:19:26Z"
"","8404","Clearly document interaction of argNames/arg-names and JoinPoint/ProceedingJoinPoint parameter [SPR-3723]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3723](https://jira.spring.io/browse/SPR-3723?redirect=false)** and commented  The first parameter of an advice method can be of type JoinPoint/ProceedingJoinPoint. The documentation is unclear whether the argNames annotation parameter and the arg-names XML attribute should include such a parameter when it is present in the method signature.  Worse, actual behavior differs between schema and `@Aspect` styles.  For example, consider the following schema-based aspect: —  — public Object doAround(ProceedingJoinPoint p, String a) throws Throwable { return p.proceed(); } — Running this with 2.1M2 will throw: — java.lang.IllegalStateException: Expecting to find 2 arguments to bind by name in advice, but actually found 1 arguments. — Changing the value of ""arg-names"" to ""p,a"" makes the exception disappear.  However, translating this to the `@Aspect` style, and applying it with  seems **not** to require the ProceedingJoinPoint argument to be included in the corresponding argNames annotation argument.  So, two things are requested: 1) Clearly document (with examples) if a first advice method parameter of type JoinPoint (or a subtype) needs to be included in argNames/arg-names 2) Make the behavior consistent between schema and `@Aspect` styles of AOP    ---  **Affects:** 2.1 M2","closed","in: core,","spring-projects-issues","2007-07-31T20:02:54Z","2012-06-19T03:50:17Z"
"","8345","CGLIB proxy creation through deserialization (to disable double ctor call) [SPR-3664]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3664](https://jira.spring.io/browse/SPR-3664?redirect=false)** and commented  I'm not sure it's worth the effort, or if it has already been considered..  It might be possible to use an approach similar to the one employed by XStream and Objenesis to work around the ""double ctor call"" problem experienced by CGLIB-proxied spring beans.   ---  **Affects:** 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-07-06T08:40:29Z","2012-06-19T09:37:29Z"
"","8279","example code ch.9 incomplete [SPR-3597]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3597](https://jira.spring.io/browse/SPR-3597?redirect=false)** and commented  Section ""9.5.7. Advising transactional operations"" of the reference manual lists two pieces of example code. The subject is combining custom advice with transactional advice, and controlling the ordering of advice.  It seems that the first example is missing an explicit ""order"" attribute on the  element.  The second example **does** set the order for both the custom and the transactional advice, and is accompanied by the text: ""Finally, find below some example configuration for effecting the same setup as above, but using the purely XML declarative approach."" So, it's not ""the same setup as above"", as the first example is only explicitly setting the order for the custom (profiling) advice.   ---  **Affects:** 2.0.5, 2.1 M1, 2.1 M2","closed","in: core,","spring-projects-issues","2007-06-17T06:46:47Z","2012-06-19T03:50:19Z"
"","8271","advice order (on a single aspect) dependes on declaration order, which cannot be reliably queried [SPR-3589]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3589](https://jira.spring.io/browse/SPR-3589?redirect=false)** and commented  Aop documentation (6.2.4.7. Advice ordering) states that:  ---  ...For advice defined within the same aspect, precedence is established by declaration order.  ---  Maybe aj compiler/runtime do some magic in the realm of AspectJ from which this `@Aspect` systax was copied... However in pure Java world (as of most recent Sun releases) there's no reliable way to retrieve order of method declaration at runtime.  ---  **Affects:** 2.0.5, 2.1 M2","closed","in: core,","spring-projects-issues","2007-06-14T19:14:53Z","2019-01-13T08:08:11Z"
"","8270","Tool schema support to distinguish parsers and decorators [SPR-3588]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3588](https://jira.spring.io/browse/SPR-3588?redirect=false)** and commented  From XSD alone it's impossible to see which (top-level) elements/attributes are decorators, and which parsers.   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-06-14T04:48:10Z","2012-06-19T09:37:41Z"
"","8269","Tool schema annotation for BeanDefinitionParsers that contribute custom scopes [SPR-3587]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3587](https://jira.spring.io/browse/SPR-3587?redirect=false)** and commented   ---  **Affects:** 2.0.5  **Attachments:** - [exports-scope.patch](https://jira.spring.io/secure/attachment/12805/exports-scope.patch) (_1021 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-06-14T04:44:41Z","2012-06-19T03:50:26Z"
"","8268",": wrong handling of ""proxy-target-class"" [SPR-3586]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3586](https://jira.spring.io/browse/SPR-3586?redirect=false)** and commented   and  both use the same logic to handle ""proxy-target-class"":  ---  boolean proxyTargetClass = Boolean.valueOf(element.getAttribute(""proxy-target-class"")).booleanValue(); if (proxyTargetClass) { AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(parserContext.getRegistry()); }  ---   seems to reinvent the wheel, which should be a first warning sign:  ---  String proxyTargetClass = element.getAttribute(PROXY_TARGET_ATTRIBUTE); if (StringUtils.hasText(proxyTargetClass)) { beanDef.getPropertyValues().addPropertyValue(PROXY_TARGET_CLASS, proxyTargetClass); }  ---  The XSD definition of all three ""proxy-target-class"" attributes has a ""default"" of false. So, a XSD-aware parser in full XSD mode will report an attribute value of ""false"", even when the attribute is completely absent.  The code in {org.springframework.aop.config.AspectJAutoProxyBeanDefinitionParser#extendBeanDefinition} will happily override any ""proxy-target-class"" forcing set by previously encountered  and/or  elements. Even worse, AOP proxy style will (potentially) depend on the order in which the configuration files making up the context are processed.  ---  **Affects:** 2.0.5, 2.1 M1, 2.1 M2","closed","in: core,","spring-projects-issues","2007-06-14T04:27:17Z","2019-01-13T22:42:53Z"
"","8263","documentation on visibility of  incorrect [SPR-3581]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3581](https://jira.spring.io/browse/SPR-3581?redirect=false)** and commented  Section ""6.3.2. Declaring a pointcut"" states:  ---  A pointcut can be declared inside an aspect, in which case it is visible only within that aspect. A pointcut can also be declared directly inside an   element, enabling the pointcut definition to be shared across several aspects and advisors.  ---  In practice such ""visibility"" rules don't exist. The  parser will happily register any found pointcut, and doesn't contain any visibility logic. Using \ elements with the same ""id"", but contained by different  elements does not ""make it visible only within that aspect"". Instead, it makes the XML parser throw an exception at runtime (because of duplicate xsd:ID values).  I don't think special visibility logic is needed: no same person will use the schema-based AOP style do declare 100s of pointcuts. Instead I suggest to simply correct the documentation.  ---  **Affects:** 2.0.5, 2.1 M1, 2.1 M2","closed","type: bug,","spring-projects-issues","2007-06-12T08:21:52Z","2019-01-13T22:42:55Z"
"","8262","""id"" on  could be required [SPR-3580]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3580](https://jira.spring.io/browse/SPR-3580?redirect=false)** and commented  At the moment the aop namespace schema does not declare the ""id"" attribute on  as required. As far as I can see it does not make sense to define anonymous pointcuts. Making the attribute required could catch some developer errors.  If there **is** a use for anonymous pointcuts (that I've missed), it would make sense to document this in the reference manual.   ---  **Affects:** 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-06-12T08:11:04Z","2012-06-19T03:51:03Z"
"","8197","Document or remove empty  sections [SPR-3514]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3514](https://jira.spring.io/browse/SPR-3514?redirect=false)** and commented  Some of the namespace schemas include empty  blocks:  ---                                                ---  Apart from decreasing readability it's not clear what such declarations actually mean.  1) If it means ""I export something, but don't know what"", take advantage of type system of Java, and use ""java.lang.Object"" 2) In addition, it seems to me that  is actually totally useless. For example, such annotations won't tell me what a  ectually exports, would they? 3) It seems that no one actually uses the \ schema. Perhaps some thinking about usage patterns should precede the throwing around of such annotations?  ---  **Affects:** 2.1 M1","closed","in: core,","spring-projects-issues","2007-05-23T02:17:05Z","2019-01-13T22:43:10Z"
"","8161","jvm version detection in context namespace handler is tooling-unfriendly [SPR-3478]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3478](https://jira.spring.io/browse/SPR-3478?redirect=false)** and commented  {org.springframework.context.config.ContextNamespaceHandler} uses {org.springframework.core.JdkVersion} to decide whether annotation-config/component-scan support should be registered.  It seems that this decision was made without thinking about the (mythical?) ""tooling support"" provided by spring.  Consider these two scenarios: 1) tooling runs on 1.4, target deployment platform is 1.5 (unlikely, and besides the code could not run anyway) 2) tooling runs on 1.5, target deployment platform is 1.4 (quite likely)  The context namespace handler will make it's decision based on the jvm version that the tooling runs on, which could work sometimes, but is generally brittle (and bad design). Similar issues will pop up later for 1.6/1.7 specific features.  It would be nice if the code driving the bean definition parsing process could somehow have some control here.   ---  **Affects:** 2.1 M1","closed","type: enhancement,","spring-projects-issues","2007-05-13T18:25:26Z","2012-06-19T03:51:20Z"
"","8160","context schema violates tool schema constraint [SPR-3477]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3477](https://jira.spring.io/browse/SPR-3477?redirect=false)** and commented  Browsing through a recent 2.1-m1 snapshot, IDEA highlighted an error in the new context XSD schema. Indeed, the tool schema does not allow multiple occurrences.  ```  	 		 		 			 				 				 				 			 		 	  ```  Definition for  looks like (note maxOccurs constraint):  ```  ```  Perhaps I'm not understanding the purpose, but isn't  totally useless anyway? I mean, it says ""this element"" exports an ""foo.bar.Baz"", but since I don't know using what name this bean will be registered this information is useless. If I want to see what is registered, and using what name, I have to run the whole XmlBeanDefinitionReader machinery anyway.   ---  **Affects:** 2.1 M1","closed","in: core,","spring-projects-issues","2007-05-13T04:00:15Z","2019-01-13T22:43:16Z"
"","8156","dead field in PointcutComponentDefinition [SPR-3473]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3473](https://jira.spring.io/browse/SPR-3473?redirect=false)** and commented  Ctor arg ""expression"" of PointcutComponentDefinition is assigned to a private final field, and is not accessible through other methods.  IDEA flagged this while I was browsing around. Since it's been there for a year, I wonder if anyone actually has ever looked at the code? It this supposed to be part of the 'tooling api'?   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-05-11T08:20:13Z","2012-06-19T03:50:29Z"
"","8096","trivial javadoc typo in PathMatchingResourcePatternResolver [SPR-3413]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3413](https://jira.spring.io/browse/SPR-3413?redirect=false)** and commented  Class Javadoc for PathMatchingResourcePatternResolver has a broken \ tag. Search for ""a code>""   ---  **Affects:** 2.0.3","closed","in: core,","spring-projects-issues","2007-04-24T23:47:35Z","2007-04-25T04:47:13Z"
"","8068","Misnamed parameter in org.springframework.orm.hibernate3.HibernateOperations#findByNamedParam [SPR-3385]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-3385](https://jira.spring.io/browse/SPR-3385?redirect=false)** and commented  HibernateOperations (from hibernate3 package) lists:  ``` List findByNamedParam(String queryName, String paramName, Object value)           throws DataAccessException; ```  First parameter should actually be named ""queryString"". Note that the JavaDoc is wrong as well.   ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-04-18T06:48:26Z","2012-06-19T03:50:27Z"
"","8260","Improve extensibility of TransactionAspectSupport [SPR-3578]","**[tal](https://jira.spring.io/secure/ViewProfile.jspa?name=talyac)** opened **[SPR-3578](https://jira.spring.io/browse/SPR-3578?redirect=false)** and commented  The TransactionAspectSupport class accesses its member ""transactionManager"" directly rather than using the getter method. This causes problems when attempting to extend TransactionAspectSupport  and override getTransactionManager to return a result other than the member transactionManager. The methods completeTransactionAfterThrowing and commitTransactionAfterReturning should be changed.   ---  **Affects:** 2.0.5, 2.1 M1, 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-06-12T01:31:06Z","2012-06-19T03:50:54Z"
"","8069","MethodInvokingFactoryBean#getObjectType() throws ""java.lang.IllegalStateException: prepare() must be called prior to invoke() on MethodInvoker"" when autowired [SPR-3386]","**[Tag McGillicutty](https://jira.spring.io/secure/ViewProfile.jspa?name=mrpantsuit)** opened **[SPR-3386](https://jira.spring.io/browse/SPR-3386?redirect=false)** and commented  I have the following element in my Spring XML that does some static initialization:  \ \ \ \ \  This worked fine with Spring 2.0.2, but with Spring 2.0.4, I get this:  2007-04-16 15:53:36.045 WARN [T:main][DefaultListableBeanFactory] FactoryBean threw exception from getObjectType, despi te the contract saying that it should return null if the type of its object cannot be determined yet java.lang.IllegalStateException: prepare() must be called prior to invoke() on MethodInvoker at org.springframework.util.MethodInvoker.getPrepared Method(MethodInvoker.java:254) at org.springframework.beans.factory.config.MethodInv okingFactoryBean.getObjectType(MethodInvokingFacto ryBean.java:199) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.getTypeForFactoryBean(A bstractAutowireC apableBeanFactory.java:557) at org.springframework.beans.factory.support.Abstract BeanFactory.isTypeMatch(AbstractBeanFactory.java:4 26) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.getBeanNamesForType(DefaultList ableBeanFactory. java:174) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.getBeanNamesForType(DefaultList ableBeanFactory. java:154) at org.springframework.beans.factory.BeanFactoryUtils .beanNamesForTypeIncludingAncestors(BeanFactoryUti ls.java:130) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.findAutowireCandidates(DefaultL istableBeanFacto ry.java:351) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.autowireByType(Abstract AutowireCapableB eanFactory.java:892) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.populateBean(AbstractAu towireCapableBea nFactory.java:807) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanF actory.java:423) at org.springframework.beans.factory.support.Abstract BeanFactory$1.getObject(AbstractBeanFactory.java:2 51) at org.springframework.beans.factory.support.DefaultS ingletonBeanRegistry.getSingleton(DefaultSingleton BeanRegistry.jav a:144) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.BeanDefi nitionValueResolver.resolveReference(BeanDefinitio nValueResolver.j ava:261) at org.springframework.beans.factory.support.BeanDefi nitionValueResolver.resolveValueIfNecessary(BeanDe finitionValueRes olver.java:109) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.applyPropertyValues(Abs tractAutowireCap ableBeanFactory.java:1073) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.populateBean(AbstractAu towireCapableBea nFactory.java:835) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanF actory.java:423) at org.springframework.beans.factory.support.BeanDefi nitionValueResolver.resolveInnerBean(BeanDefinitio nValueResolver.j ava:215) at org.springframework.beans.factory.support.BeanDefi nitionValueResolver.resolveValueIfNecessary(BeanDe finitionValueRes olver.java:122) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.applyPropertyValues(Abs tractAutowireCap ableBeanFactory.java:1073) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.populateBean(AbstractAu towireCapableBea nFactory.java:835) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanF actory.java:423) at org.springframework.beans.factory.support.Abstract BeanFactory$1.getObject(AbstractBeanFactory.java:2 51) at org.springframework.beans.factory.support.DefaultS ingletonBeanRegistry.getSingleton(DefaultSingleton BeanRegistry.jav a:144) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.Abstract BeanFactory.getTypeForFactoryBean(AbstractBeanFact ory.java:1102) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.getTypeForFactoryBean(A bstractAutowireC apableBeanFactory.java:570) at org.springframework.beans.factory.support.Abstract BeanFactory.isTypeMatch(AbstractBeanFactory.java:4 26) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.getBeanNamesForType(DefaultList ableBeanFactory. java:174) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.getBeanNamesForType(DefaultList ableBeanFactory. java:154) at org.springframework.beans.factory.BeanFactoryUtils .beanNamesForTypeIncludingAncestors(BeanFactoryUti ls.java:130) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.findAutowireCandidates(DefaultL istableBeanFacto ry.java:351) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.autowireByType(Abstract AutowireCapableB eanFactory.java:892) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.populateBean(AbstractAu towireCapableBea nFactory.java:807) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanF actory.java:423) at org.springframework.beans.factory.support.Abstract BeanFactory$1.getObject(AbstractBeanFactory.java:2 51) at org.springframework.beans.factory.support.DefaultS ingletonBeanRegistry.getSingleton(DefaultSingleton BeanRegistry.jav a:144) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.BeanDefi nitionValueResolver.resolveReference(BeanDefinitio nValueResolver.j ava:261) at org.springframework.beans.factory.support.BeanDefi nitionValueResolver.resolveValueIfNecessary(BeanDe finitionValueRes olver.java:109) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.applyPropertyValues(Abs tractAutowireCap ableBeanFactory.java:1073) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.populateBean(AbstractAu towireCapableBea nFactory.java:835) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanF actory.java:423) at org.springframework.beans.factory.support.BeanDefi nitionValueResolver.resolveInnerBean(BeanDefinitio nValueResolver.j ava:215) at org.springframework.beans.factory.support.BeanDefi nitionValueResolver.resolveValueIfNecessary(BeanDe finitionValueRes olver.java:122) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.applyPropertyValues(Abs tractAutowireCap ableBeanFactory.java:1073) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.populateBean(AbstractAu towireCapableBea nFactory.java:835) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanF actory.java:423) at org.springframework.beans.factory.support.Abstract BeanFactory$1.getObject(AbstractBeanFactory.java:2 51) at org.springframework.beans.factory.support.DefaultS ingletonBeanRegistry.getSingleton(DefaultSingleton BeanRegistry.jav a:144) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.Abstract BeanFactory.getTypeForFactoryBean(AbstractBeanFact ory.java:1102) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.getTypeForFactoryBean(A bstractAutowireC apableBeanFactory.java:570) at org.springframework.beans.factory.support.Abstract BeanFactory.isTypeMatch(AbstractBeanFactory.java:4 26) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.getBeanNamesForType(DefaultList ableBeanFactory. java:174) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.getBeanNamesForType(DefaultList ableBeanFactory. java:154) at org.springframework.beans.factory.BeanFactoryUtils .beanNamesForTypeIncludingAncestors(BeanFactoryUti ls.java:130) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.findAutowireCandidates(DefaultL istableBeanFacto ry.java:351) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.autowireByType(Abstract AutowireCapableB eanFactory.java:892) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.populateBean(AbstractAu towireCapableBea nFactory.java:807) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanF actory.java:423) at org.springframework.beans.factory.support.Abstract BeanFactory$1.getObject(AbstractBeanFactory.java:2 51) at org.springframework.beans.factory.support.DefaultS ingletonBeanRegistry.getSingleton(DefaultSingleton BeanRegistry.jav a:144) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.BeanDefi nitionValueResolver.resolveReference(BeanDefinitio nValueResolver.j ava:261) at org.springframework.beans.factory.support.BeanDefi nitionValueResolver.resolveValueIfNecessary(BeanDe finitionValueRes olver.java:109) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.applyPropertyValues(Abs tractAutowireCap ableBeanFactory.java:1073) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.populateBean(AbstractAu towireCapableBea nFactory.java:835) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanF actory.java:423) at org.springframework.beans.factory.support.Abstract BeanFactory$1.getObject(AbstractBeanFactory.java:2 51) at org.springframework.beans.factory.support.DefaultS ingletonBeanRegistry.getSingleton(DefaultSingleton BeanRegistry.jav a:144) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.autowireByName(Abstract AutowireCapableB eanFactory.java:854) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.populateBean(AbstractAu towireCapableBea nFactory.java:802) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanF actory.java:423) at org.springframework.beans.factory.support.Abstract BeanFactory$1.getObject(AbstractBeanFactory.java:2 51) at org.springframework.beans.factory.support.DefaultS ingletonBeanRegistry.getSingleton(DefaultSingleton BeanRegistry.jav a:144) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.DefaultL istableBeanFactory.preInstantiateSingletons(Defaul tListableBeanFac tory.java:279) at org.springframework.context.support.AbstractApplic ationContext.refresh(AbstractApplicationContext.ja va:360) at org.springframework.context.support.ClassPathXmlAp plicationContext.\(ClassPathXmlApplicationCon text.java:91) at org.springframework.context.support.ClassPathXmlAp plicationContext.\(ClassPathXmlApplicationCon text.java:75) at flintstone.server.Main.initializeSpring(Main.java: 47) at flintstone.server.Main.main(Main.java:67)  Related forum post is here: http://forum.springframework.org/showthread.php?p=114606#post114606   ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-04-18T09:30:06Z","2012-06-19T03:50:51Z"
"","8677","DefaultContextLoadTimeWeaver should check if InstrumentationSavingAgent is in classpath [SPR-3997]","**[Sören Chittka](https://jira.spring.io/secure/ViewProfile.jspa?name=soeren.chittka@googlemail.com)** opened **[SPR-3997](https://jira.spring.io/browse/SPR-3997?redirect=false)** and commented  I noticed, that in the class DefaultContextLoadTimeWeaver, if no supported classloader was found, you call ""InstrumentationSavingAgent.getInstrumentation()"" without any checks wether it is available.  If I want to use a ReflectiveLoadTimeWeaver (i.e. for Tomcat) and do not put spring-agent.jar on the classpath, this will result in an exception.  Maybe some checking would be possible?   ---  **Affects:** 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-10-22T01:11:15Z","2012-06-19T03:46:39Z"
"","8190","@Repository should allow to define a custom name (for usage with context:component-scan) [SPR-3507]","**[Sören Chittka](https://jira.spring.io/secure/ViewProfile.jspa?name=soeren.chittka@googlemail.com)** opened **[SPR-3507](https://jira.spring.io/browse/SPR-3507?redirect=false)** and commented  The new feature in 2.1M1 for scanning for Components is really great, but I noticed one little problem with this.  I defined a Service like this: `@Component`(""dummyService"") public class DefaultDummyService implements DummyService { `@Resource` private DummyRepository dummyRepository;  .... operations from interface 'DummyService' ... }  and a Repository like this: `@Repository` public class DefaultDummyRepository implements DummyRepository { ... implementation of 'DummyRepository' ... }  It would be nice, if I could define a name on the Repository-Annotation just like on the Component-Annotation, so I have a possibility to select the name under which the bean is registered in the applicationcontext.  I guess this should not be to complicated.  btw.: I know, I could use `@Autowired`, but somehow I feel more comfortable with using 'standard'-Annotations at this level and with defining the bean-names by myself.   ---  **Affects:** 2.1 M1","closed","type: enhancement,","spring-projects-issues","2007-05-21T23:06:27Z","2012-06-19T03:51:08Z"
"","8082","Doc: Possible data corruption during multiple tabs and sessionform [SPR-3399]","**[Syed Arshad](https://jira.spring.io/secure/ViewProfile.jspa?name=arshadnj)** opened **[SPR-3399](https://jira.spring.io/browse/SPR-3399?redirect=false)** and commented  When a user opens multiple browser tabs, they all share the same http session and if the user opens multiple data-sets for the same ""form"" then they will end up using the same session form. So, when a user updates the records through one of the tab, he/she may end up over-writing the contents of other tabs.  This is related to the following enhancement BUT I am creating this as new bug since the non-availability of this functionality is leading to data corruption: http://opensource.atlassian.com/projects/spring/browse/SPR-1969  ---  **Affects:** 1.2.9, 2.0.4  **Issue Links:** - #6662 Multiple instances of the same form - AbstractFormController and getFormSessionAttributeName","closed","type: task,","spring-projects-issues","2007-04-20T08:08:36Z","2019-01-11T18:17:17Z"
"","8062","Configuring basename to accept Absolute File Path [SPR-3379]","**[swapnil sawe](https://jira.spring.io/secure/ViewProfile.jspa?name=swapsawe)** opened **[SPR-3379](https://jira.spring.io/browse/SPR-3379?redirect=false)** and commented  Hi !!!  We are using Spring framework's ResourceBundleMessageSource, now my requirement is to have the errorMessages out of my jar, and may not be necessarily on classpath, so how should I go for setting basename using absolute path?  Regards,  swapnil.   --- No further details from [SPR-3379](https://jira.spring.io/browse/SPR-3379?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-04-16T22:27:23Z","2007-04-17T06:46:46Z"
"","8569","Typo in documentation [SPR-3889]","**[Svend Vanderveken](https://jira.spring.io/secure/ViewProfile.jspa?name=svend)** opened **[SPR-3889](https://jira.spring.io/browse/SPR-3889?redirect=false)** and commented  At the end of chapter 3.3.7:  ""The above example is generally is not a desirable solution since""  should be  ""The above example generally is not a desirable solution since""  Cheers,   ---  **Affects:** 2.0.6, 2.1 M4","closed","type: bug,","spring-projects-issues","2007-09-18T01:12:37Z","2012-06-19T03:47:43Z"
"","8205","Argument modified in around advice reverts back to original argument in following aspect's before advice [SPR-3522]","**[Sunny Ip](https://jira.spring.io/secure/ViewProfile.jspa?name=scyip)** opened **[SPR-3522](https://jira.spring.io/browse/SPR-3522?redirect=false)** and commented  I have two aspects that run one right after the other. Aspect 1 has an around advice that passes in a different argument to the proceed method than the original method call had. In Aspect 2's before advice, the getArgs returns the original argument passed into the target method instead of the one Aspect 1 passed into the proceed. Aspect 2's around advice works fine, getArgs returning the new argument. I noticed this is working in 2.0-rc4.   ---  **Affects:** 2.0.4, 2.0.5  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/12632/test.zip) (_144.74 kB_)","closed","in: core,","spring-projects-issues","2007-05-25T09:05:48Z","2019-01-11T19:06:03Z"
"","8818","JdkRegexpMethodPointcut doesnt work for all method names except which starts with ""update""  [SPR-4139]","**[sudhish pathiyeri](https://jira.spring.io/secure/ViewProfile.jspa?name=sudhish)** opened **[SPR-4139](https://jira.spring.io/browse/SPR-4139?redirect=false)** and commented  JdkRegexpMethodPointcut does work for all method names except which starts with ""update"" when the pointcut is applied on class using ""jdbcTemplate""  \ 		 \ 			 \ 			 \ 			 		\.*\.save.*\ \.*\.update.*\ 			\ 		 \ 	\ The framework give PropertyAccessException, for the jdbcTemplate used in the DAO. The Point cut is used with BeanAutoProxyCreator with proxyTargetClass set as true.   ---  **Affects:** 2.0.6","closed","in: core,","spring-projects-issues","2007-11-20T16:37:20Z","2019-01-11T15:46:31Z"
"","8563","Wrong attribute (order) in the documentation sample configuration of Chapter 9 [SPR-3883]","**[steven](https://jira.spring.io/secure/ViewProfile.jspa?name=xml2008)** opened **[SPR-3883](https://jira.spring.io/browse/SPR-3883?redirect=false)** and commented  In section 9.5.7. Advising transactional operations of  spring documentation, (http://static.springframework.org/spring/docs/2.0.x/reference/transaction.html#transaction-declarative-applying-more-than-just-tx-advice)  there is a sample configuration file:  \  \                                              ...  The line     \ should be :  \   ---  **Affects:** 2.0.6, 2.1 M4","closed","type: bug,","spring-projects-issues","2007-09-15T22:30:57Z","2012-06-19T03:47:10Z"
"","8872","Allow to set placeholderPrefix and placeholderSuffix on ResourceEditor for resolving system properties [SPR-4194]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-4194](https://jira.spring.io/browse/SPR-4194?redirect=false)** and commented  Unfortunately maven in some cases removes ${...} strings with {}.  This removes system property placeholders that have to be replaced by system property values. If we could change the placeholder prefix for the ResourceEditor this would allow us to circumvent this problem.   ---  **Affects:** 2.0.7, 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-29T00:52:39Z","2012-06-19T09:36:22Z"
"","8847","Error when client ApplicationContext calls methods on parent ApplicationContext ""too early"" [SPR-4169]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-4169](https://jira.spring.io/browse/SPR-4169?redirect=false)** and commented  We get this error:   \ \ \  We deploy our application in an EAR. The EAR contains EJBs and a number of WARs. >  > The EJBs load an ApplicationContext using SingletonBeanFactoryLocator. >  > ContextLoaderListener recuperates this parent ApplicationContext and calls getBeanFactory() on it. This results in the above EAR since Weblogic deploys the WAR before the create method on the EJBs is called.  ---  **Affects:** 2.0.7, 2.5 final  **Issue Links:** - #8979 Initializing shared context from within an EJB and sharing it with a web module  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","in: core,","spring-projects-issues","2007-11-27T00:33:51Z","2019-01-11T16:04:31Z"
"","8583","Add getInstance() methods on SingletonBeanFactoryLocator with ClassLoader argument [SPR-3903]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-3903](https://jira.spring.io/browse/SPR-3903?redirect=false)** and commented  Specifically, this is required to load resources from the class path with a specific class loader. This ClassLoader should then be passed to the constructor of PathMatchingResourcePatternResolver.   ---  **Affects:** 2.0.6, 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-23T06:55:47Z","2015-09-22T17:34:33Z"
"","8575","Let DefaultMessageListenerContainer do a pre-condition check before receive messages [SPR-3895]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-3895](https://jira.spring.io/browse/SPR-3895?redirect=false)** and commented  We want to avoid that DMLC continues to read messages in case of certain error conditions in our application.  These error conditions are typically temporary and are either resolved automatically after some time or through an administrator's intervention.  By letting DMLC check before reading messages we avoid that message are consumed and then rolled back. This way we avoid that message go into an error queue after X rollbacks.    ---  **Affects:** 2.0.6, 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-20T00:53:37Z","2012-06-19T03:47:12Z"
"","8556","Asynchronous execution of ApplicationListeners through annotation [SPR-3876]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-3876](https://jira.spring.io/browse/SPR-3876?redirect=false)** and commented  Attached is a 3-class implementation that lets ApplicationListener implementations execute in an asynchronous fashion:  `@Async` public class MyApplicationListener implements ApplicationListener { public void onApplicationEvent(ApplicationEvent event) { // do something } }  The implementation includes a BPP that detects `@Async` on ApplicationListeners and wraps them in a decorator with a TaskExecutor. On arrival of an event the onApplicationEvent() method is executed in a seperate thread.  ---  **Attachments:** - [async_application_listener.zip](https://jira.spring.io/secure/attachment/12906/async_application_listener.zip) (_1.17 kB_)  **Issue Links:** - #8211 AsynchronousExecutionInterceptor  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-09-14T01:08:06Z","2019-01-11T19:21:35Z"
"","8428","Factor out retrieval of InputStream for class name to method in OverridingClassLoader [SPR-3747]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-3747](https://jira.spring.io/browse/SPR-3747?redirect=false)** and commented  This would allow overriding where classes are loaded from ...   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-08-08T20:16:37Z","2012-06-19T03:50:11Z"
"","8408","HibernateJDBCException doesn't log SQL statement that caused the exception [SPR-3727]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-3727](https://jira.spring.io/browse/SPR-3727?redirect=false)** and commented  Instead, HibernateJDBCException just wraps the org.hibernate.JDBCException without logging the malevolent SQL statement.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-08-01T00:59:11Z","2012-06-19T03:51:21Z"
"","8367","Finding autowire candidates for properties autowired by type fails because of incorrect FactoryBean creation [SPR-3686]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-3686](https://jira.spring.io/browse/SPR-3686?redirect=false)** and commented  First, a little background: we're encountering an endless loop when creating an ApplicationContext. Unfortunately this code can't be made public. After some debugging we did discover that Spring eats an exception. We also found that due to this injecting properties through autowiring by type fails.  So I created a test that reproduces the failed property injection through autowiring by type. Unfortunately we're not able to reproduce the endless loop outside of our project code. But we hope that once the failed-injection-through-autowiring-by-type issue is fixed our endless loop will be fixed as well.  Why does autowiring fail? An object of type A has a dependency on type B expressed through a property. Bean definition ""a"" is configured for autowiring by type. An object of type B is created but proxied by a ProxyFactoryBean which is lazy-loaded:           	          	     		     	       To determine the type of the FactoryBean Spring calls getBean(""b"") instead of getBean(""&b""). Actually, Spring first does call getBean(""&b"") but unfortunately this is immediately translated in a call to getBean(""b""). Next, getBean(""b"") fails with a UnsatisfiedDependencyException (two autowire candidates are found for one property - see test attached). However, this exception is eaten by getTypeForFactoryBean(String, RootBeanDefinition) which returns null.  Because the type detection on the FactoryBean fails bean definition ""b"" is not considered as an autowire candidate for the property on bean definition ""a"". The bug is that this exception is eaten and only logged on debug level.  As I told before there's more to this bug since we're experiencing an endless loop in our project code which is much more complicated than the test attached.  I believe this behavior is buggy since the call to getBean(""&b"") should not be translated to getBean(""b""). The purpose is to get the FactoryBean object, not it's product.   ---  **Affects:** 2.0.6  **Attachments:** - [spring-autowire-bug.zip](https://jira.spring.io/secure/attachment/12720/spring-autowire-bug.zip) (_5.59 MB_)","closed","in: core,","spring-projects-issues","2007-07-15T21:46:17Z","2012-06-19T03:51:17Z"
"","8281","AbstractStatelessSessionBean does not show correct base class in 2.0.5 javadoc [SPR-3599]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-3599](https://jira.spring.io/browse/SPR-3599?redirect=false)** and commented  Instead of AbstractSessionBean the javadoc shows Object as base class. This is apparently related to package-visible classes that are no longer part of the javadoc generation.  ---  **Affects:** 2.0.5  **Issue Links:** - #8304 Mismatch beetween the API doc and the org.springframework.ejb.support.AbstractStatefulSessionBean","closed","status: declined,","spring-projects-issues","2007-06-17T23:19:38Z","2019-01-12T16:40:01Z"
"","8040","lang:groovy doesn't have init-method and destroy-method attributes. [SPR-3356]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-3356](https://jira.spring.io/browse/SPR-3356?redirect=false)** and commented   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-04-10T03:28:23Z","2012-06-19T03:50:56Z"
"","7904","Add flag to BeanNameUrlHandlerMapping to look up bean in the parent ApplicationContext [SPR-3218]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-3218](https://jira.spring.io/browse/SPR-3218?redirect=false)** and commented  This is partical in case handlers are defined in the parent ApplicationContext. In our case we're using Spring WS.   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-27T20:11:53Z","2012-06-19T03:50:04Z"
"","8133","Allow Indexed Collections as Form Commands [SPR-3450]","**[Stephen Todd](https://jira.spring.io/secure/ViewProfile.jspa?name=blurryrunner)** opened **[SPR-3450](https://jira.spring.io/browse/SPR-3450?redirect=false)** and commented  Spring's current code makes it difficult to use java collections as a command in command controllers. Specifically, referencing elements in the collection is prevented. Currently, elements in an collection are references using []. Support needs to be added to allw paths to start with [index/key] as in ""[1].property"".  The application for this is probably rare, which is probably why it hasn't been brought up before (at least I couldn't find an similarly reported issues). I use the functionality for executing multiple of the same commands. I currently have a form that has multiple objects that can be selected. If the user clicks ""Delete"" with multiple objects selected, I have an array of id's that get passed to a delete form. This form creates a delete command for each object specified. Details for the way the objects are deleted are stored in an object, which is put in to a list. When the user submits the form, each command is executed in succession (the list is actually passed to the business layer and executed in a single transaction).  The current work around is to create a subclass of the java collection you want and make a getter that returns this. Then you can reference the array as (using a getter getSelf()) ""self[1].property"". Although this method works, a method that doesn't require this simple extension would be preferable.   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-05-03T03:30:31Z","2019-01-11T17:43:24Z"
"","8600","SelectTag issue with Map path [SPR-3920]","**[Stephen M. Wick](https://jira.spring.io/secure/ViewProfile.jspa?name=stevewickii)** opened **[SPR-3920](https://jira.spring.io/browse/SPR-3920?redirect=false)** and commented  Forum thread addressing this issue: http://forum.springframework.org/showthread.php?t=44205  When a property path contains a Map, the SelectTag, OptionTag and OptionsTag classes do not mark the selected option with the ""selected"" attribute.  EXAMPLE    EXPLANATION  The path ""addressDTOs['HOME'].stateAbbr"" resolves to the value ""MO"".  BindStatus.getValue() confirms this. The attribute items=""${states}"" is a java.util.ArrayList of 52 StateDTO objects. The StateDTO class contains two String properties ""name"" and ""abbr"". The SelectTag should output \Missouri\ when StateDTO with abbr=""MO""  OUTPUT  \\Alabama\\Alaska\\Arizona \\Arkansas\\California \\Colorado \\Connecticut\\Delaware\\District of Columbia\\Florida\\Georgia\\Hawaii\\Idaho\\Illinois\\Indiana\\Iowa\\Kansas\\Kentucky\\Louisiana\\Maine\\Maryland\\Massachusetts\\Michigan\\Minnesota\\Mississippi\\Missouri\\Montana\\Nebraska\\Nevada\\New Hampshire\\New Jersey\\New Mexico\\New York\\North Carolina\\North Dakota\\Ohio\\Oklahoma\\Oregon\\Pennsylvania\\Rhode Island\\South Carolina\\South Dakota\\Tennessee\\Texas\\Utah\\Vermont\\Virgin Islands\\Virginia \\Washington\\West Virginia\\Wisconsin\\Wyoming\\  Notice that the MO option is not selected.  CAUSE  I traced the issue to the following method:  SelectedValueComparator.java - Line: 120      private static Object getBoundValue(BindStatus bindStatus) {     	if (bindStatus == null) {     		return null;     	}     	if (bindStatus.getEditor() != null) {     		Object editorValue = bindStatus.getEditor().getValue();     		if (editorValue != null) {     			return editorValue;     		}     	}     	return bindStatus.getValue();     }  The problem is, bindStatus.getEditor() is returning a StringTrimmerEditor, so instead of returning bindStatus.getValue(), which will return ""MO"", it is returning bindStatus.getEditor().getValue(), which is set to ""HOME"" for some reason.   ---  **Affects:** 2.0.6","closed","type: bug,","spring-projects-issues","2007-09-25T09:06:53Z","2012-06-19T03:47:28Z"
"","8477","Quartz Components WITH Cluster Support [SPR-3797]","**[Stephen M. Wick](https://jira.spring.io/secure/ViewProfile.jspa?name=stevewickii)** opened **[SPR-3797](https://jira.spring.io/browse/SPR-3797?redirect=false)** and commented  Through Spring v2.0.2, MethodInvokingJobDetailFactoryBean cannot be used within a clustered Quartz deployment.  I am attaching a cluster-safe version of Spring's MethodInvokingJobDetailFactoryBean, and a new BeanInvokingJobDetailFactoryBean for your review and possible inclusion in the Spring framework offering.  MethodInvokingJobDetailFactoryBean can be used to invoke a method on a Java Object. The Object and method arguments must be Serializable. Alternatively, you can configure this FactoryBean to invoke a Static method on any Class by specifying the name of the Class, as a String, and the name of the Static Method to invoke. Again, the method arguments must be Serializable. (See the JavaDoc within the source for more information)  BeanInvokingJobDetailFactoryBean can be used to invoke a method on any bean defined within the Spring ApplicationContext. The method arguments must be Serializable. (See the JavaDoc within the source for more information)  Note : As of Quartz 1.6.0 there is a bug that prevents Objects from being Serialized to the MS SQL Server (required for Quartz Clustering). (See http://forums.opensymphony.com/messa...ssageID=128249) Therefore, the following limitations apply to those using MS SQL Server until Quartz 1.6.1 is released: MethodInvokingJobDetailFactoryBean is restricted to Static No-Arg Method Invocation. BeanInvokingJobDetailFactoryBean is restricted to No-Arg Method Invocation.  Please let me know if you have issues with these FactoryBeans. I am also looking for feedback on how useful, or not, these components are.  I hope these components save you time and effort!   ---  **Affects:** 1.0 RC1, 1.0 RC2, 1.0 final, 1.0.1, 1.0.2, 1.1 RC1, 1.1 RC2, 1.1 final, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5, 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1, 2.0.2, 1.2.9  **Attachments:** - [BeanInvokingJobDetailFactoryBean.java](https://jira.spring.io/secure/attachment/12821/BeanInvokingJobDetailFactoryBean.java) (_18.93 kB_) - [MethodInvokingJobDetailFactoryBean.java](https://jira.spring.io/secure/attachment/12820/MethodInvokingJobDetailFactoryBean.java) (_19.47 kB_)  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2007-08-23T01:53:21Z","2015-09-22T18:55:05Z"
"","8782","JdbcDaoSupport.setJdbcTemplate() should accept JdbcOperations [SPR-4104]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-4104](https://jira.spring.io/browse/SPR-4104?redirect=false)** and commented  JdbcDaoSupport.setJdbcTemplate() accepts JdbcTemplate as argument. It would be better if argument was JdbcOperations.  Rationale: I have reflective proxy of JdbcTemplate that measures query execution times. Such proxy does not extend JdbcTemplate, but rather implement JdbcOperations. So I cannot inject this proxy into JdbcDaoSupport.  ---  **Affects:** 2.5 RC1  **Issue Links:** - #8440 Alter JdbcDaoSupport to use JdbcOperations instead of JdbcTemplate (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2007-11-14T05:33:17Z","2019-01-11T15:43:27Z"
"","8761","need method: SQLErrorCodesFactory.registerErrorCodes(dataSource, sqlErrorCodes) [SPR-4082]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-4082](https://jira.spring.io/browse/SPR-4082?redirect=false)** and commented  We need method  ---  SQLErrorCodesFactory.registerErrorCodes(dataSource, sqlErrorCodes)  ---  motivation: I know, that my data source is MySQL. So I can explicitly call  ---  sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(""MySQL""); SQLErrorCodesFactory.getInstance.registerErrorCodes(dataSource, sqlErrorCodes);  ---  at start of application.  So when  ---  SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)  ---  will be called at first creation of JdbcTemplate, no connection to database will be needed. (SQLErrorCodesFactory creates new connection to find database vendor name).  ---  **Affects:** 2.5 RC1","closed","type: enhancement,","spring-projects-issues","2007-11-12T01:38:33Z","2019-01-13T22:41:22Z"
"","8658","ArgPreparedStatementSetter: extract setValue(ps, position, value) [SPR-3978]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-3978](https://jira.spring.io/browse/SPR-3978?redirect=false)** and commented  Please extract protected method  ---  void setValue(ps, position, value)  ---  from method  ---  void setValues(ps)  ---  of class ArgPreparedStatementSetter.  This refactoring is needed to support custom type unmappers. For example if I want JdbcTemplate to support joda-time types, I could subclass APSS and override setValue(ps, position, value) as  ---  void setValue(ps, position, value) { if (value instanceof org.joda.time.DateTime) { ps.setTimestamp(new Timestamp(((DateTime) value).getTime()); } else { super.setValue(ps, position, value); } }  ---  Another use case is for various workarounds around buggy SQL drivers (I had problems with MSSQL's one).  This issue relates to #8657.  ---  **Affects:** 2.1 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3faf28ebaf73c1067edadcbc3d1974c25dfca80a, https://github.com/spring-projects/spring-framework/commit/e27330ec5d4d80f305e2113a401ac36428f3e120","closed","type: enhancement,","spring-projects-issues","2007-10-15T23:25:47Z","2019-01-13T22:41:40Z"
"","8657","extract JdbcTemplate.newArgPreparedStatementSetter(args) [SPR-3977]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-3977](https://jira.spring.io/browse/SPR-3977?redirect=false)** and commented  Please extract 3 calls to  ---  new ArgPreparedStatementSetter(args)  ---  in JdbcTemplate into protected method  ---  PreparedStatementSetter newArgPreparedStatementSetter(Object[] args) { ... }  ---  so creation of APSS can be easily overriden in subclass of JdbcTemplate.  ---  **Affects:** 2.1 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b88db7a594e86721f247dc89ee83732e35e6032c  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-10-15T23:14:40Z","2019-01-13T22:41:42Z"
"","8459","*JdbcTemplate .updateRowGetGeneratedKey [SPR-3779]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-3779](https://jira.spring.io/browse/SPR-3779?redirect=false)** and commented  JdbcTemplate and SimpleJdbcTemplate miss very useful method that updates exactly one row and returns generated key:  updateRowGetGeneratedKey(String query, Object... args) // and several similar with different arguments  ---  public Number updateRowGetGeneratedKey(final String sql, final Object[] args) throws DataAccessException { GeneratedKeyHolder keyHolder = new GeneratedKeyHolder(); int rows = super.update(new PreparedStatementCreator() { public PreparedStatement createPreparedStatement(Connection con) throws SQLException { PreparedStatement ps = con.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS); new ArgPreparedStatementSetter(args).setValues(ps); return ps; } }, keyHolder);          requiredSingleRow(rows);              return keyHolder.getKey();     }  ---  This method works well in the most situation.  This method is must have in all situations when single object is inserted to DB and object key is generated by DB.  ---  **Affects:** 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-08-14T22:34:42Z","2019-01-13T22:42:17Z"
"","8458","*JdbcTemplate .updateRow [SPR-3778]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-3778](https://jira.spring.io/browse/SPR-3778?redirect=false)** and commented  JdbcTemplate and SimpleJdbcTemplate miss very useful method that updates exactly one row:  void updateRow(String query, Object... args) // and several similar with different arguments  That is equivalent to  int count = update(query, args) if (count == 0) throw new EmptyResultDataAccessException(...); if (count > 0) throw new IncorrectResultSizeDataAccessException(...);  In all my project I've created subclasses of JdbcTemplate and SimpleJdbcTemplate that provide this method.   ---  **Affects:** 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-08-14T22:22:52Z","2015-09-22T18:55:03Z"
"","8118","GeneratedKeyHolder throws NPE if key is null [SPR-3435]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-3435](https://jira.spring.io/browse/SPR-3435?redirect=false)** and commented  I've got NPE from GeneratedKeyHolder when connected to Derby and got null key (when actually was no generated key):  java.lang.NullPointerException at org.springframework.jdbc.support.GeneratedKeyHolder.getKey(GeneratedKeyHolder.java:73   ---  **Affects:** 2.0.4  **Attachments:** - [generated-key-holder.diff](https://jira.spring.io/secure/attachment/12579/generated-key-holder.diff) (_914 bytes_)","closed","type: bug,","spring-projects-issues","2007-05-01T03:23:02Z","2012-06-19T03:51:20Z"
"","7939","SimpleAsyncTaskExecutor ignores daemon flag. [SPR-3254]","**[Stefan Schwenkreis](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan_schwenkreis)** opened **[SPR-3254](https://jira.spring.io/browse/SPR-3254?redirect=false)** and commented  The SimpleAsyncTaskExecutor ignores the daemon flag in 2.0.3. Example: SimpleAsyncTaskExecutor taskExecutor = new SimpleAsyncTaskExecutor(""MyTestTask""); taskExecutor.setDaemon(true); taskExecutor.execute(new Runnable() { public void run() { Thread t = Thread.currentThread(); System.out.println(t + "" is daemon? "" + t.isDaemon()); } });  Output with 2.0: Thread[MyTestTask1,5,main] is daemon? true  Output with 2.0.3: Thread[MyTestTask1,5,main] is daemon? false  The problem seems to be in the new class CustomizableThreadCreator.   In Spring 2.0 there was a method createThread in SimpleAsyncTaskExecutor as follows: protected Thread createThread(Runnable task) { Thread thread = new Thread(task, nextThreadName()); thread.setPriority(getThreadPriority()); thread.setDaemon(isDaemon()); return thread; } This method is now inherited from CustomizableThreadCreator and is missing the setDaemon call: public Thread createThread(Runnable runnable) { Thread thread = new Thread(getThreadGroup(), runnable, nextThreadName()); thread.setPriority(getThreadPriority()); return thread; }   ---  **Affects:** 2.0.3","closed","in: core,","spring-projects-issues","2007-03-12T22:33:12Z","2012-06-19T03:50:46Z"
"","8746","Add a note on conflict when using @Autowired and @Requred to reference doc [SPR-4067]","**[Stefan Scheidt](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.scheidt@opitz-consulting.de)** opened **[SPR-4067](https://jira.spring.io/browse/SPR-4067?redirect=false)** and commented  There's a conflict when using `@Autowired` and `@Required` at the same time for the same ""injection point"". `@Autowired` ""includes"" `@Required` (as long as you don't set the `@Autowired` properte required to false) so combining the two annotations doesn't make sence. When you do so, you'll get a  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'movieRecommender' defined in class path resource [samples/autowire/TestCustomQualifier-beans.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanInitializationException: Property 'offlineCatalog' is required for bean 'movieRecommender'  Probably one should add a note on this in the reference documentation chapter on `@Autowire`.  Regards Stefan   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-07T21:17:57Z","2012-06-19T09:36:20Z"
"","8098","exceptions during rendering the view can not be handled with a custom error page. [SPR-3415]","**[Stefan Groschupf](https://jira.spring.io/secure/ViewProfile.jspa?name=joa23)** opened **[SPR-3415](https://jira.spring.io/browse/SPR-3415?redirect=false)** and commented  We notice that exceptions happen when rendering the view from a jsp page in jetty can not be handled with a custom error page:  We defined a SimpleMappingExceptionResolver and it is working great for every exception thrown in our controllers. However in case we have a error (e.g. JasperException)in one of our view jsp pages jetty shows the jetty 500 error page.  E.g. a compile error in the jps page or having a Long.parse(""string"") To show a senseful error page in that case as well we configured a \ within our web.xml. However this is ignored for all jsp pages we use as view within the InternalResourceView but works for all jsp pages that are handled as ""normal""/""standalone"" jsps by jetty before the dispatcher servlet.  Exception in case the error page is ignored:  PWC6197: An error occurred at line: 16 in the jsp file: /WEB-INF/jsp/projects/project_listing.jsp PWC6199: Generated servlet error: Invalid character constant  at org.apache.jasper.compiler.DefaultErrorHandler.jav acError(DefaultErrorHandler.java:94) at org.apache.jasper.compiler.ErrorDispatcher.javacEr ror(ErrorDispatcher.java:384) at org.apache.jasper.compiler.JDTCompiler.generateCla ss(JDTCompiler.java:409) at org.apache.jasper.compiler.Compiler.compile(Compil er.java:622) at org.apache.jasper.compiler.Compiler.compile(Compil er.java:602) at org.apache.jasper.JspCompilationContext.compile(Js pCompilationContext.java:618) at org.apache.jasper.servlet.JspServletWrapper.servic e(JspServletWrapper.java:329) at org.apache.jasper.servlet.JspServlet.serviceJspFil e(JspServlet.java:440) at org.apache.jasper.servlet.JspServlet.service(JspSe rvlet.java:335) at javax.servlet.http.HttpServlet.service(HttpServlet .java:802) at org.mortbay.jetty.servlet.ServletHolder.handle(Ser vletHolder.java:445) at org.mortbay.jetty.servlet.ServletHandler.handle(Se rvletHandler.java:356) at org.mortbay.jetty.servlet.SessionHandler.handle(Se ssionHandler.java:226) at org.mortbay.jetty.handler.ContextHandler.handle(Co ntextHandler.java:627) at org.mortbay.jetty.servlet.Dispatcher.forward(Dispa tcher.java:266) at org.mortbay.jetty.servlet.Dispatcher.forward(Dispa tcher.java:126) at org.springframework.web.servlet.view.InternalResou rceView.renderMergedOutputModel(InternalResourceVi ew.java:112) at org.springframework.web.servlet.view.AbstractView. render(AbstractView.java:249) at org.springframework.web.servlet.DispatcherServlet. render(DispatcherServlet.java:1063) at org.springframework.web.servlet.DispatcherServlet. doDispatch(DispatcherServlet.java:827) at org.springframework.web.servlet.DispatcherServlet. doService(DispatcherServlet.java:736) at org.springframework.web.servlet.FrameworkServlet.p rocessRequest(FrameworkServlet.java:396) at org.springframework.web.servlet.FrameworkServlet.d oGet(FrameworkServlet.java:350) at javax.servlet.http.HttpServlet.service(HttpServlet .java:689) at javax.servlet.http.HttpServlet.service(HttpServlet .java:802) at org.mortbay.jetty.servlet.ServletHolder.handle(Ser vletHolder.java:445) at org.mortbay.jetty.servlet.ServletHandler$CachedCha in.doFilter(ServletHandler.java:1050) at net.101tec.hub.webapp.HibernateFilter.doFilter(Hib ernateFilter.java:41) at org.mortbay.jetty.servlet.ServletHandler$CachedCha in.doFilter(ServletHandler.java:1041) at net.101tec.hub.webapp.InstallationFilter.doFilter( InstallationFilter.java:49) at org.mortbay.jetty.servlet.ServletHandler$CachedCha in.doFilter(ServletHandler.java:1041) at org.mortbay.jetty.servlet.ServletHandler.handle(Se rvletHandler.java:354) at org.mortbay.jetty.servlet.SessionHandler.handle(Se ssionHandler.java:226) at org.mortbay.jetty.handler.ContextHandler.handle(Co ntextHandler.java:627) at org.mortbay.jetty.handler.ContextHandlerCollection .handle(ContextHandlerCollection.java:149) at org.mortbay.jetty.handler.HandlerCollection.handle (HandlerCollection.java:123) at org.mortbay.jetty.handler.HandlerWrapper.handle(Ha ndlerWrapper.java:141) at org.mortbay.jetty.Server.handle(Server.java:269) at org.mortbay.jetty.HttpConnection.handleRequest(Htt pConnection.java:430) at org.mortbay.jetty.HttpConnection$RequestHandler.he aderComplete(HttpConnection.java:687) at org.mortbay.jetty.HttpParser.parseNext(HttpParser. java:492) at org.mortbay.jetty.HttpParser.parseAvailable(HttpPa rser.java:199) at org.mortbay.jetty.HttpConnection.handle(HttpConnec tion.java:339) at org.mortbay.jetty.nio.HttpChannelEndPoint.run(Http ChannelEndPoint.java:270) at org.mortbay.thread.BoundedThreadPool$PoolThread.ru n(BoundedThreadPool.java:475)  Exception in case the error page is shown: org.apache.jasper.JasperException: PWC6033: Unable to compile class for JSP  PWC6197: An error occurred at line: 7 in the jsp file: /testError.jsp PWC6199: Generated servlet error: The method parse(String) is undefined for the type Long  at org.apache.jasper.compiler.DefaultErrorHandler.jav acError(DefaultErrorHandler.java:94) at org.apache.jasper.compiler.ErrorDispatcher.javacEr ror(ErrorDispatcher.java:384) at org.apache.jasper.compiler.JDTCompiler.generateCla ss(JDTCompiler.java:409) at org.apache.jasper.compiler.Compiler.compile(Compil er.java:622) at org.apache.jasper.compiler.Compiler.compile(Compil er.java:602) at org.apache.jasper.JspCompilationContext.compile(Js pCompilationContext.java:618) at org.apache.jasper.servlet.JspServletWrapper.servic e(JspServletWrapper.java:329) at org.apache.jasper.servlet.JspServlet.serviceJspFil e(JspServlet.java:440) at org.apache.jasper.servlet.JspServlet.service(JspSe rvlet.java:335) at javax.servlet.http.HttpServlet.service(HttpServlet .java:802) at org.mortbay.jetty.servlet.ServletHolder.handle(Ser vletHolder.java:445) at org.mortbay.jetty.servlet.ServletHandler.handle(Se rvletHandler.java:356) at org.mortbay.jetty.servlet.SessionHandler.handle(Se ssionHandler.java:226) at org.mortbay.jetty.handler.ContextHandler.handle(Co ntextHandler.java:627) at org.mortbay.jetty.handler.ContextHandlerCollection .handle(ContextHandlerCollection.java:149) at org.mortbay.jetty.handler.HandlerCollection.handle (HandlerCollection.java:123) at org.mortbay.jetty.handler.HandlerWrapper.handle(Ha ndlerWrapper.java:141) at org.mortbay.jetty.Server.handle(Server.java:269) at org.mortbay.jetty.HttpConnection.handleRequest(Htt pConnection.java:430) at org.mortbay.jetty.HttpConnection$RequestHandler.he aderComplete(HttpConnection.java:687) at org.mortbay.jetty.HttpParser.parseNext(HttpParser. java:492) at org.mortbay.jetty.HttpParser.parseAvailable(HttpPa rser.java:199) at org.mortbay.jetty.HttpConnection.handle(HttpConnec tion.java:339) at org.mortbay.jetty.nio.HttpChannelEndPoint.run(Http ChannelEndPoint.java:270) at org.mortbay.thread.BoundedThreadPool$PoolThread.ru n(BoundedThreadPool.java:475) 2007-04-20 15:35:17.734::WARN: /testError.jsp org.apache.jasper.JasperException: PWC6033: Unable to compile class for JSP   --- No further details from [SPR-3415](https://jira.spring.io/browse/SPR-3415?redirect=false)","closed","status: declined,","spring-projects-issues","2007-04-25T08:46:02Z","2019-01-12T16:40:12Z"
"","8382","In MockHttpServletResponse the writer is not flushed by write(int c) [SPR-3701]","**[Stefan Fleiter](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan%20fleiter)** opened **[SPR-3701](https://jira.spring.io/browse/SPR-3701?redirect=false)** and commented  MockHttpServletReponse was changed from CVS Revision 1.16 to 1.17 (Spring 2.0.3 to Spring 2.0.4) to not only flush the Writer in flushBuffers, but to do this after every write. One Method of the PrintWriter was not overriden and does not lead to a flush, though. This Method is ""write(int c)"".  The fix and a testcase for this bug is in the to be attached Patch.   ---  **Affects:** 2.0.6  **Attachments:** - [MockHttpServletResponse.patch](https://jira.spring.io/secure/attachment/12725/MockHttpServletResponse.patch) (_2.03 kB_)","closed","type: bug,","spring-projects-issues","2007-07-20T00:21:31Z","2012-06-19T03:50:22Z"
"","8548","extend AbstractSingleBeanDefinitionParser to allow child beans [SPR-3868]","**[Stefan Bodewig](https://jira.spring.io/secure/ViewProfile.jspa?name=bodewig)** opened **[SPR-3868](https://jira.spring.io/browse/SPR-3868?redirect=false)** and commented  AbstractSingleBeanDefinition parser will always create ""root beans"".  I needed to write a Parser that emits children of abstract beans and ended up duplicationg almost anything from AbstractSingleBeanDefitionParser, see also http://sourceforge.net/mailarchive/message.php?msg_name=y1uabsdw20p.fsf%40v30161.1blu.de  The patch that I'm going to append adds a new getParent method.  If neither getClass nor getClassname return non-null but getParent does, then a child bean with the specified parent is created instead of a root bean.  In my case I the abstrcat bean I extend determines the class to use, so I didn't need to think about combining getParent and getClass in any way, but that might be an option.  I didn't change whitespace even where it would be needed to adapt to new nesting levels in order to keep the patch as small as possible (though my Emacs is set up to convert tabs which may have changed a few lines, sorry).   ---  **Affects:** 2.0.6, 2.1 M4  **Attachments:** - [childbean.patch](https://jira.spring.io/secure/attachment/12904/childbean.patch) (_1.80 kB_)","closed","type: enhancement,","spring-projects-issues","2007-09-12T22:23:09Z","2012-06-19T03:46:47Z"
"","8547","AbstractSingleBeanDefinitionParser only propagates Singleton scope, not a custom one [SPR-3867]","**[Stefan Bodewig](https://jira.spring.io/secure/ViewProfile.jspa?name=bodewig)** opened **[SPR-3867](https://jira.spring.io/browse/SPR-3867?redirect=false)** and commented  If the parsed bean definition is an inner bean, AbstractSingleBeanDefinitionParser propagates the singleton scope, but not an arbitrary scope from the outer bean.  I'll append a simple patch that uses setScope instead of setSingleton  ---  **Affects:** 2.0.6, 2.1 M4  **Attachments:** - [scope.patch](https://jira.spring.io/secure/attachment/12903/scope.patch) (_643 bytes_)  **Issue Links:** - #8480 Inner beans cannot have a scope other than singleton?","closed","in: core,","spring-projects-issues","2007-09-12T22:14:06Z","2019-01-11T19:21:59Z"
"","8488","Example in ""Extensible XML authoring"" section uses namespaces inconsistently  [SPR-3808]","**[Stefan Bodewig](https://jira.spring.io/secure/ViewProfile.jspa?name=bodewig)** opened **[SPR-3808](https://jira.spring.io/browse/SPR-3808?redirect=false)** and commented  Some of the example listings for the http://www.mycompany.com/schema/myns use http://www.springframework.org/schema/myns which means the example doesn't work (out of the box).  Trivial patch appended.   ---  **Affects:** 2.0.6, 2.1 M3  **Attachments:** - [myns.patch](https://jira.spring.io/secure/attachment/12827/myns.patch) (_1.52 kB_)","closed","type: bug,","spring-projects-issues","2007-08-26T23:35:55Z","2012-06-19T03:50:33Z"
"","8711","Trailing spaces not being trimmed in SimpleUrlHandlerMapping mappings property from the xml configuration [SPR-4032]","**[Srinivas Kurella](https://jira.spring.io/secure/ViewProfile.jspa?name=skurella)** opened **[SPR-4032](https://jira.spring.io/browse/SPR-4032?redirect=false)** and commented  ------snippet from xml ---------------  \ \ \ \ /accountSummary.htm=accountSummaryController /accountDetails.htm=accountDetailsController [ ---space here was not trimmed---] \ \ \  -------------Stack trace --------------------------------- exception  javax.servlet.ServletException: Servlet.init() for servlet accounts threw exception org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584) org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) java.lang.Thread.run(Thread.java:595)  root cause  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0' defined in ServletContext resource [/WEB-INF/accounts-servlet-config.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'accountDetailsController ' is defined org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:547) org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249) org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246) org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:404) org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:735) org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369) org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:332) org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:266) org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:236) org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:126) javax.servlet.GenericServlet.init(GenericServlet.java:212) org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584) org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) java.lang.Thread.run(Thread.java:595)  root cause  org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'accountDetailsController  ' is defined org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:382) org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:997) org.springframework.beans.factory.support.AbstractBeanFactory.isSingleton(AbstractBeanFactory.java:343) org.springframework.beans.factory.support.AbstractBeanFactory.isSingleton(AbstractBeanFactory.java:340) org.springframework.context.support.AbstractApplicationContext.isSingleton(AbstractApplicationContext.java:899) org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.registerHandler(AbstractUrlHandlerMapping.java:271) org.springframework.web.servlet.handler.SimpleUrlHandlerMapping.registerHandlers(SimpleUrlHandlerMapping.java:125) org.springframework.web.servlet.handler.SimpleUrlHandlerMapping.initApplicationContext(SimpleUrlHandlerMapping.java:103) org.springframework.context.support.ApplicationObjectSupport.setApplicationContext(ApplicationObjectSupport.java:73) org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(ApplicationContextAwareProcessor.java:70) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:321) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1311) org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522) org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249) org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246) org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:404) org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:735) org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369) org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:332) org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:266) org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:236) org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:126) javax.servlet.GenericServlet.init(GenericServlet.java:212) org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584) org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) java.lang.Thread.run(Thread.java:595)  ---This seems to be the cause ------ rg.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'accountDetailsController  '   ---  **Affects:** 2.5 RC1","closed","type: enhancement,","spring-projects-issues","2007-11-01T05:34:07Z","2012-06-19T03:47:01Z"
"","8203","JavaMailSender allow setting Property - that is used by Session.getInstance(new Properties(), null) [SPR-3520]","**[springuser1](https://jira.spring.io/secure/ViewProfile.jspa?name=springuser1)** opened **[SPR-3520](https://jira.spring.io/browse/SPR-3520?redirect=false)** and commented  Hello, Currently with current implementation of  spring's JavaMail, if some of the addresses are invalid, the send message fails. However, JavaMail supports sending successful email to a partial valid list of addresses by using mail.stmp.sendpartial. If the code: Session.getInstance(new Properties(), null)  insead of using ""new Properties()"", was using a property says ""props"" which we can configurably set in the xml, we can take advantage of setting various other properties along with the one I need mail.stmp.sendpartial.  Thanks.   --- No further details from [SPR-3520](https://jira.spring.io/browse/SPR-3520?redirect=false)","closed","in: core,","spring-projects-issues","2007-05-24T23:51:51Z","2019-01-11T19:06:09Z"
"","8483","AbstractAutowireCapableBeanFactory.autowireByType throw new UnsatisfiedDependencyException [SPR-3803]","**[Sonix William Legend](https://jira.spring.io/secure/ViewProfile.jspa?name=sonixlegend)** opened **[SPR-3803](https://jira.spring.io/browse/SPR-3803?redirect=false)** and commented  I defined two data source in my programe. But when I started it, it print out a UnsatisfiedDependencyException. Can you tell me why? This is my configuration file. \ \ \ \ \ \ \              	     	     	     	       \   ---  **Affects:** 2.1 M3","closed","in: core,","spring-projects-issues","2007-08-24T17:17:38Z","2019-01-11T19:12:14Z"
"","8468","PathMatchingResourcePatternResolver.doFindPathMatchingJarResources can't work in weblogic 9.2 [SPR-3788]","**[Sonix William Legend](https://jira.spring.io/secure/ViewProfile.jspa?name=sonixlegend)** opened **[SPR-3788](https://jira.spring.io/browse/SPR-3788?redirect=false)** and commented  When the weblogic server started, the console printed out ""java.lang.IllegalArgumentException: Could not resolve resource location pattern [classpath*:/database/*.properties]"". It means that ""file:/X:/XX/.../war/WEB-INF/lib/_wl_cls_gen.jar"" can't be opened because the path was not right. And My programe can work in the version 1.2.X. Can you fix it now.  PS: The error is at ""String urlFile = rootDirResource.getURL().getFile(); int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR); jarFileUrl = urlFile.substring(0, separatorIndex); if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) { jarFileUrl = jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()); } jarFile = new JarFile(jarFileUrl); newJarFile = true; jarFileUrl = ResourceUtils.FILE_URL_PREFIX + jarFileUrl; rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length());"" in version 2.1-M3 AND The error is at ""String urlFile = rootDirResource.getURL().getFile(); int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR); jarFileUrl = urlFile.substring(0, separatorIndex); if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) { jarFileUrl = jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length()); } jarFileUrl = ResourceUtils.FILE_URL_PREFIX + jarFileUrl; rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length()); jarFile = new JarFile(jarFileUrl); newJarFile = true;"" in version 2.0.6 AND My xml file is ""\ \ \ \ \classpath*:/database/*.properties\ \ \ \ \""  ---  **Affects:** 2.0.6, 2.1 M3  **Issue Links:** - #8388 Upgrade spring.jar from 2.0.5 to 2.0.6 causes IllegalArgumentException loading Hibernate mappings from different classloaders","closed","in: core,","spring-projects-issues","2007-08-19T17:50:21Z","2019-01-11T19:34:53Z"
"","8289","Problem running AbstractJpaTests and simple app using spring-framework-2.1-m1+Maven2+JPA+Hibernate [SPR-3606]","**[softengg](https://jira.spring.io/secure/ViewProfile.jspa?name=softengg)** opened **[SPR-3606](https://jira.spring.io/browse/SPR-3606?redirect=false)** and commented  I am having problems running a very basic JUnit test case via Maven2 with JPA(hibernate as JPAvendor). The application uses spring-framework-2.1-m1 release, and test case extends from org.springframework.test.jpa.AbstractJpaTests, uses org.springframework.orm.jpa.LocalContainerEntityMa nagerFactoryBean as entityManagerFactory, and uses org.springframework.orm.jpa.vendor.HibernateJpaVen dorAdapter as jpaVendorAdapter propery for entityManagerFactory. To avoid any sort of conflicts, Hibrnate from spring-framework-2.1-m1-with-dependencies.zip is being used. All the libs were imported in local Maven2 reposiroty from this zip file as Spring's latest versions are not available on remote Maven2 repositories.  All the details are below including the exception stack trace, spring bean definition files, lib dependencies from pom.xml. persistence.xml, orm.xml etc are below and a complete project are also placed in a zip file and are at this link http://forum.springframework.org/showthread.php?p=127012#poststop I reported this issue on support, and tried the reffered solution, but with same result. The strange this is that same application runs fine if i use it with ant script taken from petclinic sample with this distribution.  I tried removing the Annotations based persistence, thought problem would have to be related to this, but with no result. I then tried switiching off autowiring but exception always remains the same.  ---  Exception stack trace  ---  testCreate(com.hc.tests.PersonServiceTest) Time elapsed: 0.734 sec  \","closed","in: data,","spring-projects-issues","2007-06-20T07:53:21Z","2019-01-13T22:42:49Z"
"","8856","ComponentScanBeanDefinitionParser: multiple BeanNameGenerators and BeanDefinitionDecorators [SPR-4178]","**[Simon Kitching](https://jira.spring.io/secure/ViewProfile.jspa?name=skitching)** opened **[SPR-4178](https://jira.spring.io/browse/SPR-4178?redirect=false)** and commented  The ComponentScanBeanDefinitionParser class currently supports exactly one BeanNameGenerator and exactly one ScopeMetadataResolver. It also has no equivalent of the ""BeanDefinitionDecorator""; there is one special case (aop:scoped-proxy) hard-wired in to the implementation.  It would be nice if nested tags could define a list of BeanNameGenerator objects to run, where the first to return a non-null name would be used. The name-generator attribute (or the internal default) is the final fallback. In particular, this would allow a custom class to check for an annotation that affects name-generation, and simply return null if it is not present.  Having a list of BeanDefinitionDecorators to run would also be nice. The current scope-resolver logic could then be moved out of the ClassPathBeanDefinitionScanner into a separate object, being just one of the registered decorators.                                                    ---  **Affects:** 2.5 final  **Issue Links:** - #9419 Support for custom TypeFilters in the component scanner","closed","type: enhancement,","spring-projects-issues","2007-11-27T22:36:44Z","2019-01-11T16:02:53Z"
"","7945","DefaultMessageListenerContainer102 and ConnectionWaitTimeoutException [SPR-3260]","**[shrikant rao](https://jira.spring.io/secure/ViewProfile.jspa?name=shrikab)** opened **[SPR-3260](https://jira.spring.io/browse/SPR-3260?redirect=false)** and commented  I am using DefaultMessageListenerContainer102 in spring jms api.I am not inposition to close the connection It gives following exeception.Please reply me to shrikant_bharatan@yahoo.com  [3/13/07 17:23:07:670 EDT] 2744ccdc FreePool      E J2CA0045E: Connection not available while invoking method queueRequest for resource jms/PortalJMSQueueConnectionFactory. [3/13/07 17:23:07:671 EDT] 2744ccdc ConnectionMan E J2CA0020E: The Connection Pool Manager could not allocate a Managed Connection: com.ibm.websphere.ce.j2c.ConnectionWaitTimeoutException: Connection not available, Timed out waiting for 180010 at com.ibm.ejs.j2c.poolmanager.FreePool.createOrWaitForConnection(FreePool.java(Compiled Code)) at com.ibm.ejs.j2c.poolmanager.PoolManager.reserve(PoolManager.java(Compiled Code)) at com.ibm.ejs.j2c.ConnectionManager.allocateMCWrapper(ConnectionManager.java(Compiled Code)) at com.ibm.ejs.j2c.ConnectionManager.allocateConnection(ConnectionManager.java(Compiled Code)) at com.ibm.ejs.jms.JMSQueueConnectionFactoryHandle.createQueueConnection(JMSQueueConnectionFactoryHandle.java:80) at org.springframework.jms.connection.SingleConnectionFactory102.doCreateConnection(SingleConnectionFactory102.java:123) at org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:280) at org.springframework.jms.connection.SingleConnectionFactory.createConnection(SingleConnectionFactory.java(Inlined Compiled Code)) at org.springframework.jms.connection.SingleConnectionFactory.createQueueConnection(SingleConnectionFactory.java(Compiled Code)) at org.springframework.jms.listener.DefaultMessageListenerContainer102.createConnection(DefaultMessageListenerContainer102.java:70) at org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:707) at org.springframework.jms.listener.DefaultMessageListenerContainer.recoverAfterListenerSetupFailure(DefaultMessageListenerContainer.java:683) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:881) at org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable.run(SimpleAsyncTaskExecutor.java:203) at java.lang.Thread.run(Thread.java:570) . [3/13/07 17:23:09:630 EDT] 3c918cdc FreePool      E J2CA0045E: Connection not available while invoking method queueRequest for resource jms/PortalJMSQueueConnectionFactory.   ---  **Affects:** 2.0.2","closed","","spring-projects-issues","2007-03-13T09:32:23Z","2019-01-11T17:18:48Z"
"","8329","PropertyComparator - Handle Boolean [SPR-3648]","**[Shishir K Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=shishirksingh)** opened **[SPR-3648](https://jira.spring.io/browse/SPR-3648?redirect=false)** and commented  Today, the compare Method of the PropertyComparator has this snippet:  int result; // Put an object with null property at the end of the sort result. try { if (v1 != null) { result = (v2 != null ? ((Comparable) v1).compareTo(v2) : -1); } else { result = (v2 != null ? 1 : 0); } } catch (RuntimeException ex) { if (logger.isWarnEnabled()) { logger.warn(""Could not sort objects ["" + o1 + ""] and ["" + o2 + ""]"", ex); } return 0; }  This will not handle Boolean  (which do not implement Comparable) and and thus will end up having RuntimeException of ClassCastException...  If we replace the above with  say:  if (v1 != null) { result = (v2 != null ? compareObject(v1,v2) : -1); }  else { result = (v2 != null ? 1 : 0); }  and compareObject method is :      private int compareObject(Object v1, Object v2) {         int result = 0;         if (v1 instanceof Comparable) {            result = ((Comparable) v1).compareTo(v2);         } else if (v1 instanceof Boolean) {             result = BooleanComparator.TRUE_HIGH.compare(v1,v2);         } else {              if (logger.isWarnEnabled()) {                 logger.warn(""Could not sort objects ["" + v1 + ""] and ["" + v2 + ""]"");              }         }         return result;     }  BooleanComparator can be togggled betwen TRUE_HIGH or TRUE_LOW , maybe depending on a System attribute say -Dspring.propertycomparator.boolean.truehigh ...whatever !!  The above I believe is a cleaner way and also handles Boolean sorting   ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2007-07-03T14:33:49Z","2012-06-19T09:37:24Z"
"","8381","JRuby documentation example is incorrect or doesn't behave as described [SPR-3700]","**[Shane Witbeck](https://jira.spring.io/secure/ViewProfile.jspa?name=digitalsanctum)** opened **[SPR-3700](https://jira.spring.io/browse/SPR-3700?redirect=false)** and commented  In the Messenger example the Ruby code extends an interface. JRuby will throw an exception indicating that the superclass must be a class:  :-1: superclass must be a Class (#) given (TypeError)   ---  **Affects:** 2.1 M1, 2.1 M2","closed","type: bug,","spring-projects-issues","2007-07-19T05:55:21Z","2012-06-19T03:50:39Z"
"","7985","Nice to have a CancellableFormController for Portlets [SPR-3300]","**[Shahed Moolji](https://jira.spring.io/secure/ViewProfile.jspa?name=shahed100)** opened **[SPR-3300](https://jira.spring.io/browse/SPR-3300?redirect=false)** and commented  Currently, there exists a CancellableFormController for Servelet MVC.  It would be nice to have the same support for Portlets.  Currently, If I have to cancel form processing, I need to create a HTML Link to jump to the view mode, to avoid form variables from Binding to the Model.    ---  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-03-24T12:24:53Z","2012-06-19T09:37:28Z"
"","8368","org.springframework.orm.hibernate.SessionFactoryUtils throws NoClassDefFound when using Hibernate 3.0.x [SPR-3687]","**[Sergio Bossa](https://jira.spring.io/secure/ViewProfile.jspa?name=sbtourist)** opened **[SPR-3687](https://jira.spring.io/browse/SPR-3687?redirect=false)** and commented  SessionFactoryUtils throws NoClassDefFound when using Hibernate 3.0.x because the org.hibernate.exception.DataException class is missed. This makes Spring 2.0.6 not compatible with Hibernate 3.0.x.   ---  **Affects:** 2.0.3, 2.0.4, 2.0.5, 2.0.6","closed","type: bug,","spring-projects-issues","2007-07-15T23:27:00Z","2012-06-19T03:50:47Z"
"","8317","Nested expressions in parameters of FreeMarker macros [SPR-3636]","**[Sergi Almar](https://jira.spring.io/secure/ViewProfile.jspa?name=salmar)** opened **[SPR-3636](https://jira.spring.io/browse/SPR-3636?redirect=false)** and commented  The FreeMarker macros don't allow using other macros inside of them recursively. For instance,  ```  ```  The above example rises the following exception:  ``` freemarker.template.TemplateException: Error parsing included template inc/useroptions.ftl Error on line 8, column 87 in inc/useroptions.ftl Found string literal: "", "" Expecting: number ```    ---  **Affects:** 2.0.5  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-06-30T00:00:11Z","2012-06-19T09:37:38Z"
"","8613","It is not possible to  put request attributes to InheritableThreadLocal from RequestContextListener [SPR-3933]","**[Sergei Savenko](https://jira.spring.io/secure/ViewProfile.jspa?name=sergeis)** opened **[SPR-3933](https://jira.spring.io/browse/SPR-3933?redirect=false)** and commented  It is not possible to  use RequestContextHolder.setRequestAttributes(RequestAttributes attributes, boolean inheritable) with inheritable=true from RequestContextListener   ---  **Affects:** 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-27T22:48:33Z","2012-06-18T12:45:00Z"
"","8539","PropertyOverrideConfigurer and JavaMailSenderImpl's ""javaMailProperties"" [SPR-3859]","**[Sebastiaan van Erk](https://jira.spring.io/secure/ViewProfile.jspa?name=sebster)** opened **[SPR-3859](https://jira.spring.io/browse/SPR-3859?redirect=false)** and commented  When overriding a property on an indexed bean property one can use the PropertyOverrideConfigurer quite nicely as follows:  myBean.myIndexedProperty[myIndex]=x  However, I have the situation where I want to configure the javaMailProperties of the JavaMailSenderImpl via the property override configurer. Since the javaMailProperties property is not readable, but only writable, I figured I'd make a seperate bean like this:  \  I then thought to put in my properties file:  javaMailProperties[mail.smtps.auth]=true  However, this does not work as the configurer tries to locate the bean with the name ""javaMailProperties[mail"". I have a workaround where I just make a simple holder bean with a ""properties"" property  \ 	\ \  and then I can do:  javaMailPropertiesHolder.javaMailProperties[mail.smtps.auth]=true  However, it would be nice if the first syntax just worked without having to create a holder object.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-09-10T22:41:15Z","2012-06-19T03:46:38Z"
"","8568","orm.toplink.support.CommonsLoggingSessionLog does not work with Toplink 11G [SPR-3888]","**[Scott W. Bishopp](https://jira.spring.io/secure/ViewProfile.jspa?name=sbishopp)** opened **[SPR-3888](https://jira.spring.io/browse/SPR-3888?redirect=false)** and commented  Apparently Oracle changed the Toplink API with respect to logging. In Oracle/Toplink 10G the class oracle.toplink.sessions.SessionLogEntry has a method public oracle.toplink.publicinterface.Session getSession() in Toplink 11G this method interface changed to AbstractSession getSession();  When you try to use CommonsLoggingSessionLog in M4 with 11G you will receive a runtime error complaining that the method oracle.toplink.publicinterface.Session getSession does not exist.  I recompiled M4 with the new toplink library and then things worked.   ---  **Affects:** 2.1 M4","closed","in: core,","spring-projects-issues","2007-09-17T07:04:22Z","2012-06-19T03:46:51Z"
"","8009","Slight twist on BridgeMethodResolver#populateTypeMapFromParameterizedType does not handle nested generics (SPR-3041) [SPR-3324]","**[Scott Rankin](https://jira.spring.io/secure/ViewProfile.jspa?name=srankin)** opened **[SPR-3324](https://jira.spring.io/browse/SPR-3324?redirect=false)** and commented  This is a very similar issue to #7727 (in fact I reused that test case).  It fails with a very similar problem:  java.lang.IllegalStateException: Unable to locate bridged method for bridge method 'public volatile java.lang.Object com.peopleclick.security.authorization.repository.HibernatePermissionIdentityRepository.get(java.lang.Object)' at org.springframework.core.BridgeMethodResolver.findBridgedMethod(BridgeMethodResolver.java:91) at org.springframework.core.annotation.AnnotationUtils.getAnnotations(AnnotationUtils.java:54) at org.springframework.transaction.annotation.AnnotationTransactionAttributeSource.findAllAttributes(AnnotationTransactionAttributeSource.java:85) at org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.computeTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:147) at org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:103) at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.matches(TransactionAttributeSourceAdvisor.java:102) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:203) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:244) at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:274) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:85) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:69) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:277) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:318) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1119) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:431) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:254) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:144) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:271) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1047) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:843) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:427) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:254) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:144) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:271) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:128) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1047) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:843) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:427) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:254) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:144) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:284) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:241) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at com.peopleclick.framework.spring.web.context.LogInitializerContextLoaderListener.contextInitialized(LogInitializerContextLoaderListener.java:35) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3764) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4216) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:760) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:740) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:544) at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:920) at org.apache.catalina.startup.HostConfig.deployDirectories(HostConfig.java:883) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:492) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1206) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:293) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:120) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1306) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1570) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1579) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1559) at java.lang.Thread.run(Thread.java:595)  The attached test case shows the problem - if there are two methods named the same but with different arguments, the code fails.  ---  **Affects:** 2.0.3  **Attachments:** - [SpringTest.tar.gz](https://jira.spring.io/secure/attachment/12510/SpringTest.tar.gz) (_1.58 kB_)","closed","in: core,","spring-projects-issues","2007-03-30T08:23:03Z","2019-01-11T18:13:51Z"
"","8695","Ability to restrict HandlerInterceptors to specific controller paths [SPR-4015]","**[Scott Murphy](https://jira.spring.io/secure/ViewProfile.jspa?name=scottland)** opened **[SPR-4015](https://jira.spring.io/browse/SPR-4015?redirect=false)** and commented  Annotation-based controller configuration is by far the best controller configuration I have seen to date.  However, my current Spring 2.0 configuration is dependent on interceptors. However, the lack of interceptors has made it unusable to me.  Is there any way we can PLEASE get some type on interceptor support in the 2.5 release?  `@Interceptor`(""interceptorName"")  I will work full time for FREE until the release if you need someone to write it if you can point me in the right direction.  ---  **Affects:** 2.5 RC1  **Issue Links:** - #9447 `@HandlerInterceptor`  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2007-10-28T10:08:13Z","2019-01-13T08:06:58Z"
"","8489","org.springframework.jdbc.core.simple.ParameterizedBeanPropertyRowMapper does not support inheritance (extends) [SPR-3809]","**[Scott Murphy](https://jira.spring.io/secure/ViewProfile.jspa?name=myzot)** opened **[SPR-3809](https://jira.spring.io/browse/SPR-3809?redirect=false)** and commented  ParameterizedBeanPropertyRowMapper will not work with protected fields which prohibits inheritance between beans.  The initialize method in org.springframework.jdbc.core.AbstractBeanPropertyRowMapper uses Field[] f = mappedClass.getDeclaredFields(); which will not return protected fields from the parent.   ---  **Affects:** 2.1 M2, 2.1 M3","closed","type: bug,","spring-projects-issues","2007-08-27T19:33:47Z","2012-06-19T03:50:11Z"
"","8175","org.springframework.jdbc.core.simple.SimpleJdbcTemplate needs an update function that takes a GeneratedKeyHolder [SPR-3492]","**[Scott Murphy](https://jira.spring.io/secure/ViewProfile.jspa?name=myzot)** opened **[SPR-3492](https://jira.spring.io/browse/SPR-3492?redirect=false)** and commented  org.springframework.jdbc.core.simple.SimpleJdbcTemplate is great, but lacks a simple update function that takes a GeneratedKeyHolder as a parameter.  Please, please please create the following method:  int update2(String sql, KeyHolder generatedKeyHolder, Object... args)  or if the first object in   int update(String sql, Object... args)  is an instance of KeyHolder use it to get the generated key  ---  **Affects:** 2.0.6, 2.0.7, 2.5 RC1, 2.5 final  **Issue Links:** - #12561 Add JdbcTemplate support for executing an insert statement that generates a single numeric key  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-05-16T12:11:18Z","2019-01-11T18:00:25Z"
"","8090","Need a mechanism to avoid calling entrySet() on java.util.Map properties [SPR-3407]","**[Scott Bartram](https://jira.spring.io/secure/ViewProfile.jspa?name=scottb)** opened **[SPR-3407](https://jira.spring.io/browse/SPR-3407?redirect=false)** and commented  TypeConverterDelegate.convertIfNecessary() method always calls convertToTypedMap() if the property implements the java.util.Map interface. The convertToTypedMap() method always calls java.util.Map.entrySet() on the property. When that property is something like a distributed cache containing a very large number of objects, iteration over the map must be avoided. There should be some way to prevent or override the call to convertToTypedMap().   ---  **Affects:** 2.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-boot/commit/2126c7774af3811fa572af1f9671e5c8265691da","closed","type: enhancement,","spring-projects-issues","2007-04-24T03:05:29Z","2012-06-19T03:50:57Z"
"","8359","Relaxing the final modifier of the method showForm in AbstractWizardFormController [SPR-3678]","**[Sayeed Nusrulla Sami](https://jira.spring.io/secure/ViewProfile.jspa?name=sami25)** opened **[SPR-3678](https://jira.spring.io/browse/SPR-3678?redirect=false)** and commented  Problem statement: if errors occur during the call to the referenceData method of the AbstractWizardFormController(AWFC) there is only one way of showing a error page, that is by configuring the exceptionResolver which is at a global level resolving exceptions as to how to gracefully handle. If there are multiple wizards in a web application and we would want to have specific error screens per wizard then we would need to model different exceptions that would be thrown from the referenceData, but if the application is using one global exception but uses specific error pages this would be not possible in current AWFC implementation.  Possible solution: the current AWFC doesnt allow us to override the showForm method since it is marked as final, relaxing the final modifier would allow the developers to override the showForm method and catch the exception and return a ModelAndView. this would be similar as in the SimpleFormController where showForm is not final and allows the developers to override showForm. the AWFC could also be enhanced to have a failureView property provided out of the box.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-07-10T23:35:04Z","2012-06-19T03:51:03Z"
"","8337","AbstractWizardFormController views do not send current page number by default [SPR-3656]","**[Sayeed Nusrulla Sami](https://jira.spring.io/secure/ViewProfile.jspa?name=sami25)** opened **[SPR-3656](https://jira.spring.io/browse/SPR-3656?redirect=false)*** and commented  Hi, There seem to be a bug in the AWFC, I have logged this in the forum, but I didnt get any replies.  I have been using AbstractWizardFormController, it works fine during the normal flow of execution.  Scenario:  the AWFC has three pages. page1, page2, page3. All of the pages have some validations to be done.  1. the user issues a get request to the AWFC and the first page is displayed 2. The user submits the page1, the target is the page2. everything works fine till now, the user is shown the page2 3. The user now refreshes, for some reasons the page2 gets validated , which must not happen. becuase the user has refreshed the post request of the page1.  Looking into the code of the AbstractWizardFormController in the processFormSubmission(...) method, line number 494 (spring 2.0.6) there is a check that happens. Code:      // Normal submit: validate current page and show specified target page.     if (!suppressValidation(request, command, errors)) {          if (logger.isDebugEnabled()) {               logger.debug(""Validating wizard page "" + currentPage + "" for form bean '"" + getCommandName() + ""'"");          }          validatePage(command, errors, currentPage, false);     }  .  which should be there incase of normal flow of the AWFC. but since the page1 was validated and the page2 was shown, because of this there is call to the showPage(request, errors, targetPage) at line number 513. as a result a session attribute is set in the showPage method at line number request.getSession().setAttribute(pageAttrName, pageInteger); 341.  Now back to the scenario.  page1 is submitted, the targetPage is 1 as a result the session has the attribute pageAttrName as 1. the page2 is shown as a result of the page1 submission which is normal.  now when the user refreshes the page2(resubmits the page1 post request). the validatePage is called from the processFormSubmission and the page2 gets validated which shouldnot happen,  Iam assuming that the fix to this would be to add an additional check in the if construct of the AWFC line 494,  Code:      // Normal submit: validate current page and show specified target page.  // determine the targetPage by calling the getTargetPage() method and add the following . if (targetPage != currentPage && !suppressValidation(request, command, errors)) { if (logger.isDebugEnabled()) { logger.debug(""Validating wizard page "" + currentPage + "" for form bean '"" + getCommandName() + ""'""); } validatePage(command, errors, currentPage, false); }  .  This should handle the refreshes without calling validate. Kindly let me know if this is correct.  ---  **Affects:** 2.0.6  **Issue Links:** - #8838 `@SessionAttributes` doesn't work with tabbed browsing - #8691 Add support for outputting a 'dialog key', like a Web Flow execution key, when using the form tag.","closed","type: enhancement,","spring-projects-issues","2007-07-04T14:31:59Z","2019-01-13T08:07:59Z"
"","8492","How to implement Pessimistic Locking with JPA [SPR-3812]","**[Satish havannavar](https://jira.spring.io/secure/ViewProfile.jspa?name=satishhavannavar)** opened **[SPR-3812](https://jira.spring.io/browse/SPR-3812?redirect=false)** and commented  Hi i am Using following setup  Spring version 2.0.5 jar [b]Hibernate version:3.2 Hibernate-annotations- version 3.3.0.ga.jar Hibernate-entityManager version 3.3.1ga.jar  when i am trying to to lock a row using the annotation `@Transactional`(isolation = Isolation.SERIALIZABLE) in Manager giving me the error ""Standard JPA does not support custom isolation levels - use a special JpaDialect ""  ---  **Issue Links:** - #16559 Isolation support for JPA with Hibernate EntityManager 4 - #9687 HibernateJpaDialect does not support setting a specific isolation level per transaction  7 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2007-08-28T14:35:11Z","2019-01-11T19:12:11Z"
"","8552","Could not synchronize database state with session Unexpected row count: 0 expected: 1  [SPR-3872]","**[Sanjeev Koppal](https://jira.spring.io/secure/ViewProfile.jspa?name=sanjeevkoppal)** opened **[SPR-3872](https://jira.spring.io/browse/SPR-3872?redirect=false)** and commented  I am not sure if this is a bug for Spring framework or Hibernate. We are using Hibernate thro' spring so i am posting this here. We are really having hard time to use DML-style operations using Hibernate query language. Finally i used Jdbctemplate to make it work for one query, but one more query failed even after using both.(JdbcTemplate and HibernateTemplate). Here is the small snippet of my code. Which is using HQL to update.      getHibernateTemplate().execute(new HibernateCallback() {     		public Object doInHibernate(Session session)     				throws HibernateException, SQLException {     			     			String hql=""UPDATE Nodes ""+     			""SET nodeLeft = CASE ""+     					""WHEN nodeLeft > (:node_left) ""+     					""THEN  (:node_left_updated)""+     					""ELSE nodeLeft END, ""+     				     				"" nodeRight = CASE ""+     					""WHEN nodeRight > (:node_right) ""+     					""THEN (:node_right_updated) ""+     					""ELSE nodeRight END ""+     			""WHERE nodeFrnNoderootNid = (:node_frn_noderoot_nid) "";     			     			Query query=session.createQuery(hql);     			query.setInteger(""node_frn_noderoot_nid"", nodeFrnNodeRootNid);     			query.setInteger(""node_left"", nodeLeft);     			query.setInteger(""node_right"", nodeRight);     			query.setInteger(""node_left_updated"", nodeLeft - (nodeRight-nodeLeft+1));     			query.setInteger(""node_right_updated"", nodeRight - (nodeRight-nodeLeft+1));				          			return query.executeUpdate();  This throws me the following exception,Even the jdbcTemplate with native sql throws the same exception.  2007-09-13 10:46:52,552 INFO  [STDOUT] 10:46:52,552 ERROR [AbstractFlushingEventListener] Could not synchronize database state with session org.hibernate.HibernateException: Unexpected row count: 0 expected: 1 at org.hibernate.jdbc.NonBatchingBatcher.addToBatch(NonBatchingBatcher.java:32) at org.hibernate.persister.entity.BasicEntityPersister.delete(BasicEntityPersister.java:2069) at org.hibernate.persister.entity.BasicEntityPersister.delete(BasicEntityPersister.java:2213) at org.hibernate.action.EntityDeleteAction.execute(EntityDeleteAction.java:59) at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:239) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:223) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:141) at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:274) at org.hibernate.event.def.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:48) at org.hibernate.impl.SessionImpl.autoFlushIfRequired(SessionImpl.java:711) at org.hibernate.impl.SessionImpl.prepareQueries(SessionImpl.java:895) at org.hibernate.impl.SessionImpl.getQueries(SessionImpl.java:885) at org.hibernate.impl.SessionImpl.executeUpdate(SessionImpl.java:865) at org.hibernate.impl.QueryImpl.executeUpdate(QueryImpl.java:89) at com.ri.app.oes.domain.CustomNodesDAO$4.doInHibernate(CustomNodesDAO.java:169) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:367) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:333) at com.ri.app.oes.domain.CustomNodesDAO.fixTree(CustomNodesDAO.java:141) at com.ri.app.oes.service.impl.OESNodeServiceManagerImpl.deleteNode(OESNodeServiceManagerImpl.java:83) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:299) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:139) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:107) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy52.deleteNode(Unknown Source) at com.ri.app.oes.service.impl.OESJobServiceManagerImpl.deleteActivity(OESJobServiceManagerImpl.java:596) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:299) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:139) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:107) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy53.deleteActivity(Unknown Source) at com.ri.app.oes.view.bean.job.JobDetailBean.deleteActivity(JobDetailBean.java:224) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at com.sun.el.parser.AstValue.invoke(AstValue.java:151) at com.sun.el.MethodExpressionImpl.invoke(MethodExpressionImpl.java:283) at com.sun.facelets.el.TagMethodExpression.invoke(TagMethodExpression.java:68) at com.sun.facelets.el.LegacyMethodBinding.invoke(LegacyMethodBinding.java:69) at org.apache.myfaces.application.ActionListenerImpl.processAction(ActionListenerImpl.java:63) at javax.faces.component.UICommand.broadcast(UICommand.java:106) at org.ajax4jsf.framework.ajax.AjaxViewRoot.processEvents(AjaxViewRoot.java:180) at org.ajax4jsf.framework.ajax.AjaxViewRoot.broadcastEvents(AjaxViewRoot.java:158) at org.ajax4jsf.framework.ajax.AjaxViewRoot.processApplication(AjaxViewRoot.java:346) at org.apache.myfaces.lifecycle.LifecycleImpl.invokeApplication(LifecycleImpl.java:316) at org.apache.myfaces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:86) at javax.faces.webapp.FacesServlet.service(FacesServlet.java:106) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.ajax4jsf.framework.ajax.xmlfilter.BaseXMLFilter.doXmlFilter(BaseXMLFilter.java:127) at org.ajax4jsf.framework.ajax.xmlfilter.BaseFilter.doFilter(BaseFilter.java:277) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.ri.app.oes.view.filter.HttpSessionFilter.doFilter(HttpSessionFilter.java:123) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.myfaces.component.html.util.ExtensionsFilter.doFilter(ExtensionsFilter.java:122) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:183) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:96) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:179) at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:84) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:104) at org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:157) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:241) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:580) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:619) 2007-09-13 10:46:52,567 INFO  [STDOUT] 139805 [http-127.0.0.1-8080-1] ERROR org.hibernate.event.def.AbstractFlushingEventListener  - Could not synchronize database state with session org.hibernate.HibernateException: Unexpected row count: 0 expected: 1 at org.hibernate.jdbc.NonBatchingBatcher.addToBatch(NonBatchingBatcher.java:32) at org.hibernate.persister.entity.BasicEntityPersister.delete(BasicEntityPersister.java:2069) at org.hibernate.persister.entity.BasicEntityPersister.delete(BasicEntityPersister.java:2213) at org.hibernate.action.EntityDeleteAction.execute(EntityDeleteAction.java:59) at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:239) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:223) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:141) at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:274) at org.hibernate.event.def.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:48) at org.hibernate.impl.SessionImpl.autoFlushIfRequired(SessionImpl.java:711) at org.hibernate.impl.SessionImpl.prepareQueries(SessionImpl.java:895) at org.hibernate.impl.SessionImpl.getQueries(SessionImpl.java:885) at org.hibernate.impl.SessionImpl.executeUpdate(SessionImpl.java:865) at org.hibernate.impl.QueryImpl.executeUpdate(QueryImpl.java:89) at com.ri.app.oes.domain.CustomNodesDAO$4.doInHibernate(CustomNodesDAO.java:169) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:367) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:333) at com.ri.app.oes.domain.CustomNodesDAO.fixTree(CustomNodesDAO.java:141) at com.ri.app.oes.service.impl.OESNodeServiceManagerImpl.deleteNode(OESNodeServiceManagerImpl.java:83) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:299) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:139) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:107) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy52.deleteNode(Unknown Source) at com.ri.app.oes.service.impl.OESJobServiceManagerImpl.deleteActivity(OESJobServiceManagerImpl.java:596) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:299) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:172) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:139) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:107) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202) at $Proxy53.deleteActivity(Unknown Source) at com.ri.app.oes.view.bean.job.JobDetailBean.deleteActivity(JobDetailBean.java:224) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at com.sun.el.parser.AstValue.invoke(AstValue.java:151) at com.sun.el.MethodExpressionImpl.invoke(MethodExpressionImpl.java:283) at com.sun.facelets.el.TagMethodExpression.invoke(TagMethodExpression.java:68) at com.sun.facelets.el.LegacyMethodBinding.invoke(LegacyMethodBinding.java:69) at org.apache.myfaces.application.ActionListenerImpl.processAction(ActionListenerImpl.java:63) at javax.faces.component.UICommand.broadcast(UICommand.java:106) at org.ajax4jsf.framework.ajax.AjaxViewRoot.processEvents(AjaxViewRoot.java:180) at org.ajax4jsf.framework.ajax.AjaxViewRoot.broadcastEvents(AjaxViewRoot.java:158) at org.ajax4jsf.framework.ajax.AjaxViewRoot.processApplication(AjaxViewRoot.java:346) at org.apache.myfaces.lifecycle.LifecycleImpl.invokeApplication(LifecycleImpl.java:316) at org.apache.myfaces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:86) at javax.faces.webapp.FacesServlet.service(FacesServlet.java:106) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.ajax4jsf.framework.ajax.xmlfilter.BaseXMLFilter.doXmlFilter(BaseXMLFilter.java:127) at org.ajax4jsf.framework.ajax.xmlfilter.BaseFilter.doFilter(BaseFilter.java:277) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.ri.app.oes.view.filter.HttpSessionFilter.doFilter(HttpSessionFilter.java:123) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.myfaces.component.html.util.ExtensionsFilter.doFilter(ExtensionsFilter.java:122) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.orm.hibernate3.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:183) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:96) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:179) at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:84) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:104) at org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:157) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:241) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:580) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:619)  Let me know if this problem with the framework or i am doing something wrong.    --- No further details from [SPR-3872](https://jira.spring.io/browse/SPR-3872?redirect=false)","closed","in: data,","spring-projects-issues","2007-09-13T05:12:41Z","2019-01-11T19:21:20Z"
"","8025","OpenSessionViewFilter and Quartz [SPR-3341]","**[Sanjeev Koppal](https://jira.spring.io/secure/ViewProfile.jspa?name=sanjeevkoppal)** opened **[SPR-3341](https://jira.spring.io/browse/SPR-3341?redirect=false)** and commented  We are having some problem with the Quartz scheduler and opensessionviewFilter The configuration is descibed below \ \ \core.service.scheduler.NotificationScheduler\ \ \ \ \ \5\ \ \ \ \ \ \ \ \ \ \ \  \ \ \ \					 \ \				 \ \ \ \ \ \ \ \ \ \ \900000\ \ \ \ \ \ \ \ \ \900000\ \ \ \ \ \ \ \ \ \        \           	     		     	          \  \ \ \ \ \ OpenSessionViewFilter in Web.xml Setup \ \SpringContext\ \ org.springframework.web.context.ContextLoaderServlet \ \1\ \ \ \ This filter overwrites OpenSessionInViewFilter to make flush mode to COMMIT. \ \applicationSessionFilter\ \ core.view.filter.ApplicationSessionFilter \ \ \ \applicationSessionFilter\ \\*.jsf\ \ \ \applicationSessionFilter\ \\*.xhtml\ \ \ \applicationSessionFilter\ \*.jsp\ \ \  When we deploy the application to tomcat or weblogic 9.2 Scenario1 If i don't open the application URL say for 15 mins (Which is the start delay for scheduler) The scheduler kicksoff and the scheduler works fine. As soon as i hit a Url of the application, from then on scheduler throws exception saying unable to open connection as the connection is already closed. Scenario2 When i open the application just after the deployment, then the scheduler starts after 15 mins, it doesn't complain about the connection or the hibernate session.  public class ApplicationSessionFilter extends OpenSessionInViewFilter {      public ApplicationSessionFilter() {     	super();     	Logger.log(this, ""OpenSessionInViewFilter...  Initialised..."");		     }     protected Session getSession(SessionFactory sessionFactory)     		throws DataAccessResourceFailureException {     	Session session = SessionFactoryUtils.getSession(sessionFactory, true);     	session.setFlushMode(FlushMode.AUTO);     	Logger.log(this, ""ApplicationSessionFilter.getSession() invoked..."");		     	return session;     }          /**      * we do an explicit flush here just in case we do not have an automated      * flush      */     protected void closeSession(Session session, SessionFactory factory) {		     	session.flush();     	super.closeSession(session, factory);     	Logger.log(this, ""ApplicationSessionFilter.closeSession() invoked..."");     	     }  }  Am i missing something here... I don't know if its a bug or a question   --- No further details from [SPR-3341](https://jira.spring.io/browse/SPR-3341?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-04-04T07:48:26Z","2012-06-18T12:44:51Z"
"","8064","Can u pl post sample jmx-spring code which works on weblogic 8.1 SP5 [SPR-3381]","**[sanjeev dokiburra](https://jira.spring.io/secure/ViewProfile.jspa?name=dspkumar)** opened **[SPR-3381](https://jira.spring.io/browse/SPR-3381?redirect=false)** and commented   --- No further details from [SPR-3381](https://jira.spring.io/browse/SPR-3381?redirect=false)","closed","in: core,","spring-projects-issues","2007-04-17T01:58:14Z","2012-06-19T09:37:23Z"
"","8744","Include configuration source in BeanCreationException [SPR-4065]","**[Sandu Turcan](https://jira.spring.io/secure/ViewProfile.jspa?name=alex322)** opened **[SPR-4065](https://jira.spring.io/browse/SPR-4065?redirect=false)** and commented  Since 2.0 Spring introduced BeanMetadataElement and getSource() which returns null for the most part but may contain something like the physical resource location and the line number. It would be very helpful if the container included the source whenever it throws BeanCreationException. Or maybe have BeanCreationException reference BeanMetadataElement.   --- No further details from [SPR-4065](https://jira.spring.io/browse/SPR-4065?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-11-07T07:58:42Z","2012-06-19T09:36:19Z"
"","8427","Spring MVC View : StreamView [SPR-3746]","**[Sami Dalouche](https://jira.spring.io/secure/ViewProfile.jspa?name=samokk)** opened **[SPR-3746](https://jira.spring.io/browse/SPR-3746?redirect=false)** and commented  It would be nice to have, by default, a view in Spring MVC that allows to ""send raw data (via an InputStream) directly to the HttpServletResponse. Very useful for allowing users to download content."".  Here is working code, that has been ported from the ""StreamResult"" class present in Struts 2. (http://struts.apache.org/2.x/struts2-core/apidocs/org/apache/struts2/dispatcher/StreamResult.html)  package WHATEVER;  import java.io.InputStream; import java.io.OutputStream; import java.util.Map;  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import org.apache.log4j.Logger; import org.springframework.web.servlet.View;  public class StreamView implements View { private final static Logger logger = Logger.getLogger(StreamView.class); protected int bufferSize = 1024; protected int contentLength = -1; protected String contentType; protected InputStream inputStream; protected String contentDisposition = ""inline"";      public StreamView(String contentType, InputStream inputStream) {         super();                  if (inputStream == null) {             throw new IllegalArgumentException(""Input Stream cannot be null"");         }                  if (contentType == null) {             throw new IllegalArgumentException(""Content Type cannot be null"");         }                  this.contentType = contentType;         this.inputStream = inputStream;     }          public String getContentType() {         return contentType;     }          /**      * @param contentType The contentType to set.      */     public void setContentType(String contentType) {         this.contentType = contentType;     }          /**      * @return Returns the bufferSize.      */     public int getBufferSize() {         return (bufferSize);     }          /**      * @param bufferSize The bufferSize to set.      */     public void setBufferSize(int bufferSize) {         this.bufferSize = bufferSize;     }          /**      * @return Returns the contentLength.      */     public int getContentLength() {         return contentLength;     }          /**      * @param contentLength The contentLength to set.      */     public void setContentLength(int contentLength) {         this.contentLength = contentLength;     }          /**      * @return Returns the Content-disposition header value.      */     public String getContentDisposition() {         return contentDisposition;     }          /**      * @param contentDisposition the Content-disposition header value to use.      */     public void setContentDisposition(String contentDisposition) {         this.contentDisposition = contentDisposition;     }          public void render(Map map, HttpServletRequest request, HttpServletResponse response) throws Exception {         OutputStream oOutput = null;              try {             // Find the Response in context             HttpServletResponse oResponse = response;                  // Set the content type             oResponse.setContentType(contentType);                  // Set the content length             if (contentLength >= 0) {                 oResponse.setContentLength(contentLength);             }                  // Set the content-disposition             if (contentDisposition != null) {                 oResponse.addHeader(""Content-disposition"", contentDisposition);             }                  // Get the outputstream             oOutput = oResponse.getOutputStream();                  if (logger.isDebugEnabled()) {                 logger.debug(""Streaming result ["" + ""inputStream"" + ""] type=["" + contentType + ""] length=["" + contentLength +                     ""] content-disposition=["" + contentDisposition + ""]"");             }                  // Copy input to output             logger.debug(""Streaming to output buffer +++ START +++"");             byte[] oBuff = new byte[bufferSize];             int iSize;             while (-1 != (iSize = inputStream.read(oBuff))) {                 oOutput.write(oBuff, 0, iSize);             }             logger.debug(""Streaming to output buffer +++ END +++"");                  // Flush             oOutput.flush();         }         finally {             if (inputStream != null) inputStream.close();             if (oOutput != null) oOutput.close();         }     }  }  Regards, Sami Dalouche   ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-08-08T01:34:26Z","2012-06-19T09:37:25Z"
"","8750","Should AbstractTestNGSpringContextTests use @BeforeSuite instead of @BeforeClass? [SPR-4072]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-4072](https://jira.spring.io/browse/SPR-4072?redirect=false)** and commented  AbstractTestNGSpringContextTests's springTestContextPrepareTestInstance() method is currently annotated with `@BeforeClass`, which prohibits `@BeforeSuite` methods in subclasses from interacting with the ApplicationContext.  Essentially, the question raised in the forum is: would it be better to annotate the springTestContextPrepareTestInstance() method with `@BeforeSuite` instead of `@BeforeClass`?  ---  **Affects:** 2.5.6, 3.0.7, 3.1.1  **Reference URL:** http://forum.springframework.org/showthread.php?p=148532#post148532  **Issue Links:** - #10077 AbstractTestNGSpringContextTests: Spring beans not available within `@BeforeTest` methods (_**""is duplicated by""**_)  13 votes, 14 watchers","closed","has: votes-jira,","spring-projects-issues","2007-11-08T09:53:57Z","2019-02-21T22:47:40Z"
"","8727","Nightly snapshots are not picking up code changes [SPR-4048]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-4048](https://jira.spring.io/browse/SPR-4048?redirect=false)** and commented  Recent nightly snapshots located at http://static.springframework.org/downloads/nightly/snapshot-download.php?project=SPR are not picking up changes to the entire code base.  For example, the changes mentioned in #8688 are not present in builds 20071104-290 and 20071105-291 even though the changes were committed on 2007.11.03. This appears to affect at least classes in the 'src' and 'tiger' trees.  In contrast, changes to the PetClinic sample application, changelog.txt, etc., which were committed 2007.11.05 did in fact make it into the 20071105-291 snapshot.  ---  **Affects:** 2.5 RC1","closed","type: task,","spring-projects-issues","2007-11-05T21:29:31Z","2019-01-11T16:23:02Z"
"","8567","Add testing support for setting/invoking non-public fields and setter methods [SPR-3887]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-3887](https://jira.spring.io/browse/SPR-3887?redirect=false)** and commented  There are often times during testing when it would be beneficial to be able to set a non-public field or invoke a non-public setter method.  Examples:  - ORM frameworks such as JPA and Hibernate condone the usage of private or protected field access as opposed to   public setter methods for properties in a domain entity.  - Spring's support for annotations such as `@Autowired` and `@Resource` provides dependency injection for private or   protected fields, setter methods, and configuration methods.  Providing a new testing-specific, reflection-based utility class would help to address these and related issues within the scope of a unit or integration test.   ---  **Affects:** 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-17T04:00:28Z","2012-06-19T03:47:14Z"
"","8566","Source code JARs on maven.springframework.org do not conform to Maven2 conventions [SPR-3886]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-3886](https://jira.spring.io/browse/SPR-3886?redirect=false)** and commented  Originally mentioned by Maxim Butov on the forum here:  http://forum.springframework.org/showpost.php?p=142077&postcount=17  The JARs for source code on http://s3browse.com/explore/maven.springframework.org/ do not follow the Maven2 naming conventions.  For example, spring-sources-2.1-m4.jar should be named spring-2.1-m4-sources.jar. The JARs for the M3 release do not have this problem. See here for a comparison:  http://s3browse.com/explore/maven.springframework.org/milestone/org/springframework/spring/2.1-m3/ http://s3browse.com/explore/maven.springframework.org/milestone/org/springframework/spring/2.1-m4/   ---  **Affects:** 2.1 M4","closed","type: task,","spring-projects-issues","2007-09-17T03:36:39Z","2012-06-19T03:47:43Z"
"","8085","SimpleMappingExceptionResolver should provide access to mapped handlers [SPR-3402]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-3402](https://jira.spring.io/browse/SPR-3402?redirect=false)** and commented  SimpleMappingExceptionResolver should provide subclasses access to the configured mappedHandlers, preferably in the form of either a public or protected accessor method (i.e., public Set getMappedHandlers()). Similar accessor methods could (should?) be provided for other private properties such as exceptionMappings, defaultErrorView, defaultStatusCode, and exceptionAttribute.  For a concrete use case in which access to SimpleMappingExceptionResolver's private properties would be necessary, please take a look at version 1.10 of my SpringWebFlowExceptionResolver ([SWF-158](https://jira.spring.io/browse/SWF-158)), which I uploaded today. In order to properly support mappedHandlers in a subclass, I had to override the setMappedHandlers() method in a hackish way as follows:      private Set                    mappedHandlers;          public final void setMappedHandlers(final Set mappedHandlers) {         super.setMappedHandlers(mappedHandlers);         this.mappedHandlers = mappedHandlers;     }          public final Set getMappedHandlers() {         return this.mappedHandlers;     }  Providing either public or protected accessor methods in SimpleMappingExceptionResolver would make such hacks unnecessary.   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-04-21T03:26:26Z","2012-06-19T03:50:04Z"
"","8120","Composition Based Controllers [SPR-3437]","**[Sam Alston](https://jira.spring.io/secure/ViewProfile.jspa?name=kennelbound)** opened **[SPR-3437](https://jira.spring.io/browse/SPR-3437?redirect=false)** and commented  My name is Sam Alston and my colleague is Hector Rovira.  We are Java Web Developers and heavy users of the Spring Framework.  In fact, many of the web applications we've been a part of rely upon the Spring MVC framework.  As our applications have grown, Hector identified some areas were we could reuse code, but only if we had Controllers that relied more on Composition rather than Inheritance (which is the current pattern to follow when using AbstractController, SimpleFormController, MultiActionController, etc...)  He noticed that the Validators are injected into the Form Controllers, and proposed that we carried the same pattern into other areas of the controller lifecycle.  So the new design offers several interfaces that hook into the lifecycles of the Action and Form Controllers.  We have developed Composition-based Controllers that are easily configured through Spring application context files and injected with reusable ReferenceDataProviders, RequestObjectProviders, ModelProviders, FormBinders, etc...  As a result of this, we have achieved our goal of making our code more reusable, our unit tests more concise and practical.  We have also noticed that less code is being written to facilitate integration.  Here is a short outline of the new Classes and Interfaces:  - CompositionActionController   - Extends from AbstractController   - Injected with the following objects:   - View name - The view to be used with the Action   - RequestAction(s) - The functionality (business logic) to be executed when receiving the request   - ModelProvider(s) - provides one or more objects to be injected into the given ModelAndView - CancellableCompositionFormController   - Extends from CancellableFormController   - Injected with the following objects:     - Form View name - The view presented to the user on the first request     - Success View name - The view to be used in the success scenario     - Cancel View name - The view to be used in the cancel scenario     - InitBinder(s) - Binds editors into the ServletRequestDataBinder     - FormBackerProvider(s) - Provides (or modifies) a command object     - ReferenceDataProvider(s) - Provides one or more objects to be used in the form's ModelAndView (Similar to ModelProvider)     - FormBinder(s) - Performs complex form binding on the command object     - Validator(s) - Assures the content matches the command object's requirements     - SubmitAction(s) - The functionality (business logic) to be executed when receiving a Submit request     - CancelAction(s) - The functionality (business logic) to be executed when receiving a Cancel request   - CompositionWizardFormController     - Extends from AbstractWizardFormController     - Injected with all the same objects as the the CancellableCompositionFormController, except that the FormBinders, Validators and ReferenceDataProviders are registered on a per-page basis.  A simple demo application can be found at http://code.google.com/p/spring-composition/   ---  **Affects:** 2.0.2  **Attachments:** - [spring-composition.patch](https://jira.spring.io/secure/attachment/12580/spring-composition.patch) (_163.70 kB_)","closed","type: enhancement,","spring-projects-issues","2007-05-01T06:38:56Z","2012-06-19T09:37:44Z"
"","8078","Injected Business Logic controllers [SPR-3395]","**[Sam Alston](https://jira.spring.io/secure/ViewProfile.jspa?name=kennelbound)** opened **[SPR-3395](https://jira.spring.io/browse/SPR-3395?redirect=false)** and commented  While working on several web-applications for our current employer, myself and a co-worker realized that the power of injected dependencies that Spring framework allows could also be used to inject the actual business logic.  For example, let's say that you have a controller which will send an e-mail, and store a record of the email in a database.  Furthermore, the response needs to contain a confirmation message for the user.  There are two distinct actions that are taking place (send the email through an email service, and store a record via a persistence service), and there is an object (the success message) which needs to be placed into the model.  The view can already be injected via the application contexts.  The business logic of performing the actions, or providing models can be injected as dependencies into the controller.  It seems a little odd that Spring is so much about Interface based design, and yet the basic MVC architecture almost requires the user to use inheritance with the controllers.  Therefore, my co-worker suggested that we create a set of controllers, which are part of the Spring framework, and a set of interfaces that allow the end-developer to create the Actions and ModelProviders that actually implement the business logic.  The result is that more and more of the integration logic moves into the application contexts, and less and less in the code.  What is the best way to submit this code to be reviewed and (hopefully) included in the code base.  Thanks for any information you can give.    ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-04-19T16:44:09Z","2012-06-19T09:37:38Z"
"","8361","Doc: MultiActionController request/response/exception signature not clear [SPR-3680]","**[Ryan Slobojan](https://jira.spring.io/secure/ViewProfile.jspa?name=straxus)** opened **[SPR-3680](https://jira.spring.io/browse/SPR-3680?redirect=false)** and commented  We have a method with the following signature:  public ModelAndView list(HttpServletRequest request, HttpServletResponse response, Exception exception)  In a class which extends MultiActionController. Under Spring 2.0.5, this method worked as expected, however under Spring 2.0.6, we get the following message written to the log:  16:22:28,402 WARN  [PageNotFound] No request handling method with name 'list' in class [(...).SampleController]  Changing the method signature to:  public ModelAndView list(HttpServletRequest request, HttpServletResponse response)  fixes this problem - the method becomes accessible again. However, the Javadoc (http://www.springframework.org/docs/api/org/springframework/web/servlet/mvc/multiaction/MultiActionController.html) indicates that the first method signature is valid.  ---  **Affects:** 2.0.6  **Issue Links:** - #8185 MultiActionController exception handler on delegate is recognized as handler method","closed","type: documentation,","spring-projects-issues","2007-07-11T10:58:13Z","2019-01-13T22:42:36Z"
"","8084","CustomEditorConfigurer: PropertyEditor should be able to depend on previously post-processed bean [SPR-3401]","**[Ryan McGuinness](https://jira.spring.io/secure/ViewProfile.jspa?name=rmcguinness)** opened **[SPR-3401](https://jira.spring.io/browse/SPR-3401?redirect=false)** and commented  When using the org.springframework.beans.factory.config.CustomEditorConfigurer to registar a property editor that relies on a bean with Post Processor configuration like:  \ \ ... \  The bean is loaded before the post processor is run causing an invalid configuration.  Example: I have a PropertyEditor for type tables defined in a database. I have an environment aware PropertyResourceConfigurer (EG which ever server I am on a different properties file is used). So depending on where I deploy I use the correct resources. When I register the bean: \ ... \  It attempts to load the definition of the datasource  (Prebind) before the post processor has run causing an exception like: Invalid database driver: ${jdbc.driver} in config...  I have a workaround in place now where I manually load the Property Registrar at the end of the processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props). But this is neither disirable or recommended the PostProcessors is now aware of a specific bean type, and name.  I believe that PropertyResourceConfigurer should load after the post process is complete to avoid these conflicts.  Thanks, Ryan   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-04-21T01:20:07Z","2012-06-19T03:50:06Z"
"","8873","Tiles 2 - JDK 1.4 support [SPR-4195]","**[Ruud Senden](https://jira.spring.io/secure/ViewProfile.jspa?name=rsenden)** opened **[SPR-4195](https://jira.spring.io/browse/SPR-4195?redirect=false)** and commented  As of Tiles 2 version 2.0.5, there is also a Java 1.4 version available. However, the classes in the Spring org.springframework.web.servlet.view.tiles2 package use Java 5 features. As such, although Tiles 2 can be used on Java 1.4, the Spring Tiles2 integration cannot.   ---  **Affects:** 2.5 final  **Attachments:** - [spring-tiles-2.5-j4.zip](https://jira.spring.io/secure/attachment/13165/spring-tiles-2.5-j4.zip) (_9.74 kB_)","closed","type: enhancement,","spring-projects-issues","2007-11-29T01:30:05Z","2012-06-19T03:47:13Z"
"","8209","keep an eye on unitils [SPR-3526]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-3526](https://jira.spring.io/browse/SPR-3526?redirect=false)** and commented  http://unitils.sourceforge.net/  I'm starting to use it for testing and it looks very nice.  I'm thinking that maybe you could mention it at the end of the chapter on testing in that list where you list dbunit.   --- No further details from [SPR-3526](https://jira.spring.io/browse/SPR-3526?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-05-26T08:12:12Z","2019-01-11T19:06:18Z"
"","8158","Section 8.3.1 of the docs says that getConfigLocations() is abstract, but it's not. [SPR-3475]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-3475](https://jira.spring.io/browse/SPR-3475?redirect=false)** and commented  Section 8.3.1 of the docs says that getConfigLocations() is abstract, but it's not.   ---  **Affects:** 2.0.5","closed","type: bug,","spring-projects-issues","2007-05-12T07:46:09Z","2012-06-19T03:50:48Z"
"","8077","Workflow when registering BeanPostProcessor beans in Application Context has strange or undocumented behaviour.   [SPR-3394]","**[Rostislav Georgiev Georgiev](https://jira.spring.io/secure/ViewProfile.jspa?name=rgeorgiev)** opened **[SPR-3394](https://jira.spring.io/browse/SPR-3394?redirect=false)** and commented  This is part of the code inside registerBeanPostProcessors inside AbstractApplicationContext class:                  List orderedProcessors = new ArrayList();     	List nonOrderedProcessorNames = new ArrayList();     	for (int i = 0; i < processorNames.length; i++) {     		if (isTypeMatch(processorNames[i], Ordered.class)) {     			orderedProcessors.add(getBean(processorNames[i]));     		}     		else {     			nonOrderedProcessorNames.add(processorNames[i]);     		}     	}          	// First, register the BeanPostProcessors that implement Ordered.     	Collections.sort(orderedProcessors, new OrderComparator());     	for (Iterator it = orderedProcessors.iterator(); it.hasNext();) {     		beanFactory.addBeanPostProcessor((BeanPostProcessor) it.next());     	}     	// Second, register all other BeanPostProcessors, one by one.     	for (Iterator it = nonOrderedProcessorNames.iterator(); it.hasNext();) {     		String processorName = (String) it.next();     		beanFactory.addBeanPostProcessor((BeanPostProcessor) getBean(processorName));     	}  What I can see from this code is that : 1. Ordered post processor are instantiated and registered. 2. After that all non-ordered one are processed.  So because of 1 all non-ordered ones are post processed by ones which are ordered. Is this the required behaviour? If ""yes"" what is the idea behind? And also why  it is not documented, that if don't want to have your custom  BeanPostProcessor be post processed by some others BeanPostProcessors, you should make it Order. But  I think this should not be the case, because the order should have influence only on the order of execution, not on the behaviour.  Cheers   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-04-19T07:16:22Z","2012-06-19T03:50:36Z"
"","8609","Allow arrays of parameter values in prepared statements  [SPR-3929]","**[Rory Winston](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinston)** opened **[SPR-3929](https://jira.spring.io/browse/SPR-3929?redirect=false)** and commented  When using the varargs-enabled SimpleJdbcTemplate class, I ran into the following issue: I wanted to be able to do the following:  `@Transactional`(propagation=Propagation.REQUIRED) public void insertRows(int nrows) { for (int i = 0; i < nrows; ++i) { jdbcTemplate.update(INSERT_SQL, ID_PREFIX + i, generateRowData()); } }  i.e. pass an array of values to update() instead of individual column entries. To facilitate this, I made the following trivial change to ArgPreparedStatementSetter.java:  public void setValues(PreparedStatement ps) throws SQLException { if (this.args != null) { int index = 1; for (int i = 0; i < this.args.length; i++) { if (this.args[i] instanceof Object[]) { for (int j = 0; j < ((Object[])args[i]).length; ++j) StatementCreatorUtils.setParameterValue(ps, index++, SqlTypeValue.TYPE_UNKNOWN, null, ((Object[])this.args[i])[j]); } else StatementCreatorUtils.setParameterValue(ps, index++, SqlTypeValue.TYPE_UNKNOWN, null, this.args[i]); } } }  i.e. check the type of the the argument, and, if it can be coerced to an Object[] type, call setParameterValue() individually on each element within the array.   ---  **Attachments:** - [ArgPreparedStatementSetter.java](https://jira.spring.io/secure/attachment/12952/ArgPreparedStatementSetter.java) (_1.69 kB_)","closed","type: enhancement,","spring-projects-issues","2007-09-26T21:01:20Z","2012-06-19T03:47:47Z"
"","8441","Revise Hibernate documentation 12.2.x [SPR-3760]","**[Ron Wheeler](https://jira.spring.io/secure/ViewProfile.jspa?name=ronatartifact)** opened **[SPR-3760](https://jira.spring.io/browse/SPR-3760?redirect=false)** and commented  In Section 12.2 on Hibernate: 1) The current manual says ""Furthermore, all references to the org.hibernate package need to be    replaced with net.sf.hibernate, following the root package change in Hibernate 3. Simply adapt the package    names (as used in the examples) accordingly""    Is this still true?  2) Imports are missing in examples. It is not possible to guess from the preceding description or the code, what imports are needed. (Spring or Hibernate).  3) No mention is made of what libraries are need to add Hibernate to a Spring project. This results in a lot of iterations through ""Class Not found"" messages for no good reason.    If I can just take all of the Hibernate libraries and copy them over top of my Spring libraries, say so. If not, tell me which ones are needed.    Perhaps there should be a separate document where the core spring libraries are listed with the extras for each third-party system listed under the package.  I did get it to work, at least as far as my testing went. It just wasted a lot of my time for no good reason.  12.2.2 I am not sure why the JNDI example is repeated here. It is not specific to Hibernate and has already been covered earlier and there is no change for Hibernate. If it is important just put a back reference to where it is discussed in detail.  12.2.3 It is not clear why the ""callback"" section is there and why one would need it. Another sentence about what it accomplishes might help. The code examples need a bit of an explanation about how it adds to the code above it which appears to do the same thing. If it is just a harder way to the same thing that was shown above, then it should have its own section under ""Crazy Spring Tricks"" or a special segment on the Letterman show ""Top 10 ways to waste programming time"".  12.2.4 In the opening sentence, is this a ""better"" alternative, a ""recommended"" alternative or just a sillier way to do the same thing. Explain the benefits or if it is not a ""good thing"" say so. ""For people who have existing code that does X, an alternative..."" would let me know that I do not want to read this, I do not want to code like this. It will add nothing to my life. Consider reworking the last sentence of 12.2.4 and putting it in the opening paragraph.  12.2.5 Appears to be an ""odd-ball"" way of doing things rather than an enhancement to Spring. It may be nice that Hibernate did something new a long time ago with Hibernate 3 API but does this really help me? Why would this be a ""good thing"" to put in a new Spring application?  12.2.6 and 12.2.7 Why is Programmatic better than Declarative? I would have thought that Declarative would be the first choice.  12.2.8 This may need a new name. It seems to assume that you already have a transaction strategy and you are thinking about changing it. Very unclear how this section addresses the concerns for transaction management in a new Spring application that is using Hibernate.  12.2.9 Seems to be mistittled and appears to be a rambling collection of thoughts some of which seem only peripherally related to Hibernate. Perhaps should be several sections with an introduction in each one about how it relates to Spring and Hibernate and what particular problem you are trying to solve.  12.2.10 Nice title. Nice opening sentence. Says what it is about. Explains exactly what problem is going to be discussed. Even tells you when it might happen. I have a feeling that some of the previous sections could be better if they followed this model.  General Comments  The recommended ""pure Spring"" solution needs to be much more clearly identified and discussed. All the various alternative approaches may be interesting for historical or odd-ball applications but the ""pure Spring"" approach should be front and center.  Advanced methods should be clearly identified as add-ons to ""pure Spring"" with a clear description about why a ""pure Spring"" application would need it.  The ""odd-ball"" stuff where someone has some historical reason to use Hibernate in a particular way ""because that's the way we always did it when I was young"" should be clearly identified as not the recommended ""pure Spring"" approach with appropriate warnings as to why it is better or worse than using Spring in the previously discussed way.  I hope that this helps.  Ron   ---  **Affects:** 2.0.6  2 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2007-08-13T05:04:35Z","2015-09-22T18:20:32Z"
"","7933","Web Site Downloads Page Says 2.02 is the latest release [SPR-3248]","**[Ron Bodkin](https://jira.spring.io/secure/ViewProfile.jspa?name=rbodkin)** opened **[SPR-3248](https://jira.spring.io/browse/SPR-3248?redirect=false)** and commented  Go to http://www.springframework.org/download   ---  **Affects:** 2.0.3","closed","type: task,","spring-projects-issues","2007-03-10T16:09:47Z","2007-03-12T01:56:57Z"
"","7928","Documentation bug 12.6.2. JpaTemplate  [SPR-3243]","**[Roman](https://jira.spring.io/secure/ViewProfile.jspa?name=rockosf)** opened **[SPR-3243](https://jira.spring.io/browse/SPR-3243?redirect=false)** and commented  I am not sure about this, but the code example says:  public class JpaProductDao implements ProductDao {  private JpaTemplate jpaTemplate;      public void setEntityManagerFactory(EntityManagerFactory emf) {         JpaTemplate jpaTemplate = new JpaTemplate(emf);     }  ....  Shouldn't that be      public void setEntityManagerFactory(EntityManagerFactory emf) {         jpaTemplate = new JpaTemplate(emf);     }  since there is a private member? Otherwise it would be a never used local variable.    ---  **Affects:** 2.0.2, 2.0.3","closed","in: core,","spring-projects-issues","2007-03-08T20:51:53Z","2012-06-19T03:50:23Z"
"","8465","Add defaultObject attribute to  tag [SPR-3785]","**[Roman Shevchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=sher)** opened **[SPR-3785](https://jira.spring.io/browse/SPR-3785?redirect=false)** and commented  A defaultObject property of JndiObjectFactoryBean is not available via otherwise perfect  tag and this makes it unusable when looking for optional JNDI settings.  ---  **Affects:** 2.0.6  **Issue Links:** - #8692 jee:jndi-lookup do not provide a way to define a default object (_**""duplicates""**_)  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-08-19T05:17:56Z","2019-01-11T19:34:44Z"
"","8670","HibernateTemplate.enableFilter method does not work outside of a transaction [SPR-3990]","**[Roman Pichlík](https://jira.spring.io/secure/ViewProfile.jspa?name=dagi)** opened **[SPR-3990](https://jira.spring.io/browse/SPR-3990?redirect=false)** and commented  A call of method hibernateTemplate.enableFilter() outside of transaction scope leads to java.lang.IllegalStateException: No Hibernate Session bound to thread, and configuration does not allow creation of non-transactional one here.  Method implementation: public Filter enableFilter(String filterName) throws IllegalStateException { Session session = SessionFactoryUtils.getSession(getSessionFactory(), false); Filter filter = session.getEnabledFilter(filterName); if (filter == null) { filter = session.enableFilter(filterName); } return filter; }  I guess that should be changed to something like:  public Filter enableFilter(final String filterName) throws IllegalStateException { return (Filter)execute(new HibernateCallback() { public Object doInHibernate(Session session) throws HibernateException, SQLException { return session.enableFilter(filterName); }             }); }    ---  **Affects:** 2.1 M4","closed","status: declined,","spring-projects-issues","2007-10-19T00:37:39Z","2019-01-12T16:39:44Z"
"","8169","Enable the definition of beans in the application context using annotations instead of XML, but do it right [SPR-3486]","**[Rodrigo Urubatan Ferreira Jardim](https://jira.spring.io/secure/ViewProfile.jspa?name=urubatan)** opened **[SPR-3486](https://jira.spring.io/browse/SPR-3486?redirect=false)** and commented  I think some bean definitions are just configuration, as the Data Source, Transaction Manager, Mail Server, ... but most of then are the application code, and not configuration. for the seccond case, I think it would be very easy and clean, to register it on the application with annotations, because it would use a lot less code than the XML approach, and this beans registrations (like my application DAOs, or my Spring MVC controllers), does not change during the life time of any application. for this to be reached it would be necessary to scan the classpath for the annotated classes.  I have wrote a litle bouch of classes that make the application context behave exaclty this way, enabling it to use bean registration by annotations. please consider including it in spring framework as an optional extension.  I`m not sure the application way I did it (creating another application context class) is the best one, but it is an idea of implementation for it :D  the code I have wrote is atacched. what it does right now is: 1. `@Bean` - equals to \    * autoWire (NO, BY_NAME, BY_TYPE, INHERITED)    * dependencyCheck    * destroyMethod    * factoryMethod    * initMethod    * lazy    * name    * scope (APPLICATION, REQUEST, SESSION) - short cut to aop:scope    * singleton 2. `@UrlMapping` - attaches the bean to a URL using an bean factor post processor (AnnotationHandlerMaping) 3. `@UrlMappings` - enables multiple UrlMappings per bean 4. `@Property` 5. `@ConstructorArgs`  in the code, there is an example applicationContext.xml that enables WebServices using JSR 181 webservices through xfire/spring integration, and has already a propertyPlaceholderConfigurer.  the annotation scan, for now scans every directory/jar in the classpath, that contains a file names to.properties in the root, and the propertyPlaceholderConfigurer uses this files too.  with this jar, I was able to define only a datasource, transaction manager,sessionFactory,tx:annotation-driven,and a defaultViewResolver and write all the rest of my application without touching in a XML file. this way, all I need to know about my beans was in the bean code.  the installation of it is preaty clean too:  \  \ \TO - Novo Site\ \ \contextConfigLocation\ \classpath*:applicationContext.xml\ \ \ \contextClass\ \ br.com.techoffice.spring.web.TOAnnotationXmlWebApplicationContext \ \ \ \ org.springframework.web.context.ContextLoaderListener \ \ \ \requestContext\ \ org.springframework.web.filter.RequestContextFilter \ \ \ \requestContext\ \/\*\ \ \ \dispatcher\ \ org.springframework.web.servlet.DispatcherServlet \ \1\ \ \ \dispatcher\ \\*.to\ \ \ \dispatcher\ \/web/*\ \ \  a blank dispatcher-servlet.xml (does this is really needed? what if I want all my configuration to be application-wide, I really need to create a xml file to each servlet, or in this case to the only servlet I have?)  again, please consider it as an optional module for spring framework. and thanks for the great framework, it has saved a few of my projects in clients in the last 2 years.  ---  **Issue Links:** - #6680 Enable the definition of beans in the application context using annotations instead of XML (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2007-05-16T00:11:28Z","2019-01-11T18:00:43Z"
"","8248","BeanWrapperImpl doesn't delegate Map-creation to propertyEdtior [SPR-3565]","**[Robert Scholte](https://jira.spring.io/secure/ViewProfile.jspa?name=r.f.scholte)** opened **[SPR-3565](https://jira.spring.io/browse/SPR-3565?redirect=false)** and commented  With the use of a wizardform I'm trying to to fill a command, in this case I want to fill a Map with a Collection of Dates. This means that the BeanWrapperImpl.class is responsible of building the command with use of the configured PropertyEditors  In the method private Object getPropertyValue(PropertyTokenHolder  tokens) the readMethod for the Map is called. The result is null, since the propertyEditor is responsible for creating the Map if required / configured.  Althougt the Map is null, there's a check if token.keys != null, which is true, so the code tries to apply indexes and map keys. As expected this is not possible, so a NullValueInNestedPathException is thrown.  IMHO event though the Map is null, you should try to convert value with the registered PrpertyEdtior (by default null is converted to null, so no problem here I guess).  ---  **Affects:** 2.0.5  **Issue Links:** - #6368 Option to expose empty value instead of NullValueInNestedPathException","closed","type: enhancement,","spring-projects-issues","2007-06-07T18:49:59Z","2019-01-11T19:08:27Z"
"","8081","AbstractTransactionalSpringContextTests shoud still call onSetupBeforeTransaction if transactions are prevented [SPR-3398]","**[Robert Macaulay](https://jira.spring.io/secure/ViewProfile.jspa?name=robertm)** opened **[SPR-3398](https://jira.spring.io/browse/SPR-3398?redirect=false)** and commented  If you make a call to preventTransaction() in a subclass of AbstractTransactionalSpringContextTests , its onSetup method wont call onSetUpBeforeTransaction or onSetUpInTransaction, leaving your testcase without a setup method(since all the others are overridden final).  If you use the annotation NoTransaction or call preventTransaction in constructor, the same behavior will occur. The onSetup() method in the AbstractTransactionalSpringContextTests will notice that there is no transaction, and will not run any setup method.  A fix would be to insert a call to onSetupBeforeTransaction in onSetup() before the two tests of transactionManager or transactionDefinition, which would give you a setup method to call.  ---  **Affects:** 2.0.4  **Issue Links:** - #6964 Provide non-transactional onSetup* hook in AbstractTransactionalSpringContextTests (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2007-04-20T06:59:39Z","2019-01-11T18:17:08Z"
"","8386","SchedulerFactoryBean:  org.quartz.SchedulerException: Operation not supported for remote schedulers. [SPR-3705]","**[Robert Laflamme](https://jira.spring.io/secure/ViewProfile.jspa?name=rlaflamme)** opened **[SPR-3705](https://jira.spring.io/browse/SPR-3705?redirect=false)** and commented  Our 5-years application is using the Spring Framework since version 1.2.1 (since 2004). The current version of the SF we used is version 1.2.8 (since 2006)  The application is using the Quartz Scheduler, version 1.6.  We used the remote scheduler (RMI) component. to ""talk"" to other JVMs.  The ""marriage"" Spring 1.2.8 with Quartz 1.6 was excellent.  Now we tried to upgrade to Spring 2.0.6.  A few modifications to our config xml was required (changing the header to spring 2.0, replace the singleton= to scope=) etc.  When starting the application and get the Remote scheduler instance (as before with SF 1.2.8), I got the following error:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'osCollectorSchedulerClient' defined in class path resource [com/wasmonitor/resources/spring/applicationContext-scheduling.xml]: Invocation of init method failed; nested exception is org.quartz.SchedulerException: Operation not supported for remote schedulers. Caused by: org.quartz.SchedulerException: Operation not supported for remote schedulers. at org.quartz.impl.RemoteScheduler.setJobFactory(RemoteScheduler.java:1170) at org.springframework.scheduling.quartz.SchedulerFactoryBean.afterPropertiesSet(SchedulerFactoryBean.java:581) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1201) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1171) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:425) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:733) at com.wasmonitor.springframework.ApplicationContextFactory.getBean(ApplicationContextFactory.java:42) at com.wasmonitor.schedulers.SchedulerManagerClientImpl.getScheduler(SchedulerManagerClientImpl.java:45) at com.wasmonitor.schedulers.SchedulerManagerClientImpl.getCollectorStatus(SchedulerManagerClientImpl.java:88) at com.wasmonitor.schedulers.SchedulerManagerClientImpl.getCollectorStatus(SchedulerManagerClientImpl.java:124) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:615) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:296) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:177) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:144) at org.springframework.remoting.support.RemoteInvocationTraceInterceptor.invoke(RemoteInvocationTraceInterceptor.java:70) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:166) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy1.getCollectorStatus(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:615) at org.springframework.remoting.support.RemoteInvocation.invoke(RemoteInvocation.java:205) at org.springframework.remoting.support.DefaultRemoteInvocationExecutor.invoke(DefaultRemoteInvocationExecutor.java:38) at org.springframework.remoting.support.RemoteInvocationBasedExporter.invoke(RemoteInvocationBasedExporter.java:76) at org.springframework.remoting.support.RemoteInvocationBasedExporter.invokeAndCreateResult(RemoteInvocationBasedExporter.java:112) at org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter.handleRequest(HttpInvokerServiceExporter.java:117) at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:857) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:792) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:475) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:440) at javax.servlet.http.HttpServlet.service(HttpServlet.java:760) at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:358) at org.mortbay.jetty.servlet.WebApplicationHandler.dispatch(WebApplicationHandler.java:294) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:567) at org.mortbay.http.HttpContext.handle(HttpContext.java:1807) at org.mortbay.jetty.servlet.WebApplicationContext.handle(WebApplicationContext.java:525) at org.mortbay.http.HttpContext.handle(HttpContext.java:1757) at org.mortbay.http.HttpServer.service(HttpServer.java:879) at org.mortbay.http.HttpConnection.service(HttpConnection.java:790) at org.mortbay.http.HttpConnection.handleNext(HttpConnection.java:961) at org.mortbay.http.HttpConnection.handle(HttpConnection.java:807) at org.mortbay.http.SocketListener.handleConnection(SocketListener.java:197) at org.mortbay.util.ThreadedServer.handle(ThreadedServer.java:276) at org.mortbay.util.ThreadPool$PoolThread.run(ThreadPool.java:511)  The new version of the SchedulerFactoryBean class is calling the method setJobFactory() on the remote scheduler which is not supported operation.  Since then I can't upgrade the application to Spring 2.0.6 without a fix, otherwise I'll stick  the 1.2.8 release and I need to upgrade to 2.0.6.  Thank you.  Regards,  Robert  public class RemoteScheduler implements Scheduler { ....      public void setJobFactory(JobFactory factory) throws SchedulerException {         throw new SchedulerException(                 ""Operation not supported for remote schedulers."",                 SchedulerException.ERR_UNSUPPORTED_FUNCTION_IN_THIS_CONFIGURATION);     }  Here are some of our component FYI  applicationContext-scheduling.xml                     	     		file:///${com.wasmonitor.homeDir}/properties/quartz/collectors/os-client-quartz.properties     	     	     		false     	       os-client-quartz.properties:  org.quartz.scheduler.instanceName = OSCollectorScheduler org.quartz.scheduler.rmi.proxy = true org.quartz.scheduler.rmi.registryHost = localhost org.quartz.scheduler.rmi.registryPort = 1099  class SchedulerFactoryBean (version 1.2.8):      // Get Scheduler instance from SchedulerFactory.     try {          this.scheduler = createScheduler(schedulerFactory, this.schedulerName);     }  class SchedulerFactoryBean (version 2.0.6):      // Get Scheduler instance from SchedulerFactory.     try {          this.scheduler = createScheduler(schedulerFactory, this.schedulerName);          if (this.jobFactory != null) {               if (this.jobFactory instanceof SchedulerContextAware) {                    ((SchedulerContextAware) this.jobFactory).setSchedulerContext(this.scheduler.getContext());               }               this.scheduler.setJobFactory(this.jobFactory);","closed","in: core,","spring-projects-issues","2007-07-20T02:47:11Z","2012-06-19T03:51:17Z"
"","8523","Maven2 Metadata our of date for all Spring projects [SPR-3843]","**[Robert Elliot](https://jira.spring.io/secure/ViewProfile.jspa?name=mahoney)** opened **[SPR-3843](https://jira.spring.io/browse/SPR-3843?redirect=false)** and commented  The Maven2 metadata for all the spring projects (e.g. http://repo1.maven.org/maven2/org/springframework/spring-context/maven-metadata.xml) is out of date - the last version listed is 2.0-m4.  The practical result is that if you declare a dependency as follows: \ \org.springframework\ \spring-context\ \[2.0,3)\ \ which says your app will compile & run against any version of spring-context greater or equal to 2.0 and less than 3.0, Maven 2 refuses to build claiming that there is no version that matches that pattern, because the latest version in the metadata is only a milestone build, not a release build.  This forces you to specify a precise version in the POM, which is undesirable when writing a utility jar, causing transitive dependency issues.  Not sure whether this is an oversight on behalf of the Spring team, the Maven2 team or a bug in the way that new Spring builds get published to the m2 repository, but I thought I'd raise it here first.   ---  **Affects:** 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6","closed","in: core,","spring-projects-issues","2007-09-04T06:36:42Z","2012-06-19T03:47:27Z"
"","7987","Allow registration of NotificationListeners using bean name rather than ObjectName [SPR-3302]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-3302](https://jira.spring.io/browse/SPR-3302?redirect=false)** and commented  Allow NotificationListeners to be registered using the bean name so that dynamically-generated or environment-modified ObjectNames can be picked up automatically.  Rob  ---  **Issue Links:** - #8318 Document registration of NotificationListeners using bean name rather than ObjectName. (_**""is depended on by""**_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-03-25T23:51:57Z","2019-01-11T18:14:43Z"
"","8373","Create a way of logging what actual ""used"" parameter values are [SPR-3692]","**[Rob Butler](https://jira.spring.io/secure/ViewProfile.jspa?name=crodster2k)** opened **[SPR-3692](https://jira.spring.io/browse/SPR-3692?redirect=false)** and commented  Spring has a number of supplied property configurers (PropertyOverrideConfigurer, PropertyPlaceholderConfigurer) and supports custom BeanFactoryPostProcessors too.  This makes it very easy to create flexible configurations, that can support hierarchal inheritance (global -> environmental -> machine) or other patterns.  Unfortunately, this makes it difficult to determine what the actual used property value is.  Work arounds are possible by having each setter log what the passed value is, but then it is necessary to search through the log file for each parameter.  I'd like the ability to have all the property files merged into their final representation (where all hierarchal overrides, etc have all been done) and then log all the key-value pairs in one location preferable near the start of the applications log output.  For example, say we have 3 config files, global, environmental (for int, qa, production), and machine-specific.  global.properties value1=a value2=b value3=c value4=d  environmental.properties value2=f value3=g  machine-specific.properties value3=h value4=i  The final ""merged"" output to the log file should be: --- Property values --- value1=a value2=f value3=h value4=i   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-07-16T08:46:25Z","2012-06-19T09:37:25Z"
"","8371","Enhance  and  to support loading from an external file and reloading [SPR-3690]","**[Rob Butler](https://jira.spring.io/secure/ViewProfile.jspa?name=crodster2k)** opened **[SPR-3690](https://jira.spring.io/browse/SPR-3690?redirect=false)** and commented  Specifying a short list via CSV from a property file (Related: #8366 http://opensource.atlassian.com/projects/spring/browse/SPR-3685) would be great.  But for long lists it would become rather difficult to maintain the CSV.  If \ supported loading values from an external file (one entry per line) managing long lists would be greatly simplified.  The same holds true for large maps of key/value pairs (one entry per line).  Once these are loaded from external files it becomes feasible and desirable to support reloading these files on some time interval like ReloadableResourceBundleMessageSource.  These enhancements would make implementing anything where values must be reloaded at run-time much simpler.  Some examples, blacklist filters, logging filters, etc.  ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-07-16T02:29:19Z","2019-01-11T18:34:45Z"
"","8366","Enhance  to accept new from-csv or from-array attribute [SPR-3685]","**[Rob Butler](https://jira.spring.io/secure/ViewProfile.jspa?name=crodster2k)** opened **[SPR-3685](https://jira.spring.io/browse/SPR-3685?redirect=false)** and commented  I find myself always wanting to specify lists as CSV's in a property file.  There are a number of rather onerous ways to make this happen, but it should be much simpler.  I expect others need to do this often enough that is should be supported directly within the framework in a simple manner.  You may find another means to the end is better, but this is what I happened to think of:  \  Would parse the CSV string into list entries.  Alternately (or additionally), configuring a StringArrayPropertyEditor along with a from-array attribute on the list tag would allow people to use custom delimiters.  \ \ \ \ \ \ \ \ \ \ \ \   ---  **Affects:** 2.0.5  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-07-13T07:19:43Z","2012-06-19T09:37:27Z"
"","8364","enhancement to org.springframework.beans.propertyeditors.StringArrayPropertyEditor [SPR-3683]","**[Rob Butler](https://jira.spring.io/secure/ViewProfile.jspa?name=crodster2k)** opened **[SPR-3683](https://jira.spring.io/browse/SPR-3683?redirect=false)** and commented  Please add support for null properties similar to StringTrimmerEditor(true) so empty strings will result in null instead of an empty array.  This will make it possible to have empty property values in a property file pass null to setters instead of an empty array.  This is necessary when using some third party code because an empty array is handled differently from a null array.  For example, Mina's SSLContextFactoryBean allows you to set a String[] of enabled cipher suites.  A null String[] results in using the default cipher suites, where an empty String[] results in no cipher suites being enabled.  While making this modification it might be nice to add support for charsToDelete, just like StringTrimmerEditor has.  This would allow line-breaks between long sequences of values.  Thanks!   ---  **Affects:** 2.0.5  **Attachments:** - [StringArrayPropertyEditor.java](https://jira.spring.io/secure/attachment/12717/StringArrayPropertyEditor.java) (_5.06 kB_) - [StringArrayPropertyEditorTests.java](https://jira.spring.io/secure/attachment/12718/StringArrayPropertyEditorTests.java) (_3.13 kB_)","closed","type: enhancement,","spring-projects-issues","2007-07-12T04:40:20Z","2012-06-19T03:50:27Z"
"","8837","Corner-case breakage in @Autowired and 'resolvable dependencies' (?) [SPR-4159]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-4159](https://jira.spring.io/browse/SPR-4159?redirect=false)** and commented  Hi  Yeah, busy day on JIRA for me today :) Haha. Anyways, I think that the use of `@Autowired` and the dependency injection of 'resolvable dependencies' is broken in the following corner-case.  Consider the following test fixture. (Import statements elided for clarity.)      @RunWith(SpringJUnit4ClassRunner.class)     @ContextConfiguration     public final class BrokenFreeDependenciesFixture {              @Autowired         private ApplicationContext context; //","closed","in: core,","spring-projects-issues","2007-11-22T21:54:19Z","2012-06-19T03:47:17Z"
"","8836","Documentation: tighten up (Javadoc) contract for 'ContextLoader.loadContext(..)' method [SPR-4158]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-4158](https://jira.spring.io/browse/SPR-4158?redirect=false)** and commented  The Javadoc for the 'loadContext(..)' method of the 'org.springframework.test.context.ContextLoader' class states that:  'Loads a new ApplicationContext based on the supplied locations, configures the context, and finally returns the context, potentially refreshed.'  However, my testing of the test framework indicates that the context **must** be refresh()ed in this method, otherwise nothing happens (Spring-wise) in the test fixture. (The AbstractContextLoader implementation does call 'refresh()'.) The 'fix' (if you agree that a fix is required) is to either mandate that the context **must** be refresh()ed in this method (by changing the Javadoc), or to change the code that consumes the context to always call refresh() on it (which may break some stuff because beans might then be initialised twice).  Cheers Rick   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-22T21:48:46Z","2012-06-19T03:46:44Z"
"","8835","Documentation: add explicit mention of 'free dependency candidates' when using @Autowired [SPR-4157]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-4157](https://jira.spring.io/browse/SPR-4157?redirect=false)** and commented  The documentation would benefit from some explicit mention of the fact that certain dependencies can be autowired 'for free' (as it were) when using the new classpath scanning for managed components functionality in Spring 2.5.  By way of an example, if I wanted to dependency inject a reference to the Spring ApplicationContext itself, I don't have to use ApplicationContextAware; rather I can just do this:  public class FooService {      @Autowired     private ApplicationContext aplicationContext;  }  This also holds true for the BeanFactory, ResourceLoader, and ApplicationEventPublisher types. (c.f. AbstractApplicationContext.prepareBeanFactory(..))  I know you guys know about this :) but I couldn't find any explicit mention of it in the reference documentation or Javadocs, hence this JIRA issue. Is this an undocumented 'feature' because it isn't meant to be used? Or - darn - is it in the docs and I've missed it :(  Cheers Rick   ---  **Affects:** 2.5 final","closed","type: documentation,","spring-projects-issues","2007-11-22T21:47:57Z","2012-06-19T03:46:46Z"
"","8834","Documentation: Typo in 'Section 3.7.2. Customizing configuration metadata with BeanFactoryPostProcessors' [SPR-4156]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-4156](https://jira.spring.io/browse/SPR-4156?redirect=false)** and commented  There is a sentence in said section that just ends abruptly. ('BeanFactoryPostProcessors operate on;') Find below a snippet that contains the corrected text.  Cheers Rick      The next extension point that we will look at is the     org.springframework.beans.factory.config.BeanFactoryPostProcessor.     The semantics of this interface are similar to the     BeanPostProcessor, with one major     difference. BeanFactoryPostProcessors operate on the bean     configuration metadata; that is, the Spring IoC container will allow     BeanFactoryPostProcessors to read the configuration     metadata and potentially change it before the     container has actually instantiated any other beans.    ---  **Affects:** 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-11-22T21:46:38Z","2012-06-19T03:46:53Z"
"","8704","SpringJUnit4ClassRunner silently swallows Exceptions [SPR-4025]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-4025](https://jira.spring.io/browse/SPR-4025?redirect=false)** and commented  Hola campers!  SpringJUnit4ClassRunner, createTest() contains this code (sans comment):      final Object testInstance = super.createTest();     try {          getTestContextManager().prepareTestInstance(testInstance);     }     catch (Throwable t) {          new Exception(t); //","closed","in: core,","spring-projects-issues","2007-10-30T20:48:57Z","2012-06-19T03:46:55Z"
"","8378","Doc: Document the bean() PCD. [SPR-3697]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3697](https://jira.spring.io/browse/SPR-3697?redirect=false)** and commented  ---  **Affects:** 2.1 M2  **Issue Links:** - #6583 Support bean(NamePattern) pcd (_**""depends on""**_)","closed","type: documentation,","spring-projects-issues","2007-07-18T10:44:39Z","2019-01-11T18:34:57Z"
"","8351","Perform comprehensive testing of Spring's AspectJ LTW support in app/web server environments. [SPR-3670]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3670](https://jira.spring.io/browse/SPR-3670?redirect=false)** and commented  Comprehensive integration testing of Spring's AspectJ LTW support in app/web server environments needs to be performed.  The various tests that need to be completed before this issue can be marked as 'Done' are:  These are the environments that need to be tested:  GlassFish, Tomcat 5.x, Tomcat 6.x, WebSphere, WebLogic (9,10), JBoss AS, Geronimo (1,2); any more that you can think of.  The tests must include both using spring-agent and using .    ---  **Affects:** 2.1 M2","closed","in: core,","spring-projects-issues","2007-07-08T19:00:39Z","2019-01-11T18:35:38Z"
"","8346","Add support for mixed, fine-grained JDK- and CGLIB-based proxying [SPR-3665]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3665](https://jira.spring.io/browse/SPR-3665?redirect=false)** and commented  See #8142 for details.  Aye Juergen, I know you tagged that issue as 'expected behaviour', and it was turned into a documentation issue that I addressed, but I (and others evidently) think that the proxying 'feature' of all JDK-proxies or all CGLIB-proxies is too coarse. It should be more fine grained than that, hence my raising this as an enhancement request. I'll have a dig into the code later on today and see exactly what is going on :)  See also http://forum.springframework.org/showthread.php?t=41025  ---  **Affects:** 2.1 M2  **Issue Links:** - #8142 Doc: Using  namespace with different 'proxy-target-class' settings for two different objects makes usage of CGLIB proxy only (_**""depends on""**_) - #19084 Consider target-class proxy mode by default - #16804 Bean's type is changed unexpectedly when Spring AOP is used - #13518 DefaultAopProxyFactory: Make configurable, which interfaces are not considered user supplied. To better support code instrumentation from tools like Cobertura.  10 votes, 14 watchers","closed","status: bulk-closed,","spring-projects-issues","2007-07-06T17:46:24Z","2019-01-12T02:38:54Z"
"","8336","Doc: Really flesh out the section entitled '@AspectJ or XML for Spring AOP?' [SPR-3655]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3655](https://jira.spring.io/browse/SPR-3655?redirect=false)** and commented  This is the section to be fleshed out; it doesn't quite lay out the thoughts of the Spring team in a clear yet concise way as regards which style to use.  http://static.springframework.org/spring/docs/2.0.x/reference/aop.html#aop-choosing   ---  **Affects:** 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-07-04T09:45:47Z","2012-06-19T03:50:57Z"
"","8318","Document registration of NotificationListeners using bean name rather than ObjectName. [SPR-3637]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3637](https://jira.spring.io/browse/SPR-3637?redirect=false)** and commented  This is the documentation for #7987 .  ---  **Affects:** 2.1 M2  **Issue Links:** - #7987 Allow registration of NotificationListeners using bean name rather than ObjectName (_**""depends on""**_)","closed","type: documentation,","spring-projects-issues","2007-07-01T02:31:10Z","2019-01-11T18:33:48Z"
"","8305","Document Hibernate Extended persistence Context and @Repository usage in the Hibernate chapter. [SPR-3623]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3623](https://jira.spring.io/browse/SPR-3623?redirect=false)** and commented  In response to a comment in this blog post...  http://blog.interface21.com/main/2007/06/26/so-should-you-still-use-springs-hibernatetemplate-andor-jpatemplate/   ---  **Affects:** 2.1 M2  **Issue Links:** - [SPRNET-883](https://jira.spring.io/browse/SPRNET-883) Add support for translation of exceptions using PersistenceExceptionTranslationInterceptor.","closed","status: declined,","spring-projects-issues","2007-06-26T17:12:22Z","2015-09-22T18:20:31Z"
"","8299","Document the  namespace in the XSD chapter of the Spring reference documentation. [SPR-3617]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3617](https://jira.spring.io/browse/SPR-3617?redirect=false)** and commented   ---  **Affects:** 2.1 M2","closed","type: documentation,","spring-projects-issues","2007-06-25T03:03:52Z","2012-06-19T03:51:02Z"
"","8276","Add  to create groups of radio buttons.  [SPR-3594]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3594](https://jira.spring.io/browse/SPR-3594?redirect=false)** and commented  Originally proposed in #8072 , I have created a distinct other JIRA issue to track it.  Not quite sure I see the value add here, but at least there is now a visible issue to track votes and suchlike.  ---  No further details from [SPR-3594](https://jira.spring.io/browse/SPR-3594?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-06-15T23:02:18Z","2019-01-11T19:09:47Z"
"","8266","Create single page version of the Spring Reference Documentation and punt it onto the main Spring website. [SPR-3584]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3584](https://jira.spring.io/browse/SPR-3584?redirect=false)** and commented  It is easier to search a single page document.   ---  **Affects:** 2.1 M2  1 votes, 0 watchers","closed","type: documentation,","spring-projects-issues","2007-06-13T22:42:44Z","2012-06-19T03:50:58Z"
"","8047","Provide comprehensive I18N support for the Spring form tag library. [SPR-3363]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-3363](https://jira.spring.io/browse/SPR-3363?redirect=false)** and commented  ---  **Affects:** 2.0.4  **Issue Links:** - #7201 form:select does not provide I18N capabilities (_**""depends on""**_) - #7348 form:options tag does not support i18n (_**""depends on""**_) - #7255  should have MessageSource support (_**""depends on""**_)  19 votes, 17 watchers","closed","status: bulk-closed,","spring-projects-issues","2007-04-11T18:46:43Z","2019-01-12T03:51:07Z"
"","8752","mvc-convention showcase sample does not compile [SPR-4074]","**[Richard Midwinter](https://jira.spring.io/secure/ViewProfile.jspa?name=cs02rm0)** opened **[SPR-4074](https://jira.spring.io/browse/SPR-4074?redirect=false)** and commented  The mvc-convention showcase example does not compile out of the box, but it does do if you add the spring-webmvc.jar to the classpath. The following can be added at line 34 of the build.xml file:  \ \ \ Trivial to fix but frustrating for people new to Spring.   ---  **Affects:** 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-11-08T20:18:13Z","2012-06-19T03:47:02Z"
"","8210","Improvement to PagedListHolder [SPR-3527]","**[Richard Fearn](https://jira.spring.io/secure/ViewProfile.jspa?name=richardfearn)** opened **[SPR-3527](https://jira.spring.io/browse/SPR-3527?redirect=false)** and commented  In PagedListHolder, the getLastElementOnPage() and getPageCount() methods both call getSource().size().  These methods should use getNrOfElements() instead.   ---  **Affects:** 2.0.5, 2.1 M1  **Attachments:** - [PagedListHolder-getNrOfElements-patch.txt](https://jira.spring.io/secure/attachment/12631/PagedListHolder-getNrOfElements-patch.txt) (_1.16 kB_)","closed","type: enhancement,","spring-projects-issues","2007-05-27T03:32:24Z","2012-06-19T03:50:30Z"
"","8343","SingleConnectionFactory should set the supplied clientID in the first method call to the shared Connection to avoid IllegalStateException from jms providers [SPR-3662]","**[Richard Bramworth](https://jira.spring.io/secure/ViewProfile.jspa?name=rbramworth)** opened **[SPR-3662](https://jira.spring.io/browse/SPR-3662?redirect=false)** and commented  I get this Exception thrown by EMS JMS provider when I attempt to set a clientID on a SingleConnectionFactory.  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'blah' defined in class path resource [config/spring/core/jms.spring.xml]: Invocation of init method failed; nested exception is org.springframework.jms.IllegalStateException: Can not change client ID; nested exception is javax.jms.IllegalStateException: Can not change client ID Caused by: org.springframework.jms.IllegalStateException: Can not change client ID; nested exception is javax.jms.IllegalStateException: Can not change client ID Caused by: javax.jms.IllegalStateException: Can not change client ID at com.tibco.tibjms.TibjmsConnection.setClientID(TibjmsConnection.java:2061) at org.springframework.jms.connection.SingleConnectionFactory.prepareConnection(SingleConnectionFactory.java:330) at org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:281) at org.springframework.jms.connection.SingleConnectionFactory.createConnection(SingleConnectionFactory.java:209) at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:188) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:418) at com.lehman.lonfid.commons.message.DynamicDestinationFactory.afterPropertiesSet(DynamicDestinationFactory.java:43) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1143) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1110) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:431) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:254) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:144) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:281) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:241) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at weblogic.servlet.internal.EventsManager$FireContextListenerAction.run(EventsManager.java:376) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) etc..  From JMS api doc for Connection.setClientID(): If a client sets the client identifier explicitly, it must do so immediately after it creates the connection and before any other action on the connection is taken. After this point, setting the client identifier is a programming error that should throw an IllegalStateException.  SingleConnectionFactory.prepareConnection() sets the ExceptionListeners on the connection before calling the setClientID() causing EMS to correctly throw this exception. Moving the setClientID() before the setExceptionListener() fixes this problem.    ---  **Affects:** 2.0.3","closed","type: bug,","spring-projects-issues","2007-07-06T02:44:46Z","2012-06-19T03:50:14Z"
"","7969","PetPortlet sample from Spring-Framework 2.0.3 needs to include the log4j.jar in the final war file [SPR-3284]","**[Rene Androsch](https://jira.spring.io/secure/ViewProfile.jspa?name=artmotion)** opened **[SPR-3284](https://jira.spring.io/browse/SPR-3284?redirect=false)** and commented  By running warfile.bat in the petportlets sample directory the final war file misses the log4j.jar files.  Tested the resulting portlet agains Liferay 4.2.1 on Tomcat - console shows the missing classes. Rebuild the war by including the log4j.jr from the spring dependencies and resolved this issue.   ---  **Affects:** 2.0.3  **Attachments:** - [build.xml](https://jira.spring.io/secure/attachment/12481/build.xml) (_4.86 kB_)","closed","type: enhancement,","spring-projects-issues","2007-03-22T02:14:18Z","2012-06-19T03:50:02Z"
"","8753","make AbstractController.handleRequest non-final [SPR-4075]","**[Renaud Choné](https://jira.spring.io/secure/ViewProfile.jspa?name=rchone)** opened **[SPR-4075](https://jira.spring.io/browse/SPR-4075?redirect=false)** and commented  I've tried to make some Web MVC Controllers transactional using Spring AOP with annotations. But the only public method called by the DispatcherServlet is declared final in the AbstractController.  Then I've tried to use declarative transaction management with the  setting. I couldn't manage to make some controllers transactional and some not transactional. It may be possible with complex pointcut expression. But it seems that many people have the same problem.  Removing the static attribute of the handleRequest  method  of AbstractController will allow to overide it and make AOP easy like in this example: `@Transactional`(...)	 public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { super.handleRequest(.....); }   ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2007-11-08T21:45:39Z","2012-06-19T03:47:48Z"
"","8760","Return type of o.s.b.f.x.XmlBeanDefinitionReader#getReader() changed [SPR-4081]","**[Reinhard Pötz](https://jira.spring.io/secure/ViewProfile.jspa?name=reinhard)** opened **[SPR-4081](https://jira.spring.io/browse/SPR-4081?redirect=false)** and commented  The return type of o.s.b.f.x.XmlBeanDefinitionReader#getReader() has changed from  org.springframework.beans.factory.xml.XmlBeanDefinitionReader  to  org.springframework.beans.factory.support.BeanDefinitionReader  If you use this method you have to recompile your code, otherwise you get following exception:  org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from ServletContext resource [/WEB-INF/applicationContext.xml]; nested exception is java.lang.NoSuchMethodError: org.springframework.beans.factory.xml.XmlReaderContext.getReader()Lorg/springframework/beans/factory/xml/XmlBeanDefinitionReader; at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:385) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:313) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:290) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:158) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:124) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:92) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:97) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:411) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:338) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:245) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:188) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45)  Since this change prevents you from just dropping in the new Spring libs into your application, I marked this report as ""blocker"".  BTW, I'm not the only one who run into this problem: See also https://issues.apache.org/jira/browse/XBEAN-88  ---  **Affects:** 2.5 RC1  **Issue Links:** - #8768 Issue with apache xbean when upgrading spring from 2.0 to 2.1-rc or 2.5-rc1 (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2007-11-11T23:29:20Z","2019-01-11T16:27:51Z"
"","8534","event-handling of AbstractApplicationContext might be broken [SPR-3854]","**[Reinhard Mantey](https://jira.spring.io/secure/ViewProfile.jspa?name=django013)** opened **[SPR-3854](https://jira.spring.io/browse/SPR-3854?redirect=false)** and commented  the ""addApplicationListener"" only adds a listener to the member ""applicationListeners"".  When an event gets published, the (private) applicationEventMulticaster is asked to do the job of event-publishing, but it has no idea about the listeners attached to the context. The internal multicaster has no public access, so the AbstractApplicationContext should be fixed.  I got it working by adding this line (right after ""this.applicationListeners.add(listener);""): getApplicationEventMulticaster().addApplicationListener(listener);  I tested it with spring2.1m3 and spring2.1m4 from today.   ---  **Affects:** 2.1 M3","closed","in: core,","spring-projects-issues","2007-09-09T05:33:02Z","2019-01-12T16:39:50Z"
"","8784","Web Flow deserialization problem on Spring 2.5 RC2 - was working on Spring 2.0.7 [SPR-4106]","**[Reiner Kühl](https://jira.spring.io/secure/ViewProfile.jspa?name=reiner.kuehl)** opened **[SPR-4106](https://jira.spring.io/browse/SPR-4106?redirect=false)** and commented  We have va working web flow for Spring 2.0.7. When trying the new 2.5 RCs we find it works only with Spring-2.5RC1 and spring-webmvc-2.0.7.  With Spring-2.5RC1 and spring-webmvc-2.5RC1 we get a complaint about an invalid property (name of property is empty?!)  2007-11-15 14:03:51,616                 ErrorsTag ERROR: Invalid property '' of bean class [de.qvc.vendormgt.web.VendorCommand]: Bean property '' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? org.springframework.beans.NotReadablePropertyException: Invalid property '' of bean class [de.qvc.vendormgt.web.VendorCommand]: Bean property '' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:544) at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:536) at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:78) at org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:337) at org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:118) at org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:171) at org.springframework.web.servlet.tags.form.ErrorsTag.shouldRender(ErrorsTag.java:131) at org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag.writeTagContent(AbstractHtmlElementBodyTag.java:46) at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:90) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:77) at org.apache.jsp.WEB_002dINF.jsp.vendorManagement_jsp._jspService(vendorManagement_jsp.java:161) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:98) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)  With Spring-2.5RC2 and spring-webmvc-2.5RC2 we get a complaint about a NPE while deserializing some webflow:  2007-11-15 14:13:12,831               [vendorMgt] ERROR: Servlet.service() for servlet vendorMgt threw exception java.lang.NullPointerException at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1839) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1738) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1324) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:362) at org.springframework.webflow.engine.impl.FlowExecutionImpl.readExternal(FlowExecutionImpl.java:486) at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:1774) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1736) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1324) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:362) at org.springframework.webflow.execution.repository.continuation.SerializedFlowExecutionContinuation.deserialize(SerializedFlowExecutionContinuation.java:186) at org.springframework.webflow.execution.repository.continuation.SerializedFlowExecutionContinuation.unmarshal(SerializedFlowExecutionContinuation.java:93) at org.springframework.webflow.execution.repository.continuation.ContinuationFlowExecutionRepository.getFlowExecution(ContinuationFlowExecutionRepository.java:149) at org.springframework.webflow.executor.FlowExecutorImpl.refresh(FlowExecutorImpl.java:253) at org.springframework.webflow.executor.support.FlowRequestHandler.handleFlowRequest(FlowRequestHandler.java:117) at org.springframework.webflow.executor.mvc.FlowController.handleRequestInternal(FlowController.java:165) at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153) at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:861) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:795) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:476) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:431)  What`s happening? Why is the behavior so different?  ---  **Affects:** 2.5 RC1, 2.5 RC2  **Issue Links:** - #8783 Spring-webflow  fails when runs on Spring2.5 RC2 (_**""duplicates""**_)","closed","type: bug,","spring-projects-issues","2007-11-14T23:28:09Z","2019-01-11T15:43:18Z"
"","8663","JMSTemplate setDeliveryPersistent(boolean deliveryPersistent)  javadoc incorrect [SPR-3983]","**[Reidar Hörning](https://jira.spring.io/secure/ViewProfile.jspa?name=reidar)** opened **[SPR-3983](https://jira.spring.io/browse/SPR-3983?redirect=false)** and commented  The javadoc of the method tells me:  ""PERSISTENT"" (1) or ""NON_PERSISTENT"" (2)  Relying on  javax.jms.DeliveryMode:  static final int NON_PERSISTENT = 1; static final int PERSISTENT = 2;  It may be confusing especially while using JMSTemplate.setDeliveryMode(int deliveryMode)  Correct me if I am wrong.  Thanks, Reidar   ---  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9cc86a3c809672e09c965e6d659867caa178a1bb, https://github.com/spring-projects/spring-framework/commit/aa1babdfde26a868808f681b018b07cc7aa9ae4b  **Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-10-17T01:44:02Z","2014-01-28T13:07:13Z"
"","7910","ConnectionFactory retrieve from JNDI but never used. [SPR-3224]","**[rayane](https://jira.spring.io/secure/ViewProfile.jspa?name=rayh176)** opened **[SPR-3224](https://jira.spring.io/browse/SPR-3224?redirect=false)** and commented  JmsTemplate does not create a connection instant until there is a request to send a message, However an instance of connection factory is constructed but not used. Well the concept is good, but let assume that the Connection Factory that I retrieve via JNDI existed in the LDAP JMS Provider repository. Let assume the connection factory is used to construct a secure connection that request a User/Password. So, let's consider this scenario at the spring frame work initialization. A connection Factory instance was retrieve from LDAP JMS Provider repository but never used. After a week, the jms provider administrator decided to change the security details of that particular connection Factory. Let assume that now we ready to send a message so our application via spring try to establish the connection. Bingo Connection never works. In my opinion the jmstemplate should either 1- not retrieve the connection factory from LDAP {the cost of constructing the connection is as much expensive as doing look up to the jndi repository so I do see what you saving by just retrieving the object from the jndi} 2- Establish a connection, even knowing we are not ready to send messages   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-03-01T09:02:24Z","2012-06-18T12:45:04Z"
"","8188","MBeanExporter should not throw IllegalArgumentException after autodetect [SPR-3505]","**[Ray Krueger](https://jira.spring.io/secure/ViewProfile.jspa?name=raykrueger)** opened **[SPR-3505](https://jira.spring.io/browse/SPR-3505?redirect=false)** and commented  When autodetect is enabled the MBeanExporter should not throw an IllegalArgumentException if there are no beans discovered. It doesn't make sense.  For example we include certain modules depending on configuration. Some of those modules have ManagedResource annotated classes, some do not.   ---  **Affects:** 2.0.1","closed","type: enhancement,","spring-projects-issues","2007-05-21T03:30:40Z","2012-06-19T03:50:28Z"
"","8184","Doc: DefaultListableBeanFactory.getBeanNamesForType(null) does not include nested bean definitions [SPR-3501]","**[Ray Krueger](https://jira.spring.io/secure/ViewProfile.jspa?name=raykrueger)** opened **[SPR-3501](https://jira.spring.io/browse/SPR-3501?redirect=false)** and commented  DefaultListableBeanFactory.getBeanNamesForType(null) will not include ""innerBean"" in the example below.  ```xml                      ```    ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2007-05-19T08:04:25Z","2012-06-19T03:50:09Z"
"","8183","ManagedResource Annotation is not annoted as Inherited [SPR-3500]","**[Ray Krueger](https://jira.spring.io/secure/ViewProfile.jspa?name=raykrueger)** opened **[SPR-3500](https://jira.spring.io/browse/SPR-3500?redirect=false)** and commented  I was attempting to annotate an Abstract class as `@ManagedResource` so that all the subclasses could be auto-discovered. Unfortunately the `@ManagedResource` annotation itself is not annotated as `@Inherited`.   ---  **Affects:** 2.0.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/95a7ec6587aa1eee78de4f92b17d17c8d5fb280a  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-05-19T06:58:46Z","2012-06-19T03:50:21Z"
"","8362","when redirecting using RedirectView, form tag reencodes the query string of the redirected page. [SPR-3681]","**[Ravith Botejue](https://jira.spring.io/secure/ViewProfile.jspa?name=ravithb)** opened **[SPR-3681](https://jira.spring.io/browse/SPR-3681?redirect=false)** and commented  When I redirect to a page with a form tag.,  the form tag re encodes the query string which is already encoded by the redirect view,  the new form doesnt get submitted because of the malformed query string.  eg.  I redirect to page1.htm. with 2 params.  RedirectView rv = new RedirectView(""page1.htm"",true); paramMap.put(""param1"",""test1""); paramMap.put(""param2"",""test2""); paramMap.put(""param3"",""test3""); return new ModelAndView(rv,paramMap);  the page1 jsp has a form tag.  the form tag creates the action url as  \  where it should be  \  Note ** This happens only when a request is redirected to a page with a form tag in it.  ---  **Affects:** 2.0.5  **Issue Links:** - #7833 form:form tag doesn't encode xml entities in action attribute","closed","in: web,","spring-projects-issues","2007-07-11T13:32:08Z","2019-01-11T18:35:17Z"
"","7896","Using HibernateInterceptor leads to IllegalStateException in case of a transaction timeout inside Weblogic  [SPR-3210]","**[ravindra chandak](https://jira.spring.io/secure/ViewProfile.jspa?name=rchandak)** opened **[SPR-3210](https://jira.spring.io/browse/SPR-3210?redirect=false)** and commented  Issue: HibernateInterceptor throws the following exception when there is a transaction timeout inside Weblogic: java.lang.IllegalStateException: Already value [org.springframework.orm.hibernate3.SessionHolder@9 f7af3c] for key [org.hibernate.impl.SessionFactoryImpl@ae6e03a] bound to thread [ExecuteThread: '15' for queue: 'weblogic.kernel.Default'] at org.springframework.transaction.support.Transactio nSynchronizationManager.bindResource(Ljava.lang.Ob ject;Ljava.lang.ObjectV(TransactionSynchronizati onManager.java:156) at org.springframework.orm.hibernate3.HibernateInterc eptor.invoke(Lorg.aopalliance.intercept.MethodInvo cationLjava.lang.Object;(HibernateInterceptor.ja va:90) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed()Ljava.lang.Object;(ReflectiveM ethodInvocation.java:144) at org.springframework.aop.framework.JdkDynamicAopPro xy.invoke(Ljava.lang.Object;Ljava.lang.reflect.Met hod;[Ljava.lang.ObjectLjava.lang.Object;(JdkDynamicAo pProxy.java:174)  Cause: In a case of a transaction timeout, Weblogic executes the rollback and transaction synchronization callbacks on a seperate thread. This causes an empty SessionHolder object to still be associated with the old thread. This in itself is not a problem and I see it is well documented in Spring's SpringSessionSynchronization class(method: beforeCompletion).  However, the problem is when the same thread is used for a new request in a non-transactional scope(EJB method with transaction NotSupported). When this happens,from what I understood by stepping through the SessionFactoryUtils.doGetSession method, Spring does not reuse the old SessionHolder attached to this reused thread. In other words, it does not put the new Session created into the already existing SessionHolder. This causes the SessionFactoryUtils.isSessionTransactional method to return false. Thus, HibernateInterceptor now tries to create a new Session Holder, and in the process throws the above mentioned exception. This, however would work fine if the new request on this thread, would have started in a scope of a transaction.Then I see SessionFactoryUtils.registerJtaSynchronization puts this new Session in the old SessionHolder.  Proposed Solution: Change the SessionFactoryUtils.doGetSession method to put the new Session in the old SessionHolder(if it exists), regardless of a request being in a JTA transaction or not.    ---  **Affects:** 1.2.5  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2007-02-27T01:48:03Z","2012-06-19T03:50:05Z"
"","8110","form:errors and form:option JSP tags don't render in FreeMarker templates [SPR-3427]","**[Ramsey Lubbat](https://jira.spring.io/secure/ViewProfile.jspa?name=ramseylubbat)** opened **[SPR-3427](https://jira.spring.io/browse/SPR-3427?redirect=false)** and commented  When using FreeMarker's capability to use JSP taglibs in FreeMarker templates, two of the Spring form tags, errors and option, do not render their output.  To reproduce, configure your SpringMVC application for FreeMarker views. The standard documentation should help with this.  Then, in one of your FreeMarker templates, assign the Spring form taglibs and try to use the errors or option tag:      \\   Make sure a form validation error occurs for the value you submit. When the page is displayed again, with the form errors, no error message is rendered at all. By using the debugger, we see that the tag is doing the correct thing (looking up the error message and outputting a span element with the resolved message), but the output never makes it to the response. You see no error message on the page.  We think that these two tags do not render because they extend AbstractHtmlElementBodyTag and the TagWriter usage interacts poorly with FreeMarker's TagTransformModel and Environment classes. Sorry for the lack of a more explicit explanation, but essentially, the output writer that TagWriter is constructed with gets swapped around by FreeMarker, so the output from the tags never gets written to the response.  To solve this problem, one of our engineers came up with the solution to extend ErrorsTag and OptionTag, overloading the renderDefaultContent() method to call the base class method with a new TagWriter constructed with pageContext.getOut(). I'll attach our fix.  ---  **Affects:** 2.0.3, 2.0.4  **Attachments:** - [ErrorsTag.java](https://jira.spring.io/secure/attachment/12573/ErrorsTag.java) (_756 bytes_)  **Issue Links:** - #7888 form:errors tag does not render in freemarker view (_**""is duplicated by""**_) - #8634 JSP taglib with FreeMarker doesn't print errors (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2007-04-27T05:14:22Z","2019-01-11T18:00:09Z"
"","8101","NullPointerException when using SiteMesh applyDecorator tag in FreeMarker template [SPR-3418]","**[Ramsey Lubbat](https://jira.spring.io/secure/ViewProfile.jspa?name=ramseylubbat)** opened **[SPR-3418](https://jira.spring.io/browse/SPR-3418?redirect=false)** and commented  If you try to use the SiteMesh applyDecorator JSP tag in a FreeMarker template, you will get a NullPointerException.  To reproduce, configure your SpringMVC application for FreeMarker views and SiteMesh decoration. The standard documentation should help with this.  Then, in one of your FreeMarker templates, assign the SiteMesh page taglibs and try to use the applyDecorator tag:     The problem is that Spring's FreeMarkerView class creates a FreeMarker ServletContextHashModel object with a servlet that has no ServletConfig. The fix needs to be applied to the FreeMarkerView.initApplicationContext() method by calling the init() method on the GenericServletAdapter object and passing it a ServletConfig implementation.   ---  **Affects:** 2.0.3, 2.0.4  **Attachments:** - [FreeMarkerView.java](https://jira.spring.io/secure/attachment/12570/FreeMarkerView.java) (_14.61 kB_)","closed","type: bug,","spring-projects-issues","2007-04-26T05:11:00Z","2012-06-19T03:51:00Z"
"","8656","Test spring-agent.jar based Spring native LTW on remaining platforms [SPR-3976]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-3976](https://jira.spring.io/browse/SPR-3976?redirect=false)** and commented  The -javaagent:path/to/spring-agent is expected to work on all web and application servers that support Java 5+. Currently, as mentioned in #8351, it has been verified on Tomcat, OC4J, Glassfish, and standalone environment. Need to test (and automate to the extent possible) on all major platforms.  Specific platforms to test: GlassFish, Tomcat 5.x, Tomcat 6.x, WebSphere, WebLogic (9,10), JBoss AS, Geronimo (1,2)  ---  **Issue Links:** - #7748 Improve doc coverage of LTW with special regard to SpringAOP and AspectJ together in the same application (_**""is depended on by""**_)  3 votes, 5 watchers","closed","in: core,","spring-projects-issues","2007-10-15T02:27:57Z","2019-01-11T21:11:37Z"
"","8655","Make Spring-native LTW work with Weblogic [SPR-3975]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-3975](https://jira.spring.io/browse/SPR-3975?redirect=false)** and commented  Similar to #8653, ensure that Spring native LTW works without needing -javaagent:/path/to/spring-agent.jar  ---  **Issue Links:** - #7748 Improve doc coverage of LTW with special regard to SpringAOP and AspectJ together in the same application (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2007-10-15T02:23:02Z","2019-01-11T21:11:41Z"
"","8654","Make Spring-native LTW work with Glassfish [SPR-3974]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-3974](https://jira.spring.io/browse/SPR-3974?redirect=false)** and commented  This bug is similar to #8653. However, there are two components here: 1. Ensure that the functionality works when Glassfish's classloader is involved. 2. Ensure that the functionality works when Tomcat's classloader is involved (currently it behaves in identical manner to #8653).  ---  **Issue Links:** - #7748 Improve doc coverage of LTW with special regard to SpringAOP and AspectJ together in the same application (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2007-10-15T02:20:57Z","2019-01-11T21:11:21Z"
"","8653","Spring-native LTW does not work with TomcatInstrumentableClassLoader [SPR-3973]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-3973](https://jira.spring.io/browse/SPR-3973?redirect=false)** and commented  Currently, Spring native LTW (with  ) works with only -javaagent:path/to/spring-agent jar. However, TomcatInstrumentableClassLoader as a classloader provides a better way that doesn't require modifying the launch script. Currently, this setup doesn't work.  ---  **Issue Links:** - #7748 Improve doc coverage of LTW with special regard to SpringAOP and AspectJ together in the same application (_**""is depended on by""**_)  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2007-10-15T02:17:03Z","2019-01-11T21:11:27Z"
"","8370","Clarify semantics of bean() PCD with user-invisible beans [SPR-3689]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-3689](https://jira.spring.io/browse/SPR-3689?redirect=false)** and commented  Currently, the bean() PCD will match user-invisible beans (such as those created by a custom namespace). This may be confusing to users as such beans (and their names) are not visible to users and matching these beans may be surprising.  See http://opensource.atlassian.com/projects/spring/browse/SPR-1890#action_24675 for more details.   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-07-16T01:42:49Z","2012-06-19T03:50:53Z"
"","8369","The bean() PCD doesn't work when used in reference pointcut in @AspectJ aspect [SPR-3688]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-3688](https://jira.spring.io/browse/SPR-3688?redirect=false)** and commented  When used in a reference pointcut the bean() PCD doesn't work. AspectJ (specifically, PatternParser.parseReferencePointcut() called by parseSinglePointcut()) treats bean() is a similar way to this(), target(), `@target`() etc. and tries to validate the argument to bean() as a type. Obviously, it can't find a matching type and ends up throwing an exception.  The test code for the bug is in BeanNamePointcutAtAspectTests (currently commented out).   ---  **Affects:** 2.1 M3","closed","in: core,","spring-projects-issues","2007-07-16T01:36:08Z","2012-06-19T03:50:14Z"
"","8618","Using OpenJPA, without LoadTimeWeaver when entities are enhanced at build time [SPR-3938]","**[Prashant Bhat](https://jira.spring.io/secure/ViewProfile.jspa?name=prashantbhat)** opened **[SPR-3938](https://jira.spring.io/browse/SPR-3938?redirect=false)** and commented  PS. this thread: http://forum.springframework.org/showthread.php?t=44299  I'm using openjpa-1.1.0-SNAPSHOT-r420667:574398 and spring 2.0.6 in a desktop application and my emf configuration looks like this: \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  As the block comment here says: http://static.springframework.org/spring/docs/2.0.x/reference/orm.html#orm-jpa-setup-lcemfb  ""If your provider does not require an agent or you have other alternatives (for example applying enhancements at build time through a custom compiler or an ant task) the load time weaver should not be used.""  So I'm not using the LoadTimeWeaver, but it  shows up a warning message.  One possible solution is to just silently consume the addTransformer() call( as Patrick suggested) if no LoadTimeWeaver is specified assuming entities are enhanced at build time.  // Prashant   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-09-28T03:50:29Z","2012-06-18T06:26:59Z"
"","8250","JaxRpcPortProxyFactoryBean encapsulates subclasses of RemoteException in a RemoteAccessException even if it is not necessary [SPR-3567]","**[Pierre-Vincent ARNAUD](https://jira.spring.io/secure/ViewProfile.jspa?name=pva)** opened **[SPR-3567](https://jira.spring.io/browse/SPR-3567?redirect=false)** and commented  Let's have a simple example.  First let's have an exception that is a subclass of RemoteException.  public class MyException extends RemoteException { }  Then let's have a service a method of which can throw this exception. Let's assume this service is exposed on a web server as a web service.  public interface MyService { public void test() throws MyException; }  public class MyServiceImpl implements MyService { public void test() throws MyException { throw new MyException(); } }  For the purpose of this issue, the test() method will always throw a MyException.  We can try to call this web service using Spring proxies in this way:  \ \ \ \ \ \ \  When I call the test() method on the proxy bean ""myService"", a RemoteAccessException is thrown. Actually this is due to the convertRmiAccessException() method of the RmiClientInterceptorUtils class. According to its javadoc, it converts RemoteExceptions that happens into RemoteAccessExceptions if the method signature doesn't support RemoteException.  Nevertheless, in order to check the invoked method support RemoteException, this conversion method just checks if RemoteException belongs to the list of exceptions thrown by the invoked method.  This could be improved by checking that there is at least one of the thrown exceptions is either the same or a super-class of the ""RemoteException"" (which can also be an instance of a subclass of RemoteException).   ---  **Affects:** 2.0.1  **Attachments:** - [RmiClientInterceptorUtils.java](https://jira.spring.io/secure/attachment/12653/RmiClientInterceptorUtils.java) (_9.15 kB_)","closed","type: enhancement,","spring-projects-issues","2007-06-08T01:09:13Z","2012-06-19T03:50:22Z"
"","8180","PathMatchingResourcePatternResolver not closing references to jar files [SPR-3497]","**[peter](https://jira.spring.io/secure/ViewProfile.jspa?name=mrpunkin)** opened **[SPR-3497](https://jira.spring.io/browse/SPR-3497?redirect=false)** and commented  org.springframework.core.io.support.PathMatchingResourcePatternResolver does not close reference to jar files. As a result we can not redeploy our EARs w/o restarting the JVM.  We were able to find the problem in PathMatchingResourcePatternResolver#doFindPathMatchingJarResources(Resource, String). The method is opening jar files but does not close them.  We added a try{}finally{} block that closes jar files and verified the fix.      protected Set doFindPathMatchingJarResources(Resource rootDirResource, String subPattern) throws IOException {     	URLConnection con = rootDirResource.getURL().openConnection();     	JarFile jarFile = null;     	String jarFileUrl = null;     	String rootEntryPath = null;     	Set result = null;     	     	try {     	if (con instanceof JarURLConnection) {     		// Should usually be the case for traditional JAR files.     		JarURLConnection jarCon = (JarURLConnection) con;     		jarFile = jarCon.getJarFile();     		jarFileUrl = jarCon.getJarFileURL().toExternalForm();     		JarEntry jarEntry = jarCon.getJarEntry();     		rootEntryPath = (jarEntry != null ? jarEntry.getName() : """");     	}     	else {     		// No JarURLConnection -> need to resort to URL file parsing.     		// We'll assume URLs of the format ""jar:path!/entry"", with the protocol     		// being arbitrary as long as following the entry format.     		// We'll also handle paths with and without leading ""file:"" prefix.     		String urlFile = rootDirResource.getURL().getFile();     		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR);     		jarFileUrl = urlFile.substring(0, separatorIndex);     		if (jarFileUrl.startsWith(ResourceUtils.FILE_URL_PREFIX)) {     			jarFileUrl = jarFileUrl.substring(ResourceUtils.FILE_URL_PREFIX.length());     		}     		jarFile = new JarFile(jarFileUrl);     		jarFileUrl = ResourceUtils.FILE_URL_PREFIX + jarFileUrl;     		rootEntryPath = urlFile.substring(separatorIndex + JAR_URL_SEPARATOR.length());     	}          	if (logger.isDebugEnabled()) {     		logger.debug(""Looking for matching resources in jar file ["" + jarFileUrl + ""]"");     	}     	if (!"""".equals(rootEntryPath) && !rootEntryPath.endsWith(""/"")) {     		// Root entry path must end with slash to allow for proper matching.     		// The Sun JRE does not return a slash here, but BEA JRockit does.     		rootEntryPath = rootEntryPath + ""/"";     	}     	result = CollectionFactory.createLinkedSetIfPossible(8);     	for (Enumeration entries = jarFile.entries(); entries.hasMoreElements();) {     		JarEntry entry = (JarEntry) entries.nextElement();     		String entryPath = entry.getName();     		if (entryPath.startsWith(rootEntryPath)) {     			String relativePath = entryPath.substring(rootEntryPath.length());     			if (getPathMatcher().match(subPattern, relativePath)) {     				result.add(rootDirResource.createRelative(relativePath));     			}     		}     	}     	}     	finally {     		jarFile.close();     	}     	return result;     }    ---  **Affects:** 1.2.9","closed","in: core,","spring-projects-issues","2007-05-18T07:59:42Z","2012-06-19T03:50:21Z"
"","8848","Please add a website redirect for broken link to Javadoc [SPR-4170]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-4170](https://jira.spring.io/browse/SPR-4170?redirect=false)** and commented  As posted here: http://forum.springframework.org/showthread.php?t=46625  Searching google for ""spring javadoc"" (without quotes) provides the first link as ""http://www.springframework.org/docs/api/index.html"", which results in page not found. Is it possible to add a redirect to the correct, latest javadoc (or the documentation page) so that users coming through this link won't be lost?  Thanks!   ---  **Affects:** 2.5 final  5 votes, 0 watchers","closed","status: declined,","spring-projects-issues","2007-11-27T00:43:19Z","2008-03-06T01:20:11Z"
"","8775","Spring 2.5 MVC Step-by-step tutorial should include usage of annotation-based configuration [SPR-4096]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-4096](https://jira.spring.io/browse/SPR-4096?redirect=false)*** and commented  This example (unlike #8773 and #8774) is a little bit more of my opinion. I think there should be an advanced ""MVC step by step"" tutorial covering the use of Spring 2.5 annotation-based controller configuration. I was surprised to see it not mentioned at all in the Spring 2.5 refreshed version of the MVC Step-by-step tutorial, but I would expect that it would be covered at some point in detailed documentation, if the Spring team is in fact interested in advancing annotation-based configuration in favor of the XML-based configuration that has been used since Spring 1.x. I think covering annotation-based MVC configuration in a tutorial format would help newbies who are afraid of all the XML required to set up Spring MVC.  Thanks!  ---  **Affects:** 2.5 RC2  **Issue Links:** - #8773 Spring 2.5 MVC Step-by-step tutorial should include expanded coverage of form tags (_**""is depended on by""**_)  4 votes, 2 watchers","closed","status: declined,","spring-projects-issues","2007-11-13T22:49:28Z","2019-01-11T16:26:13Z"
"","8774","Spring 2.5 MVC Step-by-step tutorial should include coverage of PropertyEditors [SPR-4095]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-4095](https://jira.spring.io/browse/SPR-4095?redirect=false)** and commented  The new 2.5 Spring MVC tutorial should cover a brief example of the use of PropertyEditors -- or an ""advanced"" tutorial should be added. Usage of even simple PropertyEditors (such as one for java.util.Date) causes a lot of confusion about newbies to the framework, and is extremely common.  As mentioned in #8773, I'd be happy to help contribute to this additional documentation.  Thanks!  ---  **Affects:** 2.5 RC2  **Issue Links:** - #8773 Spring 2.5 MVC Step-by-step tutorial should include expanded coverage of form tags  1 votes, 0 watchers","closed","status: declined,","spring-projects-issues","2007-11-13T22:46:57Z","2019-01-11T16:26:16Z"
"","8773","Spring 2.5 MVC Step-by-step tutorial should include expanded coverage of form tags [SPR-4094]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-4094](https://jira.spring.io/browse/SPR-4094?redirect=false)** and commented  First, thank you for the updated Spring MVC Step-by-step tutorial - it's much improved!  I'll be filing a few bugs on a couple other areas I think really should be covered, because there's so many questions about them in the forums, especially by newbies.  The tutorial finally includes coverage for the form taglib. Unfortunately, it doesn't cover two of the more tricky (for newbies) areas: form:select and form:checkbox. It would be wonderful if coverage of these (even a simple example!) could be put into the tutorial. Alternatively, add a separate ""advanced"" tutorial covering how to use the form taglib.  I would be happy to help write (or at least contribute to) the tutorial.  Thanks!  ---  **Affects:** 2.5 RC2  **Issue Links:** - #8775 Spring 2.5 MVC Step-by-step tutorial should include usage of annotation-based configuration (_**""depends on""**_) - #8774 Spring 2.5 MVC Step-by-step tutorial should include coverage of PropertyEditors  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2007-11-13T22:44:53Z","2019-01-11T16:26:48Z"
"","8732","Minor typo in Spring 2.5 JMX documentation [SPR-4053]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-4053](https://jira.spring.io/browse/SPR-4053?redirect=false)** and commented  In table 20.3: ""Table 20.3. Source-Level Metadata Parameters""  Capitalization on the first parameter is wrong - it should be ""objectName"" and not ""ObjectName"".   ---  **Affects:** 2.0.7, 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-11-06T06:20:11Z","2012-06-19T03:46:55Z"
"","8590","Spring ZIP file should include Javadoc for Spring [SPR-3910]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-3910](https://jira.spring.io/browse/SPR-3910?redirect=false)** and commented  The vanilla Spring framework download (not the -with-dependencies.zip) should at the very least include Javadoc for the Spring API. As of Spring 2.0.6, ""spring-framework-2.0.6.zip"" does not include API docs, and users are forced to download the unintuivitely-named ""-with-dependencies.zip"" to get the Javadoc, along with a whole bunch of stuff that they probably _didn't_ want.  Thanks for listening!  ---  **Affects:** 2.0.6  **Issue Links:** - #7590 Offer basic distribution that includes javadoc (_**""duplicates""**_) - #8589 Spring web site should document the difference between the 2 downloads (*2.0.6.zip, and -with-dependencies.zip)","closed","type: enhancement,","spring-projects-issues","2007-09-23T23:19:20Z","2019-01-11T21:10:45Z"
"","8589","Spring web site should document the difference between the 2 downloads (*2.0.6.zip, and -with-dependencies.zip) [SPR-3909]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-3909](https://jira.spring.io/browse/SPR-3909?redirect=false)** and commented  This is a relatively simple request. There's nowhere obvious where the difference between the ""spring-framework-2.0.6.zip"" and ""spring-framework-2.0.6-with-dependencies.zip"" file is documented. For the new user, it's not at all clear which one they should be downloading. Suggested places to document this: - http://www.springframework.org/download - SourceForge release notes - Spring release announcements (e.g. http://www.springframework.org/node/482)  Thanks for listening!  ---  **Affects:** 2.0.6  **Issue Links:** - #8590 Spring ZIP file should include Javadoc for Spring","closed","type: documentation,","spring-projects-issues","2007-09-23T23:17:11Z","2019-01-11T21:10:55Z"
"","8431","RedirectView should not include BindException and command object toString in query parameters [SPR-3750]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-3750](https://jira.spring.io/browse/SPR-3750?redirect=false)** and commented  This comes up quite often in the forums, and I find it pretty strange myself. The default behavior of RedirectView is to serialize every object in the passed model into query parameters for the 302/303 redirect.  Many users utilize RedirectView in onSubmit in the following way: return new ModelAndView(new RedirectView(""/foo/bar.do""),errors.getModel());  This may be generally correct (and is certainly convenient), however the major annoyance is that RedirectView doesn't recognize when parameters appended to the URL are (1) of type java.lang.Object, and (2) simply implement the default java.lang.Object.toString.  Since errors.getModel() will always have an instance of the command object, and an instance of BindException on the model, these objects serialize to the URL with the ugly standard j.l.o.toString representation - which is not useful at all once the redirect occurs.  My request for enhancement would be at the very least for RedirectView to remove objects of type BindException from the URL parameters, and at best for it to recognize objects with the standard j.l.o.toString implementation and not bother serializing those as well.  If the Spring team agrees with this enhancement I would be happy to provide a patch to the base RedirectView.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-08-09T00:07:28Z","2012-06-19T03:50:24Z"
"","8376","Add documentation to Spring MVC/JSP/JSTL integration regarding webapp versions [SPR-3695]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-3695](https://jira.spring.io/browse/SPR-3695?redirect=false)** and commented  A very common issue with new adopters of Spring MVC is confusion over how to get JSTL working in their application server. Although the Spring docs can't possibly cover every application server, since I try to help out newbies on the forums, I've noticed a few common problems/pitfalls that might be worthwhile to document in section 14.2 of the documentation.  The basis for some of this is that for a lot of people, when using Spring MVC, they are also attempting to use JSTL for the first time. So although some of the blame for these common issues falls on Sun, I think it would be worthwhile to cover some of them in the Spring docs, because people ultimately come to the Spring Web forums to get them solved (thinking that they are Spring problems).  Here's a few suggestions, feel free to document some or all of them.  The most common problem is people trying to use JSTL without declaring their web application as a servlet 2.4 (or higher) web app. In compliant application servers (most commonly reported is Tomcat), this will disable JSTL 2.0 evaluation. The documentation should provide an example web.xml snippet illustrating where the webapp version is set, and indicate the minimum required version to get JSTL 2.0 evaluation (a list of app servers supporting this would be nice, too ;) ).  There are many, many threads in the Spring Web forum regarding this confusion. Do a search with the terms ""+jstl +version"". Examples: http://forum.springframework.org/showthread.php?t=35085&highlight=jstl+version http://forum.springframework.org/showthread.php?t=38850&highlight=jstl+version http://forum.springframework.org/showthread.php?t=27858&highlight=jstl+version ... etc.  Another common problem is people being confused over which JSTL taglib declaration to use, and how to reference JSTL within the page.  More documentation on how to set up JSTL with MessageSourceAccessors, along with an example.  I can't think of anything else at the moment, but I'd suggest reviewing some of the recent forum postings for ideas on additional topics. I always found it kind of odd that the documentation for how to use Spring with FreeMarker is more dense than the docs for Spring + JSP/JSTL :)  Part of the problem (I think) is that the only MVC tutorial that's on the web site (step-by-step) is extremely outdated. It would be great if we could put together an example that is as simple, while being updated for Spring 2.x (but that's the topic of another JIRA).  Let me know if I can help at all with this effort.   ---  **Affects:** 2.0.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/89d997a5bcc396d1bf666ccc8d7b11e092e32b75  4 votes, 5 watchers","closed","type: documentation,","spring-projects-issues","2007-07-18T04:07:42Z","2012-06-19T03:50:57Z"
"","8195","Document PropertyEditorRegistrar method of configuring custom PropertyEditors in spring reference [SPR-3512]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-3512](https://jira.spring.io/browse/SPR-3512?redirect=false)** and commented  As per discussion between Jörg Heinicke and myself in the forum: http://forum.springframework.org/showthread.php?p=121543#post121543  Section 5.4.2.1 of the Spring documentation describes using CustomEditorConfigurer to add custom editors directly to the BeanFactory.  While this works, it has several disadvantages vs. the use of PropertyEditorRegistrar, namely (1) thread safety, and (2) ease of reuse in Spring Web MVC controllers. PropertyEditorRegistrar is, in fact, not mentioned at all in the Spring documentation, despite being introduced at least a year ago in Spring 1.2.6.  It would be great if the use of the PropertyEditorRegistrar method of configuring custom editors could be documented, both in this section (5.4.x) as well as in the Spring MVC section of the manual. I'd be happy to try my hand at contributing text, if that's desired / acceptable.   ---  **Affects:** 2.0.6, 2.1 M1","closed","type: documentation,","spring-projects-issues","2007-05-23T00:29:32Z","2012-06-19T03:50:14Z"
"","8785","OC4JLoadTimeWeaver problem when using JPA Toplink and Spring [SPR-4142]","**[Peter Melnikov](https://jira.spring.io/secure/ViewProfile.jspa?name=pete_by)** opened **[SPR-4142](https://jira.spring.io/browse/SPR-4142?redirect=false)** and commented  I have a JPA+Spring application deployed under Oracle SOA 10.1.3 (with update). It is crashed when I open any site page that requires initialization of JPA EntityManager. I can also reproduce the error when deploy application on standalone OC4J instance and call the pre-initialization servlet twice. Though, creating ApplicationContext for two times is not common, it should work anyway without error.  Here the code in servlet that throws exception:  public class AuditDBInstallServlet  extends HttpServlet {      protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {         ....         ApplicationContext springContext = new ClassPathXmlApplicationContext(""context.xml""); // here I get the exception         UserManager um = (UserManager) springContext.getBean(""userManager"");         ....                   }  }  Here the exception I have found in the application log:  07/11/20 14:54:59.328 audittest: Servlet error org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userManager' defined in class path resource [context.xml]: Cannot resolve reference to bean 'userDao' while setting bean property 'dao'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [context.xml]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: ClassLoader ""audittest.web.audittest"" (from \ in /C:/Java/oc4j/j2ee/home/applications/audittest/audittest/): A loader with this name and version already exists, from \ in /C:/Java/oc4j/j2ee/home/applications/audittest/audittest/. Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [context.xml]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: ClassLoader ""audittest.web.audittest"" (from \ in /C:/Java/oc4j/j2ee/home/applications/audittest/audittest/): A loader with this name and version already exists, from \ in /C:/Java/oc4j/j2ee/home/applications/audittest/audittest/. Caused by: java.lang.IllegalStateException: ClassLoader ""audittest.web.audittest"" (from \ in /C:/Java/oc4j/j2ee/home/applications/audittest/audittest/): A loader with this name and version already exists, from \ in /C:/Java/oc4j/j2ee/home/applications/audittest/audittest/. at oracle.classloader.util.ClassLoadAsserts.fail(ClassLoadAsserts.java:167) at oracle.classloader.PolicyClassLoaderSet$LoaderList.insert(PolicyClassLoaderSet.java:160) at oracle.classloader.PolicyClassLoaderSet.add(PolicyClassLoaderSet.java:310) at oracle.classloader.PolicyClassLoader.\(PolicyClassLoader.java:471) at oracle.classloader.util.ClassLoaderUtilities.copy(ClassLoaderUtilities.java:35) at org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver.getThrowawayClassLoader(OC4JLoadTimeWeaver.java:78) at org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo.getNewTempClassLoader(SpringPersistenceUnitInfo.java:74) at oracle.toplink.essentials.internal.ejb.cmp3.EntityManagerSetupImpl.predeploy(EntityManagerSetupImpl.java:472) at oracle.toplink.essentials.ejb.cmp3.EntityManagerFactoryProvider.createContainerEntityManagerFactory(EntityManagerFactoryProvider.java:152) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:204) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:242) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1057) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1024) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:421) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:140) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:156)  A part of spring context cofiguration file:  \ \ \ \ \ \ \ \ \ \ \  Here the persistence.xml content:  \ \ \ \oracle.toplink.essentials.ejb.cmp3.EntityManagerFactoryProvider\          com.audittest.Data         com.audittest.Event         com.audittest.Request         com.audittest.Session         com.audittest.User                                                                                                                                                        \ Is not sure is it the OC4J classloader issue or the Spring OC4JLoadTimeWeaver's getThrowawayClassLoader, but this is a showstopper for my application and has high priority for me as I cannot find any workaround for it.   ---  **Affects:** 2.0.1, 2.0.7, 2.5 RC1","closed","in: core,","spring-projects-issues","2007-11-20T21:13:53Z","2019-01-12T16:39:38Z"
"","8342","Allow UrlBasedViewResolver to delegate if file not found [SPR-3661]","**[Peter Backlund](https://jira.spring.io/secure/ViewProfile.jspa?name=peter.backlund)** opened **[SPR-3661](https://jira.spring.io/browse/SPR-3661?redirect=false)** and commented  ViewResolvers that inherit UrlBasedViewResolver, such as FreemarkerVR and VelocityVR, don't have the ability to return null if a template file is not found. For example, FreemarkerView will run checkTemplate() on app context initialization, which will throw an IOException if the template file is not found. This exception will propagate past the view resover chaining in DispatcherServlet instead of sending the signal to try the next available view resolver.  My proposal is that the UrlBasedViewResolver.loadView() method catches whatever exception is thrown when the template file is missing (currently ApplicationContextException, might be a good idea to narrow down the scope by using a dedicated exception type), and instead return null (possibly with a flag to tune the behaviour).  Something like this:      protected View loadView(String viewName, Locale locale) throws Exception {     	AbstractUrlBasedView view = buildView(viewName);     	try {                   return (View) getApplicationContext().getAutowireCapableBeanFactory().initializeBean(view, viewName);                 } catch (TemplateNotFoundException e) {                   if (throwExceptionIfNotFound) {                      throw e;                   } else {                      return null;                   }                 }     }    ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-07-05T23:44:45Z","2012-06-19T03:50:20Z"
"","8352","StringUtils.parseLocaleString(): does not parse locale string with multiple variants correctly [SPR-3671]","**[Perry Lin](https://jira.spring.io/secure/ViewProfile.jspa?name=perrylin)** opened **[SPR-3671](https://jira.spring.io/browse/SPR-3671?redirect=false)** and commented  I found out that the StringUtils.parseLocaleString() doesn't parse locale string with more than one variant correctly. This indirectly causes the LocaleResolver to resolve the locale incorrectly.  Here is an example:  try to parse a locale string ""en_US_var1_var2""  You will get a Locale object with ""en_US_var1""  The variant part of the locale now contains ""var1"" instead of ""var1_var2"".  By further checking in the source code:      public static Locale parseLocaleString(String localeString) {     	String[] parts = tokenizeToStringArray(localeString, ""_ "", false, false);     	String language = (parts.length > 0 ? parts[0] : """");     	String country = (parts.length > 1 ? parts[1] : """");     	String variant = (parts.length > 2 ? parts[2] : """");     	return (language.length() > 0 ? new Locale(language, country, variant) : null);     }  The bug comes from the parsing of the variant:      String variant = (parts.length > 2 ? parts[2] : """");  This implementation takes in only the first part of the variant and completely ignore the rest. I have created a quick dirty patch to make it work correctly:      public static Locale parseLocaleString(String localeString) {     	String[] parts = StringUtils.tokenizeToStringArray(localeString, ""_ "", false, false);     	String language = (parts.length > 0 ? parts[0] : """");     	String country = (parts.length > 1 ? parts[1] : """");     	String variant = null;     	if(parts.length  2 ? parts[2] : """");     	} else {     		variant = """";     		for (int i = 2; i < parts.length; i++) {     			if(i == 2) {     				variant += parts[i];     			} else {     				variant += ""_"" + parts[i];     			}     		}     	}     	return (language.length() > 0 ? new Locale(language, country, variant) : null);     }    ---  **Affects:** 2.0.6","closed","in: core,","spring-projects-issues","2007-07-08T19:35:59Z","2012-06-19T03:50:08Z"
"","8294","Add support for itemLabel and ItemValue using a List of Map in the select tag  [SPR-3612]","**[Pedro Vicente](https://jira.spring.io/secure/ViewProfile.jspa?name=pedrofrv)** opened **[SPR-3612](https://jira.spring.io/browse/SPR-3612?redirect=false)** and commented  When using the select form we cannot pass the items as a Collection of Map, the items must be a java bean.  For example in this case the countries variable is a List of Map objects    The itemLabel ""description"" and itemValue ""country_code"" should be the keys of the Map, but the page gives the following error  org.springframework.beans.NotReadablePropertyException: Invalid property 'country_code' of bean class [org.apache.commons.collections.map.ListOrderedMap]: Bean property 'country_code' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:478) at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:470) at org.springframework.web.servlet.tags.form.OptionWriter.doRenderFromCollection(OptionWriter.java:150) at org.springframework.web.servlet.tags.form.OptionWriter.renderFromCollection(OptionWriter.java:136) at org.springframework.web.servlet.tags.form.OptionWriter.writeOptions(OptionWriter.java:99) at org.springframework.web.servlet.tags.form.SelectTag.writeTagContent(SelectTag.java:197) at org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:82) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:68) .....  Should the method doRenderFromCollection in the class OptionWriter check to see if the item is a instance of Map and extract the values of the Map instead?  If you agree with this change I can provide a patch.  Thanks   ---  **Affects:** 2.0.6  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-06-22T03:11:28Z","2012-06-19T09:37:35Z"
"","7972","Bad HTML markup in spring.vm [SPR-3287]","**[Paweł Charasimiuk](https://jira.spring.io/secure/ViewProfile.jspa?name=notbear)** opened **[SPR-3287](https://jira.spring.io/browse/SPR-3287?redirect=false)** and commented  In form controls, generated by macros, both atributes ""id"" and ""name"" are set to be the same. The Spring reference (14.4.5.3. form input generation macros) doesn't say about setting an ""id"" attribute. Only the ""name"" is mentioned.  For example, when used: #springFormInput (""obj.foo"" $attributes) it generates: \ In my opinion, generating ""id"" should be optional or possible to set manually.  #formRadioButtons will generate:","closed","type: bug,","spring-projects-issues","2007-03-22T21:08:16Z","2019-01-11T17:18:16Z"
"","7977","More controll over ApplicationContext.refresh() algorithm [SPR-3292]","**[Pavel Vojtěchovský](https://jira.spring.io/secure/ViewProfile.jspa?name=pvojtechovsky)** opened **[SPR-3292](https://jira.spring.io/browse/SPR-3292?redirect=false)** and commented  == What I need? == To be able to refresh ApplicationContext in more independend phases. So please change visibility of these methods of AbstractApplicationContext from private to protected: - invokeBeanFactoryPostProcessors - registerBeanPostProcessors - initMessageSource - initApplicationEventMulticaster - registerListeners   to let us call them from an child of AbstractApplicationContext.  May be you can also provide an access to these members: - startupTime - activeMonitor - startupShutdownMonitor   to make refresh() algorithm customizable for others too, but in our case we need to solve this synchronization stuff by ourselves anyway.  ==Why I need it? == Our application uses hierarchy of spring ApplicationContexts. There is one root ApplicationContext which contains now about 20 child ApplicationContexts. These child ApplicationContexts can relate each other. The problem we have is that we need to INITIALIZE all application contexts ""paralelly"" (in single thread). It means 1. to create/refresh beanFactoryiesfor of all child ApplicationContext 2. to postprocess beanFactories of all child ApplicationContext 3. to register bean factory post processors of all child ApplicationContext 4. to process register bean factory post processors of all child ApplicationContext 5. ...    n. to publish create singletons of all child ApplicationContext  Why we need it? There is more reasons...  e.g. we need access to bean factories of all child ApplicationContexts (BEFORE e.g. postprocessors are processed;   BEFORE refresh finishes()) to use their beans for further configuration of application startup/refresh process.  We have problem with current AbstractApplicationContext.refresh(), which forces us to refresh application context sequentially and do not let us to override AbstractApplicationContext.refresh(), because it calls private methods (which uses private fields), which are not accessible from our CustomApplicationContext implementation :-(  I can of course write my own CustomApplicationContext which implements interfaces ApplicationContext and WebApplicationContext ... but I would really preffer to reuse all this __NICE__ Spring code!  Many thanks for great Spring framework! and also for this small helpfull change :-) Pavel   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-23T01:46:44Z","2012-06-19T03:50:33Z"
"","7887","Recover of DefaultMessageListenerContainer on JBoss 4.0.5 cluster doesn't work [SPR-3236]","**[Pavel Chuchma](https://jira.spring.io/secure/ViewProfile.jspa?name=chuma)** opened **[SPR-3236](https://jira.spring.io/browse/SPR-3236?redirect=false)** and commented  Let's have deployment on JBoss cluster with required JMS failover. It is necesary to create following setup (please correct me if I am wrong):  - JMS resources should be mapped in WEB-INF\jboss-web.xml file as ""jnp://${jboss.bind.address}:1100/...""  - connection factory must be defined as JNDI bean with disabled cache:   \   \   \java:comp/env/jms/QueueConnectionFactory\   \   \   \   \  - definition of listener container should use JNDI destination name and resolver   \   \   \   \   \   \   \  JMS connection factories and destinations are implemented as HA-Singleton in JBoss 4.0 which means that they are running only on one ""master"" node in a cluster. These singletons are moved to another node if the ""master"" node fails. But the movement of these JMS takes a non-zero time when there is no runnig JMS bean and there are no records in cluster JNDI trees about these beans. Lookup of any of these bean during this ""off"" time throws a NamingException.  Spring code does the following: The DefaultMessageListenerContainer waits for incoming messages in the receiveMessage() method. If the destination fails (and closes connection) then: - the listener is immediately notified by an exception - the listener tries to recover a connection to a destination (DefaultMessageListenerContainer.refreshConnectionUntilSuccessful()) - the listener gets an instance of the connection factory and calls createConnection() method on it. (AbstractMessageListenerContainer.createConnection() throws JMSException) But in real, the instance of a connection factory is a proxy because of the bean's ""cache"" property is set to ""false"" (see to the config above) - the proxy tries to lookup a real instance of connection factory using a cluster JNDI, but it throws an NamingException because a new instance of JBoss HA-Singleton is not started yet. (as described above) - NamingException is wrapped by java.lang.reflect.UndeclaredThrowableException because AbstractMessageListenerContainer.createConnection() throws only JMSException. - the method DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() catches only JMSException and it doens't caught the unexpected UndeclaredThrowableException. - This exception runs through the whole stack and ends the listening thread. - THE RESULT: listening of JMS messages is terminated forever!  Probability of this failure (a JNDI lookup before the HA-Singleton is moved) was 100% in my configuration. (2 JBoss instances with 3 JMS destinations and 2 connection factories running on one machine with 2x Xeon 5160 @ 3GHz, 6GB of RAM)  The stack trace of UndeclaredThrowableException:  java.lang.reflect.UndeclaredThrowableException at $Proxy103.createConnection(Unknown Source) at org.springframework.jms.listener.AbstractMessageListenerContainer.createConnection(AbstractMessageListenerContainer.java:991) at org.springframework.jms.listener.AbstractMessageListenerContainer.refreshSharedConnection(AbstractMessageListenerContainer.java:457) at org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:701) at org.springframework.jms.listener.DefaultMessageListenerContainer.recoverAfterListenerSetupFailure(DefaultMessageListenerContainer.java:683) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:881) at org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable.run(SimpleAsyncTaskExecutor.java:203) at java.lang.Thread.run(Thread.java:534)      at org.jnp.interfaces.NamingContext.resolveLink(NamingContext.java:1067)     at org.jnp.interfaces.NamingContext.lookup(NamingContext.java:700)     at org.jnp.interfaces.NamingContext.lookup(NamingContext.java:716)     at org.jnp.interfaces.NamingContext.lookup(NamingContext.java:587)     at javax.naming.InitialContext.lookup(InitialContext.java:347)     at org.springframework.jndi.JndiTemplate$1.doInContext(JndiTemplate.java:124)     at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:86)     at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:122)     at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:147)     at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:91)     at org.springframework.jndi.JndiObjectLocator.lookup(JndiObjectLocator.java:101)     at org.springframework.jndi.JndiObjectTargetSource.getTarget(JndiObjectTargetSource.java:116)     at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:184)     ... 9 more  Caused by: javax.naming.NameNotFoundException: ConnectionFactory not bound at org.jnp.server.NamingServer.getBinding(NamingServer.java:529) at org.jnp.server.NamingServer.getBinding(NamingServer.java:537) at org.jnp.server.NamingServer.getObject(NamingServer.java:543) at org.jnp.server.NamingServer.lookup(NamingServer.java:296) at org.jboss.ha.jndi.TreeHead.lookupLocally(TreeHead.java:296) at org.jboss.ha.jndi.TreeHead.lookup(TreeHead.java:215) at org.jboss.ha.jndi.HAJNDI.lookup(HAJNDI.java:155) at sun.reflect.GeneratedMethodAccessor141.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.jboss.ha.framework.interfaces.HARMIClient.invoke(HARMIClient.java:258) at $Proxy102.lookup(Unknown Source) at org.jnp.interfaces.NamingContext.lookup(NamingContext.java:625) at org.jnp.interfaces.NamingContext.lookup(NamingContext.java:587) at javax.naming.InitialContext.lookup(InitialContext.java:347) at org.jnp.interfaces.NamingContext.resolveLink(NamingContext.java:1061) ... 21 more  Proposed solution: Add the following catch block to the method DefaultMessageListenerContainer.refreshConnectionUntilSuccessful() catch (UndeclaredThrowableException ex) { if (ex.getUndeclaredThrowable() instanceof NamingException) { if (logger.isInfoEnabled()) { logger.info(""Could not refresh..."", ex); } } else { throw ex; } }  I have tested this fix in an overridden class and it works fine.   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-03-05T23:47:37Z","2012-06-19T03:50:05Z"
"","8050","Empty selection not possible with form:select with multiple=""true"" [SPR-3366]","**[Pauli Borodulin](https://jira.spring.io/secure/ViewProfile.jspa?name=boro)** opened **[SPR-3366](https://jira.spring.io/browse/SPR-3366?redirect=false)** and commented  When using form:select with attribute multiple=""true"", a user can select and deselect all options by pressing Ctrl and clicking the options. If user deselects them all and submits, an error ""Property selections threw exception; nested exception is java.lang.NullPointerException"" is appended to Errors causing submission to fail. Spring should allow none of them to be selected and Validator should be used to restrict the number of selections, if necessary.  (Note. I noticed that form:select does append a hidden prefixed field into the page when multiple=""true"" -- just like with checkboxes -- but apparently it's not used for this need.)   ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-04-12T02:39:28Z","2012-06-19T03:50:02Z"
"","8838","@SessionAttributes doesn't work with tabbed browsing [SPR-4160]","**[Paul Middelkoop](https://jira.spring.io/secure/ViewProfile.jspa?name=paulm)** opened **[SPR-4160](https://jira.spring.io/browse/SPR-4160?redirect=false)** and commented  A `@SessionAttributes` value is stored in the session using the name provided to the annotation. This is wrong in my opinion. When I open the same page in two different tabs (so same session) my first session attribute is overridden.  I'm not sure if their is a solution for this problem.  ---  **Affects:** 2.5 final  **Issue Links:** - [SWF-1009](https://jira.spring.io/browse/SWF-1009) Add support for conversations with the Spring MVC `@Controller` model (_**""depends on""**_) - #19255 `@SessionAttributes` not working as expected - #8691 Add support for outputting a 'dialog key', like a Web Flow execution key, when using the form tag. - #8337 AbstractWizardFormController views do not send current page number by default  9 votes, 16 watchers","closed","type: enhancement,","spring-projects-issues","2007-11-23T00:44:49Z","2019-01-13T08:06:30Z"
"","7971","I am no longer working with Spring.  But I can not delete my id from this JIRA  [SPR-3286]","**[Paul H. Roubekas](https://jira.spring.io/secure/ViewProfile.jspa?name=paulhr)** opened **[SPR-3286](https://jira.spring.io/browse/SPR-3286?redirect=false)** and commented  I can not delete my profile in JIRA.  What happened to the ""D"" in CRUD?  :-)   ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-03-22T07:53:34Z","2012-06-19T09:37:29Z"
"","7878","Missing change in the Step-by-step example: index.jsp location [SPR-3193]","**[Paul H. Roubekas](https://jira.spring.io/secure/ViewProfile.jspa?name=paulhr)** opened **[SPR-3193](https://jira.spring.io/browse/SPR-3193?redirect=false)** and commented  Missing change in the Step-by-step example C:\spring-framework-2.0.2-with-dependencies\spring-framework-2.0.2\docs\MVC-step-by-step\Spring-MVC-step-by-step-Part-2.html  I think at step 13 a taks is missing to change the web.xml file to include the ""WEB-INF/jsp/"" prefix to the \ tag.  My setup is a little different then the example, but I think the change still applies.  At Step 13 the file IS: \ \index.jsp\ \  At Step 13 the file Should Be:           	WEB-INF/jsp/index.jsp       I found this error because I was getting an ""not authorized"" error.   ---  **Affects:** 2.0.2","closed","in: core,","spring-projects-issues","2007-02-22T07:04:53Z","2019-01-12T16:40:20Z"
"","8674","JRuby bean mappings [SPR-3994]","**[Paul Gresham](https://jira.spring.io/secure/ViewProfile.jspa?name=gresham@mediavisual.com)** opened **[SPR-3994](https://jira.spring.io/browse/SPR-3994?redirect=false)** and commented  It would be really nice when creating JRuby beans that this would work:  RubyMessenger.rb class RubyMessenger attr_accessor :message end  context.xml     Messenger.java public interface Messenger { public String getMessage(); }  Such that System.out.println(message.getMessage()); would still work  Perhaps adding a mapping-mode or something so the default could be mapping-mode=""direct"" (normal, default?) or mapping-mode=""native"". The ""native"" mapping would mean that java getters and setters are translated into the accessor ruby methods, in this case 'message' and 'message='    --- No further details from [SPR-3994](https://jira.spring.io/browse/SPR-3994?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-10-20T21:59:11Z","2012-06-19T09:36:25Z"
"","8537","JmsTemplate.execute(SessionCallback, false) invokes Connection.start() if under a transaction [SPR-3857]","**[Paul Cowan](https://jira.spring.io/secure/ViewProfile.jspa?name=pcowan)** opened **[SPR-3857](https://jira.spring.io/browse/SPR-3857?redirect=false)** and commented  The behaviour of JmsTemplate.execute(SessionCallback, boolean) seems to have changed somewhere between 2.0M1 and 2.0.4. I suspect the new behaviour is incorrect but even if it's not, it's certainly not clear from the documentation so that should probably be amended.  In m1, execute() would find no active connection to use, and would ask the factory for another. The boolean check would then prevent the connection's start() being invoked. However, in 2.0.4, that has been replaced with a call to ConnectionFactoryUtils.doGetTransactionalSession(). If that returns null (which it will do if no transaction is in process), the code proceeds as it would have in 2.0M1; however, if there is a transaction in progress, the following code is executed:      if (!isExistingCon) {         con.start();     }  regardless of whether the original request asked for the connection to be started.  This can be problematic as nothing then closes the session; in the case of ActiveMQ, this means that the ActiveMQSessionExecutor hangs around, leaving one thread for each thread which sends a message (e.g. if we have 300 http connector threads in tomcat, each sending occasional JMS messages, we'll eventually end up with 300 ActiveMQ executor threads also) which would not happen if .start() wasn't invoked on the connection).  Test case to follow.   ---  **Affects:** 2.0.4, 2.0.6, 2.1 M3, 2.1 M4  **Attachments:** - [JmsSessionTest.java](https://jira.spring.io/secure/attachment/12899/JmsSessionTest.java) (_3.68 kB_)","closed","type: bug,","spring-projects-issues","2007-09-09T23:42:18Z","2012-06-19T03:47:11Z"
"","8758","Spring Portlet MVC petportal does not work on Oracle 10.1.3.3 [SPR-4080]","**[Paul Boardman](https://jira.spring.io/secure/ViewProfile.jspa?name=paulieb12)** opened **[SPR-4080](https://jira.spring.io/browse/SPR-4080?redirect=false)** and commented  The sample petportal does not run on OC4J (or OAS) 10.1.3.3 using Oracle Portlet Container 10.1.3.2.  I also get the same exception on my own simple sample application.  Both the sample and my simple app run fine on OC4J 10.1.2.02 using Portlet Contianer 10.1.2.0.2.  I am accessing the portlets using WSRP.  The WSRP pre config does not appear to have damaged the web.xml etc of the application and everthing deploys as expected.  The following exception is thrown.   ---  **Affects:** 2.0.7  **Attachments:** - [stacktrace.txt](https://jira.spring.io/secure/attachment/13096/stacktrace.txt) (_7.72 kB_)","closed","in: web,","spring-projects-issues","2007-11-11T18:40:53Z","2019-01-11T16:27:53Z"
"","8877","Doc: Log4jWebConfigurer does not mention log4j.xml [SPR-4199]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4199](https://jira.spring.io/browse/SPR-4199?redirect=false)** and commented  Log4jWebConfigurer examples only demonstrate log4j.properties but never mention log4j.xml is an equal alternative.   ---  **Affects:** 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-11-30T02:29:14Z","2012-06-19T03:47:48Z"
"","8816","What's new in Spring 2.0/2.5 section is unclear on deprecations [SPR-4137]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4137](https://jira.spring.io/browse/SPR-4137?redirect=false)** and commented  2.7.1.4. begins talking about things deprecated since Spring 2.0, however the following sections do not clearly reference to when (2.0? 2.5?) certain things deprecated.  I recommend replacing the ""Please note that support for..."" with ""As of Spring 2.5..."" (see 2.7.1.2)   ---  **Affects:** 2.5 final","closed","type: bug,","spring-projects-issues","2007-11-20T04:58:39Z","2012-06-19T03:46:35Z"
"","8731","Add external-ref and local-ref to DTD/XSD [SPR-4052]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4052](https://jira.spring.io/browse/SPR-4052?redirect=false)** and commented  When sharing common configuration files between projects, it is not very clear where bean placeholders come from. I do not use any IDE tooling, but I would like to derive this from reading the config. Thus I propose to extend the usage of bean references:  1) Add ""external-ref"" attribute to indicate that the referenced bean must come from another Spring config file, erring if it is defined within. 2) Add ""local-ref"" attribute to indicate the inverse. I really do like the ""local"" tag except there is no shorthand attribute for it, so I don't use it.  ---  **Issue Links:** - #12830 Evaluate 'idref' element and 'local' attribute in Spring 3.1","closed","type: enhancement,","spring-projects-issues","2007-11-06T06:04:29Z","2019-01-11T16:21:48Z"
"","8493","Add findSingle() to HibernateTemplate [SPR-3813]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-3813](https://jira.spring.io/browse/SPR-3813?redirect=false)** and commented  I often need to write a query to find one item only. It would be nice if Hibernate provided a find-like method that then called DataAccessUtils.singleResult afterwards.   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-28T14:55:03Z","2012-06-19T09:37:32Z"
"","8410","Add visibility to beans [SPR-3729]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-3729](https://jira.spring.io/browse/SPR-3729?redirect=false)** and commented  The idea that Spring JavaConfig uses Java visibility keywords to expose or hide bean references is an interesting idea. Can that also be implemented in XML?  Example: \  I don't know what good values would be: public/private? The idea being that when multiple application contexts are combined into a parent, they cannot be seen except from within the child context. I was in a meeting with developers complaining about clashing bean names when combing files. This would help alleviate such situations.  ---  **Affects:** 2.1 M3  **Issue Links:** - #5099 Restrict visibility of beans in app context (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2007-08-01T09:22:58Z","2019-01-11T19:29:54Z"
"","8398","Add OncePerRequest functionality to DelegatingFilterProxy [SPR-3717]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-3717](https://jira.spring.io/browse/SPR-3717?redirect=false)** and commented  It would be nice if somehow DelegatingFilterProxy.doFilter could have configurable support to be protected with liken functionality of OncePerRequestFilter.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-07-28T14:59:45Z","2012-06-19T09:37:39Z"
"","8387","HibernateTemplate: Add findByExample that accepts entity name [SPR-3706]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-3706](https://jira.spring.io/browse/SPR-3706?redirect=false)** and commented  I wanted a findByExample() that is based on the entity name, but the signature is not provided. It is technically possible. So I copied the HibernateCallback in my own code and swapped the class name for the entity name. However, because the change is trivial, I think this could be easily provided by the framework.   ---  **Affects:** 2.0.6, 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-07-20T07:39:36Z","2012-06-19T03:50:03Z"
"","8350","Add thread scope [SPR-3669]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-3669](https://jira.spring.io/browse/SPR-3669?redirect=false)** and commented  The documentation (3.4.5.2) shows how to create a custom scope. The example is a theoretical ""thread"" scope. But that's a pretty good idea! Why not actually implement the scope for 2.1?   --- No further details from [SPR-3669](https://jira.spring.io/browse/SPR-3669?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-07-08T10:45:25Z","2019-01-11T18:36:18Z"
"","8348","Doc: Hibernate 2 still supported but untrue [SPR-3667]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-3667](https://jira.spring.io/browse/SPR-3667?redirect=false)** and commented  The second paragraph of chapter 12.2 says: ""Hibernate 2.x, which has been supported in Spring since its inception continues to be supported..."" and continues talking about Hibernate 2.x. This paragraph needs editing/deleting, and so does any other reference to Hibernate 2 in the manual.   ---  **Affects:** 2.1 M2","closed","type: bug,","spring-projects-issues","2007-07-07T06:04:05Z","2012-06-19T03:50:54Z"
"","8162","Doc: Velocity API package summary links to old website [SPR-3479]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-3479](https://jira.spring.io/browse/SPR-3479?redirect=false)** and commented  Velocity is now a TLP at Apache. The API package summary of ""org.springframework.web.servlet.view.velocity"" points to http://jakarta.apache.org/velocity. Please change it to http://velocity.apache.org/   ---  **Affects:** 2.1 M1","closed","type: documentation,","spring-projects-issues","2007-05-14T04:38:37Z","2012-06-19T03:51:15Z"
"","8140","Move AbstractHtmlElementTagTests to mock module [SPR-3457]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-3457](https://jira.spring.io/browse/SPR-3457?redirect=false)** and commented  AbstractHtmlElementTagTests has some very nice features for testing my own tag libraries. However, the base class does alot of Spring-specific web stuff. I don't know if the latter point matters, but it would be nice to extend from this class whenever I want to test my own tag libraries. Can you think about placing this in the mock package?   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-05-05T13:43:49Z","2008-02-17T22:50:31Z"
"","8044","util:property-path like functionality for the p-namespace [SPR-3360]","**[Paul Austin](https://jira.spring.io/secure/ViewProfile.jspa?name=p_d_austin)** opened **[SPR-3360](https://jira.spring.io/browse/SPR-3360?redirect=false)** and commented  Would it be possible to extend the p namespace to allow for functionality similar to the util:property-path element so that you can specify property values using a path reference to other beans.  before   \  \ \  after     ---  **Affects:** 2.0.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/becea6115e2667b68d9533bbb16e1574f50e2499  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-04-11T04:46:37Z","2012-06-19T03:50:07Z"
"","8651","Source jars missing from maven repository [SPR-3971]","**[Patrick Crocker](https://jira.spring.io/secure/ViewProfile.jspa?name=patrick.crocker@bear.com)** opened **[SPR-3971](https://jira.spring.io/browse/SPR-3971?redirect=false)** and commented  The Maven Central repository DOES have the '-sources.jar' for the full spring dependency:  http://repo1.maven.org/maven2/org/springframework/spring/2.0.7/spring-2.0.7-sources.jar  Central Maven repository does NOT contain the '-sources.jar' as expected for the following modules:  http://repo1.maven.org/maven2/org/springframework/spring-agent/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-aop/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-aspects/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-beans/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-context/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-core/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-dao/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-hibernate2/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-hibernate3/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-ibatis/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-jca/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-jdbc/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-jdo/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-jms/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-jmx/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-jpa/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-mock/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-portlet/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-remoting/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-struts/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-support/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-tomcat-weaver/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-toplink/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-web/2.0.7/ http://repo1.maven.org/maven2/org/springframework/spring-webmvc/2.0.7/   ---  **Affects:** 2.0.7  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-10-11T23:27:38Z","2012-06-19T03:46:48Z"
"","8399","spring:message resolves message in a wrong way if arguments property is there [SPR-3718]","**[Pascal Alberty](https://jira.spring.io/secure/ViewProfile.jspa?name=pascalalberty)** opened **[SPR-3718](https://jira.spring.io/browse/SPR-3718?redirect=false)** and commented  Message is something like that: ""This message isn't a message"". Please note the single quote.  JSP is like that:  \   \\ \\\ \ \ \ \  The message is displayed like that: ""This message isnt a message""    (whithout the single quote)  If I wrote: , the message is displayed with the single quote !!  Behaviour is coded in AbstractMessageSource in method getMessageInternal If no arguments are given resolveCodeWithoutArguments is called (and we receive the message with the single quote) and if there are arguments, resolveCode is called (and we receive the message without the single quote).  Please note also that if arugments = [null], the following condition is false (ObjectUtils.isEmpty(args)) then resolveCode is called.   ---  **Affects:** 2.0.6","closed","status: declined,","spring-projects-issues","2007-07-29T23:55:21Z","2019-01-12T16:39:56Z"
"","8146","disabled and readonly properties for input tag are not evaluated [SPR-3463]","**[Pascal Alberty](https://jira.spring.io/secure/ViewProfile.jspa?name=pascalalberty)** opened **[SPR-3463](https://jira.spring.io/browse/SPR-3463?redirect=false)** and commented  When using a runtime expression in the readonly (or disabled) property of an form:input tag, the propeties is never written because the value is not evaluated.  Ex:    See writeDefaultAttributes method in AbstractHtmlInputElementTag class: if (isReadonly()) { writeOptionalAttribute(tagWriter, READONLY_ATTRIBUTE, ""readonly""); } But isReadonly method is protected boolean isReadonly() { return ""true"".equals(getReadonly()); } which not evaluate the property value, so it's always false. The value is only evaluated in the writeOptionalAttribute which is never called.  Thanks   ---  **Affects:** 2.0.5  **Attachments:** - [AbstractHtmlInputElementTag.java](https://jira.spring.io/secure/attachment/12590/AbstractHtmlInputElementTag.java) (_5.45 kB_)","closed","in: core,","spring-projects-issues","2007-05-08T20:38:48Z","2019-01-11T18:01:18Z"
"","8080","IllegalArgumentException when injecting a  into an array by constructor-arg in prototypes [SPR-3397]","**[Paolo Denti](https://jira.spring.io/secure/ViewProfile.jspa?name=paolo_denti)** opened **[SPR-3397](https://jira.spring.io/browse/SPR-3397?redirect=false)** and commented  it happens when the following conditions are true: second (and followings) instantiation of beans with scope=prototype and arrays injected in constructor  try to execute this  ....-servlet.xml  ---  ... \  \ \ \ \ \ \ \1\ \2\ \3\ \ \ \ ...  TestBean.java  ---  package test;  public class TestBean {      public TestBean(String[] list) {     	for (Object o : list) {     		System.out.println(o);     	}     }  }  TestController.xml  ---  package test;  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.mvc.AbstractController;  public class TestController extends AbstractController {      private TestBean testBean;          public void setTestBean(TestBean testBean) {     	this.testBean = testBean;     }          @Override     protected ModelAndView handleRequestInternal(HttpServletRequest request,     		HttpServletResponse response) throws Exception {          	System.out.println(testBean.getClass().getName());     	return new ModelAndView(""test"");     }  }  - execute the TestController calling the test.htm page; it works. - try to execute AGAIN the test.htm page: it works ONLY with 2.0.3 and older versions; with 2.0.4, on the second prototype instantiation, you get a java.lang.IllegalArgumentException: argument type mismatch  if you use a List, instead of a String[] in the TestBean constructor, it works always.  TestBean.java  ---  package test;  import java.util.List;  public class TestBean {      public TestBean(List list) {     	for (Object o : list) {     		System.out.println(o);     	}     }  }  if you use a singleton instead of a prototype, it works always.  ....-servlet.xml  ---  ... \ \ \ \1\ \2\ \3\ \ \ \ ...  The problem happens also outside web applications. The problem happens also without setter injection of testBean bean, for example calling twice getBean(""testBean"").  ---  **Affects:** 2.0.4  **Attachments:** - [springbug.zip](https://jira.spring.io/secure/attachment/12549/springbug.zip) (_3.42 MB_)","closed","in: core,","spring-projects-issues","2007-04-20T00:02:08Z","2019-01-13T22:43:32Z"
"","8714","SpringContextResourceAdapter is missing a call to applicationContext.refresh() [SPR-4035]","**[Omar Irbouh](https://jira.spring.io/secure/ViewProfile.jspa?name=irbouho)** opened **[SPR-4035](https://jira.spring.io/browse/SPR-4035?redirect=false)** and commented  SpringContextResourceAdapter.start() does not call applicationContext.refresh() to actually create the beans and run the IoC magic.   ---  **Affects:** 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-11-02T01:17:38Z","2012-06-19T03:46:56Z"
"","8812","Add Apache CXF example to Chapter 17.5. Web services [SPR-4133]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-4133](https://jira.spring.io/browse/SPR-4133?redirect=false)** and commented  Since Apache CXF is the continuation of the XFire project, an example for configuring it should be added to the spring docs. The example should show a way do export a non-annotated Class like the XFireExporter example.   ---  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2007-11-19T22:33:33Z","2012-06-19T09:36:27Z"
"","8309","Spring AOP @Aspect pointcut ignores generic type params and matches to many join points  [SPR-3628]","**[Oliver Hutchison](https://jira.spring.io/secure/ViewProfile.jspa?name=oliverhutchison)** opened **[SPR-3628](https://jira.spring.io/browse/SPR-3628?redirect=false)** and commented  I raised this issue on the forum but received no responses:  http://forum.springframework.org/showthread.php?t=40559  This is a critical issue for us as we've been forced off AspectJ because of instability there and now we find that Spring AOP does not implement the same pointcut model.  ---  **Issue Links:** - #8239 Spring AOP doesn't process generics correctly (_**""depends on""**_)","closed","in: core,","spring-projects-issues","2007-06-27T11:18:25Z","2019-01-11T18:34:02Z"
"","8354","Some documentation issues (Spring reference) [SPR-3673]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-3673](https://jira.spring.io/browse/SPR-3673?redirect=false)** and commented  Hello,  as I have re-browsed reference (2.0.6) I have spotted few bugs / possible improvments:  1. Document is not properly titled. Title page does not contain document name (e.g. ""Reference"" or ""Reference manual"" or something similar. It makes referencing this document more cumbersone.  2. Chapter 1.1 Overview. Diagram on page 16 (PDF) contains only 6 modules from 7 that are mentioned in the diagram explanation, ""Context"" module is absent from diagram (due to formatting issues?). It is true for both PDF and HTML versions). Words ""module"" and ""package"" are used interchangably here, which does not add clarity. especially it is not explained that packages in this context have nothing to do with Java packages, and modules have nothing to do with module JARs in the Spring distribution.  3. Chapter 1.2 Usage scenarios. Diagram on page 18 ""Typical full-fledged Spring web application"" and related explanation miss J2EE (or ""Remoting"" module) while it functionality is present (e-Mail, Remote access.  4. Appendix A.3.1 ""Setting up Eclipse"". Spring IDE is not mentioned, while it definitely deserves to be mentioned and reccomended.    ---  **Affects:** 2.0.6","closed","type: documentation,","spring-projects-issues","2007-07-09T21:37:58Z","2012-06-19T03:50:39Z"
"","8284","Provide syntax for creation a bean of parametrized type [SPR-3602]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-3602](https://jira.spring.io/browse/SPR-3602?redirect=false)** and commented  It would be nice if it would be possible to create a bean of parametrized type (in the sense of Java language specification, i.e. to specify type parameters in the bean definition when bean class is generic).  It may be done via introducing of type-parameters attribute, for example.  \  Sure it is only applicable to Java 5+.  For now, as I can see it is possible to do only by factory bean usage.  Regards, Oleksandr   ---  **Affects:** 2.0.5  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-06-19T21:14:14Z","2012-06-19T09:37:29Z"
"","8128","Creation of Burlap proxy hangs (together with the whole Tomcat) [SPR-3445]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-3445](https://jira.spring.io/browse/SPR-3445?redirect=false)** and commented  I have created a small demo application for Spring remoting capabilities. It iterates over configured proxies and calls remote service over each of them (the same way as JPetStore sample application does, but unlike to JPetStore client is Web-based).  Client context (see attached Zip) contains proxies for Hessian, Burlap and HttpInvoker. The problem is that application context creation hangs on creation of Burlap proxy (namely, in afterPropertiesSet()). Not only context creation hangs, but Tomcat stops to respond, even for appication that are already running (e.g. Tomcat welcome page, http://localhost:8080). See hang.log in the attached Zip. As soon as Burlap proxy is commented out application successfully starts and works properly.  To make things even more interesting,  above mentioned behavior manifests itself only on Tomcat startup, if application is deployed in already running Tomcat, it works perfectly (till next Tomcat restart), see already_running_tomcat.log in attached zip.  Regards, Oleksandr Alesinskyy   ---  **Affects:** 2.0.3  **Attachments:** - [bug_report.zip](https://jira.spring.io/secure/attachment/12585/bug_report.zip) (_22.24 kB_)","closed","status: declined,","spring-projects-issues","2007-05-02T21:34:43Z","2019-01-12T16:40:11Z"
"","7897","some HttpServletRequest bean properties not accessible through WebRequest [SPR-3211]","**[Noa Resare](https://jira.spring.io/secure/ViewProfile.jspa?name=noa)** opened **[SPR-3211](https://jira.spring.io/browse/SPR-3211?redirect=false)** and commented  I want to be able to create different output from my web application based on the domain name used to contact the servlet container. Doing this using the HttpServletRequest method getLocalName() in my Controller implementations was easy enough, but when I refactored the code into a WebRequestInterceptor it seems like the localName property of the incoming request is not easily accessible.  Therefore I propose a new method in the WebRequest interface that gives access to the HttpServletRequest JavaBean style properties, perhaps called getBeanProperty() that is implemented so that getBeanProperty(""localName"") results in a getLocalName() on the HttpServletRequest.  My current UglyHack solution is reproduced below, in case someone else runs into this problem before a better solution is implemented.      static String getLocalName(WebRequest request)     {         try {             Method m = ServletRequestAttributes.class.getDeclaredMethod(""getRequest"", (Class)null);             m.setAccessible(true);             HttpServletRequest r = (HttpServletRequest)m.invoke(request);             m.setAccessible(false);             return r.getLocalName();         } catch (Exception e) {             throw new Error(e);         }          }    ---  **Affects:** 2.0.1  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-27T03:19:01Z","2012-06-19T03:50:27Z"
"","8196","PathMatchingResourcePatternResolver does a full subtree scan from first dir with wildcard [SPR-3513]","**[Nino Stokbro Ag](https://jira.spring.io/secure/ViewProfile.jspa?name=nino)** opened **[SPR-3513](https://jira.spring.io/browse/SPR-3513?redirect=false)** and commented  PathMatchingResourcePatternResolver does a full subtree scan from first dir with wildcard. If the path pattern is a file: url with a wildcard in the first dir, fx ""file:/rootdir*/subdir/some.file"", the algorithm scans the entire disc which fails if the contents of some folder on disc can't be listed, fx ""C:\System Volume Information"" on WinXP.  This basically means that the PatternResolver can't be used with wildcards in first dir, which is quite limiting.  Otherwise a very useful resource resolver.  Testcase (JUnit4)  ******************  package org.springframework.core.io.support.test;  import static org.junit.Assert.fail;  import org.springframework.core.io.support.PathMatchingResourcePatternResolver;  public class PathMatchingResourcePatternResolverTests { private PathMatchingResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();      @org.junit.Test     public void pathMatchingTest() {         try {     		resourcePatternResolver.getResources(""file:/rootdir*/subdir/some.file"");         } catch (java.io.IOException e) {             fail(e.toString());         }     }  }  Test failure  *************************  org.springframework.core.io.support.test.PathMatchingResourcePatternResolverTests pathMatchingTest(org.springframework.core.io.support.test.PathMatchingResourcePatternResolverTests) java.lang.AssertionError: java.io.IOException: Could not retrieve contents of directory [C:\System Volume Information] at org.junit.Assert.fail(Assert.java:69) at org.springframework.core.io.support.test.PathMatchingResourcePatternResolverTests.pathMatchingTest(PathMatchingResourcePatternResolverTests.java:17) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:615) at org.junit.internal.runners.TestMethodRunner.executeMethodBody(TestMethodRunner.java:99) at org.junit.internal.runners.TestMethodRunner.runUnprotected(TestMethodRunner.java:81) at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34) at org.junit.internal.runners.TestMethodRunner.runMethod(TestMethodRunner.java:75) at org.junit.internal.runners.TestMethodRunner.run(TestMethodRunner.java:45) at org.junit.internal.runners.TestClassMethodsRunner.invokeTestMethod(TestClassMethodsRunner.java:71) at org.junit.internal.runners.TestClassMethodsRunner.run(TestClassMethodsRunner.java:35) at org.junit.internal.runners.TestClassRunner$1.runUnprotected(TestClassRunner.java:42) at org.junit.internal.runners.BeforeAndAfterRunner.runProtected(BeforeAndAfterRunner.java:34) at org.junit.internal.runners.TestClassRunner.run(TestClassRunner.java:52) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  Snippet of Debug:  *****************************  2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\aspectj-weaving] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\aspectj-weaving\input-jars] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\aspectj-weaving\lib] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\aspectj-weaving\output-jars] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\jnet_Logging_tests] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\jnet_Logging_tests\.settings] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\jnet_Logging_tests\aspectj-weaving] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\jnet_Logging_tests\bin] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\jnet_Logging_tests\docs] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\jnet_Logging_tests\Log] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\jnet_Logging_tests\src] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\LET_Raadgiv] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\LET_Raadgiv\LET_Raadgiv] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\LogFrameworkSampleApp] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\LogFrameworkSampleApp\JNetSampleAppEAR] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\LogFrameworkSampleApp\JNetSampleAppKerne] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\LogFrameworkSampleApp\JNetSampleAppWAR] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfo] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfo\BSEAR] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfo\BSWAR] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfo\FMEAR] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfo\FMEJB] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfo\FMTransaktioner] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfo\FMWAR] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,782 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfo\Servers] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfo\SimulatorEAR] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfo\SimulatorEJB] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfo\SimulatorUtil] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfoCertAdmin] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfoCertAdmin\bin] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\PensionsInfoCertAdmin\src] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\SampleMQApp] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\SampleMQApp\Sample_MQ_App] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\SampleMQApp\Sample_MQ_App2] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\SampleMQApp\Sample_MQ_AppMDBReceiver] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\SampleMQApp\Sample_MQ_AppWebSender] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\SampleMQApp\Servers] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\SpringContextHierarchies] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\SpringContextHierarchies\bin] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\SpringContextHierarchies\src] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\statistik] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\TestService] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\TestService\TestService] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\XFireWSGen] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\XFireWSGen\bin] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\XFireWSGen\src] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\projects\XFireWSGen\wsdl] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\RECYCLER] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\RECYCLER\S-1-5-21-1644454517-75965613-1231754661-8435] for files matching pattern [C://rootdir*/subdir/some.file] 2007-05-23 15:23:09,798 [main] DEBUG org.springframework.core.io.support.PathMatchingResourcePatternResolver Searching directory [C:\System Volume Information] for files matching pattern [C://rootdir*/subdir/some.file]   --- No further details from [SPR-3513](https://jira.spring.io/browse/SPR-3513?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-05-23T00:51:01Z","2012-06-19T03:51:18Z"
"","8411","Add support for all MessageListenerAdapter properties to the  tag. [SPR-3730]","**[Nils Wloka](https://jira.spring.io/secure/ViewProfile.jspa?name=nwloka)** opened **[SPR-3730](https://jira.spring.io/browse/SPR-3730?redirect=false)** and commented  To further simplify the configuration of MessageListeners, it would be nice to have full MessageListenerAdapter configuration capabilities for the  element, more specifically support for messageConverter and defaultResponseDestination properties.  A possible format would be        ...          ...    although this might lead to confusion in case of a MessageListener being configured. It might be less ambiguous to use a separate  element instead.   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-01T10:24:15Z","2012-06-19T03:51:07Z"
"","8413","Documentation about behaviour of DI is misleading (and perpetuated in the forums) [SPR-3732]","**[nigel magnay](https://jira.spring.io/secure/ViewProfile.jspa?name=magnayn)** opened **[SPR-3732](https://jira.spring.io/browse/SPR-3732?redirect=false)** and commented  section 3.3.1.2. Constructor Injection states :  Finally, if it is not immediately apparent, it is worth mentioning that when one or more collaborating beans are being injected into a dependent bean, each collaborating bean is totally configured prior to being passed (via one of the DI flavors) to the dependent bean. This means that if bean A has a dependency on bean B, the Spring IoC container will totally configure bean B prior to invoking the setter method on bean A; you can read 'totally configure' to mean that the bean will be instantiated (if not a pre-instantiated singleton), all of its dependencies will be set, and the relevant lifecycle methods (such as a configured init method  or the IntializingBean callback method) will all be invoked.  Questions such as the following  Is it guaranteed that when the Spring container calls the property setters or the constructor, then the objects passed in as arguments are already initialized? For example, if I have setFoo(Bar foo), then can setFoo be sure that foo is an initialized object, i.e. its afterPropertiesSet or custom init-method was already called? (The documentation only says that ""the dependency is properly initialized before the dependent bean"".)  Are answered with      I can absolutely, 100% satisfaction guaranteed, indubitably confirm that the answer to your question is in the affirmative.  But, in actual fact, this isn't ""100% satisfaction guaranteed"" correct. Observing the discussion around #6186, specifically the comments, it is plain that the container will **not** have called the initialize instruction if there is a circular dependency around initialization. You will only see this noted if you pump JUnit all the way up to DEBUG level, in which case you get statement buried in your now hyper-verbose output such as      Returning eagerly cached instance of singleton bean 'A' that is not fully initialized yet - a consequence of a circular reference  At the very minimum, the documentation needs to be corrected to make this plain (even if it's an edge case, it's a fairly fundamental one) - perhaps in a sidebar. I'd prefer to be able to make the container throw an exception, but just knowing that this is the behaviour would be good...  ---  **Affects:** 2.0.6","closed","in: core,","spring-projects-issues","2007-08-01T21:45:57Z","2019-01-11T19:29:44Z"
"","8505","PropertyEditorRegistrySupport does not copy custom editors when nestedPath is null. [SPR-3825]","**[Niall Smart](https://jira.spring.io/secure/ViewProfile.jspa?name=niallsmart)** opened **[SPR-3825](https://jira.spring.io/browse/SPR-3825?redirect=false)** and commented  The documentation for the second parameter to copyCustomEditorsTo states:      * @param nestedProperty the nested property path of the target registry, if any.     * If this is non-null, only editors registered for a path below this nested property  To me, this implies that if nestedProperty is null, then all custom editors will be copied.   In fact, if nestedProperty is null, then no custom editors registered for a property path will be copied at all.   ---  **Affects:** 2.0.6, 2.1 M3","closed","in: core,","spring-projects-issues","2007-08-30T23:12:23Z","2012-06-19T03:50:23Z"
"","8500","Impossible to obtain a default editors other than by direct instantiation. [SPR-3820]","**[Niall Smart](https://jira.spring.io/secure/ViewProfile.jspa?name=niallsmart)** opened **[SPR-3820](https://jira.spring.io/browse/SPR-3820?redirect=false)** and commented  The default editors registered in PropertyEditorSupport are only queried/used when doing type conversion.  It is not possible to obtain a reference to any of these (other than by direct instantiation) as getDefaultEditor() is protected.  It would be better if findCustomEditor could be asked to query the list of default editors, or if getDefaultEditor() was public, or if PropertyEditorSupport implemented PropertyEditorRegistrar so it could copy the default registrations to another PropertyEditorRegistry.   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-30T04:38:52Z","2019-01-11T19:19:25Z"
"","8499","TypeConverterDelegate does not use property editor to implement a conversion strategy to java.lang.String  [SPR-3819]","**[Niall Smart](https://jira.spring.io/secure/ViewProfile.jspa?name=niallsmart)** opened **[SPR-3819](https://jira.spring.io/browse/SPR-3819?redirect=false)** and commented  If a property editor is registered for a given type then I would expect the TypeConverterDelegate to be able to convert values of that type to java.lang.String.   For example:  editor.setValue(oldValue); convertedValue = editor.getAsText()  TypeConverterDelegate does not implement this conversion strategy.   For example, it cannot convert a java.lang.Integer to java.lang.String.   It can convert from java.lang.String to java.lang.Integer though!    The method doConvertValue requires a few extra lines of code.   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-30T04:28:26Z","2012-06-19T03:50:12Z"
"","8807","build-number.txt is in build distributables [SPR-4128]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-4128](https://jira.spring.io/browse/SPR-4128?redirect=false)** and commented  Currently all three spring zip distributions are including the build-number.txt file in them in the nightly snapshots.  This file should be excluded.   ---  **Affects:** 2.5 RC2","closed","type: task,","spring-projects-issues","2007-11-19T07:58:20Z","2012-06-19T03:47:34Z"
"","8689","Investigate OSGI bndwrap warnings [SPR-4009]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-4009](https://jira.spring.io/browse/SPR-4009?redirect=false)** and commented  In the latest nightly builds on Bamboo, the Spring build is spitting out warnings like the following for every JAR.  Please evaluate to see if they are a problem.  26-Oct-2007 08:07:00  	   [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:00 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:00 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:00 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:00 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:00 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:00 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:00 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:00 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:04 	  [bndwrap] spring-tx.jar               184 resources            0 bytes                  26-Oct-2007 08:07:04 	  [bndwrap] Warnings 26-Oct-2007 08:07:04 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:04 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:04 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:04 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:04 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:04 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:04 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:04 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:04 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:04 	  [bndwrap] No translation found for macro: spring-bundle-prefix 26-Oct-2007 08:07:05 	  [bndwrap] spring-web.jar              163 resources            0 bytes   ---  **Affects:** 2.5 RC1","closed","in: core,","spring-projects-issues","2007-10-26T00:17:51Z","2008-10-27T02:55:20Z"
"","8021","Update Spring builds to upload nightly snapshots to Amazon S3 [SPR-3337]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-3337](https://jira.spring.io/browse/SPR-3337?redirect=false)** and commented  The spring CI build should upload nightly snapshots to the Spring Amazon S3 location.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-04-03T08:59:34Z","2012-06-19T03:50:35Z"
"","7982","Bean refresh in the DispatcherServlet [SPR-3297]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-3297](https://jira.spring.io/browse/SPR-3297?redirect=false)** and commented  When running a web application using Spring MVC, it's not possible to effectively refresh the web-tier application context.  For example, when running a webflow application, the web-tier application context has a bean definition for a FlowRegistry.  This registry reads a set of files from the filesystem based on wild-card patterns.  If a new file is added, I'd like to read that file and use it without restarting the servlet.  From a context perspective this is possible.  A refresh of the context (via JMX for example) will reinstantiate the registry bean and read the new file in if it matches the selection pattern.  The problem lies in the DispatcherServlet.  The DispatcherServlet maintains a cached reference to the HandlerMapping that it was started with.  Therefore, even though the context has been refreshed and all beans recreated, the HandlerMapping is the original HandlerMapping bean and it may contain cached references to the original handlers and on through the object graph.  The DispatcherServlet should have a mechanism to reload HandlerMappings (or really any artifacts) from a refreshed web-tier application context.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-23T07:23:31Z","2012-06-19T03:50:06Z"
"","7950","Create a system to upload all build artifacts for Spring and subproject builds to Amazon S3 [SPR-3265]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-3265](https://jira.spring.io/browse/SPR-3265?redirect=false)** and commented  Create ant tasks and maven mojos to upload build artifacts to the Amazon S3 system.   --- No further details from [SPR-3265](https://jira.spring.io/browse/SPR-3265?redirect=false)","closed","type: task,","spring-projects-issues","2007-03-14T06:09:46Z","2012-06-19T03:50:03Z"
"","8179","Allow String codes in StringCodedLabeledEnum to contain a single whitespace character [SPR-3496]","**[Nathan Airgood](https://jira.spring.io/secure/ViewProfile.jspa?name=src286)** opened **[SPR-3496](https://jira.spring.io/browse/SPR-3496?redirect=false)** and commented  The constructor for org.springframework.core.enums.StringCodedLabeledEnum asserts that the given String code contains ""at least one non-whitespace character"". Why can't a String code be only a single whitespace character? I have a case where a legacy system is providing my Spring app with String codes, one of which happens to be a single space character. Unfortunately, I cannot enumerate this code with a StringCodedLabeledEnum because the constructor doesn't allow it. Also, I think it would be reasonable to want to enumerate other whitepace-only codes, such as tab, newline, etc. However, again, this cannot be done using a StringCodedLabeledEnum because of the restriction imposed by the constructor.  My suggestion is to remove this restriction from the constructor (perhaps by replacing Assert.hasText(code) with Assert.notNull(code)) as it is too limiting. Instead, push the responsibility of how to handle whitespace-only codes (or any other String codes for that matter) to the subclasses of StringCodedLabeledEnum. This would allow apps that want to enumerate such codes (like mine) to do so, and allow apps that don't to restrict the codes in any way they choose.   ---  **Affects:** 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1, 2.0.2, 1.2.9, 2.0.3, 2.0.4, 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-05-18T07:00:01Z","2012-06-19T03:50:55Z"
"","8717","""http://www.springframework.org/schema/util/spring-util-2.5.xsd"" is not found (404) [SPR-4038]","**[Nate Stoddard](https://jira.spring.io/secure/ViewProfile.jspa?name=nstoddar)** opened **[SPR-4038](https://jira.spring.io/browse/SPR-4038?redirect=false)** and commented  The 2.0 schema is on the website, but 2.5 is not.  If at all possible (since this is just a release candidate), put 2.5 schema on website so at least during development, it's not necessary to map the URI to a local resource in order to get content assist, etc working in IDEs.  ---  **Affects:** 2.5 RC1  **Issue Links:** - #8751 Make spring-util-2.5.xsd available on springframework.org (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2007-11-02T05:40:58Z","2019-01-11T16:24:21Z"
"","8705","Add ""getIdentifier"" to HibernateOperations [SPR-4026]","**[Nate Stoddard](https://jira.spring.io/secure/ViewProfile.jspa?name=nstoddar)** opened **[SPR-4026](https://jira.spring.io/browse/SPR-4026?redirect=false)** and commented  The HibernateOperations interface currently doesn't have a method that corresponds to Hibernate's Session.getIdentifier(Object object).  It'd be nice to have that.   --- No further details from [SPR-4026](https://jira.spring.io/browse/SPR-4026?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-10-31T05:37:02Z","2012-06-19T09:36:15Z"
"","8679","Add ""isInitialized"" method to HibernateOperations [SPR-3999]","**[Nate Stoddard](https://jira.spring.io/secure/ViewProfile.jspa?name=nstoddar)** opened **[SPR-3999](https://jira.spring.io/browse/SPR-3999?redirect=false)** and commented  It'd be nice to have this method in Spring.  The ""initialize"" method is there, and the ""isInitialized"" goes along with it pretty nicely.  Shouldn't be too hard at all, and then we can all stay away from invoking static methods on the Hibernate class.   --- No further details from [SPR-3999](https://jira.spring.io/browse/SPR-3999?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-10-23T07:51:21Z","2012-06-19T09:36:16Z"
"","8697","Spring AOP does not work with Java 2 Security enabled [SPR-4017]","**[Naresh Sikha](https://jira.spring.io/secure/ViewProfile.jspa?name=nsikha)** opened **[SPR-4017](https://jira.spring.io/browse/SPR-4017?redirect=false)** and commented  We are running our JEE containers with Java 2 Security enabled to prevent Enterprise Applications from affecting availability of the environment. We have deployed spring.jar to ${was.install.root}/lib. In this location all .jars, including spring.jar, receive the AllPermission. HOWEVER, AllPermission is granted to those .jars only when those .jars explicitly use the AccessController.doPrivileged(new PrivilegedAction()) API. If they do not surround sensitive API calls with AccessController... they inherit the caller's permission, which, in our case with Java 2 Security enabled, is severely restricted. This manifests itself with the following error when trying to configure Spring JDK Dynamic Proxy AOP ProxyFactoryBean. The theoretical solution is to surround line 128 of org.springframework.aop.framework.JdkDynamicAopProxy with AccessController.doPrivileged(). As a side note my guess is that this is one of many such situations in spring.jar. This could be recast as an effort to validate all of spring.jar with Java 2 Security enabled. And another side note, accessing Properties with Class.getResourceAsStream fails similarly. A theoretical solution is to delegate to ResourceBundle and convert the bundle to a Properties object, thereby deftly walking around the Java 2 Security issue. If I find time I will submit a patch. Thanks for your assistance.  [10/29/07 9:25:36:322 PDT] 00000020 SecurityManag W   SECJ0314W: Current Java 2 Security policy reported a potential violation of Java 2 Security Permission. Please refer to InfoCenter for further information.  Permission:      accessDeclaredMembers : Access denied (java.lang.RuntimePermission accessDeclaredMembers)  Code:      org.springframework.aop.framework.JdkDynamicAopProxy  in  {file:/D:/Program Files/IBM/SDP70/runtimes/base_v61/lib/spring.jar}  Stack Trace:  java.security.AccessControlException: Access denied (java.lang.RuntimePermission accessDeclaredMembers) at java.security.AccessController.checkPermission(AccessController.java:104) at java.lang.SecurityManager.checkPermission(SecurityManager.java:547) at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:189) at java.lang.SecurityManager.checkMemberAccess(SecurityManager.java:1677) at java.lang.Class.checkMemberAccess(Class.java:103) at java.lang.Class.getDeclaredMethods(Class.java:645) at org.springframework.aop.framework.JdkDynamicAopProxy.findDefinedEqualsAndHashCodeMethods(JdkDynamicAopProxy.java:128) at org.springframework.aop.framework.JdkDynamicAopProxy.getProxy(JdkDynamicAopProxy.java:116) at org.springframework.aop.framework.ProxyFactoryBean.getProxy(ProxyFactoryBean.java:351) at org.springframework.aop.framework.ProxyFactoryBean.getSingletonInstance(ProxyFactoryBean.java:306) at org.springframework.aop.framework.ProxyFactoryBean.getObject(ProxyFactoryBean.java:232) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectFromFactoryBean(AbstractBeanFactory.java:1294) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1265) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:867) at schwab.csp.spring.remoting.jaxws.WebApplicationEndpointTemplate.getBean(WebApplicationEndpointTemplate.java:46) at custacct.emailaddresses.ws.EmailAddressesWebServiceEndpoint.setWebApplicationEndpointTemplate(EmailAddressesWebServiceEndpoint.java:44) at custacct.emailaddresses.ws.EmailAddressesWebServiceEndpoint.setWebServiceContext(EmailAddressesWebServiceEndpoint.java:52) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:615) at org.apache.axis2.jaxws.server.endpoint.injection.impl.WebServiceContextInjectorImpl.injectOnMethod(WebServiceContextInjectorImpl.java:179) at org.apache.axis2.jaxws.server.endpoint.injection.impl.WebServiceContextInjectorImpl.inject(WebServiceContextInjectorImpl.java:110) at org.apache.axis2.jaxws.server.endpoint.lifecycle.impl.EndpointLifecycleManagerImpl.injectWebServiceContext(EndpointLifecycleManagerImpl.java:286) at org.apache.axis2.jaxws.server.endpoint.lifecycle.impl.EndpointLifecycleManagerImpl.createServiceInstance(EndpointLifecycleManagerImpl.java:131) at org.apache.axis2.jaxws.server.EndpointController.invoke(EndpointController.java:150) at org.apache.axis2.jaxws.server.JAXWSMessageReceiver.receive(JAXWSMessageReceiver.java:114) at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:216) at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:271) at com.ibm.ws.websvcs.transport.http.WASAxis2Servlet.doPost(WASAxis2Servlet.java:907) at javax.servlet.http.HttpServlet.service(HttpServlet.java:763) at javax.servlet.http.HttpServlet.service(HttpServlet.java:856) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:995) at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:501) at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:464) at com.ibm.ws.webcontainer.servlet.CacheServletWrapper.handleRequest(CacheServletWrapper.java:90) at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:744) at com.ibm.ws.wswebcontainer.WebContainer.handleRequest(WebContainer.java:1439) at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:112) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:454) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewInformation(HttpInboundLink.java:383) at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.ready(HttpInboundLink.java:263) at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.sendToDiscriminators(NewConnectionInitialReadCallback.java:214) at com.ibm.ws.tcp.channel.impl.NewConnectionInitialReadCallback.complete(NewConnectionInitialReadCallback.java:113) at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:165) at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217) at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161) at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:136) at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:195) at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:743) at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:873) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1469)    ---  **Affects:** 2.5 RC1  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/13050/patch.txt) (_1.43 kB_) - [patch.txt](https://jira.spring.io/secure/attachment/13049/patch.txt) (_9.65 kB_)","closed","in: core,","spring-projects-issues","2007-10-29T04:30:01Z","2012-06-19T03:47:15Z"
"","8476","CLIENT_ACKNOWLEDGE  not working for DefaultMessageListenerContainer [SPR-3796]","**[nan shi](https://jira.spring.io/secure/ViewProfile.jspa?name=nancy)** opened **[SPR-3796](https://jira.spring.io/browse/SPR-3796?redirect=false)** and commented  Message got consumed without acknowledged. I tried 2.02, 2.03, 2.06 and 2.1. None is working as expected.  \ \ \ \ \  \ \ \ \   ---  **Affects:** 2.0.3","closed","status: declined,","spring-projects-issues","2007-08-23T01:15:09Z","2019-01-12T16:39:53Z"
"","8755","PROPAGATION_REQUIRES_NEW fails on JBoss 4.2.1 when using Hibernate connection release mode ""on_close"" [SPR-4077]","**[Muthukumaran Madialagan](https://jira.spring.io/secure/ViewProfile.jspa?name=muthukumaran_m)** opened **[SPR-4077](https://jira.spring.io/browse/SPR-4077?redirect=false)** and commented  My Issue is same as of the BUG which was already disucssed and fixed in the following URL  http://opensource.atlassian.com/projects/spring/browse/SPR-1384  ---  **Affects:** 2.0.2  **Issue Links:** - #8797  PROPAGATION_REQUIRES_NEW fails on JBoss 4.2.1 when using Hibernate connection release mode ""on_close"" (_**""is duplicated by""**_) - #6084 IllegalStateException thrown by JBoss 4.0.3 when PROPAGATION_REQUIRES_NEW used during active transaction in MessageBean with BMT","closed","type: enhancement,","spring-projects-issues","2007-11-09T08:31:03Z","2019-01-11T16:28:21Z"
"","8528","AbstractBeanFactory should not expose FactoryBean instances as request/session attribute [SPR-3848]","**[Moritz Kleine](https://jira.spring.io/secure/ViewProfile.jspa?name=mor7tz)** opened **[SPR-3848](https://jira.spring.io/browse/SPR-3848?redirect=false)** and commented  The following bean definition results in a request attribute of type MapFactoryBean:  \ \ \ \ \ \ \ Since an important use case for using scoped beans is to access the scoped bean via using technologies that don't know anything about spring (such as jstl, jsf EL) I consider this a bug. It might be a good idea to introduce a way to control whether or not a factory bean has to be scoped(see #6323), or both the factory bean and the bean it creates are put into the scope, as known from the spring internals using ""&beanName"" for the factory bean and ""beanName"" for the bean created by the factory bean. The attached bean factory works as we need it. The anonymous ObjectFactory  responsible for scoped instances in #getBean(String, Class, Object[]) invokes #getObjectForBeanInstance(Object, String, RootBeanDefinition) before returning the scoped instance.  ---  **Affects:** 2.0.6  **Attachments:** - [AbstractBeanFactory.java](https://jira.spring.io/secure/attachment/12884/AbstractBeanFactory.java) (_56.19 kB_)  **Issue Links:** - #8728 Spring beans automagically exposed as jsp/jstl attributes considered harmful","closed","type: enhancement,","spring-projects-issues","2007-09-05T21:44:49Z","2019-01-11T19:16:51Z"
"","8439","Improve or clarify relation of factory beans returning ""null"" and bean definitions in general. [SPR-3758]","**[Moritz Kleine](https://jira.spring.io/secure/ViewProfile.jspa?name=mor7tz)** opened **[SPR-3758](https://jira.spring.io/browse/SPR-3758?redirect=false)** and commented  I'm having trouble with factory beans returning null. E.g. PropertyPathFactoryBean: Since factory beans may return ""null"" values, I'd guess that it's legal to inject a ""null"" value when setting up a bean's configuration. The PropertyPathFactoryBean doesn't allow a ""null"" targetObject (#setTargetObject creates a BeanWrapperImpl that throws an Exception). I'm not sure whether or not this is a bug but I'd prefer this behavior: Warn and return null if a ""null"" target Object is configured. Even when using bean names it's possible that some factory bean creates a ""null"" value that cannot be handled further by the PropertyPathFactoryBean (e.g. when using PropertyPathFactoryBean in conjunction with a StaticListableBeanFactory).   ---  **Affects:** 2.0.6  **Attachments:** - [PropertyPathFactoryBean.java](https://jira.spring.io/secure/attachment/12786/PropertyPathFactoryBean.java) (_8.66 kB_) - [PropertyPathFactoryBean.java](https://jira.spring.io/secure/attachment/12777/PropertyPathFactoryBean.java) (_8.50 kB_)","closed","type: enhancement,","spring-projects-issues","2007-08-12T21:29:14Z","2007-08-15T04:48:06Z"
"","8391","ServletContextResourcePatternResolver doesn't resolve patterns correctly [SPR-3710]","**[Moritz Kleine](https://jira.spring.io/secure/ViewProfile.jspa?name=mor7tz)** opened **[SPR-3710](https://jira.spring.io/browse/SPR-3710?redirect=false)** and commented  I'm trying the pattern ""/WEB-INF/dir1/dir2/**/jsf-dispatcher-servlet/**.xml"" as contextConfigLocation pattern. This fails because  org.springframework.web.context.support.ServletContextResourcePatternResolver#doRetrieveMatchingServletContextResources#121 (StringUtils.countOccurrencesOf(currPath, ""/"") < StringUtils.countOccurrencesOf(fullPattern, ""/""))  prevents decending into the jsf-dispatcher directory. Changing ""","closed","in: core,","spring-projects-issues","2007-07-23T05:05:08Z","2012-06-19T03:50:56Z"
"","8783","Spring-webflow  fails when runs on Spring2.5 RC2 [SPR-4105]","**[Mohan](https://jira.spring.io/secure/ViewProfile.jspa?name=mohan@hp.com)** opened **[SPR-4105](https://jira.spring.io/browse/SPR-4105?redirect=false)** and commented  De serializing  org.springframework.webflow.execution.FlowSessionStatus throws following error.  Exception in thread ""main"" java.lang.IllegalArgumentException: Unsupported labeled enumeration type 'class org.springframework.core.enums.StaticLabeledEnum': make sure you've properly defined this enumeration: if it's static, are the class and its fields public/static/final? at org.springframework.core.enums.AbstractCachingLabeledEnumResolver$1.create(AbstractCachingLabeledEnumResolver.java:53) at org.springframework.util.CachingMapDecorator.get(CachingMapDecorator.java:152) at org.springframework.core.enums.AbstractCachingLabeledEnumResolver.getLabeledEnumMap(AbstractCachingLabeledEnumResolver.java:74) at org.springframework.core.enums.AbstractCachingLabeledEnumResolver.getLabeledEnumByCode(AbstractCachingLabeledEnumResolver.java:79) at org.springframework.core.enums.StaticLabeledEnum.readResolve(StaticLabeledEnum.java:97) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1033) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1727) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1304) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:349)  I think is issue is in getType method org.springframework.core.enums.AbstractLabeledEnum , it should be public Class getType() { final Class declaringClass = getClass().getDeclaringClass(); return (declaringClass == null) ? getClass() : getClass().getSuperclass(); // instead of return (declaringClass != null) ? getClass() : getClass().getSuperclass(); }  ---  **Affects:** 2.5 RC2  **Issue Links:** - #8784 Web Flow deserialization problem on Spring 2.5 RC2 - was working on Spring 2.0.7 (_**""is duplicated by""**_) - #8745 enum comparsion fails  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2007-11-14T09:22:21Z","2019-01-11T15:43:23Z"
"","8433","ScannedRootBeanDefinition should call ""setBeanClassName"" in constructor instead of overriding getBeanClassName [SPR-3752]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-3752](https://jira.spring.io/browse/SPR-3752?redirect=false)** and commented  Some BeanFactoryPostProcessors may manipulate a BeanDefintion.  A ScannedRootBeanDefinition cannot have it's beanClassName manipulated because it overrides ""getBeanClassName()"".  Perhaps instead of overriding ""getBeanClassName()"" ScannedRootBeanDefinition could ""setBeanClassName(visitor.getClassName())"" in the constructor?   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-09T03:30:14Z","2012-06-19T03:50:13Z"
"","8432","Enforcement of a concrete class in ClassPathScanningCandidateComponentProvider should be filter based [SPR-3751]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-3751](https://jira.spring.io/browse/SPR-3751?redirect=false)** and commented  Currently when scanning for a class ClassPathScanningCandidateComponentProvider has hard coded findCandidateComponents() the rule that found classes must be concrete.  Nothing about spring says you cannot have a bean definition that is not concrete and I actually have a PostProcessor that manipulates bean definitions that are not concrete.  It would be nice if the ""isConcrete"" check in findCandidateComponents() was made more extensible.  Perhaps a default ""excludes"" filter that checks to make sure the component is concrete or event just a protected method call to do ""otherDeanDefinitionVerification"" that I can override to remove this check if needed.  Mike   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-09T02:22:37Z","2012-06-19T03:51:03Z"
"","8372","Make ExtendedEntityManagerInvocationHandler Serializable [SPR-3691]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-3691](https://jira.spring.io/browse/SPR-3691?redirect=false)** and commented  I'm working with the Seam+Spring integration and I would like to be able to use a Spring configured EMF with Seam's Extended PersistenceContext support.  However, currently an EntityManager returned by a Spring configured EMF cannot be placed in a Session because ExtendedEntityManagerInvocationHandler is not serializable.  Any problems with making ExtendedEntityManagerInvocationHandler serializable?  Mike   ---  **Affects:** 2.0.6, 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-07-16T04:28:41Z","2012-06-19T03:50:11Z"
"","8326","Calls to em.joinTransaction when using JpaTransactionManager cause IllegalStateException [SPR-3645]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-3645](https://jira.spring.io/browse/SPR-3645?redirect=false)** and commented  When I'm using using Resource Local transactions with JpaTransactionManager and I make a call to em.joinTransaction() while inside of a JpaTranactionManager created transaction I get a IllegalStateException ""transaction already started""  in ExtendedEntityManagerInvocationHandler.enlistInCurrentTransaction().  In general I think the overall idea is that joinTransaction should be to never throw an exception.   Ideally I think calls to joinTransaction should not attempt to synchronize with the current spring transaction if spring is not 100% sure it is in charge of the transaction lifecycle of this EntityManager.  Perhaps the ""joinTransaction"" logic can assume that if em.joinTransaction() was called and the em has already started a transaction then maybe spring should get out of the way and not join the current spring transaction synchronization assuming that whoever started the transaction on this EntityManager should handle committing it:  if (!this.target.getTransaction().isActive() && !TransactionSynchronizationManager.hasResource(this.target)) { enlistInCurrentTransaction(); }  java.lang.IllegalStateException: Transaction already active at org.hibernate.ejb.TransactionImpl.begin(TransactionImpl.java:35) at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.enlistInCurrentTransaction(ExtendedEntityManagerCreator.java:394) at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.doJoinTransaction(ExtendedEntityManagerCreator.java:371) at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:313) at $Proxy109.joinTransaction(Unknown Source) at org.jboss.seam.persistence.EntityManagerProxy.joinTransaction(EntityManagerProxy.java:120)  Disclaimer!!!  I'm working on the Seam+Spring integration and I'm attempting to integrate Spring Managed Transactions into Seam so I'm doing some pretty crazy stuff with the Spring-JPA integration if you choose to invalidate this bug because of the unconventional ways I'm using the integration let me know and I can provide more details of my integration.   ---  **Affects:** 2.0.6","closed","type: bug,","spring-projects-issues","2007-07-03T04:04:41Z","2012-06-19T03:50:22Z"
"","8097","Optionally be able to specify if EntityManager is JTA or not in AbstractEntityManagerFactoryBean [SPR-3414]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-3414](https://jira.spring.io/browse/SPR-3414?redirect=false)** and commented  Throwing and catching exceptions can be heavy operations for a VM.  In spring everytime an EntityManger is created from an AbstractEntityManagerFactoryBean a test is performed to see if the entityManager uses JTA or not.  If the EntityManager is JTA then an exception is thrown and caught.  This can get to be expensive for projects that use JTA with a spring managed EntityManagerFactory.  One way to help this out is to allow for the developer to optionally give the AbstractEntityManagerFactoryBean a hint regarding weather this EMF creates JTA EMs or not.  This hint can then be passed through:  ExtendedEntityManagerCreator.createApplicationManagedEntityManage() ExtendedEntityManagerCreator.createProxy() ExtendedEntityManagerCreator.ExtendedEntityManagerInvocationHandler()  Where the ExtendedEntityManagerInvocationHandler can use this hint to determine if it needs to test the EntityManager or not.  Thus avoiding an unneeded exception to be thrown and caught for uses using JTA.  Since all those method calls except createApplicationManagedEntityManage() are private backwards compatability shouldn't be a problem.  Mike    ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-04-25T08:45:50Z","2012-06-19T03:50:17Z"
"","8092","Move PersistenceAnnotationBeanPostProcessor.findNamedEntityManagerFactory to EntityManagerFactoryUtils [SPR-3409]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-3409](https://jira.spring.io/browse/SPR-3409?redirect=false)** and commented  It would be nice if the logic for finding entity managers in a beanfactory could be shared so this element of EntityManagerFactory management could be shared by custom tools. This could be done easily by moving the core of PersistenceAnnotationBeanPostProcessor.findNamedEntityManagerFactory to EntityManagerFactoryUtils.   ---  **Affects:** 2.0.4  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-04-24T04:30:53Z","2012-06-19T03:50:23Z"
"","8054","PersistenceAnnotationBeanPostProcessor fails to match unitName of lazy loaded EMFs in some cases [SPR-3370]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-3370](https://jira.spring.io/browse/SPR-3370?redirect=false)** and commented  There are cases where PersistenceAnnotationBeanPostProcessor doesn't find lazy loaded EMFs.  I think it's because in findNamedEntityManagerFactory it uses beanFactory.isTypeMatch() to find EMFs that implement EntityManagerFactoryInfo and isTypeMatch() only matches cached singletons.  This is probably a known limitation so it may only require a documentation mention in PersistenceAnnotationBeanPostProcessor.  For anyone experiencing this problem the solution is to just make your EMF non lazy.  Mike  ---  **Affects:** 2.0.4  **Issue Links:** - #8117 PersistenceAnnotationBeanPostProcessor fails to find EMFBs (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2007-04-12T10:49:10Z","2019-01-11T18:15:20Z"
"","7988","Add declarative default support to PersistenceAnnotationBeanPostProcessor [SPR-3303]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-3303](https://jira.spring.io/browse/SPR-3303?redirect=false)** and commented  It would be very nice if a default EntityManagerFactory could optionally be specified when the PersistenceAnnotationBeanPostProcessor is declared.  findDefaultEntityManagerFactory could simply defer to the specified default if it is provided and could fallback on the current behavior if a default was not specified.  Because my app has 2 EntityManagerFactories I now have to specify a unitName for all annotations in my app where 95% of them are using only one of the EMFs.  Mike   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-26T03:11:18Z","2012-06-19T03:50:37Z"
"","7965","2.0.3 Regression PropertyPlaceholderConfigurer and  = NPE [SPR-3280]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-3280](https://jira.spring.io/browse/SPR-3280?redirect=false)** and commented  I'm using a PropertyPlaceholderConfigurer and I'm using \ in some of my bean definitions.  After upgrading to 2.0.3 I get the following exception for a configuration using the PropertyPlaceholderConfigurer  I don't get this error with 2.0.2  If I don't pass in a \ property everything works fine:  SomeBean.java public class SomeBean {      public void setSomeProperty(Object obj) {     	     }  }  applicationContext.xml \ \\\ \           	     		     			classpath:property.properties                                                 Exception  java.lang.NullPointerException at java.lang.StringBuffer.\(StringBuffer.java:104) at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.parseStringValue(PropertyPlaceholderConfigurer.java:270) at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer$PlaceholderResolvingBeanDefinitionVisitor.resolveStringValue(PropertyPlaceholderConfigurer.java:401) at org.springframework.beans.factory.config.BeanDefinitionVisitor.resolveValue(BeanDefinitionVisitor.java:143) at org.springframework.beans.factory.config.BeanDefinitionVisitor.visitPropertyValues(BeanDefinitionVisitor.java:89) at org.springframework.beans.factory.config.BeanDefinitionVisitor.visitBeanDefinition(BeanDefinitionVisitor.java:59) at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:246) at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:75) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:422) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:334) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1185) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1147) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1110) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:431) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:221) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:111) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1047) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:843) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:427) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:254) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:144) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:683) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:394) at org.lds.stack.spring.context.WebContextSingletonBeanFactoryLocator.useBeanFactory(WebContextSingletonBeanFactoryLocator.java:38) at org.lds.stack.spring.context.BootstrapContextLoader.createWebApplicationContext(BootstrapContextLoader.java:30) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3764) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4216) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardHost.start(StandardHost.java:736) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:448) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:552) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433)  ---  **Affects:** 2.0.3  **Issue Links:** - #7934 NPE in PropertyPlaceholderConfigurer.parseStringValue because TypedStringValue.getValue() is null (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2007-03-21T05:13:00Z","2019-01-12T16:51:40Z"
"","7964","Look at phasing out cglib with javaassist [SPR-3279]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-3279](https://jira.spring.io/browse/SPR-3279?redirect=false)** and commented  Cglib appears to be a poorly maintained and dying project.  It would be nice to replace it with a more actively maintained project like javaassist for library dependency reasons.  Newer versions of asm are not compatibly with the asm included in cglib-nodep which can cause problems.  Spring already provides all the abstraction needed to replace cglib with javaassist.  a system property can be used initially while the javaassist aop provider is tested and then perhaps later could replace cglib as the default.  Just a thought.  Mike  ---  **Affects:** 2.0.3  **Issue Links:** - #12840 Support for ByteBuddy as an alternative to CGLIB (_**""duplicates""**_)  9 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2007-03-21T04:11:19Z","2019-01-11T17:18:33Z"
"","8864","NoClassDefFoundError using RAD/RSA, Websphere 5.1, Java 1.4 and Spring 2.5 and running in Debug mode [SPR-4186]","**[Mike Sullivan](https://jira.spring.io/secure/ViewProfile.jspa?name=sulldogg)** opened **[SPR-4186](https://jira.spring.io/browse/SPR-4186?redirect=false)** and commented  Launching the server as DEBUG inside the IDE results in a NoClassDefFoundError for java.lang.annotation.Annotation.  This is a 1.5 class and shouldn't be needed here.  This thread http://forum.springframework.org/showthread.php?t=46527 contains some background but a stack trace is:  Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: java.lang.annotation.Annotation at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.doCreateBean(AbstractAu towireCapableBeanFactory.java:547) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory$1.run(AbstractAutowireC apableBeanFactory.java:485) at java.security.AccessController.doPrivileged(Access Controller.java:187) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.createBean(AbstractAuto wireCapableBeanFactory.java:455) at org.springframework.beans.factory.support.Abstract BeanFactory$1.getObject(AbstractBeanFactory.java:2 51) at org.springframework.beans.factory.support.DefaultS ingletonBeanRegistry.getSingleton(DefaultSingleton BeanRegistry.java:169) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.Abstract BeanFactory.getBean(AbstractBeanFactory.java:170) at org.springframework.context.support.AbstractApplic ationContext.getBean(AbstractApplicationContext.ja va:883) at org.springframework.context.support.AbstractApplic ationContext.registerBeanPostProcessors(AbstractAp plicationContext.java:584) at org.springframework.context.support.AbstractApplic ationContext.refresh(AbstractApplicationContext.ja va:351) at org.springframework.web.context.ContextLoader.crea teWebApplicationContext(ContextLoader.java:251) at org.springframework.web.context.ContextLoader.init WebApplicationContext(ContextLoader.java:190) at org.springframework.web.context.ContextLoaderListe ner.contextInitialized(ContextLoaderListener.java: 45) at com.ibm.ws.webcontainer.webapp.WebApp.notifyServle tContextCreated(WebApp.java:1470) at com.ibm.ws.webcontainer.webapp.WebApp.initialize(W ebApp.java:443) at com.ibm.ws.webcontainer.webapp.WebGroup.addWebAppl ication(WebGroup.java:123) at com.ibm.ws.webcontainer.VirtualHost.addWebApplicat ion(VirtualHost.java:146) at com.ibm.ws.webcontainer.WebContainer.addWebApp(Web Container.java:940) at com.ibm.ws.webcontainer.WebContainer.addWebApplica tion(WebContainer.java:893) at com.ibm.ws.runtime.component.WebContainerImpl.inst all(WebContainerImpl.java:167) at com.ibm.ws.runtime.component.WebContainerImpl.star t(WebContainerImpl.java:391) at com.ibm.ws.runtime.component.ApplicationMgrImpl.st art(ApplicationMgrImpl.java:1257) at com.ibm.ws.runtime.component.DeployedApplicationIm pl.fireDeployedObjectStart(DeployedApplicationImpl .java:1076) at com.ibm.ws.runtime.component.DeployedModuleImpl.st art(DeployedModuleImpl.java:547) at com.ibm.ws.runtime.component.DeployedApplicationIm pl.start(DeployedApplicationImpl.java:754) at com.ibm.ws.runtime.component.ApplicationMgrImpl.st artApplication(ApplicationMgrImpl.java:914) at com.ibm.ws.runtime.component.ApplicationMgrImpl$1. run(ApplicationMgrImpl.java:1450) at com.ibm.ws.security.auth.distContextManagerImpl.ru nAs(distContextManagerImpl.java:2721) at com.ibm.ws.security.auth.distContextManagerImpl.ru nAsSystem(distContextManagerImpl.java:2601) at com.ibm.ws.security.core.SecurityContext.runAsSyst em(SecurityContext.java:240) at com.ibm.ws.runtime.component.ApplicationMgrImpl.st artApplication(ApplicationMgrImpl.java:1455) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:60) at java.lang.reflect.Method.invoke(Method.java:391) at javax.management.modelmbean.RequiredModelMBean.inv okeMethod(RequiredModelMBean.java:1366) at javax.management.modelmbean.RequiredModelMBean.inv oke(RequiredModelMBean.java:1012) at mx4j.server.interceptor.InvokerMBeanServerIntercep tor.invoke(InvokerMBeanServerInterceptor.java:233) at mx4j.server.interceptor.DefaultMBeanServerIntercep tor.invoke(DefaultMBeanServerInterceptor.java:128) at mx4j.server.interceptor.SecurityMBeanServerInterce ptor.invoke(SecurityMBeanServerInterceptor.java:86 ) at mx4j.server.interceptor.DefaultMBeanServerIntercep tor.invoke(DefaultMBeanServerInterceptor.java:128) at mx4j.server.interceptor.DefaultMBeanServerIntercep tor.invoke(DefaultMBeanServerInterceptor.java:128) at mx4j.server.interceptor.ContextClassLoaderMBeanSer verInterceptor.invoke(ContextClassLoaderMBeanServe rInterceptor.java:167) at mx4j.server.MX4JMBeanServer.invoke(MX4JMBeanServer .java:1249) at com.ibm.ws.management.AdminServiceImpl$1.run(Admin ServiceImpl.java:1016) at com.ibm.ws.security.util.AccessController.doPrivil eged(AccessController.java:118) at com.ibm.ws.management.AdminServiceImpl.invoke(Admi nServiceImpl.java:932) at com.ibm.ws.management.connector.AdminServiceDelega tor.invoke(AdminServiceDelegator.java:157) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:60) at java.lang.reflect.Method.invoke(Method.java:391) at com.ibm.ws.management.connector.soap.SOAPConnector .invoke(SOAPConnector.java:358) at com.ibm.ws.management.connector.soap.SOAPConnector .service(SOAPConnector.java:211) at com.ibm.ws.management.connector.soap.SOAPConnectio n.handleRequest(SOAPConnection.java:55) at com.ibm.ws.http.HttpConnection.readAndHandleReques t(HttpConnection.java:680) at com.ibm.ws.http.HttpConnection.run(HttpConnection. java:484) at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.j ava:1471)   ---  **Affects:** 2.5 final  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2007-11-28T10:36:56Z","2012-06-19T03:47:15Z"
"","8478","For JSF integration add an ELResolver that resolves spring beans under a new implicit object. [SPR-3798]","**[Mike Hanafey](https://jira.spring.io/secure/ViewProfile.jspa?name=hanafey)** opened **[SPR-3798](https://jira.spring.io/browse/SPR-3798?redirect=false)** and commented  The current 'DelegatingFacesELResolver' is very convenient but it has the arguable disadvantage of mixing JSF managed beans and spring beans in the same namespace.  JSF and JSP already have the concept of implicit objects, and this could be extended in a Spring enabled application to include a spring implicit object. This would improve code clarity because EL expressions like ""#{spring.myBean}"" would be instantly recognizable as a reference to a spring bean (with ""spring"" being the new well know implicit object name).  Implementation is straight forward, and a first pass implemenation follows:  package genomix.play;  import org.springframework.beans.BeansException; import org.springframework.context.ApplicationContext; import org.springframework.web.jsf.FacesContextUtils;  import javax.el.ELContext; import javax.el.ELResolver; import javax.el.PropertyNotWritableException; import javax.faces.context.FacesContext; import java.beans.FeatureDescriptor; import java.util.Iterator;  /** * SpringJsfResolver * `@author` Michael K. Hanafey * `@version` 0.1   */  public class SpringJsfResolver extends ELResolver {      /**      * Using this EL resolver means that a new implicit object is defined with this name.      */     public static final String SPRING_IMPLICIT_OBJECT_NAME = ""spring"";          private ApplicationContext ac;          public Class getCommonPropertyType(final ELContext context, final Object o) {         return null;     }          public Iterator getFeatureDescriptors(final ELContext context, final Object o) {         return null;     }          public Class getType(final ELContext context, final Object base, final Object property) {         final Object bean = myResolution(context, base, property);         if (bean == null) {             return null;         } else {             return bean.getClass();         }     }          public Object getValue(final ELContext context, final Object base, final Object property) {         return myResolution(context, base, property);     }          public boolean isReadOnly(final ELContext context, final Object base, final Object property) {         if (myResolution(context, base, property) == null) {             return true;         } else {             return true;         }     }          public void setValue(final ELContext context, final Object base, final Object property, final Object newValue) {         if (myResolution(context, base, property) != null) {             throw new PropertyNotWritableException(""SpringBean top level property is not settable. Propery: "" + property);         }     }          private Object myResolution(final ELContext context, final Object base, final Object property) {         if (ac == null) {             final FacesContext ctx = (FacesContext) context.getContext(FacesContext.class);             ac = FacesContextUtils.getWebApplicationContext(ctx);         }              if (base == null) {             final String name = (String) property;             if (SPRING_IMPLICIT_OBJECT_NAME.equals(name) && ac != null) {                 context.setPropertyResolved(true);                 return ac;             } else {                 return null;             }         } else {             if (base != ac) {                 return null;             } else {                 final String name = property.toString();                 try {                     final Object bean = ac.getBean(name);                     context.setPropertyResolved(true);                     return bean;                 } catch (BeansException e) {                     return null;                 }             }         }     }  }   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-23T03:09:44Z","2012-06-19T09:37:39Z"
"","8680","XSD configuration docs have invalid XML in examples [SPR-4000]","**[Mike Dillon](https://jira.spring.io/secure/ViewProfile.jspa?name=md5)** opened **[SPR-4000](https://jira.spring.io/browse/SPR-4000?redirect=false)** and commented  In the Spring configuration examples in docs/reference/src/xsd-configuration.xml, the first two code listings have XML comments before the XML declaration. These comments should be moved after the XML declaration since comments before the declaration create and XML document that is not well-formed.   ---  **Affects:** 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-10-23T13:28:24Z","2012-06-19T03:47:18Z"
"","8681","NullPointerException in AbstractJasperReportsView if no default report configured. [SPR-4001]","**[Mike Cunneen](https://jira.spring.io/secure/ViewProfile.jspa?name=cunneen)** opened **[SPR-4001](https://jira.spring.io/browse/SPR-4001?redirect=false)** and commented  This is related to the fix for #8586 , where reports are dynamically retrieved rather than statically configured.  The renderMergedOutputModel() method calls exposeLocalizationContext(Map, HttpServletRequest), which contains a reference to this.report.getResourceBundle() .  This reference will cause a NullPointerException.  A temporary workaround is to override the exposeLocalizationContext(Map, HttpServletRequest) method to change the following line :      if (this.report.getResourceBundle() == null) {  To:      if (this.getReport()!=null && this.getReport().getResourceBundle() == null) {  However it would be nice if this change was made in the AbstractJasperReportsView so we don't have to override it.  ---  **Affects:** 2.0.7","closed","type: bug,","spring-projects-issues","2007-10-23T17:01:59Z","2019-01-11T16:18:19Z"
"","8586","AbstractJasperReportsView : allowing multiple reports and reports other than wrapped-urls. [SPR-3906]","**[Mike Cunneen](https://jira.spring.io/secure/ViewProfile.jspa?name=cunneen)** opened **[SPR-3906](https://jira.spring.io/browse/SPR-3906?redirect=false)** and commented  This is really 2 issues: (1) AbstractJasperReportsView assumes that there will only be a single jasper report FILE per view instance, and that the instance is wrapping a URL.  Our report templates are kept in the database, and managed by a separate component.  No great issue as we can override fillReport(Map model) to manage our own report templates, but :  (2) initApplicationContext() is declared as ""protected final"", while making the same assumptions (holding references to ""this.report"" and ""this.getUrl()"").  So I've had to hack together a dummy URL containing an empty report in order to use the other JasperReports features of the JasperReportsPdfView.  I propose removing the ""final"" modifier from AbstractJasperReportsView.initApplicationContext() , since it prevents subclasses from having customised context initialisation, which is a restriction that should not be enforced from within an abstract class.  An alternative would be to refactor the AbstractJasperReportsView into two abstract classes, one providing the core Jasper reports functionality and a subclass which is a URL-based view.   ---  **Affects:** 2.0.6, 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-23T15:32:07Z","2012-06-19T03:47:09Z"
"","8685","does not work without ""path"" attribute [SPR-4005]","**[Mike Bingham](https://jira.spring.io/secure/ViewProfile.jspa?name=mbingham)** opened **[SPR-4005](https://jira.spring.io/browse/SPR-4005?redirect=false)** and commented  According to the JavaDocs for the  tag, it should be possible to output object-level errors only by omitting the ""path"" attribute (option 2 in the JavaDoc):  http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/web/servlet/tags/form/ErrorsTag.html  For example:    ...   This does not work in Spring 2.5-rc1. Instead, the following exception is generated:  org.springframework.beans.NotReadablePropertyException: Invalid property '' of bean class [accounts.Account]: Bean property '' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:544) org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:536) org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:78) org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:337) org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:118) org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:171) org.springframework.web.servlet.tags.form.ErrorsTag.shouldRender(ErrorsTag.java:131) org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag.writeTagContent(AbstractHtmlElementBodyTag.java:46) org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:90) org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:77) org.apache.jsp.WEB_002dINF.views.editAccountForm_jsp._jspService(editAccountForm_jsp.java:111) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:803) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:393) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:320) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266) javax.servlet.http.HttpServlet.service(HttpServlet.java:803) org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:239) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1145) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:882) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:795) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:476) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:431) javax.servlet.http.HttpServlet.service(HttpServlet.java:690) javax.servlet.http.HttpServlet.service(HttpServlet.java:803)  The same code works fine in Spring 2.0.7.  It looks like the implementation of AbstractDataBoundFormTag.getBindStatus() changed in a such a way as to no longer support a null or empty path (which is the case here), but not sure whether this is the true source of the problem.  This issue was raised in the following support forum thread:  http://forum.springframework.org/showthread.php?t=45278  Thanks.   ---  **Affects:** 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-10-24T11:33:22Z","2012-06-19T03:47:16Z"
"","8650","Autowiring prototype bean constructor with prototype dependency doesn't work as expected in Spring 2.0+ [SPR-3970]","**[Mike Bingham](https://jira.spring.io/secure/ViewProfile.jspa?name=mbingham)** opened **[SPR-3970](https://jira.spring.io/browse/SPR-3970?redirect=false)** and commented  It appears that the behavior of the Spring container when autowiring the constructor for a prototype bean with a prototype bean dependency changed between Spring 1.2.9 and Spring 2.0.6.  For example, take the following configuration:                  And the following test case:      public void testPrototypeConstructorAutowire() {     	PojoUser pu1 = (PojoUser)applicationContext.getBean(""useAutowire"");     	PojoUser pu2 = (PojoUser)applicationContext.getBean(""useAutowire"");	     	assertNotSame(pu1.getPojo(), pu2.getPojo());				     }  In Spring 1.2.9, this test passes, because a new instance of the ""nonSingleton"" bean is created each time a new instance of the ""useAutowire"" prototype bean is retrieved from the application context. However, in Spring 2.0.6, this test fails. New instances of the ""useAutowire"" bean are created each time the getBean() method is called on the application context, but it appears that the same instance of the ""nonSingleton"" bean is being wired into the constructor each time, instead of a new prototype instance as expected. The same behavior was also observed in Spring 2.0.7 and 2.1M4.  Note: if the dependency is autowired into a property ""byType"" instead of the constructor, everything works as expected, and a new instance of the ""nonSingleton"" bean is created each time a new instance of ""useAutowire"" is created.  Not sure if this is expected behavior or not; I was not able to find any specific documentation which described this change from Spring 1.2 to 2.0.  Thanks.   ---  **Affects:** 2.0.6, 2.0.7, 2.1 M4  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2007-10-11T07:40:18Z","2012-06-19T03:47:45Z"
"","8056","Wrong bean configuration xml file header in Spring 2.0.4 PDF Reference Manual : missing data in xsi:schemaLocation [SPR-3372]","**[Mickaël Floc'hlay](https://jira.spring.io/secure/ViewProfile.jspa?name=dirtyhenry)** opened **[SPR-3372](https://jira.spring.io/browse/SPR-3372?redirect=false)** and commented  On page 30 of the 2.0.4 Reference Manual, the \ tag is :  \  Using this tag as is leads to an error (cf. thread in forum : http://forum.springframework.org/showthread.php?t=34417)  The correct \ tag should be :  \  ---  **Affects:** 2.0.4  **Issue Links:** - #8094 Problems with definition of bean namespace in several examples (_**""is duplicated by""**_) - #8114 XML shown in section 3.2.1.1 of documentation missing attribute text (_**""is duplicated by""**_) - #8093 XML shown in section 3.2.1.1 of documentation missing attribute text (_**""is duplicated by""**_) - #8207 Doc: Still problems with definition of bean namespace in several examples","closed","type: bug,","spring-projects-issues","2007-04-13T00:12:44Z","2019-01-11T18:15:15Z"
"","8585","PortletSession is null when using Spring instead of Generic Portlet [SPR-3905]","**[Michal Capo](https://jira.spring.io/secure/ViewProfile.jspa?name=capo)** opened **[SPR-3905](https://jira.spring.io/browse/SPR-3905?redirect=false)** and commented  When I use Spring Portlet support for developing portlets I get got this problem:  (handleAction) request.getPortletSession().setAttribute(""a"", ""a"", PortletSession.APPLICATION_SCOPE); (handleRender in the same portlet) String a = request.getPortletSession().getAttribute(""a"", PortletSession.APPLICATION_SCOPE); (variable 'a' is null)  I have attached a little test portal. You can run it by following this steps: 1. unzip this file 2. run 'mvn eclipse:eclipse' (or your other favorit IDE) 3. run/debug file 'src/main/java/org/apache/pluto/test/test1/TestPortal.java' (within Eclipse) 4. open you favorite browser and go to 'http://localhost:8080/test1/test-portal/index.jsp'    OK I know this is not simply... but you can debug portlets if you want  Problem: - click on the first 'click me' link -> everything is ok - now click on the second one 'click me' -> hups is ok - restart TestPortal - click on the second 'click me' link and you got exception    ---  **Affects:** 2.0.6  **Attachments:** - [test1.zip](https://jira.spring.io/secure/attachment/12926/test1.zip) (_18.52 kB_) - [test1a.zip](https://jira.spring.io/secure/attachment/12948/test1a.zip) (_6.99 kB_)","closed","in: web,","spring-projects-issues","2007-09-23T09:45:03Z","2019-01-11T21:10:47Z"
"","8718","Method convertValueToRequiredType of SingleColumnRowMapper ignores Parameter requiredType but uses instance variable instead [SPR-4039]","**[Michael Hunger](https://jira.spring.io/secure/ViewProfile.jspa?name=mesirii)** opened **[SPR-4039](https://jira.spring.io/browse/SPR-4039?redirect=false)** and commented  the protected method convertValueToRequiredType ignores its supplied parameter requiredType and uses the instance variable required type instead. This should be fixed by either removing the parameter or using it.  Perhaps the Methods convertValueToRequiredType, getColumnValue and the part of mapRow that calls them should be moved to a separate Util Class so that they can be used outside the  SingleColumnRowMapper.  Thanks  Michael   ---  **Affects:** 2.0.7, 2.5 RC1","closed","in: core,","spring-projects-issues","2007-11-02T11:10:06Z","2012-06-19T03:47:50Z"
"","8170","New superclass: AbstractJExcelViewWithGcDisabled [SPR-3487]","**[Michael Duffy](https://jira.spring.io/secure/ViewProfile.jspa?name=duffymo)** opened **[SPR-3487](https://jira.spring.io/browse/SPR-3487?redirect=false)** and commented  AbstractJExcelView enables subclasses to create a JExcel view.  The only problem is that the WritableWorkbook reference that's passed in does not have GC disabled.  The Yahoo! mailing lists for JExcel list this as a common problem, particularly for WebLogic users:  http://tech.groups.yahoo.com/group/JExcelApi/msearch?query=GC+disable&submit=Search&charset=UTF-8  Andy Khan's WorkbookSettings class has a method setGCDisabled() that allows GC to be disabled.  Unfortunately, the renderMergedOutputModel() method in AbstractJExcelView is declared final, so there's no way to override the call to the Workbook factory to pass in the appropriate WorkbookSettings.  To solve the problem, I ended up writing a new abstract super class (see below).  Perhaps there's a way to modify the existing AbstractJExcelView to turn off GC.  package sysadmin.view;  import org.springframework.web.servlet.view.AbstractView; import jxl.WorkbookSettings; import jxl.Workbook; import jxl.write.WritableWorkbook;  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.util.Map; import java.io.OutputStream;  /** * Extends AbstractView to allow us to disable GC with WorkbookSettings  * Date: May 14, 2007  * Time: 9:25:55 AM   \*/   public abstract class AbstractJExcelViewWithGcDisabled extends AbstractView   {   /**    * The content type for an Excel response     */     private static final String CONTENT_TYPE = ""application/vnd.ms-excel"";     private static final WorkbookSettings DISABLE_GC_SETTINGS;    static   {   DISABLE_GC_SETTINGS = new WorkbookSettings();   DISABLE_GC_SETTINGS.setGCDisabled(true);   }    protected AbstractJExcelViewWithGcDisabled()   {   super();    setContentType(CONTENT_TYPE);   }    /**    * Renders the Excel view, given the specified model.     */     protected final void renderMergedOutputModel(Map model, HttpServletRequest request, HttpServletResponse response)     throws Exception     {     // Set the content type and get the output stream.     response.setContentType(getContentType());     OutputStream out = response.getOutputStream();      // Create a new workbook from scratch with GC disabled     WritableWorkbook workbook = Workbook.createWorkbook(out, DISABLE_GC_SETTINGS);     logger.debug(""Creating Excel Workbook from scratch with GC disabled"");      buildExcelDocument(model, workbook, request, response);      workbook.write();     out.flush();     workbook.close();     }    /**    * Subclasses must implement this method to create an Excel Workbook   * document, given the model.   * `@param` model    the model Map   * `@param` workbook the Excel workbook to complete   * `@param` request  in case we need locale etc. Shouldn't look at attributes.   * `@param` response in case we need to set cookies. Shouldn't write to it.   * `@throws` Exception in case of failure     */     protected abstract void buildExcelDocument(     Map model, WritableWorkbook workbook, HttpServletRequest request, HttpServletResponse response)     throws Exception;     }    ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-05-16T00:21:40Z","2012-06-19T09:37:23Z"
"","8141","Importing the s:action from struts2 [SPR-3458]","**[Michael Courcy](https://jira.spring.io/secure/ViewProfile.jspa?name=michaelcourcy)** opened **[SPR-3458](https://jira.spring.io/browse/SPR-3458?redirect=false)** and commented  For my project I usually use spring mvc and I' quite happy with it.  But recently I had to work on a project built on struts 2 for the presentation layer. And I must say that I meet some very cool new ideas.  Especialy this one the s:action tag.  It allow you to query a controller from a jsp and you get back the model inside the view.  It is extremly useful and really clean.  I think it could be nice to integrate this in the frameworK.   --- No further details from [SPR-3458](https://jira.spring.io/browse/SPR-3458?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-05-06T22:25:44Z","2012-06-19T09:37:35Z"
"","8283","Typo in Spring documentation, Section 15.4.1 [SPR-3601]","**[Michael Collins](https://jira.spring.io/secure/ViewProfile.jspa?name=mac88)** opened **[SPR-3601](https://jira.spring.io/browse/SPR-3601?redirect=false)** and commented  In Section 15.4.1. of the documentation the Spring context file ""action-servlet.xml"" file is referenced as ""action-servlet.xml.xml"" in the example, i.e with an extra "".xml"" appended.   ---  **Affects:** 2.0.5, 2.1 M2","closed","type: bug,","spring-projects-issues","2007-06-19T08:31:56Z","2012-06-19T03:51:04Z"
"","8274","Documentation for @Transactional annotation incorrectly states that it only applies to public methods [SPR-3592]","**[Meetesh Karia](https://jira.spring.io/secure/ViewProfile.jspa?name=tesh11)** opened **[SPR-3592](https://jira.spring.io/browse/SPR-3592?redirect=false)** and commented  The online Spring documentation indicates that the `@Transactional` annotation can only be used on public and private methods but as of Spring 2.0.1, it appears as though it can successfully be used on protected and private methods as well.   ---  **Affects:** 2.0.5, 2.1 M1, 2.1 M2","closed","type: bug,","spring-projects-issues","2007-06-15T03:26:31Z","2012-06-19T03:50:49Z"
"","8422","Some classes used by Pitchfork seems no more visible in Spring 2.1 m3 [SPR-3741]","**[Maurizio Albari](https://jira.spring.io/secure/ViewProfile.jspa?name=malbari)** opened **[SPR-3741](https://jira.spring.io/browse/SPR-3741?redirect=false)** and commented  The following classes, that were public in Spring 2.0.2 - used by Pitchfork 1.0 m4 - seems no more visible: - org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder - org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper - org.springframework.aop.framework.ReflectiveMethodInvocation   In order to have Pitchfork 1.0 m4 working with Spring 2.1, please consider to restore them as public classes.    ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-05T21:57:07Z","2012-06-19T03:50:38Z"
"","8573","Can't use interface on intercepted advice. [SPR-3893]","**[Mattias Ask](https://jira.spring.io/secure/ViewProfile.jspa?name=mattias.ask)** opened **[SPR-3893](https://jira.spring.io/browse/SPR-3893?redirect=false)** and commented  I have a trace advice that is put on a cache advice. This works fine (enter/exit-trace on my cache method when it is invoked) as long as the cache advice doesn't implement an interface. When it does I get the following stack trace:  Exception in thread ""main"" org.springframework.aop.AopInvocationException: Mismatch on arguments to advice method [public java.lang.Object se.jayway.cache.MethodSignatureCacheAdvice.cache(org.aspectj.lang.ProceedingJoinPoint) throws java.lang.Throwable]; pointcut expression [org.aspectj.weaver.internal.tools.PointcutExpressionImpl@15f7107]; nested exception is java.lang.IllegalArgumentException: object is not an instance of declaring class at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:616) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:602) at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:64) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:77) at se.jayway.utils.TraceAdvice.trace(TraceAdvice.java:17) at se.jayway.utils.TraceAdvice$$FastClassByCGLIB$$7cf346bb.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:694) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:629) at se.jayway.utils.TraceAdvice$$EnhancerByCGLIB$$816e6d24.trace(\) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:613) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:602) at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:64) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy1.findByFirstName(Unknown Source) at se.jayway.employee.person.service.PersonServiceImpl.printPeopleByFirstName(PersonServiceImpl.java:24) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:301) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:77) at se.jayway.utils.TraceAdvice.trace(TraceAdvice.java:17) at se.jayway.utils.TraceAdvice$$FastClassByCGLIB$$7cf346bb.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149) at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:694) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:629) at se.jayway.utils.TraceAdvice$$EnhancerByCGLIB$$816e6d24.trace(\) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:613) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:602) at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:64) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:89) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy2.printPeopleByFirstName(Unknown Source) at se.jayway.employee.EmployeeApplication.enterEmplyeesToCreate(EmployeeApplication.java:40) at se.jayway.employee.EmployeeApplication.main(EmployeeApplication.java:29) Caused by: java.lang.IllegalArgumentException: object is not an instance of declaring class at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:613) ... 57 more    ---  **Affects:** 2.1 M4  **Attachments:** - [AOP-problem.rar](https://jira.spring.io/secure/attachment/12971/AOP-problem.rar) (_9.10 MB_)","closed","in: core,","spring-projects-issues","2007-09-19T17:47:40Z","2019-01-11T19:19:57Z"
"","8514","Strange code in org.springframework.jdbc.core.ColumnMapRowMapper [SPR-3834]","**[Mattias Ask](https://jira.spring.io/secure/ViewProfile.jspa?name=mattias.ask)** opened **[SPR-3834](https://jira.spring.io/browse/SPR-3834?redirect=false)** and commented  I found a funny thing in ""org.springframework.jdbc.core.ColumnMapRowMapper"". The method ""getColumnKey"" looks like this:      protected String getColumnKey(String columnName) {         return columnName;     }  Maybe I just don't get it...  The code is the same in 1.2.7 and 2.0.6.   --- No further details from [SPR-3834](https://jira.spring.io/browse/SPR-3834?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-09-02T17:39:39Z","2007-09-05T08:43:44Z"
"","8295","HibernateTemplate Bulk Update Extension [SPR-3613]","**[Matthias Wuttke](https://jira.spring.io/secure/ViewProfile.jspa?name=matthiaswuttke)** opened **[SPR-3613](https://jira.spring.io/browse/SPR-3613?redirect=false)** and commented  I regularly use named parameters with Hibernate and appreciate HibernateTemplate.findByNamedParam(final String queryString, final String[] paramNames, final Object[] values). For orthogonality reasons, I suggest adding a bulkUpdate variant to HibernateTemplate that also supports named parameters. It is essentially a combination of the present bulkUpdate and findByNamedParam methods.  public class ExtHibernateTemplate extends HibernateTemplate {      public ExtHibernateTemplate(SessionFactory sessionFactory) {     	super(sessionFactory);     }          public int bulkUpdate(final String queryString, final String[] paramNames, final Object[] values)     throws DataAccessException {     	if (paramNames.length != values.length) {     		throw new IllegalArgumentException(""Length of paramNames array must match length of values array"");     	}     	     	Integer updateCount = (Integer) execute(new HibernateCallback() {     		public Object doInHibernate(Session session) throws HibernateException {     			Query queryObject = session.createQuery(queryString);     			prepareQuery(queryObject);     			for (int i = 0; i < values.length; i++) {     				applyNamedParameterToQuery(queryObject, paramNames[i], values[i]);     			}     			return new Integer(queryObject.executeUpdate());     		}     	}, true);     	return updateCount.intValue();     }  }  public class ExtHibernateDaoSupport extends HibernateDaoSupport {      @Override     protected HibernateTemplate createHibernateTemplate(SessionFactory sessionFactory) {     	return new ExtHibernateTemplate(sessionFactory);     }  }   ---  **Attachments:** - [ExtHibernateDaoSupport.java](https://jira.spring.io/secure/attachment/12687/ExtHibernateDaoSupport.java) (_572 bytes_) - [ExtHibernateTemplate.java](https://jira.spring.io/secure/attachment/12686/ExtHibernateTemplate.java) (_1.39 kB_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-06-22T20:01:58Z","2019-01-13T22:42:46Z"
"","8079","Doc: 'ORA-01795: maximum number of expressions in a list is 1000'  for named parameters with collections  [SPR-3396]","**[Matthias Berhorst](https://jira.spring.io/secure/ViewProfile.jspa?name=matthias.berhorst)** opened **[SPR-3396](https://jira.spring.io/browse/SPR-3396?redirect=false)** and commented  Using collections with more than 1000 Elements for named parameters in JDBC statements with the NamedParemeterJDBCTemplate (and probably others) (e.g. for SELECT * FROM TableX where TableX.column IN (:paremeter1)) produces the following oracle error:  ORA-01795: maximum number of expressions in a list is 1000   ---  **Affects:** 2.0.4","closed","type: documentation,","spring-projects-issues","2007-04-19T22:09:27Z","2012-06-19T03:51:02Z"
"","8417","Add plug-in point for URL building strategies in UrlBasedViewResolver in the form of UrlBasedViewResolverUrlBuilder [SPR-3736]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-3736](https://jira.spring.io/browse/SPR-3736?redirect=false)** and commented  The only URL building strategy supported by UrlBasedViewResolver is that of prepending a prefix and appending a suffix to the given view name.  I came across a case while integrating Spring MVC into Day Software's Communique 4.2 where not only did I need a different strategy, this new strategy needed the locale.  I created a new interface, org.springframework.web.servlet.view.UrlBasedViewResolverUrlBuilder, with a single method ""String buildUrl(String viewName, Locale locale);"", plus made changes to UrlBasedViewResolver to use the strategy with a backward-compatible default implementation called PrefixSuffixUrlBasedViewResolverUrlBuilder if the user did not specify an urlBuilder property on the UrlBasedViewResolver.  I also deprecated UrlBasedViewResolver#buildView(String) in favor of a new method UrlBasedViewResolver#buildView(String,Locale), since the locale was being unnecessarily dropped, and my URL building strategy required the locale anyway.  I updated all Spring classes that made use of buildView(String) to use buildView(String,Locale), and provided a backward-compatible implementation of buildView(String) that simply delegates to buildView(String,Locale), passing null for the locale.  Note the TODO comment -- perhaps there is a better value to pass than null for locale, but I'll leave that decision to the committers.  All unit tests pass with this change.  Patch follows entry of this issue.  Please review patch, massage if necessary, and apply if deemed worthy.  It could be backported to prior Spring versions (1.x) as well if desired.   ---  **Affects:** 2.0.6  **Attachments:** - [SPR-3736.patch](https://jira.spring.io/secure/attachment/12747/SPR-3736.patch) (_12.70 kB_)","closed","type: enhancement,","spring-projects-issues","2007-08-02T06:59:38Z","2012-06-19T09:37:44Z"
"","8031","Improve binding in MultiActionController [SPR-3347]","**[Matthew Sgarlata](https://jira.spring.io/secure/ViewProfile.jspa?name=sgarlatm)** opened **[SPR-3347](https://jira.spring.io/browse/SPR-3347?redirect=false)** and commented  I was pleasantly surprised to find a bind method in the MultiActionController.  Then I was unpleasantly surprised to see its functionality wasn't as robust as in BaseCommandController.  In particular: - the binding and validation is mixed up in one method (as opposed to being called bindAndValidate in SimpleFormController, which is much clearer) - there are no callbacks (onBind, onBindAndValidate)  Since the MultiActionController does deal with commands, why does it not extend from BaseCommandController?   ---  **Affects:** 2.0.3  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-04-05T04:56:29Z","2012-06-19T09:37:29Z"
"","8861","@RequestMapping paths should match without suffix specified [SPR-4183]","**[Matt Raible](https://jira.spring.io/secure/ViewProfile.jspa?name=mraible)** opened **[SPR-4183](https://jira.spring.io/browse/SPR-4183?redirect=false)** and commented  It'd be great if you didn't have to specify the prefix or suffix of the DispatcherServlet's mapping in a `@RequestMapping`.  http://forum.springframework.org/showthread.php?t=46712   ---  **Affects:** 2.5 final  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-11-28T05:54:32Z","2012-06-19T03:47:04Z"
"","8843","Spring MVC's CommonsMultipartResolver is not compatible with Commons FileUpload 1.2 [SPR-4165]","**[Matt Raible](https://jira.spring.io/secure/ViewProfile.jspa?name=mraible)** opened **[SPR-4165](https://jira.spring.io/browse/SPR-4165?redirect=false)** and commented  [INFO] [talledLocalContainer] java.lang.NoClassDefFoundError: org/apache/commons/io/output/DeferredFileOutputStream [INFO] [talledLocalContainer]   at org.apache.commons.fileupload.disk.DiskFileItemFactory.createItem(DiskFileItemFactory.java:191) [INFO] [talledLocalContainer]   at org.apache.commons.fileupload.FileUploadBase.parseRequest(FileUploadBase.java:350) [INFO] [talledLocalContainer]   at org.apache.commons.fileupload.servlet.ServletFileUpload.parseRequest(ServletFileUpload.java:126) [INFO] [talledLocalContainer]   at org.springframework.web.multipart.commons.CommonsMultipartResolver.parseRequest(CommonsMultipartResolver.java:151)   ---  **Affects:** 2.5 final","closed","status: declined,","spring-projects-issues","2007-11-24T01:50:01Z","2019-01-12T16:39:31Z"
"","8808","Allow ControllerClassNameHandlerMapping and @Controller to work together [SPR-4129]","**[Matt Raible](https://jira.spring.io/secure/ViewProfile.jspa?name=mraible)** opened **[SPR-4129](https://jira.spring.io/browse/SPR-4129?redirect=false)** and commented  It would be nice if ControllerClassNameHandlerMapping and `@Controller` could work together. So the URLs could be determined by ControllerClassNameHandlerMapping and you could simply add `@Controller` and `@Autowired` to your controllers.  The following URL contains more information on this (missing) feature:  http://forum.springframework.org/showthread.php?p=151750  ---  **Affects:** 2.5 RC2  **Issue Links:** - #8757 ControllerBeanNameHandlerMapping to register all Controllers (and ThrowawayControllers) by their bean name regardless of the format of the name or alias.  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-11-19T09:18:25Z","2019-01-11T15:47:31Z"
"","8067","PropertyEditor for passing multiple Resources into an InputStream-based property [SPR-3384]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-3384](https://jira.spring.io/browse/SPR-3384?redirect=false)** and commented  Such would make it easier to inject Spring resources into Spring-agnostic objects.  InputStream represents neutral ground.   ---  **Affects:** 2.0.4  **Attachments:** - [ResourceArrayInputStream.java](https://jira.spring.io/secure/attachment/12542/ResourceArrayInputStream.java) (_2.52 kB_) - [ResourceArrayInputStreamPropertyEditor.java](https://jira.spring.io/secure/attachment/12543/ResourceArrayInputStreamPropertyEditor.java) (_2.22 kB_)","closed","type: enhancement,","spring-projects-issues","2007-04-18T06:14:40Z","2009-02-18T00:37:51Z"
"","8788","Avoid extra polling with DefaultMessageListenerContainer [SPR-4109]","**[Matt Accola](https://jira.spring.io/secure/ViewProfile.jspa?name=mraccola)** opened **[SPR-4109](https://jira.spring.io/browse/SPR-4109?redirect=false)** and commented  Basically, on WAS 6.1 with > 1 Queue/DefaultMessageListenerContainer , the DefaultMessageListenerContainer is polling the queue more frequently than the configured retrieveInterval.  This abnormal behavior does not occur  when only 1 Queue/DefaultMessageListenerContainer is configured.  Please see the details on the following forum post, http://forum.springframework.org/showthread.php?p=151050#post151050.  I will attach a sample EAR file which can be deployed to WAS 6.1.  The following steps need to be taken to run the app:  * Create single server * Create SIB * Add stand-alone server as bus member * Add 2 Destinations on the SIB, * Add 2 Queues w/ proper JNDI names * Add 1 QueueConnectionFactory w/ proper JNDI name * Deploy application    ---  **Affects:** 2.0.5  **Attachments:** - [testbed.ear](https://jira.spring.io/secure/attachment/13111/testbed.ear) (_2.63 MB_)","closed","in: messaging,","spring-projects-issues","2007-11-15T04:15:57Z","2019-01-11T15:43:30Z"
"","8733","ApplicationListener beans eagerly instantiated even when marked as lazy-init [SPR-4054]","**[Mathew Wyatt](https://jira.spring.io/secure/ViewProfile.jspa?name=matw)** opened **[SPR-4054](https://jira.spring.io/browse/SPR-4054?redirect=false)** and commented  When i have a ""prototype"" (defined as prototype in the spring-config) bean which implements the ApplicationContextAware interface, it is eagerly instantiated when the application context is loaded. Which means i have a bean floating around in space which i can not get reference to. It seems poor practice to have a floating unreferenced (unreferenced by me explicitly) bean floating around?... In my case, the floating bean is throwing runtime exceptions, because of dependencies on a swing ancestor component...  see post - http://forum.springframework.org/showthread.php?t=44522&highlight=ApplicationContextAware  ---  **Affects:** 2.0.7  **Issue Links:** - #8790 ApplicationListeners cannot be lazy initialized (_**""is duplicated by""**_) - #9921 Prototype beans that implement ApplicationListener shouldn't be created during container initialization","closed","type: enhancement,","spring-projects-issues","2007-11-06T13:53:51Z","2019-01-11T16:21:43Z"
"","8200","WebSphereTransactionManagerFactoryBean doesn't find the TransactionManagerFactory under WSAD/RAD test server [SPR-3517]","**[Martti von Hertzen](https://jira.spring.io/secure/ViewProfile.jspa?name=hertzen)** opened **[SPR-3517](https://jira.spring.io/browse/SPR-3517?redirect=false)** and commented  The test server that comes with WSAD/RAD has a different classloader hierarchy than the real WebSphere Application Server (I'm using version 5.1). For this reason the org.springframework.transaction.jta.WebSphereTransactionManagerFactoryBean does not find the TransactionManagerFactory when applications are tested with the test server. It works perfectly fine in the real WAS.  I've fixed this by re-implementing the WebSphereTransactionManagerFactoryBean to use the context classloader instead of Class.forName, and this seems to work fine in both environments.      public WebSphereTransactionManagerFactoryBean() throws TransactionSystemException {         ClassLoader cl = Thread.currentThread().getContextClassLoader();         Class clazz;         try {             logger.debug(""Trying WebSphere 5.1+: "" + FACTORY_CLASS_5_1);             clazz = cl.loadClass(FACTORY_CLASS_5_1);  //            clazz = Class.forName(FACTORY_CLASS_5_1); logger.info(""Found WebSphere 5.1+: "" + FACTORY_CLASS_5_1); } catch (ClassNotFoundException ex) { logger.debug(""Could not find WebSphere 5.1/6.0 TransactionManager factory class"", ex); try { logger.debug(""Trying WebSphere 5.0: "" + FACTORY_CLASS_5_0); clazz = cl.loadClass(FACTORY_CLASS_5_0); //                clazz = Class.forName(FACTORY_CLASS_5_0); logger.info(""Found WebSphere 5.0: "" + FACTORY_CLASS_5_0); } catch (ClassNotFoundException ex2) { logger.debug(""Could not find WebSphere 5.0 TransactionManager factory class"", ex2); try { logger.debug(""Trying WebSphere 4: "" + FACTORY_CLASS_4); clazz = cl.loadClass(FACTORY_CLASS_4); //                    clazz = Class.forName(FACTORY_CLASS_4); logger.info(""Found WebSphere 4: "" + FACTORY_CLASS_4); } catch (ClassNotFoundException ex3) { logger.debug(""Could not find WebSphere 4 TransactionManager factory class"", ex3); throw new TransactionSystemException( ""Could not find any WebSphere TransactionManager factory class, "" + ""neither for WebSphere version 5.1+ nor 5.0 nor 4""); } } }          try {             Method method = clazz.getMethod(""getTransactionManager"", (Class[]) null);             this.transactionManager = (TransactionManager) method.invoke(null, (Object[]) null);         }         catch (InvocationTargetException ex) {             throw new TransactionSystemException(                     ""WebSphere's TransactionManagerFactory.getTransactionManager method failed"", ex.getTargetException());         }         catch (Exception ex) {             throw new TransactionSystemException(                     ""Could not access WebSphere's TransactionManagerFactory.getTransactionManager method"", ex);         }     }  I don't know if using the context CL has any potential drawbacks though... I did this ages ago, so I don't remember exactly how the CL hierarchies differed, but I can try to find out if it's important.   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-05-24T00:49:07Z","2012-06-19T03:50:07Z"
"","8171","BeanConfigurerSupport should also call init-method [SPR-3488]","**[Martin Schulz](https://jira.spring.io/secure/ViewProfile.jspa?name=mart1n)** opened **[SPR-3488](https://jira.spring.io/browse/SPR-3488?redirect=false)** and commented  Currently, a bean with a `@configurable` anntotation and a declared init-method, when instantiated using the new operator, will get all properties injected, but the declared init-method will not run.  For us it is very important to be able to initialize singletons using the injected properties, before the bean is usable for the caller.   ---  **Affects:** 2.0.4  **Attachments:** - [patch-init-method.patch](https://jira.spring.io/secure/attachment/12602/patch-init-method.patch) (_997 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-05-16T01:34:36Z","2012-06-19T03:50:26Z"
"","8736","JRExporterParameters for JasperReports that are not strings cannot be supplied via the model [SPR-4057]","**[Martin Rösel](https://jira.spring.io/secure/ViewProfile.jspa?name=mpr)** opened **[SPR-4057](https://jira.spring.io/browse/SPR-4057?redirect=false)** and commented  If JRExporterParameters are not stored as strings in the model they are not merged into the parameter map. When they are stored as strings but are not string Parameters JasperReports throws a ClassCastException. So it is not possible to supply non string parameters via the model.  Problem arises because parameters supplied by the model are not converted with AbstractJasperReportsView.convertParameterValue(), but are merged directly into mergedParameters.  possible solution: change method mergeExporterParameters() of class org.springframework.web.servlet.view.jasperreports.AbstractJasperReportsView      /**      * Merges the configured JRExporterParameters with any specified in the supplied model data.      * JRExporterParameters in the model override those specified in the configuration.      * @see #setExporterParameters(java.util.Map)      */     protected Map mergeExporterParameters(Map model) {     	Map mergedParameters = new HashMap();     	Map convertedExporterParameters = getConvertedExporterParameters();     	if (!CollectionUtils.isEmpty(convertedExporterParameters)) {     		mergedParameters.putAll(convertedExporterParameters);     	}     	for (Iterator it = model.keySet().iterator(); it.hasNext();) {     		Object key = it.next();     		if (key instanceof JRExporterParameter) {     			Object value = model.get(key);     			if (value instanceof String) {                                         // -- fix start     				// mergedParameters contais converted values from the view, but values from     				// the model are directly written into mergedParameters     				// so also convert JRExporterParameter from the model     				Object convertedValue = convertParameterValue((JRExporterParameter)key, value);     				mergedParameters.put(key, convertedValue);                                         // -- fix end     			}     			else {     				if (logger.isWarnEnabled()) {     					logger.warn(""Ignoring exporter parameter ["" + key + ""]: value is not a String"");     				}     			}     		}     	}     	return mergedParameters;     }  thanks Martin   ---  **Affects:** 2.0.7","closed","type: bug,","spring-projects-issues","2007-11-06T21:06:56Z","2012-06-19T03:46:46Z"
"","8173","EhCacheFactoryBean does not allow decorating a named cache defined inside the EHCache XML config files [SPR-3490]","**[Martin Ouellet](https://jira.spring.io/secure/ViewProfile.jspa?name=martino)** opened **[SPR-3490](https://jira.spring.io/browse/SPR-3490?redirect=false)** and commented  In method ""public void afterPropertiesSet()"" of EhCacheFactoryBean, only cache region created on the fly (i.e. they have no named definition in the xml ehcache configuration file) seems to be decorated.   When one defines a named cache, it will never be decorated eventhough one provides a non null CacheEntryFactory property.  We should have these included in the appropriate condition:  if (this.cacheManager.cacheExists(this.cacheName)) { ... Ehcache decoratedCache = decorateCache(this.cache); this.cacheManager.replaceCacheWithDecoratedCache(this.cache, decoratedCache); this.cache = decoratedCache; } else ...  Martin  ---  **Affects:** 2.0.5  **Issue Links:** - #8594 EhCacheFactoryBean.setBlocking doesn't work for named caches. (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2007-05-16T09:11:16Z","2019-01-11T18:00:30Z"
"","8059","Improve error msg in RemoteExport [SPR-3376]","**[Martin Dames](https://jira.spring.io/secure/ViewProfile.jspa?name=specialagent)** opened **[SPR-3376](https://jira.spring.io/browse/SPR-3376?redirect=false)** and commented  A confusing error message in org.springframework.remoting.rmi.RmiServiceExporter.java took hours of investigation, although the error was pretty easy.  I tried to use Spring RMI with a normal Interface and a simple bean. Created the appropriate applicationContext.xml and started the server. I've got the following error msg:  ""Caused by: java.lang.IllegalArgumentException: Service interface [beans.IRemoteInfoBean] needs to be implemented by service [remoteInfoBean] of class [java.lang.String]"".  But the interface/bean infrastructure was correct.... the confusing thing was the ""of class [..]"". I couldn't understand that... I have found my error. It was that used the ""value"" attribute instead of the ""ref"" attr. in my appContext.xml.  \ \ \ \ \  Now I can understand why it was a java.lang.String... well.. changing in ""ref"" and it worked.  To increase the error search for others, it tooked about an hour for me to recheck everything, I'd suggest to put ""You might used ""value"" instead of the ""ref"" attribute in your appContext.xml for the service"".   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-04-15T01:46:30Z","2012-06-19T03:50:58Z"
"","8723","Reference manual: typo in 9.5.8. Advising transactional operations [SPR-4044]","**[Martin Ahrer](https://jira.spring.io/secure/ViewProfile.jspa?name=martinahrer)** opened **[SPR-4044](https://jira.spring.io/browse/SPR-4044?redirect=false)** and commented  First paragraph o fsection 9.5.8 : ""Hhow "" see below  ..""Consider the situation where you would like to execute both transactional and  (to keep things simple) some basic profiling advice. Hhow do you effect this in the context of using ?""...   ---  **Affects:** 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-11-03T22:18:33Z","2012-06-19T03:47:09Z"
"","8858","AOP config ignores the type setting [SPR-4180]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-4180](https://jira.spring.io/browse/SPR-4180?redirect=false)** and commented  The spring aop:pointcut has a type property this property can be regex or aspectj however this property is completly ignored in the code and thus a aop:pointcut block is always interpreted as an AspectJ expression.  There was some discussion in http://forum.springframework.org/showthread.php?t=46739   ---  **Affects:** 2.0.7, 2.5 final","closed","in: core,","spring-projects-issues","2007-11-27T23:54:54Z","2019-01-12T16:39:30Z"
"","8297","Extend the HibernateTemplate with find method which takes a (Detached)CriteriaCreator [SPR-3615]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-3615](https://jira.spring.io/browse/SPR-3615?redirect=false)** and commented  We use some AOP to execute our finder methods. However sometimes using the HQL language we couldn't construct the desired query/logic. Therefor we introduced a CriteriaCreator and DetachedCriteriaCreator and the 4 corresponding methods on the HibernateTemplate. This allowed us to create some classes which generated the (Detached)Criteria and execute them directly on the HibernateTemplate.  Maybe it is something to include in Spring 2.1.   ---  **Affects:** 2.0.6, 2.1 M2  **Attachments:** - [HibernateCriteriaCreators.jar](https://jira.spring.io/secure/attachment/12689/HibernateCriteriaCreators.jar) (_2.23 kB_)","closed","type: enhancement,","spring-projects-issues","2007-06-24T19:34:06Z","2012-06-19T09:37:21Z"
"","8100","aop:declare-parents only allows to specify a default-impl class, a reference to a Spring bean would be much prefered. [SPR-3417]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-3417](https://jira.spring.io/browse/SPR-3417?redirect=false)** and commented  In our current project I wanted to use Introductions. We already use the aop:config block(s) quite extensivly. We decided to use this block also for the .  However this alows only for 3 parameters to be specified types-matching=""[aspectj expression]"" implement-interface=""[interface to introduce]"" default-impl=""[Class of the default implementation]""  However in our default implementation (default-impl) we need to have some beans injected. For now we created a patchy solution with a singleton which holds a reference to the applicationContext. At construction time/initializing time we use this to retrieve the desired beans.  However what I would like to do is to wire up this delegate from my spring configuration and use that in our  tag.  Something like this.  \ \ \    ---  **Affects:** 2.0.4  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-04-26T01:29:45Z","2019-01-11T17:42:37Z"
"","8015","Suppressing validation when there are bind errors [SPR-3330]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-3330](https://jira.spring.io/browse/SPR-3330?redirect=false)** and commented  In our controllers, which mostly extends SimpleFormController we use the setRequiredFields method on the DataBinder to set the list of required fields. We expected that when one or more of the required fields wasn't set the validation would not occur. We expected that setting the required fields would result in binding errors which suppress validation.  We managed to suppres this behavior by implementing the onBind method, in this method we set a attribute on the request and next in the suppressValidation method we check this attribute. However it would be much easier to enable/disable validation by checking errors if the suppressValidation method also had a variaty which had a BindException as a parameter, just as the onBind method has. This makes it much easier to react on bind errors.  We opt for a suppressValidation method with the following signature and default implementation  protected boolean suppressValidation(HttpServletRequest request, Object command, BindException errors) { return suppressValidation(request, command); }  The bindAndValidate method would have also to change to include this change  protected final ServletRequestDataBinder bindAndValidate(HttpServletRequest request, Object command) throws Exception {      ServletRequestDataBinder binder = createBinder(request, command);     BindException errors = new BindException(binder.getBindingResult());     if (!suppressBinding(request)) {     	binder.bind(request);     	onBind(request, command, errors);     	if (this.validators != null && isValidateOnBinding() && !suppressValidation(request, command, errors)) {     		for (int i = 0; i < this.validators.length; i++) {     			ValidationUtils.invokeValidator(this.validators[i], command, errors);     		}     	}     	onBindAndValidate(request, command, errors);     }     return binder;  }   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-04-01T17:50:35Z","2012-06-19T03:50:59Z"
"","8421","ApplicationContext with jar-specific ClassLoader [SPR-3740]","**[Markus](https://jira.spring.io/secure/ViewProfile.jspa?name=ceeper)** opened **[SPR-3740](https://jira.spring.io/browse/SPR-3740?redirect=false)** and commented  Spring offers the ClassPathXmlApplicationContext, which loads resources from classpath.  Two independent java modules (e.g. frameworks) take use of a spring.xml resource located in the corresponding jar. Both modules are put to the classpath, causing one module to find the wrong spring.xml.  Solution: A third class ClassLoaderContext, with uses the default class-loader.  => Java uses a jar-class-loader for any jar file. If the resource is not found, the parent class-loader (classpath) is used. Class-Loaders are chained up to the java boot-classer loader.   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-03T08:18:20Z","2012-06-18T12:44:59Z"
"","8065","p namespace's -ref suffix may conflict with legal property names [SPR-3382]","**[Marko Topolnik](https://jira.spring.io/secure/ViewProfile.jspa?name=mtopol)** opened **[SPR-3382](https://jira.spring.io/browse/SPR-3382?redirect=false)** and commented  There is a potential problem with the following situation in Spring 2.0 concerning the p-namespace and the associated -ref suffix on property names. If I have a simple bean like this one:  public class TestBean { private String m_userPref; public void setUserPref(String p_text) { m_userPref = p_text; } }  I can configure it in XML like this:  \  or, and this is supposed to be just a matter of personal taste, like this:  \  But, If I happen to also have a property that keeps a ""user reference"" and call it userRef, I am in trouble if my taste is inclined towards the latter style: now I would need to write  \  Which would fail with the error ""No bean named 'User Reference' is defined"".   ---  **Affects:** 2.0.4  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2007-04-17T05:02:57Z","2012-06-19T03:50:18Z"
"","8648","We used 5 databases in a Spring MVC application developed using Spring 2.0.5 and Hibernate3.2. We created 5 different session factories by configuring 5 instances of LocalSessionFactoryBean. However it did not work unless one of the beans was named "".... [SPR-3968]","**[Mark Wei](https://jira.spring.io/secure/ViewProfile.jspa?name=mark_wei)** opened **[SPR-3968](https://jira.spring.io/browse/SPR-3968?redirect=false)** and commented  We used 5 databases in a Spring MVC application developed using Spring 2.0.5 and Hibernate3.2. We created 5 different session factories by configuring 5 instances of org.springframework.orm.hibernate3.LocalSessionFactoryBean. The id of the beans (LocalSessionFactoryBean) was named ""sessionFactoryAA"", ""sessionFactoryBB"", ""sessionFactoryCC"", etc. However it did not work unless one of the bean id was named ""sessionFactory"", otherwise, an error ""No bean named 'sessionFactory' is defined"" was logged even the application could be deployed without any errors.  If any one of the session factory bean was named ""sessionFactory"", the application was able to run, the program ws able to connect to 5 different databases and perform simple HQL queries. However only that one bean named ""sessionFactory"" allowed complex HQL queries that returned collections. All others got error message ""could not initialize proxy - the owning Session was closed"" even lazy loading was set to true.  Could you please help figure out what might cause the problem, or what I might miss? Or could you please show me how to fix this problem?  Thanks.  Mark  p.s. The following is an example for session factory configuration (other sessionfactory beans configuration are similar):  ######################  \  		\\\  		\  		\ 			\com/mtvi/ucsa/model/hbm/cms/comedy/CmsAssociationType.hbm.xml\ 			\com/mtvi/ucsa/model/hbm/cms/comedy/CmsBitRate.hbm.xml\ ........ (more items) 		\ 		\  		\  		\  			  \org.hibernate.dialect.SybaseDialect\ 			  \true\ 		\  		\  \    ---  **Affects:** 2.0.5","closed","in: core,","spring-projects-issues","2007-10-11T06:55:32Z","2019-01-12T16:39:46Z"
"","8388","Upgrade spring.jar from 2.0.5 to 2.0.6 causes IllegalArgumentException loading Hibernate mappings from different classloaders [SPR-3707]","**[Mark Stralka](https://jira.spring.io/secure/ViewProfile.jspa?name=mstralka)** opened **[SPR-3707](https://jira.spring.io/browse/SPR-3707?redirect=false)** and commented  In my application all Spring JARs and dependencies are loaded on the application server's classpath (because several web apps share the same framework we built on top of spring).  In the web application there are several Java classes with Hibernate mapping files, so the web app's ""sessionFactory"" bean has the ""mappingLocations"" property configured to map some Hibernate mappings from the JARs on the server classpath and some in the web application's classes folder. For example: \classpath:com/company/common/model/\*.hbm.xml\ \ \classpath:com/company/webapp/model/*.hbm.xml\ \  This worked fine until I tried to replace spring 2.0.5 with spring 2.0.6.  When I dropped in the new JAR file (without changing any other dependencies - maybe I need to replace one or more dependencies that are required to be updated from 2.0.5 to 2.0.6???), I get the following error, so I think it's probably a change to how Spring works with ClassLoaders?:  Root cause follows. org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessException details (1) are: PropertyAccessException 1: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.util.ArrayList] to required type [org.springframework.core.io.Resource[]] for property 'mappingLocations'; nested exception is java.lang.IllegalArgumentException: Could not resolve resource location pattern [classpath:com/company/webapp/model/*.hbm.xml]: The filename, directory name, or volume label syntax is incorrect Caused by: java.lang.IllegalArgumentException: Could not resolve resource location pattern [classpath:com/company/webapp/model/*.hbm.xml]: The filename, directory name, or volume label syntax is incorrect at org.springframework.core.io.support.ResourceArrayPropertyEditor.setValue(ResourceArrayPropertyEditor.java:112) at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:275) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:192) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:138) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:815) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:645) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:78) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:59) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1126) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:861) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:421) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:261) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:109) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1099) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:861) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:421) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:261) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:109) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1099) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:861) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:421) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:261) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:109) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:281) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:131) at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:389) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:120) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:799) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:717) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:384) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:244) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:187) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.springframework.web.context.StartupListener.contextInitialized(StartupListener.java:121) at org.springframework.web.context.StartupListener.contextInitialized(StartupListener.java:15) at weblogic.servlet.internal.WebAppServletContext$FireContextListenerAction.run(WebAppServletContext.java:6781) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) at weblogic.servlet.internal.WebAppServletContext.notifyCreated(WebAppServletContext.java:1681) at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:3255) at weblogic.servlet.internal.WebAppServletContext.setStarted(WebAppServletContext.java:5949) at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:862) at weblogic.j2ee.J2EEApplicationContainer.start(J2EEApplicationContainer.java:2127) at weblogic.j2ee.J2EEApplicationContainer.activate(J2EEApplicationContainer.java:2168) at weblogic.management.deploy.slave.SlaveDeployer$ComponentActivateTask.activateContainer(SlaveDeployer.java:2503) at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.doCommit(SlaveDeployer.java:2421) at weblogic.management.deploy.slave.SlaveDeployer$Task.commit(SlaveDeployer.java:2138) at weblogic.management.deploy.slave.SlaveDeployer$Task.checkAutoCommit(SlaveDeployer.java:2237) at weblogic.management.deploy.slave.SlaveDeployer$Task.prepare(SlaveDeployer.java:2132) at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.prepare(SlaveDeployer.java:2384) at weblogic.management.deploy.slave.SlaveDeployer.processPrepareTask(SlaveDeployer.java:866) at weblogic.management.deploy.slave.SlaveDeployer.prepareDelta(SlaveDeployer.java:594) at weblogic.management.deploy.slave.SlaveDeployer.prepareUpdate(SlaveDeployer.java:508) at weblogic.drs.internal.SlaveCallbackHandler$1.execute(SlaveCallbackHandler.java:25) at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:219) at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:178)  ---  **Affects:** 2.0.6, 2.1 M1, 2.1 M2  **Issue Links:** - #8468 PathMatchingResourcePatternResolver.doFindPathMatchingJarResources can't work in weblogic 9.2 - #8595 PathMatchingResourcePatternResolver cannot find app context files in jars by way of regular expression within Weblogic 8.1","closed","in: core,","spring-projects-issues","2007-07-20T08:33:55Z","2019-01-11T19:31:12Z"
"","8007","Add a batchUpdate method to namedParameterJdbcTemplate [SPR-3322]","**[Mark St. John](https://jira.spring.io/secure/ViewProfile.jspa?name=mstjohn)** opened **[SPR-3322](https://jira.spring.io/browse/SPR-3322?redirect=false)** and commented  To add batch updating support to NamedParameterJdbcTemplate, the following method could be added to it: public void batchUpdate(String sql, NamedParameterBatchPreparedStatementSetter npbpss) throws DataAccessException  NamedParameterBatchPreparedStatementSetter would be a new Interface that behaves like BatchPreparedStatement except that its setValues method would look like the following: public void setValues(PreparedStatement ps, Map paramMap)  paramMap would contain the parameter name as the key, and an array of objects to substitute as the value  ---  **Issue Links:** - #9835 Discrepancy between sql parsing in SimpleJdbcTemplate  and NamedParameterJdbcTemplate when doing batchUpdates  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4105957596d557cf4225e814a79f036a525a9f64, https://github.com/spring-projects/spring-framework/commit/0d5c9c1b7514403f04fbae7b567c03daf4365e53, https://github.com/spring-projects/spring-framework/commit/f4e75deb0a01996003d384d5e44078231cee9e0d  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-03-29T14:32:45Z","2019-01-11T18:13:54Z"
"","8137","Pluggable Message Serialization For JMS Remoting [SPR-3454]","**[Mark Spitzer](https://jira.spring.io/secure/ViewProfile.jspa?name=mspitzer)** opened **[SPR-3454](https://jira.spring.io/browse/SPR-3454?redirect=false)** and commented  Can you add a MessageConverter property to both JmsInvokerProxyFactoryBean and JmsInvokerServiceExporter?  Doing this would offer more control over the form that the message takes before being sent to the destination as well as when they are received?  I was looking to see if the message adapter approach could be used instead on the server-side but it didn't seem possible.  Thanks for considering,  Mark   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-05-04T07:57:39Z","2012-06-19T03:51:00Z"
"","8596","Add better 'plain' JSP support. [SPR-3916]","**[Mark R. Baird](https://jira.spring.io/secure/ViewProfile.jspa?name=mbaird)** opened **[SPR-3916](https://jira.spring.io/browse/SPR-3916?redirect=false)** and commented  I've used Spring's JSF support quite a bit and became quite accustomed to having my JSF beans managed by Spring.  It seemed like a no-brainer that I would want to have dependencies injected into my JSF beans by Spring, or that I might want to apply various AOP operations to my JSF beans.  Then I had to work on a project that was written in plain JSP.  By plain JSP I mean it is just using simple JSP and JSTL, but no web framework such as Struts, Spring MVC or JSF.  Almost immediately I found the need to have Spring manage the beans that were being instantiated by the jsp:useBean tag.  Having seen the excellent support for doing this sort of thing in JSF I went looking for similar support for JSP.  However it seems that this sort of thing isn't available in Spring (please correct me if I'm wrong) without migrating the entire application to use Spring MVC.  To get past this lack of support I came up with my own JSP tag library that performs similar to the jsp:useBean tag but instead of instantiating the bean itself, it retrieves the bean from the WebApplicationContext.  The bean's scope is now controlled by Spring and configured in the Spring bean definition instead of in the JSP file.  I used the Jakarta-Commons beanutils class to mimic the behavior of setProperty property=""*"" in the jsp:useBean tag.  I've attached a zip file with the source, along with an example webapp in .war format that you can drop into Tomcat and examine to see how this can be used.  I would really like to see this tag library, or something similar, incorporated into the Spring framework itself.   ---  **Affects:** 2.1 M4  **Attachments:** - [SpringJSP.zip](https://jira.spring.io/secure/attachment/12944/SpringJSP.zip) (_3.65 MB_)","closed","type: enhancement,","spring-projects-issues","2007-09-25T03:29:19Z","2012-06-19T09:36:30Z"
"","8799","Update PetClinic styles [SPR-4120]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-4120](https://jira.spring.io/browse/SPR-4120?redirect=false)** and commented  Updating the CSS and JSPs for the new-and-improved look and feel.   --- No further details from [SPR-4120](https://jira.spring.io/browse/SPR-4120?redirect=false)","closed","type: task,","spring-projects-issues","2007-11-18T03:21:35Z","2012-06-19T03:46:57Z"
"","8721","stereotype annotations should be annotated with @Component and implicilty registered when component scanning [SPR-4042]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-4042](https://jira.spring.io/browse/SPR-4042?redirect=false)** and commented  Currently the stereotype annotations are explicitly registered as ""default filters"" on the component scanner. The stereotypes (`@Repository`, `@Service`, and `@Controller`) should instead be annotated with `@Component` and implicitly registered. This will be more scalable since any 'stereotype' (including user-defined additions) will be implicitly registered.   --- No further details from [SPR-4042](https://jira.spring.io/browse/SPR-4042?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-11-03T08:57:20Z","2012-06-19T03:47:05Z"
"","8652","Qualifier annotations should resolve by aliases in addition to bean name [SPR-3972]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-3972](https://jira.spring.io/browse/SPR-3972?redirect=false)** and commented  Currently `@Qualifier`(""myBean"") on an autowired property will match against the bean named ""myBean"". However, if ""myBean"" is an alias rather than bean name, it does not resolve. It should resolve on the alias as well.   ---  **Affects:** 2.1 M4","closed","in: core,","spring-projects-issues","2007-10-12T05:20:54Z","2012-06-19T03:46:56Z"
"","8572","Provide a generic JMS ConnectionFactory that caches Sessions and MessageProducers [SPR-3892]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-3892](https://jira.spring.io/browse/SPR-3892?redirect=false)** and commented  ---  **Issue Links:** - #9120 JmsTemplate should keep hold on the Connection  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-09-19T06:59:06Z","2019-01-11T19:19:59Z"
"","8508","Lifecycle methods based on annotations [SPR-3828]","**[Mark Fisher](https://jira.spring.io/secure/ViewProfile.jspa?name=mark.fisher)** opened **[SPR-3828](https://jira.spring.io/browse/SPR-3828?redirect=false)** and commented  A class marked with `@Lifecycle` should contain a start method and a stop method (annotated with `@Start` and `@Stop` resepectively).  The LifecycleAnnotationBeanPostProcessor will then register these methods with the context to be invoked according to the same semantics as if the class were an implementation of the Lifecycle interface.  ---  **Issue Links:** - #11118 Declarative Lifecycle - #7014 Treat start/stop Lifecycle of beans like the init/destroy events","closed","type: enhancement,","spring-projects-issues","2007-08-31T06:26:23Z","2019-01-11T19:18:39Z"
"","8114","XML shown in section 3.2.1.1 of documentation missing attribute text [SPR-3431]","**[Mark Dolgov](https://jira.spring.io/secure/ViewProfile.jspa?name=dmarko)** opened **[SPR-3431](https://jira.spring.io/browse/SPR-3431?redirect=false)** and commented  Reference manual for ver. 2.0.4 http://static.springframework.org/spring/docs/2.0.x/reference/beans.html Section 3.2.2.1 The problem is still there!  (Copied form related bug: #8093)  The xml shown in section 3.2.1.1 of documentation is missing the following text ""http://www.springframework.org/schema/beans"" in xsi:schemaLocation attribute of beans tag. If we try this xml, we get org.xml.sax.SAXParseException with message '  'SchemaLocation: schemaLocation value = ' http://www.springframework.org/schema/beans/spring-beans-2.0.xsd' must have even number of URI's.'  The old xml is :  \  \  \ \ \ \ \ \ \ \  The new xml should be :  \  \  \ \ \ \ \ \ \ \  ---  **Affects:** 2.0.4  **Issue Links:** - #8056 Wrong bean configuration xml file header in Spring 2.0.4 PDF Reference Manual : missing data in xsi:schemaLocation (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2007-04-29T08:40:49Z","2019-01-12T16:51:33Z"
"","8819","JmsTemplate's doReceive fails to close consumers when interrupted [SPR-4140]","**[Mark Chaimungkalanont](https://jira.spring.io/secure/ViewProfile.jspa?name=mark@atlassian.com)** opened **[SPR-4140](https://jira.spring.io/browse/SPR-4140?redirect=false)** and commented  The problem occurs when calling `Thread.interrupt()` when JmsTemplate's receive methods are blocking. The underlying JMS provider (ActiveMQ in this case) correctly throws a JMSException and the finally block of the doReceive method calls `org.springframework.jms.support.JmsUtils`'s `closeMessageConsumer`.  This consumer's close method fails since the interrupted flag is still set, causing an exception to be thrown and quietly logged to debug log. The consumer is left half closed, and the application behaves erratically after that.  Given that JmsUtils could be used in a variety of circumstances (such as after a blocking method has been interrupted), I think it should try to accommodate this by clearing the interrupted state before calling close.  e.g.  ``` public static void closeMessageConsumer(MessageConsumer consumer) {     if (consumer != null) {         try {             // Clears interruptions to ensure that the consumer closes successfully             boolean wasInterrupted = Thread.interrupted();             consumer.close();             if (wasInterrupted) {                 // Reset the interrupted flag as it was                 Thread.currentThread().interrupt();             }         }         catch (JMSException ex) {             logger.debug(""Could not close JMS MessageConsumer"", ex);         }         catch (Throwable ex) {             // We don't trust the JMS provider: It might throw RuntimeException or Error.             logger.debug(""Unexpected exception on closing JMS MessageConsumer"", ex);         }     } } ```  This will allow Spring to guard against misbehaving JMS providers, and ensure that cosumers are properly closed.  The same can probably be done with closeSession and closeConnection.   ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2007-11-20T17:37:41Z","2012-06-19T03:46:46Z"
"","7927","FileSystemXmlApplicationContext javadoc should mention ""FileSystemResource caveats"" [SPR-3242]","**[Marius Scurtescu](https://jira.spring.io/secure/ViewProfile.jspa?name=mariuss)** opened **[SPR-3242](https://jira.spring.io/browse/SPR-3242?redirect=false)** and commented  Javadoc of class org.springframework.context.support.FileSystemXmlApplicationContext should give more details or at least point to the ""FileSystemResource caveats"" section of the reference guide.  I was trying to load an application context from an absolute path, and it would work randomly. It depended how tomcat was started. It took quite a while to figure that I should use file://... if I want absolute paths.   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-03-08T11:12:29Z","2012-06-19T03:51:07Z"
"","7957","a fix in BindTag has reopen a bug regarding duplicated ""status"" attributes in page and request contexts  [SPR-3272]","**[Mario Alcaraz](https://jira.spring.io/secure/ViewProfile.jspa?name=malcafig)** opened **[SPR-3272](https://jira.spring.io/browse/SPR-3272?redirect=false)** and commented  JSTL variables named ""status"" defined before a binding tag can interfere with ""status"" binding variable. This issue has been reported as http://opensource.atlassian.com/projects/spring/browse/SPR-1140 and fixed on version 1.2.3. Applications developed with 1.2.7 can cope with this but after migrating to 2.0.x setting a variable with named ""status"" at the page context would throw a ClassCastException inside body tag. It appears this bug has been introduce in http://opensource.atlassian.com/projects/spring/browse/SPR-2166 . A workaround would be to define JSTL variables named ""status"" in the request context to allow #5843 to take effect, or change their name. I'm currently working in a patch I'll soon attached to this Issue.  ---  **Affects:** 1.2.8, 2.0 final, 2.0.1, 2.0.2, 1.2.9, 2.0.3  **Attachments:** - [bindtest.zip](https://jira.spring.io/secure/attachment/12473/bindtest.zip) (_6.45 kB_) - [patch.txt](https://jira.spring.io/secure/attachment/12474/patch.txt) (_2.30 kB_)","closed","type: bug,","spring-projects-issues","2007-03-18T02:58:14Z","2019-01-11T17:18:26Z"
"","8485","Annotated Driven RowMapper Implementation [SPR-3805]","**[Marc Teufel](https://jira.spring.io/secure/ViewProfile.jspa?name=mteufel)** opened **[SPR-3805](https://jira.spring.io/browse/SPR-3805?redirect=false)** and commented  What about the Idea of implementing a RowMapper-Implementation that is able to read the column mapping between a Bean Property and the database Table Column via an Annotation. Using Annotations using sql alias to get an exact matching between a bean property name in BeanPropertyRowMapper that came in 2.1M1 is not needed anymore.  For instance a Annotation like  `@SpringJdbcMapped` setId  could match the Database Column ""ID""  and  `@SpringJdbcMapped`(column=""DATABASE_ID"") setId  could match the Database Column ""DATABASE_ID""  I have just implemented something like this, you can download it here --> http://javamagazin.de/itr/ausgaben/psecom,_psframe,,linkobject,source_,id,365,nodeid,20.html (look at ""Datenbankzugriff mit JDBC und Spring (Marc Teufel)"" Here you can Download my AnnotatedRowMapperResultReader including samples.  As I am using SpringJDBC like hell in my applications I am looking forward seeing something like this in 2.1  ! Hope you like that idea too ...  Cheerio Marc   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-25T06:37:29Z","2012-06-19T09:37:27Z"
"","8553","Conflict between AbstractJpaTests and  [SPR-3873]","**[Marc Ludwig](https://jira.spring.io/secure/ViewProfile.jspa?name=baronludwig)** opened **[SPR-3873](https://jira.spring.io/browse/SPR-3873?redirect=false)** and commented  I have been using both LTW and Component scanning using 2.1 M3. (This is actually for testing as we use Compile Time Weaving in the built application). Just tried with 2.1 M4, and it appears that duplicate bean definitions are being generated, causing exceptions.  The XML config is as follows: [code]  \  \                  \ [/code]  If any `@Component` is picked up by the scanning then the following exception is thrown: [code] org.springframework.beans.factory.CannotLoadBeanClassException: Error loading class [base.package.domain.ObjectWithDependencies] for bean with name 'objectWithDependencies' defined in null: problem with class file or dependent class; nested exception is java.lang.LinkageError: duplicate class definition:base/package/domain/ObjectWithDependencies [/code]  Is it now incorrect to combine the component scanning and load time weaving, or is this unexpected behaviour?  Regards   ---  **Affects:** 2.1 M4  **Attachments:** - [spring-ltw-test.zip](https://jira.spring.io/secure/attachment/13019/spring-ltw-test.zip) (_6.42 kB_)  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2007-09-13T19:08:54Z","2012-06-19T03:47:13Z"
"","8525","Improving component-scan performance through more specific search patterns [SPR-3845]","**[Marc Ludwig](https://jira.spring.io/secure/ViewProfile.jspa?name=baronludwig)** opened **[SPR-3845](https://jira.spring.io/browse/SPR-3845?redirect=false)** and commented  I've been testing the new features in 2.1 relating to the annotation based configuration and classpath scanning for beans, and have one issue and one potential improvement.  1. Static injection    When defining a bean as ""`@Component`"" and specifiying ""`@Resource`"" on properties, I have noticed that if the property is static, then this is successully injected into the component when using classpath scanning.    As I have previously found no other way of injecting statics, I wondered if this is intended behaviour?  2. findCandidateComponents    In order to improve performance of the class path scanning, is it possible (or would it be a feasible enhancement) to allow the parameterisation of the package search path used within ""findCandidateComponents"" in the ""ClassPathScanningCandidateComponentProvider"". Although base packages can be passed in, further restiction would be helpful for performance.  For example, the current code in findCandidateComponents in ClassPathScanningCandidateComponentProvider is: [code] String packageSearchPath = ""classpath*:"" + ClassUtils.convertClassNameToResourcePath(basePackage) + ""/**/*.class""; [/code]  If, for example, all the components that need to be auto detected, are within a specific package structure, then further restriction of the source path would be helpful. In our source base, the following results in a 70% reduction in application context start up.  [code] String restrictionPath = ""/**/domain/**/\*.class""; String packageSearchPath = ""classpath*:"" + ClassUtils.convertClassNameToResourcePath(basePackage) + restrictionPath; [/code]  Thanks   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-09-04T21:23:38Z","2012-06-19T03:47:07Z"
"","8041","BridgeMethodResolver Unable to locate bridged method for Generic method [SPR-3357]","**[Marc Ludwig](https://jira.spring.io/secure/ViewProfile.jspa?name=baronludwig)** opened **[SPR-3357](https://jira.spring.io/browse/SPR-3357?redirect=false)** and commented  When deploying a Bean (using Java Generics) on the server side, within an application context using  support, the BridgeMethodResolver is throwing an exception. This only occurs when the Bean attempts to override the methods within the generic super class, and where this super class implements a generic interface. Currently, I am unsure whether this is due to a misuse (or overuse) of generics, or whether it is a genuine bug within the BridgeMethodResolver.  I have a test case hopefully explaining the issue as follows. Any help would be greatly appreciated. (NB I have just tested with 2.0.4).   ---  **Affects:** 2.0.3, 2.0.4  **Attachments:** - [BridgeTestSrc.zip](https://jira.spring.io/secure/attachment/12530/BridgeTestSrc.zip) (_2.53 kB_)","closed","in: core,","spring-projects-issues","2007-04-10T18:34:11Z","2012-06-19T03:50:17Z"
"","8192","better docs for ""3.4.2. The prototype scope"" wrt using them with singleton beans [SPR-3509]","**[Marc Logemann](https://jira.spring.io/secure/ViewProfile.jspa?name=logemann)** opened **[SPR-3509](https://jira.spring.io/browse/SPR-3509?redirect=false)** and commented  When you only read the contents of the chapter 3.4.2, you can get the impression that just defining prototype gets unique instances of a bean, in whatever context. Of course this is not true when using them within a singleton bean via method injection. It would be a time saver and a forum posts saver to make a hint to ""3.3.8.1. Lookup method injection"" directly in the description of what a prototype bean is.  Of course also some note that prototype has no effect when used by singleton beans in method injection mode would be nice.   --- No further details from [SPR-3509](https://jira.spring.io/browse/SPR-3509?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-05-22T09:10:55Z","2012-06-19T03:50:47Z"
"","8008","Table 9.2.  should be Table 9.2.  in docs [SPR-3323]","**[Marc Logemann](https://jira.spring.io/secure/ViewProfile.jspa?name=logemann)** opened **[SPR-3323](https://jira.spring.io/browse/SPR-3323?redirect=false)** and commented  an easy issue:  Description of table 9.2 is wrong in the docs.  Table 9.2.   should be  Table 9.2.    ---  **Affects:** 2.0.3","closed","type: bug,","spring-projects-issues","2007-03-29T22:39:15Z","2012-06-19T03:50:45Z"
"","8494","NPE in AbstractBeanFactory#getBean(String, Class, Object[]) [SPR-3814]","**[Marat Radchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=slonopotamus)** opened **[SPR-3814](https://jira.spring.io/browse/SPR-3814?redirect=false)** and commented  I have a FactoryBean that can return nulls. As far as I understand this is ok.  However, AbstractBeanFactory#getBean(String, Class, Object[]) doesn't check for null beans and throws NullPointerException.  The problem is in line 313:  ``` if (requiredType != null && !requiredType.isAssignableFrom(bean.getClass())) { ```  Instead, it should be: if (requiredType != null && bean != null && !requiredType.isAssignableFrom(bean.getClass())) {   ---  **Affects:** 2.0.6, 2.1 M3  2 votes, 1 watchers","closed","in: core,","spring-projects-issues","2007-08-28T18:48:50Z","2012-06-19T03:50:41Z"
"","8491","New feature: HibernateValidatorAdapter [SPR-3811]","**[Marat Radchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=slonopotamus)** opened **[SPR-3811](https://jira.spring.io/browse/SPR-3811?redirect=false)** and commented  Please find attached file HibernateValidatorAdapter.java. It allows using Hibernate Validator from Spring Validation API.   ---  **Attachments:** - [HibernateValidatorAdapter.java](https://jira.spring.io/secure/attachment/12845/HibernateValidatorAdapter.java) (_1.92 kB_)","closed","type: enhancement,","spring-projects-issues","2007-08-28T00:55:33Z","2012-06-19T09:37:26Z"
"","8490","New feature: CompositeValidator [SPR-3810]","**[Marat Radchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=slonopotamus)** opened **[SPR-3810](https://jira.spring.io/browse/SPR-3810?redirect=false)** and commented  Please find attached CompositeValidator.java.  First file is for Java =1.5, I don't know which one you'll choose.  I hope it will be valuable to other Spring users.   ---  **Attachments:** - [CompositeValidator.java](https://jira.spring.io/secure/attachment/12844/CompositeValidator.java) (_1.46 kB_) - [CompositeValidator.java](https://jira.spring.io/secure/attachment/12843/CompositeValidator.java) (_1.62 kB_)","closed","type: enhancement,","spring-projects-issues","2007-08-28T00:48:01Z","2012-06-19T09:37:29Z"
"","8418","tx:annotation-driven tries to use all DefaultIntroductionAdvisor's from application context [SPR-3737]","**[Marat Radchenko](https://jira.spring.io/secure/ViewProfile.jspa?name=slonopotamus)** opened **[SPR-3737](https://jira.spring.io/browse/SPR-3737?redirect=false)** and commented  Steps to reproduce: Unpack attached file and run mvn test from tx-bug folder.  Expected: successfull test run, interceptor not called. Actual: test failure (error log in tx-bug/target/surefire-reports/test.TxBugTest.txt), interceptor was called.   ---  **Affects:** 2.0.6  **Attachments:** - [test.TxBugTest.txt](https://jira.spring.io/secure/attachment/12752/test.TxBugTest.txt) (_5.15 kB_) - [tx-bug.tar.gz](https://jira.spring.io/secure/attachment/12751/tx-bug.tar.gz) (_1.57 kB_)","closed","type: bug,","spring-projects-issues","2007-08-02T20:15:45Z","2012-06-19T03:50:44Z"
"","8823","Missing useful methods in SimpleJdbcOperations / SimpleJdbcTemplate [SPR-4145]","**[Manuel Dominguez Sarmiento](https://jira.spring.io/secure/ViewProfile.jspa?name=mads1980)** opened **[SPR-4145](https://jira.spring.io/browse/SPR-4145?redirect=false)** and commented  The following methods are available in JdbcOperations:  public List queryForList(String sql, Class elementType) public List queryForList(String sql, Object[] args, Class elementType) public List queryForList(String sql, Object[] args, int[] argTypes, Class elementType);  Equivalent methods are not available in SimpleJdbcOperations. The method signatures would be:  public \ List\ queryForList(String sql, Class\ elementType) public \ List\ queryForList(String sql, Object[] args, Class\ elementType) public \ List\ queryForList(String sql, Object[] args, int[] argTypes, Class\ elementType)  The obvious advantage is making good use of generics, to avoid compiler warnings, besides making code prettier.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-21T04:36:25Z","2012-06-19T09:36:20Z"
"","8045","AbstractFormController in session form mode should reuse the form object for ""new"" forms [SPR-3361]","**[Mans Karlberg](https://jira.spring.io/secure/ViewProfile.jspa?name=hurukan)** opened **[SPR-3361](https://jira.spring.io/browse/SPR-3361?redirect=false)** and commented  Assume that an AbstractFormController is in session form mode and has displayed a new form. Is has stored a form object in the session, for it  to be reused later. Let's say that the user fills out a few fields, but reloads the page before submitting. This results in a call to AbstractFormController#showNewForm, which in turn calls getErrorsForNewForm. This method calls formBackingObject **without**  re-using the existing form object stored in the session. This is a pity for several reasons: a) It is inconsistent with all other calls from AbstractFormController to formBackingObject. b) It goes against the spirit of session form mode. c) showNewForm and getErrorsForNewForm are both declared ""final"". d) The user loses his form data. If you can't see why d) is a problem, let me explain my use case: I have an AbstractWizardFormController populating an object foo. On the wizard's first page, I have an IFRAME with an AbstractFormController that populates another object bar, and calls foo.addChild(bar) when the user submits. When the user submits the form, he still sees ""the same"" form, i.e. the form data remains - this is good, because he can re-use most of it, but modify it slightly before adding the next child. However, if the user goes to the next wizard page and then back again, the form data will be lost, which is annoying.  There is a workaround. One can let formBackingObject check for a stored form object before creating a new one. This is not such a pretty solution, since the source code of AbstractFormController seems to indicate that such checks belong there (see a) above).  Suggested solution: Modify the beginning of getErrorsForNewForm from: Object command = formBackingObject( request ); if ( command == null ) { throw new ServletException( ""Form object returned by formBackingObject() must not be null"" ); } to: Object command = null; if ( isSessionForm() ) { HttpSession session = request.getSession( false ); if ( session == null ) { throw new HttpSessionRequiredException(  ""Must have session when trying to bind (in session-form mode)"" ); } Object sessionFormObject = session.getAttribute( getFormSessionAttributeName( request ) ); if ( sessionFormObject != null ) { command = currentFormObject( request, sessionFormObject ); } } if ( command == null ) { command = formBackingObject( request ); if ( command == null ) { throw new ServletException( ""Form object returned by formBackingObject() must not be null"" ); } }   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-04-11T08:38:14Z","2012-06-19T09:37:37Z"
"","8694","Source code for org.springframework.remoting.jaxws missing from release [SPR-4014]","**[Major Bugger](https://jira.spring.io/secure/ViewProfile.jspa?name=majorbugger)** opened **[SPR-4014](https://jira.spring.io/browse/SPR-4014?redirect=false)** and commented  The 2.5 RC1 introduced support for JAX-WS in form of org.springframework.remoting.jaxws package. However, the source code for the classes from this package is missing from the src/ directory of spring-framework-2.5-rc1-with-dependencies.zip file.   ---  **Affects:** 2.5 RC1","closed","in: web,","spring-projects-issues","2007-10-28T00:07:18Z","2019-01-11T16:16:56Z"
"","8168","BridgeMethodResolver bug when methods with two generic arguments one bound to an array [SPR-3485]","**[Magnus Johansson](https://jira.spring.io/secure/ViewProfile.jspa?name=kkckkc)** opened **[SPR-3485](https://jira.spring.io/browse/SPR-3485?redirect=false)** and commented  I have an abstract class defining two generic parameters and also a method taking both these two generic parameters as arguments. In a subclass i bound one of these to any class and the other to a byte array.  BridgeMethodResolver.findBridgeMethod then fails with java.lang.IllegalStateException: Unable to locate bridged method for bridge method 'public volatile void DomainObject.method2(java.io.Serializable,java.lang.Object)'  Please see attached test case   ---  **Affects:** 2.0.5  **Attachments:** - [bridgemethod.jar](https://jira.spring.io/secure/attachment/12600/bridgemethod.jar) (_1.15 kB_)","closed","in: core,","spring-projects-issues","2007-05-15T23:07:16Z","2012-06-19T03:51:02Z"
"","8640","Please allow TestExecutionListeners to fail the test [SPR-3960]","**[Magnus Heino](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus)** opened **[SPR-3960](https://jira.spring.io/browse/SPR-3960?redirect=false)** and commented  SpringMethodRoadie.runAfters() calls all  `@After` methods, then calls TestContextManager.afterTestMethod  TestContextManager.afterTestMethod calls all TestExecutionListeners. Any exception thrown in the TestExecutionListener is caught and logged by TestContextManager.afterTestMethod. This behaviour is good since it allows all TestExecutionListeners to execute even if one fails.  However, TestContextManager.afterTestMethod should be changed from void to boolean (or throw a custom exception). The returned value should indicate if any TestExecutionListener failed. If any TestExecutionListener failed, SpringMethodRoadie.runAfters() should then call SpringMethodRoadie.addFailure to fail the test.  I have extended TransactionalTestExecutionListener to look for `@DataSet` and `@ExpectedDataSet` annotations. `@DataSet` loads data using DBUnit before the test is executed, and `@ExpectedDataSet` compares the data in the database after test execution with the expected result. It is not currently possible to fail the test in the TestExecutionListener, with the current behaviour described above.  Please change this simple thing to make TestExecutionListeners even more powerful!  ---  **Affects:** 2.1 M4  **Issue Links:** - #9043 Introduce before/after test execution callbacks in the TestContext framework","closed","type: enhancement,","spring-projects-issues","2007-10-04T05:56:23Z","2019-01-11T21:12:14Z"
"","8334","Create annotation to group tests [SPR-3653]","**[Magnus Heino](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus)** opened **[SPR-3653](https://jira.spring.io/browse/SPR-3653?redirect=false)** and commented  The only thing I miss comparing in JUnit comparing with TestNG is the ability to group tests using annotations.  org.springframework.test.ConditionalTestCase makes it possible for subclasses to override  isDisabledInThisEnvironment(String testMethodName) and in that method, looking at the test method name, decide if the test should run or not.  Add a annotation like this:  ``` package org.springframework.test;  import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Inherited; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target;  @Target(value=ElementType.METHOD) @Retention(value=RetentionPolicy.RUNTIME) @Inherited @Documented public @interface Environment { 	 	String[] value(); } ```  Add this method to ConditionalTestCase  ``` /**  * Should this test run?  * @param environment name of the test method environment  * @return whether the test should execute in the provided envionment  */ protected boolean isDisabledInEnvironment(String environment) { 	return false; } ```  and change ConditionalTestCase.runBase to this:  ``` public void runBare() throws Throwable { 	Method runMethod = getClass().getMethod(getName(), (Class[])null);  	 	boolean disabledInEnvironment = false; 	 	if(runMethod.isAnnotationPresent(Environment.class)) { 		String[] environments = runMethod.getAnnotation(Environment.class).value(); 		 		for (int i = 0; i < environments.length; i++) { 			if(isDisabledInEnvironment(environments[i])) { 				disabledInEnvironment = true; 			} 		} 	} 	 	// getName will return the name of the method being run 	if (disabledInEnvironment || isDisabledInThisEnvironment(getName())) { 		recordDisabled(); 		logger.info(""**** "" + getClass().getName() + ""."" + getName() + "" disabled in this environment: "" + 				""Total disabled tests="" + getDisabledTestCount()); 		return; 	} 	 	// Let JUnit handle execution 	super.runBare(); } ```  Then it's possible to annotate each test method with what environment it should run in. Applications can create own baseclasses of the spring Abstract* test classes and override isDisabledInEnvironment(String environment) . In there, a decision is made based on the environment that the method is annotated with.  Example:  ``` public class AppTest extends ConditionalTestCase {  	private final Log log = LogFactory.getLog(this.getClass()); 	 	@Environment({""database"", ""slow""}) 	public void testDatabaseSlow() { 		log.debug(""NO""); 	}  	@Environment({""slow""}) 	public void testSlow() { 		log.debug(""YES""); 	} 	 	@Environment({""database""}) 	public void testDatabase() { 		log.debug(""NO""); 	} 	 	public void testNoAnnotation() { 		log.debug(""YES""); 	} 	 	@Environment({}) 	public void testEmptyArray() { 		log.debug(""YES""); 	} 		 	@Override 	protected boolean isDisabledInEnvironment(String environment) { 		if(environment.equalsIgnoreCase(""database"")) { 			return true; 		} 		 		return false;		 	}	 } ```  In a real scenario the isDisabledInEnvironment is moved to a application specific testcasebaseclass that inherits ConditionalTestCase, and this example class inherits from that new testcasebaseclass instead.  /Magnus  ---  **Issue Links:** - #9538 Introduce strategy for determining if a profile value is enabled for a particular test environment - #10572 Allow multiple values be specified in the runtime for tests filtering by `@IfProfileValue`","closed","type: enhancement,","spring-projects-issues","2007-07-04T06:01:38Z","2019-01-13T08:08:00Z"
"","8779","Null Pointer Exception when getting a instance of TimerManagerFactoryBean using XMLBeanFactory. I had set only the resourceRef and timerManagerName properties in the XML file [SPR-4101]","**[Madhav Matta](https://jira.spring.io/secure/ViewProfile.jspa?name=madhavmatta)** opened **[SPR-4101](https://jira.spring.io/browse/SPR-4101?redirect=false)** and commented  Null Pointer Exception when getting a instance of TimerManagerFactoryBean using XMLBeanFactory. I had set only the resourceRef and timerManagerName properties in the XML file. I did not set any scheduledTimerListeners.  The afterPropertiesSet() is throwing a null pointer exception. If I am not wrong this is because of this line of code for (int i = 0; i < this.scheduledTimerListeners.length; i++)  scheduledTimerListeners.length is called, but the array is null.  I hope scheduleTimeListeners is not a mandatory property to be set for TimerManagerFactoryBean.    ---  **Affects:** 2.0.7, 2.5 RC1  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","in: core,","spring-projects-issues","2007-11-14T02:18:18Z","2012-06-19T03:47:40Z"
"","8632","JSTL Internationalization doesn't work with the modul  ""spring-webmvc.jar"" [SPR-3952]","**[Macias Jesus](https://jira.spring.io/secure/ViewProfile.jspa?name=d%C3%A4mon)** opened **[SPR-3952](https://jira.spring.io/browse/SPR-3952?redirect=false)** and commented  JSTL Internationalization doesn't work with the modul  ""spring-webmvc.jar""   --- No further details from [SPR-3952](https://jira.spring.io/browse/SPR-3952?redirect=false)","closed","","spring-projects-issues","2007-10-02T20:43:49Z","2019-01-11T21:12:52Z"
"","7893","HibernateTransactionObject to be made protected [SPR-3207]","**[Lóránt Pintér](https://jira.spring.io/secure/ViewProfile.jspa?name=lptr)** opened **[SPR-3207](https://jira.spring.io/browse/SPR-3207?redirect=false)** and commented  For our product, we need to support file operations in transactions together with Hibernate operations. For this purpose, we would like to extend HibernateTransactionManager, but the org.springframework.orm.hibernate3.HibernateTransactionManager.HibernateTransactionObject class is defined as private, blocking the way of derivation.  Can this class made at least protected?   ---  **Affects:** 2.0.2  7 votes, 4 watchers","closed","status: bulk-closed,","spring-projects-issues","2007-02-26T17:25:00Z","2019-01-12T03:51:09Z"
"","8311","ManagedOperationParameter should be a Param level annotation [SPR-3630]","**[Liam Knox](https://jira.spring.io/secure/ViewProfile.jspa?name=liamknox)** opened **[SPR-3630](https://jira.spring.io/browse/SPR-3630?redirect=false)** and commented  Would it not be more explicit to have this as a ManagedOperationParameter level annotation rather than needing to define a list within ManagedOperationParameters(Method level)?  i.e. like `@WebParam`  You would need to maintain Method level scope also for backward compatability   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-06-27T19:19:16Z","2012-06-19T09:37:45Z"
"","8824","Upgrade Ehcache 1.2.4 to 1.3.0 (release June/07) [SPR-4146]","**[Leonardo Pinho](https://jira.spring.io/secure/ViewProfile.jspa?name=leopinho)** opened **[SPR-4146](https://jira.spring.io/browse/SPR-4146?redirect=false)** and commented  I think It would be good update ehcache jar to 1.3.0 as it has some fix that affects Spring:  http://ehcache.sourceforge.net/changes-report.html#1.3-beta1 ""JBoss, Spring and some other applications have shutdown hooks. A race condition existed in CacheManager#shutdown() such that multiple shutdown hook threads could attempt to shutdown the CacheManager at the same time. Added class synchronization to prevent this and also added a check for the system property net.sf.ehcache.disableShutdownHook=true which will disable addition of the shutdown hook. Reported by various people. Note: In ehcache-1.3-beta2 and higher the shutdown hook is off by default. The above property has no effect. Set the system property net.sf.ehcache.enableShutdownHook=true to enable it. Fixes 1616492.""  And also Ehcache 1.3.0 has JMX management support: ""JMX instrumentation. Register a variety of MBeans from your ehcache instance with your MBeanServer of choice""  I did on my applications and did not get any side effect. I'm using Spring 2.5 final.  Thanks, Leonardo   ---  **Affects:** 2.0.7, 2.0.8, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-11-21T04:54:07Z","2012-06-19T03:47:09Z"
"","8777","Documentation about  [SPR-4099]","**[Leonardo Pinho](https://jira.spring.io/secure/ViewProfile.jspa?name=leopinho)** opened **[SPR-4099](https://jira.spring.io/browse/SPR-4099?redirect=false)** and commented  There is no documentation about  (at least I could not find it :)) and also I guess the spring-context-2.5.xsd is not updated at: http://www.springframework.org/schema/context/spring-context-2.5.xsd  Thanks, Leonardo   ---  **Affects:** 2.5 RC2, 2.5 final","closed","in: core,","spring-projects-issues","2007-11-14T01:17:27Z","2012-06-19T03:46:53Z"
"","8742","EhCacheManagerFactoryBean could accepts name attribute for the CacheManager's name [SPR-4063]","**[Leonardo Pinho](https://jira.spring.io/secure/ViewProfile.jspa?name=leopinho)** opened **[SPR-4063](https://jira.spring.io/browse/SPR-4063?redirect=false)** and commented  EhCacheManagerFactoryBean could accepts name attribute for the CacheManager's name and set up at afterPropertiesSet() method, using this.cacheManager.setName().  This is very useful for JMX management of the Cache Manager...   ---  **Affects:** 2.0.8, 2.5 RC2, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-11-07T00:46:55Z","2012-06-19T03:47:26Z"
"","8741","EhCacheFactoryBean could accept any DecoratorCache class [SPR-4062]","**[Leonardo Pinho](https://jira.spring.io/secure/ViewProfile.jspa?name=leopinho)** opened **[SPR-4062](https://jira.spring.io/browse/SPR-4062?redirect=false)** and commented  The class org.springframework.cache.ehcache.EhCacheFactoryBean could accept any decorator class, not only UpdatingSelfPopulatingCache, SelfPopulatingCache or BlockingCache.  I did some extension of that class which has that improvement. The file is attached.  Thanks, Leonardo    ---  **Affects:** 2.0.7, 2.0.8, 2.5 RC1, 2.5 RC2, 2.5 final  **Attachments:** - [EhCacheDecoratorFactoryBean.java](https://jira.spring.io/secure/attachment/13083/EhCacheDecoratorFactoryBean.java) (_1.26 kB_) - [SimpleBlockingCache.java](https://jira.spring.io/secure/attachment/13084/SimpleBlockingCache.java) (_482 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-11-07T00:33:52Z","2019-01-11T16:20:34Z"
"","8702","Update documentation for @Service/@Component annotation [SPR-4023]","**[Leonardo Pinho](https://jira.spring.io/secure/ViewProfile.jspa?name=leopinho)** opened **[SPR-4023](https://jira.spring.io/browse/SPR-4023?redirect=false)** and commented  Hi, I think it would be better update the documentation to incentive the use of `@Service` instead of `@Component` for the service layer as Sam Brannen explained at:  http://forum.springframework.org/showthread.php?t=45397&highlight=%40Service  Also the examples in doc reference should be replaced from `@Component` to `@Service` at sections 3.11.1 and 3.11.2 for example. Besides that, there is no explanation about the differences between `@Service` and `@Component` at the reference documentation.  Thanks, Leonardo   ---  **Affects:** 2.5 RC1, 2.5 final","closed","in: core,","spring-projects-issues","2007-10-30T03:40:00Z","2012-06-19T03:46:48Z"
"","8659","LocalContainerEntityManagerFactoryBean could accept ""classpath*:/"" path locations [SPR-3979]","**[Leonardo Pinho](https://jira.spring.io/secure/ViewProfile.jspa?name=leopinho)** opened **[SPR-3979](https://jira.spring.io/browse/SPR-3979?redirect=false)** and commented  LocalContainerEntityManagerFactoryBean could use PathMatchingResourcePatternResolver as ResourcePatternResolver and allow to use classpath*:/ location paths to read jar-file from persistent.xml, like:  \ \ \classpath*:/common.jar\ \ \  Otherwise, we have to use the xml above in order to read some jar (""common.jar"" p.ex.) from WEB-INF/lib:  \ \ \/WEB-INF/lib/common.jar\ \ \ Thanks, Leonardo   ---  **Affects:** 2.0.7, 2.1 M4, 2.5 RC1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-10-16T05:58:44Z","2012-06-19T03:47:48Z"
"","8576","Support for superclass scanning on Junit4 test class [SPR-3896]","**[Leonardo Pinho](https://jira.spring.io/secure/ViewProfile.jspa?name=leopinho)** opened **[SPR-3896](https://jira.spring.io/browse/SPR-3896?redirect=false)** and commented  Superclasses of some test class could also be scanned for the presence of `@ContextConfiguration` or `@TestExecutionListeners` annotations. If found, these configuration files are loaded before the configuration files specified in subclasses. This makes it possible to override configuration settings or to add extra configuration specific for the test. For example:  `@ContextConfiguration` (locations={""spring-beans.xml""}) public class BaseServiceTest  { }  `@RunWith`(SpringJUnit4ClassRunner.class) `@ContextConfiguration`(locations={""extra-spring-beans.xml""}) public class UserServiceTest extends BaseServiceTest { }  This will create a ApplicationContext, first loading the spring-beans.xml followed by the extra-spring-beans.xml configuration files. You could do the same for execution listeners.   ---  **Affects:** 2.1 M4, 2.5 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0584c26b2ca7ee6c62a8455e2e8c9fe55b869dbd  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-09-20T02:28:31Z","2012-06-19T03:46:45Z"
"","8506","CommonAnnotationBeanPostProcessor (@Resource) is provoking circular reference errors [SPR-3826]","**[Leonardo Pinho](https://jira.spring.io/secure/ViewProfile.jspa?name=leopinho)** opened **[SPR-3826](https://jira.spring.io/browse/SPR-3826?redirect=false)** and commented  When I use `@Resource` annotation (which is interpreted by CommonAnnotationBeanPostProcessor) in a proxied class and the dependent class is also a proxy I'm getting circular reference error.  Some use case is described here: http://forum.springframework.org/showthread.php?t=43283  I've tried to investigate the issue and I guess the problem is the method getResources() from CommonAnnotationBeanPostProcessor which is registering the dependent bean before getting it, different from AbstractAutowireCapableBeanFactory:autowireByName(...) does:  protected void autowireByName(...) { ... Object bean = getBean(propertyName);                          // Get the dependent bean pvs.addPropertyValue(propertyName, bean);                   registerDependentBean(propertyName, beanName); // Register the dependency if (logger.isDebugEnabled()) { logger.debug(""Added autowiring by name from bean name '"" + beanName + ""' via property '"" + propertyName + ""' to bean named '"" + propertyName + ""'""); } ... }  So I just changed that order in CommonAnnotationBeanPostProcessor (as described in PATCH file attached) and now it is working well!   ---  **Affects:** 2.1 M3, 2.1 M4  **Attachments:** - [CommonAnnotationBeanPostProcessor.patch](https://jira.spring.io/secure/attachment/12858/CommonAnnotationBeanPostProcessor.patch) (_164 bytes_)","closed","in: core,","spring-projects-issues","2007-08-31T01:19:39Z","2012-06-19T03:50:27Z"
"","8503","is ignoring default-lazy-init=""true"" [SPR-3823]","**[Leonardo Pinho](https://jira.spring.io/secure/ViewProfile.jspa?name=leopinho)** opened **[SPR-3823](https://jira.spring.io/browse/SPR-3823?redirect=false)** and commented  When I use  and `@Component` to register my beans into Spring container, the setting \ is ignored.  All beans are created as lazyInit=false.   ---  **Affects:** 2.1 M3, 2.1 M4","closed","in: core,","spring-projects-issues","2007-08-30T06:20:10Z","2012-06-19T03:50:46Z"
"","8495","Classloader problem [SPR-3815]","**[Leonardo Pinho](https://jira.spring.io/secure/ViewProfile.jspa?name=leopinho)** opened **[SPR-3815](https://jira.spring.io/browse/SPR-3815?redirect=false)** and commented  I've tried to use  in a web application which depends on some local component (.jar) that contains some classes registered into Spring Container using `@Component` annotation.  However those classes are not found by ClassPathBeanDefinitionScanner class although t the base-package property is set up corretly. It is problably an issue with PathMatchingResourcePatternResolver as can be figure out in the testcase attached.  The full description of the problem and an use case is described at spring core forum: http://forum.springframework.org/showthread.php?t=43234   ---  **Affects:** 2.1 M3, 2.1 M4  **Attachments:** - [MySpringTestCase.zip](https://jira.spring.io/secure/attachment/12853/MySpringTestCase.zip) (_1.74 MB_) - [MySpringWebApp.zip](https://jira.spring.io/secure/attachment/12854/MySpringWebApp.zip) (_1.77 MB_)","closed","in: core,","spring-projects-issues","2007-08-29T11:16:53Z","2019-01-12T16:39:51Z"
"","8102","Implementation of sessionfactory for hibernate to create instances of POJOS using the beans definitions of springframework [SPR-3419]","**[Leandro](https://jira.spring.io/secure/ViewProfile.jspa?name=leandroocarmo)** opened **[SPR-3419](https://jira.spring.io/browse/SPR-3419?redirect=false)** and commented  I have to specify my beans in spring configurations file so it to control the dependency of my beans. But when I use hibernate and a execute one query, using Criteria for example, hibernate doesn't use the bean definition from spring framework. It internally uses reflection to create instances, and the dependencies of my beans, which I had specified in spring, are not used.  So, I have a problem when using hibernate with spring: hibernate create objects outside spring.  The new feature, will implement a class that will be used by hibernate, so it can use de beans definitions from spring.   --- No further details from [SPR-3419](https://jira.spring.io/browse/SPR-3419?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-04-26T05:43:25Z","2012-06-19T09:37:28Z"
"","7973","Bug in the findByNamedQuery method in org.springframework.orm.hibernate3.HibernateTemplate  [SPR-3288]","**[Lars Rosenberg Nielsen](https://jira.spring.io/secure/ViewProfile.jspa?name=larsrnielsen)** opened **[SPR-3288](https://jira.spring.io/browse/SPR-3288?redirect=false)** and commented  The paramters should start from value 1.  public List findByNamedQuery(final String queryName, final Object[] values) throws DataAccessException { return (List) execute(new HibernateCallback() { public Object doInHibernate(Session session) throws HibernateException { Query queryObject = session.getNamedQuery(queryName); prepareQuery(queryObject); if (values != null) { for (int i = 0; i < values.length; i++) { queryObject.setParameter(i, values[i]); } } return queryObject.list(); } }, true); }  Exception:  java.lang.IndexOutOfBoundsException: Remember that ordinal parameters are 1-base d! at org.hibernate.engine.query.ParameterMetadata.getOrdinalParameterDescr iptor(ParameterMetadata.java:55) at org.hibernate.engine.query.ParameterMetadata.getOrdinalParameterExpec tedType(ParameterMetadata.java:61) at org.hibernate.impl.AbstractQueryImpl.determineType(AbstractQueryImpl. java:397) at org.hibernate.impl.AbstractQueryImpl.setParameter(AbstractQueryImpl.j ava:369) at org.springframework.orm.hibernate3.HibernateTemplate$32.doInHibernate (HibernateTemplate.java:908) Truncated. see log file for complete stacktrace    ---  **Affects:** 2.0.3","closed","in: core,","spring-projects-issues","2007-03-22T21:27:12Z","2019-01-11T17:18:14Z"
"","8178","Preserve original Message-ID in JavaMailSenderImpl; makes it possible to use custom Message-ID header [SPR-3495]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-3495](https://jira.spring.io/browse/SPR-3495?redirect=false)** and commented  JavaMail's MimeMessage.saveChanges() method generates a new Message-ID for a message on every call.  saveChanges() is called in org.springframework.mail.javamail.JavaMailSenderImpl.doSend.  Here's code to preserve the original Message-ID (see full code in patch file):      String messageID=mimeMessage.getMessageID();     mimeMessage.saveChanges();     if(preserveMessageID && messageID != null) {              mimeMessage.setHeader(""Message-ID"", messageID);     }  This change makes it possible to define your own Message-ID before sending the message (mimeMessage.setHeader(""Message-ID"", myMessageID)). There's a new boolean property ""preserverMessageID"" which controls the use of this feature in JavaMailSenderImpl.   ---  **Affects:** 2.0.5  **Attachments:** - [javamailsender_messageid_preserve.patch](https://jira.spring.io/secure/attachment/12604/javamailsender_messageid_preserve.patch) (_1.08 kB_)","closed","type: enhancement,","spring-projects-issues","2007-05-18T00:06:59Z","2012-06-19T03:50:55Z"
"","7934","NPE in PropertyPlaceholderConfigurer.parseStringValue because TypedStringValue.getValue() is null [SPR-3249]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-3249](https://jira.spring.io/browse/SPR-3249?redirect=false)** and commented  After upgrading from Spring 2.0.2 to Spring 2.0.3 I'm getting this error in the startup:  java.lang.NullPointerException at java.lang.StringBuffer.\(StringBuffer.java:104) at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.parseStringValue(PropertyPlaceholderConfigurer.java:270) at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer$PlaceholderResolvingBeanDefinitionVisitor.resolveStringValue(PropertyPlaceholderConfigurer.java:401) at org.springframework.beans.factory.config.BeanDefinitionVisitor.resolveValue(BeanDefinitionVisitor.java:143) at org.springframework.beans.factory.config.BeanDefinitionVisitor.visitPropertyValues(BeanDefinitionVisitor.java:89) at org.springframework.beans.factory.config.BeanDefinitionVisitor.visitBeanDefinition(BeanDefinitionVisitor.java:59) at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:246) at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:75) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:325)  We have a custom ApplicationContext implementation and are using custom namespace handlers. They might have something to do with the problem. Any ways there could be some protective code in org.springframework.beans.factory.config.BeanDefitionVisitor's resolveValue method.  These are the lines that could be changed:  141:		else if (value instanceof TypedStringValue) { 142:			TypedStringValue typedStringValue = (TypedStringValue) value; 143:			String visitdString = resolveStringValue(typedStringValue.getValue()); 144:			typedStringValue.setValue(visitdString);  suggested change      else if (value instanceof TypedStringValue) {          TypedStringValue typedStringValue = (TypedStringValue) value;          if (typedStringValue.getValue() != null) {               String visitdString = resolveStringValue(typedStringValue.getValue());               typedStringValue.setValue(visitdString);          }  ---  **Affects:** 2.0.3  **Issue Links:** - #7965 2.0.3 Regression PropertyPlaceholderConfigurer and  = NPE (_**""is duplicated by""**_) - #7980 Nullpointer in PropertyPlaceholderConfigurator (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2007-03-11T20:42:48Z","2019-01-11T17:17:11Z"
"","8624","@Resource annotation missing in 2.1 M4  [SPR-3944]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-3944](https://jira.spring.io/browse/SPR-3944?redirect=false)** and commented  I started digging into new testing annotation-based testing framework in 2.1 M4. The documentation clearly states that it is possible to inject beans by name with `@Resource` annotation. Well, I can't seem to find such annotation anywhere. It looks like such usage was replaced with `@Qualifier` annotation. I guess the documentation needs to be updated to reflect that.   ---  **Affects:** 2.1 M4","closed","in: core,","spring-projects-issues","2007-09-29T09:15:30Z","2019-01-11T21:14:06Z"
"","8113","ArrayIndexOutOfBounds in PortletUtils.getParametersStartingWith() [SPR-3430]","**[Kristoffer Vasara](https://jira.spring.io/secure/ViewProfile.jspa?name=kvasara)** opened **[SPR-3430](https://jira.spring.io/browse/SPR-3430?redirect=false)** and commented  For a request parameter with no values, an ArrayIndexOutOfBounds is thrown when using Portlet MVC on WebSphere Portal 6.0.  [27.4.2007 13:38:13:341 EEST] 00000036 DispatcherPor E   TRAS0014I: The following exception was logged java.lang.ArrayIndexOutOfBoundsException: 0      at org.springframework.web.portlet.util.PortletUtils.getParametersStartingWith(PortletUtils.java:372  Apparently the container in this setup returns an empty array and not null as expected.   ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-04-28T23:02:00Z","2019-01-13T22:43:25Z"
"","7916","Ant-based Maven installation of Spring artifacts is broken [SPR-3230]","**[Kristoffer Moum](https://jira.spring.io/secure/ViewProfile.jspa?name=kristoffer79)** opened **[SPR-3230](https://jira.spring.io/browse/SPR-3230?redirect=false)** and commented  The provided Ant task for installing Spring in a local Maven2 repository is broken. Some artifacts are not installed in the repo when invoking the supplied Ant task, ""mvn.install.jars"".  The following artifacts are not installed: spring.jar, spring-mock.jar and spring-aspects.jar.  Also, the process of installing the artifacts in a local repository is pretty useless itself as no module poms are provided and thus installed. If I currently use Spring 2.0.2, which is available from public repositories, and do the manual installation of 2.0.3, then re-run my Maven2 project which relies on Spring, all the dependencies that are required for Spring is lost.  Effectively, this means that I have to copy the 2.0.2 module poms from my local repository, rename them to 2.0.3 and change all internal references to 2.0.2. Also (but this is highly theoretical) I will have to go through the dependency list provided with the build in order to verify that the version references of the dependencies are synchronized with that list.  ---  **Affects:** 2.0.3  **Issue Links:** - #7915 Distribution of nightly builds in a Maven2 repository (_**""is depended on by""**_)","closed","type: task,","spring-projects-issues","2007-03-04T01:57:44Z","2019-01-11T17:17:22Z"
"","7915","Distribution of nightly builds in a Maven2 repository [SPR-3229]","**[Kristoffer Moum](https://jira.spring.io/secure/ViewProfile.jspa?name=kristoffer79)** opened **[SPR-3229](https://jira.spring.io/browse/SPR-3229?redirect=false)** and commented  It would be really, really, really nice to have the nightly builds distributed in a Maven2 repository. This would make it so much easier to get hold of patches and new functionality.  ---  **Affects:** 2.0.3  **Issue Links:** - #7916 Ant-based Maven installation of Spring artifacts is broken (_**""depends on""**_)  12 votes, 3 watchers","closed","has: votes-jira,","spring-projects-issues","2007-03-02T21:17:03Z","2019-01-11T17:17:57Z"
"","8594","EhCacheFactoryBean.setBlocking doesn't work for named caches. [SPR-3914]","**[Kris Jenkins](https://jira.spring.io/secure/ViewProfile.jspa?name=krisajenkins)** opened **[SPR-3914](https://jira.spring.io/browse/SPR-3914?redirect=false)** and commented  If a cache is created on-the-fly by EhCacheFactoryBean, then setBlocking( true ) is honoured.  However, if the cache already exists (because it's named in ehcache.xml), then this property is ignored, and the cache is not decorated.  Arguably this is a bug in EhCache too.  You ought to be able to specify blocking caches directly in ehcache.xml.  Still, I feel that setBlocking should be honoured either way...  ---  **Affects:** 2.0.5  **Issue Links:** - #8173 EhCacheFactoryBean does not allow decorating a named cache defined inside the EHCache XML config files (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2007-09-24T22:00:36Z","2019-01-11T21:10:39Z"
"","8806","@RequestMapping doesn't honor params attribute [SPR-4127]","**[Konstantin Titorenko](https://jira.spring.io/secure/ViewProfile.jspa?name=ktitorenko)** opened **[SPR-4127](https://jira.spring.io/browse/SPR-4127?redirect=false)** and commented  After switch from RC1 to RC2 multiform controller is not working, since AnnotationMethodHandlerAdapter.HandlerMethodResolver is not checkin the params value. See the following source:  private boolean checkParameters(HttpServletRequest request, RequestMappingInfo mapping) { if (mapping.methods.length > 0) { for (RequestMethod type : mapping.methods) { if (type.toString().equals(request.getMethod().toUpperCase())) { return true; } } return false; } .... checking params... }  obviously ""return true"" statement should not be executed here. The source code in rc1 looks correct.  ---  **Affects:** 2.5 RC2  **Issue Links:** - #8805 `@RequestMapping` doesn't honor params attribute (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2007-11-19T03:22:57Z","2019-01-13T08:06:35Z"
"","8805","@RequestMapping doesn't honor params attribute [SPR-4126]","**[Konstantin Titorenko](https://jira.spring.io/secure/ViewProfile.jspa?name=ktitorenko)** opened **[SPR-4126](https://jira.spring.io/browse/SPR-4126?redirect=false)** and commented  After switch from RC1 to RC2 multiform controller is not working, since AnnotationMethodHandlerAdapter.HandlerMethodResolver is not checkin the params value. See the following source:  ---  **Affects:** 2.5 RC2  **Issue Links:** - #8806 `@RequestMapping` doesn't honor params attribute (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2007-11-19T03:21:23Z","2019-01-13T08:06:36Z"
"","8540","Reference document. Number of modules on the diagram. [SPR-3860]","**[Konstantin Morozov](https://jira.spring.io/secure/ViewProfile.jspa?name=konstantin)** opened **[SPR-3860](https://jira.spring.io/browse/SPR-3860?redirect=false)** and commented  There is a confusing statement in the spring-reference document. Spring Framework (2.1 M4), at the bottom of the page 16. It states: ""The Spring Framework contains a lot of features, which are well-organized in seven modules shown in the diagram below."" In the same time there are only six modules shown in the diagram.   ---  **Affects:** 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-10T23:36:42Z","2012-06-19T03:46:40Z"
"","7885","If ApplicationListener creation fails, it should not be silently ignored [SPR-3200]","**[Konstantin Kolinko](https://jira.spring.io/secure/ViewProfile.jspa?name=kkolinko)** opened **[SPR-3200](https://jira.spring.io/browse/SPR-3200?redirect=false)** and commented  There can exist configurations where the success of instantiation depends on creation order of the beans.  The AbstractApplicationContext class method refresh() calls registerListeners(); earlier than beanFactory.preInstantiateSingletons(); (*)  The registerListeners() method calls getBeansOfType(ApplicationListener.class, ...)  The problem is that that call implicitly tries to instantiate those beans that are implementing ApplicationListener interface, but can silently skip them if an exception occurs while creating.(**)  The later call to preInstantiateSingletons() can successfully instantiate those beans, but they were skipped when registering ApplicationListeners and won't receive the events.  EXPECTED BEHAVIOR: Startup failure, e.g. with BeanCurrentlyInCreationException.  ACTUAL BEHAVIOR: Application is started, but an ApplicationListener is not receiving the events.  I have a testcase ready for this issue.  ---  Notes: (*) Is it documented, that application listeners are being instantiated one-by-one before any other singletons? I would like it to be mentioned in chapter 3.8.2. Events of the Reference guide.  (**) Ignoring occurs in DefaultListableBeanFactory method getBeansOfType(Class, boolean, boolean).  Any errors caused by ""wrong"" creation order (manifested by BeanCurrentlyInCreationException) are ignored.  ---  **Affects:** 2.0.2  **Attachments:** - [source.zip](https://jira.spring.io/secure/attachment/12420/source.zip) (_2.38 kB_)","closed","in: core,","spring-projects-issues","2007-02-23T11:59:48Z","2019-01-13T22:44:07Z"
"","8111","Provide simplier XML for registering custom scopes [SPR-3428]","**[Kevin Cooney](https://jira.spring.io/secure/ViewProfile.jspa?name=namshubwriter)** opened **[SPR-3428](https://jira.spring.io/browse/SPR-3428?redirect=false)** and commented  The XML for registering custom scopes is too complicated. It would be easier to have XML similar to setting properties:  \  Not only is this simpler, it is more declarative, which is better for the end user and the bean factory implementation.  Having the scopes directly in the XML is also better for custom bean factory implementations, since registerScope() is declared in ConfigurableBeanFactory, while using CustomScopeConfigurer requires implementing ConfigurableListableBeanFactory, a much larger interface.   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-04-28T16:36:15Z","2012-06-19T09:37:35Z"
"","7931","Bean Factories that do not extend AbstractBeanFactory cannot participate in parent/child bean definition relationships [SPR-3246]","**[Kevin Cooney](https://jira.spring.io/secure/ViewProfile.jspa?name=namshubwriter)** opened **[SPR-3246](https://jira.spring.io/browse/SPR-3246?redirect=false)** and commented  Currently, AbstractBeanFactory only allows a child bean definition to have a parent bean definition in the parent bean factory if the parent bean factory is an AbstractBeanFactory. This is problematic for developers trying to write lightweight BeanFactory implementations.  Specifically, the following methods in AbstractBeanFactory have explicit checks that the parent bean factory is an AbstractBeanFactory:  getMergedBeanDefinition(String, boolean) getMergedBeanDefinition(String, BeanDefinition, BeanDefinition)  In both cases, the check is needed to allow the code to call getMergedBeanDefinition(String, true) on the parent bean factory.  I propose adding a new interface, BeanDefinitionSource, which includes these two methods. AbstractBeanFactory can be updated to implement this interface.  One small problem with this proposal is these methods in AbstractBeanFactory are protected. If this proposed change was done, clients that override these methods and don't make them public will no longer compile.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-09T17:50:55Z","2012-06-19T03:50:08Z"
"","8479","Handle XBean PropertyEditors which do not support setValue calls for non-String values [SPR-3799]","**[Kevan Miller](https://jira.spring.io/secure/ViewProfile.jspa?name=kevan)** opened **[SPR-3799](https://jira.spring.io/browse/SPR-3799?redirect=false)** and commented  I've observed the following error deploying a spring app on Geronimo 2.0.1. I don't see the error with Spring 2.0.4, but do see the error on Spring 2.0.5 through 2.0.7 nightly build  org.springframework.beans.TypeConverterDelegate.doConvertValue() is calling setValue() with an ArrayList object. This ArrayList object contains a single element of type String. The type of the PropertyEditor is java.lang.String.  Recreate instructions are below...  15:54:12,596 ERROR [ContextLoader] Context initialization failed org.springframework.beans.factory.access.BootstrapException: Unable to initialize group definition. Group resource name [classpath*:beanRefContext.xml], factory key [ear.context]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ear.context' defined in URL [jar:file:/Users/kevan/Desktop/geronimo-tomcat6-jee5-2.0.1/repository/org/spring/example/MultipleContexts/1.0/MultipleContexts-1.0.ear/lib/SampleJava.jar!/beanRefContext.xml]: Instantiation of bean failed; nested exception is org.apache.xbean.propertyeditor.PropertyEditorException: Value is not an instance of String Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ear.context' defined in URL [jar:file:/Users/kevan/Desktop/geronimo-tomcat6-jee5-2.0.1/repository/org/spring/example/MultipleContexts/1.0/MultipleContexts-1.0.ear/lib/SampleJava.jar!/beanRefContext.xml]: Instantiation of bean failed; nested exception is org.apache.xbean.propertyeditor.PropertyEditorException: Value is not an instance of String Caused by: org.apache.xbean.propertyeditor.PropertyEditorException: Value is not an instance of String at org.apache.xbean.propertyeditor.AbstractConverter.setValue(AbstractConverter.java:67) at org.springframework.beans.TypeConverterDelegate.doConvertValue(TypeConverterDelegate.java:276) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:192) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:107) at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:356) at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:438) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:153) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:794) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:712) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:385) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:155) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:291) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352) at org.springframework.context.access.ContextSingletonBeanFactoryLocator.initializeDefinition(ContextSingletonBeanFactoryLocator.java:141) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:382) at org.springframework.web.context.ContextLoader.loadParentContext(ContextLoader.java:316) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3823) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4324) at org.apache.geronimo.tomcat.GeronimoStandardContext.access$201(GeronimoStandardContext.java:60) at org.apache.geronimo.tomcat.GeronimoStandardContext$SystemMethodValve.invoke(GeronimoStandardContext.java:343) at org.apache.geronimo.tomcat.valve.GeronimoBeforeAfterValve.invoke(GeronimoBeforeAfterValve.java:47) at org.apache.geronimo.tomcat.GeronimoStandardContext.start(GeronimoStandardContext.java:196) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525) at org.apache.geronimo.tomcat.TomcatContainer.addContext(TomcatContainer.java:355) at org.apache.geronimo.tomcat.TomcatContainer$$FastClassByCGLIB$$9370b073.invoke(\) at net.sf.cglib.reflect.FastMethod.invoke(FastMethod.java:53) at org.apache.geronimo.gbean.runtime.FastMethodInvoker.invoke(FastMethodInvoker.java:38) at org.apache.geronimo.gbean.runtime.GBeanOperation.invoke(GBeanOperation.java:124) at org.apache.geronimo.gbean.runtime.GBeanInstance.invoke(GBeanInstance.java:830) at org.apache.geronimo.gbean.runtime.RawInvoker.invoke(RawInvoker.java:57) at org.apache.geronimo.kernel.basic.RawOperationInvoker.invoke(RawOperationInvoker.java:35) at org.apache.geronimo.kernel.basic.ProxyMethodInterceptor.intercept(ProxyMethodInterceptor.java:96) at org.apache.geronimo.tomcat.TomcatContainer$$EnhancerByCGLIB$$7ef7860e.addContext(\) at org.apache.geronimo.tomcat.TomcatWebAppContext.doStart(TomcatWebAppContext.java:524) at org.apache.geronimo.gbean.runtime.GBeanInstance.createInstance(GBeanInstance.java:996) at org.apache.geronimo.gbean.runtime.GBeanInstanceState.attemptFullStart(GBeanInstanceState.java:268) at org.apache.geronimo.gbean.runtime.GBeanInstanceState.start(GBeanInstanceState.java:102) at org.apache.geronimo.gbean.runtime.GBeanInstance.start(GBeanInstance.java:539) at org.apache.geronimo.gbean.runtime.GBeanDependency.attemptFullStart(GBeanDependency.java:111) at org.apache.geronimo.gbean.runtime.GBeanDependency.addTarget(GBeanDependency.java:146) at org.apache.geronimo.gbean.runtime.GBeanDependency$1.running(GBeanDependency.java:120) at org.apache.geronimo.kernel.basic.BasicLifecycleMonitor.fireRunningEvent(BasicLifecycleMonitor.java:176) at org.apache.geronimo.kernel.basic.BasicLifecycleMonitor.access$300(BasicLifecycleMonitor.java:44) at org.apache.geronimo.kernel.basic.BasicLifecycleMonitor$RawLifecycleBroadcaster.fireRunningEvent(BasicLifecycleMonitor.java:254) at org.apache.geronimo.gbean.runtime.GBeanInstanceState.attemptFullStart(GBeanInstanceState.java:294) at org.apache.geronimo.gbean.runtime.GBeanInstanceState.start(GBeanInstanceState.java:102) at org.apache.geronimo.gbean.runtime.GBeanInstanceState.startRecursive(GBeanInstanceState.java:124) at org.apache.geronimo.gbean.runtime.GBeanInstance.startRecursive(GBeanInstance.java:553) at org.apache.geronimo.kernel.basic.BasicKernel.startRecursiveGBean(BasicKernel.java:379) at org.apache.geronimo.kernel.config.ConfigurationUtil.startConfigurationGBeans(ConfigurationUtil.java:448) at org.apache.geronimo.kernel.config.ConfigurationUtil.startConfigurationGBeans(ConfigurationUtil.java:485) at org.apache.geronimo.kernel.config.KernelConfigurationManager.start(KernelConfigurationManager.java:187) at org.apache.geronimo.kernel.config.SimpleConfigurationManager.startConfiguration(SimpleConfigurationManager.java:530) at org.apache.geronimo.kernel.config.SimpleConfigurationManager.startConfiguration(SimpleConfigurationManager.java:511) at org.apache.geronimo.kernel.config.SimpleConfigurationManager$$FastClassByCGLIB$$ce77a924.invoke(\) at net.sf.cglib.reflect.FastMethod.invoke(FastMethod.java:53) at org.apache.geronimo.gbean.runtime.FastMethodInvoker.invoke(FastMethodInvoker.java:38) at org.apache.geronimo.gbean.runtime.GBeanOperation.invoke(GBeanOperation.java:124) at org.apache.geronimo.gbean.runtime.GBeanInstance.invoke(GBeanInstance.java:865) at org.apache.geronimo.kernel.basic.BasicKernel.invoke(BasicKernel.java:239) at org.apache.geronimo.kernel.KernelGBean.invoke(KernelGBean.java:342) at org.apache.geronimo.kernel.KernelGBean$$FastClassByCGLIB$$1cccefc9.invoke(\) at net.sf.cglib.reflect.FastMethod.invoke(FastMethod.java:53) at org.apache.geronimo.gbean.runtime.FastMethodInvoker.invoke(FastMethodInvoker.java:38) at org.apache.geronimo.gbean.runtime.GBeanOperation.invoke(GBeanOperation.java:124) at org.apache.geronimo.gbean.runtime.GBeanInstance.invoke(GBeanInstance.java:865) at org.apache.geronimo.kernel.basic.BasicKernel.invoke(BasicKernel.java:239) at org.apache.geronimo.system.jmx.MBeanGBeanBridge.invoke(MBeanGBeanBridge.java:168) at com.sun.jmx.mbeanserver.DynamicMetaDataImpl.invoke(DynamicMetaDataImpl.java:213) at com.sun.jmx.mbeanserver.MetaDataImpl.invoke(MetaDataImpl.java:220) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:815) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:784) at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1408) at javax.management.remote.rmi.RMIConnectionImpl.access$100(RMIConnectionImpl.java:81) at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1245) at java.security.AccessController.doPrivileged(Native Method) at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1348) at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:782) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:294) at sun.rmi.transport.Transport$1.run(Transport.java:153) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:149) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:466) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:707) at java.lang.Thread.run(Thread.java:613)  Download geronimo-tomcat6 assembly -- http://www.apache.org/dyn/closer.cgi/geronimo/2.0.1/geronimo-tomcat6-jee5-2.0.1-bin.zip (N.B. use Tomcat, there's a geronimo specific problem on the Jetty assembly -- I'm working on fixing...).  Start the server (you need JAVA_HOME or JRE_HOME environment variable set to your java installation):  ./geronimo-tomcat6-jee5-2.0.1/bin/geronimo.sh run  Then deploy the ear from this example http://springtips.blogspot.com/2007/06/using-shared-parent-application-context.html  ./geronimo-tomcat6-jee5-2.0.1/bin/deploy.sh deploy multiple-contexts-sample.zip    ---  **Affects:** 2.0.5, 2.0.7  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-08-23T07:49:03Z","2012-06-19T03:50:13Z"
"","8871","Add support for Qualifiers in SingletonBeanRegistry [SPR-4193]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4193](https://jira.spring.io/browse/SPR-4193?redirect=false)** and commented  I use SingletonBeanRegistry to add existing singletons to the context a runtime.  I'd like to be able to register the singletons using qualifiers, as if the singleton had been defined in the context using the \ element.  Does this make good sense?   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-28T22:49:06Z","2007-12-06T21:14:29Z"
"","8853","Give request- and session-scoped beans access to the scope [SPR-4175]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4175](https://jira.spring.io/browse/SPR-4175?redirect=false)** and commented  How hard would it be to give request- and session-scoped beans access to the request or session as appropriate.  For example, when a bean is instantiated into the session scope, the HttpSession could be injected into the bean if it has an appropriate method.  The method could be located by name, type or annotation.  The use case is that sometimes not only is the bean request/session-scoped, but it needs access to the request/session itself.  Currently the session has to be given to it by the MVC controller, which is a poor seperation of concerns.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-27T18:11:25Z","2012-06-19T03:47:16Z"
"","8851","Allow use of MethodNameResolvers with @Controller [SPR-4173]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4173](https://jira.spring.io/browse/SPR-4173?redirect=false)** and commented  I have an existing subclass of MultiActionController which makes use of a custom MethodNameResolver.  I would very much like to convert the controller to use the `@Controller` stereotype, but there doesn't seem to be a way of using the logic of the MethodNameResolver.  Therefore I suggest that `@Controller-annotated` classes can also be somehow annotated with a MethodNameResolver.  This would be as an alternative to using `@RequestMapping` and the like.  Perhaps the annotation would auto-locate the resolver in the context, or fetch it by name.  Thoughts?  ---  **Affects:** 2.5 final  **Issue Links:** - #8844 Allow for wildcards in type-level `@RequestMapping` in combination with InternalPathMethodNameResolver","closed","type: enhancement,","spring-projects-issues","2007-11-27T07:55:59Z","2019-01-13T08:06:24Z"
"","8830","Bulk add methods on StaticMessageSource [SPR-4152]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4152](https://jira.spring.io/browse/SPR-4152?redirect=false)** and commented  Can we have additional methods on StaticMessageSource whi ch allow us to bulk add messages?  For example:  public void addMessages(Map messages, Locale locale) { ... }   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-21T21:26:03Z","2012-06-19T03:47:14Z"
"","8693","Include an all-in-one JAR [SPR-4013]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4013](https://jira.spring.io/browse/SPR-4013?redirect=false)** and commented  Would it be possible fo 2.5 to ship with an all-inclusive JAR file, in a similar mould to 2.0?  The spring.jar that comes with 2.5RC1 has a substantial subset of the API, but not all of it.  It would make life easier, in many cases, just to have everything togather in one JAR.  Additionally, spring.jar in 2.0 included the aopalliance classes, which aren't in the 2.5RC1 package.  I think those should also be in this hypothetical all-in-one JAR.   ---  **Affects:** 2.5 RC1","closed","in: core,","spring-projects-issues","2007-10-27T03:52:11Z","2019-01-11T16:16:58Z"
"","8638","[NoSuchRequestHandlingMethodException] Improve exception message [SPR-3958]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3958](https://jira.spring.io/browse/SPR-3958?redirect=false)** and commented  The constructor of NoSuchRequestHandlingMethodException generates an exception message using the toString() of the HttpServletRequest object.  Obviously, this relies on toString() being usefully defined.  In Tomcat, however, this isn't the case, - org.apache.catalina.connector.RequestFacade does not have a toString() defined, so the exception message isn't much use.  I suggest that some some pertinent details are extracted from the request object, such as requestURI, parameters, etc.  A bit cumbersome, but an improvement.  I always seem to come up with these issues the day after a point release :-(   ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2007-10-03T21:13:15Z","2012-06-19T03:47:11Z"
"","8474","[MockHttpSession] Allow session ID to be set [SPR-3794]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3794](https://jira.spring.io/browse/SPR-3794?redirect=false)** and commented  MockHttpSession auto-generates its own session ID using an incrementing static field.  This makes it rather unpredictable for tests which depend on a specific session ID.  Please add a setId() method, or an overloaded constructor.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-08-22T20:40:11Z","2012-06-19T03:50:47Z"
"","8470","[MockHttpServletRequest] Allow bulk adding of parameters [SPR-3790]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3790](https://jira.spring.io/browse/SPR-3790?redirect=false)** and commented  MockHttpServletRequest has methods to add single parameter values, but no way to add them in bulk.  A setParameters(Map) method would be handy here.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-08-20T21:07:54Z","2012-06-19T03:50:22Z"
"","8440","Alter JdbcDaoSupport to use JdbcOperations instead of JdbcTemplate [SPR-3759]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3759](https://jira.spring.io/browse/SPR-3759?redirect=false)** and commented  This is a non-backward-compatible change, but I think JdbcDaoSupport should expose its JdbcTemplate object as a JdbcOperations type.  The current implementation is hard to test, since you cannot inject a mock JdbcOperations object into the DAO, you can only inject a JdbcTemplate.  This is less test friendly.  I appreciate this is a tricky one to manage, however.  Perhaps some balance of JdbcOperations injection and getJdbcTemplate() could be achieved?  ---  **Affects:** 2.0.6  **Issue Links:** - #8782 JdbcDaoSupport.setJdbcTemplate() should accept JdbcOperations (_**""is duplicated by""**_) - #8832 HibernateDaoSupport should use HibernateOperations in method signatures  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-08-12T21:35:11Z","2019-01-11T19:32:57Z"
"","8330","Unwrap RuntimeExceptions in SpringModelMBean [SPR-3649]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3649](https://jira.spring.io/browse/SPR-3649?redirect=false)** and commented  javax.management.RequiredModelMBean has a rather peculiar exception handling mechanism in invokeMethod().  Specifically, when the reflection call throws an InvocationTargetException, and that is wrapping a RuntimeException, then RequiredModelMBean re-wraps the RuntimeException before re-throwing it.  Furthermore, because MBeanException doesn't use java's standard ""Exception.getCause()"" structure, this contained RuntimeException tends to get lost (for example, when logging MBeanException , the contained exception doesn't appear in stack traces).  I suggest that the situation is improved using SpringModelMBean, which is currently used only to fiddle the classloader before passing control to the RequiredModelMBean.  This class could be altered to catch MBeanException where appropriate, examine the contained exception to see if it's a RuntimeException, and then rethrow that instead, discarding the wrapper.  This would seem to be a case for always using SpringModelMBean, instead of only in cases where the classloading needs fixed as requested in MBeanExporter.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-07-03T20:43:21Z","2007-12-06T21:07:17Z"
"","8316","Allow @ManagedXYZ on interfaces [SPR-3635]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3635](https://jira.spring.io/browse/SPR-3635?redirect=false)** and commented  Take the following code:  `@ManagedResource` class X implements Y {  String getProp() { ... } }  interface Y { `@ManagedAttribute` String getProp(); }  Intuitively, when a bean of type X is exposed through JMX, it would have getProp() exposed as a JMX attribute.  However, it only exposes attributes/operations that are declared in X itself.  For consistency with `@Transactional` annotations, I think it should search superclasses and implemented interfaces for `@Managed` anootations and act accordingly.  ---  **Affects:** 2.0.6  **Issue Links:** - #9714 Spring JMX Annotation inheritance support is inconsistent (or at least difficult in some situations)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8f6a42bf646442192dcae01a9334f246508c7c99  5 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-06-29T01:25:25Z","2019-01-11T18:33:53Z"
"","8287","MBeanExporter not unregistering beans during failed startup [SPR-3625]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3625](https://jira.spring.io/browse/SPR-3625?redirect=false)** and commented  During bean registration, MBeanExporter is supposed to unregister all beans if the registration process fails.  However, if the registration process fails due to an arbitrary RuntimeException, then unregisterBeans() will not be called and they'll be left hanging around.  If it helps the use case, then the RuntimeException I triggered was thrown from inside my bean's toString() method, which was called on line 705 when MBeanExporter was trying to construct a MBeanExportException.  Ironic.  Would it not make sense to expand the catch on line 500 to catch every Exception, not just MBeanExportException?   ---  **Affects:** 2.0.6","closed","in: core,","spring-projects-issues","2007-06-26T22:24:49Z","2012-06-19T03:51:01Z"
"","8303","Add option to shutdownNow() in ScheduledExecutorFactorybean [SPR-3621]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3621](https://jira.spring.io/browse/SPR-3621?redirect=false)** and commented  When destroy() is called on ScheduledExecutorFactoryBean, it invokes the shutdown() method on the contained ScheduledExecutorService.  This allows currently executing tasks to complete.  I'd like to able to configure the ScheduledExecutorFactoryBean so that it calls shutdownNow() instead of shutdown(), which attempts to interrupt currently executing tasks.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-06-26T00:05:42Z","2012-06-19T03:50:25Z"
"","8293","Add invocation timout to JmsInvokerClientInterceptor [SPR-3611]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3611](https://jira.spring.io/browse/SPR-3611?redirect=false)** and commented  JmsInvokerClientInterceptor makes use of a standard JMS QueueRequestor to send the request message receive the response message.  Unfortunately, this means that JmsInvokerClientInterceptor cannot take advantage of the timeout features available on the QueueSender and QueueReceiver classes, which are created internally in QueueRequestor.  I suggest that the use of QueueRequestor is replaced with a similar class which incorporates timeouts.  The following re-implementation of QueueRequestor.request() could be something like:  public Message request(Message message) throws JMSException { message.setJMSReplyTo(replyQueue); message.setJMSDeliveryMode(DeliveryMode.NON_PERSISTENT); requestSender.setTimeToLive(timeoutMillis); requestSender.send(message); return replyReceiver.receive(timeoutMillis); }  The timeout value would of course be injected into the JmsInvokerClientInterceptor bean.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-06-22T01:54:52Z","2012-06-19T03:50:25Z"
"","8278","Widen throws clause of DispatcherServlet.noHandlerFound() [SPR-3596]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3596](https://jira.spring.io/browse/SPR-3596?redirect=false)** and commented  The throws clause of DispatcherServlet.noHandlerFound() could be expanded beyond just IOException.  The doDispatch() method can handle any Exception being thrown here, so noHandlerFound() could just throw Exception.  I have a custom subclass of DispatcherServlet which overrides noHandlerFound() to provide specialised behaviour.  This behaviour involves throwing checked exceptions which I can't currently throw out of noHandlerFound().   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-06-16T01:56:52Z","2012-06-19T03:50:30Z"
"","8273","Add extension point to FrameworkServlet to allow subclasses to alter servlet app context [SPR-3591]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3591](https://jira.spring.io/browse/SPR-3591?redirect=false)** and commented  In FrameworkServlet.createWebApplicationContext it would be good it it invoked a protected method before calling refresh() on the context, passing the context in to this method.  This method would be empty in FrameworkServlet, but could be over-ride by subclasses which wished to fiddle with the context before it was activated.  As a sample use case, I have a subclass of DispatcherServlet that wants to add a custom BeanFactoryPostProcessor to the context, without requirding it to be defined in the context config files themselves.  I currently have to do something like create a custom ConfigurableWebApplicationContext or override createWebApplicationContext and copy the content from FrameworkServlet, neither of which is appealing.  This change would seem to be in keeping with the practice of adding many extension points in FrameworkServlet and DispatcherServlet to accomodate custom subclasses.   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-06-15T03:16:48Z","2012-06-19T03:50:24Z"
"","8186","Incompatible changes to AbstractFactoryBean [SPR-3503]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3503](https://jira.spring.io/browse/SPR-3503?redirect=false)** and commented  In 2.0.5, AbstractFactoryBean explicitly declared the abstract method getObjectType(), even through it was in the FactoryBean interface.  As such, concrete subclasses of AbstractFactoryBean will annotate getObjectType() with `@Override`.  However, 2.1M1 does not declare that abstract method, and so those concrete subclasses will not compile.  With a clean sheet, not having those abstract declarations is fine, but this has introduced a compile-time incompatibility.  Can the abstract declaration be put back in, please?   ---  **Affects:** 2.1 M1","closed","type: enhancement,","spring-projects-issues","2007-05-20T23:18:09Z","2012-06-19T03:50:53Z"
"","8129","@ManagedOperationParameter - add support for default values [SPR-3446]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3446](https://jira.spring.io/browse/SPR-3446?redirect=false)** and commented  Assuming JMX is capable of this, then the `@ManagedOperationParameter` annotation needs a way of specifying the default value for the parameter.  As a use case, take an operation which takes a boolean parameter.  In the JBoss JMX console, this parameter defaults to ""true"", whereas I need it to default to ""false"" for safety reasons.  Can this be done?   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-05-02T22:11:04Z","2007-09-18T05:54:59Z"
"","8053","Add support for ""exception-proof"" tasks in ScheduledExecutorFactoryBean [SPR-3369]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3369](https://jira.spring.io/browse/SPR-3369?redirect=false)** and commented  If you look at the javadoc for java.util.concurrent.ScheduledExecutorService.scheduledAtFixedRate() and scheduleAtFixedDelay(), it says that ""If any execution of the task encounters an exception, subsequent executions are suppressed "".  This is rather undesirable behaviour in many (most?) cases.  My suggestion is that ScheduledExecutorFactoryBean wraps the ScheduledExecutorTask's Runnable inside another Runnable, which catches and logs any RuntimeExceptions or Errors which leak out of the wrapped Runnable, and doesn't let them leak back up into the ScheduledExecutorService.  This would allow subsequent executions to continue, regardless of the exception state of previous executions.  This could perhaps be configurable via a flag in the factory, with the default being to continue existing behaviour.  ---  **Affects:** 2.0.4  **Issue Links:** - #9752 Exception handling in ScheduledExecutorFactoryBean's scheduledExecutorTasks's","closed","type: enhancement,","spring-projects-issues","2007-04-12T06:11:43Z","2019-01-11T18:15:42Z"
"","8016","Add bean name to ThreadPoolTaskExecutor and ScheduledExecutorFactoryBean startup/shutdown logging [SPR-3331]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3331](https://jira.spring.io/browse/SPR-3331?redirect=false)** and commented  Really minor cosmetic thing, but it would be nice if ThreadPoolTaskExecutor and ScheduledExecutorFactoryBean were BeanNameAware, and printed that beanName when they do their startup and shutdown logging.   ---  **Affects:** 2.0.3  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-04-01T23:46:36Z","2012-06-19T03:51:05Z"
"","7936","[AbstractFactoryBean] Expose beanFactory property to subclasses [SPR-3251]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3251](https://jira.spring.io/browse/SPR-3251?redirect=false)** and commented  In Spring 2.0.3, AbstractBeanFactory was altered to be BeanFactoryAware.  In cases where I had existing subclasses of AbstractBeanFactory which were also BeanFactoryAware, the setBeanFactory() method of the subclass was now overriding the method in AbstractBeanFactory.  I'd like to change my subclasses to just inherit the beanFactory from the superclass, but AbstractBeanFactory does not re-expose the beanFactory as a getter.  Could we have a protected getBeanFactory()?   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-12T19:37:43Z","2012-06-19T03:51:19Z"
"","7905","[form:options] itemLabel and itemValue attributes ignored when rendering Map [SPR-3219]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-3219](https://jira.spring.io/browse/SPR-3219?redirect=false)** and commented  When using the  tag where the items data is a Map, the itemLabel and itemValue attributes are ignored.  Instead, the rendering logic simply uses the toString() of the map key for the option's value, and the toString() of the map value as the option's label.  This isn't much use when either the map key or value is a bean.  A more sensible approach would be to use the itemValue attribute to retrieve a property of the map key, and the itemLabel attribute to retrieve a property of the map value.  Alternatively, since Map.Entry is itself bean-compliant, the itemValue and itemLable values could be used as properties of the Map.Entry, e.g. itemValue=""key.x"" or itemLabel=""value.y""  This was previously raised as #7349, but I thought it warranted a bug report.  ---  **Affects:** 2.0.2  **Issue Links:** - #7349 Make itemLabel/itemValue meaningful in map-based option rendering? (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2007-02-27T21:35:27Z","2019-01-12T16:51:45Z"
"","8472","Update Petclinic sample app to use Spring2 form tags [SPR-3792]","**[Ken Krebs](https://jira.spring.io/secure/ViewProfile.jspa?name=kktec)** opened **[SPR-3792](https://jira.spring.io/browse/SPR-3792?redirect=false)** and commented   --- No further details from [SPR-3792](https://jira.spring.io/browse/SPR-3792?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-08-22T04:38:41Z","2012-06-19T03:50:35Z"
"","8510","doc: DataSourceUtils documentation out of date [SPR-3830]","**[Ken Geis](https://jira.spring.io/secure/ViewProfile.jspa?name=kgeis)** opened **[SPR-3830](https://jira.spring.io/browse/SPR-3830?redirect=false)** and commented  This section refers to functionality (""static methods to obtain connections from JNDI"") that was removed from Spring for the Spring 2.0 release:  http://www.springframework.org/docs/reference/jdbc.html#jdbc-DataSourceUtils   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: bug,","spring-projects-issues","2007-08-31T08:45:20Z","2012-06-19T03:51:01Z"
"","8795","Add support for a TestDatabaseFactory to spring-test [SPR-4116]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-4116](https://jira.spring.io/browse/SPR-4116?redirect=false)** and commented  It'd be nice to have a convenience factory bean that produces a in-memory data source fully populated with a schema and test data to faciliate DAO testing.  Something like this Code for such a test utility class is attached -- this code is currnetly used in SpringSource training curriculum and it would be good to integrate it properly into the framework spring-test module.   ---  **Affects:** 2.5 RC2  **Attachments:** - [test-database-factory.zip](https://jira.spring.io/secure/attachment/14962/test-database-factory.zip) (_12.40 kB_)  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-11-16T08:40:44Z","2012-06-19T03:46:56Z"
"","8691","Add support for outputting a 'dialog key', like a Web Flow execution key, when using the form tag. [SPR-4011]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-4011](https://jira.spring.io/browse/SPR-4011?redirect=false)** and commented  Currently when using SWF together with MVC the developer has to manually embed the flow execution key hidden form field on every form declaration to ensure the form view state is restored.  Forgetting to include the execution key is a common bug.  It'd be nice if the form tag could output this key automatically.  ---  **Affects:** 2.5 RC1  **Issue Links:** - #8337 AbstractWizardFormController views do not send current page number by default - #8838 `@SessionAttributes` doesn't work with tabbed browsing  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2007-10-26T03:23:39Z","2019-01-13T08:07:00Z"
"","8240","JSF: No way to define a web-layer specific context in a JSF environment scoped by a FacesServlet. [SPR-3557]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-3557](https://jira.spring.io/browse/SPR-3557?redirect=false)** and commented  As far as I know, there is no supported way of bootstrapping a FacesServlet scoped web application context and hooking it in as a child of the root web application context.  Because of this, developers are forced to mix web-layer beans with application-layer beans deployed in the root web application context.  e.g.:             It would be great if we hook in to the JSF infrastructure to bootstrap a separate web-layer context fit for customizing JSF as well as extensions used such as Spring Web Flow.   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-06-05T07:13:46Z","2008-12-17T01:58:58Z"
"","8172","Support for generating URLs from patterns with placeholders [SPR-3489]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-3489](https://jira.spring.io/browse/SPR-3489?redirect=false)** and commented  From a jsp if you could say something like this:        And it spits out something like this:  http://www.orbitz.com/shop/air-search?src=ORD&dest=MCO  Where the pattern looks something like this:  url-patterns.properties airSearch=/shop/air-search/?src=${src}&dest=${mco}  The parameter subsitution would occur from whats in the request parameter map.  This would be useful for invoking arbitrary controllers such as Web Flows or plain MVC controllers.  Particularly for rest-ful (stateless) interactions.  Orbitz would benefit from this particularly, for example.  Rails and Django both have a similiar feature.   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-05-16T08:54:05Z","2008-12-17T01:59:35Z"
"","8157","Reference 13.6.2's sample code [SPR-3474]","**[Keesun Baik](https://jira.spring.io/secure/ViewProfile.jspa?name=keesun)** opened **[SPR-3474](https://jira.spring.io/browse/SPR-3474?redirect=false)** and commented  The sample code of 13.6.2 has no ""class"" attribute at bean definition.  \                       \  must be..  \                       \ Have a nice weekend~!!! :-)   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-05-11T20:28:58Z","2012-06-19T03:50:29Z"
"","8134","Reference 9.6.2's misspel [SPR-3451]","**[Keesun Baik](https://jira.spring.io/secure/ViewProfile.jspa?name=keesun)** opened **[SPR-3451](https://jira.spring.io/browse/SPR-3451?redirect=false)** and commented  The example of 9.6.2. Using the PlatformTransactionManager has one misspel  def.setTransactionName(""SomeTxName"");  there is no method ""setTransactionName"" this should be changed by ""setName"" :)  have a good day!   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-05-03T20:34:38Z","2012-06-19T03:50:16Z"
"","8088","Doc: Misspells in reference chapters 8, 9, 12 [SPR-3405]","**[Keesun Baik](https://jira.spring.io/secure/ViewProfile.jspa?name=keesun)** opened **[SPR-3405](https://jira.spring.io/browse/SPR-3405?redirect=false)** and commented  Chapter 8 8.3.5.1's `@ExpectedException`  and if  instance of the exception is thrown during the test method execution then the test is considered to have passed (likewise if  instance of the exception is not thrown during the test method execution then the test is considered to have failed.  there are two ""an""s  Chapter 9 9.6.1.1. Specifying transaction settings's example code has an double quater at the end.   ""in that instances do""  Chapter 12 12.2.4. Implementing Spring-based DAOs without callbacks's Example Code has some wrong code.  public class ProductDaoImpl extends HibernateDaoSupport implements ProductDao {      public Collection loadProductsByCategory(String category)             throws DataAccessException, MyException {              Session session = getSession(getSessionFactory(), false);         try {             List result = session.find(                 ""from test.Product product where product.category=?"",                 category, Hibernate.STRING);             if (result == null) {                 throw new MyException(""invalid search result"");             }             return result;         }         catch (HibernateException ex) {             throw convertHibernateAccessException(ex);         }     }  }  HibernateDaoSupport doesn't have ""getSession(SessionFactory sessionFactory, boolean allowCreate)"" method. And org.hibernate.Session doesn't have ""find"" method. and org.hibernate.classic.Session class was deprecated so fix the code like following code please.  Session session = getSession(false); try { List result = session.createQuery(""from test.Product product where product.category=?"").setString(0, category).list(); if (result == null) { throw new MyException(""invalid search result""); } return result; }  Sorry for my ugly English. :)  ---  **Affects:** 2.0.4  **Issue Links:** - #8138 12.2.4 Hibernate documentation calls an unknown method (_**""is duplicated by""**_)","closed","type: documentation,","spring-projects-issues","2007-04-23T15:37:40Z","2019-01-11T17:42:50Z"
"","8032","Reference 6.6.1's misspell [SPR-3348]","**[Keesun Baik](https://jira.spring.io/secure/ViewProfile.jspa?name=keesun)** opened **[SPR-3348](https://jira.spring.io/browse/SPR-3348?redirect=false)** and commented  The example on the 6.6.1 have some misspells.  In class Main's main method, ""factory.adddInterface(Pojo.class);"" must be ""factory.addInterface(Pojo.class)"". And In class SimplePojo's foo method, ""((Pojo) AopContext.getCurrentProxy()).bar();"" must be ""((Pojo) AopContext.currentProxy()).bar();"" AopContext doesn't have getCurrentProxy().   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-04-05T16:23:25Z","2012-06-19T03:51:21Z"
"","8642","AbstractJpaTests.customizeBeanFactory is never called [SPR-3962]","**[Kees van Dieren](https://jira.spring.io/secure/ViewProfile.jspa?name=keesvandieren)** opened **[SPR-3962](https://jira.spring.io/browse/SPR-3962?redirect=false)** and commented  JavaDoc for customizeBeanFactory says that this method will be invoked on all calls to refresh - but it is actually not called.   ---  **Affects:** 2.0.3, 2.0.4","closed","in: core,","spring-projects-issues","2007-10-05T01:37:06Z","2019-01-11T21:12:11Z"
"","8223","OrmXmlOverridingShadowingClassLoader cannot load Jasper Report jrxml generated classes (in AbstractJpaTests) [SPR-3540]","**[Kees van Dieren](https://jira.spring.io/secure/ViewProfile.jspa?name=keesvandieren)** opened **[SPR-3540](https://jira.spring.io/browse/SPR-3540?redirect=false)** and commented  Jasper report generated classes, are not loaded correct by this Class loader.  Create a bean which compiles a jasper report, and fills a jasper report. The fill step from the Jasper report will work with the normal class loader. If called from a main() / web container, this report works normally. If called from a JUnit tests that extends from AbstractJpaTests, it will not work. The following error will occur: java.lang.ClassCastException: YOUR_REPORT_NAME_1180710532958_496838 cannot be cast to net.sf.jasperreports.engine.fill.JREvaluator at net.sf.jasperreports.engine.design.JRAbstractJavaCompiler.loadEvaluator(JRAbstractJavaCompiler.java:83)  I have seen the generated class, and it does extend net.sf.jasperreports.engine.fill.JREvaluator so it should bew possible to cast it to this type.  the JrClassLoader from Jasper reports, has the OrmXmlOverridingShadowingClassLoader as parent class loader. The class Classloader, method protected final Class defineClass(String name, byte[] b, int off, int len, ProtectionDomain protectionDomain) is called, and gives a wrong class as result  Jasper reports code:           // compile report             String myReportXml = "" "" +                             "" "" +                             "" "" +                             """" +                             """" +                             """" +                             """" +                             """" +                             """" +                             """" +                             """" +                             """";             // Using depricated StringBufferInputStream             // No method accepting a StringReader is available             JasperReport myJasperReport = JasperCompileManager.compileReport(                             new StringBufferInputStream(myReportXml );                  // fill report, this steps failed if OrmXmlOverridingShadowingClassLoader  is used!             JasperPrint myJasperPrint = JasperFillManager.fillReport(                             myJasperReport, new HashMap(), new JREmptyDataSource());  Workaround: do not test Jasper reports in AbstractJpaTests, but use other JUnit superclasses instead.   ---  **Affects:** 2.0.5","closed","in: core,","spring-projects-issues","2007-06-01T02:17:39Z","2019-01-12T16:40:07Z"
"","8867","Action attribute in form tag incorrectly rendered when using Tiles2 on OC4J [SPR-4189]","**[Kees de Kooter](https://jira.spring.io/secure/ViewProfile.jspa?name=kdekooter)** opened **[SPR-4189](https://jira.spring.io/browse/SPR-4189?redirect=false)** and commented  This is in a fact a reopening of #6708.  In my webapp I use Tiles 2 for laying out pages. In one of the tiles I use the  tag. The action that is rendered is the path of the main tile instead of the original calling action.  The problem is that when the page is rendered the method  request.getRequestURI() returns the tile name and not the original action name. In the controller code the getRequestURI() properly returns the action.  Not sure if this is a spring issue or a tiles issue.  ---  **Affects:** 2.5 final","closed","type: bug,","spring-projects-issues","2007-11-28T18:21:04Z","2019-01-11T16:01:49Z"
"","8801","Propagation REQUIRES_NEW fails on JBoss Application Server 4.2.1 when keeping a JDBC Connection handle [SPR-4122]","**[Kavipriya Gnanasambandam](https://jira.spring.io/secure/ViewProfile.jspa?name=kavipriya)** opened **[SPR-4122](https://jira.spring.io/browse/SPR-4122?redirect=false)*** and commented  My issue is same as that of the issue #8755. I tried upgrading to the latest Spring 2.5 jar final but still i am getting the same issue.  I am obtaining the error message as  In this scenario also we have the call from the REQUIRED to the REQUIRES_NEWWe obtained the following error.  07:18:14 DEBUG      [] [Admin] util.spring.TweJtaTransactionManager  - Suspending current transaction, creating new transaction with name [com.taxware.priya.util.sequence.interfaces.ICustomDBSequenceOrganizer.getSequenceNextVal] 07:18:14 ERROR      [] [Admin] util.sequence.CustomDBSequenceGenerator - Exception in getSequenceNextVal(). keyName = TJ_ACCOUNTING_METHOD_SEQ, dataSourceName= TweDSRef Message: Trying to change transaction TransactionImple < ac, BasicAction: a0359a9:6ba:4740d127:27a status: ActionStatus.RUNNING > in enlist! java.lang.IllegalStateException: Trying to change transaction TransactionImple < ac, BasicAction: a0359a9:6ba:4740d127:27a status: ActionStatus.RUNNING > in enlist! at org.jboss.resource.connectionmanager.TxConnectionManager$TxConnectionEventListener.enlist(TxConnectionManager.java:525) at org.jboss.resource.connectionmanager.TxConnectionManager.transactionStarted(TxConnectionManager.java:328) at org.jboss.resource.connectionmanager.CachedConnectionManager.userTransactionStarted(CachedConnectionManager.java:360)  ---  **Affects:** 2.0.2  **Attachments:** - [mssql-ds.xml](https://jira.spring.io/secure/attachment/13166/mssql-ds.xml) (_3.25 kB_) - [SpringConfig.xml](https://jira.spring.io/secure/attachment/13167/SpringConfig.xml) (_3.86 kB_)  **Issue Links:** - #8797  PROPAGATION_REQUIRES_NEW fails on JBoss 4.2.1 when using Hibernate connection release mode ""on_close"" - #8786 Transaction Manager issue ""NO Active JTA Transaction"". Sprying trying to synchronise a transaction marked for rollback.","closed","type: enhancement,","spring-projects-issues","2007-11-18T10:34:45Z","2019-01-11T15:47:17Z"
"","8786","Transaction Manager issue ""NO Active JTA Transaction"". Sprying trying to synchronise a transaction marked for rollback. [SPR-4107]","**[Kavipriya Gnanasambandam](https://jira.spring.io/secure/ViewProfile.jspa?name=kavipriya)** opened **[SPR-4107](https://jira.spring.io/browse/SPR-4107?redirect=false)** and commented  I am using Spring 2.0.2 with JBoss 4.2.1 which uses Arjuna Transaction Manager. When i am trying to rollback a transaction i am getting the error message as IllegalStateException""No Active JTA Transaction"" The integration between Spring and JBOSS does not work properly anymore after upgrading jboss from 4.0.4 to 4.2.1.  Raised the same issue in the JBoss forum but they have replied that it is a spring bug that it is trying to synchronise a inactive transaction.  For more information Please refer the below links.  http://jira.jboss.com/jira/browse/JBAS-4972 http://www.jboss.com/index.html?module=bb&op=viewtopic&t=118261  I have also raised it in the spring forum Please refer the below link  http://forum.springframework.org/showthread.php?t=27867  Can you please help me out in this as this seems to be very critical.  Thanks, Kavipriya  ---  **Affects:** 2.0.2, 2.5 RC1  **Issue Links:** - #8862 Transaction not rolling back with JBoss 4.2.x - #8801 Propagation REQUIRES_NEW fails on JBoss Application Server 4.2.1 when keeping a JDBC Connection handle  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: bug,","spring-projects-issues","2007-11-15T00:46:56Z","2019-01-11T15:43:36Z"
"","8217","BridgeMethodResolver throws exception when using generic types [SPR-3534]","**[Katarzyna Gniadzik](https://jira.spring.io/secure/ViewProfile.jspa?name=k.gniadzik)** opened **[SPR-3534](https://jira.spring.io/browse/SPR-3534?redirect=false)*** and commented  I'm trying to use annotation based transactions, but the following code results in exception (and it happens always):    It looks like bug #7989, but I also get in on versions 2.0.5 and 2.1.M1. My java version is 1.5.0_11.  Stacktrace:  17:14:54,154 ERROR ContextLoader:203 - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testEmailProvider' defined in ServletContext resource [/WEB-INF/conf/appContext/applicationContext-web.xml]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: Unable to locate bridged method for bridge method 'public volatile java.util.Collection pl.ufg.sif.externalmessage.email.TestEmailProvider.findBy(java.lang.Object)' Caused by: java.lang.IllegalStateException: Unable to locate bridged method for bridge method 'public volatile java.util.Collection pl.ufg.sif.externalmessage.email.TestEmailProvider.findBy(java.lang.Object)' at org.springframework.core.BridgeMethodResolver.findBridgedMethod(BridgeMethodResolver.java:91) at org.springframework.core.annotation.AnnotationUtils.getAnnotations(AnnotationUtils.java:54) at org.springframework.transaction.annotation.AnnotationTransactionAttributeSource.findAllAttributes(AnnotationTransactionAttributeSource.java:85) at org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.computeTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:147) at org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:103) at org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.matches(TransactionAttributeSourceAdvisor.java:102) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:203) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:244) at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:278) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:83) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:66) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:296) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:312) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1180) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:425) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:244) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:187) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3764) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4216) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:760) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:740) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:544) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:553) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:488) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1138) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:120) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1022) at org.apache.catalina.core.StandardHost.start(StandardHost.java:736) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:448) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:552) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433)  ---  **Affects:** 2.0.3, 2.0.5, 2.1 M1  **Attachments:** - [generics-bug.zip](https://jira.spring.io/secure/attachment/12636/generics-bug.zip) (_5.86 kB_)","closed","in: core,","spring-projects-issues","2007-05-30T02:29:34Z","2019-01-11T19:04:55Z"
"","8207","Doc: Still problems with definition of bean namespace in several examples [SPR-3524]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3524](https://jira.spring.io/browse/SPR-3524?redirect=false)** and commented  Related to #3372.  Although this was resolved there still appears to be examples that don't contain the correct value.  Some users on the forums have reported problems with the p-namespace example in the reference manual amongst others.  I'll try and find the threads and see what the other examples were.  ---  **Issue Links:** - #8056 Wrong bean configuration xml file header in Spring 2.0.4 PDF Reference Manual : missing data in xsi:schemaLocation","closed","type: documentation,","spring-projects-issues","2007-05-25T20:18:34Z","2019-01-11T19:06:21Z"
"","8138","12.2.4 Hibernate documentation calls an unknown method [SPR-3455]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3455](https://jira.spring.io/browse/SPR-3455?redirect=false)** and commented  Where does the getSession() method come from?  It's not on the API. public class ProductDaoImpl extends HibernateDaoSupport implements ProductDao {      public Collection loadProductsByCategory(String category)             throws DataAccessException, MyException {              Session session = getSession(getSessionFactory(), false);         ...     }  }  ---  **Issue Links:** - #8088 Doc: Misspells in reference chapters 8, 9, 12 (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2007-05-04T08:20:22Z","2019-01-12T16:51:31Z"
"","8094","Problems with definition of bean namespace in several examples [SPR-3411]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3411](https://jira.spring.io/browse/SPR-3411?redirect=false)** and commented  Lots of people seem to be copying and pasting the XML documents for the Spring reference manual.  There are several examples that look like this.  \  \  org.xml.sax.SAXParseException: SchemaLocation: schemaLocation value = 'http://www.springframework.org/schema/beans/spring-beans-2.0.xsd' must have even number of URI's.  People are reporting problems with this and changing to this fixes it.  \  As people are taking this out of the reference manual there are quite a few instances of this problem being raised.  ---  **Affects:** 2.0.4  **Issue Links:** - #8056 Wrong bean configuration xml file header in Spring 2.0.4 PDF Reference Manual : missing data in xsi:schemaLocation (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2007-04-24T05:08:08Z","2019-01-12T16:51:36Z"
"","8034","Class name substitution via PropertyPlaceholderConfigurer [SPR-3350]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3350](https://jira.spring.io/browse/SPR-3350?redirect=false)** and commented  A few people have recently tried to use PropertyPlaceholderConfigurer to replace the class value of a bean.  I understood this didn't work, but it does work if the bean is an inner bean.  There is therefore a nice workaround but, is this intended?  If it is, it would be great to document this.  If it's not then it would be good to fix this issue as well.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-04-06T04:39:41Z","2012-06-19T03:50:23Z"
"","8011","Doc: Depends-on works for initialization and destruction [SPR-3326]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3326](https://jira.spring.io/browse/SPR-3326?redirect=false)** and commented  It would be nice to clarify in the documentation that depends-on works for both initialization and destruction.  The former is only mentioned in the reference manual and the question was raised recently on the forum about the latter.   ---  **Affects:** 2.0.3","closed","type: documentation,","spring-projects-issues","2007-03-31T08:19:30Z","2012-06-19T03:51:15Z"
"","7879","OpenSessionInView Filter/Interceptor lacks documentation coverage [SPR-3194]","**[Karl Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=karldmoore)** opened **[SPR-3194](https://jira.spring.io/browse/SPR-3194?redirect=false)** and commented  There doesn't seem to be a reference to OpenSessionInView anywhere in the reference manual.  As this is a pretty common usage pattern, it might be useful to include some information on it.  The question has been raised a few times now, might be nice to have an example.  ---  **Issue Links:** - #6322 Doc: Hibernate3 OpenSessionInView and getCurrentSession() example (_**""duplicates""**_)  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-22T18:21:24Z","2019-01-11T17:36:08Z"
"","8665","Outputting the value in the PropertyPlaceholderConfigurer [SPR-3985]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-3985](https://jira.spring.io/browse/SPR-3985?redirect=false)** and commented  I was debugging a PropertlyPlaceholderConfigurer issue and I noticed that only outputted the property placeholder key and not the actual value it resolved.  I was hoping we can change from:  if (logger.isTraceEnabled()) { logger.trace(""Resolved placeholder '"" + placeholder + ""'""); }  to:  if (logger.isTraceEnabled()) { logger.trace(""Resolved placeholder '"" + placeholder + ""' to value "" + propVal); }  thx.  -karl   ---  **Affects:** 2.0.7  **Attachments:** - [PropertyPlaceholderConfigurer_patch.txt](https://jira.spring.io/secure/attachment/13952/PropertyPlaceholderConfigurer_patch.txt) (_1.09 kB_)","closed","type: enhancement,","spring-projects-issues","2007-10-18T05:04:21Z","2015-09-22T17:34:32Z"
"","8595","PathMatchingResourcePatternResolver cannot find app context files in jars by way of regular expression within Weblogic 8.1 [SPR-3915]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-3915](https://jira.spring.io/browse/SPR-3915?redirect=false)** and commented  We have all of our application context files within jars located in the APP-INF/lib directory of our ear.  We reference our application context files with the following definition.  \ \ \ \ \/com/mycompany/**/applicationContext-*.xml\ \/com/mycompany/**/container-applicationContext-*.xml\ \ \ \ \  This worked well until we upgraded from Spring 1.29 to Spring  2.06.  Now we get the following exception on startup.  Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Could not resolve bean definition resource pattern [classpath*:/c om/mycompany/**/applicationContext-*.xml]; nested exception is java.io.FileNotFoundException: File not found Caused by: java.io.FileNotFoundException: File not found at java.util.zip.ZipFile.open(Ljava.lang.String;I)I(Unknown Source) at java.util.zip.ZipFile.\(Ljava.io.File;I)V(Unknown Source) at java.util.jar.JarFile.\(Ljava.io.File;ZI)V(JarFile.java:127) at java.util.jar.JarFile.\(Ljava.lang.String;)V(JarFile.java:65) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(Lorg.springframework.core. io.Resource;Ljava.lang.String;)Ljava.util.Set;(PathMatchingResourcePatternResolver.java:409) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(Ljava.lang.String;)[Lorg.spring framework.core.io.Resource;(PathMatchingResourcePatternResolver.java:320) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(Ljava.lang.String;)[Lorg.springframework.cor e.io.Resource;(PathMatchingResourcePatternResolver.java:244) at org.springframework.context.support.AbstractApplicationContext.getResources(Ljava.lang.String;)[Lorg.springframework.core.io.Reso urce;(AbstractApplicationContext.java:867) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(Ljava.lang.String;)I(AbstractBeanDefin itionReader.java:146) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions([Ljava.lang.String;)I(AbstractBeanDefi nitionReader.java:173) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(Lorg.springframework.beans.factory.xml.XmlB eanDefinitionReader;)V(AbstractXmlApplicationContext.java:112) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(Lorg.springframework.beans.factory.support. DefaultListableBeanFactory;)V(AbstractXmlApplicationContext.java:79)  To solve the issue, we created our own custom PathMatchingResourcePatternResolver called Spring129PathMatchingResourcePatternResolver.  As you might guess, this is an exact copy of the Spring 1.29 PathMathcingResourcePatternResolver.  Luckily Spring provides an easy extension point and we extended ClassPathXmlApplicationContext adding the following method:      protected ResourcePatternResolver getResourcePatternResolver() {     	return new Spring129PathMatchingResourcePatternResolver(this);     }  Although we were not able to debug the issue any further, with this change, our application context files load successfully.  Seems that the issue is related to changes made to the PathMatchingResourcePatternResolver.  Let me know if you need any more information.  thx.  -karl  ---  **Affects:** 2.0.6  **Issue Links:** - #8388 Upgrade spring.jar from 2.0.5 to 2.0.6 causes IllegalArgumentException loading Hibernate mappings from different classloaders","closed","in: core,","spring-projects-issues","2007-09-24T23:02:43Z","2019-01-11T21:10:36Z"
"","8703","@Component declared as @Inherited = problems with test stub subclasses and autowiring by type [SPR-4024]","**[Karel Miarka](https://jira.spring.io/secure/ViewProfile.jspa?name=kajism)** opened **[SPR-4024](https://jira.spring.io/browse/SPR-4024?redirect=false)** and commented  Not a bug, but maybe a design flaw. (Tried to ask at the forum http://forum.springframework.org/showthread.php?t=45559, but received no suggestions yet.)  There are problems with integration unit-testing (AbstractTransactionalDataSourceSpringContextTests subclasses) of a service layer which is based on `@Component` annotations () and `@Autowired`. When combined with simple unit-tests (TestCase subclasses) where anonymous stub subclasses of some of the service POJOs are used (some methods are overwritten for the test purposes. I think it is quite popular unit test technique).  I get BeanCreation / BeanInstantiationExceptions because Spring wants to make instances of those private anonymous test stubs. I was very confused why Spring is trying to make instances of such classes and find out the reason: The `@Component` (and `@Service` and `@Repository`) annotations are defined as `@Inherited`, which means that any subclass is also considered to be a component. Which means also such anonymous subtypes are considered to be Spring application context beans and are supposed to be autowired into the other beans, but the instantiation fails.  I'm wondering if it is really a good idea to mark those `@Component` annotations as `@Inherited`? When any subclass of a `@Component` is automaticaly considered to be a Spring context bean than this will always result to autowiring by type ambiguities.   ---  **Affects:** 2.5 RC1","closed","in: core,","spring-projects-issues","2007-10-30T19:38:06Z","2019-01-11T16:16:19Z"
"","8176","Form tag does not retrieve the commandObject using commandName directly from request nor session, but from BindErrors object [SPR-3493]","**[Kamal Mettananda](https://jira.spring.io/secure/ViewProfile.jspa?name=lkamal)** opened **[SPR-3493](https://jira.spring.io/browse/SPR-3493?redirect=false)** and commented  With SimpleFormController, form taglib is used.    Form tag does not pick the commandObject from the pageContext, request, or session with the name 'commandName className.FORM.commandName' or 'commandName'. But it retrieves the commandObject from BindResults.  Can't we change that so that the developer has control on adding some values or changing the values of the commandObject inside the showForm() and onSumbit() methods.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-05-16T18:11:12Z","2012-06-18T12:44:35Z"
"","7898","Add LocalSessionFactoryBean.validateDatabaseSchema()  [SPR-3212]","**[Kalle Korhonen](https://jira.spring.io/secure/ViewProfile.jspa?name=kaosko)** opened **[SPR-3212](https://jira.spring.io/browse/SPR-3212?redirect=false)** and commented  There's create-, drop- and updateDatabaseSchema() operations in LocalSessionFactoryBean. For completeness, add validateDatabaseSchema(). This is useful if your application doesn't have permissions to modify the schema itself. If using hibernate, one cannot auto-validate the scema in a webapplication because context loading would fail with HibernateException if schema has changed, so the application would need to validate the schema at a later point.  You could also consider adding a strategy for supporting hibernate.hbm2ddl.auto=validate.  In Hibernate, schema validation can be performed with: SchemaValidator validator = new SchemaValidator(configuration); validator.validate();  Thread this is discussed: http://forum.springframework.org/showthread.php?t=35274   ---  **Affects:** 2.0.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b370969690e5463374c4f47e6f8543c07c5ae4d9  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-27T03:23:30Z","2012-11-27T07:43:09Z"
"","8434","GroovyScriptFactory should pass the filename of the Groovy script into the GroovyClassLoader.parseClass method [SPR-3753]","**[Kaleb Walton](https://jira.spring.io/secure/ViewProfile.jspa?name=kwalton)** opened **[SPR-3753](https://jira.spring.io/browse/SPR-3753?redirect=false)** and commented  The GroovyScriptFactory calls a groovy script using the following code:  this.scriptClass = this.groovyClassLoader.parseClass(scriptSource.getScriptAsString());  It would be great if it called the parseClass method and passed the file name in as the second parameter so exceptions would look nicer.  ---  **Affects:** 2.1 M4  **Issue Links:** - #8846 Dynamic objects in Groovy cannot be defined as script inline","closed","type: enhancement,","spring-projects-issues","2007-08-09T07:20:08Z","2019-01-11T19:33:04Z"
"","8384","Pass the request into the newCommandObject method in MultiActionController [SPR-3703]","**[Kaleb Walton](https://jira.spring.io/secure/ViewProfile.jspa?name=kwalton)** opened **[SPR-3703](https://jira.spring.io/browse/SPR-3703?redirect=false)** and commented  It would be great if you could pass the request into the newCommandObject method in MultiActionController or provide some other facility to specify the command object that gets created. Something similar to formBackingObject.   --- No further details from [SPR-3703](https://jira.spring.io/browse/SPR-3703?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-07-20T02:16:40Z","2012-06-19T09:37:29Z"
"","8383","Expose the command object automatically in MultiActionController [SPR-3702]","**[Kaleb Walton](https://jira.spring.io/secure/ViewProfile.jspa?name=kwalton)** opened **[SPR-3702](https://jira.spring.io/browse/SPR-3702?redirect=false)** and commented  The new invokeNamedMethod method is great in that it automatically creates a command class if your handler method asks for one in the 3rd parameter. It would be great if the command object was automatically set to the request using getCommandName(Object command) as the request attribute name.  if (method.getParameterTypes().length >= 3 && !method.getParameterTypes()[method.getParameterTypes().length - 1].equals(HttpSession.class)) { Object command = newCommandObject(method.getParameterTypes()[method.getParameterTypes().length - 1]); params.add(command); bind(request, command); request.setAttribute(getCommandName(command), command);","closed","type: enhancement,","spring-projects-issues","2007-07-20T02:06:27Z","2012-06-19T09:37:45Z"
"","8380","Ability to specify Class definition to use when defining a Groovy Script Bean [SPR-3699]","**[Kaleb Walton](https://jira.spring.io/secure/ViewProfile.jspa?name=kwalton)** opened **[SPR-3699](https://jira.spring.io/browse/SPR-3699?redirect=false)** and commented  This may be too much of an edge case to support but I'd like to store two class definitions in the same .groovy file and would like to be able to tell Spring which one to use.  For example:  TestController.groovy  package controller;  class TestController extends Controller { // do controller stuff }  class TestForm extends Form { // do form handling }  servlet.xml    or    Thanks for reviewing this request!   ---  **Affects:** 2.0.6, 2.0.7, 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-07-19T02:25:08Z","2012-06-19T09:37:41Z"
"","8379","Need default refresh-check-delay for Scripted Beans [SPR-3698]","**[Kaleb Walton](https://jira.spring.io/secure/ViewProfile.jspa?name=kwalton)** opened **[SPR-3698](https://jira.spring.io/browse/SPR-3698?redirect=false)** and commented  Please add the ability to set a default ""refresh-check-delay"" for all Scripted Beans in the ApplicationContext. I'd rather not have to put that same attribute in each of my  beans.  Thank you!  ---  **Affects:** 2.0.6, 2.0.7, 2.1 M2  **Issue Links:** - #9573 Default refresh-check-delay setting for all scripted beans (_**""is duplicated by""**_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-07-18T23:02:26Z","2019-01-11T18:34:55Z"
"","8360","Autowire byName does not work for scripted beans (Groovy in particular) [SPR-3679]","**[Kaleb Walton](https://jira.spring.io/secure/ViewProfile.jspa?name=kwalton)** opened **[SPR-3679](https://jira.spring.io/browse/SPR-3679?redirect=false)** and commented  Autowiring beans by name does not seem to work for scripted beans.  The TestController Groovy class extends a Java class that has a setMyService method in it. The bean 'myService' should be autowired by name (default-autowire=""byName"" specified in XML declaration) - it does not work.   \  Others have suggested the same issue in the forums.   ---  **Affects:** 2.0.6  **Attachments:** - [example.zip](https://jira.spring.io/secure/attachment/12716/example.zip) (_1020 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-07-11T02:13:09Z","2012-06-19T03:50:38Z"
"","8535","Website: Some documentation images gives 404 [SPR-3855]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-3855](https://jira.spring.io/browse/SPR-3855?redirect=false)** and commented  F.x. http://www.springframework.org/docs/images/admons/note.png which is used on http://www.springframework.org/docs/reference/beans.html  $ curl -I http://www.springframework.org/docs/images/admons/note.png HTTP/1.1 404 Not Found Date: Sun, 09 Sep 2007 20:01:38 GMT Server: Apache/2.0.52 (Red Hat) Content-Type: text/html; charset=iso-8859-1  This might br related to #6651  ---  No further details from [SPR-3855](https://jira.spring.io/browse/SPR-3855?redirect=false)","closed","status: declined,","spring-projects-issues","2007-09-09T07:02:45Z","2019-01-11T19:16:48Z"
"","8517","Reduce loglevel for startNewTransaction and endTransaction in AbstractTransactionalSpringContextTests [SPR-3837]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-3837](https://jira.spring.io/browse/SPR-3837?redirect=false)** and commented  We get alot of lines like the following when running our unittests:  INFO 03.09 10:42:00:857 (AbstractTransactionalSpringContextTests.java:startNewTransaction:323) - Began transaction (1): transaction manager [org.springframework.orm.hibernate3.HibernateTransactionManager@f4503]; default rollback = true INFO 03.09 10:42:00:979 (AbstractTransactionalSpringContextTests.java:endTransaction:290) - Rolled back transaction after test execution  Most of the time these messages are not very usefull.  It might be an idea to reduce the loglevel for these messages from the methods startNewTransaction and endTransaction in AbstractTransactionalSpringContextTests from INFO to DEBUG.   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-09-02T23:11:46Z","2012-06-19T03:50:58Z"
"","8509","An ""aop:"" prefix is missing in the documentation of  [SPR-3829]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-3829](https://jira.spring.io/browse/SPR-3829?redirect=false)** and commented  On http://www.springframework.org/docs/reference/aop.html it says   \ \   but I guess this should be         ---  **Affects:** 2.0.6, 2.1 M3","closed","type: bug,","spring-projects-issues","2007-08-31T06:52:03Z","2012-06-19T03:50:05Z"
"","7924","spring.ftl: it would be nice if formInput had HTML escape for stringStatusValue [SPR-3239]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-3239](https://jira.spring.io/browse/SPR-3239?redirect=false)** and commented  value=""${stringStatusValue}""  might be changed to  value=""${stringStatusValue?html}""   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-03-07T07:44:17Z","2007-09-02T23:31:32Z"
"","8516","JaxRpcPortProxyFactoryBean does not remove whitespace from ""namespaceUri"" parameter [SPR-3836]","**[kaiser gauss](https://jira.spring.io/secure/ViewProfile.jspa?name=gauss2008)** opened **[SPR-3836](https://jira.spring.io/browse/SPR-3836?redirect=false)** and commented  In Spring cofing file, When I using below format. \ \http://10.243.44.6:8099/axis2/services/CRServerTest\ \ The client can call the Web service server normally. But When I format it as below: \ \ http://10.243.44.6:8099/axis2/services/CRServerTest \ \ The Client will have an error: javax.xml.rpc.ServiceException: Cannot find service:  { http://10.243.44.6:8099/axis2/services/CRServerTest }CRServerTestService But every parameters of CR469ClientProxyFactoryBean, can use above format except 'namespaceUri'. I have traced it and added a comment in Class LocalJaxRpcServiceFactory, I find that all the parameters can get the right value from config file, except namespaceUri. When I printed its value in the elog, I find its value contail the space and newline sign. I think it maybe there has some errores when it parses the config file and gets the value. Please check. TKS.   ---  **Affects:** 2.0.6  **Attachments:** - [WSClient.xml](https://jira.spring.io/secure/attachment/12871/WSClient.xml) (_950 bytes_) - [WSClient.xml](https://jira.spring.io/secure/attachment/12870/WSClient.xml) (_961 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-09-02T20:01:55Z","2012-06-19T03:50:34Z"
"","8605","add support for setting the localOverride property  when using util:properties in spring context [SPR-3925]","**[kai lilleby](https://jira.spring.io/secure/ViewProfile.jspa?name=kai@systemfabrikken.no)** opened **[SPR-3925](https://jira.spring.io/browse/SPR-3925?redirect=false)** and commented  would be nice if one could type:   overriding value    in order to let  declarations override properties defined in file spesified in location.   ---  **Affects:** 2.5 RC1","closed","type: enhancement,","spring-projects-issues","2007-09-26T00:26:07Z","2012-06-19T03:46:53Z"
"","8560","context marked dirty using @DirtiesContext in TestNG based test is not reloaded in subsequent tests [SPR-3880]","**[kai lilleby](https://jira.spring.io/secure/ViewProfile.jspa?name=kai@systemfabrikken.no)** opened **[SPR-3880](https://jira.spring.io/browse/SPR-3880?redirect=false)** and commented  running the following test: `@ContextConfiguration`(locations = {""....spring.xml""}) public class TestngTest extends AbstractTransactionalTestNGSpringContextTests{      @Test     @DirtiesContext     public void testMethod1() {     }          @Test     @DirtiesContext     public void testMethod2(){     }  }  the springcontext will be closed in the first test as a result due to `@DirtiesContext`, but no new context will be loaded before running the second test, hence code depending on the existence of a valid context will fail.  Is this intended? does context reloading onoly work accross different test classes, ie. not inside one and the same test class?  According to the spring documentation (http://static.springframework.org/spring/docs/2.1.x/reference/testing.html#testcontext-framework): ""you may annotate your test method with `@DirtiesContext`  (assuming DirtiesContextTestExecutionListener  has been configured, which is the default) to cause the test fixture to reload the configurations and rebuild the application context before executing the next test case."" - it seems like my test should have worked.. - or?  kai:)   ---  **Affects:** 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-09-14T18:20:15Z","2012-06-19T03:47:08Z"
"","8690","RequestMapping annotation on methods does not support pattern matching [SPR-4010]","**[Kabriel Robichaux](https://jira.spring.io/secure/ViewProfile.jspa?name=kabriel)** opened **[SPR-4010](https://jira.spring.io/browse/SPR-4010?redirect=false)** and commented  RequestMapping annotation on METHODS does not support pattern matching. org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$HandlerMethodResolver.resolveHandlerMethod() only uses String.equals() to compare mappedPath and lookupPath for a match. Thus this only supports exact matches. However, RequestMapping used at the TYPE level supports pattern matching through org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.lookupHandler(), which first attempts an exact match with String.equals() and then attempts a match with a PathMatcher (AntPathMatcher).  This was difficult to find because one would expect the annotation to work the same at the METHOD and the TYPE level, but in fact it does not, and this prevents any realistic paths from being matched at the method level, such as using a multiaction controller pattern.   ---  **Affects:** 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-10-26T03:02:52Z","2012-06-19T03:47:35Z"
"","8616","Implement percflow aspect instantiation [SPR-3936]","**[Jürgen Lukasczyk](https://jira.spring.io/secure/ViewProfile.jspa?name=dr_java)** opened **[SPR-3936](https://jira.spring.io/browse/SPR-3936?redirect=false)** and commented  AspectJ supports more aspect instantiation models than Spring AOP. I see use for making the other models available to Spring AOP community (proxy-based AOP, no AspectJ compiler in project is a definitive plus of Spring AOP!).  My use case: I want to implement an annotation-driven method level security interceptor that does not have to extract the security information from the secured method on every invocation using reflection.  Idea is to instead have one instance of an aspect for every JoinPoint (secured method) matched. The Aspect instance would then extract security information on first invocation of the secured method. Further invocations just re-use the security information.  My current implementation uses a HashMap cache for this. A percflow implementation would be much faster and use less memory (of course the reflect-on-every-invocation uses least mem - it's a time / space trade-off here).   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-09-28T02:13:20Z","2012-06-19T09:36:11Z"
"","8335","Enable usage of custom PropertyEditor for collection element for form:select bound to collection [SPR-3654]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3654](https://jira.spring.io/browse/SPR-3654?redirect=false)** and commented  I have a property of type collection and want to bind a form:select to it. Since it's of collection type the CustomCollectionEditor is used. Unfortunately, there is no chance to use an additional custom PropertyEditor for the actual collection elements. This seems to be quite similar to #7322 for form:checkbox.  I wrote my analysis in the forum at http://forum.springframework.org/showthread.php?t=40960.  There is a hackish work-around at the moment: Since CustomCollectionEditor.convertElement(Object) actually replaces PropertyEditor.setAsText(String) + PropertyEditor.getValue() only a proper conversion from Object to String is missing. Spring falls back to toString() at the end in ValueFormatter.getDisplayString(Object, PropertyEditor, boolean). So the hackish work-around is to implement toString() doing the PropertyEditor.setValue(Object) + PropertyEditor.getAsText() part of the custom PropertyEditor I actually wanted to use.  I find the CustomCollectionEditor quite strange anyway since it is used for both converting a collection to ... hmm ... a collection and to convert a string representation of a single object into a collection as well by delegating to convertElement(Object). Actually my extended CustomCollectionEditor gets injected the custom PropertyEditor for the collection elements. This one is used in convertElement(Object). If there would only be a way to convert the objects to strings. I'd prefer a solution where I don't need to touch the CustomCollectionEditor at all.  Joerg  ---  **Affects:** 2.0.6  **Issue Links:** - #8842 form:checkboxes and form:radiobuttons should use registered property editor (_**""is duplicated by""**_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-07-04T08:58:43Z","2019-01-11T18:31:49Z"
"","8222","Custom property editors are tried to be applied to custom property editors if defined together with CustomEditorConfigurer in same context [SPR-3539]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3539](https://jira.spring.io/browse/SPR-3539?redirect=false)** and commented  I don't know if there is a real solution for this problem, but I want to mention it anyway:  I have a MapBasedPropertyEditorRegistrar which is configured like the following:  \ \ \ \ \ \ \ \  The value refers to a bean name defined in the same context, it's prototype scoped. In MapBasedPropertyEditorRegistrar.registerCustomEditors(PropertyEditorRegistry) I retrieve the editors from the BeanFactory (MapBasedPropertyEditorRegistrar is BeanFactoryAware):  // editorBeanName is the value of the map PropertyEditor editor = (PropertyEditor)_beanFactory.getBean(editorBeanName); // type is the key of the map registry.registerCustomEditor(type, null, editor);  (Btw. this is the place where #7459 would simplify things a bit.)  This works fine unless I try to put a CustomEditorConfigurer into the same context. I end up with  Error creating bean with name 'customObject1Editor': Requested bean is currently in creation: Is there an unresolvable circular reference?  This is due to the fact that it is tried to apply custom property editors also to those custom property editors, i.e. to itself. (I guess #7459 does not help here or are FactoryBeans handled differently?)  The stacktrace should make it clear:  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:219) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at foo.bar.MapBasedPropertyEditorRegistrar.registerCustomEditors(MapBasedPropertyEditorRegistrar.java:99) at org.springframework.beans.factory.support.AbstractBeanFactory.registerCustomEditors(AbstractBeanFactory.java:866) at org.springframework.beans.factory.support.AbstractBeanFactory.initBeanWrapper(AbstractBeanFactory.java:847) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:761) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:724) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:387) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:270) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at foo.bar.MapBasedPropertyEditorRegistrar.registerCustomEditors(MapBasedPropertyEditorRegistrar.java:99)  By calling AbstractBeanFactory.registerCustomEditors() for the custom property editor you get into a circle.  ---  **Affects:** 2.0.5","closed","in: core,","spring-projects-issues","2007-06-01T01:09:15Z","2019-01-11T19:09:27Z"
"","8199","Property change events in Spring MVC [SPR-3516]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3516](https://jira.spring.io/browse/SPR-3516?redirect=false)** and commented  Spring MVC does not provide functionality for listening to property change events. I wrote about it at http://forum.springframework.org/showthread.php?t=38499 and http://thread.gmane.org/gmane.comp.java.springframework.devel/11120 (issue 2). I know such a functionality from Cocoon Forms (http://cocoon.apache.org/2.1/userdocs/widgetconcepts/eventhandling.html).  PropertyEditors have general support for change event listening, but I can't see how to use it in a meaningful way as is. BeanWrapperImpl creates PropertyChangeEvents internally but only uses them for exception handling   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-05-23T20:06:28Z","2012-06-19T09:37:42Z"
"","8167","Complex labels for form:select [SPR-3484]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3484](https://jira.spring.io/browse/SPR-3484?redirect=false)** and commented  I wonder if only i18n is considered (#7348) for form:select/form:options or more complex use cases like I wrote at http://forum.springframework.org/showthread.php?t=38795.  Actually what I'd like to have is a JSP ""template"" inside form:options or even form:select which gets applied to all options:  ${value.key} - ${value.name}  (key and name are properties of the company object.)  Another case goes beyond but would be addressed as well:  ${value} -   (state not as country, but as status)  Introducing a form:optionLabel tag might be appropriate.  From what I understand my proposal would simplify i18n in comparison to the current state but the plans for 2.1 go beyond.  ---  **Affects:** 2.0.4  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-05-15T22:05:11Z","2019-01-11T18:00:46Z"
"","8164","Theme is resolved on every usage of Spring tags in Portlet environment [SPR-3481]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3481](https://jira.spring.io/browse/SPR-3481?redirect=false)** and commented  Spring is filling up my log file with this ""descriptive"" message: 2007-05-15 09:12:40,250 [http-8080-Processor23] INFO  org.springframework.ui.context.support.ResourceBundleThemeSource  - Theme created: name 'theme', basename [theme] Having a look where it comes from I found out that it is logged on every instantiation of a JspAwareRequestContext created by RequestContextAwareTag.doStartTag(), actually for every Spring tag I use in my JSPs.  RequestContextUtils.getTheme(request) called from RequestContext.initContext() never returns non-null since it relies on request attributes set by the DispatcherServlet (RequestContextUtils.getThemeResolver() and RequestContextUtils.getThemeSource()). Those are not available in a Portlet environment.  I can of course switch off the logging, but the theme resolving does happen though over and over again.  Joerg   ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-05-14T20:28:23Z","2012-06-19T03:50:51Z"
"","8144","form:form should work like spring:nestedPath [SPR-3461]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3461](https://jira.spring.io/browse/SPR-3461?redirect=false)** and commented  Didn't find a better summary ...  My problem occurs when using spring:bind inside spring:nestedPath and form:form:     \    \      As you see you get two different paths for spring:bind and form:input while I would expect to get the same for both. This is because form:input (actually AbstractDataBoundFormElementTag) has special handling for command while spring:bind is of course not aware of it. This could be made consistent by making form:form behave like spring:nestedPath with setting the command name as nestedPath.  ---  **Affects:** 2.0.4  **Issue Links:** - #6988 provide form:transform tag  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-05-07T21:21:09Z","2019-01-11T18:01:24Z"
"","8052","short form of  creates different HTML than with  for empty list [SPR-3368]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3368](https://jira.spring.io/browse/SPR-3368?redirect=false)** and commented  Don't know if \ is actually wrong in HTML (http://www.w3.org/TR/html401/interact/forms.html#h-17.6). Is \ known in SGML at all? At least Firefox swallows following opening tags in quirks mode. Besides, from the spec it seems \ must contains at least one \.  Anyway, this one is about Spring - and I have a different behaviour for  (so short form) and :   ends in \\  while  ends in \  when having an empty list in ${profiles}.  Joerg   ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-04-12T03:32:53Z","2012-06-19T03:50:23Z"
"","8023","Portlet session is no longer serializable after usage of non-serializable commands/ form backing objects [SPR-3339]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3339](https://jira.spring.io/browse/SPR-3339?redirect=false)** and commented  Once a controller worked on a non-serializable command/ form backing object the Portlet session is no longer serializable. The BaseCommandController puts the command into the session (setRenderCommandAndErrors(ActionRequest, Object, BindException)) and it gets never removed from there. I guess there is no other way to pass objects from the action phase to the render phase (except than some ThreadLocal). But what about cleaning the session after the render phase? Those commands are never retrieved again from the session anyway, so they just consume resources.  Joerg   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-04-04T00:32:54Z","2012-06-18T12:45:00Z"
"","8020","HibernateDaoSupport should delegate Session handling to HibernateTemplate [SPR-3336]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3336](https://jira.spring.io/browse/SPR-3336?redirect=false)** and commented  Internally HibernateDaoSupport uses the HibernateTemplate and delegates all calls to it - except for the Session handling. Instead of copying the logic from HibernateTemplate (nearly) and retrieving HibernateTemplate internals/properties it should just delegate to HibernateTemplate as well. I can't see a problem with it for getSession() and getSession(boolean), but don't know for releaseSession(Session).  That makes it easier to overwrite Session handling and I don't need to implement it twice both in sub classed HibernateTemplate and sub classed HibernateDaoSupport.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-04-02T22:24:54Z","2012-06-19T09:37:23Z"
"","7993","Broken XML in reference code snippet [SPR-3308]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3308](https://jira.spring.io/browse/SPR-3308?redirect=false)** and commented  The current reference at http://www.springframework.org/docs/reference/beans.html#beans-factory-scopes-other-injection-proxies has a duplicate attribute proxy-target-class:  \ \ \  This is of course not well-formed XML.  Jörg   ---  **Affects:** 2.0.3","closed","type: bug,","spring-projects-issues","2007-03-27T08:03:33Z","2012-06-19T03:50:05Z"
"","7981","Make Spring's taglib easier usable with JSTL's forEach [SPR-3296]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3296](https://jira.spring.io/browse/SPR-3296?redirect=false)** and commented  Spring's taglib is really awkward to use within JSTL's forEach:     as you need to navigate the path twice, once for JSTL, once for Spring.  Or with maps:     Nearly half a year ago I proposed something like newPath (http://forum.springframework.org/showthread.php?t=29401#4).  Why I come back to it now? Because I have a case where I have no solution with the current situation. My map does not contain plain strings but objects. Now the path gets resolved to ""result.dataByCompany[com.mycompany.Company@1abd6b1]"" which gets obviously wrong. With newPath I would not need to access the map entry in that way, but simply with:     WDYT?  Joerg   --- No further details from [SPR-3296](https://jira.spring.io/browse/SPR-3296?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-03-23T04:58:18Z","2012-06-19T09:37:29Z"
"","7911","CciTemplate and its helper class ConnectionFactoryUtils ignore ConnectionFactory.getConnection(ConnectionSpec) [SPR-3225]","**[Jörg Heinicke](https://jira.spring.io/secure/ViewProfile.jspa?name=joerg.heinicke@gmx.de)** opened **[SPR-3225](https://jira.spring.io/browse/SPR-3225?redirect=false)** and commented  Both CciTemplate and ConnectionFactoryUtils assume only the simplest case when retrieving a connection, ie. they always use ConnectionFactory.getConnection(). But ConnectionFactory also offers a method ConnectionFactory.getConnection(ConnectionSpec). The need for the latter prevents me using both CciTemplate and ConnectionFactoryUtils.  To ConnectionFactoryUtils the two methods (do)getConnection(ConnectionFactory, ConnectionSpec) should be added.  To CciTemplate there should be added some useful methods allowing to pass the ConnectionSpec. Or it might be useful to introduce ConnectionRetrievalCallback with a method retrieveConnection(ConnectionFactory).  Jörg   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-03-01T21:02:55Z","2012-06-19T03:51:06Z"
"","8166","improve SimpleJdbcTemplate.query for simple types [SPR-3483]","**[Jörg Gottschling](https://jira.spring.io/secure/ViewProfile.jspa?name=jgottschling)** opened **[SPR-3483](https://jira.spring.io/browse/SPR-3483?redirect=false)** and commented  SimpleJdbcTemplate.query(String, Class\, Object...) : List\  self-explanatory, I hope :-)   --- No further details from [SPR-3483](https://jira.spring.io/browse/SPR-3483?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-05-15T19:27:34Z","2019-01-14T06:23:17Z"
"","8201","UrlPathHelper#getPathWithinServletMapping comparing encoded request  [SPR-3518]","**[Justin Makeig](https://jira.spring.io/secure/ViewProfile.jspa?name=jmakeig)** opened **[SPR-3518](https://jira.spring.io/browse/SPR-3518?redirect=false)** and commented  I've turned off urlDecode on my DispatcherServlet's SimpleUrlHandlerMapping becuase I have URLs that contain encoded slashes (%2F). However, for a request, such as /a/b%2Fc, org.springframework.web.util.UrlPathHelper#getPathWithinServletMapping compares the pathWithinApp (/a/b%2Fc) to the decoded servlet path (/a/b/c). They, of course, do not match and thus the getPathWithinServletMapping method returns the decoded servletPath. Shouldn't the startsWith comparison have some intelligence about URL decoding so it's comparing apples to apples?       public String getPathWithinServletMapping(HttpServletRequest request) {     	String pathWithinApp = getPathWithinApplication(request);     	String servletPath = getServletPath(request);     	if (pathWithinApp.startsWith(servletPath)) {     		// Normal case: URI contains servlet path.     		return pathWithinApp.substring(servletPath.length());     	}     	else {     		// Special case: URI is different from servlet path.     		// Can happen e.g. with index page: URI=""/"", servletPath=""/index.html""     		// Use servlet path in this case, as it indicates the actual target path.     		return servletPath;     	}     }    ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-05-24T03:34:01Z","2012-06-19T03:51:21Z"
"","8852","NullPointerException thrown from MailSendException if particular constructors are used. [SPR-4174]","**[Julie Mather](https://jira.spring.io/secure/ViewProfile.jspa?name=jmather)** opened **[SPR-4174](https://jira.spring.io/browse/SPR-4174?redirect=false)** and commented  If you look at the MailSendException class' printStackTrace methods, note the first line: if (this.messageExceptions.length == 0) {  The messageExceptions variable is only not null if you call the MailSendException(Map failedMessages) constructor. The other two constructors do not initialize the messageExceptions variable to a value and thus when printStackTrace is called a NullPointerException is thrown. Our code (and one of our unit tests that exposed this to me) calls: throw new MailSendException(""boom""); And thus breaks.  It's really as simple as not referencing messageExceptions directly but using the getter instead, which is what it's there for.... It has a null check in it and will return an empty array if the variable hasn't been initialized yet. Nicely done, it's just not being used.  And by the way, that you very much for 2.5. It was quite easy to migrate to.  ---  **Affects:** 2.5 final  **Issue Links:** - #8817 NullPointerException in MailSendException (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2007-11-27T09:34:07Z","2019-01-12T16:51:18Z"
"","8588","Spring JMX proxies should support MXBean composite data structures [SPR-3908]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-3908](https://jira.spring.io/browse/SPR-3908?redirect=false)** and commented  The MXBean model exposes composite data structures as CompositeData objects. Spring's MBeanProxyFactoryBean doesn't detect this, leading to ClassCastExceptions at runtime.  http://forum.springframework.org/showpost.php?p=141423&postcount=2   --- No further details from [SPR-3908](https://jira.spring.io/browse/SPR-3908?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-09-23T22:48:44Z","2012-06-19T03:47:07Z"
"","8524","Provide a ""best efforts"" 1PC transaction manager out of the box [SPR-3844]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-3844](https://jira.spring.io/browse/SPR-3844?redirect=false)** and commented  There have been detailed discussions about a ""best efforts"" transaction strategy that allows any number of local resource transactions to be part of a single Spring-managed transaction. Spring 2.0 already supports synchronized local JMS transactions in that style; this issue is effectively about extending that approach to all of Spring's supported resources.  Important 'side' features are commit ordering and customizable transaction logging (see #7996). This JIRA issue (together with #7996) serves for tracking requirements, suggestions and contributions, as well as the status of the ""best efforts"" transaction manager implementation in Spring.  ---  **Issue Links:** - [DATACMNS-310](https://jira.spring.io/browse/DATACMNS-310) Integrate best-effort TransactionManager from Spring Data Neo4j - #18308 Move ChainedTransactionManager from spring-data commons to spring-tx - [DATAGRAPH-256](https://jira.spring.io/browse/DATAGRAPH-256) Move ChainedTransactionManager from Spring Data Neo4j to Spring Framework  68 votes, 60 watchers","open","has: votes-jira,","spring-projects-issues","2007-09-04T10:25:27Z","2019-01-11T19:17:49Z"
"","8124","Deploying a Spring application context as JCA 1.5 RAR unit [SPR-3441]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-3441](https://jira.spring.io/browse/SPR-3441?redirect=false)** and commented  Packaging a non-web Spring application context as RAR file, bootstrapped according to the JCA 1.5 ResourceAdapter contract.   --- No further details from [SPR-3441](https://jira.spring.io/browse/SPR-3441?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-05-02T08:13:00Z","2012-06-19T03:50:09Z"
"","8123","JSR-250 annotation support [SPR-3440]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-3440](https://jira.spring.io/browse/SPR-3440?redirect=false)** and commented  Support for `@PostConstruct`, `@PreDestroy`, `@Resource` (as supported in Java EE 5 components; included in the JSR-250 API jar and in JDK 1.6's rt.jar)   --- No further details from [SPR-3440](https://jira.spring.io/browse/SPR-3440?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-05-02T08:10:26Z","2012-06-19T03:50:21Z"
"","7948","MapViewResolver [SPR-3263]","**[João Fonseca](https://jira.spring.io/secure/ViewProfile.jspa?name=joao_fonseca)** opened **[SPR-3263](https://jira.spring.io/browse/SPR-3263?redirect=false)** and commented  A new ViewResolver should be included with Spring, to allow easy name->URL mapping. For example:  \ \ \ \ \ \ \ \ \ \ \     ---  **Attachments:** - [MapViewResolver.java](https://jira.spring.io/secure/attachment/12469/MapViewResolver.java) (_2.83 kB_)","closed","type: enhancement,","spring-projects-issues","2007-03-14T01:02:03Z","2012-06-19T09:37:22Z"
"","8520","Setter method not detected for narrowed property type in implementation class [SPR-3840]","**[José Mª Tiñana](https://jira.spring.io/secure/ViewProfile.jspa?name=jtinana)** opened **[SPR-3840](https://jira.spring.io/browse/SPR-3840?redirect=false)** and commented  When you try to map using a form tag (input, select, etc) in this way:    This mapping doesn´t work. It´s like springs binder doesn´t revolse second level objects. But exactly the same notations works fine if you use JSTL notation directly ( ${command.oneObject.secondObject.property}  At the momento the only way to solve the problem is to create a virtual getter and setter mapping directly to the property, so with only one level of mapping it works. But this is a temporal workaround, as we need to create two methods for each property that you want to bind from the JSP. Please report if this is is a bug or by the other hand Spring´s binder works like this.   ---  **Affects:** 2.0.6  **Attachments:** - [BolsaHoras.java](https://jira.spring.io/secure/attachment/12879/BolsaHoras.java) (_5.54 kB_) - [BolsaHorasBean.java](https://jira.spring.io/secure/attachment/12878/BolsaHorasBean.java) (_5.18 kB_) - [Proyecto.java](https://jira.spring.io/secure/attachment/12880/Proyecto.java) (_2.33 kB_) - [screenShots.zip](https://jira.spring.io/secure/attachment/12921/screenShots.zip) (_543.07 kB_) - [source.zip](https://jira.spring.io/secure/attachment/12922/source.zip) (_7.71 kB_)","closed","type: enhancement,","spring-projects-issues","2007-09-03T19:44:51Z","2012-06-19T03:46:48Z"
"","8865","Add multiple config locations to EhCacheManagerFactoryBean to allow for deploy-time config overriding [SPR-4187]","**[Josh Devins](https://jira.spring.io/secure/ViewProfile.jspa?name=jdevins)** opened **[SPR-4187](https://jira.spring.io/browse/SPR-4187?redirect=false)** and commented  Much like providing a list of properties files in priority for PropertyPlaceholderConfigurer, it would be nice to be able to do the same for EhCacheManagerFactoryBean. This would allow a default EhCache configuration to be inside your Jar/War on the classpath, and if need be, you can override that configuration by providing another location to load from.  Example XML:  \ \ \ \classpath*:ehcache.override.xml\ \classpath*:META-INF/ehcache.default.xml\ \ \ \  Example code that should be added to EhCacheManagerFactoryBean (or in a subclass of it):      /**      * Based on an array of configuration location {@link Resource}s listed in      * order of decending priority, this will use the first available      * {@link Resource} to configure the EhCache CacheManager.      *       * @return the config location {@link Resource} to use      */     public void setConfigLocations(final Resource[] configLocations) {              if (configLocations == null || configLocations.length < 0) {             logger.info(""No valid configLocations were set."");             return;         }              // uses the first available config location         super.setConfigLocation(configLocations[0]);     }    ---  **Affects:** 2.5 final  **Attachments:** - [EhCacheManagerFactoryBean.java](https://jira.spring.io/secure/attachment/13168/EhCacheManagerFactoryBean.java) (_1.03 kB_) - [EhCacheManagerFactoryBean2.java](https://jira.spring.io/secure/attachment/14057/EhCacheManagerFactoryBean2.java) (_4.77 kB_) - [EhCacheManagerFactoryBean2.xml](https://jira.spring.io/secure/attachment/14058/EhCacheManagerFactoryBean2.xml) (_480 bytes_) - [EhCacheManagerFactoryBeanTest.java](https://jira.spring.io/secure/attachment/13169/EhCacheManagerFactoryBeanTest.java) (_3.59 kB_) - [EhCacheManagerFactoryBeanTest2.java](https://jira.spring.io/secure/attachment/14059/EhCacheManagerFactoryBeanTest2.java) (_6.34 kB_)","closed","type: enhancement,","spring-projects-issues","2007-11-28T11:46:45Z","2012-06-18T12:44:24Z"
"","8136","java.lang.NoClassDefFoundError: org/springframework/beans/factory/support/ConfigurableBeanFactoryUtils using maven dependence [SPR-3453]","**[Joseph ONeil](https://jira.spring.io/secure/ViewProfile.jspa?name=jroneil)** opened **[SPR-3453](https://jira.spring.io/browse/SPR-3453?redirect=false)** and commented  This bug was report on #7709 and it was said the file exist in either context or support. as of May 4 2007 this is not the case  I have added all the spring 2.0.2 jars and have not found it on maven  ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-05-04T05:02:03Z","2019-01-11T17:43:19Z"
"","8699","DefaultAnnotationHandlerMapping is not registered by default [SPR-4019]","**[Jose Noheda](https://jira.spring.io/secure/ViewProfile.jspa?name=xmaniac)** opened **[SPR-4019](https://jira.spring.io/browse/SPR-4019?redirect=false)** and commented  Even though the documentation (docs/api/org/springframework/web/servlet/mvc/annotation/DefaultAnnotationHandlerMapping.html) says otherwise unless you register a DefaultAnnotationHandlerMapping bean manually the request mappings are not applied. It was tested with JDK1.6/Glassfish2 and JDK1.5/WLS10.  Declaring  \ in a valid XML configuration file solves the problem.   ---  **Affects:** 2.5 RC1","closed","status: declined,","spring-projects-issues","2007-10-29T05:06:52Z","2019-01-12T16:39:42Z"
"","8698","Adding advices to a method breaks AnnotationMethodHandlerAdapter [SPR-4018]","**[Jose Noheda](https://jira.spring.io/secure/ViewProfile.jspa?name=xmaniac)** opened **[SPR-4018](https://jira.spring.io/browse/SPR-4018?redirect=false)** and commented  Whenever you try to add some kind of proxy/aspect to a controller bean (`@Controller`), for example, adding `@Transactional` to the method generates the following exception:  DEBUG [org.springframework.web.servlet.DispatcherServlet] -  DEBUG [org.springframework.web.servlet.DispatcherServlet] -  DEBUG [org.springframework.web.servlet.DispatcherServlet] -  DEBUG [org.springframework.web.servlet.DispatcherServlet] -  2007-10-29 18:47:02,835 DEBUG [org.springframework.web.servlet.DispatcherServlet] - \ javax.servlet.ServletException: No adapter for handler [XController@e24bd0]: Does your handler implement a supported interface like Controller? at org.springframework.web.servlet.DispatcherServlet.getHandlerAdapter(DispatcherServlet.java:1068) at org.springframework.web.servlet.DispatcherServlet.getLastModified(DispatcherServlet.java:938) at javax.servlet.http.HttpServlet.service(HttpServlet.java:714) at javax.servlet.http.HttpServlet.service(HttpServlet.java:831)  It seems it cannot detect the annotations (RequestMapping, InitBinder) as present (are they visible in the JDK proxy?). It's a shame that these controllers cannot support advices. I know that extending the old class hierarchy does not allow this but, with all the work that has been done, it seemed like a good time to add this kind of support.   ---  **Affects:** 2.5 RC1","closed","type: enhancement,","spring-projects-issues","2007-10-29T05:00:35Z","2008-05-19T06:24:08Z"
"","8501","Redeploying EAR files on WLS causes random errors recreating the context [SPR-3821]","**[Jose Noheda](https://jira.spring.io/secure/ViewProfile.jspa?name=xmaniac)** opened **[SPR-3821](https://jira.spring.io/browse/SPR-3821?redirect=false)** and commented  When trying to hot deploy an EAR file that has a root application context, a servlet context and references to the root context from MDBs the application fails to start indicating #### \   \      \ \ #### \ \ \      \","closed","in: core,","spring-projects-issues","2007-08-30T04:57:03Z","2012-06-19T03:50:04Z"
"","8325","DataBinder should be an interface rather than a class [SPR-3644]","**[Jose Noheda](https://jira.spring.io/secure/ViewProfile.jspa?name=xmaniac)** opened **[SPR-3644](https://jira.spring.io/browse/SPR-3644?redirect=false)** and commented  As it is now it creates all kind of troubles with proxies as many methods need to return a DataBinder (and throw several ClassCastExceptions when working with JDK proxies). An interface and a default implementation would simplify things   --- No further details from [SPR-3644](https://jira.spring.io/browse/SPR-3644?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-07-03T03:14:24Z","2012-06-18T12:45:00Z"
"","8288","Declaring a multipartResolver bean limits file uploading capabilities [SPR-3605]","**[Jose Noheda](https://jira.spring.io/secure/ViewProfile.jspa?name=xmaniac)** opened **[SPR-3605](https://jira.spring.io/browse/SPR-3605?redirect=false)** and commented  If a multipartResolver bean is declared in the context, say:  \ \ \ Every request that the dispatcher servlet handles is pre-processed by it, effectively removing the files from the request. This makes impossible to use in conjunction with other upload controllers (for example an AJAX monitor). A better approach would allow the user to configure the multipart resolver so it can be applied just to some requests and not all (based on the context path or a request parameter perhaps)  ---  **Issue Links:** - #8004 Provides a MultipartResolver that make use of Common FileUpload 1.2  8 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2007-06-20T02:27:20Z","2019-01-11T18:27:51Z"
"","8213","Add a log4j Nested Diagnostic Context handler interceptor [SPR-3530]","**[Jose Noheda](https://jira.spring.io/secure/ViewProfile.jspa?name=xmaniac)** opened **[SPR-3530](https://jira.spring.io/browse/SPR-3530?redirect=false)** and commented  Log4jNestedDiagnosticContextFilter does a good job but implies modifying the web.xml file something I rather avoid. Having a HandlerInterceptor that establishes a log4j NDC message just works better for Spring MVC. It's very easy to create and standard enough to warrant inclusion in the framework IMO (even more considering that the filter already exists).   ---  **Affects:** 2.1 M1","closed","type: enhancement,","spring-projects-issues","2007-05-28T05:19:53Z","2012-06-19T03:50:57Z"
"","8876","Replace references to DelegatingFacesELResolver with SpringBeanFacesELResolver [SPR-4198]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-4198](https://jira.spring.io/browse/SPR-4198?redirect=false)** and commented  Both the reference documentation (What's new -> JSF 1.2 support) and the JavaDoc for SpringBeanFacesELResolver refer to the old DelegatingFacesELResolver classname. Please replace these references with the new name.   ---  **Affects:** 2.5 final","closed","type: bug,","spring-projects-issues","2007-11-29T21:41:10Z","2012-06-19T03:46:59Z"
"","8673","MetadataMBeanInfoAssembler should have smart default for attributeSource [SPR-3993]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-3993](https://jira.spring.io/browse/SPR-3993?redirect=false)** and commented  AFAIK, at least 95% of the people using the MetadataMBeanInfoAssembler are using it with Java 5 Annotations. Those people will also have no Commons Attributes on their classpath. In that case, it would be very helpful if the MetadataMBeanInfoAssembler could just default to use an AnnotationJmxAttributeSource as its attributeSource (i.e., if none is explicitly configured). OTOH, if they're running on Java 1.4 and have Commons Attributes available, then an AttributesJmxAttributeSource with a CommonsAttributes also seems like a sensible default to use instead. I would therefore like to suggest to implement these sensible defaults. It always bothers me that I have to configure this explicitly even if the framework can figure out that there's only a single sensible option to use.   ---  **Affects:** 2.1 M4","closed","in: core,","spring-projects-issues","2007-10-19T05:53:43Z","2019-01-12T05:34:11Z"
"","8429","persistence_1_0.xsd not found in all cases [SPR-3748]","**[Jorg Heymans](https://jira.spring.io/secure/ViewProfile.jspa?name=heymjo)** opened **[SPR-3748](https://jira.spring.io/browse/SPR-3748?redirect=false)** and commented  Hi,  During startup of our application, Spring displays a (harmless) stacktrace, that it cannot find the JPA schema resource:  10:58:16,800 DEBUG [org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader] - Could not search for JPA schema resource [persistence_1_0.xsd] in class path java.util.zip.ZipException: The filename, directory name, or volume label syntax is incorrect at java.util.zip.ZipFile.open(Native Method) at java.util.zip.ZipFile.\(ZipFile.java:204) at java.util.jar.JarFile.\(JarFile.java:132) at java.util.jar.JarFile.\(JarFile.java:70) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(PathMatchingResourcePatternResolver.java:409) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:320) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:244) at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:867) at org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.findSchemaResource(PersistenceUnitReader.java:198) at org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.validateResource(PersistenceUnitReader.java:166) at org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.readPersistenceUnitInfos(PersistenceUnitReader.java:133) at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.readPersistenceUnitInfos(DefaultPersistenceUnitManager.java:278) at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.preparePersistenceUnitInfos(DefaultPersistenceUnitManager.java:255) at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.afterPropertiesSet(DefaultPersistenceUnitManager.java:240) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1201) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1171) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:425) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)  This has been raised before on the forums (http://forum.springframework.org/showthread.php?t=26209), and Costin Leau provided a fix implementing implementation specific loading:  (PersistenceUnitReader.java)      		// First search the class path root (TopLink)     		Resource schemaLocation = this.resourcePatternResolver.getResource(""classpath:"" + schemaName);     		if (schemaLocation.exists()) {     			return schemaLocation;     		}          		// Search org packages (open source provider such as Hibernate or OpenJPA)     		Resource[] resources = this.resourcePatternResolver.getResources(""classpath*:org/**/"" + schemaName);     		if (resources.length > 0) {     			return resources[0];     		}          		// Search com packages (some commercial provider)     		resources = this.resourcePatternResolver.getResources(""classpath*:com/**/"" + schemaName);     		if (resources.length > 0) {     			return resources[0];     		}  The problem with this IMO is that classpath*:org|com/**/persistence_1_0.xsd is not guaranteed to resolve correctly when the application is packaged as an EAR (or WAR). For my case, Weblogic 9.2 + hibernate JPA, it doesn't.  So why not directly reference the full path for some well known implementations, and resort to wildcard matching if all else fails ?  - Hibernate : classpath:org/hibernate/ejb/persistence_1_0.xsd - OpenJpa : does not even include the file in its jars (see https://issues.apache.org/jira/browse/OPENJPA-57) - Jpox: classpath:org/jpox/jpa/persistence_1_0.xsd    ---  **Affects:** 2.0.6","closed","in: core,","spring-projects-issues","2007-08-08T20:40:45Z","2012-06-19T03:51:19Z"
"","8365","open up DelegatingFilterProxy [SPR-3684]","**[Jorg Heymans](https://jira.spring.io/secure/ViewProfile.jspa?name=heymjo)** opened **[SPR-3684](https://jira.spring.io/browse/SPR-3684?redirect=false)** and commented  It would be great if the delegate filter in DelegatingFilterProxy could be made protected (or add a protected getter) That way, people can override doFilter() and e.g. add some conditional logic before deciding to let the delegate process the request or not.  ---  public class DelegatingFilterProxy extends GenericFilterBean {      private String targetBeanName;          private boolean targetFilterLifecycle = false;          ----->private","closed","type: enhancement,","spring-projects-issues","2007-07-13T01:55:33Z","2019-01-13T22:42:34Z"
"","8185","MultiActionController exception handler on delegate is recognized as handler method [SPR-3502]","**[Jonathan Tse](https://jira.spring.io/secure/ViewProfile.jspa?name=dev@tsez.net)** opened **[SPR-3502](https://jira.spring.io/browse/SPR-3502?redirect=false)** and commented  I have checked and tested this in 1.2.8 apparently 1.2.9 did the same thing also(i haven't tested it though)  According to doc Subclasses can implement custom exception handler methods with names such as:  ModelAndView anyMeaningfulName(HttpServletRequest request, HttpServletResponse response, ExceptionClass exception);  However, At line 210, public final void setDelegate(Object delegate) throws ApplicationContextException  This method recognize the exception handler as handlerMethod. As a result, this exception handler is used to serve the request.  This should be wrong. Especially when you place the exception handler after the handler method.  Should check if the third parameter is an instance of exception before putting the method to the handlerMethodMap  ---  **Affects:** 1.2.8  **Issue Links:** - #8361 Doc: MultiActionController request/response/exception signature not clear","closed","type: bug,","spring-projects-issues","2007-05-20T19:26:43Z","2019-01-11T19:07:43Z"
"","8147","Use Property Editors getAsText method for comparing objects when form loads [SPR-3464]","**[Jonathan Slate](https://jira.spring.io/secure/ViewProfile.jspa?name=jslate)** opened **[SPR-3464](https://jira.spring.io/browse/SPR-3464?redirect=false)** and commented  When loading a form using SimpleFormController, if the Object formBackingObject provides contains an Object that also exists in a list of Objects within the Map provided by referenceData, those two objects must be exactly equivalent (equals method) in order to have the correct item selected in a drop-down list (or similar). I'd like to instead be able to have the Object's PropertyEditor's getAsText method used to get a String representation of the Objects, and have the Strings compared. This could either be the default behavior or a settable option.  Here's an example: you have form where a user can edit their address. The form backing Object is a Person which contains several address fields including a Country. With referenceData you also provide a Map that includes a list of all countries in the world. The form will include a drop-down menu with a list of all countries, and the Person's current Country should be pre-selected from that list. With the current behavior, the Person's Country and the Country in the list of countries must be equivalent (equals returns true) for the pre-selection to occur. I'd like to be able to use the CountryEditor property editor to compare the ID numbers instead. This way, if they have the same ID number they are considered equivalent within the form, without having to override the equals method.  Also, when you submit the form, setAsText is used to take the ID that is sent to the server and turn it into an actual Country object. So using getAsText when the form loads as described above seems more consistent with the behavior that occurs when the form submits.  There is a discussion in the Spring forums on this topic here: http://forum.springframework.org/showthread.php?t=38332  Jörg Heinicke states in that thread more eloquently than I can: You have some really valid points. At the end you externalize the object comparisons (normally done by equals()) to the property editors (done by string representations) and so make it reusable and changeable. The comparison criteria of an object type might change in different use cases (changeable). Or the same comparison criteria might apply to different object types (reusable), e.g. all persistent objects can be compared by their ID - and you neither need to duplicate this equals() code nor introduce an abstract base class.   ---  **Affects:** 2.0.1  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2007-05-09T08:24:17Z","2012-06-19T09:37:38Z"
"","7992","After-throwing and After-returning advice arguments not boud error with javac [SPR-3307]","**[Jonathan Koppenhofer](https://jira.spring.io/secure/ViewProfile.jspa?name=jkoppenhofer)** opened **[SPR-3307](https://jira.spring.io/browse/SPR-3307?redirect=false)** and commented  See the following link for detail: http://forum.springframework.org/showthread.php?t=32465  There is an extremely concise maven project attached on page 3 of the forum thread to reproduce the issue.  Essentially it appears that there is a problem binding the returning or throwing advice parameters in some situations when compiling with javac. When compiled with eclipse JDT, everything works fine. Yes, I have set the debug compile flags for javac , and it still doesn't work. The issue becomes even more weird in that it appears the content of the advice method effects whether the bug can be reproduced or not. Again, see the forum thread above, and the simple maven project to reproduce the issue on page 3 of the forum thread.   ---  **Affects:** 2.0.3  **Attachments:** - [spring-aop-error.zip](https://jira.spring.io/secure/attachment/12502/spring-aop-error.zip) (_5.11 kB_)","closed","in: core,","spring-projects-issues","2007-03-27T06:18:01Z","2012-06-19T03:51:14Z"
"","8558","Additional selected capability for  [SPR-3878]","**[Jonathan Hughes](https://jira.spring.io/secure/ViewProfile.jspa?name=jhughesftl)** opened **[SPR-3878](https://jira.spring.io/browse/SPR-3878?redirect=false)** and commented  I have seen several people post messages to message boards with problems getting the  tag to select the proper value when the underlying object utilizes a property editor.  I know this can be resolved by overriding the equals function for the target bean, however it seems to be a trivial fix to the forms taglib to simply check the same method used to retrieve the value for the listed object to compare the current object instead of only utilizing equals.  For instance, given a tag:     It would be nice if the taglib were smart enough to attempt comparison of the option.getId() == sample.getId() and option.getId().equals(sample.getId()) in addition to the current option.equals(sample)   ---  **Affects:** 2.0.3  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-09-14T02:22:24Z","2012-06-19T09:36:27Z"
"","7890","javadoc for HibernateDaoSupport.getHibernateTemplate() could usefully include a reminder about mutating the returned reference [SPR-3204]","**[Jon Seymour](https://jira.spring.io/secure/ViewProfile.jspa?name=jonseymour)** opened **[SPR-3204](https://jira.spring.io/browse/SPR-3204?redirect=false)** and commented  Trivial subclasses of HibernateDaoSupport will normally be thread-safe without explicit programmer effort. However, this relies on the assumption that DAO methods do not modify the HibernateTemplate object returned by HibernateDaoSupport.getHibernateTemplate().  However, a common programming task is to implement finder methods which limit the size of the returned result set. The obvious way to do this is to call the setMaxResults() method on the HibernateTemplate returned by getHibernateTemplate().  Unfortunately, this introduces a thread-safety issue unless precautions are taken to prevent concurrent access to the HibernateTemplate returned from getHibernateTemplate(). Even in the absence of concurrency, a failure by the programmer to restore the original value of setMaxResults() can cause other methods on the same HibernateDaoSupport instance to malfunction due to incorrectly set limits.  It might be helpful if the javadoc for HibernateDaoSupport.getHibernateTemplate() reminded the reader that the returned object  should not be modified unless the caller fully understands all the implications of doing so.   ---  **Affects:** 1.2.8, 2.0.2  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-26T00:22:22Z","2012-06-19T03:50:13Z"
"","8634","JSP taglib with FreeMarker doesn't print errors [SPR-3954]","**[Jon Chase](https://jira.spring.io/secure/ViewProfile.jspa?name=jonchase)** opened **[SPR-3954](https://jira.spring.io/browse/SPR-3954?redirect=false)** and commented  Here's the forum thread that covers the bug: http://forum.springframework.org/showthread.php?t=44442  Basically, when using the Spring MVC JSP forms taglib in FreeMarker templates, binding errors are not output by the  tag.  Other tags seem to work fine, however.  I'll attach an example project that shows the issue.  I've tried stepping through things in the debugger to see what's happening.  The error message is there, and it's being written to a buffer inside one of hte Spring custom tags (although I was kind of lost at that point:)), but it doesn't seem to make its way into the output.  Interestingly, if I use the some message variation, the ""some message"" is printed out (although it's not possible to get the real errors, so this doesn't help much, just shows that the error is certainly ""there"").  Also, I can use the FreeMarker macors that come with Spring MVC (bind and showErrors) to display the error message.  ---  **Affects:** 2.0.6, 2.1 M4  **Attachments:** - [springjsp.zip](https://jira.spring.io/secure/attachment/12981/springjsp.zip) (_6.27 MB_)  **Issue Links:** - #8110 form:errors and form:option JSP tags don't render in FreeMarker templates (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2007-10-03T01:17:06Z","2019-01-11T21:13:01Z"
"","8842","form:checkboxes and form:radiobuttons should use registered property editor [SPR-4164]","**[john@johnandkerri.com](https://jira.spring.io/secure/ViewProfile.jspa?name=johndstein)** opened **[SPR-4164](https://jira.spring.io/browse/SPR-4164?redirect=false)** and commented  I seems that form:checkboxes and form:radiobuttons are still broken.  They still use toString and not the registered property editor to generate the value.  form:select works properly, and  form:checkboxes and form:radiobuttons should work just like it.  For example:      The above works great. path=""interests"" is the complete set of things a person may be interested in and items=""${interests}"" are the set of things the given person is interested in.  However, checkboxes and radiobuttons like so:     does not work.  Specifically, if I leave itemValue blank, the values are correctly bound and the right ones checked, but the tag uses toString to generate the value instead of calling the property editor, so when I save of, course, the property editor can't convert the value (unless my toString method returns the same thing as my custom property editor, which is not a good solution).  If I do itemValue=""id"", the values are not properly bound (the right check boxes are not checked.  The same issue is true with the single versions form:checkbox and form:radiobutton.       The above would work if the tag used the registered property editor to generate the value, but instead it uses toString (and again, if your toString returns the same thing as your property editor, it works).  This issue relates to these other issues.  Allow form:checkbox to create multiple boxes based on a collection of values: http://opensource.atlassian.com/projects/spring/browse/SPR-3882  Enable usage of custom PropertyEditor for collection element for form:select bound to collection http://opensource.atlassian.com/projects/spring/browse/SPR-3654  ---  **Affects:** 2.5 final  **Issue Links:** - #8335 Enable usage of custom PropertyEditor for collection element for form:select bound to collection (_**""duplicates""**_) - #9079 AbstractCheckedElementTag should properly pre-check items from a map or collection item source","closed","type: enhancement,","spring-projects-issues","2007-11-24T01:44:14Z","2019-01-11T16:04:03Z"
"","8668","Typo in reference doc [SPR-3988]","**[John Towell](https://jira.spring.io/secure/ViewProfile.jspa?name=jtowell)** opened **[SPR-3988](https://jira.spring.io/browse/SPR-3988?redirect=false)** and commented  Not sure if this is right place to log document bugs.   I didn't see anywhere else mentioned.  In 3.7.2.1. Example: the PropertyPlaceholderConfigurer  ""Please consult the Javadoc for the PropertiesPlaceholderConfigurer for more information.""  Should be PropertyPlaceholderConfigurer.  I cut and pasted the class name googling for javadoc, and was confused when it didn't show up.   ---  **Affects:** 2.0.7","closed","type: bug,","spring-projects-issues","2007-10-18T17:23:06Z","2012-06-19T03:47:40Z"
"","7968","AspectJAfterReturningAdvice.shouldInvokeOnReturnValueOf throws NPE if the returned value is null [SPR-3283]","**[John Shiffrin](https://jira.spring.io/secure/ViewProfile.jspa?name=jcshiff)** opened **[SPR-3283](https://jira.spring.io/browse/SPR-3283?redirect=false)** and commented  AspectJAfterReturningAdvice.shouldInvokeOnReturnValueOf throws a NullPointerException when it tries to invoke returnedValue.getClass()   ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2007-03-22T02:00:41Z","2012-06-19T03:50:25Z"
"","7967","AspectJExpressionPointcut does not match methods that return arrays [SPR-3282]","**[John Shiffrin](https://jira.spring.io/secure/ViewProfile.jspa?name=jcshiff)** opened **[SPR-3282](https://jira.spring.io/browse/SPR-3282?redirect=false)** and commented  When I write an aspect with a pointcut that matches methods that return an array of objects, the advice is not applied.  Consider the following example snippet from a configuration file:         The first aop:after-returning works as expected, but the second one does not.  It appears that the second pointcut is not considered eligible for the advice to intercept my service methods.  This was discussed on the forum at http://forum.springframework.org/showthread.php?t=36383   ---  **Affects:** 2.0.1","closed","in: core,","spring-projects-issues","2007-03-22T01:00:19Z","2019-01-11T17:18:12Z"
"","8225","scope (& similar attributes) on abstract beans should be inherited in child beans, or not permitted [SPR-3542]","**[John Newman](https://jira.spring.io/secure/ViewProfile.jspa?name=john)** opened **[SPR-3542](https://jira.spring.io/browse/SPR-3542?redirect=false)** and commented  Hi,  given this config:  \ \ ..... \ \ \ \  the prototype attribute on the abstract parent does not carry down to any child beans.  So child1 & 2 here are scoped singleton, wouldn't it make sense to inherit that?  I am not sure, just throwing this out there for someone to consider.  If it does, the child beans could also override scope and the similar attributes.  If it doesn't make sense, abstract=""true"" & scope=""*"" should probably generate an xml error since they will be a waste of typing.  ---  **Affects:** 2.1 M2  **Issue Links:** - #10523 Method lookup facility doesn't work properly with scope defined in parent bean (_**""is duplicated by""**_) - #17171 Update documentation after SPR-3542  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a884a407aa8a7d3c930dd560e4c03fc371f673e4, https://github.com/spring-projects/spring-framework/commit/d0b689127595179019831b1f117fed8b9a74c396  8 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2007-06-01T16:21:59Z","2019-01-11T19:09:07Z"
"","8687","Extension to FreeMarker macro formSingleSelect [SPR-4007]","**[John Mikich](https://jira.spring.io/secure/ViewProfile.jspa?name=mindjoy)** opened **[SPR-4007](https://jira.spring.io/browse/SPR-4007?redirect=false)** and commented  Greetings to all Spring Framework developers,  I would like to enhance the FreeMarker macro formSingleSelect which is included with Spring distribution in spring.ftl and binds values from a hash (map) to a select/dropdown list.  My enhancement accepts the values either from a sequence (list) as both labels and values or a hash (map) as in the current version of Spring (2.0.7 as of now).                    \${options[value]?html}\   \   \   \   \${value?html}\   \   \   \   \  Please advise how my code could find its way into the next release of Spring. Thank you.  Regards,  Ivica Mikic  ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2007-10-25T07:53:48Z","2019-01-13T08:07:02Z"
"","8817","NullPointerException in MailSendException [SPR-4138]","**[John Hampton](https://jira.spring.io/secure/ViewProfile.jspa?name=jhampton)** opened **[SPR-4138](https://jira.spring.io/browse/SPR-4138?redirect=false)** and commented  A MailSendException created with the MailSendException(String msg) constructor throws a NPE when printStackTrace is called.  java.lang.NullPointerException at org.springframework.mail.MailSendException.printStackTrace(MailSendException.java:149) at org.apache.log4j.spi.ThrowableInformation.getThrowableStrRep(ThrowableInformation.java:59) at org.apache.log4j.spi.LoggingEvent.getThrowableStrRep(LoggingEvent.java:342) at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:304) at org.apache.log4j.WriterAppender.append(WriterAppender.java:159) at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:230) at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:65) at org.apache.log4j.Category.callAppenders(Category.java:203) at org.apache.log4j.Category.forcedLog(Category.java:388) at org.apache.log4j.Category.log(Category.java:853) at org.apache.commons.logging.impl.Log4JLogger.error(Log4JLogger.java:193) at com.cleanoffer.mylistings.impl.Emailer.sendUploadConfirmation(Emailer.java:51) at com.cleanoffer.mylistings.impl.EmailerTest.testSendUploadConfirmation_withSendException(EmailerTest.java:38) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.jmock.core.VerifyingTestCase.runBare(VerifyingTestCase.java:39) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)  ---  **Affects:** 2.5 final  **Issue Links:** - #8852 NullPointerException thrown from MailSendException if particular constructors are used. (_**""is duplicated by""**_) - #8875 NullPointerException in MailSendException (_**""is duplicated by""**_) - #9505 MailSendException is prone to Null Pointer Exceptions (_**""is duplicated by""**_) - #9090 MailSendException.getMessage will result in NPE (_**""is duplicated by""**_) - #9095 NullPointerException in org.springframework.mail.MailSendException (_**""is duplicated by""**_) - #8726 MailSendException created with Map of SmartMimeMessages and SendExceptions is not serializable but not transient","closed","in: core,","spring-projects-issues","2007-11-20T07:02:41Z","2019-01-11T15:46:32Z"
"","8424","MessageTag does not format default message if error code is null [SPR-3743]","**[John Didion](https://jira.spring.io/secure/ViewProfile.jspa?name=jdidion)** opened **[SPR-3743](https://jira.spring.io/browse/SPR-3743?redirect=false)** and commented  If the error code is null and my default message is parameterized, the default message does not get formatted. Simple fix:  Change MessageTag.resolveMessage from:  if (resolvedCode != null) { ... }  to:  if (resolvedCode != null || resolvedText != null) { ... }   ---  **Affects:** 2.0.6","closed","type: bug,","spring-projects-issues","2007-08-06T12:49:05Z","2012-06-19T03:50:02Z"
"","8794","Add a JndiObjectsFactoryBean which exposes a Map of multiple Jndi lookups, keyed by Jndi name. [SPR-4115]","**[John Boyes](https://jira.spring.io/secure/ViewProfile.jspa?name=jboyes)** opened **[SPR-4115](https://jira.spring.io/browse/SPR-4115?redirect=false)** and commented  As per the summary above, it would be useful to have a FactoryBean which exposes a collection of JndiObjects in a Map.   ---  **Affects:** 2.0.7  **Attachments:** - [JndiObjectsFactoryBean.java](https://jira.spring.io/secure/attachment/13115/JndiObjectsFactoryBean.java) (_2.51 kB_) - [JndiObjectsFactoryBeanTest.java](https://jira.spring.io/secure/attachment/13117/JndiObjectsFactoryBeanTest.java) (_3.54 kB_) - [SimpleJndiObjectLocator.java](https://jira.spring.io/secure/attachment/13116/SimpleJndiObjectLocator.java) (_352 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-11-16T02:22:14Z","2012-06-19T09:36:16Z"
"","8645","Hibernate LocalSessionFactoryBean ignores classpath when loading mapping resources [SPR-3965]","**[John Baker](https://jira.spring.io/secure/ViewProfile.jspa?name=jmbaker)** opened **[SPR-3965](https://jira.spring.io/browse/SPR-3965?redirect=false)** and commented  Consider the following:  \ \                      Admin.hbm.xml                   ...  And the following code sample:      ClassPathXmlApplicationContext appCtx = new         ClassPathXmlApplicationContext(               new String[] {                     ""configuration-context.xml""               }, false);     appCtx.setClassLoader(classLoader);     appCtx.refresh();  While the configuration-context.xml is loaded from the classLoader provided, the Hibernate mapping file (Admin.hbm.xml) is loaded from the Thread's classloader. This is because of the following code in LocalSessionFactoryBean:      public void setMappingResources(String[] mappingResources) {     	this.mappingLocations = new Resource[mappingResources.length];     	for (int i = 0; i < mappingResources.length; i++) {     		this.mappingLocations[i] = new ClassPathResource(mappingResources[i].trim());     	}     }  The ClassPathResource is not given a reference to 'classLoader', set on the ClassPathXmlApplicationContext object.  I've discovered this by looking at the classLoader reference in the following section of code (from ClassPathResource):      public InputStream getInputStream() throws IOException {     	InputStream is = null;     	if (this.clazz != null) {     		is = this.clazz.getResourceAsStream(this.path);     	}     	else {     		is = this.classLoader.getResourceAsStream(this.path);     	}     	if (is == null) {     		throw new FileNotFoundException(     				getDescription() + "" cannot be opened because it does not exist"");     	}     	return is;     }  The classLoader reference is not the one I set here:      appCtx.setClassLoader(classLoader);    ---  **Affects:** 2.0.5","closed","in: core,","spring-projects-issues","2007-10-08T19:11:30Z","2012-06-19T03:46:35Z"
"","8333","Maven problem: Transitive dependencies from commons-logging [SPR-3652]","**[Johannes Brodwall](https://jira.spring.io/secure/ViewProfile.jspa?name=jhannes)** opened **[SPR-3652](https://jira.spring.io/browse/SPR-3652?redirect=false)** and commented  When you build Spring depends on servlet-api 2.3 (!). This means that by default, servlet-api.jar will be packaged in the WAR-files. Some application servers rightfully don't like this very much. Others accept the WAR, but get the classpath messed up (which gives MethodNotFoundError and suchlike on servlet-api methods). This means that when using Maven 2 and Spring, there is no simple way to get a WAR that will actually work without problems.  The reason for this harmful behavior is the dependency on commons-logging. The latest version of commons-logging (1.1) has several bad compile dependencies (logkit, log4j, avalon and servlet-api), which all Maven projects depending on commons-logging will inherit. This is a well know problem (http://jira.codehaus.org/browse/MEV-392), but neither the commons-logging team nor the Maven team is willing to do anything about it.  As a result, commons-logging 1.1 is broken, and will result in small, but hard to diagnose and fix problems for Maven projects.  The problem can be resolved in one of three ways: * (Simplest) Make \ for transitive dependencies from commons-logging in http://springframework.cvs.sourceforge.net/springframework/spring/maven/spring.pom?revision=1.15&view=markup * (Better) Replace commons-logging.jar with jcl104-over-slf4j.jar (See http://www.slf4j.org/manual.html#gradual) * (Too much work) Replace commons-logging code in Spring with slf4j    ---  **Affects:** 2.0.6","closed","type: task,","spring-projects-issues","2007-07-04T00:07:47Z","2012-06-19T03:50:51Z"
"","8419","tx:method name=""on*Event"" does not match any methods [SPR-3738]","**[Johan Gorter](https://jira.spring.io/secure/ViewProfile.jspa?name=drsoong)** opened **[SPR-3738](https://jira.spring.io/browse/SPR-3738?redirect=false)** and commented  The aop xsd gives the following example:   When I tried using this, no methods were matched. I tracked down the problem to the NameMatchTransactionAttributeSource.isMatch method The documentation here states: ... checks for ""xxx*"", ""\*xxx"" and ""**xxx**"" matches ... So xx*xx is not checked, and the documentation is correct.  Please fix this, preferably by checking for xx**xx as well, otherwise remove the on**Event example from the xsd.   ---  **Affects:** 2.0.6  **Attachments:** - [PatternMatchUtils.java](https://jira.spring.io/secure/attachment/12757/PatternMatchUtils.java) (_2.78 kB_) - [PatternMatchUtilsTest.java](https://jira.spring.io/secure/attachment/12758/PatternMatchUtilsTest.java) (_2.88 kB_)","closed","in: core,","spring-projects-issues","2007-08-03T01:20:37Z","2012-06-19T03:50:06Z"
"","8182","CookieLocaleResolver don't reset locale to fallback default locale [SPR-3499]","**[Jo Størset](https://jira.spring.io/secure/ViewProfile.jspa?name=storset)** opened **[SPR-3499](https://jira.spring.io/browse/SPR-3499?redirect=false)** and commented  #setLocale() with null locale, sets locale to request.getLocale(), even if defaultLocale property is specified. Should call #determineDefaultLocale() instead.   ---  **Affects:** 2.0.5  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/12609/patch.txt) (_2.40 kB_)","closed","type: bug,","spring-projects-issues","2007-05-19T05:00:06Z","2012-06-19T03:51:06Z"
"","7918","StringArrayPropertyEditor listed as default registered in docs, but it no longer is [SPR-3232]","**[Jo Størset](https://jira.spring.io/secure/ViewProfile.jspa?name=storset)** opened **[SPR-3232](https://jira.spring.io/browse/SPR-3232?redirect=false)** and commented  #6563 removed default registering of StringArrayPropertyEditor, but the docs still list it as registered.  In addition this breaks backwards compability, without any warning given to users.  ---  **Affects:** 2.0 final, 2.0.1, 2.0.2","closed","type: documentation,","spring-projects-issues","2007-03-05T05:34:02Z","2019-01-11T17:17:19Z"
"","8796","make 'maveninstall' depend on 'distpoms' [SPR-4117]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-4117](https://jira.spring.io/browse/SPR-4117?redirect=false)** and commented  In spring main's build.xml, target 'maveninstall' doesn't depend on 'distpoms', which causes it to fail when doing a clean build.   ---  **Affects:** 2.5 RC2","closed","type: bug,","spring-projects-issues","2007-11-16T16:01:15Z","2012-06-19T03:47:23Z"
"","8409","Strengthen the SQLExceptionTranslator.translate contract [SPR-3728]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-3728](https://jira.spring.io/browse/SPR-3728?redirect=false)** and commented  Currently SQLExceptionTranslator.translate does not require (in javadoc) the result DataAccessException to contain the original SQLException as a root cause.  Both existing implementations of the interface actually always do that.  Having the behavior formally defined in the interface contract would help assuring the validity of any downstream handling code relying on that.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-08-01T05:33:28Z","2012-06-19T03:50:37Z"
"","7958","NoClassDefFoundError when groovy isn't on classpath [SPR-3273]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-3273](https://jira.spring.io/browse/SPR-3273?redirect=false)** and commented  After upgrading from 2.0.2 to 2.0.3, I'm getting the following exception during the loading of every context file, because my app doesn't use groovy. I know they are harmless and ignored, but it would be nice if DefaultNamespaceHandlerResolver could just not log the whole stack trace.  02:21:58,130 DEBUG [main] org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver  - Ignoring handler [org.springframework.scripting.config.LangNamespaceHandler]: problem with class file or dependent class java.lang.NoClassDefFoundError: org/codehaus/groovy/control/CompilationFailedException at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:169) at org.springframework.scripting.config.LangNamespaceHandler.class$(LangNamespaceHandler.java:45) at org.springframework.scripting.config.LangNamespaceHandler.init(LangNamespaceHandler.java:45) at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.initHandlerMappings(DefaultNamespaceHandlerResolver.java:123) at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.\(DefaultNamespaceHandlerResolver.java:96) at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.\(DefaultNamespaceHandlerResolver.java:82) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.createDefaultNamespaceHandlerResolver(XmlBeanDefinitionReader.java:489) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.createReaderContext(XmlBeanDefinitionReader.java:478) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:458) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:353) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:280) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:131) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:147) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:124) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:92) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:100) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:298) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:241) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49)  ---  **Affects:** 2.0.3  **Issue Links:** - #7935 LangNamespaceHandler cannot be registered in DefaultNamespaceHandlerResolver when thrid party library is not found (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2007-03-18T03:59:36Z","2019-01-12T16:51:42Z"
"","8344","When getting exception, the executed SQL in the in the exception message does not show correct encoding for non-ascii characters [SPR-3663]","**[jiang chen](https://jira.spring.io/secure/ViewProfile.jspa?name=jchen)** opened **[SPR-3663](https://jira.spring.io/browse/SPR-3663?redirect=false)** and commented  here is the stack trace, the ???????????????????? should show the Japanese chars.  Caused by: org.springframework.dao.DataIntegrityViolationException: StatementCallback; SQL [insert into PricingC.pricingContract(id,touched_ts,child_id,kind,type,system,number,description,start,end) values('price',current timestamp - current timezone,'1kh','OTHExx','QKSHP','AFCON','AF #991991111111111111111','????????????????????','2008-01-01','2009-01-xx')]; Non-atomic batch failure.  The batch was submitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements.; nested exception is com.ibm.db2.jcc.c.ud: Non-atomic batch failure.  The batch was submitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements. at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.translate(SQLStateSQLExceptionTranslator.java:92) at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:258) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:310) at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:462) at com.ibm.pw.pps.framework.binding.sql.DataSourceStatementSink.executeBatch(DataSourceStatementSink.java:112)   --- No further details from [SPR-3663](https://jira.spring.io/browse/SPR-3663?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-07-06T03:25:56Z","2012-06-18T12:44:55Z"
"","8121","""IllegalStateException: Cannot deactivate transaction synchronization - not active"" thrown when when 'inner' transaction for unrelated datasource fails to get a connection [SPR-3438]","**[Jeremy Stone](https://jira.spring.io/secure/ViewProfile.jspa?name=jeremystone)** opened **[SPR-3438](https://jira.spring.io/browse/SPR-3438?redirect=false)** and commented  Background: In our product we use Hibernate with Spring's declarative transaction demarcation (via an HibernateTransactionManager).  One of the capabilities of our product is to execute arbitrary user-define SQL commands using unrelated user-defined data sources.  We have an outer transaction that loads this configuration for the SQL command and data source via Hibernate. To process the user's SQL we create a DataSourceTransactionManager programatically. Then we execute the SQL via a JdbcTemplate & PreparedStatementCallback and programmatically commit/rollback our transaction.  All is ok unless the user's Data Source definition is incorrect (or their database is down) in which case our call to the PlatformTransactionManager getTransaction(...) throws the corresponding SQLException. The exception is thrown out to the transaction interceptor for the Hibernate transaction which attempts to roll that transaction back too.  The problem seems to be that the 'outer' Hibernate transaction was suspended when we called PlatformTransactionManager getTransaction(...) but it was not automatically resumed when the getTransaction failed. Thus the following IllegalStateException occurs when it finally tries to rollback...  java.lang.IllegalStateException: Cannot deactivate transaction synchronization - not active at org.springframework.transaction.support.TransactionSynchronizationManager.clearSynchronization(TransactionSynchronizationManager.java:274) at org.springframework.transaction.support.TransactionSynchronizationManager.clear(TransactionSynchronizationManager.java:412) at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:905) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:774) at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:719) at org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing(TransactionAspectSupport.java:329) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:111) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:161) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:203) at $Proxy126.process(Unknown Source)  This does not appear to be related to Hibernate or to declarative transactions. The following test case (using JMock) code replicates the problem:  public class SqlDispatcherTest extends MockObjectTestCase { private static final SQLException CONNECT_EXCEPTION = new SQLException( ""Cannot connect"");      public void testTransactionSuspension_UnconnectableDataSource()             throws Exception     {         try         {             // Create an outer transaction             final PlatformTransactionManager txMgrOuter = new DataSourceTransactionManager(                     createDataSourceStub(createConnectionStub()));                  final TransactionStatus txOuter = txMgrOuter                     .getTransaction(new DefaultTransactionDefinition());                  try             {                 // Create inner transaction (not nested, though: unrelated data                 // source)                 final PlatformTransactionManager txMgrInner = new DataSourceTransactionManager(                         createUnconnectableDataSourceStub());                      final TransactionStatus txInner = txMgrInner                         .getTransaction(new DefaultTransactionDefinition(                                 TransactionDefinition.PROPAGATION_REQUIRES_NEW));                      try                 {                     // Do something with the connection that succeeds or fails                     // (but we dont get this far)                     // etc, etc...                          txMgrInner.commit(txInner);                 }                 catch (Exception e)                 {                     txMgrInner.rollback(txInner);                     throw e;                 }                      txMgrOuter.commit(txOuter);             }             catch (Exception e)             {                 txMgrOuter.rollback(txOuter);                 throw e;             }                  fail(""Exception should be thrown"");         }         catch (SQLException e)         {             assertSame(""Should be thrown exception"", CONNECT_EXCEPTION, e);         }     }          private DataSource createDataSourceStub(Connection connection)     {         Mock mockDataSource = mock(DataSource.class);         DataSource dataSource = (DataSource) mockDataSource.proxy();         mockDataSource.stubs().method(""getConnection"").will(                 returnValue(connection));         return dataSource;     }          private Connection createConnectionStub()     {         Mock mockConnection = mock(Connection.class);         mockConnection.stubs().method(""getAutoCommit"").will(returnValue(false));         mockConnection.stubs().method(""rollback"");         mockConnection.stubs().method(""commit"");              return (Connection) mockConnection.proxy();     }          private DataSource createUnconnectableDataSourceStub()     {         Mock mockDataSource = mock(DataSource.class);         DataSource dataSource = (DataSource) mockDataSource.proxy();         mockDataSource.stubs().method(""getConnection"").will(                 throwException(CONNECT_EXCEPTION));         return dataSource;     }  }    ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-05-01T21:40:15Z","2012-06-19T03:50:23Z"
"","8631","TransactionSynchronization.afterCompletion(int) in combination with JpaTransactionManager and PROPAGATION_REQUIRES_NEW fails with IllegalTransactionStateException [SPR-3951]","**[Jeppe Cramon](https://jira.spring.io/secure/ViewProfile.jspa?name=ski_bum)** opened **[SPR-3951](https://jira.spring.io/browse/SPR-3951?redirect=false)** and commented  We have some physical database locks (i.e. modeled as Lock objects which are handled by Hibernate) that we wish to clear after a transaction has completed. From reading the documentation we get the impression that we can spawn a new transaction, with PROPAGATION_REQUIRES_NEW, to access the database in the afterCompletion(int) method.  Thus we register a TransactionSynchronization on the currently running transaction and in the afterCompletion(int) method spawn a new Transaction with PROPAGATION_REQUIRES_NEW to perform the lock cleanups. The JpaTransactionManager fetches the currently active EntityMananger and Connection, which it tries to reuse for the new Transaction, because the hasTransaction() check returns false (I know your documentation also only states that the transactional resources might still be active and accessible).  The question is: Is this a bug or can't we do what we try to do using the JpaTransactionManager?  /Jeppe  ---  **Affects:** 2.0.7  **Issue Links:** - #8897 Problem with transaction when upgrading from 2.0.3 to 2.5  1 votes, 2 watchers","closed","type: bug,","spring-projects-issues","2007-10-01T23:39:47Z","2019-01-11T21:12:55Z"
"","8857","java.lang.NoClassDefFoundError: com.ibm.db2.jcc.DB2Driver with IBM JVM 1.5.0 and JPA [SPR-4179]","**[Jeffrey Lutz](https://jira.spring.io/secure/ViewProfile.jspa?name=jefflutz)** opened **[SPR-4179](https://jira.spring.io/browse/SPR-4179?redirect=false)** and commented  There is a problem with the decorator classloader (org.springframework.test.jpa.OrmXmlOverridingShadowingClassLoader) that causes the Class.forName() loading of the com.ibm.db2.jcc.DB2Driver class to be inproperly loaded.  The DB2Driver is both a type 2 and type 4 JDBC driver so I suspect this is the problem.  The fix I came up with is to add a ""excludePackage(""com.ibm.db2.jcc"");"" to the OrmXmlOverridingShadowingClassLoader constructor.  I don't know if this is the place for the fix so I am submitting this as a bug.  TEST applicationContext.xml  ---  \  \                                                                                                                                                                                                                                                                                    \  STACKTRACE  ---  D:\java\ibm_1.5.0_SR6\bin\java -Didea.launcher.port=7533 ""-Didea.launcher.bin.path=D:\Program Files\JetBrains\IntelliJ IDEA 6.0\bin"" -Dfile.encoding=windows-1252 -classpath ""D:\java\ibm_1.5.0_SR6\jre\lib\BD.jar;D:\java\ibm_1.5.0_SR6\jre\lib\charsets.jar;D:\java\ibm_1.5.0_SR6\jre\lib\core.jar;D:\java\ibm_1.5.0_SR6\jre\lib\deploy.jar;D:\java\ibm_1.5.0_SR6\jre\lib\graphics.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ibmcertpathprovider.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ibmcfw.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ibmjaasactivelm.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ibmjaaslm.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ibmjcefw.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ibmjgssprovider.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ibmjsseprovider2.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ibmorb.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ibmorbapi.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ibmpkcs.jar;D:\java\ibm_1.5.0_SR6\jre\lib\javaws.jar;D:\java\ibm_1.5.0_SR6\jre\lib\plugin.jar;D:\java\ibm_1.5.0_SR6\jre\lib\security.jar;D:\java\ibm_1.5.0_SR6\jre\lib\server.jar;D:\java\ibm_1.5.0_SR6\jre\lib\vm.jar;D:\java\ibm_1.5.0_SR6\jre\lib\xml.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\CmpCrmf.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\dtfj-interface.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\dtfj.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\gskikm.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\ibmcmsprovider.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\ibmjcefips.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\ibmjceprovider.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\ibmkeycert.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\IBMKeyManagementServer.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\ibmpkcs11.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\ibmpkcs11impl.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\ibmsaslprovider.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\ibmspnego.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\indicim.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\iwsorbutil.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\jaccess.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\JawBridge.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\jdmpview.jar;D:\java\ibm_1.5.0_SR6\jre\lib\ext\PD.jar;D:\workspaces\galc_svn\PersistenceCore\classes\production\Persistence_Core_Jar;D:\workspaces\galc_svn\tools\lib\db2\8.01\db2jcc_license_cu.jar;D:\workspaces\galc_svn\tools\lib\db2\8.01\db2jcc.jar;D:\workspaces\galc_svn\tools\lib\db2\8.01\db2jcc_cu.jar;D:\workspaces\galc_svn\tools\lib\db2\8.01\db2jcc_cisuz.jar;D:\workspaces\galc_svn\tools\lib\log4j\1.2.4\log4j-1.2.4.jar;D:\workspaces\galc_svn\tools\lib\hibernate\entitymanager\3.3.1\lib\ejb3-persistence.jar;D:\workspaces\galc_svn\tools\lib\hibernate\entitymanager\3.3.1\lib\hibernate-annotations.jar;D:\workspaces\galc_svn\tools\lib\hibernate\entitymanager\3.3.1\lib\hibernate-commons-annotations.jar;D:\workspaces\galc_svn\tools\lib\hibernate\entitymanager\3.3.1\lib\hibernate-validator.jar;D:\workspaces\galc_svn\tools\lib\hibernate\entitymanager\3.3.1\lib\jboss-archive-browsing.jar;D:\workspaces\galc_svn\tools\lib\hibernate\entitymanager\3.3.1\hibernate-entitymanager.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\xml-apis.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\jboss-cache.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\commons-collections-2.1.1.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\antlr-2.7.6.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\jgroups-2.2.8.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\jboss-jmx.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\jta.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\jdbc2_0-stdext.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\ant-junit-1.6.5.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\asm.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\jacc-1_0-fr.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\dom4j-1.6.1.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\connector.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\oscache-2.1.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\syndiag2.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\commons-logging-1.0.4.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\xerces-2.6.2.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\log4j-1.2.11.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\ant-1.6.5.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\jaas.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\concurrent-1.3.2.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\javassist.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\junit-3.8.1.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\jboss-system.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\ant-launcher-1.6.5.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\ant-swing-1.6.5.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\ant-antlr-1.6.5.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\jboss-common.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\cleanimports.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\hibernate3.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\asm-attrs.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\proxool-0.8.3.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\swarmcache-1.0rc2.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\ehcache-1.2.3.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\checkstyle-all.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\jaxen-1.1-beta-7.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\versioncheck.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\cglib-2.1.3.jar;D:\workspaces\galc_svn\tools\lib\hibernate\core\3.2.0\lib\c3p0-0.9.1.jar;D:\workspaces\galc_svn\tools\modules\ConversionEJB.jar;D:\workspaces\galc_svn\tools\modules\CommonBL.jar;D:\workspaces\galc_svn\tools\lib\junit\4.4\junit-4.4.jar;D:\workspaces\galc_svn\tools\lib\jintegra\2.7\lib\jintegra.jar;D:\workspaces\galc_svn\tools\modules\GALC_Core.jar;D:\workspaces\galc_svn\tools\lib\springframework\2.5\dist\spring.jar;D:\workspaces\galc_svn\tools\lib\springframework\2.5\dist\modules\spring-test.jar;D:\workspaces\galc_svn\tools\lib\commons\dbcp\1.2.2\commons-dbcp-1.2.2.jar;D:\workspaces\galc_svn\tools\lib\commons\dbcp\1.2.2\commons-pool-1.3.jar;D:\Program Files\JetBrains\IntelliJ IDEA 6.0\lib\idea_rt.jar"" com.intellij.rt.execution.application.AppMain com.intellij.rt.execution.junit.JUnitStarter -ideVersion5 com.honda.persistence.PersistenceManagerTest 2007-11-28 07:53:17,487 WARN  --> Could not obtain connection metadata org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class 'com.ibm.db2.jcc.DB2Driver' at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1136) at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:880) at org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider.getConnection(InjectedDataSourceConnectionProvider.java:47) at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:84) at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:2009) at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1292) at org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory(AnnotationConfiguration.java:915) at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:730) at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:127) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:221) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:251) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1390) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1359) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:540) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:485) at java.security.AccessController.doPrivileged(AccessController.java:197) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:455) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:407) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:735) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:618) at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:230) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.textui.TestRunner.doRun(TestRunner.java:116) at com.intellij.rt.execution.junit.IdeaTestRunner.doRun(IdeaTestRunner.java:65) at junit.textui.TestRunner.doRun(TestRunner.java:109) at com.intellij.rt.execution.junit.IdeaTestRunner.startRunnerWithArgs(IdeaTestRunner.java:24) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:118) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:618) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90) Caused by: java.lang.UnsatisfiedLinkError: com/ibm/jvm/Trace.initTrace([Ljava/lang/String;[Ljava/lang/String;)V at com.ibm.jvm.Trace.initializeTrace(Trace.java:96) at com.ibm.jvm.Trace.\(Trace.java:61) at java.lang.J9VMInternals.initializeImpl(Native Method) at java.lang.J9VMInternals.initialize(J9VMInternals.java:194) at java.lang.Class.forNameImpl(Native Method) at java.lang.Class.forName(Class.java:130) at com.ibm.db2.jcc.a.n.l(n.java:357) at com.ibm.db2.jcc.a.n.\(n.java:221) at java.lang.J9VMInternals.initializeImpl(Native Method) at java.lang.J9VMInternals.initialize(J9VMInternals.java:194) at com.ibm.db2.jcc.DB2Driver.\(DB2Driver.java:39) at java.lang.J9VMInternals.initializeImpl(Native Method) at java.lang.J9VMInternals.initialize(J9VMInternals.java:194) at java.lang.Class.forNameImpl(Native Method) at java.lang.Class.forName(Class.java:130) at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1130) ... 45 more 2007-11-28 07:53:17,597 INFO  --> Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory 2007-11-28 07:53:17,607 INFO  --> No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended) REMOTE_LOGGER_IP = localhost LogDispatcher: Log request dispatcher trying to connect to : localhost port 5555 2007-11-28 07:53:18.669 2007/11/28 07:53:18:579 I 6  PersistenceManager() called. sun.reflect.NativeConstructorAccessorImpl newInstance0 main ## default unknown 1196254398579 2007-11-28 07:53:18.689 2007/11/28 07:53:18:579 I 6  PersistenceManager() called. sun.reflect.NativeConstructorAccessorImpl newInstance0 main ## default unknown 1196254398579 2007-11-28 07:53:18,779 DEBUG --> No method-level `@Rollback` override: using default rollback [true] for test [testFindMissing]. 2007-11-28 07:53:18,840 DEBUG --> begin Cannot load JDBC driver class 'com.ibm.db2.jcc.DB2Driver' java.lang.UnsatisfiedLinkError: com/ibm/jvm/Trace.initTrace([Ljava/lang/String;[Ljava/lang/String;)V at com.ibm.jvm.Trace.initializeTrace(Trace.java:96) at com.ibm.jvm.Trace.\(Trace.java:61) at java.lang.J9VMInternals.initializeImpl(Native Method) at java.lang.J9VMInternals.initialize(J9VMInternals.java:194) at java.lang.Class.forNameImpl(Native Method) at java.lang.Class.forName(Class.java:130) at com.ibm.db2.jcc.a.n.l(n.java:357) at com.ibm.db2.jcc.a.n.\(n.java:221) at java.lang.J9VMInternals.initializeImpl(Native Method) at java.lang.J9VMInternals.initialize(J9VMInternals.java:194) at com.ibm.db2.jcc.DB2Driver.\(DB2Driver.java:39) at java.lang.J9VMInternals.initializeImpl(Native Method) at java.lang.J9VMInternals.initialize(J9VMInternals.java:194) at java.lang.Class.forNameImpl(Native Method) at java.lang.Class.forName(Class.java:130) at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1130) at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:880) at org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider.getConnection(InjectedDataSourceConnectionProvider.java:47) at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:84) at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:2009) at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1292) at org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory(AnnotationConfiguration.java:915) at org.hibernate.ejb.Ejb3Configuration.buildEntityManagerFactory(Ejb3Configuration.java:730) at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:127) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:221) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:251) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1390) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1359) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:540) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:485) at java.security.AccessController.doPrivileged(AccessController.java:197) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:455) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:407) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:735) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:618) at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:230) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.textui.TestRunner.doRun(TestRunner.java:116) at com.intellij.rt.execution.junit.IdeaTestRunner.doRun(IdeaTestRunner.java:65) at junit.textui.TestRunner.doRun(TestRunner.java:109) at com.intellij.rt.execution.junit.IdeaTestRunner.startRunnerWithArgs(IdeaTestRunner.java:24) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:118) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:618) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90) Cannot load JDBC driver class 'com.ibm.db2.jcc.DB2Driver' java.lang.NoClassDefFoundError: com.ibm.db2.jcc.DB2Driver (initialization failure) at java.lang.J9VMInternals.initialize(J9VMInternals.java:132) at java.lang.Class.forNameImpl(Native Method) at java.lang.Class.forName(Class.java:130) at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1130) at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:880) at org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider.getConnection(InjectedDataSourceConnectionProvider.java:47) at org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:423) at org.hibernate.jdbc.ConnectionManager.getConnection(ConnectionManager.java:144) at org.hibernate.jdbc.JDBCContext.connection(JDBCContext.java:119) at org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:57) at org.hibernate.impl.SessionImpl.beginTransaction(SessionImpl.java:1326) at org.hibernate.ejb.TransactionImpl.begin(TransactionImpl.java:38) at org.springframework.orm.jpa.DefaultJpaDialect.beginTransaction(DefaultJpaDialect.java:70) at org.springframework.orm.jpa.vendor.HibernateJpaDialect.beginTransaction(HibernateJpaDialect.java:52) at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:330) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:350) at org.springframework.test.AbstractTransactionalSpringContextTests.startNewTransaction(AbstractTransactionalSpringContextTests.java:387) at org.springframework.test.AbstractTransactionalSpringContextTests.onSetUp(AbstractTransactionalSpringContextTests.java:217) at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:103) at junit.framework.TestCase.runBare(TestCase.java:125) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.access$001(AbstractAnnotationAwareTransactionalTests.java:70) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests$1.run(AbstractAnnotationAwareTransactionalTests.java:186) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runTest(AbstractAnnotationAwareTransactionalTests.java:313) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runTestTimed(AbstractAnnotationAwareTransactionalTests.java:281) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runBare(AbstractAnnotationAwareTransactionalTests.java:182) at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:174) at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:255) at junit.fr2007-11-28 07:53:18,920 WARN  --> SQL Error: 0, SQLState: null 2007-11-28 07:53:18,920 ERROR --> Cannot load JDBC driver class 'com.ibm.db2.jcc.DB2Driver'  org.springframework.transaction.CannotCreateTransactionException: Could not open JPA EntityManager for transaction; nested exception is javax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCException: Cannot open connection at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:379) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:350) at org.springframework.test.AbstractTransactionalSpringContextTests.startNewTransaction(AbstractTransactionalSpringContextTests.java:387) at org.springframework.test.AbstractTransactionalSpringContextTests.onSetUp(AbstractTransactionalSpringContextTests.java:217) at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:103) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.access$001(AbstractAnnotationAwareTransactionalTests.java:70) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests$1.run(AbstractAnnotationAwareTransactionalTests.java:186) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runTest(AbstractAnnotationAwareTransactionalTests.java:313) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runTestTimed(AbstractAnnotationAwareTransactionalTests.java:281) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runBare(AbstractAnnotationAwareTransactionalTests.java:182) at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:174) at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:255) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90) Caused by: javax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCException: Cannot open connection at org.hibernate.ejb.AbstractEntityManagerImpl.throwPersistenceException(AbstractEntityManagerImpl.java:630) at org.hibernate.ejb.TransactionImpl.begin(TransactionImpl.java:41) at org.springframework.orm.jpa.DefaultJpaDialect.beginTransaction(DefaultJpaDialect.java:70) at org.springframework.orm.jpa.vendor.HibernateJpaDialect.beginTransaction(HibernateJpaDialect.java:52) at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:330) ... 30 more Caused by: org.hibernate.exception.GenericJDBCException: Cannot open connection at org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:103) at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:91) at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43) at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:29) at org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:426) at org.hibernate.jdbc.ConnectionManager.getConnection(ConnectionManager.java:144) at org.hibernate.jdbc.JDBCContext.connection(JDBCContext.java:119) at org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:57) at org.hibernate.impl.SessionImpl.beginTransaction(SessionImpl.java:1326) at org.hibernate.ejb.TransactionImpl.begin(TransactionImpl.java:38) ... 33 more Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class 'com.ibm.db2.jcc.DB2Driver' at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1136) at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:880) at org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider.getConnection(InjectedDataSourceConnectionProvider.java:47) at org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:423) ... 38 more Caused by: java.lang.NoClassDefFoundError: com.ibm.db2.jcc.DB2Driver (initialization failure) at java.lang.J9VMInternals.initialize(J9VMInternals.java:132) at java.lang.Class.forNameImpl(Native Method) at java.lang.Class.forName(Class.java:130) at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1130) ... 41 more  Process finished with exit code -1  ---  **Affects:** 2.0.7, 2.5 final  **Attachments:** - [OrmXmlOverridingShadowingClassLoader.java](https://jira.spring.io/secure/attachment/13159/OrmXmlOverridingShadowingClassLoader.java) (_1.91 kB_)  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","in: core,","spring-projects-issues","2007-11-27T23:52:14Z","2019-01-13T08:06:22Z"
"","8036","typo in code in spring-reference.pdf v 2.0.3., p. 209 [SPR-3352]","**[Jeffrey Breen](https://jira.spring.io/secure/ViewProfile.jspa?name=jeffreybreen)** opened **[SPR-3352](https://jira.spring.io/browse/SPR-3352?redirect=false)** and commented  Hi there:  It looks like someone's IDE didn't expand ""jt"" correctly in the code example at the top of p. 209 (section 11.2.7):  private JdbcTemplate jdbcTemplate; public void setDataSource(DataSource dataSource) { this.jdbcTemplate = new JdbcTemplate(dataSource); }  public List getList() { List rows = jt.queryForList(""select * from mytable""); return rows; }  ""jt"" in getList() should read ""jdbcTemplate"":  List rows = jdbcTemplate.queryForList(""select * from mytable"");  Thanks! Jeffrey   ---  **Affects:** 2.0.3","closed","type: bug,","spring-projects-issues","2007-04-07T05:40:29Z","2012-06-19T03:50:19Z"
"","7919","JdbcUtils.isNumeric disappeared [SPR-3233]","**[Jeff Lubetkin](https://jira.spring.io/secure/ViewProfile.jspa?name=jefflub)** opened **[SPR-3233](https://jira.spring.io/browse/SPR-3233?redirect=false)** and commented  In upgrading from 1.2 to 2.0.2, we discovered that the JdbcUtils.isNumeric method has disappeared.  Comment in the change log: ""removed unused 'countParameterPlaceholders' and 'isNumeric' methods"".  It may not have been called internally, but it was part of the public API and its removal should have at the very least been documented.  We were forced to copy the 1.2 code into our project to continue the upgrade.   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-03-05T13:24:57Z","2012-06-19T03:50:45Z"
"","8530","Velocity + Tiles Fix! [SPR-3850]","**[Jeff Johnston](https://jira.spring.io/secure/ViewProfile.jspa?name=jeff_johnston)** opened **[SPR-3850](https://jira.spring.io/browse/SPR-3850?redirect=false)** and commented  Right now Spring does not support using a Velocity view with Tiles. I came up with a solution and thought I would post the fix in case you wanted it. The idea is to extend the VelocityView class and use an adapter to bring in the Tiles view code needed. Seems to work quite well. I will upload as an attachment in this issue.  I also posted this on the forums in case anyone wanted to take advantage of the fix I made up. http://forum.springframework.org/showthread.php?t=30358   ---  **Attachments:** - [VelocityTilesView.java](https://jira.spring.io/secure/attachment/12890/VelocityTilesView.java) (_3.39 kB_)","closed","type: enhancement,","spring-projects-issues","2007-09-07T06:09:49Z","2012-06-19T09:37:41Z"
"","8498","The hasCachedContext(Object) method in the org.springframework.text.AbstractSpringContextTests class is improperly coded. [SPR-3818]","**[Jeff Greimann](https://jira.spring.io/secure/ViewProfile.jspa?name=javadev88)** opened **[SPR-3818](https://jira.spring.io/browse/SPR-3818?redirect=false)** and commented  The bug is in the org.springframework.text.AbstractSpringContextTests.hasCachedContext(Object) method.  Currently, it is coded as:      protected final boolean hasCachedContext(Object contextKey) {     	return contextKeyToContextMap.containsKey(contextKey);     }  However, all keys are converted to strings before being keyed into the contextKeyToContextMap. The correct code should involve converting the contextKey argument to a string within the containsKey() method call, as shown below:      protected final boolean hasCachedContext(Object contextKey) {     	return contextKeyToContextMap.containsKey(contextKeyString(contextKey));     }  I also found this bug in the spring framework 1.2.9 release as well.    ---  **Affects:** 2.0.6","closed","in: core,","spring-projects-issues","2007-08-30T00:42:43Z","2012-06-19T03:50:25Z"
"","8825","ReflectiveMethodInvocation constructor not available now [SPR-4147]","**[java2enterprise](https://jira.spring.io/secure/ViewProfile.jspa?name=java2enterprise)** opened **[SPR-4147](https://jira.spring.io/browse/SPR-4147?redirect=false)** and commented  The constructor of ReflectiveMethodInvocation in previous version is  public, but in 2.5 it has been changed to protected, but I have used this constructor in my application :(   Should it get back for compatibility?   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-21T14:12:41Z","2012-06-18T12:45:10Z"
"","8738","Class cast exception in AbstractBeanDefinition.getBeanClassName() [SPR-4059]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-4059](https://jira.spring.io/browse/SPR-4059?redirect=false)** and commented  This is the worst possible kind of bug report, and so I apologize in advance, but it has only appeared once in production and was not reproducible.   On top of that, the actual case that generates the error seems to be pretty much impossible.  The cast exception you see below, is in this Spring code:      /**      * Return the class name of the wrapped bean.      */     public String getBeanClassName() {     	if (this.beanClass instanceof Class) {     		return ((Class) this.beanClass).getName();     	}     	else {     		return (String) this.beanClass;     	}     }  As you can see the method checks if the field is a Class, and casts to it if it is.  However, in this case below, for some reason, it tried to cast it to a String even though it was a Class.   I don't know if this is some strange classloading issue, a JVM bug, or what, but I figured you would want to at least see it.  Stack trace:  ---  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityModel' defined in class path resource [applicationContext-siteresources.xml]: Initialization of bean failed; nested exception is java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.String Caused by: java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.String at org.springframework.beans.factory.support.AbstractBeanDefinition.getBeanClassName(AbstractBeanDefinition.java:311) at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:327) at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1066) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:349) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:270) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:881) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:829) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:424) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:270) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:229) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:733) at com.cargurus.site.interceptor.ModelInterceptor.intercept(ModelInterceptor.java:75)  ---  **Affects:** 2.0.5  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2007-11-06T23:07:34Z","2019-01-13T22:41:27Z"
"","8254","IllegalArgumentException running a JMX bean in JBoss using Spring's HibernateTransactionManager [SPR-3571]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-3571](https://jira.spring.io/browse/SPR-3571?redirect=false)** and commented  See this hibernate issue for the full issue history: http://opensource.atlassian.com/projects/hibernate/browse/HHH-2281  It seems that a number of people are having this issue with Spring JMX + Hibernate 3.2.1 or later.   Personally, it is blocking me from using the latest Hibernate release with Spring.  Unfortunately, despite the number of votes, it doesn't appear that the Hibernate folks are inclined to address the underlying problem.  Perhaps there is something that can be done on the Spring side instead?   ---  **Affects:** 2.0.5  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2007-06-09T04:18:20Z","2012-06-19T03:50:14Z"
"","7991","BeanFactoryPostProcessor for batch creating aliases [SPR-3306]","**[Jasper Rosenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=perfnorm)** opened **[SPR-3306](https://jira.spring.io/browse/SPR-3306?redirect=false)** and commented  I was aliasing all of my DAOs from BlahDAOHibernate to BlahDAO and realized I could just write a BeanFactoryPostProcessor to do it for me.  I thought I would share in case anyone else might find it helpful.  Basically it will look for beans and aliases that match a given pattern in the current bean factory, and then when it finds matches create an alias according to the provided pattern (assuming the new alias isn't already present as a bean name or alias.)  For example:                                 ---  **Affects:** 2.0.1  **Attachments:** - [BeanAliasConfigurer.java](https://jira.spring.io/secure/attachment/12501/BeanAliasConfigurer.java) (_2.59 kB_)","closed","type: enhancement,","spring-projects-issues","2007-03-27T00:54:24Z","2012-06-19T09:37:31Z"
"","8267","TransactionRolledBackException for no obvious reason [SPR-3585]","**[Jason Norman](https://jira.spring.io/secure/ViewProfile.jspa?name=jasonnorman)** opened **[SPR-3585](https://jira.spring.io/browse/SPR-3585?redirect=false)** and commented  JMS seems to be working properly, but a weblogic.jms.common.TransactionRolledBackException is thrown repeatedly, based on the value of the Weblogic connection factory timeout parameter. If the parameter is set to 60 seconds, we see the following stack trace every 60 seconds.  ERROR|2007-06-14 08:47:59|DefaultMessageListenerContainer102|Setup of JMS message listener invoker failed - trying to recover weblogic.jms.common.TransactionRolledBackException: at weblogic.jms.backend.BEConsumer.expireTimeout(BEConsumer.java:1769) at weblogic.jms.backend.BEXATranEntryBlockingConsumer.startRollback(BEXATranEntryBlockingConsumer.java:82) at weblogic.jms.backend.BEXAResource.rollback(BEXAResource.java:1267) at weblogic.transaction.internal.XAServerResourceInfo.rollback(XAServerResourceInfo.java:1317) at weblogic.transaction.internal.XAServerResourceInfo.rollback(XAServerResourceInfo.java:650) at weblogic.transaction.internal.ServerSCInfo.startRollback(ServerSCInfo.java:729) at weblogic.transaction.internal.ServerTransactionImpl.localRollback(ServerTransactionImpl.java:1829) at weblogic.transaction.internal.ServerTransactionImpl.globalRollback(ServerTransactionImpl.java:2511) at weblogic.transaction.internal.TransactionImpl$1.execute(TransactionImpl.java:1759) at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:219) at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:178) INFO |2007-06-14 08:47:59|DefaultMessageListenerContainer102|Successfully refreshed JMS Connection  We have the following as our Spring config:  \ \ 	\ 		\ 			\ 				\classpath:myhealthcommon.properties\ 				\classpath:myhealthweb.properties\ 				\classpath:myhealthadmin.properties\ 			\ 		\ 	\ 	\ 	\ 		\ 			\${url.auditService}\ 		\ 	\ 	\ 	\ 		\ 		\ 		\ 		\ 		\ 		\ 			\-1\ 		\ 	\ 	\ 		\ 			\MyHealthQueue\ 		\ 	\ 	\ 		\ 			\ 		\ 		\ 			\ 		\ 		\ 			\false\ 		\ 		\ 			\20000\ 		\ 	\ 	\ 	\ 		\ 			\MyHealthJmsConnectionFactory\ 		\ 	\ 	\ 		\ 			\ 		\ 	\ \  And the following as our Java code.  public void onMessage(Message message, Session session) { if (message instanceof ObjectMessage) { try { AuditEvent event = (AuditEvent)((ObjectMessage)message).getObject(); getHttpClient().getPostResponse(event.toXml()); session.commit(); } catch (Exception ex) { logger.error(""Unable to post event to audit service"", ex); try { session.rollback(); } catch (JMSException e) { logger.error(""Unable to rollback"", e); } } } else { throw new IllegalArgumentException(""Message must be of type TextMessage""); } }   ---  **Affects:** 2.0.5","closed","in: messaging,","spring-projects-issues","2007-06-14T00:51:25Z","2019-01-11T19:09:54Z"
"","8814","JndiTemplate could promote default properties to first-level before initialization [SPR-4135]","**[Jared Stehler](https://jira.spring.io/secure/ViewProfile.jspa?name=jstehler)** opened **[SPR-4135](https://jira.spring.io/browse/SPR-4135?redirect=false)** and commented  I recently debugged an issue involving the JndiTemplate and the java.util.Properties object, which I think warrants either a new minor enhancement in the jndiTemplate, or some javadoc comments alerting clients to the dangers of using default properties when trying to initialize an InitialContext.  I have a JndiConnectionRef object, with a static Properties object loaded from a file on startup, containing all of the special CORBA properties required for a Sun JVM to interact successfully with an IBM JVM, except for the actual provider URL, which differs for each object.  In the object's constructor, I was creating a new Properties object, using the Properties( Properties defaults ) constructor, which I saw was setting default properties for this object, then adding my additional providerURL property and sending it off to the JndiTemplate for initialization.  The problem is that while JndiTemplate takes a java.util.Properties object for configuration, all of the implementations of the InitialContext, NamingManager deal with Hashtable, the superclass of Properties, using Hashtable.get() to retrieve environment values.  This bypasses defaults in the properties object, since all of the code to failover to default values exists in Properties.getProperty(), and java.util.Properties does not override Hashtable.get for some reason.  Now I solved this issue by changing my code to create a new Properties object and then call putAll( myDefaultProperties ), but it seems like I could have avoided my need for debugging this issue with either a warning in the jndiTemplate constructor / setEnvironment method javadocs indicating that defaults on the given Properties object will be ignored, or perhaps some logic in setEnvironment which 'promotes' all default properties which do not have an explicitly defined value to 'top-level' values before calling new InitialContext(getEnvironment()).  Do you think this is the appropriate place to post this request, or should I post to bugs.sun.com requesting they override Hashtable.get() in java.util.Properties to properly delegate to the logic in getProperty()?   ---  **Affects:** 2.0.7  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-11-20T02:15:28Z","2012-06-19T03:46:58Z"
"","8797","PROPAGATION_REQUIRES_NEW fails on JBoss 4.2.1 when using Hibernate connection release mode ""on_close"" [SPR-4118]","**[Jansie Merlin](https://jira.spring.io/secure/ViewProfile.jspa?name=jansiemerlin@gmail.com)** opened **[SPR-4118](https://jira.spring.io/browse/SPR-4118?redirect=false)** and commented  My Issue is same as the one explained in the below link.  http://opensource.atlassian.com/projects/spring/browse/SPR-4077  But my use gets resolved after adding the below param to the Spring Config file  \  \after_statement\  and \ \ \ to transactionManager bean.  If  SYNCHRONIZATION_NEVER is used the below exception is thrown which getCurrentSession is invoked. INFO  [HibernateUtil] getCurrentSession in data DS.. 2007-11-17 03:05:08,231 DEBUG [org.springframework.beans.factory.support.DefaultListableBeanFactory] Returning cached instance of singleton bean 'LoadDataSessionFactory' 2007-11-17 03:05:08,231 DEBUG [org.springframework.orm.hibernate3.SessionFactoryUtils] Opening Hibernate Session 2007-11-17 03:05:08,231 DEBUG [org.hibernate.impl.SessionImpl] opened session at timestamp: 11952867082 2007-11-17 03:05:08,231 DEBUG [org.springframework.orm.hibernate3.SessionFactoryUtils] Closing Hibernate Session 2007-11-17 03:05:08,231 ERROR [HibernateUtil] Error in getCurrentSession: org.hibernate.HibernateException: No Hibernate Session bound to thread, and configuration does not allow creation of non-transactional one here at org.springframework.orm.hibernate3.AbstractSessionFactoryBean$TransactionAwareInvocationHandler.invoke(AbstractSessionFactoryBean.java:296) at $Proxy61.getCurrentSession(Unknown Source) at HibernateUtil.getCurrentSession(LoadDataHibernateUtil.java:74) .................  Please Helpout...... Thanks in Advance for Springs Support  Is this the only solution for this issue? Or do we have any fix versions that spring is going to release?.  We are using Spring.jar 2.0.2  ---  **Issue Links:** - #8755 PROPAGATION_REQUIRES_NEW fails on JBoss 4.2.1 when using Hibernate connection release mode ""on_close"" (_**""duplicates""**_) - #8801 Propagation REQUIRES_NEW fails on JBoss Application Server 4.2.1 when keeping a JDBC Connection handle","closed","status: duplicate,","spring-projects-issues","2007-11-16T18:13:16Z","2019-01-13T22:41:16Z"
"","8607","JSON, JSON-RPC, XML-RPC remote interface [SPR-3927]","**[Janos Haber](https://jira.spring.io/secure/ViewProfile.jspa?name=b0c1)** opened **[SPR-3927](https://jira.spring.io/browse/SPR-3927?redirect=false)** and commented  XML-RPC/JSON-RPC and JSON remoting (maybe with annotation)   ---  2 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-09-26T06:58:43Z","2012-06-19T09:36:19Z"
"","8606","Introduce annotation-based configuration for remoting [SPR-3926]","**[Janos Haber](https://jira.spring.io/secure/ViewProfile.jspa?name=b0c1)** opened **[SPR-3926](https://jira.spring.io/browse/SPR-3926?redirect=false)** and commented  Please introduce annotation-based configuration for remoting -- for example:  ``` @Service @ExportAs({ServiceType.HESSIAN, ServiceType.BURLAP}) public class MyService {     // ...  } ```  or another way.  ---  **Attachments:** - [SPR-3926.war](https://jira.spring.io/secure/attachment/15183/SPR-3926.war) (_3.27 MB_) - [SPR-3926-src.zip](https://jira.spring.io/secure/attachment/15187/SPR-3926-src.zip) (_6.63 kB_)  **Issue Links:** - #17238 Add support for automatic remote export of services using Spring Remoting  17 votes, 19 watchers","closed","has: votes-jira,","spring-projects-issues","2007-09-26T06:57:43Z","2019-01-11T21:10:27Z"
"","8132","AbstractFormController: binding of boolean inside a list does not work anymore in spring 2.0.4. in opposite to 2.0.3 [SPR-3449]","**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-3449](https://jira.spring.io/browse/SPR-3449?redirect=false)** and commented  the binding of a list does not work in spring 2.0.4. The error is reproducable with the code below (including pom maven descriptor). The same code DOES work with spring 2.0.3 (you just need to change the pom if you use maven)  // imports removed public class SimpleControllerTest extends TestCase { private SimpleController	controller;      public void testCorrectModel ( ) throws Exception {     	controller = new SimpleController();     	controller.setCommandClass(ListForm.class);     	MockHttpServletRequest req = new MockHttpServletRequest(""POST"", ""/myurl"");     	MockHttpServletResponse res = new MockHttpServletResponse();     	req.addParameter(""oks[0].ok"", ""true"");     	ModelAndView mav = controller.handleRequest(req, res);     	ListForm form = (ListForm) mav.getModelMap().get(""command"");     	Boolean ok = form.getOks().get(0).getOk();     	assertNotNull(ok);     }  }  // imports removed public class SimpleController extends AbstractFormController { protected ModelAndView processFormSubmission ( HttpServletRequest req, HttpServletResponse resp, Object command, BindException err ) throws Exception { ModelAndView mav = new ModelAndView(); mav.addObject(""command"", command); return mav; }      @Override     protected ModelAndView showForm ( HttpServletRequest arg0, HttpServletResponse arg1, BindException arg2 ) throws Exception {     	return null;     }  }  // imports removed public class Ok { Boolean ok; public Boolean getOk () { return ok; }      public void setOk ( Boolean ok ) {     	this.ok = ok;     }	  }  // imports removed public class ListForm { private List\ oks = new ArrayList\();      public ListForm () {     	for( int index = 0; index < 5; index++)	{     		Ok ok = new Ok();     		oks.add( ok );     	}     }          public List getOks ( ) {     	return oks;     }          public void setOks ( List oks ) {     	this.oks = oks;     }  }  \ \ \4.0.0\ \test\ \test\ \jar\ \1.0-SNAPSHOT\ \ \ \ \maven-compiler-plugin\ \ \1.5\ \1.5\ \ \ \ \ \ \ \org.springframework\ \spring\ \2.0.4\ \ \ \ \junit\ \junit\ \3.8.1\ \test\ \		\ \org.springframework\ \spring-mock\ \2.0.4\ \ \test\ \ \ \  ---  **Affects:** 2.0.4  **Issue Links:** - #8043 Error in BeanWrapperImpl.setPropertyValue for nested paths for primitive wrapper types such as integer (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2007-05-03T01:21:51Z","2019-01-12T16:51:32Z"
"","8315","Add the possiblility to use comma separated paths in the ResourceArrayPropertyEditor [SPR-3634]","**[Jan Tietjens](https://jira.spring.io/secure/ViewProfile.jspa?name=jtietjen)** opened **[SPR-3634](https://jira.spring.io/browse/SPR-3634?redirect=false)** and commented  The ResourceArrayPropertyEditor can handle one single path as argument.  It would be nice to have a similar behavior like for the StringArrayPropertyEditor. The StringArrayPropertyEditor allows the definition of multiple comma separated paths.  A fix for that issue is provided as patch:  --- spring/src/org/springframework/core/io/support/ResourceArrayPropertyEditor.java     (revision 1.7) +++ spring/src/org/springframework/core/io/support/ResourceArrayPropertyEditor.java     Fri Jun 29 14:26:45 CEST 2007 @@ -26,6 +26,7 @@  import org.springframework.core.io.Resource; import org.springframework.util.SystemPropertyUtils; +import org.springframework.util.StringUtils;  /** * Editor for {`@link` org.springframework.core.io.Resource} arrays, to   @@ -49,7 +50,11 @@ * `@see` System#getProperty(String)   */   public class ResourceArrayPropertyEditor extends PropertyEditorSupport {  -   +         /**  +         * Default separator for splitting a String: a comma ("","")  +         */  +         public static final String DEFAULT_SEPARATOR = "","";  +         private final String separator;       private final ResourcePatternResolver resourcePatternResolver;  @@ -60,6 +65,7 @@ */ public ResourceArrayPropertyEditor() { this.resourcePatternResolver = new PathMatchingResourcePatternResolver(); +                separator = DEFAULT_SEPARATOR;       }       /**  @@ -68,17 +74,45 @@ */ public ResourceArrayPropertyEditor(ResourcePatternResolver resourcePatternResolver) { this.resourcePatternResolver = resourcePatternResolver; +              separator = DEFAULT_SEPARATOR;     }  +         /**  +         * Create a new ResourceArrayPropertyEditor with the given Separator.  +         * @param separator the separator to use for splitting a {@link String}  +         */  +         public ResourceArrayPropertyEditor(String separator) {  +         this.resourcePatternResolver = new PathMatchingResourcePatternResolver();  +         this.separator = separator;  +           }                /**  +         * Create a new ResourceArrayPropertyEditor with the given ResourcePatternResolver and Separator.  +         * @param resourcePatternResolver the ResourcePatternResolver to use  +         * @param separator the separator to use for splitting a {@link String}  +         */  +         public ResourceArrayPropertyEditor(ResourcePatternResolver resourcePatternResolver, String separator) {  +         this.resourcePatternResolver = resourcePatternResolver;  +         this.separator = separator;  +         }  +   +         /**        * Treat the given text as location pattern and convert it to a Resource array.        */       public void setAsText(String text) {               String pattern = resolvePath(text).trim();  +         String[] array = StringUtils.delimitedListToStringArray(text, this.separator);  +         try {  -         setValue(this.resourcePatternResolver.getResources(pattern));  +         ArrayList listOfResources = new ArrayList();  +         for (int i = 0; i < array.length; i++) {  +         String resourcePattern = array[i].trim();  +         Resource[] resources = this.resourcePatternResolver.getResources(resourcePattern);  +         listOfResources.addAll(Arrays.asList(resources));  -         }  +         }  +   +         setValue(listOfResources.toArray(new Resource[]{}));  +         }       catch (IOException ex) {               throw new IllegalArgumentException(                   ""Could not resolve resource location pattern ["" + pattern + ""]: "" + ex.getMessage());    ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-06-28T23:31:22Z","2012-06-19T09:37:24Z"
"","8473","PathMatchingResourcePatternResolver fails to find resources by wildcard from jar in OC4j [SPR-3793]","**[Jan Novotný](https://jira.spring.io/secure/ViewProfile.jspa?name=novoj)** opened **[SPR-3793](https://jira.spring.io/browse/SPR-3793?redirect=false)** and commented  I have similar problems as these reposted in issue #5393 and issue #6049 with that exception, that I've found out where the problem lies. Look at these lines of code:  PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(resourceLoader); resources = resolver.getResources(""classpath:/META-INF/spring/*"");  Code returns list of resources in folder /META-INF/spring - it works well in tests ant in Tomcat. When moving to OC4J it fails. The problem lies at:  PathMatchingResourcePatternResolver.isJarResource(Resource resource) and corresponding ResourceUtils.isJarURL(URL url) - line  OC4J unexpectedly sets to all resources in jars protocol ""code-source"", that is not recognized by this method properly. It seems it is another Oracle violation of standards.  When I modify isJarResource method to this:  protected boolean isJarResource(Resource resource) throws IOException { URL url = resource.getURL(); if (url.getProtocol().equals(""code-source"") && url.getPath().indexOf("".jar!"") > -1) return true; return super.isJarResource(resource); }  Although it makes all this working in OC4J, I dont know whether this is the best solution possible.  ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-08-22T16:58:43Z","2019-01-11T19:34:11Z"
"","8610","Shared EntityManager within the same JTA transaction across Spring transaction boundaries [SPR-3930]","**[James Olsen](https://jira.spring.io/secure/ViewProfile.jspa?name=jim_b_o)** opened **[SPR-3930](https://jira.spring.io/browse/SPR-3930?redirect=false)** and commented  I'm using Spring (currently 2.0.6), Hibernate 3.2.3 and Hibernate-EntityManager 3.2.1 in WLS 9.2 MP2. The aim is to use Hibernate's JPA functionality with Spring controlling EntityManager scope.  I was hoping/assuming it would use a single shared EntityManager per JTA transaction however this is not the case. It associates a new EntityManager with the transaction if there isn't one there already then disassociates it during the beforeCompletion() TransactionSynchronization callback. This callback is being invoked by Spring as the thread of execution exits the Spring AOP transaction wrapper. Hence a subsequent call into another transactional method gets a new EntityManager despite the fact that the call is part of the same JTA transaction.  All the EntityManagers are still 'live' and contain any changed data but these changes aren't visible across the EntityManagers so they are inconsistent. I can workaround this by adding my own TransactionSynchronization which forces the EntityManager to flush its changes to the database during the beforeCompletion() call so that they will be visible to any other EntityManagers participating in the same JTA transaction. However this has a serious performance impact. Flushing an EntityManager is expensive and should be done as infrequently as possible. Also each EntityManager uses its own level 1 cache so has to re-read data from the database which might otherwise have already been available to it.  ---  **Affects:** 2.0.6  **Attachments:** - [spring_tx_code.pdf](https://jira.spring.io/secure/attachment/12954/spring_tx_code.pdf) (_41.81 kB_) - [TestCase.zip](https://jira.spring.io/secure/attachment/12953/TestCase.zip) (_74.40 kB_)  **Issue Links:** - #6926 JPA support with EJB 2.1 CMT","closed","type: enhancement,","spring-projects-issues","2007-09-26T22:43:18Z","2019-01-11T21:10:08Z"
"","8286","WebLogicJtaTransactionManager calls TransactionSynchronizations prematurely [SPR-3604]","**[James Olsen](https://jira.spring.io/secure/ViewProfile.jspa?name=jim_b_o)** opened **[SPR-3604](https://jira.spring.io/browse/SPR-3604?redirect=false)** and commented  When using WebLogicJtaTransactionManager, TransactionSynchronizations registered via TransactionSynchronizationManager.registerSynchronization() are invoked at EAR call boundaries (or something similar) not on completion of the overall transaction.  E.g. if Bean A calls Bean B several times and the first call to Bean B registers a sync, that sync is invoked as soon as that call completes, even though there is a transaction spanning all the calls.  It's as if the Bean B methods are marked as REQUIRES_NEW,  but they're not!  As I'm not actually using any of the extra functionality supported by WebLogicJtaTransactionManager, I have switched to use the standard JtaTransactionManager with which everything works fine.   ---  **Affects:** 2.0.6","closed","in: data,","spring-projects-issues","2007-06-20T02:25:37Z","2019-01-11T18:28:42Z"
"","8028","FilterChainFactoryBean [SPR-3344]","**[James Carman](https://jira.spring.io/secure/ViewProfile.jspa?name=jwcarman)** opened **[SPR-3344](https://jira.spring.io/browse/SPR-3344?redirect=false)** and commented  I have implemented a ""filter chain"" factory (similar to the PiplineFactory in HiveMind) bean for Spring.  Basically, it's a factory which allows you to specify a service interface, a list of filters, and a terminus. Then, it will create a series of JDK dynamic proxies (could easily use CGLIB of course) which makes sure all method calls on the outer proxy go through the filters and eventually terminate at the terminus bean. The filters don't have to adhere to any special interface (they can of course), so I guess you could say it supports ""duck typing"" in a way. They just need to provide methods which have the same signature except they've got an additional parameter tacked onto the end of the same type as the service interface (represents the ""next"" guy in the chain).  Would you guys have any use for something like this.   ---  **Attachments:** - [FilterChainFactoryBean.java](https://jira.spring.io/secure/attachment/12518/FilterChainFactoryBean.java) (_6.81 kB_)","closed","type: enhancement,","spring-projects-issues","2007-04-05T01:12:07Z","2012-06-19T09:37:41Z"
"","8104","scope proxied beans do not support name aliases [SPR-3421]","**[Jacques Morel](https://jira.spring.io/secure/ViewProfile.jspa?name=jacmorel)** opened **[SPR-3421](https://jira.spring.io/browse/SPR-3421?redirect=false)** and commented  PROBLEM  ---  \ \ \  will not bind the myname bean to othername as one would think.  ONE LINE PATCH  ---  in ScopedProxyBeanDefinitionDecorator.java change the last line of decorate() from return new BeanDefinitionHolder(scopedProxyDefinition, originalBeanName); to return new BeanDefinitionHolder(scopedProxyDefinition, originalBeanName, definition.getAliases());  ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-04-26T15:31:13Z","2019-01-13T22:43:27Z"
"","8083","ScopedObject.getTargetObject() returns the proxy instead of the target object [SPR-3400]","**[Jacques Morel](https://jira.spring.io/secure/ViewProfile.jspa?name=jacmorel)** opened **[SPR-3400](https://jira.spring.io/browse/SPR-3400?redirect=false)** and commented  I am trying to get the target object proxied through a  by calling  ((ScopedObject)proxyBean).getTargetObject()  Unfortunately the proxy handler Cglib2AopProxy does not differentiate methods from ScopedObject like getTargetObject from other methods and substitutes the target object returned by the proxy!   ---  **Affects:** 2.0.4  **Attachments:** - [ScopedObjectGetTargetObject.patch](https://jira.spring.io/secure/attachment/12553/ScopedObjectGetTargetObject.patch) (_8.10 kB_) - [springScopedObjectBug.zip](https://jira.spring.io/secure/attachment/12552/springScopedObjectBug.zip) (_2.27 MB_)","closed","in: core,","spring-projects-issues","2007-04-20T19:40:39Z","2012-06-19T03:50:50Z"
"","8061","Clarify difference between implicit and explicit factory beans [SPR-3378]","**[Iwein Fuld](https://jira.spring.io/secure/ViewProfile.jspa?name=iwein)** opened **[SPR-3378](https://jira.spring.io/browse/SPR-3378?redirect=false)** and commented  I have taken part in some confusion on http://www.javablackbelt.com/QuestionDetail.wwa?qidk=16815 referring to http://www.springframework.org/docs/reference/beans.html chapter 3.2.3.2.2 and 3.2.3.2.3.  I think it would be nice to make a more clear distinction between implicit and explicit FactoryBeans. There are two different underlying patterns, designating both beans FactoryBean and using factory-method for both you creates confusion. In essence this is probably just the existing confusion between Factory Method and Factory.  What I would like to see is a clear distinction between an implicit FactoryBean that is a bean that returns products from a static method when getBean() is invoked and an explicit FactoryBean that is a bean in the application context that exposes non static factory-methods for instantiation of other Beans in the context.   ---  **Affects:** 2.0.4","closed","type: documentation,","spring-projects-issues","2007-04-16T19:38:30Z","2012-06-19T03:50:35Z"
"","8247","SimpleThrowawayClassLoader used during @Entity scanning causes IllegalAccessError [SPR-3564]","**[Ismael Juma](https://jira.spring.io/secure/ViewProfile.jspa?name=ijuma)** opened **[SPR-3564](https://jira.spring.io/browse/SPR-3564?redirect=false)** and commented  During the scanning of classes to find entities annotated with `@Entity`, an IllegalAccessError can be thrown. After some analysis, it seems to me that the Sun JDK generates some classes after some reflection methods are used a lot (for performance reasons). When the SimpleThrowawayClassLoader tries to load this class, the IllegalAccessError is thrown. Adding ""this.excludedPackages.add(""sun.reflect"");"" to the constructor of OverridingClassLoader fixes the problem. It doesn't look like a clean solution, but I am unsure if there's a better one.  As a workaround for now, is there an easy way to configure the SimpleThrowawayClassLoader used in SpringPersistenceUnitInfo to exclude these classes from the application context?  The stacktrace follows:  Caused by: java.lang.IllegalAccessError: class sun.reflect.GeneratedConstructorAccessor10 cannot access its superclass sun.reflect.ConstructorAccessorImpl at sun.misc.Unsafe.defineClass(Native Method) at sun.reflect.ClassDefiner.defineClass(ClassDefiner.java:45) at sun.reflect.MethodAccessorGenerator$1.run(MethodAccessorGenerator.java:381) at java.security.AccessController.doPrivileged(Native Method) at sun.reflect.MethodAccessorGenerator.generate(MethodAccessorGenerator.java:377) at sun.reflect.MethodAccessorGenerator.generateConstructor(MethodAccessorGenerator.java:76) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:30) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:513) at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:588) at sun.reflect.annotation.AnnotationParser.annotationForMap(AnnotationParser.java:239) at sun.reflect.annotation.AnnotationParser.parseAnnotation(AnnotationParser.java:229) at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:69) at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:52) at java.lang.Class.initAnnotationsIfNecessary(Class.java:3072) at java.lang.Class.getAnnotation(Class.java:3029) at java.lang.Class.isAnnotationPresent(Class.java:3042) at oracle.toplink.essentials.ejb.cmp3.persistence.PersistenceUnitProcessor.isEntity(PersistenceUnitProcessor.java:337) at oracle.toplink.essentials.ejb.cmp3.persistence.PersistenceUnitProcessor.isEntity(PersistenceUnitProcessor.java:329) at oracle.toplink.essentials.ejb.cmp3.persistence.PersistenceUnitProcessor.getEntityClassNamesFromURL(PersistenceUnitProcessor.java:302) at oracle.toplink.essentials.internal.ejb.cmp3.metadata.MetadataProcessor.buildEntityClassSetFromAnnotations(MetadataProcessor.java:502) at oracle.toplink.essentials.internal.ejb.cmp3.metadata.MetadataProcessor.buildEntityList(MetadataProcessor.java:463) at oracle.toplink.essentials.ejb.cmp3.persistence.PersistenceUnitProcessor.processORMetadata(PersistenceUnitProcessor.java:362) at oracle.toplink.essentials.internal.ejb.cmp3.EntityManagerSetupImpl.predeploy(EntityManagerSetupImpl.java:600) at oracle.toplink.essentials.ejb.cmp3.EntityManagerFactoryProvider.createContainerEntityManagerFactory(EntityManagerFactoryProvider.java:194) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:218) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:251) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1202) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1172) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:428) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:261) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:109) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1100) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:862) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:424) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:261) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:109) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1100) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:862) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:424) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:215) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:127) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1100) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:862) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:424) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:87) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:96) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:83) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:66) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:296) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:315) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1181) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:428) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:733) at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:511) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:337) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:91) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:75)   ---  **Affects:** 2.0.5","closed","in: core,","spring-projects-issues","2007-06-07T11:32:30Z","2012-06-19T03:50:14Z"
"","8706","Validation of spring-jee-2.0.xsd fails [SPR-4027]","**[Isai Oliva Romo](https://jira.spring.io/secure/ViewProfile.jspa?name=ioliva)** opened **[SPR-4027](https://jira.spring.io/browse/SPR-4027?redirect=false)** and commented  When application context is starting using jee namespace fails bacause import in the xsd in beans and tool doesn't have schema location.  spring-jee-2.0.xsd is not valid schema.   ---  **Affects:** 2.5 RC1  **Attachments:** - [2.JPG](https://jira.spring.io/secure/attachment/13071/2.JPG) (_22.12 kB_) - [screenshot-1.jpg](https://jira.spring.io/secure/attachment/13070/screenshot-1.jpg) (_18.75 kB_)","closed","in: core,","spring-projects-issues","2007-10-31T12:39:20Z","2012-06-19T03:47:13Z"
"","8619","Setting locale in DispatcherServlet is too late in some cases: LocaleChangeFilter is needed [SPR-3939]","**[Ilya Boyandin](https://jira.spring.io/secure/ViewProfile.jspa?name=ilyabo)** opened **[SPR-3939](https://jira.spring.io/browse/SPR-3939?redirect=false)** and commented  There are cases in that locale must be resolved and set in the very beginning of the filter chain processing. For instance, when using Acegi Security. Acegi throws exceptions when user enters incorrect username and password and messages in these exceptions are displayed in the view, but they cannot be localized because the locale is not set yet to the moment exceptions are thrown (for details see [SEC-499](https://jira.spring.io/browse/SEC-499) and http://forum.springframework.org/showthread.php?t=30098&highlight=locale).  Implementing a filter that resolves locale and sets it in LocaleContextHolder and putting it at the start of the filter chain solves the problem.   ---  **Affects:** 2.0.7, 2.5.1, 3.0 M2  **Attachments:** - [LocaleChangeFilter.java](https://jira.spring.io/secure/attachment/12970/LocaleChangeFilter.java) (_2.54 kB_)  2 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2007-09-28T21:59:37Z","2019-01-12T02:38:51Z"
"","8204","breaks custom aspects [SPR-3521]","**[Ilya Agoshkov](https://jira.spring.io/secure/ViewProfile.jspa?name=agoshkoviv)** opened **[SPR-3521](https://jira.spring.io/browse/SPR-3521?redirect=false)** and commented  I have a very simple custom aspect:  /** * Test aspect.  * `@author` Iliya Agoshkov   */   public aspect SimpleAspect  {    private final Log log = LogFactory.getLog(""mylog"");    private String test;    public pointcut somePointcut() : call(* Integer.*(..));    before() : somePointcut() {   log.info(test + ""Using Integers!"");   }    public void setTest(final String test) {   this.test = test;   }  }  and i define the following bean to inject dependencies:           	     		TEST:      	       this way it works fine.  But when I add    to my beans definitions file, then the following exception is thrown when initalizing context:      [junit] Caused by: java.lang.IllegalArgumentException: error at ::0 can't find referenced pointcut somePointcut     [junit] at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:315)     [junit] at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:189)  ... [junit] at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:733) [junit] at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:511) [junit] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:337) [junit] at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:229) [junit] TEST test.SimpleTest FAILED   ---  **Affects:** 2.0.5","closed","in: core,","spring-projects-issues","2007-05-25T00:12:15Z","2012-06-19T03:50:20Z"
"","8555","NotificationPublisherAware not supported for standard MBeans [SPR-3875]","**[Ian Orford](https://jira.spring.io/secure/ViewProfile.jspa?name=orfordi)** opened **[SPR-3875](https://jira.spring.io/browse/SPR-3875?redirect=false)** and commented  I'm no JMX expert, so this may be user error, but found similar reports of this in forums.  I'm trying to use Spring's JMX notification support. Have implemented NotificationPublisherAware, but setNotificationPublisher(...) method never gets called, hence the class has no publisher to which to send notifications.   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-09-13T20:36:54Z","2015-09-22T17:34:39Z"
"","8105","Ensure org.springframework.web.servlet.view.xslt.XsltView is backward compatible with Servlet 2.3 [SPR-3422]","**[Ian Lim](https://jira.spring.io/secure/ViewProfile.jspa?name=mallim)** opened **[SPR-3422](https://jira.spring.io/browse/SPR-3422?redirect=false)** and commented  Encounter  a NoSuchMethodError for ""setEncodingCharacter"" from javax.servlet.http.HttpServletResponse on  when I use :  \ \\org.springframework.web.servlet.view.xslt .XsltView\\ \  \ \  \  Current workaround use is to write a custom XsltView which extends from org.springframework.web.servlet.view.xslt .XsltView which contains just this method :      protected void configureResponse(Map model, HttpServletResponse response, Transformer transformer) {         response.setContentType(transformer.getOutputProperty(OutputKeys.MEDIA_TYPE));     }    ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-04-26T18:09:35Z","2012-06-19T03:50:43Z"
"","8174","does not work in the web application [SPR-3491]","**[Hideyuki Suzumi](https://jira.spring.io/secure/ViewProfile.jspa?name=slopetown)** opened **[SPR-3491](https://jira.spring.io/browse/SPR-3491?redirect=false)** and commented  ClassReader cannot load class included in spring.jar.  See: http://forum.springframework.org/showthread.php?t=38729   ---  **Affects:** 2.1 M1","closed","in: core,","spring-projects-issues","2007-05-16T12:07:21Z","2012-06-19T03:50:15Z"
"","8150","UnsupportedClassVersionError - when using velocity view and VelocityToolboxView with Java 1.3 [SPR-3467]","**[Henrique Santos](https://jira.spring.io/secure/ViewProfile.jspa?name=hsantos)** opened **[SPR-3467](https://jira.spring.io/browse/SPR-3467?redirect=false)** and commented  when using velocity as a view technology and using velocitytoolboxView as below (views.properties)  genericForm.(class)=org.springframework.web.servlet.view.velocity.VelocityToolboxView genericForm.toolboxConfigLocation=/WEB-INF/velocity/toolbox.xml genericForm.exposeSpringMacroHelpers=true genericForm.exposeSessionAttributes=true genericForm.url=/genericForm.vm  it prints out the exception below :  i´m using velocity-2.5.jar and velocity-tools-view-1.3.jar from /lib/velocity. The problem is in velocity-tools-view-1.3.jar which is a Java 1.4, if i change to velocity-tools-view-1.2.jar (which i get from a spring 1.2.8) it works.  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'genericForm': Instantiation of bean failed; nested exception is java.lang.UnsupportedClassVersionError: org/apache/velocity/tools/view/ToolboxManager (Unsupported major.minor version 48.0) Caused by: java.lang.UnsupportedClassVersionError: org/apache/velocity/tools/view/ToolboxManager (Unsupported major.minor version 48.0) at java.lang.ClassLoader.defineClass0(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:488) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:106) at java.net.URLClassLoader.defineClass(URLClassLoader.java:243) at java.net.URLClassLoader.access$100(URLClassLoader.java:51) at java.net.URLClassLoader$1.run(URLClassLoader.java:190) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:183) at java.lang.ClassLoader.loadClass(ClassLoader.java:294) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:288) at java.lang.ClassLoader.loadClass(ClassLoader.java:250) at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:310) at java.lang.Class.getConstructor0(Native Method) at java.lang.Class.getDeclaredConstructor(Class.java:1186) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:54) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:759) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:724) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:387) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352) at org.springframework.web.servlet.view.ResourceBundleViewResolver.initFactory(ResourceBundleViewResolver.java:228) at org.springframework.web.servlet.view.ResourceBundleViewResolver.loadView(ResourceBundleViewResolver.java:170) at org.springframework.web.servlet.view.AbstractCachingViewResolver.createView(AbstractCachingViewResolver.java:159) at org.springframework.web.servlet.view.AbstractCachingViewResolver.resolveViewName(AbstractCachingViewResolver.java:78) at org.springframework.web.servlet.DispatcherServlet.resolveViewName(DispatcherServlet.java:1178) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1122) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:878) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:792) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:461) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:416) at javax.servlet.http.HttpServlet.service(HttpServlet.java:740) at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) at allaire.jrun.servlet.JRunSE.service(JRunSE.java:1417) at allaire.jrun.session.JRunSessionService.service(JRunSessionService.java:1106) at allaire.jrun.servlet.JRunSE.runServlet(JRunSE.java:1271) at allaire.jrun.servlet.JRunRequestDispatcher.forward(JRunRequestDispatcher.java:89) at allaire.jrun.servlet.JRunSE.service(JRunSE.java:1557) at allaire.jrun.servlet.JRunSE.service(JRunSE.java:1547) at allaire.jrun.servlet.JvmContext.dispatch(JvmContext.java:364) at allaire.jrun.http.WebEndpoint.run(WebEndpoint.java:115) at allaire.jrun.ThreadPool.run(ThreadPool.java:272) at allaire.jrun.WorkerThread.run(WorkerThread.java:75)   ---  **Affects:** 2.0.5","closed","status: declined,","spring-projects-issues","2007-05-10T05:51:43Z","2019-01-12T16:40:09Z"
"","8338","JPA 'extended' semantics not defined [SPR-3657]","**[Henri Karapuu](https://jira.spring.io/secure/ViewProfile.jspa?name=hkarapuu)** opened **[SPR-3657](https://jira.spring.io/browse/SPR-3657?redirect=false)** and commented  The documentation does not define the semantics of container managed EntityManager with 'extended' -scope properly.  The only mention is about thread safety, but the below issues, for example, are not discussed at all: - automatic joining in transactions - sharing persistence context with container managed EMs of 'transactional' -scope that are bound to same transaction - when is the flushing of the persistence context done - how the EM should be closed    ---  **Affects:** 2.1 M2  1 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2007-07-04T17:21:29Z","2015-09-22T18:20:31Z"
"","8328","Add support for bean priorities [SPR-3647]","**[Henri Karapuu](https://jira.spring.io/secure/ViewProfile.jspa?name=hkarapuu)** opened **[SPR-3647](https://jira.spring.io/browse/SPR-3647?redirect=false)** and commented  Stolen directly from Google Guice. The system could go roughly like this:  - Beans have an optional attribute 'priority'.  - If every bean implementing a type has the 'priority' -attribute defined, then autowire by type will inject the implementation with highest priority, instead of throwing exception about multiple possible implementations.  - If the priority is not set for every bean implementing the type being injected, then things would revert back to normal .. thus preserving full backwards compatibility.  This definitely needs some more thinking, but might well be worth investigating.   --- No further details from [SPR-3647](https://jira.spring.io/browse/SPR-3647?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-07-03T06:02:42Z","2007-07-25T18:29:58Z"
"","8327","@Autowired and @Resource = autowiring by type and autowiring by name? [SPR-3646]","**[Henri Karapuu](https://jira.spring.io/secure/ViewProfile.jspa?name=hkarapuu)** opened **[SPR-3646](https://jira.spring.io/browse/SPR-3646?redirect=false)** and commented  The naming of `@Autowired` and `@Resource` annotations does not make any sense.  One autowires by type, other by name, but the annotation names do not reflect this in any way, and are even of completely different grammatical form.  My suggestion would be to add attribute to the `@Autowired` annotation, which would set the autowire type to 'name', 'type' or 'autodetect'. If the default would be 'type' then full backwards compatibility would maintained. This way those of us who don't care about commons annotations could use `@Autowired` for everything, and have much cleaner looking code. Plus, we would get the added benefit of autodetecting the type.  The `@Resource` could be kept as is for those who want to be compatible with commons annotations.   --- No further details from [SPR-3646](https://jira.spring.io/browse/SPR-3646?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-07-03T05:46:39Z","2012-06-19T03:50:11Z"
"","8320","Sources of org.springframework.orm.jpa missing in archives [SPR-3639]","**[Henri Karapuu](https://jira.spring.io/secure/ViewProfile.jspa?name=hkarapuu)** opened **[SPR-3639](https://jira.spring.io/browse/SPR-3639?redirect=false)** and commented  It seems that 2.0.5 and 2.1m2 zip archives are missing the sources for org.springframework.orm.jpa. Everything else seems to be intact. Weird one.   --- No further details from [SPR-3639](https://jira.spring.io/browse/SPR-3639?redirect=false)","closed","in: data,","spring-projects-issues","2007-07-01T23:39:30Z","2019-01-11T18:33:17Z"
"","8664","CLONE -oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType'. Unable to Start OC4J Server [SPR-3984]","**[hany mohamed shafik](https://jira.spring.io/secure/ViewProfile.jspa?name=hany)** opened **[SPR-3984](https://jira.spring.io/browse/SPR-3984?redirect=false)** and commented  We are currently working on an enterprise project for one of our biggest clients. We are using Spring 2.0 and Spring Web Flow 1.0 Rc4. While deploying the application to Oracle 9ias 10.1.2.0.2 in our development environment, we encountered the following error. We experienced the same error in Spring 2.0 RC2 and it was fixed in Spring 2.0 RC3 by Rick Evans. The ticket No is SPR - 2290. Kindly fix the bug. I will attach the XMLParser Oracle uses so you guys can test it. This is a critical error and we are unable to move forward.  EXCEPTION FROM THE LOG FILE:  ---  06/10/11 17:58:18 Started 06/10/11 17:58:21 drlm: jsp: init 06/10/11 17:58:21 drlm: context: init 06/10/11 17:58:21 drlm: Loading Spring root WebApplicationContext 06/10/11 17:58:52 drlm: Error initializing servlet org.springframework.beans.factory.BeanDefinitionStoreException: Line 8 in XML document from ServletContext resource [/WEB-INF/drlm-servlet.xml] is invalid; nested exception is oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' Caused by: oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' at oracle.xml.parser.v2.XMLError.flushErrorHandler(XMLError.java:444) at oracle.xml.parser.v2.XMLError.flushErrors1(XMLError.java:303) at oracle.xml.parser.v2.NonValidatingParser.parseDocument(NonValidatingParser.java:290) at oracle.xml.parser.v2.XMLParser.parse(XMLParser.java:196) at oracle.xml.jaxp.JXDocumentBuilder.parse(JXDocumentBuilder.java:151) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:77) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:405) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:357) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:126) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:123) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:91) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:83) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at com.evermind.server.http.HttpApplication.loadServlet(HttpApplication.java:2354) at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4795) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: Error preloading servlet javax.servlet.ServletException: Error initializing servlet at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4846) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: drlm: init 06/10/11 17:58:52 drlm: Loading WebApplicationContext for Spring FrameworkServlet 'drlm' 06/10/11 17:58:52 drlm: Error initializing servlet org.springframework.beans.factory.BeanDefinitionStoreException: Line 8 in XML document from ServletContext resource [/WEB-INF/drlm-servlet.xml] is invalid; nested exception is oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' Caused by: oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' at oracle.xml.parser.v2.XMLError.flushErrorHandler(XMLError.java:444) at oracle.xml.parser.v2.XMLError.flushErrors1(XMLError.java:303) at oracle.xml.parser.v2.NonValidatingParser.parseDocument(NonValidatingParser.java:290) at oracle.xml.parser.v2.XMLParser.parse(XMLParser.java:196) at oracle.xml.jaxp.JXDocumentBuilder.parse(JXDocumentBuilder.java:151) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:77) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:405) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:357) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:126) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:142) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:123) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:91) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:94) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:294) at org.springframework.web.context.support.AbstractRefreshableWebApplicationContext.refresh(AbstractRefreshableWebApplicationContext.java:156) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:246) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:184) at org.springframework.web.context.ContextLoaderServlet.init(ContextLoaderServlet.java:83) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at com.evermind.server.http.HttpApplication.loadServlet(HttpApplication.java:2354) at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4795) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: Error preloading servlet javax.servlet.ServletException: Error initializing servlet at com.evermind.server.http.HttpApplication.findServlet(HttpApplication.java:4846) at com.evermind.server.http.HttpApplication.initPreloadServlets(HttpApplication.java:4889) at com.evermind.server.http.HttpApplication.initDynamic(HttpApplication.java:1015) at com.evermind.server.http.HttpApplication.\(HttpApplication.java:549) at com.evermind.server.Application.getHttpApplication(Application.java:890) at com.evermind.server.http.HttpServer.getHttpApplication(HttpServer.java:707) at com.evermind.server.http.HttpSite.initApplications(HttpSite.java:625) at com.evermind.server.http.HttpSite.setConfig(HttpSite.java:278) at com.evermind.server.http.HttpServer.setSites(HttpServer.java:278) at com.evermind.server.http.HttpServer.setConfig(HttpServer.java:179) at com.evermind.server.ApplicationServer.initializeHttp(ApplicationServer.java:2394) at com.evermind.server.ApplicationServer.setConfig(ApplicationServer.java:1551) at com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLauncher.java:92) at java.lang.Thread.run(Thread.java:534) 06/10/11 17:58:52 drlm: dwr-invoker: init 06/10/11 17:58:53 drlm: Started  drlm-servlet.xml file:  ---  \  \  \    - Message source for this context, loaded from localized ""messages_xx"" files.   - Could also reside in the root application context, as it is generic,   - but is currently just used within DRLM's web tier.     -->       	              uk.ltd.getahead.dwr.DWRServlet   dwr-invoker    true                            		   		           flowController   				  drlmMainMenuController                                                     	              	   	                                            	   	   	              	  \  ---  **Affects:** 2.0 final  **Issue Links:** - #6979 oracle.xml.parser.schema.XSDException: Duplicated definition for: 'identifiedType' in spring-util.xsd. We are unable to start OC4j Server.","closed","in: core,","spring-projects-issues","2007-10-18T03:14:04Z","2019-01-13T22:41:38Z"
"","8010","Typo in Spring-MVC-step-by-step-Part-3.html [SPR-3325]","**[Hanson Char](https://jira.spring.io/secure/ViewProfile.jspa?name=hanson.char)** opened **[SPR-3325](https://jira.spring.io/browse/SPR-3325?redirect=false)** and commented  Contains typo in the ProductManager.java sample code in step 21 of Spring-MVC-step-by-step-Part-3.html  ListIterator li = products.listIterator();  should be changed to:  Iterator li = products.iterator();  and have the corresponding import of java.util.Iterator.  Apparently ""ListIterator"" does not exist in the JDK.    --- No further details from [SPR-3325](https://jira.spring.io/browse/SPR-3325?redirect=false)","closed","in: web,","spring-projects-issues","2007-03-31T03:59:06Z","2019-01-11T18:13:49Z"
"","7907","Make form:form tag do url rewriting [SPR-3221]","**[Hans Staugaard](https://jira.spring.io/secure/ViewProfile.jspa?name=hst)** opened **[SPR-3221](https://jira.spring.io/browse/SPR-3221?redirect=false)** and commented  The form:form tag does not rewrite urls if cookies are disabled (i.e. append jsessionid). For now i have to use something like this:","closed","type: enhancement,","spring-projects-issues","2007-02-28T18:37:54Z","2012-06-19T09:37:43Z"
"","8252","JRuby version update to support final methods call [SPR-3569]","**[Gustavo Cipriano Mota Sousa](https://jira.spring.io/secure/ViewProfile.jspa?name=gcms)** opened **[SPR-3569](https://jira.spring.io/browse/SPR-3569?redirect=false)** and commented  Currently spring is using version 0.9.8 of JRuby, and there's a bug (http://jira.codehaus.org/browse/JRUBY-664) that doesn't allows to call final methods in Java base classes, making it impossible to write controllers extending the abstract controller classes.  Updating to JRuby 1.0 would solve this, but may require some changes. For example, the prototype of the method org.jruby.Ruby#parse seems seems to have changed.  I worked around this issue just by changing JRubyScriptUtils to call the new method prototype. It may have some consequences though.   ---  **Affects:** 2.0.5, 2.1 M1, 2.1 M2  **Attachments:** - [MyController.rb](https://jira.spring.io/secure/attachment/12655/MyController.rb) (_297 bytes_) - [spring-jruby.log](https://jira.spring.io/secure/attachment/12656/spring-jruby.log) (_13.76 kB_)","closed","type: enhancement,","spring-projects-issues","2007-06-08T09:14:51Z","2012-06-19T03:51:18Z"
"","8093","XML shown in section 3.2.1.1 of documentation missing attribute text [SPR-3410]","**[Gurpreet Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=guru_simpa)** opened **[SPR-3410](https://jira.spring.io/browse/SPR-3410?redirect=false)** and commented  The xml shown in section 3.2.1.1 of documentation is missing the following text ""http://www.springframework.org/schema/beans"" in xsi:schemaLocation attribute of beans tag. If we try this xml, we get org.xml.sax.SAXParseException with message '  'SchemaLocation: schemaLocation value = ' http://www.springframework.org/schema/beans/spring-beans-2.0.xsd' must have even number of URI's.'  The old xml is :  \  \  \ \ \ \ \ \ \ \  The new xml should be :  \  \  \ \ \ \ \ \ \ \  ---  **Issue Links:** - #8056 Wrong bean configuration xml file header in Spring 2.0.4 PDF Reference Manual : missing data in xsi:schemaLocation (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2007-04-24T04:39:15Z","2019-01-12T16:51:37Z"
"","8637","Backport the functionality of doing batch updates with named parameters [SPR-3957]","**[Guillermo Castro](https://jira.spring.io/secure/ViewProfile.jspa?name=javageek)** opened **[SPR-3957](https://jira.spring.io/browse/SPR-3957?redirect=false)** and commented  I've been using Spring 2.0.x functionality to query databases using named parameters. That way I can define my parameters in any order and if I have to use the same value in different places, I only define one parameter name and use it wherever I need it (in short, I'm very happy with Named Parameters). However, there's a feature that wasn't implemented in 2.0.x, which is the ability to do batch updates using named parameters, and I really wanted this feature. The feature is now available in the latest spring beta (2.1M4) under the org.springframework.jdbc.core.simple.SimpleJdbcTemplate class (http://static.springframework.org/spring/docs/2.1.x/api/org/springframework/jdbc/core/simple/SimpleJdbcTemplate.html#batchUpdate%28java.lang.String,%20java.util.Map%5B%5D%29)  But, it would be great if the same functionality could be backported to the 2.0.x series. I have created a class that does this, which is basically a copy of the code in SimpleJdbcTemplate:  http://forum.springframework.org/showthread.php?p=144262  You don't even need to extend NamedParameterJdbcDaoSupport, just add the code inside it, and it would greatly improve insert/update performance for the databases that support batch updates.   ---  **Affects:** 2.0.5  **Attachments:** - [BatchNamedParameterJdbcDaoSupport.java](https://jira.spring.io/secure/attachment/12983/BatchNamedParameterJdbcDaoSupport.java) (_2.73 kB_)","closed","type: enhancement,","spring-projects-issues","2007-10-03T08:24:44Z","2007-12-18T04:17:01Z"
"","8570","DefaultMessageListenerContainer does not enlist the session in the spring transaction framework [SPR-3890]","**[Guillaume Nodet](https://jira.spring.io/secure/ViewProfile.jspa?name=gnodet)** opened **[SPR-3890](https://jira.spring.io/browse/SPR-3890?redirect=false)** and commented  I'm trying to use transactions with the DefaultMessageContainerListener. I want to also reuse the same session for sending a message to another destination while processing the input message. Unfortunately, the session is not part of the spring transactional resource if caching is set to SESSION or CONSUMER.  Line 883 (http://springframework.cvs.sourceforge.net/springframework/spring/src/org/springframework/jms/listener/DefaultMessageListenerContainer.java?revision=1.35&view=markup#l_883) shows that createSession(getSharedConnection()) is called to create the session for this consumer instead of ConnectionFactoryUtils.doGetTransactionalSession() as done in AbstractPollingMessageListenerContainer.  This prevents the same session to be reused for sending JMS messages.   ---  **Affects:** 2.0.6  15 votes, 7 watchers","closed","has: votes-jira,","spring-projects-issues","2007-09-18T17:47:58Z","2012-06-19T03:47:20Z"
"","8497","Transaction fails when calling DI setters on @Transactional-annotated class on startup [SPR-3817]","**[Guillaume Bilodeau](https://jira.spring.io/secure/ViewProfile.jspa?name=gbilodeau)** opened **[SPR-3817](https://jira.spring.io/browse/SPR-3817?redirect=false)** and commented  As discussed here: http://forum.springframework.org/showthread.php?p=139502  Given the following context:  . an application built with compile-time weaving using AspectJ 1.5.x, . use of Spring 2.0.x . a class annotated with `@Transactional` - not its methods, . the same class containing one or more setters for dependency injections, . a Spring application context declaring the above class with a singleton scope and its dependencies through property references . the same application context using the  tag  Upon loading the application context and instantiating the annotated class, the container tries to begin a transaction but fails with the following message:  java.lang.IllegalStateException: Property 'transactionManager' must be set on transaction aspect  The current behavior is understandable: the class was annotated in such a way that all its public methods should be transactional, which includes the DI setters.  However this doesn't seem to be desirable, given the thrown exception.  One possible workaround is to annotate only the transactional methods (and so not the DI setter methods) instead of the class itself.  The main drawback is that this leads to the duplication of the annotation and its list of rollback exceptions.  It also requires that all unit tests which operate on the annotated class should provide the AnnotationTransactionAspect a mock PlatformTransactionManager on setUp().  One possible solution would be to activate the transactional aspect only after the application context is loaded.  Another one would be to introduce a `@NotTransactional` annotation that would override the class annotation and that could be used on DI setter methods.   ---  **Affects:** 2.0.6  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2007-08-30T00:26:40Z","2012-06-19T03:50:08Z"
"","8353","Trim text in the URIEditor [SPR-3672]","**[Gregory Kick](https://jira.spring.io/secure/ViewProfile.jspa?name=gk5885)** opened **[SPR-3672](https://jira.spring.io/browse/SPR-3672?redirect=false)** and commented  Currently, the URIEditor does a straight passthrough of whatever text is pulled out of the xml configuration file.  For that reason, the property editor will fail with exception when it tries to create a uri from any text where extra whitespace got pulled in.  This is particularly obnoxious when using an xml editor like eclipse wtp that introduces whitespace as part of its formatting.  A simple solution would be to call trim() before creating the URI.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-07-09T04:24:00Z","2012-06-19T03:50:29Z"
"","8363","FormTag use of getRequestURI does not work behind a RequestDispatch.forward [SPR-3682]","**[Greg Wilkins](https://jira.spring.io/secure/ViewProfile.jspa?name=gregwilkins)** opened **[SPR-3682](https://jira.spring.io/browse/SPR-3682?redirect=false)** and commented  The implementation of the FormTag uses getRequestURI if the action attribute has not been sent. However, in spec compliant containers like Jetty (and unlike tomcat) that alter the value returned by getRequestURI, this provides the wrong values as the action for the form (often a URL withing WEB-INF for example).  The correct behaviour is to look for the javax.servlet.forward.request_uri  request attribute and if that is set, use that value.  If it is not set, then use the value returned by getRequestURI.  I know that tomcat does not alter the value returned from getRequestURI during a forward, but the spec clearly says:  SRV.3.4 Request Path Elements It is important to note that, except for URL encoding differences between the request URI and the path parts, the following equation is always true: requestURI = contextPath + servletPath + pathInfo  SRV.8.4 The Forward Method The path elements of the request object exposed to the target servlet must reflect the path used to obtain the RequestDispatcher.  SRV.8.4.2 Forwarded Request Parameters Except for servlets obtained by using the getNamedDispatcher method, a servlet that has been invoked by another servlet using the forward method of RequestDispatcher has access to the path of the original request. The following request attributes must be set: javax.servlet.forward.request_uri javax.servlet.forward.context_path javax.servlet.forward.servlet_path javax.servlet.forward.path_info javax.servlet.forward.query_string  This makes it pretty clear that request_uri should be altered by a forward.  cheers    ---  **Affects:** 2.0.6","closed","in: web,","spring-projects-issues","2007-07-11T16:00:23Z","2019-01-11T18:35:13Z"
"","8763","InternalResourceView should writer encoding for includes [SPR-4084]","**[Greg Wiley](https://jira.spring.io/secure/ViewProfile.jspa?name=gdub)** opened **[SPR-4084](https://jira.spring.io/browse/SPR-4084?redirect=false)** and commented  When InternalResourceView decides to use an include instead of a forward, the output writer encoding can become incompatible with the content type header.  Scenario:  configure an InternalResourceView with:      contentType:   ""text/html; charset=UTF-8     alwaysInclude: true  in the target JSP, use:    or even    The resulting content seen by the browser will have headers indicating UTF-8 encoding but the actual content stream will not be so encoded. This might be easily solved by having the InternalResourceResolver set the Response's content type in the include case only (between lines 133 & 134 in the 2.0.6 version). Would this break the code for other purposes?  The trouble I have with making this report is that I'm not sure it should even be the view implementation's responsibility. Rather, I would think that the JSP implementation would be responsible for providing a suitably-encoding writer based on the page directive--even if the implementation had to perform a conversion to merge the stream into the parent's. So I understand if the response here is ""not Spring's problem.""    ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-11-12T09:07:43Z","2012-06-19T03:47:10Z"
"","8486","make scoped proxies work as attributesMap values in AbstractView hierarchy [SPR-3806]","**[Greg Wiley](https://jira.spring.io/secure/ViewProfile.jspa?name=gdub)** opened **[SPR-3806](https://jira.spring.io/browse/SPR-3806?redirect=false)** and commented  In views supporting the attributesMap property, it is not currently possible to use scoped-proxy bean value references. The proxied beans are interrogated during context creation by the logging statement in the map merge code.  ex: this breaks during initialization  \ \ \ \ \ \ \  this doesn't:  \ \ \ \ \ \ \  I believe the interrogation of the referenced values is only for logging purposes (in AbstractView addStaticAttribute(..), line 203 ). If that is the case, then it could be a simple matter of not using the map entry value in the log output.    ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-26T11:06:49Z","2012-06-19T03:51:05Z"
"","8202","around advice does not bind parameters if another advise is active on same join point [SPR-3519]","**[Greg Wiley](https://jira.spring.io/secure/ViewProfile.jspa?name=gdub)** opened **[SPR-3519](https://jira.spring.io/browse/SPR-3519?redirect=false)** and commented  Using the AspectJ annotation configuration method.  If two advice apply to the same join point and the lower-priority advice has (non JP) parameters, those parameters will not be bound.  This occurs in Spring 2.0.5 but not in Spring 2.0.2.  Only jars on the CP are those in the -with-dependencies Spring distribution.  \spring-framework-2.0.5\lib\aspectj\aspectjrt.jar \spring-framework-2.0.5\lib\aspectj\aspectjweaver.jar \spring-framework-2.0.5\lib\asm\asm-2.2.3.jar \spring-framework-2.0.5\dist\spring-aspects.jar \spring-framework-2.0.5\dist\spring.jar \spring-framework-2.0.5\lib\jakarta-commons\commons-logging.jar \spring-framework-2.0.5\lib\asm\asm-commons-2.2.3.jar \spring-framework-2.0.5\lib\asm\asm-util-2.2.3.jar  Demonstration spike attached.  Note that in the demonstration, the exception can be eliminated by either:  1) removing one of the advice classes from the configuration 2) re-ordering the advice (so that the non-arg advice is lower priority) 3) switching to Spring 2.0.2  This problem has been documented by others in the Spring forums.  -dub  ---  **Affects:** 2.0.5  **Attachments:** - [eg.zip](https://jira.spring.io/secure/attachment/12628/eg.zip) (_2.04 kB_)  **Issue Links:** - #8155 Bad interactions betwen advice when one binds the original method parameters and one does not. (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2007-05-24T03:55:15Z","2019-01-12T16:51:29Z"
"","8139","permit scope designation in util bean elements [SPR-3456]","**[Greg Wiley](https://jira.spring.io/secure/ViewProfile.jspa?name=gdub)** opened **[SPR-3456](https://jira.spring.io/browse/SPR-3456?redirect=false)** and commented  bean-creating elements of the http://www.springframework.org/schema/util namespace should honor the scope attribute, where possible  ex.  [...]    ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-05-05T03:38:52Z","2012-06-19T03:51:00Z"
"","8545","@Autowired annotation not called if bean is injected through XML [SPR-3865]","**[Greg Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=gtaylor)** opened **[SPR-3865](https://jira.spring.io/browse/SPR-3865?redirect=false)** and commented  I have a bean declared using the `@Component` annotation.  It has a dependency that is injected using `@Autowired`.  Within my application context configuration XML, I've enabled context:component-scan and tx:annotation-driven.  Everything was working fine until I made a change to inject the bean into a bean that is configured through XML in the same application context XML.  (This bean is based on a third-party class that doesn't use the annotations.)  Once I injected the bean into the XML-configured bean, my `@Autowired` setter stopped being called.  So, it seems that these beans don't play nice together and I'm going to be forced to take out my annotation-based configuration.   ---  **Affects:** 2.1 M4  **Attachments:** - [springtest.zip](https://jira.spring.io/secure/attachment/12905/springtest.zip) (_6.41 MB_)","closed","in: core,","spring-projects-issues","2007-09-12T03:46:00Z","2012-06-19T03:47:28Z"
"","8310","Spring doco section 17.6 doesn't work -- JMS Connection not automatically started in request/response. [SPR-3629]","**[Greg Matthews](https://jira.spring.io/secure/ViewProfile.jspa?name=gmatthews)** opened **[SPR-3629](https://jira.spring.io/browse/SPR-3629?redirect=false)** and commented  The sample code in the Spring doco in 17.6 doesn't work with ActiveMQ.  Need to manually start the connection, in 2 steps.  1. Wrap the ActiveMQConnectionFactory  \ \ \ \ \ \ \ 2. Manually start the connection **before** trying to do any request/response operations, otherwise attempts to do request/response in this way will hang.  ConnectionFactory cf = (ConnectionFactory) ctx.getBean(""connectionFactory""); Connection connection = cf.createConnection(); connection.start();   ---  **Affects:** 2.0.4  **Attachments:** - [amqtest.zip](https://jira.spring.io/secure/attachment/12700/amqtest.zip) (_4.10 kB_) - [client-lockup-example.zip](https://jira.spring.io/secure/attachment/12950/client-lockup-example.zip) (_5.09 kB_) - [working-lingo-based-sample.zip](https://jira.spring.io/secure/attachment/12951/working-lingo-based-sample.zip) (_6.07 kB_)  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2007-06-27T12:00:47Z","2012-06-18T12:44:31Z"
"","8701","Spring 2.5's  tag is not backwards compatible with 2.0.x [SPR-4022]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-4022](https://jira.spring.io/browse/SPR-4022?redirect=false)** and commented  I have a webform in spring 2.0 with the following form:       \  When I put in Spring 2.5, I it said that ""fields"" could not be bound in my command Name. My form definition is as follows:  \ \ \ \ \ \ \ \ \  Fields does not exist in my command name but instead ""map"" exists as a property in my command class. To fix, I had to change the spring-bind tag to:     It seems that Spring 2.5s behavior is different than 2.0 in this situation. this would require me to make many JSP updates to use Spring 2.5 which in theory should be a drop-in replacement.  ---  **Affects:** 2.5 RC1  **Issue Links:** - #8829 Regression spring:bind and Global Errors","closed","type: bug,","spring-projects-issues","2007-10-30T02:16:56Z","2019-01-11T16:16:23Z"
"","8831","Latest Spring AOP + CGLib caches classes from the same classloader causing CCE in Grails [SPR-4153]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-4153](https://jira.spring.io/browse/SPR-4153?redirect=false)** and commented  In Grails we have a custom class loader that reloads classes when they are changed. Previously Spring's AOP support had no problem with this, but with Spring 2.5 and cglib proxies CGLib, what happens is when we reload a class we get a ClassCastException.  The problem appears to be the Enhancer class in CGLib, it will cache classes based on their originating ClassLoader. This may be fine for Java systems, but with Groovy and Grails we use a reloading capable class loader.  The problem is even bigger because there is no way in Spring to disable caching using the useCache property defined in AbstractClassGenerator.  If there was some way in ProxyFactoryBean and AbstractSingletonProxyFactoryBean to set to disable class caching in CGLib we could get round this. The original issue in the Grails JIRA is:  http://jira.codehaus.org/browse/GRAILS-1771  For the moment my solution is the wrap the classloader in another class loader by passing the class loader as a parent to a child classloader. But this may have other side effects and is generally undesirable.  ---  **Affects:** 2.5 final  **Issue Links:** - #12840 Support for ByteBuddy as an alternative to CGLIB (_**""is depended on by""**_)  3 votes, 5 watchers","closed","in: core,","spring-projects-issues","2007-11-21T22:51:20Z","2019-01-11T16:05:43Z"
"","8420","Cannot place objects created with ProxyFactoryBean into flow scope [SPR-3739]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-3739](https://jira.spring.io/browse/SPR-3739?redirect=false)** and commented  Putting a bean into flow/flash/conversation scope that is created with a ProxyFactoryBean results in the exception:  org.springframework.webflow.execution.repository.continuation.ContinuationCreationException: Could not serialize flow execution; make sure all objects stored in flow or flash scope are serializable; nested exception is java.io.NotSerializableException: org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry Caused by: java.io.NotSerializableException: org.springframework.aop.framework.adapter.DefaultAdvisorAdapterRegistry at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1081) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1347) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302) at java.util.HashMap.writeObject(HashMap.java:985) at   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-07-23T00:27:23Z","2012-06-19T03:50:03Z"
"","8393","Spring CGLib ClassCastException when overriding Proxy bean in ApplicationContext [SPR-3712]","**[Graeme Rocher](https://jira.spring.io/secure/ViewProfile.jspa?name=graemerocher)** opened **[SPR-3712](https://jira.spring.io/browse/SPR-3712?redirect=false)** and commented  We've been trying to upgrade Grails to Spring 2.0.6 from Spring 2.0. Unfortunately there is an issue upgrading. The problem is that when reload a class and then override a bean definition in the registry that is using an AOP proxy the following exception below is thrown. It seems that this has changed from Spring 2.0 to Spring 2.0.6 as this wasn't a problem before. Spring seems to be caching the generated proxies and using an older proxy instead of creating a new one when the bean is overriden. PLEASE fix this, as it is preventing us shipping Grails with the latest Spring.  Caused by: java.lang.ClassCastException: MyService at MyService$$FastClassByCGLIB$$8b7ff749.invoke(\) at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:149)  at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:695) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java :144) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:107) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java :166) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:630) at MyService$$EnhancerByCGLIB$$71dd3e6f.getMetaClass(\) at org.codehaus.groovy.runtime.Invoker.invokePogoMethod (Invoker.java:115) at org.codehaus.groovy.runtime.Invoker.invokeMethod(Invoker.java:81) at org.codehaus.groovy.runtime.InvokerHelper.invokeMethod(InvokerHelper.java:85) at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodN   ---  **Affects:** 2.0.6  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2007-07-25T01:50:27Z","2019-01-12T16:39:58Z"
"","8058","XFire Remoting Documentation Error [SPR-3374]","**[Girish Betadpur](https://jira.spring.io/secure/ViewProfile.jspa?name=girish)** opened **[SPR-3374](https://jira.spring.io/browse/SPR-3374?redirect=false)** and commented  The XFire part of the Remoting Documentation (http://www.springframework.org/docs/reference/remoting.html) has an example where the package name of the XFireExporter is incorrect:  \  The class hould be org.codehaus.xfire.spring.remoting.XFireExporter  - Girish    --- No further details from [SPR-3374](https://jira.spring.io/browse/SPR-3374?redirect=false)","closed","type: bug,","spring-projects-issues","2007-04-14T05:44:50Z","2012-06-19T03:50:37Z"
"","8647","NestedRuntimeException.printStackTrace() repeats parts of the stack trace [SPR-3967]","**[Gernot Neppert](https://jira.spring.io/secure/ViewProfile.jspa?name=mcnepp)** opened **[SPR-3967](https://jira.spring.io/browse/SPR-3967?redirect=false)** and commented  the printStackTrace method of org.springframework.core.NestedRuntimeException prints the full stack traces of all chained exceptions. If sent to a logger, this causes huge amounts of gratuitous data!  The overlapping stack frames (which typically constitute the majority of all lines printed) should to be removed before printing out the stack trace.  Please have a look at the JDS's implementation since Java 1.4 which handles this correctly!    ---  **Affects:** 1.2.9, 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-10-11T02:40:31Z","2012-06-19T03:46:44Z"
"","8290","jee:remote-slsb does not create EJB proxies that survive application server restart [SPR-3607]","**[Gerald Loeffler](https://jira.spring.io/secure/ViewProfile.jspa?name=geraldloeffler)** opened **[SPR-3607](https://jira.spring.io/browse/SPR-3607?redirect=false)** and commented  jee:remote-slsb can not be configured in such a way that the created EJB proxy survives an application server restart (tested against JBoss 4.0.5). After the application server has restarted the spring EJB proxy keeps throwing a NoSuchObjectException.  I'm using this configuration:  ---    java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory java.naming.provider.url=jnp://localhost:1099 java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces    ---  According to the spring 2 docs, this configuration should imply  ---  cache-home=""true"" lookup-home-on-startup=""true"" refresh-home-on-connect-failure=""true""  ---  If i, however, use this seemingly equivalent ""old-style"" configuration using SimpleRemoteStatelessSessionProxyFactoryBean directly, the spring EJB proxy transparently survives an application server restart:  ---  \ \ \ \org.jnp.interfaces.NamingContextFactory\ \jnp://localhost:1099\ \org.jboss.naming:org.jnp.interfaces\ \ \ \  \ \ \ \ \ \ \  \ \ \ \ \  ---  ---  No further details from [SPR-3607](https://jira.spring.io/browse/SPR-3607?redirect=false)","closed","in: core,","spring-projects-issues","2007-06-20T21:23:35Z","2019-01-13T22:42:47Z"
"","8042","AbstractRefreshableApplicationContext.customizeBeanFactory is never called [SPR-3358]","**[Gerald Glocker](https://jira.spring.io/secure/ViewProfile.jspa?name=gerald)** opened **[SPR-3358](https://jira.spring.io/browse/SPR-3358?redirect=false)** and commented  JavaDoc for customizeBeanFactory says that this method will be invoked on all calls to refresh - but it is actually not called.   ---  **Affects:** 2.0.3, 2.0.4","closed","in: core,","spring-projects-issues","2007-04-10T20:45:41Z","2012-06-19T03:50:39Z"
"","8060","improve extensibility of AbstractHandlerMapping [SPR-3377]","**[George Baxter](https://jira.spring.io/secure/ViewProfile.jspa?name=gjbaxter)** opened **[SPR-3377](https://jira.spring.io/browse/SPR-3377?redirect=false)** and commented  I had a need for a 'global' interceptor... one applied to all my controllers, or really, all my url handler mappings. I didn't want to have to have all my developers put this in their configuration, so I extended the SimpleUrlHandlerMapping with the idea of overriding the setInterceptors method and adding the global ones listed in another bean.  There were several roadblocks. setInterceptors[] is final in AbstractHandlerMapping. The array of interceptors attribute is private there as well. initInterceptors() is protected, which would have been a perfect place for extension, but since the attribute is private AND there is no getter accessor method for the interceptor array attribute, this made extension useless.  My solution gives me the heebie-jeebies, but what I did was implement a 'setInterceptors' that takes a List instead of an Object[]. Spring kindly tries to call this method first and I can cache whatever interceptors are being set until initInterceptors is called. This works fine... for now.  Can we get an accessor method or make the interceptors attribute protected in order to take real advantage of the extensibility of initInterceptors()?   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-04-16T09:10:59Z","2012-06-19T03:50:15Z"
"","8218","Tiles 2 Integration [SPR-3535]","**[George Angeletos](https://jira.spring.io/secure/ViewProfile.jspa?name=georgea)** opened **[SPR-3535](https://jira.spring.io/browse/SPR-3535?redirect=false)** and commented  Provide integration between Spring and Tiles 2.x.  See relevant forum discussion: http://forum.springframework.org/showthread.php?p=121676#post121676   ---  9 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2007-05-22T23:44:08Z","2012-06-19T03:50:30Z"
"","8163","CustomBooleanEditor could Trim Whitespace [SPR-3480]","**[Geoffrey Wiseman](https://jira.spring.io/secure/ViewProfile.jspa?name=diathesis)** opened **[SPR-3480](https://jira.spring.io/browse/SPR-3480?redirect=false)** and commented  I dunno if this is still present in the 2.X line, but I've just discovered that when I reformatted an XML file, it converted a boolean value from: \${propertyName}\  To: \ ${propertyname} \  This results in the following error: java.lang.IllegalArgumentException: Invalid boolean value [ true ]]  Unfortunate; I wish CBE would trim whitespace before attempting the conversion.   ---  **Affects:** 1.2.7","closed","type: enhancement,","spring-projects-issues","2007-05-14T06:24:27Z","2012-06-19T03:50:39Z"
"","8426","Enhancement of spring-mock: dbunit tooling through testaco? [SPR-3745]","**[Geir Hedemark](https://jira.spring.io/secure/ViewProfile.jspa?name=geirhe)** opened **[SPR-3745](https://jira.spring.io/browse/SPR-3745?redirect=false)** and commented  There is an extension to AbstractDependencyInjectionSpringContextTests in the testaco library ( http://testaco.org ), in the files that can be found at http://hedemark.net/svn/org.testaco.testlib/trunk/src/main/java/org/testaco/test/ . The files in question are SpringIntegrationTestCase.java and DatabaseTestSuite.java .  These files are heavily dependent upon Spring (and the rest of the library is not), and contain a couple of ugly workarounds since they are not part of the Spring code base - are these pieces of code something that could be of interest for inclusion in Spring either now or in the future?   --- No further details from [SPR-3745](https://jira.spring.io/browse/SPR-3745?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-08-08T00:20:44Z","2015-01-04T09:51:48Z"
"","8212","Bug in ServletRequestUtils getStringParameter [SPR-3529]","**[Geir Arnesen](https://jira.spring.io/secure/ViewProfile.jspa?name=geira)** opened **[SPR-3529](https://jira.spring.io/browse/SPR-3529?redirect=false)** and commented  Call to method getStringParameter:  ie:           String orderStatus = ServletRequestUtils.getStringParameter(request, ""orderStatus"", ""0"");  Method returns """" (empty string) which is returned in the request instead of the default value ""0"". The implementation in the deprecated class RequestUtils, - returns ""0"" instead of the empty string """".  ---  **Affects:** 2.0.4  **Issue Links:** - #6686 ServletRequestUtils.getStringParameters behaviour with *empty* (not null) Strings is unintuitive","closed","status: declined,","spring-projects-issues","2007-05-28T04:46:40Z","2019-01-12T16:40:08Z"
"","8671","CGLIB creates a new class for every inner-bean that uses a method-replacer [SPR-3991]","**[Geert Jan Sterenborg](https://jira.spring.io/secure/ViewProfile.jspa?name=sterenb2)** opened **[SPR-3991](https://jira.spring.io/browse/SPR-3991?redirect=false)** and commented  Using lookup-method in an inner-bean causes a class-leak.  Example config:  \ 	\ \ \ \ \ \ \		 \ \  We have tracked it down to the equals method in CglibIdentitySupport:  other.getClass() == getClass()) && ((CglibIdentitySupport) other).getBeanDefinition() == beanDefinition  Injecting a new instantiationstrategy with a modified CglibIdentitySupport equals-comparison resolves the issue:  (other.getClass() == getClass()) && ((CglibIdentitySupport) other).getBeanDefinition().equals(beanDefinition)    ---  **Affects:** 2.0.7  **Attachments:** - [spring-test.tar](https://jira.spring.io/secure/attachment/13029/spring-test.tar) (_50.00 kB_)","closed","in: core,","spring-projects-issues","2007-10-19T00:48:36Z","2012-06-19T03:46:54Z"
"","7984","PetClinic orm.xml ignored when using Hibernate EntityManager 3.3.0 [SPR-3299]","**[Gary Ip](https://jira.spring.io/secure/ViewProfile.jspa?name=gaplo)** opened **[SPR-3299](https://jira.spring.io/browse/SPR-3299?redirect=false)** and commented  In spring-framework-2.0.4-with-dependencies-20070324-${build.number}.zip, several hibernate jars are updated (Hibernate annotations 3.3.0.GA and Hibernate EntityManager 3.3.0.GA). It is found that META-INF/orm.xml in classpath are ignored. This can be reproduce with ""petclinic"" example using JPA (Hibernate).  Ref: The same issue is reported to Hibernate EntityManager dev. team also http://opensource.atlassian.com/projects/hibernate/browse/EJB-279   ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-03-24T03:21:02Z","2012-06-19T03:51:18Z"
"","8833","Allow to configure the UserAttribute map of ReflectiveMethodInvocation from the ProxyFactory or ProxyFactoryBean [SPR-4155]","**[Gaetan Pitteloud](https://jira.spring.io/secure/ViewProfile.jspa?name=gpitteloud)** opened **[SPR-4155](https://jira.spring.io/browse/SPR-4155?redirect=false)** and commented  We often need to pass arguments to method interceptors about the context related to the proxy creation. The Spring implementation of MethodInvocation -- ReflectiveMethodInvocation -- contains a map dedicated to this purpose (as I can see) : userAttributes. The problem is that this map cannot be used currently for this purpose because there is no hook or callback or overridable method to allow this.  The typical usage scenario (the one that leaded me to this JIRA) is to share the EJBContext : An EJB bean delegates all calls to a POJO with the same service interface. The POJO is actually proxied to offer infrastructure services. One of these interceptors needs to access the EJBContext, onto which it delegates security-related calls. On ejb creation, the proxy is created and stored as an instance variable of the bean. EJB method invocations delegate the calls to the proxied service. The ideal solution consists in setting the EJBContext as a userAttribute on the ProxyFactory, so that when creating a proxy from it, the MethodInvocation passed to the configured interceptors contains the EJBContext as a user attribute, and an advised interceptor can cast the MethodInvocation into Spring implementation class and read the userAttributes map. I explored alternative solutions : - Set the EJBContext in the ThreadLocal, and let an interceptor retrieve it. Issues : we usually do not want to share the EJBContext outside of the interceptors chain and let any java class being part of the method invocation stack retrieve it; further, particular attention must be taken on cleaning it after use. I do not like seeing ThreadLocal used everywhere : sounds like the golden hammer solution. This is however the current solution, in lack of a better one. - Iterate over the interceptors chain and inject the EJBContext into EJBContextAware interceptors. This does only work if interceptors are prototypes, which I cannot ensure. - Rewrite ProxyFactory and linked classes : no.  The proposed solution follows :  org.springframework.aop.framework.AdvisedSupport : - add Map userAttributes instance variable + associated accessors  optional, but prevents further problems : org.springframework.aop.framework.ProxyCreatorSupport : - in activate() : transform the userAttributes map into an unmodifiable map - override setUserAttributes() to prevent changes to the map once activated  org.springframework.aop.framework.JdkDynamicAopProxy : - invoke() : after creating the invocation (l. 202) transfer the userAttributes map contents from advised instance variable to invocation.  org.springframework.aop.framework.Cglib2AopProxy.FixedChainStaticTargetInterceptor : - constructor : pass advised userAttributes map as an additional constructor parameter, and store it as an instance variable - intercept() : transfer the userAttributes map contents to the created CglibMethodInvocation before proceeding it.  I talked about this in a forum entry last week (thread 46182 in AOP forum). IMO, the concurrency is not an issue, or if it is, then setting the targetSource as an instance variable of AdvisedSupport would also be an issue : if someone creates a ProxyFactory, sets the targetSource, and finally creates a proxy with it, the targetSource might be changed by someone else on the ProxyFactory in the meantime, causing the previously created proxy to respond differently when used. The proposed userAttributes map on AdvisedSupport is a configured property, which is not supposed to change after initialisation, as is the targetSource.   --- No further details from [SPR-4155](https://jira.spring.io/browse/SPR-4155?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-11-22T20:41:56Z","2012-06-19T09:36:30Z"
"","7953","Field 'PROPAGATION_' not found in class TransactionDefinition [SPR-3268]","**[Gabriel Goïc](https://jira.spring.io/secure/ViewProfile.jspa?name=pisce)** opened **[SPR-3268](https://jira.spring.io/browse/SPR-3268?redirect=false)** and commented  When omitting transaction properties (optional) in tx:method like the following :               	     		     		     	       and then, deploying my webapp on Resin, I get the error:  org.springframework.core.ConstantException: Field 'PROPAGATION_' not found in class [org.springframework.transaction.TransactionDefinition]  a workaround consists in defining default transaction properties :               	     		     		     	       is it possible that Spring implicitly sets these defaults values if the user did not define them ?   ---  **Affects:** 2.0.3","closed","type: bug,","spring-projects-issues","2007-03-15T03:33:13Z","2012-06-19T03:51:19Z"
"","8314","FrameworkServlet should override HttpServlet.service() and call processRequest() from there [SPR-3633]","**[Gabe](https://jira.spring.io/secure/ViewProfile.jspa?name=gabe)** opened **[SPR-3633](https://jira.spring.io/browse/SPR-3633?redirect=false)** and commented  FrameworkServlet currently overrides javax.servlet.HttpServlet's doPost(), doGet(), doPut(), and doDelete().  In those overridden methods, it calls processRequest() with the request and response objects, thus passing the incoming requests on for handling by RequestHandlers, Controllers, etc.  Unfortunately, this means that the only HTTP requests that can ever reach processRequest() are GET, POST, PUT, or DELETE requests.  This arrangement has annoying consequences for DispatcherServlet.  Currently, HTTP requests with lesser-used methods such as HEAD, OPTIONS, and TRACE can never be processed by mapped RequestHandlers, which seems like an unnecessary limitation. I should be able to handle things like WebDAV MKCOL requests using a RequestHandler mapped by a DispatcherServlet.  As a solution, I propose that FrameworkServlet override javax.servlet.http.HttpServlet's service() method, to look like this:  protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {     this.processRequest(request, response); }  This would cause **all** HTTP requests to be processed and passed into the framework **regardless of which HTTP method is used**, fixing the problem. FrameworkServlet should no longer override doPost(), doGet(), doPut(), or doDelete() in this case.  I currently extend DispatcherServlet and override service() as above to gain the same behaviour. This has allowed me to write a WebDAV protocol handler as a RequestHandler.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-06-28T20:12:05Z","2012-06-19T09:37:24Z"
"","8425","Autowiring doesn't work with beans of type String [SPR-3744]","**[Frédéric Camblor](https://jira.spring.io/secure/ViewProfile.jspa?name=fcamblor)** opened **[SPR-3744](https://jira.spring.io/browse/SPR-3744?redirect=false)** and commented  When using AbstractDependencyInjectionSpringContextTests and autowiring ""by name"" (""setAutowireMode(AUTOWIRE_BY_NAME);"" defined in my test constructor), autowire is not effective for a bean of type ""java.lang.String"".   ---  **Affects:** 2.0.2  **Attachments:** - [beans.xml](https://jira.spring.io/secure/attachment/12762/beans.xml) (_801 bytes_) - [MyTest.java](https://jira.spring.io/secure/attachment/12763/MyTest.java) (_701 bytes_) - [Thing.java](https://jira.spring.io/secure/attachment/12764/Thing.java) (_250 bytes_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-08-07T02:18:45Z","2012-06-18T12:44:20Z"
"","8582","form:checkbox calls propertyEditor.setAsText() too ofen [SPR-3902]","**[Fried Hoeben](https://jira.spring.io/secure/ViewProfile.jspa?name=fhoeben)** opened **[SPR-3902](https://jira.spring.io/browse/SPR-3902?redirect=false)** and commented  I'm binding a checkbox to show whether a value is present in a list (so my boundObject is a List of objects). The objects in the list actually come from a database and they are identified with an id property. This id property is the value I was binding to the checkbox. To convert an id value to a real object I created a custom PropertyEditor which in effect retrieves the object from the database (where the id is the primary key). This all works fine and the form:checkbox is able to correctly identify whether checkboxes should be checked, and when I make updates and submit the form the updates are processed correctly.  Only when the number of possible options started to grow (i.e. the size of the bound list) the pages started to become REALLY SLOW. As it turns out the checkbox is using the propertyEditor to convert the value to a real object (to determine whether it should be selected) for each object in the bound list (e.g. to write one checkbox bound to a list of 100 elements, 100 calls to the propertyEditor are made, each with the same value). This is not very efficient as the result of propertyEditor.setAsText(value) is not going to change between the various elements in the bound list (as long as they are all of the same class, which I assume is by far the most likely scenario). Of course, this is no problem when the propertyEditor.setAsText is a quick operation, but when it is more time consuming (as it is in my case)....  To determine whether a checkbox is selected form:checkbox uses SelectedValueComparator.exhaustiveCollectionCompare which calls exhaustiveCompare() for each element in the collection. The inefficiency stems from the fact that exhaustiveCompare calls the propertyEditor to convert a String candidateValue to a real object . Instead this conversion could be done in exhaustiveCollectionCompare, so it will be done only once and a simple call of collection.contains() would suffice to check for presence.  The problem could also be addressed at another level: use the propertyEditor at the level of SelectedValueComparator.collectionCompare(). Now there are 2 cases in collectionCompare: does the collection contain the candidateValue, or check using exhaustiveCollectionCompare. A third option could be the convert the candidateValue using the propertyEditor for the class of the first element in the list, and check whether the resulting value appears in the list.  I'm able to work around this issue at the moment by writing my own subclass of CheckBoxTag (see also #8562) that binds the actual object (which I already have) as the value to the Spring CheckBoxTag, and then overrides getDisplayString() to ensure that for this value object it will write the id (and not call toString()). The effect is that the HTML will still contain the correct id as value attribute, and not the normal toString() of the value object, but the normal boundCollection.contains(candidateValue) in SelectedValueComparator.collectionCompare will return true and my propertyEditor is not called once for each element in the list. It works, but I do think this is not the way this should work...  ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-09-21T22:23:58Z","2019-01-11T21:10:54Z"
"","8562","Allow form:checkbox to create multiple boxes based on a collection of values  [SPR-3882]","**[Fried Hoeben](https://jira.spring.io/secure/ViewProfile.jspa?name=fhoeben)** opened **[SPR-3882](https://jira.spring.io/browse/SPR-3882?redirect=false)** and commented  Currently the form:checkbox tag creates a single checkbox for one explicitly set value. Please extend this so many checkboxes may be rendered: one for each value in a collection. This way the list of possible values does not need to be hardcoded into the JSP but can be passed by the controller (similar to what can be done with form:options).  So, using the example from the documentation to outline the behavior I'm looking for:  $subject\  Where subjectList contains a list of all possible subjects, each subject has an 'id' property which will be used as value. One checkbox will be rendered for each subject in the subjectList. The body of the tag will be rendered for each subject, and in the body the variable $subject can be used to reference the subject it is being rendered for (in my example subject.toString() will be placed behind each checkbox).  So the resulting HTML would be: \Quidditch\ \Herbology\ \Defence Against the Dark Arts\ \  I was able to create such a tag quite easily as an extension on the standard form:checkbox, but unfortunately the 'hidden' element will be added after each checkbox value, and not just once for the whole list. I believe this could be remedied quite easily if the hidden value would be rendered in doEndTag(), instead of as part of writeTagContent().   ---  **Affects:** 2.0.6  **Attachments:** - [CheckBoxesTag_improved.java](https://jira.spring.io/secure/attachment/12924/CheckBoxesTag_improved.java) (_4.63 kB_) - [CheckBoxesTag.java](https://jira.spring.io/secure/attachment/12910/CheckBoxesTag.java) (_3.72 kB_) - [CheckBoxesTag-207.java](https://jira.spring.io/secure/attachment/12990/CheckBoxesTag-207.java) (_4.81 kB_)","closed","type: enhancement,","spring-projects-issues","2007-09-15T18:49:39Z","2012-06-19T03:47:03Z"
"","8541","Name generated by ModelMap.addObject() should not uncapitalize name of class that starts with multiple capitals [SPR-3861]","**[Fried Hoeben](https://jira.spring.io/secure/ViewProfile.jspa?name=fhoeben)** opened **[SPR-3861](https://jira.spring.io/browse/SPR-3861?redirect=false)** and commented  When ModelMap.addObject(Object) is called it generates a variable name. But I was suprised to find that it ALWAYS uncapitalizes the first letter of the class name. I had not expected this, but instead for it to follow the same convention as used with property names, i.e. if the name starts with multiple capitals (e.g. USAddress.class) it is not altered (e.g. variable name becomes 'USAddress' and not 'uSAddress').   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-09-11T01:33:19Z","2012-06-19T03:46:59Z"
"","8554","Improve user exception handling for JAX-RPC and JMX remote calls [SPR-3874]","**[Frederic Soulier](https://jira.spring.io/secure/ViewProfile.jspa?name=fps)** opened **[SPR-3874](https://jira.spring.io/browse/SPR-3874?redirect=false)** and commented  Xref to forum post http://forum.springframework.org/showthread.php?t=42265  When performing a remote call using JAX-RPC (Axis) or JMX which throws a user exception (or business exception) as described in the service interface the client code receives an InvocationFailureException (JMX) or a RemoteConnectFailureException (JAX-RPC). I would expect the client to receive one of the exception as declared in the service interface.  I have created my own ClientJaxRpcPortProxyFactoryBean (extends JaxRpcPortClientInterceptor) and ClientMBeanProxyFactoryBean (extends MBeanClientInterceptor) overriding a number of methods from the interceptors (note that it's cumbersome because these methods are not meant to be changed in sub-classes so these new proxy classes largely contain the code from the parents)  ClientJaxRpcPortProxyFactoryBean  ---  METHOD: protected Object doInvoke(MethodInvocation invocation, Remote portStub)	throws Throwable ... throw RmiClientInterceptorUtils.convertRmiAccessException(invocation.getMethod(), rex, isConnectFailure, this.portQName.toString()); ...  replaced with: ... throw convertRemoteException(invocation.getMethod(), rex, isConnectFailure); ...  METHOD: protected Object performJaxRpcCall(MethodInvocation invocation, Service service) throws Throwable ... throw RmiClientInterceptorUtils.convertRmiAccessException(invocation.getMethod(), ex, isConnectFailure, portQName.toString()); ...  replaced with: ... throw convertRemoteException(invocation.getMethod(), ex, isConnectFailure); ...  I have added the private method: `@SuppressWarnings`(""unchecked"") private Throwable convertRemoteException(Method method, RemoteException ex, boolean isConnectFailure) { Throwable targetEx = ex.getCause(); if (targetEx != null)	 { Class[] declaredExceptions = method.getExceptionTypes(); for (int i = 0; i < declaredExceptions.length; i++) { Class declaredException = declaredExceptions[i]; if (declaredException.isAssignableFrom(targetEx.getClass())) { // here we throw a declared (in service interface) business exception return targetEx; } }      		return new InvocationFailureException(""JMX access failed"", ex);     	}     	else     	{     		return RmiClientInterceptorUtils.convertRmiAccessException(method, ex, isConnectFailure, this.portQName.toString());	     	}     }  A similar approach was used for the JMX remote call.  ClientMBeanProxyFactoryBean  ---  METHOD: public Object invoke(MethodInvocation invocation) throws Throwable ... catch (JMException ex) { throw new InvocationFailureException(""JMX access failed"", ex); } ...  replaced with: ... throw convertJMException(invocation.getMethod(), ex); ...  I have added the private method: `@SuppressWarnings`(""unchecked"") private Throwable convertJMException(Method method, JMException ex) { Throwable jex = ex.getCause(); if (jex != null) { Class[] declaredExceptions = method.getExceptionTypes(); for (int i = 0; i < declaredExceptions.length; i++) { Class declaredException = declaredExceptions[i]; if (declaredException.isAssignableFrom(jex.getClass())) { // here we throw a declared (in service interface) business exception return jex; } }      		return new InvocationFailureException(""JMX access failed"", ex);     	}     	else     	{     		return new InvocationFailureException(""JMX access failed"", ex);     	}	     }  It does work but obviously there might be some gotchas I'm unaware of.  ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-09-13T20:17:28Z","2019-01-13T08:07:24Z"
"","8720","JpaTransactionManager tries to unbind a resource that was never bound in the first place. [SPR-4041]","**[Franz Allan Valencia See](https://jira.spring.io/secure/ViewProfile.jspa?name=franz_see)** opened **[SPR-4041](https://jira.spring.io/browse/SPR-4041?redirect=false)** and commented  The exception I got is as follows:  ``` java.lang.IllegalStateException: No value for key [org.apache.commons.dbcp.BasicDataSource@f5d030] bound to thread [main] 	at org.springframework.transaction.support.TransactionSynchronizationManager.unbindResource(TransactionSynchronizationManager.java:184) 	at org.springframework.orm.jpa.JpaTransactionManager.doSuspend(JpaTransactionManager.java:403) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.suspend(AbstractPlatformTransactionManager.java:507) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.handleExistingTransaction(AbstractPlatformTransactionManager.java:394) 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:329) 	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:124) ```  Forums posts related to these are [1] & [2].  My findings on why this happens is in post#2 of [1].  Thanks, Franz  [1] http://forums.opensymphony.com/thread.jspa?messageID=225512 [2] http://forum.springframework.org/showthread.php?p=99413   ---  **Affects:** 2.0.1, 2.0.6  1 votes, 0 watchers","closed","type: bug,","spring-projects-issues","2007-11-03T03:17:25Z","2012-06-19T03:47:36Z"
"","8435","Minor documentation typo [SPR-3754]","**[Frank Dean](https://jira.spring.io/secure/ViewProfile.jspa?name=frankdsdean)** opened **[SPR-3754](https://jira.spring.io/browse/SPR-3754?redirect=false)** and commented  Typo in ""The Spring Framework - Reference Documentation"" Section 3.3.3.2, ""References to other beans (collaborators)"", para 3, ""(in order to know about errors **are** early as possible)"" should read ""(in order to know about errors **as** early as possible)""   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-08-09T22:32:13Z","2012-06-19T03:50:46Z"
"","8208","FrameworkServlet uses an non existing RequestHandledEvent constructor [SPR-3525]","**[Frank Bille](https://jira.spring.io/secure/ViewProfile.jspa?name=frankbille)** opened **[SPR-3525](https://jira.spring.io/browse/SPR-3525?redirect=false)** and commented  org.springframework.web.servlet.FrameworkServlet uses a non existing org.springframework.web.context.support.RequestHandledEvent constructor. The constructor it uses was removed in 1.13 of RequestHandledEvent.  I have the same error in both 2.0.2 and 2.0.5   ---  **Affects:** 2.0.2, 2.0.5","closed","","spring-projects-issues","2007-05-26T04:26:38Z","2019-01-11T19:06:19Z"
"","8790","ApplicationListeners cannot be lazy initialized [SPR-4111]","**[FoX](https://jira.spring.io/secure/ViewProfile.jspa?name=tmaris)** opened **[SPR-4111](https://jira.spring.io/browse/SPR-4111?redirect=false)** and commented  All ApplicationListeners will be instantiated when the ApplicationContext registers its listeners. The consequence of this operation for our application is that nearly all beans are initialized at startup time eventhough lazy-init is set to true on all contexts. This is especially annoying in our integration tests, because the initialization takes a lot of time.  Isn't there a possibility to register these listeners as a proxy, allowing lazy initialization of these listeners until an application event occurs? Or, maybe it would also be a valid solution to not put the listeners themselves in the map, but the bean names (not that nice, as it would break observer/observable pattern)  It seems that the getBeansOfType() method in the DefaultListableBeanFactory doesn't take the allowEagerInit boolean into account when retrieving the beans:  public Map getBeansOfType(Class type, boolean includePrototypes, boolean allowEagerInit) throws BeansException { String[] beanNames = getBeanNamesForType(type, includePrototypes, allowEagerInit); Map result = CollectionFactory.createLinkedMapIfPossible(beanNames.length); for (int i = 0; i < beanNames.length; i++) { String beanName = beanNames[i]; try { // -----------------------> getBean(beanName) will always instantiate the bean, eager init or not? result.put(beanName, getBean(beanName)); } ... } ... }  ---  **Affects:** 2.0.7  **Issue Links:** - #8733 ApplicationListener beans eagerly instantiated even when marked as lazy-init (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2007-11-15T21:24:13Z","2019-01-11T16:00:31Z"
"","8636","Dependency Version Numbers [SPR-3956]","**[foobarbaz](https://jira.spring.io/secure/ViewProfile.jspa?name=foobarbaz)** opened **[SPR-3956](https://jira.spring.io/browse/SPR-3956?redirect=false)** and commented  Any chance you guys could include dependency version number on both directory and jar files? I know they're in the config/pom files, but it would make browsing and inclusion within projects much easier. Sorry if this is a re-post.  -lib - log4j-1.2.14 --- log4j-1.2.14.jar   --- No further details from [SPR-3956](https://jira.spring.io/browse/SPR-3956?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-10-03T03:28:55Z","2012-06-19T09:36:27Z"
"","8643","Respecting an explicitly set ConnectionReleaseMode in org.springframework.orm.hibernate3.LocalSessionFactoryBean [SPR-3963]","**[Fokko Degenaar](https://jira.spring.io/secure/ViewProfile.jspa?name=f.degenaar)** opened **[SPR-3963](https://jira.spring.io/browse/SPR-3963?redirect=false)** and commented  When using the LocalSessionFactoryBean in a CMT environment there is no need for a Spring JtaTransactionManager. The absence of a JtaTransactionManger causes the method buildSessionFactory to set the ConnectionReleaseMode to ON_CLOSE, although AFTER_STATEMENT would be more approriate. AFTER_TRANSACTION produces some warnings, because the data source gets closed after the commit. It would be nice to have the LocalSessionFactoryBean to respect an explicitly set ConnectionReleaseMode. Additionally  the supportsAggressiveRelease property of the ConnectionProvider should be set accordingly. So far we copied and modified both classes to get the proper settings for the above scenario.   ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2007-10-05T01:50:10Z","2012-06-19T03:47:30Z"
"","8669","Lazy loading of NamespaceHandlers when a namespace is actually accessed [SPR-3989]","**[Fergal Somers](https://jira.spring.io/secure/ViewProfile.jspa?name=fsomers)** opened **[SPR-3989](https://jira.spring.io/browse/SPR-3989?redirect=false)** and commented  We have found an issue with registered namespace handlers registered using spring.handlers properties file.  We have the following System deployed into JBoss/Tomcat.  JBoss Tomcat (default appserver classpath). | |_ our Servlet Application (.war)   |              -----this contains spring version 2.0.5 that we use for our application   |              -----we also register XML Namespace handlers in / META-INF/spring.handlers for: |                  ""http\://www.capeclear.com/assembly/10=com.capeclear.assembly.impl.CCNamespaceHandlerSupport"" | |_ projects (deployed into our application) have local classpath with parent-last classloading semantics). --- this contains a local Spring 2.0.6 jar and local spring XML file.  We allow projects to be deployed into our servlet application and manage their lifecycles.  One of the projects that a customer wanted to deploy into our application contains a version of Spring (2.0.6) with it's own spring configuration. This is not a problem normally, because we can support ""parent-last"" classloading style for such projects.  However, we noticed that even though the customer project does not declare any beans of the namespace ""http://www.capeclear.com/assembly/10"" in their local file, their spring configuration is attempting to load the NamespaceHandler. Since this interface has changed between 2.0.5 and 2.0.6 this causes a problem.  It would be better if Spring only loaded such XML handlers on-demand (i.e. when a bean of the given namespace is being configured accessed)  ---  **Affects:** 2.0.6  **Issue Links:** - #8675 eager loading of handler mappings forces unnecessary classpath scans","closed","type: enhancement,","spring-projects-issues","2007-10-18T20:37:05Z","2019-01-11T21:18:16Z"
"","7925","agentId in MBeanProxyFactoryBean [SPR-3240]","**[Farzad Kohantorabi](https://jira.spring.io/secure/ViewProfile.jspa?name=farzad)** opened **[SPR-3240](https://jira.spring.io/browse/SPR-3240?redirect=false)** and commented  MBeanProxyFactoryBean uses JmxUtils to locate an MBeanServer. However, JmxUtils picks the first MBeanServer it finds unless an agentId is provided. It would be nice to add a new property in the MBeanProxyFactoryBean, in addition to server and serviceUrl, to specify an agentId. This will replace the hassle of defining an appropriate serviceUrl (spring forums are already bombarded by the people who have a hard time finding the appropriate url) while JmxUtils has access to the list of available MBeanServers.   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-03-07T09:05:04Z","2012-06-19T03:50:05Z"
"","8728","Spring beans automagically exposed as jsp/jstl attributes considered harmful [SPR-4049]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-4049](https://jira.spring.io/browse/SPR-4049?redirect=false)** and commented  I don't like the idea of exposing Spring beans as attributes to JSP/JSTL because it violates the design principle that communication between controllers and views should pass through the model object. Accessing directly Spring beans in EL expressions couples the presentation tier to the other tiers in a far less than obvious way.  I even more dislike the idea of setting the default value of JstlView.exposeContextBeansAsAttributes to true as this encourage this bad practice (see #8528).  Furthermore this introduces a breaking change in the frequent case when a model attribute has the same name as a Spring bean. For instance in my applications **many** views and the corresponding command object share the very same name: up to 2.1M4 in the jstl page I used to get the model object, while in 2.5RC1 I get the view!  Thanks in advance for reconsidering this decision.  ---  **Affects:** 2.5 RC1  **Issue Links:** - #8528 AbstractBeanFactory should not expose FactoryBean instances as request/session attribute  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2007-11-05T23:52:11Z","2019-01-11T16:22:59Z"
"","8154","Major regression in RdbmsOperation with in out parameters [SPR-3471]","**[Fabio Grassi](https://jira.spring.io/secure/ViewProfile.jspa?name=fabio)** opened **[SPR-3471](https://jira.spring.io/browse/SPR-3471?redirect=false)** and commented  Due to a refactoring of RdbmsOperation.validateParameters, it is impossible to use any StoredProc with a parameter declared (on the RDBMS) as in out.  I think that validateParameterCount should make a finer distinction between ""declaredParams"" and ""declaredInParams"".  This is a show stopper for us.   ---  **Affects:** 2.0.5  **Attachments:** - [InOutParamTest.java](https://jira.spring.io/secure/attachment/12594/InOutParamTest.java) (_2.23 kB_) - [InOutParamTest.java](https://jira.spring.io/secure/attachment/12593/InOutParamTest.java) (_2.63 kB_) - [InOutParamTest.java](https://jira.spring.io/secure/attachment/12592/InOutParamTest.java) (_978 bytes_)","closed","type: bug,","spring-projects-issues","2007-05-11T00:25:33Z","2019-01-13T08:08:28Z"
"","8754","SimpleJdbcInsert breaks with Derby temporary tables because it always tries to fetch table metadata [SPR-4076]","**[Fabien Le Floc'h](https://jira.spring.io/secure/ViewProfile.jspa?name=logos01)** opened **[SPR-4076](https://jira.spring.io/browse/SPR-4076?redirect=false)** and commented  When using SimpleJdbcInsert on a Derby temporary table (example: declare global temporary table SESSION.TASKS ( TASK     VARCHAR(30), COMPUTER VARCHAR(30), VALUE    INTEGER, DATE     TIMESTAMP ) on commit preserve rows not logged) the execute method fails and throws:  org.springframework.dao.DataAccessResourceFailureException: Unable to locate table meta data for 'TASKS' at org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.locateTableAndProcessMetaData(GenericTableMetaDataProvider.java:286) at org.springframework.jdbc.core.metadata.GenericTableMetaDataProvider.initializeWithTableColumnMetaData(GenericTableMetaDataProvider.java:195) at org.springframework.jdbc.core.metadata.TableMetaDataProviderFactory$1.processMetaData(TableMetaDataProviderFactory.java:71) at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:195) at org.springframework.jdbc.core.metadata.TableMetaDataProviderFactory.createMetaDataProvider(TableMetaDataProviderFactory.java:52) at org.springframework.jdbc.core.metadata.TableMetaDataContext.processMetaData(TableMetaDataContext.java:173) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.compileInternal(AbstractJdbcInsert.java:259) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.compile(AbstractJdbcInsert.java:244) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.checkCompiled(AbstractJdbcInsert.java:295) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.doExecute(AbstractJdbcInsert.java:321) at org.springframework.jdbc.core.simple.SimpleJdbcInsert.execute(SimpleJdbcInsert.java:92)  In the javadoc, it is written that metadata is not retrieved if columns are specified, this is false, metadata is always retrieved. We could make the execute work if we exposed the method  TableMetaDataContext.setAccessTableParameterMetaData() in AbstractJdbcInsert class. I have tested with a patched class that enables calling the setter method and it works.  Here is a patch vs CVS version 1.7: --- AbstractJdbcInsert.java	2007-11-09 16:50:56.234672900 +0100 +++ AbstractJdbcInsert.java	2007-11-09 16:54:55.989162700 +0100 @@ -106,6 +106,21 @@ //------------------------------------------------------------------------- // Methods dealing with configuaration properties //------------------------------------------------------------------------- + + /**  + * `@return` true if access to table parameter metadata is allowed + */  + public boolean isAccessTableParameterMetaData() {  +         return tableMetaDataContext.isAccessTableParameterMetaData();  + }  +   + /**  + * Set if access of table parameter metadata is allowed + */  + public void setAccessTableParameterMetaData(boolean accessTableParameterMetaData) {  +         checkIfConfigurationModificationIsAllowed();		  +         tableMetaDataContext.setAccessTableParameterMetaData(accessTableParameterMetaData);  + }    /**    * Get the name of the table for this insert    ---  **Affects:** 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-11-09T02:17:13Z","2012-06-19T03:47:43Z"
"","8130","Make SimpleRemoteStatelessSessionProxyFactoryBean serializable [SPR-3447]","**[Fabien Coppens](https://jira.spring.io/secure/ViewProfile.jspa?name=sonicfab)** opened **[SPR-3447](https://jira.spring.io/browse/SPR-3447?redirect=false)** and commented  For clustering purposes, it would be nice to make SimpleRemoteStatelessSessionProxyFactoryBean serializable.   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-05-02T22:21:41Z","2012-06-18T12:44:21Z"
"","8874","Reuse of  [SPR-4196]","**[Ezequiel Chávez](https://jira.spring.io/secure/ViewProfile.jspa?name=eachavez)** opened **[SPR-4196](https://jira.spring.io/browse/SPR-4196?redirect=false)** and commented  The new ""jee schema"" have util tags like  and ; since this tags depends of jndiEnvironment property, the current solution it's limited for me; since i have more than one ejb bean definition, i can't reuse  y have to copy-paste for every single , example:    java.naming.factory.initial=${java.naming.factory.initial} java.naming.provider.url=${java.naming.provider.url}      java.naming.factory.initial=${java.naming.factory.initial} java.naming.provider.url=${java.naming.provider.url}    Possible solutions #1 can define a  with attribute ""id"" for reuse.     \         java.naming.factory.initial=${java.naming.factory.initial} java.naming.provider.url=${java.naming.provider.url}   #2 can use the tag \ nested of , or an attribute ""jndi-environment""  \     \ \ \	       \${java.naming.factory.initial}\ \${java.naming.provider.url}\ \ \ \   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-29T03:53:07Z","2012-06-19T03:46:39Z"
"","7889","Incorrect javadoc packaging type deployed on ibiblio Maven repository [SPR-3203]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-3203](https://jira.spring.io/browse/SPR-3203?redirect=false)** and commented  Recent Spring releases have javadoc deployed on Maven repository at Ibiblio. However file names for javadoc archive aren't using Maven's standard naming convention. So, archives like spring-2.0.2-javadocs.jar  should be named spring-2.0.2-javadoc.jar (no ""s"").   ---  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: task,","spring-projects-issues","2007-02-25T04:42:30Z","2012-06-19T03:50:32Z"
"","8850","AbstractTestNGSpringContextTests should not use TestNG groups [SPR-4172]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-4172](https://jira.spring.io/browse/SPR-4172?redirect=false)** and commented  AbstractTestNGSpringContextTests uses a ""SpringTestContext"" group for the springTestContextPrepareTestInstance, springTestContextBeforeTestMethod and springTestContextAfterTestMethod methods.  I don't see how this is useful and it is very annoying when you use TestNG groups at the application level, since it forces you to specify the ""SpringTestContext"" group as a group that needs to be run -- otherwise the AbstractTestNGSpringContextTests break.  Suggestion: remove the group specifications on the methods mentioned above.   ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2007-11-27T06:32:05Z","2009-11-13T08:41:44Z"
"","8840","Setting hibernate3.LocalSessionFactoryBean.exposeTransactionAwareSessionFactory to false breaks transactional tests [SPR-4162]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-4162](https://jira.spring.io/browse/SPR-4162?redirect=false)** and commented  Setting the exposeTransactionAwareSessionFactory property on a Hibernate 3 LocationSessionFactoryBean to false will break transactional tests. Is this expected? It made me scratch my head for a while so I thought I'd report it.  For instance, the following config:           	     	     	     		...     	     	     	                    	       Will cause this test to fail:  `@ContextConfiguration`(locations = { ""classpath:beans.xml"" }) public class TestNGTest extends AbstractTransactionalTestNGSpringContextTests {      @Autowired     private SessionFactory sessionFactory;          @Test     public void testStuff() {     	sessionFactory.getCurrentSession().flush();     }  }  The same is true if you rewrite the test using classing JUnit:  public class JUnitTest extends AbstractTransactionalSpringContextTests {      private SessionFactory sessionFactory;          protected String[] getConfigLocations() {     	return new String[] { ""classpath:beans.xml"" };     }          public void setSessionFactory(SessionFactory sessionFactory) {     	this.sessionFactory = sessionFactory;     }          @Test     public void testStuff() {     	sessionFactory.getCurrentSession().flush();     }  }  The error you get is:  org.hibernate.HibernateException: No CurrentSessionContext configured! at org.hibernate.impl.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:542) at foo.bar.TestNGTest.testStuff(TestNGTest.java:19) at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:146)   ---  **Affects:** 2.5 final","closed","status: declined,","spring-projects-issues","2007-11-23T21:04:32Z","2019-01-12T16:39:33Z"
"","8839","Loading app context results in java.lang.NoSuchMethodError: org.springframework.aop.config.AopNamespaceUtils.registerAutoProxyCreatorIfNecessary [SPR-4161]","**[Erwin Vervaet](https://jira.spring.io/secure/ViewProfile.jspa?name=klr8)** opened **[SPR-4161](https://jira.spring.io/browse/SPR-4161?redirect=false)** and commented  When we upgraded our app to Spring 2.5 final we got the following error:  2007-11-20 13:37:06.271::WARN:  Failed startup of context org.mortbay.jetty.webapp.WebAppContext@167f48c{/vfp-party-webservices,C:\javadev\src\vfp.new\projects\vfp-ws\vfp-ws-party\src\main\webapp} org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from URL [jar:file:/D:/Documents%20and%20Settings/mzfhq4/.m2/repository/be/vlaanderen/fb/vfp/vfp-facade/1.0-SNAPSHOT/vfp-facade-1.0-SN APSHOT.jar!/spring/transaction-management.xml]; nested exception is java.lang.NoSuchMethodError: org.springframework.aop.config.AopNamespaceUtils.registerAutoProxyCreatorIfNecessary(Lorg/springframework/beans/factory/xml/ParserContext;Ljava /lang/Object;)V at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:385) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:313) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:290)AO  At first we thought the problem was caused by some Spring 2.0 jar file that might have lingered around on the classpath (Maven 2 ...), but that wasn't the case: all spring jars included in the app were the correct 2.5 jars. The problem went away when we changed **all** our application context xml files to use the 2.5 schemas.  Both Jetty 6 and Tomcat 6 showed the problem.  I've tried to reproduce the problem in a minimal webapp but haven't been able to do so. It must have been related to the fact that originally the app was using 2.0 schema beans files together with a classic Spring 1 DTD based beans file.   ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2007-11-23T19:57:13Z","2019-01-11T16:04:14Z"
"","8866","mergeAttributes method in ModelMap is broken [SPR-4188]","**[Erick Dovale](https://jira.spring.io/secure/ViewProfile.jspa?name=edovale)** opened **[SPR-4188](https://jira.spring.io/browse/SPR-4188?redirect=false)** and commented      public ModelMap mergeAttributes(Map attributes) {     	if (attributes != null) {     		for (Iterator it = keySet().iterator(); it.hasNext();) {     			Object key = it.next();     			if (!containsKey(key)) {     				put(key, attributes.get(key));     			}     		}     	}     	return this;     }  the for loop is looping through the key set of the current instance as opposed to loop through the attributes parameter key set.   ---  **Affects:** 2.5 final  **Attachments:** - [fix_4_SIX-4188.txt](https://jira.spring.io/secure/attachment/13163/fix_4_SIX-4188.txt) (_1.66 kB_) - [ModelMapTest.java](https://jira.spring.io/secure/attachment/13162/ModelMapTest.java) (_593 bytes_)","closed","type: bug,","spring-projects-issues","2007-11-28T13:22:06Z","2012-06-19T03:47:08Z"
"","8809","spring-aop-2.5 not uploaded to maven central repo. [SPR-4130]","**[Erick Dovale](https://jira.spring.io/secure/ViewProfile.jspa?name=edovale)** opened **[SPR-4130](https://jira.spring.io/browse/SPR-4130?redirect=false)** and commented  spring-aop-2.5.jar did not make it to the maven central repo: Here is the url where it should be: http://repo1.maven.org/maven2/org/springframework/spring-aop/2.5/spring-aop-2.5.jar   ---  **Affects:** 2.5 final  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2007-11-19T13:11:29Z","2012-06-19T03:46:41Z"
"","8767","@Controller annotated controllers can not co-exist with not annotated ones. [SPR-4088]","**[Erick Dovale](https://jira.spring.io/secure/ViewProfile.jspa?name=edovale)** opened **[SPR-4088](https://jira.spring.io/browse/SPR-4088?redirect=false)** and commented  I was not able to use new annotated controllers because somehow they conflict with existing not annotated controllers. If this is working by design then it may be appropriate to put it down in the documentation.  ---  **Affects:** 2.5 RC1  **Issue Links:** - #8765 Doc: Overriding of default values for HandlerMapping, HandlerAdapter et al. in DispatcherServlet is not obvious","closed","status: declined,","spring-projects-issues","2007-11-12T23:09:42Z","2019-01-12T16:39:40Z"
"","8719","@Autowired does not resolve LocalSessionFactoryBean [SPR-4040]","**[Erick Dovale](https://jira.spring.io/secure/ViewProfile.jspa?name=edovale)** opened **[SPR-4040](https://jira.spring.io/browse/SPR-4040?redirect=false)** and commented  When autowiring hibernate's LocalSessionFactoryBean into a test case that uses the new Test Context framework, the session factory is not found.   ---  **Affects:** 2.5 RC1  **Attachments:** - [AutowiredAnnotationDoesNotResolveLocalSessionFactoryBean.zip](https://jira.spring.io/secure/attachment/13068/AutowiredAnnotationDoesNotResolveLocalSessionFactoryBean.zip) (_24.36 kB_)","closed","in: core,","spring-projects-issues","2007-11-02T17:16:11Z","2012-06-19T03:46:45Z"
"","8037","typo in doco [SPR-3353]","**[Erick Dovale](https://jira.spring.io/secure/ViewProfile.jspa?name=edovale)** opened **[SPR-3353](https://jira.spring.io/browse/SPR-3353?redirect=false)** and commented  http://static.springframework.org/spring/docs/2.0.x/reference/new-in-2.html#new-in-2-ioc-scopes  Close to end of first paragraph read: (for want of a better word) I think it should read (for lack of a better word)   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-04-07T12:14:16Z","2012-06-19T03:50:46Z"
"","8734","add ObjectName wildcard characters support when register Notification Listeners [SPR-4055]","**[Eric Yu](https://jira.spring.io/secure/ViewProfile.jspa?name=sucode)** opened **[SPR-4055](https://jira.spring.io/browse/SPR-4055?redirect=false)** and commented  see http://forum.springframework.org/showthread.php?t=45911 I have post a simple solution.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-11-06T18:47:23Z","2012-06-19T09:36:17Z"
"","8531","Application that worked with all previous 2.0.x versions breaks in 2.0.7 [SPR-3851]","**[Eric J Schwarzenbach](https://jira.spring.io/secure/ViewProfile.jspa?name=ericjs)** opened **[SPR-3851](https://jira.spring.io/browse/SPR-3851?redirect=false)** and commented  Sorry for the vague description...can make it more specific when I can nail it down more specifically. Last tested with spring.jar from snapshot: spring-framework-2.0.7-20070906-100.    ---  **Affects:** 2.0.7  **Attachments:** - [access_log206.2007-09-08.txt](https://jira.spring.io/secure/attachment/12896/access_log206.2007-09-08.txt) (_1.79 kB_) - [access_log207.2007-09-08.txt](https://jira.spring.io/secure/attachment/12894/access_log207.2007-09-08.txt) (_142 bytes_) - [context.zip](https://jira.spring.io/secure/attachment/12897/context.zip) (_10.77 kB_) - [log206.log](https://jira.spring.io/secure/attachment/12895/log206.log) (_89.52 kB_) - [log207.xml](https://jira.spring.io/secure/attachment/12893/log207.xml) (_79.19 kB_) - [web.xml](https://jira.spring.io/secure/attachment/12891/web.xml) (_5.08 kB_) - [xms-servlet.xml](https://jira.spring.io/secure/attachment/12892/xms-servlet.xml) (_11.08 kB_)","closed","type: bug,","spring-projects-issues","2007-09-08T03:44:23Z","2019-01-11T19:16:41Z"
"","8527","theme handling in an error-page [SPR-3847]","**[Eric J Schwarzenbach](https://jira.spring.io/secure/ViewProfile.jspa?name=ericjs)** opened **[SPR-3847](https://jira.spring.io/browse/SPR-3847?redirect=false)** and commented  The way themes get resolved in an \ seems to have changed between 2.0.2 and 2.0.6, such that codes from my theme could be resolved in 2.0.2 but throw an error like the below in 2.0.6  ERROR : 2007-09-05 18:01:37,291 : org.springframework.web.servlet.tags.ThemeTag : Theme 'theme': No message found under code 'logo.src' for locale 'en_US'. javax.servlet.jsp.JspTagException: Theme 'theme': No message found under code 'logo.src' for locale 'en_US'.  I have the following in my WEB-INF\web.xml  ```       404      /404.jsp  ```  and the following WEB-INF\context\myapp\myapp-servlet.xml  ```          ```  The codes from this theme get resolve fine when used in other jsp pages, but in my 404.jsp it throws the above error.  From the debugger, putting a breakpoint on org.springframework.web.servlet.tags.MessageTag.resolveMessage()  I can see that requestContext.theme.name has a value of ""theme"" rather than ""mytheme"" (as it does when I intercept this call from other of my jsp pages).  I've verified this in both versions. Despite this, 2.0.2 still manages to resolve the code...I even followed it down into ResourceBundleMessageSource.resolveCodeWithoutArguments whose basenames definitely contained 'theme' not 'mytheme', but still came back with the expected value form mytheme.properties.   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: bug,","spring-projects-issues","2007-09-05T09:13:48Z","2019-01-11T19:16:57Z"
"","8526","overzealous switching of logging to debug [SPR-3846]","**[Eric J Schwarzenbach](https://jira.spring.io/secure/ViewProfile.jspa?name=ericjs)** opened **[SPR-3846](https://jira.spring.io/browse/SPR-3846?redirect=false)** and commented  (I may not have chosen the right component)  The comment about logging messages changed to debug in #8164 alerted me to this (I'm trying to debug a theme problem in my app right now whose behavior differs using sping 2.0.2 and 2.0.6). Specifically the message in  org.springframework.ui.context.support.UiApplicationContextUtils  which currently looks like:  logger.debug(""Unable to locate ThemeSource with name '"" + THEME_SOURCE_BEAN_NAME + ""': using default ["" + themeSource + ""]"");  Really ought to be an INFO message (if not even a WARN) as it was in the past. I think this is true also of some of the other messages that were converted in the same pass, such as ""Using ThemeSource...""  ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-09-05T02:40:55Z","2019-01-11T19:17:43Z"
"","8462","When needed XSD is not found due to missing jar, confusing errors are thrown [SPR-3782]","**[Eric J Schwarzenbach](https://jira.spring.io/secure/ViewProfile.jspa?name=ericjs)** opened **[SPR-3782](https://jira.spring.io/browse/SPR-3782?redirect=false)** and commented  (BTW your Sun JVM drop down does not have version 1.6, and your Tomcat dropdown does not have version 6)  I ran into this problem when deciding to change my app to not use the mongo spring.jar but just the individual modules it needed. I satisfied the compiler but got errors on startup, like  WARN : 2007-08-17 17:43:03,833 : org.springframework.beans.factory.xml.XmlBeanDefinitionReader : Ignored XML validation warning org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'http://www.springframework.org/schema/jee/spring-jee-2.0.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not . at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source) etc followed by, ERROR : 2007-08-17 17:43:03,933 : org.springframework.web.context.ContextLoader : Context initialization failed org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Failed to import bean definitions from URL location [classpath:xms/datasource-context.xml] Offending resource: ServletContext resource [/WEB-INF/classes/xms/application-context.xml]; nested exception is org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 35 in XML document from class path resource [xms/datasource-context.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'jee:jndi-lookup'.  Note the first message ""Failed to read schema document 'http://www.springframework.org/schema/jee/spring-jee-2.0.xsd',"" is erroneous, as I could access that URL fine, I am guessing that your custom resolver was redirecting from that URL which is explicitly in the schemaLocation of the xml files to the find the xsd in your jars instead, but when failing is still reporting the URL that it is NOT actually using.  The problem was resolved by added spring-remote.jar to my webapp lib, I assume because it contains spring-jee-2.0.xsd. I wasted much time trying to chase this down.  Spring ought to detect this and report more clearly what the problem is.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-08-17T08:49:38Z","2012-06-19T03:50:29Z"
"","8126","Form tag library should support custom HTML rendering [SPR-3443]","**[Eric Hauser](https://jira.spring.io/secure/ViewProfile.jspa?name=ewhauser)** opened **[SPR-3443](https://jira.spring.io/browse/SPR-3443?redirect=false)** and commented  There is no way to use templates or custom HTML for the rendering of form tags.  For similar concepts, see this feature in Struts 2 through the use of templates (http://struts.apache.org/2.x/docs/themes-and-templates.html) and ASP.NET through CSS Control Adapters (http://weblogs.asp.net/scottgu/archive/2006/05/02/CSS-Control-Adapter-Toolkit-for-ASP.NET-2.0-.aspx).  A template system could be implemented later if a hook was provided for specifying a custom HTML rendering class.  Specifically, an interface should be provided that provides the path name to two methods for inserting HTML before/after the rendering of the form HTML.   The class could be registered through either a servlet context parmaeter or through themes.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-05-02T11:06:16Z","2012-06-19T09:37:44Z"
"","7914","CachedIntrospectionResults is not thread-safe, but should be [SPR-3228]","**[Eric Crampton](https://jira.spring.io/secure/ViewProfile.jspa?name=ericcrampton)** opened **[SPR-3228](https://jira.spring.io/browse/SPR-3228?redirect=false)** and commented  CachedIntrospectionResults isn't thread-safe. It appears that some effort was put into **making** it thread-safe.  The class contains a final Set (acceptedClassLoaders) and a final Map (classCache), both of which are wrapped with the corresponding Collections.synchronizedXXX methods. There are various places in CachedIntrospectionResults where these collections are iterated upon without synchronizing during the iteration. Thus, if one of the other methods is invoked in a different thread during that iteration, a ConcurrentModificationException will be thrown.  This problem could be exposed by org.springframework.web.util.IntrospectorCleanupListener. This calls acceptClassLoader and clearClassLoader when contexts are initialized or destroyed. If the container happens to be destroying a context with a lot of classes in its classloader and, at the same time, another context is created, this will result in an exception.  I'm not sure how else this flaw might be exposed.    ---  **Affects:** 2.0.2","closed","in: core,","spring-projects-issues","2007-03-02T02:52:13Z","2012-06-19T03:50:30Z"
"","8544","Make FreeMarker macros for select input LinkedHashMap friendly [SPR-3864]","**[Eric Bottard](https://jira.spring.io/secure/ViewProfile.jspa?name=eric.bottard)** opened **[SPR-3864](https://jira.spring.io/browse/SPR-3864?redirect=false)** and commented  The freemarker macros that generate inputs of the type \ such as formSingleSelect iterate on options?keys. This is technically correct, but it would be nice to iterate on entries as this is what is ordered in LinkedHashMaps. This would allow to easily display options in label order.  Please note that using a SortedMap does not work, as one often wants values ordering (what is diplayed) rather then key ordering.  Hope this RFE makes sense.   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-09-11T23:20:18Z","2019-01-13T08:07:28Z"
"","8341","CustomCollectionEditor.setValue() experiences a null pointer error when all check boxes in 0-many relation are deselected and posted. [SPR-3660]","**[Eliot Clingman](https://jira.spring.io/secure/ViewProfile.jspa?name=eliotc)** opened **[SPR-3660](https://jira.spring.io/browse/SPR-3660?redirect=false)** and commented  In Spring MVC, If a collection is bound to a command object via a group of checkboxes, say, and all the checkboxes are unchecked by the user, then upon posting the CustomCollectionEditor.setValue(Object element) method will be invoked with a null element, and thus suffer a null pointer exception.  My workaround is to extend the class, overwriting the method as follows:      // Deal with null collections (i.e. create a collection when null)     if (element == null) {          super.setValue(createCollection(this.collectionType, 1));     } else {          super.setValue(element);     }    ---  **Affects:** 2.0.2","closed","in: web,","spring-projects-issues","2007-07-05T13:15:04Z","2019-01-11T18:35:57Z"
"","8644","MultipartHttpServletRequest cannot handle multiple file inputs with same name-attribute [SPR-3964]","**[Eirik Lygre](https://jira.spring.io/secure/ViewProfile.jspa?name=elygre)** opened **[SPR-3964](https://jira.spring.io/browse/SPR-3964?redirect=false)** and commented  MultipartHttpServletRequest tracks and exploses uploaded files in a java.util.Map (through setMultipartFiles() and getFileMap()), with the key of the map being the name-attribute from the html-form. This means that files uploaded from the html-code will only ever show a single file, even though the user may have selected more than one:  ... \ \ \ ...  I haven't found anything in the relevant standard (rfc1867 et al) that prohibits this, and indeed the underlying Jakarta Commons FileUpload infrastructure supports this through it's use of a List rather than a Map.   --- No further details from [SPR-3964](https://jira.spring.io/browse/SPR-3964?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-10-05T21:37:14Z","2012-06-19T03:47:14Z"
"","8792","SimpleJdbcUpdate fails on compile query for table with single autoincrement field [SPR-4113]","**[Eduard Dudar](https://jira.spring.io/secure/ViewProfile.jspa?name=edudar)** opened **[SPR-4113](https://jira.spring.io/browse/SPR-4113?redirect=false)** and commented  Hi Spring team. Here is code that produces exception listed below.  \ private SimpleJdbcInsert delegate; /** * Creates new instance of the object and initializes it with given data * source. *  * `@param` ds *         {@link DataSource} instance to run object on.  */ public InsertPrincipal(DataSource ds) { this.delegate = new SimpleJdbcInsert(ds).withTableName(""principal"").usingColumns(""id"").usingGeneratedKeyColumns(""id""); this.delegate.compile(); Number n = this.delegate.executeAndReturnKey(Collections.singletonMap(""id"", null)); } \  Here is SQL statement for database table: CREATE TABLE  `principal` ( `id` bigint(20) NOT NULL auto_increment, PRIMARY KEY  (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  Exception thrown in compile method: 2007-11-16 14:41:14,377 ERROR: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'x': Autowiring of methods failed; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: Unable to locate columns for table principal at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:233) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:986) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:519) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:404) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:735) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:245) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:188) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3764) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4216) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:760) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:740) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:544) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:553) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:488) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1138) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:120) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1022) at org.apache.catalina.core.StandardHost.start(StandardHost.java:736) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:448) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:552) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433) Caused by: org.springframework.dao.InvalidDataAccessApiUsageException: Unable to locate columns for table principal at org.springframework.jdbc.core.metadata.TableMetaDataContext.createInsertString(TableMetaDataContext.java:291) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.compileInternal(AbstractJdbcInsert.java:257) at org.springframework.jdbc.core.simple.AbstractJdbcInsert.compile(AbstractJdbcInsert.java:240) ... at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredElement.inject(AutowiredAnnotationBeanPostProcessor.java:372) at org.springframework.beans.factory.annotation.InjectionMetadata.injectMethods(InjectionMetadata.java:69) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:230) ... 36 more  Thanks in advance for resolving this issue.   ---  **Affects:** 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-11-15T22:48:39Z","2019-01-11T16:00:27Z"
"","8125","getPackage() returns null for classes loaded by ShadowingClassLoader [SPR-3442]","**[Ed Ward](https://jira.spring.io/secure/ViewProfile.jspa?name=eddybongo)** opened **[SPR-3442](https://jira.spring.io/browse/SPR-3442?redirect=false)** and commented  Please refer to the description I provided in the support forum, which includes a fix for the issue     ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-05-02T09:48:54Z","2012-06-19T03:50:31Z"
"","8869","Document how to use Qualifiiers with @Component [SPR-4191]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-4191](https://jira.spring.io/browse/SPR-4191?redirect=false)** and commented  The documentation does not say how to use Qualifiers with `@Component` annotated classes. This should go into 3.10 (Annotation based configuration) or 3.11 (Classpath scanning for beans). Basically the `@Component` annotated class also is annotated with the qualifier annotations.   ---  **Affects:** 2.5 final","closed","type: documentation,","spring-projects-issues","2007-11-28T20:33:16Z","2012-06-19T03:46:56Z"
"","8849","@Transaction for Test Suites does not work [SPR-4171]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-4171](https://jira.spring.io/browse/SPR-4171?redirect=false)** and commented  The `@Transaction-Annotation` for a test case is taken into account if the test is directly executed not when executed in a suite.  Example:  `@RunWith`(SpringJUnit4ClassRunner.class) `@ContextConfiguration`(locations={""/test.xml""}) `@Transactional` public class SpringTestCase  { }  public class CustomerDAOTest extends SpringTestCase { `@Test` public void testCustomerDAOName() throws Exception { } }  `@RunWith`(Suite.class) `@Suite`.SuiteClasses( {  CustomerDAOTest.class }) public class AllTests { }  Result: CustomerDAOTest itself works, the AllTests-Suite not.   ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2007-11-27T02:49:31Z","2019-01-11T16:03:54Z"
"","8803","Deadlock in JMS while ApplicationContext shutdown [SPR-4124]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-4124](https://jira.spring.io/browse/SPR-4124?redirect=false)** and commented  While Spring shuts down a DefaultMessageListenerContainer the JMS Connection is closed. This in turn closes the JMS Sessions as can be seen in the thread dump for Thread-2. The JMS specification says that a close() on a JMS Connection means that you don't need to close the sessions, producers and consumers of a closed connection. However, the AsyncMessageListenerInvoker notices that it is shut down and tries to close its JMS Session (messageListenerContainer-1 thread). For this the JMS Connection is needed.  This leads to a deadlock: Thread-2 has the JMS Connection and tries to acquire the lock on the JMS Session to close it. messageListenerContainer-1 has the JMS Session but tries to acquire the lock on the JMS Connection. Voila - deadlock.  This happens using Oracle Advanced Queueing 9i but it is suspected to happen on IBM WebSphere MQ 6.0 and 5.3. This is outside an Application Server i.e. oracle.jms.AQjmsFactory  is used and the Destinations are resolved by name.  Here is the thread dump:  Found one Java-level deadlock:  ---  ""Thread-2"": waiting to lock monitor 002f1578 (object 69aa96f0, a oracle.jms.AQjmsSession), which is held by ""messageListenerContainer-1"" ""messageListenerContainer-1"": waiting to lock monitor 002f15f8 (object 69a9c488, a oracle.jms.AQjmsConnection), which is held by ""Thread-2""  Java stack information for the threads listed above:  ---  ""Thread-2"": at oracle.jms.AQjmsSession.closeSessionResources(AQjmsSession.java) - waiting to lock  (a oracle.jms.AQjmsSession)   at oracle.jms.AQjmsSession.close(AQjmsSession.java)   at oracle.jms.AQjmsConnection.closeConnectionResources(AQjmsConnection.java) - locked  (a oracle.jms.AQjmsConnection)   at oracle.jms.AQjmsConnection.close(AQjmsConnection.java) - locked  (a oracle.jms.AQjmsConnection)   at org.springframework.jms.connection.ConnectionFactoryUtils.releaseConnection(ConnectionFactoryUtils.java:80)   at org.springframework.jms.listener.AbstractJmsListeningContainer.shutdown(AbstractJmsListeningContainer.java:302) - locked  (a java.lang.Object)   at org.springframework.jms.listener.AbstractJmsListeningContainer.destroy(AbstractJmsListeningContainer.java:264)   at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:146)   at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:344)   at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:317)   at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:290) - locked  (a java.util.LinkedHashMap)   at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:706)   at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:684)   at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:621)   ""messageListenerContainer-1"":   at oracle.jms.AQjmsConnection.removeJmsSession(AQjmsConnection.java) - waiting to lock  (a oracle.jms.AQjmsConnection)   at oracle.jms.AQjmsSession.closeSessionResources(AQjmsSession.java) - locked  (a oracle.jms.AQjmsSession)   at oracle.jms.AQjmsSession.close(AQjmsSession.java)   at org.springframework.jms.support.JmsUtils.closeSession(JmsUtils.java:104)   at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.clearResources(DefaultMessageListenerContainer.java:899)   at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:864)   at java.lang.Thread.run(Thread.java:595)  Found 1 deadlock.  ---  **Affects:** 2.0.7  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","in: core,","spring-projects-issues","2007-11-19T02:15:27Z","2019-01-13T22:41:14Z"
"","8713","Exporting / Importing beans across ApplicationContexts [SPR-4034]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-4034](https://jira.spring.io/browse/SPR-4034?redirect=false)** and commented  Spring JavaConfig allows to only export beans that are created by a public method. This allows for nice modularization of applications by using one JavaConfig class for each component and export the interface of the module only. Such a feature would be nice for XML based configuration as well. I can imagine it as some special way of handling \. An alternative would be an enhacement for the SingletonBeanFactory locator that allows you to define the beans that should be exported in the Spring configuration that includes the BeanFactories that might be accessed. Maybe there are other good possibilities as well.  ---  **Issue Links:** - #11829 Support `@Bean` method visibility  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-11-01T22:35:34Z","2019-01-13T08:06:55Z"
"","8683","before ? [SPR-4003]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-4003](https://jira.spring.io/browse/SPR-4003?redirect=false)** and commented  The reference manual in section 3.2.2.1. states:  Any \ elements must be placed before \ elements in the file doing the importing.  This seems to be wrong, import works in the other order (\ after \).   ---  **Affects:** 2.0.7, 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-10-24T02:16:21Z","2012-06-19T03:47:20Z"
"","8322","ApplicationEvent across JVM using JMS [SPR-3641]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-3641](https://jira.spring.io/browse/SPR-3641?redirect=false)** and commented  There should be a way to transparently propagate ApplicationEvents from one JVM to another using JMS. That should be a good fit as both are messages that are send to some subscribers - only ApplicationEvents are propagated in one JVM only.  ---  **Issue Links:** - #15244 Add new ClusteredApplicationEvent extends ApplicationEvent with multicaster that uses JMS to distribute messages  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-07-02T07:46:09Z","2019-01-11T18:32:58Z"
"","8122","Reconfiguration of Spring Beans [SPR-3439]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-3439](https://jira.spring.io/browse/SPR-3439?redirect=false)** and commented  I would like to see a possibility to reconfigure Spring Beans. I am asked about that feature constantly. I discussed that with Jürgen. Some points to note:  - The syntax should be similiar to the PropertyOverrideConfigurer i.e. name of the Spring Bean, the property and the value - It could load the properties from a .properties file that it pulls at certain points in time (using the Spring Timer abstraction or JMX probably). The advantage is that the properties file can also be loaded at application startup i.e. the changes are not lost. - For singletons it should set the new value. - For prototypes it should change the BeanDefinition accordingly. This seems to be a major issue because the access to BeanDefinitions is not synchronized at the moment.  Of course it is up to the Spring Beans itself to react in a proper way if a property is changed.   ---  8 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2007-05-01T21:50:53Z","2019-01-12T02:39:00Z"
"","8055","BeanNameUrlHandlerMapping conflicts with XmlViewResolver [SPR-3371]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-3371](https://jira.spring.io/browse/SPR-3371?redirect=false)** and commented  BeanNameUrlHandlerMapping leads to a 404 if using an XmlViewResolver with Spring MVC 2.0.4 .  There is a ZIP with a Maven project attached.  To reproduce the bug: - Start the project with   mvn jetty:run  - open http://localhost:8080/web  - click on the link  - result: 404  - You can ""fix"" the problem by using version 2.0.3 of spring-webmvc in pom.xml .  - You can ""fix"" the problem by excluding the XmlViewResolver in src/main/webapp/WEB-INF/springbuchweb-servlet.xml .  - There is a log4j.properties in src/main/resources/log4j.properties that you can use to change the log-level.  - The bug is also verified on Apachte Tomcat 5.5.20 .    ---  **Affects:** 2.0.4  **Attachments:** - [HandlerTest.zip](https://jira.spring.io/secure/attachment/12531/HandlerTest.zip) (_11.51 kB_)","closed","type: bug,","spring-projects-issues","2007-04-12T20:18:41Z","2012-06-19T03:50:33Z"
"","7930","Maven leads to StackOverflowError for AbstractJpaTests [SPR-3245]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-3245](https://jira.spring.io/browse/SPR-3245?redirect=false)** and commented  AbstractJpaTest leads to an StackOverflowError if used with Maven.  - childDelegationMode true did not help - forkMode perTest did not help - error is present if using mvn test or running the test from inside Eclipse  Battery: base.BestellungMitJPATest  ---  Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 2,772 sec  testNothing(base.BestellungMitJPATest)  Time elapsed: 2,726 sec","closed","in: core,","spring-projects-issues","2007-03-09T03:58:16Z","2019-01-13T22:43:56Z"
"","7891","HTML escaping should be the default for form tags [SPR-3205]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-3205](https://jira.spring.io/browse/SPR-3205?redirect=false)** and commented  The HTML escaping is false as a default and can optionally be set to true. This should really be the other way around, otherwise vulerabilities such as script injection etc. can take place. It is therefore unnecessarily insecure.  ---  **Affects:** 2.0.1  **Issue Links:** - #7507 xml escaping (_**""depends on""**_)  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-26T01:13:50Z","2019-01-11T17:15:50Z"
"","8762","Support for Andriod in Spring [SPR-4083]","**[Dushyanth](https://jira.spring.io/secure/ViewProfile.jspa?name=idushy)** opened **[SPR-4083](https://jira.spring.io/browse/SPR-4083?redirect=false)** and commented  The API for Open Handset Alliance's Android platform http://www.openhandsetalliance.com/ was released. It is hosted at http://code.google.com/android/  Given the scope of this project, it makes sense to have development support in Spring. This opens up Spring to a whole new deployment platform - the mobile space.   ---  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2007-11-12T07:01:00Z","2019-01-12T05:34:10Z"
"","8481","JdbcTemplate().update(String sql, Object[] args) drops SQL type information of SqlParameterValue arguments. [SPR-3801]","**[Dov Wasserman](https://jira.spring.io/secure/ViewProfile.jspa?name=dovwas)** opened **[SPR-3801](https://jira.spring.io/browse/SPR-3801?redirect=false)** and commented  I was running into the problem aptly reported by Matthew Sgarlata in JIRA ticket #5027, where calling jdbcTemplate.update(""select ..."", new Object[] {arg1, arg2, ... }) was throwing an exception when one of the update parameter values was a null Java object. The workaround described there (back in the fall of 2004) were to use the overloaded update() method which takes a 3rd parameter which is a list of all the argument types. I was dealing with a large SQL update of 32 parameters, and didn't like the idea of 2 lists of 32 elements each inside one method invocation. Any changes needed to this parameter list would need to be carefully performed to both lists, and this seemed like a too fragile approach. Also, some of the 32 parameters could benefit by added type information, but many didn't need it.  A solution seemed to be lying right in front of me when I reread the documentation for the method jdbcTemplate.update(String sql, Object[] args). http://www.springframework.org/docs/api/org/springframework/jdbc/core/JdbcTemplate.html#update(java.lang.String,%20java.lang.Object[]) It says that the args list:      ""... may also contain SqlParameterValue objects which indicate not only the argument value but also the SQL type and optionally the scale.""  However, when I wrapped all my argument values as SqlParameterValue object with the appropriate SQL type, I saw the same exception being thrown. This exception is caused by my JDBC driver (Oracle ojdbc.jar, for Oracle server version 8 and 9) not knowing how to set a null without knowing the SQL data type. So the bug I'm reporting is that even though I specified the type as java.sql.Types.VARCHAR, Spring did not pass this information to the JDBC driver, thus exposing it's own bug (which was fixed in a later driver release, but I'm stuck with an old version of Oracle, so I can't take advantage of it).  When I followed the code, I see that JdbcTemplate simply wraps the args array in a new ArgPreparedStatementSetter object, which then uses the args array in a subsequent call to setValues(PreparedStatement ps). In that callback method, for each element of the argument array it calls:  StatementCreatorUtils.setParameterValue(ps, i + 1, SqlTypeValue.TYPE_UNKNOWN, null, this.args[i]);  Specifically, it specifies the SQL type of the argument as the Spring-specific TYPE_UNKNOWN. In the body of StatementCreatorUtils.setParameterValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Object inValue), the sqlType argument is respected, but the args array element object, here known as inValue, in never checked for possibly being a subtype of SqlParameter or SqlParameterValue, so the type information passed into Spring is lost.  My own workaround was to create a new PreparedStatementSetter type called ParamTypeSetter, based on the non-public Spring class org.springframework.jdbc.core.ArgTypePreparedStatementSetter. My version adds a one argument constructor which takes the Object[] args that's passed in from the application code. It extracts the real argument values and types, by checking if the argument element is a SqlParameterValue object, and if not, treating the type as TYPE_UNKNOWN, as in StatementCreatorUtils.setParameterValue(). There is probably a more elegant fix, but this worked well for me. Now, on an update() with null parameter values, the Oracle driver knows the parameter's SQL datatype and correctly sets the field to NULL.  In case it turns out to be helpful, here is the class I wrote to workaround the existing limitations:  /* * Copyright 2002-2006 the original author or authors. * ... (rest of header elided)   */  package com.ish.dao.jdbc.template;  import java.sql.PreparedStatement; import java.sql.SQLException; import java.sql.Types; import java.util.Collection; import java.util.Iterator;  import org.springframework.dao.InvalidDataAccessApiUsageException; import org.springframework.jdbc.core.ParameterDisposer; import org.springframework.jdbc.core.PreparedStatementSetter; import org.springframework.jdbc.core.SqlParameterValue; import org.springframework.jdbc.core.SqlTypeValue; import org.springframework.jdbc.core.StatementCreatorUtils;  /** * Simple adapter for PreparedStatementSetter that applies given arrays of arguments and JDBC argument types.  *   \ * Adapted from Spring's non-public class  * \org.springframework.jdbc.core.ArgTypePreparedStatementSetter\.  *   \ * TODO: support arg type names.  *   * `@author` Juergen Hoeller  * `@author` Dov Wasserman   */   public class ParamTypeSetter implements PreparedStatementSetter, ParameterDisposer {    private final Object[] args;    private final int[] argTypes;    // /////////////////////////////////////////////////////////////////   // Constructors   // /////////////////////////////////////////////////////////////////    /**    * `@param` args    *           each argument element can be a regular argument value, or can be an    *           SqlParameterValue object, in which case the corresponding argument    *           type is taken from that object, otherwise the type is considered unknown.    */   public ParamTypeSetter(Object[] args) {   this(extractArguments(args), extractArgTypes(args));   }    /**    * Create a new ParamTypeSetter for the given arguments of the given types; the array lengths must match; empty or null is allowed   *    * `@param` args   * `@param` argTypes     */     private ParamTypeSetter(Object[] args, int[] argTypes) {     if ((args != null && argTypes == null) || (args == null && argTypes != null)     || (args != null && args.length != argTypes.length)) {     throw new InvalidDataAccessApiUsageException(     ""args and argTypes parameters must match"");     }     this.args = args;     this.argTypes = argTypes;     }    // /////////////////////////////////////////////////////////////////   // PreparedStatementSetter Methods   // /////////////////////////////////////////////////////////////////    public void setValues(PreparedStatement ps) throws SQLException {   int argIndx = 1;   if (this.args != null) {   for (int i = 0; i < this.args.length; i++) {   Object arg = this.args[i];   if (arg instanceof Collection && this.argTypes[i] != Types.ARRAY) {   Collection entries = (Collection) arg;   for (Iterator it = entries.iterator(); it.hasNext();) {   Object entry = it.next();   StatementCreatorUtils.setParameterValue(ps, argIndx++,   this.argTypes[i], null, entry);   }   }   else {   StatementCreatorUtils.setParameterValue(ps, argIndx++,   this.argTypes[i], null, arg);   }   }   }   }    public void cleanupParameters() {   StatementCreatorUtils.cleanupParameters(this.args);   }    // /////////////////////////////////////////////////////////////////   // Protected Methods   // /////////////////////////////////////////////////////////////////    protected static Object[] extractArguments(Object[] inArgs) {   if (inArgs == null || inArgs.length == 0) {   return new Object[0];   }   Object[] outArgs = new Object[inArgs.length];         for (int i = 0; i < inArgs.length; i++) {        	Object inArg = inArgs[i];        	Object outArg;        	if (inArg instanceof SqlParameterValue) {        		SqlParameterValue param = (SqlParameterValue) inArg;        		outArg = param.getValue();        	}        	else {        		outArg = inArg;        	}               	outArgs[i] = outArg;        }               return outArgs;    }    protected static int[] extractArgTypes(Object[] args) {   if (args == null || args.length == 0) {   return new int[0];   }         int[] argTypes = new int[args.length];               for (int i = 0; i < args.length; i++) {        	Object arg = args[i];        	int argType;        	if (arg instanceof SqlParameterValue) {        		SqlParameterValue param = (SqlParameterValue) arg;        		argType = param.getSqlType();        	}        	else {        		argType = SqlTypeValue.TYPE_UNKNOWN;        	}               	argTypes[i] = argType;        }               return argTypes;    }  }  ---  **Affects:** 2.0 final","closed","in: core,","spring-projects-issues","2007-08-23T11:00:00Z","2019-01-11T19:13:07Z"
"","7979","TransactionProxyFactoryBean cannot be made non-singleton [SPR-3294]","**[Doug Satchwell](https://jira.spring.io/secure/ViewProfile.jspa?name=dougsatch)** opened **[SPR-3294](https://jira.spring.io/browse/SPR-3294?redirect=false)** and commented  If I have a bean X I can make it non-singleton by setting singleton=""false"".  If I then wrap bean X in a TransactionProxyFactoryBean, the TransactionProxyFactoryBean ignores the setting and always returns a singleton.  Moreover, setting singleton=""false"" or \ causes an exception to be thrown when Spring initialises.   ---  **Affects:** 1.2.8","closed","status: declined,","spring-projects-issues","2007-03-23T03:26:53Z","2019-01-12T16:40:17Z"
"","7978","Exponential increase in initialisation time with TransactionProxyFactoryBean and default-autowire=""autodetect""  [SPR-3293]","**[Doug Satchwell](https://jira.spring.io/secure/ViewProfile.jspa?name=dougsatch)** opened **[SPR-3293](https://jira.spring.io/browse/SPR-3293?redirect=false)** and commented  With default-autowire=""autodetect"", wrapping a bean in a TransactionProxyFactoryBean causes lots of exceptions to be thrown, which are all ignored and appear relatively harmless but it takes a longer time for the webapp to startup.  As more beans are wrapped in the TransactionProxyFactoryBean, it takes exponentially longer for Tomcat to start up:  0 beans: 7 seconds 1 bean: 7.5 s 2 beans: 15 s 3 beans: > 45 s 4 beans: all hell breaks loose!  See http://forum.springframework.org/showthread.php?p=109181#post109181 for details on the issue - including configuration, timings and log output.    ---  **Affects:** 1.2.8","closed","in: core,","spring-projects-issues","2007-03-23T03:20:35Z","2019-01-12T16:40:18Z"
"","7906","AbstractEnterpriseBean implementation details impede the creation of an AbstractEntityBean class [SPR-3220]","**[Doug Bateman](https://jira.spring.io/secure/ViewProfile.jspa?name=dougbateman)** opened **[SPR-3220](https://jira.spring.io/browse/SPR-3220?redirect=false)** and commented  Let's assume for a moment that someone somewhere (like me) has one of the rare but legit cases where an EJB 2.0 style Entity Bean would be appropriate.  Naturally, I want this Entity Bean to be able to use Spring's EJB support to obtain references to the resources the bean needs, such as a reference to the DAO implementation to use to do the actual load and save of the data.  Since Spring doesn't provide an AbstractEntityBean that makes available the beanFactoryReference logic in AbstractEnterpriseBean, naturally I need to write one.  However, there are a series of problems in how AbstractEnterpriseBean is written that interfere with successfully doing so:  (a) AbstractEnterpriseBean is package scope, so I can't create an AbstractEntityBean subclass unless we put that subclass in the org.springframework.ejb.support package.  (b) AbstractEnterpriseBean.ejbRemove() calls unloadBeanFactory() which is incorrect in the lifecycle on EntityBean since ejbRemove means ""delete from database and return to the entity pool"" rather than ""session bean is going out of service"".  This implementation of ejbRemove() should be relocated to AbstractSessionBean instead.  For entityBeans the call to unloadBeanFactory() should be in unsetEntityContext() instead.  (c) AbstractEnterpriseBean.loadBeanFactory() is package scope.  (d) AbstractEnterpriseBean relies on the subclasses to invoke loadBeanFactory() at the appropriate phase in the lifecycle.  Unfortunately, no such entry point exists in the lifecycle of an EntityBean since the ""resource managers"" are unavailable in setEntityContext() and user supplied ejbHome() methods may be invoked long before ejbActivate() or ejbCreate().  A superior solution would be to lazily invoke loadBeanFactory() from getBeanFactory() if the bean factory hasn't yet been initialized.  This would also have the nice benefit of eliminating the need for an ""onEjbCreate()"" in AbstractSessionBean (since ejbCreate() wouldn't need to call loadBeanFactory() anymore).  So here are the ultimate questions: (a) Can the limitations in AbstractEnterpriseBean listed above be fixed in a future release of Spring? (b) Is there any chance of including AbstractEntityBean in a future spring release?  and (c) If I were to take the time to prepare a patch which fixes the issues above, would you likely want it (assuming it was quality)?  Regards, Doug  P.S. The relevent support forum thread where this issue was first raised and a JIRA post suggested is: http://forum.springframework.org/showthread.php?t=35486   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-28T03:41:14Z","2012-06-19T09:37:30Z"
"","8737","Implement Jython support in spring-scripting [SPR-4058]","**[Donnchadh O Donnabhain](https://jira.spring.io/secure/ViewProfile.jspa?name=donnchadh)** opened **[SPR-4058](https://jira.spring.io/browse/SPR-4058?redirect=false)** and commented  Jason Briggs has implemented Jython and Rhino integration. See http://www.briggs.net.nz/log/2007/11/01/scripting-in-spring/ .  Source code is available in a mercurial repository at http://www.briggs.net.nz/hg/spring-script .  ---  **Affects:** 2.5 RC1  **Issue Links:** - #13639 Support script evaluation declaration (not just for backing beans)  5 votes, 7 watchers","closed","status: bulk-closed,","spring-projects-issues","2007-11-06T23:06:00Z","2019-01-12T02:38:45Z"
"","8043","Error in BeanWrapperImpl.setPropertyValue for nested paths for primitive wrapper types such as integer [SPR-3359]","**[Donnchadh O Donnabhain](https://jira.spring.io/secure/ViewProfile.jspa?name=donnchadh)** opened **[SPR-3359](https://jira.spring.io/browse/SPR-3359?redirect=false)** and commented  Here is a simple test case:  Object testObject = new Object() { public Object getNestedObject() { return new Object() { Integer value = 0;              public void setIntValue(Integer value) {                 this.value = value;             }                          public Integer getIntValue() {                 return value;             }         };     }  }; new org.springframework.beans.BeanWrapperImpl(testObject).setPropertyValue(""nestedObject.intValue"", ""1"");  Note that it works for primitive types as it resorts to using java.beans.PropertyEditorManager.findEditor  Looking at the spring sources: In PropertyEditorRegistrySupport, should there not be a line to copy defaultEditorsActive? /** * Copy the default editors registered in this instance to the given   target registry. * `@param` target the target registry to copy to   */   protected void copyDefaultEditorsTo(PropertyEditorRegistrySupport target) {   target.defaultEditors = this.defaultEditors;   }  ---  **Affects:** 2.0.4  **Issue Links:** - #8074 Bean nested properties generates exception at initialization time (_**""is duplicated by""**_) - #8132 AbstractFormController: binding of boolean inside a list does not work anymore in spring 2.0.4. in opposite to 2.0.3 (_**""is duplicated by""**_) - #8107 Nested BeanWrapperImpl may not have the default editors active. (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2007-04-10T22:52:22Z","2019-01-11T18:16:10Z"
"","8662","RmiInvocationWrapper  created by JndiRmiServiceExporter should implement Referenceable [SPR-3982]","**[Dominique Jean-Prost](https://jira.spring.io/secure/ViewProfile.jspa?name=djeanprost)** opened **[SPR-3982](https://jira.spring.io/browse/SPR-3982?redirect=false)** and commented  I tried to expose a business service object using the JndiRmiServiceExporter, but when starting up the context I receive a NotSerialzableException on the RmiInvocationWrapper class.  Caused by: javax.naming.CommunicationException [Root exception is java.io.NotSerializableException: org.springframework.remoting.rmi.RmiInvocationWrap per] at org.jnp.interfaces.NamingContext.rebind(NamingContext.java:507) at org.jnp.interfaces.NamingContext.rebind(NamingContext.java:462) at javax.naming.InitialContext.rebind(InitialContext.java:367) at org.springframework.jndi.JndiTemplate$3.doInContext(JndiTemplate.java:186) at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:85) at org.springframework.jndi.JndiTemplate.rebind(JndiTemplate.java:184) at org.springframework.remoting.rmi.JndiRmiServiceExporter.rebind(JndiRmiServiceExporter.java:134) at org.springframework.remoting.rmi.JndiRmiServiceExporter.prepare(JndiRmiServiceExporter.java:122) at org.springframework.remoting.rmi.JndiRmiServiceExporter.afterPropertiesSet(JndiRmiServiceExporter.java:105) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1143 ) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1110) ... 79 more Caused by: java.io.NotSerializableException: org.springframework.remoting.rmi.RmiInvocationWrapper at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1081) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302) at java.rmi.MarshalledObject.\(MarshalledObject.java:92) at org.jnp.interfaces.MarshalledValuePair.\(MarshalledValuePair.java:50) at org.jnp.interfaces.NamingContext.rebind(NamingContext.java:489) ... 89 more  ---  **Affects:** 2.0.3  **Issue Links:** - #9117 Serialization warning when use SpringContextResourceAdapter in Weblogic 9.2  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2007-10-16T19:19:43Z","2019-01-11T21:18:13Z"
"","8280","Bug in documentation. ""JdoDaoSupport - super class for JDBC data access objects."" [SPR-3598]","**[Dmitry](https://jira.spring.io/secure/ViewProfile.jspa?name=dimmik)** opened **[SPR-3598](https://jira.spring.io/browse/SPR-3598?redirect=false)** and commented  In PDF and HTML docs at least of 2.0.4 and 2.1 M1, on page 201 of PDF doc (pp 10.3. Consistent abstract classes for DAO support), text ""JdoDaoSupport - super class for JDBC data access objects."" seems to be error. It looks like ""JdoDaoSupport - super class for JDO data access objects."" will be better choise.   ---  **Affects:** 2.0.4, 2.1 M2","closed","type: bug,","spring-projects-issues","2007-06-17T18:30:38Z","2012-06-19T03:50:45Z"
"","8529","Untranslated UnexpectedRollbackException caused by JPA Integrity violation Exception due to deferred operations in MS SQL [SPR-3849]","**[Dmitry V. Zemnitskiy](https://jira.spring.io/secure/ViewProfile.jspa?name=zdv)** opened **[SPR-3849](https://jira.spring.io/browse/SPR-3849?redirect=false)** and commented  Copied from http://forum.springframework.org/showthread.php?p=140845 Also see http://forum.springframework.org/showthread.php?t=31531  I just checked with latest available spring (2.0.6), hibernate (3.2.5), hibernate entity manager and MS SQL database (both MSDE and MS SQL Server 2000), jtds driver.  As I see it is still not solved, that is, with declarative transactions and exception translation, having business manager class annotated with `@Repository` and business method annotated with `@Transactional` (no nested transactions), example configuration below:  Code:           	     	                              	     		                                        	                 I get UnexpectedRollbackException caused by integrity violation exception, because actual database operation and constraints verification are seems deferred to commit() in MS SQL (much like in Oracle I think).  Here's exception stack trace:  Code:  org.springframework.transaction.UnexpectedRollbackException: JPA transaction unexpectedly rolled back (maybe marked rollback-only after a failed operation); nested exception is javax.persistence.RollbackException: Error while commiting the transaction Caused by: javax.persistence.RollbackException: Error while commiting the transaction at org.hibernate.ejb.TransactionImpl.commit(TransactionImpl.java:71) at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:433) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:662) at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:632) at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:314) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:117) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:166) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy34.handleChangeMsisdn(Unknown Source) at com.vyke.mobile.server.io.ConnectionHandlerImpl.packetReceived(ConnectionHandlerImpl.java:254)  ... removed application code calls ...      at java.lang.Thread.run(Unknown Source)  Caused by: org.hibernate.exception.ConstraintViolationException: could not update: [com.vyke.mobile.server.domain.Client#4] at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:71) at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43) at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:2425) at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:2307) at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:2607) at org.hibernate.action.EntityUpdateAction.execute(EntityUpdateAction.java:92) at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:250) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:234) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:142) at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298) at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27) at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000) at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:338) at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:106) at org.hibernate.ejb.TransactionImpl.commit(TransactionImpl.java:54) ... 29 more Caused by: java.sql.SQLException: Violation of UNIQUE KEY constraint 'UQ__Client__72C60C4A'. Cannot insert duplicate key in object 'Client'. at net.sourceforge.jtds.jdbc.SQLDiagnostic.addDiagnostic(SQLDiagnostic.java:365) at net.sourceforge.jtds.jdbc.TdsCore.tdsErrorToken(TdsCore.java:2781) at net.sourceforge.jtds.jdbc.TdsCore.nextToken(TdsCore.java:2224) at net.sourceforge.jtds.jdbc.TdsCore.getMoreResults(TdsCore.java:628) at net.sourceforge.jtds.jdbc.JtdsStatement.processResults(JtdsStatement.java:525) at net.sourceforge.jtds.jdbc.JtdsStatement.executeSQL(JtdsStatement.java:487) at net.sourceforge.jtds.jdbc.JtdsPreparedStatement.executeUpdate(JtdsPreparedStatement.java:421) at org.hibernate.jdbc.NonBatchingBatcher.addToBatch(NonBatchingBatcher.java:23) at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:2403) ... 41 more  I found very similar problem description here :  http://forum.springframework.org/showthread.php?t=31531  it is dated by last year..  I was able to solve the problem only by verification during business method invocation if conflicting record already exists in database using extra select statement.  IMO it is very rough solution and quite bad problem in Spring, as the situation is quite common and it voids all efforts made to improve persistence exception handling in Spring at all.  Regards, Dima   ---  **Affects:** 2.0.5, 2.0.6, 2.1 M3","closed","type: bug,","spring-projects-issues","2007-09-07T03:00:23Z","2012-06-19T03:47:31Z"
"","7942","Cannot find ""lang"" namespace handler unless all library jars are present [SPR-3257]","**[Dmitriy Kopylenko](https://jira.spring.io/secure/ViewProfile.jspa?name=dmitriy)** opened **[SPR-3257](https://jira.spring.io/browse/SPR-3257?redirect=false)** and commented  Up until 2.0.3 it worked fine for the groovy bean definitions with the following xml:  \  \      but it fails in 2.0.3 with the following exception:  org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unable to locate NamespaceHandler for namespace http://www.springframework.org/schema/lang Offending resource: class path resource [testContext.xml]      at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68)     at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85)     .... etc.  ---  **Affects:** 2.0.3  **Attachments:** - [lang-namespace-handler-case.zip](https://jira.spring.io/secure/attachment/12470/lang-namespace-handler-case.zip) (_4.65 MB_)  **Issue Links:** - #7935 LangNamespaceHandler cannot be registered in DefaultNamespaceHandlerResolver when thrid party library is not found (_**""duplicates""**_) - #7947 Increase log level for NamespaceHandler exception reporting","closed","in: core,","spring-projects-issues","2007-03-13T06:09:07Z","2019-01-12T16:51:43Z"
"","8593","bean ids names namespaces sections avoiding naming conflicts [SPR-3913]","**[Dirk Scheffler](https://jira.spring.io/secure/ViewProfile.jspa?name=iterator)** opened **[SPR-3913](https://jira.spring.io/browse/SPR-3913?redirect=false)** and commented  All beans that I configure for one factory currently use the same namespace for their names/ids. This is a serious limitation. Like in any other complex environment the things grow and at one point one looses the overview over all the beans in the configuration. Splitting the configuration in different files, which is a good way to organize, makes it even more worse because any person that is managing parts of the configuration has to know about all other used names/ids to avoid naming conflicts.  My suggestion is to introduce sections that bundle beans with a similar meaning and define at the same time a seperate namespace for the contained beans?  Of course this would have consequences to references but not much. Look at this example:  ---  \ \ \           	     		     		     	     	     	     		     		     	       \ \ \ \ \ \  ---  The BeanFactory is also affected but perhaps the section name can be treated as name prefixes to avoid changing the BeanFactory interface. For expample:  ---  BeanFactory someFactory = ....; FixAndFoxy faf = (FixAndFoxy)someFactory.getBean(""section-two.bean-one"");  ---  ---  No further details from [SPR-3913](https://jira.spring.io/browse/SPR-3913?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-09-24T17:40:33Z","2019-01-13T22:41:54Z"
"","8394","Transaction Synchronization with Container Started JTA Transaction [SPR-3713]","**[Dimitry Fayerman](https://jira.spring.io/secure/ViewProfile.jspa?name=dfayerma)** opened **[SPR-3713](https://jira.spring.io/browse/SPR-3713?redirect=false)** and commented  The PlatformTransactionManager synchronization does not work when participating in existing JTA transaction started by EJB or MDB.  We are using Spring configured Hibernate with declarative transaction demarcation using TransactionInterceptor. The WebLogicJtaTransactionManager is used as PlatformTransactionManager.  The SessionFactoryUtils.getSession method registers transaction synchronization with PlatformTransactionManager to perform flush and close the session on transaction commit.  The problem is that the transaction synchronization is never fired when PlatformTransactionManager is participating  in existing JTA transaction. This results in Hibernate session not being flushed and closed on transaction commit.  The workaround is to set transactionSynchronization on the PlatformTransactionManager to SYNCHRONIZATION_NEVER so that it does not register as synchronization provider and SessionFactoryUtils registeres with JTA directly.  Looking at the source, the JtaTransactionManager is trying to address this issue but it does not do it correctly:  If transactionSynchronization == SYNCHRONIZATION_ALWAYS (default)  the existing JTA transaction is never considered  When transactionSynchronization == SYNCHIONIZATION_ON_ACTUAL_TRANSACTION if existing transaction is detected the JtaTransactionManager.registerAfterCompletionWithExistingTransaction is trying to do the right thing and register synchronization with parent JTA transaction but JtaAfterCompletionSynchronization only implements afterCompletion() method and beforeCompletion() is still never fired resulting in missed Session.flush.  I debugged the issue on 1.2.8 version but looking at the 2.0 source code I don't see any changes to the issue must be there as well.   ---  **Affects:** 1.2.8","closed","in: data,","spring-projects-issues","2007-07-26T01:32:59Z","2019-01-11T19:31:08Z"
"","7970","Incompatibility with Hibernate Annotations 3.3.0 [SPR-3285]","**[Diego Plentz](https://jira.spring.io/secure/ViewProfile.jspa?name=plentz)** opened **[SPR-3285](https://jira.spring.io/browse/SPR-3285?redirect=false)** and commented  org.hibernate.annotations.common.reflection.ReflectionManager no longer exists in Hibernate Annotations 3.3.0  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is java.lang.NoClassDefFoundError: org/hibernate/annotations/common/reflection/ReflectionManager Caused by: java.lang.NoClassDefFoundError: org/hibernate/annotations/common/reflection/ReflectionManager at java.lang.Class.getDeclaredConstructors0(Native Method) at java.lang.Class.privateGetDeclaredConstructors(Unknown Source) at java.lang.Class.getConstructor0(Unknown Source) at java.lang.Class.getDeclaredConstructor(Unknown Source) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:60) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.newConfiguration(LocalSessionFactoryBean.java:778) at org.springframework.orm.hibernate3.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:560)  http://www.hibernate.org/hib_docs/annotations/api/org/hibernate/   ---  **Affects:** 2.0.3","closed","","spring-projects-issues","2007-03-22T02:45:17Z","2019-01-11T17:18:19Z"
"","8187","iBATIS integration: regression in batch handling [SPR-3504]","**[Dibyendu Bhattacharya](https://jira.spring.io/secure/ViewProfile.jspa?name=dibyendu)** opened **[SPR-3504](https://jira.spring.io/browse/SPR-3504?redirect=false)** and commented  In our code we are doing programmatic transaction , and we need to execute Batch update to insert multiple records in a table. The primary key for each insert statement is based on ID number  which is increased by ONE after each insert (done in SQL using MAX like (select nvl(max(SUBCATEGORY_ID)+1). The problem is happening when first row is inserted , and let say that ID is set to 1 , as the batch execution is happening in transaction , the ID is not committed to DB , so when code is trying to insert next row in batch , it is again taking same SUBCATEGORY_ID (again 1) and thus unique constraint in Database exception . This problem is not happening in Spring 1.2.9 release. Because of this we are not able to upgrade Spring version from 1.2.9 to 2.0.5.   ---  **Affects:** 2.0.5","closed","in: data,","spring-projects-issues","2007-05-21T00:09:44Z","2019-01-13T22:43:12Z"
"","7921","ErrorsTag lack of escaping is inconsistent [SPR-3235]","**[Derek Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=derek)** opened **[SPR-3235](https://jira.spring.io/browse/SPR-3235?redirect=false)** and commented  Although ErrorsTag exposes the htmlEscape property in the tld:  1589 		\ 1590 			\htmlEscape\ 1591 			\false\ 1592 			\true\ 1593 			\Enable/disable HTML escaping of rendered values.\ 1594 		\  it doesn't htmlEscape the error messages:  139 			tagWriter.appendValue(errorMessage);  which is inconsistent with the description copied above.  This also makes the display of messages by form:errors tag inconsistent with the display of messages by the spring:message tag with regard to escaping in the case that defaultHtmlEscape has been set to true.   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-03-05T22:39:04Z","2012-06-19T03:50:45Z"
"","7913","ErrorsTag: optionally render element even when no errors [SPR-3227]","**[Derek Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=derek)** opened **[SPR-3227](https://jira.spring.io/browse/SPR-3227?redirect=false)** and commented  The ErrorsTag  outputs nothing if there are no errors corresponding to the specified path.  If one is doing traditional server side validation only this is fine.  However, if one is also doing client side (or ajax style pseudo client-side) validation, it is necessary to have placeholder elements on the page providing somewhere to display error alerts.  The span element output by the errors tag (when it is output) already has an id and desired class attributes etc making it ideal for the purpose.  It would be very useful therefore to have an option on the ErrorsTag to always output the element, even when there are no errors.  Untested, but I'd think this would simply require adding a boolean alwaysRender property, publishing this in the tld and checking it in the shouldRender(...) method.  Would be great if it could make it into 2.0.3.   --- No further details from [SPR-3227](https://jira.spring.io/browse/SPR-3227?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-03-02T00:52:45Z","2012-06-19T09:37:26Z"
"","8339","Specify custom TransformerFactory in org.springframework.web.servlet.view.xslt.XsltView [SPR-3658]","**[Dennis Pashutkin](https://jira.spring.io/secure/ViewProfile.jspa?name=dp)** opened **[SPR-3658](https://jira.spring.io/browse/SPR-3658?redirect=false)** and commented  org.springframework.web.servlet.view.xslt.XsltView has outstanding realization and solves all our problems except one. Would be quite useful to have an ability to customize TransformerFactory implementation via class specification or instantiation of realization.  Currently the only ways to specify custom TransformerFactory for XsltView are to set System Property ""javax.xml.transform.TransformerFactory"" or put custom library to endorsed path (either of jvm or app-server). But both of them are too strong and may violate behaviour of app-server or ay other component of system.  It would be handy to have a set method for ""TransformerFactory transformerFactory"" field or any other way to override JAXP TransformerFactory.newInstance() logic.   ---  **Affects:** 2.0.6  **Issue Links:** - [SWS-586](https://jira.spring.io/browse/SWS-586) specify custom TransformerFactory in org.springframework.xml.transform.TransformerObjectSupport","closed","type: enhancement,","spring-projects-issues","2007-07-04T17:48:54Z","2012-06-19T03:51:02Z"
"","8828","Spring MVC form tags made easily extendable [SPR-4150]","**[Denis](https://jira.spring.io/secure/ViewProfile.jspa?name=denis)** opened **[SPR-4150](https://jira.spring.io/browse/SPR-4150?redirect=false)** and commented  I would like to extend Spring MVC tag lib to add some new attributes that will be used on the client side (dhtml). Attributes like ""required"", ""tip"", ""format"" (date, number, email), ""errorMessage"",... should be added and to tag should be created (twin list, rte, ...). If the extention of some tag is quite easy (form, input), for the ""select"" it's not the case at all. Indeed the dependent ""OptionWriter"" class is not public. Also some basic tag (input) are not made to be extended as the ""writeTagContent method"" is quite long.  ---  **Affects:** 2.0.7  **Issue Links:** - #8707 make postProcess method in MessageTag - #8821 TagWriter should support free form text  6 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2007-11-21T18:26:25Z","2019-01-11T16:05:55Z"
"","8245","Attribute ""mappedObjectNames"" of NotificationListenerBean is a String[] and not an ArrayList of ObjectName like documentation [SPR-3562]","**[Demian Berjman](https://jira.spring.io/secure/ViewProfile.jspa?name=dberjman)** opened **[SPR-3562](https://jira.spring.io/browse/SPR-3562?redirect=false)** and commented  In the documentation (http://static.springframework.org/spring/docs/2.0.x/reference/jmx.html#jmx-notifications) for configure NotificationListenerBean instances, it use ObjectName as the values for the attribute ""mappedObjectNames"". But ""mappedObjectNames"" is a String array, not a Collection of ObjectName objects...  We fixed the problem using string instead of ObjectName:  \ \ 	\jmx.beans:name=Hello\ \jmx.beans:name=Car\ \ \   ---  **Affects:** 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5","closed","in: core,","spring-projects-issues","2007-06-07T02:55:04Z","2012-06-19T03:50:20Z"
"","8862","Transaction not rolling back with JBoss 4.2.x [SPR-4184]","**[Deep Banduri](https://jira.spring.io/secure/ViewProfile.jspa?name=dbanduri)** opened **[SPR-4184](https://jira.spring.io/browse/SPR-4184?redirect=false)** and commented  We are seeing an issue that happens with Jboss 4.2.x where a transaction is not rolling back when the time out period has elapsed.  Following is the scenario and how I can consistently reproduce the error.    We have a transactional method on a bean with 2 db update operations - 1 insert and 1 delete as follows:       public void foo() {                   dbInsertOperation();                               dbDeleteOperation();       }       I used a very small transaction time of 2 seconds, and then waited on a break point on the dbDeleteOperation line to ensure that the time out period elapses, and then executed the delete operation. What we found is that in 4.2.1, while waiting at the breakpoint, after the time out is detected by JBoss, the database receives a Rollback command from the app server which rolls back the inserted records - and the method still has not completed yet. When I then execute the delete operation, it is executed by SQL Server as a standalone transaction, since the original one associated with the method is already rolled back. When the method now returns, Spring code tries to commit the transaction, gets an IllegalStateException exception, and then tries to rollback and gets another exception. So what we have is the inserted records were rolled back but the deleted records were commited resulting in an inconsistent database.       However this same exact sequence of events in 4.0.3 works exactly as one would logically expect - even after I sit on the breakpoint for a while for the time out period to elapse, then execute the delete statement, it is still part of the transaction associated with the method call. AFter the method call, Spring code tries to commit, gets an exception (I think a RollbackException), and then issues a rollback which is sent to the database and the entire transaction (insert and delete) is rolled back.       So it seems that what was working logically in 4.0.3 seems to be broken in 4.2.x, everything else being equal. Question is why is JBoss issuing a rollback in the middle of the method? I opened a support ticket with JBoss Support - their response is that this is something Spring should be fixing. See below for their response:  *************************  I believe this is a problem with Spring. It should be checking the thread-to-transaction association of the thread doing the delete. In the case of the timeout, it will find that there is an inactive transaction associated with the thread (the transaction has rolled back, but it has not been removed from the active thread). It should not be trying to make forward progress with the thread at that point, particularly if the thread is about to try to do something within the scope of that transaction.  The reason this worked in the 4.0.3 release was that the transaction was not rolled back, so the delete operation was done in the scope of the transaction, even though by that point the state of the transaction would have been marked as ROLLBACK_ONLY, i.e., the delete was wasted effort, so it's arguable that Spring should have checked the state anyway and optimised that operation away, since it wasn't going to complete.  JBossTS now terminates transactions as soon as their timeout goes off. The old JBossTM did not: it simply marked them as ROLLBACK_ONLY, which will force them to rollback only when the container eventually tries to commit the transaction.                                        **********************************  Thanks, Deep  ---  **Affects:** 2.0.6  **Issue Links:** - #8786 Transaction Manager issue ""NO Active JTA Transaction"". Sprying trying to synchronise a transaction marked for rollback.","closed","status: declined,","spring-projects-issues","2007-11-28T06:52:27Z","2019-01-12T16:39:29Z"
"","8611","Logback support [SPR-3931]","**[Davide Baroncelli](https://jira.spring.io/secure/ViewProfile.jspa?name=baroncelli)** opened **[SPR-3931](https://jira.spring.io/browse/SPR-3931?redirect=false)** and commented  Logback is the ""new"" logging framework by Ceki Gulku: nothing too new, but has some improvements wrt log4j, and it supports the slf4j api. I attach to this issue 4 classes modeled after current log4j initialization support in Spring: since logback does not currently support automatic auto-reloading I stripped the corresponding parts (although the Spring infrastructure could provide the relevant mechanics, instead).  ---  **Attachments:** - [logback-auto-reloading.jar](https://jira.spring.io/secure/attachment/12960/logback-auto-reloading.jar) (_8.26 kB_) - [logback-web-config.jar](https://jira.spring.io/secure/attachment/12958/logback-web-config.jar) (_6.88 kB_)  **Issue Links:** - #22158 Add logging reference documentation  9 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-09-27T20:51:02Z","2019-01-11T21:10:17Z"
"","8109","Spring Bean Factory creation of Prototype (non-singleton) beans causes serious performance degradation under load [SPR-3426]","**[David Sean Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=david@bluesunrise.com)** opened **[SPR-3426](https://jira.spring.io/browse/SPR-3426?redirect=false)** and commented  please also see:  http://issues.apache.org/jira/browse/JS2-689  I know the contention is occurring in Java JDK code, not in Spring itself. I would like to suggest that Spring provides an improvement: an alternative implementation for multithreaded applications  Pasted in issue from Apache JIRA system:  It appears that Spring prototype (non-singleton) bean factory creations cause synchronization contention issues under load. The NavigationalState and PortalURL beans are created several times per request. Under load with JMeter tests, the synchronization of Java Bean support code (in the JDK), called by Spring's bean factory, was causing severe performance degradation. Removing this bottleneck improved performance by 5X. I've attached the Java source from the package java.beans. I believe its these synchronized methods of the java.beans.PropertyEditorManager class that are causing the contention:  private static synchronized void initialize() { private static synchronized void load(Class targetType, String name) {  See attached screenshot for performance results before and after removal of prototypes (replaced by constructors). Using a 4 processor CPU really brings the contention issue to the forefront.  When we have hundreds of requests active, there are over 90 blocked threads in the findEditor stack frame:  Thread t@98: (state = BLOCKED) - java.beans.PropertyEditorManager.findEditor(java.lang.Class) `@bci`=0, line=75 (Compiled frame; information may be imprecise) - org.springframework.beans.TypeConverterDelegate.convertIfNecessary(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Class, java.beans.PropertyDescriptor, org.springframework.core.MethodParameter) `@bci`=115, line=174 (Compiled frame) - org.springframework.beans.TypeConverterDelegate.convertIfNecessary(java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter) `@bci`=7, line=95 (Compiled frame) - org.springframework.beans.factory.support.AbstractBeanFactory.doTypeConversionIfNecessary(org.springframework.beans.TypeConverter, java.lang.Object, java.lang.Class, org.springframework.core.MethodParameter) `@bci`=47, line=761 (Compiled frame) - org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition) `@bci`=191, line=126 (Compiled frame) - org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition) `@bci`=12, line=683 (Compiled frame) - org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[]) `@bci`=224, line=380 (Compiled frame) - org.springframework.beans.factory.support.AbstractBeanFactory.getBean(java.lang.String, java.lang.Class, java.lang.Object[]) `@bci`=362, line=264 (Compiled frame) - org.springframework.beans.factory.support.AbstractBeanFactory.getBean(java.lang.String, java.lang.Class) `@bci`=4, line=160 (Compiled frame) - org.apache.jetspeed.container.state.impl.JetspeedNavigationalStateComponent.createURL(javax.servlet.http.HttpServletRequest, java.lang.String) `@bci`=29, line=131 (Compiled frame) - org.apache.jetspeed.pipeline.JetspeedPipeline$Invocation.invokeNex  My first solution was to remove the Spring prototype code and replace it with straight constructors (replacing commented code below):      public PortalURL createURL( HttpServletRequest request, String characterEncoding )     {         //PortalURL url = (PortalURL) beanFactory.getBean(urlBeanName, PortalURL.class);","closed","type: enhancement,","spring-projects-issues","2007-04-27T04:29:16Z","2019-01-11T18:00:18Z"
"","8107","Nested BeanWrapperImpl may not have the default editors active. [SPR-3424]","**[David Mas](https://jira.spring.io/secure/ViewProfile.jspa?name=dmas)** opened **[SPR-3424](https://jira.spring.io/browse/SPR-3424?redirect=false)** and commented  When a parent BeanWrapperImpl creates a nested beanWrapper, it copies its default editors to the child. Now, as PropertyEditorRegistrySupport inits the default editors lazily, it has as defaultEditorsActive property which is not set to true by the default editors copy alone.  In BeanWrapperImpl.getNestedBeanWrapper(String) the child beanWrapper should have defaultEditorsActive to the same value as the parent.  ---  **Affects:** 2.0.4  **Issue Links:** - #8043 Error in BeanWrapperImpl.setPropertyValue for nested paths for primitive wrapper types such as integer (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2007-04-26T23:53:12Z","2019-01-12T16:51:34Z"
"","8730","Documentation Type-o [SPR-4051]","**[David Malone](https://jira.spring.io/secure/ViewProfile.jspa?name=davemalone)** opened **[SPR-4051](https://jira.spring.io/browse/SPR-4051?redirect=false)** and commented  I know this isn't a bug, I just didn't know where else to submit this to.  I noticed that table 13.3 contains an mis-typed field reference:  requiresSession  The actual field name is requireSession  Thanks for all your hard work.   ---  **Affects:** 2.0.8, 2.5.3  **Attachments:** - [type_o_patch.txt](https://jira.spring.io/secure/attachment/13918/type_o_patch.txt) (_1.56 kB_)  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: task,","spring-projects-issues","2007-11-06T02:57:17Z","2012-06-19T03:47:08Z"
"","8066","Maven POM: Dependency for nonexistant artifact at central [SPR-3383]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-3383](https://jira.spring.io/browse/SPR-3383?redirect=false)** and commented  The pom http://repo1.maven.org/maven2/org/springframework/spring-hibernate3/2.0.4/spring-hibernate3-2.0.4.pom contains a dependency for the non-existant artifact:  \ \org.hibernate\  \hibernate\  \3.2.3.ga\  \   ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-04-17T08:36:57Z","2012-06-19T02:28:11Z"
"","8035","Quartz: Scheduling executes jobs twice [SPR-3351]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-3351](https://jira.spring.io/browse/SPR-3351?redirect=false)** and commented  The following context configuration  \ \ \ \ \ \  \ \ \ \ \ \  executes the job twice (on different threads):  2007-04-06 01:00:00,022 [WorkManager.DefaultWorkManager : 52] DEBUG org.quartz.core.JobRunShell   - Calling execute on job DEFAULT.delayedMessagesJob (JobRunShell.java:201) 2007-04-06 01:00:00,025 [WorkManager.DefaultWorkManager : 54] DEBUG org.quartz.core.JobRunShell   - Calling execute on job DEFAULT.delayedMessagesJob (JobRunShell.java:201)   ---  **Affects:** 2.0.3","closed","in: core,","spring-projects-issues","2007-04-06T06:48:38Z","2019-01-11T18:16:00Z"
"","8682","PropertyPlaceholderConfigurer values not available in web-context [SPR-4002]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4002](https://jira.spring.io/browse/SPR-4002?redirect=false)** and commented  Failing usecase:  I've got several contexts in a beanRefContext.xml which is loaded by the SingletonLoaderListener. These context define some service beans and some propretyplaceholders to be used in the weblayer (and between beans in the service layer - and in other service-beans.  PropertyPlaceholder values can be read and parsed in the service-layer, and the service-beans can be injected in the web-layer - but the propertyplaceholder values are not parsed in the web-layer (e.g. no substitution of values).   ---  **Affects:** 2.0.7","closed","in: core,","spring-projects-issues","2007-10-24T00:04:27Z","2019-01-12T16:39:43Z"
"","8678","Ability to load util:map, util:list, util:set from classpath [SPR-3998]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3998](https://jira.spring.io/browse/SPR-3998?redirect=false)** and commented  It would be really nice if it could be possible to load util:map's from the classpath with a location attribute like it's done for properties.   ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2007-10-22T23:04:25Z","2012-06-18T12:45:17Z"
"","8661","Allow for request scoped command in BaseCommandController [SPR-3981]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3981](https://jira.spring.io/browse/SPR-3981?redirect=false)** and commented  It would be very handy to be able to specify the commandclass as a beanname in BaseCommandController - this would support the command to be a request scoped bean - which in turn could be picked up by a HandlerInterceptor after the view has been rendered  - right out of the box.  It's not a form in my usecase - so AbstractFormController does not suit - where one could override formBackingBean()   ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2007-10-16T10:29:05Z","2012-06-19T09:36:30Z"
"","8308","Add an Exception converter interceptor to the Spring Core [SPR-3627]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3627](https://jira.spring.io/browse/SPR-3627?redirect=false)** and commented  The attached interceptor can be used to convert certain exception types over to other types of exceptions. This might come in handy for spring users.   ---  **Attachments:** - [ExceptionConverterInterceptor.java](https://jira.spring.io/secure/attachment/12698/ExceptionConverterInterceptor.java) (_4.35 kB_)","closed","type: enhancement,","spring-projects-issues","2007-06-27T09:33:34Z","2012-06-19T09:37:30Z"
"","8307","Convert org.hibernate.validator.InvalidStateException into some DataAccessException type [SPR-3626]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3626](https://jira.spring.io/browse/SPR-3626?redirect=false)** and commented  When using Hibernate-3's annotations and validation - org.hibernate.validator.InvalidStateException may be thrown if illegal values are attempted to be persisted - these should be converted into Springs DataAccessException hiearchy.   ---  **Affects:** 2.0.6  **Attachments:** - [validatorpatch.txt](https://jira.spring.io/secure/attachment/13819/validatorpatch.txt) (_2.26 kB_)  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-06-27T04:34:01Z","2012-06-19T09:37:30Z"
"","8296","WebSphere specific destination resolver which controls MQ specific attributes [SPR-3614]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3614](https://jira.spring.io/browse/SPR-3614?redirect=false)** and commented  The attached Destination resolver extends DynamicDestination resolver and has properties to be able to control IBM WebSphere MQ specific attributes. This provides the user with the same configuration attributes as in an managed environment (e.g. using a JNDI destination resolved and possibly WebSphere as an application server).   ---  **Affects:** 2.0.6  **Attachments:** - [IBMWebSphereMqDestinationResolver.java](https://jira.spring.io/secure/attachment/12688/IBMWebSphereMqDestinationResolver.java) (_3.10 kB_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-06-24T08:47:50Z","2012-06-19T09:37:37Z"
"","8216","Support for easy stub-configuration and hooks for axis2 services [SPR-3533]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3533](https://jira.spring.io/browse/SPR-3533?redirect=false)** and commented  Create an easy ProxyFactoryBean for configuring org.apache.axis2.client.Stub, wrapping ServiceInterface, conversion of RemoteExceptions. Axis2 does not support JAX-RPC, so the JaxRpc helper classes cannot be used with axis2 stubs.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-05-28T14:43:10Z","2012-06-19T09:37:31Z"
"","8211","AsynchronousExecutionInterceptor [SPR-3528]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3528](https://jira.spring.io/browse/SPR-3528?redirect=false)** and commented  Codecontribution. An interceptor which executes matched methods asynchronously by using a taskexecutor.  ---  **Attachments:** - [AsynchronousExecutionInterceptor.java](https://jira.spring.io/secure/attachment/12633/AsynchronousExecutionInterceptor.java) (_2.45 kB_)  **Issue Links:** - #8556 Asynchronous execution of ApplicationListeners through annotation","closed","type: enhancement,","spring-projects-issues","2007-05-28T04:10:18Z","2019-01-11T19:05:19Z"
"","8026","Support keyed Commons ObjectPools [SPR-3342]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3342](https://jira.spring.io/browse/SPR-3342?redirect=false)** and commented  Support keyed object pools. There are several usecases for this, a common one is pooling XSL Transformer objects containing a specific XSLT-document - this has to be keyed.   --- No further details from [SPR-3342](https://jira.spring.io/browse/SPR-3342?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-04-04T09:49:16Z","2012-06-19T09:37:33Z"
"","8017","Implement synchronous request / response logic in JmsTemplate [SPR-3332]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3332](https://jira.spring.io/browse/SPR-3332?redirect=false)** and commented  Add support for synchronous send and receive in JmsTemplate, something like this:  Object response = doSendAndReceive( String requestDestination, String responseDestination, Object value ) throws JmsException  which uses SimpleMessageConverter to convert value to message, destinationResolver to resolve response and request destinations, set's JmsReplyTo to responseDestination, and uses the generated messageId to select the responsemessage, waiting for getReceiveTimeout() milliseconds to receive.  This is a very common usecase - and I think it should be supported directly by the framework - without having to use Jencks or the likes.  ---  **Affects:** 2.0.3  **Attachments:** - [JmsTemplateSynchronous.txt](https://jira.spring.io/secure/attachment/14030/JmsTemplateSynchronous.txt) (_1.35 kB_) - [sessioncallbackcode.txt](https://jira.spring.io/secure/attachment/13809/sessioncallbackcode.txt) (_1.45 kB_)  **Issue Links:** - [INT-2683](https://jira.spring.io/browse/INT-2683) Enable cachability of consumers for reply-side of JmsOutboundGateway - #16653 Update JmsMessagingTemplate to support MessageRequestReplyOperations - #9324 Support ""request message id as response correlation id"" in MessageListenerAdapter  21 votes, 25 watchers","closed","has: votes-jira,","spring-projects-issues","2007-04-02T00:15:52Z","2019-01-14T06:23:37Z"
"","7990","Ability to set options / customize org.springframework.beans.propertyeditors.PatternEditor [SPR-3305]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3305](https://jira.spring.io/browse/SPR-3305?redirect=false)** and commented  Ability to set options when converting patterns (case incensitive etc) , like the CustomDateEditor.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-26T22:37:47Z","2012-06-19T03:51:21Z"
"","7980","Nullpointer in PropertyPlaceholderConfigurator [SPR-3295]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3295](https://jira.spring.io/browse/SPR-3295?redirect=false)** and commented  The following nulpointer appears if I upgrade to 2.0.3, works in 2.0.2:  Caused by: java.lang.NullPointerException at java.lang.StringBuffer.\(StringBuffer.java:104) at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.parseStringValue(PropertyPlaceholderConfigurer.java:270) at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer$PlaceholderResolvingBeanDefinitionVisitor.resolveStringValue(PropertyPlaceholderConfigurer.java:401) at org.springframework.beans.factory.config.BeanDefinitionVisitor.resolveValue(BeanDefinitionVisitor.java:143) at org.springframework.beans.factory.config.BeanDefinitionVisitor.visitGenericArgumentValues(BeanDefinitionVisitor.java:111) at org.springframework.beans.factory.config.BeanDefinitionVisitor.visitBeanDefinition(BeanDefinitionVisitor.java:62) at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:246) at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:75) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationC  ---  **Affects:** 2.0.3  **Issue Links:** - #7934 NPE in PropertyPlaceholderConfigurer.parseStringValue because TypedStringValue.getValue() is null (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2007-03-23T04:27:46Z","2019-01-12T16:51:39Z"
"","7946","NoSuchMethodError while parsing context [SPR-3261]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-3261](https://jira.spring.io/browse/SPR-3261?redirect=false)** and commented  A context with the heading:  \  \  was able to be parsed and used with spring 2.0.2, and fails under 2.0.3 with the following stack-trace:  org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from URL [file:/C:/myproject/myproject-server/target/test-classes/common-context.xml]; nested exception is java.lang.NoSuchMethodError: org.springframework.beans.factory.xml.XmlReaderContext.registerWithGeneratedName(Lorg/springframework/beans/factory/config/BeanDefinition;)Ljava/lang/String; Caused by: java.lang.NoSuchMethodError: org.springframework.beans.factory.xml.XmlReaderContext.registerWithGeneratedName(Lorg/springframework/beans/factory/config/BeanDefinition;)Ljava/lang/String; at org.springframework.aop.config.SpringConfiguredBeanDefinitionParser.parse(SpringConfiguredBeanDefinitionParser.java:48) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:68) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1078) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1068) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:133) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:90) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:495) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:340) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:317) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:125) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:141) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:167) at org.springframework.test.AbstractSingleSpringContextTests.createApplicationContext(AbstractSingleSpringContextTests.java:198) at org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:179) at org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:158) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:105) at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:87) at junit.framework.TestCase.runBare(TestCase.java:128) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:69) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)    ---  **Affects:** 2.0.3","closed","in: core,","spring-projects-issues","2007-03-13T11:40:25Z","2019-01-11T17:18:44Z"
"","8496","Hibernate Lucene Search support in HibernateTemplate [SPR-3816]","**[David Hernandez](https://jira.spring.io/secure/ViewProfile.jspa?name=dahernan)** opened **[SPR-3816](https://jira.spring.io/browse/SPR-3816?redirect=false)** and commented  Hibernate Lucene Search wraps Hibernate Session in a class  Session session = sessionFactory.openSession(); FullTextSession fullTextSession = Search.createFullTextSession(session);    ...  http://www.hibernate.org/hib_docs/search/reference/en/html/search-query.html  It could be good idea that HibernateTemplate support this kind of search   ---  **Affects:** 2.1 M4  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-08-29T23:12:44Z","2012-06-19T09:37:28Z"
"","8374","HibernateTransactionManager doesn't clean up when connection not available [SPR-3693]","**[David Hay](https://jira.spring.io/secure/ViewProfile.jspa?name=dhay)** opened **[SPR-3693](https://jira.spring.io/browse/SPR-3693?redirect=false)** and commented  If there is a problem opening a connection (e.g. thread pool at capacity and the thread times out waiting for a free database connection), it appears that the HibernateTransactionManager doesn't clean up the SessionHolder object correctly.  We diagnosed this by doing the following:  1. Set the database connection pool (Commons DBCP) size to 1 with a 5 second timeout waiting for an available connection 2. Make a request that hits the database and use a debugger to stop that thread  (thread 1) while the sole database connection is in use. 3. Make another request that will create (at least) two separate database transactions. (thread 2)    3a. When the first transaction begins in thread 2, an exception is thrown and caught by HibernateTransactionManager.doBegin(), which throws a CannotCreateTransactionException.    3b. If the CannotCreateTransactionException is caught by the application and then another transaction is started, HibernateTransactionManager attempts to create a new Session, rather than use the session created by OpenSessionInViewFilter.  If the connection is now available, the ConnectionHolder is bound with the data source in a thread local.  However, the transaction again fails because of the following:  java.lang.IllegalStateException: Already value [org.springframework.orm.hibernate3.SessionHolder@78d8ac] for key [org.hibernate.impl.SessionFactoryImpl@1ccf137] bound to thread [http-8080-Processor2]  This leaves the ConnectionHolder bound to the thread local after the request finishes.  Now, any future requests on that thread fail with the following exception because the ConnectionHolder is still bound to the thread local:  org.springframework.transaction.IllegalTransactionStateException: Pre-bound JDBC Connection found! HibernateTransactionManager does not support running within DataSourceTransactionManager if told to manage the DataSource itself. It is recommended to use a single HibernateTransactionManager for all transactions on a single DataSource, no matter whether Hibernate or JDBC access.  ---  **Affects:** 2.0.5, 2.0.6, 2.1 M1, 2.1 M2  **Issue Links:** - #9806 Database connection problems cause Spring to raise an IllegalStateException and resulting in transaction state not being cleaned up","closed","type: bug,","spring-projects-issues","2007-07-17T10:09:06Z","2019-01-11T18:34:51Z"
"","7941","PDF Documentation Link is broken [SPR-3256]","**[David Goblirsch](https://jira.spring.io/secure/ViewProfile.jspa?name=dmgob)** opened **[SPR-3256](https://jira.spring.io/browse/SPR-3256?redirect=false)** and commented  The PDF documentation link on the main documentation web page returns ""resource not found"" error.   --- No further details from [SPR-3256](https://jira.spring.io/browse/SPR-3256?redirect=false)","closed","","spring-projects-issues","2007-03-13T03:19:35Z","2019-01-11T17:16:47Z"
"","8820","Wrong spring-2.5.jar deployed in central maven repository [SPR-4141]","**[David Ferbas](https://jira.spring.io/secure/ViewProfile.jspa?name=ferba)** opened **[SPR-4141](https://jira.spring.io/browse/SPR-4141?redirect=false)** and commented  I don't know if this is your responsibility, but there is the wrong spring-2.5.jar deployed in the central maven repository. http://repo1.maven.org/maven2/org/springframework/spring/2.5/ The jar is way to small and seems to be the spring-aop.jar instead of the full distribution. So the spring-2.5 dependency does not work with maven builds without tweaking.   ---  **Affects:** 2.5 final","closed","status: declined,","spring-projects-issues","2007-11-20T18:38:19Z","2007-11-29T19:18:50Z"
"","8781","DisposableBean.destroy() not supported for SpringJUnit4-Test [SPR-4103]","**[David Ferbas](https://jira.spring.io/secure/ViewProfile.jspa?name=ferba)** opened **[SPR-4103](https://jira.spring.io/browse/SPR-4103?redirect=false)** and commented  Using the new Spring TestContext Framework an implemented DisposableBean.destroy() Method is not called when shutting down. But an InitializingBean.afterPropertiesSet() is called correctly. Would be nice for cleaning up test resources. Or is there another possibility for cleaning up?  An example:  `@RunWith`(SpringJUnit4ClassRunner.class) `@ContextConfiguration`(locations={""/spring/templateProject.beans.xml""}) public class SampleBeanTest implements DisposableBean, InitializingBean {      @Override     public void destroy() throws Exception {     	System.err.println(""destroy"");  // method is NOT called by container     	     }          @Override     public void afterPropertiesSet() throws Exception {     	System.err.println(""init"");  // but this method is called     	     }          @Test     public void testOk() {     	System.err.println(""test"");     	     }    ---  **Affects:** 2.5 RC2","closed","type: enhancement,","spring-projects-issues","2007-11-14T04:29:22Z","2009-06-13T08:37:57Z"
"","8778","Error in spring-2.5-rc2.pom (Wrong version information) [SPR-4100]","**[David Ferbas](https://jira.spring.io/secure/ViewProfile.jspa?name=ferba)** opened **[SPR-4100](https://jira.spring.io/browse/SPR-4100?redirect=false)** and commented  The spring-2.5-rc2.pom file contains the wrong version information \2.5-rc1\ needs to be 	\2.5-rc2\  ---  **Affects:** 2.5 RC2  **Issue Links:** - #8787 All POM file in folder /dist/maven (spring-framework-2.5-rc2-with-dependencies.zip) refers to version 2.5-rc1 instead of 2.5-rc2 (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2007-11-14T02:12:00Z","2019-01-11T15:43:11Z"
"","8854","Any reason why ScriptBeanDefinitionParser can't respond ""true"" to shouldGenerateIdAsFallback()? [SPR-4176]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4176](https://jira.spring.io/browse/SPR-4176?redirect=false)** and commented  Any reason why ScriptBeanDefinitionParser can't respond ""true"" to shouldGenerateIdAsFallback()?  I would have thought the default would be true anyway in the base class, but it is pretty unconventional to **insist** on an id for an XML element at the top level - what if I want to write a BeanFactoryPostProcessor in Groovy?  No reason why that should not be anonymous that I can see.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-27T18:43:20Z","2012-06-19T03:47:14Z"
"","8846","Dynamic objects in Groovy cannot be defined as script inline [SPR-4168]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4168](https://jira.spring.io/browse/SPR-4168?redirect=false)** and commented  Dynamic objects in Groovy cannot be defined as script inline.  It works with a class definition inline (as it would with a file containing the Groovy class definition), but a script that returns a GroovyObject only works if it is defined in a file.  ---  **Affects:** 2.5 final  **Attachments:** - [SPR-4168.zip](https://jira.spring.io/secure/attachment/13157/SPR-4168.zip) (_6.03 kB_)  **Issue Links:** - #8434 GroovyScriptFactory should pass the filename of the Groovy script into the GroovyClassLoader.parseClass method - #9019 Class names of Groovy scripts should be configurable","closed","type: bug,","spring-projects-issues","2007-11-26T19:01:29Z","2019-01-11T16:04:17Z"
"","8845","getBeanNamesForType should include aliases [SPR-4167]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4167](https://jira.spring.io/browse/SPR-4167?redirect=false)** and commented  getBeanNamesForType should include aliases - getBean(""foo"") will return the bean which is aliased to ""foo"", but it doesn't show up in the bean names.  Ouch.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-26T18:44:49Z","2007-11-29T00:51:15Z"
"","8832","HibernateDaoSupport should use HibernateOperations in method signatures [SPR-4154]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4154](https://jira.spring.io/browse/SPR-4154?redirect=false)** and commented  HibernateDaoSupport should use HibernateOperations in method signatures.  ---  **Affects:** 2.5 final  **Issue Links:** - #8440 Alter JdbcDaoSupport to use JdbcOperations instead of JdbcTemplate","closed","type: enhancement,","spring-projects-issues","2007-11-22T04:52:58Z","2019-01-11T16:06:05Z"
"","8810","Maven artifacts on central incorrect [SPR-4131]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4131](https://jira.spring.io/browse/SPR-4131?redirect=false)** and commented  http://repo1.maven.org/maven2/org/springframework/spring/2.5/ contains spring.jar which only has a single package in it (aop).   ---  **Affects:** 2.5 final  1 votes, 5 watchers","closed","in: core,","spring-projects-issues","2007-11-19T18:56:05Z","2019-01-12T16:39:36Z"
"","8793","CallMonitoringAspect causes AspectJ compiler to barf [SPR-4114]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4114](https://jira.spring.io/browse/SPR-4114?redirect=false)** and commented  CallMonitoringAspect causes AspectJ compiler to barf.  It's quite interesting really, but if you open upo the pet clinic code in Eclipse and switch on AJDT you get immediate compiler errors because the pointcut is illegal in ASpectJ, but not Spring AOP.      @Around(""within(@org.springframework.stereotype.Service *)"")  Is illegal because `@Around` can only be applied to certain classes of JoinPoint (whereas Spring AOP only considers execution()).  If you change the pointcut to  execution(* *(..)) && within(`@org`.springframework.stereotype.Service *)  it works fine.  It would probably be best practice to make sure the pointcut is valid in both situations?   ---  **Affects:** 2.5 RC2","closed","in: core,","spring-projects-issues","2007-11-16T01:38:53Z","2019-01-12T16:39:37Z"
"","8791","TestContext fails very quietly so hard to debug config errors [SPR-4112]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4112](https://jira.spring.io/browse/SPR-4112?redirect=false)** and commented  TestContext fails very quietly so hard to debug config errors.  I have to change the log level to DEBUG to find out that my configuration is invalid?!  I only want to know about the stacktrace for the failure - surely that should go at ERROR level?   ---  **Affects:** 2.5 RC2","closed","in: core,","spring-projects-issues","2007-11-15T22:11:06Z","2012-06-19T03:47:15Z"
"","8712","OuputResource abstraction for file / stream output. [SPR-4033]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4033](https://jira.spring.io/browse/SPR-4033?redirect=false)** and commented  There is a similar request in [BATCH-21](https://jira.spring.io/browse/BATCH-21) but symmetry seems to suggest that this feature should go in core (along with the Resource that supports InputStream).   ---  **Affects:** 2.5 RC1","closed","status: bulk-closed,","spring-projects-issues","2007-11-01T21:28:55Z","2019-01-12T02:38:48Z"
"","8633","bean(name) PCD breaks with aop:scoped-proxy [SPR-3953]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3953](https://jira.spring.io/browse/SPR-3953?redirect=false)** and commented  bean(name) PCD breaks with aop:scoped-proxy.  I'll attach a testcase (JUnit + xml).   ---  **Affects:** 2.1 M4  **Attachments:** - [bean-name-pointcut-test.xml](https://jira.spring.io/secure/attachment/12978/bean-name-pointcut-test.xml) (_1.41 kB_) - [BeanNamePointcutTests.java](https://jira.spring.io/secure/attachment/12977/BeanNamePointcutTests.java) (_1.15 kB_) - [bean-pcd-test.zip](https://jira.spring.io/secure/attachment/13054/bean-pcd-test.zip) (_3.98 kB_) - [pom.xml](https://jira.spring.io/secure/attachment/13064/pom.xml) (_6.27 kB_) - [shadowMatch.txt](https://jira.spring.io/secure/attachment/13067/shadowMatch.txt) (_4.31 kB_) - [SPR-3953_ant2.zip](https://jira.spring.io/secure/attachment/13065/SPR-3953_ant2.zip) (_5.95 MB_) - [SPR-3953_delta.zip](https://jira.spring.io/secure/attachment/13066/SPR-3953_delta.zip) (_1.65 kB_) - [SPR-3953.zip](https://jira.spring.io/secure/attachment/13053/SPR-3953.zip) (_8.34 MB_) - [SPR-3953-with-Ant.zip](https://jira.spring.io/secure/attachment/13063/SPR-3953-with-Ant.zip) (_3.22 kB_) - [tests_modified.zip](https://jira.spring.io/secure/attachment/13032/tests_modified.zip) (_1.12 kB_)  1 votes, 3 watchers","closed","in: core,","spring-projects-issues","2007-10-02T21:11:20Z","2019-01-13T22:41:47Z"
"","8615","AOP Alliance source code not packaged with Spring sources in maven repo [SPR-3935]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3935](https://jira.spring.io/browse/SPR-3935?redirect=false)** and commented  The AOP Alliance source code not packaged with Spring sources in the maven artifacts.  Maybe this was intentional, but it's irritating, given that the class files are in the binary jar - you can't get a source attachment that works in Eclipse for both core Spring and AOP classes.   ---  **Affects:** 2.1 M4","closed","status: declined,","spring-projects-issues","2007-09-28T02:02:05Z","2007-11-09T02:57:24Z"
"","8484","Using aop:scoped-proxy introduces unwanted extra autowire candidate even with autowire-candidate=""false"" [SPR-3804]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3804](https://jira.spring.io/browse/SPR-3804?redirect=false)** and commented  Using aop:scoped-proxy introduces unwanted extra autowire candidate.  E.g. with this           	                    	            I get two autowire candidates - the ""unscoped"" bean, and the auto proxy FactoryBean for the ""scoped"" version, even though the bean definition is marked as autowire-candidate=""false"".   ---  **Affects:** 1.0 M3, 2.0.6, 2.1 M3  **Attachments:** - [scoped-proxy-test.zip](https://jira.spring.io/secure/attachment/12826/scoped-proxy-test.zip) (_3.66 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-batch/commit/d7444bbc9515824dfd9dbf56c289fda1b4225e73, https://github.com/spring-projects/spring-batch/commit/6f75f9990393a960d911e99e7a5e167b39f8e3e3, https://github.com/spring-projects/spring-batch/commit/dc7d7bc886369290bf3e71eaf2e5185eae87a6ea","closed","in: core,","spring-projects-issues","2007-08-25T03:35:39Z","2012-06-19T03:50:34Z"
"","8482","Is there a reason why BeanFactoryPostProcessor has to be a root bean definition? [SPR-3802]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3802](https://jira.spring.io/browse/SPR-3802?redirect=false)** and commented  Is there a reason why BeanFactoryPostProcessor has to be a root bean definition?  I need it to play two roles, and one of them is as a custom Scope, so it would be nice to be able to specify it as an inner bean.  Seems not to be supported, but surely not impossible?   ---  **Affects:** 1.0 M3, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-23T20:42:18Z","2007-08-24T01:23:29Z"
"","8480","Inner beans cannot have a scope other than singleton? [SPR-3800]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3800](https://jira.spring.io/browse/SPR-3800?redirect=false)** and commented  Inner beans cannot be scoped?  It seems that the scope attribute is not noticed by the bean factory in an inner bean.  Scope is only checked in a call to getBean in AbstractBeanFactory so it can never apply to an inner bean.  Is this intentional - it seems somewhat limiting?  ---  **Affects:** 2.1 M3  **Attachments:** - [inner-scope-test.zip](https://jira.spring.io/secure/attachment/12842/inner-scope-test.zip) (_5.00 kB_) - [inner-scope-test.zip](https://jira.spring.io/secure/attachment/12822/inner-scope-test.zip) (_3.67 kB_)  **Issue Links:** - #8547 AbstractSingleBeanDefinitionParser only propagates Singleton scope, not a custom one","closed","in: core,","spring-projects-issues","2007-08-23T07:56:50Z","2019-01-11T19:13:11Z"
"","8407","What value does ResourceFactoryBean add? [SPR-3726]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3726](https://jira.spring.io/browse/SPR-3726?redirect=false)** and commented  What value does ResourceFactoryBean add?  Since the String to Resource conversion is done by a PropertyEditor registered in the ApplicationContext this factory bean is just a pass thru.  Pretty useless as it stands I would have thought.  Please correct me if I am wrong.  Suggestion: add the ResourceLoaderAware interface and allow the user to override the DefaultResourceLoader.  Then at least it might be able to do something interestingly different from the ApplicationContext itself.   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-01T00:54:14Z","2012-06-19T03:50:36Z"
"","8402","ApplicationContext should delegate to a ResourceLoader the same way it does to other services [SPR-3721]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3721](https://jira.spring.io/browse/SPR-3721?redirect=false)** and commented  ApplicationContext should delegate to a ResourceLoader the same way it does to other services.  It is easy to override the MessageSource or ApplicationEventMulticaster by adding a bean to the context.  ResourceLoader is not afforded the same treatment so the only solution is subclassing and class hierarchy hell.   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-07-31T08:35:49Z","2019-01-11T19:30:31Z"
"","8332","Placeholder  cannot replace value of parent="""" attribute [SPR-3651]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3651](https://jira.spring.io/browse/SPR-3651?redirect=false)** and commented  Placeholder cannot replace value of parent="""" attribute.  The bean definitions are merged too early - before the BeanFactoryPostProcessor gets a chance to resolve any placeholders.   ---  **Affects:** 2.0.6, 2.1 M2  **Attachments:** - [ChildBeanDefinition.java](https://jira.spring.io/secure/attachment/12707/ChildBeanDefinition.java) (_5.69 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-07-03T23:38:18Z","2012-06-19T03:50:04Z"
"","8189","Isn't @Component the same as @Resource (JSR-250) on a class? [SPR-3506]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3506](https://jira.spring.io/browse/SPR-3506?redirect=false)** and commented  Isn't `@Component` the same as `@Resource` (JSR-250) on a class?  It isn't very clear from the JSR spec what the class-level annotation is for, but I think it means ""create a JNDI entry"" (or in our case ""create a Spring bean"").  The `@Resource` properties look like a deployment descriptor (name, type, description, shareable, etc.).  If that is the case then `@Component` is redundant, unless I'm missing something.   ---  **Affects:** 2.1 M1","closed","type: enhancement,","spring-projects-issues","2007-05-21T03:41:56Z","2007-05-21T05:49:54Z"
"","8091","ByteArrayResource.hashCode does not regard array contents [SPR-3408]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3408](https://jira.spring.io/browse/SPR-3408?redirect=false)** and commented  ByteArrayResource.hashCode is broken.  The docs say it returns the hashcode of the underlying byte array (which would be consistent with the equals method), but actually it does something strange, and quite different (unless I misunderstand something):      return (byte[].class.hashCode() * 29 * this.byteArray.length);  The result is the same for all instances of ByteArrayResource with arrays of the same length (and probably some that are not).  Probably not what was intended?  Maybe better to use Arrays.hashCode()?   ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-04-24T04:14:05Z","2019-01-12T16:40:13Z"
"","8038","AopProxy should not always be equal to itself [SPR-3354]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3354](https://jira.spring.io/browse/SPR-3354?redirect=false)** and commented  AopProxy should not always be equal to itself.  Both implementations do if(other==this) return true; right at the top.  This is not always the expected behaviour - if the target source is dynamic then the advised object might not actually be the same.  This happens often in the case of beans in custom scopes using .  Two beans are then found to be equal if  is used, but unequal if it is not.  This seems unnatural.  See http://forum.springframework.org/showthread.php?t=37115.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-04-08T00:56:17Z","2007-04-09T18:56:51Z"
"","8030","Use AspectJ aspects (language or annotation-based) to define Spring AOP advice [SPR-3346]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3346](https://jira.spring.io/browse/SPR-3346?redirect=false)** and commented  Use AspectJ aspects (language or annotation-based) to define Spring AOP advice. Apparently the pointcuts can already be used (e.g. refer in XML config to a pointcut defined in an `@Aspect`).  It would be super nice if the advice could also be used in Spring AOP - then you could have an AspectJ library and integrate into a project it using normal Spring AOP.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-04-05T01:29:49Z","2014-03-28T05:08:54Z"
"","7974","Create a Derby version of the MaxValueIncrementer (the HSQL one doesn't work). [SPR-3289]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3289](https://jira.spring.io/browse/SPR-3289?redirect=false)** and commented  Create a Derby version of the MaxValueIncrementer (the HSQL one doesn't work).   ---  **Affects:** 2.0.3  **Attachments:** - [DerbyMaxValueIncrementer.java](https://jira.spring.io/secure/attachment/12484/DerbyMaxValueIncrementer.java) (_4.68 kB_)","closed","type: enhancement,","spring-projects-issues","2007-03-22T21:28:19Z","2012-06-19T03:51:20Z"
"","7956","TransactionAwareConnectionFactoryProxy should allow for manual transaction control if desired [SPR-3271]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-3271](https://jira.spring.io/browse/SPR-3271?redirect=false)** and commented  Use Spring Aop to create Proxy in TransactionAwareConnectionProxy (instead of JDK Proxy).  In #7852 the resolution argues that throwing an exception on rollback is the only correct behaviour.  That's fine but you can't override it in any way (e.g. for a unit test that wants to simulate message provider failure).  If the TransactionAwareConnectionProxy  used an Aop proxy instead:      ProxyFactory proxyFactory = new ProxyFactory();     proxyFactory.setInterfaces((Class[]) classes.toArray(new Class[classes.size()]));     proxyFactory.addAdvice(new CloseSuppressingSessionInvocationHandler(target));     proxyFactory.setTarget(target);     return (Session) proxyFactory.getProxy();  then we can cast to Advised and call rollback on the underlying session.  Only for testing purposes of course, not in production code.  ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-17T04:23:08Z","2019-01-11T17:18:28Z"
"","8641","Lock contention in Spring AOP code limits scalability [SPR-3961]","**[Dave Rorke](https://jira.spring.io/secure/ViewProfile.jspa?name=drorke)** opened **[SPR-3961](https://jira.spring.io/browse/SPR-3961?redirect=false)** and commented  Running benchmarks under high loads with 8 or more concurrents threads I see significant lock contention from the synchronized block in org.springframework.aop.framework.AdvisedSupport.getInterceptorsAndDynamicInterceptionAdvice. This is a significant bottleneck in our benchmarks.   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-10-04T08:17:29Z","2012-06-19T03:47:50Z"
"","8507","MultiActionController API doc does not specify access requirement for handler methods. [SPR-3827]","**[Dave Minter](https://jira.spring.io/secure/ViewProfile.jspa?name=dcminter)** opened **[SPR-3827](https://jira.spring.io/browse/SPR-3827?redirect=false)** and commented  Documentation enhancement: http://static.springframework.org/spring/docs/2.0.x/api/index.html  It is not made clear that the methods in question need to be public, where you might reasonably assume otherwise. Note that the reference documentation is correct, it's just the API doc that is insufficiently specific.   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-31T02:34:04Z","2012-06-19T03:51:15Z"
"","7882","PathMatchingResourcePatternResolver fails on wildcarded resources in JAR files within an EAR [SPR-3197]","**[Darren Davison](https://jira.spring.io/secure/ViewProfile.jspa?name=darren.davison)** opened **[SPR-3197](https://jira.spring.io/browse/SPR-3197?redirect=false)** and commented  In a client's specific environment where I'm working, PathMatchingResourcePatternResolver fails to locate resources in the classpath in a JAR file if a wildcard exists anywhere in the pattern.  ie an import such as \  If the import is changed to explicitly reference classpath:META-INF/qas-services.xml then it works. It also works with classpath*:META-INF/qas-services.xml, but does NOT work with classpath:META-INF/*-services.xml  Fuller detail in the forum: http://forum.springframework.org/showthread.php?t=35310  In the javadoc for the http://www.springframework.org/docs/api/org/springframework/core/io/support/PathMatchingResourcePatternResolver.html it mentions situations that might cause resolution failure of classpath resources.  This is similar to issue http://opensource.atlassian.com/projects/spring/browse/SPR-2970 but note that there IS a non-wildcarded path component before the wildcard patterns start.  It may be a combination of the server and JDK that is causing something odd to happen.  Not had an opportunity to test further yet on other app server/JDK combos.   ---  **Affects:** 2.0.2","closed","in: core,","spring-projects-issues","2007-02-23T01:40:53Z","2019-01-12T16:40:19Z"
"","8275","DelegatingActionProxy and DelegatingRequestProcessor don't set the ActionServlet on the delegate Action [SPR-3593]","**[Danny Hurlburt](https://jira.spring.io/secure/ViewProfile.jspa?name=dhurlburtusa)** opened **[SPR-3593](https://jira.spring.io/browse/SPR-3593?redirect=false)*** and commented  DelegatingActionProxy and DelegatingRequestProcessor don't set the ActionServlet on the delegate Action. Many Strut's Actions call this.getServlet().getServletContext() to get access to the ServletContext. Without setting the ActionServlet, these classes violate the contract set by the Action class.  The following is an excerpt of the Action's Javadoc:  *   \When an \Action\ instance is first created, the controller * will call \setServlet\ with a non-null argument to * identify the servlet instance to which this Action is attached. * When the servlet is to be shut down (or restarted), the * \setServlet\ method will be called with a \null\ * argument, which can be used to clean up any allocated resources in use * by this Action.\  The following are the patches for both classes:  --- C:/Temp/Original/DelegatingActionProxy.java	Fri Jun 15 18:23:42 2007 +++ C:/Temp/Fixed/DelegatingActionProxy.java	Fri Jun 15 18:29:29 2007 @@ -115,13 +115,16 @@ * `@return` the delegate Action * `@throws` BeansException if thrown by WebApplicationContext methods * `@see` #determineActionBeanName   */   protected Action getDelegateAction(ActionMapping mapping) throws BeansException {  -         WebApplicationContext wac = getWebApplicationContext(getServlet(), mapping.getModuleConfig());  +         ActionServlet servlet = getServlet();  +         WebApplicationContext wac = getWebApplicationContext(servlet, mapping.getModuleConfig());       String beanName = determineActionBeanName(mapping);  -         return (Action) wac.getBean(beanName, Action.class);  +         Action delegateAction = (Action) wac.getBean(beanName, Action.class);  +         delegateAction.setServlet(servlet);  +         return delegateAction;    }    /**    * Fetch ContextLoaderPlugIn's WebApplicationContext from the ServletContext,   * falling back to the root WebApplicationContext. This context is supposed  ---  --- C:/Temp/Original/DelegatingRequestProcessor.java	Fri Jun 15 18:44:24 2007 +++ C:/Temp/Fixed/DelegatingRequestProcessor.java	Fri Jun 15 18:43:16 2007 @@ -163,11 +163,13 @@ protected Action getDelegateAction(ActionMapping mapping) throws BeansException { String beanName = determineActionBeanName(mapping); if (!getWebApplicationContext().containsBean(beanName)) { return null; }  ---      return (Action) getWebApplicationContext().getBean(beanName, Action.class);  +         Action delegateAction = (Action) getWebApplicationContext().getBean(beanName, Action.class);  +         delegateAction.setServlet(servlet);  +         return delegateAction;    }    /**    * Determine the name of the Action bean, to be looked up in   * the WebApplicationContext.  ---  **Affects:** 2.0.5  **Attachments:** - [DelegatingActionProxy.patch](https://jira.spring.io/secure/attachment/12672/DelegatingActionProxy.patch) (_1.05 kB_) - [DelegatingRequestProcessor.patch](https://jira.spring.io/secure/attachment/12673/DelegatingRequestProcessor.patch) (_761 bytes_)","closed","status: declined,","spring-projects-issues","2007-06-15T12:11:14Z","2019-01-13T08:08:09Z"
"","8221","ClassPathBeanDefinitionScanner should not proxy @Scope(name=""prototype"") [SPR-3538]","**[Daniel Tabuenca](https://jira.spring.io/secure/ViewProfile.jspa?name=dtabuenc)** opened **[SPR-3538](https://jira.spring.io/browse/SPR-3538?redirect=false)** and commented  When using  along with the scoped-proxy parameter to auto-generate proxies for `@Scope` annotated beans, ClassPathBeanDefinitionScanner creates a proxy for all scopes except singleton. As per spring documentation, beans in the ""prototype"" scope should not generally be proxied.   ---  **Affects:** 2.1 M1, 2.1 M2  **Attachments:** - [PrototypeProxyFix.patch](https://jira.spring.io/secure/attachment/12760/PrototypeProxyFix.patch) (_1.08 kB_)","closed","type: bug,","spring-projects-issues","2007-05-31T20:34:16Z","2012-06-19T03:50:50Z"
"","8220","@Autowired does not use findAutowireCandidates causing problems with scoped-proxies [SPR-3537]","**[Daniel Tabuenca](https://jira.spring.io/secure/ViewProfile.jspa?name=dtabuenc)** opened **[SPR-3537](https://jira.spring.io/browse/SPR-3537?redirect=false)** and commented  The new `@Autowired` annotation breaks when using scoped-proxies because it uses a simple BeanFactoryUtils.beanNamesForTypeIncludingAncestors(...)  with no subsequent check for  isAutowireCandidate(). I'm not sure why it doesn't just use  findAutoWiredCandidates() function of the bean factory. The way is stands scoped-proxies and their targets are both found to match for the type and therfore the autowiring fails.   ---  **Affects:** 2.1 M1, 2.1 M2","closed","type: bug,","spring-projects-issues","2007-05-31T20:01:35Z","2012-06-19T03:50:58Z"
"","8095","DataSourceTransactionManager doResume not setting connectionHolder back on transactionObject results in NullPointerException on commit or rollback [SPR-3412]","**[Daniel Shaw](https://jira.spring.io/secure/ViewProfile.jspa?name=dan@danieljshaw.com)** opened **[SPR-3412](https://jira.spring.io/browse/SPR-3412?redirect=false)** and commented  DataSourceTransactionManager doResume method does not reapply the connectionHolder to the resuming transaction, though it does rebind it to the SynchronizationManager, while doSupend nulls out the connectionHolder property of the transaction.  This will result in an NPE being thrown in the course of committing or rolling back the resumed transaction.  I can't supply a proper patch file at this time because I don't have direct CVS access to create the diff, so I will outline the changes below current: 239 	protected void doResume(Object transaction, Object suspendedResources) { 240 		ConnectionHolder conHolder = (ConnectionHolder) suspendedResources; 241 		TransactionSynchronizationManager.bindResource(this.dataSource, conHolder); 242 	} 243 new: 239 	protected void doResume(Object transaction, Object suspendedResources) { 240 		ConnectionHolder conHolder = (ConnectionHolder) suspendedResources; 241           DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction; 242           txObject.setConnectionHolder(conHolder); 243 		TransactionSynchronizationManager.bindResource(this.dataSource, conHolder); 244 	} 245    --- No further details from [SPR-3412](https://jira.spring.io/browse/SPR-3412?redirect=false)","closed","in: data,","spring-projects-issues","2007-04-24T06:06:31Z","2019-01-11T17:42:26Z"
"","8324","RmiProxyFactoryBean proxies enter broken state if initalised while RMI registry up but services not yet registered [SPR-3643]","**[Daniel Patterson](https://jira.spring.io/secure/ViewProfile.jspa?name=danpat)** opened **[SPR-3643](https://jira.spring.io/browse/SPR-3643?redirect=false)** and commented  http://forum.springframework.org/showthread.php?t=40895  We have a client calling our RMI services frequently.  If we bounce the server, occassionally the client will perform an RMI call while the RMI registry is up, but the services are not yet registered (a","closed","type: bug,","spring-projects-issues","2007-07-03T00:58:40Z","2012-06-19T03:50:15Z"
"","8087","Reuse NamespaceHandlerResolvers across XmlBeanDefinitionReaders [SPR-3404]","**[Dan Diephouse](https://jira.spring.io/secure/ViewProfile.jspa?name=dandiep)** opened **[SPR-3404](https://jira.spring.io/browse/SPR-3404?redirect=false)** and commented  When I create my Spring ApplicationContext, I use several XML files. It appears that currently Spring is creating a new DefaultNamespaceHandlerResolver for each one of these files. If I write my own ApplicationContext class though and do this:  protected void initBeanDefinitionReader(XmlBeanDefinitionReader reader) { if (nsHandlerResolver == null) { nsHandlerResolver = new DefaultNamespaceHandlerResolver(); } reader.setNamespaceHandlerResolver(nsHandlerResolver); ... }  It results in nearly a 1/2 second decrease in start up time (we have about 15 xml files, so its effectively populating that cache 15 times right now).  Is there any reason we can't just create one NamespaceHandlerResolver per ApplicationContext instead of creating one NamespaceHandlerResolver per XmlBeanDefinitionReader?   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-04-22T09:40:52Z","2012-06-19T03:51:14Z"
"","8471","http remoting hangs indefinately because socket timeout is set to 0 [SPR-3791]","**[Dan Armbrust](https://jira.spring.io/secure/ViewProfile.jspa?name=darmbrust)** opened **[SPR-3791](https://jira.spring.io/browse/SPR-3791?redirect=false)** and commented  The class which is responsible for creating http connections to make remote method calls, CommonsHttpInvokerRequestExecutor, creates a http client like this:      public CommonsHttpInvokerRequestExecutor() {     	this.httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());     }  Which doesn't set the socket timeout parameter - so it defaults to 0, which allows for a situation where a network link fails at some point after a remote call is made, but before it completes.  This leaves the thread that called the remote service hung on SocketIntputStream.socketRead, until the thread is killed (by a JVM exit).  While this bug seems unlikely, it isn't hypothetical, I have real problems in production code with this right now.  I can recreate the indefinite hang easily with the assistance of a debugger to pause a thread while I pull a network cable.  At a minimum, this code should be something more like this (I think, I still need to test to see if this fixes the immediate issue that we are having)      public CommonsHttpInvokerRequestExecutor() {     	HttpClientParams hcp = new HttpClientParams();     	hcp.setSoTimeout(30000);     	this.httpClient = new HttpClient(hcp, new MultiThreadedHttpConnectionManager());     }  But ideally, an interface or method needs to be made available so that end users of spring have control over the parameters passed into the HttpClient constructor, without having to change spring source code.    --- No further details from [SPR-3791](https://jira.spring.io/browse/SPR-3791?redirect=false)","closed","type: bug,","spring-projects-issues","2007-08-21T09:14:04Z","2012-06-19T03:50:10Z"
"","8513","Load-time weaving, @Autowired and ApplicationListener do not work together [SPR-3833]","**[Damien Hollis](https://jira.spring.io/secure/ViewProfile.jspa?name=dphollis)** opened **[SPR-3833](https://jira.spring.io/browse/SPR-3833?redirect=false)** and commented  We have an application that has been working fine using Load-time weaving and autowiring.  However, yesterday we implemented ApplicationListener on a class that has some `@Autowired` fields and suddenly spring was unable to find the candidate beans to autowire in.  The actual line that is causing the issue is:  AbstractBeanFactory (line 445) return !BeanFactoryUtils.isFactoryDereference(name) && typeToMatch.isAssignableFrom(beanClass);  typeToMatch.isAssignableFrom(beanClass) returns false even though it should return true.  The problem seems to be related to classloaders.  I have attached a simple application that demonstrates the problem.  Note: the problem goes away if either ApplicationListener is not implemented or if  is removed from the applicationContext.xml.   ---  **Affects:** 2.1 M3  **Attachments:** - [java.zip](https://jira.spring.io/secure/attachment/12863/java.zip) (_2.95 kB_)","closed","in: core,","spring-projects-issues","2007-09-02T10:48:03Z","2012-06-19T03:50:45Z"
"","8748","[OSGi] Missing Import-Package of org.hibernate.loader.custom in spring-orm Manifest  [SPR-4070]","**[Damian Gołda](https://jira.spring.io/secure/ViewProfile.jspa?name=dgolda)** opened **[SPR-4070](https://jira.spring.io/browse/SPR-4070?redirect=false)** and commented  I have own bundle (hibernate-all) with hibernate jars. The bundle exports among others package ""org.hibernate.loader.custom"":  osgi> bundle 65 initial@reference:file:plugins/hibernate-all-3.2.5.005-SNAPSHOT.jar/ [65] Id=65, Status=ACTIVE      Data Root=C:\Projects\r7\.metadata\.plugins\org.eclipse.pde.core\OSGi caseone\org.eclipse.osgi\bundles\65\data No registered services. No services in use. Exported packages ... org.hibernate.loader.custom; version=""3.2.5.SNAPSHOT""[exported] ...  In other bundle I have class: public class HibernateDomainObjectStore extends HibernateDaoSupport implements DomainObjectStore { ... public Long count(...) { return (Long)getHibernateTemplate().execute(new HibernateCallback() {      @Override     public Object doInHibernate(Session session) throws HibernateException, SQLException {  ... } }); } ...  That bundle imports org.hibernate.loader.custom.  When I call HibernateDomainObjectStore .count() an exception ""NoClassDefFoundError: org.hibernate.loader.custom.CustomQuery"" occurs. I switch on trace in equinox (debug/loader) and catch that: ""BundleClassLoader[org.springframework.bundle.spring.orm_2.5.0.rc1].loadClass(org.hibernate.loader.custom.CustomQuery) failed.""  SEE ATTACHMENT.  So I think that in spring-orm Manifest.MF should be added Import-Package of ""org.hibernate.loader.custom"".   ---  **Affects:** 2.5 RC1  **Attachments:** - [db-hibernate.txt](https://jira.spring.io/secure/attachment/13093/db-hibernate.txt) (_4.83 kB_) - [hibernate-all.txt](https://jira.spring.io/secure/attachment/13092/hibernate-all.txt) (_24.40 kB_) - [stack.txt](https://jira.spring.io/secure/attachment/13088/stack.txt) (_4.08 kB_)  **Issue Links:** - [OSGI-281](https://jira.spring.io/browse/OSGI-281) investigate proxy creation on ORM libraries","closed","type: bug,","spring-projects-issues","2007-11-08T01:26:12Z","2012-06-19T03:47:37Z"
"","8181","iBatis depencency of maven2's pom file. [SPR-3498]","**[Daigo Kobayashi](https://jira.spring.io/secure/ViewProfile.jspa?name=daigo)** opened **[SPR-3498](https://jira.spring.io/browse/SPR-3498?redirect=false)** and commented  Current pom file of spring has iBatis dependency. But it is not correct. Now following pom file has dependency setting: \ \com.ibatis\ \ibatis2\ \2.3.0.677\ \true\ \  However, it should be following: \ \org.apache.ibatis\ \ibatis-sqlmap\ \2.3.0\ \true\ \  This file is already uploaded central repository. So pom file should be modified.   ---  **Affects:** 2.0.5","closed","type: task,","spring-projects-issues","2007-05-19T01:42:09Z","2012-06-19T03:50:49Z"
"","8571","Transaction synchronization after flush but before commit with HibernateTransactionManager [SPR-3891]","**[craig mcmillan](https://jira.spring.io/secure/ViewProfile.jspa?name=mccraig)** opened **[SPR-3891](https://jira.spring.io/browse/SPR-3891?redirect=false)** and commented  i have an issue with using synchronizations with hibernate [ HibernateTransactionManager ]  - beforeCommit synchronizations are called from the processCommit() method of AbstractTransactionManager, before the HibernateTransactionManager.doCommit() method flushes the hibernate session - i have a hibernate event listener, listening for save, update and delete events. the event listener registers a synchronization and adds some items to a list for the synchronization to process beforeCommit [ to add some messages to a db queue in the same transaction ]. BUT update events aren't sent until the session flushes, which is after the beforeCommit synchronizations execute, so the synchronization never executes  this seems a bit weird. an obvious solution appears to be to patch the AbstractTransactionManager to either :  1. add an empty ""doPrepareForCommit"" method to AbstractTransactionManager, called from processCommit() before any synchronizations are triggered, and overridden in HibernateTransactionManager to flush the session 2. make the triggerBeforeCommit() method on AbstractTransactionManger non-final, so it can be overridden in HibernateTransactionManager to achieve the same effect  so :  - am i missing something obvious ? - if not, will a patch be accepted ? - if it will, what's the preferred solution form, and against which version/tag/branch ?    ---  **Affects:** 2.0.6  **Attachments:** - [doPrepareForCommit.patch](https://jira.spring.io/secure/attachment/12982/doPrepareForCommit.patch) (_622 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-09-19T01:52:11Z","2012-06-19T03:47:26Z"
"","7989","BridgeMethodResolver throwing sporadic exception [SPR-3304]","**[Craig Baker](https://jira.spring.io/secure/ViewProfile.jspa?name=crbaker)** opened **[SPR-3304](https://jira.spring.io/browse/SPR-3304?redirect=false)** and commented  I've run into a problem with the BridgeMethodResolver where by it is throwing seemingly the random exception.  This looks almost the same issue  #7272 that was resolved prior to the 2.0.0 release.  org.springframework.core.BridgeMethodResolver.findBridgedMethod (BridgeMethodResolver.java:91) at org.springframework.core.annotation.AnnotationUtils.getAnnotations (AnnotationUtils.java:54) at org.springframework.transaction.annotation.AnnotationTransactionAttribut eSource.findAllAttributes(AnnotationTransactionAttributeSource.java:85) at org.springframework.transaction.interceptor.AbstractFallbackTransactionA ttributeSource.computeTransactionAttribute (AbstractFallbackTransactionAttributeSource.java:147)  ---  **Affects:** 2.0.3  **Attachments:** - [MessageProducer.java](https://jira.spring.io/secure/attachment/12505/MessageProducer.java) (_374 bytes_) - [MessageProducerImpl.java](https://jira.spring.io/secure/attachment/12503/MessageProducerImpl.java) (_7.32 kB_) - [Receiver.java](https://jira.spring.io/secure/attachment/12504/Receiver.java) (_339 bytes_)","closed","in: core,","spring-projects-issues","2007-03-26T09:38:09Z","2019-01-11T18:15:08Z"
"","8745","enum comparsion fails [SPR-4066]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-4066](https://jira.spring.io/browse/SPR-4066?redirect=false)** and commented  the enums package do not properly implement comparison. AbstractLabeledEnum considers just the enum class w/o considering it's declaring class.  Consider this example:  public abstract class SomeEnum extends StaticLabeledEnum {  public static final SomeEnum ONE = new SomeEnum(1, ""one"") { public int getValue() { return 1; } };  public static final SomeEnum TWO = new SomeEnum(2, ""two"") { public int getValue() { return 2; } };  public abstract int getValue(); }  Right now it's impossible two resolve from the label/code TWO and ONE since they are added into a set and then compared but since they are of different types ( SomeEnum$1 and  SomeEnum$2) the comparison will fail. I've checked the JDK implementation and the comparison fails if the types _and_ the declaring classes are different exactly for the case above. Basically instead of just doing  if (!this.getType.equals(other.getType())) one should consider the type _and_ the declaring class before throwing an exception.  And since we're at it, the compareTo method should throw a ClassCastException in case the types are different not IllegalArgumentException.  The only class affected seems to be AbstractLabeledEnum.  ---  **Affects:** 2.5 RC1  **Issue Links:** - #8783 Spring-webflow  fails when runs on Spring2.5 RC2","closed","in: core,","spring-projects-issues","2007-11-07T19:16:23Z","2019-01-11T16:20:51Z"
"","8743","PropertyEditor for org.sf.core.enums StaticLabeledEnumResolver [SPR-4064]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-4064](https://jira.spring.io/browse/SPR-4064?redirect=false)** and commented  I've started using core.enums and I've found that when parsing I have to handle the resolving. It would be nice if Spring can have a property editor that deals with resolving for me. So when doing the conversion, it can check whether the argument expected has constants and find the match based on the string supplied.  Example:  setEnumLike(MyLabeledEnum enm)","closed","type: enhancement,","spring-projects-issues","2007-11-07T03:52:37Z","2008-05-11T19:30:28Z"
"","8710","make bean attributes global attributes inside spring-beans.xsd [SPR-4031]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-4031](https://jira.spring.io/browse/SPR-4031?redirect=false)** and commented  Right now, the beanAttributes group contains all the possible attributes used for a bean definition. However, namespaces that extend it, cannot reuse specific attributes and need to redefine them. It would be nice to make the attributes global (while preserving the group) so that other NS can reuse their definitions.  ---  **Affects:** 2.5 RC1  **Issue Links:** - #8708 make bean attributes global attributes inside spring-beans.xsd (_**""is duplicated by""**_) - #8709 make bean attributes global attributes inside spring-beans.xsd (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2007-11-01T01:31:36Z","2019-01-11T16:23:51Z"
"","8709","make bean attributes global attributes inside spring-beans.xsd [SPR-4030]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-4030](https://jira.spring.io/browse/SPR-4030?redirect=false)** and commented  Right now, the beanAttributes group contains all the possible attributes used for a bean definition. However, namespaces that extend it, cannot reuse specific attributes and need to redefine them. It would be nice to make the attributes global (while preserving the group) so that other NS can reuse their definitions.  ---  **Issue Links:** - #8710 make bean attributes global attributes inside spring-beans.xsd (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2007-11-01T01:31:16Z","2019-01-11T16:23:57Z"
"","8708","make bean attributes global attributes inside spring-beans.xsd [SPR-4029]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-4029](https://jira.spring.io/browse/SPR-4029?redirect=false)** and commented  Right now, the beanAttributes group contains all the possible attributes used for a bean definition. However, namespaces that extend it, cannot reuse specific attributes and need to redefine them. It would be nice to make the attributes global (while preserving the group) so that other NS can reuse their definitions.  ---  **Issue Links:** - #8710 make bean attributes global attributes inside spring-beans.xsd (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2007-11-01T01:31:10Z","2019-01-11T16:16:26Z"
"","8630","AbstractApplicationContext#destroyBeans() should be reused when refreshing a beanFactory [SPR-3950]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3950](https://jira.spring.io/browse/SPR-3950?redirect=false)** and commented  When an application context is being destroyed, destroyBeans() is being called which destroys existing singletons. However, during applicationCtx refresh, the same thing happens (#refreshBeanFactory) but in this case, the destroySingletons() method is called manually.  I'd like, if possible, that also during refresh, before refreshing the beanfactory t have destroyBeans called while the beanFactory is valid. This allows me to handle special beans (such as scoped ones) in only one method w/o special handling of refresh/close method.  Currently I have to override both obtainFreshBeanFactory as well as destroyBeans to make sure I destroy my beans both in refresh and destroy time (I cannot override refreshBeanFactory since it's final).   ---  **Affects:** 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-10-01T19:14:15Z","2012-06-19T03:47:22Z"
"","8623","ibatis misses import on com.ibatis.sqlmap.engine.transaction.external package [SPR-3943]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3943](https://jira.spring.io/browse/SPR-3943?redirect=false)** and commented  I've tested this locally and it seems that bndtool is unable to detect that this class is referred and thus, does not include its package. I've reported the bug to Peter and hopefully, it will be fixed before the RC release. If not, I'll add the package by hand.   ---  **Affects:** 2.1 M4  **Issue Links:** - [OSGI-211](https://jira.spring.io/browse/OSGI-211) Missing dependency in spring-orm for iBatis (_**""depends on""**_)","closed","type: task,","spring-projects-issues","2007-09-29T03:39:24Z","2012-06-19T03:47:07Z"
"","8622","SPRING_HANDLER_MAPPINGS_LOCATION should be public [SPR-3942]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3942](https://jira.spring.io/browse/SPR-3942?redirect=false)** and commented  DefaultNamespaceHandlerResolver#SPRING_HANDLER_MAPPINGS_LOCATION should be public just like PluggableSchemaResolver#DEFAULT_SCHEMA_MAPPINGS_LOCATION (maybe add also a DEFAULT_ prefix?).    ---  **Affects:** 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-29T02:23:14Z","2012-06-19T03:46:59Z"
"","8621","SPRING_HANDLER_MAPPINGS_LOCATION should be public [SPR-3941]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3941](https://jira.spring.io/browse/SPR-3941?redirect=false)** and commented  DefaultNamespaceHandlerResolver#SPRING_HANDLER_MAPPINGS_LOCATION should be public just like PluggableSchemaResolver#DEFAULT_SCHEMA_MAPPINGS_LOCATION (maybe add also a DEFAULT_ prefix?).  ---  **Issue Links:** - #8620 SPRING_HANDLER_MAPPINGS_LOCATION should be public (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2007-09-29T02:21:57Z","2019-01-11T21:13:57Z"
"","8620","SPRING_HANDLER_MAPPINGS_LOCATION should be public [SPR-3940]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3940](https://jira.spring.io/browse/SPR-3940?redirect=false)** and commented  DefaultNamespaceHandlerResolver#SPRING_HANDLER_MAPPINGS_LOCATION should be public just like PluggableSchemaResolver#DEFAULT_SCHEMA_MAPPINGS_LOCATION (maybe add also a DEFAULT_ prefix?).  ---  **Issue Links:** - #8621 SPRING_HANDLER_MAPPINGS_LOCATION should be public (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2007-09-29T02:21:54Z","2019-01-11T21:13:59Z"
"","8608","Packages shouldn't be split across multiple jars/bundles [SPR-3928]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3928](https://jira.spring.io/browse/SPR-3928?redirect=false)** and commented  the bndtool has modified some jars by expanding their content and manifest. Example would be spring-web which includes orm and remoting.   ---  **Affects:** 2.1 M4  **Issue Links:** - [OSGI-227](https://jira.spring.io/browse/OSGI-227) org.springframework.orm.hibernate3.support is split between spring-orm and spring-web (_**""is depended on by""**_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-09-26T19:48:44Z","2012-06-19T03:47:07Z"
"","8604","jars should contain META-INF entry [SPR-3924]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3924](https://jira.spring.io/browse/SPR-3924?redirect=false)** and commented  it is important when creating the distribution jar to have an actual entry for META-INF folder. The jar specification is unclear in this regard and we (inside Spring OSGi) had plenty of problems regarding missing folders since they make wildcard matching impossible.  You can test if you get a folder entry by using: jar tvf myJar.jar  At the moment, spring-test and spring-core have these entries missing: jar tvf spring-core shows : 4048  Sun Sep 09 21:23:00 EEST 2007 META-INF/MANIFEST.MF 0  Sun Sep 09 21:23:00 EEST 2007 org/ ...  to be correct, the jar should output Sun Sep 09 21:23:00 EEST 2007 META-INF/MANIFEST.MF 0 Sun Sep 09 21:23:00 EEST 2007 META-INF/ 0 Sun Sep 09 21:23:00 EEST 2007 org/  notice the 0 size entry for META-INF.   ---  **Affects:** 2.1 M4","closed","in: core,","spring-projects-issues","2007-09-26T00:17:14Z","2012-06-19T03:47:32Z"
"","8551","Utility methods for working with private methods/fields [SPR-3871]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3871](https://jira.spring.io/browse/SPR-3871?redirect=false)** and commented  It would be nice to have out of the box the ability to modify and read private fields and methods especially when testing classes w/o getters.   ---  **Affects:** 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-13T02:30:44Z","2012-06-19T03:47:39Z"
"","8533","upgrade OpenJPA to 1.0 [SPR-3853]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3853](https://jira.spring.io/browse/SPR-3853?redirect=false)** and commented  Besides the usual upgrade, it might make sense to look at OpenJpaVendorAdapter.getEntityManagerInterface() We might includeOpenJPAEntityManagerSPI (from the same package) as OpenJPAEntityManager is constrained to just the published API set; OpenJPAEntityManagerSPI contains additional useful methods that are not really intended for ""normal user"" consumption, but are useful for the power user set.   --- No further details from [SPR-3853](https://jira.spring.io/browse/SPR-3853?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-09-08T20:29:47Z","2012-06-19T03:47:33Z"
"","8532","LTW for WebLogic 10 [SPR-3852]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3852](https://jira.spring.io/browse/SPR-3852?redirect=false)** and commented  Provide a LTW implementation for WL 10.   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-09-08T20:29:41Z","2012-06-19T03:47:29Z"
"","8521","depends-on and getDependentBean [SPR-3841]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3841](https://jira.spring.io/browse/SPR-3841?redirect=false)** and commented  seems that depends-on is not considered by getDependentBean.  Just discovered this after testing against a Spring version from today morning (4/08/07):  \ \  bf.getDepedentBeans(""a"") = {}  IMO, depends-on should also populate the map since it indicates a relationship between two beans even though not through dependencies.   ---  **Affects:** 2.1 M3","closed","type: task,","spring-projects-issues","2007-09-03T19:55:43Z","2012-06-19T03:47:16Z"
"","8515","BeanFactoryUtils.getTransitiveDependentBeans [SPR-3835]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3835](https://jira.spring.io/browse/SPR-3835?redirect=false)** and commented  BeanFactoryUtils.getTransitiveDependentBeans is now part of the trunk (updated this morning with FactoryBean support).   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-09-02T17:51:24Z","2008-05-12T21:27:22Z"
"","8512","offer concurrent map contract [SPR-3832]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3832](https://jira.spring.io/browse/SPR-3832?redirect=false)** and commented  CollectionFactory can create, if possible, a concurrent hashmap delegating to either java 5 or backport utils. I run into cases where I'd like to do smth like putIfAbsent or replace() which are available in the formentioned implementations. However, there is no current map interface to case to do this methods. The solution would be to offer an interface which can delegate to the underlying implementation after discovery. Still, since in the next version of Spring, jdk 5.0 will be used by default, this might be useful only for projects using 1.4 (such as spring/osgi - not sure about the rest of the projects).   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-09-01T18:59:42Z","2012-06-19T03:50:41Z"
"","8487","dependentBeanMap [SPR-3807]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3807](https://jira.spring.io/browse/SPR-3807?redirect=false)** and commented  Just noticed that beanDependentMap uses a synchronized block  when reading  - it would be nice to fallback to the concurrentMap which does virtually no-locking for reading.   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-26T21:31:25Z","2012-06-19T03:50:09Z"
"","8475","SmartFactoryBeans should have getObject even if they are already initialized [SPR-3795]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3795](https://jira.spring.io/browse/SPR-3795?redirect=false)** and commented  preinstantiateSingletons calls getObject() for SmartFB only if the FB themselves are not created. in spring/osgi already have the FB in place and for this reason the getObject() is not called. It would be nice to be able to do that w/o having to destroy the factory before preinstantiateSingletons.    ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-22T23:32:33Z","2012-06-19T03:50:20Z"
"","8461","add bean tracking to PropertyPlaceholderConfigurer [SPR-3781]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3781](https://jira.spring.io/browse/SPR-3781?redirect=false)** and commented  Inside Spring/OSGi we want to extend the PPC functionality so that we can read from a dynamic OSGi service. This means not just reading from a different source but rather doing dynamic updates when the service reacts. The problem is that the current PPC doesn't do any bean tracking so it's impossible for subclasses to know what beans had their definitions modified w/o overriding the entire process again. One solution would be to move the creation of the BeanDefinitionVisitor and valueResolver in two protected methods so that subclasses could decorate these classes and do the tracking themselves. In my case I need to determine the beans that have been afected by the PPC and also the exact properties and their initial values. That is, when a property update occurs, I can identify the affected beans and then reapply the StringResolver to get the new bean definition.   ---  **Affects:** 2.1 M3  7 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2007-08-15T21:24:55Z","2015-09-22T17:34:33Z"
"","8460","PathMatchingResourcePatternResolver logger should use getClass() [SPR-3780]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3780](https://jira.spring.io/browse/SPR-3780?redirect=false)** and commented  PathMatchingResourcePatternResolver offers a protected logger however  it is created using LogFactory.getLog(PathMatchingResourcePatternResolver.class); which means subclasses using it will log as PathMatchingResourcePatternResolver.class. The logger should be marked as private or non-static and initialized through getClass().   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-15T03:21:28Z","2012-06-19T03:50:04Z"
"","8437","org.springframework.instrument package split between spring-context.jar and spring-context-support.jar [SPR-3756]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3756](https://jira.spring.io/browse/SPR-3756?redirect=false)** and commented  In 2.1m3 package org.springframework.instrument.classloading is placed inside spring-context.jar while org.springframework.instrument.classloading.glasshfish and oc4j inside spring-context.support.jar However, the latter are used by org.sf.context.weaving.DefaultContextLoadTimeWeaver which doesn't do any special discovery. Moreover, inside OSGi we end up with circular dependencies between packages : spring-context.jar depends on spring-context-support.jar which depends on spring-context.  I think the easiest solution is to move org.springframework.instrument.classloading.glassfish/oc4j inside spring-context since DefaultContextLTW depends on them. Moreover, inside org.sf.instrument.classloading there are other LTW inside the default package.   ---  **Affects:** 2.1 M3","closed","in: core,","spring-projects-issues","2007-08-10T17:46:26Z","2012-06-19T03:50:15Z"
"","8414","promote Jpa Plus interfaces from sandbox [SPR-3733]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3733](https://jira.spring.io/browse/SPR-3733?redirect=false)** and commented  In the sandbox under, http://springframework.cvs.sourceforge.net/springframework/spring/sandbox/src/org/springframework/orm/jpa/ I've added a couple of extensions to the JPA by providing access to the underlying Id generator class. Hibernate and OpenJPA are covered - Toplink not yet. At the moment a plain object is being returned as a generator but probably a wrapper interface could be provided.   --- No further details from [SPR-3733](https://jira.spring.io/browse/SPR-3733?redirect=false)","closed","status: declined,","spring-projects-issues","2007-08-01T22:04:55Z","2011-06-03T04:51:07Z"
"","8412","determine the dependencies of a bean [SPR-3731]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3731](https://jira.spring.io/browse/SPR-3731?redirect=false)** and commented  As per our discussion related to Spring/OSGi, it would be nice to be able to determine the beans that depend on a certain bean. String[] beans = bf.getDependencies(String beanName);  this will of course work only for dependencies that are set through the container - dependencies set manually by the user through usage of getBean() cannot be determined (and in fact, should not).   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-01T21:09:21Z","2012-06-19T03:50:06Z"
"","8400","ReflectionUtils.FieldCallback [SPR-3719]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3719](https://jira.spring.io/browse/SPR-3719?redirect=false)** and commented  The javadoc for FieldCallback is misleading - it states: Perform an operation using the given field. * `@param` field the field which will have been made accessible before this invocation  However, the fields are not made accessible before this invocation. The javadoc should either be rectified or the field made accessible. Probably the latter should be applied to be consistent with Method callbacks from the same class.    ---  **Affects:** 2.0.5","closed","type: task,","spring-projects-issues","2007-07-30T19:30:34Z","2012-06-19T03:51:06Z"
"","8396","expand Namespace conventions [SPR-3715]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3715](https://jira.spring.io/browse/SPR-3715?redirect=false)** and commented  When dealing with namespace parsing, I often encounter the case where a property can be inlined as a reference or nested as a declaration. Quick example:  or  \  \   It would be nice if the current Convention class could support the -ref case. At the moment, comparator-ref is translated into comparatorRef property. Not sure if this is clash, but it would be nice to translate comparator-ref into builder.addPropertyReference(attributeWithoutTrailingRef, StringUtils.trimWhitespace(attribute.getValue()));  Basically this means adding a new convention where attributes ending with -ref are translated into references.   --- No further details from [SPR-3715](https://jira.spring.io/browse/SPR-3715?redirect=false)","closed","status: declined,","spring-projects-issues","2007-07-26T20:48:01Z","2009-02-18T00:11:40Z"
"","8306","ShadowingClassLoader customization [SPR-3624]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3624](https://jira.spring.io/browse/SPR-3624?redirect=false)** and commented  When using JPA in non-traditional environments (such as groovy) the instrumentation should be disabled on certain classes. Normally this achieved by extending AbstractJpaTests and overrding customizeResourceOverridingShadowingClassLoader.  The problem is that 2 months ago or so, ShadowingClassLoader has been modified and excluding a class package can be only achieved through #isClassNameExcludedFromShadowing which means extending the SCL. At the moment this is impossible since inside AbstractJpaTests, OrmXmlOverridingShadowingClassLoader which is a SCL child, is being used but this class has package visibility and thus it can't be constructed. The reason for this is that it triggers loading if it is defined as an inner class. Basically at this point, one can't customize excluded packages... The easiest solution here is to allow existing SCL to have excluded packages specified as a list SCL#addExcludedName(String) which means the existing instances can be reused rather then new ones created.   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-06-26T20:53:58Z","2012-06-19T03:50:12Z"
"","8233","AbstractSingleSpringContextTests bean definition reader [SPR-3550]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3550](https://jira.spring.io/browse/SPR-3550?redirect=false)** and commented  AbstractSingleSpringContextTests always uses an Xml Bean definition reader internally when creating the application context inside createApplicationContext(). It would be nice to have the bean definition reader creation in a separate methods so that subclasses can chose that individually w/o copy-pasting createApplicationContext() to do the context creation and refresh. Consider JavaConfig where an Annotation based reader can be plugged in. I assume the same holds true for Spring 2.1   ---  **Affects:** 2.1 M2  4 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2007-06-03T21:12:53Z","2012-06-19T03:50:09Z"
"","7999","ResourceUtils getPrefix [SPR-3314]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3314](https://jira.spring.io/browse/SPR-3314?redirect=false)** and commented  Small improvement - when writing custom resource/ResourceLoader, custom prefixes can be used and thus is need to determine if there is a prefix in the given String. The URL is not really helpful since it tries to validate the passed in String which means among other things that the protocol has to be registered with the URL factory which problematic (since the registration can be called only one per VM).  The getPrefix is going to be a simple method which can check if the given string has at most one :// and that everything occurs before it contains only alphanumberics and no funny characters and return it. I already have a small simple implementation that does the trick.   --- No further details from [SPR-3314](https://jira.spring.io/browse/SPR-3314?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-03-28T02:08:26Z","2008-05-04T07:06:39Z"
"","7975","Constants improvement [SPR-3290]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3290](https://jira.spring.io/browse/SPR-3290?redirect=false)** and commented  I think Constants is one of a hidden jewel inside Spring - very useful for dealing with constant fields in general. However, I see that is mainly focused on value retrieval. I would like to be able to do the following: - retrieve the current fields found by the Constant (i.e. getName(String prefix)) - have support not just for prefixes but also suffixes.  Thanks, Costin   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-22T22:09:43Z","2012-06-19T03:50:22Z"
"","7959","improve ClassUtils.classPackageAsResourcePath [SPR-3274]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3274](https://jira.spring.io/browse/SPR-3274?redirect=false)** and commented  At the moment, the forementioned method uses the Package class to get the package. while this works, defining a package is optional for a ClassLoader and ad-hoc classloaders (such as transforming one) skip the implementation. Below is a small code which detects the package based on the classname rather then on the Package (aka manifest-based created object):  String className = clazz.getName(); String currentPckg = className.substring(0, className.lastIndexOf('.'));  This work, as along clazz is not null.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-19T05:16:02Z","2012-06-19T03:50:43Z"
"","7949","no-op behavior for Junit classes [SPR-3264]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3264](https://jira.spring.io/browse/SPR-3264?redirect=false)** and commented  If the current test classes provided in Spring have to be reused (as we do in Spring/OSGi), there are a few bumps which make extension hard.  One particular problem occurs in AbstractSingleSpringContextTests and AbstractDependencyInjectionSpringContextTests. The first class always expects an application context to be created even if no files/locations are specified which can lead to NPE problems or force an appCtx to be instantiated even if not needed. Even if the first problem can be overcome, the second test will try to apply auto-injection; this can be disabled but it has to be done manually inside the onSetUp...  Basicaly, it would be nice to have a no-op behavior; if nothing is supplied then the functionality inside the test is not applied. Again this makes sense, if the test is used as a base class. Another solution would be to move some of the functionality outside the test class so new hierachies don't have to extend this one. However, this doesn't add a lot of benefits since in most cases, the functionality has to be applied on the test itself.  ---  **Issue Links:** - #7876 AbstractSingleSpringContextTests - runBare vs final setUp() (_**""depends on""**_)","closed","type: enhancement,","spring-projects-issues","2007-03-14T03:41:58Z","2019-01-11T17:18:58Z"
"","7923","AbstractJpaTests and Maven [SPR-3238]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-3238](https://jira.spring.io/browse/SPR-3238?redirect=false)** and commented  For some reason, when using AbstractJapTests and maven, one gets a StackOverFlow:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entity ManagerFactory' defined in class path resource [jpa-beans.xml]: Invocation of init method fail ed; nested exception is java.lang.StackOverflowError Caused by: java.lang.StackOverflowError at java.lang.Character.toLowerCase(Character.java:4204) at java.lang.Character.toLowerCase(Character.java:4171) at java.lang.String.toLowerCase(String.java:2219) at java.lang.String.toLowerCase(String.java:2296) at org.apache.xerces.util.URI.setScheme(URI.java:908) at org.apache.xerces.util.URI.initializeScheme(URI.java:576) at org.apache.xerces.util.URI.initialize(URI.java:400) at org.apache.xerces.util.URI.\(URI.java:211) at org.apache.xerces.util.URI.\(URI.java:195) at org.apache.xerces.impl.XMLEntityManager.expandSystemId(XMLEntityManager.java:1140) at org.apache.xerces.impl.XMLEntityManager.resolveEntity(XMLEntityManager.java:581) at org.apache.xerces.impl.xs.XMLSchemaLoader.xsdToXMLInputSource(XMLSchemaLoader.java: 625) at org.apache.xerces.impl.xs.XMLSchemaLoader.processJAXPSchemaSource(XMLSchemaLoader.j ava:580) at org.apache.xerces.impl.xs.XMLSchemaLoader.loadSchema(XMLSchemaLoader.java:489) at org.apache.xerces.impl.xs.XMLSchemaLoader.processJAXPSchemaSource(XMLSchemaLoader.j ava:588) at org.apache.xerces.impl.xs.XMLSchemaLoader.loadSchema(XMLSchemaLoader.java:489) at org.apache.xerces.impl.xs.XMLSchemaLoader.processJAXPSchemaSource(XMLSchemaLoader.j ava:588) at org.apache.xerces.impl.xs.XMLSchemaLoader.loadSchema(XMLSchemaLoader.java:489) at org.apache.xerces.impl.xs.XMLSchemaLoader.processJAXPSchemaSource(XMLSchemaLoader.j ava:588)  ---  **Affects:** 2.0 final  **Issue Links:** - #7930 Maven leads to StackOverflowError for AbstractJpaTests (_**""duplicates""**_) - #7930 Maven leads to StackOverflowError for AbstractJpaTests (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2007-03-07T07:23:30Z","2019-01-11T17:17:36Z"
"","8385","Checkbox value is not run through custom editors like all other tags [SPR-3704]","**[Corey Theiss](https://jira.spring.io/secure/ViewProfile.jspa?name=ctheiss)** opened **[SPR-3704](https://jira.spring.io/browse/SPR-3704?redirect=false)** and commented  The following tags all run the value attribute through custom editors: Input, HiddenInput, RadioButton, Select/Options, Textarea (value here is defined as the tag body).  This is usually accomplished by something like this:  tagWriter.writeAttribute(""value"", getDisplayString(getBoundValue(), getPropertyEditor()));  Checkbox is the only tag that looks like this:  tagWriter.writeAttribute(""value"", getDisplayString(resolvedValue));  This inconsistency is making using checkboxes difficult.  Here's the patch:  131c131 < 		tagWriter.writeAttribute(""value"", getDisplayString(resolvedValue)); —  > tagWriter.writeAttribute(""value"", getDisplayString(resolvedValue, getPropertyEditor()));  143c143 < 		tagWriter.writeAttribute(""value"", getDisplayString(resolvedValue)); —  > tagWriter.writeAttribute(""value"", getDisplayString(resolvedValue, getPropertyEditor()));    ---  **Affects:** 2.0.6","closed","type: bug,","spring-projects-issues","2007-07-20T02:18:10Z","2012-06-19T03:50:31Z"
"","8739","Missing factory name breaks Tiles integration [SPR-4060]","**[Colin McFarlane](https://jira.spring.io/secure/ViewProfile.jspa?name=colinmcfarlane)** opened **[SPR-4060](https://jira.spring.io/browse/SPR-4060?redirect=false)** and commented  We have a project in an EAR file that comprises several WAR applications that share a common struts.jar. All the apps use tiles and most also use struts, one uses spring. The TilesPlugin is called to initialise the Tiles library during deployment before the spring app is deployed. This initialisation installs the class org.apache.struts.tiles.TilesUtilStrutsModulesImpl as the default impl class rather than the vanilla TilesUtilImpl. This class stores the tiles DefinitionsFactory using a (sic) suffix as shown below:      protected void makeDefinitionsFactoryAccessible(         DefinitionsFactory factory,         ServletContext servletContext) {              String prefix = factory.getConfig().getFactoryName();         servletContext.setAttribute(DEFINITIONS_FACTORY + prefix, factory);     }  The struts library seems to initialise the getFactoryName() to a zero length string as opposed to leaving it as null. (not entirely sure where). The spring TilesConfigurer class however leaves this as null. The result is that the DefinitionsFactory is stored (by struts) in the servlet context with the key of ""org.apache.struts.tiles.DEFINITIONS_FACTORYnull"" but is looked for by spring using a key of ""org.apache.struts.tiles.DEFINITIONS_FACTORY"" which it doesn't find and so causes an exception.  I think the fix is pretty straightforward by just adding one line to set the factory name as shown below.  TilesConfigurer creates and initialises a new DefinitionsFactoryConfig object. public void afterPropertiesSet() throws DefinitionsFactoryException { // initialize the configuration for the definitions factory DefinitionsFactoryConfig factoryConfig = new DefinitionsFactoryConfig(); factoryConfig.setFactoryClassname(this.factoryClass.getName()); factoryConfig.setParserValidate(this.validateDefinitions);  -->        factoryConfig.setFactoryName("""");          if (this.definitions != null) {                 String defs = StringUtils.arrayToCommaDelimitedString(this.definitions);                 if (logger.isInfoEnabled()) {                         logger.info(""TilesConfigurer: adding definitions ["" + defs + ""]"");                 }                 factoryConfig.setDefinitionConfigFiles(defs);         }              // initialize the definitions factory         createDefinitionsFactory(factoryConfig);              logger.debug(""TilesConfigurer: initialization completed"");              }  This is similar but not identical to issue http://opensource.atlassian.com/projects/spring/browse/SPR-2827   ---  **Affects:** 2.0.6, 2.0.7","closed","in: core,","spring-projects-issues","2007-11-06T23:18:47Z","2012-06-19T03:46:58Z"
"","7938","SUGGESTION: Integrate Plug-In concept with Spring Framework. [SPR-3253]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-3253](https://jira.spring.io/browse/SPR-3253?redirect=false)** and commented  Next Level: Integrate Plug-In concept + Spring Framework.  Eclipse, NetBeans and an increasing number of applications are using Plug-Ins as a way to modularize software applications.  Software plug-ins are natural.  It's like working with children's mechanical LEGO.   It makes software system easier to expand in a natural way.  There is new Plug-In library for Java called JPF (Java Plug-In Framework http://jpf.sourceforge.net/).  It is small and works well.  I suggest that Spring Framework move to the next level and integrate with JPF.  Integrating a java bean container with the plug-in concept.  It's innovative.  It has the potential to make programming even easier and more efficient than before for programmers.  It goes far beyond EJB standards.  I think the way Spring loads beans can be maintained and Spring can be complemented with a new way of loading beans with plug-in architecture.   Using different XML tag is a way of supporting both ways of working.   Naturally, integrating both concepts will surely require careful planning and design but the result will be so much greater.  The goal remains the same:  To have Spring load and initialize java beans, its attribute and its associations automatically without custom coding (or very little).   By integrating JPF, it adds an order of magnitude of modularity and expandability.  The Spring Framework team can surely find an elegant way of doing this.   ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-03-12T21:15:48Z","2012-06-19T09:37:41Z"
"","7955","BeanCreationException with public init-method on package private class [SPR-3270]","**[Clayton J. Kovar](https://jira.spring.io/secure/ViewProfile.jspa?name=ckovar)** opened **[SPR-3270](https://jira.spring.io/browse/SPR-3270?redirect=false)** and commented  If you have a package private class with a public init-method a BeanCreationException is thrown.  Every other combination works. - Works: public class with a init method of any access (public, private, protected, package protected) - Works: package private class with a init method of non-public access (private, protected, package protected)  If your init method was defined in an interface (which forces it to be public) but you wanted your implementation class to be package private you would have to define a separate non-public init method that in turn calls the public one.  Eample class:  class Foo { public void initialize() { System.out.println(""Initialized.""); } }  Example bean definition:             Exception thrown:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'foo' defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is java.lang.IllegalAccessException: Class org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory can not access a member of class Foo with modifiers ""public"" Caused by: java.lang.IllegalAccessException: Class org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory can not access a member of class Foo with modifiers ""public"" at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:57) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1185) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1147) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1110) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:431) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:254) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:144) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:284) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:91) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:75) at FooTest.testSpringBean(FooTest.java:16)   ---  **Affects:** 2.0.3","closed","in: core,","spring-projects-issues","2007-03-16T16:42:59Z","2012-06-19T03:50:21Z"
"","8815","Wrong .jar available as spring-2.5.jar through maven [SPR-4136]","**[Claus Nielsen](https://jira.spring.io/secure/ViewProfile.jspa?name=clanie)** opened **[SPR-4136](https://jira.spring.io/browse/SPR-4136?redirect=false)** and commented  \ 	\org.springframework\ 	\spring\ 	\2.5\ \ make Maven fetch a 315K jar with nothing but the org.springframework.aop package. That dosn't exactly work as a drop-in replacement for spring-2.0.7.jar.   ---  **Affects:** 2.5 final","closed","","spring-projects-issues","2007-11-20T03:07:53Z","2019-01-11T15:46:35Z"
"","7894","javadoc - typo in Cglib2AopProxy  [SPR-3208]","**[Claus Ibsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davsclaus)** opened **[SPR-3208](https://jira.spring.io/browse/SPR-3208?redirect=false)** and commented  I was reading some of the jira changes about AOP and in #6924  There was a post to this source code: http://springframework.cvs.sourceforge.net/springframework/spring/src/org/springframework/aop/framework/Cglib2AopProxy.java?revision=1.65&view=markup  #1: I noticed a type in the javadoc for line 558 ""Interceptor used specifcally for advised methods on a frozen, static proxy.""  where specifcally is the typo. It should be: specifically  #2: PS: On line 301 the hashmap is not initialized with a length this.fixedInterceptorMap = new HashMap();  Could this be changed to: this.fixedInterceptorMap = new HashMap(methods.length);  ---  **Affects:** 2.0.2","closed","in: core,","spring-projects-issues","2007-02-26T19:03:00Z","2019-01-11T17:15:34Z"
"","7962","Netbeans IDE setup [SPR-3277]","**[Claudio Mendoza](https://jira.spring.io/secure/ViewProfile.jspa?name=cmendoza)** opened **[SPR-3277](https://jira.spring.io/browse/SPR-3277?redirect=false)** and commented  Figure out and add to documentation how to set up the Netbeans IDE to effect the easier editing of Spring's XML Schema-based configuration files.   ---  **Affects:** 2.0.3","closed","status: declined,","spring-projects-issues","2007-03-21T00:55:31Z","2012-06-19T03:18:58Z"
"","8581","TypeUtils says that List is assignable from List, but it isn't [SPR-3901]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-3901](https://jira.spring.io/browse/SPR-3901?redirect=false)** and commented  Non-wildcard generic types are only assignable if their type parameters match exactly:  import java.util.List;  import org.springframework.util.TypeUtils;  public class TypeUtilsTest { public static List\ strings;  public static List\ objects;  public static void main( String[] args ) throws Exception { // this prints true... System.out.println(TypeUtils.isAssignable(TypeUtilsTest.class.getField(""objects"").getGenericType(), TypeUtilsTest.class.getField(""strings"").getGenericType())); // ...but this doesn't compile objects = strings; } }  see http://www.angelikalanger.com/GenericsFAQ/FAQSections/ParameterizedTypes.html#Are%20different%20concrete%20instantiations%20of%20the%20same%20parameterized%20type%20compatible?   ---  **Affects:** 2.1 M4","closed","in: core,","spring-projects-issues","2007-09-21T09:17:59Z","2012-06-19T03:47:46Z"
"","8580","FileSystemResource.getURL should return ""file:/C:/foo%20bar"" instead of ""file:C:/foo bar"" [SPR-3900]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-3900](https://jira.spring.io/browse/SPR-3900?redirect=false)** and commented  This is related to #8579.  Here's a small test that compares how the JDK classes convert a File to a URL and a URI and how FileSystemResource does it:  URL fileUrl = new File(""C:/foo bar"").toURI().toURL(); URL springUrl = new FileSystemResource(""C:/foo bar"").getURL(); System.out.println(fileUrl); System.out.println(springUrl); System.out.println(fileUrl.toURI()); System.out.println(springUrl.toURI());  prints  file:/C:/foo%20bar file:C:/foo bar file:/C:/foo%20bar Exception in thread ""main"" java.net.URISyntaxException: Illegal character in opaque part at index 11: file:C:/foo bar  Because whitespace is not escaped in the URL, it cannot be converted to a URI (which uses stricter parsing).  The method java.io.File.toURL() has the same problem, which is why it is deprecated since JDK 6.  If JDK 1.4 can be used, FileSystemResource.getURL() can easily be fixed - just return this.file.toURI().toURL().  With a pre-1.4 JDK, it's not easy to fix this. Using a URLEncoder to encode the path before passing it to the URL constructor does not work because that would also URL-encode the slashes...  ---  **Issue Links:** - #8579 FileSystemResource.getURL should return file:/C:/foo instead of file:C:/foo","closed","in: core,","spring-projects-issues","2007-09-21T08:03:35Z","2019-01-11T21:11:01Z"
"","8579","FileSystemResource.getURL should return file:/C:/foo instead of file:C:/foo [SPR-3899]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-3899](https://jira.spring.io/browse/SPR-3899?redirect=false)** and commented  Here's a small test that compares how the JDK classes convert a File to a URL and a URI and how FileSystemResource does it:  URL fileUrl = new File(""C:/foo"").toURI().toURL(); URL springUrl = new FileSystemResource(""C:/foo"").getURL(); System.out.println(fileUrl); System.out.println(springUrl); System.out.println(fileUrl.toURI().getPath()); System.out.println(springUrl.toURI().getPath()); System.out.println(new File(fileUrl.toURI())); System.out.println(new File(springUrl.toURI()));  prints  file:/C:/foo file:C:/foo /C:/foo null C:\foo Exception in thread ""main"" java.lang.IllegalArgumentException: URI is not hierarchical at java.io.File.\(File.java:363)  Because there is no ""/"" after ""file:"" in the URL returned by FileSystemResource.getURL(), the rest of the URL is not recognized as a path.  A simple fix would be to change the implementation of FileSystemResource.getURL():  return new URL(ResourceUtils.FILE_URL_PREFIX + this.file.getAbsolutePath());  could become  return new URL(ResourceUtils.FILE_URL_PREFIX + '/' + this.file.getAbsolutePath());  A more elaborate fix might use File.toURI().toURL() if running on JDK 1.4 and otherwise emulate that method like this:  String path = this.file.getAbsolutePath(); if (File.separatorChar != '/') path = path.replace(File.separatorChar, '/'); if (! path.endsWith(""/"") && this.file.isDirectory()) path = path + ""/""; if (! path.startsWith(""/"")) path = ""/"" + path; return new URL(""file"", """", path);  ---  **Issue Links:** - #8580 FileSystemResource.getURL should return ""file:/C:/foo%20bar"" instead of ""file:C:/foo bar""","closed","in: core,","spring-projects-issues","2007-09-21T07:49:18Z","2019-01-11T19:20:24Z"
"","8206","NullPointerException in BeanDefinitionParserDelegate.decorateIfRequired when attribute with certain prefixes is declared on bean element [SPR-3523]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-3523](https://jira.spring.io/browse/SPR-3523?redirect=false)** and commented  BeanDefinitionParserDelegate.decorateIfRequired() throws an NPE if a bean element has an attribute for whose namespace there is no handler. An example is an attribute like xml:lang=""en"". In this case, BeanDefinitionParserDelegate would look for a handler for the namespace associated with the 'xml' prefix.  Here's an example of a bean with several such weird attributes. If you put it into a beans file and load the file with a XmlBeanFactory or so, an NPE is thrown.  \  This problem could be fixed by treating more namespaces as 'default' by adding a line to BeanDefinitionParserDelegate.isDefaultNamespace(). I don't know if that is a good solution though:  public boolean isDefaultNamespace(String namespaceUri) { return (!StringUtils.hasLength(namespaceUri) || BEANS_NAMESPACE_URI.equals(namespaceUri) || XMLConstants.XMLNS_ATTRIBUTE_NS_URI.equals(namespaceUri) || XMLConstants.XML_NS_URI.equals(namespaceUri));  //","closed","in: core,","spring-projects-issues","2007-05-25T16:42:14Z","2012-06-19T03:50:04Z"
"","8046","Constants doesn't quite work in Turkey... [SPR-3362]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-3362](https://jira.spring.io/browse/SPR-3362?redirect=false)** and commented  The methods in org.springframework.core.Constants say they work 'in a locale-insensitive fashion', but that's not quite right... Here's a class that shows that a constant called 'PREFIX_FOO' is not found by Constants.getValues(""prefix"") if the default locale is Turkish. See http://en.wikipedia.org/wiki/Turkish_dotted_and_dotless_I  I would suggest using toUpperCase(Locale.ENGLISH) instead of toUpperCase(). With this change, constants like PRÄFIX_FOO are still found by getValues(""präfix""). I'm not sure though if it may cause other problems.  import java.util.Locale; import org.springframework.core.Constants;  public class ConstantsTest { public static final String PREFIX_FOO = ""prefix-foo"";  public static void main( String[] args ) throws Exception { Constants ct = new Constants(ConstantsTest.class);      // make sure that the JVM runs in English...     Locale.setDefault(Locale.ENGLISH);     // In English, prefix is converted is lower case of PREFIX - the constant is found.     System.out.println(ct.getValues(""prefix""));     System.out.println(Integer.toHexString(""i"".toUpperCase().charAt(0)));          // now move the JVM to Turkey...     Locale.setDefault(new Locale(""tr""));     // In Turkish, prefix is lower case of PREF\u0130X - the constant is not found.     System.out.println(ct.getValues(""prefix""));     System.out.println(Integer.toHexString(""i"".toUpperCase().charAt(0)));  } }   ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-04-11T10:01:49Z","2012-06-19T03:50:52Z"
"","8143","'form' tag does not support the 'accept-charset' attribute [SPR-3460]","**[Christopher Elkins](https://jira.spring.io/secure/ViewProfile.jspa?name=celkins)** opened **[SPR-3460](https://jira.spring.io/browse/SPR-3460?redirect=false)** and commented  The 'form' tag in the form tag library does not support the 'accept-charset' attribute.  More information on this attribute: http://www.w3.org/TR/html401/interact/forms.html#adef-accept-charset  Background on why specifying this attribute explicitly is a good idea: http://intertwingly.net/blog/1761.html   ---  **Affects:** 2.0.3  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-05-07T03:35:25Z","2012-06-19T03:51:05Z"
"","8024","Wrong parameter parsing in AbstractWizardFormController.getTargetPage() [SPR-3340]","**[Christoph Kipp](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.kipp)** opened **[SPR-3340](https://jira.spring.io/browse/SPR-3340?redirect=false)** and commented  The method getTargetPage() in the AbstractWizardFormController contains an error in the parsing of the ""_target""-Parameter:  Instead of retrieving the value, the name itself is parsed as integer, see below. I'm not sure how the handling of image links is intended, but this seems to be wrong as well...  protected int getTargetPage(HttpServletRequest request, int currentPage) { Enumeration paramNames = request.getParameterNames(); while (paramNames.hasMoreElements()) { String paramName = (String) paramNames.nextElement(); if (paramName.startsWith(PARAM_TARGET)) { for (int i = 0; i < WebUtils.SUBMIT_IMAGE_SUFFIXES.length; i++) { String suffix = WebUtils.SUBMIT_IMAGE_SUFFIXES[i]; if (paramName.endsWith(suffix)) { paramName = paramName.substring(0, paramName.length() - suffix.length()); } } //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //THIS IS WRONG: return Integer.parseInt(paramName.substring(PARAM_TARGET.length()));          //SHOULD RATHER LOOK LIKE:         return Integer.parseInt(request.getParameter(paramName));         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////       }     }     return currentPage;  }   ---  **Affects:** 2.0.2","closed","status: declined,","spring-projects-issues","2007-04-04T01:14:37Z","2019-01-12T16:40:15Z"
"","8264","Introduce BeanInjectionPostProcessor [SPR-3582]","**[Christian Spriegel](https://jira.spring.io/secure/ViewProfile.jspa?name=horschi)** opened **[SPR-3582](https://jira.spring.io/browse/SPR-3582?redirect=false)** and commented  Dear Spring developers,  I was wondering if it would make sense to have a Callback that informs the application about every bean being injected into another bean? (I certainly would find that very useful)  Like the BeanPostProcessor it could be called a BeanInjectionPostProcessor:  public interface BeanInjectionPostProcessor { /** * Return false causes Spring to about injection (setter simply just not called) * Maybe additional parameters: beannames, setter, scope... ?   */   public boolean postProcessBeforeInjection(Object parent, Object sub);  /** * No return -> inject cancel not possible after injection. * Maybe additional parameters: beannames, setter, scope... ?   */   public void postProcessAfterInjection(Object parent, Object sub);   }  Maybe somebody else could use that too...  Cheers, Christian   --- No further details from [SPR-3582](https://jira.spring.io/browse/SPR-3582?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-06-13T07:20:39Z","2012-06-19T09:37:30Z"
"","8002","Multipart Requests / Handler Interceptors not called in some situations [SPR-3317]","**[Christian Seiler](https://jira.spring.io/secure/ViewProfile.jspa?name=chrismuc)** opened **[SPR-3317](https://jira.spring.io/browse/SPR-3317?redirect=false)** and commented  In case of a file upload: The method DispatcherServlet.checkMultipart() is called before the interceptors of the handlers are invoked. If any exceptions happens durinc checkMultipart() (like size limit exceeded), the interceptors will not be called.  In my case where I have an open entity manager interceptor this led to lazy exceptions while rendering the view   ---  **Affects:** 2.0.3  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-03-28T19:02:54Z","2012-06-19T03:50:51Z"
"","7908","AbstractFallbackTransactionAttributeSource Cache Not Synchronized [SPR-3222]","**[Christian Seiler](https://jira.spring.io/secure/ViewProfile.jspa?name=chrismuc)** opened **[SPR-3222](https://jira.spring.io/browse/SPR-3222?redirect=false)** and commented  I've run into a serious problem using Spring 2.0.2 and AnnotationTransactionAttributeSource. I have serveral threads with a stacktrace like this:  Thread [http-8080-Processor25] (Suspended) HashMap.get(Object) line: 303 AnnotationTransactionAttributeSource(AbstractFallb ackTransactionAttributeSource).getTransactionAttri bute(Method, Class) line: 88 TransactionInterceptor.invoke(MethodInvocation) line: 96 ReflectiveMethodInvocation.proceed() line: 176 JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 210 $Proxy51.getEntityClass() line: not available ....  The HashMap.get() method loops forever consuming 100% CPU (line 303 is inside the loop and I also attached a debugger and stepped through it). I assume the internal state of the HashMap was screwed up, maybe because of lack of synchronization by AbstractFallbackTransactionAttributeSource!? I really ask myself why the cache access is not synchronized at all. I'm using a Core Duo processor so chances for real concurrency are higher than on single core/single CPU systems.  The HashMap code of JDK1.6.0, it's stuck inside the loop: public V get(Object key) { if (key == null) return getForNullKey(); int hash = hash(key.hashCode()); for (Entry e = table[indexFor(hash, table.length)]; e != null; e = e.next) { Object k; if (e.hash == hash && ((k = e.key) == key || key.equals(k))) return e.value; } return null;  Or is it even a JDK bug?  Any feedback is very much appreciated as this issue seems to be very serious to me. Unfortunately the AbstractFallbackTransactionAttributeSource.getTran sactionAttribute() method is final (once again, sigh) so I cannot simply create an own version which synchronizes the cache.put() calls. Maybe I will create a complete copy of the class.  By the way, I found an old posting which describes a similar scenario, but the outcoming doesn't help me much. http://forum.springframework.org/arc...p/t-10579.html  Oririnal forum posting: http://forum.springframework.org/showthread.php?t=35498  I suggest to synchronize at least the put() calls.   ---  **Affects:** 1.2.8, 2.0.2  **Backported to:** [1.2.9](https://github.com/spring-projects/spring-framework/milestone/39?closed=1)","closed","type: bug,","spring-projects-issues","2007-02-28T18:55:09Z","2012-06-19T03:50:47Z"
"","7884","Use BindingResult in place of BindException in form controller API [SPR-3199]","**[Christian Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=cnelson)** opened **[SPR-3199](https://jira.spring.io/browse/SPR-3199?redirect=false)** and commented  With the welcome addition of BindingResult in 2.0, many of the APIs could have been switched to use this new interface instead of the concrete (and somewhat awkward) BindException.  For some reason (and perhaps a good one) they were not switched.  For example, almost all of the Spring MVC APIs (showForm, referenceData, onBindAndValidate, to name a few) refer to BindException.  Can these be refactored to use BindingResult instead?  Here's my specific scenario:  I have several forms where I explicitly invoke bindAndValidate and pass the results to showForm.  I end up with something like this:  protected ModelAndView showForm( HttpServletRequest request, HttpServletResponse response, BindException errors) throws Exception { ServletRequestDataBinder binder = bindAndValidate(request,errors.getTarget()); return super.showForm(request, response, binder.getErrors() ); // getErrors() is deprecated!! }  I'm forced to use getErrors() instead of getBindingResult() because the API for showForm(...) still requires a BindException.  This seems like an API mismatch here, like the result of a partial refactor.   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-23T10:56:10Z","2008-01-07T02:50:40Z"
"","7883","Create javadoc and source jars for seperate modules (Maven friendliness) [SPR-3198]","**[Christian Nelson](https://jira.spring.io/secure/ViewProfile.jspa?name=cnelson)** opened **[SPR-3198](https://jira.spring.io/browse/SPR-3198?redirect=false)** and commented  Note: There are a number of already existing related issues, but none seemed to address this one specific improvement: create companion javadoc and source archives for every spring jar, including module jars, and make them available via maven.  One of the benefits to using maven is the automatic downloading and configuration of source and javadoc for a specific library.  This can be done directly from maven (e.g. mvn idea:idea or mvn eclipse:eclipse) or through an IDE plugin (e.g. Maven Reloaded).  When it works, it's really quite nice and brings us a step closer to an ideal development environment.  Currently, the javadoc and source archives are created and made available only for the mondo, all-encompassing spring.jar.  In this case, auto-fetching and configuration of source and javadoc works great.  One could even say it works _awesome_.  Unfortunately, we're only using a subset of spring and we explicitly list our dependencies on each module.  In this case, there aren't any javadoc or source modules to be associated with the class jars.  It would be fantastic if spring also provided these for those of us who only require a small subset of spring and would like to leverage maven's ability to auto-fetch and configure these.  With future versions of spring, is it possible to include the associated javadoc and source archies for all of the spring jars, including the seperate module jars?  Christian  ---  **Affects:** 2.0.2  **Issue Links:** - #7392 Create and upload Maven Source and Javadoc Bundles for Spring 2.0 (_**""duplicates""**_)  9 votes, 5 watchers","closed","type: task,","spring-projects-issues","2007-02-23T08:39:04Z","2019-01-11T17:36:12Z"
"","8246","ClassCastException in JSPs where spring-web tags and jstl tags are used. [SPR-3563]","**[Christian Leskowsky](https://jira.spring.io/secure/ViewProfile.jspa?name=christianleskowsky)** opened **[SPR-3563](https://jira.spring.io/browse/SPR-3563?redirect=false)** and commented  See http://opensource.atlassian.com/projects/spring/browse/SPR-2628 for more history.  Here's the exception I'm seeing in Tomcat 5.5.23 (Websphere 6.1/DB2 running our application fails similarly)...  exception org.apache.jasper.JasperException: org.apache.taglibs.standard.lang.jstl.ImplicitObjects org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:476) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:389) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:315) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:265) javax.servlet.http.HttpServlet.service(HttpServlet.java:803)  root cause java.lang.ClassCastException: org.apache.taglibs.standard.lang.jstl.ImplicitObjects org.apache.commons.el.ImplicitObjects.getImplicitObjects(ImplicitObjects.java:123) org.apache.commons.el.VariableResolverImpl.resolveVariable(VariableResolverImpl.java:125) org.apache.jasper.runtime.PageContextImpl.resolveVariable(PageContextImpl.java:854) org.apache.commons.el.NamedValue.evaluate(NamedValue.java:124) org.apache.commons.el.ComplexValue.evaluate(ComplexValue.java:140) org.apache.commons.el.ExpressionEvaluatorImpl.evaluate(ExpressionEvaluatorImpl.java:263) org.apache.commons.el.ExpressionEvaluatorImpl.evaluate(ExpressionEvaluatorImpl.java:190) org.springframework.web.util.ExpressionEvaluationUtils$Jsp20ExpressionEvaluationHelper.evaluate(ExpressionEvaluationUtils.java:398) org.springframework.web.util.ExpressionEvaluationUtils.doEvaluate(ExpressionEvaluationUtils.java:270) org.springframework.web.util.ExpressionEvaluationUtils.evaluateString(ExpressionEvaluationUtils.java:186) org.springframework.web.servlet.tags.MessageTag.resolveMessage(MessageTag.java:215) org.springframework.web.servlet.tags.MessageTag.doStartTagInternal(MessageTag.java:165) org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:77) org.apache.jsp.a_jsp._jspx_meth_spring_005fmessage_005f0(a_jsp.java:177) org.apache.jsp.a_jsp._jspx_meth_c_005fif_005f0(a_jsp.java:148) org.apache.jsp.a_jsp._jspService(a_jsp.java:78) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:98) javax.servlet.http.HttpServlet.service(HttpServlet.java:803) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:328) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:315) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:265) javax.servlet.http.HttpServlet.service(HttpServlet.java:803)   ---  **Affects:** 2.0.2  **Attachments:** - [spring-fun.war](https://jira.spring.io/secure/attachment/12649/spring-fun.war) (_2.44 MB_)  1 votes, 0 watchers","closed","status: declined,","spring-projects-issues","2007-06-07T06:09:46Z","2019-01-12T16:40:06Z"
"","8660","BeanDefinitionParserDelegate.parseQualifierElement doesn't add source attachment [SPR-3980]","**[Christian Dupuis](https://jira.spring.io/secure/ViewProfile.jspa?name=cdupuis)** opened **[SPR-3980](https://jira.spring.io/browse/SPR-3980?redirect=false)** and commented  BeanDefinitionParserDelegate.parseQualifierElement should add source attachment to Qualifier and nested Attributes. This is important for tool support.   --- No further details from [SPR-3980](https://jira.spring.io/browse/SPR-3980?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-10-16T06:12:15Z","2012-06-19T03:46:49Z"
"","8612","Scripted FactoryBean causes AbstractAutowireCapableBeanFactory to throw BeanCreationException [SPR-3932]","**[Christian Dupuis](https://jira.spring.io/secure/ViewProfile.jspa?name=cdupuis)** opened **[SPR-3932](https://jira.spring.io/browse/SPR-3932?redirect=false)** and commented  A Groovy-scripted bean that implements the FactoryBean interface causes a BeanCreationException.  E.g. the following Groovy class  ---  import org.springframework.beans.factory.FactoryBean  class GroovyScriptedFactoryBean implements FactoryBean {      boolean isSingleton() {     	true     }          Class getObjectType() {     	String.class     }          Object getObject() {     	""test""     }  }  ---  registered in a Spring ApplicationContext by the following xml bean definiton  ---  \  \        \  ---  throws the following exception  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'factory': Bean instance of type [class java.lang.String] is not a FactoryBean at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getSingletonFactoryBeanForTypeCheck(AbstractAutowireCapableBeanFactory.java:718) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:657) at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:423) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:205) at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(AbstractApplicationContext.java:924) at org.springframework.context.support.AbstractApplicationContext.initLifecycleDependentBeans(AbstractApplicationContext.java:667) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:360) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:91) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:75) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:65) at GroovyScriptedFactoryBeanTest.testScriptedFactoryBean(GroovyScriptedFactoryBeanTest.java:9)  ---  **Affects:** 2.1 M4  **Attachments:** - [groovy-test.zip](https://jira.spring.io/secure/attachment/12959/groovy-test.zip) (_5.13 MB_)","closed","type: bug,","spring-projects-issues","2007-09-27T22:36:14Z","2019-01-13T22:41:51Z"
"","8423","optgroup concept for form:select and form:options [SPR-3742]","**[Chris Widhelm](https://jira.spring.io/secure/ViewProfile.jspa?name=cwidhelm)** opened **[SPR-3742](https://jira.spring.io/browse/SPR-3742?redirect=false)** and commented  It would be nice to have an optional ""optgroup"" attribute on the ""form:select"" and the ""form:options"" tags.  The ""optgroup"" attribute when set would first do a sort by whatever ""expression"" is defined in ""optgroup"" and then would track the progression of iteration and insert the ""optgroup"" html start tag and end tags where appropriate in the select list using the expression in ""optgroup"" as the label.   ---  11 votes, 9 watchers","closed","has: votes-jira,","spring-projects-issues","2007-08-06T02:38:43Z","2018-12-26T17:33:48Z"
"","7935","LangNamespaceHandler cannot be registered in DefaultNamespaceHandlerResolver when thrid party library is not found [SPR-3250]","**[chris tam](https://jira.spring.io/secure/ViewProfile.jspa?name=cltam96)** opened **[SPR-3250](https://jira.spring.io/browse/SPR-3250?redirect=false)** and commented  The problem is reported by Mark Menard in Spring support forum. I have checked the source code and find out the problem come from LangNamespaceHandler ""init"" method. Currently the ""init"" method contains the following code: ... public void init() { registerScriptBeanDefinitionParser(""groovy"", GroovyScriptFactory.class); registerScriptBeanDefinitionParser(""jruby"", JRubyScriptFactory.class); registerScriptBeanDefinitionParser(""bsh"", BshScriptFactory.class); } ... The above code will throw ClassNotFoundException when either groovy, beanshell or jruby library is not found in the classpath. The DefaultNamespaceHandlerResolver will not register the ""lang"" namespace when ""init"" method throws the ClassNotFoundException.  The lang namespace requires that both groovy, beanshell and jruby library must be in the classpath. Is it possible to add some checking to the init method of LangNamespaceHandler to avoid the above dependency. For example: ... public void init() { if (checkGroovyExists()) { registerScriptBeanDefinitionParser(""groovy"", GroovyScriptFactory.class); } if (checkJRubyExists()) { registerScriptBeanDefinitionParser(""jruby"", JRubyScriptFactory.class); } if (checkBshExists()) { registerScriptBeanDefinitionParser(""bsh"", BshScriptFactory.class); }  // what to do if all the above jars are not found???  }  private boolean checkGroovyExists() { try { Class.forName(""groovy.lang.GroovyObject"") ; return true ; } catch(Exception e) { return false ; } }  private boolean checkBshExists() { try { Class.forName(""bsh.Interpreter"") ; return true ; } catch(Exception e) { return false ; } }  private boolean checkJRubyExists() { try { Class.forName(""org.jruby.runtime.builtin.IRubyObject"") ; return true ; } catch(Exception e) { return false ; } } ... Thanks for all the help from spring team.  cheers chris tam xenium  ---  **Affects:** 2.0.3  **Issue Links:** - #7942 Cannot find ""lang"" namespace handler unless all library jars are present (_**""is duplicated by""**_) - #7958 NoClassDefFoundError when groovy isn't on classpath (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2007-03-12T01:39:44Z","2019-01-11T17:16:29Z"
"","7917","MethodLocatingFactoryBean throws IllegalArgumentException when AOP advice is implemented in script bean [SPR-3231]","**[chris tam](https://jira.spring.io/secure/ViewProfile.jspa?name=cltam96)** opened **[SPR-3231](https://jira.spring.io/browse/SPR-3231?redirect=false)** and commented  The MethodLocatingFactoryBean will throw an IllegalArgumentException with message ""Unable to locate method..."".For example, in the application context xml file, the following bean is defined: ...                            ... The interceptor is implemented in Groovy, Beanshell or JRuby script. When ClassPathXmlApplicationContext loads the above xml file, the ""setBeanFactory"" method in MethodLocatingFactoryBean class will throw an exception due to the following code in ""setBeanFactory"" method: ... // since the script bean is not created at this moment, beanFactory will return a ScriptFactory class rather than the script // object class. For Groovy, beanFactory will return a GroovyScriptFactory. Class beanClass = beanFactory.getType(this.targetBeanName); ... // the return method object is null because the methodName cannot be found in the ScriptFactory class this.method = BeanUtils.resolveSignature(this.methodName, beanClass); ... // since method cannot be found in ScriptFactory class, the following exception is thrown if (this.method == null) { throw new IllegalArgumentException(""Unable to locate method ["" + this.methodName + ""] on bean ["" + this.targetBeanName + ""]""); } ... Currently I cannot find any solution to this problem. I can only workaround the above problem by adding a  ""script-interface"" attribute to the ""before"" and ""after"" advice and use the scipt interface to find the method object for the advice which I think is a messy workaround. Please provide a solution to solve the above problem. Thanks for help from Spring team.  cheers chris tam xenium   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-04T18:44:02Z","2012-06-19T03:51:03Z"
"","7909","AspectJExpressionPointcut throws ReflectionWorldException when both  and  exists in same xml file [SPR-3223]","**[chris tam](https://jira.spring.io/secure/ViewProfile.jspa?name=cltam96)** opened **[SPR-3223](https://jira.spring.io/browse/SPR-3223?redirect=false)** and commented  I am very sorry to bother Spring team again. The AspectJ Weaver will throw ReflectionWorldException when an application context xml file contains both  and  elements. The problem forces all sping users to use either  or , but never both. For example: ...     ...  ... I have read all the relevent codes and find out that the exception is thrown by AspectJExpressionPointcut class in the following code: ... private ShadowMatch getShadowMatch(Method method) { synchronized (this.shadowMapCache) { ShadowMatch shadowMatch = (ShadowMatch) this.shadowMapCache.get(method); if (shadowMatch == null) { shadowMatch = this.pointcutExpression.matchesMethodExecution(method); // throw ReflectionWorldException this.shadowMapCache.put(method, shadowMatch); } return shadowMatch; } } ... The ReflectionWorldException is thrown by the pointcutExpression. According to the 2.0.3 source code,  element will auto trigger AbstractAdvisorAutoProxyCreator which will run to the above getShadowMatch method. If the  parameter passed to the getShadowMethod belong to a Groovy script object, the pointcutExpression object cannot see the Groovy script object method because the pointcutExpression object and the Groovy script object belongs to different ClassLoaders. Please provide a workaround solution to this problem. For example, in the AspectJExpressionPointcut file  ... public boolean matches(Method method, Class targetClass, boolean beanHasIntroductions) { checkReadyToMatch();  // TODO: need to check whether a temporary pointcutExpression is needed or not // build a temporary pointcutExpression to be used by getShadowMatch() method PointcutExpression old_pointcutExpression = this.pointcutExpression ; // save original pointcutExpression  // create a temporary PointcutParser using the targetClass classloader so that the pointcutExpression can see the Groovy // script object methods PointcutParser temp_pointcutParser = PointcutParser.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution( DEFAULT_SUPPORTED_PRIMITIVES, targetClass.getClassLoader());  // create a temporary pointcutExpression PointcutParameter[] pointcutParameters = new PointcutParameter[0]; // MUST be modified, just example here this.pointcutExpression = temp_pointcutParser.parsePointcutExpression( replaceBooleanOperators(getExpression()), this.pointcutDeclarationScope, pointcutParameters);  Method methodToMatch = findMethodToMatchAgainst(method,targetClass); ShadowMatch shadowMatch = getShadowMatch(methodToMatch);  // restore the original pointcutExpression this.pointcutExpression = old_pointcutExpression ; temp_pointcutParser = null ; ...  The above example is very messy and silly. I know that Spring team will provide a better solution. The above code is only a temporary solution I currently use. Thanks a lot for any help from Spring team.  cheers chris tam xenium   ---  **Affects:** 2.0.3","closed","in: core,","spring-projects-issues","2007-03-01T01:29:34Z","2012-06-19T03:50:49Z"
"","7903","Enhance Groovy support for different style of Groovy scripting [SPR-3217]","**[chris tam](https://jira.spring.io/secure/ViewProfile.jspa?name=cltam96)** opened **[SPR-3217](https://jira.spring.io/browse/SPR-3217?redirect=false)** and commented  I am sorry to bother Spring team members again. The current GroovyScriptFactory.java will have a minor problem to handle the following groovy script. ... class Book { String title ; } book = new Book() ; .. // do somthing here return book;  The GroovyClassLoader in GroovyScriptFactory will return a groovy.lang.Script object rather a Book object when it parses the above code. Would it be possible to add some code to check the return object of the GroovyClassLoader and if the return object is a groovy.lang.Script object, use GroovyShell to evaulate the source again to get the actual return object. For example, ... GroovyObject goo = (GroovyObject) clazz.newInstance();  Object scriptObject = checkGroovyScript(goo, actualScriptSource) ;  if (scriptObject != null && GroovyObject.class.isInstance(scriptObject)) { goo = (GroovyObject)scriptObject ; // the return object is GroovyObject, may need customize } else { return scriptObject ; // not a GroovyObject so just return script result }  if (this.groovyObjectCustomizer != null) { // Allow metaclass and other customization this.groovyObjectCustomizer.customize(goo); } return goo; ...  // check that goo is a groovy.lang.Script object or not private Object checkGroovyScript(GroovyObject goo, ScriptSource actualScriptSource) { if (goo == null) { return goo ; } // if null, just return  // check if the goo is Script or not		 if (Script.class.isInstance(goo)) { Binding binding = new Binding() ; GroovyShell groovyShell = new GroovyShell(binding) ; try { // goo is Script object, so try to get the actual return object Object scriptResult = groovyShell.evaluate(actualScriptSource.getScriptAsString()) ; return scriptResult ; } catch(MissingMethodException me) { // script which does not generate main method()?? should not happen. return goo ; } catch(Exception ex) { throw new ScriptCompilationException( ""Could not compile Groovy script: "" + actualScriptSource, ex); } }  return goo ; // not a Script object so return }  I know that Rick Evan is currently fixing the GroovyScriptFactory.java file. Please add support for the alternative groovy scripting style if possible in the next GroovyScriptFactory version. I apologize for the inconvenience to all Spring team member. Thanks a lot for all the Spring team member support.  Thanks chris tam xenium   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-27T17:01:51Z","2012-06-19T03:50:56Z"
"","8696","ClassUtils method iteration is quite inefficient [SPR-4016]","**[Chris Tait](https://jira.spring.io/secure/ViewProfile.jspa?name=ctait_amp)** opened **[SPR-4016](https://jira.spring.io/browse/SPR-4016?redirect=false)** and commented  While performance testing & profiling our application using JMeter & YourKit, I noticed that a lot of time was spent waiting (blocked) for something in Class.getDeclaredMethods().  This method is being called by two methods in org.springframework.util.ClassUtils, that are calling it twice for each iteration of the loop (i.e. twice for every method defined in clazz).  Something is synchronised within that method (probably a collection or something) so there are a lot of blocked threads.  We have subsequently identified that the classes were defined as 'prototype' with 'lookup-method', and have moved the 'lookup-method's to a class defined as 'singleton', so the method lookups are only done the first time.  Prior to that though, each thread in our load test (with full profiling enabled) spent between 223 and 918 seconds blocked waiting for getDeclaredMethods(), and after making the efficiency change shown below, that dropped to between 3 and 16 seconds.  The methods (from the 2.0.6 source) currently look like this: public static int getMethodCountForName(Class clazz, String methodName) { Assert.notNull(clazz, ""Class must not be null""); Assert.notNull(methodName, ""Method name must not be null""); int count = 0; for (int i = 0; i < clazz.getDeclaredMethods().length; i++) { Method method = clazz.getDeclaredMethods()[i]; if (methodName.equals(method.getName())) { count++; } } Class[] ifcs = clazz.getInterfaces(); for (int i = 0; i < ifcs.length; i++) { count += getMethodCountForName(ifcs[i], methodName); } if (clazz.getSuperclass() != null) { count += getMethodCountForName(clazz.getSuperclass(), methodName); } return count; } public static boolean hasAtLeastOneMethodWithName(Class clazz, String methodName) { Assert.notNull(clazz, ""Class must not be null""); Assert.notNull(methodName, ""Method name must not be null""); for (int i = 0; i < clazz.getDeclaredMethods().length; i++) { Method method = clazz.getDeclaredMethods()[i]; if (method.getName().equals(methodName)) { return true; } } Class[] ifcs = clazz.getInterfaces(); for (int i = 0; i < ifcs.length; i++) { if (hasAtLeastOneMethodWithName(ifcs[i], methodName)) { return true; } } return (clazz.getSuperclass() != null && hasAtLeastOneMethodWithName(clazz.getSuperclass(), methodName)); }  But it would be much more efficient to only call getDeclaredMethods once before the loop, like this: public static int getMethodCountForName(Class clazz, String methodName) { Assert.notNull(clazz, ""Class must not be null""); Assert.notNull(methodName, ""Method name must not be null""); int count = 0; Method[] declaredMethods = clazz.getDeclaredMethods(); for (int i = 0; i < declaredMethods.length; i++) { Method method = declaredMethods[i]; if (methodName.equals(method.getName())) { count++; } } Class[] ifcs = clazz.getInterfaces(); for (int i = 0; i < ifcs.length; i++) { count += getMethodCountForName(ifcs[i], methodName); } if (clazz.getSuperclass() != null) { count += getMethodCountForName(clazz.getSuperclass(), methodName); } return count; } public static boolean hasAtLeastOneMethodWithName(Class clazz, String methodName) { Assert.notNull(clazz, ""Class must not be null""); Assert.notNull(methodName, ""Method name must not be null""); Method[] declaredMethods = clazz.getDeclaredMethods(); for (int i = 0; i < declaredMethods.length; i++) { Method method = declaredMethods[i]; if (method.getName().equals(methodName)) { return true; } } Class[] ifcs = clazz.getInterfaces(); for (int i = 0; i < ifcs.length; i++) { if (hasAtLeastOneMethodWithName(ifcs[i], methodName)) { return true; } } return (clazz.getSuperclass() != null && hasAtLeastOneMethodWithName(clazz.getSuperclass(), methodName)); }   ---  **Affects:** 2.0.6  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-10-28T14:27:31Z","2012-06-19T03:47:41Z"
"","7912","Spring JMX does not work on Oracle 10g Application Server [SPR-3226]","**[Chris Nappin](https://jira.spring.io/secure/ViewProfile.jspa?name=cnappin)** opened **[SPR-3226](https://jira.spring.io/browse/SPR-3226?redirect=false)** and commented  The Spring 2.x MBeanServerFactoryBean does not work under 10gAS,  as it does not allow the Java SE 5 PlatformMBeanServer to be used - Security Exceptions are thrown and application deployment fails. There are other issues but these can be got around, see my recent postings in the JMX forum for details.  For the full Oracle Documentation, see http://download-uk.oracle.com/docs/cd/B25221_04/web.1013/b14433/mbeans.htm#sthref176  This issue only affects Spring 2.x, because Spring 1.x does not attempt to use the Java SE 5 PlatformMBeanServer (see JMXUtils.locateMBeanServer).  I have attached a patch that adds an ""ignorePlatformServer"" property to MBeanServerFactoryBean (default being false), and a patch to JMXUtils to use this flag.   ---  **Affects:** 2.0.2  **Attachments:** - [JMXUtils-patch.txt](https://jira.spring.io/secure/attachment/12436/JMXUtils-patch.txt) (_2.89 kB_) - [MBeanServerFactoryBean-patch.txt](https://jira.spring.io/secure/attachment/12435/MBeanServerFactoryBean-patch.txt) (_2.81 kB_)","closed","in: core,","spring-projects-issues","2007-03-01T22:33:18Z","2012-06-19T03:50:53Z"
"","8868","There's no isRefreshStubOnConnectFailure on RmiClientInterceptor [SPR-4190]","**[Chris Marshall](https://jira.spring.io/secure/ViewProfile.jspa?name=oxbow_lakes)** opened **[SPR-4190](https://jira.spring.io/browse/SPR-4190?redirect=false)** and commented  We often use the Java Beans XMLEncoder/XMLDecoder mechanism to persist the state of Spring objects in order to effectively interact with other systems internally. In order to do this, we need to be able to access the state of Spring beans. In general, I would have expected Spring to have Java Beans accessors on its own classes. Currently we cannot correctly persist instances of RmiProxyFactoryBeans because RmiClientInterceptor has no accessors for some important properties, in particular isRefreshStubOnConnectFailure()   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-28T18:34:19Z","2012-06-18T12:45:06Z"
"","8726","MailSendException created with Map of SmartMimeMessages and SendExceptions is not serializable but not transient [SPR-4047]","**[Chris Marshall](https://jira.spring.io/secure/ViewProfile.jspa?name=oxbow_lakes)** opened **[SPR-4047](https://jira.spring.io/browse/SPR-4047?redirect=false)** and commented  I am propagating a MailSendException across a client-server boundary and it is causing my client to re-send the same message which caused the exception in the first place. The reason is that the MailSendException is created with a map of org.springframework.email.javamail.SmartMimeMessage (keys) to javax.mail.SendFailedException (values).  The keys to this map are not serializable and the map is not marked as transient on the MailSendException class. This results in an MarshalException on the server being propagated to the client which org.springframework.remoting.rmi.RmiClientInterceptorUtils.isConnectFailure() decides is a conect failure.  Possible remedies/questions:  1. failedMessages on MailSendException should not be created with the SmartMimeMessages as keys in the map 2. SmartMimeMessage made serializable (with transient session) 3. failedMessages made transient on MailSendException  Additionally, should MarshalException and UnmarshalException be considered a ""Connect Failure"" from the perspective of a client Rmi call? I don't see why they should but possibly there are edge cases here.  ---  **Affects:** 2.0.6  **Issue Links:** - #8817 NullPointerException in MailSendException","closed","type: enhancement,","spring-projects-issues","2007-11-04T22:39:27Z","2019-01-11T16:22:54Z"
"","8238","Cannot export a proxied bean's methods unless those methods exist on an interface [SPR-3555]","**[Chris Marshall](https://jira.spring.io/secure/ViewProfile.jspa?name=oxbow_lakes)** opened **[SPR-3555](https://jira.spring.io/browse/SPR-3555?redirect=false)** and commented  This may be a duplicate of #5571 but I cannot find any documentation in the JMX or AOP chapters about how to use cglib (I thought I already was) to ensure that a bean which is being proxied's operations are available via JMX.  Assuming that one is exporting a public method which is not on the proxied object's interfaces, is it not safe to assume that the method is safe to use directly on the underlying method? Perhaps not but it must be common to proxy for access only to certain methods (as in my case) and wish to export others on JMX (why should the former interfere with the latter?)  Anyway, it would be great if you could tell me how to use cglib to make this problem go away.  ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-06-05T02:14:28Z","2019-01-11T19:08:45Z"
"","8112","Add support for advising RmiServiceExporter about binding strategy (ie let user choose between bind or rebind) [SPR-3429]","**[Chris Marshall](https://jira.spring.io/secure/ViewProfile.jspa?name=oxbow_lakes)** opened **[SPR-3429](https://jira.spring.io/browse/SPR-3429?redirect=false)** and commented  Currently the RmiServiceExporter will always use the Registry.rebind method to bind a service. This will unbind any existing bound objects on the same name. It may be desirable for a user to specify that they instead wish to use the Registry.bind method (which throws an ""AlreadyBoundException"" if a bean already exists on the same name).  This could be achieved very simply with a ""usesBind"" or ""usesRebind"" property on the RmiServiceExporter class.  If further justification is need as to why this is a valid request, please let me know.   ---  **Affects:** 2.0.4  **Attachments:** - [RmiServiceExporter.java](https://jira.spring.io/secure/attachment/12576/RmiServiceExporter.java) (_16.77 kB_)","closed","type: enhancement,","spring-projects-issues","2007-04-28T22:22:38Z","2012-06-19T03:51:18Z"
"","8804","Add convention-over-configuration support for @RequestMapping [SPR-4125]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4125](https://jira.spring.io/browse/SPR-4125?redirect=false)** and commented  DefaultAnnotationHandlerMapping presently takes the URLs directly from the `@RequestMapping` annotation; this could be strategized to build the URLs based on known data at that time, i.e. class name, etc.  For `@RequestMapping` at the type level, the semantics would be the same as ControllerClassNameHandlerMapping.  At the method level, presumably the method name could be appended to the path determined by the enclosing type.  ---  **Affects:** 2.5 RC2  **Issue Links:** - #9733 `@RequestMapping`: convention-based URL mapping at controller class level","closed","type: enhancement,","spring-projects-issues","2007-11-19T02:42:09Z","2019-01-13T08:06:38Z"
"","8800","Ref Manual - broken link to SchedulerFactoryBean Javadoc in 23.2.3 [SPR-4121]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4121](https://jira.spring.io/browse/SPR-4121?redirect=false)** and commented  Reference manual, section 23.2.3 - Wiring up jobs using triggers and the SchedulerFactoryBean  The noted section contains a link to the SchedulerFactoryBean Javadoc for more information - the link is broken (404); http://www.springframework.org/docs/api/org/springframework/scheduling/quartz/SchedulerFactoryBean.html  The correct link is http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/scheduling/quartz/SchedulerFactoryBean.html   ---  **Affects:** 2.5 RC2","closed","type: bug,","spring-projects-issues","2007-11-18T06:17:14Z","2012-06-19T03:47:08Z"
"","8769","Spring 2.5RC2 shipped schema 'tx/spring-tx-2.5.xsd' does not match that on the website [SPR-4090]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4090](https://jira.spring.io/browse/SPR-4090?redirect=false)** and commented  The schema 'tx/spring-tx-2.5.xsd' in the spring 2.5RC2 release does not match the one at http://www.springframework.org/schema/tx/spring-tx-2.5.xsd.  For example, the jta-transation-manager attribute is missing from the website version.   ---  **Affects:** 2.5 RC2","closed","in: core,","spring-projects-issues","2007-11-13T08:04:02Z","2007-11-16T04:29:48Z"
"","8765","Doc: Overriding of default values for HandlerMapping, HandlerAdapter et al. in DispatcherServlet is not obvious [SPR-4086]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4086](https://jira.spring.io/browse/SPR-4086?redirect=false)** and commented  DispatcherServlet chooses reasonable defaults for HandlerMapping, HandlerAdapter (and others).  For these two specific types, there are multiple defaults listed:  org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\ org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping  org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\ org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\ org.springframework.web.servlet.mvc.throwaway.ThrowawayControllerHandlerAdapter,\ org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter  While the JavaDoc for DispatcherServlet does state that any user-added beans of these types override the defaults, there are several challenges with this approach:  1) Users need to be made aware of the implications of overriding the defaults 2) Overriding the defaults breaks forward compatibility (see below) 3) It seems excessive / verbose to re-register defaults to get back core functionality  As an example, an existing Spring 2.0.x application that defined its own HandlerMapping(s) would not be able to use the Spring 2.5.x `@RequestMapping` functionality without adding DefaultAnnotationHandlerMapping and AnnotationMethodHandlerAdapter beans to their context (after spending time to determine that these were the necessary steps).  There are several use cases to address:  1) Addition of a HandlerMapping (and/or HandlerAdapter) **while keeping the existing defaults** 2) Removal of a HandlerMapping (and/or HandlerAdapter); it is less clear that this is a valid or common case on its own 3) The combination of 1 & 2, where you want to specify precisely what should be there (remove all defaults and supply your own)  ---  **Affects:** 2.5 RC2  **Issue Links:** - #8767 `@Controller` annotated controllers can not co-exist with not annotated ones.","closed","type: enhancement,","spring-projects-issues","2007-11-12T09:57:58Z","2019-01-13T08:06:44Z"
"","8764","JavaDoc - defaults listed in DispatcherServlet do not reflect recent additions [SPR-4085]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4085](https://jira.spring.io/browse/SPR-4085?redirect=false)** and commented  The JavaDoc for DispatcherServlet lists the defaults for HandlerMapping and HandlerAdapter (among others); the listed defaults do not reflect the addition of DefaultAnnotationHandlerMapping and AnnotationMethodHandlerAdapter   ---  **Affects:** 2.5 RC2","closed","type: bug,","spring-projects-issues","2007-11-12T09:36:21Z","2012-06-19T03:47:28Z"
"","8756","JavaDoc - AbstractDetectingUrlHandlerMapping.detectHandlers incorrectly states ""Any bean whose name appears to be a URL is considered a handler"" [SPR-4078]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4078](https://jira.spring.io/browse/SPR-4078?redirect=false)** and commented  The JavaDoc for AbstractDetectingUrlHandlerMapping.detectHandlers incorrectly states that it registers any bean whose name appears to be a URL; in actuality, the code does not inspect the bean name at all, instead delegating inspection to the abstract method determineUrlsForHandler()   ---  **Affects:** 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-11-11T02:48:19Z","2012-06-19T03:47:00Z"
"","8542","Doc: Reference manual - 3.4.4.1 (bean scopes - initial web configuration) [SPR-3862]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3862](https://jira.spring.io/browse/SPR-3862?redirect=false)** and commented  Spring reference manual, 2.1M4, section 3.4.4.1 states that you must configure a RequestContextListener (or use RequestContextFilter for < Servlet 2.4).  However, the JavaDoc for RequestContextListener states:  \Alternatively, Spring's {`@link` org.springframework.web.filter.RequestContextFilter} * and Spring's {`@link` org.springframework.web.servlet.DispatcherServlet} also expose * the same request context to the current thread. *  * \This listener is mainly for use with third-party servlets, e.g. the JSF FacesServlet. * Within Spring's own web support, DispatcherServlet's processing is perfectly sufficient.   From a brief glance through DispatcherServlet, it does appear to duplicate the RequestContextListener functionality.  Is it then correct that you would only need RequestContextListener to enable web-scopes **outside** a DispatcherServlet?  ---  **Affects:** 2.0.6, 2.1 M4","closed","type: documentation,","spring-projects-issues","2007-09-11T07:51:15Z","2019-01-13T08:07:29Z"
"","8511","JavaDoc - NativeJdbcExtractorAdapter methods incorrectly document the returned object [SPR-3831]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3831](https://jira.spring.io/browse/SPR-3831?redirect=false)** and commented  The getNative*() methods on NativeJdbcExtractorAdapter incorrectly list the return type in the JavaDoc comments.  They all state '...else, the original Connection', instead of the actual object type (Statement, PreparedStatement, etc.)  getNativeConnection (correct): the underlying native JDBC Connection, if possible; else, the original Connection getNativeConnectionFromStatement: the underlying native JDBC Connection, if possible; else, the original Connection getNativeStatement: the underlying native JDBC Statement, if possible; else, the original Connection getNativePreparedStatement: the underlying native JDBC PreparedStatement, if possible; else, the original Connection getNativeCallableStatement: the underlying native JDBC CallableStatement, if possible; else, the original Connection getNativeResultSet: the underlying native JDBC ResultSet, if possible; else, the original Connection   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: bug,","spring-projects-issues","2007-08-31T11:42:30Z","2012-06-19T03:50:48Z"
"","8502","Reference manual - incorrect reference to DAO class heirarchy image [SPR-3822]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3822](https://jira.spring.io/browse/SPR-3822?redirect=false)** and commented  Spring reference manual, 2.1M3 - Chapter 10, DAO support states:  (Please note that the class hierarchy detailed in the above image shows only a subset of the entire DataAccessException hierarchy.)  ...the image is below (not above as stated).   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: bug,","spring-projects-issues","2007-08-30T06:07:52Z","2012-06-19T03:50:44Z"
"","8467","JavaDoc for FrameworkServlet does not mention that contextConfigLocation can accept wildcards [SPR-3787]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3787](https://jira.spring.io/browse/SPR-3787?redirect=false)** and commented  The JavaDoc for org.springframework.web.servlet.FrameworkServlet fails to mention that contextConfigLocation can accept wildcards as well:  Passes a ""contextConfigLocation"" servlet init-param to the context instance, parsing it into potentially multiple file paths which can be separated by any number of commas and spaces, like ""test-servlet.xml, myServlet.xml"". If not explicitly specified, the context implementation is supposed to build a default location from the namespace of the servlet.   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-19T07:21:15Z","2012-06-19T09:37:33Z"
"","8466","Explain difference between and pros/cons of dependency injection vs dependency lookup [SPR-3786]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3786](https://jira.spring.io/browse/SPR-3786?redirect=false)** and commented  Up until Spring 2.1, the primary (out-of-the-box) mechanism for wiring beans together was dependency injection (DI); I'm including XML-based autowiring as a means of DI as it is external from the code.  With Spring 2.1 and the addition of `@Autowired` and `@Resource`, users may (at least initially) think that these are a straight replacement for XML configuration (they can be in **some** cases), and that these annotations are DI - in fact, these are dependency lookup mechanisms.  These annotations encourage dependency lookup **within the code** (by name, type or other qualifier), which has pros/cons that should be explained so users can make an informed decision.  Some pros/cons:  Dependency lookup can simplify the wiring of collaborators under certain circumstances; Dependency lookup promotes a tight-coupling of components (read: increased fragility); remember all those EJB 2.x JNDI lookups? Dependency injection externalizes & centralizes the wiring of collaborators, promoting loose coupling between components; Dependency injection is non-intrusive, requiring no additional dependencies in the code; Dependency lookup requires extra plumbing to process lookups and perform the injection; this may complicate integration testing;    ---  **Affects:** 2.1 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/dcf0244566d687cca6037f8121a18b787765cba1","closed","type: enhancement,","spring-projects-issues","2007-08-19T06:40:14Z","2012-06-19T03:50:29Z"
"","8457","JavaDoc for CommonAnnotationBeanPostProcessor does not mention that it is implicity configured [SPR-3777]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3777](https://jira.spring.io/browse/SPR-3777?redirect=false)** and commented  The JavaDoc for CommonAnnotationBeanPostProcessor should show the usage patterns for context:component-scan and context:annotation-config   ---  **Affects:** 2.1 M3","closed","type: bug,","spring-projects-issues","2007-08-14T10:56:49Z","2012-06-19T03:51:04Z"
"","8456","Typo - section B7.2 Custom attributes on 'normal' elements [SPR-3776]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3776](https://jira.spring.io/browse/SPR-3776?redirect=false)** and commented  Spring reference manual 2.1M3, section B7.2:  A bean is defined as:  \  \ \ ...note the 'jcache:cache-name' attribute.  In the following paragraph, this attribute is referenced as 'cache:cache-name' (missing the leading 'j').   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: bug,","spring-projects-issues","2007-08-14T09:42:47Z","2012-06-19T03:50:52Z"
"","8455","Reference manual - document interactions / ordering when using multiple styles of bean lifecycle  [SPR-3775]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3775](https://jira.spring.io/browse/SPR-3775?redirect=false)** and commented  There are three styles for controlling bean lifecycle behaviour: InitializingBean/DisposableBean, bean methods names, and (new in 2.1) `@PostConstruct` and `@PreDestroy`.  The reference manual should document what happens when you 'mix' these options, specifically any side-effects and the order of applicability.  A use-case for this would be concrete inheritance - take, for example, DaoSupport which implements InitializingBean.  It may well be that, on a given project, Spring is configured to call an init() method by default.  What happens when a subclass of DaoSupport is initialized?  In what order are afterPropertiesSet() and init() called? Any side-effects, recommendations, or warnings?   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: documentation,","spring-projects-issues","2007-08-14T08:28:26Z","2012-06-19T03:50:02Z"
"","8454","Reference manual - 3.8.5. Convenient ApplicationContext instantiation for web applications - does not mention that wildcards are available for contextConfigLocation [SPR-3774]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3774](https://jira.spring.io/browse/SPR-3774?redirect=false)** and commented  Spring reference manual 2.1M3, section 3.8.5. Convenient ApplicationContext instantiation for web applications - does not mention that wildcards are available for contextConfigLocation.  Wildcards are available and should be mentioned; related to #8451.  ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-14T06:24:59Z","2019-01-11T19:32:23Z"
"","8453","Reference manual - mention JSR-250 lifecycle annotations alongside other lifecycle mechanisms [SPR-3773]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3773](https://jira.spring.io/browse/SPR-3773?redirect=false)** and commented  Spring reference manual (2.1M3), section 3.5 discusses the lifecycle marker interfaces and initialization / destroy callback method names, but does not mention the (newly added as of 2.1) JSR-250 lifecycle annotations.  It would be nice to see (at least a summary of) all the lifecycle options in one place.   ---  **Affects:** 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-14T06:21:10Z","2012-06-19T03:50:28Z"
"","8452","Reference manual - create table summarizing *Aware interfaces [SPR-3771]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3771](https://jira.spring.io/browse/SPR-3771?redirect=false)** and commented  There are many *Aware interfaces:  TargetClassAware ApplicationContextAware ApplicationEventPublisherAware MessageSourceAware ResourceLoaderAware BeanClassLoaderAware BeanFactoryAware BeanNameAware BootstrapContextAware SchedulerContextAware ServletConfigAware ServletContextAware NotificationPublisherAware PortletConfigAware PortletContextAware LoadTimeWeaverAware  ...only a few of which are mentioned in the reference manual.  It would be handy to have a table (perhaps in an appendix) listing all these and when they are available (for example, the Servlet*Aware interfaces are available in a WebApplicationContext), with links when relevant to related sections (for example, link LoadTimeWeaverAware to section 3.12 & 12.6.1.2.)   ---  **Affects:** 2.1 M3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/71d7b22d5e3b7379be61f28b251c60200512f121  1 votes, 0 watchers","closed","type: documentation,","spring-projects-issues","2007-08-14T01:38:55Z","2012-06-19T03:51:16Z"
"","8451","JavaDoc for org.springframework.web.context.ContextLoader fails to mention support for Ant-style wildcards in contextConfigLocation [SPR-3770]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3770](https://jira.spring.io/browse/SPR-3770?redirect=false)** and commented  JavaDoc for org.springframework.web.context.ContextLoader fails to mention support for Ant-style wildcards in contextConfigLocation  Wildcards are supported here and should be noted in the JavaDoc.   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-14T00:58:09Z","2012-06-19T03:50:39Z"
"","8450","Reference manual - 12.6.1.2. LocalContainerEntityManagerFactoryBean - implies that app server setup is for LocalContainerEntityManagerFactoryBean when it is for Load Time Weaving [SPR-3769]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3769](https://jira.spring.io/browse/SPR-3769?redirect=false)** and commented  Reference manual, Spring 2.1M3, section 12.6.1.2. LocalContainerEntityManagerFactoryBean, has several subsections such as  12.6.1.2.1. Tomcat setup 12.6.1.2.2. OC4J setup (10.1.3.1+)  ...these subsection names are misleading and imply that the noted steps are configuration for LocalContainerEntityManagerFactoryBean, when in fact they are steps for load time weaving, which may not be necessary.   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-14T00:52:15Z","2012-06-19T03:50:25Z"
"","8449","Reference manual - section 12.6.2. JpaTemplate and JpaDaoSupport should include JpaTemplate caveat from JavaDoc [SPR-3768]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3768](https://jira.spring.io/browse/SPR-3768?redirect=false)** and commented  The JavaDoc for JpaTemplate notes:  NOTE: JpaTemplate mainly exists as a sibling of JdoTemplate and HibernateTemplate, to offer the same style for people used to it. For newly started projects, consider adopting the standard JPA style of coding data access objects instead, based on a ""shared EntityManager"" reference injected via a Spring bean definition or the JPA PersistenceContext annotation.  (Using Spring's SharedEntityManagerBean / PersistenceAnnotationBeanPostProcessor, or using a direct JNDI lookup for an EntityManager on a Java EE 5 server.)  Section 12.6.2 briefly mentions that you can use JPA directly, but does not include the above idiom.   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-14T00:47:22Z","2012-06-19T03:51:06Z"
"","8448","Reference manual - Hibernate section should specify requirement of v3.1+ [SPR-3767]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3767](https://jira.spring.io/browse/SPR-3767?redirect=false)** and commented  Spring reference manual, section 12.2. Hibernate, would benefit from specifying the minimum supported Hibernate versions (3.1+, 2.1 in separate library)   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-14T00:36:51Z","2012-06-19T03:51:07Z"
"","8447","Reference manual - complete the ""What's new in Spring 2.5?"" section [SPR-3766]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3766](https://jira.spring.io/browse/SPR-3766?redirect=false)** and commented  It would be handy to have a summarized reference to the new features in Spring 2.1, analagous to the ""Whats new in Spring 2.0?"" section.  Some highlights worth mentioning (from the changelogs):  Java 6 support Annotation-based configuration / component scanning Suport for Common annotations Support for Hibernate 3.1 or higher JDBC 4 support jms namespace for simplified configuration Servlet 5 support JSF 1.2 support Improved documentation   ---  **Affects:** 2.1 M3  1 votes, 1 watchers","closed","type: documentation,","spring-projects-issues","2007-08-14T00:32:37Z","2012-06-19T03:50:48Z"
"","8446","Reference manual incorrectly states support for Java 1.3, fails to mention support for Java 6 [SPR-3765]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3765](https://jira.spring.io/browse/SPR-3765?redirect=false)** and commented  Spring reference manual 2.1M3 - Chapter 2. What's new in Spring 2.0? - states:  ""The Spring Framework continues to be totally compatible with all versions of Java since (and including) Java 1.3. This means that 1.3, 1.4, and 1.5 are supported, although some advanced functionality of the Spring Framework may not be available to you if you are (for example) committed to using Java 1.3.""  ...as 2.1M1 Java 1.3 was no longer supported, with Java 6 support added (as per the changelog)  BTW, Java 1.5 in the above statement s/b Java 5.   ---  **Affects:** 2.1 M3","closed","type: bug,","spring-projects-issues","2007-08-14T00:27:33Z","2012-06-19T03:51:20Z"
"","8445","Reference manual - Inconsistent reference to Java 5  [SPR-3764]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3764](https://jira.spring.io/browse/SPR-3764?redirect=false)** and commented  The Spring 2.1M3 reference manual is inconsistent in referencing Java 5:  Java 5 Java5 Java 5 (Tiger) Java5 (Tiger)    ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-13T11:00:58Z","2012-06-19T03:50:21Z"
"","8444","Reference to Java 5 implies only a 'few' are using it... [SPR-3763]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3763](https://jira.spring.io/browse/SPR-3763?redirect=false)** and commented  Spring 2.1M3 reference manual, section 3.3.2.4.2 states:  If you are one of the lucky few to be using Java5 (Tiger), ...  ...the 'lucky few' may no longer be accurate, and dates the documentation - in any case, it doesn't add value to the docs.   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-13T10:34:29Z","2012-06-19T03:50:03Z"
"","8443","Documentation for implicitly registered post-processors fails to mention PersistenceAnnotationBeanPostProcessor [SPR-3762]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3762](https://jira.spring.io/browse/SPR-3762?redirect=false)** and commented  Section 3.10 (2.1M3 reference manual) states:  (The implicitly registered post-processors include AutowiredAnnotationBeanPostProcessor, and CommonAnnotationBeanPostProcessor, as well as the aforementioned RequiredAnnotationBeanPostProcessor.)  However, the code in AnnotationConfigUtils.registerAnnotationConfigProcessors also registers a PersistenceAnnotationBeanPostProcessor if JPA is present.   ---  **Affects:** 2.1 M3","closed","type: bug,","spring-projects-issues","2007-08-13T08:57:10Z","2012-06-19T03:50:18Z"
"","8442","context:component-scan can register an additional PersistenceAnnotationBeanPostProcessor [SPR-3761]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-3761](https://jira.spring.io/browse/SPR-3761?redirect=false)** and commented  When using  (and presumably  as it funnels down the same code path), a PersistenceAnnotationBeanPostProcessor is implicitly registered.  However, if you have already registered one, a second PersistenceAnnotationBeanPostProcessor will be registered, resulting in the persistence annotations getting processed twice (in my cause, triggered an assertion in a setter).  Here is the log output:  14:36:36,455 INFO  [XmlWebApplicationContext] Bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) 14:36:36,455 INFO  [XmlWebApplicationContext] Bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)  The guard condition !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME) doesn't look right - a manually registered PersistenceAnnotationBeanPostProcessor has the bean name org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0 as evidenced above.  For that matter, the guard conditions on the other implicit beans are likely incorrect as well.  Perhaps it would be more robust to check for these beans by type rather than by name?  Could this be the result of the changelog entry ""DefaultBeanNameGenerator generates a ""#0"" suffix in the canonical name even for the first occurence of an unnamed bean""?   ---  **Affects:** 2.1 M3","closed","in: core,","spring-projects-issues","2007-08-13T08:53:55Z","2019-01-12T16:39:54Z"
"","8626","@Autowire does not work as expected for Collections based Repository implementation [SPR-3946]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-3946](https://jira.spring.io/browse/SPR-3946?redirect=false)** and commented  Consider the following Repository artifacts:      public interface PersonRepository extends Set {}           final class JdoPersonRepository extends AbstractSet implements PersonRepository {         // ... implementation omitted     }  And the test that excercises them:      @RunWith(SpringJUnit4ClassRunner.class)     @ContextConfiguration     public class PersonRepositoryTests {         @Autowired         private PersonRepository personRepository;                  // test methods omitted...     }  }  And finally, the named-by-convention beans XML used by the test (PersonRepositoryTests-context.xml):                                                                                                                                                                                   Expected behavior when running the test:  1) Spring bootstraps an ApplicationContext backed by PersonRepositoryTests-context.xml 2) The `@Autowired` 'personRepository' dependency is detected within my PersonRepositoryTests class 3) Spring looks up this resource by type and injects it directly at the field level, with no further ado.  Actual behavior when running the test:  Steps (1) and (2) execute as expected.  Step (3) however, gets more complicated.  Because java.util.Collection is assignable from PersonRepository, the logic in AbstractAutowireCapableBeanFactory (fisheye: http://tinyurl.com/2utx6u) assumes that I want my JdoPersonRepository bean to be autowired with beans of its generic collection parameter type (which is Person in this case).  Furthermore it fails upon being unable to locate at least one such Person beans in the container.  Relevant excepts from the resulting stack trace follow:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.foo.MyTests': Autowiring of fields failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.foo.domain.PersonRepository com.foo.MyTests.personRepository; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [com.foo.domain.Person] is defined: Unsatisfied dependency of type [com.foo.domain.Person]: expected at least 1 matching bean at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessAfterInstantiation(AutowiredAnnotationBeanPostProcessor.java:208) ... Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [com.foo.domain.Person] is defined: Unsatisfied dependency of type [com.foo.domain.Person]: expected at least 1 matching bean at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveDependency(AbstractAutowireCapableBeanFactory.java:373)  Suffice to say this behavior is not what I want or expect to happen.  But, as the issue type of 'Improvement' suggests, I don't know that I can call this a 'bug' either.  I can see that the original design intent is being fulfilled; it's just that I have a use case for which that design causes problems.  Could we conceive a way to (configurably) relax this assumption that Collection-based beans must have one or more element beans declared in the container?  Also note, this issue is somewhat related to #8349, where I encountered a similar problem with the container attempting to call size() on beans assignable to Collection.  Juergen relaxed this behavior, and I'm hoping we can do the same here.  (see especially his comment on the issue: http://opensource.atlassian.com/projects/spring/browse/SPR-3668#action_24701)  I do have a workaround in the meantime:  instead of declaring my dependency by interface:      @Autowired     private PersonRepository personRepository;   I'm now declaring by concrete type:      @Autowired     private JdoPersonRepository personRepository;   This bypasses the '&& type.isInterface()' condition (see fisheye link above), and allows the bean to simply be returned and injected without further complication.  At any rate, thanks for looking into this.  - Chris Beams  ---  **Affects:** 2.1 M4  **Issue Links:** - #13164 Support injection of collection-typed beans using `@Autowired`+`@Qualifier` or `@Inject`+`@Named`  (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2007-09-29T11:57:29Z","2019-01-13T08:07:13Z"
"","8625","TestContext throws exception with cryptic message when test class is missing @ContextConfiguration [SPR-3945]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-3945](https://jira.spring.io/browse/SPR-3945?redirect=false)** and commented  Running the following test results in an error message that is not particularly helpful:  package com.foo;  import org.junit.Test;  import org.junit.runner.RunWith;  import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  `@RunWith`(SpringJUnit4ClassRunner.class) public class MyTests { `@Test` public void foo() { // ... } }  The resulting stack trace:  java.lang.IllegalArgumentException: contextLoader can not be null. at org.springframework.util.Assert.notNull(Assert.java:112) at org.springframework.test.context.TestContext.buildApplicationContext(TestContext.java:176) at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:216) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:58) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:205) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:109) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:156) at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51) at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44) at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27) at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37) at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  As it turns out, the test is simply missing a `@ContextConfiguration` annotation.  The exception's message could be improved to suggest this as a possible resolution to the user.  Here's a patch that adds this bit of user-friendliness:  --- ./spring/tiger/mock/org/springframework/test/context/TestContext.java       2007-09-24 09:57:41.000000000 -0700 +++ ./JdoTxnSimple/src/main/java/org/springframework/test/context/TestContext.java      2007-09-29 16:10:53.000000000 -0700 @@ -177,7 +173,8 @@ *      context  */ protected ApplicationContext buildApplicationContext() throws Exception {  ---      Assert.notNull(getContextLoader(), ""contextLoader can not be null."");  +         Assert.notNull(getContextLoader(), ""contextLoader can not be null. ""  +                                 + ""Did you forget to add a @ContextConfiguration annotation on your test class?"");               Assert.notNull(getLocations(), ""locations can not be null."");               return getContextLoader().loadContext(getLocations());       }  Thanks!  ---  **Affects:** 2.1 M4  **Attachments:** - [SPR-3945.patch](https://jira.spring.io/secure/attachment/12972/SPR-3945.patch) (_826 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-09-29T10:20:43Z","2019-01-13T08:07:14Z"
"","8592","Hibernate declarative transactions - possible regression against latest 2.5-rc1 build [SPR-3912]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-3912](https://jira.spring.io/browse/SPR-3912?redirect=false)** and commented  I'm seeing what looks like a regression in the latest 2.5-rc1 build (http://s3.amazonaws.com/dist.springframework.org/snapshot/SPR/spring-framework-2.5-rc1-with-dependencies-20070923-246.zip)  I've put together and attached a very simple testcase to demonstrate (hopefully maven2 is acceptable as a build framework).  Essentially, my declarative transaction setup works perfectly against 2.0.6, but fails against 2.5-rc1.  In the failure scenario, the testcase errors out with ""org.hibernate.HibernateException: createQuery is not valid without active transaction"", indicating that a transaction was not begun as expected.  See beans.xml in the testcase.zip and the attached org.test.MyTest.txt for the output and stacktrace.  To execute the testcase, unzip it and run (assuming you have a recent maven2 installed):      'mvn test'  The log output and stack trace will be saved to a file at target/surefire-reports/org.test.MyTest.txt  Or, to render the log output and stack trace to the command line, run:      'mvn test -Dsurefire.useFile=false'  To see the testcase 'just work' under 2.0.6, edit the pom.xml file and swap out the commented spring 2.0.6 declaration.  The error will go away completely.  And of course, please don't hesitate to ask any follow-up questions or request more info.  Thanks,  - Chris    ---  **Affects:** 2.5 RC1  **Attachments:** - [org.test.MyTest.txt](https://jira.spring.io/secure/attachment/12932/org.test.MyTest.txt) (_3.86 kB_) - [spring-test-1.zip](https://jira.spring.io/secure/attachment/12931/spring-test-1.zip) (_8.74 kB_)","closed","in: core,","spring-projects-issues","2007-09-24T13:02:53Z","2019-01-12T16:39:48Z"
"","8559","AspectJ pointcut expressions fail to match generically parameterized methods [SPR-3879]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-3879](https://jira.spring.io/browse/SPR-3879?redirect=false)** and commented  Disclaimer: This may actually be an AspectJ bug.  I can't tell at this point.  The problem behavior I'm seeing is a bit hard to describe in prose; the best bet is to take a look at the code, beans xml and attached log output.  Essentially, it looks like AspectJ pointcut expressions aren't recognizing methods that override method declarations that take generic parameters.  For example, if I have a class MySet that implements Set\, an AspectJ pointcut expression of ""execution(* MySet.*(..))"" will NOT properly match MySet.add(String str).  Again, this doesn't express very well in prose, so take a look at the code (I've made it as concise as possible) and see what you can make of it.  I do have a workaround, which is detailed at the bottom of the issue.  If necessary, I'd be happy to upload a complete testcase.  If there are guidelines for testcase submission, please comment on this issue with a link to that documentation and I'll follow it.  Consider the following interfaces and implementation:      public interface Repository extends Set {}          public interface ProductRepository extends Repository {             Set findByCategory(String category);     }          public class JdoProductRepositoryImpl extends AbstractSet implements ProductRepository {         private final PersistenceManagerFactory pmf;              public JdoProductRepositoryImpl(PersistenceManagerFactory pmf) {             this.pmf = pmf;         }             @Override        public boolean add(Product product) {            PersistenceManager pm = pmf.getPersistenceManager();            boolean isNew = !(JDOHelper.isPersistent(product) || JDOHelper.isDetached(product));            pm.makePersistent(product);            return isNew;        }              // clear(), size(), iterator(), findByCategory() methods omitted for brevity     }  beans.xml:  \ \  \  \ \ \  \              \  main method:      public static void main(String... args) {         ApplicationContext ctx = new ClassPathXmlApplicationContext(""beans.xml"");         ProductRepository productRepos = (ProductRepository) ctx.getBean(""productRepos"");         int size;              productRepos.clear();         size = productRepos.size();         logger.info(""size before add: "" + size);         assert size == 0;              Product product = new Product(""foo"");         productRepos.add(product); //","closed","in: core,","spring-projects-issues","2007-09-14T14:50:50Z","2019-01-12T16:51:27Z"
"","8557","Support JDO 2.1 features [SPR-3877]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-3877](https://jira.spring.io/browse/SPR-3877?redirect=false)** and commented  Creating this issue as a placeholder for now, per Juergen and Andy's comments at http://blog.interface21.com/main/2007/09/10/spring-framework-21-turns-into-spring-framework-25.  I'll work with the JDO EG to have folks comment here on what new features will need support in Spring.   --- No further details from [SPR-3877](https://jira.spring.io/browse/SPR-3877?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-09-14T01:24:41Z","2012-06-19T03:47:50Z"
"","8349","DI with typed collections - NullPointerException on TypeConverterDelegate.convertToTypedCollection [SPR-3668]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-3668](https://jira.spring.io/browse/SPR-3668?redirect=false)** and commented  I have put together and attached a simplified version of this problem with a test case that demonstrates the NullPointerException.  In the example, you'll see a generic 'Repository' interface, which extends Set\ (and thus, ""is a collection"", which is apparently important in relationship to how spring wires things up in the application context)  Repository has a non-generic subinterface 'EntityRepository', declared as:      public interface EntityRepository extends Repository { ... }  EntityRepository has two concrete implementations:  JdoEntityRepository and InMemoryEntityRepository.  Both extend and abstract Repository implementation (AbstractRepository\) as follows:      final class JdoEntityRepository extends AbstractRepository { ... }     final class InMemoryEntityRepository extends AbstractRepository { ... }  I have a simple beans.xml that wires up an EntityRepository, injecting it into an 'EntityUtility' bean.  When this injection is performed, I get the following stack trace:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityUtility' defined in class path resource [beans.xml]: Instantiation of bean failed; nested exception is java.lang.NullPointerExceptionCaused by: java.lang.NullPointerException        at org.springframework.beans.TypeConverterDelegate.convertToTypedCollection(TypeConverterDelegate.java:395)        at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:204)        at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:107)        at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:356)        at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:438)        at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:153)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:799)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:717)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:384)        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251)        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287)        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)        at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:91)        at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:75)        at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:65)        at example.EntityRepositoryTest.demonstrateNullPointerException(EntityRepositoryTest.java:22)  IMPORTANT:  If I cease to have Repository\ extend Set\ (and for example, have it extend Iterable\), the entire problem goes away.  This clearly has something to do with Repository being a Collection (evidenced by the last call in the stack trace 'convertToTypedCollection()'.  Steps to reproduce the failure:  1) Download the attached example.zip file and unpack 2) cd spring-collections-example 3) Using Java 5.0 and Maven 2.0.5 or better, run `mvn test` 4) You'll see the 'EntityRepositoryTest.demonstrateNullPointerException()' unit test fail with the stack trace above.  Once you've seen the failure, you can make this test succeed by editing Repository.java and removing the 'extends Set\' from the class declaration.   ---  **Affects:** 2.0.6  **Attachments:** - [example.zip](https://jira.spring.io/secure/attachment/12706/example.zip) (_8.58 kB_)","closed","in: core,","spring-projects-issues","2007-07-08T09:18:49Z","2012-06-19T03:50:25Z"
"","8875","NullPointerException in MailSendException [SPR-4197]","**[cheng yong](https://jira.spring.io/secure/ViewProfile.jspa?name=youcai)** opened **[SPR-4197](https://jira.spring.io/browse/SPR-4197?redirect=false)** and commented  Exception in thread ""Thread-4"" java.lang.NullPointerException at org.springframework.mail.MailSendException.toString(MailSendException.java:124) at org.apache.log4j.or.DefaultRenderer.doRender(DefaultRenderer.java:35) at org.apache.log4j.or.RendererMap.findAndRender(RendererMap.java:79) at org.apache.log4j.spi.LoggingEvent.getRenderedMessage(LoggingEvent.java:297) at org.apache.log4j.helpers.PatternParser$BasicPatternConverter.convert(PatternParser.java:403) at org.apache.log4j.helpers.PatternConverter.format(PatternConverter.java:64) at org.apache.log4j.PatternLayout.format(PatternLayout.java:503) at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:301) at org.apache.log4j.WriterAppender.append(WriterAppender.java:159) at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:230) at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:65) at org.apache.log4j.Category.callAppenders(Category.java:203) at org.apache.log4j.Category.forcedLog(Category.java:388) at org.apache.log4j.Category.log(Category.java:853) at org.apache.commons.logging.impl.Log4JLogger.error(Log4JLogger.java:239)  i find 124 in MailSendException: sb.append(this.messageExceptions.length).append("") are:""); the messageExceptions may be null.  ---  **Affects:** 2.5 final  **Issue Links:** - #8817 NullPointerException in MailSendException (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2007-11-29T14:03:51Z","2019-01-12T16:51:17Z"
"","8438","Doc: Spring JPA container on Java EE 5 [SPR-3757]","**[chen xiaohu](https://jira.spring.io/secure/ViewProfile.jspa?name=xhchen111)** opened **[SPR-3757](https://jira.spring.io/browse/SPR-3757?redirect=false)** and commented  Config as following:  applicationContext.xml  ---  \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  ---  Error as following:  ---  [10:30:09.281] failed scanning class org/springframework/beans/BeansException [10:30:09.281] com.caucho.amber.AmberRuntimeException: com.caucho.config.ConfigException: com.caucho.config.ConfigExcept ion: Unable to get meta data for database. Meta data is needed for generated values. [10:30:09.281]  at com.caucho.amber.manager.AmberContainer.getEntity(AmberContainer.java:292) [10:30:09.281]  at com.caucho.amber.gen.AmberEnhancer.shouldEnhance(AmberEnhancer.java:157) [10:30:09.281]  at com.caucho.loader.enhancer.EnhancerManager.isClassMatch(EnhancerManager.java:326) [10:30:09.281]  at com.caucho.bytecode.ByteCodeClassScanner.scan(ByteCodeClassScanner.java:89) [10:30:09.281]  at com.caucho.loader.enhancer.EnhancerManager.transform(EnhancerManager.java:202) [10:30:09.281]  at com.caucho.loader.DynamicClassLoader.loadClass(DynamicClassLoader.java:1301) [10:30:09.281]  at com.caucho.loader.DynamicClassLoader.findClass(DynamicClassLoader.java:1199) [10:30:09.281]  at com.caucho.loader.DynamicClassLoader.loadClass(DynamicClassLoader.java:1119) [10:30:09.281]  at com.caucho.loader.DynamicClassLoader.loadClass(DynamicClassLoader.java:1068) [10:30:09.281]  at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319) [10:30:09.281]  at java.lang.Class.getDeclaredConstructors0(Native Method) [10:30:09.281]  at java.lang.Class.privateGetDeclaredConstructors(Class.java:2389) [10:30:09.281]  at java.lang.Class.getDeclaredConstructors(Class.java:1836) [10:30:09.281]  at com.caucho.config.Config.checkCanInstantiate(Config.java:462) [10:30:09.281]  at com.caucho.config.Config.validate(Config.java:487) [10:30:09.281]  at com.caucho.server.dispatch.FilterConfigImpl.setFilterClass(FilterConfigImpl.java:100) [10:30:09.281]  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [10:30:09.281]  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [10:30:09.281]  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [10:30:09.281]  at java.lang.reflect.Method.invoke(Method.java:597) [10:30:09.281]  at com.caucho.config.SetterAttributeStrategy.setAttribute(SetterAttributeStrategy.java:94) [10:30:09.281]  at com.caucho.config.SetterAttributeStrategy.configure(SetterAttributeStrategy.java:79) [10:30:09.281]  at com.caucho.config.NodeBuilder.configureAttributeImpl(NodeBuilder.java:395) [10:30:09.281]  at com.caucho.config.NodeBuilder.configureBeanImpl(NodeBuilder.java:334) [10:30:09.281]  at com.caucho.config.TypeStrategy.configureBean(TypeStrategy.java:104) [10:30:09.281]  at com.caucho.config.BeanTypeStrategy.configureBean(BeanTypeStrategy.java:257) [10:30:09.281]  at com.caucho.config.NodeBuilder.configureImpl(NodeBuilder.java:256) [10:30:09.281]  at com.caucho.config.NodeBuilder.configureChildImpl(NodeBuilder.java:302) [10:30:09.281]  at com.caucho.config.BeanTypeStrategy.configure(BeanTypeStrategy.java:218) [10:30:09.281]  at com.caucho.config.SetterAttributeStrategy.configure(SetterAttributeStrategy.java:77) [10:30:09.281]  at com.caucho.config.NodeBuilder.configureAttributeImpl(NodeBuilder.java:395) [10:30:09.281]  at com.caucho.config.NodeBuilder.configureBeanImpl(NodeBuilder.java:334) [10:30:09.281]  at com.caucho.config.TypeStrategy.configureBean(TypeStrategy.java:104) [10:30:09.281]  at com.caucho.config.BeanTypeStrategy.configureBean(BeanTypeStrategy.java:257) [10:30:09.281]  at com.caucho.config.EnvironmentTypeStrategy.configureBean(EnvironmentTypeStrategy.java:65) [10:30:09.281]  at com.caucho.config.NodeBuilder.configureBean(NodeBuilder.java:196) [10:30:09.281]  at com.caucho.config.Config.configureBean(Config.java:296) [10:30:09.281]  at com.caucho.config.Config.configureBean(Config.java:267) [10:30:09.281]  at com.caucho.config.core.ResinImport.init(ResinImport.java:137) [10:30:09.281]  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [10:30:09.281]  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [10:30:09.281]  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [10:30:09.281]  at java.lang.reflect.Method.invoke(Method.java:597) [10:30:09.281]  at com.caucho.config.j2ee.PostConstructProgram.configureImpl(PostConstructProgram.java:62) [10:30:09.281]  at com.caucho.config.BeanTypeStrategy.init(BeanTypeStrategy.java:355) [10:30:09.281]  at com.caucho.config.NodeBuilder.configureImpl(NodeBuilder.java:258) [10:30:09.281]  at com.caucho.config.EnvironmentAttributeStrategy.configure(EnvironmentAttributeStrategy.java:63) [10:30:09.281]  at com.caucho.config.NodeBuilder.configureAttributeImpl(NodeBuilder.java:395) [10:30:09.281]  at com.caucho.config.TypeStrategy.configureAttribute(TypeStrategy.java:113) [10:30:09.281]  at com.caucho.config.EnvironmentTypeStrategy.configureAttribute(EnvironmentTypeStrategy.java:86) [10:30:09.281]  at com.caucho.config.NodeBuilder.configureAttribute(NodeBuilder.java:229) [10:30:09.281]  at com.caucho.config.NodeBuilderChildProgram.configureImpl(NodeBuilderChildProgram.java:53) [10:30:09.281]  at com.caucho.config.BuilderProgramContainer.configureImpl(BuilderProgramContainer.java:62) [10:30:09.281]  at com.caucho.config.BuilderProgram.configure(BuilderProgram.java:68) [10:30:09.281]  at com.caucho.server.deploy.EnvironmentDeployController.configureInstance(EnvironmentDeployController.ja va:388) [10:30:09.281]  at com.caucho.server.deploy.EnvironmentDeployController.configureInstance(EnvironmentDeployController.ja va:61) [10:30:09.281]  at com.caucho.server.deploy.DeployController.startImpl(DeployController.java:644) [10:30:09.281]  at com.caucho.server.deploy.StartLazyRedeployAutomaticStrategy.request(StartLazyRedeployAutomaticStrateg y.java:119) [10:30:09.281]  at com.caucho.server.deploy.DeployController.request(DeployController.java:579) [10:30:09.281]  at com.caucho.server.webapp.WebAppContainer.getWebApp(WebAppContainer.java:900) [10:30:09.281]  at com.caucho.server.webapp.WebAppContainer.buildInvocation(WebAppContainer.java:717) [10:30:09.281]  at com.caucho.server.host.Host.buildInvocation(Host.java:476) [10:30:09.281]  at com.caucho.server.host.HostContainer.buildInvocation(HostContainer.java:314) [10:30:09.281]  at com.caucho.server.cluster.Server.buildInvocation(Server.java:848) [10:30:09.281]  at com.caucho.server.dispatch.DispatchServer.buildInvocation(DispatchServer.java:209) [10:30:09.281]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:258) [10:30:09.281]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:481) [10:30:09.281]  at com.caucho.util.ThreadPool$Item.runTasks(ThreadPool.java:685) [10:30:09.281]  at com.caucho.util.ThreadPool$Item.run(ThreadPool.java:607) [10:30:09.281]  at java.lang.Thread.run(Thread.java:619) [10:30:09.281] Caused by: com.caucho.config.ConfigException: com.caucho.config.ConfigException: Unable to get meta data for database. Meta data is needed for generated values. [10:30:09.281]  at com.caucho.amber.manager.AmberPersistenceUnit.addEntityClass(AmberPersistenceUnit.java:503) [10:30:09.281]  at com.caucho.amber.cfg.PersistenceUnitConfig.init(PersistenceUnitConfig.java:244) [10:30:09.281]  at com.caucho.amber.manager.AmberContainer.addPersistenceRoot(AmberContainer.java:569) [10:30:09.281]  at com.caucho.amber.manager.PersistenceEnvironmentListener.addLoader(PersistenceEnvironmentListener.java :76) [10:30:09.281]  at com.caucho.loader.EnvironmentClassLoader.sendAddLoaderEventImpl(EnvironmentClassLoader.java:436) [10:30:09.281]  at com.caucho.loader.DynamicClassLoader.sendAddLoaderEvent(DynamicClassLoader.java:682) [10:30:09.281]  at com.caucho.loader.DynamicClassLoader.init(DynamicClassLoader.java:1045) [10:30:09.281]  at com.caucho.loader.EnvironmentClassLoader.init(EnvironmentClassLoader.java:167) [10:30:09.281]  at com.caucho.loader.ClassLoaderConfig.init(ClassLoaderConfig.java:164) [10:30:09.281]  ... 31 more [10:30:09.281] Caused by: com.caucho.config.ConfigException: Unable to get meta data for database. Meta data is needed f or generated values. [10:30:09.281]  at com.caucho.amber.cfg.BaseConfigIntrospector.introspectId(BaseConfigIntrospector.java:1042) [10:30:09.281]  at com.caucho.amber.cfg.BaseConfigIntrospector.introspectIdField(BaseConfigIntrospector.java:894) [10:30:09.281]  at com.caucho.amber.cfg.EntityIntrospector.introspect(EntityIntrospector.java:432) [10:30:09.281]  at com.caucho.amber.manager.AmberPersistenceUnit.addEntityClass(AmberPersistenceUnit.java:482) [10:30:09.281]  ... 39 more  ---  **Affects:** 2.0.6, 2.1 M3","closed","type: task,","spring-projects-issues","2007-08-11T13:50:20Z","2019-01-13T22:42:24Z"
"","8244","CLONE - does not work in the web application [SPR-3561]","**[chen xiaohu](https://jira.spring.io/secure/ViewProfile.jspa?name=xhchen111)** opened **[SPR-3561](https://jira.spring.io/browse/SPR-3561?redirect=false)** and commented  ClassReader cannot load class included in spring.jar.  See: http://forum.springframework.org/showthread.php?t=38729  ---  **Affects:** 2.1 M1  **Attachments:** - [xhchen.zip](https://jira.spring.io/secure/attachment/12648/xhchen.zip) (_13.70 kB_)  **Issue Links:** - #6801 XML Schema-based configuration can not use in web server resin3 (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2007-06-06T21:51:53Z","2019-01-13T22:43:01Z"
"","8522","Inner bean definitions overwriting each other [SPR-3842]","**[Chad La Joie](https://jira.spring.io/secure/ViewProfile.jspa?name=lajoie)** opened **[SPR-3842](https://jira.spring.io/browse/SPR-3842?redirect=false)** and commented  Setup: - 3 Beans: TypeA, TypeB, TypeC - TypeA contains a List\ and is created by a simple bean definition parser - TypeB contains a Map and is created by a factory bean taking in List\ (map is created by iterating over this list and using the ID attribute of TypeC as the key to the map) and the factory is created and populated by a simple bean definition parser - TypeC contains a single string ID attribute and is created by a factory bean which is created by a simple bean definition parser - Beans are expressed using a custom schema  When Spring is creating the List\ to provide to TypeA the following exception occurs: Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'test.TypeA': Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are: PropertyAccessException 1: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.util.ArrayList] to required type [java.util.List] for property 'typeBs'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [test.TypeC] to required type [test.TypeB] for property 'typeBs[2]': no matching editors or conversion strategy found Caused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessException details (1) are: PropertyAccessException 1: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.util.ArrayList] to required type [java.util.List] for property 'typeBs'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [test.TypeC] to required type [test.TypeB] for property 'typeBs[2]': no matching editors or conversion strategy found Caused by: java.lang.IllegalArgumentException: Cannot convert value of type [test.TypeC] to required type [test.TypeB] for property 'typeBs[2]': no matching editors or conversion strategy found at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:231) at org.springframework.beans.TypeConverterDelegate.convertToTypedCollection(TypeConverterDelegate.java:401) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:204) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:138) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:815) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:645) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:78) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:59) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1126) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:861) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:421) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)  Tracing through the code, as best as I could, it appears that problem occurs in the AbstractBeanFactoryClass.getObjectForBeanInstance method, specifically at line 1208 when it attempts to fetch a pre-instantiated object from cache.  From what I can tell the inner bean definition to handle the List\ is overwritten with the definition of the bean to handle the List\.  Specifically it seems that both are given the name ""inner bean"" and so the one entry clobbers the other in the AbstractBeanFactoryClass.factoryBeanObjectCache map.  I can't be sure but I wonder if this is due to the hard coded name ""(inner bean)"" seen in BeanDefinitionValueRsolver.resolveValueIfNecessary() method at line 127.  I will attach a simple set of src that demonstrates either the bug or my incomplete understanding of how the custom schema code works.  ;)   ---  **Affects:** 2.0.6, 2.1 M3  **Attachments:** - [src.zip](https://jira.spring.io/secure/attachment/12881/src.zip) (_5.70 kB_)","closed","in: core,","spring-projects-issues","2007-09-04T00:20:59Z","2012-06-19T03:47:25Z"
"","7880","support xml namespaces in spring tags [SPR-3195]","**[Cesar Augusto Guerra de Souza](https://jira.spring.io/secure/ViewProfile.jspa?name=bilaco)** opened **[SPR-3195](https://jira.spring.io/browse/SPR-3195?redirect=false)** and commented  I would like to use TMT Validator (http://www.massimocorner.com/validator/index.htm) in my web project, togheter with spring tags (form:*) the problem is that I need to write things like:  \ \ \ \  Spring tags don't support to write tmt:validate=""true"" and so on  is invalid  thanks, Spring is wonderful  ps.: I'm from Brazil and my English isn't good   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-22T23:25:02Z","2012-06-19T09:37:35Z"
"","8667","org.springframework.jdbc.object.StoredProcedure is an abstract class, although it may be allowed to be used as a concrete class after the jira change SPR-3898 [SPR-3987]","**[Celal Ziftci](https://jira.spring.io/secure/ViewProfile.jspa?name=celal)** opened **[SPR-3987](https://jira.spring.io/browse/SPR-3987?redirect=false)** and commented  After the following change: http://opensource.atlassian.com/projects/spring/browse/SPR-3898 StoredProcedure class doesn't need to be abstract. If it were to be a concrete class, we could put it entirely into the config file. Below is an example;           	     	     	         	         		         			         			         		         		         			         			         		         		         			         			         		         	                If this is not seen as appropriate, then adding a concrete implementation (which does absolutely nothing, just an empty concrete implementation that extends StoredProcedure) would also allow us to do the same. Then in the code, we would do: StoredProcedure sp = ( StoredProcedure ) _context.getBean( ""storedProc"" ); Map inParams = new HashMap(); inParams.put( ""intData"", 5 ); Map spResults = sp.execute( inParams ); Object outParam = spResults.get( ""outParam"" ); Object result = spResults.get( ""resultSet1"" );   ---  **Affects:** 2.0.6, 2.1 M4, 2.5 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4145c299ef5d04cc703c35bdb0eb85896ce6c575, https://github.com/spring-projects/spring-framework/commit/2855e5c086d83aa45b97b138a497f04c5a43c430, https://github.com/spring-projects/spring-framework/commit/8fdc57ecbd4dc08744f18b0edea3f7c0c2720c24","closed","type: enhancement,","spring-projects-issues","2007-10-18T09:38:10Z","2012-06-19T03:47:45Z"
"","8666","Provide a concrete implementation of MappingSqlQuery (say RowMappingSqlQuery) which can be injected a RowMapper, so that we can put it in a config file [SPR-3986]","**[Celal Ziftci](https://jira.spring.io/secure/ViewProfile.jspa?name=celal)** opened **[SPR-3986](https://jira.spring.io/browse/SPR-3986?redirect=false)** and commented  MappingSqlQuery is an abstract class and expects concrete subclasses to implement mapRow(ResultSet, int). If we had a concrete implementation (say RowMappingSqlQuery), we could potentially put this RowMappingSqlQuery into a config file entirely. Below is an example of how it would look:  \ 	\\\ 	\ 	\ 		\ 			\ 			\ 			\\\ 		\ 		\ 	\ 	\ 		\ 	\ \  Note that we also provide a RowMapper to this RowMappingSqlQuery (so it will need to have a setter/getter for RowMapper). Below is the sample implementation for this RowMappingSqlQuery class:  public class RowMappingSqlQuery extends MappingSqlQuery { RowMapper _rowMapper;  public RowMappingSqlQuery() { super(); }  public RowMappingSqlQuery( DataSource ds, String sql ) { super( ds, sql ); }  /* This is the abstract method in MappingSqlQuery */ protected Object mapRow( ResultSet rs_, int rowNum_ ) throws SQLException { if( \_rowMapper != null ) { return _rowMapper.mapRow( rs_, rowNum_ ); } else { return null; } }  public void setRowMapper( RowMapper rowMapper ) { _rowMapper = rowMapper; }  public RowMapper getRowMapper() { return _rowMapper; } }   ---  **Affects:** 2.0.6, 2.1 M4, 2.5 RC1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ccb0b6e66ec3591209bd10c54d26f44a27bd0d8, https://github.com/spring-projects/spring-framework/commit/a3942c5c1bb914ddbeca9b3ef50a1cb2e984872e","closed","type: enhancement,","spring-projects-issues","2007-10-18T09:31:47Z","2012-06-19T03:47:06Z"
"","8578","Add setParameters method to RdbmsOperation, so that the objects in jdbc.object package can be entirely put into config [SPR-3898]","**[Celal Ziftci](https://jira.spring.io/secure/ViewProfile.jspa?name=celal)** opened **[SPR-3898](https://jira.spring.io/browse/SPR-3898?redirect=false)** and commented  The database access objects in jdbc.object package are very useful and intuitive to use. However, we cannot put these objects into the application context file as beans currently. An easy fix that will make this possible would be to put the following method into RdbmsOperation class:  public void setParameters(List parameterList) { for( Iterator iter = parameterList.iterator(); iter.hasNext(); ) { SqlParameter currentParameter = ( SqlParameter ) iter.next(); this.declareParameter( currentParameter ); } this.compile(); }  Using this method, now we can have bean definitions of the sort: \ \\\ \ \ \ \ \\ \ \ \\ \ \ \ \  which will allow us to decouple our SQL from the code. And what is better is, once we have the bean in the app code, it is ready to run since it is already compiled in the method above.   ---  **Affects:** 2.0.6, 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-21T07:06:35Z","2012-06-19T03:47:38Z"
"","8603","BeanWrapperImpl have problems with non-String Map keys [SPR-3923]","**[Cedomir Igaly](https://jira.spring.io/secure/ViewProfile.jspa?name=cigaly)** opened **[SPR-3923](https://jira.spring.io/browse/SPR-3923?redirect=false)** and commented  When setting mapped property values with non-String keys and extractOldValueForEditor set to true key should be converted. Otherwise map.get(key) will either always return null or throw an ClassCastException (when using TreeMap, for example).  Suggested fix is to change lines in BeanWrapperImpl.setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) from:      Map map = (Map) propValue;     Object oldValue = null;     if (isExtractOldValueForEditor()) {         oldValue = map.get(key);     }     Object convertedMapKey = null;     Object convertedMapValue = null;     try {         // IMPORTANT: Do not pass full property name in here - property editors         // must not kick in for map keys but rather only for map values.         convertedMapKey = this.typeConverterDelegate.convertIfNecessary(key, mapKeyType);     }     catch (IllegalArgumentException ex) {         PropertyChangeEvent pce =                 new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, oldValue, pv.getValue());         throw new TypeMismatchException(pce, mapKeyType, ex);     }  to      Map map = (Map) propValue;     Object convertedMapKey = null;     Object convertedMapValue = null;     try {     	// IMPORTANT: Do not pass full property name in here - property editors     	// must not kick in for map keys but rather only for map values.     	convertedMapKey = this.typeConverterDelegate.convertIfNecessary(key, mapKeyType);     }     catch (IllegalArgumentException ex) {     	PropertyChangeEvent pce =     			new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, null, pv.getValue());     	throw new TypeMismatchException(pce, mapKeyType, ex);     }     Object oldValue = null;     if (isExtractOldValueForEditor()) {     	oldValue = map.get(convertedMapKey);     }    ---  **Affects:** 2.0.6, 2.1 M4","closed","type: bug,","spring-projects-issues","2007-09-25T20:30:21Z","2012-06-19T03:47:35Z"
"","8282","When context:load-time-weaver is used with factory-bean and factory-method an IllegalArgumentException is thrown [SPR-3600]","**[Casey Hadden](https://jira.spring.io/secure/ViewProfile.jspa?name=casey.hadden)** opened **[SPR-3600](https://jira.spring.io/browse/SPR-3600?redirect=false)** and commented  When  is used in the same application context as a bean defined via the factory-method and factory-bean functionality the following IllegalArgumentException is thrown:  Exception in thread ""main"" java.lang.IllegalArgumentException: Name must not be null at org.springframework.util.Assert.notNull(Assert.java:112) at org.springframework.util.ClassUtils.forName(ClassUtils.java:186) at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1131) at org.springframework.beans.factory.support.AbstractBeanFactory.isBeanClassMatch(AbstractBeanFactory.java:1161) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:172) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:474) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:340)  Sample driver:  package test;  import org.springframework.context.support.ClassPathXmlApplicationContext;  public class Main { public static void main(String[] args) { System.out.println(""Successful context is bootstrapping. It does not contain loadTimeWeaver.""); ClassPathXmlApplicationContext successCtx = new ClassPathXmlApplicationContext(""test-success.xml""); System.out.println(""factory: "" + successCtx.getBean(""factory"")); System.out.println(""object: "" + successCtx.getBean(""object""));          System.out.println(""Failing context is bootstrapping. It is the same as successful, except for addition of loadTimeWeaver."");         ClassPathXmlApplicationContext failCtx = new ClassPathXmlApplicationContext(""test-fails.xml"");         System.out.println(""factory: "" + failCtx.getBean(""factory""));         System.out.println(""object: "" + failCtx.getBean(""object""));     }  }  Associated simple factory:  package test;  public class Factory {    public String getObject() { return ""Hello world""; } }  test-success.xml:  \  \                  \  test-fails.xml:  \  \                                \  By changing lines 1130-1132 of AbstractBeanFactory.java from:  if (typeMatchOnly && getTempClassLoader() != null) { return ClassUtils.forName(mbd.getBeanClassName(), getTempClassLoader()); }  to:  if (typeMatchOnly && getTempClassLoader() != null) { return mbd.resolveBeanClass(getTempClassLoader()); }  the above test code does bootstrap and run successfully.  Additionally, the changed code above does still successfully apply `@Aspect` advice to non-spring managed objects in both a standalone and JBoss 4.2.0 environment.  We do not currently have a case and haven't done any verification of the above change and its impact on advising spring managed beans.   ---  **Affects:** 2.1 M2","closed","in: core,","spring-projects-issues","2007-06-19T01:39:32Z","2012-06-19T03:50:05Z"
"","7888","form:errors tag does not render in freemarker view [SPR-3202]","**[Carsten Mjartan](https://jira.spring.io/secure/ViewProfile.jspa?name=cmjartan)** opened **[SPR-3202](https://jira.spring.io/browse/SPR-3202?redirect=false)** and commented  I'm using Freemarkers TagLib-Support to make use of spring form tags in freemarker views.  Example: page.ftl   ...  ...     All tags render fine except for the ErrorsTag.  Debugging through the code, I can see that ErrorsTag.renderDefaultContent is successfully processed and finds the errors, but it doesn't show up in the generated HTML.  ---  **Affects:** 2.0.2  **Issue Links:** - #8110 form:errors and form:option JSP tags don't render in FreeMarker templates (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2007-02-25T00:51:08Z","2019-01-12T16:51:47Z"
"","8253","ResourceBundleThemeSource doesn't find resource when basenamePrefix contain a dot  [SPR-3570]","**[Carlos Javier Mayoral Benitez](https://jira.spring.io/secure/ViewProfile.jspa?name=cjmayoral)** opened **[SPR-3570](https://jira.spring.io/browse/SPR-3570?redirect=false)** and commented  There is no problem when set basenamePrefix value to ""theme_""   ---  **Affects:** 2.0 final","closed","status: declined,","spring-projects-issues","2007-06-09T00:16:11Z","2019-01-12T16:40:05Z"
"","8700","SqlMapClientTemplate does not honour the TransactionAwareDataSourceProxy assigned or created in SqlMapClientFactoryBean [SPR-4021]","**[Carl Allain](https://jira.spring.io/secure/ViewProfile.jspa?name=callain)** opened **[SPR-4021](https://jira.spring.io/browse/SPR-4021?redirect=false)** and commented  In SqlMapClientFactoryBean.afterPropertiesSet(),  you have this section:  ... // Tell the SqlMapClient to use the given DataSource, if any. if (this.dataSource != null) { TransactionConfig transactionConfig = (TransactionConfig) this.transactionConfigClass.newInstance(); DataSource dataSourceToUse = this.dataSource; if (this.useTransactionAwareDataSource && !(this.dataSource instanceof TransactionAwareDataSourceProxy)) { dataSourceToUse = new TransactionAwareDataSourceProxy(this.dataSource); } transactionConfig.setDataSource(dataSourceToUse); transactionConfig.initialize(this.transactionConfigProperties); applyTransactionConfig(this.sqlMapClient, transactionConfig); } ...  and in SqlMapClientTemplate.execute(SqlMapClientCallback), you have  ... Connection springCon = null; try { ibatisCon = session.getCurrentConnection(); if (ibatisCon == null) { springCon = DataSourceUtils.getConnection(getDataSource()); session.setUserConnection(springCon); if (logger.isDebugEnabled()) { logger.debug(""Obtained JDBC Connection ["" + springCon + ""] for iBATIS operation""); } } else { if (logger.isDebugEnabled()) { logger.debug(""Reusing JDBC Connection ["" + ibatisCon + ""] for iBATIS operation""); } } return action.doInSqlMapClient(session); } ...  I think the springCon = DataSourceUtils.getConnection(getDataSource()); line does not consider the fact that getDataSource() may return an instance of TransactionAwareDataSourceProxy, in which case it should simply call its getConnection() method (which will call DataSourceUtils.getConnection() against the underlying data source being proxied, not the TransactionAwareDataSourceProxy instance itself.  I have code that uses a TransactionAwareDataSourceProxy to obtain a connection (using TransactionAwareDataSourceProxy  getConnection() as it should) for some JDBC stuff and then, when Ibatis comes into play, that leads to an extra ConnectionHolder being created in DataSourceUtils.doGetConnection(DataSource) since JDBC made an indirect DataSourceUtils.getConnection(X) because of the \.getConnection() call while Ibatis simply made a DataSourceUtils.getConnection(Y) instead.   ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2007-10-29T05:39:02Z","2012-06-19T03:46:55Z"
"","8768","Issue with apache xbean when upgrading spring from 2.0 to 2.1-rc or 2.5-rc1 [SPR-4089]","**[Cameron Braid](https://jira.spring.io/secure/ViewProfile.jspa?name=cameronbraid)** opened **[SPR-4089](https://jira.spring.io/browse/SPR-4089?redirect=false)** and commented  I initially posted to the forum http://forum.springframework.org/showthread.php?p=150766  There is a method signature change in org.springframework.beans.factory.xml.XmlReaderCon text that causes apache xbean to fail. I submitted a bug report at the xbean site https://issues.apache.org/jira/browse/XBEAN-88 but here is a stack trace excerpt :  Caused by: java.lang.NoSuchMethodError: org.springframework.beans.factory.xml.XmlReaderCon text.getReader()Lorg/springframework/beans/factory/xml/XmlBeanDefinitionReader; at org.apache.xbean.spring.context.v2c.XBeanNamespace Handler.loadResource(XBeanNamespaceHandler.java:81 8) at org.apache.xbean.spring.context.v2c.XBeanNamespace Handler.findNamespaceProperties(XBeanNamespaceHand ler.java:778) at org.apache.xbean.spring.context.v2c.XBeanNamespace Handler.parseBeanFromExtensionElement(XBeanNamespa ceHandler.java:257) at org.apache.xbean.spring.context.v2c.XBeanNamespace Handler.parse(XBeanNamespaceHandler.java:155) at org.apache.xbean.spring.context.v2.XBeanNamespaceH andler.parse(XBeanNamespaceHandler.java:49) at org.springframework.beans.factory.xml.BeanDefiniti onParserDelegate.parseCustomElement(BeanDefinition ParserDelegate.java:1246) at org.springframework.beans.factory.xml.BeanDefiniti onParserDelegate.parseCustomElement(BeanDefinition ParserDelegate.java:1236)  This change prevents spring 2.5 being a ""drop in"" upgrade from 2.0  Is this method signature change required ?  Could the old method be left as deprecated ?  ---  **Affects:** 2.1 M1, 2.1 M2, 2.1 M3, 2.1 M4, 2.5 RC1, 2.5 RC2  **Issue Links:** - #8760 Return type of o.s.b.f.x.XmlBeanDefinitionReader#getReader() changed (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2007-11-13T07:23:31Z","2019-01-12T16:51:23Z"
"","7960","TransactionTemplate could implement TransactionOperations interface, like JdbcTemplate etc. [SPR-3275]","**[Calvin Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=calvin)** opened **[SPR-3275](https://jira.spring.io/browse/SPR-3275?redirect=false)** and commented  Unlike JdbcTemplate and HibernateTemplate, the TransactionTemplate class does not currently implement an interface that can be easily mocked for testing.  It seems a little unlike normal Spring template helpers that there is no interface that defines the contract the class is fulfilling, and if there is no good reason for this, it would be very helpful if an interface could be introduced at some point, so that it could be more easily mocked for unit tests and the like.  The main method in the TransactionTemplate class that would need to be in the new interface is the execute method:  public Object execute(TransactionCallback action) throws TransactionException;  Additionally, you might want to include:  public PlatformTransactionManager getTransactionManager();  though I'd consider that method (as with the setter for the transaction manager) to be an implementation artifact that doesn't belong in the interface.    --- No further details from [SPR-3275](https://jira.spring.io/browse/SPR-3275?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-03-19T13:53:25Z","2012-06-19T03:50:14Z"
"","8027","ArrayIndexOutOfBoundsException by injecting Map [SPR-3343]","**[Bystrik Horvath](https://jira.spring.io/secure/ViewProfile.jspa?name=bystrik)** opened **[SPR-3343](https://jira.spring.io/browse/SPR-3343?redirect=false)** and commented  It is not possible to create and inject  Map to the bean. It ends up with ArrayIndexOutOfBoundsException :  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mapBean' defined in file [D:\tmp\pgw\spring_test\config\applicationContext.xml]: Initialization of bean failed; nested exception is java.lang.ArrayIndexOutOfBoundsException: 1 Caused by: java.lang.ArrayIndexOutOfBoundsException: 1 at org.springframework.core.GenericCollectionTypeResolver.extractTypeFromParameterizedType(GenericCollectionTypeResolver.java:262) at org.springframework.core.GenericCollectionTypeResolver.extractType(GenericCollectionTypeResolver.java:231) at org.springframework.core.GenericCollectionTypeResolver.extractTypeFromParameterizedType(GenericCollectionTypeResolver.java:263) at org.springframework.core.GenericCollectionTypeResolver.extractType(GenericCollectionTypeResolver.java:231) at org.springframework.core.GenericCollectionTypeResolver.getGenericParameterType(GenericCollectionTypeResolver.java:180) at org.springframework.core.GenericCollectionTypeResolver.getCollectionParameterType(GenericCollectionTypeResolver.java:83) at org.springframework.beans.TypeConverterDelegate.convertToTypedCollection(TypeConverterDelegate.java:319) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:202) at org.springframework.beans.TypeConverterDelegate.convertToTypedCollection(TypeConverterDelegate.java:342) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:202) at org.springframework.beans.TypeConverterDelegate.convertToTypedMap(TypeConverterDelegate.java:387) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:206) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:139) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:771) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:604) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValue(AbstractPropertyAccessor.java:49) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:74) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57) at org.springframework.beans.factory.support.AbstractBeanFactory.applyPropertyValues(AbstractBeanFactory.java:852) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1054) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:843) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:427) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:254) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:144) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:284) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:93) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:77) at org.springframework.context.support.FileSystemXmlApplicationContext.\(FileSystemXmlApplicationContext.java:67) at test.Starter.main(Starter.java:16)   ---  **Affects:** 2.0.3","closed","in: core,","spring-projects-issues","2007-04-04T18:41:48Z","2012-06-19T03:50:39Z"
"","8292","NamedParameterJdbcTemplate usage for multi-column IN-clause [SPR-3610]","**[Brian Rodecap](https://jira.spring.io/secure/ViewProfile.jspa?name=brodecap)** opened **[SPR-3610](https://jira.spring.io/browse/SPR-3610?redirect=false)** and commented  Need a way to use the NamedParameterJdbcTemplate to bind data dynamically to a multi-column IN-clause. Example:  SELECT * FROM employee WHERE (firstname, lastname) IN ( ('Joe', 'Smith'), ('Sally', 'Johnson') )  This query should return only two (2) rows, one for ""Joe Smith"" and one for ""Sally Johnson.""  It is important to note that this query is not the same as...  SELECT * FROM employee WHERE firstname IN ('Joe', 'Sally') AND lastname IN ('Smith', 'Johnson')  That query would return ""Sally Smith"" and ""Joe Johnson"" rows erroneously, in addition to the correct ""Joe Smith"" and ""Sally Johnson"" results.   ---  **Affects:** 2.0.6, 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-06-22T01:12:06Z","2012-06-19T03:50:06Z"
"","7951","StringTemplate view support [SPR-3266]","**[Brian Lewis](https://jira.spring.io/secure/ViewProfile.jspa?name=brianlewis)** opened **[SPR-3266](https://jira.spring.io/browse/SPR-3266?redirect=false)** and commented  org.springframework.web.servlet.view.stringtemplate to support StringTemplate ( http://www.stringtemplate.org/ ).   ---  **Attachments:** - [stringtemplate_example.tgz](https://jira.spring.io/secure/attachment/12507/stringtemplate_example.tgz) (_6.92 kB_)  10 votes, 9 watchers","closed","has: votes-jira,","spring-projects-issues","2007-03-15T01:35:07Z","2019-01-11T17:18:52Z"
"","8403","MockHttpServletRequest should ensure session objects can be serialized [SPR-3722]","**[Brian Egge](https://jira.spring.io/secure/ViewProfile.jspa?name=brianegge)** opened **[SPR-3722](https://jira.spring.io/browse/SPR-3722?redirect=false)** and commented  I found that many latent bugs can go undetected because the MockHttpServletRequest doesn't serialize the session parameters.  I created a subclass which does this, and has helped reveal bugs that don't appear until my container persists the session.  I'd propose either adding the subclass, or replacing the methods in MockHttpServletRequest  with those in the subclass.   ---  **Attachments:** - [MockSerializedHttpServletRequest.java](https://jira.spring.io/secure/attachment/12742/MockSerializedHttpServletRequest.java) (_1.79 kB_) - [MockSerializedHttpServletRequestUnitTest.java](https://jira.spring.io/secure/attachment/12744/MockSerializedHttpServletRequestUnitTest.java) (_514 bytes_) - [MockSerializedHttpServletRequestUnitTest.java](https://jira.spring.io/secure/attachment/12743/MockSerializedHttpServletRequestUnitTest.java) (_543 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-07-31T13:07:23Z","2012-06-19T09:37:34Z"
"","8390","Doc: Update ComponentBeanDefinitionParser example to work with nested child Components [SPR-3709]","**[Brett Randall](https://jira.spring.io/secure/ViewProfile.jspa?name=javabrett)** opened **[SPR-3709](https://jira.spring.io/browse/SPR-3709?redirect=false)** and commented  The example of custom XML extensions described in Spring Reference Appendix B - ""B.7. Meatier examples"" could be improved.  The XML schema for foo:component allows for nesting of components to an arbitrary depth, i.e. component with child components that themselves cotain child components, and so on.  The sample ComponentBeanDefinitionParser in the documentation cannot deal with more than a single level of nested components, and so cannot effectively create all beans describable by the schema.  Unit tests to retrieve a grandchild component of the top-level component fail.  The sample can be improved by making child component bean-processing recursive, allowing for nesting to any depth.  This is achieved by composing child Component-s using their own ComponentFactoryBean.  Code to follow.   ---  **Affects:** 2.0.6  **Attachments:** - [FooComponentTest.zip](https://jira.spring.io/secure/attachment/12726/FooComponentTest.zip) (_701.17 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1bbe93e535679b608c06f526e70896e47a19627f","closed","type: documentation,","spring-projects-issues","2007-07-20T14:05:39Z","2012-06-19T03:50:43Z"
"","8863","Resource loading when injecting ArrayList throws ClassCastException [SPR-4185]","**[Brandon Richins](https://jira.spring.io/secure/ViewProfile.jspa?name=brichins)** opened **[SPR-4185](https://jira.spring.io/browse/SPR-4185?redirect=false)** and commented  The following code works in Spring 2.0.6 without incident.  When run with Spring 2.5 it throws a ClassCastException on the first for-each loop in the init method.  The init method is called as an initialization callback specified on the bean configuration.  public class PropertyReader { private ArrayList\ locations;      public void setLocations(ArrayList locations) {     	this.locations = locations;     }          public void init() throws IOException {         System.err.println(""locations: "" + locations.getClass().toString());     	Properties props = new Properties();    	         for (Resource resource : locations) {         	InputStream is = resource.getInputStream();             props.load(is);         }              for (Object key : props.keySet()) {         	System.out.println(""key: "" + key + ""\tvalue: "" + props.get(key));         	System.setProperty((String)key, (String)props.get(key));         }     }  }  Work Around: If the list type is changed to String and the DefaultResource loader is used or if the locations object is changed to a List instead of an array list it works fine.   ---  **Affects:** 2.5 final  **Attachments:** - [SpringResource-SPR-4185.zip](https://jira.spring.io/secure/attachment/13160/SpringResource-SPR-4185.zip) (_2.13 kB_)","closed","in: core,","spring-projects-issues","2007-11-28T08:53:33Z","2012-06-19T03:47:01Z"
"","8469","PersistenceAnnotationBeanPostProcessor causes OutOfMemoryError [SPR-3789]","**[Branden Root](https://jira.spring.io/secure/ViewProfile.jspa?name=hexghost)** opened **[SPR-3789](https://jira.spring.io/browse/SPR-3789?redirect=false)** and commented  When using PersistenceAnnotationBeanPostProcessor, on deploy my webapp consumes all available memory until finally the server throws an OOM exception. I've run Glassfish in verbose mode and managed to extract a stack trace, and it appears that PersistenceAnnotationBeanPostProcessor is in some infinite loop trying to find another bean. I've attached a stack trace to this bug report. When I comment out the PersistenceAnnotationBeanPostProcessor bean, my app loads fine until the first DAO call (since it needs an EMF and the DAO didn't get one injected). I'm unable to do anything with my application now since it basically crashes on startup.   ---  **Affects:** 2.1 M3  **Attachments:** - [spring-daos.xml](https://jira.spring.io/secure/attachment/12957/spring-daos.xml) (_5.60 kB_) - [stack.txt](https://jira.spring.io/secure/attachment/12811/stack.txt) (_87.30 kB_)","closed","in: data,","spring-projects-issues","2007-08-20T08:55:02Z","2019-01-11T19:34:50Z"
"","8635","support for multiple transaction managers with @Transactional /  [SPR-3955]","**[Brad C.](https://jira.spring.io/secure/ViewProfile.jspa?name=bradcupit)** opened **[SPR-3955](https://jira.spring.io/browse/SPR-3955?redirect=false)** and commented  the `@Transactional` annotation /  feature only supports one transaction manager. The  xml configuration does permit naming a specific transaction manager for use, and the XSD schema permits multiple  elements, however there is no way to specify which transaction manager to use in the `@Transactional` annotation.  This is a proposal to add an optional field to the `@Transactional` annotation for specifying the bean name of the transaction manager to use. If a bean name is not specified, then it assumes there is only one  element in the xml and uses that transaction manager.  Of course, any better ideas to support multiple transaction managers with `@Transactional` are more than welcome.  ---  **Affects:** 2.0.7  **Issue Links:** - #17145 `@Transactional` qualifier is ignored by TransactionAspectSupport if default transaction manager is set (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0698947e6db694701fa0b4a46af4273ad9fe31d5  20 votes, 24 watchers","closed","has: votes-jira,","spring-projects-issues","2007-10-03T01:39:36Z","2019-01-13T08:07:10Z"
"","8298","HibernateTemplate loadAll returns duplicates [SPR-3616]","**[Bob Brady](https://jira.spring.io/secure/ViewProfile.jspa?name=bbrady)** opened **[SPR-3616](https://jira.spring.io/browse/SPR-3616?redirect=false)** and commented  I am using HibernateTemplate to load all persisted objects of a class that has a collection of enums.  The problem is that for each enum in the collection, I get a copy of the parent object when calling HibernateTemplate's loadAll.  Say ExampleDomain is the parent class and it has a collection of Units like so:  [CODE] `@CollectionOfElements`(fetch=FetchType.EAGER) `@JoinTable`(joinColumns = `@JoinColumn`(name=""MY_EXAMPLE_ID"")) `@Column`(nullable=true) `@Enumerated`(value=EnumType.STRING) public Set\ getChosenUnits() { return this.chosenUnits; } [/CODE]  Then If I add three Units to the an instance of ExampleDomain and persist it, HibernateTemplate will return three identical copies of the persisted object!  Here's a snippet:  [CODE] ExampleDomain ed = new ExampleDomain(); ... // Add 3 Units to collection Set\ allUnits = new HashSet\(); allUnits.add(units1); allUnits.add(units2); allUnits.add(units3); ed.setChosenUnits(allUnits); // We're, clean: this returns an empty list List\ domains = this.getHibernateTemplate().loadAll(ExampleDomain.class); // Persist the newly created ExampleDomain object this.getHibernateTemplate().saveOrUpdatel(ed); // Now we get back three duplicate objects! domains = this.getHibernateTemplate().loadAll(ExampleDomain.class); [/CODE]  Myself and a co-worker have duplicated this behavior with different classes, but the same collection of enum elements format.  Also, others have reported a similar issue in the Spring forums (Re: http://forum.springframework.org/showthread.php?p=128103&posted=1#post128103 ).  Our workaround is simple to use HQL instead of loadAll:  [CODE] this.getHibernateTemplate().find(""from ExampleDomain""); [/CODE]  Thank you, Bob   ---  **Affects:** 2.0.6","closed","status: declined,","spring-projects-issues","2007-06-25T00:45:35Z","2019-01-12T16:40:00Z"
"","8215","CancellableFormController should either not validate when canceling or to hand the errors object to the onCancel method. [SPR-3532]","**[Blair Nilsson](https://jira.spring.io/secure/ViewProfile.jspa?name=blair)** opened **[SPR-3532](https://jira.spring.io/browse/SPR-3532?redirect=false)** and commented  Since it doesn't make sense to do the validation and then throw away the result.  I'd rather it defaulted to not validate if it is canceling, AND hand the error object over, in case suppressValidation has been overwritten.  --- Blair   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-05-28T13:47:50Z","2012-06-19T03:50:47Z"
"","8813","Most of POM have incorrect checksums on maven repository [SPR-4134]","**[Bertrand Fovez](https://jira.spring.io/secure/ViewProfile.jspa?name=bfovez)** opened **[SPR-4134](https://jira.spring.io/browse/SPR-4134?redirect=false)** and commented  Most of POM have incorrect checksums:  Downloading: http://repo1.maven.org/maven2/org/springframework/spring-context/2.5/spring-context-2.5.pom [WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '80e09ea8f84a2fc8a616938bf3d4454ea54cdfbe'; remote = '6b0cd44cc69fb60e244628ab04cb49e547550154'  Downloading: http://repo1.maven.org/maven2/org/springframework/spring-beans/2.5/spring-beans-2.5.pom [WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'e51a66f7c690817d382eb81882f29213006a78cc'; remote = 'bff5d293140c8508292d3c25fe82906efb274455'  Downloading: http://repo1.maven.org/maven2/org/springframework/spring-core/2.5/spring-core-2.5.pom [WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '9dc5e7dd334bc599f737f7db271f2b986798d5a2'; remote = 'dba2650daf4ce3ebc75ca44fea1663fb9eb192a1'  Downloading: http://repo1.maven.org/maven2/org/springframework/spring-web/2.5/spring-web-2.5.pom [WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = '375df9926282ac161d6e0d24c4f0d844fe64cd78'; remote = '2b35fffc51f645f75529600a39291d1ee191176c'  ... and so on.   ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2007-11-19T22:39:30Z","2019-01-11T15:46:26Z"
"","8787","All POM file in folder /dist/maven (spring-framework-2.5-rc2-with-dependencies.zip) refers to version 2.5-rc1 instead of 2.5-rc2 [SPR-4108]","**[Bertrand Fovez](https://jira.spring.io/secure/ViewProfile.jspa?name=bfovez)** opened **[SPR-4108](https://jira.spring.io/browse/SPR-4108?redirect=false)** and commented  For example, spring-context.pom reads the following: \org.springframework\ \spring-context\ \2.5-rc1\    And lower: \ \${project.groupId}\ \spring-beans\ \${project.version}\   \  As a results, any maven goal leads to maven trying to download spring-beans-2.5-rc1 instead of spring-beans-2.5-rc2.  ---  **Affects:** 2.5 RC2  **Issue Links:** - #8778 Error in spring-2.5-rc2.pom (Wrong version information) (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2007-11-15T03:23:50Z","2019-01-12T16:51:22Z"
"","8751","Make spring-util-2.5.xsd available on springframework.org [SPR-4073]","**[Bertrand Fovez](https://jira.spring.io/secure/ViewProfile.jspa?name=bfovez)** opened **[SPR-4073](https://jira.spring.io/browse/SPR-4073?redirect=false)** and commented  When application context is starting using jee namespace fails bacause import in the xsd in beans and tool doesn't have schema location.  spring-jee-2.0.xsd is not valid schema.  ---  **Affects:** 2.5 RC1  **Issue Links:** - #8747 Call to http://www.springframework.org/schema/util/spring-util-2.5.xsd results to an HTTP 404 error (_**""is duplicated by""**_) - #8717 ""http://www.springframework.org/schema/util/spring-util-2.5.xsd"" is not found (404) (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2007-11-08T19:43:51Z","2019-01-11T16:28:09Z"
"","8747","Call to http://www.springframework.org/schema/util/spring-util-2.5.xsd results to an HTTP 404 error [SPR-4068]","**[Bertrand Fovez](https://jira.spring.io/secure/ViewProfile.jspa?name=bfovez)** opened **[SPR-4068](https://jira.spring.io/browse/SPR-4068?redirect=false)** and commented  Others 2.5 schemas works fine but this one (http://www.springframework.org/schema/util/spring-util-2.5.xsd) doesn't seem to be not installed. Could be annoying in some case.  ---  **Affects:** 2.5 RC2  **Issue Links:** - #8751 Make spring-util-2.5.xsd available on springframework.org (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2007-11-07T22:57:40Z","2019-01-12T16:51:24Z"
"","8735","TestContext provides protected methods for subclasses but contructor args prevents out-of-package subclassing [SPR-4056]","**[Bertrand Fovez](https://jira.spring.io/secure/ViewProfile.jspa?name=bfovez)** opened **[SPR-4056](https://jira.spring.io/browse/SPR-4056?redirect=false)** and commented  Hi,  org.springframework.test.context.TestContext provides a bunch of protected methods (getContextCache, getContextLoader, getLocations) which are apparently intented to be used by subclasses. Beside, TestContextManager supplies a method (TestContextManager.getTestContext()) in order to indicate the actual TestContext class to use.  However, the constructor signature includes org.springframework.test.context.ContextCache which is packaged protected and therefore not visible to any TestContext subclasses located in its own package.  Is that situation a deliberate design choice? If no, is it possible, please, to make TestContext ""subclassable"" ?  Our need is to do a job similar to the TestContext.retrieveContextLocations() method job, that is, introspect some annotations located on the test class and grab some information that is necessary we, later in the process, AbstractGenericContextLoader.customizeContext() will be called. We need to do this job in a TestContext subclass constructor.  Thanks for your feed-back.  Bertrand   ---  **Affects:** 2.5 RC2","closed","type: enhancement,","spring-projects-issues","2007-11-06T20:10:53Z","2019-01-11T16:22:02Z"
"","8688","Supply an opportunity to customize context before calling refresh in ContextLoaders (web.context and test.context) [SPR-4008]","**[Bertrand Fovez](https://jira.spring.io/secure/ViewProfile.jspa?name=bfovez)** opened **[SPR-4008](https://jira.spring.io/browse/SPR-4008?redirect=false)** and commented  First of all, congratulations for this huge and tremendous job!  For some reason, we need to dynamically add BeanFactoryPostProcessors (PropertyPlaceholderConfigurers here) to a a context AFTER config locattions have been assigned but BEFORE context.refresh() call.  In order to achieve this, we overrode web.context.ContextLoader.createWebApplicationContext(). Another way would probably have had to set an ad-hoc parent context.  Starting with 2.5, we were to proceed the same way with test.context.ContextLoader. Unfortunately, test.context.AbstractGenericContextLoader.loadContext() is final.  The idea is to supply an abstract customizeContext() method (just like the supplied customizeBeanFactory() method) in both web.context.ContextLoader and test.context.ContextLoader.  Thank you for your feedback.   --- No further details from [SPR-4008](https://jira.spring.io/browse/SPR-4008?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-10-25T22:20:53Z","2019-01-11T16:18:43Z"
"","8416","request scoped managed bean in combination with  does not work [SPR-3735]","**[Bert Van der Heyden](https://jira.spring.io/secure/ViewProfile.jspa?name=heydenb)** opened **[SPR-3735](https://jira.spring.io/browse/SPR-3735?redirect=false)** and commented  I had a configuration like this working on 2.0.1 and it worked fine.           	     		               	               		     			       the exposeSiteKeyInterceptor takes some parameter from the request and puts it in the siteKey property of the siteKey (=a proxy) bean. Afterwards the LocaleResolver uses the siteKey bean again to get the siteKey. Also some other request unaware managed beans can have the siteKey bean injected. This works fine in 2.0.1  But in 2.0.6 and 2.0.7 nightly build this doesn't work anymore. The exposeSiteKeyInterceptor puts the siteKey value on the request scoped bean. But when the LocaleResolver wants to take the value, it receives a null. So it seems that the request scoped bean reacts like a prototype scoped bean. When I change the request scope to session scope, I still have the same issue.  Is this a bug? Or should I do this differently now?   ---  **Affects:** 2.0.6","closed","in: core,","spring-projects-issues","2007-08-02T03:06:04Z","2019-01-11T19:29:48Z"
"","7952","RemoteInvocationUtils: possible infinite loop in when exception has itself as root cause [SPR-3267]","**[Bernhard Lackner](https://jira.spring.io/secure/ViewProfile.jspa?name=blackner)** opened **[SPR-3267](https://jira.spring.io/browse/SPR-3267?redirect=false)** and commented  some frameworks throw exceptions which have this set as root cause. this results in an infinite loop in RemoteInvocationUtils.  this code could fix the simple use case:  Throwable exToUpdate = ex; Set\ previous=new HashSet\();  while (exToUpdate != null && !previous.contains(exToUpdate)) { StackTraceElement[] serverStack = exToUpdate.getStackTrace(); StackTraceElement[] combinedStack = new StackTraceElement[serverStack.length + clientStack.length]; System.arraycopy(serverStack, 0, combinedStack, 0, serverStack.length); System.arraycopy(clientStack, 0, combinedStack, serverStack.length, clientStack.length); exToUpdate.setStackTrace(combinedStack); previous.add(exToUpdate);	 exToUpdate = exToUpdate.getCause(); }    ---  **Affects:** 2.0.2, 2.0.3","closed","type: bug,","spring-projects-issues","2007-03-15T01:54:36Z","2012-06-19T03:51:01Z"
"","8841","Doc: spring.jar does not include DispatcherServlet anymore (for remoting purposes) [SPR-4163]","**[Bernard Niset](https://jira.spring.io/secure/ViewProfile.jspa?name=bern)** opened **[SPR-4163](https://jira.spring.io/browse/SPR-4163?redirect=false)** and commented  The documentation in 2.5 claims that upgrating from 2.0 should be a matter of drop in replacement. I found that it is not true for hessian remoting as the DispatcherServlet is not included anymore in spring.jar. Documentation also indicates that spring mvc is no longer part of spring.jar but it doesn't mention DispatcherServlet (which is necessary for remoting). It's not only a documentation issue as now the packaging of spring.jar doesn't make sense anymore. The spring.jar still contains the remoting package with the httpinvoker and caucho packages but not it's supporting classes.   ---  **Affects:** 2.5 final","closed","type: task,","spring-projects-issues","2007-11-23T21:27:32Z","2012-06-19T03:47:47Z"
"","8676","AbstractApplicationContext.isActive returns true even when refresh fails [SPR-3996]","**[Bernard Macours](https://jira.spring.io/secure/ViewProfile.jspa?name=bmacours)** opened **[SPR-3996](https://jira.spring.io/browse/SPR-3996?redirect=false)** and commented  Better an example than any long explanation:      AbstractXmlApplicationContext context = null;     try {         context = new AbstractXmlApplicationContext() {                 protected String[] getConfigLocations() {                 return new String[] { ""classpath:a_wrong_location"" };             }             };         context.refresh();     }     finally {         System.out.println(""isAlive = "" + context.isActive());     }  The previous piece of code outputs an exception AND ""isAlive = true"". So the application context is considered as refreshed (as explained in isActive javadoc), while this is not the case.   ---  **Affects:** 2.0.7","closed","in: core,","spring-projects-issues","2007-10-21T22:44:09Z","2012-06-19T03:47:03Z"
"","8628","Configurable bean initialization order [SPR-3948]","**[Bernard Macours](https://jira.spring.io/secure/ViewProfile.jspa?name=bmacours)** opened **[SPR-3948](https://jira.spring.io/browse/SPR-3948?redirect=false)** and commented  There should be a way to order bean initialization. Using ""depends-on"" is too verbose and is forcing us to explicitly bind business beans with technical beans:  \ \ \  It would be better to have something like:  \ \ \  Of course, we could configure several beans with a different initialization order. For example: \ \  Note: ""init-order"" would be meaningless for lazy-initialized beans.   ---  **Affects:** 2.0.6  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-09-30T19:45:21Z","2015-05-21T07:17:44Z"
"","8550","URIEditor shouldn't make a special case for classpath schemes  [SPR-3870]","**[Bernard Macours](https://jira.spring.io/secure/ViewProfile.jspa?name=bmacours)** opened **[SPR-3870](https://jira.spring.io/browse/SPR-3870?redirect=false)** and commented  URIEditor shouldn't make a special case for classpath schemes and should take the input uri as-is.  Rationale:  1) Our company decide to have BEA installed under ""C:/Program Files/..."" (maybe not a wise choice, but ok... it contains a space!). As URIEditor tries to replace any ""classpath:"" uri by the underlying resource URL, it gets something like file:c:/program file/... which throws an URISyntaxException because of the space.  2) Standard property editor should'nt contain any logic that depends on the property values (behalve exceptions)  3) We would like to have the original ""classpath:"" uri in our instanciated beans  Our current workaround is to register our own URI property editor, which is the same as the Spring one with all classloader/classpath related stuff removed:  import java.beans.PropertyEditorSupport; import java.net.URI; import java.net.URISyntaxException;  import org.springframework.beans.propertyeditors.URLEditor;  public class URIEditor extends PropertyEditorSupport {      public void setAsText(String text) throws IllegalArgumentException {              if (text == null) {             setValue(null);         }         else {             try {                 setValue(new URI(text));             }             catch (URISyntaxException ex) {                 throw new IllegalArgumentException(""Invalid URI syntax: "" + ex);             }         }     }          public String getAsText() {         URI value = (URI)getValue();         return (value != null ? value.toString() : """");     }  }   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-09-13T02:02:26Z","2012-06-19T03:47:26Z"
"","8406","Nested elements not visible to AbstractSingleBeanDefinitionParser.doParse [SPR-3725]","**[Benson Margulies](https://jira.spring.io/secure/ViewProfile.jspa?name=bmargulies)** opened **[SPR-3725](https://jira.spring.io/browse/SPR-3725?redirect=false)** and commented  I subclass AbstractSingleBeanDefinitionParser. My schema sets up a bean element like:   Some descriptive text   When doParse is called, the supplied Element has no children. The node for 'description' is gone.  I experimented with adding a decorator for it, but that does not get called at all.   ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-07-31T23:44:17Z","2019-01-11T19:30:34Z"
"","8076","MBeanClientInterceptor: allowing to query the server if InstanceNotFoundException  [SPR-3393]","**[Benoit Moussaud](https://jira.spring.io/secure/ViewProfile.jspa?name=bmoussaud)** opened **[SPR-3393](https://jira.spring.io/browse/SPR-3393?redirect=false)** and commented  When using ObjectNamingStrategy interface and MBeanClientInterceptor class you do not have the full ObjectName. Typically, in my application, I add the Location attribut at runtime. So When I need to define a mbean client through the class org.springframework.jmx.access.MBeanProxyFactoryBean, i do not have the complete objectName. Exemple:  \  \ \ \ \ \ \  The following changes of the MBeanClientInterceptor allow to perform a query if the getMBeanInfo() fails. original source code: private void retrieveMBeanInfo() throws MBeanServerNotFoundException, MBeanInfoRetrievalException { try { MBeanInfo info = this.server.getMBeanInfo(this.objectName);  modified source code: private void retrieveMBeanInfo() throws MBeanServerNotFoundException, MBeanInfoRetrievalException { try { MBeanInfo info = null; try { info = this.server.getMBeanInfo(this.objectName); } catch (InstanceNotFoundException ex) { // Instance not found, try to query the server with this objectName, if there is only one instance, take it else throw the exception. Set results = server.queryMBeans(this.objectName, null); if (results.size() != 1) throw ex; this.objectName =  ((ObjectInstance)results.iterator().next()).getObjectName(); logger.debug(""The new ObjectName is ""+this.objectName); info = this.server.getMBeanInfo(this.objectName); }   ---  **Affects:** 2.0.4  **Attachments:** - [MBeanClientInterceptor.java](https://jira.spring.io/secure/attachment/12547/MBeanClientInterceptor.java) (_13.81 kB_)  2 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2007-04-19T00:05:17Z","2019-01-12T03:51:04Z"
"","8075","MBeanClientInterceptor with JMX 1.0 [SPR-3392]","**[Benoit Moussaud](https://jira.spring.io/secure/ViewProfile.jspa?name=bmoussaud)** opened **[SPR-3392](https://jira.spring.io/browse/SPR-3392?redirect=false)** and commented  Modification of the classes  org.springframework.jmx.access.MBeanClientInterceptor to be used with an JMX Server v1.0 [Tested with BEA Weblogic 8.1] Changes in MBeanClientInterceptor: -remove         private JMXServiceURL serviceUrl private String agentId; private JMXConnector connector; reference getter & setter associated -change	 private MBeanServerConnection server --> private MBeanServer server; and the associated setter the connect method Check diff file and the new version of MBeanClientInterceptor.    ---  **Affects:** 2.0.4  **Attachments:** - [MBeanClientInterceptor.diff](https://jira.spring.io/secure/attachment/12545/MBeanClientInterceptor.diff) (_2.99 kB_) - [MBeanClientInterceptor.java](https://jira.spring.io/secure/attachment/12546/MBeanClientInterceptor.java) (_13.21 kB_)","closed","type: enhancement,","spring-projects-issues","2007-04-18T23:34:34Z","2012-06-19T09:37:30Z"
"","8340","Add event listener while preInstanciateSingletons [SPR-3659]","**[Benoit Heurter](https://jira.spring.io/secure/ViewProfile.jspa?name=benoit.heurter)** opened **[SPR-3659](https://jira.spring.io/browse/SPR-3659?redirect=false)** and commented  I have a standalone application.  I sub-class DefaultListableBeanFactory. Now, i wish to add a progressbar in the application's Splashscreen.  The ReaderEventListener on the Reader object allows to increment progressbar while creating beanDefinitions but i have no way to be notified of instanciations of singletons.  This step takes some seconds and so, the progressbar is fixed during this step.  Can you please add an event feature into the method preInstanciateSingletons ?   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-07-05T02:53:13Z","2012-06-19T09:37:41Z"
"","8321","BeanDefinitionParserDelegate : private method avoid to create a custom delegate for a custom namespace [SPR-3640]","**[Benoit Heurter](https://jira.spring.io/secure/ViewProfile.jspa?name=benoit.heurter)** opened **[SPR-3640](https://jira.spring.io/browse/SPR-3640?redirect=false)** and commented  Method buildTypedStringValueForMap of class BeanDefinitionParserDelegate is private.  Because of that, i cannot create a sub-class of BeanDefinitionParserDelegate with my slightly modified version of parseMapElement method.  It's not blocker as i duplicated whole te code but it seems easier if i could re-use original methods  Could you please change methods below to protected ?  buildTypedStringValueForMap buildTypedStringValue  Thank you in advance    ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-07-02T02:06:10Z","2012-06-19T03:50:34Z"
"","8822","staticAttributes should be declared STATIC in AbstractView [SPR-4144]","**[Benoit Delagarde](https://jira.spring.io/secure/ViewProfile.jspa?name=buggsbunny101)** opened **[SPR-4144](https://jira.spring.io/browse/SPR-4144?redirect=false)** and commented  When using AbstractPdfView, I discover that staticAttributes was not STATIC as described in the ""name"" and the documentation, leading to error when using this feature.   ---  **Affects:** 2.0.5","closed","status: declined,","spring-projects-issues","2007-11-21T01:42:51Z","2019-01-12T16:39:35Z"
"","8304","Mismatch beetween the API doc and the org.springframework.ejb.support.AbstractStatefulSessionBean [SPR-3622]","**[Benoit Delagarde](https://jira.spring.io/secure/ViewProfile.jspa?name=buggsbunny101)** opened **[SPR-3622](https://jira.spring.io/browse/SPR-3622?redirect=false)** and commented  There is a mismatch beetween the api documentation of org.springframework.ejb.support.AbstractStatefulSessionBean (and certainly AbstractStatelessSessionBean)  and the source/compiled class.  The class offer the following method : loadBeanFactory() unloadBeanFactory()  and extend the org.springframework.ejb.support.AbsatrctSessionBean  But the documentation say : public abstract class AbstractStatefulSessionBean extends Object... void 	ejbRemove() EJB lifecycle method, implemented to invoke onEjbRemote and unload the BeanFactory afterwards. protected  BeanFactory 	getBeanFactory() May be called after ejbCreate(). SessionContext 	getSessionContext() Convenience method for subclasses. protected  void 	loadBeanFactory() Load a Spring BeanFactory namespace. protected  void 	onEjbRemove() Subclasses must implement this method to do any initialization they would otherwise have done in an ejbRemove() method. void 	setBeanFactoryLocator(BeanFactoryLocator beanFactoryLocator) Set the BeanFactoryLocator to use for this EJB. void 	setBeanFactoryLocatorKey(String factoryKey) Set the bean factory locator key. void 	setSessionContext(SessionContext sessionContext) Set the session context. protected  void 	unloadBeanFactory() Unload the Spring BeanFactory instance.  This look like the method have been grouped in the same class!  ---  **Affects:** 2.0.5  **Issue Links:** - #8281 AbstractStatelessSessionBean does not show correct base class in 2.0.5 javadoc","closed","in: core,","spring-projects-issues","2007-06-26T02:45:48Z","2019-01-11T18:34:22Z"
"","7954","New Java 6 ServiceLoader support in the springframework core [SPR-3269]","**[Ben Tels](https://jira.spring.io/secure/ViewProfile.jspa?name=bentels)** opened **[SPR-3269](https://jira.spring.io/browse/SPR-3269?redirect=false)** and commented  L.S.  The Java SE 6 platform introduces the concept of a ServiceLoader, to replace the class.forName() construct. I think it would be useful to have a FactoryBean in the Spring Framework that would make it possible to inject services defined in a loader configuration file transparently, so clients don't have to know the details of the ServiceLoader. Something like this perhaps:  public class ServiceLoaderProxyFactory implements FactoryBean {      private Class serviceType;     private List serviceList;          public synchronized Object getObject() throws Exception {     	if (serviceList == null) {     		loadServices();     	}     	return serviceList;     }          @SuppressWarnings(""unchecked"")     private void loadServices() {     	serviceList = new ArrayList();     	ServiceLoader loader = ServiceLoader.load(serviceType);     	for (Object service : loader) {     		serviceList.add(service);     	}     }          public Class getObjectType() {     	// TODO Auto-generated method stub     	return List.class;     }          public boolean isSingleton() {     	// TODO Auto-generated method stub     	return true;     }          public void setServiceType(final Class serviceType) {     	this.serviceType = serviceType;     }  }  Which could then obviously be used like this:  \     [The interface being implemented by the services]     Thanks!  BenTels   --- No further details from [SPR-3269](https://jira.spring.io/browse/SPR-3269?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-03-15T23:11:06Z","2012-06-19T03:50:17Z"
"","8019","Update lib/readme.txt to show that axis is required for building Spring [SPR-3334]","**[Ben Speakmon](https://jira.spring.io/secure/ViewProfile.jspa?name=bens)** opened **[SPR-3334](https://jira.spring.io/browse/SPR-3334?redirect=false)** and commented  While the lib/readme.txt says that Axis is only required for running or compiling the sample apps, the remoting support requires the org.apache.axis.encoding.ser package. If it's not there, Spring will not compile.  I'm attaching a file that shows the actual build errors. I figure this is a documentation change instead of a build bug since the dependency on axis is probably intentional. :)   ---  **Affects:** 2.0.3  **Attachments:** - [build-errors.txt](https://jira.spring.io/secure/attachment/12516/build-errors.txt) (_1.99 kB_)","closed","in: core,","spring-projects-issues","2007-04-02T08:51:55Z","2012-06-19T03:50:53Z"
"","8436","Fire Lifecycle callbacks respecting Ordered interface [SPR-3755]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-3755](https://jira.spring.io/browse/SPR-3755?redirect=false)** and commented  Some active components (ie, those that are started/stopped) have strict Lifecycle ordering requirements with respect to other components.  For example, a JMS message listener container should be started **after** any components used by the listener are started (otherwise we may receive messages from the container before these dependent components are started).  For example client transports used by the service will need to be started before the server is started. The shutdown order should be reversed so the input to the server is shutdown before the client transports are stopped (so any in flight messages can be flushed out before shutdown).  The only way to achieve this at the moment is to introduce a custom lifecycle interface (and propagate start/stop manually). Ideally we'd use the Ordered mix-in interface with Lifecycle to provide richer control over inter-component ordering (which should be reversed upon shutdown).  This is related to #7014  ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-08-10T00:32:15Z","2019-01-11T19:33:12Z"
"","8051","HibernateTemplate doesn't work with Transactions externally managed behind hibernates getCurrentSession() [SPR-3367]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-3367](https://jira.spring.io/browse/SPR-3367?redirect=false)** and commented  HibernateTemplate cannot be used standalone with external transaction management. If we have a custom transaction manager (that doesn't plug into Springs transaction API) but want to use HibernateTemplate, then it will open/close a new Session for each operation.  Perhaps the answer is ""don't use HibernateTemplate"". However its hard to enforce this and the consequences are dangerous and can be subtle. Additionally, its natural to want to use the Spring *Template APIs and the exception translation does add benefit. Perhaps a stronger javadoc indicating if you are not using a Spring TransactionManager then the template will create a new session for each operation?)  Ideally can HibernateTemplate fallback to using factory.getCurrentSession() before it creates a new session? If not possible by default could it be a property on the template?  Our custom transaction manager integrates with hibernate by using the getCurrentSession() hook - however this is ignored by Spring.  A workaround may be for us to decorate the SessionFactory such that calls to openSession() return the one in the transaction (and again swallow calls to close on the session) - ie, we would do the opposite of the TransactionAwareInvocationHandler in AbstractSessionFactoryBean, however this is ugly and its not clear if this would work at all.  TestCase demostrating problem below:  public class HibernateTemplateGetCurrentSessionTest extends TestCase { static { try { Class.forName( jdbcDriver.class.getName() ); } catch( ClassNotFoundException e ) { throw new RuntimeException( e ); } }  public void testHibernateTemplateWithExternallyManagedTransaction() throws Exception { SessionFactory factory = createTestSessionFactory();      HibernateTemplate hibernateTemplate = new HibernateTemplate( factory );          // We manage the transaction ourselves for this test...     Transaction transaction = factory.getCurrentSession().getTransaction();          // START transaction scope     {       transaction.begin();            hibernateTemplate.save( new Item( 1 ) );            // ISSUE: the template closed the session, so the insert stuck...            transaction.rollback();     }      // END          // transaction was rolledback so this should be empty...     int count = new JdbcTemplate( testDataSource() ).queryForInt( ""SELECT COUNT(*) FROM ITEMS"" );     assertEquals( 0, count );  }  private static DataSource testDataSource() { return new DriverManagerDataSource( ""jdbc:hsqldb:res:scratch/testdb1"" ); }  private static SessionFactory createTestSessionFactory() { Configuration cfg = new Configuration(); Properties properties = new Properties(); properties.setProperty( Environment.DIALECT, HSQLDialect.class.getName() ); properties.setProperty( Environment.CURRENT_SESSION_CONTEXT_CLASS, ""thread"" ); properties.setProperty( Environment.CONNECTION_PROVIDER, TestProvider.class.getName() ); cfg.setProperties( properties ); cfg.addInputStream( HibernateTemplateGetCurrentSessionTest.class.getResourceAsStream( ""hibernate.xml"" ) );      return cfg.buildSessionFactory();  }  public static class TestProvider implements ConnectionProvider { public void close() throws HibernateException { }      public void closeConnection( Connection conn_ ) throws SQLException     {       conn_.close();     }          public void configure( Properties props_ ) throws HibernateException     {     }          public Connection getConnection() throws SQLException     {       return testDataSource().getConnection();     }          public boolean supportsAggressiveRelease()     {       return false;     }  } }  [testdb1.script - DB Schema]  CREATE SCHEMA PUBLIC AUTHORIZATION DBA CREATE USER SA PASSWORD """" GRANT DBA TO SA CREATE MEMORY TABLE ITEMS (id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1), value INTEGER)  [Item]  public class Item { private int _id, _value;  public Item() { }  public Item( int value_ ) { setValue( value_ ); }  public int getId() { return _id; }  public void setId( int id_ ) { _id = id_; }  public int getValue() { return _value; }  public void setValue( int value_ ) { _value = value_; }  public String toString() { return _id + "" (value="" + _value + "")""; } }  [hibernate.xml]  \ \ \ \ \ \ \ \  ---  **Affects:** 2.0.4  **Issue Links:** - #9708 HibernateTemplate does not consistently detect pre-bound Session when using a custom SessionFactory proxy","closed","type: enhancement,","spring-projects-issues","2007-04-12T03:12:31Z","2019-01-11T18:15:46Z"
"","8000","Add an extension point to process bean definitions - BeanDefinitionPostProcessor  [SPR-3315]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-3315](https://jira.spring.io/browse/SPR-3315?redirect=false)** and commented  Often its desirable to modify a bean definition, for example detecting annotations and updating the definition.  This can almost be done using a BeanFactoryPostProcessor and the getBeanDefintionNames() and getBeanDefintion(String) API on the application context, however this doesn't handle inner beans.  A BeanDefinitionVisitor could be used but this is very inefficent if multiple of these are involved.  Could a BeanDefinitionPostProcessor be added? It would be invoked during the bean creation lifecycle with the merged bean definition, following a similar pattern to the other BeanPostProcessors (ie, auto-detection in container etc).  // applied to **all** bean definitions before creation (including inner beans) public interface BeanDefinitionPostProcessor { public BeanDefinition postProcessBeanDefinition( BeanDefinition definition, .... ) }  Some other interesting context to pass into the callback would be the bean definition registry in which the definition is contained? A flag indicating if the definition is for an inner bean or not?  An example where this could be used is in #7998. Alternativly the new `@Required` annotation could be implemented as one of these? Or for cases where the context given to the callbacks in InstantiationAwareBeanPostProcessor don't suffice.  ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-28T05:04:06Z","2019-01-11T18:14:29Z"
"","7998","Add @annotation to name constructor arguments allowing names to be placed in config [SPR-3313]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-3313](https://jira.spring.io/browse/SPR-3313?redirect=false)** and commented  Constructor injection is desirable for imutability but the Spring config is very much tied to implementation (ordering of args).  We could solve this problem using a `@Property`("".."") annotation to decorate a constructor with the names of the ctor paramaters? (could locate param names from CGLIB but only if debug symbols stored in class).  For example:  public class Person { public Person( `@Property`(""age"") int age, `@Property`(""name"") String name ) { ... } }  Then the config could look same as the if we had used setter injection.  \ \ \ \  This could be achieved using a BeanFactoryPostProcessor to visit every bean definition and move properties from the setter map to the constructor map respecting the order the annotations are definied in?  Alternativly we could add an attribute to constructor-arg  \ \ \ \  ---  **Issue Links:** - #6580 Attach tooling metadata to constructor arg definitions (_**""depends on""**_) - #6769 Attach Source Metadata to Constructor Args  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/53333c3ed06e465a55592a0f351ffab40110e5b3  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2007-03-28T01:33:36Z","2019-01-11T18:14:15Z"
"","7997","Extension point for custom TypeConverter strategy to avoid need to use PropertyEditors (and their associated overhead) [SPR-3312]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-3312](https://jira.spring.io/browse/SPR-3312?redirect=false)** and commented  PropertyEditors are stateful and appear to be copied for each bean creation. If we'd like to plugin a different strategy, for eaxmple using an Adapter mechanism based on Eclipses Adapter Service then its not easy to plugin (only way I can see is to patch TypeConverterDelegate!).  For example, we have an Adapter API  public interface Adapter { public B adapt( A toAdapt ); }  And a registry to locate an adapter for a particular target/source pair (closest adapter to the source wins).  By patching the TypeConverterDelegate we avoid the need to wrap our adapter mechanism with a PropertyEditor for each adapter (and hence avoid overhead of copying for each bean creation) however its awkward to have to patch. Could an extension point be provided to simply set this TypeConverter strategy (ie, API on the BeanFactory? or via META-INF extension point?)   ---  **Affects:** 2.0.3  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-03-28T01:26:31Z","2012-06-19T03:50:21Z"
"","7996","Provide listener for TransactionSynchronizationManager [SPR-3311]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-3311](https://jira.spring.io/browse/SPR-3311?redirect=false)** and commented  To implement a custom local transaction manager we'd like to listen to what Spring is enlisting in the transaction. We don't use a distributed transaction manager or 2PC but instead use a local transaction manager that orders items in 'best-efforts' order and does single-phase commit.  If we could listen to the TransactionSynchronizationManager we could reuse all of Springs current transaction support/integration to handle transaction resource management (using the Spring strategy of binding resources to the thread-local, ie in DataSourceUtils).  In our implementation when the listeners are fired we update our list of transaction items so we can track the order in which items need to be committed (we commit the initiating transaction item last, typically this is the messaging resource so in the event of failure the message is rolled back and replayed - a limitation of this strategy is potential duplicate messages but no lost messages, however it is much simpler than using 2PC and distributed transaction manager and avoids the management overhead).  An additional complexity is the implementation of Savepoints; we take a snapshot of the synchronizations and resources bound to the transaction when the savepoint is created and restore this state when we rollback to a savepoint (we rollback any resources added after the savepoint was created). If we could listen to the TransactionSynchronizationManager we could achieve this by tracking any new synchronizations/resources added after a savepoint was created and then remove them upon rollback of the savepoint.  For example:  public interface TransactionSynchronizationManagerListener { public void resourceBound( Object key, Object resource );      public void resourceUnbound( Object key, Object resource );          public void synchronizationRegistered( TransactionSynchronization synchronization );          public void synchronizationUnregistered( TransactionSynchronization synchronization );  }  With API to register a listener for the current thread (and clear).  TransactionSynchronizationManager#setListener( TransactionSynchronizationManagerListener listener )  To handle the savepoint issue (i.e., shrink list of synchronizations to the state they were before the savepoint) an API to selectively remove synchronizations would be ideal:  TransactionSynchronizationManager#unregisterSynchronization( TransactionSynchronization synchronization )  ---  **Issue Links:** - #9710 Add extension to TransactionSynchronizationManager to allow custom resolution of unbound transaction resources to allow ""lazy-enlistment"" TransactionManagers  13 votes, 19 watchers","open","has: votes-jira,","spring-projects-issues","2007-03-28T01:14:42Z","2019-01-11T18:14:17Z"
"","8198","Enhance BeanPropertyRowMapper to also map inherited fields [SPR-3515]","**[Ben Barth](https://jira.spring.io/secure/ViewProfile.jspa?name=bbarth76)** opened **[SPR-3515](https://jira.spring.io/browse/SPR-3515?redirect=false)** and commented  Currently, BeanPropertyRowMapper does not map any fields that are inherited from super classes, only those declared by the class being mapped.  By adding a method to the ReflectionUtils, the BeanPropertyRowMapper should be able to use this method to map those fields that are inherited.  Please look at the relevant forum thread: http://forum.springframework.org/showthread.php?t=39056   ---  **Affects:** 2.1 M1  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-05-23T06:03:25Z","2012-06-19T09:37:22Z"
"","8127","AbstractXSLTView contentType ignored [SPR-3444]","**[Bart Laeremans](https://jira.spring.io/secure/ViewProfile.jspa?name=visioner)** opened **[SPR-3444](https://jira.spring.io/browse/SPR-3444?redirect=false)** and commented  We've just upgraded our application to spring 2.0.4 and found the following bug. We've subclassed AbstractXSLTView to process xml-files and we set the contentType from our configuration-file. This contentType is ignored because we use the stylesheetLocation as well.  Looking at the source-file it seems that when using the stylesheetLocation the contentType is always set to ""text/xml; charset=ISO-8859-1"".  public static final String XML_CONTENT_TYPE = ""text/xml; charset=ISO-8859-1"";  if (getStylesheetLocation() != null) { setContentType(DEFAULT_CONTENT_TYPE); }  It is possible that this is the intended behaviour, but it seems incorrect.   ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-05-02T17:35:31Z","2012-06-19T03:51:02Z"
"","8119","Provide ability to trigger Lifecycle.start/stop contexts created by AbstractSpringContextTests [SPR-3436]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-3436](https://jira.spring.io/browse/SPR-3436?redirect=false)** and commented  Probably since Lifecycle newer, the test framework does not invoke start on the context after it invokes refresh.   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-05-01T06:00:31Z","2007-05-01T19:09:27Z"
"","8117","PersistenceAnnotationBeanPostProcessor fails to find EMFBs [SPR-3434]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-3434](https://jira.spring.io/browse/SPR-3434?redirect=false)** and commented  The changes from 2.0.3 to 2.0.4 has cause some side effects. In 2.0.3 the PABPP would use beanFactory.getBean(..) to obtain the EMFs. In 2.0.4 it first beanFactory.isTypeMatch(..)  When the EMF has not yet been created in the context, AbstractEntityMangagerFactoryBean.getObjectType will return EntityManagerFactory.class, but PABPP compares the class against EntityManagerFactoryInfo.class. Hence due the abitrary ordering of bean creation most of my EMFs fail to be discovered by the PABPP.  PABPP.findNamedEntityManagerFactory(..) returns EntityManagerFactory (not EMFInfo), so why does it check for the EMFInfo.class?  I cannot simply have PABPP depend on the LCEMFBs because it defined in a generic config file, where the LCEMFBs are defined in component specific config files.  ---  **Affects:** 2.0.4  **Issue Links:** - #8054 PersistenceAnnotationBeanPostProcessor fails to match unitName of lazy loaded EMFs in some cases (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2007-05-01T02:19:21Z","2019-01-13T22:43:23Z"
"","8300","Spring macros don't work when VelocityConfigurer is based on VelocityEngine bean [SPR-3618]","**[Barney Boisvert](https://jira.spring.io/secure/ViewProfile.jspa?name=barneyb)** opened **[SPR-3618](https://jira.spring.io/browse/SPR-3618?redirect=false)** and commented  Take these beans:           	                    	     	...       You'll see the the Spring helper macros work without issue.  Now you change the VelocityConfigurer to be backed by an VelocityEngine:           	     	     		     			...     		     	                    	                    	     	...       With this configuration the Spring helper macros aren't available in Velocity templates.  After much testing, the switch from directly configuring the VelocityConfigurer to having it backed by a VelocityEngine seems to be the culprit.  Changing that one line my my bean config file forces the issue.  If the parts that I've replaced with ellipses are relevant (I don't think they are), I'd be happy to provide them.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-06-25T06:07:28Z","2007-06-27T01:20:11Z"
"","8798","ResourceUtils does not correctly resolve paths containing ""+"" [SPR-4119]","**[Baptiste MATHUS](https://jira.spring.io/secure/ViewProfile.jspa?name=batmat)** opened **[SPR-4119](https://jira.spring.io/browse/SPR-4119?redirect=false)** and commented  Hi, I know the javadoc of this class says it's mainly for internal use, but I'll try to point out what I think is the bug anyway :-). I didn't dig into the code yet, but I think this behaviour is between ResourceUtils, ClassPathResource and PathMatchingResourcePatternResolver.  So : in production, we name our directories something like that : * /foo/bar/n-1 * /foo/bar/n * /foo/bar/n+1  We use ""classpath:myfile.txt"" syntax with ResourceUtils. But the thing is : with .../n+1, when ResourceUtils resolves the path, it replaces the + with a space as if it was an URL. I feel it's not very consistent because when Spring does not find the file path it is asked to resolve, it throws a FileNotFoundException. However, when Spring correctly resolves the file containing a + in its path, the returned File object isn't usable. exists() returns false...  This was tested against the latest 2.0.x release and on the 2.5.x milestone. I will attach the corresponding Eclipse project containing the TestCase showing this behaviour : as said above, myfile.txt seems to be resolved since no FileNotFoundException is thrown, but then exists() returns false anyway.  HTH. Thanks a lot for your great jobs!   ---  **Affects:** 2.0.7, 2.5 RC2  **Attachments:** - [Testn+1.jar](https://jira.spring.io/secure/attachment/13121/Testn%2B1.jar) (_441.23 kB_)","closed","in: core,","spring-projects-issues","2007-11-17T23:51:22Z","2012-06-19T03:46:54Z"
"","7995","form:form ignores htmlEscape for action attribute [SPR-3310]","**[B McElwee](https://jira.spring.io/secure/ViewProfile.jspa?name=bmcelwee)** opened **[SPR-3310](https://jira.spring.io/browse/SPR-3310?redirect=false)** and commented  In the form:form tag: the action value is never HTML-escaped, even if the htmlEscape attribute is set to true. Note that other attributes such as method are escaped correctly.  The bug is in org.springframework.web.servlet.tags.form.FormTag.resolveAction(). It calls ObjectUtils.getDisplayString(), whcih ignores the HTML escape setting. It should instead call this.getDisplayString().   ---  **Affects:** 2.0.3","closed","type: bug,","spring-projects-issues","2007-03-27T11:30:07Z","2012-06-19T03:50:23Z"
"","8729","Spring  tag does not bind to property if the property setter uses method chaining [SPR-4050]","**[Ayub Malik](https://jira.spring.io/secure/ViewProfile.jspa?name=ayubmalik)** opened **[SPR-4050](https://jira.spring.io/browse/SPR-4050?redirect=false)** and commented  The  tag does not bind correctly to the appropriate JavaBean property when the setter method of the said bean uses method chaining, i.e. when the setXXX property does not have a ""void"" return type. Heres what I did to create the problem:  My JSP has a fragment like this    \ Search for group named: \ \ \ \  The command class as specified in my controller class (inherits from SimpleFormController) is a POJO named GroupTest and is defined as:  public class GroupTest { private String name = null;      public GroupTest() { }          public String getName() {         return name;     }          public void setName(String name) {         this.name = name;     }          @Override     public String toString() {         return ""GroupTest name: "" + this.name;     }  }  When I submit the form with the above POJO command object, the submit works as expected and the ""name"" property has the correct value.  However if I change the definition of the setName property in class GroupTest to the following, then when I submit the form, the name property is not bound and has a null value. I have recreated this problem in Spring versions 2.0.6 and 2.0.7.      public GroupTest setName(String name) {         this.name = name;         return this;     }  Ayub.   ---  **Affects:** 2.0.6, 2.0.7","closed","status: declined,","spring-projects-issues","2007-11-06T02:56:14Z","2019-01-12T16:39:41Z"
"","8549","Autodetect multipartResolver beans by type and not just by name [SPR-3869]","**[Axel Fontaine](https://jira.spring.io/secure/ViewProfile.jspa?name=axelfont)** opened **[SPR-3869](https://jira.spring.io/browse/SPR-3869?redirect=false)** and commented  ViewResolver beans can have any name, or even no name at all and still be found.  This has been working great. However, for MultipartResolver, DispatcherServlet absolutely wants to find a bean with the name 'multipartResolver'.  So here is the improvement request: use the same technique for looking up MultipartResolver as is used to look up ViewResolver, so that the bean name can be freely chosen or even omitted.  Many thanks, Axel  P.S.: You should check your Jira config: it is currently not possible to have a Sun JVM 1.6 or a Tomcat 6.0 ...   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-09-12T23:30:42Z","2012-06-13T07:52:26Z"
"","8108","AbstractInterruptibleBatchPreparedStatementSetter triggers OutOfMemoryError in JdbcTemplate.batchUpdate [SPR-3425]","**[Asgeir S. Nilsen](https://jira.spring.io/secure/ViewProfile.jspa?name=asgeirn)** opened **[SPR-3425](https://jira.spring.io/browse/SPR-3425?redirect=false)** and commented  The AbstractInterruptibleBatchPreparedStatementSetter class includes an implementation of org.springframework.jdbc.core.BatchPreparedStatementSetter.getBatchSize() which returns Integer.MAX_VALUE.  This triggers the following error: java.lang.OutOfMemoryError: Requested array size exceeds VM limit at org.springframework.jdbc.core.JdbcTemplate$4.doInPreparedStatement(JdbcTemplate.java:831) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:536) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:564) at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:811)  This is due to the way batchUpdate() gathers the result of the query, with the following line: int rowsAffected[] = new int[batchSize];  To work around this, I had to override getBatchSize() to return a ""large, but small"" value.   ---  **Affects:** 2.0.4","closed","type: bug,","spring-projects-issues","2007-04-27T01:37:28Z","2012-06-19T03:50:42Z"
"","8389","Condense exception messages accumulated through recursion [SPR-3708]","**[Antranig Basman](https://jira.spring.io/secure/ViewProfile.jspa?name=bosmon)** opened **[SPR-3708](https://jira.spring.io/browse/SPR-3708?redirect=false)** and commented  Spring currently generates exception traces which have text whose size will grow with the square of the bean fetch depth at which they occur - that is, since the ""cause"" exception message is printed out in full each time, each message includes the text at the next stack level which is a duplicate, and can become very hard to read. For example here is a message occuring at fetch depth 10:  ``` org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'TLABPostProcessorLoader' defined in class path resource [conf/rsf-config.xml]: Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopeAlterationWrapperProxy' defined in class path resource [conf/rsf-config.xml]: Cannot create inner bean 'RSACBridgeProxy$child#9ffeb5' of type [uk.org.ponder.rsac.RSACBridgeProxy] while setting bean property 'value'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'RSACBridgeProxy$child#9ffeb5' defined in class path resource [conf/rsf-config.xml]: Cannot resolve reference to bean 'RSACBeanLocator' while setting bean property 'RSACBeanLocator'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'RSACBeanLocator' defined in class path resource [conf/rsf-config.xml]: Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'componentProcessorContributorParent$child' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFFixer' while setting bean property 'valueRef'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFFixer' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFRSFExecutor' while setting bean property 'executor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFRSFExecutor' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFExternalContext' while setting bean property 'externalContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFExternalContext' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFParameterMap' while setting bean property 'parameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFParameterMapInterpreter' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'requestMap' while setting bean property 'requestParameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'earlyRequestParser' defined in class path resource [conf/rsf-requestscope-config.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException Caused by:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopeAlterationWrapperProxy' defined in class path resource [conf/rsf-config.xml]: Cannot create inner bean 'RSACBridgeProxy$child#9ffeb5' of type [uk.org.ponder.rsac.RSACBridgeProxy] while setting bean property 'value'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'RSACBridgeProxy$child#9ffeb5' defined in class path resource [conf/rsf-config.xml]: Cannot resolve reference to bean 'RSACBeanLocator' while setting bean property 'RSACBeanLocator'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'RSACBeanLocator' defined in class path resource [conf/rsf-config.xml]: Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'componentProcessorContributorParent$child' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFFixer' while setting bean property 'valueRef'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFFixer' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFRSFExecutor' while setting bean property 'executor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFRSFExecutor' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFExternalContext' while setting bean property 'externalContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFExternalContext' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFParameterMap' while setting bean property 'parameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFParameterMapInterpreter' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'requestMap' while setting bean property 'requestParameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'earlyRequestParser' defined in class path resource [conf/rsf-requestscope-config.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException Caused by:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'RSACBridgeProxy$child#9ffeb5' defined in class path resource [conf/rsf-config.xml]: Cannot resolve reference to bean 'RSACBeanLocator' while setting bean property 'RSACBeanLocator'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'RSACBeanLocator' defined in class path resource [conf/rsf-config.xml]: Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'componentProcessorContributorParent$child' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFFixer' while setting bean property 'valueRef'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFFixer' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFRSFExecutor' while setting bean property 'executor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFRSFExecutor' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFExternalContext' while setting bean property 'externalContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFExternalContext' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFParameterMap' while setting bean property 'parameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFParameterMapInterpreter' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'requestMap' while setting bean property 'requestParameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'earlyRequestParser' defined in class path resource [conf/rsf-requestscope-config.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException Caused by:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'RSACBeanLocator' defined in class path resource [conf/rsf-config.xml]: Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'componentProcessorContributorParent$child' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFFixer' while setting bean property 'valueRef'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFFixer' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFRSFExecutor' while setting bean property 'executor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFRSFExecutor' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFExternalContext' while setting bean property 'externalContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFExternalContext' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFParameterMap' while setting bean property 'parameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFParameterMapInterpreter' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'requestMap' while setting bean property 'requestParameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'earlyRequestParser' defined in class path resource [conf/rsf-requestscope-config.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException Caused by:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'componentProcessorContributorParent$child' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFFixer' while setting bean property 'valueRef'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFFixer' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFRSFExecutor' while setting bean property 'executor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFRSFExecutor' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFExternalContext' while setting bean property 'externalContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFExternalContext' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFParameterMap' while setting bean property 'parameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFParameterMapInterpreter' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'requestMap' while setting bean property 'requestParameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'earlyRequestParser' defined in class path resource [conf/rsf-requestscope-config.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException Caused by:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFFixer' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFRSFExecutor' while setting bean property 'executor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFRSFExecutor' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFExternalContext' while setting bean property 'externalContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFExternalContext' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFParameterMap' while setting bean property 'parameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFParameterMapInterpreter' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'requestMap' while setting bean property 'requestParameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'earlyRequestParser' defined in class path resource [conf/rsf-requestscope-config.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException Caused by:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFRSFExecutor' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFExternalContext' while setting bean property 'externalContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFExternalContext' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFParameterMap' while setting bean property 'parameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFParameterMapInterpreter' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'requestMap' while setting bean property 'requestParameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'earlyRequestParser' defined in class path resource [conf/rsf-requestscope-config.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException Caused by:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFExternalContext' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'SWFParameterMap' while setting bean property 'parameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFParameterMapInterpreter' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'requestMap' while setting bean property 'requestParameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'earlyRequestParser' defined in class path resource [conf/rsf-requestscope-config.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException Caused by:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'SWFParameterMapInterpreter' defined in class path resource [conf/rsf-swf-requestContext.xml]: Cannot resolve reference to bean 'requestMap' while setting bean property 'requestParameterMap'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'earlyRequestParser' defined in class path resource [conf/rsf-requestscope-config.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException Caused by:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'earlyRequestParser' defined in class path resource [conf/rsf-requestscope-config.xml]: Invocation of init method failed; nested exception is java.lang.NullPointerException Caused by:  java.lang.NullPointerException I	at uk.org.ponder.rsf.servlet.ServletEarlyRequestParser.init(ServletEarlyRequestParser.java:40) ```  In general the useful material is i) the message accumulated at the LEAST derived stack frame, and ii) the trace generated at the MOST derived stack frame.  The following SVN link to ""UniversalRuntimeException"" shows a possible implementation strategy and usage style for an Exception which produces more condensed messages, with only a single Exception object for a stack. Some of this code is devoted to conversion and unwrapping of checked exceptions and so is not directly relevant to this use case.  https://saffron.caret.cam.ac.uk/svn/projects/PonderUtilCore/trunk/src/uk/org/ponder/util/UniversalRuntimeException.java  ---  **Affects:** 2.0.6  **Issue Links:** - #19175 OutOfMemoryError caused by nested UnsatisfiedDependencyExceptions - #12854 Overhaul core container error reporting  1 votes, 5 watchers","open","type: enhancement,","spring-projects-issues","2007-07-20T10:44:36Z","2020-03-17T23:25:53Z"
"","8241","NoSuchBeanDefinitionException when referencing bean from parent context with factory-bean (during requiresEagerInitForType) [SPR-3558]","**[Antranig Basman](https://jira.spring.io/secure/ViewProfile.jspa?name=bosmon)** opened **[SPR-3558](https://jira.spring.io/browse/SPR-3558?redirect=false)** and commented  Code in isFactoryBean (invoked via requiresEagerInitForType) makes the assumption that that the definition for a bean referenced using factory-bean lies within the current context  (code from AbstractBeanFactory.java, 2.0.5 Spring release, line 1291)      RootBeanDefinition bd = getMergedBeanDefinition(beanName, false);  The argument ""false"" implies that parent contexts will not be searched.  For example, this bean definition  \  where RSACBeanLocator lies in a parent context, causes a failure on context startup with the following trace:  org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'RSACBeanLocator' is defined at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:353) at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedBeanDefinition(AbstractBeanFactory.java:916) at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1291) at org.springframework.beans.factory.support.DefaultListableBeanFactory.requiresEagerInitForType(DefaultListableBeanFactory.java:231) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:173) at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(AbstractApplicationContext.java:786) at uk.org.ponder.springutil.TLABPostProcessor.setApplicationContext(TLABPostProcessor.java:48)  This bug introduced in 2.0.5 release, 2.0.4 was fine - possibly as a part of the resolution to issue [SJC-3](https://jira.spring.io/browse/SJC-3)    ---  **Affects:** 2.0.5  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2007-06-05T12:53:57Z","2019-01-11T19:08:51Z"
"","8565","PropertyPlaceholderConfigurer does  not load properties from rootContext [SPR-3885]","**[Antoni Alatalo](https://jira.spring.io/secure/ViewProfile.jspa?name=antoni.alatalo@iki.fi)** opened **[SPR-3885](https://jira.spring.io/browse/SPR-3885?redirect=false)** and commented  I have web application that runs inside EAR. Tehre is root context definition in the one jar in EAR: \ \ \ \/META-INF/common-context.xml\ \ \ \  There is defined org.springframework.beans.factory.config.PropertyPlaceholderConfigurer ion the common-context.xml: \ \ \ \classpath*:/META-INF/xxx-project.properties\ \ \ \  While loading root context and setting root context properties all is fine. For example there is jdbc place holder in the root context that is set correctly.  But in the web application same placeHolder does not work any more. There is reference to the root context in web app and it's found while loading beans and context. But in the web application own beans where i have placeholders they are not resolved.  The work around is to place again bean with definitions of properties file location: \ \ \ \classpath*:/META-INF/xxx-project.properties\ \ \ \  So exactly same bean exept name (propertyConfigurer2 vs propertyConfigurer in root context). this configuration works but is not right.   ---  **Affects:** 2.0.6","closed","in: core,","spring-projects-issues","2007-09-16T22:48:30Z","2019-01-12T16:39:49Z"
"","8564","ClassPathXmlApplicationContext doesn't clear tab and crlf signs [SPR-3884]","**[Antoni Alatalo](https://jira.spring.io/secure/ViewProfile.jspa?name=antoni.alatalo@iki.fi)** opened **[SPR-3884](https://jira.spring.io/browse/SPR-3884?redirect=false)** and commented  XmlBeanDefinitionReader does not load bean definitions from a file when value has \t or/and \n characters. In project i have parent bean definition like: \ \ \ \/META-INF/common-context.xml\ \/META-INF/xxx-dao-context-sessionfactory.xml\ \ \ \  When in Eclipse i format the code it looks like: \ \ \ \/META-INF/common-context.xml\ \ /META-INF/xxx-dao-context-sessionfactory.xml \ \ \ \  Eclipse adds some \t\t\t\n befor and after value of /META-INF/xxx-dao-context-sessionfactory.xml This occures exception: BeanDefinitionStoreException: IOException parsing XML document from class path r esource [ /META-INF/xxx-dao-context-sessionfa ctory.xml ]; nested exception is java.io.FileNotFoundException ...  While debugging I found that in first case (value /META-INF/common-context.xml) all goes fine. File is found but in case of formatted value of /META-INF/xxx-dao-context-sessionfactory.xml. File is not found. There are \t\n signs In value while debugging.  Work around is to clear xml by hand.   ---  **Affects:** 2.0.6, 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-16T21:44:12Z","2012-06-19T03:47:23Z"
"","8802","spring-tx OSGi manifest missing DynamicImport-Package: weblogic.transaction [SPR-4123]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4123](https://jira.spring.io/browse/SPR-4123?redirect=false)** and commented  The OSGi manifest for SpringTX is missing DynamicImport-Package: weblogic.transaction. I suspect there is an import missing for TopLink and others as well, but I'm not sure what they look like. I think these got lost in the move to bnd.   ---  **Affects:** 2.5 RC2","closed","type: bug,","spring-projects-issues","2007-11-18T19:24:22Z","2012-06-19T03:47:45Z"
"","8749","Spring silently fails when spring.handlers is unavailable [SPR-4071]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4071](https://jira.spring.io/browse/SPR-4071?redirect=false)** and commented  In Spring-DM we register namespace handlers for all the Spring bundles so that parsing works correctly in OSGi bundles. Unfortunately this approach does not work in webapps inside a web container that is an OSGi bundle. In that instance the CCL is for the webapp and although the web app imports the appropriate spring packages it is unable to load the handlers file using ClassLoader.getResourceAsStream(). Spring parsing then fails with no indication of why.  I think:  a) Not being able to find the core spring handlers should be a fatal error. b) We should try harder to find a useable version such as something like XmlBeanDefinitionReader.class.getClassLoader().getResourceAsStream() as a fallback.   ---  **Affects:** 2.5 RC1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-11-08T04:08:43Z","2008-03-16T00:52:26Z"
"","8725","javax.servlet.jsp imports should be optional [SPR-4046]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4046](https://jira.spring.io/browse/SPR-4046?redirect=false)** and commented  The following packages are not optional in the webmvc OSGi bundle.  The jsp ones should be optional at the very least IMO.  javax.servlet javax.servlet.http javax.servlet.jsp javax.servlet.jsp.jstl.fmt javax.servlet.jsp.tagext   ---  **Affects:** 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-11-04T21:51:54Z","2012-06-19T03:47:21Z"
"","8646","Publish dependency graph for Spring jars [SPR-3966]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-3966](https://jira.spring.io/browse/SPR-3966?redirect=false)** and commented  Having wrestled with maven, ivy, osgi and spring-osgi for a while now it strikes me that it would be immensely helpful if Spring published the dependency graph of jars. What I mean here is publishing some simple xml file for each jar that expresses the dependencies between jars (and possibly meta information related to jars (e.g. package information) Users could then use XSLT to translate these files into whatever build system was appropriate to them.  The reason I suggest this is that the packaging keeps changing and figuring out the dependencies is largely trial and error currently.   ---  **Affects:** 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-10-09T01:19:54Z","2012-06-19T09:36:22Z"
"","8355","Fatal error in ContextNamespaceHandler initialization when jars not present [SPR-3674]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-3674](https://jira.spring.io/browse/SPR-3674?redirect=false)** and commented  The Spring OSGi bundles fail for me with this error. It should not be fatal for the weaver jars to not be present. This is latest from CVS.  org.osgi.framework.BundleException: Exception in org.springframework.osgi.extend er.ContextLoaderListener.start() of bundle org.springframework.osgi.spring-osgi- extender. at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActiv ator(BundleContextImpl.java:1014) at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(Bund leContextImpl.java:970) at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(Bundl eHost.java:317) at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(Abstrac tBundle.java:256) at com.bea.backplane.launcher.Launcher.installAndStartBundle(Launcher.ja va:1104) at com.bea.backplane.launcher.Launcher.run(Launcher.java:515) at com.bea.backplane.launcher.Launcher.main(Launcher.java:111) Caused by: java.lang.IllegalStateException: Unable to create JDK 1.5 dependent p arser: org.springframework.context.weaving.LoadTimeWeaverBeanDefinitionParser at org.springframework.context.config.ContextNamespaceHandler.registerJa va5DependentParser(ContextNamespaceHandler.java:56) at org.springframework.context.config.ContextNamespaceHandler.init(Conte xtNamespaceHandler.java:41) at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver .initHandlerMappings(DefaultNamespaceHandlerResolver.java:123) at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver .\(DefaultNamespaceHandlerResolver.java:96) at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver .\(DefaultNamespaceHandlerResolver.java:82) at org.springframework.osgi.context.support.NamespacePlugins$Plugin.\(NamespacePlugins.java:151) at org.springframework.osgi.context.support.NamespacePlugins$Plugin.\(NamespacePlugins.java:139) at org.springframework.osgi.context.support.NamespacePlugins.addHandler( NamespacePlugins.java:66) at org.springframework.osgi.extender.ContextLoaderListener.addHandler(Co ntextLoaderListener.java:492) at org.springframework.osgi.extender.ContextLoaderListener.maybeAddNames paceHandlerFor(ContextLoaderListener.java:477) at org.springframework.osgi.extender.ContextLoaderListener.start(Context LoaderListener.java:177) at org.eclipse.osgi.framework.internal.core.BundleContextImpl$2.run(Bund leContextImpl.java:995) at java.security.AccessController.doPrivileged(Native Method) at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActiv ator(BundleContextImpl.java:989) ... 6 more Caused by: java.lang.ClassNotFoundException: org.springframework.context.weaving .LoadTimeWeaverBeanDefinitionParser at org.eclipse.core.runtime.internal.adaptor.ContextFinder.loadClass(Con textFinder.java:98) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.springframework.util.ClassUtils.forName(ClassUtils.java:203) at org.springframework.util.ClassUtils.forName(ClassUtils.java:173) at org.springframework.context.config.ContextNamespaceHandler.registerJa va5DependentParser(ContextNamespaceHandler.java:53) ... 19 more   ---  **Affects:** 2.1 M2","closed","in: core,","spring-projects-issues","2007-07-09T23:29:29Z","2012-06-19T03:50:19Z"
"","8302","ProxyFactory memory leak using cglib [SPR-3620]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-3620](https://jira.spring.io/browse/SPR-3620?redirect=false)** and commented  We are seeing a memory leak in ProxyFactory when using cglib. I will attach a picture of the references.  ---  **Affects:** 2.0.5  **Attachments:** - [cglib.patch](https://jira.spring.io/secure/attachment/12697/cglib.patch) (_7.25 kB_) - [cglib.patch](https://jira.spring.io/secure/attachment/12695/cglib.patch) (_6.18 kB_) - [snap_cglib.jpg](https://jira.spring.io/secure/attachment/12691/snap_cglib.jpg) (_190.08 kB_)  **Issue Links:** - [OSGI-161](https://jira.spring.io/browse/OSGI-161) Class memory leak (_**""is duplicated by""**_) - #12663 MemoryLeak in Cglib2AopProxy.ProxyCallbackFilter - #8684 Cglib2AopProxy weak reference causes perm space to fill up","closed","in: core,","spring-projects-issues","2007-06-25T19:33:14Z","2019-01-11T18:34:27Z"
"","8291","Need a way of pre-instantiating FactoryBean singleton instances [SPR-3608]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-3608](https://jira.spring.io/browse/SPR-3608?redirect=false)** and commented  Given a network of FactoryBeans, all of the dependent beans will be instantiated by preInstantiateSingletons() except for the root level of the tree. Calling getObject() in afterPropertiesSet() does not solve this because the BeanPostProcessors do not get run. Instead we need a way of marking a Factory as being ""eagerly"" initialized by preInstantiateSingletons.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2007-06-21T22:22:17Z","2012-06-19T03:50:51Z"
"","8165","mergedBeanDefinition cache not invalidated when bean definition is re-registered. [SPR-3482]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-3482](https://jira.spring.io/browse/SPR-3482?redirect=false)** and commented  This is a regression from 2.0.4  If I register a new bean definition for an existing name with a different type, DefaultListableBeanFactory.getBeanNamesForType() still returns the old type because it ends up returning the old cached definition from the AbstractFactoryBeans.mergedBeanDefinitions.   ---  **Affects:** 2.0.5","closed","in: core,","spring-projects-issues","2007-05-14T22:52:43Z","2012-06-19T03:50:08Z"
"","8152","BeanWrapperImpl should not insist on being able to see the underlying bean's class [SPR-3469]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-3469](https://jira.spring.io/browse/SPR-3469?redirect=false)** and commented  In Spring-OSGI its possible to create a bean through a proxied factory, i.e.  create -> MyFactoryInterface (Bundle1) - .... | bundle classloader boundary |... -> MyFactoryImpl (Bundle2)  The returned bean only has an interface that is visible in Bundle 1's classloader, the impl (in Bundle 2) is not visible. Thus when Spring wraps a BeanWrapperImpl around it the following occurs:  java.lang.NoClassDefFoundError: com/****************/DefaultStreamConfig at java.lang.Class.getDeclaredMethods0(Native Method) at java.lang.Class.privateGetDeclaredMethods(Class.java:2395) at java.lang.Class.getDeclaredMethods(Class.java:1763) at java.beans.Introspector$1.run(Introspector.java:1265) at java.security.AccessController.doPrivileged(Native Method) at java.beans.Introspector.getPublicDeclaredMethods(Introspector.java:12 63) at java.beans.Introspector.getTargetMethodInfo(Introspector.java:1129) at java.beans.Introspector.getBeanInfo(Introspector.java:387) at java.beans.Introspector.getBeanInfo(Introspector.java:159) at org.springframework.beans.CachedIntrospectionResults.\(CachedInt rospectionResults.java:244) at org.springframework.beans.CachedIntrospectionResults.forClass(CachedI ntrospectionResults.java:143) at org.springframework.beans.BeanWrapperImpl.setIntrospectionClass(BeanW rapperImpl.java:236) at org.springframework.beans.BeanWrapperImpl.setWrappedInstance(BeanWrap perImpl.java:194) at org.springframework.beans.BeanWrapperImpl.setWrappedInstance(BeanWrap perImpl.java:177) at org.springframework.beans.factory.support.ConstructorResolver.instant iateUsingFactoryMethod(ConstructorResolver.java:321) at org.springframework.beans.factory.support.AbstractAutowireCapableBean Factory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:75 8) at org.springframework.beans.factory.support.AbstractAutowireCapableBean Factory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:712) at org.springframework.beans.factory.support.AbstractAutowireCapableBean Factory.createBean(AbstractAutowireCapableBeanFactory.java:386) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getOb ject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistr y.getSingleton(DefaultSingletonBeanRegistry.java:144) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean (AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean (AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.DefaultListableBeanFactory. preInstantiateSingletons(DefaultListableBeanFactory.java:279) at org.springframework.context.support.AbstractApplicationContext.refres h(AbstractApplicationContext.java:360) at org.springframework.osgi.context.support.AbstractRefreshableOsgiBundl eApplicationContext.refresh(AbstractRefreshableOsgiBundleApplicationContext.java :171) at org.springframework.osgi.context.support.ServiceDependentBundleXmlApp licationContext.refresh(ServiceDependentBundleXmlApplicationContext.java:100) at org.springframework.osgi.extender.support.ApplicationContextCreator.r un(ApplicationContextCreator.java:161)  What really needs to happen is for Spring to discard all classes not visible from the current classloader and just work through the interface. I'm surprised this issue hasn't cropped up in AOP situations as well.   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-05-10T19:19:57Z","2012-06-19T03:50:34Z"
"","8116","Provide instance-property support for non-singleton FactoryBean's [SPR-3433]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-3433](https://jira.spring.io/browse/SPR-3433?redirect=false)** and commented  When using the factory pattern for non-singleton Spring objects its typical to implement FactoryBean. However, properties applied to the bean, apply to the factory and not to the object it is creating. When creating more than one object it would be nice to be able to customize the result using an ""instance-property"" tag. This would be especially useful in OSGi environments where factory and instance cross classloader boundaries.   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-04-30T21:34:09Z","2012-06-19T09:37:43Z"
"","8048","Provide API for removing bean definitions [SPR-3364]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-3364](https://jira.spring.io/browse/SPR-3364?redirect=false)** and commented  BeanDefinitionRegistry has no API for doing this, it would be useful if there were one.   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-04-11T23:48:51Z","2012-06-19T03:50:09Z"
"","7961","BeanPostProcessor should pass in ""&beanName"" for a FactoryBean [SPR-3276]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-3276](https://jira.spring.io/browse/SPR-3276?redirect=false)** and commented  BeanPostProcessor.postProcessAfterInitialization() is now called for a FactoryBean and its created objects, however the beanName that it uses is always the same. IMO it should use &beanName for the factory call and beanName for the actual created bean call.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-20T06:58:00Z","2007-05-23T19:25:38Z"
"","8106","Interceptor list merge in SimpleUrlHandlerMapping from parent bean  [SPR-3423]","**[Andrzej Wisłowski](https://jira.spring.io/secure/ViewProfile.jspa?name=andrzejw)** opened **[SPR-3423](https://jira.spring.io/browse/SPR-3423?redirect=false)** and commented  AbstractHandlerMapping have array if interceptors. If interceptors would be type of List than it would be possible to merge interceptors list  for url mapping from abstract parent bean. This enhancement would give much flexibility in ulr mapping.   ---  **Affects:** 2.0.4","closed","type: enhancement,","spring-projects-issues","2007-04-26T19:07:19Z","2012-06-19T09:37:39Z"
"","8214","ParameterizableViewController improvement by optional model parameter to expose spring managed beans to the view [SPR-3531]","**[Andrey Akselrod](https://jira.spring.io/secure/ViewProfile.jspa?name=chelya)** opened **[SPR-3531](https://jira.spring.io/browse/SPR-3531?redirect=false)** and commented  It would be a useful addition to allow to wire the model for ParameterizableViewController similar to the class below:  public class ParameterizableModelViewController extends ParameterizableViewController { private Map model;      public Map getModel()     {         return model;     }          public void setModel(Map model)     {         this.model = model;     }          protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception     {         return new ModelAndView(getViewName(), model);     }  }  One of the usage scenarios is to pass configuration beans to the view.   --- No further details from [SPR-3531](https://jira.spring.io/browse/SPR-3531?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-05-28T06:53:09Z","2012-06-19T09:37:35Z"
"","7900","Add JdbcOperations#queryForString method [SPR-3214]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-3214](https://jira.spring.io/browse/SPR-3214?redirect=false)** and commented  The JdbcOperations interface currently contains several convenient methods for obtaining a single value from an SQL query, for example queryForInt and queryForLong.  I'd like to suggest that an additional method be added called ""queryForString"", that takes the same types of parameters as the existing queryForXxx methods. After all, Strings are a very commonly used Java class and natively supported by the ResultSet interface.  This would be much more convenient than having to use a RowMapper and more type-safe than having to cast the result of a ""queryForObject"" operation.   ---  **Affects:** 1.2.8, 2.0.2  **Attachments:** - [JdbcOperations.patch](https://jira.spring.io/secure/attachment/12458/JdbcOperations.patch) (_2.62 kB_) - [JdbcTemplate.patch](https://jira.spring.io/secure/attachment/12459/JdbcTemplate.patch) (_476 bytes_)  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2007-02-27T09:28:28Z","2012-06-18T16:28:15Z"
"","8811","AutoPopulatingList not Serializable [SPR-4132]","**[Andrew Bethell](https://jira.spring.io/secure/ViewProfile.jspa?name=ambeth)** opened **[SPR-4132](https://jira.spring.io/browse/SPR-4132?redirect=false)** and commented  I guess it would be nice if AutoPopulatingList implemented Serializable (so I could use it with Spring Webflow)  Thanks!   ---  **Affects:** 2.0.7  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-11-19T21:49:51Z","2012-06-19T03:47:26Z"
"","8538","Support of ejb annotations @Entity(name="""") @Stateless @Stateful and  @TransactionAttributes out of the box [SPR-3858]","**[Andrew Bailey](https://jira.spring.io/secure/ViewProfile.jspa?name=hazlorealidad)** opened **[SPR-3858](https://jira.spring.io/browse/SPR-3858?redirect=false)** and commented  It would be great that an EJB aplication could be deployed to a spring container without change and reusing the ejb3 annotations where possible.  Would it be possible to support the ejb3 annotation `@TransactionAttribute` as well as `@Transactional` out of the box I think its a case of creating a class Ejb3TransactionAttributeSource that extends AnnotationTransactionAttributeSource and doing some aop but Im not sure how to create the interceptor for it,  also it would be good that `@Entity` , `@Stateless`  and `@Stateful` with and without the name attribute (name=""..."") have the same effect as `@Component` (or should that be `@Repository`) also out of the box (see example code below)  A new feature for RC1??  In seam they have another feature that I like, its the use of the same bean in multiple scopes: http://www.redhat.com/docs/manuals/jboss/jboss-eap-4.2/doc/seam/Seam_Reference_Guide/Seam_annotations-Annotations_for_component_definition.html `@Role`(name=""roleName"", scope=ScopeType.SESSION)  `@Roles`({ `@Role`(name=""user"", scope=ScopeType.CONVERSATION), `@Role`(name=""currentUser"", scope=ScopeType.SESSION) })  would that be practical to implement?  Here is my example that you are welcome to use either as code or in the documentation:    \       package com.hazlorealidad.spring; /** * `@author` Andy Bailey http://www.hazlorealidad.com   */   import java.util.HashSet;   import java.util.Map;   import java.util.Set;  import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition; import org.springframework.context.annotation.AnnotationBeanNameGenerator; import org.springframework.core.type.AnnotationMetadata;  public class Ejb3NameGenerator extends AnnotationBeanNameGenerator { private static final boolean debug=false; private static final Set\ annotations;      static      {     	annotations=new HashSet();     	annotations.add(""javax.persistence.Entity"");     	annotations.add(""javax.ejb.Stateful"");     	annotations.add(""javax.ejb.Stateless"");     }	     @Override protected String determineBeanNameFromAnnotation(     		AnnotatedBeanDefinition definition)     {     	String name=super.determineBeanNameFromAnnotation(definition);     	AnnotationMetadata meta = definition.getMetadata();     	Set types = meta.getAnnotationTypes();     	     	if (debug) System.out.println(""+++ Annotation Types ""+types);     	     	if (name==null) //maintain backward compatibility     	{     		for (String annotation:annotations)     		{     			//really a map of  however it could change				     			Map attrs = meta.getAnnotationAttributes(annotation);     			if (debug) System.out.println(""+++ Attrs ""+attrs);     			if (attrs!=null)     			{     				Object object=attrs.get(""name"");     				if (object!=null)     				{     					name=object.toString();     					//there never should be multiple annotations so exit loop on first     					break;     				}     			}     		}     	}     	if (debug) System.out.println(""** determineBeanNameFromAnnotation ""+definition+"" returning ""+name);     	return name;     }               //Not sure if this is necessary     @Override protected boolean isStereotypeWithNameValue(String annotationType)     {     	boolean result=super.isStereotypeWithNameValue(annotationType);     	if (!result)     	{     		result=annotations.contains(annotationType);     	}     	if (debug) System.out.println(""** isStereotypeWithNameValue ""+annotationType+"" returning ""+result);     	return result;		     }	  }   ---  **Affects:** 2.1 M3  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2007-09-10T07:59:58Z","2018-12-11T15:37:08Z"
"","8536","Jar incompatibility: Hibernate 3.2.5GA requires asm 1.5.3  and Spring 2.1M3 requires asm 2.2.3 [SPR-3856]","**[Andrew Bailey](https://jira.spring.io/secure/ViewProfile.jspa?name=hazlorealidad)** opened **[SPR-3856](https://jira.spring.io/browse/SPR-3856?redirect=false)** and commented  See http://opensource.atlassian.com/projects/hibernate/browse/HHH-2222  It was answered in the post http://forum.springframework.org/showthread.php?t=18124 However the solution provided doesnt work for me, also I dont see how it would work, the version in the dependencies in the hibernate pom and in the spring pom are different. Its not a problem due to including a jar by mistake.  I tried to solve the problem by trying to force hibernate to use the spring version of the asm jar:  Here are the steps I tried in the pom  \ \org.hibernate\ \hibernate\ \3.2.5.ga\    \ \ \asm\ \asm\ \ \ \asm\ \asm-attrs\ \                \      \ \              asm       asm-commons       2.2.3","closed","in: core,","spring-projects-issues","2007-09-09T15:39:28Z","2019-01-13T22:42:06Z"
"","8377","JSTL Taglib fmt.tld version 2.0 is corrupt [SPR-3696]","**[Andrew Adamson](https://jira.spring.io/secure/ViewProfile.jspa?name=abadamson)** opened **[SPR-3696](https://jira.spring.io/browse/SPR-3696?redirect=false)** and commented  In order to use JSTL in the new Websphere, the .tld files need to be dragged directly into WEB-INF.  Older versions(ver. 1.2) of fmt.tld work fine.  The newest version(ver. 2.0) of the file is found to be corrupt.   ---  **Affects:** 2.0.6","closed","","spring-projects-issues","2007-07-18T06:19:27Z","2019-01-11T18:34:59Z"
"","8827","AnnotationMethodHandlerAdapter exception [SPR-4149]","**[Andrei Tudose](https://jira.spring.io/secure/ViewProfile.jspa?name=andrei.tudose)** opened **[SPR-4149](https://jira.spring.io/browse/SPR-4149?redirect=false)** and commented  I have my DispatcherServlet application context  \  \                    	       \  and it works fine, but then I try to register a binder like in the Spring MVC docs by adding to DispatcherServlet application context the following bean                	     		     	       When I try to load /welcome.do I get  javax.servlet.ServletException: No adapter for handler [org.springframework.web.servlet.mvc.ParameterizableViewController@234265]: Does your handler implement a supported interface like Controller? org.springframework.web.servlet.DispatcherServlet.getHandlerAdapter(DispatcherServlet.java:1086) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:873) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:808) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:476) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:431) javax.servlet.http.HttpServlet.service(HttpServlet.java:690) javax.servlet.http.HttpServlet.service(HttpServlet.java:803)  My IndexBindingInitializer class looks like this  public class IndexBindingInitializer implements WebBindingInitializer {      private static Log log = LogFactory.getLog(IndexBindingInitializer.class);          public void initBinder(WebDataBinder binder, WebRequest request) {     	log.info(""binding"");     	SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"");     	dateFormat.setLenient(false);		     	binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));     	binder.registerCustomEditor(String.class, new StringTrimmerEditor(false));             }  }   ---  **Affects:** 2.5 final","closed","status: declined,","spring-projects-issues","2007-11-21T17:58:19Z","2019-01-12T16:39:34Z"
"","8629","ContextConfiguration annotation should accept not only classpath resources [SPR-3949]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-3949](https://jira.spring.io/browse/SPR-3949?redirect=false)** and commented  Now, by default, inside `@ContextConfiguration` a developer can specify only classpath resources, for other types of resources, one should write a custom ContextLoader. I think the default implementation should deal with all kinds of resources: classpath:, file:, classpath*:  There were two forum threads complaining about this feature: http://forum.springframework.org/showthread.php?t=44020 and http://forum.springframework.org/showthread.php?t=44093   ---  **Affects:** 2.1 M4","closed","type: enhancement,","spring-projects-issues","2007-09-30T23:04:12Z","2012-06-19T03:47:48Z"
"","8584","AspectJ: Methods receiving as parameter a generic Collection of custom objects are not intercepted [SPR-3904]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-3904](https://jira.spring.io/browse/SPR-3904?redirect=false)** and commented  Having an interface like: interface GenericIFace\ { public void save(B bean);      public void saveAll(Collection beans);  }  and a pointcut like: execution(* GenericIFace.save*(..)) - first method is intercepted, the second one isn't, except the case of execution(* GenericIFace+.save*(..)).   ---  **Affects:** 2.0.6, 2.1 M4  **Attachments:** - [aspectj.zip](https://jira.spring.io/secure/attachment/12925/aspectj.zip) (_1.48 kB_)  2 votes, 2 watchers","closed","in: core,","spring-projects-issues","2007-09-23T07:17:32Z","2019-01-11T21:10:52Z"
"","8395","and AnnotationAwareAspectJAutoProxyCreator usage don't produce the same result [SPR-3714]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-3714](https://jira.spring.io/browse/SPR-3714?redirect=false)** and commented  For the following test configuration, replacing AnnotationAwareAspectJAutoProxyCreator with  makes the test to pass:  applicationContext.xml  \                     	               	     		     			     			     			     			     		     	                                \  TestAnnotationAdvice.java  public class TestAnnotationAdvice extends AbstractDependencyInjectionSpringContextTests { // the aspect that will have around advice applied `@Aspect` public static class DogWatcher { protected boolean observed;          @Around(""this(com.nautil.main2.TestAnnotationAdvice$IDog) && execution(public * *(..)) && @annotation(annotation)"")         public Object observeWoof(ProceedingJoinPoint pjp, Collared annotation) throws Throwable         {             Object result = pjp.proceed();             observed = true;             return result;         }     }          // the target class     public static class Dog implements IDog     {         @Collared         @Transactional         public Boolean bark()         {             return Boolean.TRUE;         }     }          // the interface that the target implements     public static interface IDog     {         public Boolean bark();     }          @Retention(RetentionPolicy.RUNTIME)     @Target(ElementType.METHOD)     public static @interface Collared {     }          private IDog dog;     private DogWatcher watcher;          /**      * Tests that when also using @Transactional, the advice is also executed      */     public void testFiresWhenAlsoUsingTransactionalAnnotation()     {         dog.bark();         assertTrue(watcher.observed);     }          @Override     protected String[] getConfigLocations()     {         return new String[]         {             ""classpath:appC12.xml""         };     }          public void setDog(IDog dog)     {         this.dog = dog;     }          public void setWatcher(DogWatcher watcher)     {         this.watcher = watcher;     }  }   ---  **Affects:** 2.0.7","closed","in: core,","spring-projects-issues","2007-07-26T01:35:53Z","2019-01-12T16:39:57Z"
"","8356","PropertyPathFactoryBean.getObject() doesn't return null objects [SPR-3675]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-3675](https://jira.spring.io/browse/SPR-3675?redirect=false)** and commented  PropertyPathFactoryBean cannot return a null value, but in some cases can be useful. Here's one example: http://forum.springframework.org/showthread.php?t=24674  Simplest test possible which shows this behavior is:  public class Bbbean { private String foo = null;      public String getFoo() {     	return foo;     }  }                     	         ---  **Affects:** 2.0.7, 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-07-10T00:03:37Z","2012-06-19T03:50:34Z"
"","8239","Spring AOP doesn't process generics correctly [SPR-3556]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-3556](https://jira.spring.io/browse/SPR-3556?redirect=false)** and commented  I made two tests: - one with AspectJ support; - one with Spring's AspectJ support.  The tests involve two interfaces: Base\ and DerivedInterface\ extends Base\. A Before pointcut matching all methods from Base and DerivedInterface is defined: `@Before`(""execution(* example.Base+.*(..))"") In AspectJ a test creating an instance of a class implementing DerivedInterface: DerivedInterface\ obj = new DerivedString(); and then calling methods on both interfaces demonstrates advice being applied on both methods. The same test in Spring getting a bean instance from ApplicationContext like DerivedInterface\ bean = (DerivedInterface\) context.getBean(""myBean""); and calling methods on both interfaces, the advice is not applied to methods receiving as parameter the generic type \.  Methods like method(\) don't get the advice applied, but method2() have the advice applied.  ---  **Affects:** 2.0.5, 2.1 M3  **Attachments:** - [SpringAspectJ.zip](https://jira.spring.io/secure/attachment/12641/SpringAspectJ.zip) (_1.86 kB_)  **Issue Links:** - #8309 Spring AOP `@Aspect` pointcut ignores generic type params and matches to many join points  (_**""is depended on by""**_) - #8559 AspectJ pointcut expressions fail to match generically parameterized methods (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2007-06-05T06:26:33Z","2019-01-13T08:08:17Z"
"","8142","Doc: Using  namespace with different 'proxy-target-class' settings for two different objects makes usage of CGLIB proxy only [SPR-3459]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-3459](https://jira.spring.io/browse/SPR-3459?redirect=false)** and commented  Hi,  For the following configuration:  \  \ \           	666                    	666                                                     	                \  from console messages, no JDK proxying is applied, unless both 'proxy-target-class' settings are set to 'false'. Advices are applied on both classes, only that CGLIB proxying mechanisms is used for both.  This is the test class: public class AopDebugInterceptorTests2 extends AbstractDependencyInjectionSpringContextTests {      @Override     protected String[] getConfigLocations() {     	return new String[] {""conf/aop/applicationContext.xml""};     }          public void testAop() {     	AopMockBeanInterface bean = (AopMockBeanInterface) applicationContext.getBean(""mock"");     	AopMockBeanInterface2 bean2 = (AopMockBeanInterface2) applicationContext.getBean(""mock2"");     	System.out.println(""bean 1 property:"" + bean.displayProp());     	System.out.println(""bean 2 property:"" + bean2.displayProp());     }  }  This is one of the beans, identical with the second one (second bean implements AopMockBeanInterface2, which is identical with AopMockBeanInterface): public class AopMockBean implements AopMockBeanInterface { private String prop;      public String getProp() {     	return prop;     }          public void setProp(String prop) {     	this.prop = prop;     }          public String displayProp() {     	return ""1   "" + prop;     }  }  public interface AopMockBeanInterface { public String displayProp(); }  This is the interceptor: public class DebugInterceptor implements MethodInterceptor {      private static Logger log = Logger.getLogger(DebugInterceptor.class);          public Object invoke(MethodInvocation invocation) throws Throwable {     	log.debug(""1 Before: invocation=["" + invocation + ""]"");     	Method method = invocation.getMethod();     	log.debug(""1 getName "" + method.getName());     	log.debug(""1 getArguments "" + invocation.getArguments());          	Object rval = invocation.proceed();          	return rval;     }  }  Tested this configuration using spring-framework-2.0.5-20070506-82.zip jar files.  ---  **Affects:** 2.0.5  **Issue Links:** - #8346 Add support for mixed, fine-grained JDK- and CGLIB-based proxying (_**""is depended on by""**_)","closed","in: core,","spring-projects-issues","2007-05-06T23:39:35Z","2019-01-11T17:43:35Z"
"","8074","Bean nested properties generates exception at initialization time [SPR-3391]","**[Andrei Stefan](https://jira.spring.io/secure/ViewProfile.jspa?name=astefan)** opened **[SPR-3391](https://jira.spring.io/browse/SPR-3391?redirect=false)** and commented  Using this configuration: \ \ \1\ \ \  generates exception using spring.jar 2.0.4. The same error doesn't happen with 2.0.3 spring.jar file.  Exception is following: Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'parentMockBean' defined in class path resource [conf/applicationContext.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are: PropertyAccessException 1: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.lang.Integer] for property 'mockBean.prop4'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [java.lang.String] to required type [java.lang.Integer] for property 'prop4': no matching editors or conversion strategy found Caused by: org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessException details (1) are: PropertyAccessException 1: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.lang.Integer] for property 'mockBean.prop4'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [java.lang.String] to required type [java.lang.Integer] for property 'prop4': no matching editors or conversion strategy found Caused by: java.lang.IllegalArgumentException: Cannot convert value of type [java.lang.String] to required type [java.lang.Integer] for property 'prop4': no matching editors or conversion strategy found at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:227) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:138) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:815) at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:645) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:78) at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:59) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1100) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:835) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:423) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:144) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:279) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:360) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:91) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:75) at test.main.SimpleTest.main(SimpleTest.java:15)  ---  **Affects:** 2.0.4  **Issue Links:** - #8043 Error in BeanWrapperImpl.setPropertyValue for nested paths for primitive wrapper types such as integer (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2007-04-18T18:41:36Z","2019-01-12T16:51:38Z"
"","8826","Support using Spring beans from EJB3 [SPR-4148]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-4148](https://jira.spring.io/browse/SPR-4148?redirect=false)** and commented  I wondered about the best way on how to use Spring beans from within EJB3 beans. The support classes provided by Spring only cover 2.1 style EJBs. So I came across this description: http://twasink.net/blog/archives/2007/01/using_spring_wi.html  Would it be possible to integrate something like this into Spring core? Especially for cases where one is required to use EJBs but still want to leverage the simplicity of Spring-based POJOs this might be helpful.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-11-21T17:05:02Z","2012-06-19T03:47:30Z"
"","8375","Doc: Clarification of transaction management with Spring-JMS [SPR-3694]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-3694](https://jira.spring.io/browse/SPR-3694?redirect=false)** and commented  In chapter 19.2.5 is stated: ""Spring provides a JmsTransactionManager that manages transactions for a single JMS ConnectionFactory"" and ""JmsTemplate can also be used with the JtaTransactionManager and an XA-capable JMS ConnectionFactory for performing distributed transactions""  In chapter 19.4.5 is stated: ""To create the transaction manager, you'll want to create an instance of JmsTransactionManager and give it an XA transaction-capable connection factory.""  So there are two questions: - What about the XA-capability of the ConnectionFactory in conjunction with the JmsTransactionManager described in 19.2.5? - What about using JtaTransactionManager in the scenario described in 19.4.5?  Besides that, the second sentence of the second paragraph in 19.2.5 has one ""only"" to much: ""This is because the JMS API only has only one factory method to create a Session...""   ---  **Affects:** 2.0.6, 2.1 M2","closed","type: documentation,","spring-projects-issues","2007-07-17T22:34:11Z","2012-06-19T03:50:15Z"
"","8331","Reflection enhancement for injecting/ extracting parameters [SPR-3650]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-3650](https://jira.spring.io/browse/SPR-3650?redirect=false)** and commented  For a proposed Spring-Security feature ([SEC-25](https://jira.spring.io/browse/SEC-25)) I created interceptors for delegating to methods with an extended parameter list.  An example:  public interface Foo { void bar(String str); }  public interface FooExtended { void bar(SecurityContext ctx, String str); }  I now have a ArgumentInjectingProxyFactoryBean class which creates a proxy implementing Foo but delegates to a target implementing FooExtended. The additional parameter will be provided by a configured handler.  There is also a counterpart called ArgumentExtractingProxyFactoryBean which creates a proxy implementing FooExtended and delegates to a target implementing Foo. The additional parameter is passed to a configured handler to allow for its processing.  I used that implementation to shield business interfaces (Foo) from being affected by tunneling context information (e.g. SecurityContext) via EJB remote interfaces. The implementation is parameterizable and generic and not specific to security or EJB. So maybe that part could be integrated into the Spring core for other usecases as well.  Sources and test cases can be found under [SEC-25](https://jira.spring.io/browse/SEC-25) (currently newest version: Acegi-ejb_103.zip).   ---  **Affects:** 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-07-03T22:01:11Z","2012-06-19T09:37:30Z"
"","8231","Drop NestedCheckedException and NestedRuntimeException [SPR-3548]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-3548](https://jira.spring.io/browse/SPR-3548?redirect=false)** and commented  As Spring 2.1 does officially cease to support Java 1.3, I suggest dropping the two exception support classes. As they have been introduced to mirror Java 1.4 behavior in Java 1.3 they should be obsolete by now.  Regards, Andreas   ---  **Affects:** 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-06-03T17:20:28Z","2012-06-19T09:37:22Z"
"","8230","2.1 API link on website broken [SPR-3547]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-3547](https://jira.spring.io/browse/SPR-3547?redirect=false)** and commented  In the documentation section of the Spring website the link to the 2.1 API documentation (http://static.springframework.org/spring/docs/2.1.x/api/index.html) is broken.  Regards, Andreas   ---  **Affects:** 2.1 M2","closed","","spring-projects-issues","2007-06-03T17:13:16Z","2019-01-11T19:09:20Z"
"","8829","Regression spring:bind and Global Errors [SPR-4151]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4151](https://jira.spring.io/browse/SPR-4151?redirect=false)** and commented  I have finally found a regression of Spring 2.5 (coming from 2.0.7).  I formerly used  in order to get the global form errors with ${status.errorCodes} afterwards. With Spring 2.5, I get the following exception:  SEVERE: Invalid property 'command' of bean class [de.schildbach.mail.presentation.SendMailController$Command]: Bean property 'command' is not readable or has an invalid getter meth od: Does the return type of the getter match the parameter type of the setter? org.springframework.beans.NotReadablePropertyException: Invalid property 'command' of bean class [de.schildbach.mail.presentation.SendMailController$Command]: Bean property 'comman d' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:544) at org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:536) at org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:78) at org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:337) at org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:118) at org.springframework.web.servlet.tags.BindTag.doStartTagInternal(BindTag.java:117) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:77)  Before you point me form:errors-tag: This one is severely limited in its usability, and the fix has been postponed to sometime in the future. I need to get the errors (both global and field) manually and use JSTL fmt:message for i18n.  ---  **Affects:** 2.5 final  **Issue Links:** - #8701 Spring 2.5's  tag is not backwards compatible with 2.0.x  2 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2007-11-21T21:18:48Z","2019-01-11T16:05:52Z"
"","8715","creates invalid uppercase character: maxLength [SPR-4036]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4036](https://jira.spring.io/browse/SPR-4036?redirect=false)** and commented  Form taglib  creates:   According to the XHTML 1.0 Strict DTD, it's spelled ""maxlength"", not ""maxLength"".  http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd  As far as I can see, there are no uppercase letters at all in any element or attribute name.  Does this affect 2.5, too?   ---  **Affects:** 2.0.7","closed","in: web,","spring-projects-issues","2007-11-02T03:38:23Z","2019-01-11T16:24:08Z"
"","8614","RedirectView: make exposing of model parameters as request parameters optional [SPR-3934]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-3934](https://jira.spring.io/browse/SPR-3934?redirect=false)** and commented  From the Javadoc of the class: ""View that redirects to an absolute, context relative, or current request relative URL, exposing all model attributes as HTTP query parameters.""  That exposing should be switchable off, for example via a boolean bean property.  The reason is that there might be model attributes exposed by default, for example SWF exposes all Flow Scoped attributes and a flowExecutionContext attribute to the view model. This can be sensitive data that should not appear in URLs.  ---  **Affects:** 2.0.6  **Issue Links:** - #5995 Allow specifying which request attributes are included in RedirectView","closed","type: enhancement,","spring-projects-issues","2007-09-28T01:47:53Z","2019-01-11T21:10:10Z"
"","8228","allow Collection or Array indexes in rejectValue() calls [SPR-3545]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-3545](https://jira.spring.io/browse/SPR-3545?redirect=false)** and commented  I'm implementing a Validator that validates Collections or Arrays of Objects (not as sub-objects in an object graph, but as a a main object). I am missing a way to specify the index of values violating the validator, just like I would do with fields.  For example, I'm passing a String[2] array into a Validator that validates two passwords for equality (""repeat password"" usecase) and for other constraints like emptyness.  Now, there are errors that should be bound to [0] or [1] (missing input), then some should be bound to the Array itself with rejectValue(null, ""not_equal"")  However, rejectValue(""[0]"", ""missing"") does not work.   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-06-03T04:02:50Z","2012-06-19T09:37:26Z"
"","8226","form:checkbox bound to boolean should also work (like java.lang.Boolean) [SPR-3543]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-3543](https://jira.spring.io/browse/SPR-3543?redirect=false)** and commented  Currently, you can only bind a form:checkbox to a java.lang.Boolean, not a native boolean.  (see docs 13.9.4. ""checkbox tag"", approach one)  It would be nice if a native boolean would also work.  If this gets applied to Spring 2.1, can you also backport to 2.0.x?   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-06-02T06:29:27Z","2012-06-19T09:37:38Z"
"","8194","Override Properties from JNDI context [SPR-3511]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-3511](https://jira.spring.io/browse/SPR-3511?redirect=false)** and commented  I am not very happy about the way a context is being populated with objects from JNDI with JndiObjectFactoryBean currently. Even with the new schema-based configuration, the context XML is cluttered with JNDI lookup all over the place, which makes it both harder to read and harder to ""unit-test"".  I'd prefer to have something like the PropertyOverrideConfigurer, but instead of taking the values from a Properties object it uses a mapping (which in turn can be contained in properties of course) from JNDI keys to properties:  beanid.propertyname=java:/comp/env/myobject  One advantage of this approach is the ability to have sane default values in the context, and the context is fully functional with the default values, even if there is no JNDI available.  Optionally, an JNDI-equivalent to the PropertyPlaceholderConfigurer could also be created.   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-05-22T23:14:05Z","2012-06-13T09:18:30Z"
"","8153","Allow configuration of Exception that is thrown instead of RemoteAccessException [SPR-3470]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-3470](https://jira.spring.io/browse/SPR-3470?redirect=false)** and commented  We have our own ""RemoteAccessException"", which is independent of Spring.  Currently, we have to catch Springs RemoteAccessException on each backend invocation and wrap it in our own exception in order to keep ""Spring impact"" on our application small.  It would be great if Spring would allow for configuration of the exception type that is used to wrap RemoteExceptions in. This applies to EJB access and other remoting ""adapters"" as well.   ---  **Affects:** 2.0.5  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-05-10T20:32:47Z","2012-06-19T09:37:21Z"
"","7886","Provide easy way to look up session scoped bean by HTTPSession [SPR-3201]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-3201](https://jira.spring.io/browse/SPR-3201?redirect=false)** and commented  In HttpSessionListener.sessionDestroyed(HttpSessionEvent event), I'd like to get a session scoped bean that is associated to the event's session. By looking at Springs source code, I could find no easy way (convenience method) to do this. Session scoped beans seem to be tied to an HTTPRequest (why?) which is not available in a session listener.   ---  **Affects:** 2.0.2  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2007-02-24T07:07:51Z","2019-01-12T03:51:10Z"
"","8405","util:collections don't support merge because of missing parent/child attributes [SPR-3724]","**[Andreas Sahlbach](https://jira.spring.io/secure/ViewProfile.jspa?name=sahlbach)** opened **[SPR-3724](https://jira.spring.io/browse/SPR-3724?redirect=false)** and commented  The util:* collections have the attribute ""merge"" to merge the content of the child and the parent. But there is no attribute to define the child/parent relationship for a util: collection, therefore the merge attribute is completely useless. Or am I missing something here? Is it possible to define the child/parent relationship in a different way? Couldn't find documentation or forum entries about this, therefore I think this is a bug. :)   ---  **Affects:** 2.0.6","closed","in: core,","spring-projects-issues","2007-07-31T23:23:00Z","2019-01-12T16:39:55Z"
"","8159","Changing default InstantiationStrategy does not work for constructors [SPR-3476]","**[Andreas Kuhrwahl](https://jira.spring.io/secure/ViewProfile.jspa?name=andreas.kuhrwahl)** opened **[SPR-3476](https://jira.spring.io/browse/SPR-3476?redirect=false)** and commented  Since AbstractAutowireCapableBeanFactory$ConstructorResolverAdapter is instantiated immediatly on beanFactory construction (see final field AbstractAutowireCapableBeanFactory#constructorResolver) changing the instantiationStrategy via AbstractAutowireCapableBeanFactory#setInstantiationStrategy(...) does not make sense for constructor argument resolving anymore (because AbstractAutowireCapableBeanFactory$ConstructorResolverAdapter invokes #getInstantiationStrategy() on construction).   ---  **Affects:** 2.0.4, 2.0.5","closed","in: core,","spring-projects-issues","2007-05-12T21:23:27Z","2012-06-19T03:50:27Z"
"","7983","Additions to ValidationUtils [SPR-3298]","**[Ananta Palani](https://jira.spring.io/secure/ViewProfile.jspa?name=apalani)** opened **[SPR-3298](https://jira.spring.io/browse/SPR-3298?redirect=false)*** and commented  I have written many additions to ValidationUtils for my personal projects and I thought they might be useful to others. Right now they are only lightly commented, but if there is interest, I will comment the file so that it maches the existing methods in ValidationUtils.  I was really tired of writing mutliple lines to do simple things like requiring that one field is filled if another is filled, or requiring that one field is greater than another. My additions accomplish this and much more.  If someone could have a look and let me know if you have any questions, corrections, or suggestions, that would be great! I will post a new version with the appropriate comments for committing if there is interest from the developers.  -Ananta   ---  **Affects:** 2.0.3  **Attachments:** - [ValidationUtils.java](https://jira.spring.io/secure/attachment/12487/ValidationUtils.java) (_347.92 kB_)","closed","type: enhancement,","spring-projects-issues","2007-03-23T10:20:38Z","2012-06-19T09:37:44Z"
"","8860","Apply custom editors to @RequestParam parameters [SPR-4182]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-4182](https://jira.spring.io/browse/SPR-4182?redirect=false)** and commented  I already have a lot of custom editors, so why can't i use them with params: Currently: public void doSmth(`@RequestParam`(""id"" )Integer id){ Entity e = dao.get(id); //.. actual work }  Suggestion: public void doSmth(`@RequestParam`(""id"" )Entity e){ //.. actual work }   ---  **Affects:** 2.5 final  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-11-28T03:09:00Z","2012-06-19T03:47:21Z"
"","8859","Mark @Controller, @RequestMapping with @Inherited [SPR-4181]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-4181](https://jira.spring.io/browse/SPR-4181?redirect=false)** and commented  When dinamic cglib proxy created, my `@Controller` classes returns: getClass().isAnnotationPresent() = false, so I have to use ugly AopUtils.getTargetClass()   --- No further details from [SPR-4181](https://jira.spring.io/browse/SPR-4181?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-11-28T03:05:12Z","2007-11-28T07:31:12Z"
"","8766","update spring-form.tld: option(s) tags have no html attribute [SPR-4087]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-4087](https://jira.spring.io/browse/SPR-4087?redirect=false)** and commented  its impossible to use standart html attributes with form:option:     ---  **Affects:** 2.5 RC1","closed","type: enhancement,","spring-projects-issues","2007-11-12T23:05:32Z","2012-06-19T03:46:45Z"
"","8722","Add generic methods to BeanFactoryUtils. [SPR-4043]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-4043](https://jira.spring.io/browse/SPR-4043?redirect=false)** and commented  Now: Configuration configuration = (Configuration) BeanFactoryUtils.beanOfType(context, Configuration.class);  Suggestion: Configuration configuration = BeanFactoryUtils.beanOfType(context, Configuration.class);  Unfortunatly, I don't know, how it corresponds with java4 backword compability.    ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2007-11-03T10:13:04Z","2012-06-19T09:36:30Z"
"","8707","make postProcess method in MessageTag [SPR-4028]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-4028](https://jira.spring.io/browse/SPR-4028?redirect=false)** and commented  It's seems that i need  postProcess(PageContext pageContext, String key, String value):  In my project message bundles are storing in database. So I want to output all lazy-loaded messages in the end of the page. I've got request-scope varible, where i populate all messages, after each output. Currently i have to use makeAccessible hack:  public class ExtendedMessageTag extends MessageTag { private static Field field;  static { try { field = MessageTag.class.getDeclaredField(""code""); ReflectionUtils.makeAccessible(field); } catch (Exception e) { ReflectionUtils.handleReflectionException(e); } }  protected void writeMessage(String msg) throws IOException { super.writeMessage(msg); try { TagUtils.addMessageToPageList(pageContext, (String) field.get(this), msg); } catch (Exception e) { ReflectionUtils.handleReflectionException(e); } } }  ---  **Affects:** 2.5 RC1  **Issue Links:** - #8828 Spring MVC form tags made easily extendable","closed","type: enhancement,","spring-projects-issues","2007-10-31T20:29:56Z","2019-01-11T16:16:27Z"
"","8686","InitDestroyAnnotationPostProcessor triggers ""No bean class specified on bean definition"" [SPR-4006]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-4006](https://jira.spring.io/browse/SPR-4006?redirect=false)** and commented  I've got this error message on initialization of context:  ...Error creating bean with name 'torqueHelper' defined in class path resource [coreContext.xml]: Initialization of bean failed; nested exception is java.lang.IllegalStateException: No bean class specified on bean definition.  Here is configuration:  \ \ \ \ \ \ \ \ \ It's look like backword compability bug, because on 2.1-m4 it's all work without any trouble. Any ideas?   ---  **Affects:** 2.5 RC1  2 votes, 6 watchers","closed","type: bug,","spring-projects-issues","2007-10-24T23:17:22Z","2012-06-19T03:47:16Z"
"","8430","ReflectionUtils.findMethod()  with no paramTypes params [SPR-3749]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-3749](https://jira.spring.io/browse/SPR-3749?redirect=false)** and commented  May be it's possible to have 2 kinds of findMethod() method: public static Method findMethod(Class clazz, String name) public static Method findMethod(Class clazz, String name, Class[] paramTypes)? Or even better, use varargs, as in java.lang.Class.getMethod(String name, Class... parameterTypes). Currently for method with no params, i've forced to inject dummy params like new Class[]{} and i think that is not good style.  By the way, for invokeMethod method in the same class, we've got 2 types of args: invokeMethod(Method method, Object target, Object[] args) invokeMethod(Method method, Object target). It's pretty injustice.   ---  **Affects:** 2.0.6, 2.1 M3","closed","type: enhancement,","spring-projects-issues","2007-08-08T22:25:40Z","2022-01-05T08:29:57Z"
"","8561","spring-webmvc-portlet Bundle-Version osgi manifest header [SPR-3881]","**[Alin Dreghiciu](https://jira.spring.io/secure/ViewProfile.jspa?name=adreghiciu)** opened **[SPR-3881](https://jira.spring.io/browse/SPR-3881?redirect=false)** and commented  spring-webmvc-portlet has a wrong manifest header 2.1-m3. This causes problmes as the jar is not a valid bunlde in osgi terms. In my view is just a small type as can be seen at:  http://springframework.cvs.sourceforge.net/springframework/spring/osgi/bnd/spring-webmvc-portlet.bnd?revision=1.4&view=markup  The line Bundle-Version: ${spring-version} should be Bundle-Version: ${spring-version-osgi} and this will solve the problem.   ---  **Affects:** 2.1 M4","closed","type: bug,","spring-projects-issues","2007-09-15T09:37:04Z","2012-06-19T03:47:06Z"
"","8004","Provides a MultipartResolver that make use of Common FileUpload 1.2 [SPR-3319]","**[Alice](https://jira.spring.io/secure/ViewProfile.jspa?name=fantax)** opened **[SPR-3319](https://jira.spring.io/browse/SPR-3319?redirect=false)** and commented  The latest Apache FileUpload library provides an API that can handle large files without intermediary files and avoid running into memory problems.  The current MutlipartResolver implementation does not support the use of this API.  ---  **Issue Links:** - #8288 Declaring a multipartResolver bean limits file uploading capabilities  4 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2007-03-29T09:58:30Z","2019-01-11T18:14:03Z"
"","8639","Invalid implementation of equals method in Cglib2AopProxy$ProxyCallbackFilter [SPR-3959]","**[Alexei Akimov](https://jira.spring.io/secure/ViewProfile.jspa?name=a.a.akimov)** opened **[SPR-3959](https://jira.spring.io/browse/SPR-3959?redirect=false)** and commented  Method equals of the specified class retruns false if the given advisors do not implement PointcutAdvisor. See equalsPointcuts method for details. This issue leads to endless creation of CGLIB class definition in PermGen area of memory. To reproduce this behaviour let's consider the following applicationContext.xml  \  \  \ \ \ \ \ \ \speakerAdvisor\ \ \ \  and the following client code  ApplicationContext applicationContext = new ClassPathXmlApplicationContext( ""applicationContext.xml""); for (int i = 0; i < 10; i++) { Echo echo = (Echo)applicationContext.getBean(""echo""); LOGGER.info(echo.answer(Integer.toString(i))); Speaker speaker = (Speaker)echo; LOGGER.info(echo.answer(speaker.speak())); }  Every time the loop body is executed a new CGLIB class definition is created for echo bean proxy. SpeakerAdvisor extends DefaultIntroductionAdvisor and adds some interface implementation to echoTarget bean in a standard way .   ---  **Affects:** 2.0 final, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7  **Attachments:** - [testproxyfactory.zip](https://jira.spring.io/secure/attachment/12984/testproxyfactory.zip) (_5.77 MB_)","closed","in: core,","spring-projects-issues","2007-10-03T23:59:45Z","2012-06-19T03:47:46Z"
"","7940","Spring is not compatible with the latest version of JRuby (0.9.8) [SPR-3255]","**[Alexander Shvets](https://jira.spring.io/secure/ViewProfile.jspa?name=shvets)** opened **[SPR-3255](https://jira.spring.io/browse/SPR-3255?redirect=false)** and commented  JRuby developers changes Interface name from IRuby to Ruby.   ---  **Affects:** 2.0.2, 2.0.3  **Attachments:** - [JRubyScriptUtils.java](https://jira.spring.io/secure/attachment/12467/JRubyScriptUtils.java) (_8.46 kB_)","closed","in: core,","spring-projects-issues","2007-03-13T02:40:01Z","2012-06-19T03:50:29Z"
"","8255","AspectJWeavingEnabler to implemens Ordered [SPR-3572]","**[Alexander Gavrilov](https://jira.spring.io/secure/ViewProfile.jspa?name=lucker)** opened **[SPR-3572](https://jira.spring.io/browse/SPR-3572?redirect=false)** and commented  Its wold be nice to have the possibility to specify order in the  Created by this configuration AspectJWeavingEnabler  does not implements Ordered neither PriorityOrdered, so it executes in the last order, but we need to execute it before all another BeanFactoryPostProcessor's    --- No further details from [SPR-3572](https://jira.spring.io/browse/SPR-3572?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-06-10T17:22:33Z","2012-06-19T03:51:14Z"
"","8115","AbstractRefreshableTargetSource.getTargetClass() is not synchronized [SPR-3432]","**[Alexander Gavrilov](https://jira.spring.io/secure/ViewProfile.jspa?name=lucker)** opened **[SPR-3432](https://jira.spring.io/browse/SPR-3432?redirect=false)** and commented  The AbstractRefreshableTargetSource.getTargetClass() method is not synchronized. This can lead to the race condition.   ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-04-29T23:18:14Z","2012-06-19T03:50:18Z"
"","8347","XmlWebApplicationContext creates ClassPathResource instead ServletContextResource  [SPR-3666]","**[Alexander Borovsky](https://jira.spring.io/secure/ViewProfile.jspa?name=partizan)** opened **[SPR-3666](https://jira.spring.io/browse/SPR-3666?redirect=false)** and commented  In populating of resources, that configured as string in context files, XmlWebApplicationContext creates ClassPathResource, not ServletContextResource.  For example: 2007-07-07 14:30:37,902 [main] WARN  (org.springframework.beans.factory.config.PropertiesFactoryBean) - Could not load properties from class path resource [WEB-INF/conf/quartz.properties]: class path resource [WEB-INF/conf/quartz.properties] cannot be opened because it does not exist  Corresponding declaration: \ \ \ \ \ \  This constructions properly worked with spring 1.2   --- No further details from [SPR-3666](https://jira.spring.io/browse/SPR-3666?redirect=false)","closed","in: core,","spring-projects-issues","2007-07-06T22:33:21Z","2019-01-11T18:36:03Z"
"","8086","Add support for ZK [SPR-3403]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-3403](https://jira.spring.io/browse/SPR-3403?redirect=false)** and commented  ZK (http://www.zkoss.org/) is a very powerful ajax toolkit used to build web applications. It would be very nice to use dependency injection to define zk controllers and other objects needed by the framework.   --- No further details from [SPR-3403](https://jira.spring.io/browse/SPR-3403?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-04-21T07:21:15Z","2012-06-19T09:37:32Z"
"","7966","Provide dependency injection using annotations, ala Guice [SPR-3281]","**[Alex](https://jira.spring.io/secure/ViewProfile.jspa?name=dusty)** opened **[SPR-3281](https://jira.spring.io/browse/SPR-3281?redirect=false)** and commented  I just stumbled on the Google Guice project : http://code.google.com/p/google-guice/wiki/SpringComparison . I find great to enable dependency injection using annotations, also they claim to be 100x faster than Spring. A similar feature for Spring would of course be very welcome ;)   --- No further details from [SPR-3281](https://jira.spring.io/browse/SPR-3281?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-03-21T20:05:18Z","2012-06-13T09:05:39Z"
"","8672","Add Ant pattern matching to  statements [SPR-3992]","**[Alex Marshall](https://jira.spring.io/secure/ViewProfile.jspa?name=alex_marshall)** opened **[SPR-3992](https://jira.spring.io/browse/SPR-3992?redirect=false)** and commented  When using Spring webflow, it helps to separate beans into their own definition files.  This can lead to many cumbersome import statements when adding these beans to the application context :  \ \ \  It would greatly simplify configuration to have a single Ant-pattern based import statement :  \   ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2007-10-19T04:50:05Z","2012-06-19T09:36:19Z"
"","8684","Cglib2AopProxy weak reference causes perm space to fill up [SPR-4004]","**[Alex Burgel](https://jira.spring.io/secure/ViewProfile.jspa?name=aburgel)** opened **[SPR-4004](https://jira.spring.io/browse/SPR-4004?redirect=false)** and commented  after upgrading to 2.0.7 i started getting a bunch of out of memory errors in my perm space. i think it has something to do with cglib proxies.  my method to create proxied objects:      public static Object create(Object obj) {         Advisor advisor = new DefaultPointcutAdvisor(VERSIONING_POINTCUT, new VersioningAdvice());              ProxyFactory pf = new ProxyFactory(obj);         pf.setProxyTargetClass(true);         pf.setOptimize(true);         pf.addAdvisor(advisor);         pf.setFrozen(true);              return pf.getProxy();     }  obj is a class, so cglib is used to create the proxy, which means it will generate a new subclass that handles the proxying. cglib uses Cglib2AopProxy$ProxyCallbackFilter as part of a key to a map that holds the generated classes so it doesn't have to regenerate a new class each time.  this worked in 2.0.6, but in 2.0.7 ProxyCallbackFilter uses a WeakReference to hold the advised object, which in my case is pf from the method above. once this method is complete, there are no strong reference to pf anymore, so after the next garbage collection the WeakReference will be cleared.  Cglib2AopProxy$ProxyCallbackFilter.equals uses the advised object (line 861), so after a garbage collection, two ProxyCallbackFilters that should have been equal are no longer because one of the advised references has been cleared.  this causes cglib to generate another class. so after every garbage collection, cglib will generate a new class, which will eventually lead to out of memory errors.  i have a feeling that my way of using ProxyFactory is not the best approach, but i'm not sure what other way to achieve this same behavior (other than using aspectj weaving, which i'd rather not do).  ---  **Affects:** 2.0.7  **Issue Links:** - #12663 MemoryLeak in Cglib2AopProxy.ProxyCallbackFilter - #8302 ProxyFactory memory leak using cglib - [OSGI-161](https://jira.spring.io/browse/OSGI-161) Class memory leak  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2007-10-24T09:58:41Z","2019-01-11T16:18:29Z"
"","8617","SelectedValueComparator no longer works with Collections [SPR-3937]","**[Alex Burgel](https://jira.spring.io/secure/ViewProfile.jspa?name=aburgel)** opened **[SPR-3937](https://jira.spring.io/browse/SPR-3937?redirect=false)** and commented  SelectedValueComparator is not taking into account the PropertyEditor of the bound value anymore.  in 2.0.6, the method SelectedValueComparator.getBoundValue(BindStatus) would use the value from the PropertyEditor of the BindStatus object as the boundValue.  in 2.0.7, it uses the value of the BindStatus object itself, unfortunately, BindStatus.getValue() returns a String version of the value object because it gets converted to that in AbstractPropertyBindingResult.formatFieldValue(String, Object).  the problem is that in SelectedValueComparator.isSelected(BindStatus,Object), in 2.0.7, boundValue is always going to be a String, even if the actual bound value was originally a Collection.  the end result of this is that you end up comparing the candidateValue to a String-ified version of a Collection, rather than the actual Collection itself.   ---  **Affects:** 2.0.7","closed","type: bug,","spring-projects-issues","2007-09-28T03:05:06Z","2012-06-19T03:47:49Z"
"","8022","NPE in SelectedValueComparator.exhaustiveCompare [SPR-3338]","**[Alex Burgel](https://jira.spring.io/secure/ViewProfile.jspa?name=aburgel)** opened **[SPR-3338](https://jira.spring.io/browse/SPR-3338?redirect=false)** and commented  on line 154 of o.s.web.servlet.tags.form.SelectedValueComparator, ObjectUtils.getDisplayValue(arg) is called, which can return null if the .toString() method of arg returns null.  this leads to an NPE because .equals() is called on the object returned from ObjectUtils.getDisplayValue().   ---  **Affects:** 2.0.3","closed","type: bug,","spring-projects-issues","2007-04-03T13:55:32Z","2012-06-19T03:50:02Z"
"","7929","make AbstractHandlerMapping.getHandler(request) not final [SPR-3244]","**[Alex Burgel](https://jira.spring.io/secure/ViewProfile.jspa?name=aburgel)** opened **[SPR-3244](https://jira.spring.io/browse/SPR-3244?redirect=false)** and commented  i would like to create a HandlerMapping that allows me to set global interceptors and also to set interceptors for particular URL patterns. for example,  \ \ \ \ \ \ \ \ \ \controller1\ \localInterceptor1,localInterceptor2,controller2\ \ \ \  so a request for /page1.jsp would get intercepted by all the global interceptors, and a request for page2 would get all the global interceptors and the local interceptors  obviously i could do this by creating another HandlerMapping instance for each case, but that bloats up the XML file quite a bit.  because AbstractHandlerMapping.getHandler(request) is final and only uses the global interceptors, i cannot do this by subclassing SimpleUrlHandlerMapping, i have to basically copy the whole heirarchy.  i think the easiest solution is to make getHandler(request) non-final. though i'm sure there are other way to accomplish this behavior. if someone has a better suggestion, let me know and i'll write up a patch.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2007-03-09T03:35:00Z","2012-06-19T03:51:15Z"
"","8039","Improve performance of AbstractBeanFactory for high-concurrent-load applications [SPR-3355]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-3355](https://jira.spring.io/browse/SPR-3355?redirect=false)** and commented  Under high-concurrent load situation, a locking contention occurs when the BeanFactory is being accessed/queried for beans.  Occurrences (ordered by prevalance) - : 1. at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:187) 2. at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedBeanDefinition(AbstractBeanFactory.java:901) 3. at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedBeanDefinition(AbstractBeanFactory.java:884) 4. at org.springframework.beans.factory.support.AbstractBeanFactory.transformedBeanName(AbstractBeanFactory.java:737) 5. at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:369) 6. at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1115) 7. at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:366) 8. at org.springframework.beans.factory.support.AbstractBeanFactory.isAlias(AbstractBeanFactory.java:768) 9. at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:183)  A suggested fix is to use the backport_util_concurent implementation of the ConcurrentHashMap to replace the regular HashMap usages which would improve the performance and also be JDK 1.4/1.3 compatible.  ---  **Affects:** 2.0 final  **Attachments:** - [td.log](https://jira.spring.io/secure/attachment/12529/td.log) (_4.54 kB_)  **Issue Links:** - #8109 Spring Bean Factory creation of Prototype (non-singleton) beans causes serious performance degradation under load  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-04-09T04:30:15Z","2019-01-11T18:16:04Z"
"","8870","Add warning and/or exception facility to propagating transactions that try to change the isolation level  [SPR-4192]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4192](https://jira.spring.io/browse/SPR-4192?redirect=false)** and commented  Consider the following  `@Transactional`(propagation=REQUIRED, isolation=Isolation.REPEATABLE_READ) public void doIt() { otherService.doSomethingElse(); }  `@Transactional`(propagation=REQUIRED, isolation=Isolation.READ_COMMITTED) public void doSomethingElse() {}  This situation would essentially ignore the second isolation level. From the point of view of the second method, you're not getting the expected behavior.  It would be good if we had a facility that would allow us to configure if something like this comes up Spring would  1) throw an Exception or 2) issue a warning in the log  This would greatly help to prevent potential logical programming errors...  ---  **Affects:** 2.5 final  **Issue Links:** - #21008 Doc: `@Transactional`.isolation does not guarantee the specified isolation level","closed","type: enhancement,","spring-projects-issues","2007-11-28T20:44:52Z","2019-01-13T08:06:17Z"
"","8855","JavaDoc Clarification for JdbcOperations.update() method might be good [SPR-4177]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4177](https://jira.spring.io/browse/SPR-4177?redirect=false)** and commented  http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/jdbc/core/JdbcOperations.html#update(java.lang.String)  Mentions that it 'Issues a single SQL update'. For some people this is a lilittle confusing. Could this be changed to 'Issues a single SQL update (such as an insert, update or delete)'   ---  **Affects:** 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-11-27T22:34:29Z","2012-06-19T03:47:46Z"
"","8844","Allow for wildcards in type-level @RequestMapping in combination with InternalPathMethodNameResolver [SPR-4166]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4166](https://jira.spring.io/browse/SPR-4166?redirect=false)** and commented  It would be nice to have the following behavior:  - an `@RequestMapping` annotation with wildcards (for example `@RequestMapping`(""/account*.htm"")) - in combination with the default behavior of the InternalPathMethodNameResolver  This would mean I could develop a controller like this:  `@RequestMapping`(""/account*.htm"") public class MyController {  public Account accountDetails() { } public List\ accountSummary() {} }  whereby the accountDetails method would be bound to the accountDetails.htm URL and the accountSummary method to the accountSummary.htm URL.  ---  **Affects:** 2.5 final  **Issue Links:** - #8851 Allow use of MethodNameResolvers with `@Controller`","closed","type: enhancement,","spring-projects-issues","2007-11-24T22:47:17Z","2019-01-13T08:06:27Z"
"","8780","When using RequestToViewNameTranslator, view name might be set TOO late [SPR-4102]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4102](https://jira.spring.io/browse/SPR-4102?redirect=false)** and commented  Often I advise people to use a handler interceptor to tweak the view name if they want to support multiple view techs.  For example: based on the extension (.pdf for example), append something to the view name transparently so that you don't have to tweak the controller. Put this in an interceptor and you're good to go.  When using view name translation, the view name is only set after any interceptors have ran, meaning any interceptor changing the view name will cause no view name translation to occur. I think the resolution of the view name should be moved from the render() method in DispatcherServlet to some other place (as long as it's before handler interception postHandler()).    ---  **Affects:** 2.5 RC2","closed","type: enhancement,","spring-projects-issues","2007-11-14T02:50:10Z","2012-06-19T03:47:32Z"
"","8776","Void returning methods do not display correct behavior for @Controller/@RequestMapping methods [SPR-4098]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4098](https://jira.spring.io/browse/SPR-4098?redirect=false)** and commented  If I have a method such as  `@RequestMapping`(""fjkdfjds"") public String doSomething() { }  it is correctly invoked and even if I add a ModelMap parameter, the model is correctly exposed in the request  If I have a method such as  `@RequestMapping`(""jfdkjfsd"") public void doSomething() {}  the model is not exposed, even if I add a ModelMap parameter. Because I'm using the view name translation facility I do not need a return value.  In other words: with VOID returning values, the model does not get exposed. When returning the ModelMap itself, or the String (view name) things work as expected.   ---  **Affects:** 2.5 RC1","closed","type: bug,","spring-projects-issues","2007-11-13T23:11:29Z","2012-06-19T03:46:48Z"
"","8770","Add getBean() method to WebApplicationContextUtils [SPR-4091]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4091](https://jira.spring.io/browse/SPR-4091?redirect=false)** and commented  Question from a user: if in 90% of all cases WebApplicationContextUtils.getApplicationContext() is followed by a getBean() call, why not add a convenience getBean() mthod to the WebApplicationContextUtils...  Sounds like a nice idea maybe?   ---  **Affects:** 2.5 RC2","closed","type: enhancement,","spring-projects-issues","2007-11-13T18:59:56Z","2009-03-23T03:29:16Z"
"","8740","When context creation fails in SpringJUnit4Runner, it tries it again instead of letting the whole test fail [SPR-4061]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4061](https://jira.spring.io/browse/SPR-4061?redirect=false)** and commented  The following code in SpringJUnit4Runner swallows the exception thrown by context creation (if any) instead of throwing it. This means test execution is continuing, while it should fail:      @Override     protected Object createTest() throws Exception {     	final Object testInstance = super.createTest();     	try {     		getTestContextManager().prepareTestInstance(testInstance);     	}     	catch (Throwable t) {  // should throw exception instead of only creating one new Exception(t); } return testInstance; }   ---  **Affects:** 2.5 RC1","closed","status: duplicate,","spring-projects-issues","2007-11-07T00:25:49Z","2019-01-12T16:51:26Z"
"","8313","Overload method in ValidationUtils to make things a little more convenient [SPR-3632]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-3632](https://jira.spring.io/browse/SPR-3632?redirect=false)** and commented  It would be handy to have an additional overloaded method ValidationUtils.rejectIfEmptyOrWhitespace(Error,String,Object[]) in addition to rejectIfEmptyOrWhitespace(Error,String,Object[],String) where in the latter case the String is the default message (you don't want to always have to specify the default message).    ---  **Affects:** 2.0.6, 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-06-28T00:34:45Z","2012-06-19T03:50:07Z"
"","8256","Possibly include no-args constructor for SimpleJdbcTemplate and afterPropertiesSet() [SPR-3573]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-3573](https://jira.spring.io/browse/SPR-3573?redirect=false)** and commented  SimpleJdbcTemplate currently does not feature a no-args constructor. This is fine, from a dependencies POV, but if you want to proxy the SimpleJdbcTemplate, there's no way of injecting the template (it's a class not an interface and cglib requires a no-args constructor), so one has to use SimpleJdbcOperations. This is fine with me, but I can imagine other users may be a bit confused as the normal usage pattern is using the SimpleJdbcTemplate directly.  The normal JdbcTemplate **does** have a no-args constructor, so mirroring this in the SimpleJdbcTemplate would not be strange.  My use case for prxying the SimpleJdbcTemplate here is do develop an aspect that flushes the Hibernate session before every JDBC operation.   ---  **Affects:** 2.1 M2","closed","type: enhancement,","spring-projects-issues","2007-06-11T02:18:20Z","2007-07-10T19:12:10Z"
"","8235","DispatcherServlet should throw 405 when detecting an unsupported operation [SPR-3552]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-3552](https://jira.spring.io/browse/SPR-3552?redirect=false)** and commented  When an unsupported HTTP method is called upon, the DispatcherServlet should raise an SC_METHOD_NOT_ALLOWED (405). Currently it throws an HttpRequestMethodNotSupportException instead. I couldn't find code that converts this exception to a 405 and the last time I found this was a while ago, so it could have been solved in the meantime... If so, please ignore ;-).   ---  **Affects:** 2.0.5","closed","type: enhancement,","spring-projects-issues","2007-06-04T03:06:17Z","2012-06-19T03:50:34Z"
"","8234","IdentityNamingStrategy throws NPE when naming a class in the default package or if Class.getPackage() returns null [SPR-3551]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-3551](https://jira.spring.io/browse/SPR-3551?redirect=false)** and commented  Defining a class in the default package and exporting it using an MBeanExporter configured with an IdentityNamingStrategy throws an NPE 'coz Class.getPackage() returns null in this case. According to Arjen, the Class.getPackage() returns null in other cases too.  This is on an Apple VM. Just so you know in case you can't reproduce it.   ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-06-03T23:33:21Z","2012-06-19T03:50:17Z"
"","8177","does not select all aspects [SPR-3494]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-3494](https://jira.spring.io/browse/SPR-3494?redirect=false)** and commented   selects all classes annotated by `@Aspect`. When not using the single-element style, this can result in no aspects selected at all.   works, but as soon as you include whitespace (newline, tabs, spaces), no aspects are selected anymore.  In other words:    results in no aspects being selected at all.  I have not checked this against 2.0.5 or 2.1m1, and won't have the time to do so unfortunately...   ---  **Affects:** 2.0.4","closed","in: core,","spring-projects-issues","2007-05-16T19:59:25Z","2012-06-19T03:50:23Z"
"","8003","Improve error message when pointcut-ref is not found [SPR-3318]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-3318](https://jira.spring.io/browse/SPR-3318?redirect=false)** and commented  When one defines a pointcut-ref in an  block and the reference is not found, configuration fails with a ""No bean named 'xyz' is defined"" message, which is confusing for developers.  Maybe just catching the exception in the aspect and translate it to something more readable if possible at (i.e. if not dependency injected directly ;-).  Alef   ---  **Affects:** 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-03-28T20:53:29Z","2011-06-17T02:18:17Z"
"","7947","Increase log level for NamespaceHandler exception reporting [SPR-3262]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-3262](https://jira.spring.io/browse/SPR-3262?redirect=false)** and commented  Currently, if an exception occurs while loading a namespace, it's logged to DEBUG. This means any ClassNotFoundException (for example, the one occurring in #7942) does not show up, but instead the NamespaceHandling fails miserably with an error message that says the namespacehandler could not be loading.  ---  **Affects:** 2.0.3  **Issue Links:** - #7942 Cannot find ""lang"" namespace handler unless all library jars are present","closed","type: enhancement,","spring-projects-issues","2007-03-14T00:34:06Z","2019-01-11T17:18:40Z"
"","7937","Possibly include @Optional annotation in addition to @Required [SPR-3252]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-3252](https://jira.spring.io/browse/SPR-3252?redirect=false)** and commented  In the poll on `@Required`, Peter mentioned that it would nice to have `@Optional` support too somehow. This would allow you to define an `@Required` annotation on class-level and several `@Optional` ones on optional dependencies.  This should not be hard to implement I guess and doesn't bring any backward compatibility issues.  http://forum.springframework.org/showpost.php?p=106670&postcount=2   --- No further details from [SPR-3252](https://jira.spring.io/browse/SPR-3252?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-03-12T20:18:30Z","2007-04-03T08:43:27Z"
"","7895","ORM documentation still refers to old-school transaction management configuration [SPR-3209]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-3209](https://jira.spring.io/browse/SPR-3209?redirect=false)** and commented  The ORM documentation still refers to PFBs to configure transaction management. This should be changed to  stuff...    ---  **Affects:** 2.0 final, 2.0.1, 2.0.2","closed","type: enhancement,","spring-projects-issues","2007-02-27T00:27:35Z","2007-03-07T23:59:17Z"
"","7892","No JavaDoc for ManagedNotification annotation [SPR-3206]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-3206](https://jira.spring.io/browse/SPR-3206?redirect=false)** and commented  #3 org.springframework.jmx.export.annotation.ManagedNotification has no annotation javadoc org.springframework.jmx.export.annotation.ManagedNotifications has no annotation javadoc   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-02-26T07:36:28Z","2012-06-19T03:51:19Z"
"","8546","StandardJmsActivationSpecFactory should check parameter type while setting destination [SPR-3866]","**[Agim Emruli](https://jira.spring.io/secure/ViewProfile.jspa?name=agim)** opened **[SPR-3866](https://jira.spring.io/browse/SPR-3866?redirect=false)** and commented  Unfortunately the JCA Specification is not  pretty accurate in defining the ActivationSpec JavaBean properties. In particular i run into a small problem while using the StandardJmsActivationSpecFactory  along with websphere. The websphere activation specification requires a javax.jms.Destination as a argument for the method setDestination.  Here is the corresponding section from the spec:  The destination property value may also be an object that implements the javax.jms.Destination interface. In such a case, the resource adapter should provide an administered object that implements the javax.jms.Destination interface.  As a workaround i have configured the websphere activation spec directly as a normal bean. The disadvantage of this approach is, that i can't use the jms namespaces (Because i can't define a pre-configured activation-spec for a particular listener). Is there also a possibility to add a destinationresolver to the jca-listener element ? So i would expect that the StandardJmsActivationSpecFactory retrieves the destination through the destinationresolver in this particular case.  Btw. The xsd-documentation of the destination attribut inside the listener element is wrong if the listener element is used along with the jca-listener-container. (Because actually there is no destinationresolver used inside the .StandardJmsActivationSpecFactory )  Thanks Agim    ---  **Affects:** 2.1 M3  **Attachments:** - [DefaultJmsActivationSpecFactory_patch.txt](https://jira.spring.io/secure/attachment/12961/DefaultJmsActivationSpecFactory_patch.txt) (_9.83 kB_)","closed","type: enhancement,","spring-projects-issues","2007-09-12T06:12:55Z","2012-06-19T03:47:02Z"
"","8232","Ship Spring Framework jars with appropriate OSGi manifest entries in MANIFEST.MF [SPR-3549]","**[Adrian Colyer](https://jira.spring.io/secure/ViewProfile.jspa?name=adrian.colyer)** opened **[SPR-3549](https://jira.spring.io/browse/SPR-3549?redirect=false)** and commented  I'm sure we should already have an issue covering this, but I couldn't find it in a quick search and we certainly need one. Please close this as a dup. if I just missed it.  We need to ship the 2.1 jars with the OSGi manifest entries in them (as currently developed under the Spring OSGi project). We really need to get this in by M3 if at all possible, to give us time to iron out any problems before the release candidates.    ---  **Affects:** 2.1 M3  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2007-06-03T19:16:18Z","2012-06-19T03:50:26Z"
"","8251","Add support for JMS API receiveNoWait to JmsTemplate [SPR-3568]","**[Adam Lewandowski](https://jira.spring.io/secure/ViewProfile.jspa?name=alewando)** opened **[SPR-3568](https://jira.spring.io/browse/SPR-3568?redirect=false)** and commented  This patch adds support for the JMS method MessageConsumer.receiveNoWait to JmsTemplate. The receiveNoWait() method receives the next message for the consumer if one is immediately available, otherwise it returns null. This is useful in a polling processing model. You can simulate this behavior with the current JmsTemplate by specifying an aribtrary low receiveTimeout value, but it is not clear how low is low enough or too low (could be provider-specific). It would be nice to have the JMS API method exposed, which does exactly what is desired without any confusion. This patch uses a receiveTimeout value of -1 (defined as constant RECEIVE_TIMEOUT_NO_WAIT) to indicate that the MessageConsumer.receiveNoWait() API method should be used.  Note that this patch changes the default behavior of the current implementation slightly. Currenty the default timeout (constant DEFAULT_RECEIVE_TIMEOUT) is set to -1, which causes the MessageConsumer.receive() method to be called which does an indefinite blocking receive. This patch changes the default timeout to 0, which will cause the MessageConsumer.receive(long timeout) method to be called with a timeout of 0, which (according to the JMS spec) does the same thing. The use of a special -1 value to trigger the same behavior as a value of 0 is confusing, is there some reason why the original implementation did this?  I've tested this patch against ActiveMQ, but no other JMS providers.   ---  **Attachments:** - [JmsTemplate_receiveNoWait.patch](https://jira.spring.io/secure/attachment/12654/JmsTemplate_receiveNoWait.patch) (_7.81 kB_)","closed","type: enhancement,","spring-projects-issues","2007-06-08T05:53:26Z","2012-06-19T03:51:15Z"
"","8049","Web site has outdated spring-tx-2.0 XSD [SPR-3365]","**[Aaron Mulder](https://jira.spring.io/secure/ViewProfile.jspa?name=ammulder)** opened **[SPR-3365](https://jira.spring.io/browse/SPR-3365?redirect=false)** and commented  The documentation here:  http://www.springframework.org/docs/reference/transaction.html#transaction-declarative  Says that tx:annotation-driven takes an ""order"" attribute.  The schema here:  http://www.springframework.org/schema/tx/spring-tx-2.0.xsd  Says that it does not.  When I crack open the spring-2.0.4 JAR, there's a different schema that does contain the order attribute.  I assume that should be posted to the web site and replace the older one that's presently there.   ---  **Affects:** 2.0.4","closed","type: task,","spring-projects-issues","2007-04-12T01:41:53Z","2007-04-12T02:28:27Z"
"","7944","Spring MVC Errors for non-command fields [SPR-3259]","**[Aaron Mulder](https://jira.spring.io/secure/ViewProfile.jspa?name=ammulder)** opened **[SPR-3259](https://jira.spring.io/browse/SPR-3259?redirect=false)** and commented  I have a Spring MVC form using SimpleFormController with a command object.  However, my screen has a couple fields that do not directly correspond to command object fields.  They are used on submission to construct some objects related to the command object, but not directly enough that I could expect to use dot notation to deal with them.  My strategy is to use the Spring MVC features for nearly everything, but to override onSubmit(request, response, command, bindException) and pull the last couple parameters out of the request manually and deal with them there.  Now, all that is fine, but I'd also like to use Spring error handling.  If there is an error with one of those ""extended"" fields, I can't use bindException.rejectValue(""foo"", ...) because I get this exception:  org.springframework.beans.NotReadablePropertyException: Invalid property 'foo' of bean class [Bar]: Bean property 'foo' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:510) org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:502) org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:77) org.springframework.validation.AbstractBindingResult.rejectValue(AbstractBindingResult.java:177) org.springframework.validation.AbstractBindingResult.rejectValue(AbstractBindingResult.java:165) org.springframework.validation.BindException.rejectValue(BindException.java:133) MyController.onSubmit(MyController.java:47)  I'm not really sure why all this plumbing is happening.  The desired result is that there's an errors instance in the request that says there was problem X with field foo, so I can use the errors tag next to the foo field to display the error.  I can't see why it matters whether this is a valid property on the bean or not.  It would sure be nice if the BindException would hold errors for ""extended"" fields that may be on the screen but not on the command object itself.   ---  **Affects:** 2.0.2  8 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2007-03-13T08:12:10Z","2015-09-22T17:34:33Z"
"","7922","errors tag produces IllegalStateException when no target object is present [SPR-3237]","**[Aaron Mulder](https://jira.spring.io/secure/ViewProfile.jspa?name=ammulder)** opened **[SPR-3237](https://jira.spring.io/browse/SPR-3237?redirect=false)** and commented  The following JSP code:     Produces the following stack trace in the browser (the page is not rendered at all) when run:  java.lang.IllegalStateException: Neither Errors instance nor plain target object for bean name 'command' available as request attribute org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:137) org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:168) org.springframework.web.servlet.tags.form.ErrorsTag.shouldRender(ErrorsTag.java:104) org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag.writeTagContent(AbstractHtmlElementBodyTag.java:41) org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:90) org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:77) org.apache.jsp.WEB_002dINF.jsp.player.status_jsp._jspService(status_jsp.java:99) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:803) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:384) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:320) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266) javax.servlet.http.HttpServlet.service(HttpServlet.java:803) org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:142) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:247) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1105) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:841) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:755) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:396) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:350) javax.servlet.http.HttpServlet.service(HttpServlet.java:690) javax.servlet.http.HttpServlet.service(HttpServlet.java:803) com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:119) com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:55)  Now, it's fine if the errors tag doesn't think the environment is set up right.  But there were no validation errors, and not only is the errors tag producing an error when there are no errors, but it prevents the page from rendering!  This page should have rendered fine and if it insists, it should put out a log message saying what I did wrong (and something better than ""Errors instance not available"" -- duh, there were no errors).  This (or something quite similar) also happens if the errors tag appears outside the form tag.  Why is that?  Why can't I put the errors at the top of the page and the form at the bottom?  And seriously, when I first render a form, there won't be an Errors instance available, and that's **not** an error.   ---  **Affects:** 2.0.2","closed","type: bug,","spring-projects-issues","2007-03-06T11:30:58Z","2012-06-19T03:50:38Z"
"","8018","Preserve actual exception in AssertThrows [SPR-3333]","**[Aaron Hamid](https://jira.spring.io/secure/ViewProfile.jspa?name=ahamid)** opened **[SPR-3333](https://jira.spring.io/browse/SPR-3333?redirect=false)** and commented  It is sometimes useful to preserve the origin exception even if AssertThrows assertion passes.  For example, if not only the class but an exception message needs to be asserted, then the original exception must be preserved.  This is trivial to do.  I will attach a patch.   ---  **Affects:** 2.0.3  **Attachments:** - [diff.txt](https://jira.spring.io/secure/attachment/12515/diff.txt) (_878 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-04-02T08:18:22Z","2012-06-19T03:50:28Z"
"","8716","DataSourceTransactionManager creates two transactions per @transactional annotation. [SPR-4037]","**[A Developer](https://jira.spring.io/secure/ViewProfile.jspa?name=aspringuser)** opened **[SPR-4037](https://jira.spring.io/browse/SPR-4037?redirect=false)** and commented  Hello:  I'm reporting an odd behaviour that may not be a bug. Or, if it is a bug, it may be in the AOP component instead of the DA component.  The problem is this.  I define a transaction using a `@transactional` annotation. In the log4j output of the DataSourceTransactionManager I see two transactions created and committed, for the transactions defined by that annotation.  I have a small example written up here in the user forums:  http://forum.springframework.org/showthread.php?t=45517  No one has commented on this issue.  Is Spring supposed to behave like this?  Or, if this is not a bug, can you please tell me how to get only one transaction created per `@transactional` annotation.  Thank you.   ---  **Affects:** 2.0.5","closed","in: data,","spring-projects-issues","2007-11-02T05:21:27Z","2019-01-11T16:24:23Z"