"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","9578","Allow locations value in PropertyPlaceholderConfigurer be resolved [SPR-4902]","**[Zemian Deng](https://jira.spring.io/secure/ViewProfile.jspa?name=thebugslayer)** opened **[SPR-4902](https://jira.spring.io/browse/SPR-4902?redirect=false)** and commented  When configuring PropertyPlaceholderConfigurer bean, the ""locations"" value can use property resolvable variable, but only if it defined in System properties ONLY. If not defined, it errors out. It would be very useful to have it also lookup an defined Map in another bean within the context that provide default values.  I notice that we can do this on other bean definitions after a PropertyPlaceholderConfigurer has been setup, but the ""locations"" properties of PropertyPlaceholderConfigurer bean itself is not configurable, which is a shame.  Can we add this improvement?  Thanks.  There is a also a forum topic created, but no one replied :( http://forum.springframework.org/showthread.php?p=185477   ---  10 votes, 14 watchers","closed","has: votes-jira,","spring-projects-issues","2008-06-09T04:55:27Z","2019-01-13T21:52:15Z"
"","9501","Consistently support argument substitution in default message Strings [SPR-4825]","**[zejun Wang](https://jira.spring.io/secure/ViewProfile.jspa?name=denight)** opened **[SPR-4825](https://jira.spring.io/browse/SPR-4825?redirect=false)** and commented  I am not sure this is a bug or not. maybe I only need to do some configuration somewhere?  When configing like the following: \ I am excpecting the message: ""Maximum sessions of {1} for this principal exceeded"".  However no matter how many concurrent-session-control max-sessions number I specify, I always get the message ""Maximum sessions of {0} for this principal exceeded"".   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-04-20T19:37:21Z","2019-01-11T19:00:58Z"
"","9785","WebUtils#extractFilenameFromUrlPath IndexOutOfBoundsException [SPR-5112]","**[Zach Legein](https://jira.spring.io/secure/ViewProfile.jspa?name=zlegein)** opened **[SPR-5112](https://jira.spring.io/browse/SPR-5112?redirect=false)** and commented  A url like this will cause an error:  http://www.website.com/test.html?file=/path/to/file  My suggestion would be to do something like this:          int begin = urlPath.indexOf(""://"");         if (begin == -1) {             return null;         }              String body = urlPath.substring(begin + ""://"".length(), urlPath.length());         if (!body.contains(""/"")) {             return null;         }              int end = urlPath.indexOf('?');         if (end == -1) {             end = urlPath.length();         }              String url = urlPath.substring(0, end);         begin = url.lastIndexOf(""/"") + 1;         String filename = url.substring(begin, url.length());         int dotIndex = filename.lastIndexOf('.');         if (dotIndex != -1) {             filename = filename.substring(0, dotIndex);         }         return filename;    ---  **Affects:** 2.5.5","closed","type: bug,","spring-projects-issues","2008-08-22T07:33:04Z","2012-06-19T03:47:14Z"
"","9755","@Transactional annotation doesn't work for scanned component, again [SPR-5082]","**[Yuwei Zhao](https://jira.spring.io/secure/ViewProfile.jspa?name=wei)** opened **[SPR-5082](https://jira.spring.io/browse/SPR-5082?redirect=false)** and commented  Please see the following example:  ```java @Service @Transactional public class AccountService {      @Autowired     private AccountDao accountDao;      public void updateLoginInfo(Account account) {         accountDao.updateLoginInfo(account);         someOtherStatementsMightThrowException();     } } ```  And everything supports the annotation is configurated:  ```xml    ```  We use `@Service` annotation on service bean, that is, it could be autowired to any bean that depends on it.  But the `@Transactional` annotation doesn't work, until I remove `@Service` annotation and explicitly define the bean in context configuration xml:  ```xml  ```  I'm wondering if there is any step I missed, or it supposes to work like that? Thanks.  ---  **Affects:** 2.5 final  **Attachments:** - [sptest.zip](https://jira.spring.io/secure/attachment/14541/sptest.zip) (_4.04 MB_)  **Issue Links:** - #10953 Autowired can not work with `@Transactional`  10 votes, 16 watchers","closed","has: votes-jira,","spring-projects-issues","2008-08-13T03:15:11Z","2019-01-13T08:02:52Z"
"","9471","FileNotFoundException getting artifacts from S3 using spring-aws [SPR-4794]","**[Yuri de Wit](https://jira.spring.io/secure/ViewProfile.jspa?name=ydewit)** opened **[SPR-4794](https://jira.spring.io/browse/SPR-4794?redirect=false)** and commented  (sorry but I could not find a spring-aws component int he list above)  Although I am successfuly able to deploy artifacts to my S3 buckets, I am not able to get artifacts from it. This exception is what I see:  java.io.FileNotFoundException: /Users/yuri/.m2/repository/com/google/gdata/com.google.gdata.client/1.0.0/com.google.gdata.client-1.0.0.jar.tmp (No such file or directory) at java.io.FileOutputStream.open(Native Method) at java.io.FileOutputStream.\(FileOutputStream.java:179) at java.io.FileOutputStream.\(FileOutputStream.java:131) at org.springframework.aws.maven.TransferProgressFileOutputStream.\(TransferProgressFileOutputStream.java:35) at org.springframework.aws.maven.SimpleStorageServiceWagon.getResource(SimpleStorageServiceWagon.java:102) at org.springframework.aws.maven.AbstractWagon.get(AbstractWagon.java:158) at org.apache.maven.artifact.manager.DefaultWagonManager.getRemoteFile(DefaultWagonManager.java:462) at org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:347) at org.apache.maven.artifact.manager.DefaultWagonManager.getArtifact(DefaultWagonManager.java:302)  The reason is that the destination file passed to the SimpleStorageServiceWagon.getResource() points to a file whose parent folder doesnt exist. Not sure who's responsibility is for making sure that the destination folder exists, but I fixed it by adding too lines there:  Index: /Users/yuri/Projects/Workspace/frevvo/spring-aws-maven/src/main/java/org/springframework/aws/maven/SimpleStorageServiceWagon.java  ---  --- /Users/yuri/Projects/Workspace/frevvo/spring-aws-maven/src/main/java/org/springframework/aws/maven/SimpleStorageServiceWagon.java	(revision 12347) +++ /Users/yuri/Projects/Workspace/frevvo/spring-aws-maven/src/main/java/org/springframework/aws/maven/SimpleStorageServiceWagon.java	(working copy) @@ -99,6 +99,8 @@ OutputStream out = null; try { in = object.getDataInputStream(); +      if( !destination.getParentFile().exists() )  +                  destination.getParentFile().mkdirs();       out = new TransferProgressFileOutputStream(destination, progress);       byte[] buffer = new byte[1024];       int length;  ---  No further details from [SPR-4794](https://jira.spring.io/browse/SPR-4794?redirect=false)","closed","","spring-projects-issues","2008-05-09T06:35:45Z","2019-01-13T21:52:33Z"
"","9689","Provide options in ClassPathXmlApplicationContext to disable XSD Validation [SPR-5014]","**[Yohan Liyanage](https://jira.spring.io/secure/ViewProfile.jspa?name=yohan)** opened **[SPR-5014](https://jira.spring.io/browse/SPR-5014?redirect=false)** and commented  Disabling XSD validation provides a significant speed boost when the container starts up. Currently, ClassPathXmlApplicationContext does not provide a facility to disable XSD validation in a straight forward manner. Even though it is possible to do so by subclassing ClassPathXmlApplicationContext, it would be better to allow users to enable / disable XSD validation through the ClassPathXmlApplicationContext itself.  As of Spring 2.5, XSD validation is not required to the framework to function properly. [Ref: SPR-3894]  This can be done with a minor code change in ClassPathXmlApplicationContext as follows:  public class ClassPathXmlApplicationContext extends AbstractXmlApplicationContext {      private Resource[] configResources;     private boolean validation = true;		//  validation is enabled by default          protected void initBeanDefinitionReader(XmlBeanDefinitionReader beanDefinitionReader) {     	     	// If XSD validation is disabled     	if (! validation) {     		beanDefinitionReader.setValidationMode(XmlBeanDefinitionReader.VALIDATION_NONE);     		beanDefinitionReader.setNamespaceAware(true);     	}     	     }          // Provide overloaded constructors to enable / disable validation     public ClassPathXmlApplicationContext(String configLocation, boolean validation) throws BeansException {     	this(new String[] {configLocation}, true, null);     	this.validation = validation;     }          // < REST OF CODE OMMITED>   }   ---  **Affects:** 2.5.5  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-07-16T15:37:42Z","2019-05-06T22:00:42Z"
"","9591","CLONE -IllegalStateException thrown by JBoss 4.0.5.11 when PROPAGATION_REQUIRES_NEW used during active transaction in MessageBean with BMT [SPR-4916]","**[Yogesh](https://jira.spring.io/secure/ViewProfile.jspa?name=yogeshbhootada)** opened **[SPR-4916](https://jira.spring.io/browse/SPR-4916?redirect=false)** and commented  Deploy a MessageBean that is using BMT.  The following sequence of events in the onMessage() method will cause the IllegalStateException:  1. create TransactionTemplate with PROPAGATION_REQUIRED 2. in the execute do this:    2a. Connection conn = DataSourceUtils.getConnection(ds);    2b. DataSourceUtils.releaseConnection(conn, ds);    2c. call method that does the following:    I. create TransactionTemplate with PROPAGATION_REQUIRES_NEW    II. call execute and the exception is thrown.  Here is the debug and stacktrace:  12:03:50,703 INFO  [STDOUT] MyMessageBean got message! 12:03:50,705 INFO  [STDOUT] // obtain DataSource 12:03:50,707 INFO  [STDOUT] *** Create TransactionManager 12:03:50,900 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Retrieving JTA UserTransaction from JNDI location [java:comp/UserTransaction] 12:03:50,901 DEBUG [org.springframework.jndi.JndiTemplate] Looking up JNDI object with name [java:comp/UserTransaction] 12:03:50,981 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Retrieving JTA TransactionManager from JNDI location [java:/TransactionManager] 12:03:50,983 DEBUG [org.springframework.jndi.JndiTemplate] Looking up JNDI object with name [java:/TransactionManager] 12:03:50,985 INFO  [org.springframework.transaction.jta.JtaTransactionManager] Using JTA UserTransaction: org.jboss.ejb.EnterpriseContext$UserTransactionImpl@66d882 12:03:50,987 INFO  [org.springframework.transaction.jta.JtaTransactionManager] Using JTA TransactionManager: org.jboss.tm.TxManager@104e65 12:03:50,988 INFO  [STDOUT] *** Create TransactionTemplate 12:03:50,997 INFO  [STDOUT] *** Propagation=0 12:03:51,005 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Using transaction object [org.springframework.transaction.jta.JtaTransactionObject@401ab1] 12:03:51,007 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Creating new transaction with name [null] 12:03:51,017 DEBUG [org.springframework.transaction.support.TransactionSynchronizationManager] Initializing transaction synchronization 12:03:51,026 INFO  [STDOUT] *** doInTransaction org.springframework.transaction.support.DefaultTransactionStatus@bc60f2 12:03:51,056 DEBUG [org.springframework.jdbc.datasource.DataSourceUtils] Fetching JDBC Connection from DataSource 12:03:53,260 DEBUG [org.springframework.jdbc.datasource.DataSourceUtils] Registering transaction synchronization for JDBC Connection 12:03:53,419 DEBUG [org.springframework.transaction.support.TransactionSynchronizationManager] Bound value [org.springframework.jdbc.datasource.ConnectionHolder@2900c9] for key [org.jboss.resource.adapter.jdbc.WrapperDataSource@bf2c98] to thread [JMS SessionPool Worker-0] 12:03:53,420 INFO  [STDOUT] *** doInConnection 12:03:53,420 DEBUG [org.springframework.transaction.support.TransactionSynchronizationManager] Retrieved value [org.springframework.jdbc.datasource.ConnectionHolder@2900c9] for key [org.jboss.resource.adapter.jdbc.WrapperDataSource@bf2c98] bound to thread [JMS SessionPool Worker-0] 12:03:53,421 INFO  [STDOUT] === Create TransactionTemplate 2 12:03:53,422 INFO  [STDOUT] === Propagation=3 12:03:53,424 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Using transaction object [org.springframework.transaction.jta.JtaTransactionObject@1548ee] 12:03:53,424 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Suspending current transaction, creating new transaction with name [null] 12:03:53,425 DEBUG [org.springframework.transaction.support.TransactionSynchronizationManager] Removed value [org.springframework.jdbc.datasource.ConnectionHolder@2900c9] for key [org.jboss.resource.adapter.jdbc.WrapperDataSource@bf2c98] from thread [JMS SessionPool Worker-0] 12:03:53,433 DEBUG [org.springframework.transaction.support.TransactionSynchronizationManager] Clearing transaction synchronization 12:03:53,438 DEBUG [org.springframework.transaction.support.TransactionTemplate] Initiating transaction rollback on application exception java.lang.IllegalStateException: Trying to change transaction TransactionImpl:XidImpl[FormatId=257, GlobalId=samoa.local/20, BranchQual=, localId=20] in enlist! at org.jboss.resource.connectionmanager.TxConnectionManager$TxConnectionEventListener.enlist(TxConnectionManager.java:551) at org.jboss.resource.connectionmanager.TxConnectionManager.transactionStarted(TxConnectionManager.java:357) at org.jboss.resource.connectionmanager.CachedConnectionManager.userTransactionStarted(CachedConnectionManager.java:403) at org.jboss.ejb.EnterpriseContext$UserTransactionImpl.begin(EnterpriseContext.java:576) at org.springframework.transaction.jta.JtaTransactionManager.doJtaBegin(JtaTransactionManager.java:664) at org.springframework.transaction.jta.JtaTransactionManager.doBegin(JtaTransactionManager.java:622) at org.springframework.transaction.support.AbstractPlatformTransactionManager.handleExistingTransaction(AbstractPlatformTransactionManager.java:320) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:262) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:111) at com.springdeveloper.ejb.MyMessageBean.testSpring2(MyMessageBean.java:95) at com.springdeveloper.ejb.MyMessageBean.access$100(MyMessageBean.java:24) at com.springdeveloper.ejb.MyMessageBean$1.doInTransactionWithoutResult(MyMessageBean.java:80) at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:114) at com.springdeveloper.ejb.MyMessageBean.testSpring(MyMessageBean.java:71) at com.springdeveloper.ejb.MyMessageBean.onMessage(MyMessageBean.java:54) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.invocation.Invocation.performCall(Invocation.java:345) at org.jboss.ejb.MessageDrivenContainer$ContainerInterceptor.invoke(MessageDrivenContainer.java:475) at org.jboss.resource.connectionmanager.CachedConnectionInterceptor.invoke(CachedConnectionInterceptor.java:149) at org.jboss.ejb.plugins.CallValidationInterceptor.invoke(CallValidationInterceptor.java:48) at org.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext(AbstractTxInterceptor.java:106) at org.jboss.ejb.plugins.AbstractTxInterceptorBMT.invokeNext(AbstractTxInterceptorBMT.java:158) at org.jboss.ejb.plugins.MessageDrivenTxInterceptorBMT.invoke(MessageDrivenTxInterceptorBMT.java:32) at org.jboss.ejb.plugins.MessageDrivenInstanceInterceptor.invoke(MessageDrivenInstanceInterceptor.java:101) at org.jboss.ejb.plugins.RunAsSecurityInterceptor.invoke(RunAsSecurityInterceptor.java:94) at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:192) at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFactoryFinderInterceptor.java:122) at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenContainer.java:389) at org.jboss.ejb.Container.invoke(Container.java:873) at org.jboss.ejb.plugins.jms.JMSContainerInvoker.invoke(JMSContainerInvoker.java:1077) at org.jboss.ejb.plugins.jms.JMSContainerInvoker$MessageListenerImpl.onMessage(JMSContainerInvoker.java:1379) at org.jboss.jms.asf.StdServerSession.onMessage(StdServerSession.java:256) at org.jboss.mq.SpyMessageConsumer.sessionConsumerProcessMessage(SpyMessageConsumer.java:904) at org.jboss.mq.SpyMessageConsumer.addMessage(SpyMessageConsumer.java:160) at org.jboss.mq.SpySession.run(SpySession.java:333) at org.jboss.jms.asf.StdServerSession.run(StdServerSession.java:180) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor.java:743) at java.lang.Thread.run(Thread.java:613) 12:03:53,447 DEBUG [org.springframework.transaction.jta.JtaTransactionManager] Triggering beforeCompletion synchronization 12:03:53,448 ERROR [org.springframework.transaction.support.TransactionTemplate] Application exception overridden by rollback exception java.lang.IllegalStateException: Trying to change transaction TransactionImpl:XidImpl[FormatId=257, GlobalId=samoa.local/20, BranchQual=, localId=20] in enlist! at org.jboss.resource.connectionmanager.TxConnectionManager$TxConnectionEventListener.enlist(TxConnectionManager.java:551) at org.jboss.resource.connectionmanager.TxConnectionManager.transactionStarted(TxConnectionManager.java:357) at org.jboss.resource.connectionmanager.CachedConnectionManager.userTransactionStarted(CachedConnectionManager.java:403) at org.jboss.ejb.EnterpriseContext$UserTransactionImpl.begin(EnterpriseContext.java:576) at org.springframework.transaction.jta.JtaTransactionManager.doJtaBegin(JtaTransactionManager.java:664) at org.springframework.transaction.jta.JtaTransactionManager.doBegin(JtaTransactionManager.java:622) at org.springframework.transaction.support.AbstractPlatformTransactionManager.handleExistingTransaction(AbstractPlatformTransactionManager.java:320) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:262) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:111) at com.springdeveloper.ejb.MyMessageBean.testSpring2(MyMessageBean.java:95) at com.springdeveloper.ejb.MyMessageBean.access$100(MyMessageBean.java:24) at com.springdeveloper.ejb.MyMessageBean$1.doInTransactionWithoutResult(MyMessageBean.java:80) at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:114) at com.springdeveloper.ejb.MyMessageBean.testSpring(MyMessageBean.java:71) at com.springdeveloper.ejb.MyMessageBean.onMessage(MyMessageBean.java:54) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.invocation.Invocation.performCall(Invocation.java:345) at org.jboss.ejb.MessageDrivenContainer$ContainerInterceptor.invoke(MessageDrivenContainer.java:475) at org.jboss.resource.connectionmanager.CachedConnectionInterceptor.invoke(CachedConnectionInterceptor.java:149) at org.jboss.ejb.plugins.CallValidationInterceptor.invoke(CallValidationInterceptor.java:48) at org.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext(AbstractTxInterceptor.java:106) at org.jboss.ejb.plugins.AbstractTxInterceptorBMT.invokeNext(AbstractTxInterceptorBMT.java:158) at org.jboss.ejb.plugins.MessageDrivenTxInterceptorBMT.invoke(MessageDrivenTxInterceptorBMT.java:32) at org.jboss.ejb.plugins.MessageDrivenInstanceInterceptor.invoke(MessageDrivenInstanceInterceptor.java:101) at org.jboss.ejb.plugins.RunAsSecurityInterceptor.invoke(RunAsSecurityInterceptor.java:94) at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:192) at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFactoryFinderInterceptor.java:122) at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenContainer.java:389) at org.jboss.ejb.Container.invoke(Container.java:873) at org.jboss.ejb.plugins.jms.JMSContainerInvoker.invoke(JMSContainerInvoker.java:1077) at org.jboss.ejb.plugins.jms.JMSContainerInvoker$MessageListenerImpl.onMessage(JMSContainerInvoker.java:1379) at org.jboss.jms.asf.StdServerSession.onMessage(StdServerSession.java:256) at org.jboss.mq.SpyMessageConsumer.sessionConsumerProcessMessage(SpyMessageConsumer.java:904) at org.jboss.mq.SpyMessageConsumer.addMessage(SpyMessageConsumer.java:160) at org.jboss.mq.SpySession.run(SpySession.java:333) at org.jboss.jms.asf.StdServerSession.run(StdServerSession.java:180) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor.java:743) at java.lang.Thread.run(Thread.java:613) 12:03:53,461 INFO  [org.jboss.resource.connectionmanager.CachedConnectionManager] Closing a connection for you.  Please close them yourself: org.jboss.resource.adapter.jdbc.WrappedConnection@d698d3 java.lang.Throwable: STACKTRACE at org.jboss.resource.connectionmanager.CachedConnectionManager.registerConnection(CachedConnectionManager.java:333) at org.jboss.resource.connectionmanager.BaseConnectionManager2.allocateConnection(BaseConnectionManager2.java:482) at org.jboss.resource.connectionmanager.BaseConnectionManager2$ConnectionManagerProxy.allocateConnection(BaseConnectionManager2.java:894) at org.jboss.resource.adapter.jdbc.WrapperDataSource.getConnection(WrapperDataSource.java:73) at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:107) at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:77) at com.springdeveloper.ejb.MyMessageBean$1.doInTransactionWithoutResult(MyMessageBean.java:76) at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:114) at com.springdeveloper.ejb.MyMessageBean.testSpring(MyMessageBean.java:71) at com.springdeveloper.ejb.MyMessageBean.onMessage(MyMessageBean.java:54) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.invocation.Invocation.performCall(Invocation.java:345) at org.jboss.ejb.MessageDrivenContainer$ContainerInterceptor.invoke(MessageDrivenContainer.java:475) at org.jboss.resource.connectionmanager.CachedConnectionInterceptor.invoke(CachedConnectionInterceptor.java:149) at org.jboss.ejb.plugins.CallValidationInterceptor.invoke(CallValidationInterceptor.java:48) at org.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext(AbstractTxInterceptor.java:106) at org.jboss.ejb.plugins.AbstractTxInterceptorBMT.invokeNext(AbstractTxInterceptorBMT.java:158) at org.jboss.ejb.plugins.MessageDrivenTxInterceptorBMT.invoke(MessageDrivenTxInterceptorBMT.java:32) at org.jboss.ejb.plugins.MessageDrivenInstanceInterceptor.invoke(MessageDrivenInstanceInterceptor.java:101) at org.jboss.ejb.plugins.RunAsSecurityInterceptor.invoke(RunAsSecurityInterceptor.java:94) at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:192) at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFactoryFinderInterceptor.java:122) at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenContainer.java:389) at org.jboss.ejb.Container.invoke(Container.java:873) at org.jboss.ejb.plugins.jms.JMSContainerInvoker.invoke(JMSContainerInvoker.java:1077) at org.jboss.ejb.plugins.jms.JMSContainerInvoker$MessageListenerImpl.onMessage(JMSContainerInvoker.java:1379) at org.jboss.jms.asf.StdServerSession.onMessage(StdServerSession.java:256) at org.jboss.mq.SpyMessageConsumer.sessionConsumerProcessMessage(SpyMessageConsumer.java:904) at org.jboss.mq.SpyMessageConsumer.addMessage(SpyMessageConsumer.java:160) at org.jboss.mq.SpySession.run(SpySession.java:333) at org.jboss.jms.asf.StdServerSession.run(StdServerSession.java:180) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor.java:743) at java.lang.Thread.run(Thread.java:613) 12:03:53,473 ERROR [org.jboss.ejb.plugins.MessageDrivenTxInterceptorBMT] Application error: BMT stateless bean MyMessageBean should complete transactions before returning (ejb1.1 spec, 11.6.1) 12:03:53,478 ERROR [org.jboss.ejb.plugins.jms.JMSContainerInvoker] Exception in JMSCI message listener javax.ejb.EJBException: null; CausedByException is: Application error: BMT stateless bean MyMessageBean should complete transactions before returning (ejb1.1 spec, 11.6.1) at org.jboss.ejb.plugins.LogInterceptor.handleException(LogInterceptor.java:411) at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:196) at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFactoryFinderInterceptor.java:122) at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenContainer.java:389) at org.jboss.ejb.Container.invoke(Container.java:873) at org.jboss.ejb.plugins.jms.JMSContainerInvoker.invoke(JMSContainerInvoker.java:1077) at org.jboss.ejb.plugins.jms.JMSContainerInvoker$MessageListenerImpl.onMessage(JMSContainerInvoker.java:1379) at org.jboss.jms.asf.StdServerSession.onMessage(StdServerSession.java:256) at org.jboss.mq.SpyMessageConsumer.sessionConsumerProcessMessage(SpyMessageConsumer.java:904) at org.jboss.mq.SpyMessageConsumer.addMessage(SpyMessageConsumer.java:160) at org.jboss.mq.SpySession.run(SpySession.java:333) at org.jboss.jms.asf.StdServerSession.run(StdServerSession.java:180) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor.java:743) at java.lang.Thread.run(Thread.java:613) java.rmi.RemoteException: Application error: BMT stateless bean MyMessageBean should complete transactions before returning (ejb1.1 spec, 11.6.1) at org.jboss.ejb.plugins.AbstractTxInterceptorBMT.checkStatelessDone(AbstractTxInterceptorBMT.java:225) at org.jboss.ejb.plugins.AbstractTxInterceptorBMT.invokeNext(AbstractTxInterceptorBMT.java:165) at org.jboss.ejb.plugins.MessageDrivenTxInterceptorBMT.invoke(MessageDrivenTxInterceptorBMT.java:32) at org.jboss.ejb.plugins.MessageDrivenInstanceInterceptor.invoke(MessageDrivenInstanceInterceptor.java:101) at org.jboss.ejb.plugins.RunAsSecurityInterceptor.invoke(RunAsSecurityInterceptor.java:94) at org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:192) at org.jboss.ejb.plugins.ProxyFactoryFinderInterceptor.invoke(ProxyFactoryFinderInterceptor.java:122) at org.jboss.ejb.MessageDrivenContainer.internalInvoke(MessageDrivenContainer.java:389) at org.jboss.ejb.Container.invoke(Container.java:873) at org.jboss.ejb.plugins.jms.JMSContainerInvoker.invoke(JMSContainerInvoker.java:1077) at org.jboss.ejb.plugins.jms.JMSContainerInvoker$MessageListenerImpl.onMessage(JMSContainerInvoker.java:1379) at org.jboss.jms.asf.StdServerSession.onMessage(StdServerSession.java:256) at org.jboss.mq.SpyMessageConsumer.sessionConsumerProcessMessage(SpyMessageConsumer.java:904) at org.jboss.mq.SpyMessageConsumer.addMessage(SpyMessageConsumer.java:160) at org.jboss.mq.SpySession.run(SpySession.java:333) at org.jboss.jms.asf.StdServerSession.run(StdServerSession.java:180) at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor.java:743) at java.lang.Thread.run(Thread.java:613)  ---  **Affects:** 1.2.5  **Issue Links:** - #6084 IllegalStateException thrown by JBoss 4.0.3 when PROPAGATION_REQUIRES_NEW used during active transaction in MessageBean with BMT (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2008-06-12T13:40:39Z","2019-01-12T16:50:51Z"
"","9849","Add testing support for annotation MVC [SPR-5176]","**[Yaozong Zhu](https://jira.spring.io/secure/ViewProfile.jspa?name=zyzjaffery)** opened **[SPR-5176](https://jira.spring.io/browse/SPR-5176?redirect=false)** and commented  As new annotation-based controllers are ideally all POJOs , I have to invoke every method directly in my controller test class instead of a call ""handleRequest(MockHttpServletRequest, MockHttpServletResponse)"" on controller. This makes my test lose the ability to check if URLs map to correct methods or not.  Also because of the rich flexible signatures for `@RequestMapping` methods, I can't find mock object for SessionStatus class.  I don't have access to implicit objects which are not part of method signature either. For example: an object is implicitly put into HttpSession , but session is not part of my method signature, so that I can't access it in the test,  then fail to test if certain object is put into it or not.   ---  **Affects:** 2.5.5  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-09-23T22:45:34Z","2014-08-18T10:57:31Z"
"","9436","Make Spring ContextTest annotation support  WebApplicationContext [SPR-4759]","**[Yaozong Zhu](https://jira.spring.io/secure/ViewProfile.jspa?name=zyzjaffery)** opened **[SPR-4759](https://jira.spring.io/browse/SPR-4759?redirect=false)** and commented  I am trying to integrate my tests into Spring 2.5 availing of TestContext annotations. But I met a support issue. The followings are relevant codes:  `@RunWith`(SpringJUnit4ClassRunner.class) `@TestExecutionListeners`(value = { DependencyInjectionTestExecutionListener.class, DirtiesContextTestExecutionListener.class, TransactionalTestExecutionListener.class }) `@ContextConfiguration`(locations = { ""classpath:/applicationContext-resources.xml"", ""classpath*:/applicationContext.xml"" }, inheritLocations = true) `@TransactionConfiguration`(transactionManager = ""transactionManager"", defaultRollback = true) `@Transactional` public abstract class BaseTestCase extends AbstractJUnit4SpringContextTests {...}  `@ContextConfiguration`(locations = { ""classpath:/applicationContext-jmx.xml"", ""/WEB-INF/applicationContext*.xml"", ""/WEB-INF/dispatcher-servlet.xml"" }, inheritLocations = true) public abstract class BaseWebControllerTestCase extends BaseTestCase{...}  public class UserFormControllerTest extends BaseWebControllerTestCase{ `@Autowired` private UserFormController c = null;  `@Test` ... }  java.lang.IllegalStateException: WebApplicationObjectSupport instance [xxx.UserFormController@123961b] does not run in a WebApplicationContext but in: org.springframework.context.support.GenericApplicationContext@1fc2fb: display name [org.springframework.context.support.GenericApplicationContext@1fc2fb]; startup date [Mon Apr 28 15:35:37 BST 2008]; root of context hierarchy at org.springframework.web.context.support.WebApplicationObjectSupport.getWebApplicationContext(WebApplicationObjectSupport.java:101) at org.springframework.web.context.support.WebApplicationObjectSupport.getServletContext(WebApplicationObjectSupport.java:115) ...  ---  **Affects:** 2.5.2  **Issue Links:** - #9917 Support loading WebApplicationContexts with the TestContext Framework (_**""duplicates""**_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-28T02:01:44Z","2019-01-11T18:00:04Z"
"","9390","constructor-arg broken when dealing with multiple constructors ??? [SPR-4713]","**[Yannick Menager](https://jira.spring.io/secure/ViewProfile.jspa?name=ymenager)** opened **[SPR-4713](https://jira.spring.io/browse/SPR-4713?redirect=false)** and commented  Ok i've had this issue before, in code which was working with a much older version of spring (pre-2.5), and which broke when upgrading to 2.5+. in the past I've worked around in the past by not using constructors, but this is really driving me crazy since this is really completely basic functionality and i can't figure out why it's not working :-(  I've got a very simple bean created using constructor:                      The class has several contructors.. The one i'm obviously interested is the single argument that takes a datasource, but there's also others like [datasource, username, password].  This however fails with  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'dbUnit' defined in class path resource [com/telstra/sdfcore/unifieduserprofile/application/usermananagement-test.xml]: Unsatisfied dependency expressed through constructor argument with index 1 of type [java.lang.String]: Ambiguous constructor argument types - did you specify the correct bean references as constructor arguments?  So it seems to be trying to inject dependencies into one of the other contructors of that class ??? But i'm just telling him to use the single constructor one... i tried without specifying the index, without the type, with autowire=""no"" ... nothing works..... :-(   ---  **Affects:** 2.5.1, 2.5.3","closed","in: core,","spring-projects-issues","2008-04-16T14:29:13Z","2019-01-11T17:43:09Z"
"","9449","Circular bean reference not detected on RMI server config file [SPR-4772]","**[yann luppo](https://jira.spring.io/secure/ViewProfile.jspa?name=yluppo)** opened **[SPR-4772](https://jira.spring.io/browse/SPR-4772?redirect=false)** and commented  Getting a connection refused exception when I the problem was a circular reference in the server RMI exporter bean.  Here is an extract of where the problem was:  \ 		\ 		\ 		\ 		\ 	\ I guess in that case the circular reference problem within the same bean should be picked up.   ---  **Affects:** 2.5.4  **Attachments:** - [src.zip](https://jira.spring.io/secure/attachment/14015/src.zip) (_87.23 kB_)","closed","in: web,","spring-projects-issues","2008-05-02T05:44:04Z","2019-01-11T17:43:43Z"
"","9465","NPE in GenericTypeResolver when using Spring 2.5 on IBM JDK 1.6 [SPR-4788]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-4788](https://jira.spring.io/browse/SPR-4788?redirect=false)** and commented  (spring2.5 && ibm jdk5) ||( spring2.0.8 && ibm jdk6) is fine.  spring2.5 && ibm jdk6 will produce a NPE  2008-05-08 15:27:54,739 [ContainerBackgroundProcessor[StandardEngine[Catalina]]] [org.springframework.web.context.ContextLoader] [ERROR]   - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0': Initialization of bean failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:478) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(AccessController.java:224) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:516) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:363) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3843) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4350) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:829) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:718) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:490) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1215) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:293) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1337) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1601) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1590) at java.lang.Thread.run(Thread.java:735) Caused by: java.lang.NullPointerException at org.springframework.core.GenericTypeResolver.getTypeVariableMap(GenericTypeResolver.java:144) at org.springframework.core.GenericTypeResolver.resolveReturnType(GenericTypeResolver.java:93) at org.springframework.beans.GenericTypeAwarePropertyDescriptor.getPropertyType(GenericTypeAwarePropertyDescriptor.java:58) at java.beans.PropertyDescriptor.setWriteMethod(Unknown Source) at java.beans.PropertyDescriptor.\(Unknown Source) at org.springframework.beans.GenericTypeAwarePropertyDescriptor.\(GenericTypeAwarePropertyDescriptor.java:47) at org.springframework.beans.CachedIntrospectionResults.\(CachedIntrospectionResults.java:250) at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:144) at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:252) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:380) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1287) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1248) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1008) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) ... 29 more   ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-05-07T18:40:40Z","2012-06-19T03:47:03Z"
"","8987","Allow Hibernate LocalSessionFactoryBean to re-initialize the underlying SessionFactory [SPR-4308]","**[Yanming Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=quaff)** opened **[SPR-4308](https://jira.spring.io/browse/SPR-4308?redirect=false)** and commented  and set field 'org.springframework.orm.hibernate3.AbstractSessionFactoryBean.sessionFactory' protected, set this field's value in method 'org.springframework.orm.hibernate3.LocalSessionFactoryBean.buildSessionFactory()'  so we could rebuild sessionFactory easily,other wise we need to do this.  Method method = LocalSessionFactoryBean.class.getDeclaredMethod(""buildSessionFactory""); method.setAccessible(true); sf = (SessionFactory) method.invoke(lsfb); Field field = AbstractSessionFactoryBean.class.getDeclaredField(""sessionFactory""); field.setAccessible(true); field.set(lsfb, sf);  dosomethingwith(sf);   ---  **Affects:** 2.5 final  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-01-07T13:50:49Z","2011-03-18T21:45:27Z"
"","9804","HibernateTemplate is missing the functionality to easy execute named queries [SPR-5131]","**[yaniv adler](https://jira.spring.io/secure/ViewProfile.jspa?name=yaniv.adler)** opened **[SPR-5131](https://jira.spring.io/browse/SPR-5131?redirect=false)** and commented  A set of method for executing namedQuery (executeUpdate) is a simple is missing. For example:  1. public int executeNamedQuery(String queryName) 2. public int excuteNamedQueryAndNamedParam(String queryName,    String[] paramNames,    Object[] values)  where the return value is the number of updated row.  The idea is like in the findByNamedQuery\ method set.   --- No further details from [SPR-5131](https://jira.spring.io/browse/SPR-5131?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-08-31T17:06:32Z","2012-06-19T09:36:12Z"
"","9231","Aspects defined in META-INF/aop.xml cannot be triggered while running in Jetty [SPR-4554]","**[YangJie](https://jira.spring.io/secure/ViewProfile.jspa?name=yjcoffee)** opened **[SPR-4554](https://jira.spring.io/browse/SPR-4554?redirect=false)** and commented  I run petclinic using JPA(HibernateJpaVendorAdapter or OpenJpaVendorAdapter) on Tomcat 6, everything is fine(having spring-tomcat-weaver-2.5.2.jar put into tomcat's lib). But while I change into Jetty 6.1.6 and add VM arguments ""-javaagent:/spring-agent-2.5.2.jar"", all of the Aspects defined in META-INF/aop.xml cannot be triggered such  as UsageLogAspect in sample and also AnnotationTransactionAspect, the latter of which lead to application failed to access methods of JPA EntityManagerClinic, exception like ""HibernateSystemException: Session is closed!"" or ""org.apache.openjpa.persistence.InvalidStateException: The context has been closed."" is thrown out.   ---  **Affects:** 2.5.2","closed","in: core,","spring-projects-issues","2008-03-06T13:03:22Z","2019-01-13T21:53:12Z"
"","9169","Conversions.getVariableName for openjpa enhanced value error. [SPR-4491]","**[YangJie](https://jira.spring.io/secure/ViewProfile.jspa?name=yjcoffee)** opened **[SPR-4491](https://jira.spring.io/browse/SPR-4491?redirect=false)** and commented  I run spring sample 'petclinic' with application-jpa.xml configuration and using OpenJpaVendorAdapter or HibernateJpaVendorAdapter, everything is normal. But I change orm.xml driven to annotation driven(modify persistence.xml and remove orm.xml, and annotations in every entitybeans), only can HibernateJpaVendorAdapter be running normally. Using OpenJpaVendorAdapter results in emty JSP record. I debug and trace into ModelMap.addAttribute(Object attributeValue), find the code below: return addAttribute(Conventions.getVariableName(attributeValue), attributeValue);  The attributeValue request by ""/vets.do"" is org.apache.openjpa.kernel.DelegatingResultList collection, and I step into Conversions.getVariableName(Object value) and find: ... } else if (value instanceof Collection) { Collection collection = (Collection) value; ... Object valueToCheck = peekAhead(collection);      // valueToCheck is openjpa enhanced value valueClass = getClassForValue(valueToCheck);   // valueClass is 'org.apache.openjpa.enhance.org$springframework$samples$petclinic$Vet$pcsubclass' pluralize = true; } else { ... }  String name = ClassUtils.getShortNameAsProperty(valueClass);   // value of name is 'pcsubclass' return (pluralize ? pluralize(name) : name);    // will return 'pcsubclassList', whitch should be 'vetList' } The problem is displayed above comments, as Annotation driven JPA using OpenJPA would return enhanced object such as ''org.apache.openjpa.enhance.org$springframework$samples$petclinic$Vet$pcsubclass' but orm.xml metadata driven  or using Hibernate(either annotation driven or xml driven) would return normal object such as 'org.springframework.samples.petclinic.Vet'. So should class org.springframework.core.Conventions have more logic to process this case in method getVariableName()?   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-23T00:13:32Z","2012-06-19T03:46:39Z"
"","9136","Component-scan does not work correctly for annotated service SimpleJdbcClinic in sample 'petclinic' [SPR-4458]","**[YangJie](https://jira.spring.io/secure/ViewProfile.jspa?name=yjcoffee)** opened **[SPR-4458](https://jira.spring.io/browse/SPR-4458?redirect=false)** and commented  I attempt to use  component-scan to find clinic service  in place of configuring it in applicationContext-jdbc.xml in sample 'petclinic':              but it doesn't work:  2008-02-13 15:58:48,703 ERROR [org.springframework.web.servlet.DispatcherServlet] - \org.springframework.beans.factory.UnsatisfiedDependencyException:   Error creating bean with name 'addOwnerForm': Unsatisfied dependency expressed through constructor argument with index 0 of type [org.springframework.samples.petclinic.Clinic]: No unique bean of type [org.springframework.samples.petclinic.Clinic] is defined: Unsatisfied dependency of type [interface org.springframework.samples.petclinic.Clinic]: expected at least 1 matching bean   ...  it reports that the application can not find a bean of type [org.springframework.samples.petclinic.Clinic].  I try to debug it with spring source files, find metaAnntationMap of AnnotationMetadataReadingVisitor returned by  org.springframework.core.type.classreading.getAnnotationMetadata() for resource[../SimpleJdbcClinic.class] does not contains any annotation, but the class SimpleJdbcClinic is annotated with `@Service` indeed...  ---  I try to annotated annother bean CallMonitoringAspect： `@ManagedResource`(""petclinic:type=CallMonitor"") `@Component` `@Aspect` public class CallMonitoringAspect { ... }  and modify the configuration in applicationContext-jdbc.xml:              but the aspect bean works as an MBean normally, and I am confused then...  ---  **Affects:** 2.5.1  **Issue Links:** - #9003 component scanning incorrectly excludes classes","closed","in: core,","spring-projects-issues","2008-02-12T18:38:32Z","2019-01-13T08:05:26Z"
"","9733","@RequestMapping: convention-based URL mapping at controller class level [SPR-5058]","**[Yang Lifan](https://jira.spring.io/secure/ViewProfile.jspa?name=yanglifan)** opened **[SPR-5058](https://jira.spring.io/browse/SPR-5058?redirect=false)** and commented  I think Spring MVC URL mapping is a disadvantage for Spring Web. ControllerClassNameHandlerMapping and BeanNameHandlerMapping are a little agile, but they can only map the url to the class level, can not support the method level.  In Spring MVC 2.5, DefaultAnnotationHandlerMapping is a new way for URL Mapping. Developers can use `@RequestMapping` to map a url to a class level or a method level. But the url is hard coded. And the url mapping value even has the url request suffix.  http://jira.springframework.org/browse/SPR-4125 The opinion in this report is valuable. Maybe there is a better solution. Whatever, currently, the url mapping strategy in Spring MVC need to be improved.  ---  **Affects:** 2.5.5  **Issue Links:** - #8804 Add convention-over-configuration support for `@RequestMapping` - #9097 Comprehensive REST Support","closed","type: enhancement,","spring-projects-issues","2008-08-04T22:03:36Z","2019-01-13T08:02:59Z"
"","9700","Spring JSP tags should support multiple form objects within the same form [SPR-5025]","**[Yang Lifan](https://jira.spring.io/secure/ViewProfile.jspa?name=yanglifan)** opened **[SPR-5025](https://jira.spring.io/browse/SPR-5025?redirect=false)** and commented  Currently, Spring MVC only support single command object to manipulate the form on the page. Spring MVC always parses the first part of value in Path attribute of  element as the property of the command object.  I think if Spring MVC can support multiple objects value bind on a single page, it will be great. And it is easy to be done. Just need to modify the way to parse the value in Path attribute of element like .  If Spring MVC can support multiple objects value bind on single page, it will more flexible.   ---  **Affects:** 2.5.4  22 votes, 21 watchers","closed","has: votes-jira,","spring-projects-issues","2008-07-21T19:06:46Z","2015-09-22T17:34:39Z"
"","9406","Provide ParserContext to NamespaceHandler.init() [SPR-4729]","**[Yan Pujante](https://jira.spring.io/secure/ViewProfile.jspa?name=frenchyan)** opened **[SPR-4729](https://jira.spring.io/browse/SPR-4729?redirect=false)** and commented  Hello  Is there a reason why NamespaceHandler.init() does not take any arguments ? I would like to do some initializations when my handler is initialized. The 2 other methos takes a ParserContext argument which gives you access to the bean registry for example.  BeanDefinition parse(Element element, ParserContext parserContext); BeanDefinitionHolder decorate(Node source, BeanDefinitionHolder definition, ParserContext parserContext);  It would be great to add another init method with the following api (or change the existing one) in this manner void init(ParserContext parserContext);  Thanks   ---  **Affects:** 2.5.3  **Attachments:** - [namespaceHandler.patch](https://jira.spring.io/secure/attachment/13989/namespaceHandler.patch) (_12.76 kB_)","closed","type: enhancement,","spring-projects-issues","2008-04-19T03:40:45Z","2012-06-19T09:36:30Z"
"","9177","Documentation - Marker Interface Confusion [SPR-4499]","**[Yagiz Erkan](https://jira.spring.io/secure/ViewProfile.jspa?name=yagiz)** opened **[SPR-4499](https://jira.spring.io/browse/SPR-4499?redirect=false)** and commented  Here is an excerpt from the 3rd Chapter of the official Spring Framework documentation:  ---  3.5.1. Lifecycle callbacks The Spring Framework provides several marker interfaces to change the behavior of your bean in the container; they include InitializingBean and DisposableBean.  ---  I think the above-mentioned excerpt is confusing because InitializingBean and DisposableBean don't conform to the typical definition of a Marker Interface as they both contain behavior (methods).  ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-02-25T04:13:54Z","2019-01-13T21:53:20Z"
"","9370","Provide a factory bean generating proxies to resolve messages in a strongly-typed way [SPR-4693]","**[Xavier Dury](https://jira.spring.io/secure/ViewProfile.jspa?name=kalgon)** opened **[SPR-4693](https://jira.spring.io/browse/SPR-4693?redirect=false)** and commented  Hi,  I've been using a simple class that generates proxies that can leverage spring MessageSources without being coupled to the spring API. To do that, I simply define an interface with a method for each message, the arguments of those methods representing the parameters of the message. The invocation handler used to create this proxy simply delegates the message resolving part to a MessageSource.  This is very useful when you have services which really need to generate messages at their level (for example: email sending, rcp).  So I thought I could share it if other people would happen to have a similar need. Of course, it needs to be polished by some spring expert to match spring overall quality ;-)  Xavier   ---  **Attachments:** - [MessagesFactoryBean.java](https://jira.spring.io/secure/attachment/13921/MessagesFactoryBean.java) (_3.38 kB_)","closed","type: enhancement,","spring-projects-issues","2008-04-11T06:35:57Z","2012-06-19T09:36:17Z"
"","9829","Support use of @Configurable mechanism across multiple OSGi bundles [SPR-5156]","**[Wojciech Durczyński](https://jira.spring.io/secure/ViewProfile.jspa?name=avatah)** opened **[SPR-5156](https://jira.spring.io/browse/SPR-5156?redirect=false)** and commented  In OSGI `@Configurable` mechanism works well only when used in one bundle. If there is  in application contexts of more then one bundle, the AnnotationBeanConfigurerAspect (single instance) is injected with two different BeanConfigurerSupport objects in non deterministic order. Bundle whose BeanFactory is injected to aspect most recently works well - others don't work at all.  Is there any work around for this problem?  ---  **Affects:** 2.5.5  **Issue Links:** - #10074 AnnotationBeanConfigurerAspect is created as a singleton and cannot be shared across multiple contexts (_**""duplicates""**_) - #10074 AnnotationBeanConfigurerAspect is created as a singleton and cannot be shared across multiple contexts (_**""is duplicated by""**_)  15 votes, 20 watchers","closed","has: votes-jira,","spring-projects-issues","2008-09-15T18:31:38Z","2019-01-11T15:36:40Z"
"","9127","AnnotationBeanConfigurerAspect doesn't work with AspectJ 1.6.0 [SPR-4449]","**[Wojciech Durczyński](https://jira.spring.io/secure/ViewProfile.jspa?name=avatah)** opened **[SPR-4449](https://jira.spring.io/browse/SPR-4449?redirect=false)** and commented  I'm using  aspectjweaver in version 1.6.0.20080125213731 as a javaagent. It's weird but spring-agent.jar doesn't work for me. When aspectjweaver tries to parse compiled aspects from spring-aspects.jar (version 2.5.1) I've got an error:  [org.springframework.bundle.spring.aspects] warning register definition failed -- (BCException) malformed org.aspectj.weaver.PointcutDeclaration attribute java.io.EOFException  malformed org.aspectj.weaver.PointcutDeclaration attribute java.io.EOFException  org.aspectj.weaver.BCException: malformed org.aspectj.weaver.PointcutDeclaration attribute java.io.EOFException      at org.aspectj.weaver.AjAttribute.read(AjAttribute.java:127)     at org.aspectj.weaver.bcel.BcelAttributes.readAjAttributes(BcelAttributes.java:66)     at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttributesUnpacked(BcelObjectType.java:312)     at org.aspectj.weaver.bcel.BcelObjectType.(BcelObjectType.java:142)     at org.aspectj.weaver.bcel.BcelWorld.buildBcelDelegate(BcelWorld.java:360)     at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:343)     at org.aspectj.weaver.ltw.LTWWorld.resolveDelegate(LTWWorld.java:97)     at org.aspectj.weaver.World.resolveToReferenceType(World.java:378)     at org.aspectj.weaver.World.resolve(World.java:271)     at org.aspectj.weaver.bcel.BcelWeaver.addLibraryAspect(BcelWeaver.java:165)     at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects(ClassLoaderWeavingAdaptor.java:399)     at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions(ClassLoaderWeavingAdaptor.java:240)     at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize(ClassLoaderWeavingAdaptor.java:152)     at org.aspectj.osgi.weaver.loadtime.OSGiWeavingAdaptor.initialize(OSGiWeavingAdaptor.java:53)     at org.aspectj.osgi.service.weaving.WeavingService.ensureAdaptorInit(WeavingService.java:75)     at org.aspectj.osgi.service.weaving.WeavingService.getKey(WeavingService.java:82)     at org.aspectj.osgi.AspectJAdaptorFactory.getCachingService(AspectJAdaptorFactory.java:121)     at org.aspectj.osgi.AspectJAdaptor.initialize(AspectJAdaptor.java:96)     at org.aspectj.osgi.AspectJAdaptor.findClass(AspectJAdaptor.java:139)     at org.aspectj.osgi.hooks.AspectJBundleFile.getEntry(AspectJBundleFile.java:67)     at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl(ClasspathManager.java:452)     at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl(ClasspathManager.java:430)     at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:413)     at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:189)     at org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass(BundleLoader.java:340)     at org.eclipse.osgi.framework.internal.core.SingleSourcePackage.loadClass(SingleSourcePackage.java:37)     at org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal(BundleLoader.java:415)     at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:369)     at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:357)     at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83)     at java.lang.ClassLoader.loadClass(ClassLoader.java:251)     at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:182)     at java.lang.ClassLoader.loadClass(ClassLoader.java:251)     at java.beans.Introspector.instantiate(Introspector.java:1460)     at java.beans.Introspector.findExplicitBeanInfo(Introspector.java:410)     at java.beans.Introspector.(Introspector.java:359)     at java.beans.Introspector.getBeanInfo(Introspector.java:159)     at org.springframework.beans.CachedIntrospectionResults.(CachedIntrospectionResults.java:242)     at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:141)     at org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:247)     at org.springframework.beans.BeanWrapperImpl.getPropertyDescriptors(BeanWrapperImpl.java:254)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.filterPropertyDescriptorsForDependencyCheck(AbstractAutowireCapableBeanFactory.java:1059)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:922)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383)     at java.security.AccessController.doPrivileged(Native Method)     at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353)     at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)     at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)     at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)     at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:400)     at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:736)     at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:248)     at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)     at java.lang.Thread.run(Thread.java:619)  Aspects in spring-aspects.jar should be rebuilt using java 1.6 compiler and aspectj in version 1.6.0. Probably aspectj API changed in new release or something.   ---  **Affects:** 2.5.1","closed","in: core,","spring-projects-issues","2008-02-11T02:23:49Z","2019-01-12T16:28:30Z"
"","9744","@RequestMapping method resolution issue with duplicate paths [SPR-5069]","**[William Butler](https://jira.spring.io/secure/ViewProfile.jspa?name=trrbocharged)** opened **[SPR-5069](https://jira.spring.io/browse/SPR-5069?redirect=false)** and commented  This bug is related to the fix for #9228.  There is still an issue related to the following method (in AnnotationMethodHandlerAdapter.java):  [CODE] private boolean isBetterPathMatch(String mappedPath, String mappedPathToCompare, String lookupPath) { return (mappedPath != null && (mappedPathToCompare == null || mappedPath.equals(lookupPath) || mappedPathToCompare.length() < mappedPath.length())); } [/CODE]  If multiple methods are annotated with the same path value, one can be considered ""better"" than another based on the fact that the mappedPath equals lookupPath. There is no check to see if the mappedPathToCompare is also equal to the lookupPath. The code should probably be changed to something like:  [CODE] private boolean isBetterPathMatch(String mappedPath, String mappedPathToCompare, String lookupPath) { return (mappedPath != null && (mappedPathToCompare == null || mappedPath.equals(lookupPath) && !mappedPathToCompare.equals(lookupPath) || mappedPathToCompare.length() < mappedPath.length())); } [/CODE]  ---  **Affects:** 2.5.3, 2.5.4, 2.5.5  **Issue Links:** - #9228 `@RequestMapping` method resolution is not deterministic","closed","type: bug,","spring-projects-issues","2008-08-06T16:36:32Z","2019-01-13T08:02:57Z"
"","9577","IoC Container Suipport when developing Eclipse RCP Applications [SPR-4901]","**[Will Lieu](https://jira.spring.io/secure/ViewProfile.jspa?name=will%20lieu)** opened **[SPR-4901](https://jira.spring.io/browse/SPR-4901?redirect=false)** and commented  How do I create get around this class loader issue with Eclipse RCP Applications.  I am developing an Eclipse Application in which I created an application logger using Spring AOP but yet somehow It won't find my PDE class when I go to retrieve a simple Spring Bean from the Container.  It throws the following exception:  !SESSION 2008-06-09 08:40:44.149 ----------------------------------------------- eclipse.buildId=unknown java.version=1.6.0_05 java.vendor=Sun Microsystems Inc. BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=en_US Framework arguments:  -application MMWorkbench.application Command-line arguments:  -application MMWorkbench.application -data C:\workspace/../runtime-MMWorkbench.application -dev file:C:/workspace/.metadata/.plugins/org.eclipse.pde.core/MMWorkbench.application/dev.properties -debug C:\workspace\.metadata\.plugins\org.eclipse.pde.core\MMWorkbench.application/.options -os win32 -ws win32 -arch x86  !ENTRY org.eclipse.osgi 4 0 2008-06-09 08:40:45.367 !MESSAGE Application error !STACK 1 org.eclipse.core.runtime.CoreException: Plug-in MMWorkbench was unable to load class mm.hmi.workbench.MMWorkbenchApplication. at org.eclipse.core.internal.registry.osgi.RegistryStrategyOSGI.throwException(RegistryStrategyOSGI.java:180) at org.eclipse.core.internal.registry.osgi.RegistryStrategyOSGI.createExecutableExtension(RegistryStrategyOSGI.java:162) at org.eclipse.core.internal.registry.ExtensionRegistry.createExecutableExtension(ExtensionRegistry.java:788) at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:243) at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:51) at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:165) at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:106) at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:76) at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:363) at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:176) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:508) at org.eclipse.equinox.launcher.Main.basicRun(Main.java:447) at org.eclipse.equinox.launcher.Main.run(Main.java:1173) at org.eclipse.equinox.launcher.Main.main(Main.java:1148) org.eclipse.core.runtime.CoreException[1]: java.lang.ClassNotFoundException: mm.hmi.workbench.MMWorkbenchApplication at java.lang.ClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal(BundleLoader.java:429) at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:369) at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:357) at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83) at java.lang.ClassLoader.loadClass(Unknown Source) at org.eclipse.osgi.framework.internal.core.BundleLoader.loadClass(BundleLoader.java:289) at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:227) at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1269) at org.eclipse.core.internal.registry.osgi.RegistryStrategyOSGI.createExecutableExtension(RegistryStrategyOSGI.java:160) at org.eclipse.core.internal.registry.ExtensionRegistry.createExecutableExtension(ExtensionRegistry.java:788) at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:243) at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:51) at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:165) at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:106) at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:76) at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:363) at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:176) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:508) at org.eclipse.equinox.launcher.Main.basicRun(Main.java:447) at org.eclipse.equinox.launcher.Main.run(Main.java:1173) at org.eclipse.equinox.launcher.Main.main(Main.java:1148)  Tracing: Configuration location: file:/C:/workspace/.metadata/.plugins/org.eclipse.pde.core/MMWorkbench.application/ Configuration file: file:/C:/workspace/.metadata/.plugins/org.eclipse.pde.core/MMWorkbench.application/config.ini loaded Install location: file:/C:/eclipse/ Framework located: file:/C:/eclipse/plugins/org.eclipse.osgi_3.3.2.R33x_v20080105.jar Framework classpath: file:/C:/eclipse/plugins/org.eclipse.osgi_3.3.2.R33x_v20080105.jar Debug options: file:/C:/workspace/.metadata/.plugins/org.eclipse.pde.core/MMWorkbench.application/.options loaded Time to load bundles: 47 Starting application: 1203   ---  **Affects:** 2.5.4  **Attachments:** - [Eclipse RCP Development using Spring IoC and AOP.jpg](https://jira.spring.io/secure/attachment/14162/Eclipse+RCP+Development+using+Spring+IoC+and+AOP.jpg) (_570.70 kB_)  1 votes, 0 watchers","closed","in: core,","spring-projects-issues","2008-06-09T02:58:24Z","2012-06-19T09:36:18Z"
"","9736","static.springframework.org is not accessible [SPR-5061]","**[Will Holcomb](https://jira.spring.io/secure/ViewProfile.jspa?name=wholcomb)** opened **[SPR-5061](https://jira.spring.io/browse/SPR-5061?redirect=false)** and commented  There is a 403 forbidden error for all documents on static.springframework.org   --- No further details from [SPR-5061](https://jira.spring.io/browse/SPR-5061?redirect=false)","closed","","spring-projects-issues","2008-08-05T06:32:58Z","2019-01-11T14:38:43Z"
"","9246","Lazy not honored when using MBeanExporter's autodetection (since 2.5) [SPR-4569]","**[weiersmuller](https://jira.spring.io/secure/ViewProfile.jspa?name=wweiersmuller)** opened **[SPR-4569](https://jira.spring.io/browse/SPR-4569?redirect=false)** and commented  With Spring 2.0.3 the following bean definitions did not cause error to be thrown, lazy is honnored :  ```xml 	 		 	  	 	 	 	 		 		 		 			 				 					 				 			 		 		 			 				 					 				 			 		 	  	 ```  with com.dexia.sofaxis.caselazyjmx.JMXBean.java =  ``` @ManagedResource(objectName = ""sofaxis:name=JMXLazyBean"", description = ""JMXLazyBean"") public class JMXBean {     public JMXBean() {     }     public void setDummy(Object o) {     } } ```  When upgrading to 2.5 the following exception is thrown :  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mbeanExporter' defined in class path resource [tests-beanDef.xml]: Invocation of init method failed; nested exception is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [com.dexia.sofaxis.caselazyjmx.NotInClassPath] for bean with name 'dummy' defined in class path resource [tests-beanDef.xml]; nested exception is java.lang.ClassNotFoundException: com.dexia.sofaxis.caselazyjmx.NotInClassPath at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1260) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:438) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:400) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:736) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369) at com.dexia.sofaxis.common.test.SofaxisBaseTestCase.getBeanFactory(SofaxisBaseTestCase.java:75) at com.dexia.sofaxis.caselazyjmx.TestLazy.realTest(TestLazy.java:10) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59) at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98) at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79) at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87) at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77) at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42) at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88) at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51) at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44) at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27) at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37) at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [com.dexia.sofaxis.caselazyjmx.NotInClassPath] for bean with name 'dummy' defined in class path resource [tests-beanDef.xml]; nested exception is java.lang.ClassNotFoundException: com.dexia.sofaxis.caselazyjmx.NotInClassPath at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1173) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:479) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:212) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:189) at org.springframework.jmx.export.MBeanExporter.autodetect(MBeanExporter.java:890) at org.springframework.jmx.export.MBeanExporter.autodetectBeans(MBeanExporter.java:863) at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:496) at org.springframework.jmx.export.MBeanExporter.afterPropertiesSet(MBeanExporter.java:402) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1288) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1257) ... 35 more Caused by: java.lang.ClassNotFoundException: com.dexia.sofaxis.caselazyjmx.NotInClassPath at java.net.URLClassLoader$1.run(URLClassLoader.java:200) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:188) at java.lang.ClassLoader.loadClass(ClassLoader.java:306) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.springframework.util.ClassUtils.forName(ClassUtils.java:230) at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass(AbstractBeanDefinition.java:381) at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1170) ... 44 more  => lazy is no more honnored.  ---  **Affects:** 2.5 final  **Issue Links:** - #9629 Add property to MBeanExporter to control eager initiailization of FactoryBeans  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2008-03-11T02:52:38Z","2019-01-11T17:17:24Z"
"","9296","ClassCastException using Spring 2.5.2, JPA, Hibernate (works in Spring 2.5.1) [SPR-4619]","**[Wayne Robinson](https://jira.spring.io/secure/ViewProfile.jspa?name=serin)** opened **[SPR-4619](https://jira.spring.io/browse/SPR-4619?redirect=false)** and commented  When a JpaTransactionManager attempts to begin a transaction it attempts (via HibernateJpaDialect) to obtain a Hibernate session but fails with a ClassCastException when attempting the following within HibernateJpaDialect:  ((HibernateEntityManager) em).getSession()  Note that everything works fine in Spring 2.5.1. Incidentally, I have eliminated Tomcat as the cause because I get the same problem in WebSphere, i.e. WebSphere 6.1 using Spring 2.51 is fine but WebSphere 6.1 using Spring 2.5.2 also has a ClassCastException.  The problem also exists in the latest snapshot of 2.5.3.  Also note that I cannot recreate the problem with an integration test...perhaps this is a classloading issue? The stack trace is as follows:  2008-03-24 09:58:25,002 ERROR WebExceptionHelper - System exception detected by the exception handler for user [Anonymous] at [Mon Mar 24 09:58:25 GMT 2008] org.apache.wicket.WicketRuntimeException: Method onFormSubmitted of interface org.apache.wicket.markup.html.form.IFormSubmitListener targeted at component [MarkupContainer [Component id = form.login, page = uk.co.serin.tanzan.web.wicket.page.security.Login, path = 1:form.login.Login$LoginForm, isVisible = true, isVersioned = true]] threw an exception at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:194) at org.apache.wicket.request.target.component.listener.ListenerInterfaceRequestTarget.processEvents(ListenerInterfaceRequestTarget.java:73) at org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:91) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1166) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1243) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1330) at org.apache.wicket.RequestCycle.request(RequestCycle.java:493) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:358) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:194) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:265) at org.acegisecurity.context.HttpSessionContextIntegrationFilter.doFilter(HttpSessionContextIntegrationFilter.java:286) at org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:275) at org.acegisecurity.util.FilterChainProxy.doFilter(FilterChainProxy.java:149) at org.acegisecurity.util.FilterToBeanProxy.doFilter(FilterToBeanProxy.java:98) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:112) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:75) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:433) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:595) Caused by: java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:183) ... 32 more Caused by: org.springframework.transaction.CannotCreateTransactionException: Could not open JPA EntityManager for transaction; nested exception is java.lang.ClassCastException: $Proxy28 at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:375) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:377) at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:263) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:101) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.interceptor.PerformanceMonitorInterceptor.invokeUnderTrace(PerformanceMonitorInterceptor.java:60) at org.springframework.aop.interceptor.AbstractTraceInterceptor.invoke(AbstractTraceInterceptor.java:110) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.interceptor.SimpleTraceInterceptor.invokeUnderTrace(SimpleTraceInterceptor.java:58) at org.springframework.aop.interceptor.AbstractTraceInterceptor.invoke(AbstractTraceInterceptor.java:110) at org.springframework.aop.interceptor.DebugInterceptor.invoke(DebugInterceptor.java:61) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:90) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy37.getPersonByUserid(Unknown Source) at uk.co.serin.tanzan.web.TanzanAuthenticationProvider.retrieveUser(TanzanAuthenticationProvider.java:58) at org.acegisecurity.providers.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:119) at org.acegisecurity.providers.ProviderManager.doAuthentication(ProviderManager.java:195) at org.acegisecurity.AbstractAuthenticationManager.authenticate(AbstractAuthenticationManager.java:45) at uk.co.serin.tanzan.web.wicket.TanzanWebSession.authenticate(TanzanWebSession.java:72) at org.apache.wicket.authentication.AuthenticatedWebSession.signIn(AuthenticatedWebSession.java:110) at uk.co.serin.tanzan.web.wicket.page.security.Login$LoginForm.onSubmit(Login.java:101) at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1328) at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:776) ... 37 more Caused by: java.lang.ClassCastException: $Proxy28 at org.springframework.orm.jpa.vendor.HibernateJpaDialect.getSession(HibernateJpaDialect.java:101) at org.springframework.orm.jpa.vendor.HibernateJpaDialect.prepareTransaction(HibernateJpaDialect.java:59) at org.springframework.orm.jpa.vendor.HibernateJpaDialect.beginTransaction(HibernateJpaDialect.java:53) at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:330) ... 61 more 2008-03-24 09:58:25,042 INFO  RequestLogger - time=501,event=Interface[target:Login$LoginForm(form.login), page: uk.co.serin.tanzan.web.wicket.page.security.Login(1), interface: IFormSubmitListener.onFormSubmitted],response=BookmarkablePage[uk.co.serin.tanzan.web.wicket.page.exceptions.SystemException],sessionid=C032C0372750805FCACE5FA68848E0C9,sessionsize=10376,sessionstart=Mon Mar 24 09:58:06 GMT 2008,requests=5,totaltime=2664,activerequests=1,maxmem=66M,total=26M,used=14M  If there is anything else I can provide to assist just let me know.   ---  **Affects:** 2.5.2","closed","type: bug,","spring-projects-issues","2008-03-23T23:30:53Z","2012-06-19T03:46:53Z"
"","9403","extractReturnedResults in JdbcTemplate does not properly handle results with resultset and update count [SPR-4726]","**[Vladimir Berezniker](https://jira.spring.io/secure/ViewProfile.jspa?name=vmpn)** opened **[SPR-4726](https://jira.spring.io/browse/SPR-4726?redirect=false)** and commented  Wrong variable is used in the following block in extractReturnedResults.updateIndex should be used instead of rsIndex:  1037 					if (updateCountParameters != null && updateCountParameters.size() > rsIndex) { 1038 						SqlReturnUpdateCount ucParam = (SqlReturnUpdateCount)updateCountParameters.get(rsIndex); 1039 						String declaredUcName = ucParam.getName(); 1040 						returnedResults.put(declaredUcName, new Integer(updateCount)); 1041 						updateIndex++; 1042 					}  1037 					if (updateCountParameters != null && updateCountParameters.size() > updateIndex) { 1038 						SqlReturnUpdateCount ucParam = (SqlReturnUpdateCount)updateCountParameters.get(updateIndex);   ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-04-18T10:15:10Z","2012-06-19T03:47:15Z"
"","8970","References to Nested ID Bean Definitions [SPR-4292]","**[vk101](https://jira.spring.io/secure/ViewProfile.jspa?name=vk101)** opened **[SPR-4292](https://jira.spring.io/browse/SPR-4292?redirect=false)** and commented  It's currently not possible to have nested ids in Spring, such as the following:  Code: \ \  \ \ \  \ \  \ \ \  (I'll use a simple example of a Box that contains nested Item objects throughout this feature request.) I realize that using a ref of box1.item1 would look for a property rather than a bean id named item1. I'd like to propose a feature request where either you could specify something like ref=""box1>item1"" (i.e. new operator) or nested-ref=""box1.item1"" (i.e. new attribute) for the property element, and it would get the bean with id item1 defined within the bean with id box1.  My reasoning for this request is that when a bean needs to be referenced by other beans but that bean is contained within a parent bean (e.g. an 'item' bean contained by a 'box' bean), referring to that bean should be possible within the context of its containing bean. Currently, the only option is to change every nested bean into a top-level bean with an id:  Code: \ \ \  \ \ \ \ \ \ \ \ \ \ \ \  There are two problems with the above approach, the first being a more verbose configuration, which is only a minor issue. The second, bigger, problem is that as your configuration grows larger, you'll see a large number of top-level beans (beans of class MyItem, in this example) polluting the same namespace unnecessarily. To make this situation more manageable and maintainable, you might then prefix every bean with the name of its containing bean:  Code: \ \ \  \ \ \ \ \ \ \ \ \ \ \ \  The problem with the above is not only that the bean ids are redundant (box1.item1 is contained within box1), but also that when your configuration grows larger, mistakes like box101 containing ref box201.item1 instead of box101.item1 become easier to make.  A problem with my proposed feature in the original code sample is that because the nested beans' ids are of XML schema type ID, they must be unique throughout the configuration. Then item1 in box1 and item1 in box2 would conflict. In order to correct this, every nested bean's id could be defined by an attribute other than 'id', such as 'nested-id', which wouldn't have to be unique throughout the configuration:  Code: \ \  \ \ \  \ \  \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The only requirement for uniqueness with nested-id attributes would be that all children of a common parent (i.e. sibling beans) do not have the same nested-id. However, a nested bean can have the same nested-id as its parent or child, and of a child of a different parent. Furthermore, top-level beans would not be permitted to have a nested-id.   --- No further details from [SPR-4292](https://jira.spring.io/browse/SPR-4292?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-01-02T06:38:30Z","2012-06-19T09:36:12Z"
"","8964","Multi-object mapping with BeanPropertyRowMapper [SPR-4286]","**[Vitaliy Shevchuk](https://jira.spring.io/secure/ViewProfile.jspa?name=shevit)** opened **[SPR-4286](https://jira.spring.io/browse/SPR-4286?redirect=false)** and commented  HI,  I'd like to contribute my implementation of AbstractBeanPropertyRowMapper that supports queries like this :  ---  SELECT ..., country.NAME as ""order.client.address.country.name"" FROM ... INNER JOIN ...  ---  for this query, the mappedClass would be ""Order"" and the country name is processed this way :  ```java if (order.getClient()==null) order.setClient(new Client()); if (order.getClient().getAddress()==null) order.getClient().setAddress(new Address()); if (order.getClient().getAddress().getCountry()==null) order.getClient().getAddress.getCountry(new Address()); order.getClient().getAddress().getCountry().setName() ```  In this implementation nested properties mapping is case sensitive. underscored names are not supported for nested properties  There are 2 changes: -> new BeanWrapper implementation called CreativeBeanWrapperImpl (extends BeanWrapperImpl)  ```java public class CreativeBeanWrapperImpl extends BeanWrapperImpl {      public CreativeBeanWrapperImpl() { }     public CreativeBeanWrapperImpl(Class clazz) { super(clazz); }     public CreativeBeanWrapperImpl(Object object) { super(object); }     public CreativeBeanWrapperImpl(boolean registerDefaultEditors) { super(registerDefaultEditors); }     public CreativeBeanWrapperImpl(Object object, String nestedPath, Object rootObject) {         super(object, nestedPath, rootObject);     }      protected BeanWrapperImpl getBeanWrapperForPropertyPath(String propertyPath) {         int pos = PropertyAccessorUtils.getFirstNestedPropertySeparatorIndex(propertyPath);         // Handle nested properties recursively.         if (pos > -1) {             String nestedProperty = propertyPath.substring(0, pos);             if (getPropertyValue(nestedProperty) == null){                 setPropertyValue(nestedProperty, newNestedInstance(nestedProperty));             }             return super.getBeanWrapperForPropertyPath(propertyPath);         } else {             return this;         }     }      /**      * Tries to create a new instance of a nested bean using default no-args constructor      * override this method if needed      */     protected Object newNestedInstance(String nestedProperty)  {         Class type = getPropertyDescriptor(nestedProperty).getPropertyType();         try {             return type.newInstance();         } catch (InstantiationException e) {             throw new InvalidPropertyException(getRootClass(),nestedProperty,""InstantiationException while creating "" +                     ""a new instance of a nested bean:""+type.getName(),e);         } catch (IllegalAccessException e) {             throw new InvalidPropertyException(getRootClass(),nestedProperty,""Cannot create new instance of a nested "" +                     ""bean:""+type.getName()+"" Make sure its no-args constructor is public"",e);         }     }      protected BeanWrapperImpl newNestedBeanWrapper(Object object, String nestedPath) {         return new CreativeBeanWrapperImpl(object, nestedPath, this);     }   } ```  -> and modified AbstractBeanPropertyRowMapper : quite a few changes here  ``` @@ -102,10 +103,10 @@  		ResultSetMetaData rsmd = rs.getMetaData();  		int columns = rsmd.getColumnCount();  		for (int i = 1; i","closed","type: enhancement,","spring-projects-issues","2007-12-30T21:11:19Z","2019-01-13T22:40:46Z"
"","8961","SQL types in BeanPropertySqlParameterSource  [SPR-4283]","**[Vitaliy Shevchuk](https://jira.spring.io/secure/ViewProfile.jspa?name=shevit)** opened **[SPR-4283](https://jira.spring.io/browse/SPR-4283?redirect=false)** and commented  Hi,  Because some jdbc drivers does not like PreparedStatement.setObject(null), it might be useful for dealing with ""null"" values that BeanPropertySqlParameterSource override getSqlType for providing sql types information based on Java types.  This can be an evolution of BeanPropertySqlParameterSource or just another class inherited from BeanPropertySqlParameterSource  possible implementation :  ---  public class BeanPropertySqlTypedParameterSource extends BeanPropertySqlParameterSource {              private Class beanClass:             ............                  public int getSqlType(String paramName) {                 Class cls = BeanUtils.getPropertyDescriptor(beanClass, paramName).getPropertyType();                 if (Integer.class.isAssignableFrom(cls) || int.class.isAssignableFrom(cls))                     return Types.INTEGER;                 else if (Date.class.isAssignableFrom(cls))                     return Types.TIMESTAMP;                 else if (String.class.equals(cls))                     return Types.VARCHAR;  // etc... // etc... // etc... else return Types.OTHER; } } }  ---  thanks  ---  **Affects:** 2.5 final  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-12-27T00:11:16Z","2019-01-13T22:40:48Z"
"","9688","I am using SpringMVC  with JSR 168 Portlet.Is there any way to pass parameter through url to the Controller(Portlet). [SPR-5013]","**[vinod gaike](https://jira.spring.io/secure/ViewProfile.jspa?name=vinod)** opened **[SPR-5013](https://jira.spring.io/browse/SPR-5013?redirect=false)** and commented  My requirement is that I have to call portlet(Controller) by clicking on link through email.Here how  to pass parameter through link to the Controller(Portlet).I ahave tryed using query string but it's not working.   --- No further details from [SPR-5013](https://jira.spring.io/browse/SPR-5013?redirect=false)","closed","status: declined,","spring-projects-issues","2008-07-15T23:43:05Z","2012-06-19T09:36:14Z"
"","9117","Serialization warning when use SpringContextResourceAdapter in Weblogic 9.2 [SPR-4439]","**[Viacheslav Garmash](https://jira.spring.io/secure/ViewProfile.jspa?name=vgarmash)** opened **[SPR-4439](https://jira.spring.io/browse/SPR-4439?redirect=false)** and commented  Got following warning about non-serializable .org.springframework.jca.context.SpringContextResourceAdapter Connector module is default. Configuration is the same as described in JavaDoc: http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/jca/context/SpringContextResourceAdapter.html  ```       ```  Please add ""implements java.io.Serializable"" to this class.  ---  **Affects:** 2.5.1  **Issue Links:** - #8662 RmiInvocationWrapper  created by JndiRmiServiceExporter should implement Referenceable","closed","type: enhancement,","spring-projects-issues","2008-02-08T03:16:07Z","2019-01-11T17:33:59Z"
"","9620","SchedulerFactoryBean invokes SchedulerContextAware callback on JobFactory too early [SPR-4945]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-4945](https://jira.spring.io/browse/SPR-4945?redirect=false)** and commented  SchedulerFactoryBean calls ((SchedulerContextAware) this.jobFactory).setSchedulerContext(this.scheduler.getContext()) on specified jobFactory before that SchedulerContext gets populated with schedulerContextAsMap entries (see populateSchedulerContext() method).  Please see unit test attached.   ---  **Affects:** 2.5.3  **Attachments:** - [SchedulerFactoryBeanTest.java](https://jira.spring.io/secure/attachment/14228/SchedulerFactoryBeanTest.java) (_1.82 kB_)","closed","in: core,","spring-projects-issues","2008-06-23T16:04:18Z","2012-06-19T03:47:16Z"
"","9612","SchedulerFactoryBean is not subclass friendly [SPR-4937]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-4937](https://jira.spring.io/browse/SPR-4937?redirect=false)** and commented  At the moment SchedulerFactoryBean is not very subclass friendly. :-)  I'd like to have an option to tweak a scheduler between different phases of its initialization (afterPropertiesSet): 1. just before registerListeners call; 2. just before registerJobsAndTriggers call; 3. just before startScheduler call;  The best option would be to call new protected doBefore***() methods with empty default implementations.  Also making registerListeners and registerJobsAndTriggers methods protected or adding some doBefore***() methods there will be beneficial.  Currently I have to override afterPropertiesSet() method in my subclass and do some ugly super.*** calls there.  Also getter for autoStartup field seems to be missing.   ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-06-19T14:10:09Z","2012-06-19T09:36:32Z"
"","9566","ResourceUtils.getFile methods should throw more specific exception when URI/URL protocol is not a ""file"" [SPR-4890]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-4890](https://jira.spring.io/browse/SPR-4890?redirect=false)** and commented  org.springframework.util.ResourceUtils getFile(java.net.URI, String)  and getFile(java.net.URL, String) methods should throw more specific IOException (e.g., some kind of IllegalURLException which may extend IOException, NestedIOException or FileNotFoundException) when URI/URL protocol is not a ""file"" to let caller handle it properly.  Currently ResourceUtils class throws FileNotFoundException which is a bit confusing (although error message is informative enough). It can be especially useful when custom class loader is used (e.g. One-Jar JarClassLoader) that returns specific URI/URL protocols from getResource() calls. I agree that exception should be thrown stating that File can not be resolved from URI/URL provided, I just think it should not be FileNotFoundException.  This new exception can extend FileNotFoundException if you want to keep methods signatures for Spring jar drop-in replacement.   ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-06-04T12:23:40Z","2008-07-03T07:06:32Z"
"","9560","Log4jConfigurer indirectly triggers automatic log4j configuration [SPR-4884]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-4884](https://jira.spring.io/browse/SPR-4884?redirect=false)** and commented  Log4jConfigurer initLogging methods call SystemPropertyUtils.resolvePlaceholders(String text) which triggers automatic log4j configuration due to presence of this line in SystemPropertyUtils class: private static final Log logger = LogFactory.getLog(SystemPropertyUtils.class);  So log4j gets automatically configured (using default locations) few lines before DOMConfigurator.configure() or PropertyConfigurator.configure() methods are called by Log4jConfigurer.  You can test this by running VM with -Dlog4j.debug=true system property. If you put breakpoint on the second line of either of initLogging methods in Log4jConfigurer class you will see log4j default initialisation output in console even though Log4jConfigurer hasn't called log4j API yet.   ---  **Affects:** 2.0.8, 2.5.3  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-06-02T13:52:08Z","2012-06-19T03:46:56Z"
"","9305","NullPointerException when using nullValue property of PropertyPlaceholderConfigurer [SPR-4628]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-4628](https://jira.spring.io/browse/SPR-4628?redirect=false)** and commented  Getting NullPointerException on application context initialization when using nullValue property of PropertyPlaceholderConfigurer:  java.lang.NullPointerException at java.lang.StringBuffer.replace(StringBuffer.java:717) at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.parseStringValue(PropertyPlaceholderConfigurer.java:308) at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer$PlaceholderResolvingStringValueResolver.resolveStringValue(PropertyPlaceholderConfigurer.java:419) at org.springframework.beans.factory.config.BeanDefinitionVisitor.resolveStringValue(BeanDefinitionVisitor.java:256) at org.springframework.beans.factory.config.BeanDefinitionVisitor.resolveValue(BeanDefinitionVisitor.java:198) at org.springframework.beans.factory.config.BeanDefinitionVisitor.visitMap(BeanDefinitionVisitor.java:236) at org.springframework.beans.factory.config.BeanDefinitionVisitor.resolveValue(BeanDefinitionVisitor.java:192) at org.springframework.beans.factory.config.BeanDefinitionVisitor.visitPropertyValues(BeanDefinitionVisitor.java:142) at org.springframework.beans.factory.config.BeanDefinitionVisitor.visitBeanDefinition(BeanDefinitionVisitor.java:82) at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:264) at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:75) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:554) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:528) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:363) at org.springframework.test.AbstractSingleSpringContextTests.createApplicationContext(AbstractSingleSpringContextTests.java:243) at org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:212) at org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:187) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:140) at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:100) at junit.framework.TestCase.runBare(TestCase.java:128) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  Please see simple TestCase attached.   ---  **Affects:** 2.5.2  **Attachments:** - [appContext.xml](https://jira.spring.io/secure/attachment/13845/appContext.xml) (_980 bytes_) - [PropertyPlaceholderConfigurerTest.java](https://jira.spring.io/secure/attachment/13846/PropertyPlaceholderConfigurerTest.java) (_329 bytes_)","closed","in: core,","spring-projects-issues","2008-03-26T12:09:00Z","2019-01-11T18:15:10Z"
"","9197","LazyConnectionDataSourceProxy should accept defaultTransactionIsolation by name [SPR-4520]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-4520](https://jira.spring.io/browse/SPR-4520?redirect=false)** and commented  LazyConnectionDataSourceProxy should accept defaultTransactionIsolation by the name of the corresponding constant in java.sql.Connection, e.g. TRANSACTION_READ_COMMITTED, or in org.springframework.transaction.TransactionDefinition, e.g. ISOLATION_READ_COMMITTED, if its easier:         private static final Constants constants = new Constants(java.sql.Connection.class);          public final void setDefaultTransactionIsolationName(String constantName) throws IllegalArgumentException {     	setDefaultTransactionIsolation(constants.asNumber(constantName).intValue());     }  Also getters for defaultAutoCommit and defaultTransactionIsolation properties called defaultAutoCommit() and defaultTransactionIsolation() should be getDefaultAutoCommit() and getDefaultTransactionIsolation().   ---  **Affects:** 2.0.7  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-02-28T17:22:57Z","2012-06-19T03:47:19Z"
"","9178","Log4jWebConfigurer log message is incorrect [SPR-4501]","**[Vasily Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=bas)** opened **[SPR-4501](https://jira.spring.io/browse/SPR-4501?redirect=false)** and commented  Log4jWebConfigurer.initLogging() method writes to servlet log: Initializing Log4J from [...]  but according to log4j official FAQ: ""Q 10.12 What is the correct capitalization for log4j? Log4j should be spelled in all lower case, as in log4j, except if it occurs as the first word in a sentence, like in this sentence.""  so correct log message should be: Initializing log4j from [...]   ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2008-02-25T13:01:03Z","2012-06-19T03:46:41Z"
"","9226","AbstractAutowireCapableBeanFactory.autowireByName tries to wire abstract bean [SPR-4549]","**[Usama Rashwan](https://jira.spring.io/secure/ViewProfile.jspa?name=usama_ra)** opened **[SPR-4549](https://jira.spring.io/browse/SPR-4549?redirect=false)** and commented  the AbstractAutowireCapableBeanFactory.autowireByName try to autowire abstrat bean , if there is abstrat bean that is matched with a bean proparty the AbstractAutowireCapableBeanFactory will try to wire it even if the bean is abstrat , i think abstrat beans should be excluded from autowireing this will result in  org.springframework.beans.factory.BeanIsAbstractException: Error creating bean with name 'service': Bean definition is abstract at org.springframework.beans.factory.support.AbstractBeanFactory.checkMergedBeanDefinition(AbstractBeanFactory.java:1116) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:228) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:959) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:907) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353)   ---  **Affects:** 2.5.2","closed","in: core,","spring-projects-issues","2008-03-06T02:55:08Z","2019-01-12T16:28:29Z"
"","9204","bug in context:component-scan when class have inner classes  [SPR-4527]","**[Usama Rashwan](https://jira.spring.io/secure/ViewProfile.jspa?name=usama_ra)** opened **[SPR-4527](https://jira.spring.io/browse/SPR-4527?redirect=false)** and commented  see this forum link for more details http://forum.springframework.org/showthread.php?p=167662#post167662  ---  **Affects:** 2.5.1  **Issue Links:** - #9003 component scanning incorrectly excludes classes (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-03-02T05:23:31Z","2019-01-12T16:50:59Z"
"","9331","Too many ""related cause"" stacktraces produced by constructor autowiring [SPR-4654]","**[Urs Keller](https://jira.spring.io/secure/ViewProfile.jspa?name=ukeller@gmail.com)** opened **[SPR-4654](https://jira.spring.io/browse/SPR-4654?redirect=false)** and commented  In the class: org.springframework.beans.factory.support.ConstructorResolver at Lines 190, 358, it is tried to build an arg-array for different constructors with the same argument count until a suitable candidate is found. If the suitable one is not the first candidate then the exception is swallowed: if (i == candidates.length - 1 && constructorToUse == null) { throw ex; } else { // Swallow and try next constructor. this.beanFactory.onSuppressedException(ex); continue; } If we have e.g. 3 candidates and the last one is the suitable one then 2 exceptions have been added to the suppressed exception list. This pollutes the stacktrace when a real error occures later. Basically you find yourself with a huge sequence of irrelevant ""related cause"" stack traces.  ---  **Affects:** 2.5.2  **Issue Links:** - #9409 OutOfMemoryException with LogLevel = DEBUG and lazy-init","closed","type: enhancement,","spring-projects-issues","2008-04-02T23:12:17Z","2019-01-11T18:13:56Z"
"","9858","Allow a TestExecutionListener to configure the ApplicationContext [SPR-5185]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-5185](https://jira.spring.io/browse/SPR-5185?redirect=false)** and commented  #### Status Quo  Currently the application context gets refreshed by the loader itself. So the only option to configure the `XmlBeanDefinitionReader`, `PassthoughSourceExtrator`, etc. without a double refresh is to extend or implement a `ContextLoader`.  #### Proposal  A `ContextLoader` could return a non-refreshed `ApplicationContext` to the `TestContextManager` and leave refreshing to a new _configurable application context aware_ `TestExecutionListener` that would ensure that the `ApplicationContext` has been properly initialized before test methods and refresh it as needed or every time (based on the presence of the `@DirtiesContext` annotation).   ---  **Affects:** 2.5.5  **Attachments:** - [TestContext.patch](https://jira.spring.io/secure/attachment/15015/TestContext.patch) (_3.01 kB_) - [TestContextManager.patch](https://jira.spring.io/secure/attachment/15016/TestContextManager.patch) (_2.62 kB_)  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-09-29T20:56:20Z","2019-01-11T15:39:53Z"
"","9846","Overriding approximation of collection and map in SimpleTypeConverter [SPR-5173]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-5173](https://jira.spring.io/browse/SPR-5173?redirect=false)** and commented  org.springframework.beans.TypeConverterDelegate uses CollectionFactory methods to recognize and approximate collection and map to required type. Since TypeConverterDelegate is package private class it is quite cumbersome to override approximation.  If TypeConverterDelegate would have CollectionFactory references as template methods it would be possible for SimpleTypeConverter to extend TypeConverterDelegate as private class and override these methods to channel them via itself so that TypeConverterDelegate could remain package private.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-09-22T23:47:31Z","2012-06-19T09:36:13Z"
"","9828","Scanned components don't have the ability of being ""primary"" candidates [SPR-5155]","**[Tuomas Kiviaho](https://jira.spring.io/secure/ViewProfile.jspa?name=tuomas_kiviaho)** opened **[SPR-5155](https://jira.spring.io/browse/SPR-5155?redirect=false)** and commented  Annotations don't have the possibility to flag a component as 'primary' candidate (nor can they be disabled from being 'autowire-candidate'). ScannedGenericBeanDefinition could quite easily be enhanced to support the feature if it's available in metadata.  ---  **Affects:** 2.5.5  **Issue Links:** - #10261 Provide `@Primary` annotation","closed","type: enhancement,","spring-projects-issues","2008-09-15T16:49:06Z","2019-01-13T08:02:34Z"
"","9441","Maybe i'm wrong, but I think it would be nice to have a pre-binding process available in form Controllers [SPR-4764]","**[Triqui Galletas](https://jira.spring.io/secure/ViewProfile.jspa?name=triqui)** opened **[SPR-4764](https://jira.spring.io/browse/SPR-4764?redirect=false)** and commented  Maybe there is an easier way of doing this, but in my app I wanted to disallow some fields for certain pages (using AbstractWizardFormController), so I implemented it like this, and I would like to see something similar implemented in AbstractFormController. Or maybe higher in the hiearachy, I don't know.  ``` public abstract class GenericFormController extends AbstractWizardFormController {      @Override     protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws Exception {         bindPage(binder, getCurrentPage(request));     }      /**      * Call for custom pre-processing in terms of binding.      * Called on each submit, before standard binding.      * This method allows you to customize binding for certain fields of your      * command class. For instance, you will be able to specify required, allowed      * and disallowed fields for a given page.      * @param binder the new binder instance      * @param page current wizard page      */     public void bindPage(ServletRequestDataBinder binder, int page) {         String pageName = getPages()[page];         if (pageName.equalsIgnoreCase(""edit"")) {             bindEditPage(binder);             return;         }         if (pageName.equalsIgnoreCase(""display"")) {             bindDisplayPage(binder);             return;         }     }      public void bindEditPage(ServletRequestDataBinder binder) {}     public void bindDisplayPage(ServletRequestDataBinder binder) {} }  public class CustomerFormController extends GenericFormController {     @Override     public void bindEditPage(ServletRequestDataBinder binder) {         binder.setDisallowedFields(new String[] { ""*webLogin"" } );     }      @Override     public void bindDisplayPage(ServletRequestDataBinder binder) {         binder.setAllowedFields(new String[] { ""_NONE_"" } );     } } ```  In fact, both pages are the same, but I process the data in a totally different way in terms of binding and validation. I have lots of forms and all of them require an edit and a display mode over several pages, there are also a lot of different fields that have to be protected depending on certain things, like user role, values from other fields or tables, etc. So I'm using the same controller and jsp to process each form, but I can't find any other solution for protected data not being submitted when processing one form. I have also protected the fields in the HTML code, but HTML fields can be easily opened and enabled and I don't want that to happen.  Thank you very much.   --- No further details from [SPR-4764](https://jira.spring.io/browse/SPR-4764?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-04-29T00:21:53Z","2012-06-19T09:36:19Z"
"","9186","validatePagesAndFinish method in AbstractWizardFormController should use getInitialPage() instead of 0 [SPR-4509]","**[Triqui Galletas](https://jira.spring.io/secure/ViewProfile.jspa?name=triqui)** opened **[SPR-4509](https://jira.spring.io/browse/SPR-4509?redirect=false)** and commented  When you handle form pages dinamically you tipically override getInitialPage and getPageCount as well as getTargetPage and some other methods. The problem is that when validatePagesAndFinish is called it starts counting from page '0', when you expect it to start from page 'getInitialPage'. I know it's a stupid bug, but it's very annoying to have to override this method only to change that.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-02-26T21:35:28Z","2008-03-07T23:49:39Z"
"","9657","JmsTransactionManager recreates resources when cacheLevel >= CACHE_CONSUMER in DefaultMessageListenerContainer [SPR-4981]","**[Trevor Pounds](https://jira.spring.io/secure/ViewProfile.jspa?name=tpounds)** opened **[SPR-4981](https://jira.spring.io/browse/SPR-4981?redirect=false)** and commented  This affects both the 2.0.x and 2.5.x releases.  We are using Spring 2.0.8 in our environment and even when we set the cachelevel to CACHE_SESSION we see that the JmsTransactionManager recreates a new session and connection resource by default.  When I attach a debugger in this specific instance I see that the session being used to consume messages is different than the session that has the transactions being committed on.  In our particular scenario we are using a ConnectionFactory (see: ActiveMQConnectionFactory) object that provides no caching of resources (i.e. connections, sessions).  I see this has been partially remedied in the 2.5.x code base by setting the cacheLevel to CACHE_NONE when a transaction manager is specified.  This seems expensive in the scenario when we know that the transaction manager being used is the Spring JmsTransactionManager.   ---  **Affects:** 2.0.8, 2.5.5  **Attachments:** - [DefaultMessageListenerContainer.Spring-2.0.8.alternate.diff](https://jira.spring.io/secure/attachment/14335/DefaultMessageListenerContainer.Spring-2.0.8.alternate.diff) (_2.95 kB_) - [DefaultMessageListenerContainer.Spring-2.0.8.diff](https://jira.spring.io/secure/attachment/14329/DefaultMessageListenerContainer.Spring-2.0.8.diff) (_2.25 kB_)","closed","type: enhancement,","spring-projects-issues","2008-07-03T07:18:45Z","2012-06-18T12:44:25Z"
"","8943","does not build with GPL version of toplink [SPR-4265]","**[Torsten Werner](https://jira.spring.io/secure/ViewProfile.jspa?name=bollin)** opened **[SPR-4265](https://jira.spring.io/browse/SPR-4265?redirect=false)** and commented  toplink has been released under GPL as part of the glassfish project  but the springframework does not build with that version:  ./org/springframework/orm/toplink/support/CommonsLoggingSessionLog.java:21: packag import oracle.toplink.internal.databaseaccess.Accessor; ^ ./org/springframework/orm/toplink/support/CommonsLoggingSessionLog.java:22: packag import oracle.toplink.logging.AbstractSessionLog; ^ ./org/springframework/orm/toplink/support/CommonsLoggingSessionLog.java:23: packag import oracle.toplink.logging.SessionLogEntry; ^ ./org/springframework/orm/toplink/support/CommonsLoggingSessionLog.java:24: packag import oracle.toplink.publicinterface.Session; ^ ... (many more errors)   ---  **Affects:** 2.5 final","closed","status: declined,","spring-projects-issues","2007-12-17T19:02:16Z","2019-01-12T16:39:24Z"
"","9272","Cannot map handler .... There is already handler - on context refresh [SPR-4595]","**[Toomas Römer](https://jira.spring.io/secure/ViewProfile.jspa?name=toomasr)** opened **[SPR-4595](https://jira.spring.io/browse/SPR-4595?redirect=false)** and commented  I'm looking into JavaRebel & Spring integration and looking at adding controllers. I have a  in my configuration. It finds all the `@Controller` annotated controllers for me. When I create a controller (a new Java class with `@Controller` annotation) after the context has been loaded Spring cannot find it. I refresh the context and then Spring is able to find it.  When I have a controller with a mapping `@RequestMapping`(""/myPath.do"") and I make a new controller with the same mapping and remove the old one the refreshing of the context results in a IllegalStateException from AbstractUrlHandlerMapping:288. ""Cannot map handler ["" + handler + ""] to URL path ["" + urlPath +""]: There is already handler ["" +resolvedHandler + ""] mapped."");  Does this need to be fatal or could just a remapping occur?    ---  **Affects:** 2.5.1","closed","in: web,","spring-projects-issues","2008-03-18T02:48:51Z","2019-01-11T17:18:42Z"
"","9658","support cascading merge operation [SPR-4982]","**[tony kerz](https://jira.spring.io/secure/ViewProfile.jspa?name=tony_k)** opened **[SPR-4982](https://jira.spring.io/browse/SPR-4982?redirect=false)** and commented  support cascading merge operation, as suggested here:  currently the merge operation will not effect the nested map under ""key_2""...  \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  ---  **Issue Links:** - #11189 Introduce 'merge' attribute for util namespace collection elements (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-07-03T19:43:50Z","2019-01-11T18:31:31Z"
"","9732","Doc/warning: JMX autodetection ignoring JDK-proxied @Transactional beans [SPR-5057]","**[Tomislav Stojcevich](https://jira.spring.io/secure/ViewProfile.jspa?name=stojcevicht)** opened **[SPR-5057](https://jira.spring.io/browse/SPR-5057?redirect=false)** and commented  I'm using `@ManagedResource` to define my jmx beans with 	.  This works fine if I hard code the bean definitions in my config file.  If I use `@Service` annotations with  , no mbeans get registered.  ---  **Affects:** 2.5.5  **Issue Links:** - #6970 `@Transactional` annotation hodes `@ManagedResource`  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-04T04:10:23Z","2019-01-13T08:03:01Z"
"","9323","SpringBeanAutowiringInterceptor causes an error when used with @Resource SessionContext [SPR-4646]","**[Tomislav Stojcevich](https://jira.spring.io/secure/ViewProfile.jspa?name=stojcevicht)** opened **[SPR-4646](https://jira.spring.io/browse/SPR-4646?redirect=false)** and commented  I am successfully using SpringBeanAutowiringInterceptor to inject spring beans into my Stateless session bean.  However, when I add: `@Resource` SessionContext ctx;  to get access to the principal object, I get the following:  org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [javax.ejb.SessionContext] is defined: Unsatisfied dependency of type [interface javax.ejb.SessionContext]: expected at least 1 matching bean  It looks like spring is trying to inject a resource that should be injected by the ejb container.   ---  **Affects:** 2.5.2","closed","in: core,","spring-projects-issues","2008-03-31T07:51:57Z","2019-01-12T16:28:24Z"
"","9552","[Performance] CachedIntrospectionResults has wrong approach to caching. [SPR-4876]","**[Tomasz Wysocki](https://jira.spring.io/secure/ViewProfile.jspa?name=tawek)** opened **[SPR-4876](https://jira.spring.io/browse/SPR-4876?redirect=false)** and commented  Current approach in CachedIntrospectionResults is to cache ""weakly"" classes that are supposed to be ""not cache-safe"". This unfortunately causes that ""weakly"" cached introspection results can expire on gc. Rebuilding cached introspection results is costly in environments where there are lots of classes on a classpath. What is more rebuilding cause multi-threaded applications to synchronize on rebuilding. That cause significant drops in performance for periods of rebuilding which is not acceptable. This had been observed with JMeter running against some portal installation and diagnosed with YJP 7.5 profiler.  Maybe it is not common approach to put spring jars on a server classpath, but it will become more and more common with environments (OSGi for instance) where spring is a part of a platform. So putting spring jar on a server classpath cause all application classes not to be cache-safe. Workaround that forces applications to register it classloaders as cache-safe explicitly does seem a wrong solution for a problem to me.  I propose a different approach where unloading of cached introspection results is triggered by unloading a classloader. It has two of benefits compared to existing solution. 1. Application do not need to register and unregister their classloaders. 2. Introspection results are persisted as long as application is loaded and do not expire on GC. 3. Cached introspection results expire when application is unloaded.  Modified CachedIntrospectionResults  class from 2.0 version renamed to CachedIntrospectionResults2 follows as proposed solution. Note that I've decided to use 2.0 version because I see improvements done in later version as a step in a wrong direction. As you can see implementation is straight-forward and does not require any registration/unregistration of classloaders, and isCacheSafe method had been removed entirely (all classes are regarded as cache safe).  ```java /*  * Copyright 2002-2006 the original author or authors.  *  * Licensed under the Apache License, Version 2.0 (the ""License"");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an ""AS IS"" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.springframework.beans;  import java.beans.BeanInfo; import java.beans.IntrospectionException; import java.beans.Introspector; import java.beans.PropertyDescriptor; import java.util.Collections; import java.util.HashMap; import java.util.Map; import java.util.WeakHashMap;  import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory;  /**  * Class to cache PropertyDescriptor information for a Java class.  * Package-visible; not for use by application code.  *  * Necessary as Introspector.getBeanInfo() in JDK 1.3 will return a  * new deep copy of the BeanInfo every time we ask for it. We take the opportunity  * to cache property descriptors by method name for fast lookup. Furthermore,  * we do our own caching of descriptors here, rather than rely on the JDK's  * system-wide BeanInfo cache (to avoid leaks on class loader shutdown).  *  * Information is cached statically, so we don't need to create new  * objects of this class for every JavaBean we manipulate. Hence, this class  * implements the factory design pattern, using a private constructor  * and a static forClass method to obtain instances.  *  * @author Rod Johnson  * @author Juergen Hoeller  * @since 05 May 2001  * @see #forClass(Class)  */ public final class CachedIntrospectionResults2 {  	private static final Log logger = LogFactory.getLog(CachedIntrospectionResults2.class);  	/** 	 * Map keyed by classLoader containing Map of CachedIntrospectionResults. 	 * Needs to be a WeakHashMap with WeakReferences as values to allow 	 * for proper garbage collection in case of multiple class loaders. 	 */ 	public static final Map classLoaderCache = Collections.synchronizedMap(new WeakHashMap());   	/** 	 * Create CachedIntrospectionResults for the given bean class. 	 * We don't want to use synchronization here. Object references are atomic, 	 * so we can live with doing the occasional unnecessary lookup at startup only. 	 * @param beanClass the bean class to analyze 	 */ 	public static CachedIntrospectionResults2 forClass(Class beanClass) throws BeansException { 		CachedIntrospectionResults2 results = null; 		ClassLoader cl = beanClass.getClassLoader(); 		Map classCache = (Map) classLoaderCache.get(cl); 		if (classCache != null) { 			results = (CachedIntrospectionResults2) classCache.get(beanClass); 		} 		if (results == null) { 			// can throw BeansException 			results = new CachedIntrospectionResults2(beanClass); 			if (classCache == null) { 				classCache = Collections.synchronizedMap(new WeakHashMap()); 				classLoaderCache.put(cl, classCache); 			} 			classCache.put(beanClass, results); 		} 		else { 			if (logger.isDebugEnabled()) { 				logger.debug(""Using cached introspection results for class ["" + beanClass.getName() + ""]""); 			} 		} 		return results; 	}  	private final BeanInfo beanInfo;  	/** Property descriptors keyed by property name */ 	private final Map propertyDescriptorCache;   	/** 	 * Create a new CachedIntrospectionResults instance for the given class. 	 */ 	private CachedIntrospectionResults2(Class clazz) throws BeansException { 		try { 			if (logger.isDebugEnabled()) { 				logger.debug(""Getting BeanInfo for class ["" + clazz.getName() + ""]""); 			} 			this.beanInfo = Introspector.getBeanInfo(clazz);  			// Immediately remove class from Introspector cache, to allow for proper 			// garbage collection on class loader shutdown - we cache it here anyway, 			// in a GC-friendly manner. In contrast to CachedIntrospectionResults, 			// Introspector does not use WeakReferences as values of its WeakHashMap! 			Class classToFlush = clazz; 			do { 				Introspector.flushFromCaches(classToFlush); 				classToFlush = classToFlush.getSuperclass(); 			} 			while (classToFlush != null);  			if (logger.isDebugEnabled()) { 				logger.debug(""Caching PropertyDescriptors for class ["" + clazz.getName() + ""]""); 			} 			this.propertyDescriptorCache = new HashMap();  			// This call is slow so we do it once. 			PropertyDescriptor[] pds = this.beanInfo.getPropertyDescriptors(); 			for (int i = 0; i < pds.length; i++) { 				PropertyDescriptor pd = pds[i]; 				if (logger.isDebugEnabled()) { 					logger.debug(""Found bean property '"" + pd.getName() + ""'"" + 							(pd.getPropertyType() != null ? 							"" of type ["" + pd.getPropertyType().getName() + ""]"" : """") + 							(pd.getPropertyEditorClass() != null ? 							""; editor ["" + pd.getPropertyEditorClass().getName() + ""]"" : """")); 				} 				this.propertyDescriptorCache.put(pd.getName(), pd); 			} 		} 		catch (IntrospectionException ex) { 			throw new FatalBeanException(""Cannot get BeanInfo for object of class ["" + clazz.getName() + ""]"", ex); 		} 	}  	public BeanInfo getBeanInfo() { 		return this.beanInfo; 	}  	public Class getBeanClass() { 		return this.beanInfo.getBeanDescriptor().getBeanClass(); 	}  	public PropertyDescriptor getPropertyDescriptor(String propertyName) { 		return (PropertyDescriptor) this.propertyDescriptorCache.get(propertyName); 	}  } ```  Also I've proven (at least locally on my laptop) that solution works with test below. To run test below you need to change some private members of CachedIntrospectionResults to public access. Also you will need to give some jar with some class to test against it (here mysql jdbc driver had been used).  ```java import java.beans.BeanInfo; import java.io.File; import java.lang.ref.Reference; import java.net.URL; import java.net.URLClassLoader; import java.util.Map;  import junit.framework.TestCase;  import org.springframework.beans.CachedIntrospectionResults; import org.springframework.beans.CachedIntrospectionResults2;  public class CacheTest extends TestCase {  	public void testCache() throws Exception { 		File jar = new File(""./jdbc-3.1.10.jar""); 		URLClassLoader cl = URLClassLoader.newInstance(new URL[] { jar.toURL() });  		Class clazz = cl.loadClass(""com.mysql.jdbc.Driver"");  		{ 			CachedIntrospectionResults cir = CachedIntrospectionResults.forClass(clazz);  			assertFalse(cir.isCacheSafe(clazz));  			assertTrue(CachedIntrospectionResults.classCache.containsKey(clazz));  			Class beanClass = cir.getBeanClass();  			assertEquals(clazz, beanClass);  			BeanInfo beanInfo = cir.getBeanInfo();  			assertNotNull(beanInfo); 		}  		{ 			Reference ref = (Reference) CachedIntrospectionResults.classCache.get(clazz); 			assertNotNull(ref.get()); 		} 		for (int i = 0; i < 100; i++) {  			System.gc(); 			Thread.sleep(10); 			Reference ref = (Reference) CachedIntrospectionResults.classCache.get(clazz); 			if (ref.get() == null) { 				System.out.println(""EVICTED on #"" + i + "" gc pass "" + clazz);  				return; 			}  			fail(""CachedIntrospectionResults should be evicted from cache.""); 		}  	}  	public void testCache2() throws Exception { 		File jar = new File(""./jdbc-3.1.10.jar""); 		URLClassLoader cl = URLClassLoader.newInstance(new URL[] { jar.toURL() });  		Class clazz = cl.loadClass(""com.mysql.jdbc.Driver"");  		{ 			CachedIntrospectionResults2 cir = CachedIntrospectionResults2.forClass(clazz);  			assertTrue(CachedIntrospectionResults2.classLoaderCache.containsKey(cl)); 			assertTrue(((Map) CachedIntrospectionResults2.classLoaderCache.get(cl)).containsKey(clazz));  			Class beanClass = cir.getBeanClass();  			assertEquals(clazz, beanClass);  			BeanInfo beanInfo = cir.getBeanInfo();  			assertNotNull(beanInfo); 		}  		{ 			CachedIntrospectionResults2 cir = (CachedIntrospectionResults2) ((Map) CachedIntrospectionResults2.classLoaderCache 					.get(cl)).get(clazz); 			assertNotNull(cir); 		} 		for (int i = 0; i < 100; i++) { 			System.out.println(""P1 PASS #"" + i);  			System.gc(); 			Thread.sleep(10); 			CachedIntrospectionResults2 cir = (CachedIntrospectionResults2) ((Map) CachedIntrospectionResults2.classLoaderCache 					.get(cl)).get(clazz); 			if (cir == null) { 				System.out.println(""EVICTED on gc pass #"" + i + ""  clazz :"" + clazz); 				fail(""Should not be evicted without evicting  classloader first."");  			}  		}  		assertEquals(1, CachedIntrospectionResults2.classLoaderCache.size()); 		cl = null; // Releasing classloader 		clazz = null; // Releasing class 		for (int i = 0; i < 100; i++) { 			System.out.println(""P2 PASS #"" + i); 			System.gc(); 			Thread.sleep(10); 			int size = CachedIntrospectionResults2.classLoaderCache.size(); 			if (size == 0) { 				System.out.println(""EVICTED gc pass on #"" + i); 				return;  			}  		}  		fail(""Should be evicted after unloading classloader."");  	} ```  Tested on jdk1.5.0_10 SUN Linux (Centos 5.0)  I plan to test this solution further on a staging environment for my current project and I will post results.  ---  **Affects:** 1.0 RC1, 1.0 RC2, 1.0 final, 1.0.1, 1.0.2, 1.1 RC1, 1.1 RC2, 1.1 final, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5, 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1, 2.0.2, 1.2.9, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.1 M1, 2.1 M2, 2.1 M3, 2.1 M4, 2.5 RC1, 2.5 RC2, 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4  **Sub-tasks:** - #12494 SPR-4876  [Performance] CachedIntrospectionResults initialization slow down weblogic.  **Issue Links:** - #11886 GC problem when having Spring jars in a higher ClassLoader without using clearClassLoader  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/81e683b3ee8bcad4df97f04b59397dcdc9942e14  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-31T07:31:52Z","2019-01-11T19:09:23Z"
"","9703","DB connection is acquirered when transactions starts [SPR-5028]","**[Tom van den Berge](https://jira.spring.io/secure/ViewProfile.jspa?name=tomvandenberge)** opened **[SPR-5028](https://jira.spring.io/browse/SPR-5028?redirect=false)** and commented  I'm using Spring for transaction management (using annotations), and c3p0 and hibernate.  I have noticed that as soon as I start a transaction using the `@Transaction` annotation, a db connection is acquired from the c3p0 connection pool.  I was expecting that a connection is only acquired when hibernate actually submits a query or flushes its context (typically when the transaction commits).  However when I start a transaction that does not do anything with the database (not very useful in practice), it still acquires a connection from the pool (c3p0 logs this in debug mode).  What is the reason for acquiring a db connection before it's actually used? Like this, unnecessarily many db connections are used.  (See also http://forum.springframework.org/showthread.php?p=192795#post192795)   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-07-22T23:49:53Z","2012-06-18T12:45:11Z"
"","8956","jmxri.jar (1.2) contains older version of javax.management package than needed for spring2.5_final [SPR-4278]","**[Tom McCuch](https://jira.spring.io/secure/ViewProfile.jspa?name=tmccuch)** opened **[SPR-4278](https://jira.spring.io/browse/SPR-4278?redirect=false)** and commented  jmxri.jar contains older version of javax.management package than needed for spring2.5_final. spring2.5_final project compiles with no errors without jmxri.jar in build path (using javax.management package from Sun JVM 1.6.0_03).  Specific compile time errors caused by jmxri.jar are:  Description: The constructor MBeanServerInvocationHandler(MBeanServerConnection, ObjectName, boolean) is undefined. Resource: MBeanClientInterceptor.java Path: spring/src/org/springframework/jmx/access Line: 228  Description: The constructor StandardMBean(Object, Class, boolean) is not visible. Resource: MBeanExporter.java Path: spring/src/org/springframework/jmx/export Line: 785   ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2007-12-22T03:26:27Z","2007-12-26T06:53:18Z"
"","9714","Spring JMX Annotation inheritance support is inconsistent (or at least difficult in some situations) [SPR-5039]","**[Tom Mack](https://jira.spring.io/secure/ViewProfile.jspa?name=tommack)** opened **[SPR-5039](https://jira.spring.io/browse/SPR-5039?redirect=false)** and commented  Here's my situation, I have an inteface ""Connection"", aABC ""ConnectionBase"", and several concrete class ""SpecificXXXConnection"" (note, none of these classes override methods in the base class). For historical reasons, the connections are produced by a static method on a factory class. So each connection bean is declared using the factory-method syntax. For example:                       The getDefDispatchConn method is declared to return a ""Connection"".  So my first problem is that the MBeanExporter.autodetect(AutodetectCallback) method only looks for annotations on the beanFactory.getType() type (which is going to be the interface). This is alright (even though in the !laxyInit case, it could use the actual instance for the include check), so I put my `@ManagedResource` and `@ManagedAttribute` annotations on the interface.  But then, things still weren't working. I found that AnnotationJmxAttributeSource.getManagedResource(Class) uses the Class.getAnnotation method(Class) method (and at this point we're using the Class of the actual instance, SpecificConnection). This causes a problem because it will not find the annotation on the interface (or on the base class, for that matter). So, I overrode this method to use AnnotationUtils.findAnnotation. This got me closer. But now, none of the attributes were being found. Because it doesn't seem like findAnnotation(Method,Class) can find annotations on interfaces, I had to move the `@ManagedAttribute` annotations to the ABC.  So in summary, I had to place a `@ManagedResource` on the interface to get the bean included in the first place, then this annotation must also be on each concrete class OR getManagedResource muse be overridden, and finally the attributes may not be annotated at the interface level.  Obviously taking the FactoryBean out of the picture would simplify things, but it seems like something here could be improved.  ---  **Affects:** 2.5.4  **Issue Links:** - #8316 Allow `@ManagedXYZ` on interfaces  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8f6a42bf646442192dcae01a9334f246508c7c99  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-07-25T06:26:24Z","2019-01-13T08:03:09Z"
"","8942","@ModelAttribute (method level for reference data) default names could be made more useful [SPR-4264]","**[Tom Mack](https://jira.spring.io/secure/ViewProfile.jspa?name=tommack)** opened **[SPR-4264](https://jira.spring.io/browse/SPR-4264?redirect=false)** and commented  AnnotationMethodHandlerAdapter simply calls implicitModel.addAttribute(attrValue) [around line 228] when an explicit value isn't set on the attribute. It is my opinion that one of the following would be more useful:  1. Determine the attrName from the name of the annotated method. If the method was called getImportantData, the attrName could be set to ""importantData"". If the method name didn't start with a get/is, the attrName could simple be equal to the method name.  2. Instead of simply delegating to the ModelMap class, uses its conventions but apply them to the return type of the method. I'm not a huge fan of the getVariableName idea, but it would be more useful if it took into account the declared return type. If I have a method called ""List\ getImportantData()"", the attrName could be ""someBaseClassList"" (which is better than arbitrarily picking the class of one item in the list).  I like #1, this is what I expected to happen before I tried it. It also seems to follow how `@RequestMapping` works when no value is declared. But, I can see how #2 is a smaller change from how it currently works.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-17T09:50:24Z","2012-06-19T03:46:45Z"
"","8926","@RequestMapping at type level seems inconsistent when combined with method level [SPR-4248]","**[Tom Mack](https://jira.spring.io/secure/ViewProfile.jspa?name=tommack)** opened **[SPR-4248](https://jira.spring.io/browse/SPR-4248?redirect=false)** and commented  The following piece of code works exactly as I would expect:  `@Controller` `@RequestMapping`(""/foo/*"") public class DeviceGroupAttributeController { `@RequestMapping` public void bar(String groupName, ModelMap map) { // can be reached at: /servlet/foo/bar } }  However, I would expect the following to also work:  `@Controller` `@RequestMapping`(""/foo/*"") public class DeviceGroupAttributeController { `@RequestMapping`(""bar"")   // ""/bar"" doesn't work either public void bar(String groupName, ModelMap map) { // cannot be reached at: /servlet/foo/bar } }  In other words, if I want to explicitly set the mapping at the method level, I must repeat myself and map it to ""/foo/bar"" or ""/**/bar"". I'd expect that if I included a * at the type level, that would scope the lookups at the method level--which is does if I don't specify a path at the method level.  I think it boils down to the fact that  within resolveHandlerMethod, InternalPathMethodNameResolver calls WebUtils.extractFilenameFromUrlPath whereas the pathMatcher just works on the getLookupPathForRequest value. I can see that these are two different approaches to picking the method, but the difference seems inconsistent.   ---  **Affects:** 2.5 final  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-12-12T09:19:18Z","2012-06-19T03:46:53Z"
"","9613","DefaultMessageListenerContainer stops listening [SPR-4938]","**[Tom Lambrechts](https://jira.spring.io/secure/ViewProfile.jspa?name=tola2000)** opened **[SPR-4938](https://jira.spring.io/browse/SPR-4938?redirect=false)** and commented  DefaultMessageListenerContainer stops listening because all listener threads are stopped without being rescheduled. This bug is very difficult to reproduce but has a large impact. The fix is however simple, please handle this with high priority.  This issue occures when the concurrentConsumers=1 and maxConcurrentConsumers > 1. It is caused by a race condition in the AsyncMessageListenerInvoker.run method.  Consider the following logging and code: DEBUG : org.springframework.jms.listener.DefaultMessageListenerContainer > Received message of type [class progress.message.jimpl.TextMessage] from consumer [progress.message.jimpl.QueueReceiver@18ad9a0] of session [] 08/06/18 12:36:15.539, jms://x4.cti.AgentService?id=AgentService-525 DEBUG : org.springframework.jms.listener.DefaultMessageListenerContainer > Raised scheduled invoker count: 2 08/06/18 12:36:15.539, jms://x4.cti.AgentService?id=AgentService-525 DEBUG : org.springframework.jms.listener.DefaultMessageListenerContainer > Lowered scheduled invoker count: 1 08/06/18 12:36:18.554, jms://x4.cti.AgentService?id=AgentService-526 DEBUG : org.springframework.jms.listener.DefaultMessageListenerContainer > Lowered scheduled invoker count: 0 08/06/18 12:36:18.554, jms://x4.cti.AgentService?id=AgentService-527  You can see that two threads lower the invoker count at the same time, cause the scheduled count to be 0 and stopping the container. AsyncMessageListenerInvoker.run() { ...  Line: x			 if (!shouldRescheduleInvoker(this.idleTaskExecutionCount) || !rescheduleTaskIfNecessary(this)) { Line: y synchronized (activeInvokerMonitor) { scheduledInvokers.remove(this); if (logger.isDebugEnabled()) { logger.debug(""Lowered scheduled invoker count: "" + scheduledInvokers.size()); } activeInvokerMonitor.notifyAll();      		   clearResources();     	}     }          ...  }  If we have two active threads A and B at line x. Because shouldRescheduleInvoker() is synchronized(activeInvokerMonitor) thread A will do the check and stop at line y. Then thread B will do the same check with the same result (becaus thread A did not yet do the remove) and also stop at line Y. Both threads will proceed by removing themself from the scheduled invokers ending up with an emty scheduledInvokers list causing the end of both trheads, instead of the minimum of 1. No new thread is scheduled and the listenercontainer just stops working at all.  The check shouldRescheduleInvoker() and the update of scheduledInvokers.remove() should be in the same syncronized block: AsyncMessageListenerInvoker.run() { ...      synchronized (activeInvokerMonitor) {     	if (!shouldRescheduleInvoker(this.idleTaskExecutionCount) || !rescheduleTaskIfNecessary(this)) {     		     		scheduledInvokers.remove(this);     		if (logger.isDebugEnabled()) {     			logger.debug(""Lowered scheduled invoker count: "" + scheduledInvokers.size());     		}     		activeInvokerMonitor.notifyAll();     	     		clearResources();     	}     	else if (isRunning()) {     		int nonPausedConsumers = getScheduledConsumerCount() - getPausedTaskCount();     		if (nonPausedConsumers < 1) {     			logger.error(""All scheduled consumers have been paused, probably due to tasks having been rejected. "" +     					""Check your thread pool configuration! Manual recovery necessary through a start() call."");     		}     		else if (nonPausedConsumers < getConcurrentConsumers()) {     			logger.warn(""Number of scheduled consumers has dropped below concurrentConsumers limit, probably "" +     					""due to tasks having been rejected. Check your thread pool configuration! Automatic recovery "" +     					""to be triggered by remaining consumers."");     		}     	}     }     	...  }  Please also check if the same issue occures in the class DefaultMessageListenerContainer102. R. Tom   ---  **Affects:** 2.5.4  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2008-06-19T20:21:33Z","2021-03-01T06:10:12Z"
"","9734","ClassGenException building project after upgrade to Spring 2.5.6 and AspectJ 1.6.1 [SPR-5059]","**[Tom Duffey](https://jira.spring.io/secure/ViewProfile.jspa?name=tduffey)** opened **[SPR-5059](https://jira.spring.io/browse/SPR-5059?redirect=false)** and commented  Not sure if this is Spring, AspectJ or both but...Upgraded to 2.5.6 nightly build 576 and now my project doesn't build.  Copied over the new Spring jars (spring.jar, spring-aspects.jar, spring-test.jar and spring-webmvc.jar) along with the bundled AspectJ jars (aspectjrt.jar and aspectjweaver.jar) and two more from the actual AspectJ 1.6.1 release (aspectjlib.jar and aspectjtools.jar).  Getting pages and pages of output during build but I think this is the relevant part:      [iajc]  -- (ClassGenException) Do not attempt to modify the index for this constant instruction: aload_0[42](size1)     [iajc] Do not attempt to modify the index for this constant instruction: aload_0[42](size1)     [iajc] org.aspectj.apache.bcel.generic.ClassGenException: Do not attempt to modify the index for this constant instruction: aload_0[42](size1)     [iajc] 	at org.aspectj.apache.bcel.generic.InstructionCLV.setIndex(InstructionCLV.java:19)     [iajc] 	at org.aspectj.weaver.bcel.BcelClassWeaver.genInlineInstructions(BcelClassWeaver.java:1949)     [iajc] 	at org.aspectj.weaver.bcel.BcelClassWeaver.inlineMethod(BcelClassWeaver.java:1429)     [iajc] 	at org.aspectj.weaver.bcel.BcelClassWeaver.inlineSelfConstructors(BcelClassWeaver.java:1352)     [iajc] 	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:502)     [iajc] 	at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:105)     [iajc] 	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1669)     [iajc] 	at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1620)     [iajc] 	at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1393)     [iajc] 	at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1213)     [iajc] 	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:454)     [iajc] 	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:391)     [iajc] 	at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:379)     [iajc] 	at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)     [iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:641)     [iajc] 	at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:392)     [iajc] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:995)     [iajc] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:269)     [iajc] 	at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:184)     [iajc] 	at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)     [iajc] 	at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)     [iajc] 	at org.aspectj.tools.ajc.Main.run(Main.java:382)     [iajc] 	at org.aspectj.tools.ajc.Main.runMain(Main.java:254)     [iajc] 	at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1307)     [iajc] 	at org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1105)     [iajc] 	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)     [iajc] 	at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)     [iajc] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     [iajc] 	at java.lang.reflect.Method.invoke(Method.java:597)     [iajc] 	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)     [iajc] 	at org.apache.tools.ant.Task.perform(Task.java:348)     [iajc] 	at org.apache.tools.ant.Target.execute(Target.java:357)     [iajc] 	at org.apache.tools.ant.Target.performTasks(Target.java:385)     [iajc] 	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)     [iajc] 	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)     [iajc] 	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)     [iajc] 	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)     [iajc] 	at org.apache.tools.ant.Main.runBuild(Main.java:698)     [iajc] 	at org.apache.tools.ant.Main.startAnt(Main.java:199)     [iajc] 	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)     [iajc] 	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)    ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2008-08-05T01:21:35Z","2019-01-12T16:28:03Z"
"","9727","Component scanner doesn't recognize same beans when included multiple times on classpath [SPR-5052]","**[Tom Duffey](https://jira.spring.io/secure/ViewProfile.jspa?name=tduffey)** opened **[SPR-5052](https://jira.spring.io/browse/SPR-5052?redirect=false)** and commented  See forum thread: http://forum.springframework.org/showthread.php?p=194311#post194311  I started using component scanning recently and now none of my tests run because my test classpath includes directories with some of the same classes, where one set is instrumented for test coverage analysis.  The component scanner finds two beans w/the same name and thinks they are dupes, e.g.,  - com.foo.TroutService (Found in .testclasses) - com.foo.TroutService (Found in .classes)  It would be great if the component scanner would know or could be configured to know that these are the same class so it doesn't have to try and register it twice.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-31T06:58:38Z","2012-06-19T03:46:37Z"
"","9371","Using component scanning in signed jars is very slow [SPR-4694]","**[Todd Huss](https://jira.spring.io/secure/ViewProfile.jspa?name=thuss)** opened **[SPR-4694](https://jira.spring.io/browse/SPR-4694?redirect=false)** and commented  Since upgrading from Spring 2.0.8 to Spring 2.5.3 our application that runs in signed jars (as required by webstart) starts VERY slowly. It runs fine in a signed jar with Spring 2.0.8 but since the upgrade now takes 5 or more minutes to start as opposed to 10-15 seconds under Spring 2.0.8.  What's interesting is that it's equally fast with Spring 2.5.3 as long as the jar is unsigned. However, as soon as you sign the jar and then run the application (via java -cp ourfile.jar mainclass) it takes forever to start. Downgrading back to Spring 2.0.8 also solves the issue. Getting stack dumps show that it seems like as of Spring 2.5.x (we tried 2.5.1-2.5.3) during startup on a signed jar is now spending a tremendous amount of time doing jar verification triggered from org.springframework.core.io.UrlResource. Here are a couple sample stack dumps of what the application is doing during the now very long startup period:      ....     at java.util.jar.JarFile.getManifestFromReference(JarFile.java:159)     at java.util.jar.JarFile.getManifest(JarFile.java:146)     at sun.net.www.protocol.jar.URLJarFile.isSuperMan(URLJarFile.java:155)     - locked  (a sun.net.www.protocol.jar.URLJarFile)     at sun.net.www.protocol.jar.URLJarFile.getManifest(URLJarFile.java:121)     at java.util.jar.JarFile.maybeInstantiateVerifier(JarFile.java:287)     at java.util.jar.JarFile.getInputStream(JarFile.java:381)     - locked  (a sun.net.www.protocol.jar.URLJarFile)     at sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.java:144)     at org.springframework.core.io.UrlResource.getInputStream(UrlResource.java:123)     at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:74)  or here      ....     at java.util.jar.JarVerifier.processEntry(JarVerifier.java:250)     - locked  (a [B)     at java.util.jar.JarVerifier.update(JarVerifier.java:188)     at java.util.jar.JarFile.initializeVerifier(JarFile.java:321)     at java.util.jar.JarFile.getInputStream(JarFile.java:386)     - locked  (a sun.net.www.protocol.jar.URLJarFile)     at sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.java:144)     at org.springframework.core.io.UrlResource.getInputStream(UrlResource.java:123)  ---  **Affects:** 2.5.1, 2.5.2, 2.5.3  **Issue Links:** - #16509 Spring-specific index file for component candidate classes  13 votes, 10 watchers","closed","has: votes-jira,","spring-projects-issues","2008-04-11T10:08:02Z","2019-01-11T18:15:33Z"
"","9618","Change MBeanExporter to warn instead of breaking when unable to create cglib proxy [SPR-4943]","**[Tobias Mattsson](https://jira.spring.io/secure/ViewProfile.jspa?name=sigget)** opened **[SPR-4943](https://jira.spring.io/browse/SPR-4943?redirect=false)** and commented  This concerns MBeanExporter.registerLazyInit(). When it creates a proxy at line 688 it expects to get a cglib proxy. But when the target bean is a FactoryBean that states that it returns an interface then the returned prozy is actually a JDK-proxy. This causes an exception from doRegister() on line 694. I suggest that a check is added that detects if the TargetSource is aimed at an interface and skips the call to doRegister and outputs a warning that the bean wont be exported.  The FactoryBean that triggered this for me was WebFlow's FlowRegistryFactoryBean.   ---  **Attachments:** - [SPR4943JmxUtilsTest.java](https://jira.spring.io/secure/attachment/14331/SPR4943JmxUtilsTest.java) (_927 bytes_)","closed","type: enhancement,","spring-projects-issues","2008-06-23T02:38:42Z","2019-01-11T18:27:42Z"
"","9383","Make doGetSession(SessionFactory, Interceptor, SQLExceptionTranslator, boolean) public. [SPR-4706]","**[Tobias Bergman](https://jira.spring.io/secure/ViewProfile.jspa?name=tbergman)** opened **[SPR-4706](https://jira.spring.io/browse/SPR-4706?redirect=false)** and commented  Make org.springframework.orm.hibernate3#doGetSession(SessionFactory, Interceptor, SQLExceptionTranslator, boolean)  public. Which then can be used from a custom CurrentSessionContext class.   ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-04-15T00:56:08Z","2012-06-19T09:36:31Z"
"","9816","Property conversion for set fails for bean that implements collection type itself (worked in 2.5.1) [SPR-5143]","**[Tinh Truong Xuan](https://jira.spring.io/secure/ViewProfile.jspa?name=tinh.truong)** opened **[SPR-5143](https://jira.spring.io/browse/SPR-5143?redirect=false)** and commented  I have a simple class like this:  public class EventSet extends HashSet\ {      private static final long serialVersionUID = -9200920096606560867L;          public EventSet() {     	super();     }          public EventSet(Collection","closed","in: core,","spring-projects-issues","2008-09-05T21:10:08Z","2012-06-19T03:47:02Z"
"","8924","Component scanning fails if a component does not implement a configured default-init-method [SPR-4246]","**[Timothy Braje](https://jira.spring.io/secure/ViewProfile.jspa?name=tbraje)** opened **[SPR-4246](https://jira.spring.io/browse/SPR-4246?redirect=false)** and commented  If you configure your bean factory to have a default-init-method and then load beans via component scanning, then the bean factory will fail to initialize if beans discovered via component scanning do not define that init method.  I have written a small test application that demonstrates this.  There is a run.sh file that will run the app,and demonstrate the failure.  If the config file spring-config/spring.xml is modified to uncomment the 'hello' bean, then all works just fine.   ---  **Affects:** 2.5 final  **Attachments:** - [springtest.tgz](https://jira.spring.io/secure/attachment/13194/springtest.tgz) (_2.39 MB_)","closed","in: core,","spring-projects-issues","2007-12-12T04:58:49Z","2012-06-19T03:46:46Z"
"","8940","Spring website to have bugs (or similar) page and suggested process [SPR-4262]","**[Tim Diggins](https://jira.spring.io/secure/ViewProfile.jspa?name=tdiggins)** opened **[SPR-4262](https://jira.spring.io/browse/SPR-4262?redirect=false)** and commented  If you are motivated to help the framework by reporting a bug or improvment, but want to be well-mannered and do it in the best manner, you might look (as I have done on each of the times I've gone to report things) for a suggested process - e.g. discuss in mailing list (users, or dev?) post in the forum ? or post directly to JIRA*  In my case (after posting on the users list and then in the forum) I saw the useful notice on the architecture discussion forum: ""If you have a specific problem with a particular Spring API, use a support forum instead. If you are pretty sure you have found a Spring bug, file a bug report in JIRA instead.""  I note that eclipse.org has the very useful and prominent bugs link / page, from which you can navigate to a page with a recommended process for bug reporting: https://bugs.eclipse.org/bugs/enter_bug_wizard.cgi  It would be very helpful for occassional community contribuors if http://www.springframework.org/ had a recommended process* on such a page, with links in the main site menu.  * by process  I mean steps to take, not necessarily an automated process  BTW: try doing a google search on jira+springmodules - or jira+spring-modules - no dice - of course if you do jira+spring it's first up, but it's not necessarily that obvious that springmodules will be part of jira's spring    --- No further details from [SPR-4262](https://jira.spring.io/browse/SPR-4262?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-12-15T10:06:34Z","2015-09-22T18:55:05Z"
"","9002","DispatcherServlet: null viewName causes OOME via DefaultRequestToViewNameTranslator [SPR-4323]","**[Thorsten Blome](https://jira.spring.io/secure/ViewProfile.jspa?name=tblome)** opened **[SPR-4323](https://jira.spring.io/browse/SPR-4323?redirect=false)** and commented  In the urlMap of a handlerMapping(SimpleUrlHandlerMapping)-bean, we defined a mapping like this: \\\  In the definition/configuration of this endUserController(a MultiActionController),  we made the error of not having an errorView defined for this controller in the XML. In the seldom case when there was an error in the Controller, and the errorView should have been hit, we whitnessed on OutOfMemoryError effectively bringing down the whole VM.  What seems to cause this is the following: In DispatcherServlet.java, around line 880(since Spring-2.5-final only), there is: // Do we need view name translation? if (mv != null && !mv.hasView()) { mv.setViewName(getDefaultViewName(request)); } ... were the default viewNameTranslator, a DefaultRequestToViewNameTranslator(unset in our config) chooses the viewName to consist of the same path that was already in the request URL, which in turn leads to the same handler/controller being hit. Thus, we have a loop now, in that the same controller gets hit constantly with an ever growing URL(the viewName is appended to the URL) until an OutOfMemoryException occurs.  In the logs, it looks sth. like this: mvc.multiaction.AbstractUrlMethodNameResolver: Returning handler method name 'activateUser' for lookup path: /2139252/0/de/web/endUser/action/activateUser.html std.web.EndUserController: cannot register user (bad key or state!=EMAILCONFIRM) [error in controller, now null errorView in ModelAndView ] 2008-01-05 05:03:43,640 [DEBUG] [http-80-1] [] [2139252] [] tools.servlet.ClientInternalResourceViewResolver: in resolveViewName('2139252/0/de/web/endUser/action/activateUser',..) [huh? viewName is same as request URL? ] servlet.view.AbstractView: Rendering view with name '2139252/0/de/web/endUser/action/activateUser' with model {error=userActivationError} and static attributes {} mvc.multiaction.AbstractUrlMethodNameResolver: Returning handler method name 'activateUser' for lookup path: /2139252/0/de/web/endUser/action/2139252/0/de/web/endUser/action/activateUser [same handler hit again, URL doubled ] std.web.EndUserController: cannot register user (bad key or state!=EMAILCONFIRM) [error case again, null errorView again...] tools.servlet.ClientVelocityViewResolver: in resolveViewName('2139252/0/de/web/endUser/action/2139252/0/de/web/endUser/action/activateUser',..) mvc.multiaction.AbstractUrlMethodNameResolver: Returning handler method name 'activateUser' for lookup path: /2139252/0/de/web/endUser/action/2139252/0/de/web/endUser/action/2139252/0/de/web/endUser/action/2139252/0/de/web/endUser/action/activateUser ...and so on, until OOME  Now, I know the real cause of the problem is incomplete configuration of the controller(a missing view definition) on our side, and we could also probably rule out the behaviour of this looping to occur on missing viewNames by using and configuring a custom viewNameTranslator, but: I do think the behaviour of Spring is very risky at this point, when the default behaviour when hitting a(possibly rarely hit) unconfigured errorView name(null) would lead to such a loop, finally resulting in an OOME and thus bringing down the whole VM.  Is the above mentioned code in DispatcherServlet really needed at this place, even if it bears the risk of an OOME if a null errorView name is hit?    ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2008-01-11T01:49:01Z","2012-06-19T03:47:09Z"
"","9872","Re-allow merge of util:map list, set, ... based on the same bean ID [SPR-5199]","**[Thomas Timbul](https://jira.spring.io/secure/ViewProfile.jspa?name=ttimbul)** opened **[SPR-5199](https://jira.spring.io/browse/SPR-5199?redirect=false)** and commented  For the sake of clarity/modularisation in my XML I am trying to separate out certain service definitions into separate files. It would be nice to see the re-emergence of 'merge' on the util: collection definitions in a way that definitions with the same ID are merged.  For example (hope this submits in a readable way):  [services.xml]  \ \ \  [service1.xml]  \    [service2.xml]  \    There are probably workarounds for this, but for the moment I would be forced to have the serviceMap defined completely in a single place.  ---  **Issue Links:** - #11189 Introduce 'merge' attribute for util namespace collection elements  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-10-03T08:45:19Z","2019-01-11T15:39:39Z"
"","9821","Provide option to turn off getWarnings() call in JdbcTemplate [SPR-5148]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-5148](https://jira.spring.io/browse/SPR-5148?redirect=false)** and commented  The getWarnings() method call in JdbcTemplate generates extra overhead which depending on the JDBC driver can be significant. Tested with some MySQL drivers and 30-40% of the processing was spent in the getWarnings() call.  We should either turn this call off by default unless setIgnoreWarnings(false) has been set or at least provide a way of skipping the warnings processing entirely.  See forum post: -- http://forum.springframework.org/showthread.php?p=200863#post200863   ---  **Affects:** 2.5.5  **Attachments:** - [SPR-5148.patch](https://jira.spring.io/secure/attachment/14676/SPR-5148.patch) (_5.40 kB_)  **Issue Links:** - [BATCH-909](https://jira.spring.io/browse/BATCH-909) Turn off getWarnings() call in JdbcCursorItemReader when ignoreWarnings is true","closed","type: enhancement,","spring-projects-issues","2008-09-10T00:24:21Z","2012-08-23T08:09:44Z"
"","9559","PetClinic should include slf4j jars when using new Hibernate version [SPR-4883]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4883](https://jira.spring.io/browse/SPR-4883?redirect=false)** and commented  The build script for PetClinic needs to be updated to include slf4j jars when using new Hibernate version   --- No further details from [SPR-4883](https://jira.spring.io/browse/SPR-4883?redirect=false)","closed","type: task,","spring-projects-issues","2008-06-02T01:56:42Z","2012-06-19T03:47:25Z"
"","9546","Define the JDBC API for SQLXML [SPR-4870]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4870](https://jira.spring.io/browse/SPR-4870?redirect=false)** and commented   --- No further details from [SPR-4870](https://jira.spring.io/browse/SPR-4870?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-05-28T00:11:42Z","2012-06-19T03:46:48Z"
"","9490","SimpleJdbcCall should check that declared parameters specify a name [SPR-4814]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4814](https://jira.spring.io/browse/SPR-4814?redirect=false)** and commented  SimpleJdbcCall/AbstractJdbcCall should check that declared parameters added do specify a name - otherwise there might be a NPE later on in parameter reconciliation.  CallMetaDataContext reconcileParameters should check that a name exists for parameter to avoid NPE.   ---  **Affects:** 2.5.4","closed","type: bug,","spring-projects-issues","2008-05-14T07:33:48Z","2012-06-19T03:47:12Z"
"","9457","Improve handling of Oracle Timestamps with local time zone [SPR-4780]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4780](https://jira.spring.io/browse/SPR-4780?redirect=false)** and commented  JdbcUtils.getResultSetValue method needs to be improved to handle Oracle Timestamps of type oracle.sql.TIMESTAMPLTZ.  We need to use a calendar or use getObject() for these.   ---  **Affects:** 2.5.4","closed","type: bug,","spring-projects-issues","2008-05-04T23:47:07Z","2019-11-25T09:02:11Z"
"","9435","Add option of using a custom message listener class to   [SPR-4758]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4758](https://jira.spring.io/browse/SPR-4758?redirect=false)** and commented  Add option of using a custom class implementing the MessageListenerContainer interface to .  Could add a ""Custom"" option to the ""container-type"" attribute and add an additional attribute to specify the ""custom-container-class"".   --- No further details from [SPR-4758](https://jira.spring.io/browse/SPR-4758?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-04-27T23:54:26Z","2012-06-19T03:46:51Z"
"","9378","Improve the handling of multiple function/procedure signatures for PL/SQL packages  [SPR-4701]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4701](https://jira.spring.io/browse/SPR-4701?redirect=false)** and commented  We currently don;t support  multiple function/procedure signatures for PL/SQL packages  - we should improve this and use SEQUENCE and OVERLOAD columns from metadata to distinguish the various signatures and try to match them up with the parameters passed in.  See http://forum.springframework.org/showthread.php?t=52592   ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-04-14T07:19:22Z","2015-09-22T18:55:04Z"
"","9366","Null values not handled by ""Microsoft SQL Server 2005 JDBC Driver"" [SPR-4689]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4689](https://jira.spring.io/browse/SPR-4689?redirect=false)** and commented  Switch to use setObject(ix, null) for ""Microsoft SQL Server 2005 JDBC Driver"".  The jTDS driver seems to work fine with setNull(ix, Types.NULL)  Also: see how other (older) Microsoft drivers behave.   ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-04-10T10:29:34Z","2012-06-19T03:47:24Z"
"","9333","MappingSqlParameter with named parameters deosn't allow for using same parameter multiple times [SPR-4656]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4656](https://jira.spring.io/browse/SPR-4656?redirect=false)** and commented  With MappingSqlQuery.executeByNamedParam trying to use the same parameter multiple times withing the SQL causes excpetion - InvalidDataAccessApiUsageException that says ""given 2 parameters but expected 1""  see http://forum.springframework.org/showthread.php?t=52024   ---  **Affects:** 2.5.2","closed","type: bug,","spring-projects-issues","2008-04-03T04:58:43Z","2012-06-19T03:46:58Z"
"","9327","Add procedure column metadata lookup for PostgreSQL to  SimpleJdbcCall [SPR-4650]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4650](https://jira.spring.io/browse/SPR-4650?redirect=false)** and commented  PostgreSQL JDBC driver 8.3 now provides the name of procedure columns so we can generate parameters automatically.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-04-01T10:15:22Z","2012-06-19T03:47:23Z"
"","9326","Add support to SimpleJdbcInsert for retrieving generated keys for PostgreSQL [SPR-4649]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4649](https://jira.spring.io/browse/SPR-4649?redirect=false)** and commented  PostgreSQL doesn't support the JDBC 3 method getGeneratedKeys but the do have an""INSERT ... RETURNING id""  feature since 8.2 that could be used to simulate this functionality.  We already do a similar thing for HSQLDB.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-04-01T10:13:10Z","2012-06-19T03:46:45Z"
"","9071","Add ORA-2292 to dataIntegrityViolationCodes in sql-error-codes.xml [SPR-4392]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4392](https://jira.spring.io/browse/SPR-4392?redirect=false)** and commented  Just need to add the 2292 error code.   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-01-25T05:09:09Z","2012-06-19T03:47:23Z"
"","8990","JpaTransactionManager should wrap em.close() calls with try/catch block so original exception is not lost [SPR-4311]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4311](https://jira.spring.io/browse/SPR-4311?redirect=false)** and commented  Exception handling in JpaTransactionManager.doBegin() method should wrap the em.close() calls in try/catch block so the original exception can be reported should the em.close call fail with an exception.  This was reported on OpenJPA dev list - http://www.nabble.com/some-help-w--a-stacktrace--to14714763.html  See odd looking stacktrace using JPA:   org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active. at org.apache.openjpa.kernel.BrokerImpl.close(BrokerImpl.java:4014) at org.apache.openjpa.kernel.DelegatingBroker.close(DelegatingBroker.java:1282) at org.apache.openjpa.persistence.EntityManagerImpl.close(EntityManagerImpl.java:1002) at org.springframework.orm.jpa.JpaTransactionManager.doBegin(JpaTransactionManager.java:372) at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:350) at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:262) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:102) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:166) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy31.loadAll(Unknown Source) at com.joost.md.tools.importexport.OMUtil.getDams(OMUtil.java:184)    ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-01-09T05:33:07Z","2012-06-19T03:46:58Z"
"","8900","Improve parameter handllng for SimpleJdbcCall [SPR-4222]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4222](https://jira.spring.io/browse/SPR-4222?redirect=false)** and commented  Improve the case insensitive match of parameter names with names provided in SqlParameterSource.  Also allow to override type info retrieved from metadata (SQL type and type name) with info provided in SqlParameterSource.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-06T14:25:10Z","2012-06-19T03:47:12Z"
"","8894","SimpleJdbcCall and Oracle package procedure calls not working when schema name specified [SPR-4216]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4216](https://jira.spring.io/browse/SPR-4216?redirect=false)** and commented  See: http://forum.springframework.org/showthread.php?t=47092   ---  **Affects:** 2.5 final","closed","type: bug,","spring-projects-issues","2007-12-05T14:41:43Z","2012-06-19T03:47:37Z"
"","8893","JdbcTemplate extractReturnedResults uses Java 5 method of Integer class [SPR-4215]","**[Thomas Risberg](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.risberg)** opened **[SPR-4215](https://jira.spring.io/browse/SPR-4215?redirect=false)** and commented  ---  **Affects:** 2.5 final  **Issue Links:** - #8971 JdbcTemplate uses a JDK 1.5 method, whereas it should be JDK 1.4.2 compatible (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2007-12-05T13:38:09Z","2019-01-11T17:00:43Z"
"","9275","Aspects do not work properly with Java VM 1.6.0 [SPR-4598]","**[Thomas Feiner](https://jira.spring.io/secure/ViewProfile.jspa?name=tfeiner)** opened **[SPR-4598](https://jira.spring.io/browse/SPR-4598?redirect=false)** and commented  I have two classes ""MyAspect"" and ""MyAdvice"".  With Java VM the class ""MyAdvice"" cannot find the referenced Pointcut. Java VM 5 works properly.  ************* MyAspect.class************ package spring.test;  `@Aspect` public class MyAspect {      @Pointcut(""execution(* transfer(..))"")     public void testAspect() {}		  }  ******************************************  ************* MyAdvice.class************ package spring.test;  `@Aspect` public class MyAdvice {      @Before(""spring.test.MyAspect.testAspect()"")     public void inlinePointCut2() {     	System.out.println(""inlinepointcut2"");     }  }  ******************************************    ---  **Affects:** 2.5.1","closed","in: core,","spring-projects-issues","2008-03-18T20:29:51Z","2012-06-19T03:47:42Z"
"","9260","New jms:listener-container elements improvements - cacheLevel and JNDI lookup [SPR-4583]","**[Thomas Buckel](https://jira.spring.io/secure/ViewProfile.jspa?name=tbuckel)** opened **[SPR-4583](https://jira.spring.io/browse/SPR-4583?redirect=false)** and commented  Hi,  the new  config element does a really nice job, unfortunately I haven't found a way to set the CacheLevel attribute of resulting DefaultMessageListenerCotainer. As it defaults to CACHE_NONE with an XATransactionManager, it would result in a really bad performance. Also, it would be nice if the  element would allow a JNDI lookup for the destination as well as a nested bean definition of the listener instance, e.g.   \  ....   Not sure if I'm asking for already existing features but haven't found anything in the Docs, XML schema or parser implementations.  Cheers, Thomas   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-13T17:29:22Z","2012-06-19T03:47:19Z"
"","9830","Hibernate entity scanning does not seem to work under windows when the path contains whitespaces [SPR-5157]","**[Thomas Biskup](https://jira.spring.io/secure/ViewProfile.jspa?name=brannalbin)** opened **[SPR-5157](https://jira.spring.io/browse/SPR-5157?redirect=false)** and commented  The actual path to the classes directory mentioned below is:  C:\Programme\Apache Software Foundation\Tomcat 6.0.16\webapps\booking-faces\WEB-INF\classes  The following exception occurs during startup of Tomcat:  SCHWERWIEGEND: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bookingService': Injection of persistence methods failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in ServletContext resource [/WEB-INF/config/data-access-config.xml]: Invocation of init method failed; nested exception is java.lang.RuntimeException: error trying to scan \: file:/C:/Programme/Apache%20Software%20Foundation/Tomcat%206.0.16/webapps/booking-faces/WEB-INF/classes/ at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:324) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:998) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3843) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4350) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525) at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:924) at org.apache.catalina.startup.HostConfig.deployDirectories(HostConfig.java:887) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:492) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1147) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053) at org.apache.catalina.core.StandardHost.start(StandardHost.java:719) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:516) at org.apache.catalina.core.StandardServer.start(StandardServer.java:710) at org.apache.catalina.startup.Catalina.start(Catalina.java:578) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in ServletContext resource [/WEB-INF/config/data-access-config.xml]: Invocation of init method failed; nested exception is java.lang.RuntimeException: error trying to scan \: file:/C:/Programme/Apache%20Software%20Foundation/Tomcat%206.0.16/webapps/booking-faces/WEB-INF/classes/ at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1337) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:308) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:297) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:224) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:503) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:473) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:598) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:569) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:192) at org.springframework.beans.factory.annotation.InjectionMetadata.injectMethods(InjectionMetadata.java:117) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:321) ... 40 more Caused by: java.lang.RuntimeException: error trying to scan \: file:/C:/Programme/Apache%20Software%20Foundation/Tomcat%206.0.16/webapps/booking-faces/WEB-INF/classes/ at org.hibernate.ejb.Ejb3Configuration.scanForClasses(Ejb3Configuration.java:635) at org.hibernate.ejb.Ejb3Configuration.configure(Ejb3Configuration.java:350) at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:126) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:224) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:291) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1368) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1334) ... 59 more Caused by: java.lang.RuntimeException: java.io.FileNotFoundException: C:\Programme\Apache%20Software%20Foundation\Tomcat%206.0.16\webapps\booking-faces\WEB-INF\classes (Das System kann den angegebenen Pfad nicht finden) at org.jboss.util.file.JarArchiveBrowser.\(JarArchiveBrowser.java:74) at org.jboss.util.file.FileProtocolArchiveBrowserFactory.create(FileProtocolArchiveBrowserFactory.java:48) at org.jboss.util.file.ArchiveBrowser.getBrowser(ArchiveBrowser.java:64) at org.hibernate.ejb.Ejb3Configuration.scanForClasses(Ejb3Configuration.java:626) ... 65 more Caused by: java.io.FileNotFoundException: C:\Programme\Apache%20Software%20Foundation\Tomcat%206.0.16\webapps\booking-faces\WEB-INF\classes (Das System kann den angegebenen Pfad nicht finden) at java.util.zip.ZipFile.open(Native Method) at java.util.zip.ZipFile.\(Unknown Source) at java.util.jar.JarFile.\(Unknown Source) at java.util.jar.JarFile.\(Unknown Source) at org.jboss.util.file.JarArchiveBrowser.\(JarArchiveBrowser.java:69) ... 68 more 16.09.2008 13:29:34 org.apache.catalina.core.ApplicationContext log   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-09-15T22:42:35Z","2019-01-12T16:27:56Z"
"","9049","FileSystemResource handles path and file constructor parameters differently [SPR-4371]","**[Thomas Biskup](https://jira.spring.io/secure/ViewProfile.jspa?name=brannalbin)** opened **[SPR-4371](https://jira.spring.io/browse/SPR-4371?redirect=false)** and commented  Referring to bug http://jira.springframework.org/browse/SPR-4366 I filed this morning (and which was correctly closed) I'd like to offer the following observation since I searched a bit more for the specific problem that caused the original bug report. FileSystemResource seems to differ in handling File and String path based constructors. Observe the following tiny test program:  public class FileSystemResourceTestCase { public static void main(String[] args) throws IOException { FileSystemResource fr1 = new FileSystemResource(""c:/dir1/""); Resource fr2 = fr1.createRelative(""dir2/foot.txt""); System.out.println(""A-fr1: "" + fr1 + "", fr2: "" + fr2);      	fr1 = new FileSystemResource(new File(""c:/dir1/""));     	fr2 = fr1.createRelative(""dir2/foot.txt"");     	System.out.println(""B-fr1: "" + fr1 + "", fr2: "" + fr2);     }  }  It will print:  A-fr1: file [c:\dir1], fr2: file [c:\dir1\dir2\foot.txt] B-fr1: file [c:\dir1], fr2: file [c:\dir2\foot.txt]  Which is very surprising to me although I can guess at the technical details leading to this problem. Nonetheless to me it seems that File-parameters of directory type should be handled like String parameters with a trailing slash (see your insightfuil comments for the #9044 report).  ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-01-22T02:10:35Z","2019-01-11T16:36:35Z"
"","9044","FileSystemResource fails to create relative resources when pointing to a directory [SPR-4366]","**[Thomas Biskup](https://jira.spring.io/secure/ViewProfile.jspa?name=brannalbin)** opened **[SPR-4366](https://jira.spring.io/browse/SPR-4366?redirect=false)** and commented  In section 4.3.3 of the Spring documentation The FileSystemResource is described as ""This is a Resource implementation for java.io.File handles. It obviously supports resolution as a File, and as a URL."".  java.io.File is able to work with directories, but when trying to do this with FileSystemResource relative resources do not work.  Example:  Directory Structure: c:/dir1 c:/dir1/dir2 File Structure c:/dir1/dir2/foo.txt  Test: FileSystemResource base = new FileSystemResource(new File(""c:/dir1"")); FileSystemResource derived = base.createRelative(""dir2/foo.txt""); System.out.println(derived.exists()); // yields false  When examining the actual path in ""derived"" you will see that it refers to ""c:/dir2/foo.txt"". The problem lies in the following code in the FileSystemResource implementation:      String pathToUse = StringUtils.applyRelativePath(this.path, relativePath);  and in turn in the StringUtils implementation:      public static String applyRelativePath(String path, String relativePath) {     	int separatorIndex = path.lastIndexOf(FOLDER_SEPARATOR);     	if (separatorIndex != -1) {     		String newPath = path.substring(0, separatorIndex);     		if (!relativePath.startsWith(FOLDER_SEPARATOR)) {     			newPath += FOLDER_SEPARATOR;     		}     		return newPath + relativePath;     	}     	else {     		return relativePath;     	}     }  because both in combination do not take into account directories. Alternatively you also might view the problem as one with StringUtils.cleanPath as that code removes trailing directory slashes, etc.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-01-21T16:24:17Z","2008-01-21T22:43:40Z"
"","9569","JavaMailSenderImpl config is omitted when falling back to Transport.send [SPR-4893]","**[Thomas B](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.belot)** opened **[SPR-4893](https://jira.spring.io/browse/SPR-4893?redirect=false)** and commented  Linked to improvement #9568 I use JavaMailSenderImpl for it's ease of use ""bean like configuration"" but as its not copying local values to the session's properties, when falling back to Transport.send the config is stuck in JavaMailSenderImpl  Example : Inpustream is = ....; JavaMailSenderImpl jms = new JavaMailSenderImpl(); jms.setHost(""mailhost.localnet""); jms.setPort(""2525""); MimeMessage mm = jms.createMimeMessage(is); //My stuff here Transport.send(mm, new Address[]{new InternetAddress(""abc@gmail.com"")}); //","closed","type: enhancement,","spring-projects-issues","2008-06-04T21:07:06Z","2019-01-11T19:08:11Z"
"","9568","MailSender should give direct access to protocolar recipients as Transport.send(MimeMessage, Address[]) [SPR-4892]","**[Thomas B](https://jira.spring.io/secure/ViewProfile.jspa?name=thomas.belot)** opened **[SPR-4892](https://jira.spring.io/browse/SPR-4892?redirect=false)** and commented  I'm working with ""in transit"" mails, which means I have a ""current list of recipients"" which does not match the ""initial list of recipients"".  For example my MimeMessage doesn't have any BCC but I have them in my ""current list of recipients"" or protocolar recipients.  Another example, the mail I'm working with if for one of my users but has been sent to one of it's aliases email. Neither the TO nor the CC fields contains the address I must send the message to. Even worth they will probably contain other people's email which already have recieved the message  ---  **Affects:** 2.5.4  **Issue Links:** - #9569 JavaMailSenderImpl config is omitted when falling back to Transport.send","closed","type: enhancement,","spring-projects-issues","2008-06-04T20:49:38Z","2019-01-11T19:08:09Z"
"","9869","buildSessionFactory() should be public [SPR-5196]","**[Thom Hehl](https://jira.spring.io/secure/ViewProfile.jspa?name=thehl)** opened **[SPR-5196](https://jira.spring.io/browse/SPR-5196?redirect=false)** and commented  Why on earth would you create LocalSessionFactoryBean whose sole purpose in life is to create SessionFactory objects for use by hibernate and make buildSessionFactory() protected? How am I supposed to create the session factory for my DAO from my LocalSessionFactoryBean?   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-10-02T05:52:55Z","2012-06-18T12:45:16Z"
"","9853","Documentation incorrectly describes creating bean from XML file [SPR-5180]","**[Thom Hehl](https://jira.spring.io/secure/ViewProfile.jspa?name=thehl)** opened **[SPR-5180](https://jira.spring.io/browse/SPR-5180?redirect=false)** and commented  Section 3.2.4 of the Spring Framework Manual posts the following example:  InputStream is = new FileInputStream(""beans.xml""); BeanFactory factory = new XmlBeanFactory(is);  This example will not compile. If you look up XmlBeanFactory and discover it takes and InputStreamResource and wrap your XML input stream in this, then the bean factory constructor generates an exception saying that the input stream is open and that I should specify a validation mode, which the javadocs give no clue on how to do.   ---  **Affects:** 2.5.1","closed","in: core,","spring-projects-issues","2008-09-25T22:58:43Z","2012-06-19T03:47:09Z"
"","9468","Expose TagWriter to subclasses [SPR-4791]","**[Thom Hehl](https://jira.spring.io/secure/ViewProfile.jspa?name=thehl)** opened **[SPR-4791](https://jira.spring.io/browse/SPR-4791?redirect=false)** and commented  If you extend AbstractHtmlInputElementTag, there is no way to access the underlying writer to insert custom text outside the tag. I would like to add a protected method to class TagWriter as follows:      /**      * write straight to the underlying writer if not currently in a tag      * @throws IllegalStateException if no tag is open      */     public void writeSafe(String value) throws JspException {     	if (inTag()) {     		throw new IllegalStateException(""Cannot write regular text while still in a tag."");     	}     	this.writer.append(value);     }  Thanks.  ---  **Affects:** 2.5.4  **Issue Links:** - #8821 TagWriter should support free form text  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-08T23:04:53Z","2019-01-11T18:01:21Z"
"","9190","Add possibility to select another charset for SQL scripts in AbstractTransactionalDataSourceSpringContextTests [SPR-4513]","**[Thierry Monney](https://jira.spring.io/secure/ViewProfile.jspa?name=tmonney)** opened **[SPR-4513](https://jira.spring.io/browse/SPR-4513?redirect=false)** and commented  The method AbstractTransactionalDataSourceSpringContextTests.executeSqlScript uses the platform's default encoding/charset when loading the SQL script. This makes our unit tests fail because they use i18n'ed values that are incorrectly interpreted by the InputStreamReader specified at line 148 (in version 2.0.8, I do not have access to a more recent version at the moment):  LineNumberReader lnr = new LineNumberReader(new InputStreamReader(res.getInputStream()));  should be  LineNumberReader lnr = new LineNumberReader(new InputStreamReader(res.getInputStream(), encoding));  with the encoding variable maybe set by dependency injection :-)   --- No further details from [SPR-4513](https://jira.spring.io/browse/SPR-4513?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-02-27T21:58:18Z","2012-06-19T03:47:29Z"
"","9205","Integration of SpringMVC with Hibernate Validator [SPR-4528]","**[Ted Bergeron](https://jira.spring.io/secure/ViewProfile.jspa?name=tedberg)** opened **[SPR-4528](https://jira.spring.io/browse/SPR-4528?redirect=false)** and commented  Based on my article:  http://www.triview.com/articles/hibernate/validator/canmeetyourneeds.html  provide built in integration with hibernate validator.  This may be broken down into several issues:  1. Extend JSP tag library to search for validation annotations via reflection.  Render fields with css classes such as required, email, etc.  Add maxlength attribute, etc. 2. Native support to invoke the proper Hibernate ClassValidator and convert the InvalidValue array to a Spring Errors object. 3. Extend JSP tags to render semantic html wrapper around form fields.  Include div, label and field. 4. Extend JSP tags to render with enhanced features, such as adding popup calendar for Date.  Consider extracting info from assigned PropertyEditor. 5. Add basic, included JavaScript validation support and/or integration with a major javascript framework such as prototype, jquery, ext, etc.  ---  **Attachments:** - [triview_custom_tags.zip](https://jira.spring.io/secure/attachment/13732/triview_custom_tags.zip) (_6.05 MB_) - [validator_whitepaper.zip](https://jira.spring.io/secure/attachment/13733/validator_whitepaper.zip) (_7.57 MB_)  **Issue Links:** - #4803 Support for declarative validation (Hibernate Validator, anticipating JSR 303) (_**""duplicates""**_)  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-03-02T12:15:58Z","2019-01-11T17:16:03Z"
"","9683","ComponentScanBeanDefinitionParser has hard dependency on aspectj [SPR-5008]","**[Taras Tielkes](https://jira.spring.io/secure/ViewProfile.jspa?name=plethora)** opened **[SPR-5008](https://jira.spring.io/browse/SPR-5008?redirect=false)** and commented  It would be nice If one could use `` without any AspectJ libraries on the classpath. At the moment there's a hard dependency through `AspectJTypeFilter`.   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-07-15T05:28:23Z","2019-01-11T14:37:44Z"
"","9168","some utf-8 characters aren't html-unescaped correctly [SPR-4490]","**[Taco Kemna](https://jira.spring.io/secure/ViewProfile.jspa?name=siriousje)** opened **[SPR-4490](https://jira.spring.io/browse/SPR-4490?redirect=false)** and commented  some special characters, like E-cedille, which are mandatory for turkish customers, are not unescaped correctly   ---  **Affects:** 2.0.6  **Attachments:** - [after.gif](https://jira.spring.io/secure/attachment/13681/after.gif) (_2.28 kB_) - [before.gif](https://jira.spring.io/secure/attachment/13680/before.gif) (_2.08 kB_)","closed","","spring-projects-issues","2008-02-21T08:39:23Z","2019-01-11T17:34:52Z"
"","9377","Add single checkbox input macro for Velocity and Freemarker [SPR-4700]","**[Sébastien Launay](https://jira.spring.io/secure/ViewProfile.jspa?name=yabon)** opened **[SPR-4700](https://jira.spring.io/browse/SPR-4700?redirect=false)** and commented  Currently for creating a single checkbox input we have 3 solutions: * use formCheckboxes macro but with a hard coded single element options parameter. * bind to the right field and then add two inputs (one for the real input and optionally one for multi page submission). * and the dirty one where we manually create the input and fill its contents.  It would be nice to has a formCheckbox macro for a single checkbox.  Indeed, it would be more flexible for: * choosing where we want to put the label * linking the input to a label element (not possible with the second solution because there is no id attribute).  ---  **Affects:** 2.5.3  **Attachments:** - [SPR-4700-ftl.patch](https://jira.spring.io/secure/attachment/15588/SPR-4700-ftl.patch) (_3.08 kB_) - [SPR-4700-vm.patch](https://jira.spring.io/secure/attachment/15589/SPR-4700-vm.patch) (_2.89 kB_) - [velocity-freemarker-single-checkbox.patch](https://jira.spring.io/secure/attachment/13938/velocity-freemarker-single-checkbox.patch) (_4.20 kB_)  **Issue Links:** - #10788 Velocity springFormCheckbox results in checkboxes that are always checked  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/93e99556c036d952daa4a468497822242dcebd04  0 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-14T04:29:42Z","2019-01-11T17:42:10Z"
"","9312","Add MySQL NDB error codes to sql-error-codes.xml [SPR-4635]","**[Sébastien Launay](https://jira.spring.io/secure/ViewProfile.jspa?name=yabon)** opened **[SPR-4635](https://jira.spring.io/browse/SPR-4635?redirect=false)** and commented  NDB Error codes [1] are missing from the mapping so we can not rely on DataIntegrityViolationException when inserting an existing tuple for example :  org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [INSERT INTO ... VALUES (?,?,?,0)]; SQL state [HY000]; error code [1296]; Got error 630 'Tuple already existed when attempting to insert' from NDB; nested exception is java.sql.SQLException: Got error 630 'Tuple already existed when attempting to insert' from NDB  [1] http://dev.mysql.com/doc/ndbapi/en/ndb-error-codes-constraintviolation.html   ---  **Affects:** 2.0.8, 2.5.2  **Attachments:** - [sql-error-codes.xml-ndb.patch](https://jira.spring.io/secure/attachment/13849/sql-error-codes.xml-ndb.patch) (_799 bytes_)  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-03-27T05:55:29Z","2012-06-19T03:47:30Z"
"","9870","MBeanRegistrationSupport field registrationBehavior shouldn't be private [SPR-5197]","**[Szczepan Kuzniarz](https://jira.spring.io/secure/ViewProfile.jspa?name=szczepan.kuzniarz)** opened **[SPR-5197](https://jira.spring.io/browse/SPR-5197?redirect=false)** and commented  I try to extend MBeanRegistrationSupport class and override doRegister method (to fix some WebSphere-specific issue). Unfortunately, registrationBehavior field (which is used by original doRegister method) is inaccessible in subclasses - it is private and doesn't have a getter.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-10-02T19:01:38Z","2012-06-19T09:36:17Z"
"","9116","AutowiredAnnotationBeanPostProcessor fails for prototype beans with collection properties [SPR-4438]","**[Szczepan Kuzniarz](https://jira.spring.io/secure/ViewProfile.jspa?name=szczepan.kuzniarz)** opened **[SPR-4438](https://jira.spring.io/browse/SPR-4438?redirect=false)** and commented  In the code below:  public class TestBean { private List\ deps;      @Autowired     public void setTestDeps(List deps) {         this.deps = deps;     }  }  public class TestDep { }  \                                  \  public class Test { public static void main(String[] args) { ClassPathXmlApplicationContext ctx = ... ctx.getBean(""testBean""); ctx.getBean(""testBean""); } }  The first call to ctx.getBean(""testBean"") works fine, but the second one fails with java.lang.IllegalArgumentException: argument type mismatch. I guess this problem is caused by improper caching in AutowiredAnnotationBeanPostProcessor.AutowiredMethodElement class.   ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-02-07T09:13:26Z","2012-06-19T03:47:24Z"
"","9690","XML import should support patterns for relative paths as well [SPR-5015]","**[Swisslog Developers](https://jira.spring.io/secure/ViewProfile.jspa?name=swisslog)** opened **[SPR-5015](https://jira.spring.io/browse/SPR-5015?redirect=false)** and commented  When using \ in a bean definition file, one should be able to use a pattern(most likely ant) to import multiple files with just one line.  Like this to import all config files in a folder: \  At the moment spring tells me a Caused by: java.io.FileNotFoundException: D:\eclipse\tomcat\webapps\myApp\WEB-INF\classes\mySpringFolder\*-cfg.xml  This would make configuration of imports easier and also maintaining those import files.  ---  **Affects:** 2.5.4  **Issue Links:** - #13003 Relative imports in `@Configuration` classes","closed","type: enhancement,","spring-projects-issues","2008-07-16T23:48:49Z","2019-01-13T08:03:16Z"
"","9686","how to use session scoped bean, getting errors [SPR-5011]","**[swarna dhakad](https://jira.spring.io/secure/ViewProfile.jspa?name=swarnad)** opened **[SPR-5011](https://jira.spring.io/browse/SPR-5011?redirect=false)** and commented  I am using spring 2.0. I created a bean and tried to give it session scope by following entry in beans xml file.  \ \  but i get error related to listener and when i add the listener  \ \org.springframework.web.context.scope.RequestContextListener\ \  the class RequestContextListener is not available. In which jar is this class present?  After this i changed the code to use  \ \org.springframework.web.context.request.RequestContextListener\ \ in web.xml and it compiled.  but after this i get another error java.lang.IllegalStateException: No Scope registered for scope 'session'  for this i found that i need to modify my entry in beans xml to  \  \  but i still get the error for CGLIB. i found on net that even after using cglib u get errors.  how can i create a session scoped bean in spring?   --- No further details from [SPR-5011](https://jira.spring.io/browse/SPR-5011?redirect=false)","closed","status: invalid,","spring-projects-issues","2008-07-15T21:06:24Z","2019-01-12T05:34:05Z"
"","9807","#springUrl does not run encodeURL() [SPR-5134]","**[Sutra Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=sutra)** opened **[SPR-5134](https://jira.spring.io/browse/SPR-5134?redirect=false)** and commented  The API of JEE says: Encodes the specified URL by including the session ID in it, or, if encoding is not needed, returns the URL unchanged. The implementation of this method includes the logic to determine whether the session ID needs to be encoded in the URL. For example, if the browser supports cookies, or session tracking is turned off, URL encoding is unnecessary.  For robust session tracking, all URLs emitted by a servlet should be run through this method. Otherwise, URL rewriting cannot be used with browsers which do not support cookies.  So we should do this:  #** * springUrl *  * Takes a relative URL and makes it absolute from the server root by * adding the context root for the web application.   *#   #macro( springUrl $relativeUrl )$response.encodeURL(""$springMacroRequestContext.getContextPath()${relativeUrl}"")#end    --- No further details from [SPR-5134](https://jira.spring.io/browse/SPR-5134?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-09-01T09:41:18Z","2012-06-19T03:46:59Z"
"","9282","org.springframework.beans.factory.BeanCreationException error throwing [SPR-4605]","**[super-was](https://jira.spring.io/secure/ViewProfile.jspa?name=super)** opened **[SPR-4605](https://jira.spring.io/browse/SPR-4605?redirect=false)** and commented  After upgraded from WAS6.1.07 to WAS6.1.013 the spring frame work throwing error,  Hello,  [3/19/08 10:39:43:311 GMT] 00000029 WebApp        E   Exception caught while initializz context org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'zdPlanExpiryHandler' defined in ServletContext resource [/WEB-INF/zzcontext-triggers.xml]: Cannot resolve reference to bean 'servicePlanNotificationManager' while setting bean property 'servicePlanNotificationManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'servicePlanNotificationManager' defined in ServletContext resource [/WEB-INF/zzcontext-service.xml]: Cannot resolve reference to bean 'assignServicePlanManager' while setting bean property 'assignServicePlanManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'assignzdPlanManager' defined in ServletContext resource [/WEB-INF/zzcontext-service.xml]: Cannot resolve reference to bean 'AllowBlockManager' while setting bean property 'allowBlockManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'AllowBlockManager' defined in ServletContext resource [/WEB-INF/zzcontext-service.xml]: Cannot resolve reference to bean 'UserSubscriptionManager' while setting bean property 'userSubscriptionManager'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'UserSubscriptionManager': Bean with name 'UserSubscriptionManager' has been injected into other beans [UserManager, userVehicleMappingManager] in its raw version as part of a circular reference, but has eventually been wrapped (for example as part of auto-proxy creation). This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example. Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'servicePlanNotificationManager' defined in ServletContext resource [/WEB-INF/zzcontext-service.xml]: Cannot resolve reference to bean 'assignServicePlanManager' while setting bean property 'assignServicePlanManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'assignServicePlanManager' defined in ServletContext resource [/WEB-INF/zzcontext-service.xml]: Cannot resolve reference to bean 'AllowBlockManager' while setting bean property 'allowBlockManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'AllowBlockManager' defined in ServletContext resource [/WEB-INF/zzcontext-service.xml]: Cannot resolve reference to bean 'UserSubscriptionManager' while setting bean property 'userSubscriptionManager'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'UserSubscriptionManager': Bean with name 'UserSubscriptionManager' has been injected into other beans [UserManager, userVeleMappingManager] in its raw version as part of a circular reference, but has eventually been wrapped (for example as part of auto-proxy creation). This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example. Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'assignServicePlanManager' defined in ServletContext resource [/WEB-INF/zzcontext-service.xml]: Cannot resolve reference to bean 'AllowBlockManager' while setting bean property 'allowBlockManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'AllowBlockManager' defined in ServletContext resource [/WEB-INF/zzcontext-service.xml]: Cannot resolve reference to bean 'UserSubscriptionManager' while setting bean property 'userSubscriptionManager'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'UserSubscriptionManager': Bean with name 'UserSubscriptionManager' has been injected into other beans [UserManager, userVehicleMappingManager] in its raw version as part of a circular reference, but has eventually been wrapped (for example as part of auto-proxy creation). This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example. Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'AllowBlockManager' defined in ServletContext resource [/WEB-INF/zzcontext-service.xml]: Cannot resolve reference to bean 'UserSubscriptionManager' while setting bean property 'userSubscriptionManager'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'UserSubscriptionManager': Bean with name 'UserSubscriptionManager' has been injected into other beans [UserManager, userVehicleMappingManager] in its raw version as part of a circular reference, but has eventually been wrapped (for example as part of auto-proxy creation). This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example. Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'UserSubscriptionManager': Bean with name 'UserSubscriptionManager' has been injected into other beans [UserManager, userVehicleMappingManager] in its raw version as part of a circular reference, but has eventually been wrapped (for example as part of auto-proxy creation). This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.   --- No further details from [SPR-4605](https://jira.spring.io/browse/SPR-4605?redirect=false)","closed","","spring-projects-issues","2008-03-19T17:21:14Z","2019-01-13T21:53:02Z"
"","9214","org.springframework.beans.BeanInstantiationException: Could not instantiate bean  class [org.springframework.validation.BindingResult]: Specified class is an interface [SPR-4537]","**[Sundar Manyapu](https://jira.spring.io/secure/ViewProfile.jspa?name=hymasundar)** opened **[SPR-4537](https://jira.spring.io/browse/SPR-4537?redirect=false)** and commented  When i tried to submit a form using ajax call from EXT-JS user interface , i see the following error...(i am using Annotation based controllers)   \ \ \  If i take out the parameter BindingResult from the controller called method... it works. The moment i put something like this... it throws above exception....    ---  **Affects:** 2.5.1, 2.5.2","closed","type: bug,","spring-projects-issues","2008-03-04T02:08:15Z","2012-06-19T03:46:39Z"
"","9342","Updation of Excel Template which has to be generated dynamically [SPR-4665]","**[Sumit Jain](https://jira.spring.io/secure/ViewProfile.jspa?name=sumit4u32)** opened **[SPR-4665](https://jira.spring.io/browse/SPR-4665?redirect=false)** and commented  Hi Folks,  My requirement is to update specific excel template on demand from a pool of templates. For this I've to identify the template dynamically by using the excel file URL, that I obtain in my Model object.  As I understand, I've to use a .properties file to specify the excel implementor class, I am using the default AbstractExcelView class for the same. I can't specify the URL here because this is different for different templates.  >  ExcelView.class=excel.ExcelHelper ExcelView.url=/WEB-INF/template/timebooking------------------------>i cannot do this since there a number of templates.  Please suggest me a wayout to set the URL dynamically using model / view objects.  I've tried using the ModelView constructor varient ModelView(View, String, String, Object). But it seems the View object is created / cached after sending the ModelView object to the controller! Thus my changes to the View object were overwritten by the Cached / newly created View object.  If there is any other way for implementing this dynamic excel template updation, please suggest the same.  Thanks and Best Regards, Sumit Jain Sr Software Engineer, L&T Infotech Ltd.   --- No further details from [SPR-4665](https://jira.spring.io/browse/SPR-4665?redirect=false)","closed","in: core,","spring-projects-issues","2008-04-06T18:13:36Z","2019-01-11T18:13:31Z"
"","9215","implement BeanWrapper.getPropertyValueAsText() [SPR-4538]","**[Steven Marcus](https://jira.spring.io/secure/ViewProfile.jspa?name=srnm)** opened **[SPR-4538](https://jira.spring.io/browse/SPR-4538?redirect=false)** and commented  Please consider adding  BeanWrapper.getPropertyValueAsText()  which should call PropertyEditor.getValueAsText() for any registered editors, or default to String.valueOf(getPropertyValue())    ---  **Attachments:** - [SPR-4538-patch.txt](https://jira.spring.io/secure/attachment/14874/SPR-4538-patch.txt) (_46.07 kB_)","closed","type: enhancement,","spring-projects-issues","2008-03-04T09:25:23Z","2012-06-19T09:36:26Z"
"","8975","Add getGroovyClassLoader() to GroovyScriptFactory [SPR-4297]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-4297](https://jira.spring.io/browse/SPR-4297?redirect=false)** and commented  In order to add meta-programming stuff to the GroovyClassLoader using Groovy's ExpandoMetaClass.   ---  **Affects:** 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-01-03T07:01:32Z","2012-06-19T03:47:10Z"
"","8968","Groovy script gets executed twice during singleton creation using  [SPR-4290]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-4290](https://jira.spring.io/browse/SPR-4290?redirect=false)** and commented  Run the CustomizerTests test class in the attached project and watch the console output.   ---  **Affects:** 2.0.7, 2.5 final  **Attachments:** - [doube-script-call.zip](https://jira.spring.io/secure/attachment/13241/doube-script-call.zip) (_7.85 MB_)","closed","in: core,","spring-projects-issues","2008-01-01T23:33:37Z","2012-06-19T03:47:30Z"
"","8967","NPE in ScriptFactoryPostProcessor#predictBeanType() [SPR-4289]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-4289](https://jira.spring.io/browse/SPR-4289?redirect=false)** and commented  This line assumes that the BF will always return an object for getBean(), but this is not required:  return this.scriptBeanFactory.getBean(scriptedObjectBeanName).getClass();  getBean() returns null in case a Groovy script (not a class) calls a method without return type (void). Consider this script which is loaded by :  map(String, String) { // closure code here }  The map() method is added via meta programming using GroovyObjectCustomizer. The map() method has no return type so the script's return value is null.   ---  **Affects:** 2.0.7, 2.5 final","closed","in: core,","spring-projects-issues","2008-01-01T00:41:09Z","2019-01-12T16:51:13Z"
"","8966","NPE in ScriptFactoryPostProcessor#predictBeanType() [SPR-4288]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-4288](https://jira.spring.io/browse/SPR-4288?redirect=false)** and commented  This line assumes that the BF will always return an object for getBean(), but this is not required:  return this.scriptBeanFactory.getBean(scriptedObjectBeanName).getClass();  getBean() returns null in case a Groovy script (not a class) calls a method without return type (void). Consider this script which is loaded by :  map(String, String) { // closure code here }  The map() method is added via meta programming using GroovyObjectCustomizer. The map() method has no return type so the script's return value is null.   ---  **Affects:** 2.0.7, 2.5 final","closed","in: core,","spring-projects-issues","2008-01-01T00:31:56Z","2019-01-12T16:51:14Z"
"","8965","NPE in ScriptFactoryPostProcessor#predictBeanType() [SPR-4287]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-4287](https://jira.spring.io/browse/SPR-4287?redirect=false)** and commented  This line assumes that the BF will always return an object for getBean(), but this is not required:  return this.scriptBeanFactory.getBean(scriptedObjectBeanName).getClass();  getBean() returns null in case a Groovy script (not a class) calls a method without return type (void). Consider this script which is loaded by :  map(String, String) { // closure code here }  The map() method is added via meta programming using GroovyObjectCustomizer. The map() method has no return type so the script's return value is null.   ---  **Affects:** 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","in: core,","spring-projects-issues","2008-01-01T00:29:37Z","2012-06-19T03:46:42Z"
"","8936","Add getServer() to MBeanExporter [SPR-4258]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-4258](https://jira.spring.io/browse/SPR-4258?redirect=false)** and commented  This would avoid having to inject both MBeanExporter and MBeanServer when doing programmatic JMX registration. Maybe even add this method to MBeanExportOperations.   ---  **Affects:** 2.0.7, 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-14T02:19:36Z","2012-06-19T03:47:13Z"
"","8881","DefaultDocumentLoader#createDocumentBuilderFactory() catches IllegalArgumentException but does not rethrow [SPR-4203]","**[Steven Devijver](https://jira.spring.io/secure/ViewProfile.jspa?name=devijvers)** opened **[SPR-4203](https://jira.spring.io/browse/SPR-4203?redirect=false)** and commented  This makes understanding XML parser config problems nearly impossible to figure out. I could solve a problem by debugging into the class and look at the IllegalArgumentException that was thrown.   ---  **Affects:** 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-12-02T02:30:49Z","2012-06-19T03:47:16Z"
"","9835","Discrepancy between sql parsing in SimpleJdbcTemplate  and NamedParameterJdbcTemplate when doing batchUpdates [SPR-5162]","**[Steve Ungerer](https://jira.spring.io/secure/ViewProfile.jspa?name=steve.ungerer)** opened **[SPR-5162](https://jira.spring.io/browse/SPR-5162?redirect=false)** and commented  NamedParameterJdbcTemplate provides a protected method getParsedSql to obtain a ParsedSql object. This allows for custom sql modification prior to being passed off to the internal NamedParameterUtils class which offers no callbacks.  SimpleJdbcTemplate delegates to NamedParameterJdbcOperations (default being NamedParameterJdbcTemplate) for all methods using named parameters except for the batchUpdate methods.  These methods use the private method doExecuteBatchUpdateWithNamedParameters which directly invokes NamedParameterUtils.  Thus, in order to handle custom sql modification for batchUpdates, SimpleJdbcTemplate must be overridden to not only use a custom subclass for the NamedParameterJdbcOperations but to invoke the custom logic in the applicable batchUpdate methods.  It would be nice to add batchUpdate to NamedParameterJdbcTemplate (as requested in #8007) and then delegate to this from SimpleJdbcTemplate. In this way, all sql parsing would be routed through an overridable getParsedSql.  ---  **Affects:** 2.0.8, 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5  **Issue Links:** - #8007 Add a batchUpdate method to namedParameterJdbcTemplate","closed","type: enhancement,","spring-projects-issues","2008-09-17T05:55:46Z","2019-01-11T15:40:25Z"
"","9820","Improve AnnotationMethodHandlerAdapter choice of which is best method to use [SPR-5147]","**[Steve Mosley](https://jira.spring.io/secure/ViewProfile.jspa?name=smozely)** opened **[SPR-5147](https://jira.spring.io/browse/SPR-5147?redirect=false)** and commented  Seen in versions 2.5.4 and 2.5.5 but probably in earlier ones to  The way of determining the best handler to use when mutliple handlers apply for a given request seems broken.  Basically if I have two methods on a controller, one that accepts all post requests, and one that accepts post requests with a particular parameter the result is that when called with the parameter the wrong method might get invoked.  Based around line 465 (in version 2.5.5) if (isBetterPathMatch(mappedPath, bestPathMatch, lookupPath) || (!isBetterPathMatch(bestPathMatch, mappedPath, lookupPath) && (isBetterMethodMatch(mapping, bestMappingMatch) || (!isBetterMethodMatch(bestMappingMatch, mapping) && isBetterParamMatch(mapping, bestMappingMatch))))) { bestMappingMatch = mapping; bestPathMatch = mappedPath;  and from line 500 private boolean isBetterPathMatch(String mappedPath, String mappedPathToCompare, String lookupPath) { return (mappedPath != null && (mappedPathToCompare == null || mappedPath.equals(lookupPath) || mappedPathToCompare.length() < mappedPath.length())); }  isBetterPathMatch doesn't take into account if ( mappedPath.equals(lookupPath) &&  mappedPathToCompare.equals(lookupPath) ) in which case it should look to see if the params determine a better match. At the moment the order that it iterates through the potential methods is how the winner is determined.   ---  **Affects:** 2.5.4, 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-09-09T11:27:54Z","2012-06-19T09:36:31Z"
"","9590","changes introduced in revision 1.17 of org.springframework.beans.factory.wiring.BeanConfigurerSupport break application [SPR-4915]","**[Stephen R. Saucier](https://jira.spring.io/secure/ViewProfile.jspa?name=saucier)** opened **[SPR-4915](https://jira.spring.io/browse/SPR-4915?redirect=false)** and commented  Revision 1.17 ""revised BeanConfigurerSupport to re-initialize its default BeanWiringInfoResolver for each context refresh.""  Unfortunately, apparently org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect calls the configureBean method of BeanConfigurerSupport without first calling setBeanFactory, so beanWiringInfoResolver is no longer initialized.  My suggestion is to have beanWiringInfoResolver be initially set to createDefaultBeanWiringInfoResolver() (or ClassNameBeanWiringInfoResolver directly as in revisions prior to 1.17).  See also #9589.  ---  **Affects:** 2.5.5  **Attachments:** - [example-call-stack.txt](https://jira.spring.io/secure/attachment/14179/example-call-stack.txt) (_8.55 kB_) - [SPR-4915.patch](https://jira.spring.io/secure/attachment/14175/SPR-4915.patch) (_915 bytes_)","closed","in: core,","spring-projects-issues","2008-06-12T08:21:14Z","2019-01-11T18:29:57Z"
"","9589","warning message in configureBean method of org.springframework.beans.factory.wiring.BeanConfigurerSupport not very helpful [SPR-4914]","**[Stephen R. Saucier](https://jira.spring.io/secure/ViewProfile.jspa?name=saucier)** opened **[SPR-4914](https://jira.spring.io/browse/SPR-4914?redirect=false)** and commented  For some reason, I'm getting several warnings: ""BeanConfigurerSupport has not been set up and is unable to configure bean instances. Proceeding without injection."" Now, I realize that this isn't a support forum, and so I'm not looking for a solution, but in helping track this down, it would be nice if the warning message included the name of the class of the bean instance being configured.   ---  **Affects:** 2.5.5  **Attachments:** - [SPR-4914.patch](https://jira.spring.io/secure/attachment/14174/SPR-4914.patch) (_997 bytes_)","closed","type: enhancement,","spring-projects-issues","2008-06-12T07:40:33Z","2019-01-11T18:29:55Z"
"","9443","Improve consistency of PropertyEditor finder methods [SPR-4766]","**[Stephen R. Saucier](https://jira.spring.io/secure/ViewProfile.jspa?name=saucier)** opened **[SPR-4766](https://jira.spring.io/browse/SPR-4766?redirect=false)** and commented  I've looked through the Spring source code, and there are still several inconsistencies regarding PropertyEditor handling.  The main areas in which PropertyEditor lookup seems to be occuring is in BeanUtils (findEditorByConvention), PropertyEditorRegistrySupport (findCustomEditor, getCustomEditor), AbstractBindingResult (findEditor), AbstractPropertyBindingResult (getCustomEditor) and TypeConverterDelegate (getDefaultEditor). There are a few others (findEditor in BindException and BindStatus and findCustomEditor in DataBinder) but these seem to be straightforward delegate methods.  While it would be ideal if we could get some consistency between these methods (is if findEditor, findCustomEditor or findDefaultEditor? Is it valueType, requiredType or targetType? Is it property value first then the target type, or the other way around?) there are some logical changes that I think should be made:  1. getCustomEditor of AbstractPropertyBindingResult is effectively the same as the findEditor method of AbstractBindingResult (which is the superclass of AbstractPropertyBindingResult!) when called with a null second argument, excepting the call to BeanUtils.findEditorByConvention which was just added. I believe this method should be removed.  2. The call to BeanUtils.findEditorByConvention could be moved to the findEditor method of AbstractBindingResult, but I'd argue this logic more appropriately belongs in PropertyEditorRegistrySupport. Currently, PropertyEditorRegistrySupport can only find PropertyEditors registered with registerCustomEditor, but not by the JavaBeans PropertyEditor class name convention.  3. AbstractBindingResult claims that the findEditor method returns null, which is not supported by the implementation. The javadoc comment should be fixed.  4. PropertyEditorRegistrySupport and TypeConverterDelegate have fundamentally different algorithms for finding PropertyEditors. I am not sure if this is by design. The differences appear to be:  a. PropertyEditorRegistrySupport will attempt to find PropertyEditors for supertypes or interfaces. b. TypeConverterDelegate uses BeanUtils.findEditorByConvention to locate PropertyEditors (see item 2, above). c. TypeConverterDelegate uses PropertyEditorManager.findEditor to locate PropertyEditors. d. TypeConverterDelegate can locate a PropertyEditor from a PropertyDesciptor.  At a minimum, it seems reasonable to me to add support for b and d to PropertyEditorRegistrySupport.   ---  **Affects:** 2.5.4  **Attachments:** - [SPR-4766.patch](https://jira.spring.io/secure/attachment/14009/SPR-4766.patch) (_3.86 kB_)","closed","type: enhancement,","spring-projects-issues","2008-04-30T16:13:58Z","2015-09-22T17:34:36Z"
"","9417","StringUtils methods should accept CharSequence instead of String [SPR-4740]","**[Stephen R. Saucier](https://jira.spring.io/secure/ViewProfile.jspa?name=saucier)** opened **[SPR-4740](https://jira.spring.io/browse/SPR-4740?redirect=false)** and commented  It would be nice if StringUtils would allow a CharSequence instead of a String as an argument to its methods.  From my cursory inspection, I believe the methods invoked on the String argument are all methods actually on the CharSequence interface.   ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-04-22T03:25:53Z","2012-06-19T03:46:52Z"
"","9400","DefaultBindingErrorProcessor does not properly report errors for nested paths [SPR-4723]","**[Stephen R. Saucier](https://jira.spring.io/secure/ViewProfile.jspa?name=saucier)** opened **[SPR-4723](https://jira.spring.io/browse/SPR-4723?redirect=false)** and commented  I have an object graph that I'm using as a form backing object for a form that I'm presenting a user. Some of the object's properties are themselves complex objects having other objects as properties. For example:  public class Foo { private String value; private Bar bar; }  public class Bar { private String baz; }  If I add some instance of Foo named ""foo"" to my model, and in my view (jsp) have something like:       if I mark the field baz of Bar as required, the error does not get properly reported in my view because it is generating a FieldError that looks like:  Field error in object 'foo' on field 'baz': rejected value []; codes [required.foo.baz,required.baz,required.java.lang.String,required]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [foo.baz,baz]; arguments []; default message [baz]]; default message [Field 'baz' is required]  this seems incorrect to me; I believe the error should be:  Field error in object 'foo' on field 'bar.baz': rejected value []; codes [required.foo.bar.baz,required.bar.baz,required.baz,required.java.lang.String,required]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [foo.bar.baz,bar.baz]; arguments []; default message [bar.baz]]; default message [Field 'bar.baz' is required]  because baz is in the context of bar, not foo.   ---  **Affects:** 2.5.3  **Attachments:** - [DefaultBindingErrorProcessor.patch](https://jira.spring.io/secure/attachment/13966/DefaultBindingErrorProcessor.patch) (_1.42 kB_)","closed","type: enhancement,","spring-projects-issues","2008-04-18T02:34:33Z","2012-06-19T03:47:12Z"
"","9395","AbstractPropertyBindingResult.formatFieldValue does not use PropertyEditorManager to locate PropertyEditors [SPR-4718]","**[Stephen R. Saucier](https://jira.spring.io/secure/ViewProfile.jspa?name=saucier)** opened **[SPR-4718](https://jira.spring.io/browse/SPR-4718?redirect=false)** and commented  the formatFieldValue method in AbstractPropertyBindingResult does not locate any PropertyEditors using PropertyEditorManager.find(...). This means that any PropertyEditors located using the JavaBeans convention of having the name the same as the class it is editing with the suffix ""Editor"" are not used during the binding process.  I had been registering my PropertyEditors with a PropertyEditorRegistrar (and then with a org.springframework.web.bind.support.ConfigurableWebBindingInitializer) but when I switched to allowing the PropertyEditorManager to discover my PropertyEditor, binding no longer works.  Note that TypeConverterDelegate does use PropertyEditorManager to find PropertyEditors, so my PropertyEditors are used in other places (the setAsText use case, e.g. coercing Strings in my spring configuration files to the appropriate type), but not during web binding (the getAsText use case).   ---  **Attachments:** - [AbstractPropertyBindingResult.patch](https://jira.spring.io/secure/attachment/13963/AbstractPropertyBindingResult.patch) (_1.49 kB_) - [BeanUtils.patch](https://jira.spring.io/secure/attachment/13968/BeanUtils.patch) (_688 bytes_)","closed","type: enhancement,","spring-projects-issues","2008-04-17T06:17:42Z","2012-06-19T03:47:11Z"
"","9389","Use the same rules for spring path expressions as the JSP expression language [SPR-4712]","**[Stephen R. Saucier](https://jira.spring.io/secure/ViewProfile.jspa?name=saucier)** opened **[SPR-4712](https://jira.spring.io/browse/SPR-4712?redirect=false)** and commented  From http://java.sun.com/j2ee/1.4/docs/tutorial/doc/JSPIntro7.html#wp84857: ""The JSP expression language unifies the treatment of the . and [] operators. expr-a.identifier-b is equivalent to expr-a[""identifier-b""]; that is, the expression expr-b is used to construct a literal whose value is the identifier, and then the [] operator is used with that value.""  I believe this same behavior should apply to Spring path expressions. Currently the ""."" operator is used for bean properties and the [] operator is used for collections. It seems that it would be useful to have a consistent interpretation with JSP for cases where Spring path expressions are being used in JSP (for example in Spring's form tag library).  For example, given a list ""list"", I can use ""list[0]"" in a Spring path expression but not ""list.0"". Similarly, for some arbitrary bean named ""foo"" with a property ""bar"", I can write ""foo.bar"" in a Spring path expression but not ""foo[bar]"".  This applies specifically to org.springframework.beans.BeanWrapperImpl getPropertyValue and setPropertyValue methods.   --- No further details from [SPR-4712](https://jira.spring.io/browse/SPR-4712?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-04-16T06:03:42Z","2015-09-22T16:49:59Z"
"","9329","AnnotationMethodHandlerAdapter$ServletHandlerMethodResolver does not take method names into account when resolving handler method for Methods annotated with @RequestMapping which do not specify path information [SPR-4652]","**[Stephen R. Saucier](https://jira.spring.io/secure/ViewProfile.jspa?name=saucier)** opened **[SPR-4652](https://jira.spring.io/browse/SPR-4652?redirect=false)** and commented  Consider the following Controller:  import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping;  `@Controller` `@RequestMapping`(""test/*"") public class TestController { `@RequestMapping` public Model index() { return new ExtendedModelMap(); } }  and assume that I have the following in DispatcherServlet's spring configuration: \  if I request the URL /test/index it maps to the index() method in the above class and resolves the view to /WEB-INF/index.jsp. However, if I request /test/other it still matches the index() method (and resolves the view to /WEB-INF/other.jsp). Similarly, if I request /test/, the index() method is called and my view is resolved to /WEB-INF/.jsp. This is because in resolveHandlerMethod of AnnotationMethodHandlerAdapter$ServletHandlerMethodResolver, if no paths are specified on the `@RequestMapping` annotation, a parameter match is sufficient.  I'd like to propose that if a path is not specified on the method's `@RequestMapping` annotation, that the MethodNameResolver associated with the AnnotationMethodHandlerAdapter instance is used to determine if the method is a match as implied by the phrase ""The handler method names are taken into account for narrowing if no path was specified explicitly"" (see http://static.springframework.org/spring/docs/2.5.x/reference/mvc.html#mvc-ann-requestmapping-advanced).  This change could break existing applications that depend on this behavior.  ---  **Affects:** 2.5.2  **Issue Links:** - #10065 Have AnnotationMethodHandlerAdapter save `@Controller` invocation context so it can be used during view resolution and rendering","closed","type: enhancement,","spring-projects-issues","2008-04-02T10:05:49Z","2019-01-13T08:04:33Z"
"","9325","No DataBinder created on objects returned by methods annotated with @ModelAttribute [SPR-4648]","**[Stephen R. Saucier](https://jira.spring.io/secure/ViewProfile.jspa?name=saucier)** opened **[SPR-4648](https://jira.spring.io/browse/SPR-4648?redirect=false)** and commented  I'm having trouble tracking down what exactly is the solution to my problem, so please be gentle if my description here seems a bit obtuse...  I'm developing a controller using the `@Controller` annotation and not extending any of Spring's Controller base classes.  I have a method annotated with the ModelAttribute annotation (not on a parameter, on the method) returning my default ""form backing object"" e.g.  `@ModelAttribute` public Object getDefaultObject() { return this.beanFactory.getBean(""defaultObject""); }  and I've declared ""defaultObject"" in my spring configuration as having a ""prototype"" scope. Of course, the actual object I'm returning is not an java.lang.Object, it is a JavaBean with properties that are other JavaBeans (that is, an object graph) but this is exemplary.  so far, so good...  The problem is, unless I declare a `@ModelAttribute` parameter on my handler method (that is, a method annotated with `@RequestMapping`), the property editors I've registered in my spring configuration (through the webBindingInitializer parameter of the AnnotationMethodHandlerAdapter class) do not get applied to the properties of my ""form backing object"". This manifests itself as the properties of my form backing object showing up in my form fields as Strings produced through the bean property's toString() method, and not through the corresponding PropertyEditor implementation I've registered through the webBindingInitializer.  As mentioned above, I can work around this issue by adding an explicit `@ModelAttribute` parameter to my handler method, but I'm not actually using the object in my handler method which would make it appear as if the parameter is erroneous. I'd prefer if the property editors were registered by default for any objects returned by methods annotated with `@ModelAttribute` instead.  Based on my uneducated perusal of the spring source code, it seems that in the getModelAndView method of the AnnotationMethodHandlerAdapter class, the last if case (!BeanUtils.isSimpleProperty(returnValue.getClass())) ought to create some sort of DataBinder, perhaps using something like: createBinder((HttpServletRequest) webRequest.getNativeRequest(), returnValue, attrName); before the line: return mav.addObject(attrName, returnValue); (in spring 2.5.2, this is line 633).  Also, if I've misstated the problem in the summary, please change to be more appropriate.  Let me know if you have any other questions!   ---  **Affects:** 2.5.2  **Attachments:** - [bind-all-model-attributes.patch](https://jira.spring.io/secure/attachment/13879/bind-all-model-attributes.patch) (_2.50 kB_)","closed","type: enhancement,","spring-projects-issues","2008-03-31T09:35:06Z","2012-06-19T03:46:38Z"
"","9831","Spring MVC Interceptor Documentation [SPR-5158]","**[Stephen M. Wick](https://jira.spring.io/secure/ViewProfile.jspa?name=stevewickii)** opened **[SPR-5158](https://jira.spring.io/browse/SPR-5158?redirect=false)** and commented  When I read section 13.4.3 ""Intercepting requests - the HandlerInterceptor interface"", I am left wondering, ""Do the interceptors specified in the handler mapping bean get invoked for every request handled by the DisplatcherServlet, or do they just get invoked when a request matches one of the URL patterns specified in the mappings property of the handler mapping bean?""  I think it would be a good idea to answer this question in the Spring reference document under section 13.4.3.  Thanks!  And, Great work!  The Spring Framework project has been so helpful!  Stephen   ---  **Affects:** 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.0.9  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/95ad3c923a3e328a9bfbaa0a0ca2f394ba9c47b8","closed","type: enhancement,","spring-projects-issues","2008-09-16T05:53:27Z","2012-06-19T03:47:14Z"
"","9357","missing classes in spring.jar [SPR-4680]","**[Stephan Schröder](https://jira.spring.io/secure/ViewProfile.jspa?name=simon.void)** opened **[SPR-4680](https://jira.spring.io/browse/SPR-4680?redirect=false)** and commented  As far as i understand it the dist/spring.jar file is supposed to contain all spring classes. If you only use a subset of these classes you are supposed to use the jars in dist/modules. Right?! So why are the packages from dist/modules/spring-webmvc.jar or dist/modules/spring-test.jar not included in the dist/spring.jar file?  If spring.jar isn't supposed to contain these classes, is there anywhere a list of the modules which are included in spring.jar? (In that case this wouldn't be a bug and i'm sorry for posting here).   ---  **Affects:** 2.5.3","closed","status: declined,","spring-projects-issues","2008-04-09T03:14:35Z","2019-01-12T16:28:23Z"
"","9346","MockMultipartHttpServletRequest has various limitations [SPR-4669]","**[Stephan Schröder](https://jira.spring.io/secure/ViewProfile.jspa?name=simon.void)** opened **[SPR-4669](https://jira.spring.io/browse/SPR-4669?redirect=false)** and commented  There are two issues in MockMultipartHttpServletRequest: -first issue: \ MockMultipartHttpServletRequest mockRequest = new MockMultipartHttpServletRequest(); mockRequest.setMethod( ""POST"" ); mockRequest.setContentType( ""multipart/mixed"" ); mockRequest.addFile( new MockMultipartFile( ""file"",""file.txt"",""text/plain"",new byte[10] ) ); int content_length = mockRequest.getContentLength(); \ The content is never updated therefore content_length resolves to -1 in this context. But it should be the length of a properly structured multipart request. You can find the structure of multipart request here: http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html -second issue: multiple mutlipartfiles of one multipart request are allowed to have the same name. Right now the name is the key for the MockMultipartFile  therefore only one multipartfile is stored properly.  I wrote unit tests to highlight these issues.   ---  **Affects:** 2.5.2  **Attachments:** - [MockMultipartHttpServletRequestTest.java](https://jira.spring.io/secure/attachment/13901/MockMultipartHttpServletRequestTest.java) (_1.51 kB_)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-07T00:22:37Z","2015-09-22T17:34:33Z"
"","9477","DelegatingVariableResolver for Adobe Flex Applications [SPR-4800]","**[Stephan Heilner](https://jira.spring.io/secure/ViewProfile.jspa?name=stephanheilner)** opened **[SPR-4800](https://jira.spring.io/browse/SPR-4800?redirect=false)** and commented  Add support for accessing Spring beans from Adobe Flex ActionScript and mxml files,  preferably through a Spring-specific VariableResolver implementation.   ---  8 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-12T06:18:18Z","2014-05-06T06:59:14Z"
"","9235","SqlValue interface for ArgPreparedStatementSetter [SPR-4558]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-4558](https://jira.spring.io/browse/SPR-4558?redirect=false)** and commented  Spring should have  ---  interface SqlValue { Object getSqlValue(); }  ---  and StatementCreatorUtils.setParameterValueInternal should have:  ---  if (value instanceof SqlValue) value = ((SqlValue) value).getSqlValue();  ---  This is needed for implicit conversion of some types to SQL values.  In our projects we have SqlValue interface and we've reimplemented ArgPreparedStatementSetter that to SqlValue. And we've made all our DB-related enums (and some other classes) implement SqlValue. Example:  ---  enum UserState implement SqlValue { UNKNOWN(0), WAITING_FOR_MODERATION(1), AVAILABLE(2), DELETED(3), BLOCKED(4); final int value; Object getSqlValue() { return value; } }  void updateUserState(long userId, UserState state) { getSimpleJdbcTemplate().update(""UPDATE users SET state = ? WHERE user_id = ?"", state, userId); // instead of getSimpleJdbcTemplate().update(""UPDATE users SET state = ? WHERE user_id = ?"", state.value(), userId); }  ---  ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-08T05:26:31Z","2019-01-13T21:53:10Z"
"","9188","CommonsMultipartResolver.cleanupMultipart should ignore exceptions [SPR-4511]","**[Stepan Koltsov](https://jira.spring.io/secure/ViewProfile.jspa?name=yozh)** opened **[SPR-4511](https://jira.spring.io/browse/SPR-4511?redirect=false)** and commented  cleanupMultipart should be like:  ---  public void cleanupMultipart(MultipartHttpServletRequest request) { if (request == null) return; try { cleanupFileItems(request.getFileMap().values()); } catch (Throwable e) { logger.warn(""failed to cleanup multipart request"", e); } }  ---  so cleanupMultipart could be safely called in finally.  ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-27T06:52:11Z","2019-01-13T21:53:18Z"
"","9096","HibernateDaoSupport.getHibernateTemplate().find(.. .) produces BatchUpdateException [SPR-4418]","**[Stefan Thiel](https://jira.spring.io/secure/ViewProfile.jspa?name=stef)** opened **[SPR-4418](https://jira.spring.io/browse/SPR-4418?redirect=false)** and commented  I have some weird behavior of HibernateTemplate (using hibernate 3.2.5ga, hibernate-annotations 3.3.0ga and spring 2.5.1). There is no special transactional context set up. After many tries and a whole bunch of unit tests I'm down to the difference of the 2 tests below that worry me. There seems to be a similar post within the .NET data access form.  It all works when directly accessing hibernate's sessionFactory (see second test method below), but not when using the HibernateTemplate's find method. What bewilders me most is the log listing collection deletions and therefore UPDATE statements (see log extracts at the end).  ---  relevant code snipplets from test (see attachement for the whole test project):      /**      * this is producing a BatchUpdateException      */     @Test     public void testItemDescriptorsForTestDomainWithHibernateTemplate() throws Exception {         try {             final HibernateDescriptorBroker hibDescrBroker = (HibernateDescriptorBroker) getDescriptorBroker();             final List itemDescriptors = hibDescrBroker.getHibernateTemplate().find(""from ItemDescriptor where domain.id=?"", getTestDomain().getId());             assert itemDescriptors != null;             assert itemDescriptors.size() > 0;         } catch(Throwable t) {             t.printStackTrace(System.err);             assert false;         }     }          /**      * this works! within the same test run      */     @Test     public void testItemDescriptorsForTestDomainWithHibernateTemplateUsingItsSessionFactory() throws Exception {         try {             final HibernateDescriptorBroker hibDescrBroker = (HibernateDescriptorBroker) getDescriptorBroker();             final SessionFactory sessionFactory = hibDescrBroker.getSessionFactory();             final Session session = sessionFactory.openSession();             assert session != null;             Query query = session.createQuery(""from ItemDescriptor where domain.id=?"");             query.setLong(0,getTestDomain().getId());             final List itemDescriptors = query.list();             session.close();             assert itemDescriptors != null;             assert itemDescriptors.size() > 0;         } catch(Throwable t) {             t.printStackTrace(System.err);             assert false;         }     }  ---  Hibernate's log output  Deleting collection: [ch.beecom.apptmpl.broker.impl.ItemDescriptorPojo.attributeDescriptors#13] Deleting collection: [ch.beecom.apptmpl.broker.impl.ItemDescriptorPojo.attributeDescriptors#13] about to open PreparedStatement (open PreparedStatements: 0, globally: 0) about to open PreparedStatement (open PreparedStatements: 0, globally: 0) update ATTR_TYPEDEF set ATD_ITD_ID=null where ATD_ITD_ID=? update ATTR_TYPEDEF set ATD_ITD_ID=null where ATD_ITD_ID=? binding '13' to parameter: 1 binding '13' to parameter: 1 done deleting collection done deleting collection Deleting collection: [ch.beecom.apptmpl.broker.impl.ItemDescriptorPojo.attributeDescriptors#14] Deleting collection: [ch.beecom.apptmpl.broker.impl.ItemDescriptorPojo.attributeDescriptors#14] reusing prepared statement reusing prepared statement update ATTR_TYPEDEF set ATD_ITD_ID=null where ATD_ITD_ID=? update ATTR_TYPEDEF set ATD_ITD_ID=null where ATD_ITD_ID=? binding '14' to parameter: 1 binding '14' to parameter: 1 done deleting collection done deleting collection Executing batch size: 2 Executing batch size: 2 about to close PreparedStatement (open PreparedStatements: 1, globally: 1) about to close PreparedStatement (open PreparedStatements: 1, globally: 1) Could not execute JDBC batch update [update ATTR_TYPEDEF set ATD_ITD_ID=null where ATD_ITD_ID=?] java.sql.BatchUpdateException: Batch entry 0 update ATTR_TYPEDEF set ATD_ITD_ID=null where ATD_ITD_ID=13 was aborted.  Call getNextException to see the cause. at org.postgresql.jdbc2.AbstractJdbc2Statement$BatchResultHandler.handleError(AbstractJdbc2Statement.java:2530) at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1317) at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:350) at org.postgresql.jdbc2.AbstractJdbc2Statement.executeBatch(AbstractJdbc2Statement.java:2592) at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:48) at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:246) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:237) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:143) at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298) at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27) at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000) at org.springframework.orm.hibernate3.HibernateAccessor.flushIfNecessary(HibernateAccessor.java:390) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:374) at org.springframework.orm.hibernate3.HibernateTemplate.find(HibernateTemplate.java:866) at org.springframework.orm.hibernate3.HibernateTemplate.find(HibernateTemplate.java:862) at ch.beecom.apptmpl.broker.DescriptorBrokerTest.testItemDescriptorsForTestDomainWithHibernateTemplate(DescriptorBrokerTest.java:96) at ... > Could not execute JDBC batch update [update ATTR_TYPEDEF set ATD_ITD_ID=null where ATD_ITD_ID=?] java.sql.BatchUpdateException: Batch entry 0 update ATTR_TYPEDEF set ATD_ITD_ID=null where ATD_ITD_ID=13 was aborted.  Call getNextException to see the cause. at org.postgresql.jdbc2.AbstractJdbc2Statement$BatchResultHandler.handleError(AbstractJdbc2Statement.java:2530) at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1317) at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:350) at org.postgresql.jdbc2.AbstractJdbc2Statement.executeBatch(AbstractJdbc2Statement.java:2592) at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:48) at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:246) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:237) at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:143) at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298) at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27) at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000) at org.springframework.orm.hibernate3.HibernateAccessor.flushIfNecessary(HibernateAccessor.java:390) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:374) at org.springframework.orm.hibernate3.HibernateTemplate.find(HibernateTemplate.java:866) at org.springframework.orm.hibernate3.HibernateTemplate.find(HibernateTemplate.java:862) at ch.beecom.apptmpl.broker.DescriptorBrokerTest.testItemDescriptorsForTestDomainWithHibernateTemplate(DescriptorBrokerTest.java:96) at ... > SQL Error: 0, SQLState: null SQL Error: 0, SQLState: null Batch entry 0 update ATTR_TYPEDEF set ATD_ITD_ID=null where ATD_ITD_ID=13 was aborted.  Call getNextException to see the cause. Batch entry 0 update ATTR_TYPEDEF set ATD_ITD_ID=null where ATD_ITD_ID=13 was aborted.  Call getNextException to see the cause. SQL Error: 0, SQLState: 23502 SQL Error: 0, SQLState: 23502 ERROR: null value in column ""atd_itd_id"" violates not-null constraint ERROR: null value in column ""atd_itd_id"" violates not-null constraint Could not synchronize database state with session  ---  I [will] attach a downstripped project that contains some of the tests and shows that error (ONLY that one test method using HibernateTemplate instead of directly accessing hibernate's sessionFactory is failing within my setup).  It's a maven2 based project. But I left my IDEA project files created from the pom within that zip-file.  The tests testng_online.xml are in the module apptmpl (actually the only module in that zip) and the execution directory must be set to that module's directory. The test requires a postgres db and takes the master db configured within apptmpl/src/test/resources/applicationContextTest.xml and will create a fresh database to be used for each test class using the sql scripts within this project - that's why the execution path must be apptmpl/ so the scripts will be found correctly.  — I posted this first to http://forum.springframework.org/showthread.php?t=49301&referrerid=34190  ---  **Affects:** 2.5.1  **Attachments:** - [startest.zip](https://jira.spring.io/secure/attachment/13599/startest.zip) (_82.67 kB_)","closed","in: data,","spring-projects-issues","2008-02-03T18:32:40Z","2019-01-13T21:53:35Z"
"","9848","Owerwrite an existing attribute in ModelMap [SPR-5175]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-5175](https://jira.spring.io/browse/SPR-5175?redirect=false)** and commented  'Overwriting' an existing attribute in ModelMap with a new value but the same key:  `@RequestMapping`(method = RequestMethod.GET) public Book edit() { Book book = new Book(); book.setTitle(""old title""); return book; }      @RequestMapping(method = RequestMethod.POST)     public ModelMap save(@ModelAttribute(""book"") Book book, ModelMap modelMap) {               book = new Book();         book.setTitle(""new title"");         modelMap.addAttribute(""book"", book);         return modelMap;     }  does produce a somewhat inconsistent behavior where a new object is passed back to ModelAndView but it does get prefilled with the old values. So in the form after submitting the POST request it would display ""old title"".  Removing the BindingResult attributes  modelMap.remove(""org.springframework.validation.BindingResult.book"");  will solve the problem (i.e. new title is displayed). So it seems the BindingResult gets mixed up with the model attribute. However, the user would be expected to know about the internals of ModelMap which should not be necessary..  We could expose an extended ModelMap class that automatically removes BindingResult attributes if the corresponding target attribute is overridden.   ---  **Affects:** 2.5.5","closed","type: bug,","spring-projects-issues","2008-09-23T10:03:16Z","2012-06-19T03:46:59Z"
"","9708","HibernateTemplate does not consistently detect pre-bound Session when using a custom SessionFactory proxy [SPR-5033]","**[Stefan Schmidt](https://jira.spring.io/secure/ViewProfile.jspa?name=sschmidt)** opened **[SPR-5033](https://jira.spring.io/browse/SPR-5033?redirect=false)** and commented  This issue is a side effect of #8051.  HibernateTemplate should detect a HibernateTransactionManager-driven transaction where the transactional Session is obtained through a custom SessionFactory proxy.  In the JTA case, there are no guarantees that openSession() will be called through the proxy in the first place since Hibernate's own JTA support uses internal calls on the SessionFactory there.  However, Hibernate's own CurrentSessionContext implementations will keep using the native SessionFactory object directly. Native sessionFactory.getCurrentSession() calls will always bypass the custom SessionFactory proxy's openSession() method. The custom proxy needs to intercept and handle getCurrentSession() calls accordingly as well.  ---  **Affects:** 2.5.5  **Issue Links:** - #8051 HibernateTemplate doesn't work with Transactions externally managed behind hibernates getCurrentSession()","closed","type: enhancement,","spring-projects-issues","2008-07-23T13:57:10Z","2019-01-11T14:34:03Z"
"","9427","Add advice to use @Transactional on class when using AspectJ weaving [SPR-4750]","**[Stefan Scheidt](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.scheidt@opitz-consulting.de)** opened **[SPR-4750](https://jira.spring.io/browse/SPR-4750?redirect=false)** and commented  When using `@Transactional` and ""annotation-driven mode aspectj"", one has to use `@Transactional` on class leven. Annotating interface methods would not work. Probably one should add a note about this like the one that annotating interface methods would not work when using proxy-target-class=true. (see http://static.springframework.org/spring/docs/2.5.x/reference/transaction.html#transaction-declarative-annotations)  (Based on an after-talk-discussion with Jürgen Höller at JAX 2008)   ---  **Affects:** 2.5.3","closed","type: documentation,","spring-projects-issues","2008-04-24T02:02:10Z","2012-06-19T03:47:37Z"
"","9852","Fix maven POMs [SPR-5179]","**[Stefan Reuter](https://jira.spring.io/secure/ViewProfile.jspa?name=srt)** opened **[SPR-5179](https://jira.spring.io/browse/SPR-5179?redirect=false)** and commented  The maven poms sometimes use outdated group identifies(e.g. groovy instead of org.codehaus.groovy) and incorrect versions (e.g. 3.3.2.ga instead of 3.3.2.GA for Hibernate). This makes it hard to build Spring Framework with maven.  The following patch fixes the issue:  Index: maven/spring.pom  ---  RCS file: /cvsroot/springframework/spring/maven/spring.pom,v retrieving revision 1.41 diff -r1.41 spring.pom 155c155 < 			\2.3.0.677\ —  > \2.3.4.726\  189c189 < 			\freemarker\ —  > \org.freemarker\  195c195 < 			\groovy\ —  > \org.codehaus.groovy\  201c201 < 			\hessian\ —  > \com.caucho\  309,310c309,310 < 			\jruby\ < 			\jruby-bin\ —  > \org.jruby\ > \jruby\  371c371 < 			\3.3.2.ga\ —  > \3.3.2.GA\  375c375 < 			\poi\ —  > \org.apache.poi\  377c377 < 			\3.0.1\ —  > \3.0.1-FINAL\  ---  **Affects:** 2.5.5, 2.5.6  2 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-09-25T01:48:40Z","2019-01-13T21:51:28Z"
"","8986","Thread-safety and visibility issues not documented [SPR-4307]","**[Stefan Fleiter](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan%20fleiter)** opened **[SPR-4307](https://jira.spring.io/browse/SPR-4307?redirect=false)** and commented  Neither spring's reference documentation nor the Javadoc mention the context thread-safety and visibility guarantees.  What can happen when multiple threads query for a bean during its' creation (singleton and prototype)? Is it guaranteed that all threads see changes made by constructors and setters? Does FactoryBean#getObject() has to be implemented thread-safe?  After a short analysis of AbstractBeanFactory all these aspects seem to be handled by the spring context.  Please document this. The most important place is the reference documentation: http://static.springframework.org/spring/docs/2.5.x/reference/beans.html The Javadoc for all ApplicationContext- and BeanFactory-Classes should also state this.  Thanks a lot in advance.   ---  **Affects:** 2.5 final  4 votes, 7 watchers","open","in: core,","spring-projects-issues","2008-01-07T04:26:00Z","2017-09-18T11:24:57Z"
"","8977","DelegatingHttpServletProxy (analogous to DelegatingFilterProxy) [SPR-4299]","**[Stefan Fleiter](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan%20fleiter)** opened **[SPR-4299](https://jira.spring.io/browse/SPR-4299?redirect=false)** and commented  In Spring web there is no class along the lines of DelegatingFilterProxy for servlets. Sometimes you have a servlet written by somebody else or legacy code and you do not want to change it but want to use dependency injection, though.  I have written a class named DelegatingHttpServletProxy which could help for this purpose and would very much like to contribute it.  I will attach a patch shortly.   ---  **Affects:** 2.5 final  **Attachments:** - [DelegatingHttpServletProxy_2.patch](https://jira.spring.io/secure/attachment/13254/DelegatingHttpServletProxy_2.patch) (_13.62 kB_) - [DelegatingHttpServletProxy.patch](https://jira.spring.io/secure/attachment/13247/DelegatingHttpServletProxy.patch) (_13.57 kB_)","closed","type: enhancement,","spring-projects-issues","2008-01-04T00:43:55Z","2015-09-22T17:34:35Z"
"","14144","Exporting Webservice via DispatcherServlet not via WSSpringServlet [SPR-9510]","**[spgmx](https://jira.spring.io/secure/ViewProfile.jspa?name=spgmx)** opened **[SPR-9510](https://jira.spring.io/browse/SPR-9510?redirect=false)** and commented  It would be very nice if it would be possible to export a WebService via the normal DispatcherServlet and not via a separate WSSpringServlet. It is a bit uneasy to edit the web.xml to switch on/off the Webservice. With contextConfigLocation configured to *.xml it would be enough to remove / rename the context definition file of the webservice to disable / enable it.   --- No further details from [SPR-9510](https://jira.spring.io/browse/SPR-9510?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-08-07T21:27:28Z","2018-12-27T10:56:29Z"
"","9795","Make CustomizableTraceInterceptor more suitable for subclassing [SPR-5122]","**[spgmx](https://jira.spring.io/secure/ViewProfile.jspa?name=spgmx)** opened **[SPR-5122](https://jira.spring.io/browse/SPR-5122?redirect=false)** and commented  It would be great if the private methods in CustomizableTraceInterceptor would be protected and the bigger methods would be split into smaller ones which are protected too. Especially replacePlaceholders(String, MethodInvocation, Object, Throwable, long) should have one method per placeholder.  Then it would be possible to override these methods to change what gets logged: masking out parameter values like passwords or logging arrays via Arrays.toString() etc.   ---  **Affects:** 2.5.5  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-28T01:08:25Z","2015-09-22T17:34:39Z"
"","9223","In case of Exception, exceptionListener is never invoked by DefaultMessageListenerContainer [SPR-4546]","**[Sourabh Srivastava](https://jira.spring.io/secure/ViewProfile.jspa?name=ssourabh)** opened **[SPR-4546](https://jira.spring.io/browse/SPR-4546?redirect=false)** and commented  In case of JMSExceptions, DefaultMessageListenerContainer is not invoking the class configured for ""exceptionListener"". It is always calling the Listener class again and again every second and it is going in loop.   ---  **Affects:** 2.5.2","closed","type: bug,","spring-projects-issues","2008-03-05T13:50:50Z","2012-06-19T03:46:49Z"
"","8930","Missing JAX-WS usage example in Spring 2.5 reference documentation [SPR-4252]","**[Slavomir Kocka](https://jira.spring.io/secure/ViewProfile.jspa?name=kockas)** opened **[SPR-4252](https://jira.spring.io/browse/SPR-4252?redirect=false)** and commented  I couldn't find any example of JAX-WS usage within Spring 2.5. In reference documentation is only mentioned support, but documentation still says only about JAX-RPC etc... Thanks   ---  **Affects:** 2.5 final","closed","type: task,","spring-projects-issues","2007-12-13T01:22:07Z","2012-06-19T03:47:49Z"
"","8976","WebSphereDataSourceAdapter getConnection throws runtime exception instead of SQLException [SPR-4298]","**[Sjoerd Talsma](https://jira.spring.io/secure/ViewProfile.jspa?name=sjoerd.talsma)** opened **[SPR-4298](https://jira.spring.io/browse/SPR-4298?redirect=false)** and commented  The problem occurs within WebSphere when no connection can be obtained to the datasource.  In this case, the underlying WS code throws an SQLException which is caught by the ReflectionUtils invoker, wrapped in an InvocationTargetException. This MESSAGE from this exception is then re-thrown as an IllegalStateException within the ReflectionUtils method. Therefore, the WebSphereDataSourceAdapter has no way of obtaining the 'real' (SQLException) cause for the error and throws as a result an IllegalStateException instead of an SQLException (as declared by the method).  The impact of this problem is not devastating in my opinion, but does result in SQL errors that are NOT wrapped by their corresponding Spring counterparts. This, in turn leads our SpringMVC layer to print a 'general error' JSP page instead of the more appropriate 'data error' page we have configured.  What I see as the best solution with the least impact on other code is as follows: - Do _not_ use ReflectionUtils.invokeMethod call, but use its code directly in the WebSphereDataSourceAdapter. - In case of an InvocationTargetException, check if the target exception happens to be an SQLException, and throw it if it is. Otherwise, simply imitate original ReflectionUtils behaviour.  I will include a modified doGetConnection method with the proposed fix to this problem.   ---  **Affects:** 2.0.7, 2.5 final  **Attachments:** - [fragment.txt](https://jira.spring.io/secure/attachment/13246/fragment.txt) (_2.25 kB_)  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: bug,","spring-projects-issues","2008-01-03T23:54:54Z","2012-06-19T03:47:07Z"
"","9874","Error while deletion of  attached Document [SPR-5201]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-5201](https://jira.spring.io/browse/SPR-5201?redirect=false)** and commented  We are getting the below error while deletion of the attaced document.  ---  javax.servlet.ServletException: Form object returned by formBackingObject() must not be null at org.springframework.web.servlet.mvc.AbstractFormController.getErrorsForNewForm(AbstractFormControl at org.springframework.web.servlet.mvc.AbstractFormController.showNewForm(AbstractFormController.java at org.springframework.web.servlet.mvc.AbstractFormController.handleRequestInternal(AbstractFormContr at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153) at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerA at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:809) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501) at javax.servlet.http.HttpServlet.service(HttpServlet.java:690) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:619)10/6/200810/6/2008  Please any one hlep,how resolve the issue.  ---  **Affects:** 2.5.4","closed","status: invalid,","spring-projects-issues","2008-10-06T01:20:28Z","2019-01-13T21:51:21Z"
"","9873","javax.servlet.jsp.JspTagException: Null property value for 'name' [SPR-5200]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-5200](https://jira.spring.io/browse/SPR-5200?redirect=false)** and commented  I am getting the below error.Can any one help how to resolve the below issue:  ---  ERROR org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/test] - Servlet.service() for servlet test threw exception javax.servlet.jsp.JspException: ServletException in '/WEB-INF/jsp/test.jsp': javax.servlet.jsp.JspTagException: Null property value for 'name' at org.apache.struts.taglib.tiles.InsertTag$InsertHandler.doEndTag(InsertTag.java:923) at org.apache.struts.taglib.tiles.InsertTag.doEndTag(InsertTag.java:462) at org.apache.jsp.WEB_002dINF.jsp.layout.structureLayout_jsp._jspx_meth_tiles_005finsert_005f5(structureLayout_jsp.java:319) at org.apache.jsp.WEB_002dINF.jsp.layout.structureLayout_jsp._jspService(structureLayout_jsp.java:115) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:393) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:320) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:654) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:445) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:379) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:292) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:240) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:252) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1173) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:901) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:809) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:511) at javax.servlet.http.HttpServlet.service(HttpServlet.java:710) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:619)  ---  **Affects:** 2.5.4","closed","status: invalid,","spring-projects-issues","2008-10-04T23:22:57Z","2019-01-13T21:51:23Z"
"","9851","Not displaying in UI for the date input fields and calendar icons for any Date fields [SPR-5178]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-5178](https://jira.spring.io/browse/SPR-5178?redirect=false)** and commented  we are using the spring 2.5.4 .The problem we are able to display the the date input fields and calendar icons for any Date fields in local.But in the development enviornment we are facing the problem ,Date inputs displays as  labels only. Not displaying  the text box and calendar events. Please help in this asap.  Code iin jsp:  \xxx: \   ---  ---    In the View source we are getting the below  ---  \Trade xxx: \  We are not getting the html input fields in the view source.  we are runnning the application tomocat6.  Please help asap.  ---  **Affects:** 2.5.4","closed","status: invalid,","spring-projects-issues","2008-09-24T02:58:55Z","2019-01-13T21:51:29Z"
"","9615","javax.servlet.ServletException: javax/servlet/jsp/el/VariableResolver problem while upgrading from spring 1.1.1 to 2.5.4 [SPR-4940]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-4940](https://jira.spring.io/browse/SPR-4940?redirect=false)** and commented  Please any one help this issue:  ---  Scenario:  ---  By adding spring 2.5.4 realted jars, (struts.jar(1.2.9),jstl.jar(1.1.2) and standard.jar(1.1.2) (i.e as part of spring 2.5.4)) to my application  we are getting the below  error  ---  2008-06-19 13:08:31,701 ERROR [org.apache.struts.taglib.tiles.InsertTag] -  javax.servlet.ServletException: javax/servlet/jsp/el/VariableResolver at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:469) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:315) at weblogic.servlet.internal.RequestDispatcherImpl.include(RequestDispatcherImpl.java:638) at weblogic.servlet.internal.RequestDispatcherImpl.include(RequestDispatcherImpl.java:423) at weblogic.servlet.jsp.PageContextImpl.include(PageContextImpl.java:154) at org.apache.struts.tiles.TilesUtilImpl.doInclude(TilesUtilImpl.java:99) at org.apache.struts.tiles.TilesUtil.doInclude(TilesUtil.java:135) at org.apache.struts.taglib.tiles.InsertTag.doInclude(InsertTag.java:760) at org.apache.struts.taglib.tiles.InsertTag$InsertHandler.doEndTag(InsertTag.java:892) at org.apache.struts.taglib.tiles.InsertTag.doEndTag(InsertTag.java:462) at jsp_servlet._web_45_inf._jsp._layout.__mainlayout._jspService(__mainlayout.java:276) at weblogic.servlet.jsp.JspBase.service(JspBase.java:33) at weblogic.servlet.internal.ServletStubImpl$ServletInvocationAction.run(ServletStubImpl.java:1006) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:419) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:315) at weblogic.servlet.internal.RequestDispatcherImpl.forward(RequestDispatcherImpl.java:322) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:240) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:252) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1173) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:901) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:809) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:511) at javax.servlet.http.HttpServlet.service(HttpServlet.java:760) at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) at weblogic.servlet.internal.ServletStubImpl$ServletInvocationAction.run(ServletStubImpl.java:1006) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:419) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:315) at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:6718) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) at weblogic.servlet.internal.WebAppServletContext.invokeServlet(WebAppServletContext.java:3764) at weblogic.servlet.internal.ServletRequestImpl.execute(ServletRequestImpl.java:2644) at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:219) at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:178)  Sceanrio 2:  ---  By adding the jsp-api.jar(2.0) from spring 2.5.4, we are able get the values in the UI ,but Runtime shows below error:  2008-06-16 12:26:00,640 DEBUG [org.springframework.web.util.ExpressionEvaluationUtils] -  java.lang.NoSuchMethodError: javax.servlet.jsp.PageContext.getExpressionEvaluator()Ljavax/servlet/jsp/el/ExpressionEvaluator; at org.springframework.web.util.ExpressionEvaluationUtils$Jsp20ExpressionEvaluationHelper.evaluate(ExpressionEvaluationUtils.java:404) at org.springframework.web.util.ExpressionEvaluationUtils.doEvaluate(ExpressionEvaluationUtils.java:276) at org.springframework.web.util.ExpressionEvaluationUtils.evaluateString(ExpressionEvaluationUtils.java:192) at org.springframework.web.servlet.tags.BindErrorsTag.doStartTagInternal(BindErrorsTag.java:62) at org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:77) at jsp_servlet._web_45_inf._jsp._common._error.__formerrors._jspService(__formerrors.java:179) at weblogic.servlet.jsp.JspBase.service(JspBase.java:33) at weblogic.servlet.internal.ServletStubImpl$ServletInvocationAction.run(ServletStubImpl.java:1006) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:419) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:463) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:315) at weblogic.servlet.internal.RequestDispatcherImpl.include(RequestDispatcherImpl.java:638) at weblogic.servlet.internal.RequestDispatcherImpl.include(RequestDispatcherImpl.java:423) at weblogic.servlet.jsp.PageContextImpl.include(PageContextImpl.java:154) at org.apache.struts.tiles.TilesUtilImpl.doInclude(TilesUtilImpl.java:99) at org.apache.struts.tiles.TilesUtil.doInclude(TilesUtil.java:135) at org.apache.struts.taglib.tiles.InsertTag.doInclude(InsertTag.java:760) at org.apache.struts.taglib.tiles.InsertTag$InsertHandler.doEndTag(InsertTag.java:892) at org.apache.struts.taglib.tiles.InsertTag.doEndTag(InsertTag.java:462) at jsp_servlet._web_45_inf._jsp._layout.__mainlayout._jspService(__mainlayout.java:258) at weblogic.servlet.jsp.JspBase.service(JspBase.java:33) at weblogic.servlet.internal.ServletStubImpl$ServletInvocationAction.run(ServletStubImpl.java:1006) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:419) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:463) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:315) at weblogic.servlet.internal.RequestDispatcherImpl.forward(RequestDispatcherImpl.java:322) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:240) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:252) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1173) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:901) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:809) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501) at javax.servlet.http.HttpServlet.service(HttpServlet.java:740) at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) at weblogic.servlet.internal.ServletStubImpl$ServletInvocationAction.run(ServletStubImpl.java:1006) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:419) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:315) at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:6718) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) at weblogic.servlet.internal.WebAppServletContext.invokeServlet(WebAppServletContext.java:3764) at weblogic.servlet.internal.ServletRequestImpl.execute(ServletRequestImpl.java:2644) at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:219) at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:178)  But in our project we don't want to add the jsp-api.jar ,So Can any one suggest how to resolve this issue without adding jsp-api.jar to my application.  Working Environment:  ---  j2sdk1.4.2_08 weblogic 8.1  ---  **Affects:** 2.5.4","closed","status: declined,","spring-projects-issues","2008-06-20T01:27:18Z","2019-01-13T21:52:08Z"
"","9545","org.springframework.beans.factory.parsing.BeanDefinitionParsingException: [SPR-4869]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-4869](https://jira.spring.io/browse/SPR-4869?redirect=false)** and commented  I am getting below error while  I  am deploy in to the  weblogic Can any one suggest the solution for this error:  ---  org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Unexpected failure during bean definition parsing Offending resource: ServletContext resource [/WEB-INF/test-servlet.xml] Bean 'yyyy'; nested exception is org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Multiple 'property' definitions for property 'zzzz' Offending resource: ServletContext resource [/WEB-INF/test-servlet.xml] Bean 'yyyy' -> Property 'zzzz' at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.error(BeanDefinitionParserDelegate.java:288) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(BeanDefinitionParserDelegate.java:573) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(BeanDefinitionParserDelegate.java:389) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(BeanDefinitionParserDelegate.java:358) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.processBeanDefinition(DefaultBeanDefinitionDocumentReader.java:239) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:153) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:132) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:507) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:398) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:124) at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:92) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:423) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:353) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:402) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:316) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:282) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:126) at javax.servlet.GenericServlet.init(GenericServlet.java:258) at weblogic.servlet.internal.ServletStubImpl$ServletInitAction.run(ServletStubImpl.java:1028) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) at weblogic.servlet.internal.ServletStubImpl.createServlet(ServletStubImpl.java:904) at weblogic.servlet.internal.ServletStubImpl.createInstances(ServletStubImpl.java:883) at weblogic.servlet.internal.ServletStubImpl.prepareServlet(ServletStubImpl.java:822) at weblogic.servlet.internal.ServletStubImpl.getServlet(ServletStubImpl.java:535) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:373) at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:315) at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:6718) at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321) at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121) at weblogic.servlet.internal.WebAppServletContext.invokeServlet(WebAppServletContext.java:3764) at weblogic.servlet.internal.ServletRequestImpl.execute(ServletRequestImpl.java:2644) at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:219) at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:178) Caused by: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Multiple 'property' definitions for property 'zzzz' Offending resource: ServletContext resource [/WEB-INF/test-servlet.xml] Bean 'editFolder' -> Property 'zzzz' at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85) at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:80) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.error(BeanDefinitionParserDelegate.java:281) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parsePropertyElement(BeanDefinitionParserDelegate.java:780) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parsePropertyElements(BeanDefinitionParserDelegate.java:659) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseBeanDefinitionElement(BeanDefinitionParserDelegate.java:558) ... 39 more  class name org.springframework.web.context.support.XmlWebApplicationContext is an instance of wac sc ServletContext(id=29757300,name=webapp,context-path=/webapp)  ---  **Affects:** 2.5.4","closed","","spring-projects-issues","2008-05-27T23:20:56Z","2019-01-13T21:52:21Z"
"","9533","Replacement method for org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference in spring 2.5.4 [SPR-4857]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-4857](https://jira.spring.io/browse/SPR-4857?redirect=false)** and commented  I am getting the following error while I migatring from spring1.1.1  to spring 2.5.4.,Can any one suggest the  how to resolve this error  ---  Cannot resolve reference to bean 'yyyy' while setting constructor argument; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'yyyy' is defined at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1244) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1008) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269) ... 40 more  ---  No further details from [SPR-4857](https://jira.spring.io/browse/SPR-4857?redirect=false)","closed","","spring-projects-issues","2008-05-23T19:40:50Z","2019-01-13T21:52:23Z"
"","9528","New class for org.springframework.jdbc.core.ResultReader; in spring 2.5.4 [SPR-4852]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-4852](https://jira.spring.io/browse/SPR-4852?redirect=false)** and commented  Can any one send the New class for org.springframework.jdbc.core.ResultReader; in spring 2.5.4  ---  **Affects:** 2.5.4  **Issue Links:** - #9524 Replacement method for org.springframework.jdbc.core.ResultReader; in spring 2.5.4 (_**""duplicates""**_)","closed","type: task,","spring-projects-issues","2008-05-22T16:46:17Z","2019-01-11T19:06:16Z"
"","9527","New method for  public static int countParameterPlaceholders(String str, char placeholder, String delimiters) in the spring 2.5.4 [SPR-4851]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-4851](https://jira.spring.io/browse/SPR-4851?redirect=false)** and commented  Can any send the replacment method for the public static int countParameterPlaceholders(String str, char placeholder, String delimiters) in the spring 2.5.4  ---  **Issue Links:** - #9520 Replacement method for JdbcUtils.countParameterPlaceholders in spring 2.5.4 (_**""duplicates""**_)","closed","type: task,","spring-projects-issues","2008-05-22T16:43:35Z","2019-01-11T19:06:13Z"
"","9524","Replacement method for org.springframework.jdbc.core.ResultReader; in spring 2.5.4 [SPR-4848]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-4848](https://jira.spring.io/browse/SPR-4848?redirect=false)** and commented  Can any one send replace ment method fororg.springframework.jdbc.core.ResultReader in spring 2.5.4  ---  **Issue Links:** - #9528 New class for org.springframework.jdbc.core.ResultReader; in spring 2.5.4 (_**""is duplicated by""**_)","closed","","spring-projects-issues","2008-05-22T02:43:58Z","2019-01-11T19:06:26Z"
"","9521","Replacement method for JdbcUtils.countParameterPlaceholders in spring 2.5.4 [SPR-4845]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-4845](https://jira.spring.io/browse/SPR-4845?redirect=false)** and commented  Can any send replacement method for  JdbcUtils.countParameterPlaceholders in spring 2.5.4  ---  **Issue Links:** - #9520 Replacement method for JdbcUtils.countParameterPlaceholders in spring 2.5.4 (_**""duplicates""**_)","closed","type: task,","spring-projects-issues","2008-05-22T01:06:23Z","2019-01-11T19:06:50Z"
"","9520","Replacement method for JdbcUtils.countParameterPlaceholders in spring 2.5.4 [SPR-4844]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-4844](https://jira.spring.io/browse/SPR-4844?redirect=false)** and commented  Can any send the replacment   method for the  public static int countParameterPlaceholders(String str, char placeholder, String delimiters) in the spring 2.5.4  ---  **Issue Links:** - #9521 Replacement method for JdbcUtils.countParameterPlaceholders in spring 2.5.4 (_**""is duplicated by""**_) - #9527 New method for  public static int countParameterPlaceholders(String str, char placeholder, String delimiters) in the spring 2.5.4 (_**""is duplicated by""**_)","closed","status: declined,","spring-projects-issues","2008-05-21T23:17:59Z","2019-01-11T19:06:48Z"
"","9510","org.springframework.beans.factory.UnsatisfiedDependencyException [SPR-4834]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-4834](https://jira.spring.io/browse/SPR-4834?redirect=false)** and commented  ---  **Issue Links:** - #9499 org.springframework.beans.factory.ListableBeanFactory.getBeanDefinitionNames(Ljava/lang/Class;)","closed","status: declined,","spring-projects-issues","2008-05-19T01:43:12Z","2019-01-13T21:52:28Z"
"","9499","org.springframework.beans.factory.ListableBeanFactory.getBeanDefinitionNames(Ljava/lang/Class;) [SPR-4823]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-4823](https://jira.spring.io/browse/SPR-4823?redirect=false)** and commented  I am  getting the following error while i migrating from spring 1.1.x to spring 2.5.x by replacing jars  with 2.5.4 in place of 1.1.x org.springframework.beans.factory.ListableBeanFactory.getBeanDefinitionNames(Ljava/lang/Class;)  ---  **Issue Links:** - #9510 org.springframework.beans.factory.UnsatisfiedDependencyException","closed","status: declined,","spring-projects-issues","2008-05-15T00:44:50Z","2019-01-12T16:28:14Z"
"","9482","Related to  cvc-elt.1: Cannot find the declaration of element 'beans' [SPR-4805]","**[Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=sivabbl)** opened **[SPR-4805](https://jira.spring.io/browse/SPR-4805?redirect=false)** and commented   --- No further details from [SPR-4805](https://jira.spring.io/browse/SPR-4805?redirect=false)","closed","","spring-projects-issues","2008-05-13T02:12:18Z","2019-01-11T19:02:29Z"
"","9175","Unable to use CallParameterMetaData when dealing with Oracle User-Defined Collections in SimpleJdbcCall [SPR-4497]","**[Simon Watson](https://jira.spring.io/secure/ViewProfile.jspa?name=swatson)** opened **[SPR-4497](https://jira.spring.io/browse/SPR-4497?redirect=false)** and commented  Relates to fix in #9139  The NullPointer issue raised in this bug has been resolved, however it is still not possible to utilise meta-data to defined procedure/function call parameters where one or more parameters is a user defined collection:  see traces attached  scenario 1 - Provides input data for all real IN parameter data for a procedure call.  scenario 2 Attempts to add a default value for a NULL parameter name.  An Oracle user defined collection causes the Oracle META DATA class to return two CallParameters representing the one input, one named with the parameter name and with a typeName ""TABLE"" the other with a null name and the type of the Collections object.  Thus appearing that the meta-data code is looking into the collection and creating an extra CallParameter for the unnamed collections column (it is not possible to name the column), returning it with a null name.  As this extra piece of meta-data is not valid with regard to defined spec of the procedure/function, should the Spring classes building the call statement, disgard or ignore any in parameter created from meta-data with a null name (Type.OTHER) rather than generate an exception?  It is possible to make a successfull call be setting SimpleJdbcCall.setAccessCallParameterMetaData(false); and manually declaring the parameters, but this would seem to defeat one of the main incentives for using the SimpleJdbcCall class.  ---  **Affects:** 2.5.1  **Attachments:** - [Spring-SimpleJdbcCall-Issue.txt](https://jira.spring.io/secure/attachment/13685/Spring-SimpleJdbcCall-Issue.txt) (_6.69 kB_)","closed","type: enhancement,","spring-projects-issues","2008-02-25T00:58:25Z","2019-01-11T17:34:37Z"
"","9139","NullPointer in CallMetaDataContext.matchParametersInParameterValuesWithCallParameters when calling Oracle Function/Procedures with User-Defined Collections as IN or OUT parameters  [SPR-4462]","**[Simon Watson](https://jira.spring.io/secure/ViewProfile.jspa?name=swatson)** opened **[SPR-4462](https://jira.spring.io/browse/SPR-4462?redirect=false)** and commented  Using version 2.5.2-20080212-401  NullPointer in CallMetaDataContext.matchParametersInParameterValuesWithCallParameters when calling Oracle Function/Procedures with User-Defined Collections as IN or OUT parameters.  When compiling a SimpleJDBCCall using META-DATA to create and match defined IN/OUT parameters, an Oracle parameter or function return using a Oracle user defined collection causes the Oracle META DATA class to return two CallParameters representing the one input, one named with the parameter name and with a typeName ""TABLE"" the other with a null name and the type of the Collections object.  Thus appearing that the meta-data code is looking into the collection and creating an extra CallParameter for the unnamed collections column (it is not possible to name the column), returning it with a null name.  The CallMetaDataContext.matchParametersInParameterValuesWithCallParameters makes a call parameter.getName().toLowerCase() agains the CallParameter and throws a NullPointerException.  e.g.  Oracle:  CREATE OR TYPE my_type AS OBJECT ( id NUMBER(19), description VARCHAR2(50) );  CREATE OR REPLACE TYPE my_types AS TABLE OF my_type;  CREATE OR REPLACE FUNCTION my_func(p_types my_types) RETURN my_types IS l_types my_types BEGIN l_types := p_types; RETURN l_types; END;  Java:  SimpleJdbcCall call   = new SimpleJdbcCall(m_template). withFunctionName(""my_func""). withReturnValue();  call.setCatalogName(OrderCallParameterGenerator.CATALOGUE); call.declareParameters(new SqlParameter(""p_types"", OracleTypes.ARRAY)); call.declareParameters(new SqlOutParameter(""return"", OracleTypes.ARRAY, new ParameterizedRowMapper()));  MapSqlParameterSource params = new MapSqlParameterSource(). params.addValue(""p_types"", coll, OracleTypes.ARRAY); Map results = m_create.execute(params);  this causes NullPointer.   ---  **Affects:** 2.5.2","closed","in: core,","spring-projects-issues","2008-02-13T19:48:35Z","2012-06-19T03:47:11Z"
"","9738","12.6.1.4 persistenceXmlLocation should be persistenceXmlLocations [SPR-5063]","**[Simon Olofsson](https://jira.spring.io/secure/ViewProfile.jspa?name=simono)** opened **[SPR-5063](https://jira.spring.io/browse/SPR-5063?redirect=false)** and commented  In the XML listing in 12.6.1.4: \ should be (missing plural s): \   ---  **Affects:** 2.5.5","closed","type: bug,","spring-projects-issues","2008-08-05T21:21:33Z","2012-06-19T03:47:26Z"
"","9078","Documentation 3.3.6: misspelling in dependeny-check mode ""objects"" [SPR-4400]","**[Simon Faust](https://jira.spring.io/secure/ViewProfile.jspa?name=sfaust)** opened **[SPR-4400](https://jira.spring.io/browse/SPR-4400?redirect=false)** and commented  dependeny-check mode ""object"" should be changed to ""objects""   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-01-28T00:20:58Z","2012-06-19T03:47:02Z"
"","9088","DataSourceUtils.releaseConnection silently catches Exceptions, without releasing connections [SPR-4410]","**[Simon Bouchard](https://jira.spring.io/secure/ViewProfile.jspa?name=simonxyz)** opened **[SPR-4410](https://jira.spring.io/browse/SPR-4410?redirect=false)** and commented  The catch statements prevent the user from seing any exception that is thrown by doReleaseConnection.  The side effect is that when using a connection pool and an exception is thrown during the connection release phase, the connections don't get released properly, and no error message can be seen unless a logger is configured to debug level.  Here's the code  public static void releaseConnection(Connection con, DataSource dataSource) { try { doReleaseConnection(con, dataSource); } catch (SQLException ex) { logger.debug(""Could not close JDBC Connection"", ex); } catch (Throwable ex) { logger.debug(""Unexpected exception on closing JDBC Connection"", ex); } }   --- No further details from [SPR-4410](https://jira.spring.io/browse/SPR-4410?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-01-31T06:04:30Z","2012-06-18T12:45:20Z"
"","8945","WebSphereUowTransactionManager: incorrect behaviour with PROPAGATION_MANDATORY and PROPAGATION_NEVER [SPR-4267]","**[Sieger Veenstra](https://jira.spring.io/secure/ViewProfile.jspa?name=siegerv)** opened **[SPR-4267](https://jira.spring.io/browse/SPR-4267?redirect=false)** and commented  When we use the WebSphereUowTransactionManager and PROPAGATION_NEVER we get an IllegalTransactionStateException ""Transaction propagation 'never' but existing transaction found"". Also when using PROPAGATION_MANDATORY we do not get an exception. In both cases we have no running transaction. When we switch to the JtaTransactionManager the problem goes away.  It appears that the check for a running transaction is insufficiant, since there is no differentiation between a global transaction context and local transaction containment (LTC). Since WebSphere always has local transaction containment as a default transaction context (See http://www.ibm.com/developerworks/websphere/library/techarticles/0506_johnsen/0506_johnsen.html) the WebSphereUowTransactionManager always assumes there is a running transaction.  When an extra check is added in WebSphereUowTransactionManager in the method execute that the UOWType is not a UOW_TYPE_LOCAL_TRANSACTION the problem is solved :  public Object execute(TransactionDefinition definition, TransactionCallback callback) throws TransactionException { if (definition == null) { // Use defaults if no transaction definition given. definition = new DefaultTransactionDefinition(); }      if (definition.getTimeout() < TransactionDefinition.TIMEOUT_DEFAULT) {          throw new InvalidTimeoutException(""Invalid transaction timeout"", definition.getTimeout());     }     int pb = definition.getPropagationBehavior();     boolean existingTx = (this.uowManager.getUOWStatus() != UOWSynchronizationRegistry.UOW_STATUS_NONE           && this.uowManager.getUOWType() != UOWSynchronizationRegistry.UOW_TYPE_LOCAL_TRANSACTION);     int uowType = UOWSynchronizationRegistry.UOW_TYPE_GLOBAL_TRANSACTION;     boolean joinTx = false;     boolean newSynch = false;    ---  **Affects:** 2.5 final","closed","type: bug,","spring-projects-issues","2007-12-18T01:05:20Z","2012-06-19T03:47:07Z"
"","8955","Change Interface21 to SpringSource on http://prdownloads.sourceforge.net/springframework/?sort_by=date&sort=desc [SPR-4277]","**[Shifei Luo](https://jira.spring.io/secure/ViewProfile.jspa?name=worldheart)** opened **[SPR-4277](https://jira.spring.io/browse/SPR-4277?redirect=false)** and commented  In http://prdownloads.sourceforge.net/springframework/?sort_by=date&sort=desc, there is ""About Spring Framework"" describtion, Should we modify them? For example, change Interface21 to SpringSource.  At the same time, the following statements used for Spring Framework should be improved.  ""The dominant application framework for Java, Spring solves core enterprise development and runtime problems, offering configuration via Dependency Injection; declarative services via AOP; and packaged enterprise services. Developed by Interface21.""  Thank you very much.   --- No further details from [SPR-4277](https://jira.spring.io/browse/SPR-4277?redirect=false)","closed","","spring-projects-issues","2007-12-21T19:49:24Z","2019-01-11T17:07:56Z"
"","9551","PathMatchingResourcePatternResolver#doFindPathMatchingJarResources ignores JarURLConnection [SPR-4875]","**[Shay Banon](https://jira.spring.io/secure/ViewProfile.jspa?name=kimchy)** opened **[SPR-4875](https://jira.spring.io/browse/SPR-4875?redirect=false)** and commented  In the method doFindPathMatchingJarResources within PathMatchingResourcePatternResolver there is the following check:  if (false && con instanceof JarURLConnection)  This basically means that the code that checks for JarURLConnection and handles it is disabled. Is there a reason for this? In my case, the URLConnection is of JarURLConnection and hence it fails (its not an FS one).   ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-05-30T04:02:43Z","2012-06-19T03:47:07Z"
"","9291","Spring 2.5.2 in maven repo has invalid md5/sha1 [SPR-4614]","**[Shawn Stephens](https://jira.spring.io/secure/ViewProfile.jspa?name=whosyourtator)** opened **[SPR-4614](https://jira.spring.io/browse/SPR-4614?redirect=false)** and commented  Both sha1 and md5 are failing from http://repo1.maven.org/maven2/org/springframework/spring/2.5.2/  [ivy:install] 	[FAILED     ] springframework#spring;2.5.2!spring.original.pom: invalid md5: expected=701de28d9824352a0a0f546e2f29e248 computed=ae4147977c7745645ea78b578cda4945 (585ms) [ivy:install] WARN: problem while downloading module descriptor: http://repo1.maven.org/maven2/org/springframework/spring/2.5.2/spring-2.5.2.pom: invalid md5: expected=701de28d9824352a0a0f546e2f29e248 computed=ae4147977c7745645ea78b578cda4945 (585ms)  and  [ivy:install] 	[FAILED     ] springframework#spring;2.5.2!spring.original.pom: invalid sha1: expected=9918300274cf0a6f77c995bdd1075a5b8707d881 computed=59dbccc4a28d15e7f86651eaea40fdc05f2747f4 (582ms) [ivy:install] WARN: problem while downloading module descriptor: http://repo1.maven.org/maven2/org/springframework/spring/2.5.2/spring-2.5.2.pom: invalid sha1: expected=9918300274cf0a6f77c995bdd1075a5b8707d881 computed=59dbccc4a28d15e7f86651eaea40fdc05f2747f4 (582ms)    ---  **Affects:** 2.5.2","closed","status: declined,","spring-projects-issues","2008-03-23T06:40:29Z","2008-05-14T01:29:29Z"
"","9682","HibernateTemplate.loadAll(clazz) method returns duplicate entries [SPR-5007]","**[Sharif Uddin](https://jira.spring.io/secure/ViewProfile.jspa?name=auni_ku)** opened **[SPR-5007](https://jira.spring.io/browse/SPR-5007?redirect=false)** and commented  HibernateTemplate.loadAll(clazz) returns duplicate entries if the Class 'clazz' contains collection field and database contains entry related to that collection field.  for example, A Customer contains list of Product (one-to-many). In database say there are Products p1,p2 for customer c1 and Product p3 for Customer c2. Now ..loadAll(Customer.class) returns a list contains {c1,c1,c2}.  related class: org.springframework.orm.hibernate3.HibernateTemplate  related method: public List loadAll(final Class entityClass) throws DataAccessException { return (List) executeWithNativeSession(new HibernateCallback() { public Object doInHibernate(Session session) throws HibernateException { Criteria criteria = session.createCriteria(entityClass); prepareCriteria(criteria); return criteria.list(); } }); }  Possible Solution: changing the line      Criteria criteria = session.createCriteria(entityClass);  to Criteria criteria = session.createCriteria(entityClass).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-14T23:26:44Z","2012-06-19T03:46:56Z"
"","9004","CacheSeconds not working properly with jasper reports view [SPR-4325]","**[Shahid Zaman](https://jira.spring.io/secure/ViewProfile.jspa?name=shahid)** opened **[SPR-4325](https://jira.spring.io/browse/SPR-4325?redirect=false)** and commented  From the spring forum post:  ---  General introduction:  ---  For our project, we are using the combination of spring 2.0 and jasper reports 2.0.2 for reporting. We rendered our report via an AbstractController and set the cacheSeconds property to zero (we know that for excel/pdf due to a bug in IE6 we need to set the cacheSeconds to -1, but say for now we are only interested about the HTML report without caching). But the problem is when the user logged out from our application and clicked the back button s/he can see the report from cache, but there should be no cache. (FYI: In other pages of our application we use the cacheSeconds property to prevent caching and it worked fine). Then we investigate bit further by using an application WebScarab to intercept the response and watched that in the report response only ""Pragma"" header is set, where as cacheSeconds instructs to set three headers in default settings - ""Pragma"", ""Cache-Control"" and ""Expires"".  We have manually setup those three headers in the view (JasperReportsMultiFormatView) in controller and it works fine. So where is the problem? why setting cacheSeconds is not sufficient to set those headers? Does Jasper overwrite/reset headers which are already set by spring or is it a spring-jasper integration code problem?  Detailed analysis:  ---  I debugged the spring code to see where the response cache headers got lost after set via the WebContentGenerator. In WebContentGenerator the following method adds the cache prevention headers to response:  Code:  protected final void preventCaching(HttpServletResponse response) { response.setHeader(HEADER_PRAGMA, ""No-cache""); if (this.useExpiresHeader) { // HTTP 1.0 header response.setDateHeader(HEADER_EXPIRES, 1L); } if (this.useCacheControlHeader) { // HTTP 1.1 header: ""no-cache"" is the standard value, // ""no-store"" is necessary to prevent caching on FireFox. response.setHeader(HEADER_CACHE_CONTROL, ""no-cache""); response.addHeader(HEADER_CACHE_CONTROL, ""no-store""); } }  But in the AbstractJasperReportsView the response is reset and the headers are populated again in the following way in renderMergedOutputModel method:  Code:      protected void renderMergedOutputModel(Map model, HttpServletRequest request, HttpServletResponse response)     		throws Exception {          	if (this.subReports != null) {     		// Expose sub-reports as model attributes.     		model.putAll(this.subReports);          		// Transform any collections etc into JRDataSources for sub reports.     		if (this.subReportDataKeys != null) {     			for (int i = 0; i < this.subReportDataKeys.length; i++) {     				String key = this.subReportDataKeys[i];     				model.put(key, convertReportData(model.get(key)));     			}     		}     	}          	// Expose Spring-managed Locale and MessageSource.     	exposeLocalizationContext(model, request);          	// Fill the report.     	JasperPrint filledReport = fillReport(model);     	postProcessReport(filledReport, model);          	// Prepare response and render report.     	response.reset();     	populateHeaders(response);     	renderReport(filledReport, model, response);     }  I don't understand actually why do we need to call the reset method? The reset method call clears all the previous headers in the response (which includes the cache headers set previously in WebContentGenerator). Setting the headers manually in the view cause no problem as after the reset call, in the populateHeaders method headers are added from view's headers property (so the cache headers are set again if you add those to headers property prior).  Code:  private void populateHeaders(HttpServletResponse response) { // Apply the headers to the response. for (Enumeration en = this.headers.propertyNames(); en.hasMoreElements();) { String key = (String) en.nextElement(); response.addHeader(key, this.headers.getProperty(key)); } }  Rob, Juergen - Is this a problem? Is the reset call necessary? If it's necessary then shouldn't we check the cache headers before resetting the response and keep somewhere to add again later?  ---  **Affects:** 2.0.5, 2.5 final  **Attachments:** - [testReport.txt](https://jira.spring.io/secure/attachment/13598/testReport.txt) (_1.28 kB_)  **Issue Links:** - #5645 Fix HTTPS handling for JasperReports in IE","closed","type: enhancement,","spring-projects-issues","2008-01-12T14:56:30Z","2019-01-13T22:40:39Z"
"","9474","PRopertyEditor [SPR-4797]","**[Shadi Al Barhouch](https://jira.spring.io/secure/ViewProfile.jspa?name=shadibch)** opened **[SPR-4797](https://jira.spring.io/browse/SPR-4797?redirect=false)** and commented  Everytime we need a new editor to a field (for example Date) we need to override the method initBeware in the formcontroller and register the editor. In fact we have two problems: The registred edittors doesn't take in care the client regional settings. It is only take the server side only. We need a way to register a custom editor to be resolved in all forums. In addition we need a way to make the already registered property editor to track the client side reginal settings . If it is possible we need to override a method which take the class or classname , the return type is the object and the httprequest as parameter   ---  **Affects:** 2.0 RC3","closed","type: enhancement,","spring-projects-issues","2008-05-11T00:51:11Z","2012-06-19T09:36:23Z"
"","9473","theme and form tags are throwing exception [SPR-4796]","**[Shadi Al Barhouch](https://jira.spring.io/secure/ViewProfile.jspa?name=shadibch)** opened **[SPR-4796](https://jira.spring.io/browse/SPR-4796?redirect=false)** and commented  I have created an abstractwizardform let say MyWizard The spring servlet called example and the xml called example-servlet.xml the ordered pages was : page1,page2,page3 page1 map the Pag1.jsp page2 map the Pag2.jsp page3 map the Pag3.jsp In the Pag1.jsp I have used the  tag as it has descrped in the reference  \ I have used the \ tag name The page vied successfully. I have clicked on the submit button An exception is thrown related to the context of the tag name theme. I have deleted the tag \ andreplaced it my the classic \ everything wrked well The main difference between the generated html page in the first case and the second was the generated session id \   ---  **Affects:** 2.0 RC3","closed","in: web,","spring-projects-issues","2008-05-11T00:43:01Z","2019-01-11T18:01:31Z"
"","9113","ServletRequestAttributes wrongly returns a null http session on child threads. [SPR-4435]","**[Sergio Bossa](https://jira.spring.io/secure/ViewProfile.jspa?name=sbtourist)** opened **[SPR-4435](https://jira.spring.io/browse/SPR-4435?redirect=false)** and commented  The protected ServletRequestAttributes#getSession(boolean ) method returns a null session on child threads. This is wrong because it doesn't get into account what happens in the constructor:  [code] public ServletRequestAttributes(HttpServletRequest request) { Assert.notNull(request, ""Request must not be null""); this.request = request; // Fetch existing session reference early, to have it available even // after request completion (for example, in a custom child thread). this.session = request.getSession(false); } [/code]  I think that the following code into the getSession method:  [code] this.session = this.request.getSession(allowCreate); return this.session; [/code]  Should be as follows:  [code] HttpSession newSession = this.request.getSession(allowCreate); if (newSession != null) { this.session = newSession; } return this.session; [/code]  ---  **Affects:** 2.0.7, 2.0.8  **Issue Links:** - #9112 ServletRequestAttributes wrongly returns a null http session on child threads. (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2008-02-07T00:46:43Z","2019-01-12T16:51:02Z"
"","9112","ServletRequestAttributes wrongly returns a null http session on child threads. [SPR-4434]","**[Sergio Bossa](https://jira.spring.io/secure/ViewProfile.jspa?name=sbtourist)** opened **[SPR-4434](https://jira.spring.io/browse/SPR-4434?redirect=false)** and commented  The protected ServletRequestAttributes#getSession(boolean ) method returns a null session on child threads. This is wrong because it doesn't get into account what happens in the constructor:  [code] public ServletRequestAttributes(HttpServletRequest request) { Assert.notNull(request, ""Request must not be null""); this.request = request; // Fetch existing session reference early, to have it available even // after request completion (for example, in a custom child thread). this.session = request.getSession(false); } [/code]  I think that the following code into the getSession method:  [code] this.session = this.request.getSession(allowCreate); return this.session; [/code]  Should be as follows:  [code] HttpSession newSession = this.request.getSession(allowCreate); if (newSession != null) { this.session = newSession; } return this.session; [/code]  ---  **Affects:** 2.0.7, 2.0.8, 2.5.1  **Issue Links:** - #9111 ServletRequestAttributes wrongly returns a null http session on child threads. (_**""is duplicated by""**_) - #9113 ServletRequestAttributes wrongly returns a null http session on child threads. (_**""is duplicated by""**_)  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-02-07T00:42:18Z","2019-01-11T17:34:18Z"
"","9111","ServletRequestAttributes wrongly returns a null http session on child threads. [SPR-4433]","**[Sergio Bossa](https://jira.spring.io/secure/ViewProfile.jspa?name=sbtourist)** opened **[SPR-4433](https://jira.spring.io/browse/SPR-4433?redirect=false)** and commented  The protected ServletRequestAttributes#getSession(boolean ) method returns a null session on child threads. This is wrong because it doesn't get into account what happens in the constructor:  [code] public ServletRequestAttributes(HttpServletRequest request) { Assert.notNull(request, ""Request must not be null""); this.request = request; // Fetch existing session reference early, to have it available even // after request completion (for example, in a custom child thread). this.session = request.getSession(false); } [/code]  I think that the following code into the getSession method:  [code] this.session = this.request.getSession(allowCreate); return this.session; [/code]  Should be as follows:  [code] HttpSession newSession = this.request.getSession(allowCreate); if (newSession != null) { this.session = newSession; } return this.session; [/code]  ---  **Affects:** 2.0.8  **Issue Links:** - #9112 ServletRequestAttributes wrongly returns a null http session on child threads. (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2008-02-07T00:35:55Z","2019-01-12T16:51:04Z"
"","9802","InternalResourceViewResolver uses hardcoded PreventDispatchLoop=true, that leads to errors in portal environment [SPR-5129]","**[Sergey Ponomarev](https://jira.spring.io/secure/ViewProfile.jspa?name=sponomarev)** opened **[SPR-5129](https://jira.spring.io/browse/SPR-5129?redirect=false)** and commented  Problem: I get the following error while opening portal page with 2 instances of the same portlet 2008-08-29 15:14:24,664 ERROR [org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/portlet_aggregator].[ViewRendererServlet]] -  javax.servlet.ServletException: Circular view path [/WEB-INF/jsp/view.jsp]: already dispatched to this view path within the same request [/portlet_aggregator/WEB-INF/servlet/view ]. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.) at org.springframework.web.servlet.view.InternalResourceView.prepareForRendering(InternalResourceView.java:280) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:216) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:252) at org.springframework.web.servlet.ViewRendererServlet.renderView(ViewRendererServlet.java:111) at org.springframework.web.servlet.ViewRendererServlet.processRequest(ViewRendererServlet.java:84) at org.springframework.web.servlet.ViewRendererServlet.doGet(ViewRendererServlet.java:65) at javax.servlet.http.HttpServlet.service(HttpServlet.java:690) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)  Explanation: InternalResourceViewResolver uses hardcoded PreventDispatchLoop=true. If I change this to false, no errors occur and portlets work as expected. In portal environment multiple portlets may be served by the same HttpServletRequest. Not sure that it is not portal problem, but InternalResourceViewResolver could have property to set up PreventDispatchLoop behaviour.  Solution: add property InternalResourceViewResolver.preventDispatchLoop with public setter and default value ""true""   ---  **Affects:** 2.5.5","closed","type: bug,","spring-projects-issues","2008-08-30T02:21:40Z","2012-06-19T03:47:38Z"
"","9522","PropertyPlaceholderConfigurer doesn't replace placeholders in map element bean reference [SPR-4846]","**[Sergey Ponomarev](https://jira.spring.io/secure/ViewProfile.jspa?name=sponomarev)** opened **[SPR-4846](https://jira.spring.io/browse/SPR-4846?redirect=false)** and commented  \ \\ \","closed","type: bug,","spring-projects-issues","2008-05-22T02:08:41Z","2012-06-19T03:46:43Z"
"","8927","@Transactional annotation doesn't work for scanned component [SPR-4249]","**[Sean](https://jira.spring.io/secure/ViewProfile.jspa?name=sunlxy)** opened **[SPR-4249](https://jira.spring.io/browse/SPR-4249?redirect=false)** and commented  Please see the following example:  `@Service` `@Transactional` public class AccountService {      @Autowired     private AccountDao accountDao;          public void updateLoginInfo(Account account) {         accountDao.updateLoginInfo(account);         someOtherStatementsMightThrowException();     }  }  And everything supports the annotation is configurated:      We use `@Service` annotation on service bean, that is, it could be autowired to any bean depends on it.  But the `@Transactional` annotation doesn't work, until I remove `@Service` annotation and explicit define the bean in context configuration xml:  \ I'm wondering if there is any step I missed, or it supposes to work like that? Thanks.   ---  **Affects:** 2.5 final","closed","status: declined,","spring-projects-issues","2007-12-12T11:54:48Z","2019-01-12T16:39:27Z"
"","9629","Add property to MBeanExporter to control eager initiailization of FactoryBeans [SPR-4954]","**[Scott Resnik](https://jira.spring.io/secure/ViewProfile.jspa?name=scott.resnik)** opened **[SPR-4954](https://jira.spring.io/browse/SPR-4954?redirect=false)** and commented  In spring 2.0, I was able to have the products of BeanFactory beans exported in JMX via the MBeanExporter.  In spring 2.5, this is no longer the case.  It appears that only the actual BeanFactory beans are exported (Noted with the ""&"" in the name).  It appears this was done to avoid having the MBeanExporter eagerly init any BeanFactory beans.  It would be nice if in the autodetect method of the MBeanExporter the parameters to (line ~875 of MBeanExporter)""beanFactory.getNamesForType"" call could be injected.  Then the user would have control over whether or not the MBeanExporter causes eager initialization or not.  ---  **Affects:** 2.5.5  **Issue Links:** - #9246 Lazy not honored when using MBeanExporter's autodetection (since 2.5)","closed","type: enhancement,","spring-projects-issues","2008-06-25T10:29:25Z","2019-01-11T18:34:20Z"
"","9779","Make script source locator mechanism pluggable [SPR-5106]","**[Scott Leberknight](https://jira.spring.io/secure/ViewProfile.jspa?name=scottleber)** opened **[SPR-5106](https://jira.spring.io/browse/SPR-5106?redirect=false)** and commented  Currently ScriptFactoryPostProcessor's convertToScriptSource method allows only inline or Resource-based scripts. Suggest that ScriptFactoryPostProcessor should allow the script locator  mechanism to be pluggable and allow scripts to be loaded from anywhere.  Something along the lines of extracting the convertToScriptSource() method in ScriptFactoryPostProcessor into a pluggable strategy, with perhaps a default if you don't want to do  anything more than inline or Resource-based scripts. So maybe there would be a ScriptLocator interface which you could plug into the ScriptFactoryPostProcessor rather than needing to subclass SFPP and override the protected convertToScriptSource method, which I did to allow scripts to be loaded from a database.   ---  **Affects:** 2.5.5  7 votes, 8 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-20T01:34:44Z","2015-09-22T17:34:39Z"
"","9550","Improve Error Message when a PropertyEditor doesn't return the correct type [SPR-4874]","**[Scott Battaglia](https://jira.spring.io/secure/ViewProfile.jspa?name=sbattaglia)** opened **[SPR-4874](https://jira.spring.io/browse/SPR-4874?redirect=false)** and commented  This is a minor point, but I had a bug in my PropertyEditor due to some code refactoring such that the PropertyEditor was named correctly but was returning the wrong type.  At the IOC level when it went to resolve the ProxyList class, it found the ProxyListEditor correctly but then it failed with the error message found here:  http://forum.springframework.org/showthread.php?t=55001  Turns out that I made a mistake (yes, rather dumb of me) but the error message didn't lead me to my problem.  It kept telling me I couldn't find the property editor when it really could, it just didn't get the value it wanted.   ---  **Affects:** 2.0.8, 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-29T02:42:36Z","2012-06-19T03:46:51Z"
"","9855","Javadoc formatting issue for PropertyPlaceholderConfigurer [SPR-5182]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-5182](https://jira.spring.io/browse/SPR-5182?redirect=false)** and commented  The Javadocs for PropertyPlaceholderConfigurer#setNullValue(String) has a formatting issue.  The \ tag arround null is not closed.  The effect can be seen here: http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.html   ---  **Affects:** 2.5.5  **Attachments:** - [PropertyPlaceholderConfigurer.java.diff](https://jira.spring.io/secure/attachment/14717/PropertyPlaceholderConfigurer.java.diff) (_453 bytes_)","closed","in: core,","spring-projects-issues","2008-09-26T07:17:55Z","2012-06-19T03:47:37Z"
"","9256","DomUtils getChildElementsByTagNames should support multiple element names [SPR-4579]","**[Scott Andrews](https://jira.spring.io/secure/ViewProfile.jspa?name=sandrews)** opened **[SPR-4579](https://jira.spring.io/browse/SPR-4579?redirect=false)** and commented  Sometimes it is necessary to obtain an ordered list of child elements for multiple element names.  This can easily be accomplished by allowing the DomUtils.getChildElementsByTagNames to accept a Collection of child element names.   ---  **Affects:** 2.5.2  **Attachments:** - [DomUtils.diff](https://jira.spring.io/secure/attachment/13777/DomUtils.diff) (_1.85 kB_) - [DomUtils.diff](https://jira.spring.io/secure/attachment/13776/DomUtils.diff) (_1.85 kB_)","closed","type: enhancement,","spring-projects-issues","2008-03-13T08:25:08Z","2012-06-19T03:47:09Z"
"","9426","CachedMessageProducer is not using target producer objects properties by default(like delivery mode etc..) [SPR-4749]","**[Satya Ranga](https://jira.spring.io/secure/ViewProfile.jspa?name=crush_spin)** opened **[SPR-4749](https://jira.spring.io/browse/SPR-4749?redirect=false)** and commented  The new CachingConnectionFactory (please refer http://jira.springframework.org/browse/SPR-3892) created for caching the JMS Sessions and Producers is failing while publishing the messages to MQ with the following exception.  Caused by: javax.jms.JMSException: MQJMS1006: invalid value for deliveryMode: 0 at com.ibm.mq.jms.services.ConfigEnvironment.newException(ConfigEnvironment.java:606) at com.ibm.mq.jms.MQMessageProducer.sendInternal(MQMessageProducer.java:1572) at com.ibm.mq.jms.MQMessageProducer.send(MQMessageProducer.java:1056) at org.springframework.jms.connection.CachedMessageProducer.send(CachedMessageProducer.java:118) at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:584) at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:561) at org.springframework.jms.core.JmsTemplate$4.doInJms(JmsTemplate.java:538) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:459)  The reason being that an invalid value '0' is being used by the cachedMessageProducer object where as the valid values are either 1 (DeliveryMode.NON_PERSISTENT) or 2 (DeliveryMode.NON_PERSISTENT).  The InvocationHandler implementation in the CachingConnectionFactory returns a CachedMessageProducer object with the actual producer object as the target.  Code snippet from CachingConnectionFactory.. ..... ..... return new CachedMessageProducer(producer); ..... ..... When the above constructor is called the target producer object's properties are not being copied to the CachedMessageProducer object.  And when the doSend method is executed in JMSTemplate      protected void doSend(MessageProducer producer, Message message) throws JMSException {     	if (isExplicitQosEnabled()) {     		producer.send(message, getDeliveryMode(), getPriority(), getTimeToLive());     	}     	else {     		producer.send(message);     	}     }  from the else path.. the send method is executed on the CachedMessageProducer object.      public void send(Message message) throws JMSException {     	this.target.send(message, this.deliveryMode, this.priority, this.timeToLive);     }  which uses the objects deliveryMode, priorty and timeToLive properties. However these properties are never set (as the constructor just assigns the producer object to the target)  Shouldn't the CachedMessageProducer be using the target producer object properties by default when they are not set explicitly?   ---  **Affects:** 2.5.3","closed","type: bug,","spring-projects-issues","2008-04-24T01:49:54Z","2012-06-19T03:47:23Z"
"","9717","SimpleMappingExceptionResolver or DispatcherServlet connot handle ""redirect:/someUrl.html"" anymore [SPR-5042]","**[Sandro Ruch](https://jira.spring.io/secure/ViewProfile.jspa?name=sruch)** opened **[SPR-5042](https://jira.spring.io/browse/SPR-5042?redirect=false)** and commented  After a migration from Spring 2.0.x to Spring 2.5.5 the behavior of the exception mapping changed. We have overwritten the resolveException method but we call it at as a first statement. In case the result of this method is a ModelAndView with a redirect directive within the name the call to the new view dos not work anymore (Statcktrace is displayed instead). This has worked fine in 2.0.x but not in 2.5.5... Views with name ""formward:/someUrl.html"" works fine... I was no sure whether this affects the DispatcherServlet or a renderer or the ExceptionResolver...  ---  **Affects:** 2.5.5  **Attachments:** - [SPR-5042.zip](https://jira.spring.io/secure/attachment/14482/SPR-5042.zip) (_44.17 kB_) - [WlcMappingExceptionResolver.java](https://jira.spring.io/secure/attachment/14478/WlcMappingExceptionResolver.java) (_10.01 kB_)  **Issue Links:** - #9648 2.5.5 DispatchServlet exposes jsp error page attributes to container and breaks ExceptionResolver","closed","type: bug,","spring-projects-issues","2008-07-28T04:10:46Z","2019-01-11T14:39:37Z"
"","9621","NPE when using wildcard in MBeanExporter's notificationListenerMappings [SPR-4946]","**[Sander Nieuwenhuizen](https://jira.spring.io/secure/ViewProfile.jspa?name=munkius)** opened **[SPR-4946](https://jira.spring.io/browse/SPR-4946?redirect=false)** and commented  When using a wildcard in the notificationListenerMappings like in the example in the Spring Reference 2.5 documentation page 453 you get a NPE. This means that I have to name all beans explicitly.  My configuration:           	     	     	     		     			     				     			     		     	                                   	                         	       The stacktrace:  Error creating bean with name 'exporter' defined in file [...\config\applicationContextJmx.xml]: Invocation of init method failed; nested exception is org.springframework.jmx.export.UnableToRegisterMBeanException: Unable to register MBean [com.example.SomeServiceImpl@ffab0a] with key 'someService'; nested exception is java.lang.NullPointerException: java.lang.NullPointerException at org.springframework.jmx.export.MBeanExporter.replaceNotificationListenerBeanNameMappingKeysIfNecessary(MBeanExporter.java:624) at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:595) at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:511) at org.springframework.jmx.export.MBeanExporter.afterPropertiesSet(MBeanExporter.java:402) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1288) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1257) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:438) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:400) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:736) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:261) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45)   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-06-23T22:12:10Z","2012-06-19T03:47:04Z"
"","9687","HibernateJpaDialect does not support setting a specific isolation level per transaction [SPR-5012]","**[Samuel Gaiffe](https://jira.spring.io/secure/ViewProfile.jspa?name=sam42fr)** opened **[SPR-5012](https://jira.spring.io/browse/SPR-5012?redirect=false)** and commented  Hi,  our problem is in unit testing. When we deploy under Weblogic and use the Weblogic transaction manager, everything is ok. But for unit testing, we use a LocalContainerEntityManagerFactoryBean with a HibernateJpaVendorAdapter injected into a JpaTransactionManager.  When isolation level other than DEFAULT is required for a transaction (setted through annotations), an InvalidIsolationLevelException is thrown.  I have solved this problem by writing a CustomHibernateJpaDialect in which I just delete the throw exception  :  \ public class CustomHibernateJpaDialect extends HibernateJpaDialect { public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) throws PersistenceException, SQLException, TransactionException { entityManager.getTransaction().begin(); return null; }  public void cleanupTransaction(Object transactionData) { // This line throws a NullPointerException. Got no time to go deeper but we never change the flush mode so I let it commented //((SessionTransactionData) transactionData).resetFlushMode(); } } \  and a CustomHibernateJpaVendorAdapter in which I use my new CustomHibernateJpaDialect :  \ public class CustomHibernateJpaVendorAdapter extends AbstractJpaVendorAdapter { private final PersistenceProvider persistenceProvider = new HibernatePersistence();  private final JpaDialect jpaDialect = new CustomHibernateJpaDialect();  public PersistenceProvider getPersistenceProvider() { return this.persistenceProvider; }  public Map getJpaPropertyMap() { Properties jpaProperties = new Properties();      if (getDatabasePlatform() != null) {       jpaProperties.setProperty(Environment.DIALECT, getDatabasePlatform());     }     else if (getDatabase() != null) {       Class databaseDialectClass = determineDatabaseDialectClass(getDatabase());       if (databaseDialectClass != null) {         jpaProperties.setProperty(Environment.DIALECT, databaseDialectClass.getName());       }     }          if (isGenerateDdl()) {       jpaProperties.setProperty(Environment.HBM2DDL_AUTO, ""update"");     }     if (isShowSql()) {       jpaProperties.setProperty(Environment.SHOW_SQL, ""true"");     }          return jpaProperties;  }  /** * Determine the Hibernate database dialect class for the given target database. * `@param` database the target database * `@return` the Hibernate database dialect class, or \null\ if none found   */   protected Class determineDatabaseDialectClass(Database database) {   switch (database) {   case DB2: return DB2Dialect.class;   case HSQL: return HSQLDialect.class;   case INFORMIX: return InformixDialect.class;   case MYSQL: return MySQLDialect.class;   case ORACLE: return Oracle9Dialect.class;   case POSTGRESQL: return PostgreSQLDialect.class;   case SQL_SERVER: return SQLServerDialect.class;   case SYBASE: return SybaseDialect.class;   default: return null;   }   }  public Class","closed","type: enhancement,","spring-projects-issues","2008-07-15T22:53:56Z","2019-01-11T14:36:07Z"
"","9239","Behavior of default-autowire=""byName"" does not match expected behavior [SPR-4562]","**[Sami Dalouche](https://jira.spring.io/secure/ViewProfile.jspa?name=samokk)** opened **[SPR-4562](https://jira.spring.io/browse/SPR-4562?redirect=false)** and commented  Let's consider the following bean definitions, defined with default-autowire=""byName"" :  \ \ \ \ \ => We would expect service to get dataSource2, but in practice, it looks like  default-autowire=""byName""  overrides the dataSource property with 'dataSource'.   ---  **Affects:** 2.5.1  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-03-10T01:05:02Z","2012-06-18T12:44:29Z"
"","9074","LocalEntityManagerFactoryBean does not work with old versions of xercesImpl [SPR-4395]","**[Sami Dalouche](https://jira.spring.io/secure/ViewProfile.jspa?name=samokk)** opened **[SPR-4395](https://jira.spring.io/browse/SPR-4395?redirect=false)** and commented  See : http://forum.springframework.org/showthread.php?t=40836  I think Spring ORM maven POMs should either depend on a recent version of xercesImpl, or should provide a warning message to the user so that debugging is easier.   ---  **Affects:** 2.5.1","closed","in: core,","spring-projects-issues","2008-01-26T00:20:13Z","2019-01-12T16:39:17Z"
"","9668","PetClinic should not attempt to enable LTW by default [SPR-4992]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-4992](https://jira.spring.io/browse/SPR-4992?redirect=false)** and commented  META-INF/context.xml by default attempts to configure TomcatInstrumentableClassLoader; however, for the default JDBC deployment, instrumentation is unnecessary. Thus, the following line should be commented out by default:  \   ---  **Affects:** 2.5.5  **Issue Links:** - [SEC-911](https://jira.spring.io/browse/SEC-911) Make petclinic tutorial Spring 2.5.5 compatible","closed","type: task,","spring-projects-issues","2008-07-07T23:43:52Z","2012-06-19T03:47:20Z"
"","9538","Introduce strategy for determining if a profile value is enabled for a particular test environment [SPR-4862]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-4862](https://jira.spring.io/browse/SPR-4862?redirect=false)** and commented  ProfileValueSourceConfiguration allows one to configure an implementation for the ProfileValueSource strategy; however, AbstractJUnit38SpringContextTests and SpringJUnit4ClassRunner are currently hard coded to use ProfileValueUtils.isTestEnabledInThisEnvironment() which only matches on an exact _value_.  It would be beneficial to be able to configure different strategies for determining if a profile value is enabled for the current environment. The above classes could then delegate to the configured strategy. For backwards compatibility, the default strategy should simply delegate to ProfileValueUtils.isTestEnabledInThisEnvironment(); whereas, additional, pluggable strategies (e.g., one using regular expressions) could be provided for greater flexibility.  Further input from #10572:  It is a typical situation when one might have to run a combination of tests belonging to different test-groups. For example, a test method A is part of the 'smoke' test group, and test method B belongs to 'integration' test group. If you want to execute test methods A and B, you have to run two separate JUnit runs: one for 'smoke' and a separate one for 'integration'.  It would be great to have a way to combine tests from more than one test group in a single test run, for example:  ``` % ant -Dtest-groups=smoke,integration run-tests  ```  A strategy which considers the _value_ to be a comma-separated list could provide such support with OR semantics.  ---  **Affects:** 2.5.4, 2.5.5, 2.5.6  **Reference URL:** http://forum.springframework.org/showthread.php?p=182516  **Issue Links:** - #12615 TestContext framework should support declarative configuration of bean definition profiles - #13622 Allow overriding `@ActiveProfiles` in test classes with system property - #16300 Introduce annotation to skip test based on active Spring profile - #8334 Create annotation to group tests - #10572 Allow multiple values be specified in the runtime for tests filtering by `@IfProfileValue` - #10572 Allow multiple values be specified in the runtime for tests filtering by `@IfProfileValue` (_**""supersedes""**_)  5 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-26T02:05:51Z","2019-02-24T17:23:18Z"
"","8984","MultiActionController should support String return types for handler methods [SPR-4305]","**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-4305](https://jira.spring.io/browse/SPR-4305?redirect=false)** and commented  Even though the JavaDoc for MultiActionController states that handler methods can return a String denoting the logical view name, this functionality is not yet implemented in the code.  For example, isHandlerMethod(Method) currently only supports ModelAndView, Map, and void return types.  Note that massageReturnValueIfNecessary(Object) already properly supports Strings.   ---  **Affects:** 2.5 final","closed","type: bug,","spring-projects-issues","2008-01-06T00:17:26Z","2012-06-19T03:47:02Z"
"","9107","Cannot download Spring framework 2.5 release. [SPR-4429]","**[Saikat Ganuly](https://jira.spring.io/secure/ViewProfile.jspa?name=saikatganguly)** opened **[SPR-4429](https://jira.spring.io/browse/SPR-4429?redirect=false)** and commented  While clicking the download link for the Spring 2.5 relase, the browser hangs completely.   --- No further details from [SPR-4429](https://jira.spring.io/browse/SPR-4429?redirect=false)","closed","","spring-projects-issues","2008-02-06T14:02:33Z","2019-01-11T17:30:44Z"
"","9626","JndiTemplate - Map support [SPR-4951]","**[Sabato Marco](https://jira.spring.io/secure/ViewProfile.jspa?name=semasaba)** opened **[SPR-4951](https://jira.spring.io/browse/SPR-4951?redirect=false)** and commented  Actually it's not possible to set objects for JndiTemplate.  These are the environment properties I have to set: Hashtable env = new Hashtable(); env.put(Context.PROVIDER_URL,""iiop://localhost:2810""); env.put(Context.INITIAL_CONTEXT_FACTORY,""com.ibm.websphere.naming.WsnInitialContextFactory""); org.omg.CORBA.ORB b = org.omg.CORBA.ORB.init();  In Spring it should be the following:                        	       			       			       			   			           				       			       			     		                It seems that's its not possible to provide a map(and therefore no objects) for JndiTemplate. I get following exception: Caused by: java.lang.NullPointerException at java.util.Hashtable.put(Hashtable.java:396) at org.springframework.util.CollectionUtils.mergeProp ertiesIntoMap(CollectionUtils.java:100) at org.springframework.jndi.JndiTemplate.createInitia lContext(JndiTemplate.java:112) at org.springframework.jndi.JndiTemplate.execute(Jndi Template.java:86) at org.springframework.jndi.JndiTemplate.lookup(JndiT emplate.java:130) at org.springframework.jndi.JndiTemplate.lookup(JndiT emplate.java:155) at org.springframework.jndi.JndiLocatorSupport.lookup (JndiLocatorSupport.java:95) at org.springframework.jndi.JndiObjectLocator.lookup( JndiObjectLocator.java:105) at org.springframework.jndi.JndiObjectFactoryBean.loo kupWithFallback(JndiObjectFactoryBean.java:193) at org.springframework.jndi.JndiObjectFactoryBean.aft erPropertiesSet(JndiObjectFactoryBean.java:179) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.invokeInitMethods(Abstr actAutowireCapableBeanFactory.java:1367) at org.springframework.beans.factory.support.Abstract AutowireCapableBeanFactory.initializeBean(Abstract AutowireCapableBeanFactory.java:1333) ... 37 more  The exception occurs in CollectionUtils.mergePropertiesIntoMap:  public static void mergePropertiesIntoMap(Properties props, Map map) { if (map == null) { throw new IllegalArgumentException(""Map must not be null""); } if (props != null) { for (Enumeration en = props.propertyNames(); en.hasMoreElements();) { String key = (String) en.nextElement(); map.put(key, props.getProperty(key)); } } }  It seems that Spring trys to convert the properties from JndiTemplate into a map even if it's already a map. The method props.getProperty(key)) expect a string and NOT a object(org.omg.CORBA.ORB). That's exactly the problem.   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-06-24T20:51:46Z","2012-06-19T09:36:12Z"
"","8957","Add Request Parameters to XSLT Views [SPR-4279]","**[Ryan Shelley](https://jira.spring.io/secure/ViewProfile.jspa?name=rshelley)** opened **[SPR-4279](https://jira.spring.io/browse/SPR-4279?redirect=false)** and commented  It might be beneficial to apply XSLT global parameters to XSLT Views for request parameters.  JSP and other view technologies include this functionality by default.  Unless the parameters are returned in the XSLT Source, there is no way to access their values to display on the page or evaluate in logical operations.    An example might be a paging-type application such as a catalog.  A querystring might contain the page number the user is currently on, such as ""...?page=1"".  If you could access the querystring such as , you could display or evaluate it.  This fix is not critical, however, as this can be worked around by the developer placing the request object in the ModelAndView map and creating a custom XSLT View extended from AbstractXSLTView and building a node structure for the request parameters and adding it to the Source object.  This would simply be an added convenience to match the functionality of JSP and other view technologies without extra coding.  Two concerns about adding this functionality might include the overhead of placing these parameters in the view, and the second might be caching the view.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2007-12-23T12:18:52Z","2012-06-19T09:36:29Z"
"","9730","Locale propagation on HTTP remote call [SPR-5055]","**[Ruud Senden](https://jira.spring.io/secure/ViewProfile.jspa?name=rsenden)** opened **[SPR-5055](https://jira.spring.io/browse/SPR-5055?redirect=false)** and commented  We have a requirement to propagate the current locale on an HTTP remote method call. We have currently implemented this by subclassing and overriding the CommonsHttpInvokerRequestExecutor createPostMethod() method to set the Accept-Language header, something like the following code (simplified, no null/empty checks):  postMethod.addRequestHeader(""Accept-Language"",LocaleContextHolder.getLocale().getLanguage()+""-""+LocaleContextHolder.getLocale().getCountry());  It would be nice however if Spring would support this functionality out of the box (and for all RequestExecutors).  I also noticed that in the HTTP response, the Content-Language header doesn't match the current locale (e.g. it still shows the platform default locale, not the locale that was set using the Accept-Language header). I guess this header isn't used so it doesn't really matter, but it could be worth to fix this.   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-08-03T21:02:39Z","2012-06-19T03:47:19Z"
"","9713","can't @autowire collections [SPR-5038]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-5038](https://jira.spring.io/browse/SPR-5038?redirect=false)** and commented  http://forum.springframework.org/showthread.php?t=57855  ---  **Affects:** 2.5.5  **Issue Links:** - #13164 Support injection of collection-typed beans using `@Autowired`+`@Qualifier` or `@Inject`+`@Named`  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-07-25T03:38:56Z","2019-01-13T08:03:11Z"
"","9707","random NPEs in InitDestroyAnnotationBeanPostProcessor.buildLifecycleMetadata [SPR-5032]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-5032](https://jira.spring.io/browse/SPR-5032?redirect=false)** and commented  WARNING: Exception processing manager org.apache.catalina.session.StandardManager@1bc887b background process  java.lang.NullPointerException      at org.apache.commons.logging.impl.SLF4JLocationAwareLog.isDebugEnabled(SLF4JLocationAwareLog.java:59)          at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.buildLifecycleMetadata(InitDestroyAnnotationBeanPostProcessor.java:201)          at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.findLifecycleMetadata(InitDestroyAnnotationBeanPostProcessor.java:182)          at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:160)          at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:140)          at org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:134)          at org.springframework.web.context.request.ServletRequestAttributes$DestructionCallbackBindingListener.valueUnbound(ServletRequestAttributes.java:269)          at org.apache.catalina.session.StandardSession.removeAttributeInternal(StandardSession.java:1649)          at org.apache.catalina.session.StandardSession.expire(StandardSession.java:756)          at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:592)          at org.apache.catalina.session.ManagerBase.processExpires(ManagerBase.java:682)          at org.apache.catalina.session.ManagerBase.backgroundProcess(ManagerBase.java:667)          at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1316)          at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1601)          at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610)          at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610)          at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1590)          at java.lang.Thread.run(Unknown Source)    ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-07-23T13:02:01Z","2019-01-11T14:34:00Z"
"","9254","logging annotation [SPR-4577]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-4577](https://jira.spring.io/browse/SPR-4577?redirect=false)** and commented  Would it be possible to have an annotation for loggers; e.g.,  import org.slf4j.Logger;  public class MyClass { `@Logger` Logger log;  And Spring would do the call LoggerFactory.getLogger(getClass()); and set the log field.  It would look at the type of the variable and call the correct factory so that it would work with Commons Logging, Log4j, JDK logging, and SLF4j.    ---  **Affects:** 2.5.2  1 votes, 3 watchers","closed","status: bulk-closed,","spring-projects-issues","2008-03-13T04:58:21Z","2019-01-12T02:38:36Z"
"","9194","annotations for http request parameter names [SPR-4517]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-4517](https://jira.spring.io/browse/SPR-4517?redirect=false)** and commented  I deal with remote servers sending POST requests to my web apps.  Their POST parameters have names like MerchantID, OrderID, and so on.  Because of these names I can't use a bean with setters to set the fields since the parameter names start with an uppercase letter.  What I was thinking would help if I could add an annotation to the command bean's fields:  `@RequestName`(""MerchantID"") private String merchantId;   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-02-28T04:28:44Z","2012-06-19T09:36:33Z"
"","9087","annotated controller bug? [SPR-4409]","**[Rusty Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=lumpynose)** opened **[SPR-4409](https://jira.spring.io/browse/SPR-4409?redirect=false)** and commented  Given the following controller, followed by a trivial web form to exercise it, I was expecting that my log file would contain ""key: requestID, value: 123"" but instead it contains ""empty parameter map"".  What gives?  package edu.berkeley.ist.hop.web.controller;  import java.io.InputStream; import java.util.Locale; import java.util.Map;  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession;  import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Controller; import org.springframework.ui.ModelMap; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.support.SessionStatus; import org.springframework.web.context.request.WebRequest;  `@Controller` `@RequestMapping`(""/page3"") public final class Page3Controller { private final transient Logger log = LoggerFactory.getLogger(getClass());      private final static String viewName = ""page3"";          @SuppressWarnings(""unchecked"")     @RequestMapping(method = RequestMethod.POST)     public String processSubmit(final SessionStatus status,             final WebRequest webRequest, final ModelMap model,             final HttpServletRequest request,             final HttpServletResponse response, final HttpSession session,             final Locale locale, final InputStream inputStream) {         log.debug(""status: {}"", status);              log.debug(""webRequest: {}"", webRequest);              log.debug(""modelMap: {}"", model);              log.debug(""request: {}"", request);              log.debug(""response: {}"", response);              log.debug(""session: {}"", session);              log.debug(""locale: {}"", locale);              log.debug(""inputStream: {}"", inputStream);              final Map parameterMap = request.getParameterMap();              if (parameterMap.isEmpty())             log.debug(""empty parameterMap"");              for (final Map.Entry entry : parameterMap.entrySet()) {             final String[] val = entry.getValue();             log.debug(""key: {}, value: {}"", entry.getKey(), val[0]);         }              status.setComplete();              return (viewName);     }          @RequestMapping(method = RequestMethod.GET)     public void getStub() {         log.debug(""called"");     }  }  \ \ \ \ \ \ \ \ \ \   ---  **Affects:** 2.5.1","closed","status: declined,","spring-projects-issues","2008-01-31T05:22:13Z","2019-01-12T16:39:16Z"
"","9220","Bean creation does not propagate the current calling AccessControlContext [SPR-4543]","**[Rostislav Georgiev Georgiev](https://jira.spring.io/secure/ViewProfile.jspa?name=rgeorgiev)** opened **[SPR-4543](https://jira.spring.io/browse/SPR-4543?redirect=false)** and commented      When invoking getBean(...) from within a PrivilegedAction and the bean is not yet initialized (scope=""prototype"") it gets created inside PrivilegedAction  in the AbstractAutowireCapableBeanFactory. But without propagating the outer(calling) AccessControlContext. So if your bean creation(initialization) relays on the calling context, it will fail.     The issue was introduced after the fix of http://jira.springframework.org/browse/SPR-4017   I can also provide a simple test case, if  it's needed.   ---  **Affects:** 2.5.2  **Attachments:** - [test_patch.txt](https://jira.spring.io/secure/attachment/13766/test_patch.txt) (_4.16 kB_)","closed","in: core,","spring-projects-issues","2008-03-05T02:56:58Z","2012-06-19T03:47:15Z"
"","9219","BurlapServiceExporter logs a HttpRequestMethodNotSupportedException when a Burlap proxy is being created [SPR-4542]","**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-4542](https://jira.spring.io/browse/SPR-4542?redirect=false)** and commented  This stack trace shows in the server log file when a Burlap request is made through Spring Remoting (client-side proxy and server-side exporter):  org.springframework.web.HttpRequestMethodNotSupportedException: BurlapServiceExporter only supports POST requests at org.springframework.remoting.caucho.BurlapServiceExporter.handleRequest(BurlapServiceExporter.java:104) ...  With Eclipse's TCP/IP Monitor I confirmed there is an HTTP GET occurring when a Burlap proxy is first created (context creation time). Each subsequent call through the created proxy result in an HTTP POST, which is what the exporter always expects.  The initial GET request looks like this and has no other data:  GET /remoting-1-solution/rewards/burlap/rewardNetwork HTTP/1.1 Connection: close User-Agent: Java/1.5.0_11 Host: localhost:8080 Accept: text/html, image/gif, image/jpeg, *; q=.2, \*/\*; q=.2    ---  **Affects:** 2.5.1, 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-05T02:39:50Z","2012-06-19T03:47:14Z"
"","9034","Refreshable beans are not updated if AbstractApplicationContext.getBeansOfType() is called [SPR-4356]","**[Roman Urosov](https://jira.spring.io/secure/ViewProfile.jspa?name=romikk)** opened **[SPR-4356](https://jira.spring.io/browse/SPR-4356?redirect=false)** and commented  When AbstractApplicationContext.getBeansOfType() is called, all instances of ResourceScriptSource updates their lastModified property (if script file is updated), but bean itself remains unrefreshed. Therefore, when user calls refreshable bean, the corresponding check (requiresRefresh()) returns false and user gets an old instance of bean.  Here are some stack traces:  First, calling AbstractApplicationContext.getBeansOfType() for arbitrary bean type.  main@1, priority=5, in group 'main', status: 'RUNNING' getScriptAsString():91, ResourceScriptSource.java","closed","in: core,","spring-projects-issues","2008-01-18T01:45:55Z","2019-01-11T16:38:59Z"
"","9617","Deferred transaction rollback marker [SPR-4942]","**[Roman Pichlík](https://jira.spring.io/secure/ViewProfile.jspa?name=dagi)** opened **[SPR-4942](https://jira.spring.io/browse/SPR-4942?redirect=false)** and commented  There is strict transaction handling since JBoss 4.2 +, so if a JTA transaction is marked for rollback it's not possible to perform any other operation on a given connection. This behavior is different from other application servers where associated connection is still active during whole life of transaction. There should be some possibility to deferred a rollback - e.g a special flag on PlatformTransactionManager.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-06-22T22:14:03Z","2008-07-03T05:17:02Z"
"","9523","PropertyPlaceholderConfigurer doesn't work on beans defined in own schema e.g. tx:* [SPR-4847]","**[Roman Pichlík](https://jira.spring.io/secure/ViewProfile.jspa?name=dagi)** opened **[SPR-4847](https://jira.spring.io/browse/SPR-4847?redirect=false)** and commented  Following placeholder isn't replaced.    ---  **Affects:** 2.5.2  **Issue Links:** - #7865 PropertyPlaceholderConfigurer does not work with namespace declarations. (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-05-22T02:16:26Z","2019-01-11T19:06:55Z"
"","8928","Duplicating abstract bean's ID [SPR-4250]","**[Roman Borisov](https://jira.spring.io/secure/ViewProfile.jspa?name=romezz)** opened **[SPR-4250](https://jira.spring.io/browse/SPR-4250?redirect=false)** and commented  If I create abstract beans with similar IDs in different context files, the framework  uses abstract bean from last loaded file. I thought, the framework will throw the exception at startup.  Example:  file beans1.xml  \ \ \ \ \  file beans2.xml  \ \ \ \ \  file beans3.xml  \ \ \ \ \     \ \   ---  **Affects:** 2.0.7","closed","in: core,","spring-projects-issues","2007-12-12T20:46:39Z","2019-01-12T16:39:25Z"
"","9458","autowire-candidate=""false"" doesn't work for beans specified in a parent BeanFactory [SPR-4781]","**[Roland Huss](https://jira.spring.io/secure/ViewProfile.jspa?name=roland.huss)** opened **[SPR-4781](https://jira.spring.io/browse/SPR-4781?redirect=false)** and commented  When a bean in a parent context is specified with autowire-candidate=""false"" this bean is nevertheless considered as an autowire candidate for bean in a child bean factory.  This is due to this conditional in DefaultListableBeanFactory.findAutowireCandidates():  if (!candidateName.equals(beanName) && (!containsBeanDefinition(candidateName) || getMergedBeanDefinition(candidateName).isAutowireCandidate())) { result.put(candidateName, getBean(candidateName)); }  So, isAutowireCandidate() is only checked for beans owned by this bean factory (containsBeanDefinition(candidateName)) and not for beans coming from a parent. This is in contradiction of the documentation in the reference guide:  ---  3.3.6.1. Excluding a bean from being available for autowiring  You can also (on a per-bean basis) totally exclude a bean from being an autowire candidate. When configuring beans using Spring's XML format, the 'autowire-candidate' attribute of the \ element can be set to 'false'; this has the effect of making the container totally exclude that specific bean definition from being available to the autowiring infrastructure.  This can be useful when you have a bean that you absolutely never ever want to have injected into other beans via autowiring. It does not mean that the excluded bean cannot itself be configured using autowiring... it can, it is rather that it itself will not be considered as a candidate for autowiring other beans.  ---  Please either clarify this behaviour in the reference guide if this is an intended behaviour (though I can't imagine why) or simply modify the above conditional  ---  **Affects:** 2.0.8  **Issue Links:** - #9444 DefaultListableBeanFactory.isPrimary() doesn't locate beans in parent contexts","closed","in: core,","spring-projects-issues","2008-05-05T01:27:17Z","2019-01-13T21:52:36Z"
"","9421","11.2.1.1.3. Other operations. Error in redaction: bind / binding. [SPR-4744]","**[Rodolfo Federico Gamarra](https://jira.spring.io/secure/ViewProfile.jspa?name=rgamarra)** opened **[SPR-4744](https://jira.spring.io/browse/SPR-4744?redirect=false)** and commented  On ""The Spring Framework - Reference Documentation"" section 11.2.1.1.3 says: ""It is heavily overloaded with variants taking callback interfaces, bind variable arrays, and suchlike."" ""Bind"" should be replaced by ""binding"".   ---  **Affects:** 2.0.8, 2.5.3  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-04-23T05:24:13Z","2012-06-19T03:47:17Z"
"","9402","Missing "")"" at 13.3. Controllers. [SPR-4725]","**[Rodolfo Federico Gamarra](https://jira.spring.io/secure/ViewProfile.jspa?name=rgamarra)** opened **[SPR-4725](https://jira.spring.io/browse/SPR-4725?redirect=false)** and commented  In ""The Spring Framework - Reference Documentation"" is missing parenthesis at section 13.3. It can be read: ""The notion of a controller is part of the MVC design pattern (more specifically it is the 'C' in MVC. Controllers provide access to the..."". After ""MVC"" "")"" should be one.   ---  **Affects:** 2.5.3","closed","type: bug,","spring-projects-issues","2008-04-18T08:18:56Z","2012-06-19T03:46:41Z"
"","9401","Out of page fragments in pdf version of ""The Spring Framework - Reference Documentation"". [SPR-4724]","**[Rodolfo Federico Gamarra](https://jira.spring.io/secure/ViewProfile.jspa?name=rgamarra)** opened **[SPR-4724](https://jira.spring.io/browse/SPR-4724?redirect=false)** and commented  There are several boxes whose code fragment (either java or xml) spans out of its boundaries, and in some cases out of the page itself. In most cases the fragment is the usual spring heading (with ""xsi:schemaLocation"", etc.), which is harmless. In other cases, the code spans out of the box, but still makes it into the page. The situations that I think should be fixed with proper formatting are those in which the text doesn´t fit into the page.  I found the following cases with text out of the page: 3.11.3 (second box), 3.11.4 (fist box), 12.2.8 (a final -->), 13.3.3 (first box), 13.10.3 (2nd box). 15.6.1.1 (a `@see`), 24.3.1.4 (2nd box), 24.5.2 (1st box). Also in ""Table 9.1.  settings"" the last 2 descriptions also doesn't fit in.  I found the following cases with text out of the box (but still readable): 3.3.2.2 (a comment), 3.4.1 (a comment), 3.7.1.1 (throws clause), 3.12.3 (context), 5.2 (illegalargumentexception), 5.4.2.1.1 (2nd and 3rd box), 6.7 (comment), 6.8.4.6.2 (loaderclass), 7.5.6 (class), 7.10.2 (2nd box), 9.5.2 (last box), 9.5.9 (comment), 11.2.9 (a curly brace), 11.7.4 (throws clause), 12.2.3 (find call), 12.2.4 (throws clause), 12.2.7 (a comment in the 2nd box and a > in the 3rd), 12.3.4 (a final >), 12.4.4 (a >), 12.6.1.3.1 (3 times), 12.7 (a >), 13.3.3 (8th box), 13.4.1 (1st box), 13.5.2 (1st box), 13.10.3 (3rd box), 14.2.4.14 (1st box). 14.4.2 (3rd box), 14.4.4.2 (1st box), 14.7.5 (1st box), 15.6.1.2 (2nd box), 17.5.2 (1st box), 17.5.8 (1st box), 18.3.1 (5th box), 19.6 (1st box), B.7.1 (8th box). Also, the image with the ""Overview of the Spring Framework"" doesn't fit completely.  There may be some other cases I missed.   ---  **Affects:** 2.5.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1f5568fa81d7b41c6c871015c3410d238bfd55cf","closed","type: documentation,","spring-projects-issues","2008-04-18T04:09:28Z","2012-06-19T03:46:35Z"
"","9399","Typo in 8.3.5. ""Common annotations"" (@DirtiesContext). [SPR-4722]","**[Rodolfo Federico Gamarra](https://jira.spring.io/secure/ViewProfile.jspa?name=rgamarra)** opened **[SPR-4722](https://jira.spring.io/browse/SPR-4722?redirect=false)** and commented  In ""The Spring Framework - Reference Documentation"" there's a typo in chapter 8, section 3.5: ""Common annotations"". In the item ""`@DirtiesContext`"" it can be read: ""...during the execution of of the test method..."", repeating the word ""of"".   ---  **Affects:** 2.5.3","closed","type: bug,","spring-projects-issues","2008-04-18T01:22:58Z","2012-06-19T03:46:48Z"
"","9652","The package org.springframework.orm.hibernate3.annotation is missing from CVS [SPR-4977]","**[Robin Houston](https://jira.spring.io/secure/ViewProfile.jspa?name=robinhouston)** opened **[SPR-4977](https://jira.spring.io/browse/SPR-4977?redirect=false)** and commented  The package just isn't there. See e.g.  http://springframework.cvs.sourceforge.net/springframework/spring/src/org/springframework/orm/hibernate3/?hideattic=0   ---  **Affects:** 2.0.8, 2.5 RC1, 2.5 RC2, 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5","closed","","spring-projects-issues","2008-07-02T21:45:44Z","2019-01-11T18:32:51Z"
"","9464","CommonsPoolTargetSource returns same object... using documentation [SPR-4787]","**[Roberto Simoni](https://jira.spring.io/secure/ViewProfile.jspa?name=r.simoni)** opened **[SPR-4787](https://jira.spring.io/browse/SPR-4787?redirect=false)** and commented  I'm trying to test CommonsPoolTargetSource using documentation at http://static.springframework.org/spring/docs/2.0.x/reference/aop-api.html#aop-ts-pool The ProxyFactoryBean returns the same object. I have explained all tests done at http://forum.springframework.org/showthread.php?t=53833  If I'm doing something wrong, I think probably the documentation has to be corrected.  Thanks Bye rs  P.S. sorry for my primitive english   ---  **Affects:** 2.0.8","closed","status: declined,","spring-projects-issues","2008-05-06T17:03:11Z","2019-01-12T16:28:15Z"
"","9562","Problem extracting Oracle Timestamp with SQLRowset [SPR-4886]","**[Roberto Ruiz](https://jira.spring.io/secure/ViewProfile.jspa?name=rober2d2)** opened **[SPR-4886](https://jira.spring.io/browse/SPR-4886?redirect=false)** and commented  I extract data from an Oracle Database using org.springframework.jdbc.core.JdbcTemplate.  If I try to extract data from timestamp columns, I get a ClassCastException, because the template gets an oracle.sql.TIMESTAMP object instead of a java.sql.Timestamp.  SqlRowSet rs = _jdbcTemplate.queryForRowSet(""SELECT FFNACPER FROM TEMP_ALPER""); rs.next(); java.sql.Timestamp timestamp = rs.getTimestamp(""FFNACPER""); //HERE I GET A CLASSCASTEXCEPTION  To make it work, I must get an object, and convert it manually:  oracle.sql.TIMESTAMP timestamp = (oracle.sql.TIMESTAMP) rs.getObject(""FFNACPER""); return (timestamp == null) ? null : new Date(timestamp.dateValue().getTime());  It also works ok, if I use a ResultSetExtractor instead of an SqlRowSet      _jdbcTemplate.query(""SELECT FFNACPER FROM TEMP_ALPER"", new ResultSetExtractor(){          public Object extractData(ResultSet rs) throws SQLException, DataAccessException {               rs.next();               Timestamp t = rs.getTimestamp(""FFNACPER""); //WORKS OK               return t;                                          }				     } );  Have tested only for timestamp. Haven't tried with rs.getDate, or rs.getTime   ---  **Affects:** 2.5.3  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-06-03T18:51:44Z","2015-09-22T16:55:21Z"
"","9008","German translation of the documentation [SPR-4329]","**[Robert Spielmann](https://jira.spring.io/secure/ViewProfile.jspa?name=rspielmann)** opened **[SPR-4329](https://jira.spring.io/browse/SPR-4329?redirect=false)** and commented  Hi all,  would anyone be interested in creating a german translation of the Spring reference documentation? If so, please let me know, because I would like to translate the docs.  Cheers, Robert   --- No further details from [SPR-4329](https://jira.spring.io/browse/SPR-4329?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-01-12T23:13:39Z","2015-09-22T17:34:37Z"
"","9766","Deploy the samples as maven artifacts [SPR-5093]","**[Robert Munteanu](https://jira.spring.io/secure/ViewProfile.jspa?name=rombert)** opened **[SPR-5093](https://jira.spring.io/browse/SPR-5093?redirect=false)** and commented  Deploying the samples as maven artifacts would make it much easier to:  - retrieve them without downloading the batteries-included zip file - set up an IDE and start poking around ( I did use some time to set up class paths/source folders/source attachments )  I know that at least the spring rich client project does that and it was quite easy for me to simply add the examples as dependencies and build on that.   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-08-18T01:20:28Z","2012-06-19T09:36:25Z"
"","9154","PropertyPlaceholderConfigurer - nested placeholders don't work in placeholder keys [SPR-4477]","**[Robert Mark Bram](https://jira.spring.io/secure/ViewProfile.jspa?name=robertmarkbram)** opened **[SPR-4477](https://jira.spring.io/browse/SPR-4477?redirect=false)** and commented  Also discussed here:  http://forum.springframework.org/showthread.php?t=49973  A nested property in Srping config like this:  \ \ \ 	\ 		\ 		\ 	\ 	\ 		\ 			\${${environment}.dataSource.driverClassName}\ 		\ 		\ 			\${${environment}.dataSource.url}\ 		\ 		\ 			\${${environment}.dataSource.username}\ 		\ 		\ 			\${${environment}.dataSource.password}\ 		\ 	\ \  With a property file like this:  1. Environment: local, dev, test, svt or prod.    environment=prod    prod.dataSource.url=jdbc:oracle:thin:@(DESCRIPTION=(LOAD_BALANCE=on)(ADDRESS=(PROTOCOL=TCP)(HOST=uporac01vip)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=uporac02vip)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=uporac03vip)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=uporac04vip)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=ORPCORE.cmltd.net.au)))    prod.dataSource.username=DOCPUBLISHER_PROD    prod.dataSource.password=wescoles07    prod.dataSource.driverClassName=oracle.jdbc.driver.OracleDriver  I get this stack trace:  org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'dataSource' defined in class path resource [org/rbram/docpublisher/changeowner/changeOwnerPubApplicationContext.xml]: Could not resolve placeholder '${environment' at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:252) at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:75) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:542) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:516)changeowner.DocumentOwnerChangerSpring(139) - Problem running Document Owner Changer. Rolling back. org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'dataSource' defined in class path resource [org/rbram/docpublisher/changeowner/changeOwnerPubApplicationContext.xml]: Could not resolve placeholder '${environment' at org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.processProperties(PropertyPlaceholderConfigurer.java:252) at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:75) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:542) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:516) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:123) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:66) at org.rbram.docpublisher.changeowner.DocumentOwnerChangerSpring.run(DocumentOwnerChangerSpring.java:115) at org.rbram.docpublisher.changeowner.DocumentOwnerChangerSpring.main(DocumentOwnerChangerSpring.java:99)      at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348)     at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:123)     at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:66)     at org.rbram.docpublisher.changeowner.DocumentOwnerChangerSpring.run(DocumentOwnerChangerSpring.java:115)     at org.rbram.docpublisher.changeowner.DocumentOwnerChangerSpring.main(DocumentOwnerChangerSpring.java:99)  But the parseStringValue() method in PropertyPlaceholderConfigurer indicates that the logic should recursively evaluate nested properties.  Setting ignoreUnresolvablePlaceholders to true just leaves me with literal i.e. unresolves values ${${environment}.dataSource.driverClassName} etc..   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-18T10:27:41Z","2008-02-24T06:35:58Z"
"","9515","ServletRequestUtils.getIntParameter does not work with MockHttpServletRequest. [SPR-4839]","**[Robert Bannon](https://jira.spring.io/secure/ViewProfile.jspa?name=rwbannon)** opened **[SPR-4839](https://jira.spring.io/browse/SPR-4839?redirect=false)** and commented  If you call ServletRequestUtils with a default parameter, it does not work with MockHttpServletRequest.  Calling this with a request that is a MockHttpServletRequest will throw an exception. ServletRequestUtils.getIntParameter( request, ""parameter"", 1 );  Method on MockHttpServletRequest. public String getParameter(String name) { Assert.notNull(name, ""Parameter name must not be null""); String[] arr = (String[]) this.parameters.get(name); return (arr != null && arr.length > 0 ? arr[0] : null); }  Method on ServletRequestUtils      public static int getIntParameter(ServletRequest request, String name, int defaultVal) {                 // Exception get thrown here and does not use default value     	if (request.getParameter(name) == null) {     		return defaultVal;     	}     	try {     		return getRequiredIntParameter(request, name);     	}     	catch (ServletRequestBindingException ex) {     		return defaultVal;     	}     }    ---  **Affects:** 2.5.3","closed","in: web,","spring-projects-issues","2008-05-20T04:52:04Z","2019-01-11T19:07:04Z"
"","9425","Class loading problem with default property editors [SPR-4748]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-4748](https://jira.spring.io/browse/SPR-4748?redirect=false)** and commented  org.springframework.beans.PropertyEditorRegistrySupport.doRegisterDefaultEditors()  Registers a ClassEditor that does not honour the Bean ClassLoader when used inside a BeanFactory   ---  **Affects:** 2.5.3","closed","in: core,","spring-projects-issues","2008-04-24T00:47:58Z","2019-01-11T17:42:33Z"
"","9380","AnnotationMetadataReadingVisitor does not work in an OSGi environment [SPR-4703]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-4703](https://jira.spring.io/browse/SPR-4703?redirect=false)** and commented  AnnotationMetadataReadingVisitor attempts to load annotation types when looking for meta annotations, and uses its own ClassLoader to do so  (see line 59). It really needs to use the bean ClassLoader.    ---  **Affects:** 2.5.3","closed","in: core,","spring-projects-issues","2008-04-14T19:30:34Z","2012-06-19T03:47:18Z"
"","9304","Have OverridingClassLoader filter types that are being matched against automatically [SPR-4627]","**[Rob Harrop](https://jira.spring.io/secure/ViewProfile.jspa?name=robh)** opened **[SPR-4627](https://jira.spring.io/browse/SPR-4627?redirect=false)** and commented  When attempting to match against the persistence annotation BPP, the match attempt fails because the OCL loads the BPP type again and of course the instance of check fails.  The default exclusion for BPP doesn't work (using findLoadedClasses) because the parent ClassLoader being used delegates to another loader internally and has no loaded classes of its own.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-26T00:29:13Z","2012-06-19T03:46:48Z"
"","8883","For maven the spring.pom should reflect dependencies on the modules [SPR-4205]","**[Roald Bankras](https://jira.spring.io/secure/ViewProfile.jspa?name=roald@jteam.nl)** opened **[SPR-4205](https://jira.spring.io/browse/SPR-4205?redirect=false)** and commented  Using the spring-2.0.x AND spring-ws-core-1.0.x requires the exclusion of a lot of spring dependencies : core, beans, context, web, webmvc and aop. I understand the convenience of publishing a spring.jar, but for the maven community this could easily be resolved by publishing only a spring.pom including modules as dependencies. I might be able to help to fix this.  This issue is related to #7374  ---  **Affects:** 2.0.6","closed","status: declined,","spring-projects-issues","2007-12-03T01:40:37Z","2019-01-11T17:01:13Z"
"","9518","How to map multiple JNDI in our XML file using sessionfactory, datasource tag..  [SPR-4842]","**[Ritvik Pandya](https://jira.spring.io/secure/ViewProfile.jspa?name=ritvik)** opened **[SPR-4842](https://jira.spring.io/browse/SPR-4842?redirect=false)** and commented  I have defined 2 JNDIs in WebLogic.. & now I want to use it in my project.. say in XML ApplicationContext.xml... when I mapped it as (I know we can't define datasource as follows but suggest me how we can resolve it.) \ \ \ \ \ \ \ : : \ \ \ \ \ : : \ \ \ \    --- No further details from [SPR-4842](https://jira.spring.io/browse/SPR-4842?redirect=false)","closed","status: declined,","spring-projects-issues","2008-05-21T20:56:03Z","2012-06-18T12:44:19Z"
"","9115","The Formtags showcase application (at least) has a broken Ant build file. [SPR-4437]","**[Rick Evans](https://jira.spring.io/secure/ViewProfile.jspa?name=springboy)** opened **[SPR-4437](https://jira.spring.io/browse/SPR-4437?redirect=false)** and commented  Hiya  The changes to the jar packaging have broken (at least) the formtags showcase application.  If you go to the root of the Spring source tree and type 'ant alljars' this will build the Spring jars (like duh :)) If you then go to /samples/showcases/formtags and type 'ant all' the build will fail because the Spring MVC classes are no longer bundled in spring.jar and that is the only spring file that is referenced in the Ant build file.  The (lazy, coarse) fix is to change the build file to reference all of the jar files in the spring/dist directory.  Lines 32-34 become:                       And lines 93-95 become:                      Alternatively you reference the spring jar and the spring-mvc jars explicitly :)  The title of this issue includes the words '(at least)'. The other showcase aplications may be similarly affected. I apologise for being a bit of a lazy git :) and not checking.  Cheers Rick   ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-02-07T07:47:01Z","2012-06-19T03:46:44Z"
"","8962","Spring Framework 2.5's JPetStore is missing saaj.jar [SPR-4284]","**[Richard Rowe](https://jira.spring.io/secure/ViewProfile.jspa?name=richardarowe)** opened **[SPR-4284](https://jira.spring.io/browse/SPR-4284?redirect=false)*** and commented  In the course of working through the jpetstore example, I found two issues that lead me to believe the saaj.jar file is missing from the jpetstore example and also from the lib\axis folder.   ---  **Affects:** 2.5 final","closed","type: task,","spring-projects-issues","2007-12-27T07:46:06Z","2012-06-19T03:46:58Z"
"","9607","Threading bug with Autowired Annotation / AutowiredAnnotationBeanPostProcessor [SPR-4932]","**[Rich Head](https://jira.spring.io/secure/ViewProfile.jspa?name=richdebhome3)** opened **[SPR-4932](https://jira.spring.io/browse/SPR-4932?redirect=false)** and commented  I have come across a threading bug in the Spring libraries when using the AutowiredAnnotationBeanPostProcessor.  The symptoms are random NullPointerExceptions being thrown due to the autowiring of beans not being performed.  The problem is due to the RootBeanDefinition of prototypes being initialized by more then one thread.  The problem exists in 2.5.1 and also 2.5.4. It may exist in other releases but these are the two I looked at.  The problem starts when two threads try to create a prototype bean of the same type.  For example:  MyWebController uses the following code to get a referecne to the prototype bean MyService.  MyService emailService = (MyService)getApplicationContext().getBean( ""MyService"");  MyService has an autowired property which is a singleton DAO named MyDAO.  `@Service`(""MyService"") `@Scope`(""prototype"") public class MyService_Impl implements MyService {      @Autowired     @Qualifier(""MyDAO"")     private MyDAO myDAO          . . .  }  The problem occurs when two threads try to get an instance for the first time to the MyService bean. The myDAO is NOT autowired.  In the spring libraries, the problem starts when two threads enter the following method during a request to create the prototype bean MyService.  org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean()  The method looks like this...  protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) {      . . .          // Allow post-processors to modify the merged bean definition.     if(!mbd.postProcessed)     {     	applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);     	mbd.postProcessed = true;     }          . . .  }  If more then two threads enter the applyMergedBeanDefinitionPostProcessors() for the same RootBeanDefinition at the same time, the properties (fields) to be autowired (injected) are lost.  The best way to see this is set a break point inside of doCreateBean() and allow two threads to enter the  applyMergedBeanDefinitionPostProcessors() one at a time. Note that the check ""if(!mbd.postProcessed)"" is NOT thread safe if two threads have already entered the if() statement.  The applyMergedBeanDefinitionPostProcessors() method is used to allow Bean Post Processers to have their postProcessMergedBeanDefinition() called.  When using the autowire annotation, the org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor is registered.  For the MyService bean, the AutowiredAnnotationBeanPostProcessor bean has its postProcessMergedBeanDefinition() called.  In the AutowiredAnnotationBeanPostProcessor.postProcessMergedBeanDefinition() method the findAutowiringMetadata() method is called. The findAutowiringMetadata() is used to get the InjectionMetadata for the bean and store this object into a local cache in the AutowiredAnnotationBeanPostProcessor.injectionMetadataCache map field.  The InjectionMetadata contains members, both fields and methods that need to be autowired (injected) for this bean.  When the first thread enters this code, this works fine and returns the InjectionMetadata.  NOTE THAT THIS INSTANCE of InjectionMetadata IS CACHED IN THE ""AutowiredAnnotationBeanPostProcessor.injectionMetadataCache map field"". As you will see below, the InjectionMetadata object in the map will be modified later.  Back in the postProcessMergedBeanDefinition() after the InjectionMetadata has been returned the following is called:  metadata.checkConfigMembers(beanDefinition);  Inside of checkConfigMembers() it calls:  doRegisterConfigMembers(beanDefinition, this.injectedFields);  Here the fields to be autowired are merged into the beanDefinition if it does not exist (see code below).  If it does exist, IT IS REMOVED from the input set ""this.injectedFields"" (The cause of the problem).  private void doRegisterConfigMembers(RootBeanDefinition beanDefinition, Set\ members) { for (Iterator\ it = members.iterator(); it.hasNext();) { Member member = it.next().getMember(); if (!beanDefinition.isExternallyManagedConfigMember(member)) { beanDefinition.registerExternallyManagedConfigMember(member); } else { it.remove(); } } }  For a single thread initializing this beanDefinition this is okay.  The problem is when another thread is also trying to initialize the same beanDefinition. Looking at the logic above, if the ""Member"" is already in the bean definition it is removed from the input Set of InjectedElements (see ""it.remove()"" from above). This Set of  InjectedElements is the same set cached in the AutowiredAnnotationBeanPostProcessor.injectionMetadataCache map.  So, the beanDefinition (RootBeanDefinition.externallyManagedConfigMembers) is CORRECT but the AutowiredAnnotationBeanPostProcessor.injectionMetadataCache map field no longer has this member as a field to be autowired.  Future calls to findAutowiringMetadata() will return an InjectionMetadata from its cache but the fields (member) to be autowired will not exist.  So when it comes time to inject other beans into this bean (like the myDAO bean), and the findAutowiringMetadata() is called, the information about what fields of a bean should be autowired is lost and therefore, those properties will not be injected and will be null.  The fix I have is to only allow a single thread to ever perform a ""merge bean definition post process"".  This can be accomplished by modifying the following method:  org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean()  The change will replace the none-thread safe call with...  protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) {      . . .               // Allow post-processors to modify the merged bean definition.     if (!mbd.postProcessed)      {     	synchronized(mbd)     	{     		if (!mbd.postProcessed)     		{     			applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);     			mbd.postProcessed = true;     		}     	}     }          . . .  }  I have tested this and it seems to work. My concern is the synchronization on the mbd itself. This seems like a good candidate to synch on but I am not sure what the impact will be if it is being synch on in other parts of the code. My concern would be a deadlock.    ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-06-18T09:39:32Z","2012-06-19T03:47:40Z"
"","8951","Beans instanciated before BeanPostProcessors process their definitions [SPR-4273]","**[Riccardo Ferretti](https://jira.spring.io/secure/ViewProfile.jspa?name=riccardo)** opened **[SPR-4273](https://jira.spring.io/browse/SPR-4273?redirect=false)** and commented  In certain conditions a bean defined in a context file will be created before any BeanPostProcessor can process its definition. This occurs when: - a BeanFactory bean is defined and its getObjectType() method returns null; - that BeanFactory is referenced as factory-bean to create another bean;  In this case the BeanFactory bean and all its depending beans will be created before any BeanPostProcessor will have processed their definitions.  The problem is also present in the latest nightly spring built (spring-framework-2.5.1-20071218-341.zip).  I will attach a sample application that shows the problem.   ---  **Affects:** 2.5 final  **Attachments:** - [spring-bug-src.tar](https://jira.spring.io/secure/attachment/13205/spring-bug-src.tar) (_10.00 kB_)","closed","in: core,","spring-projects-issues","2007-12-19T10:08:38Z","2012-06-19T03:47:18Z"
"","9597","CustomizableTraceInterceptor should respect hideProxyClass property in log replacements [SPR-4922]","**[René Link](https://jira.spring.io/secure/ViewProfile.jspa?name=rlink77de)** opened **[SPR-4922](https://jira.spring.io/browse/SPR-4922?redirect=false)** and commented  The CustomizableTraceInterceptor  does not replace the $[targetClassName] correctly when hideProxyClass is enabled.   ---  **Affects:** 2.5.4  **Attachments:** - [CustomizableTraceInterceptor-hideProxyClass.patch](https://jira.spring.io/secure/attachment/14184/CustomizableTraceInterceptor-hideProxyClass.patch) (_3.07 kB_)","closed","type: enhancement,","spring-projects-issues","2008-06-15T20:38:12Z","2012-06-19T03:47:08Z"
"","9101","Enum values are not converted correctly when a formatted xml configuration is used. [SPR-4423]","**[René Link](https://jira.spring.io/secure/ViewProfile.jspa?name=rlink77de)** opened **[SPR-4423](https://jira.spring.io/browse/SPR-4423?redirect=false)** and commented  Imagine the following configuration. You want to define a Map that maps strings to enum types. The xml configuration is formatted and therefore the value element contains whitespaces.  \ \ \ \ \visitor\ \ \ VISITOR \ \ \ \  In this case the TypeConverterDelegate will fail at line 220 because it tries to find an enum type that contains whitespaces. Because of the java language specification an enum identifer can not contain whitespaces and therefore the TypeConverterDelegate should trim the value before it does a look-up.  Here is a patch for this issue. 1.      Eclipse Workspace Patch 1.0    #P spring    Index: src/org/springframework/beans/TypeConverterDelegate.java    ===========================================================================================================  RCS file: /cvsroot/springframework/spring/src/org/springframework/beans/TypeConverterDelegate.java,v retrieving revision 1.17.2.3 diff -u -r1.17.2.3 TypeConverterDelegate.java --- src/org/springframework/beans/TypeConverterDelegate.java	30 Aug 2007 23:02:54 -0000	1.17.2.3 +++ src/org/springframework/beans/TypeConverterDelegate.java	5 Feb 2008 12:59:40 -0000 @@ -216,6 +216,10 @@ // with values defined as static fields. Resulting value still needs // to be checked, hence we don't return it right away. try { +      // we suppose that the convertedValue is an enum  +         // Because of the java language specification enum identifers  +         // can not contain whitespaces.  +                  convertedValue = convertedValue.toString().trim();                Field enumField = requiredType.getField((String) convertedValue);                convertedValue = enumField.get(null);       }  ---  **Affects:** 2.0.7, 2.0.8, 2.5 final, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-02-04T23:00:37Z","2019-01-13T21:53:32Z"
"","9374","Option Group capability for Spring Form taglib [SPR-4697]","**[Renaud Choné](https://jira.spring.io/secure/ViewProfile.jspa?name=rchone)** opened **[SPR-4697](https://jira.spring.io/browse/SPR-4697?redirect=false)** and commented  It would be great to be able to organize the options of a select with option groups. In HTML, one can write:   \ \ \ \ \ \ \ \ \  For instance, 3 optional attributes (groups, itemGroup and groupLabel) could be added to the options tag that would do the grouping.    ---  **Affects:** 2.5.3  4 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-13T23:13:41Z","2012-07-31T03:15:50Z"
"","9719","Circular Reference while using setter injection [SPR-5044]","**[rawad marji](https://jira.spring.io/secure/ViewProfile.jspa?name=rawadmarji)** opened **[SPR-5044](https://jira.spring.io/browse/SPR-5044?redirect=false)** and commented  While using spring framework an issue appears which is the circular reference because i have two services that each one use another one I read in dependency injection book that if i use setter injection this issue will not appears but it still appears.  \ 		\ 		\ 		\ 		\	 	\           	     	     	         ---  **Affects:** 2.0 final","closed","status: declined,","spring-projects-issues","2008-07-29T02:15:25Z","2019-01-12T16:28:05Z"
"","9627","WARN log issued from PropertyPlaceholderConfigurer even if  ""ignoreUnresolvablePlaceholders"" or ""ignoreResourceNotFound"" are set to true [SPR-4952]","**[Ramon Grunder](https://jira.spring.io/secure/ViewProfile.jspa?name=rgrunder)** opened **[SPR-4952](https://jira.spring.io/browse/SPR-4952?redirect=false)** and commented  there should be no WARN log beeing issued if ""ignoreUnresolvablePlaceholders"" or ""ignoreResourceNotFound"" are set to true.  bean config sample setup, e.g. to allow a userspecific property file to override defaults, but only if the file is available at all:  \ \ \ \classpath:config-default.properties\ \classpath:config.properties\ \classpath:config-${env.scope}.properties\         \classpath:config-${user.name}.properties\ \ \ \ \ \ \ \ \ \  if e.g. the ${env.scope} variable can not be resolved, the following log is issued: 2008-06-25 21:53:54,072 | main | WARN | SystemPropertyUtils | Could not resolve placeholder 'env.scope' in [classpath:config-${env.scope}.properties] as system property: neither system property nor environment variable found  if e.g. no user specific config file is present, the following log is issued: 2008-06-25 21:53:54,103 | main | WARN | PropertyPlaceholderConfigurer | Could not load properties from class path resource [config-rgrunder.properties]: class path resource [config-rgrunder.properties] cannot be opened because it does not exist  in both cases, not WARN log should be issued, since ""ignoreUnresolvablePlaceholders"" and ""ignoreResourceNotFound"" are both set to true.  proposed solution is to issue a DEBUG log statement in this situation only (for me, even INFO log level would be too verbose, since i don't want to bloat log output with stuff/situations that are expected and explicitly configured as such...)   ---  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-06-25T07:08:21Z","2012-06-19T09:36:14Z"
"","9593","Optmize proxy creation for poitncuts with runtime residue [SPR-4918]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-4918](https://jira.spring.io/browse/SPR-4918?redirect=false)** and commented  Consider cases such as in http://forum.springframework.org/showthread.php?p=186331. Here, we could avoid proxying many beans if we could utilize information in runtime determinable pointcut (`@target` in this case).   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-06-14T05:50:22Z","2012-06-19T09:36:12Z"
"","9292","Update AspectJ to 1.6 [SPR-4615]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-4615](https://jira.spring.io/browse/SPR-4615?redirect=false)** and commented  Currently we are using a development version of AspectJ (aspectj-DEVELOPMENT-20080321160506). We need to update it to a released AspectJ 6 before shipping Spring 2.5.3  ---  **Affects:** 2.5.3  **Issue Links:** - #9264 `@Configurable` beans do not waved by AnnotationBeanConfigurerAspect.aj  (_**""is depended on by""**_)","closed","in: core,","spring-projects-issues","2008-03-23T07:34:04Z","2019-01-13T08:04:43Z"
"","9270","Error using @Configurable with LTW [SPR-4593]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-4593](https://jira.spring.io/browse/SPR-4593?redirect=false)** and commented  From: http://blog.springsource.com/main/2008/01/23/new-improvements-in-domain-object-dependnecy-injection-feature/#comment-100875  ...when implementing Serializable, we are getting the following messages from the class loader (I am using LTW within the test). I have not tested injection on de-serialisation (which is essential for me) as yet.  [code] ClassLoader@92e78c] error at example\Order.java::0 The type example.Order must implement the inherited abstract method org.springframework.beans.factory.aspectj.AbstractInterfaceDrivenDependencyInjectionAspect$ConfigurableDeserializationSupport.readResolve() see also: org\springframework\beans\factory\aspectj\AbstractInterfaceDrivenDependencyInjectionAspect.aj::0 see also: org\springframework\beans\factory\aspectj\opt\j2ee\domains\springframework.org\build\bamboo-home\xml-data\build-dir\SPR-NIGHTLY\spring\aspectj\src\org\springframework\beans\factory\aspectj\AnnotationBeanConfigurerAspect.aj:87::0 [AppClassLoader@92e78c] weaveinfo Extending interface set for type 'example.Order' (Order.java) to include 'org.springframework.beans.factory.aspectj.ConfigurableObject' (AnnotationBeanConfigurerAspect.aj) [AppClassLoader@92e78c] weaveinfo Join point 'initialization(void org.springframework.beans.factory.aspectj.ConfigurableObject.())' in Type 'example.Order' (Order.java:15) advised by before advice from 'org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect' (AbstractDependencyInjectionAspect.aj:77) [with runtime test] [AppClassLoader@92e78c] weaveinfo Join point 'initialization(void org.springframework.beans.factory.aspectj.ConfigurableObject.())' in Type 'example.Order' (Order.java:15) advised by afterReturning advice from 'org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect' (AbstractDependencyInjectionAspect.aj:86) [with runtime test] [AppClassLoader@92e78c] weaveinfo Join point 'initialization(void example.Order.())' in Type 'example.Order' (Order.java:15) advised by afterReturning advice from 'org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect' (AbstractDependencyInjectionAspect.aj:86) [with runtime test]   ---  **Affects:** 2.5.2  **Attachments:** - [ConfigurableTestCase.zip](https://jira.spring.io/secure/attachment/13802/ConfigurableTestCase.zip) (_2.10 kB_)","closed","type: bug,","spring-projects-issues","2008-03-17T05:55:50Z","2019-01-11T17:19:01Z"
"","8985","Refactor domain object dependency injection aspect [SPR-4306]","**[Ramnivas Laddad](https://jira.spring.io/secure/ViewProfile.jspa?name=ramnivas)** opened **[SPR-4306](https://jira.spring.io/browse/SPR-4306?redirect=false)** and commented  Currently, the base aspect for domain object dependency injection -- AbstractBeanConfigurerAspect -- is not really capable of doing many interesting things that its subaspect AnnotationBeanConfigurerAspect does. Especially important capability is injecting dependencies after deserialization. This precludes users from creating useful subaspect of AbstractBeanConfigurerAspect unless they duplicate the functionality in AnnotationBeanConfigurerAspect. This, in turn, precludes some interesting possibilities such as: - Injecting dependencies based on user-specific annotations. - Injecting based on user-specified interfaces (e.g. Injecting MailServer for objects implementing MailClient). - User specified configuration strategy (that can bypass Spring's reflection based strategy).  While making backwards compatible changes is ideal in some respect, it is probably going to end up making the design too complex (already we have some complexities such as non-abstract pointcut that must be overriden). So perhaps a better choice is to: 1. Create a new aspect, say, AbstractDependencyInjectionAspect with consideration for all things mentioned above. 2. Deprecate AbstractBeanConfigurerAspect.    This shouldn't be a real issue for any existing users as their subaspects of AbstractDependencyInjectionAspect, if any, will continue to work the same way. 3. Refactor AnnotationBeanConfigurerAspect to extend AbstractDependencyInjectionAspect.    Since AnnotationBeanConfigurerAspect is a concrete aspect (which cannot be extended further), there is no issue with user extensions to it. Further, most (all?) Spring users use this aspect to  or  anyway, making internal details umimportant to them.  ---  **Issue Links:** - #8980 Deserialization not reinjecting for `@Configurable` with preConstruction - #8981 Repeated configuration for `@Configurable` with preConstruction","closed","type: enhancement,","spring-projects-issues","2008-01-07T00:52:02Z","2019-01-13T08:05:59Z"
"","9368","Need for SimpleJdbcUpdate [SPR-4691]","**[Ramkumar Krishnan](https://jira.spring.io/secure/ViewProfile.jspa?name=ramkumar.k)** opened **[SPR-4691](https://jira.spring.io/browse/SPR-4691?redirect=false)** and commented  It would be great if we have something like SimpleJdbcUpdate similar to SimpleJdbcInsert. It  should take map and another map as parameters and it should update table based on that. The column names in the second map should appear in the WHERE clause. There should be an overloaded method also which takes only one String(column name) which should appear in the WHERE clause.   ---  **Affects:** 2.5.3  20 votes, 22 watchers","closed","status: bulk-closed,","spring-projects-issues","2008-04-10T16:52:14Z","2019-01-12T02:38:33Z"
"","9705","FindBugs report [SPR-5030]","**[Ramiro Pereira de Magalhães](https://jira.spring.io/secure/ViewProfile.jspa?name=ramiromagalhaes)** opened **[SPR-5030](https://jira.spring.io/browse/SPR-5030?redirect=false)** and commented  I just downloaded Spring 2.5.5 code and analised it with FindBugs. The results are interesting, because there are some issues that are really simple to solve and provide some benefit.  For instance, there are some methods that use Boolean and Integer constructors instead of using Boolean.valueOf(...) and Integer.valueOf(...) that execute a lot faster. The report did also detect some String concatenation with + operator inside loops. There are many small issues that could be addressed to improve code performance and reduce possible vulnerabilities.  This is Findbugs site. I used version 1.3.4. http://findbugs.sourceforge.net/  Does someone suggest an approach to address those issues? Are you accepting patches?   ---  **Affects:** 2.5.5  **Attachments:** - [Spring 2.5.5.xml](https://jira.spring.io/secure/attachment/14428/Spring+2.5.5.xml) (_819.31 kB_)","closed","type: enhancement,","spring-projects-issues","2008-07-23T04:44:32Z","2012-06-19T09:36:28Z"
"","9422","Cannot name a Quartz scheduler [SPR-4745]","**[Rahul](https://jira.spring.io/secure/ViewProfile.jspa?name=rahul_nus)** opened **[SPR-4745](https://jira.spring.io/browse/SPR-4745?redirect=false)** and commented  I am trying to create 2 Quartz Schedulers (I have certain requirements) using org.springframework.scheduling.quartz.SchedulerFactoryBean.  The first one gets created fine. For the second I get the error the name 'DefaultQuartzScheduler'  is already in use (from the first one I presume).  I looked in the Spring API and I see a method that does allow a name to be sent: createScheduler(SchedulerFactory schedulerFactory, String schedulerName)  Can a setter for name please be exposed in org.springframework.scheduling.quartz.SchedulerFactoryBean?  Thanks  Caused by: org.quartz.SchedulerException: Scheduler with name 'DefaultQuartzScheduler' already exists. at org.quartz.impl.SchedulerRepository.bind(SchedulerRepository.java:83) at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1221) at org.quartz.impl.StdSchedulerFactory.getScheduler(StdSchedulerFactory.java:1355) at org.springframework.scheduling.quartz.SchedulerFactoryBean.createScheduler(SchedulerFactoryBean.java:687) at org.springframework.scheduling.quartz.SchedulerFactoryBean.afterPropertiesSet(SchedulerFactoryBean.java:582) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1333) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1299) ... 27 more   ---  **Affects:** 2.5.2","closed","","spring-projects-issues","2008-04-23T10:23:39Z","2019-01-11T17:42:24Z"
"","9367","Application Listener does not work for new instances of prototype beans [SPR-4690]","**[Rafi Feroze](https://jira.spring.io/secure/ViewProfile.jspa?name=rferoze)** opened **[SPR-4690](https://jira.spring.io/browse/SPR-4690?redirect=false)** and commented  1. create an ApplicationListener.  public class BeanListener implements ApplicationListener { Object source; int count; static int allcount = 0;  public BeanListener() { super();      count = allcount++;     System.out.println(""instance created="" + count);  }  public void onApplicationEvent(ApplicationEvent arg0) { System.out.print("""" + arg0.getClass().getName() + "" event received by="" + count); // if this is null, the listener is created automatically System.out.println("", my master is="" + source); }  public Object getSource() { return source; }  public void setSource(Object source) { this.source = source; } }  2. config it in a context     \    \  3. use it    BeanListener bl= (BeanListener) SDSApplicationContextFactory.buildContext().getBean(""listener-a"");    // if listener's source is null, the listener is not from here    bl.setSource(main);    main.bean= bl;     TestEvent ev= new TestEvent("""");    try    {    Thread.currentThread().sleep(3000);    }    catch (InterruptedException ev1)    {    // TODO Auto-generated catch block    ev1.printStackTrace();    }     SDSApplicationContextFactory.buildContext().publishEvent(ev);  4. output    instance created=0    org.springframework.context.event.ContextRefreshedEvent event received by=0       my master is=null    instance created=1    applistener.TestEvent event received by=0       my master is=null  note the second instance(instance created=1)'s event handling method was never called. Is it registered with the context?   ---  **Affects:** 1.2 final","closed","type: enhancement,","spring-projects-issues","2008-04-10T12:48:02Z","2009-02-06T18:27:50Z"
"","9610","Doc: @Autowired not working in BeanFactoryPostProcessor [SPR-4935]","**[Rafał Piotrowski](https://jira.spring.io/secure/ViewProfile.jspa?name=rpiotrow)** opened **[SPR-4935](https://jira.spring.io/browse/SPR-4935?redirect=false)** and commented  I create simple bean which implements BeanFactoryPostProcessor and has dependent bean injected with `@Autowired` annotation. Injection does not occur.  Workaround is to use standard XML dependency injection.  ---  **Affects:** 2.5.4  **Attachments:** - [autowired_bug_2.zip](https://jira.spring.io/secure/attachment/14209/autowired_bug_2.zip) (_4.35 kB_) - [autowired_bug.zip](https://jira.spring.io/secure/attachment/14199/autowired_bug.zip) (_3.12 kB_) - [autowired.patch](https://jira.spring.io/secure/attachment/16350/autowired.patch) (_1.32 kB_) - [mylyn-context.zip](https://jira.spring.io/secure/attachment/16351/mylyn-context.zip) (_2.29 kB_)  **Issue Links:** - #12863 BeanFactoryPostProcessor not working for `@Value` (_**""is duplicated by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a557878a6f79e1d595c1e6e05faf7cbd78718b58  0 votes, 6 watchers","closed","in: core,","spring-projects-issues","2008-06-18T23:04:09Z","2019-01-13T08:03:37Z"
"","9783","DefaultMessageListenerContainer stops receiving messages from an ActiveMQ Provider after a while [SPR-5110]","**[Pushan Bishi](https://jira.spring.io/secure/ViewProfile.jspa?name=pbishi)** opened **[SPR-5110](https://jira.spring.io/browse/SPR-5110?redirect=false)** and commented  I am running and ActiveMQ broker within JBoss. I have a Spring client which uses JMSTemplate/DefaultMessageListenerContainer to consume messages from 7 queues. When I bring up the client consumers, they run great for an hour or 2 and then they don't seem to receive any messages from the queues, though messages keep piling up in the queue. I see these messages which say that they are listening but not getting any messages  08:22:46.140 DEBUG[listenerContainer-2] [ ] [msg:] listener.DefaultMessageListenerContainer - Consumer [com.stc.jms.client.STCQueueReceiver@ae1cf] of session [com.stc.jms.client.STCSession@6ef7ba] did not receive a message 08:22:46.290 DEBUG[listenerContainer-5] [ ] [msg:] listener.DefaultMessageListenerContainer - Consumer [com.stc.jms.client.STCQueueReceiver@93c4f1] of session [com.stc.jms.client.STCSession@166c114] did not receive a message 08:22:46.540 DEBUG[listenerContainer-1] [ ] [msg:] listener.DefaultMessageListenerContainer - Consumer [com.stc.jms.client.STCQueueReceiver@1dae160] of session [com.stc.jms.client.STCSession@102679a] did not receive a message  Here are snippets from my Spring config  \ \ \ \ \ \ \ \                     	       		         		       		     	  \ \ \ \ \ \ \ \ \ \ \ \ \ \                			       ---  **Affects:** 2.5 final  **Issue Links:** - #9771 DefaultMessageListenerContainer should be able to auto-reconnect after an interval  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-21T06:44:13Z","2019-01-11T15:32:11Z"
"","8932","Transaction is not getting tied to a Service bean while connecting to JPA using JpaTransactionManager [SPR-4254]","**[Purnendu Das](https://jira.spring.io/secure/ViewProfile.jspa?name=purnendu9)** opened **[SPR-4254](https://jira.spring.io/browse/SPR-4254?redirect=false)** and commented  The System is returning with The following exception stack trace  Exception in thread ""main"" org.springframework.dao.InvalidDataAccessApiUsageException: no transaction is in progress; nested exception is javax.persistence.TransactionRequiredException: no transaction is in progress at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:289) at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:97) at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:212) at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:190) at org.springframework.orm.jpa.JpaTemplate.flush(JpaTemplate.java:281) at javaapplication5.TripDaoimp.save(TripDaoimp.java:40) at javaapplication5.TestService.save(TestService.java:35) at javaapplication5.Test.setTrip(Test.java:32) at javaapplication5.Main.main(Main.java:25) Caused by: javax.persistence.TransactionRequiredException: no transaction is in progress at org.hibernate.ejb.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:294) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:346) at $Proxy17.flush(Unknown Source) at org.springframework.orm.jpa.JpaTemplate$8.doInJpa(JpaTemplate.java:283) at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:185) ... 5 more  The classes are as below  /* * To change this template, choose Tools | Templates * and open the template in the editor.   */  package javaapplication5;  import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; import org.springframework.context.support.FileSystemXmlApplicationContext; import org.springframework.transaction.annotation.Propagation; import org.springframework.transaction.annotation.Transactional;  /** * * `@author` Purnendu   */  public class Main {      /**      * @param args the command line arguments      */          public static void main(String[] args) {         // TODO code application logic here         ApplicationContext ctx =  new ClassPathXmlApplicationContext(""applicationContext.xml"");         Test test = (Test) ctx.getBean(""Test"");         test.setTrip(20);         }  }  package javaapplication5;  import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Propagation; import org.springframework.transaction.annotation.Transactional;  /** * * `@author` Purnendu   */   public class Test {    static String text = ""fhgvjhvhuj"";   String text1;   private TestService testService;    public Test() {   text1 = ""the initiated one"";   }    String getTrip(Integer Id) {   Trip trip = getTestService().findById(100);   return trip.getDepcity();   }    void setTrip( Integer Id) {   Trip t = new Trip(968);   t.setPersonid(new Person(1));   getTestService().save(t);   }    public TestService getTestService() {   return testService;   }    public void setTestService(TestService testService) {   this.testService = testService;   }   }  /* * To change this template, choose Tools | Templates * and open the template in the editor.   */   package javaapplication5;  import org.springframework.transaction.annotation.Propagation; import org.springframework.transaction.annotation.Transactional;  /** * * `@author` Purnendu   */  public class TestService {      private TripDaoimp tripDaoimp;          public TripDaoimp getTripDaoimp() {         return tripDaoimp;     }          public void setTripDaoimp(TripDaoimp tripDaoimp) {         this.tripDaoimp = tripDaoimp;     }          Trip findById(int i) {         return getTripDaoimp().findById(i);     }               void save( Trip t) {         getTripDaoimp().save(t);     }  }  /* * To change this template, choose Tools | Templates * and open the template in the editor.   */  package javaapplication5;  import java.util.List; import org.springframework.orm.jpa.support.JpaDaoSupport; import org.springframework.transaction.annotation.Transactional; /** * * `@author` Purnendu   */   public class TripDaoimp extends JpaDaoSupport implements TripDao {    public Trip findById(Integer id) {   return getJpaTemplate().find(Trip.class, id);    }    public List\ findByName(String name) {   throw new UnsupportedOperationException(""Not supported yet."");   }    public List\ findByStreetName(String streetName) {   throw new UnsupportedOperationException(""Not supported yet."");   }    public List\ findByEntreeNameLike(String entreeName) {   throw new UnsupportedOperationException(""Not supported yet."");   }    public List\ findTripsWithVegetarianEntrees() {   throw new UnsupportedOperationException(""Not supported yet."");   }    public void save(Trip trip) {   getJpaTemplate().persist(trip);   getJpaTemplate().flush();   }    public Trip update(Trip Trip) {   throw new UnsupportedOperationException(""Not supported yet."");   }    public void delete(Trip Trip) {   throw new UnsupportedOperationException(""Not supported yet."");   }  }  \  \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \                                                                                                  \ \ \ \ \org.hibernate.ejb.HibernatePersistence\ \javaapplication5.Person\ \javaapplication5.Trip\ \ \ \ \ \ \ \ \ \   ---  **Affects:** 2.5 final","closed","in: data,","spring-projects-issues","2007-12-13T06:54:33Z","2019-01-11T17:02:47Z"
"","9433","In Spring 2.0.2 when setting sessionTransacted Messages stop receiving [SPR-4756]","**[Puneet Sachdev](https://jira.spring.io/secure/ViewProfile.jspa?name=psachdev)** opened **[SPR-4756](https://jira.spring.io/browse/SPR-4756?redirect=false)** and commented  Am using Sun Application Server ver 8.2. Have created a message listener on a queue. This works fine and receives messages. However when I add the sessionTransacted = true in the ListenerContainer configuration, the listener stops receiving any messages. I know that the messages continue to be received by the queue, because they are received when I remove the above setting of sessionTransacted. I tried even with putting a jmsTransactionManager along with sessionTransacted but I have the same problem. I do not need XA transactions.  Following is my spring config:  \ \ \ \ \ \           	     	                    	                    	     	     	     	                              ---  **Affects:** 2.0.2","closed","in: messaging,","spring-projects-issues","2008-04-26T02:44:10Z","2019-01-11T17:59:57Z"
"","9167","PagedListHolder.getNrOfElements(PagedListHolder.java:249) : NullPointerException [SPR-4489]","**[Prem of Pondicherry](https://jira.spring.io/secure/ViewProfile.jspa?name=pondyprem)** opened **[SPR-4489](https://jira.spring.io/browse/SPR-4489?redirect=false)** and commented  How to reproduce:  - take the jpetstore applicaiton that comes with spring. - create /WEB-INF/dataAccessContext-local-hibernate.xml - create hibernate dao's, mapping files, make change web.xml  Then try viewproduct like this: http://localhost:8080/sf-jpetstore/shop/viewProduct.do?productId=AV-CB-01  Hibernate: /* named HQL query getCategory \*/ select category0_.catid as catid1_, category0_.name as name1_, category0_.descn as descn1_ from CATEGORY category0_ where category0_.catid=? Category fetched=Birds Hibernate: /* named HQL query getProductListByCategory \*/ select product0_.productid as productid2_, product0_.name as name2_, product0_.descn as descn2_, product0_.category as category2_ from PRODUCT product0_ where product0_.category=? Hibernate: /* named HQL query getProductById */ select product0_.productid as productid2_, product0_.name as name2_, product0_.descn as descn2_, product0_.category as category2_ from PRODUCT product0_ where product0_.productid=? 21-Feb-2008 1:20:45 PM org.apache.catalina.core.ApplicationDispatcher invoke SEVERE: Servlet.service() for servlet jsp threw exception java.lang.NullPointerException at org.springframework.beans.support.PagedListHolder.getNrOfElements(PagedListHolder.java:249) at org.springframework.beans.support.PagedListHolder.getPageCount(PagedListHolder.java:207) at org.springframework.beans.support.PagedListHolder.getPage(PagedListHolder.java:182) at org.springframework.beans.support.PagedListHolder.getFirstElementOnPage(PagedListHolder.java:257) at org.springframework.beans.support.PagedListHolder.getPageList(PagedListHolder.java:274) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.taglibs.standard.lang.jstl.ArraySuffix.evaluate(ArraySuffix.java:278) at org.apache.taglibs.standard.lang.jstl.ComplexValue.evaluate(ComplexValue.java:107) at org.apache.taglibs.standard.lang.jstl.ELEvaluator.evaluate(ELEvaluator.java:204) at org.apache.taglibs.standard.lang.jstl.ELEvaluator.evaluate(ELEvaluator.java:163) at org.apache.taglibs.standard.lang.jstl.Evaluator.evaluate(Evaluator.java:101) at org.apache.taglibs.standard.lang.jstl.Evaluator.evaluate(Evaluator.java:129) at org.apache.taglibs.standard.lang.support.ExpressionEvaluatorManager.evaluate(ExpressionEvaluatorManager.java:75) at org.apache.taglibs.standard.tag.el.core.ForEachTag.evaluateExpressions(ForEachTag.java:155) at org.apache.taglibs.standard.tag.el.core.ForEachTag.doStartTag(ForEachTag.java:66) at org.apache.jsp.WEB_002dINF.jsp.spring.Product_jsp._jspx_meth_c_005fforEach_005f0(Product_jsp.java:632) at org.apache.jsp.WEB_002dINF.jsp.spring.Product_jsp._jspService(Product_jsp.java:199) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:393) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:320) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:654) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:445) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:379) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:292) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:142) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:243) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1141) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:878) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:792) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:475) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:430) at javax.servlet.http.HttpServlet.service(HttpServlet.java:690) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.authenticator.SingleSignOn.invoke(SingleSignOn.java:394) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Unknown Source) 21-Feb-2008 1:20:45 PM org.apache.catalina.core.StandardWrapperValve invoke SEVERE: Servlet.service() for servlet petstore threw exception java.lang.NullPointerException at org.springframework.beans.support.PagedListHolder.getNrOfElements(PagedListHolder.java:249) at org.springframework.beans.support.PagedListHolder.getPageCount(PagedListHolder.java:207) at org.springframework.beans.support.PagedListHolder.getPage(PagedListHolder.java:182) at org.springframework.beans.support.PagedListHolder.getFirstElementOnPage(PagedListHolder.java:257) at org.springframework.beans.support.PagedListHolder.getPageList(PagedListHolder.java:274) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.taglibs.standard.lang.jstl.ArraySuffix.evaluate(ArraySuffix.java:278) at org.apache.taglibs.standard.lang.jstl.ComplexValue.evaluate(ComplexValue.java:107) at org.apache.taglibs.standard.lang.jstl.ELEvaluator.evaluate(ELEvaluator.java:204) at org.apache.taglibs.standard.lang.jstl.ELEvaluator.evaluate(ELEvaluator.java:163) at org.apache.taglibs.standard.lang.jstl.Evaluator.evaluate(Evaluator.java:101) at org.apache.taglibs.standard.lang.jstl.Evaluator.evaluate(Evaluator.java:129) at org.apache.taglibs.standard.lang.support.ExpressionEvaluatorManager.evaluate(ExpressionEvaluatorManager.java:75) at org.apache.taglibs.standard.tag.el.core.ForEachTag.evaluateExpressions(ForEachTag.java:155) at org.apache.taglibs.standard.tag.el.core.ForEachTag.doStartTag(ForEachTag.java:66) at org.apache.jsp.WEB_002dINF.jsp.spring.Product_jsp._jspx_meth_c_005fforEach_005f0(Product_jsp.java:632) at org.apache.jsp.WEB_002dINF.jsp.spring.Product_jsp._jspService(Product_jsp.java:199) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:393) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:320) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:654) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:445) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:379) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:292) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:142) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:243) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1141) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:878) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:792) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:475) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:430) at javax.servlet.http.HttpServlet.service(HttpServlet.java:690) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.authenticator.SingleSignOn.invoke(SingleSignOn.java:394) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Unknown Source)    ---  **Affects:** 2.5.1  **Attachments:** - [sf-jpetstore.zip](https://jira.spring.io/secure/attachment/13674/sf-jpetstore.zip) (_568.05 kB_)","closed","type: enhancement,","spring-projects-issues","2008-02-21T04:21:17Z","2012-06-19T03:47:10Z"
"","9625","Default message Listener commiting even when no message is received [SPR-4950]","**[Prasanna Tuladhar](https://jira.spring.io/secure/ViewProfile.jspa?name=ptuladhar)** opened **[SPR-4950](https://jira.spring.io/browse/SPR-4950?redirect=false)** and commented  The DefaultMessageListener class commits even when no message is received. This operation can be fairly expensive related if one is using JTA transaction manager .  applicationContext.xml  ---           	     		com.wirecard.jms.cf.emailforwarder     	     	                         	     	                    	     		true     	     	                    	     		     	     	     		     	     	                    	     	     	     	     	     	     	       web.xml  ---           	billingWM     	commonj.work.WorkManager     	Container     	Shareable                    	     		com.wirecard.jms.cf.billingscheduler     	     	javax.jms.QueueConnectionFactory     	Container     	Shareable                    	com.wirecard.jms.cf.emailforwarder     	javax.jms.QueueConnectionFactory     	Container     	Shareable                    	     		jms/email     	     	javax.jms.Queue                    	     		jms/scheduler     	     	javax.jms.Queue       ---  **Affects:** 2.5.4  3 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2008-06-24T20:30:54Z","2019-01-13T21:52:06Z"
"","9789","Rearchitect HttpInvokerExecutor to support chunked streaming [SPR-5116]","**[Philipp Nanz](https://jira.spring.io/secure/ViewProfile.jspa?name=philipp-nanz)** opened **[SPR-5116](https://jira.spring.io/browse/SPR-5116?redirect=false)** and commented  Spring Remoting using the proven HttpInvokerExecutor mechanism has the caveat that currently each request has to converted into a byte array first before it can actually be sent to the server.  This has a number of downsides: 1) it takes more time because of copying overhead and such 2) the client needs to allocate the byte array needed to serialize the remote call  overall this issue has a great impact on performance.  Central to the HttpInvokerExecutor is the abstract base class AbstractHttpInvokerRequestExecutor with its method 	protected abstract RemoteInvocationResult doExecuteRequest( HttpInvokerClientConfiguration config, ByteArrayOutputStream baos)  I propose to change this method to something like protected abstract RemoteInvocationResult doExecuteRequest( HttpInvokerClientConfiguration config, RemoteInvocation invocation)  to give the actual implementations the freedom deal with the RemoteInvocation rather than the byte array. Then CommonsHttpInvokerRequestExecutor.java and SimpleHttpInvokerRequestExecutor.java can easily be modified to take advantage of chunking.  I have done the changes in the attached ZIP file, they should be reviewed since I couldn't test them yet. They are basically derived from a version I made for Spring 1.2.9, and there it works fine using commons httpinvoker.   ---  **Affects:** 2.5.5  **Attachments:** - [httpinvoker_chunking.zip](https://jira.spring.io/secure/attachment/14597/httpinvoker_chunking.zip) (_9.66 kB_)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-25T04:29:24Z","2015-09-22T17:34:37Z"
"","9670","setAllowRawInjectionDespiteWrapping not needed anymore... simply obsolete or bug? [SPR-4995]","**[Philipp Nanz](https://jira.spring.io/secure/ViewProfile.jspa?name=philipp-nanz)** opened **[SPR-4995](https://jira.spring.io/browse/SPR-4995?redirect=false)** and commented  Hello, I have upgraded a project from Spring 1.2.9 to Spring 2.0 and then 2.5.  The original Spring 1.2 configuration involved a circular reference of beans w/ autoproxy creator. With Spring 2.0 this caused an exception  Error creating bean with name 'x: Bean with name 'x' has been injected into other beans [y] in its raw version as part of a circular reference, but has eventually been wrapped (for example as part of auto-proxy creation) ...  which then led me to #7104.  After upgrading to Spring 2.5.5 the error message is gone again, although I haven't changed anything in the Spring Bean definitions.  This leads me to believe that the autoproxy creation process has changed somehow, meaning this flag should be dropped.. or what I'm seeing is somehow a bug.  ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-07-08T22:42:18Z","2019-01-12T16:28:08Z"
"","9654","Make RemoteInvocationTraceInterceptor configurable in RemoteExporter [SPR-4979]","**[Philipp Nanz](https://jira.spring.io/secure/ViewProfile.jspa?name=philipp-nanz)** opened **[SPR-4979](https://jira.spring.io/browse/SPR-4979?redirect=false)** and commented  RemoteExporter provides a facility to determine whether a RemoteInvocationTraceInterceptor should be registered with each proxy via RemoteExporter.setRegisterTraceInterceptor(boolean). However the class of this interceptor is hardcoded pointing to RemoteInvocationTraceInterceptor.  It would be great to be able to register a subclass of RemoteInvocationTraceInterceptor instead and to allow for RemoteInvocationTraceInterceptor to be easily subclassed with a method ala  protected void doLogException(Exception ex)  Background: In one of my projects, Runtime exceptions are routinely thrown for expected errors and I don't want them to flood the logfiles   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-03T03:09:38Z","2012-06-19T03:47:16Z"
"","9544","@PreDestroy method in test instance not executed when run with SpringJUnit4ClassRunner [SPR-4868]","**[Philip Fisher-Ogden](https://jira.spring.io/secure/ViewProfile.jspa?name=pfishero)** opened **[SPR-4868](https://jira.spring.io/browse/SPR-4868?redirect=false)** and commented  #### Overview  I have a JUnit 4 class that is being run with the SpringJUnit4ClassRunner.  I have two methods annotated with the `@PostConstruct` and `@PreDestroy` annotations, which initialize some instance variables (a Selenium-RC browser in this case).  The `@PostConstruct` method is called as expected, i.e., before any of the test methods are executed and before any `@Before` methods are run.  But, the `@PreDestroy` method does not appear to be called after all of the tests run and after the `@After` methods.  ---  #### Example  ``` ....  @RunWith(SpringJUnit4ClassRunner.class) @TestExecutionListeners({ DependencyInjectionTestExecutionListener.class}) @ContextConfiguration( locations={""classpath:my-test-context.xml""}) public class ExampleTest { 	private static final Logger logger = Logger.getLogger(ExampleTest.class); 	 	@Resource 	private Selenium browser;      @PostConstruct     public void setUpBeforeAllTests() {     	logger.info(""starting browser"");         browser.start();     }      @PreDestroy     public void tearDownAfterAllTests() {     	logger.info(""stopping browser"");         browser.stop();     }      @Before     public void setUp() throws Exception {         logger.info(""setUp()"");     }      @After     public void tearDown() throws Exception {         logger.info(""tearDown()"");     }          @Test     public void fakeTest() {     	// do nothing (for example purposes only)     } 	 } ```  ---  #### Output  ``` 2008-05-27 10:52:19.436 INFO  [main] XmlBeanDefinitionReader: Loading XML bean definitions from class path resource [my-test-context.xml] 2008-05-27 10:52:29.301 INFO  [main] GenericApplicationContext: Refreshing org.springframework.context.support.GenericApplicationContext@1fee6fc: display name [org.springframework.context.support.GenericApplicationContext@1fee6fc]; startup date [Tue May 27 10:52:29 PDT 2008]; root of context hierarchy 2008-05-27 10:52:29.301 INFO  [main] GenericApplicationContext: Bean factory for application context [org.springframework.context.support.GenericApplicationContext@1fee6fc]: org.springframework.beans.factory.support.DefaultListableBeanFactory@30d082 2008-05-27 10:52:29.651 INFO  [main] PropertyPlaceholderConfigurer: Loading properties file from class path resource [my-test.properties] 2008-05-27 10:52:30.372 INFO  [main] DefaultListableBeanFactory: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@30d082: defining beans [org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0,browser,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor]; root of factory hierarchy 2008-05-27 10:52:30.763 INFO  [main] ExampleTest: starting browser 2008-05-27 10:52:33.977 INFO  [main] ExampleTest: setUp() 2008-05-27 10:52:33.977 INFO  [main] ExampleTest: tearDown() 2008-05-27 10:52:34.218 INFO  [Thread-0] GenericApplicationContext: Closing org.springframework.context.support.GenericApplicationContext@1fee6fc: display name [org.springframework.context.support.GenericApplicationContext@1fee6fc]; startup date [Tue May 27 10:52:29 PDT 2008]; root of context hierarchy 2008-05-27 10:52:34.218 INFO  [Thread-0] DefaultListableBeanFactory: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@30d082: defining beans [org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0,browser,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor]; root of factory hierarchy ```  ---  **Affects:** 2.5.4  **Issue Links:** - #6700 ANT does not call destroy-method after tests - #12035 When testing using JUnit 4 Suite, destroy-methods are called at the end of the test suite instead of per test  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e71cd06a465228d54d373431f4b51a417013bea0  2 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-27T05:24:05Z","2019-01-13T08:03:53Z"
"","9252","Form taglib documentation should be included under Chapter 14.2 and not Chapter 13 [SPR-4575]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-4575](https://jira.spring.io/browse/SPR-4575?redirect=false)** and commented  I'm filing this as a bug rather than an enhancement because I believe it's truly wrong ;)  The section on the new Spring 2.x form taglib should be located under Chapter/Section 14.2 ""JSP & JSTL"", rather than Chapter 13. Chapter 13 deals with view-independent topics, such as controllers and MVC workflow. Chapter 14 deals with view-dependent topics, of which the JSP/JSTL implementation is but one. Thus it doesn't make sense to introduce the form taglib outside of the JSP/JSTL space.   ---  **Affects:** 2.5.2","closed","type: documentation,","spring-projects-issues","2008-03-12T23:28:47Z","2012-06-19T03:47:02Z"
"","9224","form:form tag should support the target attribute [SPR-4547]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-4547](https://jira.spring.io/browse/SPR-4547?redirect=false)** and commented  Filing as a bug because this is a valid attribute of the HTML FORM tag, and quite commonly used in applications which submit forms to IFRAMEs or new windows.  The form:form tag currently does not support the 'target' attribute as defined in the HTML 4.01 specification here: http://www.w3.org/TR/html401/interact/forms.html#h-17.3  This means that users desiring this functionality must resort to a kludgey Javascript-based workaround such as those discussed in the following two forum threads: http://forum.springframework.org/showthread.php?t=44044 http://forum.springframework.org/showthread.php?t=46730  The lack of this tag does hamper the ability of a Spring-managed form to be part of some types of dynamic web applications. This really should be fixed, since the fix is simply to add a single attribute to FormTag.java and the TLD.  Thanks for listening!   ---  **Affects:** 2.5.2  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-03-05T15:21:37Z","2012-06-19T03:47:31Z"
"","9159","Significant typo in Spring 2.5 MVC Step-by-Step Part 6 [SPR-4482]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-4482](https://jira.spring.io/browse/SPR-4482?redirect=false)** and commented  Basically the program listing in Step 6.1 contains obviously incorrect syntax:  \ package springapp.service; 40  41 import java.util.List; 42  43 import springapp.domain.Product; 44  45 public class SimpleProductManager implements ProductManager { 46  \   47     privapackage springapp.service; 48  49 import java.util.List; 50  51 import springapp.domain.Product; 52 import springapp.repository.ProductDao; 53  54 public class SimpleProductManager implements ProductManager {\ \  (Lines 47-54, if JIRA doesn't like the HTML markup). This should definitely be fixed :)  This is also wrong in CVS trunk: http://springframework.cvs.sourceforge.net/springframework/spring/docs/MVC-step-by-step/src/part6.xml?revision=1.8&view=markup  This was reported by a user in the forum: http://forum.springframework.org/showthread.php?t=49493  Thanks!   ---  **Affects:** 2.5 final, 2.5.1","closed","status: declined,","spring-projects-issues","2008-02-20T03:40:24Z","2012-06-14T08:40:15Z"
"","9131","NullPointerException in badly-annotated Spring MVC Controller [SPR-4453]","**[Peter Mularien](https://jira.spring.io/secure/ViewProfile.jspa?name=pmularien)** opened **[SPR-4453](https://jira.spring.io/browse/SPR-4453?redirect=false)** and commented  Create a controller similar to the following:  `@Controller` `@RequestMapping`(""/listProfessions.do"") public class ListProfessionsController { [snip] `@RequestMapping`(method=RequestMethod.GET) public List\ list() { return professionDao.listProfessions(); } }  At runtime, you will get an exception with the following stack trace (truncated for readability):  java.lang.NullPointerException org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ArgumentsResolver.getModelAndView(AnnotationMethodHandlerAdapter.java:768) org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:264) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875)  From reading the relevant code, this error occurs in the following specific scenario: - The handler method returns an Object - The handler method does not return a Map, Model, ModelAndView, View, or String - The annotation `@ModelAttribute` does not appear in the method arguments or on the return parameter  The code on that line assumes that in this scenario, an `@ModelAttribute` annotation is present, and does not check (and fail safely / with an error or warning) if it is not.  Fortunately this is easily avoided by adding this annotation where appropriate.   ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-02-11T14:02:52Z","2012-06-19T03:47:09Z"
"","9558","NumberUtils not converting BigDecimal to BigInteger correctly (overflow error) [SPR-4882]","**[Peter Ledbrook](https://jira.spring.io/secure/ViewProfile.jspa?name=pledbrook)** opened **[SPR-4882](https://jira.spring.io/browse/SPR-4882?redirect=false)** and commented  NumberUtils.convertNumberToTargetClass() converts a BigDecimal value to a ""long"" before converting to a BigInteger instance. Try this test:  ``` String number = ""987459837583750387355346""; BigDecimal decimal = new BigDecimal(number); assertEquals(new BigInteger(number), NumberUtils.convertNumberToTargetClass(decimal, BigInteger.class)); ```  ---  **Affects:** 2.5.2  **Issue Links:** - #6483 NumberUtils: NumberFormat and BigDecimal","closed","in: core,","spring-projects-issues","2008-06-02T00:05:40Z","2019-01-11T19:08:38Z"
"","9671","Messages.properties file in russian [SPR-4996]","**[Pete](https://jira.spring.io/secure/ViewProfile.jspa?name=experimenter)** opened **[SPR-4996](https://jira.spring.io/browse/SPR-4996?redirect=false)** and commented  Hello everybody,  Apologies if this is the wrong project. If so please move it to a more suitable one. So, I have translated properties file in Russian and wanted to share it as specified here http://www.acegisecurity.org/guide/springsecurity.html#localization   --- No further details from [SPR-4996](https://jira.spring.io/browse/SPR-4996?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-07-08T23:37:53Z","2012-06-19T09:36:25Z"
"","9121","ShadowingClassLoader.doLoadClass(String) throws a StringIndexOutOfBoundsException during parsing packageName for the class under the default package(no package) [SPR-4443]","**[Pengling Qian](https://jira.spring.io/secure/ViewProfile.jspa?name=pqian)** opened **[SPR-4443](https://jira.spring.io/browse/SPR-4443?redirect=false)** and commented  I have created a test class extended AbstractJpaTests under the default package(i.e. no package). The exception is as follows: java.lang.StringIndexOutOfBoundsException: String index out of range: -1 at java.lang.String.substring(String.java:1938) at org.springframework.instrument.classloading.ShadowingClassLoader.doLoadClass(ShadowingClassLoader.java:194) at org.springframework.instrument.classloading.ShadowingClassLoader.loadClass(ShadowingClassLoader.java:131) at org.springframework.test.jpa.AbstractJpaTests.runBare(AbstractJpaTests.java:235) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:124) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)  I have reviewd the source code, in method doLoadClass(string name)      ...     if (cls.getPackage() == null) {     	String packageName = name.substring(0, name.lastIndexOf('.'));     	definePackage(packageName, null, null, null, null, null, null, null);     }     ...  The given name is a fully qualified class name, in this case, it is just a simple class name without any package path. So name.lastIndexOf('.') returned -1, and name.substring(0, -1) threw the StringIndexOutOfBoundsException, an unchecked exception.   ---  **Affects:** 2.0.6, 2.0.7, 2.0.8, 2.5 final, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-02-10T19:28:57Z","2019-01-11T17:33:12Z"
"","9793","Spring component scanning does not work within JBoss EJB container [SPR-5120]","**[Pedro Santos](https://jira.spring.io/secure/ViewProfile.jspa?name=pedrosans)** opened **[SPR-5120](https://jira.spring.io/browse/SPR-5120?redirect=false)** and commented  The spring scanner functionality do not work when I create my ApplicationContext from a EJB managed by JBoss. I do test the same spring application context on diferents enviroments. Just on a managed EJB on a JBoos it is not workin.  EJB code appContext = new GenericApplicationContext(); ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(appContext); scanner.scan(""com""); appContext.refresh();  Annotated class `@Service` public class TransactionService {  Exception ERROR: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'transactionService' is defined  ---  **Affects:** 2.5.5  **Attachments:** - [jboss-as-sprint-int-5.0.0.GA.jar](https://jira.spring.io/secure/attachment/15061/jboss-as-sprint-int-5.0.0.GA.jar) (_35.76 kB_) - [jboss-spring-int-vfs.jar](https://jira.spring.io/secure/attachment/15612/jboss-spring-int-vfs.jar) (_14.52 kB_) - [vfs.patch](https://jira.spring.io/secure/attachment/15382/vfs.patch) (_12.14 kB_) - [vfs-fixes-2.patch](https://jira.spring.io/secure/attachment/15386/vfs-fixes-2.patch) (_15.39 kB_) - [vfs-fixes-3.patch](https://jira.spring.io/secure/attachment/15387/vfs-fixes-3.patch) (_15.66 kB_)  **Issue Links:** - #10814 JBoss AS 5.0 VFS handling (SPR-5120) backport 2.5.X (_**""is depended on by""**_) - #11051 Context Scanning doesnt work in Jboss 5 (_**""is duplicated by""**_) - #10013 PathMatchingResourcePatternResolver.determineRootDir fails for jar on JBoss - #10454 PersistenceUnitReader#determinePersistenceUnitRootUrl returns wrong root url on JBoss 5, causing no detection of entity beans  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/184f63f68951ed1c199dddc27a6a266f09e9e0ce, https://github.com/spring-projects/spring-framework/commit/10c30f0315b41cd3168a7d6c8b984a12f49c62b1, https://github.com/spring-projects/spring-framework/commit/64c46d48bb916bc52ff2f38b4f5d4a9ffb5b794c  24 votes, 34 watchers","closed","has: votes-jira,","spring-projects-issues","2008-08-27T04:12:18Z","2019-01-11T15:39:11Z"
"","9773","AnnotationSessionFactoryBean doesn't respect ""hibernate.hbm2ddl.auto"" property [SPR-5100]","**[Pedro Santos](https://jira.spring.io/secure/ViewProfile.jspa?name=pedrosans)** opened **[SPR-5100](https://jira.spring.io/browse/SPR-5100?redirect=false)** and commented  hibernate configuration on class ""org.springframework.orm.hibernate3.annotation.Ann otationSessionFactoryBean"" don't respect my ""hibernate.hbm2ddl.auto"" property. I have set it to create, update... but is just work like I set it to ""false"". The other properties works fine. Example(dialect, show_sql)   --- No further details from [SPR-5100](https://jira.spring.io/browse/SPR-5100?redirect=false)","closed","in: data,","spring-projects-issues","2008-08-19T03:20:41Z","2019-01-11T15:33:06Z"
"","9505","MailSendException is prone to Null Pointer Exceptions [SPR-4829]","**[Pavitar Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=psingh)** opened **[SPR-4829](https://jira.spring.io/browse/SPR-4829?redirect=false)** and commented  When MailSendException is thrown from JavaMailSenderImpl method doSend line no: 419, then if on this exception object if we do printStackTrace or getMessage or toString  it results in Null Pointer Exception as its array messageExceptions is null.  ---  **Affects:** 2.5 final  **Issue Links:** - #8817 NullPointerException in MailSendException (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-05-17T20:33:58Z","2019-01-12T16:50:53Z"
"","9349","Spring 2.5 bean factory is not thread-safe for lazy-init singletons [SPR-4672]","**[Pavitar Singh](https://jira.spring.io/secure/ViewProfile.jspa?name=psingh)** opened **[SPR-4672](https://jira.spring.io/browse/SPR-4672?redirect=false)** and commented  When i have beans with lazy-init configuration, and those beans i use in DefaultMessageContainer then i was getting Beans not copletely initialized.This was happening under heavy load only, so a case of typical Concurrency issues. I tried to analyze the problem and i have created a blog enrty for my analysis:  http://pitfalls.wordpress.com/2008/04/06/springconcurrency/   ---  **Affects:** 2.5.1","closed","in: core,","spring-projects-issues","2008-04-07T17:10:55Z","2012-06-19T03:46:59Z"
"","9516","StatementCreatorUtils has unproper values in SQL-types map [SPR-4840]","**[Pavel Marinchev](https://jira.spring.io/secure/ViewProfile.jspa?name=paulisio)** opened **[SPR-4840](https://jira.spring.io/browse/SPR-4840?redirect=false)** and commented  The class StatementCreatorUtils has the following SQL-type mapping for long and Long Java-types:  Line 73: javaTypeToSqlTypeMap.put(long.class, new Integer(Types.INTEGER)); javaTypeToSqlTypeMap.put(Long.class, new Integer(Types.INTEGER));  Should be: javaTypeToSqlTypeMap.put(long.class, new Integer(Types.BIGINT)); javaTypeToSqlTypeMap.put(Long.class, new Integer(Types.BIGINT));  This causes serious problems when updating records in the DB with real long values (ex. 4415000122). For my case it rises IntegrityConstraintViolationException when I try to update some record's field with this value that's actually a foreign key on another entity. It does so, because it casts Long values to Integer ones according to the SQL-type mapping in the StatementCreatorUtils class.  I'm using BeanPropertySqlParameterSource class instance to provide my query with parameters.   ---  **Affects:** 2.5.3","closed","type: bug,","spring-projects-issues","2008-05-20T05:14:56Z","2012-06-19T03:47:17Z"
"","9608","Locale objects in model are not appended to GET parameters when using redirect: [SPR-4933]","**[Pauli Borodulin](https://jira.spring.io/secure/ViewProfile.jspa?name=boro)** opened **[SPR-4933](https://jira.spring.io/browse/SPR-4933?redirect=false)** and commented  Using Spring 2.0.x, this worked as expected:  Map model = new HashMap(); model.put(""language"", new Locale(""fi"")); return new ModelAndView(""redirect:otherController.htm"", model);  I.e. this produced URL of form ""otherController.htm?language=fi"". But when using Spring 2.5.4, this is not the case. Instead, no parameter is not appended for ""language"". As a workaround I have replaced Locale objects with Locale.getLanguage(), which works ok, but I wonder why the old way does not work anymore.   ---  **Affects:** 2.5.4","closed","type: bug,","spring-projects-issues","2008-06-18T18:31:06Z","2012-06-19T03:47:15Z"
"","9600","Spring uses wrong default encoding scheme for encoding model values when using redirect: [SPR-4925]","**[Pauli Borodulin](https://jira.spring.io/secure/ViewProfile.jspa?name=boro)** opened **[SPR-4925](https://jira.spring.io/browse/SPR-4925?redirect=false)** and commented  Spring does not correctly encode model values in URLs when using redirect: with ModelAndView.  Steps to reproduce: Create an AbstractController with handleRequestInternal containing:  Map model = new HashMap(); model.put(""param"", ""ÄÖLK""); return new ModelAndView(""redirect:otherController.htm"", model);  This should produce URL containing GET-parameter ""param=%C4%D6LK"". Instead, this is produced: ""param=%C3%84%C3%96LK"". The behaviour is the same with Firefox 2.0.0.14 and Internet Explorer 7.    ---  **Affects:** 2.5.4","closed","type: bug,","spring-projects-issues","2008-06-16T01:33:43Z","2012-06-19T03:47:09Z"
"","9486","SimpleMappingExceptionResolver does not set javax.servlet.error.status_code on request [SPR-4810]","**[Pauli Borodulin](https://jira.spring.io/secure/ViewProfile.jspa?name=boro)** opened **[SPR-4810](https://jira.spring.io/browse/SPR-4810?redirect=false)** and commented  If using org.springframework.web.servlet.handler.SimpleMappingExceptionResolver for error handling, it is not possible to use isErrorPage=""true"" directive in relevant JSP pages on Glassfish V2 u2. This problem can also be reproduced in Sun Java System Application Server 9.1 u2, which is a rebranded Glassfish V2 u2.  The problem lies in SimpleMappingExceptionResolver.doResolveException. It calls applyStatusCodeIfPossible to set the status code on the request, but it doesn't set javax.servlet.error.status_code. Glassfish expects that javax.servlet.error.status_code is in the request on JSP error pages, but since it's not there, NullPointerException is thrown.  ---  **Affects:** 2.0.8  **Issue Links:** - #9648 2.5.5 DispatchServlet exposes jsp error page attributes to container and breaks ExceptionResolver","closed","type: enhancement,","spring-projects-issues","2008-05-13T21:52:27Z","2019-01-11T19:02:26Z"
"","9847","@TransactionConfiguration doesn't respect non default bean name [SPR-5174]","**[Paul Sundling](https://jira.spring.io/secure/ViewProfile.jspa?name=sundling)** opened **[SPR-5174](https://jira.spring.io/browse/SPR-5174?redirect=false)** and commented  When using a non default name for a transaction manager bean, the `@TransactionConfiguration` is supposed to override that default and this does not seem to work.  Tested on 2.5.4 and 2.5.5.  To reproduce the problem, use a non default name and the annotation to override that value.  For my failure, these are the annotations used:  `@TransactionConfiguration`(transactionManager = ""league.dao.txManager"", defaultRollback = true) `@ContextConfiguration`(locations = { ""classpath:league-dao.xml"", ""classpath:league-service.xml"" }) `@RunWith`(SpringJUnit4ClassRunner.class) `@TestExecutionListeners`( { DependencyInjectionTestExecutionListener.class, TransactionalTestExecutionListener.class }) `@Transactional`  Case 1: transaction Manager named transactionManager  NO `@TransactionConfiguration` Expected: Should Work Actual: As expected, works  Case 2: transaction Manager named transactionManager  WITH `@TransactionConfiguration` (league.dao.txManager) Expected: Should fail complaining can't find league.dao.txManager bean Actual: As expected, fail complaining can't find league.dao.txManager bean  Case 3:  transaction Manager named league.dao.txManager NO `@TransactionConfiguration` Expected: Should fail complaining can't find transactionManager bean Actual: As expected, fail complaining can't find transactionManager bean  Case 4: transaction Manager named league.dao.txManager WITH `@TransactionConfiguration` (league.dao.txManager) Expected: Should Work Actual: Fails complaining can't find transactionManager bean (BUG)  So the easy work around is to use the default name (transactionManager) for the transactionManager bean.   ---  **Affects:** 2.5.5  **Attachments:** - [league-dao.xml](https://jira.spring.io/secure/attachment/14708/league-dao.xml) (_5.85 kB_) - [PlayerHibernateDAOTest.java](https://jira.spring.io/secure/attachment/14707/PlayerHibernateDAOTest.java) (_2.54 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/59360f4f65e6a85e69c51290e1506ca7da20502c","closed","status: declined,","spring-projects-issues","2008-09-23T06:08:33Z","2019-01-12T16:27:53Z"
"","9662","equivalent of spring:nestedPath for velocity tags [SPR-4986]","**[Paul Sundling](https://jira.spring.io/secure/ViewProfile.jspa?name=sundling)** opened **[SPR-4986](https://jira.spring.io/browse/SPR-4986?redirect=false)** and commented  spring.vm does not have the equivalent of the  JSP tag.  i.e   \ ...  \ ...    It doesn't seem too hard to modify velocity.vm in org.springframework.web.servlet.view.velocity package to add the same feature for velocity.  I've seen posts for it on forums without any suggestions.  I'd be willing to help if there is any interest.   ---  **Affects:** 2.5.5  **Attachments:** - [VelocityNestedPathPart1.txt](https://jira.spring.io/secure/attachment/14378/VelocityNestedPathPart1.txt) (_5.05 kB_)","closed","type: enhancement,","spring-projects-issues","2008-07-05T13:05:13Z","2012-06-19T09:36:15Z"
"","9245","Using System property placeholders in ""contextConfigLocation"" fails in 2.5.2 [SPR-4568]","**[Paul Nyheim](https://jira.spring.io/secure/ViewProfile.jspa?name=hurragutt)** opened **[SPR-4568](https://jira.spring.io/browse/SPR-4568?redirect=false)** and commented  We have been using an undocumented feature of the ContextLoader (and ContextLoaderListener) where System properties in the ""contextConfigLocation"" in web.xml would be resolved autmatically.  i.e. \ \contextConfigLocation\ \ classpath:/dao-provider-${deployment.environment}.xml \ \  This worked like a charm up to version 2.5.1, but in 2.5.2 there was a change in the ContextLoader which changed the behaviour of the context initialization.  Since this has been an undocumented feature - I am not sure whether this is actually a real bug, but we will still depend on this feature. Our current workaround is to extend ContextLoader and ContextLoaderListener, and provide an implementation of the customizeContext method where we can resolve the System properties ourselves.  The only difference I can find is that in 2.5.1 the ContextLoader.createWebApplicationContext() method would invoke the ConfigurableWebApplicationContext.setConfigLocations() method with the configLocations from web.xml. In 2.5.2 this was changed to invoke the ConfigurableWebApplicationContext.setConfigLocation() (notice the plural/singural difference here).  Tracing it down to AbstractRefreshableConfigApplicationContext I find that the outcome of the setConfigLocation and setConfigLocations respectively is in deed different if the input contains System.property placeholders.   ---  **Affects:** 2.5.2  **Attachments:** - [testcase.zip](https://jira.spring.io/secure/attachment/13761/testcase.zip) (_1.77 kB_)  1 votes, 1 watchers","closed","type: bug,","spring-projects-issues","2008-03-11T02:47:21Z","2012-06-19T03:46:45Z"
"","9308","JdbcTemplate incorrectly passes output parameters to stored procedure call as input parameters [SPR-4631]","**[Paul Newport](https://jira.spring.io/secure/ViewProfile.jspa?name=paulnewport)** opened **[SPR-4631](https://jira.spring.io/browse/SPR-4631?redirect=false)** and commented  I would class this bug as major is stored procedure support for the iSeries is broken in Spring 2.5.2.  Calling a stored procedure on the iSeries with 1 input parameter and 3 output parameters, using JDBC template and ParameterizedBeanPropertyRowMapper as follows:  getInsuranceTransactionsSP = new SimpleJdbcCall(jdbcTemplate) .withProcedureName(SP_GETINSURANCE).withSchemaName( defaultSchema).returningResultSet( ""transactions"", ParameterizedBeanPropertyRowMapper .newInstance(InsuranceTransaction.class));  This worked fine in Spring 2.5.1  In 2.5.2 it no longer works.  This is because when it calls the stored procedure, it calls it with both the input AND the output parameters, rather than just the input.  As a result the JDBC driver throws an exception (trace shown at end)  Looking at the code for JDBCTemplate it seems that this method:  public Map call(CallableStatementCreator csc, List declaredParameters) throws DataAccessException  is not checking to see whether a whether a declared parameter is an instance of SQLOutParameter. It should not call callParameters.add(parameter); if the parameter is an out parameter.  I have tried the same test against MySQL and this is OK, it is only on DB2 for iSeries that I am having the problem. My understanding is MySQL will ignore spurious input parameters, whereas the iSeries is more picky.  If you look at the logging below you can see that it is doing:  call ICFS003DF.SP_GETINSURANCE(?, ?, ?, ?)}]  when it should be doing  call ICFS003DF.SP_GETINSURANCE(?)}]  2008-03-27 09:25:45,885 [main] DEBUG org.springframework.jdbc.core.metadata.CallMetaDataContext - Added metadata in parameter for: MAXNUMBEROFREC 2008-03-27 09:25:45,885 [main] DEBUG org.springframework.jdbc.core.metadata.CallMetaDataContext - Added metadata out parameter for: MORERECORDS 2008-03-27 09:25:45,885 [main] DEBUG org.springframework.jdbc.core.metadata.CallMetaDataContext - Added metadata out parameter for: RETURNCODE 2008-03-27 09:25:45,885 [main] DEBUG org.springframework.jdbc.core.metadata.CallMetaDataContext - Added metadata out parameter for: ERRORMESSAGE 2008-03-27 09:25:45,885 [main] DEBUG org.springframework.jdbc.core.simple.SimpleJdbcCall - Compiled stored procedure. Call string is [{call ICFS003DF.SP_GETINSURANCE(?, ?, ?, ?)}] 2008-03-27 09:25:45,885 [main] DEBUG org.springframework.jdbc.core.simple.SimpleJdbcCall - SqlCall for procedure [SP_GETINSURANCE] compiled 2008-03-27 09:25:45,901 [main] DEBUG org.springframework.jdbc.core.metadata.CallMetaDataContext - Matching [ERRORMESSAGE, RETURNCODE, MORERECORDS, maxNumberOfRec, class, transactions] with [transactions, MAXNUMBEROFREC, MORERECORDS, RETURNCODE, ERRORMESSAGE] 2008-03-27 09:25:45,917 [main] DEBUG org.springframework.jdbc.core.metadata.CallMetaDataContext - Found [ERRORMESSAGE, RETURNCODE, MORERECORDS, transactions, MAXNUMBEROFREC] 2008-03-27 09:25:45,917 [main] DEBUG org.springframework.jdbc.core.simple.SimpleJdbcCall - The following parameters are used for call {call ICFS003DF.SP_GETINSURANCE(?, ?, ?, ?)} with: {ERRORMESSAGE=org.springframework.jdbc.core.SqlParameterValue@6b386b38, RETURNCODE=org.springframework.jdbc.core.SqlParameterValue@6b0c6b0c, MORERECORDS=org.springframework.jdbc.core.SqlParameterValue@6ae06ae0, transactions=null, MAXNUMBEROFREC=org.springframework.jdbc.core.SqlParameterValue@6aae6aae} 2008-03-27 09:25:45,917 [main] DEBUG org.springframework.jdbc.core.simple.SimpleJdbcCall - 1: transactions SQL Type 0 Type Name null org.springframework.jdbc.core.SqlReturnResultSet 2008-03-27 09:25:45,917 [main] DEBUG org.springframework.jdbc.core.simple.SimpleJdbcCall - 2: MAXNUMBEROFREC SQL Type 3 Type Name null org.springframework.jdbc.core.SqlParameter 2008-03-27 09:25:45,917 [main] DEBUG org.springframework.jdbc.core.simple.SimpleJdbcCall - 3: MORERECORDS SQL Type 1 Type Name null org.springframework.jdbc.core.SqlOutParameter 2008-03-27 09:25:45,917 [main] DEBUG org.springframework.jdbc.core.simple.SimpleJdbcCall - 4: RETURNCODE SQL Type 1 Type Name null org.springframework.jdbc.core.SqlOutParameter 2008-03-27 09:25:45,917 [main] DEBUG org.springframework.jdbc.core.simple.SimpleJdbcCall - 5: ERRORMESSAGE SQL Type 1 Type Name null org.springframework.jdbc.core.SqlOutParameter 2008-03-27 09:29:38,659 [main] DEBUG org.springframework.jdbc.core.JdbcTemplate - Calling stored procedure [{call ICFS003DF.SP_GETINSURANCE(?, ?, ?, ?)}]  org.springframework.jdbc.UncategorizedSQLException: CallableStatementCallback; uncategorized SQLException for SQL [{call ICFS003DF.SP_GETINSURANCE(?, ?, ?, ?)}]; SQL state [HY105]; error code [-99999]; Parameter type not valid.; nested exception is java.sql.SQLException: Parameter type not valid. at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.translate(SQLStateSQLExceptionTranslator.java:124) at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:322) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:949) at org.springframework.jdbc.core.JdbcTemplate.call(JdbcTemplate.java:982) at org.springframework.jdbc.core.simple.AbstractJdbcCall.executeCallInternal(AbstractJdbcCall.java:362) at org.springframework.jdbc.core.simple.AbstractJdbcCall.doExecute(AbstractJdbcCall.java:336) at org.springframework.jdbc.core.simple.SimpleJdbcCall.execute(SimpleJdbcCall.java:166) at net.targetgroup.bpfcentrac.nbi.dao.CentracDaoSpImpl.executeGetInsuranceTransactionsSP(CentracDaoSpImpl.java:130) at net.targetgroup.bpfcentrac.nbi.dao.CentracDaoSpImpl.getInsuranceTransactions(CentracDaoSpImpl.java:106) at net.targetgroup.bpfcentrac.nbi.dao.CentracDaoTest.getInsuranceTransactions(CentracDaoTest.java:31) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:615) at org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:198) at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:252) at org.springframework.test.context.junit4.SpringMethodRoadie$2.run(SpringMethodRoadie.java:194) at org.springframework.test.context.junit4.SpringMethodRoadie.runBeforesThenTestThenAfters(SpringMethodRoadie.java:235) at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:218) at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:192) at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:140) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:151) at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51) at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44) at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27) at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37) at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: java.sql.SQLException: Parameter type not valid. at com.ibm.as400.access.JDError.throwSQLException(JDError.java:389) at com.ibm.as400.access.AS400JDBCPreparedStatement.setValue(AS400JDBCPreparedStatement.java:2930) at com.ibm.as400.access.AS400JDBCPreparedStatement.setNull(AS400JDBCPreparedStatement.java:2357) at org.apache.commons.dbcp.DelegatingPreparedStatement.setNull(DelegatingPreparedStatement.java:104) at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:238) at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:124) at org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl.createCallableStatement(CallableStatementCreatorFactory.java:205) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:927) ... 30 more    ---  **Affects:** 2.5.2  **Attachments:** - [output.txt](https://jira.spring.io/secure/attachment/13848/output.txt) (_15.87 kB_)","closed","in: core,","spring-projects-issues","2008-03-26T21:34:01Z","2018-03-16T14:01:50Z"
"","9122","Typo in documentation - the word token is mis-spelt as toekn  [SPR-4444]","**[Paul Newport](https://jira.spring.io/secure/ViewProfile.jspa?name=paulnewport)** opened **[SPR-4444](https://jira.spring.io/browse/SPR-4444?redirect=false)** and commented  In section ""6.2.3.1. Supported Pointcut Designators"" the word token is mis-spelt. See below:  The 'idOrNameOfBean' toekn can be the name of any Spring bean:   ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-02-10T20:12:00Z","2012-06-19T03:46:47Z"
"","9027","Typo in documentation - libary instead of library [SPR-4348]","**[Paul Newport](https://jira.spring.io/secure/ViewProfile.jspa?name=paulnewport)** opened **[SPR-4348](https://jira.spring.io/browse/SPR-4348?redirect=false)** and commented  Section 3.10 of the main spring documentation.  Line:  Since Spring 2.5, it is possible to deploy a Spring ApplicationContext as a RAR file, encapsulating the context and all of its required bean classes and libary JARs in a J2EE RAR deployment unit.  Should read:  Since Spring 2.5, it is possible to deploy a Spring ApplicationContext as a RAR file, encapsulating the context and all of its required bean classes and library JARs in a J2EE RAR deployment unit.    ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-01-17T01:58:13Z","2012-06-19T03:46:47Z"
"","9864","HandlerMethodResolver doesn't work with Bridged methods  [SPR-5191]","**[Paul Middelkoop](https://jira.spring.io/secure/ViewProfile.jspa?name=paulm)** opened **[SPR-5191](https://jira.spring.io/browse/SPR-5191?redirect=false)** and commented  Following construct doesn't work in a Controller.  Superclass: `@RequestMapping`(params = ""action=edit"", method = RequestMethod.GET) public String delete(`@RequestParam`(""id"") ID id) {...}  Subclass: `@Override` public String delete(`@RequestParam`(""id"") Integer id)  {...}  ID extends Serialiazable.  The HandlerMethodResolver resolved the method Subclass.delete(Serializable). This is incorrect: it should get the bridged method Subclass.delete(Integer), so it can resolve the `@RequestParam` annotations.  I think this wil be fixed if BridgeMethodResolver.findBridgedMethod(method) is called after using ClassUtils.getMostSpecificMethod().   ---  **Affects:** 2.5.5","closed","type: bug,","spring-projects-issues","2008-10-01T01:49:12Z","2012-06-19T03:47:01Z"
"","9430","BindingResult argument only resolved right after model attribute argument [SPR-4753]","**[Paul Middelkoop](https://jira.spring.io/secure/ViewProfile.jspa?name=paulm)** opened **[SPR-4753](https://jira.spring.io/browse/SPR-4753?redirect=false)** and commented  Consider the following method signature: `@RequestMapping`(params = ""action=submitAndPreview"", method = RequestMethod.POST) public void submitAndPreview( `@SuppressWarnings`(""unused"") `@ModelAttribute`(BasicController.ATTRIBUTE_ENTITY) Item item, `@ModelAttribute`(ItemNodeController.ATTRIBUTE_NODE) ItemNode node, `@RequestParam`(""languageId"") Integer languageId, HttpSession session, BindingResult result Writer responseWriter) {  When calling thus methid I got the exception ""java.lang.IllegalStateException: Errors/BindingResult argument declared without preceding model attribute. Check your handler method signature!""  After playing around with the method signature I noticed that the `@RequestParam` parameter results in this exception. When I remove this parameter or move it to the end of the parameter list it works.  ---  **Affects:** 2.5.3  **Issue Links:** - #12016 About `@ModelAttribute`, two commands, BindingResult","closed","type: enhancement,","spring-projects-issues","2008-04-24T18:08:26Z","2019-01-13T08:04:14Z"
"","9330","Overriding a @RequestMapping method and parameter name resolving doesn't work [SPR-4653]","**[Paul Middelkoop](https://jira.spring.io/secure/ViewProfile.jspa?name=paulm)** opened **[SPR-4653](https://jira.spring.io/browse/SPR-4653?redirect=false)** and commented  Superclass: `@RequestMapping`(params = ""action=edit"", method = RequestMethod.GET) public String edit(`@RequestParam`(""id"") ID id, ModelMap model) {...}  Subclass: `@Override` public String edit(ID id, ModelMap model)  {...}  Spring cannot get the parameter names for parameter 'id' and throws an exception when I invoke the edit method of the subclass. See stacktrace below. If I add a `@RequestParam` in the overriding method, it works.  Correct behaviour in my opinion is to check the parameter names from the superclass if the subclass cannot retrieve the parameter names. It's not a big deal, but this worked fine in Spring 2.5.1.  Stacktrace: java.lang.NullPointerException java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:881) org.springframework.core.LocalVariableTableParameterNameDiscoverer.getParameterNames(LocalVariableTableParameterNameDiscoverer.java:69) org.springframework.core.MethodParameter.getParameterName(MethodParameter.java:229) org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveArguments(HandlerMethodInvoker.java:179) org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:114) org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:285) org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:273) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:874)   ---  **Affects:** 2.5.2","closed","type: bug,","spring-projects-issues","2008-04-02T20:30:47Z","2012-06-19T03:47:10Z"
"","9250","for doesn't work when with a map element [SPR-4573]","**[Paul Middelkoop](https://jira.spring.io/secure/ViewProfile.jspa?name=paulm)** opened **[SPR-4573](https://jira.spring.io/browse/SPR-4573?redirect=false)** and commented  The ""for"" attribute is not correctly set when using an element from a Map.     The ""for"" attribute will be ""titles[3].text"", but the id of the input field will be ""titles3.text"". I know I can manually override the ""for"" attribute, but I think it would be better if Spring handles this.   ---  **Affects:** 2.5.2","closed","type: bug,","spring-projects-issues","2008-03-12T00:49:59Z","2012-06-19T03:47:13Z"
"","8992","@RequestParam does't work with generics [SPR-4313]","**[Paul Middelkoop](https://jira.spring.io/secure/ViewProfile.jspa?name=paulm)** opened **[SPR-4313](https://jira.spring.io/browse/SPR-4313?redirect=false)** and commented  It seems like I can't use a generic type as `@RequestParam`. Spring converts the parameter to a  org.springframework.ui.ExtendedModelMap instead of the correct generic type.  Example:  public abstract class CrudController { `@RequestMapping`(params = ""action=delete"", method = RequestMethod.GET) public String delete(`@RequestParam`(""id"") ID id) {..} }  public class QuestionControlller extends ToolboxCrudController { }  It should be possible for Spring MVC to notice that ID should be a Integer right?   ---  **Affects:** 2.5 final, 2.5.1","closed","type: bug,","spring-projects-issues","2008-01-09T20:41:47Z","2012-06-19T03:46:56Z"
"","8969","Overriding handler methods with same @RequestMapping annotation doesn't work [SPR-4291]","**[Paul Middelkoop](https://jira.spring.io/secure/ViewProfile.jspa?name=paulm)** opened **[SPR-4291](https://jira.spring.io/browse/SPR-4291?redirect=false)** and commented  I have a base controller with a `@RequestMapping` at method level. I subclass this base controller and specify the base URL in a `@RequestMapping` at type level. In the 2.5.1 nightly build you cannot override the `@RequestMapping` method. A java.lang.IllegalStateException: Ambiguous handler methods mapped for HTTP path is thrown. Isn't is more logical  in this case to go with the overriding method?   ---  **Affects:** 2.5 final","closed","type: bug,","spring-projects-issues","2008-01-02T00:02:56Z","2012-06-19T03:47:28Z"
"","8902","@InitBinder not called when displaying a form [SPR-4224]","**[Paul Middelkoop](https://jira.spring.io/secure/ViewProfile.jspa?name=paulm)** opened **[SPR-4224](https://jira.spring.io/browse/SPR-4224?redirect=false)** and commented  The `@InitBinder` is not called when displaying a form. This makes it impossible to use custom date editors.  See http://forum.springframework.org/showthread.php?p=154769 and http://forum.springframework.org/showthread.php?t=46837.   ---  **Affects:** 2.5 final","closed","type: bug,","spring-projects-issues","2007-12-06T20:08:51Z","2012-06-19T03:46:38Z"
"","9844","Incompatible with JUnit 4.5 [SPR-5171]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-5171](https://jira.spring.io/browse/SPR-5171?redirect=false)** and commented  Spring relies on org.junit.Assume$AssumptionViolatedException which no longer exists in JUnit 4.5  ---  **Affects:** 2.5.5  **Issue Links:** - #9818 Spring TestContext Framework not compatible with JUnit 4.5 (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-09-21T16:58:30Z","2019-01-11T15:40:07Z"
"","9814","New util:method element to wrap MethodInvokingFactoryBean [SPR-5141]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-5141](https://jira.spring.io/browse/SPR-5141?redirect=false)** and commented  Config can be very verbose to use MethodInvokingFactoryBean! It's a good candidate for a new element.     I recommend using ""class"" and ""name"" over just ""name"" since the breakdown better fits existing \ semantics.   --- No further details from [SPR-5141](https://jira.spring.io/browse/SPR-5141?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-09-05T12:23:26Z","2012-06-19T09:36:20Z"
"","9739","@Required not accepted in addition to @Autowired [SPR-5064]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-5064](https://jira.spring.io/browse/SPR-5064?redirect=false)** and commented  I am running Hibernate integration tests. My subclass of AbstractTransactionalJUnit4SpringContextTests loads two configuration files (`@ContextConfiguration`), has the ""sessionFactory"" bean injected.  I can only inject with `@Autowired`(required=true) not `@Required`. The latter runs too early, but the former is as expected. There shouldn't be, as far as I can tell, any difference between the two. I stepped into the debugger and saw that the RequiredAnnotationBeanPostProcessor#validatedBeanNames list is empty.  I don't think the differences of semantics are correct.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-08-06T02:50:15Z","2012-06-18T12:44:39Z"
"","9698","JobDetailBean: Allow BeanNameAware interface to be used [SPR-5023]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-5023](https://jira.spring.io/browse/SPR-5023?redirect=false)** and commented  I think it would be nice the Framework checked whether a Quartz Job, instantiated through JobDetailBean, implemented BeanNameAware interface and invoked it. This would be the name of the JobDetailBean. I know it can be argued this is a convoluted use of the interface, but I also think it has some merit.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-21T11:10:39Z","2012-06-19T09:36:28Z"
"","9695","JobDetailBean: Add property to fire immediately upon scheduler startup [SPR-5020]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-5020](https://jira.spring.io/browse/SPR-5020?redirect=false)** and commented  My jobs do not require any persistence and are on a timer to refresh data. However, when the application context starts up, the data must be ""refreshed"" (i.e., loaded). There is no simple way to both fire the job immediately plus give it a cron expression.  One solution is to assign two triggers to a job: http://forum.springframework.org/archive/index.php/t-32717.html  However, that's one extra bean per job! I think Spring could easily support, based on configuration, internally registering a trigger. My recommendation is to add a flag to JobDetailBean to fire the job immediately. How about #setTriggerImmediately(boolean)?   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-20T17:16:30Z","2012-06-19T09:36:31Z"
"","9694","Update documentation to latest Quartz Javadoc [SPR-5019]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-5019](https://jira.spring.io/browse/SPR-5019?redirect=false)** and commented  Reference and API documentation is linking here (which is garbled in my Firefox 3): http://quartz.sourceforge.net/javadoc/  Links should be switched to here: http://www.opensymphony.com/quartz/api/   ---  **Affects:** 2.0.8, 2.5.5  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: task,","spring-projects-issues","2008-07-20T16:50:23Z","2012-06-19T03:47:05Z"
"","9639","Expose check to test Class is a collection type [SPR-4964]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4964](https://jira.spring.io/browse/SPR-4964?redirect=false)** and commented  I know this check exists in the source code :-) but I can't remember where. I also am sure it's not exposed as its own method. It would be very useful to test a Class to determine if it is a known JDK (","closed","in: core,","spring-projects-issues","2008-06-27T02:51:51Z","2012-06-19T09:36:30Z"
"","9595","Refactor Assert into AssertBean [SPR-4920]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4920](https://jira.spring.io/browse/SPR-4920?redirect=false)** and commented  I wanted to extend Assert with more methods, but sub-classing is not possible on static methods. Please refactor the static methods into an instantiatable AssertBean class, then delegate all current methods of Assert to a private singleton instance of AssertBean.   ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-06-15T12:37:51Z","2012-06-19T09:36:26Z"
"","9517","ClassPathResource: Provide constructor to prefix classname [SPR-4841]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4841](https://jira.spring.io/browse/SPR-4841?redirect=false)** and commented  The description of ClassPathResource's constructor is as follows: ""The path can be relative to the given class, or absolute within the classpath via a leading slash.""  I am fond of Spring's TestContext's ability to prefix my configuration with the class name being tested. Can we get the same little idiom here for free? Here's what an additional constructor can be:  public ClassPathResource(Class clazz, String location);  The resulting ""path"" would be ClassUtils.getShortClassName(Class) + ""-"" + location.  Notice you won't need a third parameter (like a boolean) because the order is #(Class, String) -- #(String, Class) is already taken.   --- No further details from [SPR-4841](https://jira.spring.io/browse/SPR-4841?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-05-21T17:10:22Z","2012-06-19T09:36:31Z"
"","9500","HibernateTemplate: Find and employ DataAccessUtils results [SPR-4824]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4824](https://jira.spring.io/browse/SPR-4824?redirect=false)** and commented  I commonly query for one object using a combination of find() and DataAccessUtils.single/uniqueResult.  It would be nice if the HibernateTemplate provided them as a common idiom:  #findRequiredSingleResult(String) #findRequiredUniqueResult(String) #findSingleResult(String) #findUniqueResult(String)    ---  **Affects:** 2.0.8, 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-15T02:22:46Z","2012-06-18T12:45:12Z"
"","9472","Support DOT-QUESTION notation in property paths [SPR-4795]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4795](https://jira.spring.io/browse/SPR-4795?redirect=false)** and commented  If a null is found in a property path notation (e.g., ""shoppingcart.bag.item""), typically a NullValueInNestedPathException is thrown.  However, if you allowed the DOT-QUESTION notation (.?), it would indicate to interpret a short-circuited path as null:  shoppingcart.?bag.?item = any item in the path can be null shoppingcart.bag.?item = only path from bag to item can be null   --- No further details from [SPR-4795](https://jira.spring.io/browse/SPR-4795?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-05-09T09:00:08Z","2015-09-22T17:34:39Z"
"","9453","Doc: @Resource vs. @Autowired needs to clarify parameter type usage [SPR-4776]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4776](https://jira.spring.io/browse/SPR-4776?redirect=false)** and commented  The tip in section 3.11.3. (""Fine-tuning annotation-based autowiring with qualifiers"") tries to tip-off the user that using `@Resource` to inject beans by name is a better approach. So I went to try, but discovered that `@Resource` is not supported for parameter targets. Therefore, `@Qualifier` has to be used when narrowing the reference on method parameters.  Please add a sentence about `@Resource`'s limitation.   ---  **Affects:** 2.5.4","closed","type: documentation,","spring-projects-issues","2008-05-03T14:00:54Z","2012-06-19T03:47:41Z"
"","9353","Doc: BeanWrapperImpl has missing  tag and bolds rest of javadoc [SPR-4676]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4676](https://jira.spring.io/browse/SPR-4676?redirect=false)** and commented  Because of the missing \ tag in the class javadoc's final paragraph, all the method javadocs are in bold: http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/beans/BeanWrapperImpl.html   ---  **Affects:** 2.5.2  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/13917/patch.txt) (_1.03 kB_)","closed","in: core,","spring-projects-issues","2008-04-08T10:24:14Z","2012-06-19T03:47:41Z"
"","9302","HibernateTemplate: Execute in separate short-lived session [SPR-4625]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4625](https://jira.spring.io/browse/SPR-4625?redirect=false)** and commented  It is sometimes desirable to perform a single operation in a separate session. For instance, if a DataIntegrityViolationException is returned in the current transaction, go back to the database to determine which column was duplicated. But for this to succeed, a separate session is required because Hibernate does not allow flushing, which is predicated by the aforementioned query.  http://forum.springframework.org/archive/index.php/t-27112.html  Thus, I propose an extra method to complement execute or executeFind that would (use SessionFactoryUtils) to perform work in a separate session.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-25T18:21:49Z","2012-06-19T03:47:12Z"
"","9294","Javadoc+Ref: ThrowsAdvice does not mention obvious limitations [SPR-4617]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4617](https://jira.spring.io/browse/SPR-4617?redirect=false)** and commented  This issue is In reference to http://forum.springframework.org/showthread.php?t=13326  There is no mention (Reference Documentation too) about changing the exception thrown. Please update both docs to point out three basic premises:  1) Throwing an exception within the advice has the affect of changing the original thrown exception 2) You can substitute (throw) any RuntimeException subclass to replace the original 3) You cannot throw an undeclared checked exceptions in contradiction of the target method    ---  **Affects:** 2.0.8, 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-23T17:49:22Z","2012-06-19T03:47:33Z"
"","9287","Genericize ApplicationListener [SPR-4610]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4610](https://jira.spring.io/browse/SPR-4610?redirect=false)** and commented  It would be fantastic if ApplicationListener could be genericized so that the event argument automatically becomes the parameterized type. Maybe worth looking at in 3.0? In any event (pun intended), the framework could then skip over invoking the handler if the typed argument is not the correct type. This would eliminate the boilerplate of ""if (event instanceof MySubclassEvent)"" checks.  Can anything be done like this in 2.5?   ---  **Affects:** 2.5.2  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-03-21T05:47:51Z","2012-06-19T03:47:22Z"
"","9286","Javadoc: mispelling in MethodInvoker.getArguments [SPR-4609]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4609](https://jira.spring.io/browse/SPR-4609?redirect=false)** and commented  ""**Retrun** the arguments for the method invocation.""   ---  **Affects:** 1.2.9, 2.0.8, 2.5.2  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-03-20T08:32:11Z","2012-06-19T03:47:25Z"
"","9285","MethodInvokingFactoryBean should be able to call protected static methods as well [SPR-4608]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4608](https://jira.spring.io/browse/SPR-4608?redirect=false)** and commented  I am injecting a reference bean into a static method. This should work because \ is supported both as a \ item or directly with ""ref' attribute. However, the parameter matching never succeeds because a proxy is injected and Proxy$3 isn't an appropriate argument type. The static method accepts one argument, an interface, which the referenced bean implements.  \ // class MyExample implements Example  \ \ // AnotherClass.example(MyExample) \ \ I tried with three spring versions (see Affects Version) with no luck.   ---  **Affects:** 1.2.9, 2.0.8, 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-03-20T08:24:19Z","2012-06-19T03:47:30Z"
"","9233","Allow beans to mocked via configuration [SPR-4556]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4556](https://jira.spring.io/browse/SPR-4556?redirect=false)** and commented  It would be great if Spring could allow me to mock up objects in configuration so I can transition them in and out easily. Here's an example:  I work with service layers that require their must-have dependencies in their constructors. They are coded to throw NPE or IAE if they are null, which is great for production work but annoying for unit testing. The arguments are mostly DAO interface implementations. This is where Spring could inject a mock object to satisfy the requirement.  I propose a mock boolean attribute that directs the Context to instantiate a mock of the given interface.  \   ---  **Affects:** 3.0 M1","closed","type: enhancement,","spring-projects-issues","2008-03-07T06:16:18Z","2018-12-27T10:45:09Z"
"","9232","Doc: Standard events  [SPR-4555]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4555](https://jira.spring.io/browse/SPR-4555?redirect=false)** and commented  Section 3.8.3 states ""Spring provides three standard events"" and then shows a table of 5 events. Only 2.0.x is correct (three events), but needs updating for 2.5.  You should just eliminate the numbering so you don't to do further edits (e.g., ""Spring provides these standard events"").   ---  **Affects:** 2.5.2","closed","type: bug,","spring-projects-issues","2008-03-07T04:11:10Z","2012-06-19T03:46:59Z"
"","9222","SimpleJdbcTestUtils: Query table row [SPR-4545]","**[Paul Benedict](https://jira.spring.io/secure/ViewProfile.jspa?name=paul4christ79)** opened **[SPR-4545](https://jira.spring.io/browse/SPR-4545?redirect=false)** and commented  My Hibernate integration tests follow a typical pattern: save entity through session, flush session, JDBC select rows from table matching persisted identifiers. I use JDBC to verify my Hibernate mappings.  I'd like to propose a new method that queries a table passing one or multiple parameters: SimpleJdbcTestUtils.queryRow(String tableName, String keyName, Object keyValue); SimpleJdbcTestUtils.queryRow(String tableName, Map keys);  which would translate to: SELECT * FROM {tableName} WHERE {keyName} = {keyValue} respectively.  If you can dream up better semantics, please do.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-05T12:47:57Z","2012-06-19T09:36:20Z"
"","9704","DefaultMessageSourceResolvable hashcode does not take arguments into account [SPR-5029]","**[Pascal Alberty](https://jira.spring.io/secure/ViewProfile.jspa?name=pascalalberty)** opened **[SPR-5029](https://jira.spring.io/browse/SPR-5029?redirect=false)** and commented  DefaultMessageSourceResolvable hashCode method only uses ""codes"" field and not ""arguments"" field preventing to create a correct cache key when using springmodules and `@cacheable` annotation on getMessage(MessageSourceResolvable messageSourceResolvable, Locale locale) method  The DefaultMessageSourceResolvable hashCode method:      public int hashCode() {     	return ObjectUtils.nullSafeHashCode(getCodes());     }  generateKey method of HashCodeCacheKeyGenerator class (springmodules)  generate a key based on method arguments. If the argument is a FieldError class (which extends ObjectError which extends DefaultMessageSourceResolvable), the key is not different if ""arguments"" field is different.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-07-23T02:34:56Z","2012-06-19T03:47:35Z"
"","8991","Spring 2.5.1 uses dependencies which are not publicly published [SPR-4312]","**[Pascal Alberty](https://jira.spring.io/secure/ViewProfile.jspa?name=pascalalberty)** opened **[SPR-4312](https://jira.spring.io/browse/SPR-4312?redirect=false)** and commented                aspectj          aspectjrt          1.5.4          true                    aspectj          aspectjweaver          1.5.4          true       are used by Spring 2.5.1 pom but these dependencies are not yet publicly published in the maven public repository. So builds fail.   ---  **Affects:** 2.5.1  1 votes, 3 watchers","closed","status: declined,","spring-projects-issues","2008-01-09T17:27:02Z","2008-01-17T20:07:58Z"
"","9284","Aspect not applied in bridge pattern with abstract class located in another package as implementing class [SPR-4607]","**[pas filip](https://jira.spring.io/secure/ViewProfile.jspa?name=pasfilip)** opened **[SPR-4607](https://jira.spring.io/browse/SPR-4607?redirect=false)** and commented  I ran into a problem with an aspect not being applied where I would expect it to be. I have an interface called SomeService with one method doSomeWork(Integer someArgument). I have an abstract class SomeAbstractService that implements the interface's method doSomeWork(Integer someArgument). This method implementation calls another method which is abstract and is called doSomeWork(Integer someArgument, Object someOtherArgument). Then I have another class called SomeConcreteService extending the abstract class but located in another package than the abstract class. When an aspect is defined on SomeConcreteService to target the interface implemented by the subclass it doesn't work, the aspect doesn't get called. A workaround is to place the concrete class in the same package as the abstract class or in a subpackage and update the aspect pointcut to include the package from the abstract class. Another option is to override the doSomeWork(Integer someArgument) in the SomeConcreteSerivice then it does work. I could Imagine though that in many framework this is not possible as the method doSomework(Integer someArgument)  would be final in the abstract class. I was expecting if I call a method on that service it would be proxied even if the method is declared in a super class. I did after all specify in the pointcut that I want all methods proxied including any method from the super class that might implement an interface method.  Make sure to take a look at the test case included with this issue.    ---  **Affects:** 2.0.8, 2.5 final, 2.5.1, 2.5.2  **Attachments:** - [aspect_problem.zip](https://jira.spring.io/secure/attachment/13812/aspect_problem.zip) (_4.10 kB_)","closed","in: core,","spring-projects-issues","2008-03-20T00:22:04Z","2019-01-12T16:28:28Z"
"","9622","BeanDefinitionParserDelegate.decorateIfNeeded discards information about containingBean [SPR-4947]","**[Ondrej Par](https://jira.spring.io/secure/ViewProfile.jspa?name=ondrej.par)** opened **[SPR-4947](https://jira.spring.io/browse/SPR-4947?redirect=false)** and commented  When calling custom handler, the method BeanDefinitionParserDelegate.decorateIfNeeded  creates new ParserContext and does not set containingBean property on it.  The decorator thus doesn't know if it's invoked on a nested bean or not.   ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-06-24T02:39:44Z","2012-06-19T03:46:49Z"
"","9519","DefaultMessageListenerContainer connection failover does not work with JndiObjectFactoryBean's lookupOnStartup=false [SPR-4843]","**[Ondrej Cernos](https://jira.spring.io/secure/ViewProfile.jspa?name=shaga)** opened **[SPR-4843](https://jira.spring.io/browse/SPR-4843?redirect=false)** and commented  The application context fails to initialize with the above mentioned exception when the MQ is down.  The application context fragment follows:  \ \ \ \ com.swiftmq.jndi.InitialContextFactoryImpl \ \ ${jms.url} \ \ \ \ \ \ \ \ \ \QueueConnectionFactory\ \  \ \ \ \ \ \ \ \ \ \ \  The app is supposed to run standalone. Because the SwiftMQ ConncetionFactory implementation doesn't provide public constructor, I create it with the Spring provided JndiTemplate. It works great with the Spring JMS container configuration:    \     It reconects when the MQ is taken down and up. However, it is nit able to start when the MQ is down:  2008-05-22 13:55:35,055 ERROR TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@1a78071] to prepare test instance [com.o2.cz.TestJMSListener@958bb8] java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:203) at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109) ... Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.jms.listener.DefaultMessageListenerContainer#0': Invocation of init method failed; nested exception is org.springframework.jndi.JndiLookupFailureException: JndiObjectTargetSource failed to obtain new target object; nested exception is javax.naming.NamingException: unable to connect, exception = javax.jms.JMSException: Unable to create a connection to: [[ServerEntry, hostname=localhost, port=4001]] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1336) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:471) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) ... Caused by: org.springframework.jndi.JndiLookupFailureException: JndiObjectTargetSource failed to obtain new target object; nested exception is javax.naming.NamingException: unable to connect, exception = javax.jms.JMSException: Unable to create a connection to: [[ServerEntry, hostname=localhost, port=4001]] at org.springframework.jndi.JndiObjectTargetSource.getTarget(JndiObjectTargetSource.java:138) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:184) at $Proxy9.createConnection(Unknown Source) at org.springframework.jms.connection.SingleConnectionFactory.doCreateConnection(SingleConnectionFactory.java:316) at org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:270) at org.springframework.jms.connection.SingleConnectionFactory.createConnection(SingleConnectionFactory.java:215) at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:184) at org.springframework.jms.listener.AbstractJmsListeningContainer.createSharedConnection(AbstractJmsListeningContainer.java:401) at org.springframework.jms.listener.AbstractJmsListeningContainer.establishSharedConnection(AbstractJmsListeningContainer.java:370) at org.springframework.jms.listener.DefaultMessageListenerContainer.establishSharedConnection(DefaultMessageListenerContainer.java:682) ... Caused by: javax.naming.NamingException: unable to connect, exception = javax.jms.JMSException: Unable to create a connection to: [[ServerEntry, hostname=localhost, port=4001]] at com.swiftmq.jndi.v400.ContextImpl.\(Unknown Source) at com.swiftmq.jndi.InitialContextFactoryImpl.getInitialContext(Unknown Source) at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:667)  I consider this a bug: the code for reconnection and connection problem handling is there and it works, only during the init phase it doesn't. Unfortunately I need the app to be able to start even in the situation when the MQ is down. This, after all, will cause only the fact no messages will be received. I leave the priority as major, because it is kind of a show stopper here.  ---  **Affects:** 2.5.4  **Sub-tasks:** - #9867 DefaultMessageListenerContainer creation fail before JMS server startup","closed","type: bug,","spring-projects-issues","2008-05-21T22:52:01Z","2019-01-11T19:06:58Z"
"","9372","Missing check for NoSuchDefinitionException in TilesView  [SPR-4695]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-4695](https://jira.spring.io/browse/SPR-4695?redirect=false)** and commented  The view resolvers JstlView (InternalResourceView) and TilesView have different ""view not found"" semantics. If the JstlView can't find a requested view, a 404 status will be set to the HttpServletResponse which is then handled by the web container. This is done by the RequestDispatcher that is used in the renderMergedOutputModel method of InternalResourceView. In the case of TilesView this is totally different. If the requested view doesn't exist (because there's no tiles definition with that name), a org.apache.tiles.definition.DefinitionsFactoryException is thrown which results in a 500 server error. I'd suggest to catch that exception in TilesView (when calling the TilesContainer's render method) and set a 404 error-code in the HttpServletResponse. Of course this could affect existing code, but I can't imagine that it would break, because the change would just be a 500 -> 404 error code change. Neither spring's JavaDoc nor the documentation does contain a note about the desired ""view not found"" behaviour - at least I couldn't find it, so I don't know what is really wanted. Maybe something totally different?   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-04-12T03:21:57Z","2009-03-18T11:42:33Z"
"","9119","Documentation for ContextStartedEvent and ContextStoppedEvent is missing [SPR-4441]","**[Oliver Siegmar](https://jira.spring.io/secure/ViewProfile.jspa?name=ojs)** opened **[SPR-4441](https://jira.spring.io/browse/SPR-4441?redirect=false)** and commented  Chapter '3.8.3 Events' shows Built-in Events, but the newly (in Spring 2.5) added events ContextStartedEvent and ContextStoppedEvent are missing.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-10T00:17:38Z","2012-06-19T03:47:05Z"
"","9209","Mention use of GenericMessageEndpointManager to setup MessageListeners using Inbound JCA connectors [SPR-4532]","**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-4532](https://jira.spring.io/browse/SPR-4532?redirect=false)** and commented  Please add a note to the JMS/JCA documentation that GenericMessageEndpointManager is the class to use if you want to access ActivationSpecs e.g. available from JNDI. Currently the documentation only mentions ActivationSpecConfig which leads to slight confusion.  http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/jca/endpoint/GenericMessageEndpointManager.html  Regards, Ollie   ---  **Affects:** 2.5.2","closed","type: task,","spring-projects-issues","2008-03-03T20:41:16Z","2012-06-19T03:47:45Z"
"","8909","Documentation bug - prototype bean lyfecycle [SPR-4231]","**[Oleksandr Alesinskyy](https://jira.spring.io/secure/ViewProfile.jspa?name=al0)** opened **[SPR-4231](https://jira.spring.io/browse/SPR-4231?redirect=false)** and commented  The chapter 3.4.2 of the Sprig Reference states:  ""It is the responsibility of the client code to clean up prototype scoped objects and release any expensive resources that the prototype bean(s) are holding onto. (One possible way to get the Spring container to release resources used by singleton-scoped beans is through the use of a custom bean post processor which would hold a reference to the beans that need to be cleaned up.)""  It seems the ""prototype.-scoped"" instead of ""singleton-scoped"" in this sentence..   ---  **Affects:** 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: bug,","spring-projects-issues","2007-12-08T04:51:44Z","2012-06-19T03:46:40Z"
"","8888","UrlPathHelper may fail to resolve path within application if used within a root context [SPR-4210]","**[Olaf Otto](https://jira.spring.io/secure/ViewProfile.jspa?name=olaf)** opened **[SPR-4210](https://jira.spring.io/browse/SPR-4210?redirect=false)** and commented  The method getPathWithinApplication of UrlPathHelper returns an incorrect path if the current context path is ""/"" and getPathWithinApplication is invoked during a jsp including from a request pointing to ""/"":  HTTP GET ""/"" |__ Correctly resolves to /firsttemplate.extension |\_INCLUDE /seccontemplate.extension |_ Incorrectly resolves to secondtemplate.extension  The bug at line 186, if contexpath.equals(""/""), than requestUri.substring(contextPath.length()) will return a relative path, causing various critical side effects.  181	public String getPathWithinApplication(HttpServletRequest request) { 182		String contextPath = getContextPath(request); 183		String requestUri = getRequestUri(request); 184		if (StringUtils.startsWithIgnoreCase(requestUri, contextPath)) { 185			// Normal case: URI contains context path. 186			String path = requestUri.substring(contextPath.length()); 187			return (StringUtils.hasText(path) ? path : ""/""); 188		} 189		else { 190			// Special case: rather unusual. 191			return requestUri; 192		} 193	}   ---  **Affects:** 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: bug,","spring-projects-issues","2007-12-04T06:20:24Z","2012-06-19T03:46:36Z"
"","9059","InstrumentationSavingAgent should be excluded from spring-context.jar (to avoid classloading problems with -javaagent:spring-agent.jar and parent-last class loading strategy) [SPR-4399]","**[Odd Möller](https://jira.spring.io/secure/ViewProfile.jspa?name=odd)** opened **[SPR-4399](https://jira.spring.io/browse/SPR-4399?redirect=false)** and commented  Problem: When using spring-agent.jar with the -javaagent JVM switch in combination with an application depending on spring-context.jar and using a parent-last class loading strategy, a java.lang.IllegalStateException (see below) is thrown.  Description: Starting a JVM with -javaagent:spring-agent.jar, results in the org.springframework.instrument.InstrumentationSavingAgent class (loaded from spring-agent.jar) saving the java.lang.instrumentation.Instrumentation object passed to its premain method in a static field. But when using a parent-last class loading strategy (as is the default by Jetty) with spring-context.jar in the classpath, the instance of the InstrumentationSavingAgent class found by the getInstrumentation method of the org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver (loaded from spring-context.jar) will not be the same class instance and thus not have access to the saved Instrumentation object (causing the exception to be thrown).  Proposed Solution/Workaround: Remove the org.springframework.instrument.InstrumentationSavingAgent from spring-context.jar.  java.lang.IllegalStateException: Must start with Java agent to use InstrumentationLoadTimeWeaver. See Spring documentation. at org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.getInstrumentation(InstrumentationLoadTimeWeaver.java:110) at org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.addTransformer(InstrumentationLoadTimeWeaver.java:71) at org.springframework.context.weaving.AspectJWeavingEnabler.postProcessBeanFactory(AspectJWeavingEnabler.java:61) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:542) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:525) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:348) at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:332) at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:266) at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:236) at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:126) at javax.servlet.GenericServlet.init(GenericServlet.java:241) at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:433) at org.mortbay.jetty.servlet.ServletHolder.doStart(ServletHolder.java:256) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:40) at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:612) at org.mortbay.jetty.servlet.Context.startContext(Context.java:139) at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1220) at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:510) at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:448) at org.mortbay.jetty.plugin.Jetty6PluginWebAppContext.doStart(Jetty6PluginWebAppContext.java:110) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:40) at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152) at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:40) at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:40) at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:117) at org.mortbay.jetty.Server.doStart(Server.java:222) at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:40) at org.mortbay.jetty.plugin.Jetty6PluginServer.start(Jetty6PluginServer.java:132) at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:357) at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:293) at org.mortbay.jetty.plugin.AbstractJettyRunMojo.execute(AbstractJettyRunMojo.java:203) at org.mortbay.jetty.plugin.Jetty6RunMojo.execute(Jetty6RunMojo.java:182) at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:447) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:539) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:493) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:463) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:311) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:278) at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:333) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:126) at org.apache.maven.cli.MavenCli.main(MavenCli.java:282) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315) at org.codehaus.classworlds.Launcher.launch(Launcher.java:255) at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430) at org.codehaus.classworlds.Launcher.main(Launcher.java:375)   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-27T21:22:02Z","2012-06-19T03:47:41Z"
"","9379","Support for @DirtiesContext at the test class level [SPR-4702]","**[Noel Flicken](https://jira.spring.io/secure/ViewProfile.jspa?name=flicken)** opened **[SPR-4702](https://jira.spring.io/browse/SPR-4702?redirect=false)** and commented  Expected behavior: Context should be close()'d after end of test class execution  Observed behavior: Context only closed when `@DirtiesContext` annotates method  Multiple test classes can re-use the same context, which allows for faster test execution, so automatically closing a context after test class execution is probably not the best mechanism.  However, there should be a way to annotate that a context should be close()'d after all tests in a test class are executed.  Suggested fix: - allow `@DirtiesContext` to annotate class - add TestExecutionListener#destroyTestInstance  Willing to implementing, if given approval of design.  ---  **Issue Links:** - #10068 ApplicationContext not closed when using `@ContextConfiguration` to implement integration tests (_**""is duplicated by""**_) - #9978 Add a setDirty method to AbstractTestNGSpringContextTests - #10311 Reload the application context for each test in a class with a class level annotation - #6700 ANT does not call destroy-method after tests - #10068 ApplicationContext not closed when using `@ContextConfiguration` to implement integration tests  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2dee54b78abaccd0a0b63e2dc763ae634291bd71, https://github.com/spring-projects/spring-framework/commit/e77e070e7a697752ab9181e74ead1beed5e4e6d3, https://github.com/spring-projects/spring-framework/commit/77821845a7bfdeb442f4a6ad132099d1ad85b9dc, https://github.com/spring-projects/spring-framework/commit/0483cb5a3d0a7ecb8aa491a24bc522637c4aa5d9, https://github.com/spring-projects/spring-framework/commit/8dec6af03885a2486a249f208674eae1556886b7, https://github.com/spring-projects/spring-framework/commit/1f087b412d2fccd589633dd002e64cf7b8aa881e, https://github.com/spring-projects/spring-framework/commit/51b8b99dfc4d3cfcd0b8d73cb476f5c74af600be, https://github.com/spring-projects/spring-framework/commit/f26e2e3d7bbd6f6a9798e553235bc17979327861  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-14T13:06:57Z","2019-01-13T08:04:22Z"
"","9247","SpringJUnit4ClassRunner doesn't catch AssumptionViolatedException in @Before methods [SPR-4570]","**[Noel Flicken](https://jira.spring.io/secure/ViewProfile.jspa?name=flicken)** opened **[SPR-4570](https://jira.spring.io/browse/SPR-4570?redirect=false)** and commented  Spring's JUnit4 SpringMethodRoadie doesn't catch a AssumptionViolatedException in #runBefores, differing in functionality from JUnit4's MethodRoadie#runBefores.  The below test class succeeds (via assumption being false) with JUnit4ClassRunner, but fails with SpringJUnit4ClassRunner (due to AssumptionViolatedException being thrown in assumeFalse()).  public static class BeforeMethodTest { `@Before` public void assumeFalse() { assumeTrue(false); }      @Test public void failure()     {     	fail(""Before method test"");     }  }  Attaching a test case to illustrate.   ---  **Attachments:** - [AssertFalse.java](https://jira.spring.io/secure/attachment/13763/AssertFalse.java) (_1.67 kB_) - [SpringMethodRoadie.patch](https://jira.spring.io/secure/attachment/13764/SpringMethodRoadie.patch) (_1.21 kB_)","closed","type: bug,","spring-projects-issues","2008-03-11T03:52:06Z","2012-06-19T03:46:53Z"
"","9203","ProfileValueUtils#isTestEnabledInThisEnvironment should use current test class to determine IfProfileValue annotation [SPR-4526]","**[Noel Flicken](https://jira.spring.io/secure/ViewProfile.jspa?name=flicken)** opened **[SPR-4526](https://jira.spring.io/browse/SPR-4526?redirect=false)** and commented  ProfileValueUtils#isTestEnabledInThisEnvironment should use current test class to determine whether IfProfileValue annotation is set.  Using Method#getDeclaringClass in not sufficient due to possible inheritance of testing methods.  Consider the following test classes.  ``` @RunWith(SpringJUnit4ClassRunner.class) @TestExecutionListeners({}) public class GeneralTest { 	@Test public void generalTest() 	{ 		 	} }  @IfProfileValue(name=""run"", value=""true"") public class SpecificTest extends GeneralTest { 	@Test public void specificTest() 	{ 		 	} } ```  The test ""generalTest"" is always run, regardless of the value of ""run"" profile value. Expected behavior: GeneralTest#generalTest should always run, but SpecificTest#generalTest should only run if ""run"" profile value is set to ""true"".  ---  **Attachments:** - [GeneralTest.java](https://jira.spring.io/secure/attachment/13727/GeneralTest.java) (_347 bytes_) - [SpecificTest.java](https://jira.spring.io/secure/attachment/13728/SpecificTest.java) (_234 bytes_)  **Issue Links:** - #10571 Class-level `@IfProfileValue` overrides method-level `@IfProfileValue` settings","closed","type: bug,","spring-projects-issues","2008-02-29T22:19:32Z","2019-01-13T08:04:59Z"
"","9408","Make resource loader for AbstractSingleSpringContextTests configurable [SPR-4731]","**[Noa Resare](https://jira.spring.io/secure/ViewProfile.jspa?name=noa)** opened **[SPR-4731](https://jira.spring.io/browse/SPR-4731?redirect=false)** and commented  I like to be able to reuse my bean definition files for both a web application and some JUnit test cases.  To do that without too much magic I would like to be able to specify prefix free resource paths to the resources (for example the location of my hibernate mapping directory) in my bean definitions and have the web environment supply me with a resource loader that understands webapps and have the test cases use a FilesystemResourceLoader that locates the files properly when executing stanalone.  Unfortunately, if I subclass AbstractTransactionalDataSourceSpringContextTests the ApplicationContext that is created tries to resolve prefix-less resources in the classpath (and fails at that).  My current solution is override (and copy) the whole content of AbstractSingleSpringContextTests.createApplicationContext() and add an setResourceLoader(new FileSystemResourceLoader()) invocation between the GenericApplicationContext() constructor invocation and loadBeanDefinitions().  This solution is kind of convoluted and possibly breaks in unpredictable ways as soon as super.createApplicationContext() gets changed.  Proposed solution:  Add an overridable method AbstractSingleContextTest.createResourceLoader() that per default returns a ClasspathResourceLoader and configures the GenericApplicationContext with that before it loads it's bean definitions. Users like me then can override this method in our tests and return for example a FilesystemResourceLoader instead.   ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-04-20T05:53:09Z","2012-06-19T03:46:39Z"
"","9434","Allow registration of BeanComponentDefinitions with aliases at parser context  [SPR-4757]","**[Nils Hartmann](https://jira.spring.io/secure/ViewProfile.jspa?name=nilsha)** opened **[SPR-4757](https://jira.spring.io/browse/SPR-4757?redirect=false)** and commented  When developing own namespace handlers, It would be nice if it would be possible to register a BeanComponentDefinition at the parser context not only with its bean name but also with some aliases. The BeanComponentDefinition could therrefore inherit the appropriate constructor from it's superclass BeanDefinitionHolder.    --- No further details from [SPR-4757](https://jira.spring.io/browse/SPR-4757?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-04-27T23:44:32Z","2012-06-19T03:46:51Z"
"","9031","Submitting on ""Price Increase"" page (analogous to MVC step-by-step guide) fails with IllegalStateException exception on GlassFish [SPR-4352]","**[Nikolay Surdo](https://jira.spring.io/secure/ViewProfile.jspa?name=nikolays)** opened **[SPR-4352](https://jira.spring.io/browse/SPR-4352?redirect=false)** and commented  Failed to submit page data ""Price Increase"" page (copy-paste from ""Developing a Spring Framework MVC application step-by-step"",  section ""4. Developing the Web Interface"").  Problem occurs only when web application is deployed on Glassfish, but doesn't occur on Tomcat, JBoss and WebSphere.   ---  **Affects:** 2.0 final  **Attachments:** - [log.txt](https://jira.spring.io/secure/attachment/13300/log.txt) (_9.66 kB_)  1 votes, 3 watchers","closed","","spring-projects-issues","2008-01-17T20:40:40Z","2019-01-11T16:38:53Z"
"","9155","DisposableBeanAdapter.destroy() method should not log error on destroy failures [SPR-4478]","**[Niklas Schlimm](https://jira.spring.io/secure/ViewProfile.jspa?name=nschlimm)** opened **[SPR-4478](https://jira.spring.io/browse/SPR-4478?redirect=false)** and commented  Only a small but irritating one (generates lots of noncritical exceptions in our log file):  1. Problem  org.springframework.beans.factory.support.DisposableBeanAdapter.destroy() generates lots of senceless exception traces in my log.  2. Root cause  Method shows the following code sequence:  try { ((DisposableBean) this.bean).destroy(); } catch (Throwable ex) { logger.error(""Couldn't invoke destroy method of bean with name '"" + this.beanName + ""'"", ex); }  All excpetions are logged as errors with complete excpetion trace, but nothing else happens in catch block ...  3. Consequence  Loads of noncritical exception traces in log file. Developers spending valuable time on analyzing what happens.  4. Possible Actions  Log a warning instead saying that destroy failed. Do not log exception trace.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-18T17:33:22Z","2012-06-19T03:47:26Z"
"","9822","Use MessageFormat to pass messages to spring Assert [SPR-5149]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-5149](https://jira.spring.io/browse/SPR-5149?redirect=false)** and commented  When using Spring Assert class to check preconditions, the message is expected to be a String. If you want to pass contextual datas in the message, this requires some String concat even if condition is validated.  It would be nice to follow slf4j example and support a MessageFormat pattern. With help of varargs, we could write :      Assert.isTrue( text.length()","closed","type: enhancement,","spring-projects-issues","2008-09-11T00:51:55Z","2019-01-11T15:37:37Z"
"","9709","Outdated reference to  in reference doc § 6.8.1.2 [SPR-5034]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-5034](https://jira.spring.io/browse/SPR-5034?redirect=false)** and commented  http://static.springframework.org/spring/docs/2.5.x/reference/aop.html#aop-configurable-container  ...This means that if you define multiple application contexts within the same classloader hierarchy you need to consider where to define the  bean and where to place spring-aspects.jar on the classpath. ... In this case we recommend defining the  bean in the shared (parent) application context ..  spring-configured tag is in namespace ""context"", as set for other examples in the doc   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-07-23T18:33:15Z","2012-06-19T03:47:12Z"
"","9416","consider a simplified SimpleJdbcCall.execuFunction( Class returnType, Object... params ) [SPR-4739]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-4739](https://jira.spring.io/browse/SPR-4739?redirect=false)** and commented  SimpleJdbcCall is supposed (as it's name suggest) to make JDBC stored function/procedures as simple as possible.  It relies on JDBC metadatas to get the stored procedure parameters names and JDBC types.  It may propose a simplified T execuFunction( Class\ returnType, Object... params ) method to invoke a function (and equivalent for procedures) to be used when all Call parameters are set during the call.    ---  **Affects:** 2.5.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbd0be2d65d2014e66ec533967f265d8bb00d527","closed","type: enhancement,","spring-projects-issues","2008-04-21T23:05:09Z","2012-06-19T03:47:41Z"
"","9414","GenericCallMetadataProvider doesn't check if NO metadata has been retrieved [SPR-4737]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-4737](https://jira.spring.io/browse/SPR-4737?redirect=false)** and commented  I cannot invoke a stored function as retrieving meta datas fail  processProcedureColumns doesn't get any metadatas - there must be something wrong in my conf - but there is no check nor warning to ensure something has been read from metadatas. It only checks for > 1 row, not for == 1   ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-04-21T21:37:02Z","2012-06-19T03:47:48Z"
"","9391","Cannot force the constructor to use using  [SPR-4714]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-4714](https://jira.spring.io/browse/SPR-4714?redirect=false)** and commented  Trying to build a org.apache.commons.configuration.PropertiesConfiguration bean  using  the PropertiesConfiguration( URL ) constructor :  \ \ \  PropertiesConfiguration has constructors :  PropertiesConfiguration() PropertiesConfiguration(String) PropertiesConfiguration(File) PropertiesConfiguration(URL)  Spring doesn't detect the expected constructor, resulting in exception :  "" org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.apache.commons.configuration.PropertiesConfiguration#33b4f1' defined in file [...]: Unsatisfied dependency expressed through constructor argument with index 0 of type [java.lang.String]: Ambiguous constructor argument types - did you specify the correct bean references as constructor arguments? ""  doesn't work either with :  \ \ \classpath:/default.properties\ \ \   ---  **Affects:** 2.5.3","closed","in: core,","spring-projects-issues","2008-04-16T19:38:52Z","2019-01-11T17:43:10Z"
"","9317","ProxyFactoryBean doesn't warn when it cannot determine if last interceptorNames element is or not an Advice/Advisor [SPR-4640]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-4640](https://jira.spring.io/browse/SPR-4640?redirect=false)** and commented  My configuration uses a ProxyFactoryBean to proxy another bean, that itself is a TransactionProxyFactoryBean on the final target bean.  When the application start, an exception is throwed : AopConfigException(""Unknown advisor type ...  My ProxyFactoryBean configuration uses the interceptorNames to set both interceptors and the target bean. ProxyFactoryBean .checkInterceptorNames() is expected to detect the last element to be the target bean. isNamedBeanAnAdvisorOrAdvice() ask the beanFactory for the element type. In my case this doesn't resolve (maybe because the target is itself a ProxyFactoryBean ?) and the default value ""true"" is returned.  1 - there is no log to inform the ProxyFactoryBean took this fallback decision. Some INFO level message would have been very helpfull to find this issue.  2 - I don't understand why such a type-check is required as my configuration does not declare a target/targetSource/targetName. In such a case, the last interceptorNames element MUST be the target bean. Why not implement InitializingBean ? When no target* has been set, there is no requirement to check the last bean to be an Advice, as it MUST be the target bean name. The GLOBAL_SUFFIX check (from initializeAdvisorChain) could also be done at this level.  Maybe using interceptorNames to set the target bean is considered confusing and should be deprecated (IMHO)    ---  **Affects:** 2.5.2  **Attachments:** - [spring.patch](https://jira.spring.io/secure/attachment/13855/spring.patch) (_20.33 kB_)","closed","type: enhancement,","spring-projects-issues","2008-03-28T02:46:44Z","2012-06-19T03:47:37Z"
"","9283","AbstractJpaTests incompatibility with derby EmbeddedDriver [SPR-4606]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-4606](https://jira.spring.io/browse/SPR-4606?redirect=false)** and commented  Using AbstractJpaTests with derby EmbeddedDriver as test database fails with error : ""Cannot create an instance of generated class org.apache.derby.exe.....""  As described in the forum, the issue is fixed by adding to the test : `@Override` protected boolean shouldUseShadowLoader() { return false; }  Best option would be to know what the EmbeddedDriver incompatibility is and to fix the ShadowLoader.  Fallback option would be to detect (?) use of the EmbeddedDriver and warn the user for incompatibility, so that he don't have to search spring and hibernate forums for the right answer.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-19T23:08:15Z","2008-10-21T21:14:42Z"
"","9013","please add -source.jar bundles in spring maven repository for 2.0.x version [SPR-4334]","**[nicolas de loof](https://jira.spring.io/secure/ViewProfile.jspa?name=ndeloof)** opened **[SPR-4334](https://jira.spring.io/browse/SPR-4334?redirect=false)** and commented  Spring maven repository comes with -source.jar bundles for 2.5.* serie. The 2.0.* does not, and AFAIK the build system has not been enhanced to support it.  I've got a running maven repo at http://ndeloof.free.fr/maven2, with a zipped version at repository root, with all 2.0.x source jars. As spring guys are responsible for the org/springframework folder content on maven central repo, my request to upload them was regected. Could you please get my files and put them in your spring repository to get synced with central, or (even better) enhance the 2.0.x branch build to produce them.   ---  **Affects:** 2.0.8","closed","status: declined,","spring-projects-issues","2008-01-13T23:35:25Z","2008-01-14T00:03:50Z"
"","9777","Doc: Using the tag  with objects of type Map [SPR-5104]","**[Nicola Bulla](https://jira.spring.io/secure/ViewProfile.jspa?name=nikosimo)** opened **[SPR-5104](https://jira.spring.io/browse/SPR-5104?redirect=false)** and commented  I tried to use this code:     The tag puts the values of myMap into labels of HTML option tag and keys of myMap into values.   ---  **Affects:** 2.5.5","closed","type: task,","spring-projects-issues","2008-08-19T21:17:04Z","2012-06-19T03:47:29Z"
"","8905","Centralized Test Annotation [SPR-4227]","**[Nick Stuart](https://jira.spring.io/secure/ViewProfile.jspa?name=nstuart)** opened **[SPR-4227](https://jira.spring.io/browse/SPR-4227?redirect=false)** and commented  Got this idea from the way the Component annotation works as Meta-Annotation when you put it on your own custom annotation. I've attached a simple definition of what would be a central configuration for someone's test cases. This would eliminate the need to have test cases extend even your own BaseTestCase in order to share configuration details.  For further discussion see the forum topic: http://forum.springframework.org/showthread.php?p=154885  From the sounds of it this would also require JUnit 4 to be patched as well so that the RunWith annotation can be used here also.   ---  **Affects:** 2.5 final  **Attachments:** - [BaseTest.java](https://jira.spring.io/secure/attachment/13185/BaseTest.java) (_286 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-12-07T00:45:37Z","2012-06-19T09:36:24Z"
"","9480","Add autocomplete attribute to FormTag [SPR-4803]","**[Niall Smart](https://jira.spring.io/secure/ViewProfile.jspa?name=niallsmart)** opened **[SPR-4803](https://jira.spring.io/browse/SPR-4803?redirect=false)** and commented  The Spring MVC FormTag does not allow specification of the autocomplete property to disable auto completion / password manager for the entire form.   Although it is possible to turn it off on a field by field basis (see #7589), Firefox's password manager seems to be keyed off the attribute on the form element.  ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-12T21:43:12Z","2019-01-11T19:03:21Z"
"","9539","broken link to  http://www.springframework.org/dtd/spring-beans-2.0.dtd [SPR-4863]","**[neonu](https://jira.spring.io/secure/ViewProfile.jspa?name=neonu)** opened **[SPR-4863](https://jira.spring.io/browse/SPR-4863?redirect=false)** and commented  spring beans reference link is broken, can't start my application.  please fix it ASAP.   --- No further details from [SPR-4863](https://jira.spring.io/browse/SPR-4863?redirect=false)","closed","in: core,","spring-projects-issues","2008-05-26T02:39:50Z","2019-01-11T19:05:11Z"
"","9321","CustomNumberEditor and leading zeros entered via web form [SPR-4644]","**[Neil Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=neila29)** opened **[SPR-4644](https://jira.spring.io/browse/SPR-4644?redirect=false)** and commented  I have stumbled across an issue when using the CustomNumberEditor class to parse numeric form data. I am not sure if this will be classed as a bug but its definitely a gotcha what's worth being aware of. The issue when using the CustomNumberEditor is when users enter numbers via the web form with leading zeros. If the CustomNumberEditor is constructed with no NumberFormat the \.decode method is called to parse the entered number. The behaviour of these classes it to treat any values with a leading 0 as an octal. As such 08 and 09 will create Number Format Exceptions.  I am not sure if this will be classed as a bug but it may be nice to change the implementation to use the apache NumberUtils createNumber style implementation where leading zeros are not interpreted as octal. Most users filling in web forms will not enter an octal.  See http://forum.springframework.org/showthread.php?p=171915#post171915 for more info.   ---  **Affects:** 2.0.4, 2.0.8  **Attachments:** - [CustomNumberEditorLeadingZeroTest.java](https://jira.spring.io/secure/attachment/13864/CustomNumberEditorLeadingZeroTest.java) (_2.07 kB_)","closed","in: core,","spring-projects-issues","2008-03-30T23:05:56Z","2012-06-19T03:47:16Z"
"","9207","Create a utility that returns database type [SPR-4530]","**[nebhale](https://jira.spring.io/secure/ViewProfile.jspa?name=nebhale)** opened **[SPR-4530](https://jira.spring.io/browse/SPR-4530?redirect=false)** and commented  Currently, database name information varies based on the both the database and driver used.  At this time, the SQLErrorCodesFactory knows how to translate from a given name retrieved from the DatabaseMetadata to the proper set of SQLErrorCodes.  I'd like something more generic that knows how to do this same translation, but instead returns an enumerated value that I can dispatch on for my own internal logic.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-03T02:55:49Z","2012-06-19T09:36:26Z"
"","9140","Cannot resolve URL protocol ""bundleresource://"" [SPR-4463]","**[Nattapong Triammeerit](https://jira.spring.io/secure/ViewProfile.jspa?name=ntriamme)** opened **[SPR-4463](https://jira.spring.io/browse/SPR-4463?redirect=false)** and commented  I try to get all jar resource under current classpath in Websphere by using ""PathMatchingResourcePatternResolver"" class and ""classpath*:/**/*.jar"" to be a expression matching. But i cannot get any jar resource in ear file. I found it get one URL in format ""bundelresource://23/"", but the spring code cannot deep down into it. it seem to be a spring ignore ""bundelresource"" URL protocol(reference to http://jira.springframework.org/browse/SPR-2537).  I think, it should get a resource under ""bundelresource"" URL protocol.  PS. Actually, I found a problem on Wepshere 6.1 on IBM JVM 1.5 but it cannot selected in lists.  Thank, Nattapong T   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-02-13T21:28:43Z","2012-06-19T03:47:46Z"
"","9437","Merge of util:map does not work [SPR-4760]","**[Nate Stoddard](https://jira.spring.io/secure/ViewProfile.jspa?name=nstoddar)** opened **[SPR-4760](https://jira.spring.io/browse/SPR-4760?redirect=false)** and commented  Merging of child util:map (when using the schema configuration) does not seem to work.  This issue was first posted in the support forums at http://forum.springframework.org/showthread.php?t=53358.  ---  **Affects:** 2.5.3  **Issue Links:** - #11189 Introduce 'merge' attribute for util namespace collection elements","closed","in: core,","spring-projects-issues","2008-04-28T05:09:53Z","2019-01-11T17:44:02Z"
"","9842","org.springframework.aop.config.AopNamespaceUtils.registerAutoProxyCreatorIfNecessary exception [SPR-5169]","**[Nagarajan Sivakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=nsivakumar)** opened **[SPR-5169](https://jira.spring.io/browse/SPR-5169?redirect=false)** and commented  I have been trying to use 2.5.x versions of Spring to get the `@Transactional` annotation  working  The following line     in applicationContext.xml throws a registerAutoProxyCreatorIfNecessary exception when i try to start  JBoss 4.2.2 app server. Strangely though , this does not happen with the spring 2.0.8 distribution !  I have this problem with 2.5.2 and 2.5.5 versions - the 2.0.8 works just fine.  thanks, Naga   --- No further details from [SPR-5169](https://jira.spring.io/browse/SPR-5169?redirect=false)","closed","in: core,","spring-projects-issues","2008-09-18T08:06:06Z","2019-01-12T16:27:54Z"
"","9339","Serialization of HibernateTransactionManager fails [SPR-4662]","**[Naaman Lifshitz](https://jira.spring.io/secure/ViewProfile.jspa?name=nlif)** opened **[SPR-4662](https://jira.spring.io/browse/SPR-4662?redirect=false)** and commented  The HibernateTransactionManager class is Serializable (via its super-class), but holds a non-transient reference to a DefaultListableBeanFactory instance, which is not Serializable. As a result, when trying to serialize objects proxied for transactions, a NotSerializableException is thrown. (It also holds a non-transient reference to a DataSource).  From the source-code as well as from the javadocs, I understand that the TransactionInterceptor class was designed for serialization (as well as proxies in general) . However, in its writeObject method it attempts to serialize the transactionManager as is, which in the case of the HibernateTransactionManager, throws the exception.  This seems to me like a bug. The implication of the problem is that it is impossible to deploy in a cluster that employs session-replication. However, since there is a workaround I prioritize this as - Minor.  This is a workaround:  public class SerializableHibernateTransactionManager extends HibernateTransactionManager implements ApplicationContextAware { private static ApplicationContext applicationContext;      private Object writeReplace() throws ObjectStreamException     {         logger.debug("""");                  /*          * null the non-transient references to these non-serializable objects          * before serialization (so that serialization does not fail).          */         super.setBeanFactory(null);         super.setDataSource(null);              return this;     }          private Object readResolve() throws ObjectStreamException     {         logger.debug("""");              /*          * discard the de-serialized object, since it is missing the beanFactory and dataSource,          * and obtain the bean from Spring, and return it instead. This is ok, since it is stateless.          */         return BeanFactoryUtils.beanOfTypeIncludingAncestors(applicationContext, HibernateTransactionManager.class);     }          public void setApplicationContext(ApplicationContext applicationContext)     {         SerializableHibernateTransactionManager.applicationContext = applicationContext;     }  }   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-04-06T01:52:01Z","2019-01-11T18:13:10Z"
"","9754","NullPointerException in AbstractAutoProxyCreator [SPR-5080]","**[Moshe Ben Shoham](https://jira.spring.io/secure/ViewProfile.jspa?name=moshe.benshoham)** opened **[SPR-5080](https://jira.spring.io/browse/SPR-5080?redirect=false)** and commented  I have the following definitions in an application context XML (among some other bean definitions):                     	     		     			     		     	     	     		     			*Dao     			*DAO     		     	       When the app context is loaded, I get the following exeption which is related to the fact that the factory method of the bean sessionId.rtmp returns null. In my opinion it is a bug, but please correct me if I'm wrong. I saw a similar problem described in #9360, but the correction of this issue does not resolve my exception.  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionId.rtmp' defined in ServletContext resource [/WEB-INF/red5/nexperience-web.xml]: Initialization of bean failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:480) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:283) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269) ... 44 more Caused by: java.lang.NullPointerException at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:322) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:361) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1343) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473) ... 51 moreThanks,  ---  **Affects:** 2.0.8, 2.5.5  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-08-12T02:03:50Z","2019-01-11T15:27:17Z"
"","9243","BeanCurrentlyInCreationException  is thrown when there are circular references between aop-proxied references [SPR-4566]","**[Morten Andersen-Gott](https://jira.spring.io/secure/ViewProfile.jspa?name=magott)** opened **[SPR-4566](https://jira.spring.io/browse/SPR-4566?redirect=false)** and commented  Using the applicationContext below, BeanCurrentlyInCreationException  is thrown on application startup. If I remove the aop-config element, the application starts fine and I am able to execute both services.  The use of aop on both components seems perfectly legit to me, especially if the aspects are performing logging. The issue has been raised in several threads in the forum as well: http://forum.springframework.org/showthread.php?p=168972 http://forum.springframework.org/showthread.php?t=45411  \  \           	                    	     	               	               	     	     	  \   ---  **Affects:** 2.0.7, 2.5.2  **Attachments:** - [beanInCreationException.zip](https://jira.spring.io/secure/attachment/13759/beanInCreationException.zip) (_2.46 kB_)","closed","in: core,","spring-projects-issues","2008-03-10T23:38:26Z","2012-06-19T03:47:20Z"
"","9801","JndiRmiClientInterceptor regression for RmiInvocationHandler services [SPR-5128]","**[Morgan](https://jira.spring.io/secure/ViewProfile.jspa?name=morgandev)** opened **[SPR-5128](https://jira.spring.io/browse/SPR-5128?redirect=false)** and commented  The fix for http://jira.springframework.org/browse/SPR-4679 caused the JndiRmiClientInterceptor to stop working for non-Remote services.  In these cases the narrow fails because the object is a RmiInvocationHandler.  ---  **Affects:** 2.5.4  **Issue Links:** - #9356 JndiRmiProxyFactoryBean doesn't work if stub does not implement java.rmi.Remote","closed","type: bug,","spring-projects-issues","2008-08-29T05:41:47Z","2019-01-11T15:39:33Z"
"","9813","Improve documentation for HTTP redirects when using Portlet SimpleFormController (or any of its superclasses) [SPR-5140]","**[Mindaugas Žakšauskas](https://jira.spring.io/secure/ViewProfile.jspa?name=mindas)** opened **[SPR-5140](https://jira.spring.io/browse/SPR-5140?redirect=false)** and commented  I have spent unproportionally high amount of time just trying to get a simple HTTP redirect working. Looked at the Javadocs, forums, etc. until asked a colleague who actually had traced this to Spring sources once after killing numerous hours. I think the Javadoc (and maybe the manual as well) must be improved to make this more clear.  The situation is simple: SimpleFormController handles a form submission, and needs to redirect to an external page/URL after it's done. The missing chain I (and most of other people I presume) missed there is to set the ""redirectAction"" to true. However, the crucial bit is that calling setRedirectAction( true ) is simply not enough - it needs to be called early, and preferably set in the portlet configuration. This, in my opinion, **must** be clearly explained in the header of Javadoc of org.springframework.web.servlet.view.RedirectView class, and possibly in the description of the redirectAction attribute itself.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-09-03T20:46:26Z","2012-06-19T03:46:48Z"
"","9340","Make ClassPathBeanDefinitionScanner.applyScope protected [SPR-4663]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-4663](https://jira.spring.io/browse/SPR-4663?redirect=false)** and commented  I'd like to do some custom scope processing of a scanned BeanDefinition.  Would it be possible to make ""applyScope"" protected?   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-04-06T09:19:49Z","2019-01-11T18:13:12Z"
"","9050","Make annotation component scanning more extensible [SPR-4372]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-4372](https://jira.spring.io/browse/SPR-4372?redirect=false)** and commented  I would like to do some custom operations when scanning for components which has lead me to wish for some additional extension points the Spring Component Scanning.  1. It would be nice if there were some sort of way to manipulate each BeanDefinitions found in ClassPathBeanDefinitionScanner.doScan prior to them being registered.  A simple protected callback method would be sufficient for my needs.  2. Provide some way to specify a custom ClassPathBeanDefinitionScanner in ComponentScanBeanDefinitionParser so that in order to use my custom ClassPathBeanDefinitionScanner I won't have to completely re-implement ComponentScanBeanDefinitionParser.parse()  Thoughts?  Mike   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-22T04:21:04Z","2012-06-19T03:47:48Z"
"","9030","Placeholders in context:component-scan's base-package attribute [SPR-4351]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-4351](https://jira.spring.io/browse/SPR-4351?redirect=false)** and commented    The ${base.package} never get's resolved when ComponentScanBeanDefinitionParser pulls it from the attribute.  I realize this is probably a much larger issue potentially involving certain attributes of many NamespaceHandlers.  However, I thought I'd create an issue for it since I didn't see any other mention of how it can be difficult identifying which attributes of a NamespaceHandler can accept property placeholders and which cannot.  Perhaps for the time being simply documenting in the XSD if the attribute can accept a property placeholder or not might help?  Mike  ---  **Affects:** 2.5.1  **Issue Links:** - #15057 make context:exclude-filter expression supports placeholder like context:component-scan base-package - #15058 please let context:component-scan base-package eval placeholder then split by comma","closed","type: enhancement,","spring-projects-issues","2008-01-17T04:47:31Z","2019-01-11T16:38:36Z"
"","9028","Error when using component-scan resource-pattern that may include directories [SPR-4349]","**[Mike Youngstrom](https://jira.spring.io/secure/ViewProfile.jspa?name=youngm)** opened **[SPR-4349](https://jira.spring.io/browse/SPR-4349?redirect=false)** and commented  If I use component-scan with a resource-pattern like:    Then I get and Access Denied error.  This appears to be caused by ClassPathScanningCandidateComponentProvider.findCandidateComponents attempting to open resources that are directories returned from resourcePatternResolver.getResources().  Perhaps before attempting to open the resource a check should be done to ensure that found resources are not a directories?  As a workaround a resource-pattern that won't return directories works:    org.springframework.beans.factory.BeanDefinitionStoreException: I/O failure during classpath scanning; nested exception is java.io.FileNotFoundException: C:\projects\StackWorkspace-2.1\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\stack-petstore\WEB-INF\classes\org\lds\stack\petstore\view\bean (Access is denied) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:186) at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:192) at org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parse(ComponentScanBeanDefinitionParser.java:159) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1246) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1236) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:488) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:383) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:327) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:295) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149) at org.lds.stack.spring.context.SpringContextUtils.loadBeanDefinitions(SpringContextUtils.java:49) at org.lds.stack.spring.context.ResourceFilterableWebApplicationContext.loadBeanDefinitions(ResourceFilterableWebApplicationContext.java:27) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:97) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:411) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:338) at org.lds.stack.spring.context.BootstrapContextLoader.createWebApplicationContext(BootstrapContextLoader.java:34) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3764) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4216) at org.apache.catalina.core.StandardContext.reload(StandardContext.java:3025) at org.apache.catalina.loader.WebappLoader.backgroundProcess(WebappLoader.java:432) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1278) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1570) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1579) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1579) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1559) at java.lang.Thread.run(Thread.java:595) Caused by: java.io.FileNotFoundException: C:\projects\StackWorkspace-2.1\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\stack-petstore\WEB-INF\classes\org\lds\stack\petstore\view\bean (Access is denied) at java.io.FileInputStream.open(Native Method) at java.io.FileInputStream.\(FileInputStream.java:106) at org.springframework.core.io.FileSystemResource.getInputStream(FileSystemResource.java:85) at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:74) at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:68) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:175) ... 32 more   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-17T02:00:50Z","2012-06-19T03:46:40Z"
"","9751","AnnotationMethodHandlerAdapter$ArgumentsResolver.resolveStandardArgument() uses isAssignableFrom() rather than equals() when binding standard parameters [SPR-5077]","**[Mike Poindexter](https://jira.spring.io/secure/ViewProfile.jspa?name=mpoindexter)** opened **[SPR-5077](https://jira.spring.io/browse/SPR-5077?redirect=false)** and commented  In AnnotationMethodHandlerAdapter line 588, the following code appears.  588                                 if (Principal.class.isAssignableFrom(parameterType)) { 589 	                                return request.getUserPrincipal(); 590 	                        }  If I have a method signature in my annotated controller that looks like  public String handleGet(`@ModelAttribute`(""myPrincipal"") MyPrincipalSubclass p)  then whenever the request has a principal associated with it I get an java.lang.IllegalArgumentException: argument type mismatch since a java.security.Principal is trying to be assigned to a com.example.MyPrincipalSubclass.  I think the test should be Principal.class.equals(parameterType).   ---  **Affects:** 2.5.2","closed","type: bug,","spring-projects-issues","2008-08-11T05:00:17Z","2012-06-19T03:46:43Z"
"","9301","@InitBinder methods with @RequestParameter mappings broken in 2.5.2 [SPR-4624]","**[Mike Poindexter](https://jira.spring.io/secure/ViewProfile.jspa?name=mpoindexter)** opened **[SPR-4624](https://jira.spring.io/browse/SPR-4624?redirect=false)** and commented  It seems as though using a `@RequestParam` parameter annotation on an `@InitBinder` method no longer works in Spring 2.5.2.  According to the javadoc on `@InitBinder` it should support the parameters that a `@RequestMapping` method would support, and this worked in 2.5.0 and 2.5.1.  My method signature is:  `@InitBinder` public void init(WebDataBinder binder, `@RequestParam`(""domainId"") String domainId)  Looking at the code in initBinder of HandlerMethodInvoker, it seems that it doesn't even try to process the annotations, only resolveArguments does that, but initBinder doesn't call it.  The stack trace that results from this configuration is below.  java.lang.IllegalStateException: Unsupported argument [java.lang.String] for InitBinder method: public void com.mpi.mp.admin.web.controller.security.LoginController.init(org.springframework.web.bind.WebDataBinder,java.lang.String)        at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.initBinder(HandlerMethodInvoker.java:284)            at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.resolveArguments(HandlerMethodInvoker.java:222)            at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:114)            at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:308)            at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:295)            at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:874)            at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:808)            at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:523)            at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:453)    ---  **Affects:** 2.5.2","closed","type: bug,","spring-projects-issues","2008-03-25T06:09:16Z","2012-06-19T03:47:37Z"
"","9857","Bean with no class definition throws NullsPointerException [SPR-5184]","**[Mike Heath](https://jira.spring.io/secure/ViewProfile.jspa?name=mheath)** opened **[SPR-5184](https://jira.spring.io/browse/SPR-5184?redirect=false)** and commented  If I declare a bean without a class, for example:  \  I get the following NullPointerException: Caused by: java.lang.NullPointerException at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:768) at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:186) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:859) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:831) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381) at org.springframework.context.support.AbstractRefreshableConfigApplicationContext.afterPropertiesSet(AbstractRefreshableConfigApplicationContext.java:148) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1368) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1334) ... 38 more  It seams to me that AbstractAutowireCapableBeanFactory around line 815 should have a check to see if beanClass is null, and if so throw some type of bean creation exception.    ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-09-29T11:35:25Z","2012-06-19T03:47:27Z"
"","9157","RequestContextListener issue with session-scoped bean and forbidden resource in JSF [SPR-4480]","**[Mike Hanafey](https://jira.spring.io/secure/ViewProfile.jspa?name=hanafey)** opened **[SPR-4480](https://jira.spring.io/browse/SPR-4480?redirect=false)** and commented  Using Glassfish v2, JSF 1.2, Spring 2.5, configured JSF access to spring beans via the standard delegating resolver, allowing for session scoped beans via org.springframework.web.context.request.RequestContextListener.  Most things worked as expected, except for the following case:  Part of the web app requires a specific role, which causes error code 403 on unauthorized access, and a JSF page is specified to be shown on a 403. This page contains a reference to the session scoped bean. When page is displayed because of the 403 error then RequestContextHolder throws the IllegalStateException in the currentRequestAttributes method, complaining about the probable need for a RequestContextListener.  The problem is the RequestContextListener did in fact store the attributes in the thread local variable, but this occurred under a different thread than the thread running when the bean access is attempted. This same page displays perfectly well if its URL is entered directly in the browser. The problem is clearly because the RequestContextListener runs as a different thread from the thread that ultimately displays the page as specified by the error page directive.  I don't know if this is a problem with Glassfish not adhering to the servlet spec, or if this is an issue with the RequestContextListener idea. The current problem arises under a narrow set of conditions, but it raises the concern that there may be other circumstances where relying on a threadlocal variable for the complete request cycle may fail.  The essential configuration is shown below, followed by the appserver traceback.  From web.xml: \ \Spring Framework Initilization\ \org.springframework.web.context.ContextLoaderListener\ \           	Spring Framework Initilization     	org.springframework.web.context.request.RequestContextListener               	403     	/about/accessDenied.jsf       From faces-config.xml:           	     	     	       From the facelets view accessDenied.xhtml:     \You have attempted to access a resource without the proper authorization\ Your key ring contains the following keys: #{badge.gurudoms} \  Exception traceback:  [#|2008-02-19T10:14:20.158-0500|SEVERE|sun-appserver9.1|facelets.viewhandler|_ThreadID=15;_ThreadName=httpSSLWorkerThread-8080-0;_RequestID=92bd52de-d39f-4c17-ae53-1f561bb34db9;|Error Rendering View[/about/accessDenied.xhtml] javax.el.ELException: /about/accessDenied.xhtml: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.badge': Scope 'session' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request? If you are actually operating within a web request and still receive this message,your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request. at com.sun.facelets.compiler.TextInstruction.write(TextInstruction.java:48) at com.sun.facelets.compiler.UIInstructions.encodeBegin(UIInstructions.java:39) at com.sun.facelets.compiler.UILeaf.encodeAll(UILeaf.java:149) at javax.faces.component.UIComponent.encodeAll(UIComponent.java:942) at com.sun.facelets.FaceletViewHandler.renderView(FaceletViewHandler.java:592) at org.ajax4jsf.application.ViewHandlerWrapper.renderView(ViewHandlerWrapper.java:108) at org.ajax4jsf.application.AjaxViewHandler.renderView(AjaxViewHandler.java:216) at com.sun.faces.lifecycle.RenderResponsePhase.execute(RenderResponsePhase.java:110) at com.sun.faces.lifecycle.Phase.doPhase(Phase.java:100) at com.sun.faces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:139) at javax.faces.webapp.FacesServlet.service(FacesServlet.java:266) at org.apache.catalina.core.ApplicationFilterChain.servletService(ApplicationFilterChain.java:411) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:317) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:198) at org.ajax4jsf.webapp.BaseXMLFilter.doXmlFilter(BaseXMLFilter.java:141) at org.ajax4jsf.webapp.BaseFilter.doFilter(BaseFilter.java:281) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:198) at org.apache.catalina.core.ApplicationDispatcher.doInvoke(ApplicationDispatcher.java:853) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:703) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:544) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:474) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:366) at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:531) at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:420) at org.apache.catalina.core.StandardHostValve.postInvoke(StandardHostValve.java:232) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:633) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:577) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:571) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1080) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:150) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:632) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:577) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:571) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1080) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:270) at com.sun.enterprise.web.connector.grizzly.DefaultProcessorTask.invokeAdapter(DefaultProcessorTask.java:637) at com.sun.enterprise.web.connector.grizzly.DefaultProcessorTask.doProcess(DefaultProcessorTask.java:568) at com.sun.enterprise.web.connector.grizzly.DefaultProcessorTask.process(DefaultProcessorTask.java:813) at com.sun.enterprise.web.connector.grizzly.DefaultReadTask.executeProcessorTask(DefaultReadTask.java:339) at com.sun.enterprise.web.connector.grizzly.DefaultReadTask.doTask(DefaultReadTask.java:261) at com.sun.enterprise.web.connector.grizzly.DefaultReadTask.doTask(DefaultReadTask.java:212) at com.sun.enterprise.web.connector.grizzly.TaskBase.run(TaskBase.java:265)         at com.sun.enterprise.web.connector.grizzly.ssl.SSLWorkerThread.run(SSLWorkerThread.java:106) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.badge': Scope 'session' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request? If you are actually operating within a web request and still receive this message,your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request. at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:299) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170) at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:662) at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:612) at genomix.trak.Badge$$EnhancerByCGLIB$$5f413c36.getGurudoms(\) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at javax.el.BeanELResolver.getValue(BeanELResolver.java:261) at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:143) at com.sun.faces.el.FacesCompositeELResolver.getValue(FacesCompositeELResolver.java:73) at com.sun.el.parser.AstValue.getValue(AstValue.java:138) at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:206) at com.sun.facelets.el.ELText$ELTextVariable.writeText(ELText.java:184) at com.sun.facelets.el.ELText$ELTextComposite.writeText(ELText.java:108) at com.sun.facelets.compiler.TextInstruction.write(TextInstruction.java:45) ... 43 more Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request? If you are actually operating within a web request and still receive this message,your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request. at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:102) at org.springframework.web.context.request.SessionScope.get(SessionScope.java:88) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:285) ... 60 more   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-02-19T01:40:34Z","2019-01-13T08:05:15Z"
"","9084","Support named parameters in CallableStatementCreator implementation [SPR-4406]","**[Mike Calmus](https://jira.spring.io/secure/ViewProfile.jspa?name=mcalmus)** opened **[SPR-4406](https://jira.spring.io/browse/SPR-4406?redirect=false)** and commented  Named parameters have been added for some operations, but the execution of a CallableStatement does not support named parameters.  The following code block from CallableStatementFactory.CallableStatementCreatorImpl would be affected or need to be extended:  ``` int sqlColIndx = 1; for (int i = 0; i < declaredParameters.size(); i++) { 	SqlParameter declaredParameter = (SqlParameter) declaredParameters.get(i); 	if (!declaredParameter.isResultsParameter()) { 		// So, it's a call parameter - part of the call string. 		// Get the value - it may still be null. 		Object inValue = this.inParameters.get(declaredParameter.getName()); 		if (declaredParameter instanceof ResultSetSupportingSqlParameter) { 			// It's an output parameter: SqlReturnResultSet parameters already excluded. 			// It need not (but may be) supplied by the caller. 			if (declaredParameter instanceof SqlOutParameter) { 				if (declaredParameter.getTypeName() != null) { 					cs.registerOutParameter(sqlColIndx, declaredParameter.getSqlType(), declaredParameter.getTypeName()); 				} 				else { 					if (declaredParameter.getScale() != null) { 						cs.registerOutParameter(sqlColIndx, declaredParameter.getSqlType(), declaredParameter.getScale().intValue()); 					} 					else { 						cs.registerOutParameter(sqlColIndx, declaredParameter.getSqlType()); 					} 				} 				if ((declaredParameter).isInputValueProvided() || inValue != null) { 					StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParameter, inValue); 				} 			} 		} 		else { 			// It's an input parameter- must be supplied by the caller. 			if (!this.inParameters.containsKey(declaredParameter.getName())) { 				throw new InvalidDataAccessApiUsageException( 						""Required input parameter '"" + declaredParameter.getName() + ""' is missing""); 			} 			StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParameter, inValue); 		} 		sqlColIndx++; 	} } ```  ---  **Issue Links:** - #17398 Support for named parameters in SimpleJdbcCall - #8193 StoredProcedure enhancement to allow parameters to be optional  10 votes, 8 watchers","open","has: votes-jira,","spring-projects-issues","2008-01-29T01:57:15Z","2019-01-11T17:31:27Z"
"","9503","The jarcontent subdirectory is not included in the source distribution [SPR-4827]","**[Mike Brosnan](https://jira.spring.io/secure/ViewProfile.jspa?name=mjbros)** opened **[SPR-4827](https://jira.spring.io/browse/SPR-4827?redirect=false)** and commented  The jarcontent directory is not supplied in the source distribution. You can't build the spring jars from source without this directory.  I was able to get the files from fisheye  Can you include this directory the next time?   ---  **Affects:** 2.5.4","closed","type: bug,","spring-projects-issues","2008-05-15T22:18:23Z","2012-06-19T03:47:00Z"
"","9337","Confusing message thrown from AbstractJasperReportsView with subreports [SPR-4660]","**[Michele Mauro](https://jira.spring.io/secure/ViewProfile.jspa?name=michele.mauro)** opened **[SPR-4660](https://jira.spring.io/browse/SPR-4660?redirect=false)** and commented  When using JasperReportsView with subreports, an incorrect configuration can lead to an IllegalArgumentException with this message:  Report URL [/WEB-INF/reports/DataSourceReport.jrxml] must either in .jasper or .jrxml  thrown from AbstractJasperReportsView.java:529. The message is confusing, because the reported url meets the criteria it is accused to violate. In reality, what happens is that the subreport url is the one to blame, but the message doesn't offer any clue to that, and is in fact misleading.  My suggestion is that line 530 should use the variable filename in the error message instead of getUrl(), so that the error message refers to the actual value causing the error.   ---  **Affects:** 2.0.8, 2.5.2  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-04-03T17:49:22Z","2012-06-19T03:47:41Z"
"","9336","Add example on how to configure JasperReports Sub-Reports with properties [SPR-4659]","**[Michele Mauro](https://jira.spring.io/secure/ViewProfile.jspa?name=michele.mauro)** opened **[SPR-4659](https://jira.spring.io/browse/SPR-4659?redirect=false)** and commented  In the Spring Reference Documentation, section 14.7.4.1, is described how to configure subreports for the JasperReports view technology. However, most of the examples of the rest of the chapter refer to a ResourceBundle configuration, while the example in this section refer to a xml configuration. The correct configuration to use when choosing the ResourceBundle is not obvious, so it would be very helpful to add an example that shows how to prepare the same configuration in both methods.  In the specific case, the example would read something like:  simpleReport.subReportUrls=ProductsSubReport=/WEB-INF/reports/subReportChild.jrxml  Failure to understand this subtlety leads to incorrect configuration that leads to a confusing error message (perhaps worth of another small jira) on the lines of 'Report URL [/WEB-INF/reports/DataSourceReport.jrxml] must either in .jasper or .jrxml' thrown from AbstractJasperReportsView.java:529.  Just a small edit of the documentation would close this issue.   ---  **Affects:** 2.5.2  1 votes, 4 watchers","closed","status: declined,","spring-projects-issues","2008-04-03T17:43:01Z","2015-09-22T18:20:30Z"
"","8892","setFetchSize on SimpleJdbcTemplate [SPR-4214]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-4214](https://jira.spring.io/browse/SPR-4214?redirect=false)** and commented  JdbcTemplate has operations (most important for me being setFetchSize) which are not present in the JdbcOperations interface. This is somewhat of a problem when using the SimpleJdbcTemplate and trying to use these operations, because it allows the recovery of the wrapped JdbcTemplate only as JdbcOperations. Of course one can then explicitely cast to JdbcTemplate so this is relatively minor. Another small problem with setFetchSize not being in the interface is difficulty with mocking when this operation is used, whatever one might say about the idea of mocking the database layer.  Are there important reasons why JdbcTemplate has such methods not declared in JdbcOperations, or may they be aded to the interface?   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-05T01:41:35Z","2015-09-22T17:34:37Z"
"","8880","extractDatabaseMetaData in JdbcUtils fails if the metadata class is not public [SPR-4202]","**[Michał Politowski](https://jira.spring.io/secure/ViewProfile.jspa?name=mpol)** opened **[SPR-4202](https://jira.spring.io/browse/SPR-4202?redirect=false)** and commented  This problem is related to the not-a-bug http://bugs.sun.com/view_bug.do?bug_id=4396435  If the class implementing DatabaseMetaData for a given database is not public, JdbcUtils cannot extract data from it. The solution would be to use DatabaseMetaData.class.getMethod instead of dbmd.getClass().getMethod, as described on the Sun bug page, unless extractDatabaseMetaData is expected to be used somewhere for methods not in this interface (could not find such uses during a quick search).   ---  **Affects:** 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: bug,","spring-projects-issues","2007-12-01T08:28:11Z","2012-06-19T03:47:17Z"
"","9792","SpringBeanAutowiringInterceptor doesn't call invocationContext.proceed() in autowireBean() and releaseBean() [SPR-5119]","**[Michal Fijas](https://jira.spring.io/secure/ViewProfile.jspa?name=michalf)** opened **[SPR-5119](https://jira.spring.io/browse/SPR-5119?redirect=false)** and commented  SpringBeanAutowiringInterceptor doesn't call invocationContext.proceed() in autowireBean() and releaseBean() breaking interceptor chain. It prevents other interceptors from being invoked.   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-08-27T03:57:58Z","2012-06-19T03:47:24Z"
"","9225","Annotation based Autowireing (byType) broken in Spring 2.5.1 [SPR-4548]","**[Michael Wyraz](https://jira.spring.io/secure/ViewProfile.jspa?name=micw)** opened **[SPR-4548](https://jira.spring.io/browse/SPR-4548?redirect=false)** and commented  I wrote 2 Beans, a bean StringResource which wraps one or more strings and a bean StringResourceCollector which auto-wires all beans of type StringResource. My application defines exactly one StringResource and multiple StringResourceCollectors.  Using xml-configured autowireing works fine. But using annotation-based `@Autowired`(required=false) results in the following strange behaviour:  - with exactly one StringResourceCollector it works as expected - with multiple StringResourceCollectors and zero or more than one StringResources it works as expected - with multiple StringResourceCollectors of which only some are auto-wired by xml declaration, the annotaion-based autowireing is not working - with exactly one StringResource and multiple StringResourceCollectors (using only annotation-based auto-wireing) the first StringResourceCollector get's the resource wired but for the next StringResourceCollectors spring throws an exception ""java.lang.IllegalArgumentException: argument type mismatch"".    ---  **Affects:** 2.5.1  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/13742/test.zip) (_2.10 kB_)","closed","type: bug,","spring-projects-issues","2008-03-05T18:32:10Z","2012-06-19T03:47:44Z"
"","9181","Adding getLastModified() to Resource [SPR-4504]","**[Michael Wyraz](https://jira.spring.io/secure/ViewProfile.jspa?name=micw)** opened **[SPR-4504](https://jira.spring.io/browse/SPR-4504?redirect=false)** and commented  I build a system which uses Resource implementation and caches compiled results from resources and delivers some resources via http. In both cases I need to get the lastModified timestamp of the resources (if available).  Currently I have to deal with different resource types to get the lastModified. But think this shold be implemented within resources. Otherwise it could be implemented in ResourceUtils but that makes it harder to implement it.  The getLastModified() function should return 0L when the value is not availabe (e.g. in case of StreamResources) or if it's a heavyweight operation to get the vaule (i.e for http urls where a http request would be required). Or method could have a boolean parameter which allows to do heavyweight operations like http requests to retrieve the value.  - for FileSystemResource lastModified() of the underlying file needs to be called (easy to implement) - for ClassPathResource - if it's a file - lastModified() needs to be called (also easy to implement) - for ClassPathResource - if it's something a jar - ResourceUtils.extractJarFileURL() needs to be called until we get a resource that is not in a jar file (also easy to implement) - for any other resource a decision must be made weather to implement this or to simply return 0L  Having a getLastModified() allows to implement ResourceMonitors which sends events when a resource was changed.  Estimated implementation for filesystem based resources (files, classpath resources which resolves to files or to entries in jars) is 1/2 day. Implementation for http:// urls and others would maybe take a few days.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-26T07:32:16Z","2012-06-19T03:46:49Z"
"","9180","Resolving relative resource paths with ResourceUtils [SPR-4503]","**[Michael Wyraz](https://jira.spring.io/secure/ViewProfile.jspa?name=micw)** opened **[SPR-4503](https://jira.spring.io/browse/SPR-4503?redirect=false)** and commented  Hi,  i wrote a xslt UriResolver which handles spring resources and looks them up with the application context (allowing to use uris like classpath: in xslt system ids). I had the problem that i needed to get a relative resource for includes (which was easy) and to get a system id (i.e. an absolute resource url) which was impossible since the resource has no getLocation or so which returns an abslute spring resource string.  So i wrote some code, which resolves an absolute or relative spring resource location against a base location (wich can also be absolute or relative). The code is quite simple and could be added to ResoureUtils:      public static String applyPath(String base, String sub)     {         if (sub==null) return base;         if (base==null || ResourceUtils.isUrl(sub)) return sub;              String prefix;         String basePath;                  if (base.startsWith(ResourceUtils.CLASSPATH_URL_PREFIX))         {             basePath=base.substring(ResourceUtils.CLASSPATH_URL_PREFIX.length());             prefix=ResourceUtils.CLASSPATH_URL_PREFIX;         }         else if (ResourceUtils.isUrl(base))         {             int pos=base.indexOf(':')+1;             basePath=base.substring(pos);             prefix=base.substring(0,pos);         }         else         {             basePath=base;             prefix="""";         }                  if (sub.startsWith(""/"")) basePath=sub;         else basePath=StringUtils.applyRelativePath(basePath, sub);                  return prefix+StringUtils.cleanPath(basePath);     }    ---  **Affects:** 2.5.1  **Attachments:** - [ResourceHelperTests.java](https://jira.spring.io/secure/attachment/13755/ResourceHelperTests.java) (_5.65 kB_)","closed","type: enhancement,","spring-projects-issues","2008-02-26T07:14:51Z","2015-09-22T17:34:36Z"
"","9759","registers a PersistenceAnnotationBeanPostProcessor if spring-context bundle can see EntityManagerFactory, not if the requesting bundle can see EntityManagerFactory [SPR-5086]","**[Michael Pilquist](https://jira.spring.io/secure/ViewProfile.jspa?name=mpilquist)** opened **[SPR-5086](https://jira.spring.io/browse/SPR-5086?redirect=false)** and commented  Currently, if you have an OSGi bundle whose app context includes  but who doesn't use/import JPA, and you have another bundle in the OSGi platform that provides the javax.persistence package, you'll get an exception at bundle start up.  This is caused by the JPA detection code in AnnotationConfigUtils, which determines whether or not to register the JPA bean post processor in this fashion:  private static final boolean jpaPresent = ClassUtils.isPresent(""javax.persistence.EntityManagerFactory"", AnnotationConfigUtils.class.getClassLoader()) && ClassUtils.isPresent(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, AnnotationConfigUtils.class.getClassLoader());  As you can see, it is using the classloader of the AnnotationConfigUtils class, which can see the JPA package due to the optional import in spring-core's manifest.  This should use the classloader of the bundle that declares , perhaps using the thread context class loader?  The workaround is to have the application bundle add an Import-Package statement for org.springframework.orm.jpa.support, which is not desirable.   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-08-15T01:20:48Z","2012-06-19T03:46:51Z"
"","9439","JmsTemplate.send cannot safely be called from JPA @PostUpdate method [SPR-4762]","**[Michael Pilquist](https://jira.spring.io/secure/ViewProfile.jspa?name=mpilquist)** opened **[SPR-4762](https://jira.spring.io/browse/SPR-4762?redirect=false)** and commented  Consider a scenario where a JMS message is sent from within a JPA `@PostUpdate` callback.  If the JmsTemplate has sessionTransacted set to true, only the first message that is sent goes through.  This is because `@PostUpdate` callbacks are fired after ""before completion"" synchronization has been triggered.  This results in the JmsResource never being unbound from the TransactionSynchronizationManager and hence, being reused for subsequent `@PostUpdate` callbacks.  Further, since the JmsResource is still bound, new synchronizations are never registered.   ---  **Affects:** 2.5.2","closed","type: bug,","spring-projects-issues","2008-04-28T16:20:00Z","2012-06-19T03:47:48Z"
"","9335","spring-context missing optional Import-Package directive for javax.persistence [SPR-4658]","**[Michael Pilquist](https://jira.spring.io/secure/ViewProfile.jspa?name=mpilquist)** opened **[SPR-4658](https://jira.spring.io/browse/SPR-4658?redirect=false)** and commented  AnnotationConfigUtils checks if JPA is present (and hence, if the PersistenceAnnotationBeanPostProcessor should be registered) by trying to dynamically load javax.persistence.EntityManagerFactory.  This fails in an OSGi container because the spring-context bundle does not import the javax.persistence package in its manifest.   ---  **Affects:** 2.5.2","closed","in: core,","spring-projects-issues","2008-04-03T11:47:01Z","2012-06-19T03:47:16Z"
"","8891","Methods annotated with @BeforeMethod and @AfterMethod are not being run within a transaction when extending AbstractTransactionalTestNGSpringContextTests  [SPR-4213]","**[Michael Pilquist](https://jira.spring.io/secure/ViewProfile.jspa?name=mpilquist)** opened **[SPR-4213](https://jira.spring.io/browse/SPR-4213?redirect=false)** and commented  Section 8.3.7.4, page 205, of the reference manual states: ""Any before methods (e.g., methods annotated with JUnit 4's `@Before`) and any after methods (e.g., methods annotated with JUnit 4's `@After`) will be executed within a transaction.""  TestNG `@BeforeMethod` and `@AfterMethod` annotations aren't mentioned.  This issue is a request to run TestNG before and after methods within a transaction.  Otherwise, there's no TestNG equivalent of onSetUpInTransaction.   ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2007-12-04T09:51:25Z","2019-01-11T17:00:45Z"
"","9841","ConfigurableMimeFileTypeMap does not close mime type input stream [SPR-5168]","**[Michael Pilone](https://jira.spring.io/secure/ViewProfile.jspa?name=mpilone)** opened **[SPR-5168](https://jira.spring.io/browse/SPR-5168?redirect=false)** and commented  Line 142 of the ConfigurableMimeFileTypeMap opens an input stream to read the mime file types but never closes the stream. This results in an exception in a J2EE container when it tries to undeploy the application. It appears that the Glassfish container can catch and ignore the exception, but I'm not sure that there aren't other side effects. The input stream should really be closed after the mime types are loaded.  This issue was originally raised in the forums in 2007: http://forum.springframework.org/archive/index.php/t-44508.html  The stack trace from Glassfish is below:  [#|2008-09-18T08:40:10.620-0400|WARNING|sun-appserver9.1|javax.enterprise.system.core.classloading|_ThreadID=21;_ThreadName=Timer-42;_RequestID=c98284c9-5341-4216-b613-92ff8d825309;|Input stream has been finalized or forced closed without being explicitly closed; stream instantiation reported in following stack trace java.lang.Throwable 	at com.sun.enterprise.loader.EJBClassLoader$SentinelInputStream.(EJBClassLoader.java:1169) 	at com.sun.enterprise.loader.EJBClassLoader$InternalJarURLConnection.getInputStream(EJBClassLoader.java:1262) 	at java.net.URL.openStream(URL.java:1007) 	at java.lang.ClassLoader.getResourceAsStream(ClassLoader.java:1161) 	at com.sun.enterprise.loader.EJBClassLoader.getResourceAsStream(EJBClassLoader.java:799) 	at java.lang.Class.getResourceAsStream(Class.java:1998) 	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:136) 	at org.springframework.mail.javamail.ConfigurableMimeFileTypeMap.createFileTypeMap(ConfigurableMimeFileTypeMap.java:142) 	at org.springframework.mail.javamail.ConfigurableMimeFileTypeMap.getFileTypeMap(ConfigurableMimeFileTypeMap.java:118) 	at org.springframework.mail.javamail.ConfigurableMimeFileTypeMap.afterPropertiesSet(ConfigurableMimeFileTypeMap.java:105) 	at org.springframework.mail.javamail.JavaMailSenderImpl.(JavaMailSenderImpl.java:107) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:494) 	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:100) 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:61) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:877) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:839) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) 	at java.security.AccessController.doPrivileged(Native Method) 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221) 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429) 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381) 	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255) 	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199) 	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) 	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4523) 	at org.apache.catalina.core.StandardContext.start(StandardContext.java:5184) 	at com.sun.enterprise.web.WebModule.start(WebModule.java:326) 	at com.sun.enterprise.web.LifecycleStarter.doRun(LifecycleStarter.java:58) 	at com.sun.appserv.management.util.misc.RunnableBase.runSync(RunnableBase.java:304) 	at com.sun.appserv.management.util.misc.RunnableBase.run(RunnableBase.java:341) 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417) 	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269) 	at java.util.concurrent.FutureTask.run(FutureTask.java:123) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) 	at java.lang.Thread.run(Thread.java:595) |#] [#|2008-09-18T08:40:10.620-0400|WARNING|sun-appserver9.1|javax.enterprise.system.core.classloading|_ThreadID=21;_ThreadName=Timer-42;_RequestID=c98284c9-5341-4216-b613-92ff8d825309;|Input stream has been finalized or forced closed without being explicitly closed; stream instantiation reported in following stack trace java.lang.Throwable at com.sun.enterprise.loader.EJBClassLoader$SentinelInputStream.\(EJBClassLoader.java:1169) at com.sun.enterprise.loader.EJBClassLoader$InternalJarURLConnection.getInputStream(EJBClassLoader.java:1262) at java.net.URL.openStream(URL.java:1007) at java.lang.ClassLoader.getResourceAsStream(ClassLoader.java:1161) at com.sun.enterprise.loader.EJBClassLoader.getResourceAsStream(EJBClassLoader.java:799) at java.lang.Class.getResourceAsStream(Class.java:1998) at org.quartz.core.QuartzScheduler.\(QuartzScheduler.java:97) at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1166) at org.quartz.impl.StdSchedulerFactory.getScheduler(StdSchedulerFactory.java:1355) at org.springframework.scheduling.quartz.SchedulerFactoryBean.createScheduler(SchedulerFactoryBean.java:734) at org.springframework.scheduling.quartz.SchedulerFactoryBean.afterPropertiesSet(SchedulerFactoryBean.java:616) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1368) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1334) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:423) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:255) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4523) at org.apache.catalina.core.StandardContext.start(StandardContext.java:5184) at com.sun.enterprise.web.WebModule.start(WebModule.java:326) at com.sun.enterprise.web.LifecycleStarter.doRun(LifecycleStarter.java:58) at com.sun.appserv.management.util.misc.RunnableBase.runSync(RunnableBase.java:304) at com.sun.appserv.management.util.misc.RunnableBase.run(RunnableBase.java:341) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269) at java.util.concurrent.FutureTask.run(FutureTask.java:123) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595)   ---  **Affects:** 2.0.8, 2.5.5  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-09-18T00:42:59Z","2012-06-19T03:47:18Z"
"","9445","webmvc HandlerMethodInvoker walks entire Model, triggering lazy loads [SPR-4768]","**[Michael Maraist](https://jira.spring.io/secure/ViewProfile.jspa?name=maraist)** opened **[SPR-4768](https://jira.spring.io/browse/SPR-4768?redirect=false)** and commented  Line 380 of org.springframework.web.bind.annotation.support.HandlerMethodInvoker creates an extraneous wrapper HashSet around the Model Map's EntrySet.  This has zero direct benefit (it's already guaranteed to be unique, and entry-sets are directly inquireable), and thus I can only imagine that it was meant to force a walk through the model map's collections; possibly to force materialization of lazy objects.  The negative side effect is that it's very slow for large lists, since it triggers walking iterators recursively.  This WILL spider-web throughout all lazily instantiated objects and collections, by invoking all their hashCode() functions in turn.  I noticed this when I produced explicit Lazily initialized collections which only hit hibernate when their accessor methods are called.  It allows me to have one controller with many 'optional' Model attributes.  My solution to this was to override the AbstractXXX collection class's hashCode and equals methods - preventing them from walking their respective collections.  Since someone went out of their way to produce this wrapper HashSet, is there is valid reason?  I'll attach a patch which at least makes this ""feature"" optional (and is disabled by default).    ---  **Affects:** 2.5.4  **Attachments:** - [HandlerMethodInvoker.java.2.5.4.patch](https://jira.spring.io/secure/attachment/14012/HandlerMethodInvoker.java.2.5.4.patch) (_1.62 kB_)","closed","type: bug,","spring-projects-issues","2008-05-01T03:58:49Z","2012-06-19T03:47:47Z"
"","9020","Hibernate Search support: HibernateTemplate.createSessionProxy should support additional interfaces [SPR-4341]","**[Michael Lossos](https://jira.spring.io/secure/ViewProfile.jspa?name=mlossos)** opened **[SPR-4341](https://jira.spring.io/browse/SPR-4341?redirect=false)** and commented  We are integrating Hibernate Search (3.0.0 GA) into an existing Hibernate / Spring Framework / Eclipse RCP configuration. Unfortunately, Hibernate Search's FullTextSessionImpl assumes that it will be passed an org.hibernate.classic.Session. When using Spring for Hibernate transaction management, Spring creates a defensive Proxy that disables the Session.close() method. This Proxy does not implement the EventSource nor classic.Session, while Hibernate Search assumes that it does and has a ClassCastException in the FullTextSessionImpl constructor.  Hibernate Search's FullTextSessionImpl does this which is wrong for the Spring Hibernate Session Proxy:  public FullTextSessionImpl(org.hibernate.Session session) { this.session = (Session) session; // classic.Session! this.eventSource = (EventSource) session; this.sessionImplementor = (SessionImplementor) session; }  The Spring code in question is in HibernateTemplate.createSessionProxy:      protected Session createSessionProxy(Session session) {     	Class[] sessionIfcs = null;     	if (session instanceof SessionImplementor) {     		sessionIfcs = new Class[] {Session.class, SessionImplementor.class};     	}     	else {     		sessionIfcs = new Class[] {Session.class};     	}     	return (Session) Proxy.newProxyInstance(     			getClass().getClassLoader(), sessionIfcs,     			new CloseSuppressingInvocationHandler(session));     }  Modifying that code to detect and implement the org.hibernate.classic.Session and EventSource interfaces will allow easier integration with Hibernate Search.  The workaround for this is to use HibernateTemplate.setExposeNativeSession( true ) before executing the HibernateCallback (causing the SessionImpl to be passed directly, without a Proxy). This exposes the Session to potential close() and is **not** a good idea.  I've filed this as a Hibernate Search bug here but they said they won't fix it: http://opensource.atlassian.com/projects/hibernate/browse/HSEARCH-148   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-15T11:16:46Z","2012-06-19T03:47:35Z"
"","9196","Proposed Enhancement to the framework [SPR-4519]","**[Michael Labib](https://jira.spring.io/secure/ViewProfile.jspa?name=mikelabib)** opened **[SPR-4519](https://jira.spring.io/browse/SPR-4519?redirect=false)** and commented  I like to start a development initiative that will sit on top of the spring framework but include some nice features to automate code efforts as well as implement a new design pattern that I've conceptually developed and would like pursue.  I thought I would start by contacting you guys first to see if we can work on this effort together.  I'm looking forward to hearing back from you.  Best Regards, Michael Labib mikelabib@yahoo.com 773.410.7065   --- No further details from [SPR-4519](https://jira.spring.io/browse/SPR-4519?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-02-28T13:45:46Z","2012-06-19T09:36:31Z"
"","9567","Cant  use CustomNumberEditor with locale french [SPR-4891]","**[Michael Courcy](https://jira.spring.io/secure/ViewProfile.jspa?name=michaelcourcy)** opened **[SPR-4891](https://jira.spring.io/browse/SPR-4891?redirect=false)** and commented  Blank space are note properly parsed when using a customNumberEditor , here is a JUnit that illustrates it  public void test(){ //the user type 1000 in the float field CustomNumberEditor numberEditor = new CustomNumberEditor( Float.class, NumberFormat.getInstance(Locale.FRENCH), false); numberEditor.setAsText(""1000""); String text = numberEditor.getAsText(); System.out.println(text); //output 1 000 blank between 1 and 000 is fine System.out.println(""1 000"".equals(text)); // output false !!!! System.out.println(""1 000.lentgth() "" + ""1 000"".length()); // 5 in both cases System.out.println(""text.lentgth() "" + text.length()); byte[] byte1 = ""1 000"".getBytes(); byte[] byte2 = text.getBytes(); System.out.println(""byting 1 000""); for(byte b : byte1){ System.out.print("" "" + b + "" ""); } //ouput 49  32  48  48  48 System.out.println(); System.out.println(""byting text""); for(byte b : byte2){ System.out.print("" "" + b + "" ""); } //output 49  -62  -96  48  48  48 System.out.println();          //but when  the form display firefox convert the -62 -96 sequence          //into a regular space 32         //thus here is what happen When I resubmit the form         //beside the user learn it can put space          //between number thus he does it         numberEditor.setAsText(""1 000"");         System.out.println(""parsed value of 1 000 : "" + numberEditor.getValue());         //ouput 1.0 snif !!!                    }  Practically I can't use this editor.   ---  **Affects:** 2.5.3","closed","type: bug,","spring-projects-issues","2008-06-04T19:58:59Z","2012-06-19T03:47:01Z"
"","9665","DelegatingActionProxy doesn't consider parameter definition in Struts ActionMapping [SPR-4989]","**[Michael Cocheteau](https://jira.spring.io/secure/ViewProfile.jspa?name=mcocheteau)** opened **[SPR-4989](https://jira.spring.io/browse/SPR-4989?redirect=false)** and commented  Struts allows to define a parameter in an ActionMapping, which represents the method of the Action, that has to be called (instead of the default ""execute(...)"" method of an action) (details on: http://struts.apache.org/1.x/struts-extras/apidocs/org/apache/struts/actions/MappingDispatchAction.html)  The org.springframework.web.struts.DelegatingActionProxy doesn't consider this feature of struts. So any defined parameter in an ActionMapping of the struts-config.xml will be ignored.  Proposal to fix it: //get the parameter name from the ActionMapping ActionMapping actionMapping = (ActionMapping) request.getAttribute(""org.apache.struts.action.mapping.instance""); String parameterName = actionMapping.getParameter();  //get the parameter value (=method to call) from the request String methodName = request.getParameter(parameterName);  //call the method via reflection    ---  **Affects:** 2.5.4  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-07-06T18:44:03Z","2012-06-19T09:36:23Z"
"","9102","DelegatingRequestProcessors do not set ActionServlet for Spring managed beans [SPR-4424]","**[Maxim Gordienko](https://jira.spring.io/secure/ViewProfile.jspa?name=fuzebest)** opened **[SPR-4424](https://jira.spring.io/browse/SPR-4424?redirect=false)** and commented  Both DelegatingRequestProcessor and DelegatingTilesRequestProcessor do not set servlet (ActionServlet type) property of Spring managed actions (configured in Spring context). This action property is required for LookupDispatchAction.  adding action.setServlet(this.servlet); before returning action from getDelegateAction() fixes the issue.   ---  **Affects:** 2.5.1","closed","status: declined,","spring-projects-issues","2008-02-05T02:39:27Z","2019-01-12T16:39:15Z"
"","9033","Customize field value retrieval in BeanPropertyRowMapper [SPR-4355]","**[Maxim Gordienko](https://jira.spring.io/secure/ViewProfile.jspa?name=fuzebest)** opened **[SPR-4355](https://jira.spring.io/browse/SPR-4355?redirect=false)** and commented  org.springframework.jdbc.core.AbstractBeanPropertyRowMapper (superclass of all result set-bean mappers) does not allow custom column to bean field mapping (e.g. to map Y/N values to boolean field). It would be nice to have callback method for child override to customize field retrieval.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-17T23:52:29Z","2012-06-19T03:46:57Z"
"","9375","form tags path attribute leaving square brackets out of id attribute of html tag [SPR-4698]","**[Matthew Tatum](https://jira.spring.io/secure/ViewProfile.jspa?name=matthew%20tatum)** opened **[SPR-4698](https://jira.spring.io/browse/SPR-4698?redirect=false)** and commented  I have a problem that since moving from Spring 2.0 to Spring 2.5 form tags that render collections are working slightly differently.  previously rendered as: \ and is now rendering: \  Notice the lack of square brackets in the id attribute. This may not seem like much but we have a lot of javascript that relies on it rendering the first way!  ---  **Affects:** 2.5.3  **Issue Links:** - #7069 Using array syntax generates invalid id","closed","status: declined,","spring-projects-issues","2008-04-14T00:24:14Z","2019-01-12T16:28:18Z"
"","9684","Support standalone JTA providers for TopLink/EclipseLink [SPR-5009]","**[Matthew T. Adams](https://jira.spring.io/secure/ViewProfile.jspa?name=matthewadams)** opened **[SPR-5009](https://jira.spring.io/browse/SPR-5009?redirect=false)** and commented  See http://forums.oracle.com/forums/thread.jspa?threadID=677505&tstart=0 for background info.  It would be nice if Spring implemented a generic ServerPlatform adapter and allowed for populating the JTA TransactionManager through a Spring bean reference.   ---  **Affects:** 2.5.5  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-07-15T06:58:04Z","2009-03-19T19:54:00Z"
"","9248","Documentation error in Annotation-based Controller section [SPR-4571]","**[Matt Young](https://jira.spring.io/secure/ViewProfile.jspa?name=attack7)** opened **[SPR-4571](https://jira.spring.io/browse/SPR-4571?redirect=false)** and commented  Documentation section --  13.12.1. Setting up the dispatcher for annotation support  Two packages are incorrect in the HTML documentation:                  Should be:  \ \   ---  **Affects:** 2.5.2","closed","type: task,","spring-projects-issues","2008-03-11T07:08:31Z","2012-06-19T03:46:52Z"
"","9586","Add support for JMX connection retries [SPR-4910]","**[Matt Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=namwonmkw)** opened **[SPR-4910](https://jira.spring.io/browse/SPR-4910?redirect=false)** and commented  Add support in MBeanClientInterceptor to allow for the server connection to be reconnected after a connection failure.  This would be similar to what has already been done for the JaxRpcPortClientInterceptor.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-06-11T03:45:47Z","2012-06-19T03:46:49Z"
"","9585","Add support for environment variables for MBean connection. [SPR-4909]","**[Matt Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=namwonmkw)** opened **[SPR-4909](https://jira.spring.io/browse/SPR-4909?redirect=false)** and commented  The current version of MBeanClientInterceptor does not allow for environment variable to be configured for the JMXConnection as detailed in JMXConnector JMXConnectorFactory.connect(JMXServiceURL serviceURL,  Map environment) to allow for username and password authentication.   --- No further details from [SPR-4909](https://jira.spring.io/browse/SPR-4909?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-06-11T03:40:45Z","2012-06-19T03:47:09Z"
"","9450","Spring Aspects 2.5.4 doesn't work with AspectJ 1.5.4 or 1.6.0 [SPR-4773]","**[Matt Raible](https://jira.spring.io/secure/ViewProfile.jspa?name=mraible)** opened **[SPR-4773](https://jira.spring.io/browse/SPR-4773?redirect=false)** and commented  [INFO] [aspectj:compile {execution: default}] [ERROR] ABORT May 2, 2008 7:18:13 PM org.aspectj.weaver.tools.Jdk14Trace info INFO: Dumping to /Users/mraible/Work/appfuse-2.0/service/./ajcore.20080502.191813.928.txt  Contents of file:  ---- AspectJ Properties --- AspectJ Compiler 1.5.4 built on Thursday Dec 20, 2007 at 13:44:10 GMT ---- Dump Properties --- Dump file: ajcore.20080502.191813.928.txt Dump reason: org.aspectj.weaver.BCException Dump on exception: true Dump at exit condition: abort ---- Exception Information --- ---- System Properties --- java.runtime.name=Java(TM) 2 Runtime Environment, Standard Edition sun.boot.library.path=/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Libraries java.vm.version=1.5.0_13-119 awt.nativeDoubleBuffering=true gopherProxySet=false java.vm.vendor=Apple Inc. java.vendor.url=http://www.apple.com/ path.separator=: java.vm.name=Java HotSpot(TM) Client VM file.encoding.pkg=sun.io sun.java.launcher=SUN_STANDARD user.country=US sun.os.patch.level=unknown java.vm.specification.name=Java Virtual Machine Specification user.dir=/Users/mraible/Work/appfuse-2.0/service java.runtime.version=1.5.0_13-b05-237 java.awt.graphicsenv=apple.awt.CGraphicsEnvironment java.endorsed.dirs=/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home/lib/endorsed os.arch=i386 java.io.tmpdir=/tmp line.separator=  java.vm.specification.vendor=Sun Microsystems Inc. os.name=Mac OS X classworlds.conf=/opt/tools/maven2/bin/m2.conf sun.jnu.encoding=MacRoman java.library.path=/Applications/JProfiler4/bin/macos:.:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java java.specification.name=Java Platform API Specification java.class.version=49.0 sun.management.compiler=HotSpot Client Compiler os.version=10.5.2 http.nonProxyHosts=local|**.local|169.254/16|**.169.254/16 user.home=/Users/mraible user.timezone=America/Denver java.awt.printerjob=apple.awt.CPrinterJob file.encoding=MacRoman java.specification.version=1.5 java.class.path=/opt/tools/maven2/boot/classworlds-1.1.jar user.name=mraible java.vm.specification.version=1.0 java.home=/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home sun.arch.data.model=32 user.language=en java.specification.vendor=Sun Microsystems Inc. awt.toolkit=apple.awt.CToolkit java.vm.info=mixed mode java.version=1.5.0_13 java.ext.dirs=/Library/Java/Extensions:/System/Library/Java/Extensions:/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home/lib/ext sun.boot.class.path=/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Classes/ui.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Classes/laf.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Classes/sunrsasign.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Classes/jsse.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Classes/jce.jar:/System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Classes/charsets.jar java.vendor=Apple Inc. maven.home=/opt/tools/maven2 file.separator=/ spring.version=2.5.4 java.vendor.url.bug=http://bugreport.apple.com/ sun.io.unicode.encoding=UnicodeLittle sun.cpu.endian=little mrj.version=1040.1.5.0_13-237 socksNonProxyHosts=local|**.local|169.254/16|**.169.254/16 ftp.nonProxyHosts=local|**.local|169.254/16|**.169.254/16 sun.cpu.isalist= ---- Command Line --- -1.5 -showWeaveInfo -source 1.5 -verbose -classpath /Users/mraible/.m2/repository/antlr/antlr/2.7.6/antlr-2.7.6.jar:/Users/mraible/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/Users/mraible/.m2/repository/asm/asm/1.5.3/asm-1.5.3.jar:/Users/mraible/.m2/repository/asm/asm-attrs/1.5.3/asm-attrs-1.5.3.jar:/Users/mraible/.m2/repository/backport-util-concurrent/backport-util-concurrent/3.1/backport-util-concurrent-3.1.jar:/Users/mraible/.m2/repository/cglib/cglib/2.1_3/cglib-2.1_3.jar:/Users/mraible/.m2/repository/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar:/Users/mraible/.m2/repository/commons-codec/commons-codec/1.3/commons-codec-1.3.jar:/Users/mraible/.m2/repository/commons-collections/commons-collections/3.2/commons-collections-3.2.jar:/Users/mraible/.m2/repository/commons-httpclient/commons-httpclient/3.0/commons-httpclient-3.0.jar:/Users/mraible/.m2/repository/commons-lang/commons-lang/2.3/commons-lang-2.3.jar:/Users/mraible/.m2/repository/commons-logging/commons-logging/1.0.3/commons-logging-1.0.3.jar:/Users/mraible/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:/Users/mraible/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar:/Users/mraible/.m2/repository/javax/mail/mail/1.4/mail-1.4.jar:/Users/mraible/.m2/repository/javax/persistence/persistence-api/1.0/persistence-api-1.0.jar:/Users/mraible/.m2/repository/javax/transaction/jta/1.0.1B/jta-1.0.1B.jar:/Users/mraible/.m2/repository/jdom/jdom/1.0/jdom-1.0.jar:/Users/mraible/.m2/repository/jmock/jmock/1.1.0/jmock-1.1.0.jar:/Users/mraible/.m2/repository/junit/junit/4.4/junit-4.4.jar:/Users/mraible/.m2/repository/log4j/log4j/1.2.13/log4j-1.2.13.jar:/Users/mraible/.m2/repository/mysql/mysql-connector-java/5.1.6/mysql-connector-java-5.1.6.jar:/Users/mraible/.m2/repository/net/java/dev/stax-utils/stax-utils/20040917/stax-utils-20040917.jar:/Users/mraible/.m2/repository/net/sf/ehcache/ehcache/1.4.1/ehcache-1.4.1.jar:/Users/mraible/.m2/repository/net/sf/jsr107cache/jsr107cache/1.0/jsr107cache-1.0.jar:/Users/mraible/.m2/repository/org/apache/xbean/xbean-spring/2.8/xbean-spring-2.8.jar:/Users/mraible/.m2/repository/org/appfuse/appfuse-data-common/2.0.2-SNAPSHOT/appfuse-data-common-2.0.2-SNAPSHOT.jar:/Users/mraible/.m2/repository/org/appfuse/appfuse-hibernate/2.0.2-SNAPSHOT/appfuse-hibernate-2.0.2-SNAPSHOT.jar:/Users/mraible/.m2/repository/org/aspectj/aspectjrt/1.5.4/aspectjrt-1.5.4.jar:/Users/mraible/.m2/repository/org/aspectj/aspectjweaver/1.5.4/aspectjweaver-1.5.4.jar:/Users/mraible/.m2/repository/org/codehaus/woodstox/wstx-asl/3.2.0/wstx-asl-3.2.0.jar:/Users/mraible/.m2/repository/org/codehaus/xfire/xfire-aegis/1.2.6/xfire-aegis-1.2.6.jar:/Users/mraible/.m2/repository/org/codehaus/xfire/xfire-annotations/1.2.6/xfire-annotations-1.2.6.jar:/Users/mraible/.m2/repository/org/codehaus/xfire/xfire-core/1.2.6/xfire-core-1.2.6.jar:/Users/mraible/.m2/repository/org/codehaus/xfire/xfire-java5/1.2.6/xfire-java5-1.2.6.jar:/Users/mraible/.m2/repository/org/codehaus/xfire/xfire-spring/1.2.6/xfire-spring-1.2.6.jar:/Users/mraible/.m2/repository/org/codehaus/xfire/xfire-xmlbeans/1.2.6/xfire-xmlbeans-1.2.6.jar:/Users/mraible/.m2/repository/org/hibernate/hibernate/3.2.6.ga/hibernate-3.2.6.ga.jar:/Users/mraible/.m2/repository/org/hibernate/hibernate-annotations/3.3.0.ga/hibernate-annotations-3.3.0.ga.jar:/Users/mraible/.m2/repository/org/hibernate/hibernate-commons-annotations/3.3.0.ga/hibernate-commons-annotations-3.3.0.ga.jar:/Users/mraible/.m2/repository/org/springframework/spring-aop/2.5.4/spring-aop-2.5.4.jar:/Users/mraible/.m2/repository/org/springframework/spring-aspects/2.5.4/spring-aspects-2.5.4.jar:/Users/mraible/.m2/repository/org/springframework/spring-beans/2.5.4/spring-beans-2.5.4.jar:/Users/mraible/.m2/repository/org/springframework/spring-context/2.5.4/spring-context-2.5.4.jar:/Users/mraible/.m2/repository/org/springframework/spring-context-support/2.5.4/spring-context-support-2.5.4.jar:/Users/mraible/.m2/repository/org/springframework/spring-core/2.5.4/spring-core-2.5.4.jar:/Users/mraible/.m2/repository/org/springframework/spring-jdbc/2.5.3/spring-jdbc-2.5.3.jar:/Users/mraible/.m2/repository/org/springframework/spring-orm/2.5.3/spring-orm-2.5.3.jar:/Users/mraible/.m2/repository/org/springframework/spring-test/2.5.4/spring-test-2.5.4.jar:/Users/mraible/.m2/repository/org/springframework/spring-tx/2.5.3/spring-tx-2.5.3.jar:/Users/mraible/.m2/repository/org/springframework/security/spring-security-core/2.0.1/spring-security-core-2.0.1.jar:/Users/mraible/.m2/repository/org/springframework/security/spring-security-core-tiger/2.0.1/spring-security-core-tiger-2.0.1.jar:/Users/mraible/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar:/Users/mraible/.m2/repository/velocity/velocity/1.4/velocity-1.4.jar:/Users/mraible/.m2/repository/wsdl4j/wsdl4j/1.6.1/wsdl4j-1.6.1.jar:/Users/mraible/.m2/repository/xfire/xfire-jsr181-api/1.0-M1/xfire-jsr181-api-1.0-M1.jar:/Users/mraible/.m2/repository/xmlbeans/xbean/2.2.0/xbean-2.2.0.jar:/Users/mraible/Work/appfuse-2.0/service/target/classes -aspectpath /Users/mraible/.m2/repository/org/springframework/spring-aspects/2.5.4/spring-aspects-2.5.4.jar -d /Users/mraible/Work/appfuse-2.0/service/target/classes /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/UniversalManager.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/UserSecurityAdvice.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/impl/BaseManagerMockTestCase.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/impl/RoleManagerImpl.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/util/TimestampConverter.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/BaseManagerTestCase.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/impl/UserManagerImpl.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/util/CurrencyConverter.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/impl/UniversalManagerImpl.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/MailEngine.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/RoleManager.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/impl/GenericManagerImpl.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/util/ConvertUtil.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/UserExistsException.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/impl/LookupManagerImpl.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/util/DateConverter.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/UserManager.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/UserService.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/util/DateUtil.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/GenericManager.java /Users/mraible/Work/appfuse-2.0/service/src/main/java/org/appfuse/service/LookupManager.java ---- Full Classpath --- Empty ---- Compiler Messages --- info directory classpath entry does not exist: /System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Classes/sunrsasign.jar abort ABORT -- (BCException) Unable to continue, this version of AspectJ supports classes built with weaver version 3.0 but the class org.springframework.beans.factory.aspectj.AbstractBeanConfigurerAspect is version 5.0 when batch building BuildConfig[null] #Files=21  Unable to continue, this version of AspectJ supports classes built with weaver version 3.0 but the class org.springframework.beans.factory.aspectj.AbstractBeanConfigurerAspect is version 5.0 when batch building BuildConfig[null] #Files=21  org.aspectj.weaver.BCException: Unable to continue, this version of AspectJ supports classes built with weaver version 3.0 but the class org.springframework.beans.factory.aspectj.AbstractBeanConfigurerAspect is version 5.0 when batch building BuildConfig[null] #Files=21      at org.aspectj.weaver.bcel.BcelAttributes.readAjAttributes(BcelAttributes.java:53)     at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttributesUnpacked(BcelObjectType.java:312)     at org.aspectj.weaver.bcel.BcelObjectType.(BcelObjectType.java:142)     at org.aspectj.weaver.bcel.BcelWorld.buildBcelDelegate(BcelWorld.java:360)     at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType(BcelWorld.java:422)     at org.aspectj.weaver.bcel.BcelWeaver.addAspectsFromJarFile(BcelWeaver.java:250)     at org.aspectj.weaver.bcel.BcelWeaver.addLibraryJarFile(BcelWeaver.java:225)     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld(AjBuildManager.java:802)     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:243)     at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:180)     at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112)     at org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60)     at org.aspectj.tools.ajc.Main.run(Main.java:378)     at org.aspectj.tools.ajc.Main.runMain(Main.java:253)     at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute(AbstractAjcCompiler.java:378)     at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)     at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:558)     at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:499)     at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:478)     at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:330)     at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:291)     at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)     at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)     at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)     at org.apache.maven.cli.MavenCli.main(MavenCli.java:287)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     at java.lang.reflect.Method.invoke(Method.java:585)     at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)     at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)     at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)     at org.codehaus.classworlds.Launcher.main(Launcher.java:375)  ---- org.aspectj.weaver.bcel.BcelWorld@5d1f6a ---- Shadow mungers: Empty Type mungers: Empty Late Type mungers: Empty   --- No further details from [SPR-4773](https://jira.spring.io/browse/SPR-4773?redirect=false)","closed","","spring-projects-issues","2008-05-02T12:19:26Z","2019-01-11T17:43:45Z"
"","9806","Database connection problems cause Spring to raise an IllegalStateException and resulting in transaction state not being cleaned up [SPR-5133]","**[Matt Doran](https://jira.spring.io/secure/ViewProfile.jspa?name=matt_doran)** opened **[SPR-5133](https://jira.spring.io/browse/SPR-5133?redirect=false)** and commented  We have customers encounter a strange ""Pre-bound JDBC Connection found!"", even though we only ever use the HibernateTransactionManager, and never any JDBC transaction manager.  This error has happened with a number of our customers, but we have been unable to reproduce it in house.  From some client logs, I noticed that this error only started appearing after the backend database was down for a period.  So there were lots of errors indicating that transactions could not be started.  After the database came online the ""Pre-bound JDBC Connection found!"" started occurring.  The background on this issue can be found at the following forum thread (I was receiving help from Martin Deinum, and he asked me to raise the issue here).  http://forum.springframework.org/showthread.php?t=59316  So I decided to try to reproduce the problem by deliberately bringing down the database connection, and trying to perform transactions.  Although I was unable to produce the identical behaviour, I could reproduce a situation that would cause Spring to throw an IllegalStateException in the ""TransactionSynchronizationManager.clearSynchronization()"" method.  This method is called from AbstractPlatformTransactionManager.cleanupAfterCompletion().   When this exception is raised the remainder if this method will not run, so the transaction cleanup method ""doCleanupAfterCompletion"" will not be called and the suspended resources would not be resumed.  So it's possible that these connection errors cause the transaction state from a previous transaction to be left behind ... and when Spring finds the pre-bound connection from the previous transaction it raises the above error.  It's only a theory, but it sounds plausible.  I have been able to create a simple reproduction recipe.  It shows that instead of getting an exception explaining that a connection cannot be established, you get a ""java.lang.IllegalStateException: Cannot deactivate transaction synchronization - not active"" instead.  I will attach the reproduction after creating the issue.  It is in the form of an Eclipse project ...all you need to do is run the ""springdbrepro.Main"" class.  You do not need to setup any databases, etc.  NOTE: I have tried this in 2.0.8 and it does not produce the IllegalStateException.  I did not test this in 2.5, because our code is using Hibernate 3.0.5 which is not supported in the later versions of Spring.  I might upgrade to 2.0.8 ... but I thought it would be worth raising this issue ... because this problem could be lurking in future versions too.  ---  **Affects:** 1.2.9  **Attachments:** - [spring-db-repro.zip](https://jira.spring.io/secure/attachment/14628/spring-db-repro.zip) (_5.04 MB_)  **Issue Links:** - #8374 HibernateTransactionManager doesn't clean up when connection not available","closed","type: bug,","spring-projects-issues","2008-09-01T00:06:10Z","2019-01-11T15:37:55Z"
"","9128","AbstractBeanPropertyRowMapper doesn't handle null database values for primitive wrapper objects [SPR-4450]","**[Matt Campbell](https://jira.spring.io/secure/ViewProfile.jspa?name=mwcmpbll)** opened **[SPR-4450](https://jira.spring.io/browse/SPR-4450?redirect=false)** and commented  The AbstractBeanPropertyRowMapper doesn't handle null values correctly for properties that are java wrapper objects.  For instance, if I have a java.lang.Long property that is mapped to a database column with a null value in it, the bean property will get set to '0' instead of 'null'.  It would be nice if this handled null instead of being forced to use BigDecimal in order to get handling of nulls.  This could be accomplished by calling RecordSet.wasNull() to check for null values.   ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-02-11T05:45:44Z","2012-06-19T03:47:18Z"
"","9359","PathMatchingResourcePatternResolver tries to instantiate JarFile with potentially URI-encoded filename [SPR-4682]","**[Matt Benson](https://jira.spring.io/secure/ViewProfile.jspa?name=mbenson)** opened **[SPR-4682](https://jira.spring.io/browse/SPR-4682?redirect=false)** and commented  This looks similar to #8798; I have patched to call ResourceUtils.getFile(String); tests pass and this fixes my %20 errors.  ---  **Affects:** 2.5.3  **Attachments:** - [pmrpr.patch.txt](https://jira.spring.io/secure/attachment/13916/pmrpr.patch.txt) (_1.21 kB_)","closed","in: core,","spring-projects-issues","2008-04-09T09:31:12Z","2019-01-11T18:15:54Z"
"","9765","PostgreSQL SimpleJdbcTemplate Named Parameter Problem [SPR-5092]","**[Marvin S. Addison](https://jira.spring.io/secure/ViewProfile.jspa?name=s3rac)** opened **[SPR-5092](https://jira.spring.io/browse/SPR-5092?redirect=false)** and commented  Executing the following query using a SimpleJdbcTemplate against a PostgreSQL data source produces a PSQLException:  SELECT p.project_id, p.name FROM log_projects p INNER JOIN log_clients c ON p.project_id = c.project_id WHERE c.name = :name  PreparedStatementCallback; SQL [SELECT p.project_id, p.name FROM log_projects p INNER JOIN log_clients c ON p.project_id = c.project_id WHERE (c.name = :name)]; The column index is out of range: 1, number of columns: 0.; nested exception is org.postgresql.util.PSQLException: The column index is out of range: 1, number of columns: 0.  The above query appears sound as it executes fine in psql; additionally, my unit tests pass by switching data sources to an HSQL backend.  Interestingly, replacing the named parameter with a ? allows the query to execute properly in postgres and my unit tests pass.   ---  **Affects:** 2.5.5","closed","in: data,","spring-projects-issues","2008-08-18T01:17:30Z","2019-01-11T15:26:55Z"
"","9767","JspAwareRequestContext - getFallbackLocale method does not look at request, session, or application scope for locale as it states. [SPR-5094]","**[Marty Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=martyjones)** opened **[SPR-5094](https://jira.spring.io/browse/SPR-5094?redirect=false)** and commented  We are currently using Spring 2.0.7 and the getFallbackLocale functionworks as expected.  Version 2.55 is only looking at the pageContext for the locale and we are storing the locale on the session.   ---  **Affects:** 2.5.5","closed","status: declined,","spring-projects-issues","2008-08-18T06:44:44Z","2019-01-12T16:27:59Z"
"","9056","Default AbstractApplicationContext behavior: Ordered PropertyOverrideConfigurer should profit from previously loaded configurers [SPR-4378]","**[Martin Zeltner](https://jira.spring.io/secure/ViewProfile.jspa?name=swisswheel)** opened **[SPR-4378](https://jira.spring.io/browse/SPR-4378?redirect=false)** and commented  I've reported this issue already in #6354 but this is marked as resolved and I can not re-open #6354 for an unknown reason. In my opinion this issue is not solved. Each bean factory post processor must be created only directly before method ""postProcessBeanFactory"" is called. Here my solution. Sorry, it's Java 5.  Changes in org.springframework.context.support.AbstractApplicationContext:      /**      * Not just method {@link BeanFactoryPostProcessor#postProcessBeanFactory(      * ConfigurableListableBeanFactory)} is invoked ordered but also the      * creation of the factory post processor beans!      *       * @param beanFactory      *            Is the factory to create the bean factory post processors.      */     @SuppressWarnings(""unchecked"")     protected void invokeBeanFactoryPostProcessors(         ConfigurableListableBeanFactory beanFactory) {                  // Invoke factory processors registered with the context instance.         for (Iterator it = getBeanFactoryPostProcessors().iterator();              it.hasNext();) {                          BeanFactoryPostProcessor factoryProcessor                 = (BeanFactoryPostProcessor) it.next();             factoryProcessor.postProcessBeanFactory(beanFactory);         }              // Do not initialize FactoryBeans here: We need to leave all regular         // beans uninitialized to let the bean factory post-processors apply to         // them!         String[] postProcessorNames             = beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class,                  true, false);              // Separate between BeanFactoryPostProcessors that implement         // PriorityOrdered, Ordered, and the rest.         List priorityOrderedPostProcessorHolders             = new ArrayList();         List orderedPostProcessorHolders             = new ArrayList();         List nonOrderedPostProcessorNames = new ArrayList();         for (int i = 0; i < postProcessorNames.length; i++) {             String postProcessorName = postProcessorNames[i];              if (isTypeMatch(postProcessorName, PriorityOrdered.class)) {                 priorityOrderedPostProcessorHolders.add(                     getOrderedBeanNameHolder(beanFactory, postProcessorName));             } else if (isTypeMatch(postProcessorName, Ordered.class)) {                 orderedPostProcessorHolders.add(                     getOrderedBeanNameHolder(beanFactory, postProcessorName));             } else {                 nonOrderedPostProcessorNames.add(postProcessorName);             }         }              // First, invoke the BeanFactoryPostProcessors that implement         // PriorityOrdered.         Collections.sort(priorityOrderedPostProcessorHolders,              new OrderComparator());         invokeBeanFactoryPostProcessors(beanFactory,             priorityOrderedPostProcessorHolders);              // Second, invoke the BeanFactoryPostProcessors that implement Ordered.         Collections.sort(orderedPostProcessorHolders,             new OrderComparator());         invokeBeanFactoryPostProcessors(beanFactory,             orderedPostProcessorHolders);              // Finally, invoke all other BeanFactoryPostProcessors.         for (String nonOrderedPostProcessorName             : nonOrderedPostProcessorNames) {             Object bean = getBean(nonOrderedPostProcessorName);             BeanFactoryPostProcessor postProcessor                 = (BeanFactoryPostProcessor) bean;             postProcessor.postProcessBeanFactory(beanFactory);         }     }          /**      * Invoke the given BeanFactoryPostProcessor beans.      *       * @param beanFactory      *            Is the factory where to create the      *            BeanFactoryPostProcessors      * @param postProcessorHolders      *            Are the holders of the factory post processor bean names.      */     private void invokeBeanFactoryPostProcessors(         ConfigurableListableBeanFactory beanFactory,         List postProcessorHolders) {         for (OrderedBeanNameHolder orderedBeanNameHolder             : postProcessorHolders) {             Object bean = getBean(orderedBeanNameHolder.getBeanName());             BeanFactoryPostProcessor postProcessor                 = (BeanFactoryPostProcessor) bean;             postProcessor.postProcessBeanFactory(beanFactory);         }     }          /**      * Returns a ordered bean name holder for the given bean.      *       * @param beanFactory      *            Is the factory where the bean is configured.      * @param orderedBeanName      *            Is the name of the ordered bean.      * @return Returns a ordered bean name holder for the given bean.      * @throws NoSuchBeanDefinitionException      *             If the given bean name does not exist.      */     private OrderedBeanNameHolder getOrderedBeanNameHolder(         ConfigurableListableBeanFactory beanFactory, String orderedBeanName)         throws NoSuchBeanDefinitionException {                  BeanDefinition beanDefinition             = beanFactory.getBeanDefinition(orderedBeanName);         PropertyValues processorDefinitionProps             = beanDefinition.getPropertyValues();         PropertyValue order             = processorDefinitionProps.getPropertyValue(""order"");         int orderAsInt = 0;         if (order != null) {             try {                 Object orderValue = order.getValue();                 String orderAsString;                 if (orderValue instanceof TypedStringValue) {                     TypedStringValue orderValueString                         = (TypedStringValue) order.getValue();                     orderAsString = orderValueString.getValue();                 } else {                     orderAsString = orderValue.toString();                 }                 orderAsInt = Integer.parseInt(orderAsString);             } catch (NumberFormatException e) {                 orderAsInt = 0;             }         }         return new OrderedBeanNameHolder(orderAsInt, orderedBeanName);     }  New class org.springframework.context.support.OrderedBeanNameHolder:  package org.springframework.context.support;  import org.springframework.core.Ordered;  /** * Holder for ordered beans. Hold is just the name and its order.   \*/   public class OrderedBeanNameHolder implements Ordered {   /**    * Is the order of the bean.     */     protected final int m_order;    /**    * Is the name of the bean.     */     protected final String m_beanName;    /**    * Initializes the bean holder with the given name and order.   *    * `@param` order Is the bean order.   * `@param` beanName Is the name of the bean.     */     public OrderedBeanNameHolder(int order, String beanName) {     m_order = order;     m_beanName = beanName;     }    /**    * {`@inheritDoc`}     */     public int getOrder() {     return m_order;     }    /**    * `@return` Returns the name of the bean.     */     public String getBeanName() {     return m_beanName;     }     }  Bye, Martin  ---  **Affects:** 2.5.1  **Issue Links:** - #6354 Customizing AbstractApplicationContext: Ordered PropertyOverrideConfigurer should profit from previously loaded configurers","closed","type: enhancement,","spring-projects-issues","2008-01-23T00:37:54Z","2019-01-11T16:36:46Z"
"","9029","context:annotation-config skips classes using inner classes in 2.5.1 [SPR-4350]","**[Martin Vanek](https://jira.spring.io/secure/ViewProfile.jspa?name=anthavio)** opened **[SPR-4350](https://jira.spring.io/browse/SPR-4350?redirect=false)** and commented  i've tried to upgrade from 2.5 to 2.5.1 and i've found that context:annotation-config mechanism is badly broken. From debug log, i can read that classes were found as candidates to be scanned for annotation configuration, but they are never configured, although they have correct annotations (`@Component`). I've found ""bad reason"" why spring skips component. Mechanism skips class containing or using in any method code non static inner class (bytecode contains reference to that inner class). Anonymous inner classes are OK.  ---  **Affects:** 2.5.1  **Issue Links:** - #9003 component scanning incorrectly excludes classes (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-01-17T02:26:36Z","2019-01-12T16:51:08Z"
"","9069","NullPointerException in AspectJ's Java15AnnotationFinder when running on JDK 1.6 [SPR-4390]","**[Martin Thelian](https://jira.spring.io/secure/ViewProfile.jspa?name=theli)** opened **[SPR-4390](https://jira.spring.io/browse/SPR-4390?redirect=false)** and commented  When running a webapp in jboss with Java 6.0 I get the following Exception during startup:  ---  rg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'objectFactory' defined in class path resource [cc/lovo/types/springContext.xml]: Initialization of bean failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:445) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:400) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:736) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:123) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:76) at cc.lovo.service.bootstrap.BootServlet.init(BootServlet.java:27) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1105) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:932) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:3951) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4225) [...] Caused by: java.lang.NullPointerException at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations(Java15AnnotationFinder.java:109) at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.unpackAnnotations(ReflectionBasedResolvedMemberImpl.java:174) at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.hasAnnotation(ReflectionBasedResolvedMemberImpl.java:158) at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches(ExactAnnotationTypePattern.java:82) at org.aspectj.weaver.patterns.AnnotationPointcut.matchInternal(AnnotationPointcut.java:151) at org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146) at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.getShadowMatch(PointcutExpressionImpl.java:235) at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution(PointcutExpressionImpl.java:101) at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution(PointcutExpressionImpl.java:92) at org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch(AspectJExpressionPointcut.java:362) at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:239) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:205) at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:244) at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:278) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:113) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:85) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:66) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:296) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:331) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1266) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:438) ... 151 more  ---  With java 1.5 there is no problem.  ---  **Affects:** 2.5.1","closed","in: core,","spring-projects-issues","2008-01-25T00:50:03Z","2019-01-13T21:53:43Z"
"","9009","AbstractDataBoundFormElementTag.COMMAND_NAME_VARIABLE_NAME is missing in Spring 2.5 [SPR-4330]","**[Martin Rubes](https://jira.spring.io/secure/ViewProfile.jspa?name=martin.rubes)** opened **[SPR-4330](https://jira.spring.io/browse/SPR-4330?redirect=false)** and commented  The final static field COMMAND_NAME_VARIABLE_NAME in the class org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag has been removed without any notice in change log. It has been present in Spring version 2.0.7 but it's missing in 2.5.1.  The projects depended on this variable cannot be compiled and/or used with new version of Spring Framework.   ---  **Affects:** 2.5 final, 2.5.1","closed","type: bug,","spring-projects-issues","2008-01-13T01:20:31Z","2012-06-19T03:47:41Z"
"","9307","Errors from a MethodInvokingJob are only logged at WARN/INFO level (and twice...) [SPR-4630]","**[Martin Probst](https://jira.spring.io/secure/ViewProfile.jspa?name=martin.probst)** opened **[SPR-4630](https://jira.spring.io/browse/SPR-4630?redirect=false)** and commented  When a MethodInvokingJob scheduled by Quartz throws an exception, the error is logged twice, once at WARN level by the MethodInvokingJob wrapper, and once at INFO by Quartz.  This is because the MethodInvokingJob catches all exceptions thrown by the invoked method (InvocationTargetExceptions), and then re-throws them as JobExecutionExceptions. Quartz apparently considers those to be ""expected exceptions"" that are used for scheduling purposes, and as such they are only logged as INFO.  Spring's MethodInvokingJob should probably find out if the thrown exceptions was a runtime exception, and re-throw it, and simply wrap checked exceptions in an appropriate RuntimeException and rethrow them. JobExecutionExceptions are apparently reserved for other purposes.  Also, you should probably not log an exception that you are re-throwing anyways, that only gives duplicate log entries, making a potential problem harder to find.   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-03-26T19:25:29Z","2012-06-19T03:47:29Z"
"","9481","RemoteInvocationSerializingExporter don't use bean classloader to deserialization [SPR-4804]","**[Martin Lippert](https://jira.spring.io/secure/ViewProfile.jspa?name=mlippert)** opened **[SPR-4804](https://jira.spring.io/browse/SPR-4804?redirect=false)** and commented  RemoteInvocationSerializingExporter creates an CodebaseAwareObjectInputStream (CAOIS) to handle deserialization. This CAOIS object is created without setting the bean classloader as the classloader to use. Instead the CAOIS uses the default mechanisms which fails in an environment like OSGi.  The solution would be, from my point of view:  Replace:      protected ObjectInputStream createObjectInputStream(InputStream is) throws IOException {         return new CodebaseAwareObjectInputStream(is, null);     }  With:      protected ObjectInputStream createObjectInputStream(InputStream is) throws IOException {         return new CodebaseAwareObjectInputStream(is, getBeanClassLoader(), null);     }    ---  **Affects:** 2.5.4","closed","type: bug,","spring-projects-issues","2008-05-12T22:23:35Z","2012-06-19T03:47:03Z"
"","9843","ReloadableResourceBundleMessageSource limitations [SPR-5170]","**[Martin Lechner](https://jira.spring.io/secure/ViewProfile.jspa?name=martin-ax)** opened **[SPR-5170](https://jira.spring.io/browse/SPR-5170?redirect=false)** and commented  \ \ \ \ \ \/WEB-INF/classes/com/pckg/base-resources\ \classpath:com/pckg/error-resources\ \ \ \  Reload of property does not function for ""prefix"" classloader.. Property 'Last modified date' of file is check every request for i18n message althought property ''cacheSeconds"" is setted gratter than 1.    ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-09-19T02:11:09Z","2012-06-18T12:44:19Z"
"","8983","Default names of custom stereotypes are not recognized during component-scan [SPR-4304]","**[Martin Krasser](https://jira.spring.io/secure/ViewProfile.jspa?name=mrt1nz)** opened **[SPR-4304](https://jira.spring.io/browse/SPR-4304?redirect=false)** and commented  When adding a custom stereotype like  `@Retention`(RetentionPolicy.RUNTIME) `@Component` public `@interface` MyService { String value() default ""defaultService"";      }  to a class for beeing loaded during a component-scan, the default value ""defaultService"" is not recognized as bean name. For example,  `@MyService` public class MyServiceImpl {...}  will not appear as bean with name ""defaultService"" but this is what I expected when defining a default value (name) for the custom stereotype. Using  `@MyService`(""defaultName"") public class MyServiceImpl {...}  works.   ---  **Affects:** 2.5 final  **Attachments:** - [scan.zip](https://jira.spring.io/secure/attachment/13251/scan.zip) (_4.94 kB_)","closed","in: core,","spring-projects-issues","2008-01-05T19:08:01Z","2012-06-19T03:46:57Z"
"","9152","SimpleJdbcTestUtils.executeSqlScript should allow multi-line statements [SPR-4475]","**[Martin Gilday](https://jira.spring.io/secure/ViewProfile.jspa?name=pledge)** opened **[SPR-4475](https://jira.spring.io/browse/SPR-4475?redirect=false)** and commented  SimpleJdbcTestUtils.executeSqlScript (and AbstractTransactionalJUnit4SpringContextTests) requires that the sql script contain statements separated by line breaks.  When sourcing test data to tables with a large number of columns this can lead to very hard to read scripts.  The method could split by a customizable delimiter, defaulting to ;  ---  **Affects:** 2.5.1  **Issue Links:** - #9288 Support in AbstractTransactionalDataSourceSpringContextTests.executeSqlScript for statements which extends over several lines  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-02-18T00:26:45Z","2019-01-11T17:35:21Z"
"","9133","Ability to change the SimpleJdbcTemplate in DAO's [SPR-4455]","**[Martin Dames](https://jira.spring.io/secure/ViewProfile.jspa?name=specialagent)** opened **[SPR-4455](https://jira.spring.io/browse/SPR-4455?redirect=false)** and commented  Hey,  I used the normal JdbcDaoSupport class for my DAO's, and I mocked the JdbcTemplate within my test classes by using the .setJdbcTemplate() method. So, now I want to use the SimpleJdbcTemplate in my DAO and I inherited my DAO from the org.springframework.jdbc.core.simple.SimpleJdbcDaoSupport. I wanted to mock the SimpleJdbcTemplate as well but I couldn't find any obvious Spring way to use a Mock in this situation.  I don't know if this isn't wanted by you guys, but I tried a patch and the tests are running fine:  I wrote my own SimpleJdbcDaoSupport class, which is the same as the normal one, but offers a Setter method for the SimpleJdbcTemplate.  If this sounds quite reasonable for you, just commit the patch to your next Spring version as you like.  /** * * `@author` Martin Dames   */   public class MyOwnSimpleJdbcDaoSupport extends JdbcDaoSupport {        private SimpleJdbcTemplate simpleJdbcTemplate;    /**    * Create a SimpleJdbcTemplate based on the configured JdbcTemplate.     */     `@Override`     protected void initTemplateConfig() {     this.simpleJdbcTemplate = new SimpleJdbcTemplate(getJdbcTemplate());     }    /**    * Return a SimpleJdbcTemplate wrapping the configured JdbcTemplate.     */     public SimpleJdbcTemplate getSimpleJdbcTemplate() {     return this.simpleJdbcTemplate;     }      /**    * Sets an other SimpleJdbcTemplate, can be used for mocking the template.     */     public void setSimpleJdbcTemplate(SimpleJdbcTemplate simpleJdbcTemplate) {     this.simpleJdbcTemplate = simpleJdbcTemplate;     }     }  ---  **Affects:** 2.5.1  **Issue Links:** - #9132 Ability to change the SimpleJdbcTemplate in DAO's (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-02-11T23:40:33Z","2019-01-11T17:32:48Z"
"","9132","Ability to change the SimpleJdbcTemplate in DAO's [SPR-4454]","**[Martin Dames](https://jira.spring.io/secure/ViewProfile.jspa?name=specialagent)** opened **[SPR-4454](https://jira.spring.io/browse/SPR-4454?redirect=false)** and commented  Hey,  I used the normal JdbcDaoSupport class for my DAO's, and I mocked the JdbcTemplate within my test classes by using the .setJdbcTemplate() method. So, now I want to use the SimpleJdbcTemplate in my DAO and I inherited my DAO from the org.springframework.jdbc.core.simple.SimpleJdbcDaoSupport. I wanted to mock the SimpleJdbcTemplate as well but I couldn't find any obvious Spring way to use a Mock in this situation.  I don't know if this isn't wanted by you guys, but I tried a patch and the tests are running fine:  I wrote my own SimpleJdbcDaoSupport class, which is the same as the normal one, but offers a Setter method for the SimpleJdbcTemplate.  If this sounds quite reasonable for you, just commit the patch to your next Spring version as you like.  /** * * `@author` Martin Dames   */   public class MyOwnSimpleJdbcDaoSupport extends JdbcDaoSupport {        private SimpleJdbcTemplate simpleJdbcTemplate;    /**    * Create a SimpleJdbcTemplate based on the configured JdbcTemplate.     */     `@Override`     protected void initTemplateConfig() {     this.simpleJdbcTemplate = new SimpleJdbcTemplate(getJdbcTemplate());     }    /**    * Return a SimpleJdbcTemplate wrapping the configured JdbcTemplate.     */     public SimpleJdbcTemplate getSimpleJdbcTemplate() {     return this.simpleJdbcTemplate;     }      /**    * Sets an other SimpleJdbcTemplate, can be used for mocking the template.     */     public void setSimpleJdbcTemplate(SimpleJdbcTemplate simpleJdbcTemplate) {     this.simpleJdbcTemplate = simpleJdbcTemplate;     }     }  ---  **Affects:** 2.5.1  **Issue Links:** - #9133 Ability to change the SimpleJdbcTemplate in DAO's (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2008-02-11T23:39:34Z","2019-01-11T17:32:36Z"
"","8963","Please add notification support for MBeanServerConnectionFactoryBean [SPR-4285]","**[Martin Bengl](https://jira.spring.io/secure/ViewProfile.jspa?name=mbengl)** opened **[SPR-4285](https://jira.spring.io/browse/SPR-4285?redirect=false)** and commented  The JMX  MBeanServerConnection allows to add notification listeners to registreded MBeans. You can extend the MBeanServerConnectionFactoryBean to make it possible to configure notifications from client-side like this way:  \ \ \ \ \ \ \ \ I've done this by copy&paste the responsible codeparts from the MBeanServer class. But thats just a hack :-)   --- No further details from [SPR-4285](https://jira.spring.io/browse/SPR-4285?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-12-28T01:10:52Z","2012-06-19T03:46:38Z"
"","9861","Improve AbstractRoutingDataSource for more lazy behavior [SPR-5188]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-5188](https://jira.spring.io/browse/SPR-5188?redirect=false)** and commented  The current implementation of the AbstractRoutingDataSource starts off by caching all the configured datasources. I wanted to override this behavior and lazily do the caching. First check the resolvedDataSources, if not found delegate to the DataSourceLookup if null returned use the default and store in cache. However with the current implementation that behavior is hard to implement.  Subclasses cannot get access to the resolvedDataSources property.  If we could make this accessible by implementing a protected getResolvedDataSource(Object lookupKey) method I would be greatly helped. The code in the determineTargetDataSource() method would then become.\  [code] protected DataSource determineTargetDataSource() { Assert.notNull(this.resolvedDataSources, ""DataSource router not initialized""); Object lookupKey = determineCurrentLookupKey(); DataSource dataSource = getResolvedDataSource(lookupKey); if (dataSource == null) { dataSource = this.resolvedDefaultDataSource; } if (dataSource == null) { throw new IllegalStateException(""Cannot determine target DataSource for lookup key ["" + lookupKey + ""]""); } return dataSource; }  protected final DataSource getResolvedDataSource(Object lookupKey) { return this.resolvedDataSources(lookupKey); }  [/code]   --- No further details from [SPR-5188](https://jira.spring.io/browse/SPR-5188?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-09-30T06:32:30Z","2012-06-19T09:36:21Z"
"","9805","Create/Improve step-by-step to use @Controller instead of interface [SPR-5132]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-5132](https://jira.spring.io/browse/SPR-5132?redirect=false)** and commented  Currently the step-by-step guide is working for Spring 2.5 but it still uses the MVC stuff instead of the `@MVC`. We recommend this approach now so the tutorials should also use this.   ---  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-31T19:12:22Z","2009-03-18T03:45:50Z"
"","9803","Improve documentation where the namespaces are applied [SPR-5130]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-5130](https://jira.spring.io/browse/SPR-5130?redirect=false)** and commented  From some recent forum threads (and also some historical) people have a problem with getting the namespace support. Especially as where they are applied. We now completly hide the fact that tx:annotation-driven or context:component-scan is a Bean(Factory)PostProcessor and operates only on the BeanFactory they are defined in. People expect the tx:annotation-driven specified in the root context to be applied to the web context (or vice versa).  So we might need to clarify this in the documentation.   --- No further details from [SPR-5130](https://jira.spring.io/browse/SPR-5130?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-08-31T16:16:46Z","2012-06-19T03:46:39Z"
"","9731","Revise ContextLoader / ContextLoaderListener relationship [SPR-5056]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-5056](https://jira.spring.io/browse/SPR-5056?redirect=false)** and commented  Currently the ContextLoaderListener always creates a new instance of the ContextLoader class, if you want to create some custom ContextLoader you also have to create a custom ContextLoaderListener. It would be a nice feature it the ContextLoader class was also configurable with a init parameter like contextLoaderClass. That would save people from extending our ContextLoaderListener and simply configure it.   ---  **Affects:** 2.5.5  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-04T03:22:07Z","2012-06-19T03:47:40Z"
"","9338","Improve context-property-placeholder configurablity [SPR-4661]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-4661](https://jira.spring.io/browse/SPR-4661?redirect=false)** and commented  I was replacing our current PropertiesPlaceHolderConfigurer with a","closed","has: votes-jira,","spring-projects-issues","2008-04-03T20:21:13Z","2019-01-11T18:13:07Z"
"","9314","Improve @MVC documentation [SPR-4637]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-4637](https://jira.spring.io/browse/SPR-4637?redirect=false)** and commented  I was following a thread on the forum in which a question was asked regarding the handling of the return values in a `@MVC` Controller. I checked the reference documentation and couldn't find it.  Maybe we can include a small chapter in how return types are handled, something like this.      * String return value will determine the view     * ModelAndView return value will be obvious     * Map return value will have all object added to the ModelAndView available to the page     * Any other Object will be added to the ModelAndView available to the page, under the name provided in the @ModelAttribute annotation on the method (if any), or an auto-generated name    ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-27T19:37:22Z","2012-06-19T03:46:58Z"
"","9068","annotation-config doesn't register @Transactional scanning [SPR-4389]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-4389](https://jira.spring.io/browse/SPR-4389?redirect=false)** and commented  It would be great if the context:annotation-config tag (I.e. AnnotationConfigUtils.registerAnnotationConfigProcessors) would also automatically register the ProxyCreator or at least an infrastructure component for `@Transactional`.   ---  **Affects:** 2.5 final, 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-24T22:39:57Z","2008-01-25T01:41:33Z"
"","9053","Improve logging in *AnnotationBeanPostProcessors [SPR-4375]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-4375](https://jira.spring.io/browse/SPR-4375?redirect=false)** and commented  I was scanning through the logfiles to get some information what is happening inside the *AnnotationBeanPostProcessors but nothing is logged, a look at the source code makes clear that there is no logging at all. It would be nice to have some logging there. For instance for the Init/Destroy stuff when we register a bean implementing the InitializingBean or DisposableBean we get a nice debug message in the log (when enabled of course) that it is calling init/destroy. With the `@PostConstruct` and `@PreDestroy` this isn't happening, neither for any of the other  *AnnotationBeanPostProcessors.  It might be handy when pin pointing issues in the construction/proxy creation.   ---  **Affects:** 2.5 final, 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-22T18:11:02Z","2012-06-19T03:46:42Z"
"","8971","JdbcTemplate uses a JDK 1.5 method, whereas it should be JDK 1.4.2 compatible [SPR-4293]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-4293](https://jira.spring.io/browse/SPR-4293?redirect=false)** and commented  java.lang.NoSuchMethodError: java.lang.Integer.valueOf(I)Ljava/lang/Integer; at org.springframework.jdbc.core.JdbcTemplate.extract ReturnedResults(JdbcTemplate.java:1018) at org.springframework.jdbc.core.JdbcTemplate$5.doInC allableStatement(JdbcTemplate.java:970) at org.springframework.jdbc.core.JdbcTemplate.execute (JdbcTemplate.java:911) at org.springframework.jdbc.core.JdbcTemplate.call(Jd bcTemplate.java:960) at org.springframework.jdbc.object.StoredProcedure.ex ecute(StoredProcedure.java:113) at com.lehman.ftg.reg.basel.database.ProcessUIJobRequ estImpl.processJob(ProcessUIJobRequestImpl.java:64 ) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.springframework.aop.support.AopUtils.invokeJoi npointUsingReflection(AopUtils.java:301) at org.springframework.aop.framework.ReflectiveMethod Invocation.invokeJoinpoint(ReflectiveMethodInvocat ion.java:182) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :149) at org.springframework.aop.framework.adapter.AfterRet urningAdviceInterceptor.invoke(AfterReturningAdvic eInterceptor.java:50) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :171) at org.springframework.aop.framework.adapter.MethodBe foreAdviceInterceptor.invoke(MethodBeforeAdviceInt erceptor.java:50) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :171) at org.springframework.aop.framework.JdkDynamicAopPro xy.invoke(JdkDynamicAopProxy.java:204) at $Proxy380.processJob(Unknown Source) at com.lehman.ftg.reg.basel.database.FeedUploadDaoImp l.requestFeedFileProcessing(FeedUploadDaoImpl.java :28) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.springframework.aop.support.AopUtils.invokeJoi npointUsingReflection(AopUtils.java:301) at org.springframework.aop.framework.ReflectiveMethod Invocation.invokeJoinpoint(ReflectiveMethodInvocat ion.java:182) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :149) at org.springframework.aop.framework.adapter.AfterRet urningAdviceInterceptor.invoke(AfterReturningAdvic eInterceptor.java:50) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :171) at org.springframework.aop.framework.adapter.MethodBe foreAdviceInterceptor.invoke(MethodBeforeAdviceInt erceptor.java:50) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :171) at org.springframework.aop.framework.JdkDynamicAopPro xy.invoke(JdkDynamicAopProxy.java:204) at $Proxy381.requestFeedFileProcessing(Unknown Source) at com.lehman.ftg.reg.basel.bizlogic.FeedsUploadManag erImpl.requestFeedFileProcessing(FeedsUploadManage rImpl.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.springframework.aop.support.AopUtils.invokeJoi npointUsingReflection(AopUtils.java:301) at org.springframework.aop.framework.ReflectiveMethod Invocation.invokeJoinpoint(ReflectiveMethodInvocat ion.java:182) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :149) at org.springframework.aop.framework.adapter.AfterRet urningAdviceInterceptor.invoke(AfterReturningAdvic eInterceptor.java:50) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :171) at org.springframework.aop.framework.adapter.MethodBe foreAdviceInterceptor.invoke(MethodBeforeAdviceInt erceptor.java:50) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :171) at org.springframework.aop.framework.JdkDynamicAopPro xy.invoke(JdkDynamicAopProxy.java:204) at $Proxy383.requestFeedFileProcessing(Unknown Source)  JdbcTemplate usejava.lang.NoSuchMethodError: java.lang.Integer.valueOf(I)Ljava/lang/Integer; at org.springframework.jdbc.core.JdbcTemplate.extract ReturnedResults(JdbcTemplate.java:1018) at org.springframework.jdbc.core.JdbcTemplate$5.doInC allableStatement(JdbcTemplate.java:970) at org.springframework.jdbc.core.JdbcTemplate.execute (JdbcTemplate.java:911) at org.springframework.jdbc.core.JdbcTemplate.call(Jd bcTemplate.java:960) at org.springframework.jdbc.object.StoredProcedure.ex ecute(StoredProcedure.java:113) at com.lehman.ftg.reg.basel.database.ProcessUIJobRequ estImpl.processJob(ProcessUIJobRequestImpl.java:64 ) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.springframework.aop.support.AopUtils.invokeJoi npointUsingReflection(AopUtils.java:301) at org.springframework.aop.framework.ReflectiveMethod Invocation.invokeJoinpoint(ReflectiveMethodInvocat ion.java:182) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :149) at org.springframework.aop.framework.adapter.AfterRet urningAdviceInterceptor.invoke(AfterReturningAdvic eInterceptor.java:50) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :171) at org.springframework.aop.framework.adapter.MethodBe foreAdviceInterceptor.invoke(MethodBeforeAdviceInt erceptor.java:50) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :171) at org.springframework.aop.framework.JdkDynamicAopPro xy.invoke(JdkDynamicAopProxy.java:204) at $Proxy380.processJob(Unknown Source) at com.lehman.ftg.reg.basel.database.FeedUploadDaoImp l.requestFeedFileProcessing(FeedUploadDaoImpl.java :28) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.springframework.aop.support.AopUtils.invokeJoi npointUsingReflection(AopUtils.java:301) at org.springframework.aop.framework.ReflectiveMethod Invocation.invokeJoinpoint(ReflectiveMethodInvocat ion.java:182) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :149) at org.springframework.aop.framework.adapter.AfterRet urningAdviceInterceptor.invoke(AfterReturningAdvic eInterceptor.java:50) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :171) at org.springframework.aop.framework.adapter.MethodBe foreAdviceInterceptor.invoke(MethodBeforeAdviceInt erceptor.java:50) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :171) at org.springframework.aop.framework.JdkDynamicAopPro xy.invoke(JdkDynamicAopProxy.java:204) at $Proxy381.requestFeedFileProcessing(Unknown Source) at com.lehman.ftg.reg.basel.bizlogic.FeedsUploadManag erImpl.requestFeedFileProcessing(FeedsUploadManage rImpl.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Nativ e Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Native MethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(De legatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:324) at org.springframework.aop.support.AopUtils.invokeJoi npointUsingReflection(AopUtils.java:301) at org.springframework.aop.framework.ReflectiveMethod Invocation.invokeJoinpoint(ReflectiveMethodInvocat ion.java:182) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :149) at org.springframework.aop.framework.adapter.AfterRet urningAdviceInterceptor.invoke(AfterReturningAdvic eInterceptor.java:50) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :171) at org.springframework.aop.framework.adapter.MethodBe foreAdviceInterceptor.invoke(MethodBeforeAdviceInt erceptor.java:50) at org.springframework.aop.framework.ReflectiveMethod Invocation.proceed(ReflectiveMethodInvocation.java :171) at org.springframework.aop.framework.JdkDynamicAopPro xy.invoke(JdkDynamicAopProxy.java:204) at $Proxy383.requestFeedFileProcessing(Unknown Source)  ---  **Affects:** 2.5 final  **Issue Links:** - #8893 JdbcTemplate extractReturnedResults uses Java 5 method of Integer class (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-01-02T23:59:25Z","2019-01-12T16:51:12Z"
"","8952","Document the order of annotation processing on the new annotation style controllers [SPR-4274]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-4274](https://jira.spring.io/browse/SPR-4274?redirect=false)** and commented  In the documentation it cannot be found in which order the annotations of the new annotation based controller are processed. The document has some hints on it but that isn't clear and/or to fragmented. There are some odditites/unclear things happening.  http://forum.springframework.org/showthread.php?t=47763  the thread above has some more information.   ---  **Affects:** 2.5 final","closed","type: documentation,","spring-projects-issues","2007-12-20T17:24:43Z","2012-06-19T03:47:03Z"
"","8933","Document how to use JTA transactionManager with JPA. [SPR-4255]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-4255](https://jira.spring.io/browse/SPR-4255?redirect=false)** and commented  With the rise of JPA and the new Spring stuff the amount of questions regarding how to configure JTA in combination with JPA also rise. There seems to be a lot of fuziness and vagueness (or those even words ? ) around the subject. It would be great if there would be an example/blog/... on how to setup that. Probably 2 examples one with a container managed JTA manager and one with a local JTA manager like JOTM.   ---  **Affects:** 2.0.7, 2.5 final  5 votes, 5 watchers","closed","status: declined,","spring-projects-issues","2007-12-13T18:22:54Z","2015-09-22T18:20:32Z"
"","8916","Support value on prop tag [SPR-4238]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-4238](https://jira.spring.io/browse/SPR-4238?redirect=false)** and commented  The prop tag doesn´t support a value attribute. It would be nice if it did so we can use the short hand notation. There was some discussion about this in this thread. http://forum.springframework.org/showthread.php?p=155337#post155337  ---  **Issue Links:** - #8917 less verbose xml binding of java.lang.Properties (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2007-12-10T23:58:11Z","2019-01-11T17:04:19Z"
"","8889","MD5 and SHA signatures don't match pom/jar in maven repo [SPR-4211]","**[Marten Deinum](https://jira.spring.io/secure/ViewProfile.jspa?name=mdeinum)** opened **[SPR-4211](https://jira.spring.io/browse/SPR-4211?redirect=false)** and commented  It appears that the md5 and sha file in the maven repo don't match, validate the desired files.  http://forum.springframework.org/showthread.php?p=154307 contains some discussion about the issue.   ---  **Affects:** 2.5 final","closed","","spring-projects-issues","2007-12-04T06:32:30Z","2019-01-11T17:00:27Z"
"","9764","SimpleNamingContextBuilder should create InitialContextFactory from Context.INITIAL_CONTEXT_FACTORY property [SPR-5091]","**[Markus Heiden](https://jira.spring.io/secure/ViewProfile.jspa?name=markus_heiden)** opened **[SPR-5091](https://jira.spring.io/browse/SPR-5091?redirect=false)** and commented  When using SimpleNamingContextBuilder for setting up a mock jndi environment, other tests in the same test batch may get problems, when they need a specific implementation of InitialContextFactory. E.g. LDAP needs a factory which creates LDAP-specific contexts. So I suggest to improve SimpleNamingContextBuilder.createInitialContextFactory(Hashtable environment) to:  public InitialContextFactory createInitialContextFactory(Hashtable environment) { String className = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY); if (className == null) { return new SimpleNamingContext("""", boundObjects, environment); }  try { return (InitialContextFactory) Thread.currentThread().getContextClassLoader().loadClass(className).newInstance(); } catch(Exception e) { throw new IllegalArgumentException(""Cannot instantiate initial context factory: "" + className); } }  This behaviour is the same as NamingManager.getInitialContext(Hashtable\ env) implements for the case that no InitialContextFactoryBuilder has been set. As fallback, when no Context.INITIAL_CONTEXT_FACTORY property has been set, the old behaviour will be used.  Maybe the classloading and the error handling might need some minor rework.   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-08-18T01:11:34Z","2012-06-19T03:46:45Z"
"","9645","ServletRequestDataBinder should be injected [SPR-4970]","**[Markus Heiden](https://jira.spring.io/secure/ViewProfile.jspa?name=markus_heiden)** opened **[SPR-4970](https://jira.spring.io/browse/SPR-4970?redirect=false)** and commented  For security reasons we replace the ServletRequestDataBinder by our own SecureServletRequestDataBinder (which checks the parameters etc.). With the current design, we have to use subclasses of all controller base classes (e.g. SimpleFormController) to override the method createBinder(HttpServletRequest, Object) of BaseCommandController to be able to do that. It would be nicer, if the DataBinder could be injected. This improvement is related to #8325.  ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-06-30T04:14:23Z","2019-01-11T18:32:38Z"
"","8896","Declarative transaction management - emphasise no transaction on self-invocation [SPR-4218]","**[mark swindell](https://jira.spring.io/secure/ViewProfile.jspa?name=mswindel)** opened **[SPR-4218](https://jira.spring.io/browse/SPR-4218?redirect=false)** and commented  Suggested Improvement to the section 9.5.6 Using `@Transactional`  ---  Explicitly state that the `@Transactional` annotation will not be applied if the method is self-invoked; that the `@Transactional` annotation is only applied when the method is called via a proxy.  Add a reference to section 6.6.1.  Reason  ---  From section 9.5 - Declarative transaction management. ""AOP concepts do not generally have to be understood to make effective use of this code"". This discourages the user from reading the relevant AOP section (6.6), as AOP ""does not generally have to be understood.""  From section 9.5.6 ""The `@Transactional` annotation may be placed before an interface definition, a method on an interface, a class definition, or a public method on a class."" This is not entirely true.  If the public method is not invoked via a proxy, then the `@Transactional` annotation will not be applied.  In this case, code may also have to be refactored; yet the reference document implies you simply add the `@Transactional` annotation.  Whilst many users will have read and understood section 6.6.1, it does no harm to explicitly emphasise the relevance of section 6.6.1 to transactional annotations - especially as Spring is modular in nature and few users will have consumed the entire reference manual.  ---  **Affects:** 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: documentation,","spring-projects-issues","2007-12-05T19:41:06Z","2019-01-13T08:06:13Z"
"","9176","@Configurable abstract parent bean with inner bean causes progressive slowdown [SPR-4498]","**[Mark Erinoff](https://jira.spring.io/secure/ViewProfile.jspa?name=merinoff)** opened **[SPR-4498](https://jira.spring.io/browse/SPR-4498?redirect=false)** and commented  An abstract parent bean that contains an inner bean causes a progressive slowdown as more beans of that type are instantiated. See the enclosed unit test. The slowdown was traced to BeanDefinitionValueResolver.adaptInnerBeanName()  looping, trying to create a new unique bean name. It seems that the old inner bean names never get cleaned out of DefaultSingletonBean.dependentBeanMap.    ---  **Affects:** 2.5 final  **Attachments:** - [applicationContext-test.xml](https://jira.spring.io/secure/attachment/13686/applicationContext-test.xml) (_1.69 kB_) - [ConfigurableSpeedTest.java](https://jira.spring.io/secure/attachment/13687/ConfigurableSpeedTest.java) (_1.12 kB_) - [MyChildBean.java](https://jira.spring.io/secure/attachment/13688/MyChildBean.java) (_63 bytes_) - [MyConfigurableBean.java](https://jira.spring.io/secure/attachment/13689/MyConfigurableBean.java) (_481 bytes_) - [MyInjectedBean.java](https://jira.spring.io/secure/attachment/13690/MyInjectedBean.java) (_39 bytes_)","closed","in: core,","spring-projects-issues","2008-02-25T02:13:14Z","2012-06-19T03:47:42Z"
"","9722","Hessian Ouput Stream gets cut off when used with spring: [SPR-5047]","**[Marieke Vandamme](https://jira.spring.io/secure/ViewProfile.jspa?name=marie)** opened **[SPR-5047](https://jira.spring.io/browse/SPR-5047?redirect=false)** and commented  There seems to be a bug while using hessian in combination with spring framework for remoting. Outputstream is not closed correctly, and part of the serialized output data gets lost.  This does not occur while doing the same with hessian-only remoting, so this should probably be resolved within spring.  The missing ""close"" method should be placed in: org.springframework.remoting.caucho.Hessian2SkeletonInvoker Close method on output stream needs to be applied after method: this.skeleton.invoke(in, out);  A test client & server is included for simulation. Batch file launches the client, and war needs to be deployed in servlet engine running on 8080 (both on 1 computer). All source code is located in the ""SpringHessianIssue.jar"" file  ---  **Affects:** 2.5.5  **Issue Links:** - #9721 Exception on client while performing remoting ... error = ""expected string at end of file"" (_**""is duplicated by""**_)","closed","type: bug,","spring-projects-issues","2008-07-30T01:37:50Z","2019-01-11T14:39:26Z"
"","9721","Exception on client while performing remoting ... error = ""expected string at end of file"" [SPR-5046]","**[Marieke Vandamme](https://jira.spring.io/secure/ViewProfile.jspa?name=marie)** opened **[SPR-5046](https://jira.spring.io/browse/SPR-5046?redirect=false)** and commented  There seems to be a bug while using hessian in combination with spring framework for remoting. Outputstream is not closed correctly, and part of the serialized output data gets lost.  This does not occur while doing the same with hessian-only remoting, so this should probably be resolved within spring.  The missing ""close"" method should be placed in: org.springframework.remoting.caucho.Hessian2SkeletonInvoker Close method on output stream needs to be applied after method: this.skeleton.invoke(in, out);  A test client & server is included for simulation. Batch file launches the client, and war needs to be deployed in servlet engine running on 8080 (both on 1 computer). All source code is located in the ""SpringHessianIssue.jar"" file  ---  **Affects:** 2.5.5  **Issue Links:** - #9722 Hessian Ouput Stream gets cut off when used with spring: (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2008-07-30T01:36:27Z","2019-01-12T16:50:49Z"
"","9824","Problem with SpringJUnit4ClassRunner in Eclipse testing setup on MacOS X [SPR-5151]","**[Marcus Ilgner](https://jira.spring.io/secure/ViewProfile.jspa?name=milgner)** opened **[SPR-5151](https://jira.spring.io/browse/SPR-5151?redirect=false)** and commented  Using a JUnit test case run configuration in Eclipse via SpringJUnit4ClassRunner can lead to a lot of problems with 3rd party libraries due to ClassLoader issues. The root of the issue is that the current thread's context classloader doesn't get set: a couple of resources suggest that it is due to the -XstartOnFirstThread parameter needed by Eclipse to run SWT, so the problem ultimately lies with Apple's Java VM. I have created a small workaround to address this issue which checks for a correctly set ClassLoader and, if none is available, sets the systems ClassLoader.   ---  **Affects:** 2.5.5, 2.5.6  **Attachments:** - [EclipseTestingFix.patch](https://jira.spring.io/secure/attachment/14670/EclipseTestingFix.patch) (_745 bytes_)","closed","type: enhancement,","spring-projects-issues","2008-09-11T21:49:39Z","2008-09-17T01:20:52Z"
"","9238","Add support to override Annotated beans [SPR-4561]","**[Marcos Sousa](https://jira.spring.io/secure/ViewProfile.jspa?name=marcossousa)** opened **[SPR-4561](https://jira.spring.io/browse/SPR-4561?redirect=false)** and commented  The problem is: I have one jar with applicationContext files and annotated beans with `@Service`, `@Repository` and `@Controller`. But want to override some functionality writing another bean, annotating or registering in application context in web-inf/classes for exemple. In the current version the application doesn't start throwing a Illegal State Exception.  One good approach would be use precedence attribute to get better control, like in Jboss Seam.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-03-09T16:18:23Z","2012-06-19T09:36:19Z"
"","9351","jee:environment properties get whitespace appended to value read from properties-file. [SPR-4674]","**[Marco Beelen](https://jira.spring.io/secure/ViewProfile.jspa?name=mcbeelen)** opened **[SPR-4674](https://jira.spring.io/browse/SPR-4674?redirect=false)** and commented  I have a software component, which needs to access a deployed RemoteStatelessSessionBean. Throught all environments the configuration is different. In order to solve this problem, we want to configure our remote-slsb with properties read from a local file on the classpath like this:  \ \ \ \ \classpath:configuration.properties\ \ \ \                                     java.naming.factory.initial=${service.contextfactory}             java.naming.provider.url=${data.service.providerurl}                         \  The configuration.properties contains:  service.contextfactory = com.ibm.websphere.naming.WsnInitialContextFactory data.service.providerurl = iiop://localhost:2809 data.service.jndi = ejb/DataServiceHome  When I installed this component I found the following stacktrace in my errorLog:  Caused by: javax.naming.ConfigurationException: java.lang.NumberFormatException: For input string: ""2809        "" [Root exception is java.lang.NumberFormatException: For input string: ""2809        ""] at com.ibm.ws.naming.util.WsnInitCtxFactory.parseIiopUrl(WsnInitCtxFactory.java:1773) at com.ibm.ws.naming.util.WsnInitCtxFactory.parseBootstrapURL(WsnInitCtxFactory.java:1507) at com.ibm.ws.naming.util.WsnInitCtxFactory.getInitialContextInternal(WsnInitCtxFactory.java:374) at com.ibm.ws.naming.util.WsnInitCtx.getContext(WsnInitCtx.java:113) at com.ibm.ws.naming.util.WsnInitCtx.getContextIfNull(WsnInitCtx.java:428) at com.ibm.ws.naming.util.WsnInitCtx.lookup(WsnInitCtx.java:144) at javax.naming.InitialContext.lookup(InitialContext.java:361) at org.springframework.jndi.JndiTemplate$1.doInContext(JndiTemplate.java:132) at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:88) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:130) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:155) at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:93) at org.springframework.jndi.JndiObjectLocator.lookup(JndiObjectLocator.java:105) at org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor.lookup(AbstractRemoteSlsbInvokerInterceptor.java:97) at org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.refreshHome(AbstractSlsbInvokerInterceptor.java:105) at org.springframework.ejb.access.AbstractSlsbInvokerInterceptor.afterPropertiesSet(AbstractSlsbInvokerInterceptor.java:92) at org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean.afterPropertiesSet(SimpleRemoteStatelessSessionProxyFactoryBean.java:99) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1288) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1257) ... 132 more  Initially I looked at the content of my configuration.properties. Within that file there were no whitespace-characters behind the value for the providerurl.  It took me sometime to look at the jee:environment-configuration and indeed the were some whitespace-characters behind the ""${data.service.providerurl} -placeholder. (Select all and you will see) Those trailing spaces had been appended to the value read from the properties-files.  I would like to suggest to trim the values read for jee:environment-properties.    ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-04-08T02:36:32Z","2012-06-19T09:36:18Z"
"","9018","Remove final modifiers from setX methods in JdbcDaoSupport to allow better annotation based autowiring [SPR-4339]","**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** opened **[SPR-4339](https://jira.spring.io/browse/SPR-4339?redirect=false)** and commented  The JdbcDaoSupport class contains setters for the DataSource and JdbcTemplate. These setters are final and so cannot be overridden.  This causes problems when using annotation based configuration.  In this case it would be handy if these setX method could be overridded and annotated with `@Autowired`  This same goes up for other support classes like HibernateDaoSupport where setHibernateTemplate and setSessionFactory are final.  See also discussion: http://forum.springframework.org/showthread.php?t=48558   ---  **Affects:** 2.5.1  1 votes, 2 watchers","closed","status: bulk-closed,","spring-projects-issues","2008-01-15T00:50:05Z","2019-01-12T02:38:42Z"
"","9249","Usage of GenericTypeAwarePropertyDescriptor looses the PropertyEditorClass returned by the BeanInfo [SPR-4572]","**[Marcel Ammerlaan](https://jira.spring.io/secure/ViewProfile.jspa?name=marcel.ammerlaan)** opened **[SPR-4572](https://jira.spring.io/browse/SPR-4572?redirect=false)** and commented  When a BeanInfo returns property descriptors with property-editors set, the creation of GenericTypeAwarePropertyDescriptor looses the property-editor.   ---  **Affects:** 2.5.2  **Attachments:** - [testcase.zip](https://jira.spring.io/secure/attachment/13769/testcase.zip) (_4.27 kB_)","closed","in: core,","spring-projects-issues","2008-03-11T23:58:34Z","2012-06-19T03:47:27Z"
"","9475","spring.ftl not accessible in sitemesh decorators [SPR-4798]","**[marc schipperheyn](https://jira.spring.io/secure/ViewProfile.jspa?name=mschipperheyn)** opened **[SPR-4798](https://jira.spring.io/browse/SPR-4798?redirect=false)** and commented  It doesn't seem possible to access the spring.ftl macro set from within a Freemarker/Sitemesh decorator. This is because the spring macro is exposed to the org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver whereas the Sitemesh decorator is handled through web.xml.   --- No further details from [SPR-4798](https://jira.spring.io/browse/SPR-4798?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-05-11T05:27:22Z","2012-06-19T09:36:19Z"
"","9638","LTW spring-agent Weaving not performed within Test, if class to be woven is referenced by Generic Variable declaration [SPR-4963]","**[Marc Ludwig](https://jira.spring.io/secure/ViewProfile.jspa?name=baronludwig)** opened **[SPR-4963](https://jira.spring.io/browse/SPR-4963?redirect=false)** and commented  See http://forum.springframework.org/showthread.php?t=56568 for further information. Apologies for the description, but I'll try to explain.  I'm using the Spring Test Context, to perform Load Time Weaving within the boundaries of the test, to allow the injection of dependencies into `@Configurable` Domain Objects.  This works fine, unless some generic declaration references a super type of the `@Configurable` class, even if this declararion is not executed. Looking at the output from the Load Time Weaver, the Configurable class is no longer woven, leading me to assume that it has been class loaded prior to the instantiation of the Spring Application Context, and therefore before weaving has been turned on.  I will attach a test case that hopefully shows the problem.  ---  **Affects:** 2.5.4  **Attachments:** - [springsrc.zip](https://jira.spring.io/secure/attachment/14258/springsrc.zip) (_4.90 kB_)  **Issue Links:** - #9811 `@Configurable` does not work when type is already loaded due to Java bytecode verification  9 votes, 10 watchers","closed","status: bulk-closed,","spring-projects-issues","2008-06-27T01:13:06Z","2019-01-13T08:03:31Z"
"","9303","@Configurable does not inject into Generic Class unless preConstruction=true [SPR-4626]","**[Marc Ludwig](https://jira.spring.io/secure/ViewProfile.jspa?name=baronludwig)** opened **[SPR-4626](https://jira.spring.io/browse/SPR-4626?redirect=false)** and commented   ---  **Affects:** 2.5.2  **Attachments:** - [ConfigurableTestCase.zip](https://jira.spring.io/secure/attachment/13840/ConfigurableTestCase.zip) (_3.09 kB_)","closed","status: duplicate,","spring-projects-issues","2008-03-26T00:07:32Z","2019-01-12T16:50:57Z"
"","9061","TopLinkTransactionManager unable to expose a TopLink transaction to JDBC access code [SPR-4382]","**[Marc Ludwig](https://jira.spring.io/secure/ViewProfile.jspa?name=baronludwig)** opened **[SPR-4382](https://jira.spring.io/browse/SPR-4382?redirect=false)** and commented  (see http://forum.springframework.org/showthread.php?t=48968 for further info)  In Spring docs it states: ""TopLinkTransactionManager is capable of exposing a TopLink transaction to JDBC access code that accesses the same JDBC DataSource, provided that TopLink works with JDBC in the backend and is thus able to expose the underlying JDBC Connection. The DataSource to expose the transactions for needs to be specified explicitly; it won't be autodetected.""  In order to generate and call some anonymous PL/SQL blocks (to deal with Oracle associative arrays used in legacy code) we are using JdbcDaoSupport. The rest of our app used TopLinkDaoSupport.  I saw in the documentation that Toplink transaction can be exposed to JDBC, but I think that this will never occur due to the SessionFactory creating a Proxy aound the Session, whilst checks within the ToplinkTransactionManager to retrieve the JDBCConnection assume a ClientSession.  Stepping through doBegin in TopLinkTransactionManager I think shows that a jdbcConnection will never be retrieved from a Writeable Toplink Client Session.  TopLinkTransactionManager.doBegin Code: if (!definition.isReadOnly()) { logger.debug(""Creating managed TopLink Session with active UnitOfWork for read-write transaction""); session = getSessionFactory().createManagedClientSession(); }  ServerSessionFactory.createManagedClientSession (in AbstractSessionFactory) Code: logger.debug(""Creating managed TopLink client Session""); return (Session) Proxy.newProxyInstance( getClass().getClassLoader(), new Class[] {Session.class}, new ManagedClientInvocationHandler(createClientSession()));  But later in TopLinkTransactionManager.doBegin it calls getJdbcConnection Code: if (!(session instanceof oracle.toplink.publicinterface.Session)) { if (logger.isDebugEnabled()) { logger.debug(""TopLink Session ["" + session +""] does not derive from [oracle.toplink.publicinterface.Session]""); } return null;  Unless I'm mistaken (a big risk!), a writeable Toplink Session will never be able to provide the JDBC Connection to the JdbcDaoSupport, as it's an instance of Proxy (notSession).  Is this expected behaviour, meaning that the ToplinkTransactionManager.getJdbcConnection should be overridden to deal with the Proxy instance, or is it a bug within the Spring-Toplink Integration layer.  As always, many thanks for investigating.  Marc    ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-01-23T17:44:53Z","2012-06-19T03:47:10Z"
"","8917","less verbose xml binding of java.lang.Properties [SPR-4239]","**[Manuel Aldana](https://jira.spring.io/secure/ViewProfile.jspa?name=aldana)** opened **[SPR-4239](https://jira.spring.io/browse/SPR-4239?redirect=false)** and commented  java.lang.Properties are bound to xml configuration: \ \anyValue\ \  a shorter, less verbose version would be better readable, for instance like following: \ \ \  ---  **Affects:** 2.0.6  **Issue Links:** - #8916 Support value on prop tag (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2007-12-11T00:04:51Z","2019-01-11T17:04:38Z"
"","9643","Error ""Singleton instance not initialized yet"" triggered by toString call in case of circular references [SPR-4968]","**[Manju James](https://jira.spring.io/secure/ViewProfile.jspa?name=manjujames)** opened **[SPR-4968](https://jira.spring.io/browse/SPR-4968?redirect=false)** and commented  When there are circular references between the beans AND there is a post processor involved, you get a 'Singleton not initialized yet' error. Below is the full stack trace. I have simple test case that I could send if that would help.  Jun 30, 2008 10:04:07 AM org.springframework.context.support.AbstractApplicationContext prepareRefresh INFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@104a917: display name [org.springframework.context.support.ClassPathXmlApplicationContext@104a917]; startup date [Mon Jun 30 10:04:06 EDT 2008]; root of context hierarchy Jun 30, 2008 10:04:08 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions from class path resource [mybeans.xml] Jun 30, 2008 10:04:09 AM org.springframework.context.support.AbstractApplicationContext obtainFreshBeanFactory INFO: Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@104a917]: org.springframework.beans.factory.support.DefaultListableBeanFactory@10741fa Jun 30, 2008 10:04:09 AMorg.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@10741fa: defining beans [MyBeanPostProcessor#0,bean1,bean2]; root of factory hierarchy Jun 30, 2008 10:04:09 AM org.springframework.beans.factory.support.DefaultSingletonBeanRegistry destroySingletons INFO: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@10741fa: defining beans [MyBeanPostProcessor#0,bean1,bean2]; root of factory hierarchy Exception in thread ""Main Thread"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean1': Cannot resolve reference to bean 'bean2' while setting bean property 'friendBean'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean2': Cannot resolve reference to bean 'bean1' while setting bean property 'friendBean'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean1': Post-processing of the FactoryBean's object failed; nested exception is java.lang.IllegalStateException: Singleton instance not initialized yet at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:394) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:736) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:123) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:76) at SpringTest.main(SpringTest.java:9) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean2': Cannot resolve reference to bean 'bean1' while setting bean property 'friendBean'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean1': Post-processing of the FactoryBean's object failed; nested exception is java.lang.IllegalStateException: Singleton instance not initialized yet at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269) ... 16 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bean1': Post-processing of the FactoryBean's object failed; nested exception is java.lang.IllegalStateException: Singleton instance not initialized yet at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:140) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:114) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:90) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1269) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269) ... 27 more Caused by: java.lang.IllegalStateException: Singleton instance not initialized yet at org.springframework.beans.factory.config.AbstractFactoryBean.getSingletonInstance(AbstractFactoryBean.java:173) at org.springframework.beans.factory.config.AbstractFactoryBean.access$000(AbstractFactoryBean.java:56) at org.springframework.beans.factory.config.AbstractFactoryBean$1.invoke(AbstractFactoryBean.java:155) at $Proxy0.toString(Unknown Source) at java.lang.String.valueOf(String.java:2615) at java.lang.StringBuilder.append(StringBuilder.java:116) at MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:8) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:331) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.postProcessObjectFromFactoryBean(AbstractAutowireCapableBeanFactory.java:1340) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:137) ... 33 more   ---  **Affects:** 2.5.1  **Attachments:** - [circ-test.jar](https://jira.spring.io/secure/attachment/14273/circ-test.jar) (_4.25 kB_)","closed","type: bug,","spring-projects-issues","2008-06-30T01:12:45Z","2012-06-19T03:47:32Z"
"","9542","Templates did nor allow to overwrite setter for HibernateSession,EntityManagerfactory, SqlMapClient ... to  place @autowire annotation at it  [SPR-4866]","**[Manfred Quasten](https://jira.spring.io/secure/ViewProfile.jspa?name=mquasten)** opened **[SPR-4866](https://jira.spring.io/browse/SPR-4866?redirect=false)** and commented  The setters for HibernateSession,EntityManagerfactory, SqlMapClient  for HibernateDaoSupport,JpaDaoSupport, SqlMapClientDaoSupport, JDBCTemplate are declared final.  So it isn't possible to override them to place the autowired annotation at it (the setter must have an other name).  public abstract class AbstractIBatisRepository extends SqlMapClientDaoSupport {      @Autowired     public void setSqlMapClient2(SqlMapClient sqlMapClient){     	setSqlMapClient(sqlMapClient);     }  }  I  know about the philosophic  discussions to make everything final (and I've never agreed to this),  but I think the `@Autwired` Annotation is one reason more not to do that...   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-27T02:58:23Z","2012-06-19T09:36:28Z"
"","9306","@Timed, @Test(timeout=x) and debugging [SPR-4629]","**[Magnus Heino](https://jira.spring.io/secure/ViewProfile.jspa?name=magnus)** opened **[SPR-4629](https://jira.spring.io/browse/SPR-4629?redirect=false)** and commented  Maybe this is completely impossible, I have no idea, but...  It would be really nice if tests annotated with `@Timed` and `@Test`(timeout) annotations could detected by the test runner, and if the test is running in debug mode, disable the timeout.  Right now if you have a timeout defined, and debug the test, it will shudown the debug session if the timeout occurs.   --- No further details from [SPR-4629](https://jira.spring.io/browse/SPR-4629?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-03-26T19:09:49Z","2012-06-18T23:34:03Z"
"","9794","Spelling Mistake [SPR-5121]","**[Madhusudhan](https://jira.spring.io/secure/ViewProfile.jspa?name=madhusudhan)** opened **[SPR-5121](https://jira.spring.io/browse/SPR-5121?redirect=false)** and commented  'If we submit a form with empty values in the firstHame and lastName fields, this is what the HTML would look like:'  Have a look at the '14.2.4.14. The errors tag' section of the speing documentaion and look for the above sentence. The firstName is mis-spelled    ---  **Affects:** 2.0.8, 2.5.5  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: documentation,","spring-projects-issues","2008-08-27T18:46:42Z","2012-06-19T03:47:38Z"
"","9772","Doc: viewClass property required when defiining the URLBasedVIewResolver bean defintion [SPR-5099]","**[Madhusudhan](https://jira.spring.io/secure/ViewProfile.jspa?name=madhusudhan)** opened **[SPR-5099](https://jira.spring.io/browse/SPR-5099?redirect=false)** and commented  In chapter 13 Web MVC Framework (http://static.springframework.org/spring/docs/2.5.x/reference/mvc.html#mvc-controller-command) the code snippet for URLBasedViewResolver does not have a property named 'viewClass'.  If the viewResolver is used without a 'viewClass' it throws an exception. The code snippet given in the spring doc is as shown below.  \ \ \ \   ---  **Affects:** 2.0.8, 2.5.5  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: documentation,","spring-projects-issues","2008-08-19T02:05:15Z","2012-06-19T03:46:50Z"
"","8912","Problem with JSTL 1.1 internationalization [SPR-4234]","**[Macias de La Rosa Jesús Gerardo](https://jira.spring.io/secure/ViewProfile.jspa?name=qualle)** opened **[SPR-4234](https://jira.spring.io/browse/SPR-4234?redirect=false)** and commented  Since we are using the Spring Framework Version 2.07 or 2.5 the JSTL 1.1commands in a JSP Page:  and  are no more working. For older version of Spring these JSTL commands are working correctly.  We have made a test in a JSP Page as follow:   ....... .......  \ \ \ \this is the /jsp/start.jsp\ \Gastronomy: \ \ \  and the message properties are:  messages.properties gastronomy=I'm Default  messages_de_DE.properties gastronomy=I'm german  With the new versions 2.07 or 2.5 of Spring we are obtaining:  this is the /jsp/start.jsp Gastronomy: ???gastronomy???  Is this a BUG? or Should we consider new some rules for Internationalization that we don't know about Spring ? Do'nt forget, that we are using JSTL version 1.1  We have more than one Web Application that use more than one language and we can't update to the new versions of Spring. we are very disappointed about this problem, because until now we didn't find a solution.  Is there any solution? Any Ideas?  __________________  ---  **Affects:** 2.0.7, 2.5 final  **Issue Links:** - #9839 JSTL setLocale/setBundle doesn't work in combination with Spring's JstlView  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: bug,","spring-projects-issues","2007-12-09T07:59:46Z","2019-01-11T17:04:05Z"
"","9839","JSTL setLocale/setBundle doesn't work in combination with Spring's JstlView [SPR-5166]","**[Macias De La Rosa Jesús Gerardo](https://jira.spring.io/secure/ViewProfile.jspa?name=jegnet)** opened **[SPR-5166](https://jira.spring.io/browse/SPR-5166?redirect=false)** and commented  When using the JSTL internationalitation tags:               and         and you change the language to ""en_GB"" or"" it_IT"" or other one, for example:                                             IT  DOESN'T  WORK  ANY  MORE.  This problem was localized under the versions 2.0.x until 2.0.6 of Spring too. At that time, the problem have been detected in the spring-webmvc.jar.  ANY  IDEAS ?  ---  **Affects:** 2.5.5  **Attachments:** - [TEST-SPRING-VERSION.war](https://jira.spring.io/secure/attachment/14697/TEST-SPRING-VERSION.war) (_9.02 MB_) - [WebApp.zip](https://jira.spring.io/secure/attachment/14698/WebApp.zip) (_7.98 MB_)  **Issue Links:** - #9838 JSTL Internationalization Tag Library  doesn't work any more in JSP's (_**""is duplicated by""**_) - #8912 Problem with JSTL 1.1 internationalization","closed","type: enhancement,","spring-projects-issues","2008-09-17T20:53:57Z","2019-01-11T15:40:16Z"
"","9838","JSTL Internationalization Tag Library  doesn't work any more in JSP's [SPR-5165]","**[Macias De La Rosa Jesús Gerardo](https://jira.spring.io/secure/ViewProfile.jspa?name=jegnet)** opened **[SPR-5165](https://jira.spring.io/browse/SPR-5165?redirect=false)** and commented  When using the JSTL internationalitation tags:             and        and you change the language, for example to en_GB or it_IT  ---  **Affects:** 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5  **Issue Links:** - #9839 JSTL setLocale/setBundle doesn't work in combination with Spring's JstlView (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2008-09-17T20:40:06Z","2019-01-12T16:50:44Z"
"","9674","Update Sample Applications to use allowedFields property [SPR-4999]","**[Luke Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=luke)** opened **[SPR-4999](https://jira.spring.io/browse/SPR-4999?redirect=false)** and commented  The pet store, pet clinic etc should use the DataBinder allowedFields property to show best practice with Spring MVC.   --- No further details from [SPR-4999](https://jira.spring.io/browse/SPR-4999?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-07-11T00:00:44Z","2012-06-19T03:46:59Z"
"","9564","Add posibility to set bean allias in the AbstractBeanDefinitionParser [SPR-4888]","**[Lukas Krecan](https://jira.spring.io/secure/ViewProfile.jspa?name=dart0)** opened **[SPR-4888](https://jira.spring.io/browse/SPR-4888?redirect=false)** and commented  I need to define bean name that does not conform to ID rules in custom namespace element. It is not possible to do it in current implementation of AbstractBeanDefinitionParser.  Example:    \o1\     ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-06-03T20:21:06Z","2012-06-19T09:36:25Z"
"","9398","Hibernate 3.2 does not flush update queries before execute select queries using the JtaTransactionManager. [SPR-4721]","**[Luca De Petrillo](https://jira.spring.io/secure/ViewProfile.jspa?name=ldepetrillo)** opened **[SPR-4721](https://jira.spring.io/browse/SPR-4721?redirect=false)** and commented  I'm experiencing some problem using Hibernate 3.2 and the JtaTransactionManager: If i remove an entity from hibernate and in the same transaction i execute a query that could return that entity, hibernate does not execute the remove query before execute the select, returning the previusly removed entity (resulting in stale data begin returned).  The same code and using the same configuration works good with Hibernate 3.1.  I've fount, in the migration guide from Hibernate 3.1 to Hibernate 3.2 (http://www.hibernate.org/250.html#A40 ), that in Hibernate 3.2 has been changed the way as it manage update queries flush depending on transaction state, so maybe the problem is linked on how spring tell hibernate about the transaction status.  I've also noticed that, setting the transactionManager property for the LocalSessionFactoryBean make Hibernate 3.2 work properly (it flushes the update query before the select).   ---  **Affects:** 2.5.3","closed","type: bug,","spring-projects-issues","2008-04-18T00:27:05Z","2012-06-19T03:47:21Z"
"","9817","queryForInt throws EmptyResultDataAccessException [SPR-5144]","**[Loïc Courvoisier](https://jira.spring.io/secure/ViewProfile.jspa?name=loicdvi)** opened **[SPR-5144](https://jira.spring.io/browse/SPR-5144?redirect=false)** and commented  As defined in the NamedParameterJdbcTemplate javadoc, queryForInt(String sql, SqlParameterSource paramSource) returns 0 in case of SQL NULL. But it actually throws an EmptyResultDataAccessException...   ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-09-07T19:41:09Z","2019-01-12T16:27:57Z"
"","9756","Add ability to lookup JNDI entry in SystemPropertyUtils [SPR-5083]","**[Lou Sacco](https://jira.spring.io/secure/ViewProfile.jspa?name=loumeister)** opened **[SPR-5083](https://jira.spring.io/browse/SPR-5083?redirect=false)** and commented  Attached is a patch for the SystemPropertyUtils class to include support for JNDI support as well.  Currently, there is support for ""System"" properties, but in a Java EE environment it is often necessary to grab such variables from JNDI.  Case and point is your Log4jWebConfigurer class uses SystemPropertiesUtils for certain system variables.  However, we had to override this class in order for it to support derivation of the which log4j file to use based on the environment we are in.  Using JNDI, we can set and determine which environment we are in instead of setting a system variable which is often frowned on by admins.  Hopefully this can be considered for a future release so we don't have to override this class.   ---  **Affects:** 2.5.4  **Attachments:** - [SystemPropertyUtils.diff](https://jira.spring.io/secure/attachment/14542/SystemPropertyUtils.diff) (_546 bytes_)  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-13T10:49:54Z","2012-06-19T09:36:24Z"
"","9365","RedirectView handling arrays in model [SPR-4688]","**[Lorenz Schumann](https://jira.spring.io/secure/ViewProfile.jspa?name=lorenz)** opened **[SPR-4688](https://jira.spring.io/browse/SPR-4688?redirect=false)** and commented  The RedirectView should handle arrays in the model as array get parameters.  The current behaviour would be that an array of ints with the model key ""ids"" would result in such a redirect url: http://www.example.com/page.action?ids=[I@10b62c9  The desired behaviour should look like this: http://www.example.com/page.action?ids=1&ids=2&ids=3   ---  **Affects:** 2.0.7  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-10T02:25:19Z","2012-06-19T03:47:01Z"
"","9452","A suggestion for configLocation(SqlMapClientFactoryBean) initializing [SPR-4775]","**[Liu yang](https://jira.spring.io/secure/ViewProfile.jspa?name=lxiaodao)** opened **[SPR-4775](https://jira.spring.io/browse/SPR-4775?redirect=false)** and commented  When  use ibatis with spring,i write the config file like below:                                                                                      classpath:sqlmap-config.xml                                    Usually,there are several developers in a software system.So,i believe It is good to make the configLocation property value accept the pattern like classpath:sqlmap-config-*.xml .And I have seen some engneers upload the code extends SqlMapClientFactoryBean to the value pattern.        I will be very glad to see it in the next release of spring.    --- No further details from [SPR-4775](https://jira.spring.io/browse/SPR-4775?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-05-03T12:54:49Z","2012-06-19T03:47:07Z"
"","8911","Confluence 2.5.4 fail to run on SAP-J2EE : Spring Application context has not been set [SPR-4233]","**[Lior](https://jira.spring.io/secure/ViewProfile.jspa?name=lshaki)** opened **[SPR-4233](https://jira.spring.io/browse/SPR-4233?redirect=false)** and commented  After deployement of confluence on SAP-J2EE the application does not run. Whe you open the browser and go to the application URL, it returns the attached error. (screenshot) SAP-J2EE Application log shows the bellow error message:  > application [confluence] Processing HTTP request to servlet [css] finished with error. The error is: java.lang.IllegalStateException: Spring Application context has not been set > at com.atlassian.spring.container.SpringContainerContext.getComponent(SpringContainerContext.java:75) > at com.atlassian.spring.container.ContainerManager.getComponent(ContainerManager.java:32) > at com.atlassian.confluence.setup.webwork.ConfluenceXWorkTransactionInterceptor.getTransactionManager(ConfluenceXWorkTransactionInterceptor.java:31) > at com.atlassian.xwork.interceptors.XWorkTransactionInterceptor.intercept(XWorkTransactionInterceptor.java:69) > at com.opensymphony.xwork.DefaultActionInvocation.invoke(DefaultActionInvocation.java:165) > at com.opensymphony.xwork.interceptor.AroundInterceptor.intercept(AroundInterceptor.java:35) > at com.opensymphony.xwork.DefaultActionInvocation.invoke(DefaultActionInvocation.java:165) > at com.opensymphony.xwork.DefaultActionProxy.execute(DefaultActionProxy.java:115) > at com.opensymphony.webwork.dispatcher.ServletDispatcher.serviceAction(ServletDispatcher.java:229) > at com.opensymphony.webwork.dispatcher.ServletDispatcher.service(ServletDispatcher.java:199) > at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) > at com.sap.engine.services.servlets_jsp.server.runtime.RequestDispatcherImpl.doWork(RequestDispatcherImpl.java:321) > at com.sap.engine.services.servlets_jsp.server.runtime.RequestDispatcherImpl.forward(RequestDispatcherImpl.java:377) > at com.atlassian.confluence.servlet.CssServlet.service(CssServlet.java:38) > at javax.servlet.http.HttpServlet.service(HttpServlet.java:853) > at com.sap.engine.services.servlets_jsp.server.runtime.FilterChainImpl.runServlet(FilterChainImpl.java:117) > at com.sap.engine.services.servlets_jsp.server.runtime.FilterChainImpl.doFilter(FilterChainImpl.java:62) > at com.atlassian.confluence.util.LoggingContextFilter.doFilter(LoggingContextFilter.java:46) > at com.sap.engine.services.servlets_jsp.server.runtime.FilterChainImpl.doFilter(FilterChainImpl.java:58) > at com.atlassian.seraph.filter.SecurityFilter.doFilter(SecurityFilter.java:182) > at com.sap.engine.services.servlets_jsp.server.runtime.FilterChainImpl.doFilter(FilterChainImpl.java:58) > at com.atlassian.seraph.filter.LoginFilter.doFilter(LoginFilter.java:159) > at com.sap.engine.services.servlets_jsp.server.runtime.FilterChainImpl.doFilter(FilterChainImpl.java:58) > at com.atlassian.confluence.util.ClusterHeaderFilter.doFilter(ClusterHeaderFilter.java:35) > at com.sap.engine.services.servlets_jsp.server.runtime.FilterChainImpl.doFilter(FilterChainImpl.java:58) > at com.atlassian.core.filters.gzip.GzipFilter.doFilter(GzipFilter.java:61) > at com.sap.engine.services.servlets_jsp.server.runtime.FilterChainImpl.doFilter(FilterChainImpl.java:58) > at com.opensymphony.oscache.web.filter.CacheFilter.doFilter(CacheFilter.java:161) > at com.sap.engine.services.servlets_jsp.server.runtime.FilterChainImpl.doFilter(FilterChainImpl.java:58) > at com.sap.engine.services.servlets_jsp.server.HttpHandlerImpl.runServlet(HttpHandlerImpl.java:384) > at com.sap.engine.services.servlets_jsp.server.HttpHandlerImpl.handleRequest(HttpHandlerImpl.java:266) > at com.sap.engine.services.httpserver.server.RequestAnalizer.startServlet(RequestAnalizer.java:387) > at com.sap.engine.services.httpserver.server.RequestAnalizer.startServlet(RequestAnalizer.java:365) > at com.sap.engine.services.httpserver.server.RequestAnalizer.invokeWebContainer(RequestAnalizer.java:944) > at com.sap.engine.services.httpserver.server.RequestAnalizer.handle(RequestAnalizer.java:266) > at com.sap.engine.services.httpserver.server.Client.handle(Client.java:95) > at com.sap.engine.services.httpserver.server.Processor.request(Processor.java:175) > at com.sap.engine.core.service630.context.cluster.session.ApplicationSessionMessageListener.process(ApplicationSessionMessageListener.java:33) > at com.sap.engine.core.cluster.impl6.session.MessageRunner.run(MessageRunner.java:41) > at com.sap.engine.core.thread.impl3.ActionObject.run(ActionObject.java:37) > at java.security.AccessController.doPrivileged(AccessController.java:207) > at com.sap.engine.core.thread.impl3.SingleThread.execute(SingleThread.java:102) > at com.sap.engine.core.thread.impl3.SingleThread.run(SingleThread.java:172)    --- No further details from [SPR-4233](https://jira.spring.io/browse/SPR-4233?redirect=false)","closed","","spring-projects-issues","2007-12-09T04:17:08Z","2019-01-11T17:04:07Z"
"","9660","Use split index for Web documentation [SPR-4984]","**[Libor Tvrdík](https://jira.spring.io/secure/ViewProfile.jspa?name=ltvrdik)** opened **[SPR-4984](https://jira.spring.io/browse/SPR-4984?redirect=false)** and commented  Please use javadoc parameter -splitindex (Split index into one file per letter) for on-line documentation.  The index page (http://static.springframework.org/spring/docs/2.5.5/api/index-all.html) have 8 MB. It is really huge page for web browser rendering.   ---  **Affects:** 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0f80d6358b6e45cffee6fd74dffca7b15024a34, https://github.com/spring-projects/spring-framework/commit/e8bf25ba9dd8a8fcfaa8f76d249cb76b6c9a4a82","closed","type: enhancement,","spring-projects-issues","2008-07-04T02:29:13Z","2012-06-15T02:06:07Z"
"","9182","AbstractBeanFactory.getMergedBeanDefinition has performance issues with lock contention when not going through getBean [SPR-4505]","**[Leo Kim](https://jira.spring.io/secure/ViewProfile.jspa?name=leok)** opened **[SPR-4505](https://jira.spring.io/browse/SPR-4505?redirect=false)** and commented  While load-testing our webapp, I found that threads servicing requests would block on the mergedBeanDefinitions map in getMergedBeanDefinitions, line 990 in the following:  http://springframework.cvs.sourceforge.net/springframework/spring/src/org/springframework/beans/factory/support/AbstractBeanFactory.java?revision=1.199&view=markup  What was happening was none of my Spring beans were being cached in mergedBeanDefinitions, so each time getMergedBeanDefinition(String) would call getMergedLocalBeanDefinition(String) it would need to reach back down into getMergedBeanDefinition(String, BeanDefinition, BeanDefinition) and grab the mergedBeanDefinitions lock.  Upon further inspection, on lines 1041-1043, I see this:  // Only cache the merged bean definition if we're already about to create an // instance of the bean, or at least have already created an instance before. if (containingBd == null && isCacheBeanMetadata() && this.alreadyCreated.contains(beanName)) { this.mergedBeanDefinitions.put(beanName, mbd); }  Note how the logic in the predicate belies what the comment is saying. If I read the comment correctly, it's really saying this:  if (isCacheBeanMetadata() && (containingBd == null ||  this.alreadyCreated.contains(beanName))) { this.mergedBeanDefinitions.put(beanName, mbd); }  When I change the code to do this, I no longer experience lock contention because my beans are now cached in mergedBeanDefinitions, and my pages show up quite quickly (from 10 seconds to ~1-2).  I'm not terribly familiar with the internals of Spring so I'm not sure if this is correct. Plus I'm using `@SpringBean` in Wicket which may be part of the problem, but even so this seems like a serious issue with the code path here, particularly with the predicate logic above and the level of lock contention I was observing -- with 40 threads issuing requests against my webapp I was seeing latencies of up to 500 ms on this single lock.   ---  **Affects:** 2.5.1","closed","in: core,","spring-projects-issues","2008-02-26T14:26:47Z","2012-06-19T03:46:49Z"
"","9633","Bug SPR-4671 still occurs [SPR-4958]","**[Leigh Perry](https://jira.spring.io/secure/ViewProfile.jspa?name=lperry)** opened **[SPR-4958](https://jira.spring.io/browse/SPR-4958?redirect=false)** and commented  The original bug was http://jira.springframework.org/browse/SPR-4671  The fix of catching throwable did not remove the problem. The OSGI class still has to exist:  java.lang.NoClassDefFoundError: org/osgi/framework/Bundle at java.lang.Class.getDeclaredMethods0(Native Method) at java.lang.Class.privateGetDeclaredMethods(Unknown Source) at java.lang.Class.getMethod0(Unknown Source) at java.lang.Class.getMethod(Unknown Source)  ---  **Affects:** 2.5.5  This issue is a sub-task of #9632","closed","","spring-projects-issues","2008-06-25T18:05:25Z","2019-01-11T18:34:08Z"
"","9632","CLONE -Eclipse JFace application now requires OSGi classes at run-time [SPR-4957]","**[Leigh Perry](https://jira.spring.io/secure/ViewProfile.jspa?name=lperry)** opened **[SPR-4957](https://jira.spring.io/browse/SPR-4957?redirect=false)** and commented  I have an SWT and JFace desktop application working with Spring Framework 2.5.2.  JFace depends on classes from org.eclipse.equinox.common_*.jar and the application includes this JAR file in the class path.  In Spring Framework 2.5.3, org.springframework.core.io.support.PathMatchingResourcePatternResolver detects Equinox OSGi by loading the class org.eclipse.core.runtime.FileLocator which is found in this JAR file.  When it attempts to get the ""resolve"" method by reflection, the following Error is thrown because the application does not include any OSGi classes in the class path:  Exception in thread ""main"" java.lang.NoClassDefFoundError: org/osgi/framework/Bundle at java.lang.Class.getDeclaredMethods0(Native Method) at java.lang.Class.privateGetDeclaredMethods(Unknown Source) at java.lang.Class.getMethod0(Unknown Source) at java.lang.Class.getMethod(Unknown Source) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.\(PathMatchingResourcePatternResolver.java:174) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.\(AbstractBeanDefinitionReader.java:78) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.\(XmlBeanDefinitionReader.java:137) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.createDefinition(SingletonBeanFactoryLocator.java:435) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:370)  The PathMatchingResourcePatternResolver code has a ""catch (Exception ex)"" statement, but NoClassDefFoundError extends java.lang.Error not java.lang.Exception.  ---  **Affects:** 2.5.3  **Sub-tasks:** - #9633 Bug SPR-4671 still occurs","closed","in: core,","spring-projects-issues","2008-06-25T17:59:58Z","2019-01-11T18:34:29Z"
"","9361","I found a misspelling The referrence 3.11.3. Fine-tuning annotation-based autowiring with qualifiers [SPR-4684]","**[Lee Seok-Kyeom](https://jira.spring.io/secure/ViewProfile.jspa?name=kyeomstar)** opened **[SPR-4684](https://jira.spring.io/browse/SPR-4684?redirect=false)** and commented  ~~~ Finally, the bean definitions should contain matching qualifier values. ~~~  \  \                                                                                                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               --> Attribute 'name' is not allowed to appear in element 'attribute'.              --> correct!  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ---  **Affects:** 2.5.3","closed","type: bug,","spring-projects-issues","2008-04-09T17:22:21Z","2012-06-19T03:47:36Z"
"","9255","PropertyPlaceholderConfigurer fails to resolve properties in combination with ProxyFactoryBean and default-autowire=""byType"" [SPR-4578]","**[Lars Vonk](https://jira.spring.io/secure/ViewProfile.jspa?name=lvonk)** opened **[SPR-4578](https://jira.spring.io/browse/SPR-4578?redirect=false)** and commented  This seems related to http://jira.springframework.org/browse/SPR-1953. This only occurs when default-autowire=""byType"".  beans.xml:  \  \           	                    	     		com.xebia.MyService     	     	     		     			     		     	       \  placeholder.xml  \  \           	       \  Test class:  public class SpringTest { `@Test` public void shouldLoadSpringContext() { String[] locations = new String[]{""placeholder.xml"", ""beans.xml""}; new ClassPathXmlApplicationContext(locations);        } }  props.properties test.url=http://www.nu.nl  Cheers, Lars  ---  **Affects:** 2.5.2  **Issue Links:** - #6646 PropertyPlaceholderConfigurer indirectly instantiates FactoryBeans if it's autowire mode is anything but 'no'","closed","type: enhancement,","spring-projects-issues","2008-03-13T08:06:47Z","2019-01-11T17:17:09Z"
"","9587","Duplicate mappings in org/springframework/mail/mime.types [SPR-4912]","**[Lars Ködderitzsch](https://jira.spring.io/secure/ViewProfile.jspa?name=lkoe)** opened **[SPR-4912](https://jira.spring.io/browse/SPR-4912?redirect=false)** and commented  I wanted to use ConfigurableMimeFileTypeMap to easily map some common file endings to their mime type. All looked good until I got ""application/x-pointplus"" for a CSS resource (filename bla.css) where I would have expected the more commonly used ""text/css"".  Looking into org/springframework/mail/mime.types it became quickly clear that the ""css"" ending is mapped twice - it seems that the latter mapping won in this case. I don't know if that is exactly a bug - I myself was quite surprised, and need to ""workaround"" now using a custom mime types mapping file. No big deal but I thought you should be made aware of this ""issue"".  Best regards, Lars Ködderitzsch  ---  **Affects:** 2.0.8, 2.5.4  **Issue Links:** - #9850 Included mime.types file contains duplicate settings for CSS extension making it return application/x-pointplus instead of text/css (_**""is duplicated by""**_)  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-06-12T01:00:22Z","2019-01-11T18:30:54Z"
"","9200","Add connect failure detection when IBM J9 is client jdk [SPR-4523]","**[Lars Ködderitzsch](https://jira.spring.io/secure/ViewProfile.jspa?name=lkoe)** opened **[SPR-4523](https://jira.spring.io/browse/SPR-4523?redirect=false)** and commented  I found that the connect failure detection (RmiClientInterceptorUtils.isConnectFailure)  is not working for cases when IBM J9 is the client jdk accessing an EJB on a Websphere Application Server 6.1 (detection works when Sun 1.5.0 JVM is EJB client).  In such a case a java.rmi.MarshalException is received which has a org.omg.CORBA.* exception as cause. As vagely documented here: https://www.redbooks.ibm.com/Redbooks.nsf/RedbookAbstracts/tips0243.html?Open an connect exception can be assumed when the corba exception is of type org.omg.CORBA.COMM_FAILURE or org.omg.CORBA.NO_RESPONSE with a CompletionStatus set to NO.  I locally modified RmiClientInterceptorUtils and added a private method:  \ /** * Tests if the encountered exception originated from a Websphere appserver.  * This may only be relevant when IBMs J9 is also the client JVM.  *   * `@param` ex the RMI exception to check  * `@return` \true\ if the remote exception is a Websphere connect failure  * `@see` https://www.redbooks.ibm.com/Redbooks.nsf/RedbookAbstracts/tips0243.html?Open   */   private static boolean isWebsphereConnectFailure(RemoteException ex) {          Throwable cause = ex.getCause();                if (cause instanceof org.omg.CORBA.COMM_FAILURE                 || cause instanceof org.omg.CORBA.NO_RESPONSE) {                    org.omg.CORBA.SystemException corbaEx = (SystemException) cause;                    return corbaEx.completed == org.omg.CORBA.CompletionStatus.COMPLETED_NO;         }         return false;    }  \  The call to this method has been added to the isConnectFailure() method.  Could you please see if this can be integrated into the Spring distribution, since the connect failure detection is not exactly pluggable?  Thanks, Lars Ködderitzsch  PS: sorry for not providing a proper patch, please give me a note when I should be providing a proper patch rather.  ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-29T01:38:08Z","2019-01-13T08:05:02Z"
"","9090","MailSendException.getMessage will result in NPE [SPR-4412]","**[Lars Ködderitzsch](https://jira.spring.io/secure/ViewProfile.jspa?name=lkoe)** opened **[SPR-4412](https://jira.spring.io/browse/SPR-4412?redirect=false)** and commented  When MailSendException is created via constructors: public MailSendException(String msg) or public MailSendException(String msg, Throwable cause)  calling getMessage on the exception will result in NPE, because attribute ""messageExceptions"" is null.  ---  **Affects:** 2.5 final  **Issue Links:** - #8817 NullPointerException in MailSendException (_**""duplicates""**_)","closed","type: bug,","spring-projects-issues","2008-01-31T22:48:05Z","2019-01-11T17:31:09Z"
"","9718","Annotating an integration test with @IfProfileValue at class level still loads the applications contexts even when the profile is not activated [SPR-5043]","**[Lars Bo Mortensen Spring](https://jira.spring.io/secure/ViewProfile.jspa?name=lbm)** opened **[SPR-5043](https://jira.spring.io/browse/SPR-5043?redirect=false)** and commented  When annotating a integration type unit test using the excellent `@IfProfileValue` annotation set at class level, the application contexts defined in `@ContextConfiguration` are still loaded and dependency injection is done in the test, even though no test methods are executed.  This can be rather time consuming as the integration tests excercise more heavy weight services than is otherwise the case with normal unit tests.  The following unit test highlights the problem:  ``` import static junit.framework.Assert.assertNotNull;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.annotation.IfProfileValue; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = { ""/nonExistingAppCtx.xml"" }) @IfProfileValue(name = ""test-group"", value = ""integration"") public class IntegrationTest {  	@Autowired 	String myNonExistingApplicationContextBean;  	@Test 	public void test() { 		assertNotNull(myNonExistingApplicationContextBean); 	} } ```  The test class should only be run if the test-group system property is set. The expected behaviour when running the test should IMHO be that to report that the testclass contained 1 ignored test. If the test class is run with the test-group property set, it should throw exceptions as the context configuration does not point to a valid application context.  When running the code with Spring 2.5.5 without setting the test-group property, an exception is instead thrown as the the app context is still attempted loaded and dependency injection is attempted.  This is due to the behaviour of createTest in SpringJUnit4ClassRunner which does not check if the testclass should be run at all:  ``` /**  * Delegates to {@link JUnit4ClassRunner#createTest()} to create the test  * instance and then to a {@link TestContextManager} to  * {@link TestContextManager#prepareTestInstance(Object) prepare} the test  * instance for Spring testing functionality.  * @see JUnit4ClassRunner#createTest()  * @see TestContextManager#prepareTestInstance(Object)  */ @Override protected Object createTest() throws Exception { 	Object testInstance = super.createTest(); 	getTestContextManager().prepareTestInstance(testInstance); 	return testInstance; } ```  The call to prepareTestInstance causes all the test execution listeners to fire, and inject the dependencies. By making a simple guard check to see if any methods should be processed at all, the problem can be eliminated. Alternatively it could be part of the TestContextManager's responsibility.  I hope that my explanation is complete enough to give you an understanding of the issue.  ---  **Affects:** 2.5.5  **Attachments:** - [IntegrationTest.java](https://jira.spring.io/secure/attachment/14469/IntegrationTest.java) (_605 bytes_)  **Issue Links:** - #10571 Class-level `@IfProfileValue` overrides method-level `@IfProfileValue` settings","closed","type: enhancement,","spring-projects-issues","2008-07-28T07:21:22Z","2019-01-13T08:03:07Z"
"","9583","Add documentation about how to inject properties when context:component-scan is used to detect beans [SPR-4907]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-4907](https://jira.spring.io/browse/SPR-4907?redirect=false)** and commented  I didn't find any documentation about how to inject properties when context:component-scan is used to detect beans.  However this was very easy to achieve by using the context:property-override element.  I use context:component-scan in a webapp to automaticly detect controllers. In the controller I have named the bean by adding a value attribute to the Controller annotation. `@Controller`(""MyController"")  in dispatcher-servlet.xml I have added:   in controllers-overrider.properties I have: MyController.someProperty=Injected value  This is an easy way to inject properties when context:component-scan is used. I think many people are looking for a solution to this problem and therefore this should be documented in the main Spring reference documentation.   ---  **Affects:** 2.5.4  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-06-10T19:46:40Z","2012-06-19T09:36:24Z"
"","9393","AbstractJmsListeningContainer should provide an easy way to start the container after the ApplicationContext has been fully initialized [SPR-4716]","**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-4716](https://jira.spring.io/browse/SPR-4716?redirect=false)** and commented  AbstractJmsListeningContainer should provide an easy way to start the container after the ApplicationContext has been fully initialized. The current ""autoStartup"" feature calls start() in the afterPropertiesSet method. That  is too early for some applications which are dependent on BeanPostProcessors etc..  Maybe the ""auto startup"" should happen after a ContentRefreshedEvent?    ---  **Affects:** 2.5.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/40720ab0f150ca8e27eb96b015c09276005e1ea7, https://github.com/spring-projects/spring-framework/commit/d96bea9f6a73abff1be0c4665be29f362d62f477  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-16T22:12:06Z","2012-06-19T03:47:40Z"
"","9386","Please make @Repository annotation inheritable [SPR-4709]","**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-4709](https://jira.spring.io/browse/SPR-4709?redirect=false)** and commented  Please make org.springframework.stereotype.Repository annotation inheritable (`@Inherited`).  It is very useful to be able to declare a base service/dao superclass, put `@Repository` on it and know that all children will be automatically wired for exception translation.   ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-04-15T02:39:39Z","2012-06-19T09:36:13Z"
"","9001","AspectJProxyFactory addAspect only uses target object to  [SPR-4322]","**[Kristian Rosenvold](https://jira.spring.io/secure/ViewProfile.jspa?name=krosenvold)** opened **[SPR-4322](https://jira.spring.io/browse/SPR-4322?redirect=false)** and commented   ---  **Affects:** 2.5 final, 2.5.1  **Attachments:** - [aop-test.zip](https://jira.spring.io/secure/attachment/13267/aop-test.zip) (_3.67 kB_)","closed","in: core,","spring-projects-issues","2008-01-10T21:22:03Z","2019-01-12T16:39:22Z"
"","9646","Losing JMS messages with ActiveMQ failover connections in case of a shared SingleConnectionFactory [SPR-4971]","**[Kirill Petrov](https://jira.spring.io/secure/ViewProfile.jspa?name=kvpetrov)** opened **[SPR-4971](https://jira.spring.io/browse/SPR-4971?redirect=false)** and commented  If DefaultMessageListenerContainer is set to be transactioned and when it is using ActiveMQ failover connection DefaultMessageListenerContainer might lose a message if ActievMQ goes down.    ---  **Affects:** 2.5.5  **Attachments:** - [activemq.xml](https://jira.spring.io/secure/attachment/14299/activemq.xml) (_5.12 kB_) - [jmstransaction.tar.gz](https://jira.spring.io/secure/attachment/14298/jmstransaction.tar.gz) (_8.28 kB_)","closed","status: declined,","spring-projects-issues","2008-07-01T10:01:00Z","2019-01-12T16:28:09Z"
"","9712","BeanPropertyRowMapper extension point for beans property names and databases columns lack of coincidence. [SPR-5037]","**[Khasbulatov Denis](https://jira.spring.io/secure/ViewProfile.jspa?name=dkhasbul)** opened **[SPR-5037](https://jira.spring.io/browse/SPR-5037?redirect=false)** and commented  This mapper is exactly what we need in our project, with only one small issue. We have use case when we need to be informed by throwing exception when some property of the bean is not populated with data from the database because column which corresponds to this property was not found. Could such behavior be implemented ?   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-24T21:10:31Z","2012-06-19T03:46:50Z"
"","9469","classpath*: should return resources in reverse order [SPR-4792]","**[Kevin Calcagno](https://jira.spring.io/secure/ViewProfile.jspa?name=kcalcagno)** opened **[SPR-4792](https://jira.spring.io/browse/SPR-4792?redirect=false)** and commented  The ""classpath*:"" pseudo-URL results in an array of resources listed in the order returned by ClassLoader.getResources (called in PathMatchingResourcePatternResolver.findAllClassPathResources).  This order is determined by the order of the Java classpath, in which entities that appear earlier typically hide those that appear later.  When an application context loads bean definitions, however, later declarations override earlier ones.  Thus we have a mismatch in the semantics of a classpath (first one wins) and bean definition loading (last one wins).  A common practice in deployed systems is to set up a directory for configuration overrides (usually properties files) at the beginning of the classpath.  This practice is incompatible with the use of ""classpath*:"" unless the additional configurations are strictly additive rather than overlapping.  The proposed solution is simply to reverse the order of resources returned by ClassLoader.getResources before returning them from PathMatchingResourcePatternResolver.findAllClassPathResources.  This change would remain compatible with strictly additive uses of ""classpath*:"" while resolving the mismatch in ordering semantics.   ---  **Affects:** 2.5.4  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/14043/patch.txt) (_957 bytes_) - [SPR-4792.patch](https://jira.spring.io/secure/attachment/14069/SPR-4792.patch) (_1.74 kB_)  0 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2008-05-09T01:09:35Z","2019-01-12T02:38:30Z"
"","9382","Maven2 pom checksum problems on central repository [SPR-4705]","**[Ketil Aasarød](https://jira.spring.io/secure/ViewProfile.jspa?name=lorethan)** opened **[SPR-4705](https://jira.spring.io/browse/SPR-4705?redirect=false)** and commented  The release drops from at least version 2.5.2 and 2.5.3 on http://repo1.maven.org/maven2/ gives checksum errors. This is very annoying for maven users.   ---  **Affects:** 2.5.2, 2.5.3  6 votes, 4 watchers","closed","type: task,","spring-projects-issues","2008-04-15T00:10:20Z","2012-06-19T03:47:38Z"
"","9211","add Array support to AxisBeanMappingServicePostProcessor [SPR-4534]","**[Kerboriou christophe](https://jira.spring.io/secure/ViewProfile.jspa?name=cronoschris)** opened **[SPR-4534](https://jira.spring.io/browse/SPR-4534?redirect=false)** and commented  the AxisBeanMappingServicePostProcessor don't support the array type. because it use only the BeanSerializatorFactory and BeanDeserializatorFactory. Or for using array with axis, the good serializator is ArraySerializatorFactory and for deserializator is ArrayDeserializator.  please, add an arrayMapping like beanMapping.  ---  **Affects:** 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1, 2.0.2, 1.2.9, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.1 M1, 2.1 M2, 2.1 M3, 2.1 M4, 2.5 RC1, 2.5 RC2, 2.5 final, 2.5.1, 2.5.2  **Issue Links:** - #9210 add Array support to AxisBeanMappingServicePostProcessor (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-03-04T00:26:42Z","2019-01-11T17:15:44Z"
"","9210","add Array support to AxisBeanMappingServicePostProcessor [SPR-4533]","**[Kerboriou christophe](https://jira.spring.io/secure/ViewProfile.jspa?name=cronoschris)** opened **[SPR-4533](https://jira.spring.io/browse/SPR-4533?redirect=false)** and commented  We can't deserialize or serialize an array with AxisBeanMappingServicePostProcessor.  the AxisBeanMappingServicePostProcessor use only the BeanSerializerFactory and BeanDeserializerFactory.  please, add an arrayMapping using ArrayDeserializerFactory and ArraySerializerFactory to add array support to this post processor.  ---  **Affects:** 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1, 2.0.2, 1.2.9, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.1 M1, 2.1 M2, 2.1 M3, 2.1 M4, 2.5 RC1, 2.5 RC2, 2.5 final, 2.5.1, 2.5.2  **Attachments:** - [AxisBeanMappingServicePostProcessor.java](https://jira.spring.io/secure/attachment/13739/AxisBeanMappingServicePostProcessor.java) (_10.78 kB_)  **Issue Links:** - #9211 add Array support to AxisBeanMappingServicePostProcessor (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2008-03-04T00:20:55Z","2019-01-11T17:15:37Z"
"","9866","Some implementation of HandlerExceptionResolver should allow for a list of Exceptions to be ignored [SPR-5193]","**[Kent Rancourt](https://jira.spring.io/secure/ViewProfile.jspa?name=krancour)** opened **[SPR-5193](https://jira.spring.io/browse/SPR-5193?redirect=false)** and commented  SimpleMappingExceptionResolver is the only implementation of HandlerExceptionResolver packaged with Spring.  It permits mapping of specific exceptions (subclasses and their subclasses) to specific views.  What this does **not** account for is the ability to ignore/rethrow specific exceptions.  While this would generally be a beneficial feature, it's **especially** important for those who are using both Spring MVC **and** Spring Security.  Spring Security's ExceptionTranslationFilter is far better suited for properly handling exceptions indicative of authentication or authorization failures- for example, an AccessDeniedException because user lacks the correct role.  Without an implementation of  HandlerExceptionResolver that is capable of ignoring/rethrowing such exceptions (or any exception(s) specified through configuration), the ExceptionTranslationFilter never gets the opportunity to do its job (i.e. redirect user to AuthenticationEntryPoint or send 403, depending on circumstances).  Marten Deinum indicated to me in the forum that I could address this gap by subclassing SimpleMappingExceptionResolver or providing my own alternate implementation of HandlerExceptionResolver.  The problems with such an approach are twofold:  1. The signature of the resolveException(...) method on the HandlerExceptionResolver  interface does **not** throw Throwable or Exception.  This means any attempt at subclassing SimpleMappingExceptionResolver or providing an alternate implementation of HandlerExceptionResolver can only successfully ignore/rethrow runtime exceptions.  While that is probably ok in most cases, it's not quite flexible enough for all use cases since method signatures in controllers can be very flexible and can (I believe) throw any type of exception.  2. Given Spring's popularity, I assume there are many developers using both Spring MVC and Spring security.  That entire population shouldn't have to implement a custom HandlerExceptionResolver just to ensure the ExceptionTranslationFilter can still do its job.  IMHO it wouldn't be optimal to encourage custom solutions to what I assume is a common problem when the feature could easily be included out-of-the-box instead.  Please strongly consider this improvment.  It would certainly help to streamline integration of two of SpringSource's top products.   ---  **Affects:** 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/fbb2103e4d1279639957a7f0c43c1706ddfb754b  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-10-01T04:41:16Z","2012-06-19T03:47:02Z"
"","9836","javax.jms.IllegalStateException: Session closed Under Multi-thread [SPR-5163]","**[Kent Chong](https://jira.spring.io/secure/ViewProfile.jspa?name=is_whchong)** opened **[SPR-5163](https://jira.spring.io/browse/SPR-5163?redirect=false)** and commented  I have used the commj ""WorkManagerTaskExecutor"" to multi-thread my work. The work will perform 2 action, 1 is to update the price record to database and then send the price message to Topics. Record could update successfully. But some of the threads are unable to send message out.  Stacktrace: org.springframework.jms.IllegalStateException: Session closed; nested exception is javax.jms.IllegalStateException: Session closed Caused by: javax.jms.IllegalStateException: Session closed at com.ibm.ejs.jms.JMSSessionHandle.getOpenSession(JMSSessionHandle.java:1226) at com.ibm.ejs.jms.JMSSessionHandle.getOpenUnifiedSession(JMSSessionHandle.java:1263) at com.ibm.ejs.jms.JMSMessageProducerHandle.\(JMSMessageProducerHandle.java:129) at com.ibm.ejs.jms.JMSSessionHandle.createProducer(JMSSessionHandle.java:1777) at org.springframework.jms.core.JmsTemplate.doCreateProducer(JmsTemplate.java:846) at org.springframework.jms.core.JmsTemplate.createProducer(JmsTemplate.java:827) at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:505) at org.springframework.jms.core.JmsTemplate$2.doInJms(JmsTemplate.java:477) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:428) at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:475)   ---  **Affects:** 2.0.6  **Attachments:** - [jms-outbound.xml](https://jira.spring.io/secure/attachment/14686/jms-outbound.xml) (_1.91 kB_) - [springJMS.log](https://jira.spring.io/secure/attachment/14694/springJMS.log) (_6.82 kB_)  2 votes, 6 watchers","closed","status: bulk-closed,","spring-projects-issues","2008-09-17T16:42:47Z","2019-08-16T12:33:38Z"
"","9832","Don't @autowire the setter if it has been explicitly set [SPR-5159]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5159](https://jira.spring.io/browse/SPR-5159?redirect=false)** and commented  If I have a bean with an `@autowired` setter method, but in my context definition I manually inject that property, then I'd like Spring to not try and auto-wire that property.  However, Spring seems to try and autowire the property even if I specify an explicit injection in the context.  In some cases autowiring fulfills 99% of uses of a given class, but sometimes yoyu want to over-ride that autowire behaviour and manually inject instead.   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-09-16T08:49:49Z","2019-01-12T05:34:02Z"
"","9782","DelegatingVariableResolver doesn't look through context hierarchy [SPR-5109]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5109](https://jira.spring.io/browse/SPR-5109?redirect=false)** and commented  In its resolveSpringBean() method, DelegatingVariableResolver calls BeanFactory.containsBean() to check for the existence of a bean in the webapp context, before calling getBean() to retrieve it.  This means that it will never find beans that are present in the parent context, event though the getBean() call would have found it.  DelegatingVariableResolver should check the webapp context and all parent contexts.   ---  **Affects:** 2.5.5","closed","","spring-projects-issues","2008-08-20T20:25:08Z","2019-01-11T15:33:28Z"
"","9750","[EhCacheFactoryBean] diskStorePath property has no effect [SPR-5076]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5076](https://jira.spring.io/browse/SPR-5076?redirect=false)** and commented  EhCacheFactoryBean has a diskStorePath property, which is in turn passed to the constructor of net.sf.ehcache.Cache.  The resulting Cache object is then passed to CacheManager.addCache.  At this point, CacheManager unconditionally stomps on the diskStorePath property of the Cache object, over-writing it with its own diskStorePath value.  It seems to do this regardless of the existing version.  Obviously this isn't a bug in Spring per se, but there doesn't seem to be much point in offering the property if the ehcache runtime just throws it away.  This happens both with ehcache 1.4.1 and 1.5.0   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-08-11T02:45:28Z","2012-06-19T03:46:50Z"
"","9747","[AnnotationMethodHandlerAdapter] Allow beans from context to be valid as handler method arguments [SPR-5073]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5073](https://jira.spring.io/browse/SPR-5073?redirect=false)** and commented  I think it would be a neat feature to be able to declare context-managed beans as arguments to a `@RequestMapping` handler method.  This would likely be best done by annotating the parameter, using a variety of `@Autowired`, maybe.  My use case would be for supplying request- or session-scoped beans to the handler method as arguments.  Currently, I would use aop scoped-proxies to supply scoped beans to a singleton controller, but by supplying them as arguments to the handler method, you remove the need to generate the proxy - it can supplied directly.  If #9746 were to be implemented, then this could be achieved to some degree by extending AnnotationMethodHandlerAdapter, but it would be more elegant if done properly.  ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-08-08T06:28:37Z","2019-01-11T14:38:17Z"
"","9746","Refactor AnnotationMethodHandlerAdapter to allow easier customisation of arg and return value types [SPR-5072]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5072](https://jira.spring.io/browse/SPR-5072?redirect=false)** and commented  I would like to subclass AnnotationMethodHandlerAdapter in order to implement handling of my own types for the arguments and return values of handler methods.  However, due to the way it is structured, subclassing to override this behaviour is difficult.  My specific use case is that I want to change the behaviour of AnnotationMethodHandlerAdapter in cases where the handler method returns null, or void.  Allowing extension of the resolveHandlerArguments method naturally follows on from this.   ---  **Affects:** 2.5.5","closed","type: task,","spring-projects-issues","2008-08-08T06:24:39Z","2019-01-11T14:38:14Z"
"","9737","Enhance AnnotationMethodHandlerAdapter to allow easier controller chaining [SPR-5062]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5062](https://jira.spring.io/browse/SPR-5062?redirect=false)** and commented  Now that our controllers can be POJOs whose handler methods can have near-arbitrary choices of arguments and return values, it becomes a more attractive prospect for one controller class to directly invoke the handler method on another.  For example, take a `@Controller` which handles form submissions.  After a successful submission, the controller wants to pass control flow on to another controller.  Traditionally, you would return a forward or redirect back to the container, which would then re-dispatch to the other controller.  This is cumbersome, so instead you can inject the second controller into the first, and then directly invoke the second controller's handler method when you want to hand over control.  This is an improvement in some cases, and often gives more readable code, but it does mean giving controllers knowledge of one another, which isn't particularly nice.  You could instead define an interface to be implemented by the controllers, and inject that, but then if you're resorting to interfaces, why bother with annotations to start with.  So my suggestion is that AnnotationMethodHandlerAdapter be extended to allow another type of return value from handler methods, specifically instances of another controller.  So controller A would be injected with controller B, but only as an Object.  It would think of it only as ""the thing to pass control flow to when I'm done"".  AnnotationMethodHandlerAdapter  would examine the methods of that returned object for annotations which indicated that that method should accept control flow.  The method would then be treated as though it were the originally invoked `@RequestHandler` method, with all the same flexibility.  This would allow you to pass control along a chain of controllers without resorting to forwards and redirects.  It should be a fairly low-impact change, from what I can see of AnnotationMethodHandlerAdapter.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-08-05T08:36:16Z","2015-09-22T17:34:33Z"
"","9735","[Docs] Clarify usage of scoped-proxy FactoryBeans [SPR-5060]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5060](https://jira.spring.io/browse/SPR-5060?redirect=false)** and commented  I've just spent time debugging my usage of a custom FactoryBean which is also an aop:scoped-proxy.  I got it to work, but only after a lot of digging through the Spring source to find out how FactoryBeans and scoped-proxies interact.  My FactoryBean had been returning ""false"" from isSingleton(), which seemed to be consistent with the scope=""session"" in the bean definition.  Of course, what ended up happening was that the FactoryBean itself became session scoped, and every time my client code accessed the bean within the session, the BeanFactory created a new instance - the created instance itself was not session-scoped.  The fix is to return true from isSingleton(), and rely on the session-scoping of the FactoryBean to produce what is effectively a session-scoped, factory-created bean instance.  I hope I've described that OK.  I think the documentation could use some explicit notes about this.  (a) In the section on scoped-proxies, a mention that it is the Factorybean itself that is scoped, not the things it creates, and (b) in the section on FactoryBeans, a mention that the isSingleton() method refers to whether the instance created by the FactoryBean is a singleton within the lifetime of the FactoryBean, not the context.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-08-05T02:52:11Z","2012-06-19T03:47:30Z"
"","9728","Allow SimpleMappingExceptionResolver to navigate exception ""cause"" hierarchy [SPR-5053]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-5053](https://jira.spring.io/browse/SPR-5053?redirect=false)** and commented  In some cases, a business logic exception ends up being wrapped in some other exception by the time it gets to the HandlerExceptionResolver.  This means that the likes of SimpleMappingExceptionResolver cannot easily handle it.  An example would be I have a FactoryBean which can throw a business logic exception during the creation of the object.  The factory bean is in the context as a scoped proxy.  When the proxy is dereferenced and the factorybean throws the business logic exception, the exception is wrapped in layers of spring BeanFactory exceptions as it rolls back up the AOP stack.  This is fine, except I cannot then directly configure the original business logic exception in the SimpleMappingExceptionResolver.  If SimpleMappingExceptionResolver were able to walk up the tree of root cause exceptions (there may be JDK compatibility issues there), then it could peel the onion and handle the original exception accordingly.  ---  **Affects:** 2.5.5  **Issue Links:** - #18863 `@ExceptionHandler` should match cause as well (e.g. for exception thrown from argument formatter)  5 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-01T01:13:06Z","2019-01-13T08:03:03Z"
"","9664","[MBeanExporter] Give listeners finer-grained access to MBean lifecycle [SPR-4988]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4988](https://jira.spring.io/browse/SPR-4988?redirect=false)** and commented  #9058 and #9060 improved visibility of the MBean lifecycle, providing more extension hooks to subclasses.  I'd like to see this taken yet further, and I have a good use case for it.  In JBossAS, certain MBeans implement the org.jboss.system.ServiceMBean interface, which provides create/start/stop/destroy methods.  When wired up as part of JBoss's service framework, the container will invoke create and start on the bean **after** it has been registered with the JMS server, and then call stop and destroy **before** it is deregistered.  I would very much like to use MBeanExporter to perform the same lifecycle, so that the service can have full support from the Spring container, whilst participating in the JBoss service framework. In order to do this with Spring 2.5.5, you need to over-ride large chucks of code.  Specifically, during de-registration, MBeanExporter provides no pre- hook to allow you to stop/destroy the service bean, only a post- hook, by which time it's too late.  However, there is a onRegister hook which can handle the create/start part just fine, although that hook only works if you subclass MBeanExporter.  You can't do it with listeners, since the listeners only get access to the ObjectName when onRegister and onUnregister is called.  In #9060, it was decided that maintaining a map of ObjectNames to bean instances was not sufficiently compelling.  Hopefully this use case provides that justification.  So in summary, I'd like to see (a) a new pre-unregister hook added as both a protected method in MBeanExporter, as well as added to the listener framework, and (b) The map of ObjectNames to bean instances maintained by MBeanExporter, and the bean instances added to the registration hooks for both subclasses and listeners.  ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-06T00:16:32Z","2019-01-11T18:31:45Z"
"","9653","@InitBinder can fail when using mix of command objects and plain parameters [SPR-4978]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4978](https://jira.spring.io/browse/SPR-4978?redirect=false)** and commented  I have a `@Controller` which has a mix of `@RequestMapping` methods, some of which use command objects, some of which use plain `@requestParam` arguments.  I also have an `@InitBinder` method, which calls initDirectFieldAccess() on the WebDataBinder.  This obviously only makes sense in the context of the command-object methods, but there's no way to make that distinction in the annotation.  When invoking the methods which declare command object parameters, all is well.  However, when invoking the methods which use plain parameter arguments, the `@InitBinder` method is still called and fails on initDirectFieldAccess  java.lang.IllegalArgumentException: Target bean must not be null at org.springframework.util.Assert.notNull(Assert.java:112) at org.springframework.validation.DirectFieldBindingResult.\(DirectFieldBindingResult.java:51) at org.springframework.validation.DataBinder.initDirectFieldAccess(DataBinder.java:191)  I suggest that DataBinder be made aware that if its targetBean is null, then do not try and create the DirectFieldBindingResult, since it makes no sense in that context.  The easy workaround is to check in the `@InitBinder` method that the binder's target bean is non-null before calling initDirectFieldAccess(), but it would be nice if the mechanism was robust enough to catch this case automatically.  ---  **Affects:** 2.5.5  **Issue Links:** - #9725 `@ModelAttribute` on function parameter should allow nulls to be passed in","closed","type: enhancement,","spring-projects-issues","2008-07-03T02:24:35Z","2019-01-13T08:03:23Z"
"","9602","Return 405 instead of 404 when HTTP method is not supported [SPR-4927]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4927](https://jira.spring.io/browse/SPR-4927?redirect=false)** and commented  Prior to the use of Spring 2.5 `@RequestMapping`, if I wanted to limit my controller to accepting POST requests only, I simply injected POST into the controller, and a GET request would result in a very specific ""this controller only support POST"" error.  When I use `@RequestMapping`(method=POST), however, and send a GET request to the controller, I get an entry in the logs saying ""No matching handler method found for ... , method 'GET'"", and a 404 is returned to the client.  This seems like a step backwards to me.  I only noticed because a client was accidentally sending GET requests to a POST-only controller, and the resulting 404 caused some confusion, running around and general pointing of fingers.  A 404 doesn't seem to be the correct response.  I'd like to suggest 406 (NOT ACCEPTABLE), but that may cause even more confusion.  Even a 500 would be preferably to a 404 here, i think.  ---  **Affects:** 2.5.4  **Issue Links:** - #10401 `@Controller` method order effects `@RequestMapping` behavior in ways not expected - #9097 Comprehensive REST Support  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ba425941127296f07d8c90c26771843e9a0f6d34, https://github.com/spring-projects/spring-framework/commit/0a6cac5a84f11d2170c5de292eb8bd1e49b9a6f0","closed","type: enhancement,","spring-projects-issues","2008-06-17T02:41:03Z","2019-01-13T08:03:41Z"
"","9570","[XsltView] URI base for imports is meaningless [SPR-4894]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4894](https://jira.spring.io/browse/SPR-4894?redirect=false)** and commented  I've been using XsltViewResolver for the first time, and found some rather peculiar behaviour when it comes to resolving the URI base for XSL imports.  Say I have a stylesheet defined in /WEB-INF/transform.xslt and that stylesheet contains  where import.xslt is contained in the same WEB-INF directory.  The import fails because import.xslt cannot be found.  If I then plug in my own URIResolver and make it log the href and base arguments, the base has actually resolved as file:///D:/WEB-INF.  I'd expect the base to be the webapp's WEB-INF directory on disk.  This is probably because when Spring wraps my transform.xslt in a StreamSource (via ServletContextResource) and passes that Source to the TransformerFactory, it loses all context information and doesn't know the base URi of the stylesheet.  Would it be possible for XsltViewResolver to default to a sensible implementation of URIResolver, which uses the local ResourceLoader to try and locate the resource?  The current behaviour would seem to be completely useless.   ---  **Affects:** 2.0.8, 2.5.4, 2.5.5  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-06-05T03:15:08Z","2012-06-19T03:47:45Z"
"","9504","[Docs] Clarify behaviour of @RequestMapping method when void or null return is used [SPR-4828]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4828](https://jira.spring.io/browse/SPR-4828?redirect=false)** and commented  Section 13.11.4 of the manual needs clarifying of what happens if your `@RequestMapping-annotated` method has either a void return type, or returns a null.  Currently, it says:  ""The following return types are supported for handler methods:   [....]  void if the method handles the response itself (e.g. by writing the response content directly).""  However, the actual behaviour is that if the methods returns void or null, **and** the method declared the HttpServletResponse as a parameter, then Spring assumes the response was handled internally by the method, and does nothing.  If the response parameter is not declared, then Spring will attempt to generate a ModelAndView.  The docs should state this explicitly.  I just ran across this because my method only declares the ServletWebrequest parameter, and gets the HttpServletResponse from that, rather than declaring the HttpServletResponse parameter explicitly.   ---  **Affects:** 2.5.4","closed","type: task,","spring-projects-issues","2008-05-16T02:11:51Z","2012-06-19T03:47:08Z"
"","9483","Allow  element in util:list, util:map etc [SPR-4806]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4806](https://jira.spring.io/browse/SPR-4806?redirect=false)** and commented  Can the util schema be modified to allow \ elements to be included inside util:list, util:map, etc ?   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-13T03:06:36Z","2012-06-19T03:47:09Z"
"","9462","Add support for default values in property placeholder syntax [SPR-4785]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4785](https://jira.spring.io/browse/SPR-4785?redirect=false)** and commented  I'd like to be able to specify the defaults for property placeholders within the placeholder itself, perhaps with something like this:  ${my.property:myDefaultValue}  or something similar.  My use case is that often it is desirable to have to defaults alongside the placeholder, for readability.  Also, our applications use a single, globally-defined placeholder configurer, and different instances of the application have different property sets, decoupled from the code itself.  Embedding defaults within the placeholders would make this much easier to manage.  ---  **Affects:** 2.5.4  **Issue Links:** - #10180 Property placeholder defaulting in resources path  3 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-06T00:34:15Z","2019-01-11T17:43:32Z"
"","9448","[InternalResourceView] Handle SRV.8.2 and SRV.14.2.5.1 violations more elegantly [SPR-4771]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4771](https://jira.spring.io/browse/SPR-4771?redirect=false)** and commented  A fairly common exception in our server logs is where we receive a HEAD request which passes through the application as far as InternalResourceView, which then attempts a RequestDispatcher.forward().  At this point Tomcat will throw the following exception:  javax.servlet.ServletException: Original SevletResponse or wrapped original ServletResponse not passed to RequestDispatcher in violation of SRV.8.2 and SRV.14.2.5.1 at org.apache.catalina.core.ApplicationDispatcher.checkSameObjects(ApplicationDispatcher.java:1018) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:329) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:301) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:240)  This happens because the HttpServlet implementation of doHead() is simply to wrap the original HttpServletResponse in a dummy object.  Our current approach to this is to have a custom subclass of InternalResourceView which simply does nothing on renderMergedOutputModel() if the request is a HEAD request, but this isn't very nice.  None of this is Spring's fault, of course, but I'm wondering if InternalResourceView could be configured somehow to handle this more elegantly.   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-01T18:22:23Z","2008-05-08T21:16:42Z"
"","9444","DefaultListableBeanFactory.isPrimary() doesn't locate beans in parent contexts [SPR-4767]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4767](https://jira.spring.io/browse/SPR-4767?redirect=false)** and commented  When DefaultListableBeanFactory.isPrimary() is attempting to determine if a given bean definition is the primary, it won't work if the bean definition is in a parent context.  Take a scenario where my parent context contains two bean definitions, of the same type, one of which is marked as the primary.  My child context then has a component which is `@Autowired` with one of the beans.  The isPrimary() method never finds the primary bean definition, since it is only checking its own context.  ---  **Affects:** 2.5.4  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/14011/test.zip) (_1.47 kB_)  **Issue Links:** - #9458 autowire-candidate=""false"" doesn't work for beans specified in a parent BeanFactory","closed","in: core,","spring-projects-issues","2008-04-30T23:56:45Z","2019-01-11T17:44:07Z"
"","9440","[UrlPathHelper] Provide additional util methods for originating request [SPR-4763]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4763](https://jira.spring.io/browse/SPR-4763?redirect=false)** and commented  Could we have additional methods in UrlPathHelper which bridge the gap between the getOriginatingRequestURI() method and the other useful methods like getPathWithinWebApplication()?  For example, I'd like to be able to get the path within the web application of the originating request.  UrlPathHelper provides utilities for both parts, but they can't be easily glued together.  Perhaps getPathWithinWebApplication() could be over-loaded to take a request URI string?   ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-04-28T20:54:27Z","2015-09-22T17:34:30Z"
"","9354","Allow annotated methods on a Controller to be marked as exception handlers [SPR-4677]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4677](https://jira.spring.io/browse/SPR-4677?redirect=false)** and commented  In some cases, I would like to be able to more tightly bind a controller's exception handling to the controller itself.  I am imagining an `@ExceptionHandler` annotation which can be added to a controller's methods, which would be invoked by the framework if the `@RequestMapping-annotated` handler methods throw an exception.  These annotated methods would be used in preference to the context-wide ExceptionResolvers.  This would be particularly useful in controllers with multiple `@RequestMapping` methods, all of which have related exception handling requirements, but which are specific to the controller.  Handling this sort of complex exception handling logic in a context-wide ExceptionResolver is decoupling things too much from the source of the exceptions.  Thoughts?  ---  **Affects:** 2.5.3  **Issue Links:** - #10236 Annotation for exception handling inside annotation based Controllers (_**""is duplicated by""**_) - #10304 Portlet-version of `@ExceptionHandler`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f09f4e8dd2f167030204caecfa4a1ae720d8ecfe","closed","type: enhancement,","spring-projects-issues","2008-04-08T20:17:15Z","2019-01-13T08:04:27Z"
"","9244","[InternalResourceView] Allow exposeContextBeansAsAttributes to be applied to specific beans [SPR-4567]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4567](https://jira.spring.io/browse/SPR-4567?redirect=false)** and commented  The exposeContextBeansAsAttributes property of InternalResourceView, while useful, is often a bit too wide-ranging in its effects.  Sometimes you get a clash between bean names and JSP scoped variables which can be very hard to track down.  Could InternalResourceView be modified so that a specific collection of beans could be explicitly exposed as JSP attributes, rather than every one of them?  These would be injected into the InternalResourceViewResolver by name or reference.  ---  **Affects:** 2.5.2  **Issue Links:** - #12719 UrlBasedViewResolver should implement setExposedContextBeanNames (not InternalResourceViewResolver)","closed","type: enhancement,","spring-projects-issues","2008-03-11T02:10:22Z","2019-01-11T17:17:30Z"
"","9242","ThreadPoolTaskExecutor should offer shutdownNow() [SPR-4565]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4565](https://jira.spring.io/browse/SPR-4565?redirect=false)** and commented  When a ThreadPoolTaskExecutor bean id destroyed, it calls shutdown() on the ThreadPoolExecutor.  Can we have an option to call shutdownNow() instead, please?  ScheduledExecutorFactoryBean already does this.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-10T08:37:26Z","2012-06-19T03:47:22Z"
"","9241","Use CustomizableThreadFactory as the default for ThreadPoolTaskExecutor [SPR-4564]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4564](https://jira.spring.io/browse/SPR-4564?redirect=false)** and commented  The current default TheadFactory used by ThreadPoolTaskExecutor is Executors.defaultThreadFactory().  I suggest that a more useful default would be a CustomizableThreadFactory with the ThreadPoolTaskExecutor's bean name as the thread name prefix.  If not the default, then perhaps an easier way to specify it than manually injecting the thread factory?   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-10T08:25:03Z","2012-06-19T03:46:52Z"
"","9227","Add bean description element to BeanDefinition [SPR-4550]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4550](https://jira.spring.io/browse/SPR-4550?redirect=false)** and commented  Could the bean definition element from the XML bean file be added to AbstractBeanDefinition, and also to the BeanDefinirion interface?  I note that currently BeanDefinitionParserDelegate explicitly ignores this element.  My use case is that I am writing a custom auto-detecting MBeanInfoAssembler, and I'd like to use the bean definition's description as the MBean description field, rather than the default of just the class name.  Perhaps this option could be added to AbstractMBeanInfoAssembler?   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-06T02:58:40Z","2012-06-19T03:47:21Z"
"","9212","Allow specification of inheritable flag in RequestContextFilter/Listener [SPR-4535]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4535](https://jira.spring.io/browse/SPR-4535?redirect=false)** and commented  When RequestContextFilter or RequestContextListener call RequestContextHolder.setRequestAttributes(), they don't specify the inheritable flag, and so that defaults to false.  I'd like to be able to configure the filter or listener to specify the value of this flag.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-04T01:17:12Z","2012-06-19T03:47:13Z"
"","9206","Add response object to ServletRequestAttributes [SPR-4529]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4529](https://jira.spring.io/browse/SPR-4529?redirect=false)** and commented  I have had a few occasions when having the current HttpServletResponse object inside the thread-local instance of ServletRequestAttributes would have been useful, alongside the request and session objects.  I know this doesn't quite fit with the naming, but could it be added in?   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-03-02T19:42:04Z","2008-03-16T10:40:41Z"
"","9187","[MockHttpServletResponse] Allow pluggable encodeUrl() behaviour [SPR-4510]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4510](https://jira.spring.io/browse/SPR-4510?redirect=false)** and commented  Currently, MockHttpServletResponse's various encodeUrl() methods just return the URL unmodified.  Could we have a way of plugging in transformers that can encode the URL as desired by the test?  Something akin to a common-collections Transformer would be ideal.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-26T21:40:35Z","2008-03-05T22:00:02Z"
"","9165","@Autowired HttpSession is cached between sessions [SPR-4487]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4487](https://jira.spring.io/browse/SPR-4487?redirect=false)** and commented  This seems like such an obvious problem, I feel like I'm doing something stupid.  I have a session-scoped bean in my web appcontext, and that bean declares an `@Autowired` HttpSession field.  I would expect the current HttpSession object to be injected into the bean every time a new session-scoped instance is created.  A simple test shows that the same HttpSession object is being injected into each instance of the bean.  This woul seem to be caused by the injectionMetadataCache incide AutowiredAnnotationBeanPostProcessor, unless I am very much mistaken.  To illustrate, I've attached some example files - a simple bean class, a servlet context definition, and a web.xml  What am I missing here?  Is this really a bug?   ---  **Affects:** 2.5.1  **Attachments:** - [example.zip](https://jira.spring.io/secure/attachment/13672/example.zip) (_1.78 kB_)","closed","in: core,","spring-projects-issues","2008-02-21T01:23:28Z","2012-06-19T03:46:50Z"
"","9126","Allow SimpleMessageListenerContainer to handle Connection exceptions [SPR-4448]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4448](https://jira.spring.io/browse/SPR-4448?redirect=false)** and commented  If, when using SimpleMessageListenerContainer, the JMS Connection is dropped, then it will not recover, since the MessageListener is attached to the MessageConsumer and left to get on with it.  Looking at the code, it would seem that nothing in that class hierarchy is calling setExceptionListener() on the Connection object.  If this was done, then the listener container would be notified (in theory) by the JMS container when the connection was dead, and could then re-initialise the shared connection.  In environments when the JMS connection is frequently  dropped(e.g. JBossMQ in a cluster), this makes the SimpleMessageListenerContainer not useful, which is a shame, since otherwise it is just what I need.  I'd prefer to use it over the DefaultMessageListenerConatiner due to its simplicitly.  When an ExceptionListener is not attached to the Connection in JBossMQ, and the connection fails, then JBossMQ will log constant errors to the console saying ""Connection failure, use setExceptionLustener() to handle this error and reconnect"".  It looks like AbstractJmsListeningContainer would be the best place for this to happen?   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-11T01:34:37Z","2012-06-19T03:47:07Z"
"","9120","JmsTemplate should keep hold on the Connection [SPR-4442]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4442](https://jira.spring.io/browse/SPR-4442?redirect=false)** and commented  There seems to be a lot of advice out there on the internet that use of JmsTemplate is ill-advised with some JMS implementations, due to its heavy turnover of resources.  A good description of this is given here http://wiki.jboss.org/wiki/Wiki.jsp?page=JBMSpringJMSTemplateNotes and http://activemq.apache.org/jmstemplate-gotchas.html  Can JmsTemplate be redisgned to be less demanding on the JMS server?  ---  **Affects:** 2.5.1  **Issue Links:** - #8572 Provide a generic JMS ConnectionFactory that caches Sessions and MessageProducers","closed","type: enhancement,","spring-projects-issues","2008-02-10T02:32:16Z","2019-01-11T17:33:04Z"
"","9110","Support @autowiring of Loggers [SPR-4432]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4432](https://jira.spring.io/browse/SPR-4432?redirect=false)** and commented  It occurred to me that a neat application of autowiring would be the ability to autowire logger objects.  Say a class declares something like:  private `@Autowired` Log logger;  where Log is from commons-logging.  Spring would then generate a Log object for the declaring class and then inject it.  I don't think this can be done using the existing resolveResolvableDependency mechanism, since information about the dependent class isn't made available in order to create the Log.  Thoughts?  ---  **Issue Links:** - #9109 Support `@autowiring` of Loggers (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-02-06T23:05:28Z","2019-01-13T08:05:30Z"
"","9109","Support @autowiring of Loggers [SPR-4431]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4431](https://jira.spring.io/browse/SPR-4431?redirect=false)** and commented  It occurred to me that a neat application of autowiring would be the ability to autowire logger objects.  Say a class declares something like:  private `@Autowired` Log logger;  where Log is from commons-logging.  Spring would then generate a Log object for the declaring class and then inject it.  I don't think this can be done using the existing resolveResolvableDependency mechanism, since information about the dependent class isn't made available in order to create the Log.  Thoughts?  ---  **Attachments:** - [IAutowireCandidateFactory.java](https://jira.spring.io/secure/attachment/20489/IAutowireCandidateFactory.java) (_241 bytes_) - [Log.java](https://jira.spring.io/secure/attachment/20393/Log.java) (_566 bytes_) - [LoggerAutowireFactory.java](https://jira.spring.io/secure/attachment/20490/LoggerAutowireFactory.java) (_1.14 kB_) - [LogPostProcessor.java](https://jira.spring.io/secure/attachment/20394/LogPostProcessor.java) (_1.31 kB_) - [PluggableAutowireCandidateResolver.java](https://jira.spring.io/secure/attachment/20491/PluggableAutowireCandidateResolver.java) (_2.10 kB_)  **Issue Links:** - #9110 Support `@autowiring` of Loggers (_**""is duplicated by""**_)  11 votes, 14 watchers","closed","has: votes-jira,","spring-projects-issues","2008-02-06T22:59:51Z","2019-01-13T08:05:32Z"
"","9091","[FrameworkServlet] Add a post-refresh extension hook to createWebApplicationContext() [SPR-4413]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4413](https://jira.spring.io/browse/SPR-4413?redirect=false)** and commented  In #8273, you added a postProcessWebApplicationContext() extension hook to FrameworkServlet to allow customisation of the context before refresh() was called.  In the same vein, could you also add an extension hook for **after** the refresh call?  I am currently overriding createWebApplicationContext(), calling super.createWebApplicationContext(), then manipulating the context (after casting it to ConfigurableListable), then returning it.  Not pleasant, would be much neater with a dedicated extension hook.  ---  **Affects:** 2.0.8, 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-01T00:08:07Z","2019-01-11T17:31:11Z"
"","9063","Make AbstractApplicationContext BeanNameAware [SPR-4384]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4384](https://jira.spring.io/browse/SPR-4384?redirect=false)** and commented  Would it be possible for AbstractApplicationContext to implement the BeanNameAware interface, and to then expose that bean name as a property?  My use case is when beanRefContext.xml contains multiple named contexts, and the beans within those contexts need to access the name of their context.  I can't think of any immediately obvious side-effects to this.  ---  **Affects:** 2.5.1  **Issue Links:** - #6343 Allow to identify loaded spring contexts - #9052 Preventing overrides using ClassPathXmlApplicationContext","closed","type: enhancement,","spring-projects-issues","2008-01-24T02:38:25Z","2019-01-11T16:35:42Z"
"","9060","[MBeanRegistrationSupport] Perform deregistration of individual MBeans in a separate method [SPR-4381]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4381](https://jira.spring.io/browse/SPR-4381?redirect=false)** and commented  MBeanRegistrationSupport currently performs all MBean deregistration in its unregisterBeans() beans method, including performing the loop.  Could it pelase be altered so that the loop calls doUnregister(), so that it can be over-ridden without having to re-implement the whole loop construct in subclasses?  If possible, the doUnregister() method would take the MBean itself as well as the ObjectName, for symmetry with the doRegister() method.  ---  **Affects:** 2.5.1  **Issue Links:** - #9058 [MBeanRegistrationSupport] Pass mbean instance to onRegister() and onUnregister() methods","closed","type: enhancement,","spring-projects-issues","2008-01-23T02:37:06Z","2019-01-11T16:35:49Z"
"","9058","[MBeanRegistrationSupport] Pass mbean instance to onRegister() and onUnregister() methods [SPR-4380]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4380](https://jira.spring.io/browse/SPR-4380?redirect=false)** and commented  MBeanRegistrationSupport has onRegister() and onUnregister() callbacks methods, which currently take the ObjectName of the mbean.  Could it be modified to also take the MBean instance itself?  I need to perform some post-processing, and I currently have to lookup the MBean all over again, which is unnecessary when the original Spring bean is still kicking around the stack.  ---  **Affects:** 2.5.1  **Issue Links:** - #9060 [MBeanRegistrationSupport] Perform deregistration of individual MBeans in a separate method","closed","type: enhancement,","spring-projects-issues","2008-01-23T02:20:34Z","2019-01-11T16:36:29Z"
"","9057","[MBeanRegistrationSupport] Add support for JMX MBeanRegistration interface [SPR-4379]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4379](https://jira.spring.io/browse/SPR-4379?redirect=false)** and commented  For full JMX compliance, MBeanRegistrationSupport should be checking to see if the MBean is an instance of javax.management.MBeanRegistration, and calling the appropriate lifecycle methods, before and after registering/deregistering the MBean.  Currently it does not make this check.  This is a very sueful interface for MBeans which need to know something about their environment.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-23T01:32:05Z","2008-01-26T01:50:10Z"
"","9015","InternalResourceView self-dispatch check breaks backwards compatibility [SPR-4336]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4336](https://jira.spring.io/browse/SPR-4336?redirect=false)** and commented  2.5.1 introduced a change to InternalResourceView which altered the way prepareForRendering() checks for self-dispatch.  The change itself looks sane, but unfortauntely this has broken backwards compatibility for one of our applications.  The scenario involves a controller which under certain conditions returns the view ""forward:xyz"", where xyz is the mapped path of the same controller.  The second time round it dispatches to a JSP.  Not great design, frankly, but we're stuck with it.  Was this change made for functional reasons, or to improve error handling?  If the latter, can I suggest that the change is rolled back, since strictly speaking it is not backwards compatible.  ---  **Affects:** 2.5.1  **Issue Links:** - #8898 Stackoverflow when method returns a empty ModelAndView","closed","type: bug,","spring-projects-issues","2008-01-14T22:57:17Z","2019-01-11T16:33:00Z"
"","9011","AnnotationSessionFactoryBean broken when specifying both XML mapping and Annotation classes [SPR-4332]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4332](https://jira.spring.io/browse/SPR-4332?redirect=false)** and commented  We have an application which uses the Hibernate AnnotationSessionFactoryBean, and which (for legacy reasons) specifies some mapped classes using an XML file, and some others using annotated classes.  Some of the mappings in the XML file referred to classes mapped by annotations, and vice versa.  Under 2.5, this worked fine.  The bean would read the XML mapping file, then the annotated mappings, and ""blend"" them.  However, due to the change in 2.5.1 to LocalSessionFactoryBean (see #7275), the XML mappings are eagerly compiled before the code in AnnotationSessionFactoryBean gets a look in, and because the XML mapping refers to annotation-mapped classes, this fails.  I was sure that this way of specifying mappings was valid and legal according to the documentation, but I can't seem to find the reference anywhere.  It may have been wishful thinking on my part, and that this in fact a valid configuration.  ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-01-13T21:59:19Z","2019-01-11T16:32:53Z"
"","8944","[Documentation] Clarify public interface requirement for scoped proxies [SPR-4266]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4266](https://jira.spring.io/browse/SPR-4266?redirect=false)** and commented  The reference documentation for scoped proxies could use some clarification where it describes the generation of aop:scoped-proxies which implement the same public interface as the scoped bean.  Specifically, when using CGLIB-generated proxies, only the invocation of **public** methods will trigger the dereferercing of the scoped bean.  The docs do say this, but in a slightly roundabout way, and I think it could do with reinforcing.  I bring this up because I've just had a rather frustrating few hours trying to figure out why I was calling a method on a scoped-proxy bean, and all I was getting was an empty, unitinitialized proxy object.  It turns out that the method was package-protected, and therefore didn't trigger the dereferencing of the scoped target.   ---  **Affects:** 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: task,","spring-projects-issues","2007-12-17T21:17:03Z","2012-06-19T03:47:38Z"
"","8931","MockRequestDispatcher should handle wrapped response [SPR-4253]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4253](https://jira.spring.io/browse/SPR-4253?redirect=false)** and commented  MockRequestDispatcher throws an exception if the HttpServletResponse passed to forward() or include() is not an instance of MockHttpServletResponse.  However, it should also permit instances of HttpServletResponseWrapper which wrap MockHttpServletResponse.  This would be consistent with the servlet spec.  My use case is that I have a controller which wraps the response in a HttpServletResponseWrapper before passing it to the dispatcher.   ---  **Affects:** 2.5 final  **Attachments:** - [MockRequestDispatcher.java](https://jira.spring.io/secure/attachment/13195/MockRequestDispatcher.java) (_2.56 kB_)","closed","type: enhancement,","spring-projects-issues","2007-12-13T04:23:13Z","2012-06-19T03:46:54Z"
"","8915","optional boolean @RequestParam fails on missing parameter [SPR-4237]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4237](https://jira.spring.io/browse/SPR-4237?redirect=false)** and commented  If I have a boolean `@RequestParam`(required=false)-annotated parameter on a `@RequestMapping-annotated` method, and a request comes in where that parameter is not specified, then I get an exception:  java.lang.IllegalArgumentException: Cannot convert value of type [null] to required type [boolean]: no matching editors or conversion strategy found at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:237) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:107) at org.springframework.beans.SimpleTypeConverter.convertIfNecessary(SimpleTypeConverter.java:47) at org.springframework.beans.SimpleTypeConverter.convertIfNecessary(SimpleTypeConverter.java:41) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ArgumentsResolver.resolveArguments(AnnotationMethodHandlerAdapter.java:549) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:242)  Shouldn't this convert the missing parameter to false?  ---  **Affects:** 2.5 final  **Issue Links:** - #9911 Default value for `@RequestParam`","closed","type: bug,","spring-projects-issues","2007-12-10T01:09:28Z","2019-01-13T08:06:10Z"
"","8914","Add MIME type for CSV files [SPR-4236]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4236](https://jira.spring.io/browse/SPR-4236?redirect=false)** and commented  Can we have an entry added to the mime.types file for .csv?  It's a bit of a mess, but http://filext.com/file-extension/CSV suggests that the mime type should be text/comma-separated-values   ---  **Affects:** 2.0.8, 2.5 final  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2007-12-10T00:29:06Z","2012-06-19T03:47:30Z"
"","8913","[AnnotationMethodHandlerAdapter] Improve handling of InvocationTargetExceptions [SPR-4235]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4235](https://jira.spring.io/browse/SPR-4235?redirect=false)** and commented  When I use the new `@Controller` and `@RequestMapping` annotations, and the target method throws an Exception, it isn't reported very well by the framework.  Take this example stack trace fragment, caused by an IOException theown by my controller:  java.lang.IllegalStateException: Unexpected exception thrown by method - java.io.FileNotFoundException: \tmp\2007\10\csv\top_100_stops_wap.csv (The system cannot find the path specified) at org.springframework.util.ReflectionUtils.handleInvocationTargetException(ReflectionUtils.java:210) at org.springframework.util.ReflectionUtils.handleReflectionException(ReflectionUtils.java:190) at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:168) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:245) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:874) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:808)  You get the message text of the original exception, but the stack trace isn't much use for diagnosing the problem.  Can ReflectionUtils be modified to propagate or log the original exception?  ---  **Affects:** 2.5 final  **Issue Links:** - #9014 {portlet-mvc, annotation based} SimpleMappingingExceptionResolver does not handle caught exceptions correctly (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2007-12-09T20:30:12Z","2019-01-11T17:04:23Z"
"","8901","Expose resource property of BeanDefinition [SPR-4223]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4223](https://jira.spring.io/browse/SPR-4223?redirect=false)** and commented  Would it be do-able to expose a public getResource() method on the BeanDefinition interface?  It would just return the Resource that is described by the existing getResourceDesription() method.  Doesn't look as though it would be too hard to retrofit, and perhaps the getResourceDescription() method could then be dprecated, in favour of getResource().getDescription().  My use case is that I want to write a MergedBeanDefinitionPostProcessor which uses the Resource that the BeanDefinition came from.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-06T18:26:45Z","2012-06-19T03:47:10Z"
"","8882","Improve NoSuchBeanDefinitionException message when using Qualifier [SPR-4204]","**[Kenny MacLeod](https://jira.spring.io/secure/ViewProfile.jspa?name=skaffman)** opened **[SPR-4204](https://jira.spring.io/browse/SPR-4204?redirect=false)** and commented  When I have an `@Autowired` dependency that uses `@Qualifier`, and the dependency cannot be resolved, I get a NoSuchBeanDefinitionException of the usual form:  org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [com.me.MyType] is defined: Unsatisfied dependency of type [interface com.me.MyType]: expected at least 1 matching bean  In my particular case, there are several beans of that type, but none of them match the qualifier.  It would be very helpful if this message included the qualifier that was used in the resolution attempt.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-02T22:12:48Z","2012-06-19T03:47:26Z"
"","9098","@Aspect discovered by ClassPathBeanDefinitionScanner  [SPR-4420]","**[Ken Sipe](https://jira.spring.io/secure/ViewProfile.jspa?name=kensipe)** opened **[SPR-4420](https://jira.spring.io/browse/SPR-4420?redirect=false)** and commented  In cases where the bean definition and inject is managed through annotation alone, it would be nice to be able to use aspects in the same way.  In order to do this the `@Aspect` annotation would have to be discovered and wired through the ClassPathBeanDefinitionScanner.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-04T02:32:36Z","2008-02-05T02:50:31Z"
"","8920","NullPointerException in TilesView.renderMergedOutputModel(..) [SPR-4242]","**[Ken Geis](https://jira.spring.io/secure/ViewProfile.jspa?name=kgeis)** opened **[SPR-4242](https://jira.spring.io/browse/SPR-4242?redirect=false)** and commented  java.lang.NullPointerException at org.springframework.web.servlet.view.tiles2.TilesView.renderMergedOutputModel(TilesView.java:63)  It appears that there's an NPE if Tiles has not been initialized.  In that case, TilesAccess.getContainer(ServletContext) returns null.  It would have been very helpful to me to have an error message saying that Tiles needs to be initialized.   ---  **Affects:** 2.5 final","closed","type: bug,","spring-projects-issues","2007-12-11T09:07:01Z","2012-06-19T03:47:29Z"
"","9594","Instrumentation instance created by InstrumentationSavingAgent does not support redefining classes [SPR-4919]","**[Ken Dobson](https://jira.spring.io/secure/ViewProfile.jspa?name=kendobson)** opened **[SPR-4919](https://jira.spring.io/browse/SPR-4919?redirect=false)** and commented  I have used the InstrumentationSavingAgent to obtain an instance of Instrumentation. However, the Instrumentation instance does not support redefining classes (isRedefineClassesSupported() returns false).  Class redefinition is supported only if the line ""Can-Redefine-Classes: true"" is added to MANIFEST.MF. See http://java.sun.com/j2se/1.5.0/docs/api/java/lang/instrument/Instrumentation.html  I have manually added ""Can-Redefine-Classes: true"" to the manifest in a copy of spring-agent.jar, and the Instrumentation instance now supports class redefinition.  JDK 1.6 has additional features in Instrumentation which are also only enabled if other lines are included in the manifest. See http://java.sun.com/javase/6/docs/api/index.html  I propose that all of these lines are added to the manifest in spring-agent.jar, enabling all features of Instrumentation: Can-Redefine-Classes: true Can-Retransform-Classes: true Can-Set-Native-Method-Prefix: true   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-06-14T20:20:49Z","2015-09-22T17:34:31Z"
"","9696","""it's"" versus ""its"" in the Spring Reference document [SPR-5021]","**[Keith Pierce](https://jira.spring.io/secure/ViewProfile.jspa?name=krpierce)** opened **[SPR-5021](https://jira.spring.io/browse/SPR-5021?redirect=false)** and commented  Ensure correct usage of ""it's"" and ""its"".  Example: Section  3.2.1.1:  ""When using XML-based configuration metadata, you write bean definitions for those beans that you want the Spring IoC container to manage, and then let the container do it's stuff.""  Should be ""its"", the possessive form. ""It's"" is ana bbreviation for ""it is"".   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-20T23:11:34Z","2012-06-19T03:46:47Z"
"","10070","Add support for outputting a value formatted by a Converter from a JSP [SPR-5397]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-5397](https://jira.spring.io/browse/SPR-5397?redirect=false)** and commented  For example ${myForm.date} should apply the date->string conversion routine automatically.  Look at hooking this into the EL system.  Alternatively, consider introducing a custom tag e.g. \   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2008-08-20T13:41:36Z","2012-06-19T02:28:23Z"
"","9424","Add additional redirect prefixes to allow for more control over redirect behavior [SPR-4747]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-4747](https://jira.spring.io/browse/SPR-4747?redirect=false)** and commented  Web Flow 2 introduces the following prefixes for specifying a location to redirect to, either via the flow itself using an externalRedirect: or a managing FlowHandler, which is a Spring MVC integration class.  It should be possible to get the same level of control in Spring MVC, and we should try to make the semantics as consistent as possible between MVC and Web Flow:  Web Flow 2 location redirect rules:  * The following prefixes are supported for qualifying the returned location string: *   \ *  \servletRelative: - the location is relative to the current servlet\ *  \contextRelative: - the location is relative to the current web application\ *  \serverRelative: - the location is relative to the server root\ *  \url: - the location is a fully qualified URL to an external resource\ *  \ * Also, if the returned location no prefix, for example ""/hotels/index"", the location is treated as relative to the * current servlet by default. *   \ * For servlet-relative, context-relative, and server-relative URLs, a leading slash is optional.  Within an XML flow, the externalRedirect directive to request a redirect to a location would look like this:  externalRedirect:/servlet-relative-path externalRedirect:servletRelative:/path externalRedirect:contextRelative:/path externalRedirect:serverRelative:/path externalRedirect:url:http://whatever  ---  **Affects:** 2.5.3  **Issue Links:** - #11888 Add a shortcut for specifying the application context root in logical view name in a Controller. (_**""is duplicated by""**_) - #7380 RedirectView with more flexible URL-building  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-23T22:49:10Z","2019-01-11T17:42:29Z"
"","9423","Make DispatcherServlet configuration file optional [SPR-4746]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-4746](https://jira.spring.io/browse/SPR-4746?redirect=false)** and commented  I desire a configuration approach where a single master Spring configuration file drives the config of your entire layered Spring web app, rather than the traditional one has the user partition the config across two explicit contextConfigLocations definitions in web.xml. I do like and desire context separation (web vs. service), but I would prefer the separation to be driven within Spring itself within the master configuration, rather than manually in web.xml.  I realize the above feature is most likely a Spring 3.0 feature, but I do think there are some things we can do in Spring 2.5.  Simply relaxing the requirement that a dispatcher-servlet always have a configuration file would go along way to getting the configuration design model I'd like to see from the user's perspective, even if everything gets put in one context in reality.  Currently, to get what I want I have to define a dummy dispatcher-config file with no beans and point to it.  I think the benefit gained in centralized configuration outweighs the current limitation that this can only be achieved with one ApplicationContext.   ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-04-23T22:43:22Z","2015-09-22T17:34:34Z"
"","9358","ClassPathContextResource should also return ClassPathContextResource from createRelative [SPR-4681]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-4681](https://jira.spring.io/browse/SPR-4681?redirect=false)** and commented  This occurred testing SWF 2 with Spring 2.5.3:  java.lang.IllegalStateException: A ContextResource is required to get relative view paths within this context org.springframework.faces.webflow.JsfViewFactory.resolveViewName(JsfViewFactory.java:148) org.springframework.faces.webflow.JsfViewFactory.getView(JsfViewFactory.java:76) org.springframework.webflow.engine.ViewState.resume(ViewState.java:209) org.springframework.webflow.engine.Flow.resume(Flow.java:511) org.springframework.webflow.engine.impl.FlowExecutionImpl.resume(FlowExecutionImpl.java:295) org.springframework.webflow.executor.FlowExecutorImpl.resumeExecution(FlowExecutorImpl.java:132) org.springframework.webflow.mvc.servlet.FlowController.handleRequestInternal(FlowController.java:130) org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153) org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:809) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:523) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:453) javax.servlet.http.HttpServlet.service(HttpServlet.java:690) javax.servlet.http.HttpServlet.service(HttpServlet.java:803)  The flow was stored in the classpath. the class path resource to the flow was not a context resource. therefore, relative view resoure paths could not be obtained. should all class path resources be context resources? if not, why? why only some?   ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-04-09T07:42:58Z","2012-06-19T03:46:36Z"
"","9266","Avoid potential memory leaks in StaticLabeledEnumResolver and DefaultValueStyler [SPR-4589]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-4589](https://jira.spring.io/browse/SPR-4589?redirect=false)** and commented  StaticLabeledEnumResolver.instance() - should this shared instance's backing ""labeledEnumCache"" have weak keys? StylerUtils.DEFAULT_VALUE_STYLER - should this shared instance's backing ReflectiveVistorHelper.visitorClassVisitMethods Map and particularly the ClassVisitMethods.visitMethodCache Map have weak keys? The latter one particularly bugs me, as this will cause the shared instance to hold on to references to classes of all to-stringed objects in the system using ToStringCreator. CachingMapDecorator - should its default be weakKeys=true?  It's only used in the framework in these places...  These are classes I wrote a long time ago... they are cute; however, I want to make sure they're not producing memory leaks with strong references and would like us to look at them again with this mind (SWF uses both enums and ToStringCreator extensively).    ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-15T15:23:54Z","2012-06-19T03:47:36Z"
"","9221","Add a tag for outputting text similiar to JSF's outputText tag. [SPR-4544]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-4544](https://jira.spring.io/browse/SPR-4544?redirect=false)** and commented  Having to use spring:bind just to gain access to type converters (editors) to format a value for display feels cumbersome.  At a minimum, it'd be nice to have a tag to output a formatted property element.  Beyond that, having something like JSF's outputText would be nice.  JSF outputText reference: http://www.jsftoolbox.com/documentation/help/12-TagReference/html/h_outputText.html   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-05T06:51:09Z","2012-06-18T12:45:15Z"
"","9174","Add support for associating a @Controller handler method with a specific data binder configuration. [SPR-4496]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-4496](https://jira.spring.io/browse/SPR-4496?redirect=false)** and commented  When developing `@Controllers`, I find I often want to associate a specific data binder configuration with a specific handler method, or set of handler methods within my controller class.  Unfortunately, the only option I have currently is to define a single binder configuration for the entire controller class.  This often effects my controller class design, forcing me have to break my controller class into several classes per binding config.  It'd be nice if I could define a single binder config then reference it from the appropriate action method(s), perhaps by some id.   ---  **Affects:** 2.5.1  4 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2008-02-25T00:43:44Z","2019-01-13T08:05:08Z"
"","9173","Add logging confirmation of which @Controller handler method was invoked for a specific request, or if no such method was invoked. [SPR-4495]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-4495](https://jira.spring.io/browse/SPR-4495?redirect=false)** and commented  It can be particularly confusing when the handler's view renders due to RequestToViewName conventions, but no method was invoked before due to some request mapping error.  Having confirmation of whether a handler method was actually invoked or not would be helpful.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-25T00:40:35Z","2012-06-19T03:46:52Z"
"","9172","When using request mappings at the type-level like /hotels/*, it should be possible to define a controller handler method for the root like /hotels [SPR-4494]","**[Keith Donald](https://jira.spring.io/secure/ViewProfile.jspa?name=kdonald)** opened **[SPR-4494](https://jira.spring.io/browse/SPR-4494?redirect=false)** and commented  Currently, only doing something like `@RequestMapping`(""/index"") at the method level is supported (requestUri =  /hotels/index).  I would have thought `@RequestMapping` with no value would be the handler for the root, e.g requestUri=/hotels.  ---  **Affects:** 2.5.1  **Issue Links:** - #10302 Implicit /** mapping on type-level `@RequestMapping`  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-02-25T00:34:39Z","2019-01-13T08:05:09Z"
"","9494","Session's attribute name in HandlerMethodInvoker's sessionAttributeStore [SPR-4818]","**[Keesun Baik](https://jira.spring.io/secure/ViewProfile.jspa?name=keesun)** opened **[SPR-4818](https://jira.spring.io/browse/SPR-4818?redirect=false)** and commented  We are using GenericController with Spring 2.5 `@Controller` APIs. And we are using `@SessionAttribute` like this. `@SessionAttributes`(value=""model"") This session attribute name ""model"" are used by many diffent controllers and many JSPs.  The problem is that diffent session attribute stored with same name(here is ""model""). ex, When open pop-up page from parent page, the pop-up page's session attribute will override the parent page's session attribute with same name ""model"". So, after close the pop-up and if we click save button on parent page, we can meet ClassCastException. ^^;;  We resolve this by modify org.springframework.web.bind.annotation.support.HandlerMethodInvoker class  updateModelAttributes method's  from this.sessionAttributeStore.storeAttribute(webRequest, attrName, attrValue);  to this.sessionAttributeStore.storeAttribute(webRequest, attrValue.getClass().getSimpleName() + attrName, attrValue);  and resolveModelAttribute method's  from Object sessionAttr = this.sessionAttributeStore.retrieveAttribute(webRequest, attrName);  to Object sessionAttr = this.sessionAttributeStore.retrieveAttribute(webRequest, paramType.getSimpleName() + attrName);  This modification don't need any change or modification existing Controllers and JSPs. They now use there own session with same name.  How about apply this modification? And could you remove final keywords from HandlerMethodInvoker to extend that class?  Now we just copy and paste original source and modify this above code, and AnnotationMethodHandlerAdapter too. AnnotationMethodHandlerAdapter class using inner class thar extends HandlerMethodInvoker(ServletHandlerMethodInvoker). So we change the HandlerMethodInvoker import statement in AnnotationMethodHandlerAdapter  to our modified version. kk.. Please think about it.  ---  **Affects:** 2.5.4  **Issue Links:** - #19255 `@SessionAttributes` not working as expected","closed","type: enhancement,","spring-projects-issues","2008-05-14T17:08:28Z","2019-01-13T08:04:03Z"
"","9537","Documentation: Spring AOP Pointcuts match 'public' modifiers only [SPR-4861]","**[Karsten Gresch](https://jira.spring.io/secure/ViewProfile.jspa?name=karsten_gresch)** opened **[SPR-4861](https://jira.spring.io/browse/SPR-4861?redirect=false)** and commented  Hi,  would be great if one could enhance the documentation so this issue gets a bit more disclosed.  As everybody should come to the necessary conclusion easily by thinking (Spring-beans needed for Spring AOP...) this information AFAICS is also not covered in all the standard Spring books on print.  The average developer in a hazzle might rather just wonder and give up using Spring AOP. Especially when it comes to intercept Spring MVC controller methods (see e.g. the uncertainties at http://forum.springframework.org/showthread.php?t=30933).  Because Jürgen Höller has already written the sentence needed ;-) it should be easy to put it to the docs under section 6.2.3.:  ""Note - Spring's proxy-based AOP framework operates on public methods called through proxies. Protected methods are by definition not intercepted, neither for JDK proxies (where this isn't applicable) nor for CGLIB proxies (where it isn't really recommendable).""  Thanks!  Kind regards,  Karsten  ---  **Affects:** 2.0.8, 2.5.4  This issue is a sub-task of #9072  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-05-25T06:33:55Z","2019-01-11T19:04:46Z"
"","9702","Doc: DetachedCriteria objects are not reusable [SPR-5027]","**[Karol Kisielewski](https://jira.spring.io/secure/ViewProfile.jspa?name=kkisiele)** opened **[SPR-5027](https://jira.spring.io/browse/SPR-5027?redirect=false)** and commented  In my DAO method I am using criteria object to fetch the data for the given page and then using the same criteria to fetch all data. In looks like that: public Pager\ findNewsByPage(int page, int pageSize) { DetachedCriteria criteria = DetachedCriteria.forClass(News.class); criteria.addOrder(Order.desc(""modifiedOn""));      	List pageData = getHibernateTemplate().findByCriteria(criteria, pageSize * (page - 1), pageSize);     	List allData = getHibernateTemplate().findByCriteria(criteria);          	     	return new Pager(pageData, page, pageSize, allData.size());     }  The problem is that the second invocation of the findByCriteria() gives the same result set as the first one instead of fetching all data.  Generated sql statements (both are the same) are as follows:  Hibernate: select this_.id as id1_1_, this_.created_on as created2_1_1_, this_.modified_on as modified3_1_1_, this_.updated_on as updated4_1_1_, this_.full_description as full5_1_1_, this_.short_description as short6_1_1_, this_.title as title1_1_, this_.written_by as written8_1_1_, user2_.id as id3_0_, user2_.created_on as created2_3_0_, user2_.modified_on as modified3_3_0_, user2_.updated_on as updated4_3_0_, user2_.active as active3_0_, user2_.confirmation_token as confirma6_3_0_, user2_.display_name as display7_3_0_, user2_.email as email3_0_, user2_.login as login3_0_, user2_.password as password3_0_ from WN_NEWS this_ inner join WN_USERS user2_ on this_.written_by=user2_.id order by this_.modified_on desc limit ?  Hibernate: select this_.id as id1_1_, this_.created_on as created2_1_1_, this_.modified_on as modified3_1_1_, this_.updated_on as updated4_1_1_, this_.full_description as full5_1_1_, this_.short_description as short6_1_1_, this_.title as title1_1_, this_.written_by as written8_1_1_, user2_.id as id3_0_, user2_.created_on as created2_3_0_, user2_.modified_on as modified3_3_0_, user2_.updated_on as updated4_3_0_, user2_.active as active3_0_, user2_.confirmation_token as confirma6_3_0_, user2_.display_name as display7_3_0_, user2_.email as email3_0_, user2_.login as login3_0_, user2_.password as password3_0_ from WN_NEWS this_ inner join WN_USERS user2_ on this_.written_by=user2_.id order by this_.modified_on desc limit ?   ---  **Affects:** 2.5.4, 2.5.5","closed","type: bug,","spring-projects-issues","2008-07-22T05:29:17Z","2012-06-19T03:47:12Z"
"","9456","typo: 3.4.5.2. Using a custom scope - should say customScope, not scope [SPR-4779]","**[Karl Palsson](https://jira.spring.io/secure/ViewProfile.jspa?name=kpalsson)** opened **[SPR-4779](https://jira.spring.io/browse/SPR-4779?redirect=false)** and commented  at http://static.springframework.org/spring/docs/2.5.x/reference/beans.html#beans-factory-scopes-custom-creating section 3.4.5.2, the code snippet for registering your custom scope is...  // note: the ThreadScope class does not ship with the Spring Framework Scope customScope = new ThreadScope(); beanFactory.registerScope(""thread"", scope);  The second line should say  beanFactory.registerScope(""thread"", customScope);  Or of course, something like this:  Scope hellYeahIUsedTheSpringDocsToMakeACustomScopeW0000t = new ThreadScope(); beanFactory.registerScope(""thread"", hellYeahIUsedTheSpringDocsToMakeACustomScopeW0000t);  but that's probably being a bit silly.   ---  **Affects:** 2.0.8, 2.5.1, 2.5.2, 2.5.3, 2.5.4  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-05-04T22:55:33Z","2012-06-19T03:47:17Z"
"","9106","Caching the remote interface within SimpleRemoteStatelessSessionProxyFactoryBean [SPR-4428]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-4428](https://jira.spring.io/browse/SPR-4428?redirect=false)** and commented  We can currently cache the remote home interface, but not the remote interface itself.  In situations where the network is slow this can be a performance hit, requiring an extra network trip for each EJB method invocation.  thx.  -karl   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-06T11:22:12Z","2012-06-19T03:46:37Z"
"","9052","Preventing overrides using ClassPathXmlApplicationContext [SPR-4374]","**[Karl Baum](https://jira.spring.io/secure/ViewProfile.jspa?name=kbaum)** opened **[SPR-4374](https://jira.spring.io/browse/SPR-4374?redirect=false)** and commented  We ran into an issue in which we unknowingly had two bean configurations with the same id.  Since we are using the simple ClassPathXmlApplicationContext retrieved from a SingletonBeanFactoryLoader, the default behaviour is to override one definition with another.  This is not what we want, however, since we use regexp to load our app ctx files from the classpath.  We would consider this an issue and would rather spring treated this as a fatal exception on initialization.  DefaultListableBeanFactory provides a field allowBeanDefinionOverriding, but this option is not available within the ClassPathXmlApplicationContext.  Can we include the allowBeanDefinitionOverriding=""false"" option within the ClassPathXmlApplicationContext hiearchy?  thx.  -karl  ---  **Affects:** 2.5.1  **Issue Links:** - #9063 Make AbstractApplicationContext BeanNameAware","closed","type: enhancement,","spring-projects-issues","2008-01-22T13:01:30Z","2019-01-11T16:36:42Z"
"","9288","Support in AbstractTransactionalDataSourceSpringContextTests.executeSqlScript for statements which extends over several lines [SPR-4611]","**[Kaj Hejer](https://jira.spring.io/secure/ViewProfile.jspa?name=kajh)** opened **[SPR-4611](https://jira.spring.io/browse/SPR-4611?redirect=false)** and commented  A useful new feature for AbstractTransactionalDataSourceSpringContextTests.executeSqlScript would be support for statements which extends over several lines, f.x.  create table ( id number(8) );  One possible use for this method is creating the database and insert testdata. For this use some of the sql-statements could be quite long and would be alot more readable if formated so they extends over several lines.  ---  **Affects:** 2.5.2  **Issue Links:** - #9152 SimpleJdbcTestUtils.executeSqlScript should allow multi-line statements","closed","type: enhancement,","spring-projects-issues","2008-03-21T09:57:55Z","2019-01-11T18:12:32Z"
"","9429","Document Reference Manual in 11.3.5. DriverManagerDataSource not implements SmartDataSource   [SPR-4752]","**[kai.hu](https://jira.spring.io/secure/ViewProfile.jspa?name=liccohu)** opened **[SPR-4752](https://jira.spring.io/browse/SPR-4752?redirect=false)** and commented  ""The DriverManagerDataSource class is an implementation of the SmartDataSource  interface"" in the source of spring-framework-2.5.2 ,it is ""public class DriverManagerDataSource extends AbstractDataSource {"" and  class AbstractDataSource implements DataSource . SmartDataSource  Interface only have one implement class SingleConnectionDataSource   ---  **Affects:** 2.0.8, 2.5.2  **Attachments:** - [{53D982DA-FD8C-45A7-BB8D-7387DEDE5684}.bmp](https://jira.spring.io/secure/attachment/13994/%7B53D982DA-FD8C-45A7-BB8D-7387DEDE5684%7D.bmp) (_441.59 kB_)  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-04-24T13:01:03Z","2012-06-19T03:46:37Z"
"","9318","AbstractPdfView does not allow for use of iText PdfStamper [SPR-4641]","**[K. Bryant Larsen](https://jira.spring.io/secure/ViewProfile.jspa?name=kblibr)** opened **[SPR-4641](https://jira.spring.io/browse/SPR-4641?redirect=false)*** and commented  The AbstractPdfView is designed to create a new com.lowagie.text.Document.  What if I already have a Document with an AcroForm that I want to merge and possibly flatten?  I had to create a new View that allows for an injected document to be read by a PdfReader and PdfStamper.       I made (with the help of the forum) an AbstractPdfStamperView that I would like to submit for your review and possible adoption to the org.springframework.web.servlet.view.document package.   ---  **Affects:** 2.5.2  **Attachments:** - [AbstractPdfStamperView.java](https://jira.spring.io/secure/attachment/13856/AbstractPdfStamperView.java) (_4.94 kB_)","closed","type: enhancement,","spring-projects-issues","2008-03-28T03:34:04Z","2012-06-19T03:47:46Z"
"","9054","lang:groovy is missing the depends-on attribute [SPR-4376]","**[Jürgen Hermann](https://jira.spring.io/secure/ViewProfile.jspa?name=jhermann)** opened **[SPR-4376](https://jira.spring.io/browse/SPR-4376?redirect=false)** and commented  See also #8040.  org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 77 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.3.2.2: Attribute 'depends-on' is not allowed to appear in element 'lang:groovy'.  ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-22T20:54:52Z","2019-01-11T16:36:38Z"
"","9048","Omission in docs of PropertiesLoaderSupport [SPR-4370]","**[Jürgen Hermann](https://jira.spring.io/secure/ViewProfile.jspa?name=jhermann)** opened **[SPR-4370](https://jira.spring.io/browse/SPR-4370?redirect=false)** and commented  The API docs do not mention in what order (priority) duplicated properties are resolved. When using setLocations(a, b), is a:foo preferred over b:foo or vice versa?  http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/core/io/support/PropertiesLoaderSupport.html#setLocations(org.springframework.core.io.Resource[])   ---  **Affects:** 2.0.8, 2.5 final  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-01-22T01:35:22Z","2012-06-19T03:47:23Z"
"","9019","Class names of Groovy scripts should be configurable [SPR-4340]","**[Jürgen Hermann](https://jira.spring.io/secure/ViewProfile.jspa?name=jhermann)** opened **[SPR-4340](https://jira.spring.io/browse/SPR-4340?redirect=false)** and commented  When using Groovy scripts in combination with Quartz (and possibly with other Java code), the generated class names containing spaces lead to the following problem (see trace below). It'd be much nicer if the scripts got the id of their bean as their class name (or ""Script\"" or similar) or if there were a property for the class name. Same goes for scripts loaded from the class path.  Caused by: java.lang.ClassFormatError: Illegal class name ""static script"" in class file static script at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:620) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124) at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:57) at groovy.lang.GroovyClassLoader$ClassCollector.createClass(GroovyClassLoader.java:439) at groovy.lang.GroovyClassLoader$ClassCollector.onClassNode(GroovyClassLoader.java:457) at groovy.lang.GroovyClassLoader$ClassCollector.call(GroovyClassLoader.java:461) at org.codehaus.groovy.control.CompilationUnit$10.call(CompilationUnit.java:701) at org.codehaus.groovy.control.CompilationUnit.applyToPrimaryClassNodes(CompilationUnit.java:885) at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:436) at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:271) at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:242) at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:237) at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:199) at org.springframework.scripting.groovy.GroovyScriptFactory.getScriptedObjectType(GroovyScriptFactory.java:172) at org.springframework.scripting.support.ScriptFactoryPostProcessor.predictBeanType(ScriptFactoryPostProcessor.java:240) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:590) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:206) at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType(AbstractApplicationContext.java:940) at org.springframework.context.support.AbstractApplicationContext.initLifecycleDependentBeans(AbstractApplicationContext.java:672) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:360) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:122) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:66)  ---  **Affects:** 2.5.1  **Issue Links:** - #8846 Dynamic objects in Groovy cannot be defined as script inline","closed","type: enhancement,","spring-projects-issues","2008-01-15T01:28:32Z","2019-01-11T16:32:09Z"
"","9290","Enhance GroovyObjectCustomizer to a 'GroovyObjectTransformer' [SPR-4613]","**[Jörg Gottschling](https://jira.spring.io/secure/ViewProfile.jspa?name=jgottschling)** opened **[SPR-4613](https://jira.spring.io/browse/SPR-4613?redirect=false)** and commented  The GroovyObjectCustomizer is a very nice feature, but I think it could be enhanced. The method customize should have the possibility to return an object that replaces the original. This would be very useful if you like to wrap the object, add the scripted methods to another object or want to bind a real script without the class and method overhead to an interface. An example for the last one would be scripted controller with just one method.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-22T01:00:42Z","2015-09-22T17:34:34Z"
"","9268","@Autowire does not work with  [SPR-4591]","**[Jörg Gottschling](https://jira.spring.io/secure/ViewProfile.jspa?name=jgottschling)** opened **[SPR-4591](https://jira.spring.io/browse/SPR-4591?redirect=false)** and commented  I have a simple Groovy bean configured in a XML configuration like that:   Because of the bug my test actually looks like that:  `@RunWith`(SpringJUnit4ClassRunner.class) `@ContextConfiguration` public class FooServiceConfigurationTest {  `@Autowired`(required = true) private FooService fooService;  `@Autowired`(required = true) private ApplicationContext applicationContext;  /** * Tests that the service was autowired to this test.   */   `@Test`   public void fooServiceIsAutowired()   {   assertNotNull(fooService);   assertTrue(fooService instanceof FooService);   }  /** * Tests that the applicationContext contains a Bean namend * ""fooService"" that is an instance of {`@link` FooService}.   */   `@Test`   public void applicationContextContainsFooService()   {   assertNotNull(applicationContext.getBean(""fooService"",   FooService.class));   }  }  The test fooServiceIsAutowired fails, but applicationContextContainsFooService works!   ---  **Affects:** 2.5.2","closed","","spring-projects-issues","2008-03-16T03:20:45Z","2019-01-11T17:18:54Z"
"","9089","Throw specific subclasses of CannotGetJdbcConnectionException [SPR-4411]","**[Jörg Gottschling](https://jira.spring.io/secure/ViewProfile.jspa?name=jgottschling)** opened **[SPR-4411](https://jira.spring.io/browse/SPR-4411?redirect=false)** and commented  CannotGetJdbcConnectionException should be subclassed. At least there should be a CannotFindJdbCDriverException. This should be trivial. Perhaps there are others possible, like WrongJdbcUserCredentialsException or something like this.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-31T17:55:57Z","2008-02-03T16:30:49Z"
"","9446","HibernateTransactionManager throws InvalidIsolationLevelException with ISOLATION_SERIALIZABLE [SPR-4769]","**[Jérémy Lal](https://jira.spring.io/secure/ViewProfile.jspa?name=kapouer)** opened **[SPR-4769](https://jira.spring.io/browse/SPR-4769?redirect=false)** and commented  Using PROPAGATION_REQUIRED, ISOLATION_SERIALIZABLE, i got this exception : org.springframework.transaction.InvalidIsolationLevelException: HibernateTransactionManager is not allowed to support custom isolation levels: make sure that its 'prepareConnection' flag is on (the default) and that the Hibernate connection release mode is set to 'on_close' (LocalSessionFactoryBean's default)  Whereas in spring 2.5.3 there's no exception. I guess it's a regression ?   ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-05-01T07:05:12Z","2019-01-12T16:28:17Z"
"","9023","Converting values for generically typed bean properties [SPR-4344]","**[jz@101tec.com](https://jira.spring.io/secure/ViewProfile.jspa?name=oae)** opened **[SPR-4344](https://jira.spring.io/browse/SPR-4344?redirect=false)*** and commented  Following class hierarchy for the ""commandObject"":  `@MappedSuperclass` public class Entity\ implements IEntity\ {      @Id     @GeneratedValue(strategy = GenerationType.AUTO)     private IdType _id;          public IdType getId() {         return _id;     }          public void setId(IdType id) {         _id = id;     }  }  `@Entity` public class Item extends Entity\ {      @Column(nullable = false)     private String _name;          public void setName(String name) {         _name = name;     }          public String getName() {         return _name;     }  }  The Controller's looks submit method looks like: `@RequestMapping`(method = RequestMethod.POST) public String saveItem(`@ModelAttribute` Item item, BindingResult bindingResult) { System.out.println(item.getId().getClass()); }  Now item.id is actually a String but should be a Long. As a workaround i've done the following:  The Controller's looks submit method looks like: `@RequestMapping`(method = RequestMethod.POST) public String saveItem(`@ModelAttribute` Item item, BindingResult bindingResult, `@RequestParam`(required = false) Long id) { if (id != null) { blankItem.setId(id); System.out.println(blankItem.getId().getClass()); } System.out.println(item.getId().getClass()); }  I would guess this issue is related to #8992.  ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-16T02:04:36Z","2019-01-11T16:32:15Z"
"","9781","LocalSessionFactoryBean can't be configured by all implementations of Resource [SPR-5108]","**[Justin Simonelis](https://jira.spring.io/secure/ViewProfile.jspa?name=jsimonelis)** opened **[SPR-5108](https://jira.spring.io/browse/SPR-5108?redirect=false)** and commented  LocalSessionFactoryBean has public void setConfigLocation(Resource configLocation). Not all Resource's can be used -- they must support getURL() which doesn't work in the case of a ByteArrayResource. Would be quite convenient to config the sessionFactoryBean this way.   ---  **Affects:** 2.5.3","closed","status: invalid,","spring-projects-issues","2008-08-20T07:22:35Z","2019-01-12T05:34:04Z"
"","9498","Make org.springframework.beans.factory.support.BeanDefinitionValueResolver public [SPR-4822]","**[Justin Edelson](https://jira.spring.io/secure/ViewProfile.jspa?name=justinedelson)** opened **[SPR-4822](https://jira.spring.io/browse/SPR-4822?redirect=false)** and commented  This is related to #9496. In creating a custom bean factory implementation that supported the described behavior I had to create a class in the same package (org.springframework.beans.factory.support) to expose this class to classes outside the package.  ---  No further details from [SPR-4822](https://jira.spring.io/browse/SPR-4822?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-05-15T00:25:48Z","2019-01-11T19:00:54Z"
"","9497","Allow for non-existant properties without failure [SPR-4821]","**[Justin Edelson](https://jira.spring.io/secure/ViewProfile.jspa?name=justinedelson)** opened **[SPR-4821](https://jira.spring.io/browse/SPR-4821?redirect=false)** and commented  Currently, Spring will fail to configure a bean if a property is specfied in the bean definition but the corresponding property does not actually exist. This behavior should be configurable.   ---  3 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-15T00:24:09Z","2012-06-19T09:36:32Z"
"","9496","Support the notion of a global bean definitions [SPR-4820]","**[Justin Edelson](https://jira.spring.io/secure/ViewProfile.jspa?name=justinedelson)** opened **[SPR-4820](https://jira.spring.io/browse/SPR-4820?redirect=false)** and commented  Similar to parent-child bean definition relationships, Spring should support an abstract bean per factory whose properties are applied to all beans in the factory. Although this could be done through parent-child, this solution is less verbose and error-prone (i.e. you don't have to remember to set the parent bean def). In the case of nested bean factories, these global bean definitions should apply to beans in nested factories, i.e. a bean named /foo/bar/bean would be populated with properties from the global bean definition from the root factory, the ""foo"" factory, and the ""bar"" factory. Where properties are defined in multiple places, the nearest definition wins.   --- No further details from [SPR-4820](https://jira.spring.io/browse/SPR-4820?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-05-15T00:23:46Z","2012-06-19T09:36:19Z"
"","9495","Support additive and subtractive operators for list, set, and map properties [SPR-4819]","**[Justin Edelson](https://jira.spring.io/secure/ViewProfile.jspa?name=justinedelson)** opened **[SPR-4819](https://jira.spring.io/browse/SPR-4819?redirect=false)** and commented  Assuming #9492 is implemented, it should be possible to add and remove individual elements from collection properties. Suggested syntax for this is +'propertyname' and -'propertyname'. For map properties, only the key portion of the map entry would be examined for removals.  ---  No further details from [SPR-4819](https://jira.spring.io/browse/SPR-4819?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-05-15T00:23:21Z","2019-01-11T19:01:00Z"
"","9492","Support combinational configuration [SPR-4816]","**[Justin Edelson](https://jira.spring.io/secure/ViewProfile.jspa?name=justinedelson)** opened **[SPR-4816](https://jira.spring.io/browse/SPR-4816?redirect=false)** and commented  Currently, if bean definitions with the same name are contained in multiple files, the last bean definition overwrites any prior definitions. This behavior should be configurable to support combining bean definitions. This would allow for shared configuration files to be used across deployment stages with individual properties overwritten as necessary on a per-stage basis.   --- No further details from [SPR-4816](https://jira.spring.io/browse/SPR-4816?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-05-14T11:17:18Z","2012-06-19T09:36:17Z"
"","9491","Support nested bean factories [SPR-4815]","**[Justin Edelson](https://jira.spring.io/secure/ViewProfile.jspa?name=justinedelson)** opened **[SPR-4815](https://jira.spring.io/browse/SPR-4815?redirect=false)** and commented  As a formalized way of providing unique bean names, bean factories should be nested inside one another and the root bean factory should use a slashy syntax to resolve bean names in nested factories. For example, getBean(""/foo/bean"") should look for a bean factory named ""foo"" and get a bean named ""bean"" out of it. Bean refs should support relative paths so that the bean named ""bean"" in the /foo factory should be able to refer to beans in the root factory with ""../otherbean"".   --- No further details from [SPR-4815](https://jira.spring.io/browse/SPR-4815?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-05-14T11:16:14Z","2012-06-19T09:36:14Z"
"","9487","Circular Reference with util:property-path isn't identified [SPR-4811]","**[Justin Edelson](https://jira.spring.io/secure/ViewProfile.jspa?name=justinedelson)** opened **[SPR-4811](https://jira.spring.io/browse/SPR-4811?redirect=false)** and commented  If you have two beans where beanA has beanB injected into a property AND beanB uses org.springframework.beans.factory.config.PropertyPathFactoryBean (either directly or via util:property-path) to set a property, the property on beanB will not be set correctly.  I'm not sure if this is actually resolvable, but should probably produce a warning or error.   ---  **Affects:** 2.5.4  **Attachments:** - [proppath-circ.zip](https://jira.spring.io/secure/attachment/14055/proppath-circ.zip) (_3.33 kB_)","closed","type: enhancement,","spring-projects-issues","2008-05-14T03:45:58Z","2012-06-19T03:47:42Z"
"","9580","Doc: Deployment error on Weblogic 8.1 SP1/SP2 due to manifest issues - upgrade to SP6 required [SPR-4904]","**[Julien HENRY](https://jira.spring.io/secure/ViewProfile.jspa?name=henryju)** opened **[SPR-4904](https://jira.spring.io/browse/SPR-4904?redirect=false)** and commented  Hi,  I have an existing working application packaged as a WAR file. This WAR is created by Maven 2. I have added Spring dependencies to my pom (spring-core, spring-web, spring-orm) and now when I try to deploy I get the following error:  ``` weblogic.management.ApplicationException:  Exception:weblogic.management.ApplicationException: prepare failed for myapp-2.15.0-SNAPSHOT 	Module: myapp-2.15.0-SNAPSHOT	Error: Could not load myapp-2.15.0-SNAPSHOT: java.lang.StringIndexOutOfBoundsException: String index out of range: -1  	at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.createContainer(SlaveDeployer.java:2588) 	at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.prepare(SlaveDeployer.java:2506) 	at weblogic.management.deploy.slave.SlaveDeployer.processPrepareTask(SlaveDeployer.java:833) 	at weblogic.management.deploy.slave.SlaveDeployer.prepareDelta(SlaveDeployer.java:542) 	at weblogic.management.deploy.slave.SlaveDeployer.prepareUpdate(SlaveDeployer.java:500) 	at weblogic.drs.internal.SlaveCallbackHandler$1.execute(SlaveCallbackHandler.java:25) 	at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:197) 	at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:170) --------------- nested within: ------------------ weblogic.management.ManagementException:  - with nested exception: [weblogic.management.ApplicationException:  Exception:weblogic.management.ApplicationException: prepare failed for myapp-2.15.0-SNAPSHOT 	Module: myapp-2.15.0-SNAPSHOT	Error: Could not load myapp-2.15.0-SNAPSHOT: java.lang.StringIndexOutOfBoundsException: String index out of range: -1 ] 	at weblogic.management.deploy.slave.SlaveDeployer$ActivateTask.prepare(SlaveDeployer.java:2523) 	at weblogic.management.deploy.slave.SlaveDeployer.processPrepareTask(SlaveDeployer.java:833) 	at weblogic.management.deploy.slave.SlaveDeployer.prepareDelta(SlaveDeployer.java:542) 	at weblogic.management.deploy.slave.SlaveDeployer.prepareUpdate(SlaveDeployer.java:500) 	at weblogic.drs.internal.SlaveCallbackHandler$1.execute(SlaveCallbackHandler.java:25) 	at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:197) 	at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:170) ```  Moving to Spring 2.0.8 works fine.  I have read on this french forum (http://www.developpez.net/forums/showthread.php?p=3064067) that it could be a Manifest issue with Weblogic 8.1 SP1 or SP2.  I don't know if it could be solved on the Spring side, but perhaps this report will help someone.   ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-06-09T19:03:45Z","2012-06-19T03:46:54Z"
"","9489","HTTP BASIC authentication with JAX-WS [SPR-4813]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-4813](https://jira.spring.io/browse/SPR-4813?redirect=false)** and commented  JAX-WS supports HTTP BASIC authentication through the BindingProvider interface. We need to support this in JaxWsClientInterceptor.  There's also Authenticator support in the Sun JDK 1.6 HttpServer. To be added to SimpleJaxWsServiceExporter as well as to SimpleHttpServerFactoryBean.  ---  **Affects:** 2.5.4  **Issue Links:** - #8227 Client-side JAX-WS Support in Spring Core","closed","type: enhancement,","spring-projects-issues","2008-05-14T04:42:40Z","2019-01-11T19:02:22Z"
"","9161","Document annotation-driven Portlet MVC [SPR-4500]","**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-4500](https://jira.spring.io/browse/SPR-4500?redirect=false)** and commented  The reference documentation doesn't cover annotation-driven Portlet MVC yet.   --- No further details from [SPR-4500](https://jira.spring.io/browse/SPR-4500?redirect=false)","closed","type: task,","spring-projects-issues","2008-02-25T10:01:27Z","2012-06-19T03:47:06Z"
"","9601","allow automatic dependency injection in servlets [SPR-4926]","**[Juan Pablo Santos](https://jira.spring.io/secure/ViewProfile.jspa?name=juanpablo)** opened **[SPR-4926](https://jira.spring.io/browse/SPR-4926?redirect=false)** and commented  Hi,  I'm relatively new to Spring, so it is easy that I've missed something. I've been a couple of days searching if this particular issue has been addressed, but I haven't found anything. However, if I'm mistaken, my apologies O:-)  Well, to the point: AFAIK, there are a few ways to inject beans into a servlet, as noted in here: http://andykayley.blogspot.com/2007/11/how-to-inject-spring-beans-into.html  It would be nice to have automatic DI inside a servlet (incidentally, is this a design issue? why?), so beans could get automatically injected instead of retrieving them via ServletContext. I've made a little servlet which achieves automatic DI, by name or by type, both fields and methods. The idea is that developers' should extend DependencyInjectionServlet to get DI in their fields (and/or methods). Default behaviour of the attached servlet is to inject spring beans in all fields (except serialVersionUID and log) and doesn't try to inject in methods. That seemed most intuitive option to me. Also, autowiring, by default, is made by name.  However, this behaviour can be altered by overriding corresponding methods.  The idea of automatic DI inside the servlet came to me when digging into Stripes source code, which was adapted to make the DI inside the servlet. (Stripes behaviour is to inject beans into `@SpringBean` fields and methods).  the zip also contains a very dumb webapp which tests the servlet.  regards, jp   ---  **Attachments:** - [spring-servlet-dependency-injection.zip](https://jira.spring.io/secure/attachment/14186/spring-servlet-dependency-injection.zip) (_23.70 kB_)","closed","type: enhancement,","spring-projects-issues","2008-06-16T20:09:06Z","2012-06-19T09:36:32Z"
"","9571","Alert module  [SPR-4895]","**[José Mª Tiñana](https://jira.spring.io/secure/ViewProfile.jspa?name=jtinana)** opened **[SPR-4895](https://jira.spring.io/browse/SPR-4895?redirect=false)** and commented  A great improvement for Spring will be to incorporate Alerts. An alert is exactly the same like a Validation Error, but give the oportunity to the user to resubmit again ignoring them. I have implemented outside of spring in a subclass of SimpleFormController this functionally and it´s not too complicated, but it seems that will be easier. This controller just insert with an special tag the fields wicth have alerts, and in the second submit doesn´t check again that fields, and when finally there are no alerts the submit in complete. In previous experience with users, it´s so useful to give alerts about some diferent conditions, like for example if a new field has the same name that other existing in the database but has change the case of some letters. That could be correct or not, depending of the situation, and you need database access, javascript is not useful in that case.  Thanks and hope you find it interesting.   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-06-05T20:56:10Z","2012-06-19T09:36:17Z"
"","9466","NamedParameterUtils.parseSqlStatement is oblivious to SQL comments [SPR-4789]","**[Joshua Caplan](https://jira.spring.io/secure/ViewProfile.jspa?name=jcaplan)** opened **[SPR-4789](https://jira.spring.io/browse/SPR-4789?redirect=false)** and commented  The following testcases illustrate the problem:      String sql1 = ""-- shouldn't matter \n select * from dual where 0 = :param"";     String sql2 = ""-- why do you care? \n select * from dual where 0 = :param"";          ParsedSql ps1 = NamedParameterUtils.parseSqlStatement( sql1 );     assertEquals( 1, ps1.getTotalParameterCount() ); // fails; withinQuotes == true because of ""shouldn't""          NamedParameterJdbcTemplate tpl = new NamedParameterJdbcTemplate( ... );     tpl.query( sql2, ... ); // throws InvalidDataAccessApiUsageException: you can't mix named and traditional ? placeholders  ---  **Affects:** 2.5.4  **Issue Links:** - #9729 NamedParameterUtils.parseSqlStatement: quotes inside a comment block","closed","type: enhancement,","spring-projects-issues","2008-05-08T06:24:34Z","2019-01-11T17:43:26Z"
"","9691","Add more properties to  [SPR-5016]","**[Jose Noheda](https://jira.spring.io/secure/ViewProfile.jspa?name=xmaniac)** opened **[SPR-5016](https://jira.spring.io/browse/SPR-5016?redirect=false)** and commented   only has an attribute (location). This is not enough for advance usage. Please add others like ignoreUnresolvablePlaceholders.  ---  **Affects:** 2.5.5  **Issue Links:** - #9338 Improve context-property-placeholder configurablity (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-07-17T19:54:59Z","2019-01-11T14:36:34Z"
"","9667","LocalContainerEntityManagerFactoryBean fails to autodetect classes in WAS6.1 [SPR-4991]","**[Jose Noheda](https://jira.spring.io/secure/ViewProfile.jspa?name=xmaniac)** opened **[SPR-4991](https://jira.spring.io/browse/SPR-4991?redirect=false)** and commented  LocalContainerEntityManagerFactoryBean loads a valid persistence.xml that does not declare any class mappings. It detects correctly some annotated classes in the classpath (inside WEB-INF/classes) and proceeds to load them failing with:  Local ClassPath: ... Delegation Mode: PARENT_LAST [1] com.ibm.ws.classloader.CompoundClassLoader@548a548a Local ClassPath: Delegation Mode: PARENT_LAST [2] com.ibm.ws.classloader.ProtectionClassLoader@5ba05ba0 [3] com.ibm.ws.bootstrap.ExtClassLoader@69586958 [4] org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@1e941e94 [5] sun.misc.Launcher$AppClassLoader@29582958 [6] sun.misc.Launcher$ExtClassLoader@41384138 ---Original exception--- java.lang.NoClassDefFoundError: WEB-INF.classes.sample.jsf.PersonBean (wrong name: sample/jsf/PersonBean) at java.lang.ClassLoader.defineClassImpl(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:258) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:151) at com.ibm.ws.classloader.CompoundClassLoader._defineClass(CompoundClassLoader.java:555) at com.ibm.ws.classloader.CompoundClassLoader.findClass(CompoundClassLoader.java:506) at com.ibm.ws.classloader.CompoundClassLoader.loadClass(CompoundClassLoader.java:389) at java.lang.ClassLoader.loadClass(ClassLoader.java:597) at java.lang.Class.forNameImpl(Native Method) at java.lang.Class.forName(Class.java:163) at org.hibernate.util.ReflectHelper.classForName(ReflectHelper.java:112) at org.hibernate.ejb.Ejb3Configuration.classForName(Ejb3Configuration.java:1008) at org.hibernate.ejb.Ejb3Configuration.addNamedAnnotatedClasses(Ejb3Configuration.java:1080) at org.hibernate.ejb.Ejb3Configuration.addClassesToSessionFactory(Ejb3Configuration.java:871) at org.hibernate.ejb.Ejb3Configuration.configure(Ejb3Configuration.java:758) at org.hibernate.ejb.Ejb3Configuration.configure(Ejb3Configuration.java:425) at org.hibernate.ejb.HibernatePersistence.createContainerEntityManagerFactory(HibernatePersistence.java:131) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:224)  Notice two things: the classloader is set to PARENT_LAST and the name of the class to be loaded seems incorrect.  This may ver well be an issue of Hibernate as well. If so, please ignore.   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-07-07T22:33:14Z","2019-01-12T05:34:07Z"
"","9055","Add an extension point for ClassPathBeanDefinitionScanner [SPR-4377]","**[Jose Noheda](https://jira.spring.io/secure/ViewProfile.jspa?name=xmaniac)** opened **[SPR-4377](https://jira.spring.io/browse/SPR-4377?redirect=false)** and commented  We're trying (in the official mailing list) to improve the existing Spring - DWR integration by adding annotation support. We have a working prototype by now. We were forced to extend ClassPathBeanDefinitionScanner because we have to work on the BeanDefinitions beyond what the scanner currently offers. Basically, we need an extension point that fires every time that a beandefinition is registered. A kind of post-processor that receives the BeanDefinition and the BeanDefinitionRegistry and that could be injected would be ideal for our purposes (so we won't need to subclass).   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-22T22:19:51Z","2012-06-19T03:47:01Z"
"","8972","Regression: @PersistenceContext not accepted for HibernateEntityManager typed property [SPR-4294]","**[Jose CHILLAN](https://jira.spring.io/secure/ViewProfile.jspa?name=littlejoz)** opened **[SPR-4294](https://jira.spring.io/browse/SPR-4294?redirect=false)** and commented  I need to use criteria for some features in an EJB3 environment, backed by Hibernate. There is a regression with spring 2.0.x. In my bean, I declare : public class MyDao { `@PersistenceContext` private HibernateEntityManager     entityManager; ... }  I am then adding the necessary property in the config file so that spring generates a proxy that implements HibernateEntityManager that provided the ""getSession()"" method giving access to criteria:  \ \ \ \ \ \  But when the bean is instantiated, the property won't be set because spring ensures the property on which the annotation `@PersistenceContext` is set is exactely of the type ""EntityManager.class"" and doesn't allow an inherited type (this is done in PersistenceAnnotationBeanPostProcessor line 527) A work-around I found is to proceed like this :  public class MyDao { private HibernateEntityManager       em; // No annotation here  `@PersistenceContext` public void setEntityManager(EntityManager em) { this.em = (HibernateEntityManager) em; } ... }  But this would be simpler to allow inherited type and to check is the proxy implements the required type. Thanks   ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2008-01-03T02:50:09Z","2012-06-19T03:47:34Z"
"","9742","form:errors does not allow to turn off the span tag [SPR-5067]","**[Joris Van den Bogaert](https://jira.spring.io/secure/ViewProfile.jspa?name=jorisvdb)** opened **[SPR-5067](https://jira.spring.io/browse/SPR-5067?redirect=false)** and commented  form:errors has the basic form \ErrorMessage\. Some customization can be done with delimiter and element but there is no way to turn off the formatting entirely.  For my purpose I don't want span tags, I just want the error message (which then becomes an attribute to another tag (img title)).    ---  **Affects:** 2.5.5  1 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-06T11:55:48Z","2012-06-18T12:45:17Z"
"","9678","Factor out obtaining the list of config files in ContextLoader.createWebApplicationContext [SPR-5003]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-5003](https://jira.spring.io/browse/SPR-5003?redirect=false)** and commented  I've encountered a number of situations over the years where it was very convenient to create a custom ContextLoader that determines the config locations dynamically at runtime, so they can be tailered for the environment the application is running in. I even demo-ed this at SpringOne in 2007 (see http://blog.springsource.com/main/2007/06/25/code-samples-from-springone-beyond-the-obvious-talk/ for details).  Currently, this requires one to override the createWebApplicationContext method, copy its content and change the call on line 253 to do something else. This is the line: wac.setConfigLocation(servletContext.getInitParameter(CONFIG_LOCATION_PARAM));  Instead of directly calling servletContext.getInitParameter, I suggest to factor this out into a protected method so custom subclasses can easily change the way they choose to determine what config locations to use. That would prevent having to copy the entire method to just change a single line.   ---  **Affects:** 2.5.5","closed","status: declined,","spring-projects-issues","2008-07-14T00:17:50Z","2008-07-18T03:15:56Z"
"","9603","Support @Resource (probably @Autowiring as well) for Servlets used through ServletWrappingController [SPR-4928]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-4928](https://jira.spring.io/browse/SPR-4928?redirect=false)** and commented  When using the ServletWrappingController, an instance of the Servlet is created using the newInstance() method. Then the init() is invoked, and that's all configuration that is applied to the Servlet instance. In line with Java EE 5, it might be nice to support at least DI of fields and setters annotated with `@Resource`. Probably `@Autowired` makes sense as well: the reason I'm not sure is that #6727 clearly indicates that ServletWrappingController is not supposed to offer real DI capabilities, but that SimpleServletHandlerAdapter should be used for those cases. However, this was before the annotation-based DI support added in Spring 2.5.  ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-06-17T20:30:04Z","2019-01-11T18:28:55Z"
"","9543","AnnotationMethodHandlerAdapter should treat String return type with @ModelAttribute as model attribute instead of view name [SPR-4867]","**[Joris Kuipers](https://jira.spring.io/secure/ViewProfile.jspa?name=jkuipers)** opened **[SPR-4867](https://jira.spring.io/browse/SPR-4867?redirect=false)** and commented  Currently, AnnotationMethodHandlerAdapter.getModelAndView treats all String return types as view names. It might make sense to support returning a String as a model attribute by annotating the method with `@ModelAttribute`. Even though this would be an incompatible change, the combination of `@ModelAttribute` with a String return type is meaningless at the moment so this shouldn't cause any problems. Otherwise, I think that we should at least issue a warning if someone uses this combination.   ---  **Affects:** 2.5.4  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72cc060eafe1629ace086701bd9f58237de8439d","closed","type: enhancement,","spring-projects-issues","2008-05-27T05:08:30Z","2012-06-19T03:47:48Z"
"","9661","Perl5RegexpMethodPoint removed but documentation still mention. [SPR-4985]","**[Jorge L. Middleton](https://jira.spring.io/secure/ViewProfile.jspa?name=jmiddleton)** opened **[SPR-4985](https://jira.spring.io/browse/SPR-4985?redirect=false)** and commented  In section ""7.2.4.1.1. Regular expression pointcuts"", still mentions the pointcut org.springframework.aop.support.Perl5RegexpMethodPointcut, but it was removed.  Its not a problem, only I mention to update the doc.  Bye Jorge  ---  **Affects:** 2.5.4  **Sub-tasks:** - #11387 Section 8.2.4.1 Static pointcuts still contains reference to Perl5RegexpMethodPointcut","closed","type: documentation,","spring-projects-issues","2008-07-04T18:26:33Z","2019-01-11T18:31:57Z"
"","9576","bean factory post processor documentation review [SPR-4900]","**[Jorge L. Middleton](https://jira.spring.io/secure/ViewProfile.jspa?name=jmiddleton)** opened **[SPR-4900](https://jira.spring.io/browse/SPR-4900?redirect=false)** and commented  In spring reference, it mention that BeanNameAutoProxyCreator is a bean factory post processor, but really it is a BeanPostProcessor. Check page 81 when the doc say:  A bean factory post-processor is executed manually ...   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: documentation,","spring-projects-issues","2008-06-08T16:51:05Z","2012-06-19T03:46:54Z"
"","9666","huge difference in hot deploy times on Weblogic for 2.5.5 vs 2.0.8 [SPR-4990]","**[Jorg Heymans](https://jira.spring.io/secure/ViewProfile.jspa?name=heymjo)** opened **[SPR-4990](https://jira.spring.io/browse/SPR-4990?redirect=false)** and commented  Hi,  I upgraded one of my 2.0.8 applications to Spring 2.5.5 just by replacing the old spring-2.0.8.jar with the new spring-2.5.5.jar and spring-webmvc-2.5.5.jar. As a result, the hot deploy times increased drastically. The application was otherwise unmodified , so we're definitely not using any specific 2.5.5 features (i.e. component-scanning)  Here are some timings from my local machine (win xp), the application is deployed as an unpacked WAR in Weblogic's autodeploy directory.  I hotdeployed the app 5 times in sequence, without making any request to the application in between.  Timings are taken from the ""Root WebApplicationContext: initialization completed in X ms"" message. The server was restarted and WLS jar caches were cleared in between runs.  2.0.8 (ms)         6562                  6000                  5969                  6844                  6894  2.5.5 (ms) 27203 28532 32141 34345 32562  There is an almost 500% increase in deploy time. Also, I noticed that the 2.5.5 deployment time seems to increase with the number of times deployed (it went as high as 38s).  http://forum.springframework.org/showthread.php?p=188252 seems to indicate something similar, but he's using component-scanning.  If there is anything I can do to troubleshoot this or provide more information let me know.  Thanks, Jorg Heymans   ---  **Affects:** 2.5.5  **Attachments:** - [output.log](https://jira.spring.io/secure/attachment/14347/output.log) (_291.91 kB_) - [outputGC.log](https://jira.spring.io/secure/attachment/14390/outputGC.log) (_110.27 kB_) - [outputGC2.log](https://jira.spring.io/secure/attachment/14391/outputGC2.log) (_462.37 kB_) - [weblogic9.2MP2-spring2.0.8.z01](https://jira.spring.io/secure/attachment/14342/weblogic9.2MP2-spring2.0.8.z01) (_9.00 MB_) - [weblogic9.2MP2-spring2.0.8.z02](https://jira.spring.io/secure/attachment/14343/weblogic9.2MP2-spring2.0.8.z02) (_9.00 MB_) - [weblogic9.2MP2-spring2.0.8.zip](https://jira.spring.io/secure/attachment/14341/weblogic9.2MP2-spring2.0.8.zip) (_77.47 kB_) - [weblogic9.2MP2-spring2.5.5.z01](https://jira.spring.io/secure/attachment/14345/weblogic9.2MP2-spring2.5.5.z01) (_9.00 MB_) - [weblogic9.2MP2-spring2.5.5.zip](https://jira.spring.io/secure/attachment/14344/weblogic9.2MP2-spring2.5.5.zip) (_8.93 MB_)  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-07-07T22:29:51Z","2019-01-13T21:51:59Z"
"","9641","AbstractCommandController does a check for isCommandInSession but doesn't check if the session exists [SPR-4966]","**[Joost Schuurman](https://jira.spring.io/secure/ViewProfile.jspa?name=schuj28)** opened **[SPR-4966](https://jira.spring.io/browse/SPR-4966?redirect=false)** and commented  When a portal has two pages with both one portlet implemented using the AbstractCommandController and you do first your work on te first page and after that you do your work on the second page it is possible that you lose your session of the portlet on the first page. After you do your work on the second page and you go back to the first page the handleRenderRequestInternal check if the command is in the session but that is based on a Render RequestParameter and that is cached by the Portal Server. But at that time it is possible that the session has gone. The handleRenderRequestInternal try to get the command from the session and throw a PortletSessionRequiredException because the session doesn't exist anymore. But when you take a look of the handleRenderRequestInternal  method it can handle a command == null it just create a new one. I think the check for the isCommandInSession had to change a little:  protected final boolean isCommandInSession(RenderRequest request) { return TRUE.equals(request.getParameter(getCommandInSessionParameterName())) &&  (request.getPortletSession(false) != null); }    ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-06-29T19:06:24Z","2012-06-19T03:46:58Z"
"","9840","Support for Tomcat's CometEvent enabled beans [SPR-5167]","**[Joonas Koivunen](https://jira.spring.io/secure/ViewProfile.jspa?name=koivunej)** opened **[SPR-5167](https://jira.spring.io/browse/SPR-5167?redirect=false)** and commented  As tomcat6 introduced support for even longer lived http connections for the purposes of implementing ""reverse Ajax"" (a design where clients open a connection to the server and then can use it to receive notifications, send user interactions etc.) I'd like to know if there are any plans for implementing ""comet"" kind of support in spring mvc?  As it is not part of any official specification I'm not sure if people are willing to support this very vendor specific extension at all, but then again, patterns requiring support for long lived http-connections might become more and more popular as everyone is buzzing of Ajax.  Apache Tomcat 6.0 when ran using APR support (native libraries) or Http11NioProtocol test if any of the defined servlets implement the interface CometProcessor [1] and if they do their event(CometEvent) will be used in favor of the normal servlet api's service(ServletRequest, ServletResponse). More information on the AIO features of tomcat 6 can be found at [2].  So what I thought to suggest is creating CometProcessor version of DispatcherServlet, perhaps even a subclass of it to be used as a baseclass for all ""vendor-specific"" apis there are (until a standard is produced). This would be necessary (instead of simply implementing CometProcessor in DispatcherServlet) as implementing the CometProcessor interface disables the normal Servlet methods.  Any ideas? Or has this already been implemented? :)  [1] http://tomcat.apache.org/tomcat-6.0-doc/api/org/apache/catalina/CometProcessor.html [2] http://tomcat.apache.org/tomcat-6.0-doc/aio.html  ---  **Issue Links:** - #10258 Support Servlet 3.0 (JSR-315)  5 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2008-09-17T22:34:04Z","2019-01-11T15:40:20Z"
"","9388","Cannot refresh bean factory which contains an RmiServiceExporter with alwaysCreateRegistry=true [SPR-4711]","**[Jonathan Gilbert](https://jira.spring.io/secure/ViewProfile.jspa?name=_jpg_)** opened **[SPR-4711](https://jira.spring.io/browse/SPR-4711?redirect=false)** and commented  RmiServiceExporter with alwaysCreateRegistry=true is forced to create a registry whenever it starts up. The problem is that this registry is not shut down when it is destroyed, meaning that a subsequent startup always fails.  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rmiexporter' defined in class path resource [importer.xml]: Invocation of init method failed; nested exception is java.rmi.server.ExportException: internal error: ObjID already in use Caused by: java.rmi.server.ExportException: internal error: ObjID already in use at sun.rmi.transport.ObjectTable.putTarget(ObjectTable.java:169) at sun.rmi.transport.Transport.exportObject(Transport.java:74) at sun.rmi.transport.tcp.TCPTransport.exportObject(TCPTransport.java:229) at sun.rmi.transport.tcp.TCPEndpoint.exportObject(TCPEndpoint.java:393) at sun.rmi.transport.LiveRef.exportObject(LiveRef.java:129) at sun.rmi.server.UnicastServerRef.exportObject(UnicastServerRef.java:190) at sun.rmi.registry.RegistryImpl.setup(RegistryImpl.java:92) at sun.rmi.registry.RegistryImpl.\(RegistryImpl.java:78) at java.rmi.registry.LocateRegistry.createRegistry(LocateRegistry.java:186) at org.springframework.remoting.rmi.RmiServiceExporter.getRegistry(RmiServiceExporter.java:383) at org.springframework.remoting.rmi.RmiServiceExporter.getRegistry(RmiServiceExporter.java:370) at org.springframework.remoting.rmi.RmiServiceExporter.getRegistry(RmiServiceExporter.java:331) at org.springframework.remoting.rmi.RmiServiceExporter.prepare(RmiServiceExporter.java:263) at org.springframework.remoting.rmi.RmiServiceExporter.afterPropertiesSet(RmiServiceExporter.java:227) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1198) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1167) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:427) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:249) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:155) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:246) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:291) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)  It is desirable to have this option (we are actually using it to prevent two instances being started), however the context should still be refreshable.  It may not be possible to fix this; I don't believe that there is a method of shutting down a registry, and switching the exporters' property to alwaysCreateRegistry=false once it has started one doesn't seem like the best idea.   ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2008-04-15T22:28:48Z","2008-10-22T01:30:41Z"
"","8939","A JSF VariableResolver that knows about the Portlet Application Context set up by the DispatcherPortlet [SPR-4261]","**[Jon Seymour](https://jira.spring.io/secure/ViewProfile.jspa?name=jonseymour)** opened **[SPR-4261](https://jira.spring.io/browse/SPR-4261?redirect=false)** and commented  Spring's JSF DelegatingVariableResolver looks up beans in the application context discovered by FacesContextUtils.  This is fine for requests handled by the Spring DispatcherServlet, but in the case of requests handled by the Spring DispatcherPortlet, there is a per-portlet Portlet application context which potentially contains beans that a programmer might expect to be able to access.  There would seem to be a case for a new subclass of DelegatingVariableResolver that understands how to discover and use the portlet application context associated with the currently executing DispatcherPortlet.    ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-15T08:20:44Z","2012-06-19T09:36:13Z"
"","9236","HibernateTemplate gets overwritten when using autowire on HibernateDaoSupport [SPR-4559]","**[John Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=johnzhang)** opened **[SPR-4559](https://jira.spring.io/browse/SPR-4559?redirect=false)** and commented  When using autowire, SessionFactory will be automatically injected into HibernateDaoSupport.  If user also specify a HibernateTemplate, it will be overwritten, which is not desired since user may have customized settings on HibernateTemplate.  In HibernateDaoSupport,      public final void setSessionFactory(SessionFactory sessionFactory) {       this.hibernateTemplate = createHibernateTemplate(sessionFactory);     }  Should it be something like this?      if ( this.hibernateTemplate == null ){         this.hibernateTemplate = createHibernateTemplate(sessionFactory);     }    ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-03-08T12:55:16Z","2012-06-19T03:47:24Z"
"","9095","NullPointerException in org.springframework.mail.MailSendException [SPR-4417]","**[John Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=johnzhang)** opened **[SPR-4417](https://jira.spring.io/browse/SPR-4417?redirect=false)** and commented      private Exception[] messageExceptions;    // this is initially null          public void printStackTrace(PrintWriter pw) {     	if (this.messageExceptions.length == 0) {   // NullPointerException happens here     		super.printStackTrace(pw);     	}     	else {     		pw.println(getClass().getName() + ""; nested exception details ("" +     				this.messageExceptions.length + "") are:"");     		for (int i = 0; i < this.messageExceptions.length; i++) {     			Exception subEx = this.messageExceptions[i];     			pw.println(""Failed message "" + (i + 1) + "":"");     			subEx.printStackTrace(pw);     		}     	}     }  ---  **Affects:** 2.5 final  **Issue Links:** - #8817 NullPointerException in MailSendException (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-02-03T12:38:50Z","2019-01-11T17:30:55Z"
"","9144","Virtual Machine and Platform JIRA fields out of date [SPR-4467]","**[John Sumsion](https://jira.spring.io/secure/ViewProfile.jspa?name=jsumsion)** opened **[SPR-4467](https://jira.spring.io/browse/SPR-4467?redirect=false)** and commented  The Virtual Machine field in JIRA doesn't say anything about Sun 1.6. The Platform field in JIRA doesn't say anything about Tomcat 6.0.   --- No further details from [SPR-4467](https://jira.spring.io/browse/SPR-4467?redirect=false)","closed","","spring-projects-issues","2008-02-15T07:55:36Z","2019-01-11T17:32:20Z"
"","8938","Recreate ""edit"" action for Pets in the 2.5 version of petportal [SPR-4260]","**[John Lewis](https://jira.spring.io/secure/ViewProfile.jspa?name=johnalewis)** opened **[SPR-4260](https://jira.spring.io/browse/SPR-4260?redirect=false)** and commented  Looks like in moving PetPortal from 2.0 to 2.5, the edit form that demonstrated the use of SimpleFormController was lost.  We need to add this back in so that users moving from the old sample to the new sample have a good pattern to follow.   ---  **Affects:** 2.5 final","closed","status: declined,","spring-projects-issues","2007-12-14T07:51:24Z","2012-06-19T09:36:27Z"
"","8937","Portlet 2.0 (JSR 286) support in Spring MVC [SPR-4259]","**[John Lewis](https://jira.spring.io/secure/ViewProfile.jspa?name=johnalewis)** opened **[SPR-4259](https://jira.spring.io/browse/SPR-4259?redirect=false)** and commented  I've updated the description of this issue to change it to a general place to work out Portlet 2.0 (JSR 286) support for Spring MVC.  I think a general approach to this larger issue will result in a resolution to the original point of this issue.  Original Description: Add support for Portlet WindowState to org.springframework.web.bind.annotation.RequestMapping   ---  **Affects:** 2.5 final  25 votes, 19 watchers","closed","has: votes-jira,","spring-projects-issues","2007-12-14T07:38:36Z","2012-06-19T03:47:03Z"
"","9397","DefaultMessageListenerContainer failover to work with Weblogic JMS and security credentials [SPR-4720]","**[John Baker](https://jira.spring.io/secure/ViewProfile.jspa?name=jmbaker)** opened **[SPR-4720](https://jira.spring.io/browse/SPR-4720?redirect=false)** and commented  Weblogic has a strange 'feature' where by an InitialContext created in one thread can not be used in another when security credentials have been provided. I personally think this design is a little silly, but BEA are unlikely to listen. The default message listener container does not recover a connection when it's failed, and the exception suggests it's due to this 'feature'. Here is the exception:  java.lang.SecurityException: [Security:090398]Invalid Subject: principals=[eventfetcher] at weblogic.rjvm.ResponseImpl.unmarshalReturn(ResponseImpl.java:195) at weblogic.rmi.cluster.ClusterableRemoteRef.invoke(ClusterableRemoteRef.java:338) at weblogic.rmi.cluster.ClusterableRemoteRef.invoke(ClusterableRemoteRef.java:252) at weblogic.jndi.internal.ServerNamingNode_921_WLStub.lookup(Unknown Source) at weblogic.jndi.internal.WLContextImpl.lookup(WLContextImpl.java:374) at weblogic.jndi.internal.WLContextImpl.lookup(WLContextImpl.java:362) at weblogic.rmi.cluster.BasicReplicaHandler.refreshReplicaList(BasicReplicaHandler.java:506) at weblogic.rmi.cluster.BasicReplicaHandler.failOver(BasicReplicaHandler.java:206) at weblogic.rmi.cluster.ClusterableRemoteRef.invoke(ClusterableRemoteRef.java:257) at weblogic.jms.frontend.FEConnectionFactoryImpl_922_WLStub.connectionCreateRequest(Unknown Source) at weblogic.jms.client.JMSConnectionFactory.setupJMSConnection(JMSConnectionFactory.java:238) at weblogic.jms.client.JMSConnectionFactory.createConnectionInternal(JMSConnectionFactory.java:299) at weblogic.jms.client.JMSConnectionFactory.createConnection(JMSConnectionFactory.java:205) at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:184) at org.springframework.jms.listener.AbstractJmsListeningContainer.createSharedConnection(AbstractJmsListeningContaine r.java:401) at com.db.websso.jms.WeblogicMessageListenerContainer.createSharedConnection(WeblogicMessageListenerContainer.java:41 ) at org.springframework.jms.listener.AbstractJmsListeningContainer.refreshSharedConnection(AbstractJmsListeningContain er.java:386) at org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageLi stenerContainer.java:782) at org.springframework.jms.listener.DefaultMessageListenerContainer.recoverAfterListenerSetupFailure(DefaultMessageLi stenerContainer.java:764) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageLis tenerContainer.java:892)  I had implemented a hack to partly solve the problem by extending the listener, but it's not completely effective. The result is that some threads seem to recover, while others continue to fail (and I can not currently explain why, given my hack re-creates the JNDI in the current thread!). Here's the hack:  protected Connection createSharedConnection() throws JMSException { // Associate JNDI variables (user and password) with this thread for the benefit // of the WL drivers. try { InitialContext ic = new InitialContext(jndiTemplate.getEnvironment()); } catch (NamingException e) { logger.warn(e.getMessage()); }       return super.createSharedConnection(); }  It's not very nice and it would be better to find a long term decent solution to this problem. Until a solution is in place, this object (and other JMS functionality, such as multiple threads and the JmsTemplate) will fail to work correctly with Weblogic.  I'm happy to test possible solutions if someone with indepth experience of the Spring JMS code can put forward suggestions.  Thanks,  John  ---  **Affects:** 2.5.3  **Attachments:** - [spring-jms-weblogic-restart.zip](https://jira.spring.io/secure/attachment/16133/spring-jms-weblogic-restart.zip) (_13.97 kB_)  **Sub-tasks:** - #10538 exposeAccessContext doesn't resolve the issues with secure JMS and WebLogic.  **Issue Links:** - #7627 Support secure JMS queue access on WebLogic - #6206 Perform SLSB invocation inside a jndi context  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-17T19:55:28Z","2019-11-28T02:17:06Z"
"","9637","FreeMarkerView should support AllHttpScopesHashModel (analogous to FreeMarkerServlet in FreeMarker 2.3.14) [SPR-4962]","**[John Arkley](https://jira.spring.io/secure/ViewProfile.jspa?name=exappl088)** opened **[SPR-4962](https://jira.spring.io/browse/SPR-4962?redirect=false)** and commented  During development of my 1st web-app i found this because i began using appfuse-light-spring-freemarker-ibatis-1.8.1 as my prototype application.  appfuseLt uses Sitemesh  (opensymphony.org) to decorate Freemarker generated pages, by implementing a Servlet filter that diverts the FreemarkerView generated response into a buffer, parses that buffer and then inserts the generated view content as strings variables (${head} ${title}, ${body} ,,,) into the root data model and then invokes aSitemesh sub-class of FreemarkerServlet to generate the decorated page into the HttpResponse,  i.e. It a 1 level ""Tiles like"" compositiing implementation that allows a decorator.flt file to insert the $(body) of a view into a multi-column page layout.  The FreeMarkerServlet wraps the data-model as the AllHttpScopesHashModel, with its not found fall-through lookup in 4 scopes, (like jsp ?), page, Request, Session, and Application (servlet context), which the FreeMarkerView does not.  Although FreeMarkerView does insert the same set of scopes, because it is not using the AllHttpScopesHashModel to wrap them, code that works in the decorator.flt file that references a variable with ${message}, must be coded as ${Request.message} or ${Session.message} to be referenced in a Freemarker template processed by springs FreeMarkerView.  I tripped over this when i moved a small fragment  Freemarker markup from a decorator template to a view template.  I ""enhanced""   FreeMarkerView.java by cloning a method (createModel)  from FreeMarkerServlet.java and added an inner class clone of Freemarkers AllHttpScopesHashModel.java (see src below)  This latter choice was to make hacking up spring-webmvc.jar as fast a possible, and due to the constructor for AllHttpScopesHashModel not being declared public; which i suspect was just a oversight by the Freemarker coder(s), because all the other xxxxHashModel classes have public constructors.  This change also made it necessary to change the signature of FreeMarkerView's method as show here with the Map replaced with TemplateModel, so applying this patch with break anyone who has overridden FreeMarkerView.processTemplate(); protected void processTemplate(Template template, TemplateModel model, HttpServletResponse response)  I think Freemarker should make the constructor public so you could implement this fix without using an inner class, which i suspect has implications i don't grasp, as i am not a java expert.  I have only tested my  3 views plus 2 form views on this hack, but variable lookup works the same in FreemarkerView as in the FreemarkerServlet.  I have not got the springframework tests running yet, so i built my -webmvc.jar wtih ant by hand after recompling just the one file, FreeMarkerView.java, overwriting the un-jar'ed spring-webmvc.jar class files.  Anyone just using FreeMarkerViews for view rendering, but not using the FreeMarkerServlet (due to Sitemesh in my case) will not see this issue.  my hacked version of FreeMarkerView.java  ---  /* * Copyright 2002-2007 the original author or authors.  *   * Licensed under the Apache License, Version 2.0 (the ""License"");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *         http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an ""AS IS"" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.   */  package org.springframework.web.servlet.view.freemarker;  import java.io.IOException; import java.util.Collections; import java.util.Enumeration; import java.util.Locale; import java.util.Map; import java.util.HashMap;  import javax.servlet.GenericServlet; import javax.servlet.ServletConfig; import javax.servlet.ServletContext; import javax.servlet.ServletException; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession;  import freemarker.core.ParseException; import freemarker.ext.jsp.TaglibFactory; import freemarker.ext.servlet.FreemarkerServlet; import freemarker.ext.servlet.HttpRequestHashModel; import freemarker.ext.servlet.HttpRequestParametersHashModel; import freemarker.ext.servlet.HttpSessionHashModel; import freemarker.ext.servlet.ServletContextHashModel; import freemarker.template.Configuration; import freemarker.template.ObjectWrapper; import freemarker.template.Template; import freemarker.template.TemplateModel; import freemarker.template.TemplateModelException; import freemarker.template.TemplateException; import freemarker.template.SimpleHash;  import org.springframework.beans.BeansException; import org.springframework.beans.factory.BeanFactoryUtils; import org.springframework.beans.factory.BeanInitializationException; import org.springframework.beans.factory.NoSuchBeanDefinitionException; import org.springframework.context.ApplicationContextException; import org.springframework.web.servlet.support.RequestContextUtils; import org.springframework.web.servlet.view.AbstractTemplateView;  /** * View using the FreeMarker template engine.  *   *   \Exposes the following JavaBean properties: *  \ *  \\url\: the location of the FreeMarker template to be wrapped, * relative to the FreeMarker template context (directory).  *   \\encoding\ (optional, default is determined by FreeMarker configuration): * the encoding of the FreeMarker template file  *   \ *  *   \Depends on a single {`@link` FreeMarkerConfig} object such as {`@link` FreeMarkerConfigurer} * being accessible in the current web application context, with any bean name.  * Alternatively, you can set the FreeMarker {`@link` Configuration} object as bean property.  * See {`@link` #setConfiguration} for more details on the impacts of this approach.  *   *   \Note: Spring's FreeMarker support requires FreeMarker 2.3 or higher. *  * `@author` Darren Davison  * `@author` Juergen Hoeller  * `@since` 03.03.2004  * `@see` #setUrl  * `@see` #setExposeSpringMacroHelpers  * `@see` #setEncoding  * `@see` #setConfiguration  * `@see` FreeMarkerConfig  * `@see` FreeMarkerConfigurer   */   public class FreeMarkerView extends AbstractTemplateView {    private String encoding;    private Configuration configuration;    private TaglibFactory taglibFactory;    private ServletContextHashModel servletContextHashModel;    /** ________________________________________________________________________________________    * Set the encoding of the FreeMarker template file. Default is determined   * by the FreeMarker Configuration: ""ISO-8859-1"" if not specified otherwise.   *     \Specify the encoding in the FreeMarker Configuration rather than per    * template if all your templates share a common encoding.     */     public void setEncoding(String encoding) {     this.encoding = encoding;     }    /** ________________________________________________________________________________________    * Return the encoding for the FreeMarker template.     */     protected String getEncoding() {     return this.encoding;     }    /** ________________________________________________________________________________________    * Set the FreeMarker Configuration to be used by this view.   * If this is not set, the default lookup will occur: a single {`@link` FreeMarkerConfig}   * is expected in the current web application context, with any bean name.   * \Note:\ using this method will cause a new instance of {`@link` TaglibFactory}   * to created for every single {`@link` FreeMarkerView} instance. This can be quite expensive   * in terms of memory and initial CPU usage. In production it is recommended that you use   * a {`@link` FreeMarkerConfig} which exposes a single shared {`@link` TaglibFactory}.     */     public void setConfiguration(Configuration configuration) {     this.configuration = configuration;     }    /** ________________________________________________________________________________________    * Return the FreeMarker configuration used by this view.     */     protected Configuration getConfiguration() {     return this.configuration;     }    /** ________________________________________________________________________________________    * Invoked on startup. Looks for a single FreeMarkerConfig bean to    * find the relevant Configuration for this factory.    *     \Checks that the template for the default Locale can be found:    * FreeMarker will check non-Locale-specific templates if a    * locale-specific one is not found.    * `@see` freemarker.cache.TemplateCache#getTemplate     */     protected void initApplicationContext() throws BeansException {     super.initApplicationContext();      if (getConfiguration() != null) {     this.taglibFactory = new TaglibFactory(getServletContext());     }     else {     FreeMarkerConfig config = autodetectConfiguration();     setConfiguration(config.getConfiguration());     this.taglibFactory = config.getTaglibFactory();     }      GenericServlet servlet = new GenericServletAdapter();     try {     servlet.init(new DelegatingServletConfig());     }     catch (ServletException ex) {     throw new BeanInitializationException(""Initialization of GenericServlet adapter failed"", ex);     }     this.servletContextHashModel = new ServletContextHashModel(servlet, getObjectWrapper());      checkTemplate();     }    /** ________________________________________________________________________________________    * Autodetect a {`@link` FreeMarkerConfig} object via the ApplicationContext.   * `@return` the Configuration instance to use for FreeMarkerViews   * `@throws` BeansException if no Configuration instance could be found   * `@see` #getApplicationContext   * `@see` #setConfiguration     */     protected FreeMarkerConfig autodetectConfiguration() throws BeansException {     try {     return (FreeMarkerConfig) BeanFactoryUtils.beanOfTypeIncludingAncestors(     getApplicationContext(), FreeMarkerConfig.class, true, false);     }     catch (NoSuchBeanDefinitionException ex) {     throw new ApplicationContextException(     ""Must define a single FreeMarkerConfig bean in this web application context "" +     ""(may be inherited): FreeMarkerConfigurer is the usual implementation. "" +     ""This bean may be given any name."", ex);     }     }    /** ________________________________________________________________________________________    * Return the configured FreeMarker {`@link` ObjectWrapper}, or the   * {`@link` ObjectWrapper#DEFAULT_WRAPPER default wrapper} if none specified.   * `@see` freemarker.template.Configuration#getObjectWrapper()     */     protected ObjectWrapper getObjectWrapper() {     ObjectWrapper ow = getConfiguration().getObjectWrapper();     return (ow != null ? ow : ObjectWrapper.DEFAULT_WRAPPER);     }    /** ________________________________________________________________________________________    * Check that the FreeMarker template used for this view exists and is valid.   *     \Can be overridden to customize the behavior, for example in case of    * multiple templates to be rendered into a single view.   * `@throws` ApplicationContextException if the template cannot be found or is invalid     */     protected void checkTemplate() throws ApplicationContextException {     try {     // Check that we can get the template, even if we might subsequently get it again.     getTemplate(getConfiguration().getLocale());     }     catch (ParseException ex) {     throw new ApplicationContextException(     ""Failed to parse FreeMarker template for URL ["" +  getUrl() + ""]"", ex);     }     catch (IOException ex) {     throw new ApplicationContextException(     ""Could not load FreeMarker template for URL ["" + getUrl() + ""]"", ex);     }     }    /** ________________________________________________________________________________________    * Process the model map by merging it with the FreeMarker template.   * Output is directed to the servlet response.   *     \This method can be overridden if custom behavior is needed.    */   protected void renderMergedTemplateModel(   Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {        exposeHelpers(model, request);       doRender(model, request, response);    }    /** ________________________________________________________________________________________    * Expose helpers unique to each rendering operation. This is necessary so that   * different rendering operations can't overwrite each other's formats etc.   *     \Called by \renderMergedTemplateModel\. The default implementation    * is empty. This method can be overridden to add custom helpers to the model.   * `@param` model The model that will be passed to the template at merge time   * `@param` request current HTTP request   * `@throws` Exception if there's a fatal error while we're adding information to the context   * `@see` #renderMergedTemplateModel     */     protected void exposeHelpers(Map model, HttpServletRequest request) throws Exception {     }  private  TemplateModel createModel(ObjectWrapper wrapper, Map dataModel, HttpServletRequest request, HttpServletResponse response) throws TemplateModelException { try {   MultiHttpScopesHashModel allModel = new MultiHttpScopesHashModel(wrapper, getServletContext(), request); allModel.putAll(dataModel);	// copy the Spring dataModel Map into the super SimpleHashModel // dataModel becomes LIKE ""jsp page"" scope i.e. no prefix. (searched 1st)      		allModel.putUnlistedModel(FreemarkerServlet.KEY_JSP_TAGLIBS, this.taglibFactory);     		allModel.putUnlistedModel(FreemarkerServlet.KEY_APPLICATION, this.servletContextHashModel);     		// servletModel becomes Application. scope (searched last)          		allModel.putUnlistedModel(FreemarkerServlet.KEY_SESSION, buildSessionModel(request, response));     		// SessionModel becomes Session. scope (searched 3rd)          		allModel.putUnlistedModel(FreemarkerServlet.KEY_REQUEST,      																	new HttpRequestHashModel(request, response, getObjectWrapper()));     		// RequestModel becomes Request. scope (searched 2nd)          		allModel.putUnlistedModel(FreemarkerServlet.KEY_REQUEST_PARAMETERS,      																		new HttpRequestParametersHashModel(request));     		// RequestParameters. scope you have to reference with RequestParameters. prefix (not searched)     		     		return (TemplateModel) allModel;     		     	} catch (Exception e) {     			throw new TemplateModelException(e);     	}     }               /** ________________________________________________________________________________________      * Render the FreeMarker view to the given response, using the given model      * map which contains the complete template model to use.      * The default implementation renders the template specified by the ""url""      * bean property, retrieved via getTemplate. It delegates to the      * processTemplate method to merge the template instance with      * the given template model.      * Adds the standard Freemarker hash models to the model: request parameters,      * request, session and application (ServletContext), as well as the JSP tag      * library hash model.      * Can be overridden to customize the behavior, for example to render      * multiple templates into a single view.      * @param model the template model to use for rendering      * @param request current HTTP request      * @param response current servlet response      * @throws IOException if the template file could not be retrieved      * @throws Exception if rendering failed      * @see #setUrl      * @see org.springframework.web.servlet.support.RequestContextUtils#getLocale      * @see #getTemplate(java.util.Locale)      * @see #processTemplate      * @see freemarker.ext.servlet.FreemarkerServlet      */     protected void doRender(Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {     	// Expose model to JSP tags (as request attributes).     	exposeModelAsRequestAttributes(model, request);          	// Expose all standard FreeMarker hash models.     	TemplateModel allScopesModel = createModel(getObjectWrapper(), model, request, response);     	     	if (logger.isDebugEnabled()) {     		logger.debug(""Rendering FreeMarker template ["" + getUrl() + ""] in FreeMarkerView '"" + getBeanName() + ""'"");     	}     	// Grab the locale-specific version of the template.     	Locale locale = RequestContextUtils.getLocale(request);     	processTemplate(getTemplate(locale), allScopesModel, response);     }          /** ________________________________________________________________________________________      * Build a FreeMarker {@link HttpSessionHashModel} for the given request,      * detecting whether a session already exists and reacting accordingly.      * @param request current HTTP request      * @param response current servlet response      * @return the FreeMarker HttpSessionHashModel      */     private HttpSessionHashModel buildSessionModel(HttpServletRequest request, HttpServletResponse response) {     	HttpSession session = request.getSession(false);     	if (session != null) {     		return new HttpSessionHashModel(session, getObjectWrapper());     	}     	else {     		return new HttpSessionHashModel(null, request, response, getObjectWrapper());     	}     }          /** ________________________________________________________________________________________      * Retrieve the FreeMarker template for the given locale,      * to be rendering by this view.      * By default, the template specified by the ""url"" bean property      * will be retrieved.      * @param locale the current locale      * @return the FreeMarker template to render      * @throws IOException if the template file could not be retrieved      * @see #setUrl      * @see #getTemplate(String, java.util.Locale)      */     protected Template getTemplate(Locale locale) throws IOException {     	return getTemplate(getUrl(), locale);     }          /** ________________________________________________________________________________________      * Retrieve the FreeMarker template specified by the given name,      * using the encoding specified by the ""encoding"" bean property.      * Can be called by subclasses to retrieve a specific template,      * for example to render multiple templates into a single view.      * @param name the file name of the desired template      * @param locale the current locale      * @return the FreeMarker template      * @throws IOException if the template file could not be retrieved      */     protected Template getTemplate(String name, Locale locale) throws IOException {     	return (getEncoding() != null ?     			getConfiguration().getTemplate(name, locale, getEncoding()) :     			getConfiguration().getTemplate(name, locale));     }          /** ________________________________________________________________________________________      * Process the FreeMarker template to the servlet response.      * Can be overridden to customize the behavior.      * @param template the template to process      * @param model the model for the template      * @param response servlet response (use this to get the OutputStream or Writer)      * @throws IOException if the template file could not be retrieved      * @throws TemplateException if thrown by FreeMarker      * @see freemarker.template.Template#process(Object, java.io.Writer)      */     protected void processTemplate(Template template, TemplateModel model, HttpServletResponse response)     		throws IOException, TemplateException {          	template.process(model, response.getWriter());     }               /** ________________________________________________________________________________________      * Simple adapter class that extends {@link GenericServlet}.      * Needed for JSP access in FreeMarker.      */     private static class GenericServletAdapter extends GenericServlet {          	public void service(ServletRequest servletRequest, ServletResponse servletResponse) {     		// no-op     	}     }               /** ________________________________________________________________________________________      * Internal implementation of the {@link ServletConfig} interface,      * to be passed to the servlet adapter.      */     private class DelegatingServletConfig implements ServletConfig {          	public String getServletName() {     		return FreeMarkerView.this.getBeanName();     	}          	public ServletContext getServletContext() {     		return FreeMarkerView.this.getServletContext();     	}          	public String getInitParameter(String paramName) {     		return null;     	}          	public Enumeration getInitParameterNames() {     		return Collections.enumeration(Collections.EMPTY_SET);     	}     }  public class MultiHttpScopesHashModel extends SimpleHash { private final ObjectWrapper wrapper; private final ServletContext context; private final HttpServletRequest request; private final Map unlistedModels = new HashMap();  private   MultiHttpScopesHashModel(ObjectWrapper wrapper, ServletContext context, HttpServletRequest request) { this.wrapper = wrapper; this.context = context; this.request = request; }      /**      * Stores a model in the hash so that it doesn't show up in keys()      * and values() methods. Used to put the Application, Session,      * Request, RequestParameters and JspTaglibs objects.      * @param key the key under which the model is stored      * @param model the stored model      */     public void putUnlistedModel(String key, TemplateModel model)     {         unlistedModels.put(key, model);     }          public TemplateModel get(String key) throws TemplateModelException {         // Lookup in page scope         TemplateModel model = super.get(key);         if(model != null) {             return model;         }              // Look in unlisted models         model = (TemplateModel)unlistedModels.get(key);         if(model != null) {             return model;         }                  // Lookup in request scope         Object obj = request.getAttribute(key);         if(obj != null) {             return wrapper.wrap(obj);         }              // Lookup in session scope         HttpSession session = request.getSession(false);         if(session != null) {             obj = session.getAttribute(key);             if(obj != null) {                 return wrapper.wrap(obj);             }         }              // Lookup in application scope         obj = context.getAttribute(key);         if(obj != null) {             return wrapper.wrap(obj);         }              // return wrapper's null object (probably null).                 return wrapper.wrap(null);     }  }  }  ---  **Affects:** 2.5.3  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4cf573ba9870553e9086defc7bd1b6f2d43ac61e","closed","type: enhancement,","spring-projects-issues","2008-06-26T21:48:03Z","2019-01-13T08:03:32Z"
"","9697","error in documentation, chapter 3.8.2 (baseName attribute) [SPR-5022]","**[Johannes Ruthenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=ammaletu)** opened **[SPR-5022](https://jira.spring.io/browse/SPR-5022?redirect=false)** and commented  I could be wrong, but I think there is an error in the Spring framework documentation, in chapter 3.8.2. ""Internationalization using MessageSources"": http://static.springframework.org/spring/docs/2.5.x/reference/beans.html#context-functionality-messagesource  One of the examples includes this:  \ \ \ I tried it and got an error message. The attribute is apparently called ""basenames"". Also, I think using a location directly under WEB-INF would not work with org.springframework.context.support.ResourceBundleMessageSource (at least usually, the classes javadoc says the location must be on the classpath) in contrast to org.springframework.context.support.ReloadableResourceBundleMessageSource. If that's correct, the example in the documentation should be corrected.   ---  **Affects:** 2.0.8, 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/de04d9c654c4c44649cc238019d461a60d75fad9, https://github.com/spring-projects/spring-framework/commit/71443efd900c06a74e904ee45a3396e36983de4f  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: documentation,","spring-projects-issues","2008-07-21T04:38:26Z","2012-06-19T03:46:36Z"
"","9663","Add support for pluggable proxy object factories [SPR-4987]","**[Johan](https://jira.spring.io/secure/ViewProfile.jspa?name=johan)** opened **[SPR-4987](https://jira.spring.io/browse/SPR-4987?redirect=false)** and commented  The Spring Framework is currently limited to work with JDK proxies or CGLIB proxies.  Please refactor the currently hard coded references to cglib into a pluggable layer allowing to provide custom proxy object factories, e.g. based on Javaassist or other bytecode libraries.  I can see about 5 classes directly referencing cglib in Spring Core, so the required effort should not be too high.   ---  **Affects:** 2.5.5  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-07-05T22:28:14Z","2012-06-19T09:36:16Z"
"","9485","Problem with SimpleJdbcTemplate#update with null values in Derby [SPR-4809]","**[Joern Huxhorn](https://jira.spring.io/secure/ViewProfile.jspa?name=jhuxhorn)** opened **[SPR-4809](https://jira.spring.io/browse/SPR-4809?redirect=false)** and commented  This problem is most likely similar to http://jira.springframework.org/browse/SPR-4465  The table in the DB looks like this: CREATE TABLE PERSONS ( id BIGINT PRIMARY KEY, BIRTHDAY BIGINT NOT NULL,      FIRST_NAME VARCHAR(255) NOT NULL,     MIDDLE_NAME VARCHAR(255),     LAST_NAME VARCHAR(255) NOT NULL,     NICK_NAME VARCHAR(255)  )  Executing simpleJdbcTemplate with null for MIDDLE_NAME or NICK_NAME results in an exception.  String sql = ""insert into PERSONS (ID, BIRTHDAY, FIRST_NAME, MIDDLE_NAME, LAST_NAME, NICK_NAME) values (?, ?, ?, ?, ?, ?)""; simpleJdbcTemplate.update(sql, newId, person.getBirthDay().getTime(), name.getFirstName(), name.getMiddleName(), name.getLastName(), name.getNickName() );  org.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; SQL [insert into PERSONS (ID, BIRTHDAY, FIRST_NAME, MIDDLE_NAME, LAST_NAME, NICK_NAME) values (?, ?, ?, ?, ?, ?)]; An attempt was made to get a data value of type 'VARCHAR' from a data value of type 'null'.; nested exception is java.sql.SQLDataException: An attempt was made to get a data value of type 'VARCHAR' from a data value of type 'null'. at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.translate(SQLExceptionSubclassTranslator.java:63) at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:237) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:607) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:792) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:850) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:858) at org.springframework.jdbc.core.simple.SimpleJdbcTemplate.update(SimpleJdbcTemplate.java:237)  ---  **Affects:** 2.5.4  **Issue Links:** - #5936 DB error when setting SqlTypeValue.TYPE_UNKNOWN to null - #9142 Problem with SimpleJdbcTemplate#update with null values in DB2","closed","type: bug,","spring-projects-issues","2008-05-13T20:53:21Z","2019-01-11T19:02:27Z"
"","9752","Exception handling in ScheduledExecutorFactoryBean's scheduledExecutorTasks's [SPR-5078]","**[Joern Barthel](https://jira.spring.io/secure/ViewProfile.jspa?name=jbar)** opened **[SPR-5078](https://jira.spring.io/browse/SPR-5078?redirect=false)** and commented  In the default configuration exceptions occuring in scheduledExecutorTasks's are swallowed. The most simply way to prevent the exceptions from not getting logged is to set the continueScheduledExecutionAfterException property to true.  As this property also leads to the re-execution of failed tasks the logging behaviour should get factored into another property. Alternatively a specific exception handler should be provided. A default implementation for a logging exception handler could also be part of the package.  At the very least I'd recommend hinting to the exception swallowing behaviour in the javadoc of the ScheduledExecutorFactoryBean itself instead of only the continueScheduledExecutionAfterException setter.  ---  **Affects:** 2.5.5  **Issue Links:** - #8053 Add support for ""exception-proof"" tasks in ScheduledExecutorFactoryBean","closed","type: enhancement,","spring-projects-issues","2008-08-11T07:59:04Z","2019-01-11T14:38:02Z"
"","9706","CachingConnectionFactory does not rollback on Session.close() [SPR-5031]","**[Joel Caplin](https://jira.spring.io/secure/ViewProfile.jspa?name=joelcaplin)** opened **[SPR-5031](https://jira.spring.io/browse/SPR-5031?redirect=false)** and commented  The JMS spec states that: ""Closing a transacted session must roll back the transaction in progress"": http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#close().  The CachingConnectionFactory does not appear to adhere to this rule. When a locally-transaction Session object is created using the cached Connection, calls to close() do not result in rollback() being called. Test case attached.  At runtime this can cause unexpected behavior. For example: I use a cached session and close it out, expecting an implicit rollback; a few seconds later, unbeknowst to me, I'm using the same cached session again, except I commit this time. The first implied rollback never happens so everything that took part in the first 'session' is actually commited.  ---  **Affects:** 2.5.5  **Attachments:** - [CachingConnectionFactoryTest.java](https://jira.spring.io/secure/attachment/14429/CachingConnectionFactoryTest.java) (_2.21 kB_) - [CachingConnectionFactoryTests.java](https://jira.spring.io/secure/attachment/14448/CachingConnectionFactoryTests.java) (_4.69 kB_)  **Issue Links:** - #16762 CachingConnectionFactory should catch exceptions on logical close","closed","type: bug,","spring-projects-issues","2008-07-23T06:31:31Z","2019-01-11T14:33:54Z"
"","9082","Map SQL Error code 2601 in Microsoft SQL Server to DataIntegrityViolationException [SPR-4404]","**[Joe Shomphe](https://jira.spring.io/secure/ViewProfile.jspa?name=jshomphe)** opened **[SPR-4404](https://jira.spring.io/browse/SPR-4404?redirect=false)** and commented  Currently, sql-error-codes.xml has a mapping for sql error code 2601 for sybase, but not for sqlserver.  In sqlserver 2005, 2601 will be raised due to DataIntegrityViolations.  See  http://msdn2.microsoft.com/en-us/library/aa258747(sql.80).aspx  http://forum.springframework.net/showthread.php?p=10752   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-01-28T07:03:12Z","2012-06-19T03:46:43Z"
"","9715","ServletContextResource does not handle paths with ""..""  [SPR-5040]","**[Joe Kutner](https://jira.spring.io/secure/ViewProfile.jspa?name=jpkutner)** opened **[SPR-5040](https://jira.spring.io/browse/SPR-5040?redirect=false)** and commented  If org.springframework.web.context.support.ServletContextResource is constructed with a path that contains "".."" at the front, then it will never successfully invoke ServletContext.getResource() or ServletContext.getResourceAsStream() -- as used in ServletContextResource.getInputStream().  This is happening because the StringUtils.cleanPath() method is removing the leading ""/"" that is required by ServletContext.getResourceAsStream()  Here is a patch:  Index: ServletContextResource.java  ---  --- ServletContextResource.java	(revision 3829) +++ ServletContextResource.java	(working copy) @@ -70,10 +70,10 @@      // check path     Assert.notNull(path, ""Path is required"");  +         this.path = StringUtils.cleanPath(path);       if (!path.startsWith(""/"")) {            path = ""/"" + path;       }  -         this.path = StringUtils.cleanPath(path);    }    /**  ---  **Affects:** 2.0.8, 2.5.5  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/14455/patch.txt) (_442 bytes_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-07-25T06:33:13Z","2019-01-13T21:51:52Z"
"","9800","DMLC with cacheLevel=CACHE_CONNECTION and a non-JMS transaction manager causes the shared connection to be closed after the first transaction [SPR-5127]","**[Joe Kearney](https://jira.spring.io/secure/ViewProfile.jspa?name=joekearney)** opened **[SPR-5127](https://jira.spring.io/browse/SPR-5127?redirect=false)** and commented  When the DMLC  is used  with a non-JMS transaction manager (for example  DataSourceTransactionManager) then DMLC#doReceiveAndExecute() delegates to ConnectionFactoryUtils which binds the shared connection to the transaction and registers a synchronization to close it upon transaction completion. When the first transaction completes this synchronization runs and the shared connection is closed (there is no proxy or smart connection pattern used as in JDBC). Subsequent use of the now closed connection fail with IllegalStateException (as per JMS spec).  The bug appears to be in the ResourceFactory passed from DMLC to CFUtils. This implements createConnection() by returning a reference to the shared connection, however CFUtils is expecting a fresh connection that is can close (or at least one that suppresses close).  Using higher levels of caching avoids this issue since the DMLC never calls into CFUtils, it just uses the pre-established shared session.  We also notice that using a JmsTransactionManager causes the shared connection to be ignored, since a new connection is created and bound for each transaction.   ---  **Affects:** 2.5.4","closed","type: bug,","spring-projects-issues","2008-08-29T03:54:36Z","2012-06-19T03:46:54Z"
"","8960","DispatcherServlet logs original request URI when handling an include request. [SPR-4282]","**[Jing Xue](https://jira.spring.io/secure/ViewProfile.jspa?name=manifoldronin)** opened **[SPR-4282](https://jira.spring.io/browse/SPR-4282?redirect=false)** and commented  I'm trying to use sitemesh with the templates served from a dedicated DispatcherServlet.  Apparently sitemesh does a standard dispatcher.include() to get the template. The DispatcherServlet tries to handle the original request URI, i.e. the request for the whole page, instead of the URI to the template. I wonder if it makes sense for DispatcherServlet to look at ""javax.servlet.include.request_uri"" for the request URI.  (It's actually using it to tell if it's handling an include request, but not really honoring it for anything other than saving attribute snapshots).   ---  **Affects:** 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: bug,","spring-projects-issues","2007-12-26T12:05:18Z","2012-06-19T03:47:25Z"
"","9191","Confusing error message when defining custom scopes [SPR-4514]","**[Jim Moore](https://jira.spring.io/secure/ViewProfile.jspa?name=jdigger)** opened **[SPR-4514](https://jira.spring.io/browse/SPR-4514?redirect=false)** and commented  If you do something like this (taken from http://jroller.com/eu/entry/implementing_efficinet_id_generator):  \ \ \ \ \ \ \  Then the error message says:  java.lang.IllegalArgumentException: Mapped value [org.javatx.spring.ThreadScope] for scope key [thread] is not of required type [org.springframework.beans.factory.config.Scope]  But the class ""ThreadScope"" does implement Scope.  The problem is that CustomScopeConfigurer wants an instance, not a string.  In CustomScopeConfigurer.postProcessBeanFactory it would be nice to have something along the lines of  if (value instanceof String) { throw new IllegalArgumentException(""Mapped value ["" + value + ""] for scope key ["" + 		key + ""] is a String, not an instance of required type ["" + Scope.class.getName() + ""]""); }  to make it much clearer what the actual problem is.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-27T23:53:00Z","2012-06-19T03:46:58Z"
"","9240","Allow IllegalArgumentException When resolving classes in the CustomEditorConfigurer [SPR-4563]","**[Jim Kriz](https://jira.spring.io/secure/ViewProfile.jspa?name=jfkriz)** opened **[SPR-4563](https://jira.spring.io/browse/SPR-4563?redirect=false)** and commented  Requesting an enhancement to allow ClassNotFound and other related exceptions in the CustomEditorConfigurer.postProcessBeanFactory method.  We have a situation where we have set our context to lazily init all beans by default.  Since the CustomEditorConfigurer is a BeanFactoryPostProcessor, it is instantiated and the postProcessBeanFactory method is invoked despite being lazily initialized.  This would typically not be an issue, except that some of the classes we are registering PropertyEditor's for are not actually included in our classpath.  This is by design - we want to have one single context configuration (consisting of many related context files) being consumed by many different clients.  By setting the beans to lazily init, the client can choose which dependent jars it needs, based on what functionality it requires.  In this particular case, one client does not need any of the functionality related to classes which are set up in the CustomEditorConfigurer, but it is forced to include them in order to successfully load the context.   ---  **Affects:** 2.5.2  **Attachments:** - [spring-2.5.2-custompropertyeditor.patch](https://jira.spring.io/secure/attachment/13757/spring-2.5.2-custompropertyeditor.patch) (_4.52 kB_) - [spring-2.5.2-custompropertyeditor.patch](https://jira.spring.io/secure/attachment/13756/spring-2.5.2-custompropertyeditor.patch) (_3.56 kB_)","closed","type: enhancement,","spring-projects-issues","2008-03-10T05:18:23Z","2012-06-19T03:46:55Z"
"","9412","@Required should be allowed on instance variable as well as mutator method [SPR-4735]","**[jieryn](https://jira.spring.io/secure/ViewProfile.jspa?name=jieryn)** opened **[SPR-4735](https://jira.spring.io/browse/SPR-4735?redirect=false)** and commented  It is largely a matter of style or taste where annotations should be placed, but in keeping with much of the larger Java world I think we should allow the use of the `@Required` annotation to be placed on the instance variable as well as the method. In my shop we place all of our optional variable vs method `@Annotations` on the variable and not the method. We find this to be a much cleaner view when doing code analysis and review.  Thanks for your consideration, Spring is great! :) -jesse   ---  **Affects:** 2.5.3  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-21T12:40:23Z","2012-06-19T09:36:21Z"
"","9355","Recommend new Methods for class HibernateTemplate on improving the performance of bulk save or update operations [SPR-4678]","**[Jian Sang](https://jira.spring.io/secure/ViewProfile.jspa?name=sangjian)** opened **[SPR-4678](https://jira.spring.io/browse/SPR-4678?redirect=false)** and commented  In the Class org.springframework.orm.hibernate3.HibernateTemplate, There is saveOrUpdateAll(Collection entities)  method for Saving or updating all given persistent instances within the entities object, but there are no similar saveAll(Collection entities) or updateAll(Collection entities) methods.        Now, If we want save all the instance within the Collection, We have to implements the SaveAll method by myself in my DAO classes.               public void saveAll(Collection entities) {           for (Iterator it = entities.iterator(); it.hasNext();) {              getHibernateTemplate().save(it.next());           }       }             Actually the performance of above method is very bad. Here is a sample test result.               Inserting 4239 rows spends 10078 Millseconds              Inserting 4240 rows spends 8953 Millseconds            If we do not use the HibernateTemplate and use Session.save() method for each elements in Collection.         Here is Test result:              Inserting 4239 rows spends 1437 Millseconds              Inserting 4240 rows spends 1031 Millseconds                 If we importing two new method into class HibernateTemplate as following:            public void saveAll(final Collection entities) throws DataAccessException {           execute(new HibernateCallback() {               public Object doInHibernate(Session session) throws HibernateException {               checkWriteOperationAllowed(session);                for (Iterator it = entities.iterator(); it.hasNext();) {                   session.save(it.next());                }               return null;            }           }, true);        }  public void updateAll(final Collection entities) throws DataAccessException { execute(new HibernateCallback() { public Object doInHibernate(Session session) throws HibernateException { checkWriteOperationAllowed(session); for (Iterator it = entities.iterator(); it.hasNext();) { session.update(it.next()); } return null; } }, true); }  The above two method could improve the update and save operation performance significantly. Here is the test result. Inserting 4239 rows spends 1343 Millseconds Inserting 4240 rows spends 547 Millseconds  The reason of performance improving is the new method reduce the execution times of method checkWriteOperationAllowed(session) and creation times of HibernateCallback object.  So I strongly suggest the import  the two method into class HibernateTemplate.  My Email is  sangjian@cn.ibm.com or sangjian1980@hotmail.com    ---  **Affects:** 2.5.2  **Attachments:** - [HibernateTemplate.java](https://jira.spring.io/secure/attachment/13912/HibernateTemplate.java) (_44.58 kB_)","closed","type: enhancement,","spring-projects-issues","2008-04-08T21:56:40Z","2012-06-19T09:36:18Z"
"","9409","OutOfMemoryException with LogLevel = DEBUG and lazy-init [SPR-4732]","**[Jens Fransson](https://jira.spring.io/secure/ViewProfile.jspa?name=fransson)** opened **[SPR-4732](https://jira.spring.io/browse/SPR-4732?redirect=false)** and commented  Setting org.springframework to DEBUG leads to thousands of strange error/warn messages with stack traces. They seem to be stored on the heap because the application crashes with an OutOfMemoryException then. This looks like it could be related to beans with lazy initialization. When DEBUG is enabled, Spring seems to try to instantiate them without need. This leads to an error for beans which must not be instantiated because they rely on properties which are not set.  ---  **Affects:** 2.5.3  **Issue Links:** - #9331 Too many ""related cause"" stacktraces produced by constructor autowiring  1 votes, 4 watchers","closed","in: core,","spring-projects-issues","2008-04-20T19:45:20Z","2019-01-11T17:42:52Z"
"","8903","DB2SequenceMaxValueIncrementer does not work with DB2 for z/OS [SPR-4225]","**[Jens Eickmeyer](https://jira.spring.io/secure/ViewProfile.jspa?name=eickmeyer)** opened **[SPR-4225](https://jira.spring.io/browse/SPR-4225?redirect=false)** and commented  The implementation of DB2SequenceMaxValueIncrementer does not work with DB2 for z/OS. The query used for retrieving the next value is not compatible.   ---  **Affects:** 2.0.7  **Attachments:** - [DB2390SequenceMaxValueIncrementer.java](https://jira.spring.io/secure/attachment/13184/DB2390SequenceMaxValueIncrementer.java) (_842 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-12-06T20:43:01Z","2012-06-19T03:46:36Z"
"","9611","Cyclical dependency between orm and context [SPR-4936]","**[Jens Borrmann](https://jira.spring.io/secure/ViewProfile.jspa?name=jensb)** opened **[SPR-4936](https://jira.spring.io/browse/SPR-4936?redirect=false)** and commented  There is a cyclical dependency between orm and context. This is caused by the following entry in the manifest of context:  org.springframework.orm.jpa.support;version=""[2.5.4.A, 2.5.4.A]"";resolution:=optional  Since this direction is optional resolving the context bundle without orm is not impossible, but ""funny"" effects during runtime can occur.  ---  **Affects:** 2.5.4  **Issue Links:** - #9479 cycles between various modules manifests (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-06-19T01:19:41Z","2019-01-11T18:27:52Z"
"","9692","Transactional JMS resources are not closed in consistent order [SPR-5017]","**[Jem Day](https://jira.spring.io/secure/ViewProfile.jspa?name=jemday)** opened **[SPR-5017](https://jira.spring.io/browse/SPR-5017?redirect=false)** and commented  Jms resources are not handled in a consistent fashion when transaction managers are in use, due to this the potential exists for memory leaks to occur (i believe) if certain ConnectionFactory derived classes are used.  I am attaching unti-test code that shows this behaviour when using JmsTemplate for sending messages but i believe a similar situation may exist during message reception (see http://forum.springframework.org/showthread.php?p=183487). Specifically in my case the MessageProducer does not get closed when a transaction manager is enlisted - in a simple case you might argue this is OK since the Session.close() will cause the producer to close it, however in the example where multiple messages are being produced and the connection factory is preventing the session from closing then the producers may never actually close and leaks will occur.   ---  **Affects:** 2.5.4  **Attachments:** - [TestJmsResourceOrdering.java](https://jira.spring.io/secure/attachment/14407/TestJmsResourceOrdering.java) (_9.05 kB_) - [TestJmsResourceOrdering.java](https://jira.spring.io/secure/attachment/14404/TestJmsResourceOrdering.java) (_5.54 kB_)","closed","type: enhancement,","spring-projects-issues","2008-07-18T09:32:55Z","2012-06-19T03:47:49Z"
"","9588","difficult to get the stack trace of an exception thrown in a bean init method when using autowiring [SPR-4913]","**[Jeff Yemin](https://jira.spring.io/secure/ViewProfile.jspa?name=jeffy)** opened **[SPR-4913](https://jira.spring.io/browse/SPR-4913?redirect=false)** and commented  I was getting an NullPointerException (NPE) in an init method of one of my beans but Spring is not showing the stack trace. I would just see this:  org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'ContentAccess' defined in URL ...]: Invocation of init method failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1090) ...  (I put the ""..."" in there to keep it short).  but not the stack trace of the NPE, which is what I needed to diagnose the problem. The culprit in this case is in this method:  org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory,autowireByType  specifically the catch clause at the bottom:  catch (BeansException ex) { throw new UnsatisfiedDependencyException( mbd.getResourceDescription(), beanName, propertyName, ex.getMessage()); }  The BeansException properly wraps the NPE as its cause, but the UnsatisfiedDependencyException just grabs the message from the BeansException but doesn't keep it as a cause, so the stack trace is lost.    ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-06-12T03:17:02Z","2012-06-19T03:47:38Z"
"","9202","RolesAllowed support in AnnotationMethodHandlerAdapter [SPR-4525]","**[Jeff Rodriguez](https://jira.spring.io/secure/ViewProfile.jspa?name=jeffrey.rodriguez)** opened **[SPR-4525](https://jira.spring.io/browse/SPR-4525?redirect=false)** and commented  Now that annotation based controllers are supported in Spring, it would be useful to check for RolesAllowed, PermitAll, etc. It should probably be added into AnnotationMethodHandlerAdapter.  ---  **Issue Links:** - [SEC-507](https://jira.spring.io/browse/SEC-507) [patch] Support JSR-250 `@RolesAllowed` annotation","closed","type: enhancement,","spring-projects-issues","2008-02-29T04:56:19Z","2019-01-13T08:05:01Z"
"","9725","@ModelAttribute on function parameter should allow nulls to be passed in [SPR-5050]","**[Jay Merrifield](https://jira.spring.io/secure/ViewProfile.jspa?name=fracmak)** opened **[SPR-5050](https://jira.spring.io/browse/SPR-5050?redirect=false)** and commented  When having a function with the following signature  `@RequestMapping`(method = RequestMethod.GET) public String index(`@ModelAttribute`(""leagueList"") List\ leagueList){ ....  if the `@ModelAttribute` function returns null, and the return type is an interface, a org.springframework.beans.BeanInstantiationException is thrown,  ---  **Affects:** 2.5.5  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/14483/patch.txt) (_2.07 kB_)  **Issue Links:** - #9653 `@InitBinder` can fail when using mix of command objects and plain parameters","closed","type: enhancement,","spring-projects-issues","2008-07-31T01:36:01Z","2019-01-13T08:03:05Z"
"","9867","DefaultMessageListenerContainer creation fail before JMS server startup [SPR-5194]","**[Jay Choi](https://jira.spring.io/secure/ViewProfile.jspa?name=ienvyou)** opened **[SPR-5194](https://jira.spring.io/browse/SPR-5194?redirect=false)** and commented  This seem very similar parent issue. The application context fails to initialize with the below exception when the JBoss Messaging Server is down.  My current application have to run standalone and context loading strategy is pre-loading(ClassPathXmlApplicationContext). It means that if JBoss Messaging server is alreay startup, there is no problem.  Here is my config that is same as http://jira.springframework.org/browse/SPR-4843 \ \ \ \ org.jnp.interfaces.NamingContextFactory \ \ jnp://localhost:1199 \ \ org.jnp.interfaces:org.jboss.naming \ \ \ \           	     		     	     	     		/ConnectionFactory     	     	     	     	     	                        	     		     	     	     		     	     	     	       ---  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sendDestination' defined in class path resource [beans.xml]: Invocation of init method failed; nested exception is javax.naming.CommunicationException: Could not obtain connection to any of these urls: localhost:1199 and discovery failed with error: javax.naming.CommunicationException: Receive timed out [Root exception is java.net.SocketTimeoutException: Receive timed out] [Root exception is javax.naming.CommunicationException: Failed to connect to server localhost:1199 [Root exception is javax.naming.ServiceUnavailableException: Failed to connect to server localhost:1199 [Root exception is java.net.ConnectException: Connection refused]]] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1338) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:423) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) at org.jboss.jms.spring.ExampleTest.main(ExampleTest.java:17) Caused by: javax.naming.CommunicationException: Could not obtain connection to any of these urls: localhost:1199 and discovery failed with error: javax.naming.CommunicationException: Receive timed out [Root exception is java.net.SocketTimeoutException: Receive timed out] [Root exception is javax.naming.CommunicationException: Failed to connect to server localhost:1199 [Root exception is javax.naming.ServiceUnavailableException: Failed to connect to server localhost:1199 [Root exception is java.net.ConnectException: Connection refused]]] at org.jnp.interfaces.NamingContext.checkRef(NamingContext.java:1562) at org.jnp.interfaces.NamingContext.lookup(NamingContext.java:634) at org.jnp.interfaces.NamingContext.lookup(NamingContext.java:627) at javax.naming.InitialContext.lookup(InitialContext.java:351) at org.springframework.jndi.JndiTemplate$1.doInContext(JndiTemplate.java:155) at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:88) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:153) at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:178) at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:95) at org.springframework.jndi.JndiObjectLocator.lookup(JndiObjectLocator.java:105) at org.springframework.jndi.JndiObjectFactoryBean.lookupWithFallback(JndiObjectFactoryBean.java:200) at org.springframework.jndi.JndiObjectFactoryBean.afterPropertiesSet(JndiObjectFactoryBean.java:186) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335) ... 15 more Caused by: javax.naming.CommunicationException: Failed to connect to server localhost:1199 [Root exception is javax.naming.ServiceUnavailableException: Failed to connect to server localhost:1199 [Root exception is java.net.ConnectException: Connection refused]] at org.jnp.interfaces.NamingContext.getServer(NamingContext.java:274) at org.jnp.interfaces.NamingContext.checkRef(NamingContext.java:1533) ... 28 more Caused by: javax.naming.ServiceUnavailableException: Failed to connect to server localhost:1199 [Root exception is java.net.ConnectException: Connection refused] at org.jnp.interfaces.NamingContext.getServer(NamingContext.java:248) ... 29 more Caused by: java.net.ConnectException: Connection refused at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333) at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366) at java.net.Socket.connect(Socket.java:520) at java.net.Socket.connect(Socket.java:470) at java.net.Socket.\(Socket.java:367) at java.net.Socket.\(Socket.java:267) at org.jnp.interfaces.TimedSocketFactory.createSocket(TimedSocketFactory.java:84) at org.jnp.interfaces.TimedSocketFactory.createSocket(TimedSocketFactory.java:77) at org.jnp.interfaces.NamingContext.getServer(NamingContext.java:244) ... 29 more  ---  I saw this issue was alrealy fixed on 2.5.5, but I am still meeting same error.  This will be a serious issue for current customer(They are one of Fortune 50's companies) Is there any problem in my configuration?  Thanks in advance.  ---  **Affects:** 2.5.5  **Attachments:** - [jms-spring.jar](https://jira.spring.io/secure/attachment/14735/jms-spring.jar) (_9.18 kB_) - [lookupOnStartup.jpg](https://jira.spring.io/secure/attachment/14741/lookupOnStartup.jpg) (_233.65 kB_)  This issue is a sub-task of #9519  1 votes, 1 watchers","closed","status: declined,","spring-projects-issues","2008-10-01T20:43:05Z","2019-01-13T21:51:25Z"
"","9649","Stated dependency not included in distribution [SPR-4974]","**[Jasper Blues](https://jira.spring.io/secure/ViewProfile.jspa?name=jasper.blues)** opened **[SPR-4974](https://jira.spring.io/browse/SPR-4974?redirect=false)** and commented  The readme.txt included in the lib folder of ""Spring Framework - with dependencies"" version 2.5.5 states a dependency on aspectjtools.jar, however this jar is not actually included in the lib folder.   ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-07-02T13:38:39Z","2019-01-12T05:34:08Z"
"","9363","@Component annotated class that contains a private non-static inner class not considered as candidate component because  beanDefinition.getMetadata().isIndependent() returns false [SPR-4686]","**[Jason Zaugg](https://jira.spring.io/secure/ViewProfile.jspa?name=jzaugg)** opened **[SPR-4686](https://jira.spring.io/browse/SPR-4686?redirect=false)** and commented  `@Component` public final class SimpleXslTransformerFactory { `@Autowired` private StreamSourceFactory streamSourceFactory; `@Autowired` private EfgLoggerFactory loggerFactory;      public Transformer createXslTransformer(Resource xsl) {         Source xslSource = streamSourceFactory.create(xsl);         Transformer xslTransformer = createXslTransformer(xslSource, TransformerFactory.newInstance());         xslTransformer.setErrorListener(new LoggingErrorListener());         return xslTransformer;     }          private Transformer createXslTransformer(Source xslSource, TransformerFactory factory) {         try {             return factory.newTransformer(xslSource);         } catch (TransformerConfigurationException e) {             throw new RuntimeException(e);         }     }          private class LoggingErrorListener implements ErrorListener {         public void warning(TransformerException exception) throws TransformerException {             loggerFactory.create().warn(ExceptionUtils.getFullStackTrace(exception));         }              public void error(TransformerException exception) throws TransformerException {             loggerFactory.create().warn(ExceptionUtils.getFullStackTrace(exception));         }              public void fatalError(TransformerException exception) throws TransformerException {             loggerFactory.create().warn(ExceptionUtils.getFullStackTrace(exception));         }     }  }  When evaluating ClassMetadataReadingVisitor.isIndependent(), this.enclosingClassName: com.efgfp.raptor.functional.SimpleXslTransformerFactory this.independentInnerClass: false  therefore (this.enclosingClassName == null || this.independentInnerClass) => false  The list of candidate resources contained, in this order:  URL [jar:file:/D:/wyd/workspace/raptor/target/exploded/raptor-web-interfaceWeb/WEB-INF/lib/functional-test.jar!/com/efgfp/raptor/functional/SimpleXslTransformerFactory$LoggingErrorListener.class], URL [jar:file:/D:/wyd/workspace/raptor/target/exploded/raptor-web-interfaceWeb/WEB-INF/lib/functional-test.jar!/com/efgfp/raptor/functional/SimpleXslTransformerFactory.class],  Debugging the calls to the ClassMetadataReadingVisitor showed that a call was made:       visitInnerClass():72, ClassMetadataReadingVisitor.java     accept():-1     accept():-1     getAnnotationMetadata():52, SimpleMetadataReader.java  name = {java.lang.String@5861}""com/efgfp/raptor/functional/SimpleXslTransformerFactory$LoggingErrorListener"" outerName = {java.lang.String@3079}""com/efgfp/raptor/functional/SimpleXslTransformerFactory"" innerName = {java.lang.String@5862}""LoggingErrorListener"" access = 4101  and that during this call, independentInnerClass was set to null.  ---  **Affects:** 2.5.1  **Issue Links:** - #9003 component scanning incorrectly excludes classes (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-04-09T23:10:08Z","2019-01-12T16:50:55Z"
"","9316","Classpath scanning fails after hot-deploy of a web-application to a container due to JarURLConnection caching [SPR-4639]","**[Jason Zaugg](https://jira.spring.io/secure/ViewProfile.jspa?name=jzaugg)** opened **[SPR-4639](https://jira.spring.io/browse/SPR-4639?redirect=false)** and commented  Steps to reproduce:  Deploy a web application that uses component scanning [] Modify the application so that one of the JAR files considered by classpath scanning changed. Redeploy that web application Servlet will fail to startup with an IO exception (see below).  Suggested Fix:  ---  PathMatchingResourcePatternResolver:             JarURLConnection jarCon = (JarURLConnection) con;                  // BEGIN PATCHED CODE             //             // After the web application is hot-deployed, a new version of our jar files exists at             // the same file path. Disable caching to ensure that the new JAR file is successfully read.             //             con.setUseCaches(false);             // END PATCHED CODE  IOException:  org.springframework.beans.factory.BeanDefinitionStoreException: I/O failure during classpath scanning; nested exception is java.io.FileNotFoundException: JAR entry com/efgfp/ not found in D:\zgg\p4\default\raptor\target\exploded\raptor-web-interfaceWeb\WEB-INF\lib\spring-wrapper.jar at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:186) at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:192) at org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parse(ComponentScanBeanDefinitionParser.java:159) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1246) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1236) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:488) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:383) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:327) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:295) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:212) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:112) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:79) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:97) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:411) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:338) at com.efgfp.raptor.util.context.Context.\(Context.java:25) at com.efgfp.raptor.util.context.ContextFactory.createContext(ContextFactory.java:41) at com.efgfp.raptor.util.context.ContextFactory.createContext(ContextFactory.java:29) at com.efgfp.raptor.web.RaptorWebApplicationStarter.createInitialContext(RaptorWebApplicationStarter.java:22) at com.efgfp.raptor.web.RaptorWebApplicationStarter.contextInitialized(RaptorWebApplicationStarter.java:15) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3830) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4337) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:553) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:488) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1206) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:293) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1337) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1601) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1590) at java.lang.Thread.run(Thread.java:619) Caused by: java.io.FileNotFoundException: JAR entry com/efgfp/ not found in D:\zgg\p4\default\raptor\target\exploded\raptor-web-interfaceWeb\WEB-INF\lib\spring-wrapper.jar at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:122) at sun.net.www.protocol.jar.JarURLConnection.getJarFile(JarURLConnection.java:71) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(PathMatchingResourcePatternResolver.java:391) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:320) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:244) at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:1026) at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:172) ... 41 more  ---  **Affects:** 2.5.1  **Issue Links:** - #13755 Creating of Spring beans takes a long time when the application is deployed through webstart / jnlp with Java 6 and above","closed","type: bug,","spring-projects-issues","2008-03-28T01:15:23Z","2019-01-13T21:52:57Z"
"","9315","TransactionalTestExecutionListener uses cached TransactionManager (TM), even after ApplicationContext that created the TM has been marked 'dirty' and closed. [SPR-4638]","**[Jason Zaugg](https://jira.spring.io/secure/ViewProfile.jspa?name=jzaugg)** opened **[SPR-4638](https://jira.spring.io/browse/SPR-4638?redirect=false)** and commented  TransactionalTestExecutionListener:378  ```java 	protected final PlatformTransactionManager getTransactionManager(final TestContext testContext) throws Exception {  		if (this.transactionManager != null) { 			return this.transactionManager; 		}  		// else...  		final TransactionConfigurationAttributes configAttributes = retrieveTransactionConfigurationAttributes(testContext.getTestClass()); 		final String transactionManagerName = configAttributes.getTransactionManagerName();  		try { 			this.transactionManager = (PlatformTransactionManager) testContext.getApplicationContext().getBean( 					transactionManagerName, PlatformTransactionManager.class); 		} ```  I suggest that you do the following instead:  ```java 		if (this.transactionManager != null && this.applicationContext = testContext.getApplicationContext()) { 			return this.transactionManager; 		}  		// else...  		final TransactionConfigurationAttributes configAttributes = retrieveTransactionConfigurationAttributes(testContext.getTestClass()); 		final String transactionManagerName = configAttributes.getTransactionManagerName();  		try { 			this.transactionManager = (PlatformTransactionManager) testContext.getApplicationContext().getBean( 					transactionManagerName, PlatformTransactionManager.class);                         this.applicationContext = testContext.getApplicationContext(); 		} ```  I experience this when I am using a custom TestRunner and TestContextManager, who are responsible for injecting Mock objects into the ApplicationWiring if the Test Case contains suitably annotated fields. As a workaround, my custom TestContextManager reflectively sets the TransactionalTestExecutionListener.transactionManager to null after each test.  ```java public final class RaptorTestRunner extends SpringJUnit4ClassRunner {     public RaptorTestRunner(Class testClass) throws InitializationError {         super(testClass);     }      protected TestContextManager createTestContextManager(Class clazz) {         TestContextManager contextManager = new TestContextManager(clazz) {             public TestInstancePreparer preparer;              public void prepareTestInstance(Object testInstance) throws Exception {                 TestContext testContext = getTestContext();                 ApplicationContext springApplicationContext = testContext.getApplicationContext();                 Map map = springApplicationContext.getBeansOfType(Context.class);                 Context raptorContext = (Context) toArray(map.values().iterator())[0];                 preparer = new TestInstancePreparer(testInstance, testContext, raptorContext);                 preparer.prepareSubject();             }              public void afterTestMethod(Object testInstance, Method testMethod, Throwable exception) throws Exception {                 super.afterTestMethod(testInstance, testMethod, exception);                 preparer.discardApplicationContextIfInjectWasUsed();                 forceSpringTransactionTestListenerToUseTheLatestDatasource();             }              private void forceSpringTransactionTestListenerToUseTheLatestDatasource() throws NoSuchFieldException, IllegalAccessException {                 List listeners = getTestExecutionListeners();                 for (TestExecutionListener listener : listeners) {                     // TODO Raise line 378 of TransactionalTestExecutionListener returns a transaction                     //      manager that can point to a datasource that has been closed, if the spring application context                     //      for the first test has been marked as dirty and closed.                     if (listener instanceof TransactionalTestExecutionListener) {                         Field field = listener.getClass().getDeclaredField(""transactionManager"");                         field.setAccessible(true);                         field.set(listener, null);                     }                 }             }           };         return contextManager;     } } ```  ---  **Affects:** 2.5.1  **Issue Links:** - #9753 Support programmatic starting and stopping of transactions in the TestContext framework","closed","type: bug,","spring-projects-issues","2008-03-27T21:34:32Z","2019-01-11T18:14:48Z"
"","9141","Accept List for JdbcTemplate Query Operations [SPR-4464]","**[Jason Ferguson](https://jira.spring.io/secure/ViewProfile.jspa?name=dartmanx)** opened **[SPR-4464](https://jira.spring.io/browse/SPR-4464?redirect=false)** and commented  Currently, the JdbcTemplate interface query methods accept a Object[] as a parameter, but does not accept Collection or List implementations.  Developers wishing to use a collection rather than an Array could likely use toArray(), but may benefit from a convenience method to accept a Collection or List.   ---  **Affects:** 2.0.8","closed","type: enhancement,","spring-projects-issues","2008-02-14T01:19:48Z","2012-06-19T09:36:19Z"
"","9016","destruction method not called on prototypes [SPR-4337]","**[Jarvis Ragona](https://jira.spring.io/secure/ViewProfile.jspa?name=jragona)** opened **[SPR-4337](https://jira.spring.io/browse/SPR-4337?redirect=false)** and commented   --- No further details from [SPR-4337](https://jira.spring.io/browse/SPR-4337?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-01-14T23:04:11Z","2012-06-18T12:44:42Z"
"","9823","Define standard way of switch to another hibernate session (for some code) with OpenSessionInView [SPR-5150]","**[Jara Cesnek](https://jira.spring.io/secure/ViewProfile.jspa?name=cesnek)** opened **[SPR-5150](https://jira.spring.io/browse/SPR-5150?redirect=false)** and commented  Hi, is there standard way of switch to another hibernate session (for some time)with OpenSessionInView.  In OpenSessionInView there is one thread bound session. If hibernate exception is thrown this session get closed (or somehow invalided) and code after exception cant use this session.  We want for some method or body of for cyklus to be executed in another session (and then close it). If hibernate data  exception is thrown it will be safe to catch this exception and continue data access with origin session.  This is nessessary for two reasons : - memory - loading many object to memory, and cant wait to finish whole request - exceptions - session get invalidated after hibernate data access exception  Example code we want (OpenSessionInView active):  1)NON WORKING CODE getCurrentSession().load(log);  //try to load something try{      getCurrentSession().load(x);       getCurrentSession().save(x);  }catch(Exception ex){ log.setFail(true); }  //save log that action X fail getCurrentSession().update(log);  //this not working - fail with disconected session  2)WORKING CODE getCurrentSession().load(log);      switchToAnotherSession();//!!  //try to load something try{      getCurrentSession().load(x);       getCurrentSession().save(x);  }catch(Exception ex){ log.setFail(true); }  backToOriginSessionAndCloseAnotherSession();//!!  getCurrentSession().update(log);  //this is working - hibernate session OK    ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-09-11T01:36:17Z","2012-06-19T09:36:32Z"
"","9812","OutOfMemoryError using ConfigurableListableBeanFactory.destroyBean [SPR-5139]","**[janardhanan vembunarayanan](https://jira.spring.io/secure/ViewProfile.jspa?name=jvembuna)** opened **[SPR-5139](https://jira.spring.io/browse/SPR-5139?redirect=false)** and commented  In my application I am using Spring as a container to store objects. During the life cycle of my application the values of the these objects can change and I am using the destroyBean() and removeBeanDefinition() of ConfigurableListableBeanFactory and recreating the same using registerBeanDefinition(..).  If I do this process in a for loop continuously I am getting OutOfMemoryError. The reason is in the class DefaultSingletonBeanRegistry the following data structures are growing continuously. Is this a known bug in Spring API destroyBean() and removeBeanDefinition()?  I have attached the test cases and the spring xml file I used for causing this issue. They are in the same file SpringBug.txt.  This issue is coming when I have a Singleton and it has an inner bean.  /** Map between dependent bean names: bean name --> Set of dependent bean names */ private final Map dependentBeanMap = CollectionFactory.createConcurrentMapIfPossible(16 );  /** Map between depending bean names: bean name --> Set of bean names for the bean's dependencies */ private final Map dependenciesForBeanMap = CollectionFactory.createConcurrentMapIfPossible(16 );  Test Case for the crash is given below along with the Spring configuration.  \  package com.debug.spring.modified;  import org.junit.Test; import org.springframework.beans.MutablePropertyValues; import org.springframework.beans.PropertyValue; import org.springframework.beans.factory.ListableBeanFactory; import org.springframework.beans.factory.config.BeanDefinition; import org.springframework.beans.factory.config.BeanDefinitionHolder; import org.springframework.beans.factory.support.AbstractBeanDefinition; import org.springframework.beans.factory.support.BeanDefinitionReaderUtils; import org.springframework.beans.factory.support.DefaultListableBeanFactory; import org.springframework.context.support.ClassPathXmlApplicationContext;  public class SpringBugModified { private long objectid = 1;      @Test     public void testSpringBug() throws Exception {     	ClassPathXmlApplicationContext configuration = new ClassPathXmlApplicationContext(     			new String[] { ""classpath:com/debug/spring/modified/testspringbug.xml"" });     	System.out.println(""*** Singleton ***"");     	TestSingletonBeanBug tBeanSingleton = (TestSingletonBeanBug) configuration.getBean(""TestBeanSingletonBug"");     	count(configuration, tBeanSingleton.getInnerBean());     	for (;;) {     		configuration.getBeanFactory().destroyBean(""TestBeanSingletonBug"",tBeanSingleton);     		((DefaultListableBeanFactory) configuration.getBeanFactory()).removeBeanDefinition(""TestBeanSingletonBug"");     		BeanDefinition beanDefinitionSingleton = createTestSingletonBeanBug();     		((DefaultListableBeanFactory) configuration.getBeanFactory()).registerBeanDefinition(""TestBeanSingletonBug"",beanDefinitionSingleton);     		TestSingletonBeanBug singletonBean = (TestSingletonBeanBug) configuration.getBean(""TestBeanSingletonBug"");     		count(configuration, singletonBean.getInnerBean());     	}     }          private void count(ListableBeanFactory factory, TestInnerBean tib) {     	System.out.println(""Total number of beans: "" + factory.getBeanDefinitionCount());     	System.out.println(""Total number of TestInnerBean definitions: "" + factory.getBeanNamesForType(TestInnerBean.class,true, false).length);     	System.out.println(""ObjectID latest TestInnerBean: "" + tib.getCount());     }          private BeanDefinition createTestSingletonBeanBug() throws Exception {     	AbstractBeanDefinition beanDefinitionSingleton = BeanDefinitionReaderUtils.createBeanDefinition(null,""com.debug.spring.modified.TestSingletonBeanBug"",getClass().getClassLoader());     	MutablePropertyValues propssingleton = new MutablePropertyValues();     	propssingleton.addPropertyValue(""count"", ""600"");     	beanDefinitionSingleton.setPropertyValues(propssingleton);     	beanDefinitionSingleton.setAbstract(false);     	beanDefinitionSingleton.setLazyInit(true);     	PropertyValue pv = new PropertyValue(""innerBean"", createTestInnerBean());     	beanDefinitionSingleton.getPropertyValues().addPropertyValue(pv);     	return beanDefinitionSingleton;     }          @SuppressWarnings(""unused"")     private BeanDefinition createTestInnerBean() throws Exception {     	objectid++;     	AbstractBeanDefinition innerBeanDefinition = BeanDefinitionReaderUtils.createBeanDefinition(null,""com.debug.spring.modified.TestInnerBean"", getClass().getClassLoader());     	MutablePropertyValues innerbeanproperties = new MutablePropertyValues();     	innerbeanproperties.addPropertyValue(""count"", this.objectid);     	innerBeanDefinition.setPropertyValues(innerbeanproperties);     	BeanDefinitionHolder bdh = new BeanDefinitionHolder(innerBeanDefinition, TestInnerBean.class.getSimpleName()+ objectid, null);     	return innerBeanDefinition;     }  }  class TestInnerBean { private int count;      public TestInnerBean() {     }          public int getCount() {     	return count;     }          public void setCount(int count) {     	this.count = count;     }  }  class TestSingletonBeanBug {      private int count;     private TestInnerBean innerBean;          public TestSingletonBeanBug() {     }          public int getCount() {     	return count;     }          public TestInnerBean getInnerBean() {     	return innerBean;     }          public void setCount(int count) {     	this.count = count;     }          public void setInnerBean(TestInnerBean innerBean) {     	this.innerBean = innerBean;     }  }  \ \ \               	         	     	    	     	    		     	    	     	           \ \   ---  **Affects:** 2.5.4, 2.5.5  **Attachments:** - [springbug.txt](https://jira.spring.io/secure/attachment/14639/springbug.txt) (_4.57 kB_) - [springbugmodified.txt](https://jira.spring.io/secure/attachment/14648/springbugmodified.txt) (_4.03 kB_) - [springmemoryusingjmap.txt](https://jira.spring.io/secure/attachment/14647/springmemoryusingjmap.txt) (_33.31 kB_)","closed","in: core,","spring-projects-issues","2008-09-03T09:55:52Z","2019-01-13T21:51:36Z"
"","9850","Included mime.types file contains duplicate settings for CSS extension making it return application/x-pointplus instead of text/css [SPR-5177]","**[Jan Novotný](https://jira.spring.io/secure/ViewProfile.jspa?name=novoj)** opened **[SPR-5177](https://jira.spring.io/browse/SPR-5177?redirect=false)** and commented  Using ConfigurableMimeFileTypeMap I found out, that for any file with extension ""css"" - ie. HTML stylesheets method getContentType(...) returns ""application/x-pointplus"" instead of expected ""text/css"". Firefox gets confused and refuses such stylesheets.  Problem is in double definition of mimetype for extension ""css"" in mime.types file included in spring.jar in package org/springframework/mail/javamail/  Exactly:  1. TEXT TYPES  text/x-speech				talk text/css				css  and then:  1. PRESENTATION  2. PowerPoint presentation (Microsoft)    application/mspowerpoint		ppz  3. PointPlus presentation data (Net Scene)    application/x-pointplus			css  4. ASAP WordPower (Software Publishing Corp.)    application/x-asap			asp  5. Astound Web Player multimedia data (GoldDisk)    application/astound			asn  Next definition overwrites the previous one, which IMHO is more important.  ---  **Affects:** 2.5.5  **Issue Links:** - #9587 Duplicate mappings in org/springframework/mail/mime.types (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-09-24T01:36:12Z","2019-01-12T16:50:43Z"
"","8994","PersistenceAnnotationBeanPostProcessor throws BeanCurrentlyInCreationException exception during injection of PersistenceContext [SPR-4315]","**[Jan Hoskens](https://jira.spring.io/secure/ViewProfile.jspa?name=jh@schaubroeck.be)** opened **[SPR-4315](https://jira.spring.io/browse/SPR-4315?redirect=false)** and commented  During the lookup of the EntityManagerFactory in the PersistenceAnnotationBeanPostProcessor a bean can be created that gets the initial bean in postProcessing state injected in a raw form. This results in the BeanCurrentlyInCreationException when the EntityManagerFactory is found and used to wrap the bean.  To clarify this I'll give an example: 1) MyDAO is created & postprocessed 2) PersistenceAnnotationBeanPostProcessor will kick in if MyDAO has the `@PersistenceContext` 3) lookup for EntityManagerFactory in context (based on type) 4) during lookup a factoryBean is found 5) factoryBean gets instantiated to check its return type 6) factoryBean may need the MyDAO somewhere down the line and it gets injected in a bean 7) PersistenceAnnotationBeanPostProcessor tries to wrap MyDAO but the bean is already used in another form 8) BeanCurrentlyInCreationException is thrown  To test this yourself: 1) add debug point in PersistenceAnnotationBeanPostProcessor in findNamedEntityManagerFactory 2) see which bean gets processed initially that results in the lookup of the EntityManagerFactory 3) stop debug 4) add MethodInvokingFactoryBean to your context which needs that bean at some point 5) restart results in BeanCurrentlyInCreationException    ---  **Affects:** 2.0.7, 2.0.8, 2.5 final, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-01-09T21:46:02Z","2012-06-19T03:47:12Z"
"","9276","[PATCH] AbstractSimpleBeanDefinitionParser cannot handle namespace declarations (xmlns= or xmlns:prefix="") attributes on the same element [SPR-4599]","**[James Strachan](https://jira.spring.io/secure/ViewProfile.jspa?name=jstrachan)** opened **[SPR-4599](https://jira.spring.io/browse/SPR-4599?redirect=false)** and commented  Change the doParse to be this...  ``` protected final void doParse(Element element, BeanDefinitionBuilder builder) {      NamedNodeMap attributes = element.getAttributes();      for (int x = 0; x < attributes.getLength(); x++) {          Attr attribute = (Attr) attributes.item(x);          String name = attribute.getLocalName();          String fullName = attribute.getName();          if (!fullName.startsWith(""xmlns:"") && !fullName.equals(""xmlns"") && isEligibleAttribute(name)) {              String propertyName = extractPropertyName(name);              Assert.state(StringUtils.hasText(propertyName),                      ""Illegal property name returned from 'extractPropertyName(String)': cannot be null or empty."");              builder.addPropertyValue(propertyName, attribute.getValue());          }      }      postProcess(builder, element);  } ```  Fixes the problem.  Or you could make the current Attr available to the isEligibleAttribute() method call so that folks can do the xmlns exclusion in their own code   ---  **Affects:** 2.5.2","closed","in: core,","spring-projects-issues","2008-03-18T21:22:21Z","2012-06-19T03:47:02Z"
"","9271","easier framework support for the creation & injection of a bean by its class [SPR-4594]","**[James Strachan](https://jira.spring.io/secure/ViewProfile.jspa?name=jstrachan)** opened **[SPR-4594](https://jira.spring.io/browse/SPR-4594?redirect=false)** and commented  Now that a bean can be annotated with `@Service` / `@Component` its no longer required to be inside an ApplicationContext for Spring to be able to instantiate and inject it. Yet from the public Spring context API the only choice you've got is to access beans by name. (Unless I've missed something :)  There are numerous frameworks out there that want to create an instance of some type easily (without it necessarily being in the spring.xml). Off the top of my head here's a few I've seen some icky code to integrate spring injection but am sure there's loads more...  * struts * stripes * jersey * apache came  Now in Guice its super easy. You do things like  ``` MyStartClass starter = injector.getInstance(MyStartClass.class); ```  You're done; all the nice IoC is done by the injector which is a framework developers dream.  When using Spring now we've got 2.5.x its kinda hacky.  e.g. here's some code from trying to use Spring nicely inside JAX-RS (Jersey). Notice its trying to find bean names; then if not it tries to use the BeanFactory in the appContext. This doesn't deal with things like the `@Component` / `@Service` use case though.  ```  import java.lang.reflect.Constructor; import java.lang.reflect.InvocationTargetException;  import com.sun.ws.rest.spi.service.ComponentProvider; import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.springframework.beans.factory.config.AutowireCapableBeanFactory; import org.springframework.beans.factory.config.ConfigurableListableBeanFactory; import org.springframework.context.ConfigurableApplicationContext;  /**  * @version $Revision: 1.1 $  */ public class SpringComponentProvider implements ComponentProvider {     private static final transient Log LOG = LogFactory.getLog(SpringComponentProvider.class);     private final ConfigurableApplicationContext applicationContext;     private int autowireMode = AutowireCapableBeanFactory.AUTOWIRE_AUTODETECT;     private boolean dependencyCheck;      public SpringComponentProvider(ConfigurableApplicationContext applicationContext) {         this.applicationContext = applicationContext;     }      public  T getInstance(Scope scope, Class type) throws InstantiationException, IllegalAccessException {         String name = getBeanName(type);         Object value;         if (name != null) {             if (LOG.isDebugEnabled()) {                 LOG.debug(""Found bean named: "" + name);             }             value = applicationContext.getBean(name, type);         }         else {             LOG.debug(""No bean name so using BeanFactory.createBean"");             value = applicationContext.getBeanFactory().createBean(type, autowireMode, dependencyCheck);         }         return type.cast(value);     }      protected  String getBeanName(Class type) {         String[] names = applicationContext.getBeanNamesForType(type);         String name = null;         if (names.length == 1) {             name = names[0];         }         return name;     }      public  T getInstance(Scope scope, Constructor constructor, Object[] objects) throws InstantiationException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {         return constructor.newInstance(objects);     }      public void inject(Object object) {         String beanName = getBeanName(object.getClass());         if (beanName != null) {             ConfigurableListableBeanFactory beanFactory = applicationContext.getBeanFactory();             beanFactory.configureBean(object, beanName);         }     }      // Properties     //-------------------------------------------------------------------------     public int getAutowireMode() {         return autowireMode;     }      public void setAutowireMode(int autowireMode) {         this.autowireMode = autowireMode;     }      public boolean isDependencyCheck() {         return dependencyCheck;     }      public void setDependencyCheck(boolean dependencyCheck) {         this.dependencyCheck = dependencyCheck;     } } ```  Now maybe SpringSource are now thinking, to hell with frameworks just use the Spring porfolio for everything bwaahahhahaha.  However one of the big factors for Spring's success has always been that it works nicely with loads of different frameworks (struts v stripes v tapestry et al). So I'm wondering would you consider writing some kind of SpringInjector helper class?  So a framework could do something like...  ``` Injector injector = new Injector(applicationContext); MyStartClass starter = injector.getInstance(MyStartClass.class); ```  This could then do things like; look for a single instance of MyStartClass in the bean names and use that if specified (fail if there's more than one); or if not treat it as a kinda `@Component`/`@Service` type and call its constructors and any other `@Autowired` / `@Resource` injection points etc.  i.e. now that there's the mixed model of stuff by name in the app context and stuff on the classpath which are types; could we have a simple unified injector API please for us poor hackers who sometimes dare to work with a framework which is not currently developed by SpringSource? :). Or - could Spring please catch up with Guice in the ease of use stakes as being an IoC framework? :)  ---  **Affects:** 2.5.2  **Issue Links:** - #18353 Programmatic bean registration within configuration classes  4 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-03-17T22:50:42Z","2019-01-11T17:18:39Z"
"","9143","allow a Spring 2 NamespaceHandler to invoke the Spring registered PropertyPlaceholderConfigurer on the XML Element before processing [SPR-4466]","**[James Strachan](https://jira.spring.io/secure/ViewProfile.jspa?name=jstrachan)** opened **[SPR-4466](https://jira.spring.io/browse/SPR-4466?redirect=false)** and commented  If someone implemented the NamespaceHandler using some XML marshalling framework (xstream / jaxb or whatever) then they loose the ability to use ${foo} notation within the XML attributes/text values.  It would be nice if from the ParserContext or some other place we could invoke Spring with the Element and ask it to invoke the PropertyPlaceholderConfigurer (or whatever) is configured there to expand any uses of ${foo} in the XML before processing.  Looking at the code, I don't see any easy way to reuse that. We'd have to basically cut n paste the code from PropertyPlaceholderConfigurer to do the interpolation and would have no idea how the user has configured the property resolution etc.   ---  **Affects:** 2.5.1  18 votes, 17 watchers","closed","status: bulk-closed,","spring-projects-issues","2008-02-15T00:42:58Z","2019-01-12T02:38:39Z"
"","9614","Default autowiring in Spring's test context framework causing problem with CXF [SPR-4939]","**[James Kavanagh](https://jira.spring.io/secure/ViewProfile.jspa?name=james.kavanagh)** opened **[SPR-4939](https://jira.spring.io/browse/SPR-4939?redirect=false)** and commented  I have a spring configured instance of a CXF conduit that I'm using in my integration tests which is causing me a problem. At present I am subclassing AbstractJUnit4SpringContextTests and obtaining my dependencies from the context manually. The problem I'm having is that when I attempt to call a method on my CXF client I get the following exception:  javax.xml.ws.soap.SOAPFaultException: Error creating bean with name '\*.http-conduit': Injection of resource methods failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [org.apache.cxf.configuration.security.AuthorizationPolicy] is defined: Unsatisfied dependency of type [class org.apache.cxf.configuration.security.AuthorizationPolicy]: expected at least 1 matching bean at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:211) at $Proxy54.getAccountDetails(Unknown Source) at com.sportex.regpay.payment.mtapi.transfers.TransferFundsIntegrationTest.performTransferCreditSuccessfulWithGBP(TransferFundsIntegrationTest.java:97) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:163) at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:233) at org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333) at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217) at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197) at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:142) at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51) at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44) at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27) at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37) at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:38) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name '*.http-conduit': Injection of resource methods failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [org.apache.cxf.configuration.security.AuthorizationPolicy] is defined: Unsatisfied dependency of type [class org.apache.cxf.configuration.security.AuthorizationPolicy]: expected at least 1 matching bean at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:306) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:996) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.configureBean(AbstractAutowireCapableBeanFactory.java:283) at org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean(BeanConfigurerSupport.java:155) at org.apache.cxf.configuration.spring.ConfigurerImpl.configureBean(ConfigurerImpl.java:114) at org.apache.cxf.configuration.spring.ConfigurerImpl.configureWithWildCard(ConfigurerImpl.java:134) at org.apache.cxf.configuration.spring.ConfigurerImpl.configureBean(ConfigurerImpl.java:101) at org.apache.cxf.configuration.spring.ConfigurerImpl.configureBean(ConfigurerImpl.java:84) at org.apache.cxf.transport.http.AbstractHTTPTransportFactory.configure(AbstractHTTPTransportFactory.java:223) at org.apache.cxf.transport.http.AbstractHTTPTransportFactory.getConduit(AbstractHTTPTransportFactory.java:163) at org.apache.cxf.transport.http.AbstractHTTPTransportFactory.getConduit(AbstractHTTPTransportFactory.java:145) at org.apache.cxf.endpoint.AbstractConduitSelector.getSelectedConduit(AbstractConduitSelector.java:73) at org.apache.cxf.endpoint.UpfrontConduitSelector.prepare(UpfrontConduitSelector.java:61) at org.apache.cxf.endpoint.ClientImpl.prepareConduitSelector(ClientImpl.java:452) at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:273) at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:222) at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73) at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:170) ... 24 more Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No unique bean of type [org.apache.cxf.configuration.security.AuthorizationPolicy] is defined: Unsatisfied dependency of type [class org.apache.cxf.configuration.security.AuthorizationPolicy]: expected at least 1 matching bean at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:613) at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:423) at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:502) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:192) at org.springframework.beans.factory.annotation.InjectionMetadata.injectMethods(InjectionMetadata.java:117) at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:303) ... 41 more  The problem is caused because the class in question org.apache.cxf.transport.http.HTTPConduit has the following method declaration: /** * This method is used to set the Authorization Policy for this conduit. * Using this method will override any Authorization Policy set in * configuration.   */   `@Resource`   public void setAuthorization(AuthorizationPolicy authorization) {   this.authorizationPolicy = authorization;   }  Obviously Spring thinks that it needs to inject this bean because of the `@Resource` annotation but in actual fact it isn't necessary. I guess what I'm asking is whether there is a way to disable autowiring in this case and if not is there a plan to provide this ability in the near future?  Many thanks, James K   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-06-19T23:59:47Z","2008-07-24T03:07:50Z"
"","9723","Incorrect wording in class javadoc for DelegatingVariableResolver. [SPR-5048]","**[James Jurach](https://jira.spring.io/secure/ViewProfile.jspa?name=muaddib)** opened **[SPR-5048](https://jira.spring.io/browse/SPR-5048?redirect=false)** and commented  DelegatingVariableResolver.java has the following text:  * JSF 1.1 \VariableResolver\ that first delegates to the Spring * root \WebApplicationContext\, then to the original resolver * of the underlying JSF implementation.  but should rather have, for example, the following text:  * JSF 1.1 \VariableResolver\ that first delegates to the original * resolver of the underlying JSF implementation, then to the Spring root * \WebApplicationContext\.  As a reference, the Spring 2.5.x manual reads:  The DelegatingVariableResolver will first delegate value lookups to the default resolver of the underlying JSF implementation, and then to Spring's 'business context' WebApplicationContext. This allows one to easily inject dependencies into one's JSF-managed beans.   ---  **Affects:** 2.0.8, 2.5.5  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: task,","spring-projects-issues","2008-07-30T02:57:18Z","2012-06-19T03:47:06Z"
"","9741","Allow multiple RequestMapping annotations [SPR-5066]","**[James Cook](https://jira.spring.io/secure/ViewProfile.jspa?name=oravecz)** opened **[SPR-5066](https://jira.spring.io/browse/SPR-5066?redirect=false)** and commented  It would be helpful if a method in a controller could be annotated to support more than one request mapping:      @RequestMapping (value = ""/company"", method = RequestMethod.PUT)     @RequestMapping (value = ""/company"", method = RequestMethod.POST, params = ""method=put"")     public String update(Company company) {     	myService.updateCompany(company);     	return ""redirect:/companies"";     }  This will allow a single handler method to respond to a HTML request without support for PUT, and an AJAX call that does support PUT. There are other uses also, but this one is a prime concern for me at the moment.   ---  **Affects:** 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/477543241f3f843ba7ce6ac0c74d4e39bbe5e899  1 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-06T05:12:30Z","2019-01-11T14:38:38Z"
"","9454","Make AnnotationBeanConfigurerAspect Inject Serializable/Deserializable Proxies [SPR-4777]","**[James Carman](https://jira.spring.io/secure/ViewProfile.jspa?name=jwcarman)** opened **[SPR-4777](https://jira.spring.io/browse/SPR-4777?redirect=false)** and commented  The Wicket team has created their own auto-injection mechanism to work around this usecase.  Suppose I have a class that I want to be `@Configurable` (in my case a Wicket page/component).  Then, that class needs to create a non-`@Configurable` object that requires it hands off its autowired dependency to (some Wicket lazy-loading model implementation):  `@Configurable`(autowire = Autowire.BY_TYPE) public class MyConfigurableBean { private SomeService service;      public SomeService getService()     {         return service;     }          public void setService( SomeService service )     {         this.service = service;     }  }  public class SomeOtherBean implements Serializable { private static final long serialVersionUID = 1L; private final SomeService service;      public SomeOtherBean( SomeService service )     {         this.service = service;     }          public SomeService getService()     {         return service;     }  }  It would be nice if SomeOtherBean could be serialized/deserialized and retain its SomeService reference.  Could that be added in?   ---  **Affects:** 2.5.4  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-04T00:01:58Z","2012-06-18T12:44:34Z"
"","8907","CommonsMultiPartResolver.isMultipart doesn't check request carefully [SPR-4229]","**[James Berry](https://jira.spring.io/secure/ViewProfile.jspa?name=jberry)** opened **[SPR-4229](https://jira.spring.io/browse/SPR-4229?redirect=false)** and commented  in CommonsMultipartResolver.isMultipart, the following call is made:      return ServletFileUpload.isMultipartContent(new ServletRequestContext(request));  instead, this call should be made:      return ServletFileUpload.isMultipartContent(request);  Not only does this save an object allocation, but it actually works: the ServletRequestContext is wrapped around the request in the first call doesn't have enough information to do a good test of the request to determine whether it actually is multipart. In particular, the request type is not verified to be a post, which results in a hang during processing of what ends up being a bogus multipart request due to a redirect, for instance.  The second call (without the ServletRequestContext wrapper) does a more thorough check of the request to verify that it is actually valid.  The described problem manifests for me when when I do a 303 redirect from a POSTed form. For some browsers, the subsequent GET operation continues to include the content-type multipart header, which triggers a sequence of events leading to a read that HANGS on a kept-alive request as the servlet tries to parse the bogus multipart content.    ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2007-12-07T02:56:36Z","2019-01-12T16:51:16Z"
"","8906","CommonsMultipartResolver should call ServletFileUpload.isMultipartContent(HttpServletRequest) [SPR-4228]","**[James Berry](https://jira.spring.io/secure/ViewProfile.jspa?name=jberry)** opened **[SPR-4228](https://jira.spring.io/browse/SPR-4228?redirect=false)** and commented  in CommonsMultipartResolver.isMultipart, the following call is made:      return ServletFileUpload.isMultipartContent(new ServletRequestContext(request));  instead, this call should be made:      return ServletFileUpload.isMultipartContent(request);  Not only does this save an object allocation, but its actually works: the ServletRequestContext is wrapped around the request in the first call doesn't have enough information to do a good test of the request to determine whether it actually is multipart. In particular, the request type is not verified to be a post, which results in a hang during processing of what ends up being a bogus multipart request due to a redirect, for instance.  The second call (without the ServletRequestContext wrapper) does a more thorough check of the request to verify that it is actually valid.  The described problem manifests for me when when I do a 303 redirect from a posted form. For some browsers, the subsequent GET operation continues to include the content-type multipart header, which triggers a sequence of events leading to a read that HANGS on a kept-alive request as the servlet tries to parse the bogus multipart content.  ---  **Affects:** 2.0.7, 2.5 final  **Issue Links:** - #9525 Safari 3.x problem with redirect after file upload  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","in: core,","spring-projects-issues","2007-12-07T02:54:01Z","2019-01-11T17:00:08Z"
"","9859","Intercept FactoryBean for bean() PCD  [SPR-5186]","**[Jakub Milkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=miluch)** opened **[SPR-5186](https://jira.spring.io/browse/SPR-5186?redirect=false)** and commented  Hi I just come across a strange  (buggy) behavior of bean() PCD - if bean we want to advice is created by FactoryBean both factory and its product are adviced! Code:  \	 	\	 	\ 		\			 	\  Code:  public class Factory implements FactoryBean { public Object getObject() throws Exception {         return new Bean(); } public Class getObjectType() { return Bean.class; } public boolean isSingleton() { return true; } }  Code:  public class Bean { public void doSth(){ System.out.println(""doSth""); } }  Code:  public class SysOutInterceptor implements MethodInterceptor {      public Object invoke( MethodInvocation arg0 ) throws Throwable {         String methodKey = createMethodKey(arg0);         System.out.println(""pre "" + methodKey );         Object result = arg0.proceed();         System.out.println(""post "" + methodKey );         return result;     }          private String createMethodKey(MethodInvocation invocation) {         StringBuilder result = new StringBuilder();         String methodName = invocation.getMethod().getName();         String className = invocation.getMethod().getDeclaringClass().getName();         int lastDotIndex = className.lastIndexOf('.');         if (lastDotIndex > 0) {             className = className.substring(lastDotIndex + 1);         }                 result.append(className);         result.append('.');         result.append(methodName);         return result.toString();     }  }  If i just ran my code by Code:      ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(""context.xml"");        Bean bean = (Bean) applicationContext.getBean( ""beanTo"" );        bean.doSth();  I see on my console:  pre FactoryBean.isSingleton post FactoryBean.isSingleton pre FactoryBean.getObject post FactoryBean.getObject pre Bean.doSth doSth post Bean.doSth  ASFAIK ""&beanTo""  means factory itself but ""beanTo"" is a factory product.    ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-09-29T21:07:53Z","2012-06-19T03:47:39Z"
"","9536","Negation with bean PCD  [SPR-4860]","**[Jakub Milkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=miluch)** opened **[SPR-4860](https://jira.spring.io/browse/SPR-4860?redirect=false)** and commented  Negation with bean PCD does not seems to work. My intention is to have some of the beans excluded from being intercepted, i.e intercept all beans having name with suffix ""Manager"" except for beans with name transactionManager  or cacheManager.  Please take a look at the following example:  \     \       \         Intercepts both beans: beanDAO and sssDAO.  Switching ""or"" to ""and"" :     intercepts no beans.    ---  **Affects:** 2.5.3, 2.5.4","closed","in: core,","spring-projects-issues","2008-05-25T01:09:05Z","2012-06-19T03:47:20Z"
"","9868","JpaTransactionManager does not support transaction timeouts [SPR-5195]","**[Jacques Couzteau](https://jira.spring.io/secure/ViewProfile.jspa?name=couzteau)** opened **[SPR-5195](https://jira.spring.io/browse/SPR-5195?redirect=false)** and commented  Transactions do not time out even the time out is specified. I use org.springframework.orm.jpa.JpaTransactionManager  I tried annotations on methods, i.e. `@Transactional`(readOnly = false, timeout = 1) public interface MyService {...}  as well as the property on the bean: \ \ \ \  The timeout never triggers a rollback.  Also see this thread: http://forum.springframework.org/showthread.php?t=60517  My EntityManagerFactoryBean: \ \ \ \ \ \  \ \  my datasource, but I also tried with other datasources in order to run independent of JBoss, i.e. Tomcat and jetty.     ---  **Affects:** 2.5.5  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/45dc856993d43abcb4126818a94b68f2bbdb0f80","closed","type: enhancement,","spring-projects-issues","2008-10-02T04:47:52Z","2012-06-19T03:47:00Z"
"","9198","grammar error in section 4.7.2.1 [SPR-4521]","**[Iwein Fuld](https://jira.spring.io/secure/ViewProfile.jspa?name=iwein)** opened **[SPR-4521](https://jira.spring.io/browse/SPR-4521?redirect=false)** and commented  In the documentation on Ant style patterns the wrong person is used: ""parse"" should be ""parses""   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-02-28T20:18:44Z","2012-06-19T03:46:46Z"
"","9179","is not completely documented in chapter 3.2.2.1 [SPR-4502]","**[Iwein Fuld](https://jira.spring.io/secure/ViewProfile.jspa?name=iwein)** opened **[SPR-4502](https://jira.spring.io/browse/SPR-4502?redirect=false)** and commented  In chapter 3.2.2.1. I expect a reference at least to the option of using ""classpath:.."" etc to reference files in higher paths. This is something that can be confusing so it should be clearly documented.   ---  **Affects:** 2.5.1","closed","in: core,","spring-projects-issues","2008-02-26T00:57:13Z","2012-06-19T03:47:38Z"
"","9251","Sharing read-only Hibernate session in view [SPR-4574]","**[Ivo Danihelka](https://jira.spring.io/secure/ViewProfile.jspa?name=fidlej)** opened **[SPR-4574](https://jira.spring.io/browse/SPR-4574?redirect=false)** and commented  I going to attach an implementation of servlet filter that enables sharing of Hibernate session among read-only transactions.  It is basically enhanced version of OpenSessionInViewFilter with singleSession=false. The advantages are: * All read-only transactions share just one Hibernate session and DB connection.   It is important resource optimization for deferred session closing.  * The first level cache is shared inside the single read-only Hibernate session.  The filter could be used without Spring source code modification, but it would be nice to have similar functionality included inside Spring.    ---  **Attachments:** - [SharingHibernateTransactionManager.java](https://jira.spring.io/secure/attachment/13773/SharingHibernateTransactionManager.java) (_6.48 kB_) - [SharingSessionInViewFilter.java](https://jira.spring.io/secure/attachment/13772/SharingSessionInViewFilter.java) (_3.72 kB_)","closed","type: enhancement,","spring-projects-issues","2008-03-12T22:50:28Z","2012-06-19T09:36:11Z"
"","9729","NamedParameterUtils.parseSqlStatement: quotes inside a comment block [SPR-5054]","**[Ilya Lenyov](https://jira.spring.io/secure/ViewProfile.jspa?name=ilya.lenyov)** opened **[SPR-5054](https://jira.spring.io/browse/SPR-5054?redirect=false)** and commented  Let's consider the following (very simplified) sql snippet:  /* my comment' **/  pkey=:parameter  /** my comment' */ pkey=:parameter  NamedParameterJdbcOperations is expected to set all the named parameters, but have a look at the output of the code below:  ---  ParsedSql parsedSql = NamedParameterUtils.parseSqlStatement(""/* my comment' **/  pkey=:parameter  /** my comment' */ pkey=:parameter""); HashMap map = new HashMap(); map.put(""parameter"", 0);  String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, new MapSqlParameterSource(map)); System.out.println(sqlToUse);  ---  The output is as follows:  /* my comment' **/  pkey=:parameter  /** my comment' */ pkey=?  which means that the user will get something similar to ""ORA-01008: not all variables bound"" exception due to "":parameter"" not being replaced properly in the actual sql.  However silly the comment may look, I believe that the users should be allowed to specify whatever they want inside a comment block.  Thanks  ---  **Affects:** 2.0.6  **Issue Links:** - #9466 NamedParameterUtils.parseSqlStatement is oblivious to SQL comments","closed","type: enhancement,","spring-projects-issues","2008-08-01T03:35:44Z","2019-01-13T21:51:49Z"
"","9788","ClassPathResource protected constructor should do StringUtils.cleanPath(path) as public constructors do. [SPR-5115]","**[Igor E. Poteryaev](https://jira.spring.io/secure/ViewProfile.jspa?name=potter_ru)** opened **[SPR-5115](https://jira.spring.io/browse/SPR-5115?redirect=false)** and commented  Protected constructor in ClassPathResource, which is called from createRelative() does not clean path parameter as public constructors do. I think that it is inconsistent and add unneeded complication in createRelative() API usage.  Supposed fix is 1-liner. Change line 107 in  org.springframework.core.io.ClassPathResource.java from this.path = path; to this.path = StringUtils.cleanPath(path);  And add test for this fix to org.springframework.core.io.ResourceTests method testClassPathResource():      public void testClassPathResource() throws IOException {     	Resource resource = new ClassPathResource(""org/springframework/core/io/Resource.class"");     	doTestResource(resource);     	Resource resource2 = new ClassPathResource(""org/springframework/core/../core/io/./Resource.class"");     	assertEquals(resource, resource2);  //++++ Resource resource3 = new ClassPathResource(""org/springframework/core/"").createRelative(""../core/io/./Resource.class""); assertEquals(resource, resource3); //==== // Check whether equal/hashCode works in a HashSet. HashSet resources = new HashSet(); resources.add(resource); resources.add(resource2); assertEquals(1, resources.size()); }  Cheers, Igor.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-08-24T17:53:20Z","2012-06-19T03:47:37Z"
"","9636","StatementCreatorUtils doesn't fully use Calendar when SqlTypeValue.TYPE_UNKNOWN [SPR-4961]","**[Ian Brandt](https://jira.spring.io/secure/ViewProfile.jspa?name=ibrandt)** opened **[SPR-4961](https://jira.spring.io/browse/SPR-4961?redirect=false)** and commented  When using a Calendar as a statement parameter to any of the related JdbcOperations, and without also specifying a java.sql.Types value, StatementCreatorUtils doesn't pass the Calendar to PreparedStatement.setTimestamp.  This prevents the user from controlling the time zone to be used by the driver.  When specifying Types.TIME, DATE or TIMESTAMP the Calendar is passed to setTimestamp.  Per the principal of least surprise it should also be passed when the SQL type is inferred.   ---  **Affects:** 2.5.5  **Attachments:** - [StatementCreatorUtils.java.1.36.patch](https://jira.spring.io/secure/attachment/14257/StatementCreatorUtils.java.1.36.patch) (_534 bytes_)","closed","in: core,","spring-projects-issues","2008-06-26T12:28:21Z","2012-06-19T03:46:37Z"
"","9584","More comprehensible setRollbackOnly [SPR-4908]","**[Hideyuki Suzumi](https://jira.spring.io/secure/ViewProfile.jspa?name=slopetown)** opened **[SPR-4908](https://jira.spring.io/browse/SPR-4908?redirect=false)** and commented  Currently, setRollbackOnly is a little complex.      TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();  I want a shorter notation.  Example:      TransactionAspectSupport.setRollbackOnly();          TransactionUtils.setRollbackOnly();    ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-06-10T20:13:01Z","2012-06-19T09:36:22Z"
"","9582","Document  [SPR-4906]","**[Hideyuki Suzumi](https://jira.spring.io/secure/ViewProfile.jspa?name=slopetown)** opened **[SPR-4906](https://jira.spring.io/browse/SPR-4906?redirect=false)** and commented  Currently, there is no description concerning  in the reference documentation.   ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-06-10T18:23:04Z","2012-06-19T03:47:23Z"
"","9555","Map SQL Error code 1222 in Microsoft SQL Server to CannotAcquireLockException [SPR-4879]","**[Hideyuki Suzumi](https://jira.spring.io/secure/ViewProfile.jspa?name=slopetown)** opened **[SPR-4879](https://jira.spring.io/browse/SPR-4879?redirect=false)** and commented  Currently, sql-error-codes.xml has no mapping for sql error code 1222 (lock request time out period exceeded) for sqlserver.  See http://msdn.microsoft.com/en-us/library/aa937593(SQL.80).aspx   ---  **Affects:** 2.0.8, 2.5.4  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-06-01T16:30:43Z","2012-06-19T03:46:48Z"
"","9554","CustomizableTraceInterceptor throws exception when $[arguments] contains ""\$"" [SPR-4878]","**[Hideyuki Suzumi](https://jira.spring.io/secure/ViewProfile.jspa?name=slopetown)** opened **[SPR-4878](https://jira.spring.io/browse/SPR-4878?redirect=false)** and commented  If $[arguments] contains ""\$"" then Matcher throws following exception.  Caused by: java.lang.IllegalArgumentException: Illegal group reference at java.util.regex.Matcher.appendReplacement(Unknown Source) at org.springframework.aop.interceptor.CustomizableTraceInterceptor.replacePlaceholders(CustomizableTraceInterceptor.java:341) at org.springframework.aop.interceptor.CustomizableTraceInterceptor.invokeUnderTrace(CustomizableTraceInterceptor.java:269) at org.springframework.aop.interceptor.AbstractTraceInterceptor.invoke(AbstractTraceInterceptor.java:110) ...   ---  **Affects:** 2.0.8, 2.5.4  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-06-01T11:36:02Z","2012-06-19T03:47:37Z"
"","9749","FileSystemUtils.copyRecursively does'nt handle special files [SPR-5075]","**[Hervé A.](https://jira.spring.io/secure/ViewProfile.jspa?name=herve)** opened **[SPR-5075](https://jira.spring.io/browse/SPR-5075?redirect=false)** and commented  With FileSystemUtils.copyRecursively, NullPointerException on line 60.  It's on a file which is neither a file, neither a directory.  The actual code (http://springframework.cvs.sourceforge.net/springframework/spring/src/org/springframework/util/FileSystemUtils.java?view=markup) is : if (file.isFile()) { 64 				newFile.createNewFile(); 65 				FileCopyUtils.copy(file, newFile); 66 			} 67 			else { 68 				copyRecursively(file, newFile); 69  ... so if a ""thing"" is not a file, the method is a directory, so goes in copyRecursively. But if the ""thing"" supposed to be a directory is not a directory, copyRecursively throw a NullPointerException line 60 with the list of this directory.  I propose this :  public static void copyRecursively(File src, File dest) throws IOException { dest.mkdir(); File[] entries = src.listFiles(); for (int i = 0; i < entries.length; i++) { File file = entries[i]; File newFile = new File(dest, file.getName()); if (file.isFile()) { newFile.createNewFile(); FileCopyUtils.copy(file, newFile); } else if (file.isDirectory()) { copyRecursively(file, newFile); } else System.out.println(""file '"" + file + ""' not file, nor directory.""); // nothing } }    ---  **Affects:** 2.5.4  1 votes, 2 watchers","closed","in: core,","spring-projects-issues","2008-08-09T03:01:11Z","2012-06-19T03:47:45Z"
"","9677","DefaultMessageListenerContainer isn't logging linked jms exception or destination [SPR-5002]","**[Henric Larsson](https://jira.spring.io/secure/ViewProfile.jspa?name=matherbiatch)** opened **[SPR-5002](https://jira.spring.io/browse/SPR-5002?redirect=false)** and commented  When the DefaultMessageListenerContainer catches a jms exception, it never logs the linked exception which is the exception that contains usable information when running Websphere MQ.  It would also be helpful if it included the destination name in the log output in order to identiy which destination failed.  Code snippet to illustrate how it could be done:  if(ex instanceof JMSException) { ex = new JMSException( String.format( ""JMS problem. Destination [%1$s], Linked ex: [%2$s]"", getDestinationName(), ((JMSException) ex).getLinkedException().getMessage() ) ); } logger.error(""Setup of JMS message listener invoker failed - trying to recover"", ex);    ---  **Affects:** 2.0.8, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-13T21:15:02Z","2012-06-19T03:47:27Z"
"","9541","java.lang.IllegalArgumentException: interface org.xml.sax.EntityResolver is not visible from class loader on Spring > 2.5.2 [SPR-4865]","**[Hendy Irawan](https://jira.spring.io/secure/ViewProfile.jspa?name=ceefour)** opened **[SPR-4865](https://jira.spring.io/browse/SPR-4865?redirect=false)** and commented  This problem did not occur with Spring Framework 2.5.2. I suspect this is due to (still) incorrect OSGi manifest in 2.5.3, 2.5.4, and 2.5.4.A.  The problem only occurs in combination with Spring-DM, and possibly Groovy or other technology that exercises this failure point.  Version of Spring-DM is irrelevant. (i.e. this bug occurs with any Spring-DM version, but specific to these Spring Framework versions)  [SpringOsgiExtenderThread-2] TRACE org.springframework.core.CollectionFactory - Creating [java.util.concurrent.ConcurrentHashMap] [SpringOsgiExtenderThread-2] DEBUG org.springframework.aop.framework.JdkDynamicAopProxy - Creating JDK dynamic proxy: target source is EmptyTargetSource: no target class, static [SpringOsgiExtenderThread-2] TRACE org.springframework.osgi.util.DebugUtils - Could not find class [org.xml.sax.EntityResolver] required by [x Engine(com.x.x.engine)] scanning available bundles [SpringOsgiExtenderThread-2] ERROR org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext - Pre refresh error java.lang.IllegalArgumentException: interface org.xml.sax.EntityResolver is not visible from class loader at java.lang.reflect.Proxy.getProxyClass(Proxy.java:353) at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581) at org.springframework.aop.framework.JdkDynamicAopProxy.getProxy(JdkDynamicAopProxy.java:117) at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:110) at org.springframework.osgi.context.support.TrackingUtil.getService(TrackingUtil.java:97) at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.lookupEntityResolver(OsgiBundleXmlApplicationContext.java:186) at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.createEntityResolver(OsgiBundleXmlApplicationContext.java:168) at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:122) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:423) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:191) at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:212) at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:163) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:125) at org.springframework.osgi.extender.internal.ContextLoaderListener$2.run(ContextLoaderListener.java:630) at java.lang.Thread.run(Thread.java:619) [SpringOsgiExtenderThread-2] DEBUG org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor - Closing appCtx for OsgiBundleXmlApplicationContext(bundle=com.x.x.engine, config=osgibundle:/META-INF/spring/*.xml) [SpringOsgiExtenderThread-2] DEBUG org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor - No need to stop context (it hasn't been started yet) [SpringOsgiExtenderThread-2] TRACE org.springframework.osgi.extender.internal.util.concurrent.Counter - counter [contextsStarted] decremented to 1 [SpringOsgiExtenderThread-2] ERROR org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor - Unable to create application context for [com.x.x.engine], unsatisfied dependencies: none java.lang.IllegalArgumentException: interface org.xml.sax.EntityResolver is not visible from class loader at java.lang.reflect.Proxy.getProxyClass(Proxy.java:353) at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581) at org.springframework.aop.framework.JdkDynamicAopProxy.getProxy(JdkDynamicAopProxy.java:117) at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:110) at org.springframework.osgi.context.support.TrackingUtil.getService(TrackingUtil.java:97) at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.lookupEntityResolver(OsgiBundleXmlApplicationContext.java:186) at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.createEntityResolver(OsgiBundleXmlApplicationContext.java:168) at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:122) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123) at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:423) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:191) at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:212) at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:163) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:125) at org.springframework.osgi.extender.internal.ContextLoaderListener$2.run(ContextLoaderListener.java:630) at java.lang.Thread.run(Thread.java:619) [SpringOsgiExtenderThread-4] TRACE org.springframework.osgi.context.support.DelegatedEntityResolver - Trying to resolve entity [null](http://www.springframework.org/schema/context/spring-context-2.5.xsd) through resolver LocalEntityResolver for bundle x Client Swing GUI (com.x.client.swing.forms) [SpringOsgiExtenderThread-4] TRACE org.springframework.beans.factory.xml.PluggableSchemaResolver - Trying to resolve XML entity with public id [null] and system id http://www.springframework.org/schema/context/spring-context-2.5.xsd [SpringOsgiExtenderThread-4] TRACE org.springframework.osgi.context.support.DelegatedEntityResolver - Entity [null](http://www.springframework.org/schema/context/spring-context-2.5.xsd) was not resolved through entity resolver LocalEntityResolver for bundle x Client Swing GUI (com.x.client.swing.forms)   ---  **Affects:** 2.5.3, 2.5.4","closed","in: core,","spring-projects-issues","2008-05-26T22:07:01Z","2012-06-19T03:46:46Z"
"","8993","readonly attribute for InputTag produces html code that violates W3C [SPR-4314]","**[Hayo](https://jira.spring.io/secure/ViewProfile.jspa?name=hayo)** opened **[SPR-4314](https://jira.spring.io/browse/SPR-4314?redirect=false)** and commented  First of all, the allowed values for String parameter of setReadonly are not documented, but they should be. It seems, that ""true"" and ""false"" are allowed. A value of ""readonly"" is not transposed into an html tag attribute. The input field is still editable.  By setting   an html tag  is produced. 'true' violates at least ""-//W3C//DTD XHTML 1.0 Strict//EN"" specification. It should print out   Most likely this also applies TextareaTag. (Package org.springframework.web)   ---  **Affects:** 2.0.6","closed","in: web,","spring-projects-issues","2008-01-09T21:23:58Z","2019-01-11T16:35:12Z"
"","9038","error of lazy initialisation of cycle references [SPR-4360]","**[Hauke Rabe](https://jira.spring.io/secure/ViewProfile.jspa?name=hrabe)** opened **[SPR-4360](https://jira.spring.io/browse/SPR-4360?redirect=false)** and commented  We use the BeanNameAutoProxyCreator for our service layer. The service beans can have cycle references. As default the proxy will be generated in ""postProcessAfterInitialization"", thats the time all depended beans are already populated. Because for cycle references the raw object will be populated, which is wrong in our case. So we use the LazyInitTargetSourceCreator. This will generate the proxy in ""postProcessBeforeInstantiation"" and all populated beans will be proxyed.  But there is an error for cycle references. The AbstractBeanFactoryBasedTargetSourceCreator has only one internalBeanFactory for all beans which will be generated over the LazyInitTargetSourceCreator. So the cycle references will be populated as raw objects.   ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2008-01-20T19:46:32Z","2012-06-19T03:46:52Z"
"","9003","component scanning incorrectly excludes classes [SPR-4324]","**[Haroon Rafique](https://jira.spring.io/secure/ViewProfile.jspa?name=haroon.rafique)** opened **[SPR-4324](https://jira.spring.io/browse/SPR-4324?redirect=false)** and commented  The version bump from 2.5 to 2.5.1 breaks component scanning for me. Symptoms are that lots of beans annotated with `@Component` are being skipped for inclusion as beans. After digging through the code, I think the following commit is the culprit:  http://fisheye1.cenqua.com/changelog/springframework?cs=MAIN:jhoeller:20080107164524  The commit message says:  added ""getEnclosingClassName()"", ""hasEnclosingClass()"" and ""isIndependent()"" methods to ClassMetadata interface; ClassPathScanningCandidateComponentProvider (""context:component-scan"") ignores non-static inner and local classes  I am not sure why beanDefinition.getMetadata().isIndependent() is returning false for my classes. The scenario is as follows:  MyBroker has `@Component` annotation. MyBroker uses a class MyService (regular instantiation) using something like: MyService service = new MyService() MyService, in turn, is the class which DOES have a local inner class. I think the bug is in identifying MyBroker as having an inner class. It should not identify MyBroker as having an inner class (since it doesn't have one).  ClassMetaDataReadingVisitor.java has the following method:      public boolean isIndependent() {     	return (this.enclosingClassName == null || this.independentInnerClass);     }  In that method, while trying to see if MyBroker is a candidate, enclosingClassName is set to MyService.  I think this needs a quick fix.  ---  **Affects:** 2.5.1  **Attachments:** - [spring-2.5.1-component-scanning-inner-class-bug-SPR-4324.zip](https://jira.spring.io/secure/attachment/13270/spring-2.5.1-component-scanning-inner-class-bug-SPR-4324.zip) (_4.92 kB_)  **Issue Links:** - #9134 Weird autowiring bug (_**""is duplicated by""**_) - #9029 context:annotation-config skips classes using inner classes in 2.5.1 (_**""is duplicated by""**_) - #9204 bug in context:component-scan when class have inner classes  (_**""is duplicated by""**_) - #9017 Classes with Inner classes are not recognized as independent classes themselves (_**""is duplicated by""**_) - #9363 `@Component` annotated class that contains a private non-static inner class not considered as candidate component because  beanDefinition.getMetadata().isIndependent() returns false (_**""is duplicated by""**_) - #9136 Component-scan does not work correctly for annotated service SimpleJdbcClinic in sample 'petclinic'","closed","in: core,","spring-projects-issues","2008-01-11T07:57:32Z","2019-01-13T08:05:54Z"
"","8910","@ManagedAttribute annotated getter shows up as an operation [SPR-4232]","**[Haroon Rafique](https://jira.spring.io/secure/ViewProfile.jspa?name=haroon.rafique)** opened **[SPR-4232](https://jira.spring.io/browse/SPR-4232?redirect=false)** and commented  From the example on: http://static.springframework.org/spring/docs/2.5.x/reference/jmx.html#jmx-interface-annotations  ``` package org.springframework.jmx;  import org.springframework.jmx.export.annotation.ManagedResource; import org.springframework.jmx.export.annotation.ManagedOperation; import org.springframework.jmx.export.annotation.ManagedAttribute;  @ManagedResource(objectName=""bean:name=testBean4"", description=""My Managed Bean"", log=true,     logFile=""jmx.log"", currencyTimeLimit=15, persistPolicy=""OnUpdate"", persistPeriod=200,     persistLocation=""foo"", persistName=""bar"") public class AnnotationTestBean implements IJmxTestBean {    private String name;   private int age;    @ManagedAttribute(description=""The Age Attribute"", currencyTimeLimit=15)   public int getAge() {     return age;   }    public void setAge(int age) {     this.age = age;   }    @ManagedAttribute(description=""The Name Attribute"",       currencyTimeLimit=20,       defaultValue=""bar"",       persistPolicy=""OnUpdate"")   public void setName(String name) {     this.name = name;   }    @ManagedAttribute(defaultValue=""foo"", persistPeriod=300)   public String getName() {     return name;   }    @ManagedOperation(description=""Add two numbers"")   @ManagedOperationParameters({     @ManagedOperationParameter(name = ""x"", description = ""The first number""),     @ManagedOperationParameter(name = ""y"", description = ""The second number"")})   public int add(int x, int y) {     return x + y;   }    public void dontExposeMe() {     throw new RuntimeException();   } } ```  age attribute shows up as read-only and name attribute as read-write. However, checking from jconsole, jmanage and mc4j (all behaved the same way), I noticed that the getAge operation and getName, setName operations were also exposed. Is there a reason for that? I am aware of #6885 but surely jconsole would not have a bug like ignoring the role?  ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-08T07:20:45Z","2019-01-11T17:04:16Z"
"","9780","Spring with Hibernate does not retrieve rows if the primary key is of type RAW(16) used along with Oracle pool in OC4J App server [SPR-5107]","**[Harish Pai](https://jira.spring.io/secure/ViewProfile.jspa?name=hpai)** opened **[SPR-5107](https://jira.spring.io/browse/SPR-5107?redirect=false)** and commented  I really don know whether is a bug or not.  This is what I am doing. I am doing a simple HQL query on a table to retrieve a row base on primary key on Oracle. The primary key is of type RAW(16).  I have configured a  jndi-lookup    here is the applicaitonContext.xml  \  \                                    	     	     		     			ObstEvalPrsnl.hbm.xml          	     	     		     			org.hibernate.hql.classic.ClassicQueryTranslatorFactory     			org.hibernate.dialect.Oracle10gDialect     			true     			     		     	                    	                      	                                           	     	                      \  The problem is that it just DOES NOT return any row even though the row exists in the database. I have observed that this happens only with Oracle RAW(16) field which is primary key.  I would appreciate if   ---  **Affects:** 2.5.2","closed","","spring-projects-issues","2008-08-20T05:08:45Z","2019-01-11T15:33:42Z"
"","9014","{portlet-mvc, annotation based} SimpleMappingingExceptionResolver does not handle caught exceptions correctly [SPR-4335]","**[Hans Westerbeek](https://jira.spring.io/secure/ViewProfile.jspa?name=hanswesterbeek)** opened **[SPR-4335](https://jira.spring.io/browse/SPR-4335?redirect=false)** and commented  This issue is identical to: http://jira.springframework.org/browse/SPR-4235 except the fix has not been propagated to portlet-mvc.  The problem finally affects the user by making it impossible to let SimpleMappingingExceptionResolver map the configurated error view. Instead it falls back to the default error view.  Stacktrace:  2008-01-15 10:18:24,646 WARN [org.springframework.web.portlet.DispatcherPortlet] -  java.lang.IllegalStateException: Unexpected exception thrown at org.springframework.util.ReflectionUtils.handleUnexpectedException(ReflectionUtils.java:290) at org.springframework.util.ReflectionUtils.rethrowRuntimeException(ReflectionUtils.java:260) at org.springframework.util.ReflectionUtils.handleInvocationTargetException(ReflectionUtils.java:239) at org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter.doHandle(AnnotationMethodHandlerAdapter.java:233) at org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter.handleAction(AnnotationMethodHandlerAdapter.java:148) at org.springframework.web.portlet.DispatcherPortlet.doActionService(DispatcherPortlet.java:694) at org.springframework.web.portlet.FrameworkPortlet.processRequest(FrameworkPortlet.java:484) at org.springframework.web.portlet.FrameworkPortlet.processAction(FrameworkPortlet.java:466) at org.apache.pluto.core.PortletServlet.dispatch(PortletServlet.java:218) at org.apache.pluto.core.PortletServlet.doGet(PortletServlet.java:139) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672) at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:574) at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:499) at org.apache.pluto.core.DefaultPortletInvokerService.invoke(DefaultPortletInvokerService.java:167) at org.apache.pluto.core.DefaultPortletInvokerService.action(DefaultPortletInvokerService.java:85) at org.apache.pluto.core.PortletContainerImpl.doAction(PortletContainerImpl.java:219) at org.apache.pluto.driver.PortalDriverServlet.doGet(PortalDriverServlet.java:112) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:524) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.authenticator.SingleSignOn.invoke(SingleSignOn.java:419) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:619) Caused by: nl.neteffect.dtg.datafabriek.service.NoMoreContactsLeftException at nl.neteffect.dtg.datafabriek.service.CustomerServiceImpl.popContact(CustomerServiceImpl.java:199) at sun.reflect.GeneratedMethodAccessor248.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:301) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.remoting.support.RemoteInvocationTraceInterceptor.invoke(RemoteInvocationTraceInterceptor.java:70) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy18.popContact(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.remoting.support.RemoteInvocation.invoke(RemoteInvocation.java:205) at org.springframework.remoting.support.DefaultRemoteInvocationExecutor.invoke(DefaultRemoteInvocationExecutor.java:38) at org.springframework.remoting.support.RemoteInvocationBasedExporter.invoke(RemoteInvocationBasedExporter.java:78) at org.springframework.remoting.support.RemoteInvocationBasedExporter.invokeAndCreateResult(RemoteInvocationBasedExporter.java:114) at org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter.handleRequest(HttpInvokerServiceExporter.java:74) at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:874) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:808) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:476) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:441) at javax.servlet.http.HttpServlet.service(HttpServlet.java:710) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:269) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:151) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:874) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689) at java.lang.Thread.run(Thread.java:619) at org.springframework.remoting.support.RemoteInvocationUtils.fillInClientStackTraceIfPossible(RemoteInvocationUtils.java:47) at org.springframework.remoting.support.RemoteInvocationResult.recreate(RemoteInvocationResult.java:115) at org.springframework.remoting.support.RemoteInvocationBasedAccessor.recreateRemoteInvocationResult(RemoteInvocationBasedAccessor.java:85) at org.springframework.remoting.httpinvoker.HttpInvokerClientInterceptor.invoke(HttpInvokerClientInterceptor.java:163) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy4.popContact(Unknown Source) at nl.neteffect.dtg.promopages.backend.controller.DataEntryController.selectContact(DataEntryController.java:115) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter.doHandle(AnnotationMethodHandlerAdapter.java:230) ... 35 more  ---  **Affects:** 2.5.1  **Issue Links:** - #8913 [AnnotationMethodHandlerAdapter] Improve handling of InvocationTargetExceptions (_**""duplicates""**_)","closed","in: web,","spring-projects-issues","2008-01-14T19:24:26Z","2019-01-12T16:51:10Z"
"","9796","Proxies created by the JaxWsPortProxyFactoryBean do not implement javax.xml.ws.BindingProvider, which is required by the JAX-WS specification [SPR-5123]","**[Gyorgy Orban](https://jira.spring.io/secure/ViewProfile.jspa?name=gyorban)** opened **[SPR-5123](https://jira.spring.io/browse/SPR-5123?redirect=false)** and commented  See 4.2.3 of the JAX-WS specification. This bug prevents users from accessing the request and response context.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-08-28T03:06:46Z","2012-06-19T03:47:16Z"
"","9740","Quartz scheduler does not automatically stop on tomcat shutdown  [SPR-5065]","**[guido schnider](https://jira.spring.io/secure/ViewProfile.jspa?name=guido)** opened **[SPR-5065](https://jira.spring.io/browse/SPR-5065?redirect=false)** and commented  The scheduler threads hang and I have to kill tomcat manually. I use tomcat-6.0.16 spring 2.5.1 and java 1.6  When I manually call the bean destroy method by looking up the bean everything work fine.  \ \ 	\ 		\ 			\5\ 		\ 	\ 	\ \ 	\ \ \ \ \ \ \   --- No further details from [SPR-5065](https://jira.spring.io/browse/SPR-5065?redirect=false)","closed","in: core,","spring-projects-issues","2008-03-12T00:51:30Z","2019-01-12T16:28:02Z"
"","9787","Add ability to declare bean type and explicitely mark bean factories in XML configurations [SPR-5114]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-5114](https://jira.spring.io/browse/SPR-5114?redirect=false)** and commented  This is the description of my proposition for two small improvements of Spring XML configuration files in defaults schema (""beans"").  Description of the problem:  Let us first look at a fragment of typical configuration, here configuring JPA:  \ \ \ \ \ ... \  In Spring documentation and presentations it is often mentioned, that explicit configuration in XML has advantage of being kind of blueprint documentation of the application. So what we can find out reading this fragment? First, we have a bean of type LocalContainerEntityManagerFactoryBean. Suppose I want to inject reference to it in other bean. What type this reference should be? If I check quickly in JavaDoc, I will find out that it extends AbstractEntityManagerFactoryBean. I suppose that it implements JPA's EntityManagerFactory. But it doesn't. So I'm confused here. After more reading, I will find finally that it implements FactoryBean and returns EntityManagarFactory bean. But is is not visible at all from the configuration. I believe it should. Then I look at dataSource bean. It is of type org.apache.commons.dbcp.BasicDataSource. I want to inject it into my other bean. What should be type of injected field: BasicDataSource? I would say, in 90% of cases not, it should be standard jdbc DataSource. In most cases BasicDataSource configured by Spring no longer needs programatic access to its specific methods. But can I make my field  being of type BasicDataSource? Yes I can. Is it good way? Definitely not. It is not a good way, because if after some time somebody decides to put our application on some JDNI-aware server and retrieve dataSource bean from JNDI, than application will suddenly crash, because one of programmers (or more) declared injected filed as BasicDataSource instead of DataSource. But how on earth could he know? He saw bean of ""BasicDataSource"" in spring XML.  Solution: Solution consist of two improvements. Both of them must not be obligatory, because of backword compatibility. They introduce (almost) no behavioral changes, no logic etc. They purpose is purely to improve the XML configuration semantics, i.e. making XML more clear in the role of application blueprint.  1. If the bean implements BeanFactory interface, you can declare it as \ instead of \ (you can, don't have to). This has advantage that it is immediatelly visible looking into config file, that the returned bean will be not of the type of ""class"" attribute and cannot be cast to any of it supertypes. You must check instead what type this factory returns.  2. Add additional optional attribute ""type"" (or maybe ""castType"" or ""castTo"" or ...?) is added to \ and \. This is a hint for other developers that they should in most cases cast the bean to this type. If they do, then you can safely replace implementations of this type at any time, and you will not get any nasty problems with incompatible types at runtime.  Let's rewrite our example now:  \ \ \ \ \ ... \  Now I don't have to searching JavaDocs to find out what is this LocalContainerEntityManagerFactoryBean. I immediately see, that is is factoryBean, which returns EntityManagerFactory. And I am less afraid that one of programmers from my team declares injected dataSource bean somewhere in the code as BasicDataSource, becaue now everybody knows that the dataSource bean should be always referred to as javax.sql.DataSource. (Obviously the problem can still happen, sometimes you can really need some methods of BasicDataSource in your code. But now at least you were warned by the ""type"" attribute that you are doing it on you own risk and on your responsibility, so you must really have a good reason to do it.). This clearly states the intent of the person who put this declarations: ""I declare the bean emf of type EntityManagerFactory, implemented by LocalContaierEntityManagerFactoryBean factory. I declare dataSource bean of DataSource type, implemented by BasicDataSource. So there are really two beans here: EntityManagerFactory and DataSource"". You cannot say it looking at original configuration fragment.  This is almost purely semantical change. Almost, because we can add small change to Spring behavior: 1. If bean is declared as \ Spring will check if it implements BeanFactory (or we can decide that having such XML element it is no longer necessary to implement this interface); 2. If ""type"" attribute is declared, Spring will check if returned bean can be really casted to this type, and throw exception otherwise.  BTW: JavaConfig already implements improvement #2: Your `@bean` method explicitely declare the type of returned bean. I really like it, and I miss it in XML.   --- No further details from [SPR-5114](https://jira.spring.io/browse/SPR-5114?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-08-23T09:50:44Z","2015-09-22T17:34:38Z"
"","9778","AbstractApplicationContext.addApplicationListener() - beginning from which version it is present? [SPR-5105]","**[Grzegorz Borkowski](https://jira.spring.io/secure/ViewProfile.jspa?name=grzegorzborkowski)** opened **[SPR-5105](https://jira.spring.io/browse/SPR-5105?redirect=false)** and commented  I tried to run Spring Java Config with Spring 2.0.1, but class from JavaConfig throws NoSuchMethodError: org.springframework.context.support.AbstractApplicationContext.addApplicationListener.  So I thought that it must have been added in 2.5. Looked at Spring 2.0.1 jar and in fact there is no such method.  But if I go to JavaDoc for 2.5 there is no information ""since 2.5"" there: http://static.springframework.org/spring/docs/2.0.x/api/org/springframework/context/support/AbstractApplicationContext.html  If you go to JavaDoc 2.0, the method is listed, as if it was already in 2.0 (so why I get exception?) http://static.springframework.org/spring/docs/2.0.x/api/org/springframework/context/support/AbstractApplicationContext.html  On the other hand, here (that's what Google returned to me) there is no such method listed: http://docs.huihoo.com/javadoc/spring/2.0/org/springframework/context/support/AbstractApplicationContext.html#addApplicationListener(org.springframework.context.ApplicationListener)  I don't really know when this method really started, but definitely something is wrong with it in spring javadocs.   ---  **Affects:** 2.0 final, 2.5 final","closed","type: bug,","spring-projects-issues","2008-08-20T00:44:31Z","2012-06-19T03:47:33Z"
"","9432","HibernateTransactionManager uses `sessionFactory.openSession()` meaning that it is not aware of `hibernate.current_session_context_class` property [SPR-4755]","**[Gregory Klimov](https://jira.spring.io/secure/ViewProfile.jspa?name=grishaklimov)** opened **[SPR-4755](https://jira.spring.io/browse/SPR-4755?redirect=false)** and commented  HibernateTransactionManager uses `sessionFactory.openSession()` meaning that it is not aware of `hibernate.current_session_context_class` property. Additionally, `entityInterceptor` property may be removed from HibernateTransactionManager as it can be globally set at LocalSessionFactoryBean, which is fairly almost the same as setting up the same interceptor for any new created session.  ---  **Issue Links:** - #6471 Allow a custom session to be specified for a transaction in HibernateTransactionManager - #9431 TransactionSynchronizationManager can be made more configurable","closed","type: enhancement,","spring-projects-issues","2008-04-25T01:49:26Z","2019-01-11T18:00:19Z"
"","9431","TransactionSynchronizationManager can be made more configurable [SPR-4754]","**[Gregory Klimov](https://jira.spring.io/secure/ViewProfile.jspa?name=grishaklimov)** opened **[SPR-4754](https://jira.spring.io/browse/SPR-4754?redirect=false)** and commented  TransactionSynchronizationManager uses ThreadLocal to store values, but in some rare cases it not sufficient. It can be made more configurable by using interface (with for example set-, get-, remove- methods) instead of hardcoded ThreadLocal container. Setting this custom interface implementation for AbstractPlatformTransactionManager will increase area of application and effectively imrove configurability. The distribution default value for TransactionSynchronizationManager holder implementation for sure must be set to TreadLocal.  ---  **Issue Links:** - #9432 HibernateTransactionManager uses `sessionFactory.openSession()` meaning that it is not aware of `hibernate.current_session_context_class` property","closed","type: enhancement,","spring-projects-issues","2008-04-25T01:02:49Z","2019-01-11T18:00:14Z"
"","9808","Injected HttpServletRequest object in session-scoped bean should transparently access current request [SPR-5135]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-5135](https://jira.spring.io/browse/SPR-5135?redirect=false)** and commented  http://forum.springframework.org/showthread.php?t=59618  I've run into a situation where accessing anything from a HttpServletRequest object in my session scoped bean throws an exception. This happens for example if I try to set an attribute on the request object or get a cookie with WebUtils.  I've found that the problem is easily reproducible when refreshing a page that uses a session scoped bean heavily. If I refresh the page every few seconds it seems to work for a while but eventually I'll still run into a problem where the HttpServletRequest object is ""dead"". The problem is bad because the only way for the application to recover is to restart the EAR. Requesting the page again just results in the same exception over and over.  The exception I am seeing is: Caused by: java.lang.NullPointerException at com.ibm.ws.webcontainer.srt.SRTServletRequest$SRTServletRequestHelper.access$1500(SRTServletRequest.java:2232) at com.ibm.ws.webcontainer.srt.SRTServletRequest.parseParameters(SRTServletRequest.java:1420) at com.ibm.ws.webcontainer.srt.SRTServletRequest.getParameter(SRTServletRequest.java:1090) at javax.servlet.ServletRequestWrapper.getParameter(ServletRequestWrapper.java:203) at org.springframework.security.wrapper.SavedRequestAwareWrapper.getParameter(SavedRequestAwareWrapper.java:261)  I've also tried removing Spring Security to reduce the variables in this problem but that had no effect.  My session scoped bean makes heavy use of: `@Autowired` private HttpServletRequest request;    ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-09-02T03:22:40Z","2012-06-19T03:47:28Z"
"","9230","shortcut could perform default home interface narrowing on WAS 5.1 [SPR-4553]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-4553](https://jira.spring.io/browse/SPR-4553?redirect=false)** and commented  I started converting over my non-jee namspace XML definitions for my remote EJB looksups to:    from: \ \  \ \ \ \ \com.ibm.websphere.naming.WsnInitialContextFactory\ \iiop://localhost:2809\ \ \ \ \ \ \ \        however when I use the jee namespace method I get this stacktrace: 6/08 22:31:17:878 GMT] 18c8f3a3 InternalGener I DSRA8206I: JDBC driver version  : 10.2.0.3.0 [3/6/08 22:31:18:288 GMT] 18c8f3a3 WebGroup      E SRVE0026E: [Servlet Error]-[Request processing failed; nested exception is org.springframework.remoting.RemoteProxyFailureException: No matching RMI stub method found for: public abstract java.util.HashMap com.xxx.cwp.propertymgr.ejb.CwpPropertyManager.retrieveSiteLocaleProperties(com.xxx.cwp.propertymgr.to.PropertyTO) throws java.rmi.RemoteException,com.xxx.cwp.CoreException; nested exception is java.lang.NoSuchMethodException: com.xxx.cwp.propertymgr.ejb._CwpPropertyManager_Stub.retrieveSiteLocaleProperties(com.xxx.cwp.propertymgr.to.PropertyTO)]: org.springframework.remoting.RemoteProxyFailureException: No matching RMI stub method found for: public abstract java.util.HashMap com.xxx.cwp.propertymgr.ejb.CwpPropertyManager.retrieveSiteLocaleProperties(com.xxx.cwp.propertymgr.to.PropertyTO) throws java.rmi.RemoteException,com.xxx.cwp.CoreException; nested exception is java.lang.NoSuchMethodException: com.xxx.cwp.propertymgr.ejb._CwpPropertyManager_Stub.retrieveSiteLocaleProperties(com.xxx.cwp.propertymgr.to.PropertyTO) at org.springframework.remoting.rmi.RmiClientInterceptorUtils.doInvoke(RmiClientInterceptorUtils.java:115) at org.springframework.ejb.access.SimpleRemoteSlsbInvokerInterceptor.doInvoke(SimpleRemoteSlsbInvokerInterceptor.java:76) at org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor.invoke(AbstractRemoteSlsbInvokerInterceptor.java:140) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy10.retrieveSiteLocaleProperties(Unknown Source) at com.xxx.tool.promotion.web.usdrtv.controller.USDrtvRegistrationFormController.loadProperties(USDrtvRegistrationFormController.java:168) at com.xxx.tool.promotion.web.usdrtv.controller.USDrtvRegistrationFormController.referenceData(USDrtvRegistrationFormController.java:79) at org.springframework.web.servlet.mvc.AbstractFormController.showForm(AbstractFormController.java:574) at org.springframework.web.servlet.mvc.SimpleFormController.showForm(SimpleFormController.java:198) at org.springframework.web.servlet.mvc.SimpleFormController.showForm(SimpleFormController.java:175) at org.springframework.web.servlet.mvc.AbstractFormController.showNewForm(AbstractFormController.java:338) at org.springframework.web.servlet.mvc.AbstractFormController.handleRequestInternal(AbstractFormController.java:278) at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153) at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)  What's interesting is I do have another application running on WAS 5.1 that is using the jee short-hand notation with the SAME EJB and that works fine. I'm not sure why this one is having problems defining the EJB reference using the short-hand way when the long explicit way is working.  I believe I ran into something like this with spring 2.5.1 where it was incorrectly looking at stub classes.    ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-06T08:37:47Z","2008-03-20T05:02:13Z"
"","8998","Local Websphere EJB lookup fails in 2.5.1 and worked in 2.5.0 [SPR-4319]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-4319](https://jira.spring.io/browse/SPR-4319?redirect=false)** and commented  In Spring 2.5.0, we had a local EJB being looked up with this spring definition:    In spring 2.5.1, it appears that Spring is referencing the wrong class on the EJB to make method calls. The exception is:  java.lang.NoSuchMethodException: com.bc.dctm.webcache.ejb.EJSLocalStatelessWebCacheManagerHome_940a93c6.query(java.lang.String, java.lang.String, java.util.List, java.lang.String) [1/10/08 19:48:08:505 GMT] 42193c4c SystemErr     R 	at java.lang.Class.getMethod(Class.java(Compiled Code)) [1/10/08 19:48:08:505 GMT] 42193c4c SystemErr     R 	at org.springframework.ejb.access.LocalSlsbInvokerInterceptor.invoke(LocalSlsbInvokerInterceptor.java:73) [1/10/08 19:48:08:505 GMT] 42193c4c SystemErr     R 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) [1/10/08 19:48:08:505 GMT] 42193c4c SystemErr     R 	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) [1/10/08 19:48:08:506 GMT] 42193c4c SystemErr     R 	at $Proxy1.query(Unknown Source) [1/10/08 19:48:08:506 GMT] 42193c4c SystemErr     R 	at com.roche.cwp.tool.expertpanel.dao.documentum.ExpertPanelContentDAODocumentum.retrieveContent(ExpertPanelContentDAODocumentum.java:174)  The call being made is: wcoList = getWebcacheManager().query(webcacheInstance, query, values, sortBy);  However, if looking in the generated EJB class EJSLocalStatelessWebCacheManagerHome_940a93c6 referenced above, there are only two methods: create and remove. It seems odd that Spring is looking at this WebCacheManagerHome class when it should be looking at this other generated class: EJSLocalStatelessWebCacheManager_940a93c6 which has our query method in it.  The interface we reference com.bc.dctm.webcache.ejb.WebCacheManagerLocal is correct and it's the local business interface. We have also tried writing our EJB spring element like:  \ \ \ \ \ \com.ibm.websphere.naming.WsnInitialContextFactory\ \iiop://localhost:2809\ \ \ \ \        but we receive the same issue.   ---  **Affects:** 2.5.1","closed","in: core,","spring-projects-issues","2008-01-10T05:54:23Z","2012-06-19T03:47:33Z"
"","8954","Spring 2.5's ContextLoader fails to load on server start but will load if app is stopped and restarted [SPR-4276]","**[Grant Gochnauer](https://jira.spring.io/secure/ViewProfile.jspa?name=grant.gochnauer)** opened **[SPR-4276](https://jira.spring.io/browse/SPR-4276?redirect=false)** and commented  I have a Spring web application that fails to load the ContextLoader when the server starts the first time. The logs are:  [12/21/07 13:46:34:327 EST] 23ad8504 ValidatorPlug I org.apache.struts.validator.ValidatorPlugIn  Loading validation rules file from '/WEB-INF/validation.xml' [12/21/07 13:46:34:612 EST] 23ad8504 TilesPlugin   I org.apache.struts.tiles.TilesPlugin  Factory already exists for module ''. The factory found is from module ''. No new creation. [12/21/07 13:46:35:057 EST] 23ad8504 WebGroup      I SRVE0180I: [accu-chek.co.uk-web] [/gb] [Servlet.LOG]: UKSpring: init [12/21/07 13:46:35:195 EST] 23ad8504 WebGroup      I SRVE0180I: [accu-chek.co.uk-web] [/gb] [Servlet.LOG]: Initializing Spring FrameworkServlet 'UKSpring' [12/21/07 13:46:35:195 EST] 23ad8504 DispatcherSer I org.springframework.web.servlet.DispatcherServlet  FrameworkServlet 'UKSpring': initialization started [12/21/07 13:46:35:291 EST] 23ad8504 XmlWebApplica I org.springframework.web.context.support.XmlWebApplicationContext  Refreshing org.springframework.web.context.support.XmlWebApplicationContext@2f4d0529: display name [WebApplicationContext for namespace 'UKSpring-servlet']; startup date [Fri Dec 21 13:46:35 EST 2007]; root of context hierarchy [12/21/07 13:46:35:766 EST] 23ad8504 XmlBeanDefini I org.springframework.beans.factory.xml.XmlBeanDefinitionReader  Loading XML bean definitions from ServletContext resource [/WEB-INF/UKSpring-servlet.xml] [12/21/07 13:46:35:894 EST] 23ad8504 XmlBeanDefini I org.springframework.beans.factory.xml.XmlBeanDefinitionReader  Loading XML bean definitions from ServletContext resource [/WEB-INF/ancillaryproducts-servlet.xml] [12/21/07 13:46:35:964 EST] 23ad8504 XmlBeanDefini I org.springframework.beans.factory.xml.XmlBeanDefinitionReader  Loading XML bean definitions from ServletContext resource [/WEB-INF/quickpromo-servlet.xml]  Now if I go into the WAS console and stop the EAR with this web application and then start it again leaving the server running, the ContextLoader loads correctly. Here is the log after the EAR start/stop:  [12/21/07 14:48:46:948 EST] 6d1c4ccb WebContainer  A SRVE0169I: Loading Web Module: accu-chek.co.uk-web. [12/21/07 14:48:47:718 EST] 6d1c4ccb ComponentName W CNTR0063W: A reference to an EJB could not be found in the deployment descriptor for the WebApp or EnterpriseBean with the display name ""accu-chek.co.uk-web"". The EJB may have specified binding information that is not valid. [12/21/07 14:48:47:757 EST] 6d1c4ccb WebGroup      I SRVE0180I: [accu-chek.co.uk-web] [/gb] [Servlet.LOG]: Set web app root system property: 'webapp.root' = [/opt/WebSphere/AppServer/installedApps/rcnusas212Network/Accu-ChekPhaseThreeEar.ear/accu-chek.co.uk-web.war] [12/21/07 14:48:47:912 EST] 6d1c4ccb WebGroup      I SRVE0180I: [accu-chek.co.uk-web] [/gb] [Servlet.LOG]: Initializing Spring root WebApplicationContext [12/21/07 14:48:47:914 EST] 6d1c4ccb ContextLoader I org.springframework.web.context.ContextLoader  Root WebApplicationContext: initialization started [12/21/07 14:48:48:060 EST] 6d1c4ccb XmlWebApplica I org.springframework.web.context.support.XmlWebApplicationContext  Refreshing org.springframework.web.context.support.XmlWebApplicationContext@48260ce9: display name [Root WebApplicationContext]; startup date [Fri Dec 21 14:48:48 EST 2007]; root of context hierarchy [12/21/07 14:48:48:230 EST] 6d1c4ccb XmlBeanDefini I org.springframework.beans.factory.xml.XmlBeanDefinitionReader  Loading XML bean definitions from class path resource [applicationContext.xml]  Notice how in the 2nd log trace that we have this line: [12/21/07 14:48:47:914 EST] 6d1c4ccb ContextLoader I org.springframework.web.context.ContextLoader  Root WebApplicationContext: initialization started  In the first log it appears that Spring is skipping loading of the applicationContext.xml located in the root of the source folder for that web app.  The web.xml is: \ \contextConfigLocation\ \classpath:/applicationContext.xml\ \ \ \org.springframework.web.context.ContextLoaderListener\ \  \ \UKSpring\ \org.springframework.web.servlet.DispatcherServlet\ \3\ \ I'm really at a loss why Spring would load properly after a stop/restart and not when the server is started the first time   ---  **Affects:** 2.5 final  **Attachments:** - [SystemOut.log](https://jira.spring.io/secure/attachment/13230/SystemOut.log) (_249.30 kB_)","closed","status: declined,","spring-projects-issues","2007-12-21T06:23:07Z","2019-01-12T16:39:23Z"
"","9640","Add JdbcTemplate.queryForObject(String, PreparedStatementSetter, RowMapper ) [SPR-4965]","**[Glenn Gilbert](https://jira.spring.io/secure/ViewProfile.jspa?name=glenn2041)** opened **[SPR-4965](https://jira.spring.io/browse/SPR-4965?redirect=false)** and commented  Currently, the 'queryForObject' series there is not a method that includes a PreparedStatementSetter.  There are options such as queryForObject(String,Object[],RowMapper), but it doesn't allow other features of accessing a preparedStatement. (ie ps.setMaxRows(n) etc)  the code would be:  \ /** * Query given SQL to create a prepared statement from SQL and a * PreparedStatementSetter implementation that knows how to bind values to the * query, mapping a single result row to a Java object via a RowMapper. *  * `@param` sql SQL query to execute * `@param` pss object that knows how to set values on the prepared statement. *         If this is null, the SQL will be assumed to contain no bind  *         parameters. Even if there are no bind parameters, this object may be  *         used to set fetch size and other performance options.  * `@param` rowMapper object that will map one object per row * `@return` the single mapped object * `@throws` IncorrectResultSizeDataAccessException if the query does not return *         exactly one row DataAccessException if the query fails  */ public Object queryForObject(String sql, PreparedStatementSetter pss, RowMapper rowMapper) throws DataAccessException {      List results = getJdbcTemplate().query(sql, pss, rowMapper);     return DataAccessUtils.singleResult(results);  } \  ---  No further details from [SPR-4965](https://jira.spring.io/browse/SPR-4965?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-06-28T20:01:05Z","2019-01-13T08:03:29Z"
"","8929","transactionSynchronization leads to DefaultMessageListenerContainer not receiving message in XA transaction [SPR-4251]","**[Gerald Loeffler](https://jira.spring.io/secure/ViewProfile.jspa?name=geraldloeffler)** opened **[SPR-4251](https://jira.spring.io/browse/SPR-4251?redirect=false)** and commented  Summary:  I'm using DefaultMessageListenerContainer to have an MDP listen on a JBoss queue (within JBoss) using XA transactions, and i observe that when transactionSynchronization is not turned off on the JtaTransactionManager, then the JMS Connection is not enrolled in an XA transaction and hence the receipt of the message performed by DefaultMessageListenerContainer is not done in an XA transaction.  Details:  ---  \ \ \ \ \ \ \ \                                                                                   ---  The JMS ConnectionFactory looked up under java:/JmsXA is XA-capable.  What i want is an XA transaction to be begun through JBoss' transactionManager, the JMS message receive performed within that XA transaction and then the onMessage() of the MDP executed in that same transaction. The above snipped works correctly as expected. However, this only works if JtaTransactionManager.transactionSynchronizationName is explicitly turned off (to SYNCHRONIZATION_NEVER in the above example). Without turning off transactionSynchronization on the JtaTransactionManager, the JMS Connection does not seem to be enrolled in the XA transaction.  Proof:  we performed several tests that for us indicate clearly that JMS message receipt is not performed in the scope of the XA transaction in which onMessage() executes. However, this is hard to report here.  as an indication, however, the following log output may suffice. With the above configuration (which works) the log output is  ---  [listener.DefaultMessageListenerContainer: Received message of type [class org.jboss.resource.adapter.jms.JmsObjectMessage] from consumer [org.jboss.resource.adapter.jms.JmsMessageConsumer@14ecfa4] of session [org.jboss.resource.adapter.jms.JmsSession@185ded7]  ---  when transactionSynchronizationName is not set on JtaTransactionManager (and hence transactionSynchronization is on) the log output would be  ---  [listener.DefaultMessageListenerContainer: Received message of type [class org.jboss.resource.adapter.jms.JmsObjectMessage] from consumer [org.jboss.resource.adapter.jms.JmsMessageConsumer@14ecfa4] of transactional session [org.jboss.resource.adapter.jms.JmsSession@185ded7]  ---  This may indicate that a JMS-local transaction (rather than a JTA transaction) is used in the later case?  Now: the above configuration which explicitly turns of transactionSynchronization works but neither is it comprehensible to me why i would need to turn off transactionSynchronization nor do i understand what difference it makes for this usage nor is it documented anywhere that to use DefaultMessageListenerContainer with XA transactions you must turn off transactionSynchronization.  ---  **Affects:** 2.5 final","closed","in: data,","spring-projects-issues","2007-12-12T23:02:06Z","2019-01-13T22:40:54Z"
"","9561","ServletRequestAttributes may use wrong session in background thread [SPR-4885]","**[George Baxter](https://jira.spring.io/secure/ViewProfile.jspa?name=gjbaxter)** opened **[SPR-4885](https://jira.spring.io/browse/SPR-4885?redirect=false)** and commented  The ServletRequestAttributes.getSession call first tries to get the session from the request.  After that, it uses its own session reference.  The problem with this is when a background thread runs past the end of a request, the request.getSession may return null, UNLESS the request object is being reused, as it is in tomcat.  In that case, the object is now associated with a new session and getSession() will return another user's session to the background thread.  Basically, the getSession method should check first if the ServletRequestAttributes.session attribute is not null... if it is not null, use it!  Only hit the request if we need to build the session (allowCreate is true or the request may have allocated the session later).  Do not overwrite a valid session value.   ---  **Affects:** 2.5.2","closed","type: bug,","spring-projects-issues","2008-06-03T04:20:09Z","2012-06-19T03:47:37Z"
"","9334","ServletRequestAttributes assuming IllegalStateException is thrown in getSession() [SPR-4657]","**[George Baxter](https://jira.spring.io/secure/ViewProfile.jspa?name=gjbaxter)** opened **[SPR-4657](https://jira.spring.io/browse/SPR-4657?redirect=false)** and commented  I have a child thread spawning off.  The thread needs to access the mutex and/or other attributes in the ServletRequestAttributes.  The getSession() call from getSessionMutex() is calling request.getSession().  This value, in my case, is returning null (even though allowCreate is set to true).  This is because the parent request is complete.  However, an IllegalStateException is not being thrown.  We DO have the session, which is what we need, but then the line:  this.session = this.request.getSession(allowCreate);  wipes it out and we're dead in the water.  We should first check to see if the session returned from the request is null despite our efforts to create it.  If so, we can either a) throw an IllegalStateException ourselves or b) simply return the session we already have a copy of.  Why don't we ALWAYS return the session we already have a reference to anyway?  Why try to go through the request at all?   ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-04-03T08:46:46Z","2012-06-19T03:47:46Z"
"","9745","NotificationListenerHolder does not properly resolve multiple ObjectNames [SPR-5070]","**[Geoffrey Arnold](https://jira.spring.io/secure/ViewProfile.jspa?name=garnold)** opened **[SPR-5070](https://jira.spring.io/browse/SPR-5070?redirect=false)** and commented  When multiple ObjectNames are specified in a NotificationListenerHolder (via the ""mappedObjectNames"" property), the NotificationListenerHolder.getResolvedObjectNames() method does not properly resolve all names.  The result is an ""java.lang.IllegalArgumentException: Object name cannot be null"" exception being thrown when attempting to register a NotificationListener with the desired MBeans.  The bug is that the array counter (int i) for the resolved ObjectName[] array is never incremented:      resolved[i] = ObjectNameManager.getInstance(it.next());  The line should read:      resolved[i++] = ObjectNameManager.getInstance(it.next());    ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-08-07T14:55:32Z","2012-06-19T03:46:48Z"
"","9771","DefaultMessageListenerContainer should be able to auto-reconnect after an interval [SPR-5098]","**[Gaute Lote](https://jira.spring.io/secure/ViewProfile.jspa?name=glote)** opened **[SPR-5098](https://jira.spring.io/browse/SPR-5098?redirect=false)** and commented  When left idle (as no messages beeing passed) for some time (30-60 min) our MDP stops receiving messages and even if there are messages on the input queue. We can work around the issue by sending dummy messages and so remove the idle periods... But this is not a good option for production.  ---  **Affects:** 2.5.5  **Attachments:** - [activemq.xml](https://jira.spring.io/secure/attachment/14560/activemq.xml) (_1.32 kB_) - [amq.properties](https://jira.spring.io/secure/attachment/14558/amq.properties) (_221 bytes_) - [jdbc.properties](https://jira.spring.io/secure/attachment/14559/jdbc.properties) (_298 bytes_) - [pom.xml](https://jira.spring.io/secure/attachment/14556/pom.xml) (_6.19 kB_) - [push-tjener-config.xml](https://jira.spring.io/secure/attachment/14557/push-tjener-config.xml) (_6.27 kB_)  **Issue Links:** - #9783 DefaultMessageListenerContainer stops receiving messages from an ActiveMQ Provider after a while  2 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-18T22:39:53Z","2019-01-11T15:26:52Z"
"","9085","tag produces incorrect action attribute under Glassfish v2 [SPR-4407]","**[Gareth Webber](https://jira.spring.io/secure/ViewProfile.jspa?name=garethwebber)** opened **[SPR-4407](https://jira.spring.io/browse/SPR-4407?redirect=false)** and commented  This is a generic problem with the  tag on glassfish which has been reported as a bug in spring webflow here: http://jira.springframework.org/browse/SWF-433 but is in fact a problem in spring web.  I am migrating an application which worked fine in Tomcat but fails under glassfish.  When the action=""blah"" attribute of a form is generated by  tags, instead of providing the correct url e.g blah.htm?projectid=6,  under gassfish the action is pointing to the jsp which is rendering the view. This means on form submission the content is sent to the view, cutting out the controller and generally fails as you would expect.  This also seems to be a problem with Jetty: http://weblogs.java.net/blog/johnsmart/archive/2007/07/spring_mvc_tile.html  I am using spring 2.5.1  Gareth  ---  **Affects:** 2.0.8, 2.5.1  **Attachments:** - [jsp-forward-test.war](https://jira.spring.io/secure/attachment/13586/jsp-forward-test.war) (_3.82 kB_)  **Issue Links:** - #12054  tag produces incorrect action attribute under Glassfish v2.1.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-01-29T02:19:21Z","2019-01-11T17:31:29Z"
"","9648","2.5.5 DispatchServlet exposes jsp error page attributes to container and breaks ExceptionResolver [SPR-4973]","**[Gareth Davis](https://jira.spring.io/secure/ViewProfile.jspa?name=gid79)** opened **[SPR-4973](https://jira.spring.io/browse/SPR-4973?redirect=false)** and commented  The changes made #9486 to expose jsp error page attributes actually breaks the use of exception resolver's in tomcat 5.5.17/5.5.23 and 6.0.16.  Once tomcat's StandardHostValue has invoked the servlet chain checks the request for the existence of ""javax.servlet.error.exception"" and if it's present it throws the response away and starts error page processing.  The net result is that views resolved by an ExceptionResolver running in tomcat will never actually be seen. I'm in the process of preparing a patch, I think the only practical solution is to remove the exposed error attributes at the end of doDispatch  ---  **Affects:** 2.5.5  **Attachments:** - [StandardHostValve.java](https://jira.spring.io/secure/attachment/14326/StandardHostValve.java) (_16.01 kB_)  **Issue Links:** - #9486 SimpleMappingExceptionResolver does not set javax.servlet.error.status_code on request - #9717 SimpleMappingExceptionResolver or DispatcherServlet connot handle ""redirect:/someUrl.html"" anymore","closed","type: bug,","spring-projects-issues","2008-07-02T07:53:03Z","2019-01-11T18:33:06Z"
"","9502","RemoteAccessException does not have the serialVersionUID defined [SPR-4826]","**[Gabriel Rosu](https://jira.spring.io/secure/ViewProfile.jspa?name=gabi_rosu)** opened **[SPR-4826](https://jira.spring.io/browse/SPR-4826?redirect=false)** and commented  Having two tiers of the application on two physical boxes running SunOS 5.10 and sun's JDK 1.4.2_13 we're running into a deserializing problem when one of them throws an exception against the other. Here's the stacktrace:  2008-05-01 00:05:06,158 ERROR [ExecuteThread: '87' for queue: 'weblogic.kernel.Default'] svc.impl.InventorySvcImpl - java.rmi.UnmarshalException: Problem deserializing error response; nested exception is: java.io.InvalidClassException: org.springframework.remoting.RemoteAccessException; local class incompatible: stream classdesc serialVersionUID = 3787812861223238444, local class serialVersionUID = -4906825139312227864  Note that our embedded exception has the serializeVersionUID set and we have the same version of it on both tiers; also have the same spring 2.0.8 version on both tiers. We did notice that the RemoteAccessException does not have the serialVersionUID defined and we looked to see if version 2.5 would have that but it's still missing so upgrading spring would not help.   ---  **Affects:** 2.0.6, 2.0.8  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-05-15T08:30:04Z","2012-06-19T03:47:44Z"
"","9075","CLONE -Autowiring failed when one of the bean contains factory-method [SPR-4396]","**[G](https://jira.spring.io/secure/ViewProfile.jspa?name=geniusgroup)** opened **[SPR-4396](https://jira.spring.io/browse/SPR-4396?redirect=false)** and commented  Autowiring failed when one of the bean contains factory-method (Static setter). Even we don't apply autowire in that bean, it will also crash the whole framework.  Reference: http://forum.springframework.org/showthread.php?t=48399  Partial XML:  \  \    \ \ \ \  Java: package com.foo.hibernate;  import org.hibernate.SessionFactory;  public class HibernateUtil {      private static SessionFactory sessionFactory_;          public static SessionFactory getSessionFactory() { return sessionFactory_; }     public static void setSessionFactory(SessionFactory sessionFactory) { sessionFactory_ = sessionFactory; }  }  Error: ERROR|14:45:57,234| ContextLoader:215 - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hibernateUtil' defined in ServletContext resource [/WEB-INF/conf/applicationContext-hibernate.xml]: Initialization of bean failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:445) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:400) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:736) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:261) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3830) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4337) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardHost.start(StandardHost.java:719) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:516) at org.apache.catalina.core.StandardServer.start(StandardServer.java:710) at org.apache.catalina.startup.Catalina.start(Catalina.java:566) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413) Caused by: java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:876) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) ... 28 more  ---  **Affects:** 2.5.1  **Issue Links:** - #9045 Autowiring failed when one of the bean contains factory-method (_**""duplicates""**_) - #9024 NPE in AbstractAutowireCapableBeanFactory#populateBean() if bean wrapper is null and InstantiationAwareBeanPostProcessor are registered (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-01-26T03:59:32Z","2019-01-12T16:51:05Z"
"","9045","Autowiring failed when one of the bean contains factory-method [SPR-4367]","**[G](https://jira.spring.io/secure/ViewProfile.jspa?name=geniusgroup)** opened **[SPR-4367](https://jira.spring.io/browse/SPR-4367?redirect=false)** and commented  Autowiring failed when one of the bean contains factory-method (Static setter). Even we don't apply autowire in that bean, it will also crash the whole framework.  Reference: http://forum.springframework.org/showthread.php?t=48399  Partial XML:  \  \    \ \ \ \  Java: package com.foo.hibernate;  import org.hibernate.SessionFactory;  public class HibernateUtil {      private static SessionFactory sessionFactory_;          public static SessionFactory getSessionFactory() { return sessionFactory_; }     public static void setSessionFactory(SessionFactory sessionFactory) { sessionFactory_ = sessionFactory; }  }  Error: ERROR|14:45:57,234| ContextLoader:215 - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hibernateUtil' defined in ServletContext resource [/WEB-INF/conf/applicationContext-hibernate.xml]: Initialization of bean failed; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:445) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:400) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:736) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369) at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:261) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3830) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4337) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardHost.start(StandardHost.java:719) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1045) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:516) at org.apache.catalina.core.StandardServer.start(StandardServer.java:710) at org.apache.catalina.startup.Catalina.start(Catalina.java:566) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413) Caused by: java.lang.NullPointerException at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:876) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) ... 28 more  ---  **Affects:** 2.5.1  **Issue Links:** - #9024 NPE in AbstractAutowireCapableBeanFactory#populateBean() if bean wrapper is null and InstantiationAwareBeanPostProcessor are registered (_**""duplicates""**_) - #9075 CLONE -Autowiring failed when one of the bean contains factory-method (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2008-01-21T21:34:18Z","2019-01-12T16:51:07Z"
"","9156","AbstractRegexpMethodPointcut should use the targetClass, and not method, to retrieve the class name [SPR-4479]","**[Fábio Matos](https://jira.spring.io/secure/ViewProfile.jspa?name=fabiomatos)** opened **[SPR-4479](https://jira.spring.io/browse/SPR-4479?redirect=false)** and commented  I have the following class structure:  GenericDAO (interface) GenericDAOImpl implements GenericDAO SomeDAO extends GenericDAO (interface) SomeDAOImpl extends GenericDAOImpl implements SomeDAO  I wanted to use RegexpMethodPointcutAdvisor (cache related logic) and I found a problem related to the pointcut used by this advisor.  In AbstractRegexpMethodPointcut (used by RegexpMethodPointcutAdvisor), inside matches(Method method, Class targetClass) method (line 133) the name of the method to match is obtained using method.getDeclaringClass().getName(). The problem is that in my case, for method that are in GenericDAOImpl and overridden by SomeDAOImpl, this call returns the GenericDAO name and not SomeDAO name, what will originate this method to return false when it should return true.  The solution is in the TODO left in the code (line 132): // TODO use target class here?  So, line 133 should be: String patt = targetClass.getName() + ""."" + method.getName();  For making things worse, this method is declared as final, so no extend and fix pattern can be applied...  My only solution was to implement a new Advisor and Pointcut with the logic I needed.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-19T00:47:01Z","2012-06-19T03:46:55Z"
"","8904","Message Driven POJO and Request class hierarchy treatment [SPR-4226]","**[Fábio Matos](https://jira.spring.io/secure/ViewProfile.jspa?name=fabiomatos)** opened **[SPR-4226](https://jira.spring.io/browse/SPR-4226?redirect=false)** and commented  Message Driven POJO listening in a Queue with two methods:  public Object handleRequest(final Object request);  public GenericResponse handleRequest(final GenericRequest request);  If we have a request that DOES NOT extends Generic Request, all is fine because it is received by the FIRST method. The problem happens when we want the request to EXTEND the GenericRequest, because the MessageListener receives the request has a instance of the specific request and not the GenericRequest and does not enter the SECOND method.  After this conclusion and some debbuging, the problem was narrowed down to MessageInvoker.findMatchingMethod().  In this situation, the numberOfMatchingMethods will be equal to 2 (the two methods above) and because of this it cannot choose the correct method and retruns null (code down), discarting the request making it not arriving at the MDP defined.  // Only return matching method if exactly one found. if (numberOfMatchingMethods == 1) { return matchingMethod; } else { return null; }  I believe that should not be the case, and it should be capable of detecting the super class of the request and consider the SECOND method has the one to receive the request.  ---  **Affects:** 2.5 final  **Issue Links:** - #7067 MessageListenerAdapter should invoke closest matching method based on parameter type","closed","type: enhancement,","spring-projects-issues","2007-12-06T22:30:05Z","2019-01-11T16:59:54Z"
"","9606","Spring inconsistently resolves an overloaded setter method [SPR-4931]","**[Fred Muhlenberg](https://jira.spring.io/secure/ViewProfile.jspa?name=fmuhlenberg)** opened **[SPR-4931](https://jira.spring.io/browse/SPR-4931?redirect=false)** and commented  Reference: http://forum.springframework.org/showthread.php?t=47051  I'm running into an issue with an overloaded set method.   I get different method resolutions depending on the environment in which I run.  I am using the  MimeMessageHelper class and am setting the replyTo property and have sample code demonstrating my issue when configuring.  If I run in eclipse, the property requires the String version of the setter. If I debug in eclipse, the property requires the InternetAddress version of the setter.  If I run from the command line, the property requires the InternetAddress version of the setter. If I run on our (ancient) 1.4 Oracle App server  I need the String version of the setter.  Same source files, same config files, different results.  I assert that if I pass in a bean reference, Spring ought to resolve to an overloaded method to the type of the reference.  My sample test:  ---  Directory Hierarchy  ---  ./.classpath ./.project ./build.xml ./lib/activation.jar ./lib/commons-logging-1.0.4.jar ./lib/j2ee.jar ./lib/junit-3.8.1.jar ./lib/junit-4.4.jar ./lib/log4j-1.2.14.jar ./lib/mail.jar ./lib/spring-mock.jar ./lib/spring.jar ./test/java/context-one.xml ./test/java/context-two.xml ./test/java/log4j.properties ./test/java/mderf/MockMimeMessageHelper.java ./test/java/mderf/OneTest.java ./test/java/mderf/TwoTest.java  ---  build.xmlhe JUnit report can be found in ${build.report.dir}/index.html                                                                \  ---  context-one.xml  \ \ \ \                                   localhost                                                                    \                                                       \  ---  context-two.xml  \ \ \ \                                   localhost                                                           \                                                                   \  ---  log4j.properties      1. direct log messages to stdout ###  log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.Target=System.out log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n      1. direct messages to file hibernate.log ###  #log4j.appender.file=org.apache.log4j.FileAppender #log4j.appender.file.File=hibernate.log #log4j.appender.file.layout=org.apache.log4j.PatternLayout #log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n      1. set log levels - for more verbose logging change 'info' to 'debug' ###  log4j.rootLogger=warn, stdout  ---  mderf/MockMimeMessageHelper.java /* * MockMimeMessageHelper.java *  * Created: Dec 11, 2007 * Version: 1.0   */   package mderf;  import javax.mail.MessagingException; import javax.mail.internet.InternetAddress; import javax.mail.internet.MimeMessage;  import org.springframework.mail.javamail.MimeMessageHelper;  /** * This class  *   * `@author` Fred Muhlenberg, High Performance Technologies, Inc.   \*/   public class MockMimeMessageHelper extends MimeMessageHelper   {   /**    * `@param` arg0     */     public MockMimeMessageHelper( MimeMessage arg0 )     {     super( arg0 );     }    /**    * `@param` arg0   * `@throws` MessagingException   * `@see` org.springframework.mail.javamail.MimeMessageHelper#setFrom(javax.mail.internet.InternetAddress)     */     `@Override`     public void setFrom( InternetAddress arg0 ) throws MessagingException     {     }    /**    * `@param` arg0   * `@throws` MessagingException   * `@see` org.springframework.mail.javamail.MimeMessageHelper#setFrom(java.lang.String)     */     `@Override`     public void setFrom( String arg0 ) throws MessagingException     {     }    /**    * `@param` arg0   * `@throws` MessagingException   * `@see` org.springframework.mail.javamail.MimeMessageHelper#setReplyTo(javax.mail.internet.InternetAddress)     */     `@Override`     public void setReplyTo( InternetAddress arg0 ) throws MessagingException     {     }    /**    * `@param` arg0   * `@throws` MessagingException   * `@see` org.springframework.mail.javamail.MimeMessageHelper#setReplyTo(java.lang.String)     */     `@Override`     public void setReplyTo( String arg0 ) throws MessagingException     {     }    /**    * `@param` arg0   * `@throws` MessagingException   * `@see` org.springframework.mail.javamail.MimeMessageHelper#setSubject(java.lang.String)     */     `@Override`     public void setSubject( String arg0 ) throws MessagingException     {     }    /**    * `@param` arg0   * `@param` arg1   * `@throws` MessagingException   * `@see` org.springframework.mail.javamail.MimeMessageHelper#setText(java.lang.String, boolean)     */     `@Override`     public void setText( String arg0, boolean arg1 ) throws MessagingException     {     setText( arg0 );     }    /**    * `@param` arg0   * `@param` arg1   * `@throws` MessagingException   * `@see` org.springframework.mail.javamail.MimeMessageHelper#setText(java.lang.String, java.lang.String)     */     `@Override`     public void setText( String arg0, String arg1 ) throws MessagingException     {     setText( arg0 );     }    /**    * `@param` arg0   * `@throws` MessagingException   * `@see` org.springframework.mail.javamail.MimeMessageHelper#setText(java.lang.String)     */     `@Override`     public void setText( String arg0 ) throws MessagingException     {     }    /**    * `@param` arg0   * `@throws` MessagingException   * `@see` org.springframework.mail.javamail.MimeMessageHelper#setTo(javax.mail.internet.InternetAddress)     */     `@Override`     public void setTo( InternetAddress arg0 ) throws MessagingException     {     }    /**    * `@param` arg0   * `@throws` MessagingException   * `@see` org.springframework.mail.javamail.MimeMessageHelper#setTo(javax.mail.internet.InternetAddress[])     */     `@Override`     public void setTo( InternetAddress[] arg0 ) throws MessagingException     {     for( InternetAddress ia : arg0 )     {     setTo( ia );     }     }    /**    * `@param` arg0   * `@throws` MessagingException   * `@see` org.springframework.mail.javamail.MimeMessageHelper#setTo(java.lang.String)     */     `@Override`     public void setTo( String arg0 ) throws MessagingException     {     }    /**    * `@param` arg0   * `@throws` MessagingException   * `@see` org.springframework.mail.javamail.MimeMessageHelper#setTo(java.lang.String[])     */     `@Override`     public void setTo( String[] arg0 ) throws MessagingException     {     for( String str : arg0 )     {     setTo( str );     }     }  }  ---  mderf/OneTest.java package mderf;  import org.junit.Test; import org.springframework.test.AbstractSingleSpringContextTests;  public class OneTest extends AbstractSingleSpringContextTests {      protected String[] getConfigLocations()     {         return new String[]{ ""context-one.xml"" };     }                  @Test     public void testDummy()     {         System.out.println( ""Dummy test"" );     }  }  ---  mderf/TwoTest.java package mderf;  import org.junit.Test; import org.springframework.context.support.ClassPathXmlApplicationContext;  public class TwoTest {      protected String[] getConfigLocations()     {         return new String[]{ ""context-two.xml"" };     }                  @Test     public void testDummy()     {         new ClassPathXmlApplicationContext( getConfigLocations() );         System.out.println( ""Dummy output"" );     }  }  ---  ---  **Affects:** 2.0.2, 2.5 final, 2.5.4  **Attachments:** - [mailproto.jar](https://jira.spring.io/secure/attachment/14194/mailproto.jar) (_3.42 MB_)  **Issue Links:** - #17933 Avoid ambiguous property warning for setter methods with multiple parameters - #11065 GenericTypeAwarePropertyDescriptor warns when creating java.security.SecureRandom bean  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a25e2dde0adf856114d8112330f167eac769e89","closed","type: enhancement,","spring-projects-issues","2008-06-18T06:18:28Z","2019-01-13T08:03:39Z"
"","9253","Documentation: Better illustrate how AnnotationTransactionAspect works [SPR-4576]","**[Frank Pavageau](https://jira.spring.io/secure/ViewProfile.jspa?name=fpavageau)** opened **[SPR-4576](https://jira.spring.io/browse/SPR-4576?redirect=false)** and commented  I have a Stripes + Spring + Hibernate webapp running in Tomcat 6 which uses load-time weaving. The only aspect configured in aop.xml is org.springframework.transaction.aspectj.AnnotationTransactionAspect :  \ \ \ \ \ \ \ \ \  When running Tomcat with the Spring Agent instead of TomcatInstrumentableClassLoader, everything runs fine. When using the TomcatInstrumentableClassLoader instead, my write operations fail with HibernateTemplate complaining that the Hibernate Session is read-only (we're using OpenSessionInViewFilter) : org.springframework.dao.InvalidDataAccessApiUsageException: Write operations are not allowed in read-only mode (FlushMode.NEVER/MANUAL): Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition. at org.springframework.orm.hibernate3.HibernateTemplate.checkWriteOperationAllowed(HibernateTemplate.java:1137)  If I activate the DEBUG log level on org.springframework classes, I can verify that indeed no transaction is created by the HibernateTransactionManager, contrary to what happens when the Spring Agent is used.  However, if I create an aspect in my application, using AspectJ annotations, and add it to aop.xml, it works again. For example, using the following aspect : package test;  import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect;  `@Aspect` public class TestAspect { `@Around`(""execution(* \*.\*(..)) && `@annotation`(org.springframework.transaction.annotation.Transactional)"") public Object test(ProceedingJoinPoint pjp) throws Throwable { return pjp.proceed(); } }  and with aop.xml modified like :  \ \ \ \ \ \ \ \ \ \ So this seems to be a bug with TomcatInstrumentableClassLoader, which can be bypassed either by using Spring Agent or by creating this fake aspect.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-13T04:35:41Z","2019-01-11T17:17:05Z"
"","9837","DelegatingPhaseListerMulticaster ignores the phase when calling the delegates [SPR-5164]","**[Frank Danek](https://jira.spring.io/secure/ViewProfile.jspa?name=frank.danek)** opened **[SPR-5164](https://jira.spring.io/browse/SPR-5164?redirect=false)** and commented  The DelegatingPhaseListenerMulticaster ignores the phase when calling the delegates: The Multicaster itself is called for ANY_PHASE. In the beforePhase() method, all delegates are retrieved from the application context and the beforePhase() method of the delegate is called. It is not checked, if the delegate should be executed for the current phase. The same for the afterPhase().  So all delegate phaselisteners are executed for every phase, what can't be correct.  You should add a check before calling the method of the delegate:      public void beforePhase(PhaseEvent event) {     	Collection listeners = getDelegates(event.getFacesContext());     	Iterator it = listeners.iterator();     	while (it.hasNext()) {     		PhaseListener listener = (PhaseListener) it.next();     		if (isListenerForThisPhase(listener , event.getPhaseId())) {     			listener.beforePhase(event);     		}     	}     }          public void afterPhase(PhaseEvent event) {     	Collection listeners = getDelegates(event.getFacesContext());     	Iterator it = listeners.iterator();     	while (it.hasNext()) {     		PhaseListener listener = (PhaseListener) it.next();     		if (isListenerForThisPhase(listener , event.getPhaseId())) {     			listener.afterPhase(event);     		}     	}     }          /**      * @see org.apache.myfaces.lifecycle.PhaseListenerManager#isListenerForThisPhase(PhaseListener, PhaseId)      */     private boolean isListenerForThisPhase(PhaseListener phaseListener, PhaseId phaseId) {         int listenerPhaseId = phaseListener.getPhaseId().getOrdinal();         return (listenerPhaseId == PhaseId.ANY_PHASE.getOrdinal() ||                 listenerPhaseId == phaseId.getOrdinal());     }    ---  **Affects:** 2.5.5  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-09-17T18:45:38Z","2015-09-22T17:34:36Z"
"","9863","Add type support to factory-method in BeanFactory to support Generics method returns [SPR-5190]","**[Frank Adcock](https://jira.spring.io/secure/ViewProfile.jspa?name=sweetfa)** opened **[SPR-5190](https://jira.spring.io/browse/SPR-5190?redirect=false)** and commented  The ability to support class typeing for factory-methods would allow methods which return generic types to be utilised correctly.                                              Given the above construct the create*Mock methods return \. This defaults to Object at runtime so any class instantiated by the container at runtime has a default type of Object. Whilst this is OK in most situations, and can be cast within code to the correct types, what happens if for example ...      you have an aspect and you wish to create a link. This will fail as it cannot find the method on the class because it is not the \ type but a plain Object.  Therefore, at a very minimum it makes setting up of unit tests much more accessible by the addition of this capability.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-09-30T16:35:42Z","2012-06-19T09:36:28Z"
"","9043","Introduce before/after test execution callbacks in the TestContext framework [SPR-4365]","**[Filip Neven](https://jira.spring.io/secure/ViewProfile.jspa?name=nevenfi)** opened **[SPR-4365](https://jira.spring.io/browse/SPR-4365?redirect=false)** and commented  #### Objective  Consider providing additional callback hooks in the `TestExecutionListener` API for enabling more fine-grained integration with third-party testing frameworks (e.g., Unitils) and custom testing code.  #### Building Block for JUnit 5 Support  Adding these new callbacks will also enabled Spring to support the new `BeforeTestExecutionCallback` and `AfterTestExecutionCallback` APIs in JUnit 5's Jupiter extension model.  #### Deliverables  1. [x] Introduce before/after test execution callbacks in the `TestExecutionListener` API. 2. [x] Introduce before/after test execution callbacks in `TestContextManager`. 3. [x] Introduce before/after test execution support in the `SpringJUnit4ClassRunner`. 4. [x] Introduce before/after test execution support in the `SpringExtension` for JUnit 5. 5. [x] Introduce before/after test execution support in `AbstractTestNGSpringContextTests`. 6. [x] Document that before/after test execution callbacks cannot be supported with JUnit 4 Rules. 7. [x] Introduce appropriate integration tests for the `SpringJUnit4ClassRunner`, the `SpringExtension`, and `AbstractTestNGSpringContextTests`.  ---  #### Comments from Original Poster  > Unitils is an open source testing project, offering features such as integration with dbunit, test database maintenance and support for mock objects. > The core of Unitils works in a similar fashion as the spring testcontext framework, with a testlistener that provides callbacks during the execution of tests. It's also been implemented for Junit 3.8, Junit 4 and TestNG. >  > An adaptor could be written that translates spring's listener calls into unitils listener calls. Such an adaptor could be easily implemented as an org.springframework.test.context.TestExecutionListener. However, unitils' listener system currently offers more hooks than spring's. Therefore we'd like to see spring's framework extended to add callbacks directly before and directly after executing the test method (after executing the `@Before` and before executing the `@After` methods).  ---  **Affects:** 2.5.1  **Attachments:** - [springTestcontextUnitilsIntegration.txt](https://jira.spring.io/secure/attachment/13304/springTestcontextUnitilsIntegration.txt) (_38.38 kB_)  **Issue Links:** - #18151 Introduce support for JUnit 5 in the TestContext framework (_**""is depended on by""**_) - #11259 Introduce a TestExecutionListener for DbUnit - #8640 Please allow TestExecutionListeners to fail the test  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/087efa668c42eeb9cc2ea79a17853a415d66d2c7, https://github.com/spring-projects/spring-framework/commit/833deadddc0de6ea791f58e561d39e920b3e013d, https://github.com/spring-projects/spring-framework/commit/f7f37cdb1b3d57f49cd014e2cda6d64779260b8d, https://github.com/spring-projects/spring-framework/commit/6efb166c3628391360af81f226600348ab985007, https://github.com/spring-projects/spring-framework/commit/80018c67e758d19bf50433edbcb14cf7e98b1eaf, https://github.com/spring-projects/spring-framework/commit/fd008405a1f9bd1fef755d7e0aa5bb48895f0c73, https://github.com/spring-projects/spring-framework/commit/3da5fbe995f971f1ac0c13f108a9d6c8325dfe11, https://github.com/spring-projects/spring-framework/commit/da893328407766d95cbaddf0ce99fcdfeb202bae, https://github.com/spring-projects/spring-framework/commit/5302566cbb71a0d1354bb55b7addf1a4fa965981  3 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-01-21T08:04:01Z","2019-01-13T08:05:48Z"
"","9042","TestContext framework: afterTestMethod not called when exception in beforeTestMethod in AbstractJUnit38SpringContextTests [SPR-4364]","**[Filip Neven](https://jira.spring.io/secure/ViewProfile.jspa?name=nevenfi)** opened **[SPR-4364](https://jira.spring.io/browse/SPR-4364?redirect=false)** and commented  Found a potential problem in the TestContext framework:  In the runManaged method of AbstractJUnit38SpringContextTests, if an exception occurs during the call to testContextManager.beforeTestMethod, testContextManager.afterTestMethod is not invoked. This is not consequent with the junit 4 counterpart (SpringJUnit4ClassRunner), and could for example cause a transaction to be started but not to be ended.   ---  **Affects:** 2.5.1  **Attachments:** - [callAfterTestMethod.diff](https://jira.spring.io/secure/attachment/13303/callAfterTestMethod.diff) (_1.75 kB_)","closed","in: core,","spring-projects-issues","2008-01-21T06:45:10Z","2012-06-19T03:47:22Z"
"","9072","Schema-based Spring AOP does not support 'protected' modifier method in pointcut expression [SPR-4393]","**[Feng Xishun](https://jira.spring.io/secure/ViewProfile.jspa?name=fengxs@neusoft.com)** opened **[SPR-4393](https://jira.spring.io/browse/SPR-4393?redirect=false)** and commented  Schema-based Spring AOP does not support 'protected' modifier method in pointcut expression, the bean that retreived from application context does not be proxied by CGLIB.  For Example: 1. Target class    public class TestService {    protected void testProtectedMethod() {}    }  2. AOP config  \ \ \ \ \ 1. Main class    public static void main(String[] args) {    Object fooService = ApplicationContext.getBean(""fooService"");    System.out.println(fooService.getClass().getName()); // ouput 'TestService', not the proxied class(generated by CGLIB)    }  I have investigated the Spring's source code, I think the class: org.springframework.aop.support.AopUtils maybe has a bug, please refer the method: public static boolean canApply(Pointcut pc, Class targetClass, boolean hasIntroductions) { ... ... Method[] methods = clazz.getMethods(); ... ... }  In this method, Spring get the targetClass's methods to test if the pointcut matchs it, but, Spring's code uses the Class.getMethods() on targetClass, and the getMethods() method always return the PUBLIC method of targetClass, so the PROTECTED method will never match the pointcut.  I think the canApply() method maybe need to correct.  Best regards.  ---  ---  **Affects:** 2.5 final  **Sub-tasks:** - #9537 Documentation: Spring AOP Pointcuts match 'public' modifiers only","closed","in: core,","spring-projects-issues","2008-01-25T16:48:17Z","2019-01-13T21:53:40Z"
"","9685","Grouping field errors in validators [SPR-5010]","**[Fahrim Rahman](https://jira.spring.io/secure/ViewProfile.jspa?name=fmystro)** opened **[SPR-5010](https://jira.spring.io/browse/SPR-5010?redirect=false)** and commented  Hello,  This may just be my naivete, but I don't believe there is a grouping feature to group field errors together in a validator. Let me give an example to illustrate what I mean.  Suppose we have a scheduled job that runs on a given date at a given time. To do this, we need to know the execution date, as well as the hour of day to execute on. We want to separate these two items out and do not wish to wrap our ""hour"" value into a Date object (whatever the reason may be). From the administrative point, we are also able to change these hour and date values individually. However, when we set up a new job time, we must ensure that the time is not in the past. This can happen due to two reasons: 1) The date is a past date 2) The date is today's date but the hour has already passed.  Say in our form we want to highlight both of these fields as error fields (since the entire date/hr combination is a problem, not just a single attribute). However, if we reject both of the fields as error fields, it theoretically represents 2 errors. Although, what we really want is to represent one error caused by the combination of two fields.  Here's another example:  Suppose we have a budget management application so we can allocate our weekly expenses. We now have to decide how to split our budget between 3 categories - food, living and entertainment. In our WeeklyBudget validator, combined together, these 3 categories cannot cost us more than our budget for the week. Once again, there is really just one error, but we have to reject 3 fields (create 3 errors).  So I guess my question is, is there a way to mark multiple fields as error fields for a singe error? If not, I know I can work around it, but can it be built into the framework?  Cheers  FR   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-07-15T09:07:29Z","2015-09-22T18:20:30Z"
"","9509","H2 database support for HibernateJpaVendorAdapter [SPR-4833]","**[Fabrice Daugan](https://jira.spring.io/secure/ViewProfile.jspa?name=fabdouglas)** opened **[SPR-4833](https://jira.spring.io/browse/SPR-4833?redirect=false)** and commented  H2 database is not directly supported using ""database"" property set to ""H2"". Adding H2 support resume to pacth ""HibernateJpaVendorAdapter"" and ""Database"" classes.  org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter should support H2 database name.  Patch ""org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"" class: line 28 : + import org.hibernate.dialect.H2Dialect;   line 100 : +         case H2: return H2ialect.class;  Patch ""org.springframework.orm.jpa.vendor.Database"" enumeration: line 38-39: + H2, +     ---  **Affects:** 2.5.4  **Attachments:** - [Database.java](https://jira.spring.io/secure/attachment/14066/Database.java) (_1.40 kB_) - [HibernateJpaVendorAdapter.java](https://jira.spring.io/secure/attachment/14067/HibernateJpaVendorAdapter.java) (_4.12 kB_)","closed","type: enhancement,","spring-projects-issues","2008-05-19T00:26:25Z","2012-06-19T03:47:25Z"
"","9514","CommonAnnotationBeanPostProcessor.ResourceElement is a private class - can't override method getResource() [SPR-4838]","**[Eyal Lupu](https://jira.spring.io/secure/ViewProfile.jspa?name=eyal.lupu)** opened **[SPR-4838](https://jira.spring.io/browse/SPR-4838?redirect=false)** and commented  I want to create a custom CommonAnnotationBeanPostProcessor - this can be, theoretically, done by overriding the getResource() method. Hoever this method can't be overridden since the type of the first argument (ResourceElement) is private.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-05-20T01:18:01Z","2012-06-19T03:46:43Z"
"","9532","nexus index for Spring Maven repository [SPR-4856]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-4856](https://jira.spring.io/browse/SPR-4856?redirect=false)** and commented  Please provide nexus index for Spring Maven repository that would allow to easily search and work with Spring artifacts from popular IDEs. See http://docs.codehaus.org/display/M2ECLIPSE/Nexus+Indexer   ---  3 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-23T09:02:40Z","2012-06-19T09:36:30Z"
"","9344","scm urls in maven poms are invalid [SPR-4667]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-4667](https://jira.spring.io/browse/SPR-4667?redirect=false)** and commented  Maven poms declare the following SCM urls:           	scm:cvs:pserver:anonymous:@springframework.cvs.sourceforge.net:/cvsroot/springframework/spring     	scm:cvs:ext:username@springframework.cvs.sourceforge.net:/cvsroot/springframework/spring     	http://springframework.cvs.sourceforge.net/springframework/       Those are not correct and should look like this:      scm:cvs:pserver:anonymous:@springframework.cvs.sourceforge.net:/cvsroot/springframework:spring     scm:cvs:ext:username@springframework.cvs.sourceforge.net:/cvsroot/springframework:spring  Also, it would be great if those poms would declare corresponding CVS tags for given release versions. See http://maven.apache.org/pom.html#SCM  ---  **Issue Links:** - #9343 scm urls in maven poms are invalid (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-04-06T18:50:51Z","2019-01-12T16:50:56Z"
"","9343","scm urls in maven poms are invalid [SPR-4666]","**[Eugene Kuleshov](https://jira.spring.io/secure/ViewProfile.jspa?name=euxx)** opened **[SPR-4666](https://jira.spring.io/browse/SPR-4666?redirect=false)** and commented  Maven poms declare the following SCM urls:           	scm:cvs:pserver:anonymous:@springframework.cvs.sourceforge.net:/cvsroot/springframework/spring     	scm:cvs:ext:username@springframework.cvs.sourceforge.net:/cvsroot/springframework/spring     	http://springframework.cvs.sourceforge.net/springframework/       Those are not correct and should look like this:      scm:cvs:pserver:anonymous:@springframework.cvs.sourceforge.net:/cvsroot/springframework:spring     scm:cvs:ext:username@springframework.cvs.sourceforge.net:/cvsroot/springframework:spring  Also, it would be great if those poms would declare corresponding CVS tags for given release versions. See http://maven.apache.org/pom.html#SCM  ---  **Issue Links:** - #9344 scm urls in maven poms are invalid (_**""is duplicated by""**_)","closed","type: task,","spring-projects-issues","2008-04-06T18:49:20Z","2019-01-11T18:13:34Z"
"","9819","Ability to specify default-lazy-init behavior for imported bean definitions [SPR-5146]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-5146](https://jira.spring.io/browse/SPR-5146?redirect=false)** and commented  There doesn't seem to be a way to configure Spring so that imported bean definition files inherit the default-lazy-init behavior from the parent.  For example:                    \  The CXF beans are ""eagerly"" instantiated even though the parent bean XML speficies ""default-lazy-init=true"". Is there a way to get the CXF beans to obey the lazy-init behavior that I want (aside from editing the META-INF/cxf/cxf.xml files myself and re-jarring CXF?).  (the CXF beans take a few seconds to initialize and this is a problem with client apps in short-running JVMs that may not hit CXF on all code paths)  It seems like either: 1. 'default-lazy-init' should be inherited from the parent bean definition reader 2. There should be an attribute on the import element that allows for specifying the desired default-lazy-init behavior for the imported bean defs.    ---  **Affects:** 2.5.5  6 votes, 6 watchers","closed","in: core,","spring-projects-issues","2008-09-09T02:01:01Z","2022-03-30T08:38:17Z"
"","9774","Spring fails to Autowire ApplicationContext property [SPR-5101]","**[Eric Sirianni](https://jira.spring.io/secure/ViewProfile.jspa?name=sirianni)** opened **[SPR-5101](https://jira.spring.io/browse/SPR-5101?redirect=false)** and commented  I am getting an error when trying to autowire the spring application context into a class.  \ Component Scope(""prototype"") public class ServerOperationFactory {      Autowired     private ApplicationContext applicationContext;     ...  } \  \ org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'org.springframework.web.context.support.XmlWebApplicationContext(at)2c39d2' is defined 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:391) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:999) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:233) 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170) 	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredElement.inject(AutowiredAnnotationBeanPostProcessor.java:356) 	... 63 more \  Stepping through in the debugger, it looks like this is the code that is filling in the ObjectUtils.identityToString() as the bean name for my autowired field is below:  \ DefaultListableBeanFactory.java:      protected Map findAutowireCandidates(String beanName, Class requiredType, DependencyDescriptor descriptor) {     	String[] candidateNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this, requiredType);     	Map result = new LinkedHashMap(candidateNames.length);     	for (Iterator it = this.resolvableDependencies.keySet().iterator(); it.hasNext();) {     		Class autowiringType = (Class) it.next();     		if (autowiringType.isAssignableFrom(requiredType)) {     			Object autowiringValue = this.resolvableDependencies.get(autowiringType);     			if (requiredType.isInstance(autowiringValue)) {     				result.put(ObjectUtils.identityToString(autowiringValue), autowiringValue);     				break;     			}     		}     	}  \  That code fills in for the ""determined"" bean name in the AutowiredElement object.  Later, when that bean name is actually looked up in the bean factory (via beanFactory.getBean()) the BeanFactory fails to find the bean by that name, yielding the exception pasted above.  This looks like a bug to me.  Is there anything obvious I'm missing here?  Thanks   ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2008-08-19T05:11:28Z","2012-06-19T03:47:07Z"
"","9105","Remoting support for async calls methods with void return types [SPR-4427]","**[Eric Simmerman](https://jira.spring.io/secure/ViewProfile.jspa?name=etempest)** opened **[SPR-4427](https://jira.spring.io/browse/SPR-4427?redirect=false)** and commented  JMS Remoting does not currently support async calls nor does it support invocation of methods with void return types. This patch address both issues.  Async invocation is used automatically where the invoked method has void return type and no declared Exceptions. I simply set the replyTo queue to null and properly handle that through the invocation. Obviously I do not wait for any reply in the control flow.  To properly handle methods with checked exceptions but void return type, I inserted support for returning null from a remoting call.   ---  **Affects:** 2.5.1  **Attachments:** - [JMS-Remoting-PATCH.txt](https://jira.spring.io/secure/attachment/13859/JMS-Remoting-PATCH.txt) (_25.76 kB_) - [JMS-Remoting-PATCH.txt](https://jira.spring.io/secure/attachment/13613/JMS-Remoting-PATCH.txt) (_7.24 kB_)  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2008-02-06T05:32:49Z","2015-09-22T17:34:30Z"
"","8999","Parameterized SingleColumnRowMapper [SPR-4320]","**[Eric Miles](https://jira.spring.io/secure/ViewProfile.jspa?name=bigehokie)** opened **[SPR-4320](https://jira.spring.io/browse/SPR-4320?redirect=false)** and commented  I looked all over but couldn't find one, but it would be nice if there was a parameterized single column row mapper in Spring.  There is one available for the non-java 5 code base, but there isn't one with use for generics.  I've written one that simply wraps the SingleColumnRowMapper but I thought framework should contain such a class.  I can provide my class if you like but it was very easy to implement (~35 lines of code).   ---  **Affects:** 2.5 final  **Attachments:** - [ParameterizedSingleColumnRowMapper.java](https://jira.spring.io/secure/attachment/13269/ParameterizedSingleColumnRowMapper.java) (_1.02 kB_)","closed","type: enhancement,","spring-projects-issues","2008-01-10T11:13:19Z","2012-06-19T03:46:59Z"
"","8908","Unboxing of bean into an autowired primitive [SPR-4230]","**[Eric Berry](https://jira.spring.io/secure/ViewProfile.jspa?name=ericeberry)** opened **[SPR-4230](https://jira.spring.io/browse/SPR-4230?redirect=false)** and commented  I know that autowiring of primitives is not supported and considered a feature.  However, it would be nice if an objectize primitive could automatically be unboxed into the primitive type.  For example if a bean was of type Integer, it could unboxed into an Autowired primitve int.   ---  2 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2007-12-07T08:32:37Z","2012-06-19T09:36:26Z"
"","9130","Make @ModelAttribute's not required...  [SPR-4452]","**[Eric Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=ericanderson)** opened **[SPR-4452](https://jira.spring.io/browse/SPR-4452?redirect=false)** and commented  Its a pain in the backside if you want your GET request to have access to the session object, since you have to create it first.  Think of some type of workflow/data entry... they go to the page, they save their progress (but you don't want to commit to the database yet because they aren't done)... then they click the link to go back to the edit page, you have to write special code to make it all come together...  If you could just check for null, you'd know whether to create the model object or just keep chugging along.   ---  **Affects:** 2.5.1  7 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-02-11T11:35:10Z","2012-05-23T15:22:57Z"
"","9129","Dynamic URLs should be easier to work worth/Add a new type of class that can be passed into @RequestMapping methods [SPR-4451]","**[Eric Anderson](https://jira.spring.io/secure/ViewProfile.jspa?name=ericanderson)** opened **[SPR-4451](https://jira.spring.io/browse/SPR-4451?redirect=false)** and commented  Suppose you have the following method:  `@RequestMapping`(""/post/*/"") public String showPost(Map map) {  }  Now, if I wanted to have pretty urls, such as: /post/welcome-to-the-site/, I could do this by adding HttpServletRequest and doing some regex and pulling this data out myself. However one of the things I love about Spring is it allows me to write code thats REALLY easy to unit test and adding an HttpServletRequest ruins that.  Simply by noticing that there are '*' in the url, it should be possible to have a class such as RequestParts (or even a string array), that tells me that the 1st part is ""welcome-to-the-site"".  In this manner, the signature could be:  public String showPost(Map map, RequestParts rp) { if (rp.hasParts()) { // Load up rp.getPart(0); } else { // Show an archive page } }  This would obviously work very well with a String array but might be ambiguous from `@RequestParam`, which is why a simple class could handle this.   ---  **Affects:** 2.5 final  4 votes, 0 watchers","closed","type: enhancement,","spring-projects-issues","2008-02-11T11:31:04Z","2012-06-19T09:36:24Z"
"","9854","Problem when working with RichFaces (JSF) integrated into the spring with javax.faces.STATE_SAVING_METHOD=client. [SPR-5181]","**[Emmanuel Ruiz Lopes](https://jira.spring.io/secure/ViewProfile.jspa?name=emmruizlopes)** opened **[SPR-5181](https://jira.spring.io/browse/SPR-5181?redirect=false)** and commented  The problem happens when I use a bean in the requisition scope (JSF), however I use a tag of the framework   that maintains it alive among the requisitions. You works perfectly when the configuration javax.faces.STATE_SAVING_METHOD=server, the problem happens when I use javax.faces.STATE_SAVING_METHOD=client (web.xml). In this last configuration, the tree of components of JSF is seriarizable and saved in the client. At this time it happens the following mistake:  java.io.NotSerializableException: org.springframework.beans.factory.support.DefaultListableBeanFactory  ---  **Issue Links:** - #6812 Provide ability to make aop:scoped-proxy prototypes and singletons truely serializable - #7364 Service references in JSF session objects not restored when using persistent sessions","closed","type: enhancement,","spring-projects-issues","2008-09-26T00:59:36Z","2019-01-11T15:39:59Z"
"","9166","OptionTag and OptionsTag do not support an id attribute [SPR-4488]","**[Eliot Sykes](https://jira.spring.io/secure/ViewProfile.jspa?name=eliotsykes)** opened **[SPR-4488](https://jira.spring.io/browse/SPR-4488?redirect=false)** and commented  Currently it is not possible to output an id attribute for \ elements when using OptionTag and OptionsTag.  id attribute would be handy for various reasons: the main reason being me wanting it :-)  I want to use it for DOM manipulation.    ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-21T02:26:46Z","2012-06-19T03:47:37Z"
"","9229","mock.jndi.SimpleNamingContext.createSubcontext does not work correctly [SPR-4552]","**[Elias Ross](https://jira.spring.io/secure/ViewProfile.jspa?name=genman)** opened **[SPR-4552](https://jira.spring.io/browse/SPR-4552?redirect=false)** and commented      public Context createSubcontext(String name)     {         Context subcontext = new SimpleNamingContext(root + name, boundObjects, environment);         bind(name, subcontext);         return subcontext;     }  Problem:  Context c =new InitialContext(); c.createSubcontext(""foo"").bind(""bar"", ""String""); Object o = c.lookup(""/foo/bar"");  This does not return the string String. Actually, it binds ""String"" to ""foobar"" and the lookup will fail.    ---  **Affects:** 2.0.8, 2.5.2  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-03-06T06:03:13Z","2012-06-19T03:47:38Z"
"","8979","Initializing shared context from within an EJB and sharing it with a web module [SPR-4301]","**[Edwin Dhondt](https://jira.spring.io/secure/ViewProfile.jspa?name=edh)** opened **[SPR-4301](https://jira.spring.io/browse/SPR-4301?redirect=false)** and commented  This bug might be related to #8847, but it's more like the reverse I guess and it's reproducable.  It prevent's us from bringing our application into production.  I have one EAR with an ejb-jar module and a war module. - The ejb-jar module contains my stateless session beans and my MDBs. - The SLSBs and the MDBs extend from Spring's EJB convenience classes.  I'm using the shared context approach in which the spring context is shared between the ejb's (mdbs and slsbs) and the web module. All my ejb's therefore exhibit the following code pattern: \ public void setMessageDrivenContext(MessageDrivenContext messageDrivenContext) { super.setMessageDrivenContext(messageDrivenContext); setBeanFactoryLocator(ContextSingletonBeanFactoryLocator.getInstance(""classpath*:**/beanRefContext.xml"")); setBeanFactoryLocatorKey(""service""); } \  My web.xml contains the following entries: \ \ \contextConfigLocation\ \/WEB-INF/config/spring/spring-presentation.xml\ \               locatorFactorySelector         classpath*:**/beanRefContext.xml                        parentContextKey         service                        org.springframework.web.context.ContextLoaderListener       \  The beanRefContext.xml file is located in my application server's domain lib/classes directory so it's ""accessible"" by both modules.  This setup works perfectly as long as there are no messages on the queue when deploying/starting the application (in SJAS terms, the domain). In this ""no messages"" scenario the ejb module is deployed and no calls are made by the container of setMessageDrivenContext or ejbCreate methods (this is consistent with the ejb life cycle): [#|2008-01-05T12:45:45.366+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.core.classloading|_ThreadID=10;|LDR5010: All ejb(s) of [webedison] loaded successfully!|#]  After the ejb's have been loaded the web module is being loaded: [#|2008-01-05T12:45:45.406+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.container.web|_ThreadID=10;|WEB0100: Loading web module [webedison:webedison.war] in virtual server [server] at [/edison]|#]  Then the servlet engine is started and one of the first things that occurs is the initialization of the spring root web application context. As you can see (see NO MESSAGE EXCERPT snippets at the end of this bug description) spring's start looking for a beanRefContext.xml file in different locations (classpath locations I guess) and finally the one found in my application server application domain/lib/classes is used as indicated by this log entry: [#|2008-01-05T12:45:51.755+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,755 [INFO ] org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from file [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes\beanRefContext.xml]  Once found, spring starts processing the beanRefContext.xml loading the ""service"" bean that contains the filenames of the actual application contexts that are to be loaded (see NO MESSAGE snippet at the end of this description).  Then I can access my application via its url  and everything works as expected (both the web components as well as the MDBs and SLSBs have access to the shared contexts at the beans in it): request => pojo delegate => ejb service (CMT) => pojo service => hibernate dao message => mdb (CMT) => pojo controller => ejb service (CMT) => pojo service => hibernate dao.  That is, as long as the container doesn't preload one or more of the ejb's before the web module is loaded and started then everythings goes fine.  However the above setup does not work if  there is a message on the queue when starting(deploying) the application (in SJAS terms, the domain). Again the ejb module is loaded and then the web module is: [#|2008-01-05T13:14:41.494+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.core.classloading|_ThreadID=10;|LDR5010: All ejb(s) of [webedison] loaded successfully!|#] [#|2008-01-05T13:14:41.534+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.container.web|_ThreadID=10;|WEB0100: Loading web module [webedison:webedison.war] in virtual server [server] at [/edison]|#]  But as you can see in the following snippet (watch the thread ids), before the web module is fully started (and therefore before the shared context is loaded) another thread starts preloading the MDB (because there's a message on the queue its listening on) which results in a call being made by the container to the mdb's setMessageDrivenContext method that, as written above, contains the following statements: super.setMessageDrivenContext(messageDrivenContext); setBeanFactoryLocator(ContextSingletonBeanFactoryLocator.getInstance(""classpath*:**/beanRefContext.xml"")); setBeanFactoryLocatorKey(""service"");  From the ONE MESSAGE SCENARIO snippet below you can see that the second statement results in a refresh of the context ... however it's not initialized yet because the web module is not fully ""started"" yet...resulting in an exception ... the context not being initialized ... the web module not being ""started"" and available for use.  The bug (?) that should be solved therefore I guess is how we can initialize the context from within an ejb when it's not initialized yet ""by"" the web module and how the web module is able to detect that it's already initialized or being initialized (by the ejb module) ?  What are the options of getting this to work ?  Kind regards, EDH  ONE MESSAGE SCENARIO -  EXCERPT FROM server.log showing the fact that the thread that's preloading the MDB results in refreshing the context  which is not yet initialized by the other thread that starts the servlet engine and initializes the context: \ [#|2008-01-05T13:14:41.494+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.core.classloading|_ThreadID=10;|LDR5010: All ejb(s) of [webedison] loaded successfully!|#]  [#|2008-01-05T13:14:41.534+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.container.web|_ThreadID=10;|WEB0100: Loading web module [webedison:webedison.war] in virtual server [server] at [/edison]|#]  [#|2008-01-05T13:14:41.594+0100|FINE|sun-appserver-ee8.1_02|javax.enterprise.system.container.ejb|_ThreadID=12;|[Pool-webedison:ZendingBatchConsumerBean]: Added PoolResizeTimerTask...|#]  [#|2008-01-05T13:14:41.644+0100|FINE|sun-appserver-ee8.1_02|javax.enterprise.system.container.ejb|_ThreadID=13;|[Pool-webedison:ZendingBatchConsumerBean]: Resize started at: Sat Jan 05 13:14:41 CET 2008 steadyPoolSize ::1 resizeQuantity ::1 maxPoolSize ::1|#]  [#|2008-01-05T13:14:41.644+0100|FINE|sun-appserver-ee8.1_02|javax.enterprise.system.container.ejb|_ThreadID=13;|[Pool-webedison:ZendingBatchConsumerBean]: Attempting to preload 1 beans. CurSize/MaxPoolSize: 0/1|#]  [#|2008-01-05T13:18:44.416+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=13;|2008-01-05 13:18:44,416 [INFO ] org.springframework.context.support.ClassPathXmlApplicationContext - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@151000a: display name [org.springframework.context.support.ClassPathXmlApplicationContext@151000a]; startup date [Sat Jan 05 13:18:44 CET 2008]; root of context hierarchy |#]  [#|2008-01-05T13:18:44.897+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 13:18:44,897 [INFO ] org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Sun-Java-System/Application-Server |#]  [#|2008-01-05T13:18:45.978+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=13;|2008-01-05 13:18:45,978 [DEBUG] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loading schema mappings from [META-INF/spring.schemas] |#]  [#|2008-01-05T13:18:46.079+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=13;|2008-01-05 13:18:46,079 [DEBUG] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loaded schema mappings: {} |#]  [#|2008-01-05T13:18:46.079+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=13;|2008-01-05 13:18:46,079 [DEBUG] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loading schema mappings from [META-INF/spring.schemas] |#]  [#|2008-01-05T13:18:46.079+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=13;|2008-01-05 13:18:46,079 [DEBUG] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loaded schema mappings: {} |#]  [#|2008-01-05T13:18:46.229+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=13;|2008-01-05 13:18:46,229 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Looking for matching resources in directory tree [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\config\log4j] |#]  [#|2008-01-05T13:18:46.229+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=13;|2008-01-05 13:18:46,229 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\config\log4j] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/config/log4j/**/beanRefContext.xml] |#]  [#|2008-01-05T13:18:46.229+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=13;|2008-01-05 13:18:46,229 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Looking for matching resources in directory tree [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes] |#]  [#|2008-01-05T13:18:46.229+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=13;|2008-01-05 13:18:46,229 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/lib/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T13:18:46.309+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=13;|2008-01-05 13:18:46,309 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Resolved location pattern [classpath*:**/beanRefContext.xml] to resources [file [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes\beanRefContext.xml]] |#]  [#|2008-01-05T13:18:46.319+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=13;|2008-01-05 13:18:46,319 [INFO ] org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from file [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes\beanRefContext.xml] |#]  [#|2008-01-05T13:18:46.319+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=13;|2008-01-05 13:18:46,319 [DEBUG] org.springframework.beans.factory.xml.DefaultDocumentLoader - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl] |#]  [#|2008-01-05T13:19:01.556+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.container.web|_ThreadID=10;|WebModule[/edison]Initializing Spring root WebApplicationContext|#]  [#|2008-01-05T13:19:01.556+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 13:19:01,556 [INFO ] org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization started |#]  [#|2008-01-05T13:19:01.556+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 13:19:01,556 [DEBUG] org.springframework.web.context.ContextLoader - Getting parent context definition: using parent context key of 'service' with BeanFactoryLocator |#]  [#|2008-01-05T13:19:17.730+0100|SEVERE|sun-appserver-ee8.1_02|javax.enterprise.system.container.ejb.mdb|_ThreadID=13;|MDB00050: Message-driven bean [webedison:ZendingBatchConsumerBean]: Exception in creating message-driven ejb : [java.lang.reflect.InvocationTargetException]|#]  [#|2008-01-05T13:19:17.730+0100|SEVERE|sun-appserver-ee8.1_02|javax.enterprise.system.container.ejb.mdb|_ThreadID=13;|java.lang.reflect.InvocationTargetException org.springframework.beans.factory.access.BootstrapException: Unable to initialize group definition. Group resource name [classpath*:**/beanRefContext.xml], factory key [service]; nested exception is org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 5 in XML document from file [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes\beanRefContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-elt.1: Cannot find the declaration of element 'beans'. Caused by: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 5 in XML document from file [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes\beanRefContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-elt.1: Cannot find the declaration of element 'beans'. Caused by: org.xml.sax.SAXParseException: cvc-elt.1: Cannot find the declaration of element 'beans'. at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:236) at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:172) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:382) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:316) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:1944) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:705) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:330) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl$NSContentDispatcher.scanRootElementHook(XMLNSDocumentScannerImpl.java:779) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(XMLDocumentFragmentScannerImpl.java:1794) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:368) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:834) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:764) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:148) at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:250) at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:292) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:351) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:280) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:131) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:147) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:173) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:112) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:79) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:100) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:298) at org.springframework.context.access.ContextSingletonBeanFactoryLocator.initializeDefinition(ContextSingletonBeanFactoryLocator.java:137) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:381) at org.springframework.ejb.support.AbstractEnterpriseBean.loadBeanFactory(AbstractEnterpriseBean.java:116) at org.springframework.ejb.support.AbstractMessageDrivenBean.ejbCreate(AbstractMessageDrivenBean.java:78) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.sun.ejb.containers.MessageBeanContainer.createMessageDrivenEJB(MessageBeanContainer.java:692) at com.sun.ejb.containers.MessageBeanContainer.access$100(MessageBeanContainer.java:71) at com.sun.ejb.containers.MessageBeanContainer$MessageBeanContextFactory.create(MessageBeanContainer.java:467) at com.sun.ejb.containers.util.pool.NonBlockingPool.preload(NonBlockingPool.java:249) at com.sun.ejb.containers.util.pool.NonBlockingPool.doResize(NonBlockingPool.java:473) at com.sun.ejb.containers.util.pool.NonBlockingPool$ReSizeWork.run(NonBlockingPool.java:541) at com.sun.ejb.containers.util.pool.NonBlockingPool$ReSizeWork.service(NonBlockingPool.java:533) at com.sun.ejb.containers.util.WorkAdapter.doWork(WorkAdapter.java:44) at com.sun.corba.ee.impl.orbutil.threadpool.ThreadPoolImpl$WorkerThread.run(ThreadPoolImpl.java:409) |#]  [#|2008-01-05T13:19:17.730+0100|SEVERE|sun-appserver-ee8.1_02|javax.enterprise.system.container.ejb.mdb|_ThreadID=13;|java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at com.sun.ejb.containers.MessageBeanContainer.createMessageDrivenEJB(MessageBeanContainer.java:692) at com.sun.ejb.containers.MessageBeanContainer.access$100(MessageBeanContainer.java:71) at com.sun.ejb.containers.MessageBeanContainer$MessageBeanContextFactory.create(MessageBeanContainer.java:467) at com.sun.ejb.containers.util.pool.NonBlockingPool.preload(NonBlockingPool.java:249) at com.sun.ejb.containers.util.pool.NonBlockingPool.doResize(NonBlockingPool.java:473) at com.sun.ejb.containers.util.pool.NonBlockingPool$ReSizeWork.run(NonBlockingPool.java:541) at com.sun.ejb.containers.util.pool.NonBlockingPool$ReSizeWork.service(NonBlockingPool.java:533) at com.sun.ejb.containers.util.WorkAdapter.doWork(WorkAdapter.java:44) at com.sun.corba.ee.impl.orbutil.threadpool.ThreadPoolImpl$WorkerThread.run(ThreadPoolImpl.java:409) Caused by: org.springframework.beans.factory.access.BootstrapException: Unable to initialize group definition. Group resource name [classpath*:**/beanRefContext.xml], factory key [service]; nested exception is org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 5 in XML document from file [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes\beanRefContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-elt.1: Cannot find the declaration of element 'beans'. at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:384) at org.springframework.ejb.support.AbstractEnterpriseBean.loadBeanFactory(AbstractEnterpriseBean.java:116) at org.springframework.ejb.support.AbstractMessageDrivenBean.ejbCreate(AbstractMessageDrivenBean.java:78) ... 13 more Caused by: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 5 in XML document from file [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes\beanRefContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-elt.1: Cannot find the declaration of element 'beans'. at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:359) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:280) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:131) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:147) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:173) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:112) at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:79) at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:100) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:298) at org.springframework.context.access.ContextSingletonBeanFactoryLocator.initializeDefinition(ContextSingletonBeanFactoryLocator.java:137) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:381) ... 15 more Caused by: org.xml.sax.SAXParseException: cvc-elt.1: Cannot find the declaration of element 'beans'. at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:236) at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:172) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:382) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:316) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:1944) at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:705) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:330) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl$NSContentDispatcher.scanRootElementHook(XMLNSDocumentScannerImpl.java:779) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(XMLDocumentFragmentScannerImpl.java:1794) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:368) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:834) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:764) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:148) at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:250) at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:292) at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:351) ... 26 more |#]  [#|2008-01-05T13:19:17.730+0100|FINE|sun-appserver-ee8.1_02|javax.enterprise.system.container.ejb|_ThreadID=13;|[Pool-webedison:ZendingBatchConsumerBean]: After preload CurSize/MaxPoolSize: 0/1|#]  [#|2008-01-05T13:19:17.730+0100|FINE|sun-appserver-ee8.1_02|javax.enterprise.system.container.ejb|_ThreadID=13;|[Pool-webedison:ZendingBatchConsumerBean]: Resize completed at: Sat Jan 05 13:19:17 CET 2008; after reSize: [Pool-webedison:ZendingBatchConsumerBean] CC=1; DC=0; CS=0; SS=1; MS=1;|#]  [#|2008-01-05T13:19:17.730+0100|FINE|sun-appserver-ee8.1_02|javax.enterprise.system.container.ejb|_ThreadID=13;|[Pool-webedison:ZendingBatchConsumerBean]: Resize took: 276.086 seconds.|#]  [#|2008-01-05T13:19:17.730+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 13:19:17,730 [ERROR] org.springframework.web.context.ContextLoader - Context initialization failed java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:120) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:683) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:394) at org.springframework.web.context.ContextLoader.loadParentContext(ContextLoader.java:311) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:180) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4010) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4522) at com.sun.enterprise.web.WebModule.start(WebModule.java:241) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1086) at org.apache.catalina.core.StandardHost.start(StandardHost.java:847) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1086) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:483) at org.apache.catalina.startup.Embedded.start(Embedded.java:894) at com.sun.enterprise.web.WebContainer.start(WebContainer.java:739) at com.sun.enterprise.web.HttpServiceWebContainer.startInstance(HttpServiceWebContainer.java:964) at com.sun.enterprise.web.HttpServiceWebContainerLifecycle.onStartup(HttpServiceWebContainerLifecycle.java:50) at com.sun.enterprise.server.ApplicationServer.onStartup(ApplicationServer.java:300) at com.sun.enterprise.server.PEMain.run(PEMain.java:281) at com.sun.enterprise.server.PEMain.main(PEMain.java:207) |#]  [#|2008-01-05T13:19:17.730+0100|SEVERE|sun-appserver-ee8.1_02|javax.enterprise.system.container.web|_ThreadID=10;|WebModule[/edison]Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:120) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:683) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:394) at org.springframework.web.context.ContextLoader.loadParentContext(ContextLoader.java:311) at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:180) at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:49) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4010) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4522) at com.sun.enterprise.web.WebModule.start(WebModule.java:241) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1086) at org.apache.catalina.core.StandardHost.start(StandardHost.java:847) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1086) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:483) at org.apache.catalina.startup.Embedded.start(Embedded.java:894) at com.sun.enterprise.web.WebContainer.start(WebContainer.java:739) at com.sun.enterprise.web.HttpServiceWebContainer.startInstance(HttpServiceWebContainer.java:964) at com.sun.enterprise.web.HttpServiceWebContainerLifecycle.onStartup(HttpServiceWebContainerLifecycle.java:50) at com.sun.enterprise.server.ApplicationServer.onStartup(ApplicationServer.java:300) at com.sun.enterprise.server.PEMain.run(PEMain.java:281) at com.sun.enterprise.server.PEMain.main(PEMain.java:207) |#]  [#|2008-01-05T13:19:17.730+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 13:19:17,730 [ERROR] org.apache.catalina.core.StandardContext - Error listenerStart |#]  [#|2008-01-05T13:19:17.730+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 13:19:17,730 [ERROR] org.apache.catalina.core.StandardContext - Context startup failed due to previous errors |#]  [#|2008-01-05T13:19:17.740+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.container.web|_ThreadID=10;|WebModule[/edison]Closing Spring root WebApplicationContext|#] \  NO MESSAGE SCENARIO - EXCERPT FROM server.log INDICATING SEARCH ORDER for beanrefcontext.xml file: \ [#|2008-01-05T12:45:50.714+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.container.web|_ThreadID=10;|WebModule[/edison]Initializing Spring root WebApplicationContext|#]  [#|2008-01-05T12:45:50.714+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:50,714 [INFO ] org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization started |#]  [#|2008-01-05T12:45:50.754+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:50,754 [DEBUG] org.springframework.web.context.ContextLoader - Getting parent context definition: using parent context key of 'service' with BeanFactoryLocator |#]  [#|2008-01-05T12:45:50.954+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:50,954 [INFO ] org.springframework.context.support.ClassPathXmlApplicationContext - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@138e667: display name [org.springframework.context.support.ClassPathXmlApplicationContext@138e667]; startup date [Sat Jan 05 12:45:50 CET 2008]; root of context hierarchy |#]  [#|2008-01-05T12:45:51.585+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,585 [DEBUG] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loading schema mappings from [META-INF/spring.schemas] |#]  [#|2008-01-05T12:45:51.595+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,595 [DEBUG] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loaded schema mappings: {http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd} |#]  [#|2008-01-05T12:45:51.595+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,595 [DEBUG] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loading schema mappings from [META-INF/spring.schemas] |#]  [#|2008-01-05T12:45:51.605+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,605 [DEBUG] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loaded schema mappings: {http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd} |#]  [#|2008-01-05T12:45:51.635+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,635 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Looking for matching resources in directory tree [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\config\log4j] |#]  [#|2008-01-05T12:45:51.635+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,635 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\config\log4j] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/config/log4j/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.635+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,635 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Looking for matching resources in directory tree [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes] |#]  [#|2008-01-05T12:45:51.635+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,635 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/lib/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.645+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,645 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Looking for matching resources in directory tree [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes] |#]  [#|2008-01-05T12:45:51.645+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,645 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.645+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,645 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.645+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,645 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.645+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,645 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.645+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,645 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.655+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,655 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.655+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,655 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\menu] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.665+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,665 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\pdf] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.665+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,665 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\security] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.675+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,675 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.675+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,675 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\applicatiebeheer] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.685+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,685 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\gebruikersbeheer] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.695+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,695 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\integratiebeheer] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.695+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,695 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\main] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.705+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,705 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\opvolging] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.705+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,705 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\opvolging\common] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.705+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,705 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\opvolging\foutafmelding] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.715+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,715 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\opvolging\mappenset] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.715+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,715 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\opvolging\overzicht] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.725+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,725 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\opvolging\terugzendingen] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.735+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,735 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\opvolging\verzenden] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.735+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,735 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\opvolging\zendingbatch] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.735+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,735 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\plugin] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.735+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,735 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\rapporten] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.735+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,735 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\security] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.735+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,735 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\struts\validation] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.745+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,745 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\tables] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.745+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,745 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\taglib] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.745+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,745 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Searching directory [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\applications\j2ee-apps\webedison\webedison_war\WEB-INF\classes\be\vlaanderen\ov\edison\presentation\util] for files matching pattern [C:/dev/apps/sun/appserver/81EEQ2/domains/webedison/applications/j2ee-apps/webedison/webedison_war/WEB-INF/classes/**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:51.755+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,755 [DEBUG] org.springframework.core.io.support.PathMatchingResourcePatternResolver - Resolved location pattern [classpath*:**/beanRefContext.xml] to resources [file [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes\beanRefContext.xml]] |#]  [#|2008-01-05T12:45:51.755+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:51,755 [INFO ] org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from file [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes\beanRefContext.xml] \  NO MESSAGE SCENARIO -  EXCERPT FROM server.log showing that beanrefcontext.xml file is being processed: \ [#|2008-01-05T12:45:52.256+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,256 [DEBUG] org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loaded 1 bean definitions from location pattern [classpath*:**/beanRefContext.xml] |#]  [#|2008-01-05T12:45:52.256+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,256 [INFO ] org.springframework.context.support.ClassPathXmlApplicationContext - Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@138e667]: org.springframework.beans.factory.support.DefaultListableBeanFactory@460434 |#]  [#|2008-01-05T12:45:52.296+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,296 [DEBUG] org.springframework.context.support.ClassPathXmlApplicationContext - 1 beans defined in org.springframework.context.support.ClassPathXmlApplicationContext@138e667: display name [org.springframework.context.support.ClassPathXmlApplicationContext@138e667]; startup date [Sat Jan 05 12:45:50 CET 2008]; root of context hierarchy |#]  [#|2008-01-05T12:45:52.336+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,336 [DEBUG] org.springframework.context.support.ClassPathXmlApplicationContext - Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@197e57c] |#]  [#|2008-01-05T12:45:52.366+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,366 [DEBUG] org.springframework.context.support.ClassPathXmlApplicationContext - Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@17c1a9f] |#]  [#|2008-01-05T12:45:52.366+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,366 [INFO ] org.springframework.beans.factory.support.DefaultListableBeanFactory - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@460434: defining beans [service]; root of factory hierarchy |#]  [#|2008-01-05T12:45:52.376+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,376 [DEBUG] org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'service' |#]  [#|2008-01-05T12:45:52.376+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,376 [DEBUG] org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating instance of bean 'service' with merged definition [Root bean: class [org.springframework.context.support.ClassPathXmlApplicationContext]; scope=singleton; abstract=false; lazyInit=false; autowireCandidate=true; autowireMode=0; dependencyCheck=0; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in file [C:\dev\apps\sun\appserver\81EEQ2\domains\webedison\lib\classes\beanRefContext.xml]] |#]  [#|2008-01-05T12:45:52.807+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,807 [INFO ] org.springframework.context.support.ClassPathXmlApplicationContext - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@1c0fc25: display name [org.springframework.context.support.ClassPathXmlApplicationContext@1c0fc25]; startup date [Sat Jan 05 12:45:52 CET 2008]; root of context hierarchy |#]  [#|2008-01-05T12:45:52.807+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,807 [DEBUG] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loading schema mappings from [META-INF/spring.schemas] |#]  [#|2008-01-05T12:45:52.827+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,817 [DEBUG] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loaded schema mappings: {http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd} |#]  [#|2008-01-05T12:45:52.827+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,827 [DEBUG] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loading schema mappings from [META-INF/spring.schemas] |#]  [#|2008-01-05T12:45:52.827+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,827 [DEBUG] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loaded schema mappings: {http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd} |#]  [#|2008-01-05T12:45:52.827+0100|INFO|sun-appserver-ee8.1_02|javax.enterprise.system.stream.out|_ThreadID=10;|2008-01-05 12:45:52,827 [INFO ] org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from class path resource [spring-serviceaccess.xml] ....... and so on \  ---  **Affects:** 2.0.3  **Issue Links:** - #8847 Error when client ApplicationContext calls methods on parent ApplicationContext ""too early""  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: bug,","spring-projects-issues","2008-01-04T22:58:09Z","2019-01-11T16:30:11Z"
"","9834","spring-form.tld error, label doesn't work whithout path attribute [SPR-5161]","**[Eduardo Serrano Luque](https://jira.spring.io/secure/ViewProfile.jspa?name=axenedu)** opened **[SPR-5161](https://jira.spring.io/browse/SPR-5161?redirect=false)** and commented  According to the JavaDocs for the  tag, it should be possible to output object-level errors only by omitting the ""path"" attribute (option 2 in the JavaDoc):  http://static.springframework.org/spring/docs/2.5.x/reference/spring-form.tld.html#spring-form.tld.errors  When you use  A Exception is thrown, solution is only change the value of required in line 1476 spring-form.tld  1467	\ 1468	\ 1469		\errors\ 1470		\org.springframework.web.servlet.tags.form.ErrorsTag\ 1471		\empty\ 1472		\Renders field errors in an HTML 'span' tag.\ 1473 1474		\ 1475			\path\ 1476			\false\ \ 1477			\true\ 1478			\Path to errors object for data binding\ 1479		\   ---  **Affects:** 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-09-17T02:17:12Z","2012-06-18T12:45:18Z"
"","9833","CLONE - does not work without ""path"" attribute [SPR-5160]","**[Eduardo Serrano Luque](https://jira.spring.io/secure/ViewProfile.jspa?name=axenedu)** opened **[SPR-5160](https://jira.spring.io/browse/SPR-5160?redirect=false)** and commented  According to the JavaDocs for the  tag, it should be possible to output object-level errors only by omitting the ""path"" attribute (option 2 in the JavaDoc):  http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/web/servlet/tags/form/ErrorsTag.html  For example:    ...   This does not work in Spring 2.5-rc1. Instead, the following exception is generated:  org.springframework.beans.NotReadablePropertyException: Invalid property '' of bean class [accounts.Account]: Bean property '' is not readable or has an invalid getter method: Does the return type of the getter match the parameter type of the setter? org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:544) org.springframework.beans.BeanWrapperImpl.getPropertyValue(BeanWrapperImpl.java:536) org.springframework.validation.AbstractPropertyBindingResult.getActualFieldValue(AbstractPropertyBindingResult.java:78) org.springframework.validation.AbstractBindingResult.getFieldValue(AbstractBindingResult.java:337) org.springframework.web.servlet.support.BindStatus.\(BindStatus.java:118) org.springframework.web.servlet.tags.form.AbstractDataBoundFormElementTag.getBindStatus(AbstractDataBoundFormElementTag.java:171) org.springframework.web.servlet.tags.form.ErrorsTag.shouldRender(ErrorsTag.java:131) org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag.writeTagContent(AbstractHtmlElementBodyTag.java:46) org.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:90) org.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:77) org.apache.jsp.WEB_002dINF.views.editAccountForm_jsp._jspService(editAccountForm_jsp.java:111) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:803) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:393) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:320) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266) javax.servlet.http.HttpServlet.service(HttpServlet.java:803) org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163) org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:239) org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1145) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:882) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:795) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:476) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:431) javax.servlet.http.HttpServlet.service(HttpServlet.java:690) javax.servlet.http.HttpServlet.service(HttpServlet.java:803)  The same code works fine in Spring 2.0.7.  It looks like the implementation of AbstractDataBoundFormTag.getBindStatus() changed in a such a way as to no longer support a null or empty path (which is the case here), but not sure whether this is the true source of the problem.  This issue was raised in the following support forum thread:  http://forum.springframework.org/showthread.php?t=45278  Thanks.   ---  **Affects:** 2.5 RC1","closed","in: web,","spring-projects-issues","2008-09-17T01:59:17Z","2019-01-12T16:50:45Z"
"","8879","jms:listener-container ""concurrency"" and ""prefetch"" combination leads to slow scaling [SPR-4201]","**[Eduardo Garcia Lopez](https://jira.spring.io/secure/ViewProfile.jspa?name=egarcialopez)** opened **[SPR-4201](https://jira.spring.io/browse/SPR-4201?redirect=false)** and commented  When configuring a Message listener as bellow, only one thread is consuming messages:      When I configure the Message Listener not with the jms namespaces, but ""the old way"", it works fine. The example bellow makes mi MDP be consumed concurrently:  \ \ \ \ \ \   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-01T02:20:15Z","2012-06-19T03:47:28Z"
"","9724","PropertyEditors to render abitrary web content [SPR-5049]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-5049](https://jira.spring.io/browse/SPR-5049?redirect=false)** and commented  PropertyEditors are used throughout Spring to parse XML configuration and to handle web forms. However, if you just want to render something in a JSP you are out of luck: spring:transform can only be used in spring:bind and if you want to render the object someone on the page this might not be the case. Obviously the PropertyEditors are configured in the BindingResult and you need to have a reference to the one you want to use.   --- No further details from [SPR-5049](https://jira.spring.io/browse/SPR-5049?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-07-30T23:35:01Z","2015-09-22T17:34:39Z"
"","9676","Add @SessionMapping  [SPR-5001]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-5001](https://jira.spring.io/browse/SPR-5001?redirect=false)** and commented  Currently a parameter to a Web MVC method can be annotated using `@RequestMapping` so that a part of the HTTP request is bound to this parameter. I would suggest to add `@SessionMapping` that allows the same for the HTTP Session.  ---  **Issue Links:** - #18468 Convenient access to session and request attributes in controller methods (_**""is superseded by""**_)","closed","type: enhancement,","spring-projects-issues","2008-07-12T23:56:18Z","2019-01-11T14:37:02Z"
"","9384","jms:listener should have a message-converter and a destination-resolver [SPR-4707]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-4707](https://jira.spring.io/browse/SPR-4707?redirect=false)** and commented  Currently the jms:listener-container has a message-converter and a destination-resolver. Even though this is useful in same cases you want to use sepcial message-converter and destination-resolver for each listener. The MessageListenerAdapter also has a way to set those per adapter. So I think it would be more logical to use this approach for the jms Namespace as well.   ---  **Affects:** 2.5 final, 2.5.1, 2.5.2, 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-04-15T01:03:18Z","2012-06-19T09:36:16Z"
"","9309","Load dedicated child ApplicationContext for test instance in the TestContext framework [SPR-4632]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-4632](https://jira.spring.io/browse/SPR-4632?redirect=false)** and commented  #### Status Quo  The `loadContext(\*\)` methods in `AbstractGenericContextLoader` and `AbstractGenericWebContextLoader` invoke `AnnotationConfigUtils.registerAnnotationConfigProcessors(context)`.  The result is that `@Autowired`, `@Resource`, `@Inject`, etc. all work by default, even if annotation-driven dependency injection is not explicitly configured in the test's `ApplicationContext`. Consequently, if a developer is not aware of this, then errors related to the lack of explicit annotation-driven DI support in production configuration will not be noticed until after testing which is typically undesirable.  Note, however, that this unexpected behavior only applies to XML-based configuration. With JavaConfig, an `AnnotatedBeanDefinitionReader` (used internally by `AnnotationConfigContextLoader` and `AnnotationConfigWebContextLoader`) automatically registers the _annotation config processors_.  Furthermore, `BeanPostProcessors` may inadvertently be applied to the test instance -- even though the test is not truly a _bean_ in the `ApplicationContext`. This leads to potentially problematic behavior such as accidental proxying of the test instance, as described in #14113.  ---  #### Deliverables  1. [ ] As suggested in comments for this issue, create an `ApplicationContext` dedicated solely to the test instance (for the purpose of dependency injection and bean initialization) and set the `parent` of that context to the `ApplicationContext` loaded by the TCF. 2. [ ] Stop invoking `AnnotationConfigUtils.registerAnnotationConfigProcessors()` in:    - [ ] `AbstractGenericContextLoader`    - [ ] `AbstractGenericWebContextLoader` 3. [ ] Ensure that _child_ contexts are properly closed with regard to context caching in the TCF.  ---  #### Original Issue Summary  _Do not enable annotation-driven DI for the entire ApplicationContext in the TestContext framework_  #### Original Proposal  It would be better if the TestContext framework (TCF) only enabled annotation-driven dependency injection for test instances and not for the entire `ApplicationContext`.  ---  **Affects:** 2.5.2  **Attachments:** - [AnnotationConfigProcessorTestExecutionListener.java](https://jira.spring.io/secure/attachment/14662/AnnotationConfigProcessorTestExecutionListener.java) (_1.42 kB_)  **Issue Links:** - #13149 Spring Test should not modify the application context under test (_**""is duplicated by""**_) - #14496 Support WebApplicationContext hierarchies in the TestContext Framework - #10284 Provide support for context hierarchies in the TestContext Framework - #18295 Support 'throw-away' context for a test class - #10719 Provide mechanism for disabling automatic annotation-driven autowiring in tests - #14113 Test instances should not be proxied in the TestContext framework  6 votes, 6 watchers","open","type: enhancement,","spring-projects-issues","2008-03-26T23:56:21Z","2019-01-15T12:06:34Z"
"","8922","Exception if multiple @HandlerMappings are registered for the same URL [SPR-4244]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-4244](https://jira.spring.io/browse/SPR-4244?redirect=false)** and commented  If multiple `@HandlerMappings` are defined for the same URL one of the is picked randomly. It would be better to throw an exception in that case.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-11T22:34:55Z","2012-06-19T03:46:42Z"
"","8921","@RequestParam without @HandlerMapping [SPR-4243]","**[Eberhard Wolff](https://jira.spring.io/secure/ViewProfile.jspa?name=eberhardwolff)** opened **[SPR-4243](https://jira.spring.io/browse/SPR-4243?redirect=false)** and commented  It would be good to use `@RequestParam` to map request parameter without using `@HandlerMapping`. The reason is that the mapping to URLs is probably something that should be put in a configuration for overview and to be flexible. However, parsing the paramters of the request is a tedious task that can be simplified with `@RequestParam` so it would be great to use it in more cases.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-11T22:33:05Z","2012-06-18T12:44:35Z"
"","9017","Classes with Inner classes are not recognized as independent classes themselves [SPR-4338]","**[Dylan Schell](https://jira.spring.io/secure/ViewProfile.jspa?name=dylanschell)** opened **[SPR-4338](https://jira.spring.io/browse/SPR-4338?redirect=false)** and commented  When trying to define components through the component-scan feature, one of our classes was stubbornly refusing the be published in the context. after some debugging it seemed that it was ""failing"" in the ClassPathScanningCandidateComponentProvider.isCandidateComponent()  beanDefinition.getMetadata().isConcrete() is properly returning true, but the beanDefinition.getMetadata().isIndependent() is returning false.  as an aside, there seems to be no logging whatsoever in these classes, making it hard to see which components get published. }  ---  **Affects:** 2.5.1  **Issue Links:** - #9003 component scanning incorrectly excludes classes (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-01-15T00:31:59Z","2019-01-12T16:51:09Z"
"","9748","Create interceptor that adds portlet.xml init-params to the model [SPR-5074]","**[Dustin Schultz](https://jira.spring.io/secure/ViewProfile.jspa?name=dschultz)** opened **[SPR-5074](https://jira.spring.io/browse/SPR-5074?redirect=false)** and commented  It's nice to be able to use init-params as portlet wide configuration parameters such as  \ 	\model:jQueryEnabled\ 	\true\ \ It would be an improvement to have them available to all models.   ---  **Affects:** 2.5.5  **Attachments:** - [AddInitParamsInterceptor.java](https://jira.spring.io/secure/attachment/14518/AddInitParamsInterceptor.java) (_2.60 kB_)","closed","type: enhancement,","spring-projects-issues","2008-08-08T13:09:54Z","2012-06-19T09:36:26Z"
"","9278","AOP Bean Pointcut does not work on bean aliases. [SPR-4601]","**[Duncan Doyle](https://jira.spring.io/secure/ViewProfile.jspa?name=mccloud)** opened **[SPR-4601](https://jira.spring.io/browse/SPR-4601?redirect=false)** and commented  Spring AOP's  ""bean"" PCD does not work on Spring bean aliases. It seems that the pointcut only finds the bean 'id' or the first name defined in the 'name' attribute'. Below is an example.  \  \                     	     	                 \  In this example the pointcut is defined on bean 'helloWorldAlias' and because it is the first name in the 'name' attribute of the bean with class 'HelloWorldImpl', the advice is executed. However, when you switch the 'helloWorldAlias' and the'helloWorld' names in the 'name' attribute, the advice isn't executed anymore.  The same behaviour can be seen when using the \ tag. When we replace the bean declaration of the 'HelloWorldImpl' with this:                  The advice isn't executed either, although a pointcut has been defined on the alias 'helloWorldAlias'.  According to the Spring documentation, aliases and bean id's are equivalent in the Spring container, implying equivalent behaviour when used in an AOP context.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-19T01:51:46Z","2012-06-19T03:47:34Z"
"","9108","HttpInvokerClientInterceptor.executeRequest method doesn't give access to original MethodInvocation when overridden. [SPR-4430]","**[Duncan Doyle](https://jira.spring.io/secure/ViewProfile.jspa?name=mccloud)** opened **[SPR-4430](https://jira.spring.io/browse/SPR-4430?redirect=false)** and commented  I'm subclassing the HttpInvokerClientInterceptor (and some other remoting classes) to provide dynamic routing and dynamic timeout configuration (through some other interceptor's). I'm using the ProxyMethodInvocation's user attributes map to communicate these routing and timeout configurations in between interceptor's in the chain.  It is advised to override the executeRequest(RemoteMethodInvocation invocation) when subclassing the HttpInvokerClientInterceptor to pass a different configuration to the actual HttpInvokerRequestExecutor. However, when subclassing this method I don't have access to the original (Proxy)MethodInvocation which contains my userAttributes map, which contains my chain (request scope) configuration. I could override the interceptor's 'invoke' method but in my opinion that would be bad design.  I propose to add a second 'executeRequest' method which takes 2 parameters, the RemoteMethodInvocation and the original MethodInvocation. The default implementation just delegates the call to the 1 param executeRequest method (this solution is also provided in, for example, Spring's AstractSingleBeanDefinitionParser for the doParse methods). This way, when one subclasses the HttpInvokerClientInterceptor one can have access to the userAttributes map in the original MethodInvocation and this map can be used to create a custom HttpInvokerClientConfiguration.  The code below shows my proposed solution:  public Object invoke(MethodInvocation methodInvocation) throws Throwable { if (AopUtils.isToStringMethod(methodInvocation.getMethod())) { return ""HTTP invoker proxy for service URL ["" + getServiceUrl() + ""]""; }      	RemoteInvocation invocation = createRemoteInvocation(methodInvocation);     	RemoteInvocationResult result = null;     	try {     		result = executeRequest(invocation, methodInvocation);       //This method now calls the new 2 argument executeRequest method.     	}     	catch (Throwable ex) {     		throw convertHttpInvokerAccessException(ex);     	}     	try {     		return recreateRemoteInvocationResult(result);     	}     	catch (Throwable ex) {     		if (result.hasInvocationTargetException()) {     			throw ex;     		}     		else {     			throw new RemoteInvocationFailureException(""Invocation of method ["" + methodInvocation.getMethod() +     					""] failed in HTTP invoker remote service at ["" + getServiceUrl() + ""]"", ex);     		}     	}     }          /**      * Execute the given remote invocation via the HttpInvokerRequestExecutor.      * Can be overridden in subclasses to pass a different configuration object      * to the executor. Alternatively, add further configuration properties in a      * subclass of this accessor: By default, the accessor passed itself as      * configuration object to the executor.      * @param invocation the RemoteInvocation to execute      * @return the RemoteInvocationResult object      * @throws IOException if thrown by I/O operations      * @throws ClassNotFoundException if thrown during deserialization      * @throws Exception in case of general errors      * @see #getHttpInvokerRequestExecutor      * @see HttpInvokerClientConfiguration      */     protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws Exception {     	return getHttpInvokerRequestExecutor().executeRequest(this, invocation);     }          /**      * Execute the given remote invocation via the HttpInvokerRequestExecutor.      * This is a hook method to allow access to the original      * MethodInvocation when subclassing this class and overriding this method.      * The default implementation delegates to the executeRequest      * version without MethodInvocation argument.      *       * @param invocation the RemoteInvocation to execute      * @param methodInvocation the original MethodInvocation passed to this interceptor.      * @return the RemoteInvocationResult object      * @throws IOException if thrown by I/O operations      * @throws ClassNotFoundException if thrown during deserialization      * @throws Exception in case of general errors      * @see #getHttpInvokerRequestExecutor      * @see HttpInvokerClientConfiguration      */     protected RemoteInvocationResult executeRequest(RemoteInvocation invocation, MethodInvocation methodInvocation) throws Exception {     	return executeRequest(invocation);     }    ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-06T20:10:37Z","2012-06-19T03:47:05Z"
"","9047","Unable to specify class for GenericBeanDefinition in BeanDefinitionBuilder [SPR-4369]","**[Duncan Doyle](https://jira.spring.io/secure/ViewProfile.jspa?name=mccloud)** opened **[SPR-4369](https://jira.spring.io/browse/SPR-4369?redirect=false)** and commented  In Spring 2.5 it is adviced to use GenericBeanDefinition in favour of the RootBeanDefintion. The BeanDefinitionBuilder however does not have (in my opinion) full support to build a GenericBeanDefinition object. Currently the only method provided to build a GenericBeanDefinition is BeanDefinitionBuilder.genericBeanDefinition(). This method however doesn't allow me to set the beanClass. As far as I can tell there is no option in the BeanDefinitionBuilder to set this classname for a GenericBeanDefinition. This results in a not fully build GenericBeanDefinition when calling the BeanDefinitionBuilder's 'getBeanDefinition()' method. I still have to call the 'setBeanClass' method on the GenericBeanDefinition itself to provide the correct Bean Class.  In my opinion, the BeanDefinitionBuilder should be able to return GenericBeanDefinition which is fully configured.  Possible solution would be to provide the methods currently available to build a RootBeanDefinition, so including 'factoryMethod', 'beanClass' and/or 'beanClassName' parameters.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-22T01:21:30Z","2012-06-19T03:46:58Z"
"","9616","Small typo in reference documentation - chapter 19 JMS [SPR-4941]","**[Dries Van Autreve](https://jira.spring.io/secure/ViewProfile.jspa?name=driesva)** opened **[SPR-4941](https://jira.spring.io/browse/SPR-4941?redirect=false)** and commented  In the JMS Chapter, in 19.4.5. there's written ""...you will need to configured a transaction manager..."" but it should be ""you will need to configure a transaction manager"". Notice the 'd' in configured.   ---  **Affects:** 2.0.8, 2.5.4  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-06-22T02:08:31Z","2012-06-19T03:47:22Z"
"","9790","Access to Spring Application Context in @AspectJ with LTW mode [SPR-5117]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-5117](https://jira.spring.io/browse/SPR-5117?redirect=false)** and commented  It would be nice if we could gain access to Spring Application Context when using `@AspectJ` with Load Time Weaving.  Many thanks to Marten Deinum who helped and suggested me to post this as an enhancement issue The thread is at: http://forum.springframework.org/showthread.php?t=59234   ---  **Affects:** 2.5.6","closed","in: core,","spring-projects-issues","2008-08-26T02:36:33Z","2019-01-11T15:32:26Z"
"","9716","Add new stereotypes for component scanning that works like @ContextConfiguration in Spring Test Framework [SPR-5041]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-5041](https://jira.spring.io/browse/SPR-5041?redirect=false)** and commented  I would love to see stereotypes that works like `@ContextConfiguration` in Spring Test Framework: - `@ComponentContextConfiguration` as an alternative to `@Component` - `@ServiceContextConfiguration`  as an alternative to `@Service` - `@RepositoryContextConfiguration`  as an alternative to `@Repository`  If  I annotate my class like the example below:  package example.service;  `@ServiceContextConfiguration` public class MyService {}  Instead of using annotation configuration, Spring will look for ""classpath*:/example/service/MyService-context.xml"" for the bean configurations. IMHO, this is a cool feature to have in Spring 3.x.  Regards,  Donny   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-26T18:59:13Z","2012-06-19T09:36:24Z"
"","9574","Shortcut annotations for @RequestMapping and RequestMethod  [SPR-4898]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-4898](https://jira.spring.io/browse/SPR-4898?redirect=false)** and commented  It is nice to have an annotation like '`@OnXXXXX`'  as a shortcut to a '`@RequestMapping`(method = RequestMethod.XXXXX)'  For example: '`@OnGet`' would be a shortcut to '`@RequestMapping`(method = RequestMethod.GET)'   ---  **Affects:** 2.5.6  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-06-07T04:23:23Z","2015-09-22T17:34:32Z"
"","9573","Default refresh-check-delay setting for all scripted beans [SPR-4897]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-4897](https://jira.spring.io/browse/SPR-4897?redirect=false)** and commented  It would be nice if we could set the default 'refresh-check-delay' for all scripted beans. The 'refresh-check-delay' value on 'lang' tag, if set, would override the default setting.  If possible, the 'refresh-check-delay' could also be configured via the groovy script, maybe using an annotation like '`@Lang`(refreshCheckDelay=500)'  ---  **Issue Links:** - #8379 Need default refresh-check-delay for Scripted Beans (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-06-07T03:27:02Z","2019-01-11T19:08:32Z"
"","9572","Support for automatic detection of 'stereotyped' groovy script [SPR-4896]","**[Donny A. Wijaya](https://jira.spring.io/secure/ViewProfile.jspa?name=fenrir)** opened **[SPR-4896](https://jira.spring.io/browse/SPR-4896?redirect=false)** and commented  it would be nice if  could scan a 'stereotyped' groovy script.   ---  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-06-07T03:11:43Z","2015-09-22T17:34:38Z"
"","9592","cannot use JDBC Datasource with collection-typed report parameters [SPR-4917]","**[Donal Murtagh](https://jira.spring.io/secure/ViewProfile.jspa?name=domurtag)** opened **[SPR-4917](https://jira.spring.io/browse/SPR-4917?redirect=false)** and commented  I have the following Jasper report view configured:  \ 	\ 	\ \  The report data is retrieved via an SQL statement contained within the report template, so I've set the ""jdbcDataSource"" property above and do not add any attributes to the model data of type JRDatasource. The relevant controller code is:  public ModelAndView getTransactionReport(HttpServletRequest request, HttpServletResponse response, TransactionReportCommand command) {      ModelAndView mav = new ModelAndView(""transactionReport"");     	     // Add a parameter that indicates which format should be produced by JasperReportsMultiFormatView     Map reportParams = new HashMap();     reportParams.put(""format"", command.getFormat());     	     // Supply values for the Jasper report parameters. The name and type of each model attribute must match the corresponding     // report parameter used in the Jasper .jrxml file     reportParams.put(""grouping"", command.getGrouping().getCode());     reportParams.put(""startDate"", command.getStartDate());     reportParams.put(""endDate"", command.getEndDate());          // These optional params are defined as type java.util.Collection wihin the Jasper report      reportParams.put(""campaignId"", Collections.singleton(command.getCampaignId()));     reportParams.put(""partnerId"", Collections.singleton(command.getPartnerId()));     reportParams.put(""merchantId"", Collections.singleton(command.getMerchantId()));     reportParams.put(""affiliateId"", Collections.singleton(command.getAffiliateId()));     	     mav.addAllObjects(reportParams);     return mav;  }  At runtime I get the exception appended to the end of this message. It seems that Spring is trying to use one of the Collection-typed attributes as the report's datasource, but doesn't know which one of the four to use. However, I've already indicated that I'm using a JDBC datasource, so I don't understand why it is looking anywhere in the model attributes for the report data. Is this a bug or am I missing something?  I've also tried adding the javax.sql.DataSource to the model attributes and removing the ""jdbcDataSource"" property configured in views.xml, but this doesn't appear to work either.   ---  **Affects:** 2.5.4","closed","type: bug,","spring-projects-issues","2008-06-13T08:14:07Z","2012-06-19T03:47:04Z"
"","9311","AbstractTransactionalJUnit4SpringContextTests unusable if multiple Datasources configured [SPR-4634]","**[Donal Murtagh](https://jira.spring.io/secure/ViewProfile.jspa?name=domurtag)** opened **[SPR-4634](https://jira.spring.io/browse/SPR-4634?redirect=false)** and commented  In AbstractTransactionalJUnit4SpringContextTests the following method is declared:      /**      * Set the DataSource, typically provided via Dependency Injection.      */     @Autowired     public void setDataSource(DataSource dataSource) {     	this.simpleJdbcTemplate = new SimpleJdbcTemplate(dataSource);     }  If this this is extended and the subclass redefines the annotation to wire-by-name, for example:  public class MyTransactionalTester extends AbstractJUnit4SpringContextTests {      @Resource(name = ""dataSource"")     public void setDataSource(DataSource dataSource) {     	this.simpleJdbcTemplate = new SimpleJdbcTemplate(dataSource);     }  }  MyTransactionalTester still attempts to autowire by type, which causes a failure if the application context under test contains more than one bean of type DataSource. This problem could be fixed by removing the `@Autowired` annotation, or replacing it with an `@Resource`(name = ""dataSource"").  However, both of these strategies will cause a failure in existing code that relies on autowiring the datasource and the datasource bean is not named ""dataSource"".  This issue has been discussed on the forum here: http://forum.springframework.org/showthread.php?t=47381&highlight=AbstractTransactionalJUnit4SpringContextTests+expected+single+matching+bean+found   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-27T01:53:56Z","2012-06-19T03:47:24Z"
"","9811","@Configurable does not work when type is already loaded due to Java bytecode verification [SPR-5138]","**[Don Ngo](https://jira.spring.io/secure/ViewProfile.jspa?name=vvvngo)** opened **[SPR-5138](https://jira.spring.io/browse/SPR-5138?redirect=false)** and commented  Consider the following example:  ********** The dependency class public class Dependency { `@Override` public String toString() { return ""Dependency bean""; } }  ********** The parent domain class import javax.annotation.Resource;  import org.springframework.beans.factory.annotation.Configurable;  `@Configurable` public class Parent { `@Resource` protected Dependency dependency; }  ********** The child domain class public class Child extends Parent { }  ********** The context file (context.xml)  \  \                                                     \  Now the problem... The dependency injection works fine with the domain objects are created like this:        Parent bean = new Parent();                       or this:            Child bean = new Child();  However, it will fail with the following statement (ie. the dependency field will be null (not injected) :      Parent bean = new Child();  Also, I've found that if the following statements are combined, it will fail too:      Parent bean = new Parent();     Parent bean2 = new Child();  Below are some test cases to demonstrate this problem:  ******** Demonstrate successful injection import static org.junit.Assert.assertNotNull;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  `@RunWith`(SpringJUnit4ClassRunner.class) `@ContextConfiguration`(locations = { ""classpath:context.xml"" }) public final class PassTest { `@Test` public final void case1() { Parent bean = new Parent(); assertNotNull(bean.dependency); }      @Test     public final void case2() {     	Child bean = new Child();     	assertNotNull(bean.dependency);     }  }  ******** Demonstrate injection failure import static org.junit.Assert.assertNotNull;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;  `@RunWith`(SpringJUnit4ClassRunner.class) `@ContextConfiguration`(locations = { ""classpath:context.xml"" }) public final class FailTest { `@Test` public final void case3() { Parent bean = new Child(); assertNotNull(bean.dependency);  // Will fail!!!  Why??!!! } }  ---  **Affects:** 2.5.5  **Issue Links:** - #9895 `@Configureable` doesn't work right (_**""is duplicated by""**_) - #9638 LTW spring-agent Weaving not performed within Test, if class to be woven is referenced by Generic Variable declaration  5 votes, 8 watchers","closed","in: core,","spring-projects-issues","2008-09-02T09:17:34Z","2019-01-13T21:51:37Z"
"","8898","Stackoverflow when method returns a empty ModelAndView [SPR-4220]","**[Dominique Vernier](https://jira.spring.io/secure/ViewProfile.jspa?name=dominique)** opened **[SPR-4220](https://jira.spring.io/browse/SPR-4220?redirect=false)** and commented  If a method like  public ModelAndView save() { return new ModelAndView(); }  We get a stackoverflow.  For more info; http://forum.springframework.org/showthread.php?t=46997  ---  **Affects:** 2.0.7  **Issue Links:** - #9015 InternalResourceView self-dispatch check breaks backwards compatibility","closed","type: bug,","spring-projects-issues","2007-12-06T03:16:29Z","2019-01-11T16:47:38Z"
"","9153","java.lang.ClassCastException: org.springframework.jndi.JndiObjectFactoryBean during undeployment of a webapp [SPR-4476]","**[Dominique Jean-Prost](https://jira.spring.io/secure/ViewProfile.jspa?name=djeanprost)** opened **[SPR-4476](https://jira.spring.io/browse/SPR-4476?redirect=false)** and commented  I get this exception when undeploying a webapp. I use Spring deployer (http://wiki.jboss.org/wiki/Wiki.jsp?page=JBossSpringIntegration) to deploy my spring component. An application context is created then put in jndi. As this eception occurs at shutdown, it doesn't prevent the application from running.  My webapp is configured this way : web.xml : ... \ \parentContextKey\ \factory.services\ \ \ \locatorFactorySelector\ \/WEB-INF/beanRefContext.xml\ \ ...  beanRefContext.xml : \           	       \ where bigjam is the jndi name of the application context created by spring deployer. 16:48:59,022 ERROR [[/produit]] Exception sending context destroyed event to listener instance of class org.springframework.web.context.ContextLoaderListener java.lang.ClassCastException: org.springframework.jndi.JndiObjectFactoryBean at org.springframework.context.support.AbstractApplicationContext.doStop(AbstractApplicationContext.java:1108) at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:836) at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:802) at org.springframework.context.access.ContextSingletonBeanFactoryLocator.destroyDefinition(ContextSingletonBeanFactoryLocator.java:155) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator$CountingBeanFactoryReference.release(SingletonBeanFactoryLocator.java:525) at org.springframework.web.context.ContextLoader.closeWebApplicationContext(ContextLoader.java:374) at org.springframework.web.context.ContextLoaderListener.contextDestroyed(ContextLoaderListener.java:70) at org.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:3770) at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4339) at org.apache.catalina.core.ContainerBase.destroy(ContainerBase.java:1132) at org.apache.catalina.core.StandardContext.destroy(StandardContext.java:4443) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.commons.modeler.BaseModelMBean.invoke(BaseModelMBean.java:503) at org.jboss.mx.server.RawDynamicInvoker.invoke(RawDynamicInvoker.java:164) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.web.tomcat.tc5.TomcatDeployer.performDeployInternal(TomcatDeployer.java:173) at org.jboss.web.tomcat.tc5.TomcatDeployer.performDeploy(TomcatDeployer.java:103) at org.jboss.web.AbstractWebDeployer.start(AbstractWebDeployer.java:371) at org.jboss.web.WebModule.startModule(WebModule.java:83) at org.jboss.web.WebModule.startService(WebModule.java:61) at org.jboss.system.ServiceMBeanSupport.jbossInternalStart(ServiceMBeanSupport.java:289) at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle(ServiceMBeanSupport.java:245) at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.system.ServiceController$ServiceProxy.invoke(ServiceController.java:978) at $Proxy0.start(Unknown Source) at org.jboss.system.ServiceController.start(ServiceController.java:417) at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy31.start(Unknown Source) at org.jboss.web.AbstractWebContainer.start(AbstractWebContainer.java:466) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142) at org.jboss.mx.interceptor.DynamicInterceptor.invoke(DynamicInterceptor.java:97) at org.jboss.system.InterceptorServiceMBeanSupport.invokeNext(InterceptorServiceMBeanSupport.java:238) at org.jboss.ws.server.WebServiceDeployer.start(WebServiceDeployer.java:117) at org.jboss.deployment.SubDeployerInterceptorSupport$XMBeanInterceptor.start(SubDeployerInterceptorSupport.java:188) at org.jboss.deployment.SubDeployerInterceptor.invoke(SubDeployerInterceptor.java:95) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy32.start(Unknown Source) at org.jboss.deployment.MainDeployer.start(MainDeployer.java:1007) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:808) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:771) at sun.reflect.GeneratedMethodAccessor55.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy8.deploy(Unknown Source) at org.jboss.deployment.scanner.URLDeploymentScanner.deploy(URLDeploymentScanner.java:421) at org.jboss.deployment.scanner.URLDeploymentScanner.scan(URLDeploymentScanner.java:634) at org.jboss.deployment.scanner.AbstractDeploymentScanner$ScannerThread.doScan(AbstractDeploymentScanner.java:263) at org.jboss.deployment.scanner.AbstractDeploymentScanner.startService(AbstractDeploymentScanner.java:336) at org.jboss.system.ServiceMBeanSupport.jbossInternalStart(ServiceMBeanSupport.java:289) at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle(ServiceMBeanSupport.java:245) at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.system.ServiceController$ServiceProxy.invoke(ServiceController.java:978) at $Proxy0.start(Unknown Source) at org.jboss.system.ServiceController.start(ServiceController.java:417) at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy4.start(Unknown Source) at org.jboss.deployment.SARDeployer.start(SARDeployer.java:302) at org.jboss.deployment.MainDeployer.start(MainDeployer.java:1007) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:808) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:771) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:755) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy5.deploy(Unknown Source) at org.jboss.system.server.ServerImpl.doStart(ServerImpl.java:482) at org.jboss.system.server.ServerImpl.start(ServerImpl.java:362) at org.jboss.Main.boot(Main.java:200) at org.jboss.Main$1.run(Main.java:464) at java.lang.Thread.run(Thread.java:595)   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-02-18T03:12:49Z","2012-06-19T03:46:42Z"
"","8897","Problem with transaction when upgrading from 2.0.3 to 2.5 [SPR-4219]","**[Dominique Jean-Prost](https://jira.spring.io/secure/ViewProfile.jspa?name=djeanprost)** opened **[SPR-4219](https://jira.spring.io/browse/SPR-4219?redirect=false)** and commented  When upgrading from spring 2.0.3 to spring 2.5, a unexptected exception is thrown.  I have a bean with `@transaction` SUPPORTS that calls a method on an other bean which uses a `@transaction` NOT_SUPPORTED method. My transaction manager is JPAtransactionManager.  We meet the same problem when calling a REQUIRES_NEW method from a SUPPORTS method.  Please find as a attachment the log I get.  Regards, dom  ---  **Affects:** 2.5 final  **Attachments:** - [caseSpring.txt](https://jira.spring.io/secure/attachment/13183/caseSpring.txt) (_11.61 kB_)  **Issue Links:** - #8631 TransactionSynchronization.afterCompletion(int) in combination with JpaTransactionManager and PROPAGATION_REQUIRES_NEW fails with IllegalTransactionStateException","closed","type: bug,","spring-projects-issues","2007-12-06T01:36:53Z","2019-01-11T17:00:52Z"
"","9405","mvc: Dynamic List use case - allow collections/arrays to grow [SPR-4728]","**[Dmitry Platonov](https://jira.spring.io/secure/ViewProfile.jspa?name=exgorth)** opened **[SPR-4728](https://jira.spring.io/browse/SPR-4728?redirect=false)** and commented  There's a popular use case (search forum for 'dynamic list') for implementing dynamic lists on web pages.  The most common approach is to create hacks in controller to initialize collections/arrays command object properties before binding - trim or grow collections/arrays properties to some calculated size. This will allow binder to bind props[0].name, props[1].name request params to command object even if original command.getProps() returns null or empty collection/array.  The approach must be used EACH controller which wants to work with dynamically added fields.  This could be fixed in SINGLE place - in BeanWrapperImpl#getPropertyValue(), which could allow collection/array to grow instead of simply (Array.get(value, Integer.parseInt(key)), list.get(Integer.parseInt(key)))  Or could we somehow override that method?  ---  **Affects:** 2.5.3  **Issue Links:** - #6368 Option to expose empty value instead of NullValueInNestedPathException - #10702 Data Binder: Auto-grow collections as needed to support nested property binding  7 votes, 9 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-18T23:58:16Z","2019-01-11T17:42:56Z"
"","9404","CancellableFormController should not bind cancelling requests [SPR-4727]","**[Dmitry Platonov](https://jira.spring.io/secure/ViewProfile.jspa?name=exgorth)** opened **[SPR-4727](https://jira.spring.io/browse/SPR-4727?redirect=false)** and commented  I've this issue while implementing known 'dynamic list case'. My command object contains some collection/array as property. The user could add values via javascript which causes the respective request parameters are being added.  I've subclassed CancellableFormController to provide a cancel feature which it handles perfectly. However in some scenario it fails: 1. show form without 'collection/array' values 2. add some via javascript (will generate inputs with names: props[0].name,props[0].value,....props[n].name,props[n].value) 3. hit cancel 4. got binding error. The error type is depends on state of command object returning from formBackingObject: if 'props' value is empty we've got an NullValueInNestedPath; if 'props' contains, say single value, then submitting props[1].name,props[1].value will cause ArrayIndexOutOfBounds.  Suppressing binding will solve the problem. See attached test case.    ---  **Affects:** 2.5.2  **Attachments:** - [MyCancellableFormControllerTests.java](https://jira.spring.io/secure/attachment/13979/MyCancellableFormControllerTests.java) (_3.15 kB_)","closed","type: enhancement,","spring-projects-issues","2008-04-18T23:34:10Z","2008-04-24T04:32:09Z"
"","9026","Doc: """" in ""persistence.xml"" is treated pragmatically rather than strictly following the schema [SPR-4347]","**[Dmitry Mikhaylov](https://jira.spring.io/secure/ViewProfile.jspa?name=bagheera)** opened **[SPR-4347](https://jira.spring.io/browse/SPR-4347?redirect=false)** and commented  When ""\false\"" is present in ""persistence.xml"", enclosing jar is not scanned for annotated classes, while according to JPA specs it should:  ---                           When set to true then only listed classes and jars will be scanned for persistent classes, otherwise the enclosing jar or directory will also be scanned. Not applicable to Java SE persistence units.     ---  And here is parsing code from org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader, line 296:  ---      // exclude unlisted classes     Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES);     if (excludeUnlistedClasses != null) {          unitInfo.setExcludeUnlistedClasses(true);     }  ---  As a workarond, do not use ""\false\"" in ""persistence.xml"", remove this element completely if you want your jar scanned.  ---  **Affects:** 2.5 final  1 votes, 2 watchers","closed","type: task,","spring-projects-issues","2008-01-16T23:42:56Z","2019-01-13T21:53:50Z"
"","9512","ApplicationContext.xml cannot  read another applicationContext present in the jar (present in classpath of Project) [SPR-4836]","**[divyabhardwaj](https://jira.spring.io/secure/ViewProfile.jspa?name=divyabhardwaj)** opened **[SPR-4836](https://jira.spring.io/browse/SPR-4836?redirect=false)** and commented  I am having a Spring Application(Core Spring+JPA). I have converted this application into a jar. I m using this jar in another spring application( Client application). Client application's  conext.xml is importing the applicationContext.xml present in the jar .I m facing the following problem in doing so.  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'roleDAO': Injection of persistence methods failed; nested exception is java.lang.NoClassDefFoundError: javax.transaction.SystemException at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:323) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:966) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(AccessController.java:197) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:263) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:170) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:184) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:430) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) at TestApp.main(TestApp.java:16) Caused by: java.lang.NoClassDefFoundError: javax.transaction.SystemException at java.lang.J9VMInternals.verifyImpl(Native Method) at java.lang.J9VMInternals.verify(J9VMInternals.java:68) at java.lang.J9VMInternals.verify(J9VMInternals.java:66) at java.lang.J9VMInternals.initialize(J9VMInternals.java:129) at org.hibernate.ejb.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:39) at org.hibernate.ejb.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:34) at org.springframework.orm.jpa.ExtendedEntityManagerCreator.createContainerManagedEntityManager(ExtendedEntityManagerCreator.java:197) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveExtendedEntityManager(PersistenceAnnotationBeanPostProcessor.java:625) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:567) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:193) at org.springframework.beans.factory.annotation.InjectionMetadata.injectMethods(InjectionMetadata.java:116) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:320)  Please help me in solving the problem . Thnaks in advance  ---  **Issue Links:** - #9511 Spring client project applicationConetxt.xml is reading the applicationContext.xml present in the jar which r present in classpath (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-05-19T03:29:52Z","2019-01-11T19:07:37Z"
"","9511","Spring client project applicationConetxt.xml is reading the applicationContext.xml present in the jar which r present in classpath [SPR-4835]","**[divyabhardwaj](https://jira.spring.io/secure/ViewProfile.jspa?name=divyabhardwaj)** opened **[SPR-4835](https://jira.spring.io/browse/SPR-4835?redirect=false)** and commented  I  am having  an application made in Core spring(Spring+ JPA). I have converted this whole application into a jar . I m using this jar in another spring  application (Client application). The applicationContext.xml  of client application is importing the applicationContext present in the jar.I m getting the following error in doing so.  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'roleDAO': Injection of persistence methods failed; nested exception is java.lang.NoClassDefFoundError: javax.transaction.SystemException at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:323) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:966) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(AccessController.java:197) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:263) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:170) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:184) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:163) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:430) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) at TestApp.main(TestApp.java:16) Caused by: java.lang.NoClassDefFoundError: javax.transaction.SystemException at java.lang.J9VMInternals.verifyImpl(Native Method) at java.lang.J9VMInternals.verify(J9VMInternals.java:68) at java.lang.J9VMInternals.verify(J9VMInternals.java:66) at java.lang.J9VMInternals.initialize(J9VMInternals.java:129) at org.hibernate.ejb.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:39) at org.hibernate.ejb.EntityManagerFactoryImpl.createEntityManager(EntityManagerFactoryImpl.java:34) at org.springframework.orm.jpa.ExtendedEntityManagerCreator.createContainerManagedEntityManager(ExtendedEntityManagerCreator.java:197) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveExtendedEntityManager(PersistenceAnnotationBeanPostProcessor.java:625) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:567) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:193) at org.springframework.beans.factory.annotation.InjectionMetadata.injectMethods(InjectionMetadata.java:116) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessPropertyValues(PersistenceAnnotationBeanPostProcessor.java:320)  Please help me in solving the above issue.  ---  **Issue Links:** - #9512 ApplicationContext.xml cannot  read another applicationContext present in the jar (present in classpath of Project) (_**""is duplicated by""**_)","closed","status: declined,","spring-projects-issues","2008-05-19T03:16:31Z","2019-01-12T16:28:11Z"
"","9163","The existing spring-beans-2.5.xsd is not compileable with xjc (JAXB - Java XML Binding 2.x) [SPR-4485]","**[Dirk Wellmann](https://jira.spring.io/secure/ViewProfile.jspa?name=dirk.wellmann)** opened **[SPR-4485](https://jira.spring.io/browse/SPR-4485?redirect=false)** and commented  We created a Binding-Description (spring25.xjb) to solve the collisions in Namingconventions of JAXB, see attached File you can use it to genereate a Binding.  Command to create a Binding with Binding-Description:  xjc -b spring25.xjb -verbose -d [where to put the java-Files] -p [what package to use] -xmlschema spring_beans_25.xsd   ---  **Affects:** 2.5.1  **Attachments:** - [spring25.xjb](https://jira.spring.io/secure/attachment/13671/spring25.xjb) (_2.50 kB_)","closed","type: enhancement,","spring-projects-issues","2008-02-20T23:54:29Z","2012-06-19T09:36:17Z"
"","9420","JRuby 1.1: org.jruby.Ruby method renames break Spring's scripting support [SPR-4743]","**[Dirk Mahler](https://jira.spring.io/secure/ViewProfile.jspa?name=dirk.mahler)** opened **[SPR-4743](https://jira.spring.io/browse/SPR-4743?redirect=false)** and commented  The script integration for JRuby does not work with JRuby 1.1.0+:  partial stack trace:  Caused by: java.lang.NoSuchMethodError: org.jruby.Ruby.parse(Ljava/lang/String;Ljava/lang/String;Lorg/jruby/runtime/DynamicScope;)Lorg/jruby/ast/Node; at org.springframework.scripting.jruby.JRubyScriptUtils.createJRubyObject(JRubyScriptUtils.java:89)  The issue is known to the JRuby Development team, see http://jira.codehaus.org/browse/JRUBY-2080?page=com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-04-23T02:29:14Z","2012-06-19T03:47:44Z"
"","9347","WorkManagerTaskExecutor does not stop when gracefully shutting down WebLogic [SPR-4670]","**[Dimitri Hautot](https://jira.spring.io/secure/ViewProfile.jspa?name=dimitri%20hautot)** opened **[SPR-4670](https://jira.spring.io/browse/SPR-4670?redirect=false)** and commented  (this issue refers to this initial forum post: http://forum.springframework.org/showthread.php?t=49195)  We have a headless web application used to listen to a JMS queue. We use the DefaultMessageListenerContainer class to achieve this. The DMCL delegates the task execution jobs to a WorkManagerTaskExecutor.  The problem encountered is that, when issuing a graceful shutdown command to stop the server, the DMCL does continue to schedule message listener invokers. The other server modules nicely shut down, though.  So, because the server doesn't shutdown, I tried to stop it with a ""force shutdown"" command, and even with an abrupt CTRL-C command in the command. Then, the server stops, but when it is restarted, it does not register any new consumer. I registered a WorkListener instance to log any WorkEvent received. A WORK_REJECTED event is emitted at startup:  2008-04-07 14:24:11,226 ERROR [eu.ec.digit.hrs.connector.internal.jms.support.WorkListenerImpl] - WORK_REJECTED - work item: [-8793173144596195636][0] executing: org.springframework.scheduling.commonj.DelegatingWork@3fe922 - exception: commonj.work.WorkException: commonj.work.WorkRejectedException: [WorkManager:002916]Request belonging to WorkManager springWorkmanager, application hrs is rejected as the WorkManager is shutdown commonj.work.WorkException: commonj.work.WorkRejectedException: [WorkManager:002916]Request belonging to WorkManager springWorkmanager, application hrs is rejected as the WorkManager is shutdown at weblogic.work.commonj.CommonjWorkManagerImpl$WorkStatus.setThrowable(CommonjWorkManagerImpl.java:244 ) at weblogic.work.j2ee.J2EEWorkManager$WorkWithListener$1.run(J2EEWorkManager.java:139) at weblogic.work.SelfTuningWorkManagerImpl$WorkAdapterImpl.run(SelfTuningWorkManagerImpl.java:464) at weblogic.work.ExecuteThread.execute(ExecuteThread.java:200) at weblogic.work.ExecuteThread.run(ExecuteThread.java :172) Caused by: commonj.work.WorkRejectedException: [WorkManager:002916]Request belonging to WorkManager springWorkmanager, application hrs is rejected as the WorkManager is shutdown ... 4 more commonj.work.WorkException: commonj.work.WorkRejectedException: [WorkManager:002916]Request belonging to WorkManager springWorkmanager, application hrs is rejected as the WorkManager is shutdown  I used a wrapper class to test the availability of the ""springWorkmanager"" object in the JNDI at startup, and it exist. So maybe does the DelegatingWork instance refer to the work manager from the previous server instance (through some persistent caching), and not from the actual one?  Anyway, the previous sentence is pure guess. I believe that the JMS consumer startup issue is a consequence of the fact that the server could not be stopped properly.  If we do not use a WorkManagerTaskExecutor, and thus fallback to a default SimpleAsyncTaskExecutor, then we have no issue at all. But then we loose thread management by the application server...  Please do not hesitate to ping me back if you need additional information. Thanks!   ---  **Affects:** 2.0.6, 2.5.2  **Attachments:** - [01-SPR-4670-console-ok.txt](https://jira.spring.io/secure/attachment/14473/01-SPR-4670-console-ok.txt) (_10.31 kB_) - [02-SPR-4670-console-ko-forced-shutdown.txt](https://jira.spring.io/secure/attachment/14474/02-SPR-4670-console-ko-forced-shutdown.txt) (_110.93 kB_) - [03-SPR-4670-console-ko-nice-shutdown.txt](https://jira.spring.io/secure/attachment/14475/03-SPR-4670-console-ko-nice-shutdown.txt) (_32.86 kB_) - [SPR-4670-Debug.jar](https://jira.spring.io/secure/attachment/14346/SPR-4670-Debug.jar) (_6.56 kB_) - [wmBugSample.war](https://jira.spring.io/secure/attachment/14472/wmBugSample.war) (_1.97 MB_)  10 votes, 11 watchers","closed","has: votes-jira,","spring-projects-issues","2008-04-07T01:34:49Z","2019-01-12T05:34:09Z"
"","9192","Unused variable in org.springframework.web.portlet.handler.PortletModeParameterHandlerMapping [SPR-4515]","**[Derek Alexander](https://jira.spring.io/secure/ViewProfile.jspa?name=derek)** opened **[SPR-4515](https://jira.spring.io/browse/SPR-4515?redirect=false)** and commented  In org.springframework.web.portlet.handler.PortletModeParameterHandlerMapping the variable protected final Map modeHandlerMap = new HashMap(); appears to serve no purpose so would be better off removed.    ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-28T00:59:00Z","2012-06-19T03:46:41Z"
"","9563","JmsTemplate should allow for overriding getDefaultDestination() [SPR-4887]","**[Dennis Kieselhorst](https://jira.spring.io/secure/ViewProfile.jspa?name=deki)** opened **[SPR-4887](https://jira.spring.io/browse/SPR-4887?redirect=false)** and commented  I extended the JmsTemplate and overwrote getDefaultDestinationName().  send(MessageCreator messageCreator) uses the getter to access the variable for the defaultDestinationName, checkDefaultDestination only checks the member variable.  Result is the following exception: java.lang.IllegalStateException: No defaultDestination or defaultDestinationName specified. Check configuration of JmsTemplate. at org.springframework.jms.core.JmsTemplate.checkDefaultDestination(JmsTemplate.java:407) at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:516)   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-06-03T20:15:58Z","2012-06-19T03:47:18Z"
"","9815","Include org.springframework.context.support.ApplicationContextAwareProcessor to the official spring 2.5.x API [SPR-5142]","**[Denis Zhdanov](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.zhdanov)** opened **[SPR-5142](https://jira.spring.io/browse/SPR-5142?redirect=false)** and commented  Javadoc for org.springframework.context.support.ApplicationContextAwareProcessor is absent at public spring 2.5.x API documentation (http://static.springframework.org/spring/docs/2.5.x/api/index.html). It seems rather strange because previous API version included it (e.g. spring 2.0.x API http://static.springframework.org/spring/docs/2.0.x/api/org/springframework/context/support/ApplicationContextAwareProcessor.html).  I assumed that XxxAwareProcessor's were excluded from public spring 2.5.x API but it was incorrect assumption (e.g. ServletContextAwareProcessor is available - http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/web/context/support/ServletContextAwareProcessor.html).  My point is that public API should be consistent, hence, ApplicationContextAwareProcessor should be restored at public API.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-09-05T19:43:12Z","2012-06-19T09:36:26Z"
"","9753","Support programmatic starting and stopping of transactions in the TestContext framework [SPR-5079]","**[Den Orlov](https://jira.spring.io/secure/ViewProfile.jspa?name=den.orlov)** opened **[SPR-5079](https://jira.spring.io/browse/SPR-5079?redirect=false)** and commented  #### Background  I have integration tests that:  1. put some test data into database using Hibernate 2. wait some time, so DB stored procedures triggered by scheduler will process my data 3. retrieve from db some data and check its correctness, again using Hibernate  When I used Spring's ""JUnit 3.8 legacy support"" all of these three steps were organized in one test method using the protected `endTransaction()` and `startNewTransaction()` methods in `AbstractTransactionalSpringContextTests` between steps #1 and #2.  ---  #### Status Quo  Now I am migrating my code to use the _Spring TestContext Framework_ (TCF), but it doesn't provide support for programmatically  starting or stopping the test-managed transaction.  ---  #### Deliverables  The term _test-manged_ means a transaction managed by the TCF, either declaratively or programmatically.  See also ""_Design Considerations_"" below.  1. [x] Introduce a mechanism in the TCF that supports the following features:    1. [x] end the current test-managed transaction    2. [x] start a new test-managed transaction    3. [x] configure the current test-managed transaction to be _committed_ once the test completes    4. [x] configure the current test-managed transaction to be _rolled back_ once the test completes 2. [x] Refactor `TransactionalTestExecutionListener` to use this new mechanism internally. 3. [ ] Consider introducing a JUnit `TestRule` that simplifies the programming model (e.g., by delegating to the proposed `TestTransaction` façade).  ---  #### Design Considerations  Introduce a `TestTransaction` class that acts as a _façade_ to the functionality previously available in `TransactionalTestExecutionListener`. For example, `TestTransaction` could define methods that could provide the following API:  - `TestTransaction.start()` - `TestTransaction.end()` - `TestTransaction.rollback(boolean)`  ##### Options for Interacting with the Test Transaction  ###### Dependency Injection of TestTransaction  Ideally, we would like to be able to have the `TestTransaction` injected into our test instance. However, since the `DependencyInjectionTestExecutionListener` must come before the `TransactionalTestExecutionListener` in the chain of listeners, dependency injection would only be possible by introducing yet another ""transactional"" `TestExecutionListener` that creates a proxy bean or bean of type `ObjectFactory` in the `ApplicationContext`. Such a _proxy_ bean would serve as a placeholder for dependency injection into the test instance, and the `TransactionalTestExecutionListener` could later set a value either directly in the proxy/`ObjectFactory` or via a `ThreadLocal`.  But we would like to avoid having two (2) `TestExecutionListener` implementations for transactional support. Plus, the placeholder-bean approach could present more problems than it solves.  ###### Dependency Injection of TestContext  A second option would be to inject the `TestContext` into test instances (see #12947) and provide access to the `TestTransaction` as an attribute (note that `TestContext` implements `AttributeAccessor`), but this would open up use of the `TestContext` within test classes (i.e., no longer limited to the `TestExecutionListener` API). In addition, developers would be forced to navigate the `TestContext` to obtain the `TestTransaction`, thus making the programming model less intuitive.  ###### Purely ThreadLocal Approach  The final option is to follow a purely `ThreadLocal`-based approach with `TestTransaction` encapsulating the details and providing static methods instead of instance methods.  ---  #### Related Resources  - [Diff for TransactionalTestExecutionListener](http://springframework.cvs.sourceforge.net/viewvc/springframework/spring/tiger/mock/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java?r1=1.11&r2=1.12). This commit introduced caching of the `TransactionContext` keyed by `Method` and removed the previous support for the `transactionFlaggedForCommit` functionality.   - #9315   - #9218  ---  **Affects:** 2.5.6  **Issue Links:** - #16558 Document programmatic test transaction management support (_**""is depended on by""**_) - #10548 Provide support in TestContext framework equivalent to AbstractTransactionalSpringContextTests (_**""is duplicated by""**_) - #9315 TransactionalTestExecutionListener uses cached TransactionManager (TM), even after ApplicationContext that created the TM has been marked 'dirty' and closed. - #12947 Introduce autowiring support for the current TestContext - #9218 Transactional JUnit test with timeout does not create a transaction  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bdceaa481bfeff2785676ada7b75d03635c19a0d, https://github.com/spring-projects/spring-framework/commit/f667e43ca2fc3ffdc4f80fa604fb798b22b64dad, https://github.com/spring-projects/spring-framework/commit/90f0d14c8e441d52b5a5cb2c56c15e4d57592065  30 votes, 22 watchers","closed","has: votes-jira,","spring-projects-issues","2008-08-11T22:53:03Z","2019-01-13T21:51:44Z"
"","9506","Maven pom for spring-aspects 2.5.4 still depends on AspectJ 1.5.4 [SPR-4830]","**[Davy Verstappen](https://jira.spring.io/secure/ViewProfile.jspa?name=stappend)** opened **[SPR-4830](https://jira.spring.io/browse/SPR-4830?redirect=false)** and commented  So when you're relying on maven to resolve your dependencies, this causes the following exception when trying to use LTW:  May 18, 2008 12:40:17 PM org.aspectj.weaver.tools.Jdk14Trace error SEVERE: register definition failed org.aspectj.weaver.BCException: Unable to continue, this version of AspectJ supports classes built with weaver version 3.0 but the class org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect is version 5.0      at org.aspectj.weaver.bcel.BcelAttributes.readAjAttributes(BcelAttributes.java:53)     at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttributesUnpacked(BcelObjectType.java:312)     at org.aspectj.weaver.bcel.BcelObjectType.(BcelObjectType.java:142)     at org.aspectj.weaver.bcel.BcelWorld.buildBcelDelegate(BcelWorld.java:360)     at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:343)     at org.aspectj.weaver.ltw.LTWWorld.resolveDelegate(LTWWorld.java:97)     at org.aspectj.weaver.World.resolveToReferenceType(World.java:378)     at org.aspectj.weaver.World.resolve(World.java:271)     at org.aspectj.weaver.bcel.BcelWeaver.addLibraryAspect(BcelWeaver.java:165)     at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects(ClassLoaderWeavingAdaptor.java:399)     at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions(ClassLoaderWeavingAdaptor.java:240)     at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize(ClassLoaderWeavingAdaptor.java:152)     at org.aspectj.weaver.loadtime.Aj$ExplicitlyInitializedClassLoaderWeavingAdaptor.initialize(Aj.java:151)     at org.aspectj.weaver.loadtime.Aj$ExplicitlyInitializedClassLoaderWeavingAdaptor.getWeavingAdaptor(Aj.java:156)     at org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Aj.java:122)     at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:73)     at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)     at org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformer.transform(AspectJWeavingEnabler.java:92)     at org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer.transform(InstrumentationLoadTimeWeaver.java:181)     at sun.instrument.TransformerManager.transform(TransformerManager.java:122)     at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)     at java.lang.ClassLoader.defineClass1(Native Method)     at java.lang.ClassLoader.defineClass(ClassLoader.java:620)     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)     at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)     at java.net.URLClassLoader.access$100(URLClassLoader.java:56)     at java.net.URLClassLoader$1.run(URLClassLoader.java:195)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:188)     at java.lang.ClassLoader.loadClass(ClassLoader.java:306)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)     at java.lang.ClassLoader.loadClass(ClassLoader.java:251)     at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)     at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:570)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:366)     at org.springframework.test.AbstractSingleSpringContextTests.createApplicationContext(AbstractSingleSpringContextTests.java:243)     at org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:212)     at org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:187)     at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:140)     at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:100)     at junit.framework.TestCase.runBare(TestCase.java:125)     at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76)     at junit.framework.TestResult$1.protect(TestResult.java:106)     at junit.framework.TestResult.runProtected(TestResult.java:124)     at junit.framework.TestResult.run(TestResult.java:109)     at junit.framework.TestCase.run(TestCase.java:118)     at junit.textui.TestRunner.doRun(TestRunner.java:116)     at com.intellij.rt.execution.junit.IdeaTestRunner.doRun(IdeaTestRunner.java:65)     at junit.textui.TestRunner.doRun(TestRunner.java:109)     at com.intellij.rt.execution.junit.IdeaTestRunner.startRunnerWithArgs(IdeaTestRunner.java:24)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:118)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     at java.lang.reflect.Method.invoke(Method.java:585)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)  [AppClassLoader@18e3e60] warning register definition failed -- (BCException) Unable to continue, this version of AspectJ supports classes built with weaver version 3.0 but the class org.springframework.beans.fa ctory.aspectj.AnnotationBeanConfigurerAspect is version 5.0  Unable to continue, this version of AspectJ supports classes built with weaver version 3.0 but the class org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect is version 5.0  org.aspectj.weaver.BCException: Unable to continue, this version of AspectJ supports classes built with weaver version 3.0 but the class org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect is version 5.0      at org.aspectj.weaver.bcel.BcelAttributes.readAjAttributes(BcelAttributes.java:53)     at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttributesUnpacked(BcelObjectType.java:312)     at org.aspectj.weaver.bcel.BcelObjectType.(BcelObjectType.java:142)     at org.aspectj.weaver.bcel.BcelWorld.buildBcelDelegate(BcelWorld.java:360)     at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.java:343)     at org.aspectj.weaver.ltw.LTWWorld.resolveDelegate(LTWWorld.java:97)     at org.aspectj.weaver.World.resolveToReferenceType(World.java:378)     at org.aspectj.weaver.World.resolve(World.java:271)     at org.aspectj.weaver.bcel.BcelWeaver.addLibraryAspect(BcelWeaver.java:165)     at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects(ClassLoaderWeavingAdaptor.java:399)     at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions(ClassLoaderWeavingAdaptor.java:240)     at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize(ClassLoaderWeavingAdaptor.java:152)     at org.aspectj.weaver.loadtime.Aj$ExplicitlyInitializedClassLoaderWeavingAdaptor.initialize(Aj.java:151)     at org.aspectj.weaver.loadtime.Aj$ExplicitlyInitializedClassLoaderWeavingAdaptor.getWeavingAdaptor(Aj.java:156)     at org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Aj.java:122)     at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:73)     at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:52)     at org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformer.transform(AspectJWeavingEnabler.java:92)     at org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer.transform(InstrumentationLoadTimeWeaver.java:181)     at sun.instrument.TransformerManager.transform(TransformerManager.java:122)     at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155)     at java.lang.ClassLoader.defineClass1(Native Method)     at java.lang.ClassLoader.defineClass(ClassLoader.java:620)     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)     at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)     at java.net.URLClassLoader.access$100(URLClassLoader.java:56)     at java.net.URLClassLoader$1.run(URLClassLoader.java:195)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:188)     at java.lang.ClassLoader.loadClass(ClassLoader.java:306)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)     at java.lang.ClassLoader.loadClass(ClassLoader.java:251)     at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)     at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:570)     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:366)     at org.springframework.test.AbstractSingleSpringContextTests.createApplicationContext(AbstractSingleSpringContextTests.java:243)     at org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:212)     at org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:187)     at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:140)     at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:100)     at junit.framework.TestCase.runBare(TestCase.java:125)     at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76)     at junit.framework.TestResult$1.protect(TestResult.java:106)     at junit.framework.TestResult.runProtected(TestResult.java:124)     at junit.framework.TestResult.run(TestResult.java:109)     at junit.framework.TestCase.run(TestCase.java:118)     at junit.textui.TestRunner.doRun(TestRunner.java:116)     at com.intellij.rt.execution.junit.IdeaTestRunner.doRun(IdeaTestRunner.java:65)     at junit.textui.TestRunner.doRun(TestRunner.java:109)     at com.intellij.rt.execution.junit.IdeaTestRunner.startRunnerWithArgs(IdeaTestRunner.java:24)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:118)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     at java.lang.reflect.Method.invoke(Method.java:585)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)  I see that the latest CVS revision (1.24) of  /spring/maven/spring-aspects.pom  has already changed the aspectj dependencies version to 1.6.0, so that's fixed. However, on the central maven repository, the groupId for aspectj has changed from ""aspectj"" to ""org.aspectj"" for version 1.6. E.g. the URL:  http://repo1.maven.org/maven2/aspectj/aspectjrt/1.6.0/  does not exist, but this one does:  http://repo1.maven.org/maven2/org/aspectj/aspectjrt/1.6.0/  The same goes for aspectjweaver.   ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-05-17T22:17:40Z","2012-06-19T03:46:58Z"
"","9341","AbstractFallbackTransactionAttributeSource's Map synchronization causes lock contention [SPR-4664]","**[David.Turing](https://jira.spring.io/secure/ViewProfile.jspa?name=david.turing)** opened **[SPR-4664](https://jira.spring.io/browse/SPR-4664?redirect=false)** and commented  We are encountering the serious perfomance problem when we using Spring 2.X.   CPU hit 100% when a lot of threads are doing the work below:  *************      ""[ACTIVE] ExecuteThread: '36' for queue: 'weblogic.kernel.Default (self-tuning)'"" id=648 idx=0x2c0 tid=7380 prio=5 alive, daemon         at java/util/HashMap.get(HashMap.java:1582)[optimized]         at org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:89)[optimized]         at org/springframework/transaction/interceptor/TransactionAttributeSourceAdvisor$TransactionAttributeSourcePointcut.matches(TransactionAttributeSourceAdvisor.java:102)[optimized]         at org/springframework/aop/support/AopUtils.canApply(AopUtils.java:192)[inlined]         at org/springframework/aop/support/AopUtils.canApply(AopUtils.java:231)[inlined]         at org/springframework/aop/support/AopUtils.findAdvisorsThatCanApply(AopUtils.java:256)[inlined]         at org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:68)[inlined]         at org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:54)[optimized]         at org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:247)         at org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:311)         at org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1038)         at org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:420)         at org/springframework/beans/factory/support/AbstractBeanFactory.getBean(AbstractBeanFactory.java:264)         at org/springframework/beans/factory/support/AbstractBeanFactory.getBean(AbstractBeanFactory.java:156)         at org/springframework/context/support/AbstractApplicationContext.getBean(AbstractApplicationContext.java:642)         at com/opensymphony/xwork2/spring/SpringObjectFactory.buildBean(SpringObjectFactory.java:125)         at com/opensymphony/xwork2/ObjectFactory.buildBean(ObjectFactory.java:143)         at com/opensymphony/xwork2/ObjectFactory.buildAction(ObjectFactory.java:113)         at com/opensymphony/xwork2/DefaultActionInvocation.createAction(DefaultActionInvocation.java:275)         at com/opensymphony/xwork2/DefaultActionInvocation.init(DefaultActionInvocation.java:365)         at com/opensymphony/xwork2/DefaultActionInvocation.access$000(DefaultActionInvocation.java:38)         at com/opensymphony/xwork2/DefaultActionInvocation$1.doProfiling(DefaultActionInvocation.java:83)         at com/opensymphony/xwork2/util/profiling/UtilTimerStack.profile(UtilTimerStack.java:455)         at com/opensymphony/xwork2/DefaultActionInvocation.(DefaultActionInvocation.java:74)         at com/opensymphony/xwork2/DefaultActionProxy.prepare(DefaultActionProxy.java:189)         at org/apache/struts2/impl/StrutsActionProxyFactory.createActionProxy(StrutsActionProxyFactory.java:41)         at org/apache/struts2/dispatcher/Dispatcher.serviceAction(Dispatcher.java:497)         at org/apache/struts2/dispatcher/FilterDispatcher.doFilter(FilterDispatcher.java:421)         at weblogic/servlet/internal/FilterChainImpl.doFilter(FilterChainImpl.java:42)         at org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:174)         at org/springframework/web/filter/OncePerRequestFilter.doFilter(OncePerRequestFilter.java:77)         at weblogic/servlet/internal/FilterChainImpl.doFilter(FilterChainImpl.java:42)         at cn/com/picc/claim/common/web/SessionFilter.doFilter(SessionFilter.java:35)         at weblogic/servlet/internal/FilterChainImpl.doFilter(FilterChainImpl.java:42)         at org/acegisecurity/util/FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:264)         at org/acegisecurity/intercept/web/FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:107)         at org/acegisecurity/intercept/web/FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:72)         at org/acegisecurity/util/FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)         at org/acegisecurity/ui/ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:110)         at org/acegisecurity/util/FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)         at org/acegisecurity/providers/anonymous/AnonymousProcessingFilter.doFilter(AnonymousProcessingFilter.java:125)         at org/acegisecurity/util/FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)         at org/acegisecurity/wrapper/SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:81)         at org/acegisecurity/util/FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)         at org/acegisecurity/ui/AbstractProcessingFilter.doFilter(AbstractProcessingFilter.java:217)         at org/acegisecurity/util/FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)         at org/acegisecurity/ui/logout/LogoutFilter.doFilter(LogoutFilter.java:106)         at org/acegisecurity/util/FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)         at org/acegisecurity/context/HttpSessionContextIntegrationFilter.doFilter(HttpSessionContextIntegrationFilter.java:229)         at org/acegisecurity/util/FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)         at org/acegisecurity/util/FilterChainProxy.doFilter(FilterChainProxy.java:148)         at org/acegisecurity/util/FilterToBeanProxy.doFilter(FilterToBeanProxy.java:98)         at weblogic/servlet/internal/FilterChainImpl.doFilter(FilterChainImpl.java:42)         at org/springframework/web/filter/CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:78)         at org/springframework/web/filter/OncePerRequestFilter.doFilter(OncePerRequestFilter.java:77)         at weblogic/servlet/internal/FilterChainImpl.doFilter(FilterChainImpl.java:42)         at weblogic/servlet/internal/WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:3229)         at weblogic/security/acl/internal/AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)         at weblogic/security/service/SecurityManager.runAs(SecurityManager.java:121)         at weblogic/servlet/internal/WebAppServletContext.securedExecute(WebAppServletContext.java:2002)         at weblogic/servlet/internal/WebAppServletContext.execute(WebAppServletContext.java:1908)         at weblogic/servlet/internal/ServletRequestImpl.run(ServletRequestImpl.java:1362)         at weblogic/work/ExecuteThread.execute(ExecuteThread.java:209)[inlined]         at weblogic/work/ExecuteThread.run(ExecuteThread.java:181)[optimized]         at jrockit/vm/RNI.c2java(IIIII)V(Native Method)         -- end of trace  ********************************   And we check source of AbstractFallbackTransactionAttributeSource.java,  we found Spring are using HashMap with Synchronized for thread safe purpose. This won't be a problem if  there are less threads, but when there are lots of threads doing getTransactionAttribute(),  CPU will hit 100%.  Why not use JDK 1.5 's CurrentHashMap?  Accoring to Doug Lea,  this won't be a bug of JDK,  and could be fixed with our way of using HashMap. http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6423457    ---  **Affects:** 2.5 final  **Attachments:** - [threaddump-by-david.turing.rar](https://jira.spring.io/secure/attachment/13897/threaddump-by-david.turing.rar) (_9.66 kB_)","closed","type: enhancement,","spring-projects-issues","2008-04-06T13:36:51Z","2012-06-19T03:47:11Z"
"","9073","Spring Web MVC reference documentation typos [SPR-4394]","**[David Thomas Hume](https://jira.spring.io/secure/ViewProfile.jspa?name=dthume)** opened **[SPR-4394](https://jira.spring.io/browse/SPR-4394?redirect=false)** and commented  A number of small spelling / grammar errors in the reference documentation.   ---  **Affects:** 2.0.8, 2.5.1  **Attachments:** - [webmvctypos.diff](https://jira.spring.io/secure/attachment/13565/webmvctypos.diff) (_2.48 kB_)  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-01-25T20:59:35Z","2012-06-19T03:47:42Z"
"","9313","CharacterEditor converts space character to null [SPR-4636]","**[David Tarico](https://jira.spring.io/secure/ViewProfile.jspa?name=tico)** opened **[SPR-4636](https://jira.spring.io/browse/SPR-4636?redirect=false)** and commented  When using a CharacterConverter with allowEmpty=true,  setAsText converts a string containing a single space into a null character object.  Currently the test for empty string is:      if (this.allowEmpty && !StringUtils.hasText(text)) {  But it should be if (this.allowEmpty && text.length() == 0) {  In my situation, I can't set allowEmpty to false as a workaround because I need both empty string to map to null and "" "" to map to the space character.  This is especially confusing because the conversion is not symmetric.  Converting a space Character object to a String produces the correct result, but converting the String back to a Character produces a null Character object.   ---  **Affects:** 2.5.2","closed","in: core,","spring-projects-issues","2008-03-27T06:00:24Z","2012-06-19T03:47:39Z"
"","9451","@Validator, @Validate [SPR-4774]","**[David Pedowitz](https://jira.spring.io/secure/ViewProfile.jspa?name=dpedowitz)** opened **[SPR-4774](https://jira.spring.io/browse/SPR-4774?redirect=false)** and commented  More brainstorming from training session in LA, 5/1/08 with Chris Beams, Tchavdar Ivanov (FIM) and myself.  `@Validator` could be a class level annotation eligible for component scans, the methods of which could be annotated with `@Validate` (or similar) which would enable method/request param specific validation within the request handling workflow - Like the `@HandlerInterceptor` design (#9447) `@Validator` could take a list of `@Controller` classes for a more fine grained approach or `@Controller` could take a list of `@Validator` which would match the current register model (I think I like the later)  `@Validate` would define a method used to validate an `@RequestParam`, it'd might be neat if it handled superset of `@RequestParam` and `@RequestMapping` arguments for a very fine grained approach, i.e. `@Validate`(""reward"", method=RequestMethod.POST). - Another option would be to register the Validator with the `@RequestParam`  Hope you dig the ideas  ---  **Issue Links:** - #4803 Support for declarative validation (Hibernate Validator, anticipating JSR 303) - #14072 Improve support for registering Validator implementations in Spring MVC (_**""is superseded by""**_)  9 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-02T15:31:26Z","2019-01-11T17:43:52Z"
"","9447","@HandlerInterceptor [SPR-4770]","**[David Pedowitz](https://jira.spring.io/secure/ViewProfile.jspa?name=dpedowitz)** opened **[SPR-4770](https://jira.spring.io/browse/SPR-4770?redirect=false)** and commented  Introduce `@HandlerInterceptor` to create a more symmetrical relationship between `@Controller`, `@ModelAttribute` and `@RequestParam`.  This came out of some questions and brainstorming in a Spring training session in LA, 5/1/08 with Chris Beams, Tchavdar Ivanov (FIM) and myself.  In Spring 2.5 the implementation of HandlerInterceptor has not changed leaving you to either implement the interface or extend HandlerInterceptorAdapter as before.  If you use `@Controller` and component scan you still must define a DefaultAnnotationHandlerMapping to configure a single list of HandlerInterceptors for all Controllers.  It'd be nice if you could define a class as a `@HandlerInterceptor` and annotate methods as `@AfterCompletion`,  `@PreHandle` and `@PostHandle`.  The default behavior could automagically intercept all `@Controllers` scanned and fire according to the same contract as the original HandlerInterceptor.  Also interaction could be similar to `@Controller` with the methods allowing use of `@ModelAttribute` and `@RequestParam`.  Example provided by Chris Beams:  ```java // @HandlerInterceptors are @Components, thus eligible for component scanning. // If no class args are supplied, the interceptor applies globally to all  // registered @Controllers.  Naturally, specifying one or more classes narrows  // its scope.  @HandlerInterceptor({AccountController.class, CustomerController.class}) public class ExceptionLoggingHandlerInterceptor { 	@AfterCompletion 	public void logException(Object handler, Throwable ex) { 		logger.error(...); 	}  	// Or to be more explicit, do it @AspectJ-style, using 	// attributes to bind by name  	@AfterCompletion(handler=""handler"", exception=""ex"") 	public void logException(Object handler, Throwable ex) { 		logger.error(...); 	}  	// In keeping with @Controller methods, the user could 	// request the request, response, model, etc.  	@AfterCompletion(handler=""handler"", exception=""ex"") 	public void logException(HttpServletRequest req, Object handler, Throwable ex) { 		logger.error(...); 	}  	// Could even have handler methods return @ModelAttributes!  	@PreHandle 	public @ModelAttribute(""currentDate"") Date currentDate(/* no params needed, none requested */) { 		return new Date(); 	}  } ```  Obviously there's a lot to be worked out.  Some questions we have are: - How do you express the order of the interceptors, something that comes naturally in the \ configuratin.  `@Order`? - Is it more natural to express the Controller classes the HandlerInterceptor applies to **in** the `@HandlerInterceptor` (above) or would something like `@Controller`(interceptors=(`@HandlerInterceptors`{class, class, ...})) be more expressive? which is more flexible?   - The later does express the list naturally but you would have to repeat the list in multiple controllers to achieve the same behavior.   - Maybe an XML annotation hybrid? \...\ and `@Controller`(interceptor=""authInterceptors"") - Could tooling help visualize how an `@Controller` relates to it `@HandlerInterceptors` (add bonus for sure!)  ---  **Issue Links:** - #17959 Apply Filter or Interceptor to Controller class via annotations (_**""is duplicated by""**_) - #8695 Ability to restrict HandlerInterceptors to specific controller paths  14 votes, 16 watchers","closed","has: votes-jira,","spring-projects-issues","2008-05-01T09:44:33Z","2019-01-11T17:43:41Z"
"","9199","form:checkboxes tag generates incorrect HTML [SPR-4522]","**[David McKain](https://jira.spring.io/secure/ViewProfile.jspa?name=davemckain)** opened **[SPR-4522](https://jira.spring.io/browse/SPR-4522?redirect=false)** and commented  The new  tag added in Spring 2.5 generates incorrect HTML. The label for the checkbox is being added as a child of the \ element, which is invalid since \ is defined as an empty element in the HTML DTD. Consequently, the labels are not being rendered on my browser (Firefox 2.0.0.11).  To illustrate what is happening, here is some sample output of what gets output for each item:  \\LABEL\\  The LABEL text ought to be ouput between the end of the \ and \ elements.  To fix, swap lines 254 and 255 of org/springframework/web/servlet/tags/form/CheckboxesTag.java so that the label text is output after - rather than before - the end of the \ tag.  I have tested this fix on the most recent nightly build and it appears to work correctly.   ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-02-28T21:12:15Z","2012-06-19T03:47:04Z"
"","9845","Binding in Velocity templates using EL accessors ([, ]) for collections produces non xhtml strict compliant output [SPR-5172]","**[David Mas](https://jira.spring.io/secure/ViewProfile.jspa?name=dmas)** opened **[SPR-5172](https://jira.spring.io/browse/SPR-5172?redirect=false)** and commented  When the springBind macro is called, then the generated XHTML contains the bound path on the ID of the HTML element. If the bound property contains some EL syntax to access collections (e.g. uses [] to access a map) these characters will appear on the ID attribute. According to XHTML strict, the ID must be a NCNAME (see http://www.w3.org/TR/REC-xml-names/#NT-NCName), which does not allow these characters among others.  The solution does not look obvious to me, but maybe some mechanism to escape the ID in these cases or to alias them could work.  ---  **Affects:** 4.0.6  **Issue Links:** - #13374 Using array syntax generates invalid id using freemarker - #18599 springUrl Velocity macro should encode the given URI using the response  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1b53882f554af87b362fc43310ae38119742b5dd","closed","type: enhancement,","spring-projects-issues","2008-09-21T22:56:05Z","2019-01-11T15:40:09Z"
"","9860","Be able to register a global (web-context wide) custom MessageCodesResolver [SPR-5187]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-5187](https://jira.spring.io/browse/SPR-5187?redirect=false)** and commented  It would be very handy if a custom MessageCodesResolver could be registered under a given bean-name, say ""messageCodesResolver"", so that this resolver strategy would be used whereever an MessageCodesResolver is needed. If no custom messageCodesResolver is registered, a fallback to the normal DefaultMessageCodesResolver.  This would allow for more ""freedom"" in defining message keys - and provide backwards compability.  I'm aware that it's possible to set a resolver explicitly on DataBinder etc - but if this could be more automagic it would be less intrusive, and easier to apply across of Controllers.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-09-30T01:11:42Z","2019-01-11T15:39:55Z"
"","9784","MockHttpServletRequest should parse HTTP request string into parameters, etc. [SPR-5111]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-5111](https://jira.spring.io/browse/SPR-5111?redirect=false)** and commented  ```java MockHttpServletRequest request = new MockHttpServletRequest(""http://someuri?someparam=somevalue""); ```  ... does not return any value for ...  ```java request.getParameter(""someparam""); ```    ---  **Affects:** 2.5.5  1 votes, 4 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-22T02:55:10Z","2016-06-02T12:51:48Z"
"","9623","java.lang.NoSuchMethodError: org/springframework/web/util/WebUtils.exposeErrorRequestAttributes(Ljavax/servlet/http/HttpServletRequest;Ljava/lang/Throwable;Ljava/lang/String;)V [SPR-4948]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4948](https://jira.spring.io/browse/SPR-4948?redirect=false)** and commented  When running spring 2.5.5 I get:  java.lang.NoSuchMethodError: org/springframework/web/util/WebUtils.exposeErrorRequestAttributes(Ljavax/servlet/http/HttpServletRequest;Ljava/lang/Throwable;Ljava/lang/String;)V at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1119) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:896) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:809) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405) at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:206) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:829) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:488)  If I downgrade to 2.5.4 again it works.   ---  **Affects:** 2.5.5","closed","in: web,","spring-projects-issues","2008-06-24T02:53:23Z","2019-01-11T18:34:38Z"
"","9557","Property placeholder configurers in multiple XML files overriding each other [SPR-4881]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4881](https://jira.spring.io/browse/SPR-4881?redirect=false)** and commented  I've declared two web-contexts for my Dispatcher like this:  \ \portal-toolsapp\ \ org.springframework.web.servlet.DispatcherServlet \ \ \contextConfigLocation\ \ WEB-INF/portal-tools-context.xml classpath*:portal-web-context.xml \ \ \  both portal-tools-context.xml and portal-web-context.xml contains a PropertyPlaceholder each.  This does not work as the one propertyplaceholder bean wipes out values from the other. They should be private per application context - as explained in this issue: #8682  ---  **Affects:** 2.5.4  4 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2008-06-01T23:35:06Z","2019-01-11T19:08:37Z"
"","9553","Propertyconverter conversion attempted where it's not applicable [SPR-4877]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4877](https://jira.spring.io/browse/SPR-4877?redirect=false)** and commented  The following bean definition blows up the context with:  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.apache.commons.httpclient.HostConfiguration#16261626' defined in class path resource [portal-tools-context.xml]: Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type [org.apache.commons.httpclient.ProxyHost] to required type [java.lang.String] for property 'proxyHost'; nested exception is java.lang.IllegalArgumentException: Original must not be null at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:478) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(AccessController.java:219) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:219) ... 50 more Caused by: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [org.apache.commons.httpclient.ProxyHost] to required type [java.lang.String] for property 'proxyHost'; nested exception is java.lang.IllegalArgumentException: Original must not be null at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:391) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1287) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1248) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1008) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) ... 54 more Caused by: java.lang.IllegalArgumentException: Original must not be null at org.springframework.util.Assert.notNull(Assert.java:112) at org.springframework.core.MethodParameter.\(MethodParameter.java:133) at org.springframework.beans.BeanUtils.getWriteMethodParameter(BeanUtils.java:417) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:138) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:386) ... 58 more  \ \ \ \ \ \ \ \ \ \ \ \ \         \ \ \ proxyHost is not a String property - it's a ProxyHost.   ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-05-31T13:36:52Z","2019-01-11T19:08:57Z"
"","9508","Set scope to protected for AnnotationMethodHandlerAdapter.invokeHandlerMethod [SPR-4832]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4832](https://jira.spring.io/browse/SPR-4832?redirect=false)** and commented  by changing the scope in private ModelAndView invokeHandlerMethod( HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {  to public or protected this class could be more versatile (because the method resolved to be executed happends inside this method).  It would be even better if there was an public/protected method exposing the java.lang.reflect.Method which was resolved for the handler.  i need to know the method to be executed (not only the handler class) before executing the handler chain and handler.   ---  **Affects:** 2.5.4  **Attachments:** - [AnnotationMethodHandlerAdapter.java.patch](https://jira.spring.io/secure/attachment/14103/AnnotationMethodHandlerAdapter.java.patch) (_2.88 kB_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-18T22:11:53Z","2009-09-08T08:26:16Z"
"","9345","Provide javadoc jars for the maven2 distribution. [SPR-4668]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4668](https://jira.spring.io/browse/SPR-4668?redirect=false)** and commented  If javadocs could be provided with each of the modules this would be very handy (f.ex. this is missing in http://repo1.maven.org/maven2/org/springframework/spring-core/). The maven eclipse or idea plugin can then add this automatically into your IDE.   ---  **Affects:** 2.5.3  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-06T21:28:39Z","2014-09-19T14:29:50Z"
"","9322","PropertyPlaceholderConfigurer detection broken when using  [SPR-4645]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4645](https://jira.spring.io/browse/SPR-4645?redirect=false)** and commented  PropertyPlaceholderConfigurer seems to be broken in this scenario:  Using a bag of contexts:  \ \ \ \classpath*:portal-application-context.xml\ \classpath*:portal-container-resources.xml\ \classpath*:portal-aop-context.xml\ \ \ \  portal-application-context.xml contains a PPC:  \ \ \ \classpath:portal.properties\ \ \ \  and a bean inside of this context uses a placeholder from it - BUT NO GO!  Excerpt from log: 2008-03-31 14:01:17,131 [WebContainer : 0] INFO [] org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from URL [file:/C:/data/elift-arkitektur/portal-trunks/portal-core/src/main/config/portal-application-context.xml] (XmlBeanDefinitionReader.java:308) 2008-03-31 14:01:17,162 [WebContainer : 0] DEBUG [] org.springframework.beans.factory.xml.DefaultDocumentLoader - Using JAXP provider [org.apache.xerces.jaxp.DocumentBuilderFactoryImpl] (DefaultDocumentLoader.java:72) 2008-03-31 14:01:17,178 [WebContainer : 0] TRACE [] org.springframework.beans.factory.xml.PluggableSchemaResolver - Trying to resolve XML entity with public id [null] and system id http://www.springframework.org/schema/beans/spring-beans-2.5.xsd (PluggableSchemaResolver.java:103) 2008-03-31 14:01:17,193 [WebContainer : 0] DEBUG [] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loading schema mappings from [META-INF/spring.schemas] (PluggableSchemaResolver.java:125) 2008-03-31 14:01:17,240 [WebContainer : 0] DEBUG [] org.springframework.beans.factory.xml.PluggableSchemaResolver - Loaded schema mappings: {http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.dnbnor.no/schema/spring/utils/utils.xsd=no/dnbnor/spring/utils/utils.xsd, http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd} (PluggableSchemaResolver.java:131) 2008-03-31 14:01:17,256 [WebContainer : 0] DEBUG [] org.springframework.beans.factory.xml.PluggableSchemaResolver - Found XML schema http://www.springframework.org/schema/beans/spring-beans-2.5.xsd in classpath: org/springframework/beans/factory/xml/spring-beans-2.5.xsd (PluggableSchemaResolver.java:114) 2008-03-31 14:01:17,287 [WebContainer : 0] DEBUG [] org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader - Loading bean definitions (DefaultBeanDefinitionDocumentReader.java:86) 2008-03-31 14:01:17,318 [WebContainer : 0] DEBUG [] org.springframework.beans.factory.support.DefaultListableBeanFactory - Registering alias 'org.springframework.beans.factory.config.PropertyPlaceholderConfigurer' for bean with name 'org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0' (AbstractBeanFactory.java:711) 2008-03-31 14:01:17,334 [WebContainer : 0] DEBUG [] org.springframework.beans.factory.xml.BeanDefinitionParserDelegate - Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.beans.factory.config.PropertyPlaceholderConfigurer#0] (BeanDefinitionParserDelegate.java:404)  Of some reason the property is tried resolved from SystemPropertyUtils: org.springframework.util.SystemPropertyUtils - Could not resolve placeholder 'applicationContextReaderImpl.rootDirectory' in [${applicationContextReaderImpl.rootDirectory}] as system property: neither system property nor environment variable found (SystemPropertyUtils.java:74)  (I've also been step-debugging this).  The weird this is that this works if: *) I don't load the context from within a bag of contexts (e.g. put all three contexts in portal-beanRefContext.xml in one large file) - but this clutters the design. OR *) use a  element instead (and still load all the beans from a bag context) - but this is less flexible than defining a PPC bean because the schema does not reflect all the options - and cannot load several propery files(?).   ---  **Affects:** 2.5.2  **Attachments:** - [portal.properties](https://jira.spring.io/secure/attachment/13874/portal.properties) (_53 bytes_) - [portal-application-context.xml](https://jira.spring.io/secure/attachment/13875/portal-application-context.xml) (_1.30 kB_) - [portal-beanRefContext.xml](https://jira.spring.io/secure/attachment/13876/portal-beanRefContext.xml) (_848 bytes_)","closed","in: core,","spring-projects-issues","2008-03-30T23:06:50Z","2012-06-19T03:47:30Z"
"","9265","Provide support for session/request scoped beans for integration testing [SPR-4588]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4588](https://jira.spring.io/browse/SPR-4588?redirect=false)** and commented  #### Overview  It would be very handy if Spring could provide support for `session` and `request` scoped beans for integration testing (e.g. in the TestContext framework).  #### Further Resources  - Forum discussions   - http://forum.springframework.org/archive/index.php/t-40257.html   - http://forum.springsource.org/showthread.php?27933-Testing-scope-session/page2   - http://forum.springsource.org/showthread.php?50722-Integration-tests-with-mocked-session/page2 - Spring Batch's `StepScopeTestExecutionListener`   - [source code](https://github.com/SpringSource/spring-batch/blob/master/spring-batch-test/src/main/java/org/springframework/batch/test/StepScopeTestExecutionListener.java)   - [reference manual](http://static.springsource.org/spring-batch/reference/html-single/index.html#d0e7538)  ---  **Affects:** 2.5.2  **Attachments:** - [AbstractJUnit4SpringWebContextTests.java](https://jira.spring.io/secure/attachment/14105/AbstractJUnit4SpringWebContextTests.java) (_1.61 kB_)  **Issue Links:** - #9917 Support loading WebApplicationContexts with the TestContext Framework (_**""depends on""**_) - #9201 Autowiring won't work when using scopes and targetClass auto proxying - #14588 Introduce bootstrap strategy in the TestContext framework  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a281bdbfc528187dcd1214be2d2a97e8482a8a23, https://github.com/spring-projects/spring-framework/commit/21ebbb9c028c5ac05f9d541d87b53b08bb021818  11 votes, 12 watchers","closed","has: votes-jira,","spring-projects-issues","2008-03-15T05:00:06Z","2019-01-11T17:16:55Z"
"","9201","Autowiring won't work when using scopes and targetClass auto proxying [SPR-4524]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4524](https://jira.spring.io/browse/SPR-4524?redirect=false)** and commented  java.lang.IllegalStateException: Annotation-specified bean name 'portalUserRequestData' for bean class [XXXX.PortalUserRequestData] conflicts with existing, non-compatible bean definition of same name and class [org.springframework.aop.scope.ScopedProxyFactoryBean]  I've got a PortalUserRequestData bean declared as: `@Scope`( ""request"" ) `@Component`  This is then injected in another bean as following:  `@Autowired` private PortalUserRequestData portalUserRequestData;  and fails with the message above.  it can be noted that if the same bean is declared in XML (with scope=) and set on the other bean in xml (with set property, and ref=""portalUserRequestData""). there's no problem - thus it's probably a bug in the spring core container.  ---  **Affects:** 2.5.1  **Attachments:** - [SPR-4524.zip](https://jira.spring.io/secure/attachment/14318/SPR-4524.zip) (_3.40 kB_)  **Issue Links:** - #9265 Provide support for session/request scoped beans for integration testing","closed","in: core,","spring-projects-issues","2008-02-29T02:40:59Z","2019-01-11T17:16:12Z"
"","9164","Ability to define interceptor list by name [SPR-4486]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4486](https://jira.spring.io/browse/SPR-4486?redirect=false)** and commented  It would be very nice if it was possible to define the interceptor list for DefaultAnnotationHandlerMapping as a list of beanNames. This would allow for externalizing of the chain, so that it could be read from a propertyfile (or a property with values: interceptor1,interceptor2...) instead of having to define a list of actual bean references.   ---  **Affects:** 2.5.1  **Attachments:** - [BeanNamesToBeanListFactoryBean.java](https://jira.spring.io/secure/attachment/14104/BeanNamesToBeanListFactoryBean.java) (_2.31 kB_)","closed","type: enhancement,","spring-projects-issues","2008-02-20T23:57:01Z","2012-06-19T09:36:22Z"
"","9134","Weird autowiring bug [SPR-4456]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4456](https://jira.spring.io/browse/SPR-4456?redirect=false)** and commented  Please se attached class ApplicationContextReaderImpl.java . Testcase: We tried to get this class `@Autowired` into a consumer of the class (The consumer declares `@Autowired` on the interface).  Observations: 1) If used as is - Spring finds no match (expecting 1 unique bean - finds none). 2) If it's not defined in the spring context as a `@Component` but defined in xml - it will be found! 3) If the inner Cache class is defined as a static class - autowiring ( 1) ) will succeed.  So this clearly has to be an autowiring bug.  ---  **Affects:** 2.5.1  **Attachments:** - [ApplicationContextReaderImpl.java](https://jira.spring.io/secure/attachment/13637/ApplicationContextReaderImpl.java) (_8.46 kB_)  **Issue Links:** - #9003 component scanning incorrectly excludes classes (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-02-12T01:06:01Z","2019-01-12T16:51:01Z"
"","9062","LocalContainerEntityManagerFactoryBean does not work with IBM WebSphere JPA [SPR-4383]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4383](https://jira.spring.io/browse/SPR-4383?redirect=false)** and commented  If you try to use LocalContainerEntityManagerFactoryBean and JpaDaoSupport it will fail inside of a WAS container with the following Exception:  Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: interface com.ibm.ws.persistence.WsJpaEntityManagerFactory is not visible from class loader at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1362)  This is also discussed in this thread: http://www-128.ibm.com/developerworks/forums/thread.jspa?threadID=185728  ---  **Affects:** 2.5.1  **Attachments:** - [springtran-ws7beta.log](https://jira.spring.io/secure/attachment/14113/springtran-ws7beta.log) (_501.73 kB_) - [WAS61-debuglog1.txt](https://jira.spring.io/secure/attachment/14116/WAS61-debuglog1.txt) (_16.37 kB_) - [WAS70-debuglog1.txt](https://jira.spring.io/secure/attachment/14117/WAS70-debuglog1.txt) (_21.92 kB_)  **Issue Links:** - #13197 java.lang.IllegalArgumentException: interface com.ibm.ws.persistence.WsJpaEntityManagerFactory is not visible from class loader  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ddb14ae5b80cc8ff6403872d019f9a1001ff473, https://github.com/spring-projects/spring-framework/commit/695f1613b2010c6ec62de4a345d242f417f24098","closed","type: enhancement,","spring-projects-issues","2008-01-23T23:24:04Z","2019-01-11T16:35:47Z"
"","9010","LoadTimeWeaver for WebSphere [SPR-4331]","**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-4331](https://jira.spring.io/browse/SPR-4331?redirect=false)** and commented  Implement a suitable LoadTimeWeaver for use on WebSphere Application Server. I guess this is important since spring is certified on WebSphere: http://blog.interface21.com/main/2007/06/21/spring-framework-certified-on-websphere/ Being able to use LTW without having to specify any javaagent would ease deployment.   ---  **Affects:** 2.5.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9c071e5d19648807a2d047be7ed97f15450df6a7, https://github.com/spring-projects/spring-framework/commit/f191be56d1beb1553fbe7b80cb5111f2f16bb534  10 votes, 10 watchers","closed","has: votes-jira,","spring-projects-issues","2008-01-13T02:52:09Z","2012-06-19T03:47:42Z"
"","9262","should accept J2EE resource references by default [SPR-4585]","**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** opened **[SPR-4585](https://jira.spring.io/browse/SPR-4585?redirect=false)** and commented  Hi,  I've found something very bizarre (probably my lack of understanding, but let's see..) I've posted a mailing list question on the jetty support mail list. Here's the reference:  http://www.nabble.com/JNDI-Lookups-%2B-Spring-td16048065.html  But for completeness, I'll C+P here:  Hi (again!)  Well, here's the jip, I don't know if I should report this here on in spring...so I'll do both :-)  Spring 2.5.2 Jetty 6.1.8 Java 1.5 update 6 JEE5  I have this jetty-env.xml in my WEB-INF dir (I've removed the tag braces since nabble fubars up the look)  Configure class=""org.mortbay.jetty.webapp.WebAppContext"" New id=""pmsDataSource"" class=""org.mortbay.jetty.plus.naming.Resource"" Arg jdbc/pmsDataSource Arg Arg New class=""org.apache.commons.dbcp.BasicDataSource"" Set name=""driverClassName"">org.postgresql.Driver Set Set name=""url"">jdbc:postgresql://production-db/reports Set Set name=""username"">fu Set Set name=""password"">bar Set New Arg New Configure  I've got this configured in my spring applicationContext.xml  jee:jndi-lookup id=""pmsDataSource"" jndi-name=""jdbc/pmsDataSource""  If I switch on -DDEBUG for Jetty, I get these lines:  2008-03-14 11:54:15.595::DEBUG: parse: file:/C:/javastuff/jetty-6.1.8/webapps/root/WEB-INF/jetty-env.xml 2008-03-14 11:54:15.595::DEBUG: parsing: sid=file:/C:/javastuff/jetty-6.1.8/webapps/root/WEB-INF/jetty-env.xml,pid=null  So far so good (it's found the jetty-env.xml file), continuing onwards....more debug trace from jetty...  2008-03-14 11:54:15.626::DEBUG: >>> new root context requested 2008-03-14 11:54:15.626::DEBUG: Looking up name=""comp/env"" 2008-03-14 11:54:15.626::DEBUG: Looking up binding for comp for context=null 2008-03-14 11:54:15.626::DEBUG: Using classloader of current org.mortbay.jetty.handler.ContextHandler 2008-03-14 11:54:15.626::DEBUG: Looking up name=""env"" 2008-03-14 11:54:15.626::DEBUG: Looking up binding for env for context=comp 2008-03-14 11:54:15.626::DEBUG: Looking up name=""org.mortbay.jetty.plus.naming.Resource"" 2008-03-14 11:54:15.626::DEBUG: Looking up binding for org.mortbay.jetty.plus.naming.Resource for context=env 2008-03-14 11:54:15.626::DEBUG: Looking up binding for org.mortbay.jetty.plus.naming.Resource for context=env 2008-03-14 11:54:15.626::DEBUG: Adding binding with key=org.mortbay.jetty.plus.naming.Resource obj=org.mortbay.naming.NamingContext@10655dd for context=env 2008-03-14 11:54:15.626::DEBUG: Subcontext org.mortbay.jetty.plus.naming.Resource created 2008-03-14 11:54:15.626::DEBUG: Looking up name=""jdbc"" 2008-03-14 11:54:15.626::DEBUG: Looking up binding for jdbc for context=org.mortbay.jetty.plus.naming.Resource 2008-03-14 11:54:15.626::DEBUG: Looking up binding for jdbc for context=org.mortbay.jetty.plus.naming.Resource 2008-03-14 11:54:15.626::DEBUG: Adding binding with key=jdbc obj=org.mortbay.naming.NamingContext@ef5502 for context=org.mortbay.jetty.plus.naming.Resource 2008-03-14 11:54:15.641::DEBUG: Subcontext jdbc created 2008-03-14 11:54:15.641::DEBUG: Adding binding with key=pmsDataSource obj=org.mortbay.jetty.plus.naming.Resource@b61fd1 for context=jdbc 2008-03-14 11:54:15.641::DEBUG: Bound object to pmsDataSource 2008-03-14 11:54:15.641::DEBUG: Bound java:comp/env/org.mortbay.jetty.plus.naming.Resource/jdbc/pmsDataSource 2008-03-14 11:54:15.641::DEBUG: Looking up name=""jdbc"" 2008-03-14 11:54:15.641::DEBUG: Looking up binding for jdbc for context=env 2008-03-14 11:54:15.641::DEBUG: Looking up binding for jdbc for context=env 2008-03-14 11:54:15.641::DEBUG: Adding binding with key=jdbc obj=org.mortbay.naming.NamingContext@e2dae9 for context=env 2008-03-14 11:54:15.641::DEBUG: Subcontext jdbc created 2008-03-14 11:54:15.641::DEBUG: Adding binding with key=pmsDataSource obj=org.apache.commons.dbcp.BasicDataSource@13c1b02 for context=jdbc 2008-03-14 11:54:15.641::DEBUG: Bound object to pmsDataSource 2008-03-14 11:54:15.641::DEBUG: Bound java:comp/env/jdbc/pmsDataSource 2008-03-14 11:54:15.641::DEBUG: parse: file:/C:/javastuff/jetty-6.1.8/webapps/root/WEB-INF/web.xml 2008-03-14 11:54:15.641::DEBUG: parsing: sid=file:/C:/javastuff/jetty-6.1.8/webapps/root/WEB-INF/web.xml,pid=null 2008-03-14 11:54:16.720::DEBUG: loaded interface javax.servlet.ServletContextListener  Notice that according to Jetty, it's bound a JNDI reference jdbc/pmsDataSource, so, all good so far! However, shortly after Spring decides to complain when it tries to boot up:  2008-03-14 11:54:19,263 [main] ERROR (ContextLoader:214:initWebApplicationContext) - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'pmsDataSource': Invocation of init method failed; nested exception is javax.naming.NameNotFoundException; remaining name 'jdbc/pmsDataSource' at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1302) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:463) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method)  You can see that Spring is upset. Note, that I've followed the example in the Spring docs, i.e:  http://static.springframework.org/spring/docs/2.5.x/reference/xsd-config.html#xsd-config-body-schemas-jee-jndi-lookup  section A.2.3.1. (look at the way the jdbc datasource is bound)  Now, If I change the spring applicationContext bean definition to:  jee:jndi-lookup id=""pmsDataSource"" jndi-name=""java:comp/env/jdbc/pmsDataSource""  It works. It finds the JNDI reference.  Now, I don't know what is going on...is it spring or is it jetty?  TIA :)  -=david=-   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-14T00:07:03Z","2012-06-19T03:47:04Z"
"","8946","Add parameter to ClassPathXmlApplicationContext constructor for configuration [SPR-4268]","**[David Goblirsch](https://jira.spring.io/secure/ViewProfile.jspa?name=dmgob)** opened **[SPR-4268](https://jira.spring.io/browse/SPR-4268?redirect=false)** and commented  ClassPathXmlApplicationContext will detect PropertyPlaceholderConfigurers that are configured in the XML file, but these beans point to files.  For those of us using JSE instead of JEE, we often have programs for which some properties are configured by command line parameters.  It would therefore be convenient to be able to pass a PropertyPlaceholderConfigurer to the ClassPathXmlApplicationContext upon construction for those properties that change from run-to-run. The main program would  o parse the command line o set up Properties from the command line arguments o construct a PropertyPlaceholderConfigurer o then create the ClassPathXmlApplicationContext with the configurer as one of the constructor parameters.  This way, configuration can be divided into 2 sets of parameters: those configurable by file because they are common to all the runs of a given application (and thus they can be configured in the config file) and those configurable from the command line but still allowing the flexibility and non-lazy instantation of beans offered by an ApplicationContext.  Currently, the only way I see to do this is to use a BeanFactory and explicitly post process it. But the ApplicationContext offers some useful features above and beyond the BeanFactory.  That is, it appears that the only way to apply a PropertyPlaceholderConfigurer to an AppicationContext is to configure it in the XML.    --- No further details from [SPR-4268](https://jira.spring.io/browse/SPR-4268?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-12-18T07:10:08Z","2012-06-19T09:36:13Z"
"","9672","InputTag documentation lists the attribute ""class"", but the TLD defines the attribute as cssClass. [SPR-4997]","**[David Fuelling](https://jira.spring.io/secure/ViewProfile.jspa?name=sappenin)** opened **[SPR-4997](https://jira.spring.io/browse/SPR-4997?redirect=false)** and commented  The  InputTag documentation lists the attribute CLASS_ATTRIBUTE with a value of ""class"".  However, specifying a ""class"" attribute in a JSP yileds the following JasperException:  In reality, the \ TLD only shows an attribute called ""cssClass"".  The documentation should be updated to reflect this, or the attribute name should be changed.   ---  **Affects:** 2.5.5","closed","status: declined,","spring-projects-issues","2008-07-09T14:45:17Z","2008-07-13T07:31:42Z"
"","9138","HessianServiceExporter only supports POST requests [SPR-4460]","**[David Disley](https://jira.spring.io/secure/ViewProfile.jspa?name=disleyd)** opened **[SPR-4460](https://jira.spring.io/browse/SPR-4460?redirect=false)** and commented  I get the following exception when I issue a GET request to a URL that is being directed to a Hessian service:  org.springframework.web.HttpRequestMethodNotSupportedException: HessianServiceExporter only supports POST requests at org.springframework.remoting.caucho.HessianServiceExporter.handleRequest(HessianServiceExporter.java:142) at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:858) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:792) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:476) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:431) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at com.opensymphony.module.sitemesh.filter.PageFilter.parsePage(PageFilter.java:119) at com.opensymphony.module.sitemesh.filter.PageFilter.doFilter(PageFilter.java:55) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:199) at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:282) at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:767) at org.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:697) at org.apache.jk.common.ChannelSocket$SocketConnection.runIt(ChannelSocket.java:889) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595)  This exception prevents further Hessian requests from completing.  The only way to ""clear"" this problem is to re-start the application.  This is not a problem that I expect to happen in the ""normal"" operation of my application, but I need to guard against it does represent a security threat - malicious client applications could exploit this vulnerability to create a denial of service situation.   ---  **Affects:** 2.0.7","closed","in: web,","spring-projects-issues","2008-02-13T02:29:51Z","2019-01-11T17:32:06Z"
"","9493","Add sequence reset method for DataFieldMaxValueIncrementer [SPR-4817]","**[Davey Yan](https://jira.spring.io/secure/ViewProfile.jspa?name=daveyyan)** opened **[SPR-4817](https://jira.spring.io/browse/SPR-4817?redirect=false)** and commented  Sometimes we need reset a sequence by initial value, or some specific value, e.g. some invoices need renumber every year.  Can the DataFieldMaxValueIncrementer provide methods like these: resetIntValue() resetIntValue(int value)   --- No further details from [SPR-4817](https://jira.spring.io/browse/SPR-4817?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-05-14T14:49:31Z","2009-02-18T00:14:16Z"
"","9825","Use field or parameter name as default value for @Qualifier [SPR-5152]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-5152](https://jira.spring.io/browse/SPR-5152?redirect=false)** and commented  Use field or parameter name as default value for `@Qualifier`.  E.g.      @Autowired     @Qualifier(""requests"")     private MessageChannel requests;          @Autowired     @Qualifier(""replies"")     private PollableChannel replies;  Would be replaced by      @Autowired     @Qualifier     private MessageChannel requests;          @Autowired     @Qualifier     private PollableChannel replies;  ---  **Issue Links:** - #10250 `@Autowired` vs. `@Resource`  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b85d45725d40b24e760bef8d64c62ad17d2f497d  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-09-11T22:02:49Z","2019-01-13T08:02:36Z"
"","9540","mvc-step-by-step doc link is broken [SPR-4864]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4864](https://jira.spring.io/browse/SPR-4864?redirect=false)** and commented  Cloned from: [BATCH-642](https://jira.spring.io/browse/BATCH-642): mvc-step-by-step doc link is broken http://jira.springframework.org/browse/BATCH-642  > http://www.springframework..org/docs/MVC-step-by-step/Spring-MVC-step-by-step-Part-1.html  Not Found error  Worked yesterday  I was smack in the middle of the tutorial and it was really helpful.   --- No further details from [SPR-4864](https://jira.spring.io/browse/SPR-4864?redirect=false)","closed","","spring-projects-issues","2008-05-26T02:55:26Z","2019-01-11T19:05:13Z"
"","9535","Implement transaction aware SQL update/insert with batching [SPR-4859]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4859](https://jira.spring.io/browse/SPR-4859?redirect=false)** and commented  Implement transaction aware SQL update/insert with batching.  JdbcTemplate, SimpleJdbcInsert provide thread-safe batching capabilities, and BatchSqlUpdate has some nice features, but it isn't thread safe and requires a manual flush.  In Spring Batch we have a BatchSqlUpdateItemWriter that tries to combine the best of both, and I think it would be useful to extract the non-batch-specific parts of that into Spring Core.  The basic idea is that the helper object is transaction aware, so the user does not need to remember to flush, and doesn't need to know the size of the batch, or where all the data are coming from - he just issues update statements repeatedly to the same PreparedStatement, and when the transaction commits a TransactionSynchronization issues the batch update.   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-24T16:13:14Z","2015-09-22T17:34:39Z"
"","9534","Implement @MVC support for ViewResolver [SPR-4858]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4858](https://jira.spring.io/browse/SPR-4858?redirect=false)** and commented  The ViewResolver interface is OK for most purposes but it is is bit limiting.  The flexible method parameter model from `@Controller` seems ideal.  ViewResolvers should be able to draw on request parameters and headers (at least) as well as the view name and locale.   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-24T15:31:04Z","2019-01-11T19:06:07Z"
"","9531","Migrate Repeat and Retry from Spring Batch [SPR-4855]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4855](https://jira.spring.io/browse/SPR-4855?redirect=false)** and commented  Migrate Repeat and Retry from Spring Batch.  They are almost completely self-contained now (on trunk), so it shouldn't be a tough job - just need to decide where to put them.  Maybe the tests might have some batch dependencies, but they would be easily factored out.  There is also a dependency on some utility stuff in org.springframework.batch.support which would need to be moved over or equivalents provided in core.  The only real work will be migrating the StatefulRetryOperationsInterceptor (very useful).  It currently depends on ItemKeyGenerator and NewItemIdentifier, for good reasons, so equivalents will have to be provided.  When this is refactored it might also be a good idea to revisit the whole stateful retry concept - it could be implemented as an extension of the RetryOperations interface instead of through a callback / policy pairing as it is now.  ---  **Affects:** 2.5.4  **Issue Links:** - #13808 Consider moving Spring Batch Retry package into Spring Core (_**""is duplicated by""**_)  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-23T01:28:16Z","2019-01-13T08:03:57Z"
"","9438","User Guide refers to apparently non-existent class FormatHelper   [SPR-4761]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4761](https://jira.spring.io/browse/SPR-4761?redirect=false)** and commented  User Guide refers to apparently non-existent class FormatHelper .  Section 14.5.1.3 ""Convert the model data to XML"" says: ""See the Javadocs for the org.springframework.web.servlet.view.xslt.FormatHelper  class"".  If there is an alternative it would be nice to know about.   ---  **Affects:** 2.0.8, 2.5.4  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-04-28T07:41:01Z","2012-06-19T03:46:44Z"
"","9415","Scan classpath for persistence annotations when creating session factory for hibernate [SPR-4738]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4738](https://jira.spring.io/browse/SPR-4738?redirect=false)** and commented  Scan classpath for persistence annotations when creating session factory for hibernate.  The AnnotationSessionFactoryBean requires me to explictly enumerate all classes that are annotated, whereas I know Spring could discover that for me, e.g.:           	     	                 ...       ---  **Affects:** 2.5.3  **Issue Links:** - #6038 Auto-pickup of entity beans (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-04-21T22:40:29Z","2019-01-11T17:42:46Z"
"","9411","Internal proxying as a strategy for framework classes [SPR-4734]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4734](https://jira.spring.io/browse/SPR-4734?redirect=false)** and commented  Internal proxying as a strategy for framework classes.  When there is a cross cutting concern internally in a framework class, like transaction management in a message listener container (or in a PollingSourceAdapter in Spring Integration or a Step in Spring Batch), it would help a lot if the implementation could be split out from the main ""business"" logic.  But if the concern is implemented as an internal method call, there is no simple AOP approach (no pointcut), and also it is fiddly to explain to users that they have to use a particular AOP configuration just to enable a perfectly sensible feature (which probably is the default).  PollingSourceAdapter is interesting because (in 1.0.0.m4 at least) it implements Runnable, so it is quite possible to proxy it and add the cross cutting concern using Spring AOP (with no point cut).  This is quite elegant, but not accessible to the user - it has to be set up by whoever creates the PollingSourceAdapter, which is never expected to be a Spring component, so is naturally created in a framework factory somewhere.  But as an extender of that framework I would also like to be able to add other AOP interceptors to the same proxy - it seems the fundamental framework that provides the PollingSourceAdapter should be able to add those interceptors using a simple declarative API.   ---  **Affects:** 2.5.2  **Attachments:** - [BatchMessageListenerContainer.java](https://jira.spring.io/secure/attachment/13987/BatchMessageListenerContainer.java) (_4.79 kB_)","closed","type: enhancement,","spring-projects-issues","2008-04-20T22:55:15Z","2015-09-22T17:34:37Z"
"","9410","Add error handling strategy to MessageListenerContainer [SPR-4733]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4733](https://jira.spring.io/browse/SPR-4733?redirect=false)** and commented  Add error handling strategy to MessageListenerContainer.  There is a protected method to override, but it would be preferable to have a configurable strategy, such as could be provided by an error handler, then I won't have to do this just to get the listener error re-thrown:      protected void handleListenerException(Throwable ex) {     	if (!isSessionTransacted()) {     		// Log the exceptions in base class if not transactional anyway     		super.handleListenerException(ex);     		return;     	}     	logger.debug(""Re-throwing exception in container."");     	if (ex instanceof RuntimeException) {     		// We need to re-throw so that an enclosing non-JMS transaction can     		// rollback...     		throw (RuntimeException) ex;     	}     	else if (ex instanceof Error) {     		// Just re-throw Error instances because otherwise unit tests just     		// swallow exceptions from EasyMock and JUnit.     		throw (Error) ex;     	}     }	    ---  **Affects:** 2.5.2  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-20T22:47:32Z","2015-09-22T17:34:37Z"
"","9362","Add test utility for checking that a property is @Required [SPR-4685]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4685](https://jira.spring.io/browse/SPR-4685?redirect=false)** and commented  Add test utility for checking that a property is `@Required`.  E.g.      Method method = ReflectionUtils.findMethod(targetType, methodName, new Class[] {propertyType});     assertNotNull(method);     Annotation[] annotations = AnnotationUtils.getAnnotations(method);     assertEquals(1, annotations.length);     assertEquals(Required.class, annotations[0].annotationType());    ---  **Affects:** 2.5.3","closed","type: enhancement,","spring-projects-issues","2008-04-09T22:14:34Z","2012-06-20T01:09:03Z"
"","9356","JndiRmiProxyFactoryBean doesn't work if stub does not implement java.rmi.Remote [SPR-4679]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4679](https://jira.spring.io/browse/SPR-4679?redirect=false)** and commented  JndiRmiProxyFactoryBean doesn't work if stub does not implement java.rmi.Remote.  There is a test in JndiRmiClientInterceptor:      if (getServiceInterface() != null && Remote.class.isAssignableFrom(getServiceInterface())) {          try {               stub = PortableRemoteObject.narrow(stub, getServiceInterface());          }  which seems unnecessary.  The narrow() works anyway, whether the stub extends Remote or not.  And in fact when the stub is generated from idlj apparently it does not extend Remote, so nothing works out of the box (I hacked mine to extend Remote and then it worked OK).  ---  **Affects:** 2.5.3  **Issue Links:** - #9801 JndiRmiClientInterceptor regression for RmiInvocationHandler services","closed","type: enhancement,","spring-projects-issues","2008-04-09T01:56:17Z","2019-01-11T18:16:17Z"
"","9352","Throw AopInvocationException on advice returning null for primitive type [SPR-4675]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4675](https://jira.spring.io/browse/SPR-4675?redirect=false)** and commented  Could we please throw an exception in a proxy if the return value is `null` and should be a primitive type?  It is **extremely** hard to debug at present if you happen to intercept a method that returns a primitive type, and the proxy then returns `null`. The stack trace has no useful line numbers in it (since it comes from the $Proxy) and there is no way to know what you have done wrong. Wouldn't it be worth the cost of a check for `null` if the type is primitive (e.g. in `JdkDynamicAopProxy` after the call to `invocation.proceed()`)?  Probably it would be no more expensive than the existing special case there already for detecting ""return this"".   ---  **Affects:** 2.5.3  **Attachments:** - [SPR-4675-src.zip](https://jira.spring.io/secure/attachment/15188/SPR-4675-src.zip) (_6.11 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3e296974c4b4e6b11d97728073c1df77bb9cc8f6, https://github.com/spring-projects/spring-framework/commit/1c7e8cfbf641878d3e4f223d7cc7e6db79d98740","closed","type: enhancement,","spring-projects-issues","2008-04-08T03:29:02Z","2012-11-04T06:54:02Z"
"","9320","Support for JUnit 4.7 @Rule (was: message checking with @ExpectedException) [SPR-4643]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4643](https://jira.spring.io/browse/SPR-4643?redirect=false)** and commented  Additional `@ExpectedException` attribute to allow the exception message to be checked, e.g. a substring, or regex, or both.   ---  **Affects:** 2.5.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9f9b431a697132af0e22311d74b90c3f01dccb7","closed","type: enhancement,","spring-projects-issues","2008-03-29T19:38:28Z","2012-06-19T03:46:59Z"
"","9299","Allow default values to be specified for System properties in ResourceEditor [SPR-4622]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4622](https://jira.spring.io/browse/SPR-4622?redirect=false)** and commented  Allow default values to be specified for System properties in ResourceEditor.  It is really nice that ResourceEditor replaces placeholders with System properties, but it isn't helpful that it ignores (logging at warning level) missing values.  It would be useful to specify a default, e.g.  \ would evaluate to ""classpath:application-test.properties"" by default, and can be overridden by a System property.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-24T05:35:12Z","2019-01-11T18:12:23Z"
"","9269","Add SybaseMaxValueIncrementer [SPR-4592]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4592](https://jira.spring.io/browse/SPR-4592?redirect=false)** and commented  Add SybaseMaxValueIncrementer.  #7974 contains some comments with pointers.  ---  **Attachments:** - [MS SQL support in Spring Batch.zip](https://jira.spring.io/secure/attachment/14079/MS+SQL+support+in+Spring+Batch.zip) (_5.44 kB_) - [New_SybaseMaxValueIncrementer.zip](https://jira.spring.io/secure/attachment/14082/New_SybaseMaxValueIncrementer.zip) (_1.61 kB_) - [SybaseMaxValueIncrementer.zip](https://jira.spring.io/secure/attachment/14081/SybaseMaxValueIncrementer.zip) (_1.44 kB_)  **Issue Links:** - [BATCH-328](https://jira.spring.io/browse/BATCH-328) create schema generator configurations for MS SQL, Sybase (_**""is depended on by""**_)  2 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-03-16T22:17:10Z","2019-01-11T17:18:56Z"
"","9040","IntArrayPropertyEditor - property editor for int[] [SPR-4362]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4362](https://jira.spring.io/browse/SPR-4362?redirect=false)** and commented  IntArrayPropertyEditor - property editor for int[].  See implementation in Batch (https://springframework.svn.sourceforge.net/svnroot/springframework/spring-batch/trunk/spring-batch-infrastructure/src/main/java/org/springframework/batch/support/IntArrayPropertyEditor.java) - we would be happier to have it in core really.  P.S. please backport to 2.0.9 if possible.   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-01-21T00:53:43Z","2012-06-19T03:46:35Z"
"","9039","Factor out custom property editors and PropertyEditorRegistrar behaviour from CustomEditorConfigurer [SPR-4361]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4361](https://jira.spring.io/browse/SPR-4361?redirect=false)** and commented  Factor out custom property editors and PropertyEditorRegsitrar behaviour from CustomEditorConfigurer, so that the map of custom editors can be used to register with a variety of PropertyEditorRegistry types, not just the BeanFactory.  There is an implementation already in Spring Batch (https://springframework.svn.sourceforge.net/svnroot/springframework/spring-batch/trunk/spring-batch-infrastructure/src/main/java/org/springframework/batch/support/DefaultPropertyEditorRegistrar.java) which would make more sense in Core.  P.S. please backport to 2.0.9 as well if it's not too difficult.   ---  **Affects:** 2.5.1  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-01-21T00:50:20Z","2012-06-18T12:45:02Z"
"","9035","silently fails when spring-aop.jar is not on classpath [SPR-4357]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4357](https://jira.spring.io/browse/SPR-4357?redirect=false)** and commented   silently fails when spring-aop.jar is not on classpath, and the error is then very confusing.  A proxy is not created (obviously), but you get one of those angry ""use aop-scoped-proxy dummie!"" (and you already are) exception messages when the bean is injected into a singleton.   ---  **Affects:** 2.5.1","closed","in: core,","spring-projects-issues","2008-01-18T02:43:10Z","2012-06-19T03:47:48Z"
"","9032","PropertyOverrideConfigurer cannot change values in a scoped proxy [SPR-4354]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4354](https://jira.spring.io/browse/SPR-4354?redirect=false)** and commented  PropertyOverrideConfigurer cannot change values in a scoped proxy because when the property values are applied it thinks it has a reference to a FactoryBean, not the product.  If you try it you get an error of the form  org.springframework.beans.InvalidPropertyException: Invalid property 'x' of bean class [org.springframework.aop.scope.ScopedProxyFactoryBean]: No property 'x' found  where 'x' is the name of the property you are trying to override.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-17T22:26:28Z","2012-06-19T03:47:13Z"
"","9012","TestContextManager has hidden dependency on spring-tx [SPR-4333]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4333](https://jira.spring.io/browse/SPR-4333?redirect=false)** and commented  TestContextManager has hidden dependency on spring-tx.  I can't run a test with `@RunWith`(SpringJUnit4ClassRunner.class) without putting spring-tx.jar on the classpath, which isn't actually required by the test case.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-13T23:16:59Z","2012-06-19T03:47:03Z"
"","8935","Autowire byType fails even if there is an alias of the correct type. [SPR-4257]","**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-4257](https://jira.spring.io/browse/SPR-4257?redirect=false)** and commented  For some reason I thought I remember being abe to do this in the past, but maybe not.  Seems sensible anyway.  I have two beans of the same type, but only want to select one at runtime.  I can do it with a placeholder, but really I'd rather use an alias in some cases:     \ would select the first bean for autowiring.  Maybe the autowire-candidate= attribute would need to be added to the \ tag?   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-13T22:12:31Z","2012-06-19T08:58:01Z"
"","9605","@SessionAttributes cache control too severe for MSIE [SPR-4930]","**[Darren Davison](https://jira.spring.io/secure/ViewProfile.jspa?name=darren.davison)** opened **[SPR-4930](https://jira.spring.io/browse/SPR-4930?redirect=false)** and commented  We have a controller that uses `@SessionAttributes`, and as such Spring always adds HTTP headers to prevent caching (see AnnotationMethodHandlerAdapter.handle() )  This is causing us a problem in that MSIE users invoke the controller, click links on the page generated by it, and then get the ""This page has expired"" warning from IE if they hit their back button.  Interestingly, if the HTTP headers are set to expire after 1 second, MSIE happily shows the user the page from cache, even though it really HAS expired according to the protocol, so there's definitely (yet another) IE fault at play here too.  Firefox and Safari don't exhibit this issue at all.  There is no way to override this behaviour in the AnnotationMethodHandlerAdapter class at present, so I'm wondering if the default behaviour can be made more flexible?  Ideally this would be by way of an attribute on the `@RequestMapping` (or maybe a new annotation) which could be read by the handler adapter.  If no value is supplied, it defaults to 0, thus preserving current system behaviour and backwards compatibility, otherwise it specifies the cache seconds to use.  Perhaps adding such an attribute to the RequestMapping/new annotation would provide more benefit in finer grained cache control for annotated controllers, falling back to that set on the handler adapter.  I'll write and test the patch if any of that sounds like it might be acceptable.  Or perhaps there's already some way to handle this that I missed..?   ---  **Affects:** 2.5.4  **Attachments:** - [SPR-4930.patch](https://jira.spring.io/secure/attachment/14195/SPR-4930.patch) (_5.14 kB_)","closed","type: enhancement,","spring-projects-issues","2008-06-18T02:00:33Z","2012-12-07T04:02:48Z"
"","9547","No way to obtain beans by stereotype from the BeanFactory/ApplicationContext [SPR-4871]","**[Darren Davison](https://jira.spring.io/secure/ViewProfile.jspa?name=darren.davison)** opened **[SPR-4871](https://jira.spring.io/browse/SPR-4871?redirect=false)** and commented  If beans are configured anonymously using stereotype annotations (`@Service`, `@Controller` etc) and not defined in XML, there seems to be no way to obtain these beans from the container without knowing their class type.  A method on BeanFactory such as..  public Object[] getBeansByStereotype(Class clazz);  ..passing the classname of the stereotype annotation would be helpful.  This would enable beans that implement ApplicationContextAware (or otherwise use the application context directly) to obtain these beans.  My specific use case is an application that wishes to expose its service tier beans to the binding for a scripting shell.  The beans are all of disparate types and configured with `@Service`, consequently having no name.  The only common factor they share is the annotation.   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-28T20:28:31Z","2012-06-19T03:47:49Z"
"","9413","BeanPropertySqlParameterSource fails for mysql after updating from 2.5.1 to 2.5.3 [SPR-4736]","**[Darren Davis](https://jira.spring.io/secure/ViewProfile.jspa?name=ddavis539)** opened **[SPR-4736](https://jira.spring.io/browse/SPR-4736?redirect=false)** and commented  After upgrading a perfectly working project from Spring 2.5.1 to 2.5.3, we are getting DAO errors when using the BeanPropertySqlParameterSource with an object containing properties of type 'boolean'.  We're using a MySQL database with a recent connector jar file.  This appears related to the recent modifications to the BeanPropertySqlParameterSource class which added SQL Types.  For example a basic object  public class Contact { private int id; // Contact Id private int companyId; private boolean active; private String name;  ... (with standard getters/setters) }  declaration of JdbcInsert  private SimpleJdbcInsert insertContact;  DAO insert method  `@Transactional` public Contact insertContact(Contact contact) throws DataAccessException { logger.info(""saveContact called""); if (contact.getId()==0) { logger.info(""Adding a new contact""); contact.dump();        Number newKey = this.insertContact.executeAndReturnKey(new BeanPropertySqlParameterSource(contact));       contact.setId(newKey.intValue());     }  }  DAO setter method for datasource  public void setDataSource(DataSource dataSource) { jdbcTemplate = new SimpleJdbcTemplate(dataSource); this.insertContact = new SimpleJdbcInsert(dataSource) .withTableName(""Contact"") .usingGeneratedKeyColumns(""Id""); }  After updating to 2.5.3, the following exception is thrown when the insert method is called:  01:02:18,145 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [org/springframework/jdb c/support/sql-error-codes.xml] 01:02:18,218 INFO  [SQLErrorCodesFactory] SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, Pos tgreSQL, Sybase] 01:02:18,222 ERROR [STDERR] org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQ LException for SQL []; SQL state [S1000]; error code [0]; Unknown Types value; nested exception is java.sql.SQLException: U nknown Types value 01:02:18,222 ERROR [STDERR]     at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.translate(SQLStateSQLExc eptionTranslator.java:124) 01:02:18,223 ERROR [STDERR]     at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCo deSQLExceptionTranslator.java:322) 01:02:18,223 ERROR [STDERR]     at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:606) 01:02:18,223 ERROR [STDERR]     at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:823) 01:02:18,223 ERROR [STDERR]     at org.springframework.jdbc.core.simple.AbstractJdbcInsert.executeInsertAndReturnKeyHolderI nternal(AbstractJdbcInsert.java:421) 01:02:18,223 ERROR [STDERR]     at org.springframework.jdbc.core.simple.AbstractJdbcInsert.executeInsertAndReturnKeyInterna l(AbstractJdbcInsert.java:402) 01:02:18,223 ERROR [STDERR]     at org.springframework.jdbc.core.simple.AbstractJdbcInsert.doExecuteAndReturnKey(AbstractJd bcInsert.java:369) 01:02:18,223 ERROR [STDERR]     at org.springframework.jdbc.core.simple.SimpleJdbcInsert.executeAndReturnKey(SimpleJdbcInse rt.java:110) 01:02:18,223 ERROR [STDERR]     at com.cogivo.dao.jdbc.ContactDAOJdbc.insertContact(ContactDAOJdbc.java:79) 01:02:18,223 ERROR [STDERR]     at com.cogivo.businesslogic.impl.ContactService.insertContact(ContactService.java:38) 01:02:18,223 ERROR [STDERR]     at com.cogivo.businesslogic.impl.TempAccountService.activateAccount(TempAccountService.java :184) 01:02:18,223 ERROR [STDERR]     at com.cogivo.web.controllers.TempAccountCodeController.onSubmit(TempAccountCodeController. java:87) 01:02:18,223 ERROR [STDERR]     at org.springframework.web.servlet.mvc.SimpleFormController.onSubmit(SimpleFormController.j ava:409) 01:02:18,224 ERROR [STDERR]     at org.springframework.web.servlet.mvc.SimpleFormController.onSubmit(SimpleFormController.j ava:381) 01:02:18,224 ERROR [STDERR]     at org.springframework.web.servlet.mvc.SimpleFormController.processFormSubmission(SimpleFor mController.java:267) 01:02:18,224 ERROR [STDERR]     at com.cogivo.web.controllers.TempAccountCodeController.processFormSubmission(TempAccountCo deController.java:78) 01:02:18,224 ERROR [STDERR]     at org.springframework.web.servlet.mvc.AbstractFormController.handleRequestInternal(Abstrac tFormController.java:265) 01:02:18,224 ERROR [STDERR]     at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController. java:153) 01:02:18,224 ERROR [STDERR]     at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControll erHandlerAdapter.java:48) 01:02:18,224 ERROR [STDERR]     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875) 01:02:18,224 ERROR [STDERR]     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:809) 01:02:18,224 ERROR [STDERR]     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:52 3) 01:02:18,224 ERROR [STDERR]     at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:463) 01:02:18,224 ERROR [STDERR]     at javax.servlet.http.HttpServlet.service(HttpServlet.java:710) 01:02:18,224 ERROR [STDERR]     at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) 01:02:18,224 ERROR [STDERR]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain. java:290) 01:02:18,224 ERROR [STDERR]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206 ) 01:02:18,224 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterCha inProxy.java:359) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.intercept.web.FilterSecurityInterceptor.invoke(FilterSecuri tyInterceptor.java:109) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.intercept.web.FilterSecurityInterceptor.doFilter(FilterSecu rityInterceptor.java:83) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterCha inProxy.java:371) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.ui.ExceptionTranslationFilter.doFilterHttp(ExceptionTransla tionFilter.java:101) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java: 53) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterCha inProxy.java:371) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.providers.anonymous.AnonymousProcessingFilter.doFilterHttp( AnonymousProcessingFilter.java:105) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java: 53) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterCha inProxy.java:371) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.ui.rememberme.RememberMeProcessingFilter.doFilterHttp(Remem berMeProcessingFilter.java:109) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java: 53) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterCha inProxy.java:371) 01:02:18,225 ERROR [STDERR]     at org.springframework.security.wrapper.SecurityContextHolderAwareRequestFilter.doFilterHtt p(SecurityContextHolderAwareRequestFilter.java:91) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java: 53) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterCha inProxy.java:371) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.ui.basicauth.BasicProcessingFilter.doFilterHttp(BasicProces singFilter.java:172) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java: 53) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterCha inProxy.java:371) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.ui.webapp.DefaultLoginPageGeneratingFilter.doFilterHttp(Def aultLoginPageGeneratingFilter.java:83) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java: 53) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterCha inProxy.java:371) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.ui.AbstractProcessingFilter.doFilterHttp(AbstractProcessing Filter.java:268) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java: 53) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterCha inProxy.java:371) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.ui.logout.LogoutFilter.doFilterHttp(LogoutFilter.java:87) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java: 53) 01:02:18,226 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterCha inProxy.java:371) 01:02:18,227 ERROR [STDERR]     at org.springframework.security.ui.SessionFixationProtectionFilter.doFilterHttp(SessionFixa tionProtectionFilter.java:68) 01:02:18,227 ERROR [STDERR]     at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java: 53) 01:02:18,227 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterCha inProxy.java:371) 01:02:18,227 ERROR [STDERR]     at org.springframework.security.context.HttpSessionContextIntegrationFilter.doFilterHttp(Ht tpSessionContextIntegrationFilter.java:229) 01:02:18,227 ERROR [STDERR]     at org.springframework.security.ui.SpringSecurityFilter.doFilter(SpringSecurityFilter.java: 53) 01:02:18,227 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterCha inProxy.java:371) 01:02:18,227 ERROR [STDERR]     at org.springframework.security.util.FilterChainProxy.doFilter(FilterChainProxy.java:174) 01:02:18,227 ERROR [STDERR]     at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProx y.java:183) 01:02:18,227 ERROR [STDERR]     at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java                                    :138) 01:02:18,227 ERROR [STDERR]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.                                    java:235) 01:02:18,227 ERROR [STDERR]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206                                    ) 01:02:18,228 ERROR [STDERR]     at org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:96) 01:02:18,228 ERROR [STDERR]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.                                    java:235) 01:02:18,228 ERROR [STDERR]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206                                    ) 01:02:18,228 ERROR [STDERR]     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230) 01:02:18,228 ERROR [STDERR]     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) 01:02:18,228 ERROR [STDERR]     at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.j                                    ava:179) 01:02:18,228 ERROR [STDERR]     at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:84) 01:02:18,228 ERROR [STDERR]     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) 01:02:18,229 ERROR [STDERR]     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) 01:02:18,229 ERROR [STDERR]     at org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(CachedConnectionValve.java                                    :157) 01:02:18,229 ERROR [STDERR]     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) 01:02:18,229 ERROR [STDERR]     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:262) 01:02:18,229 ERROR [STDERR]     at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) 01:02:18,229 ERROR [STDERR]     at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.j                                    ava:583) 01:02:18,230 ERROR [STDERR]     at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:446) 01:02:18,230 ERROR [STDERR]     at java.lang.Thread.run(Thread.java:619) 01:02:18,230 ERROR [STDERR] Caused by: java.sql.SQLException: Unknown Types value 01:02:18,231 ERROR [STDERR]     at com.mysql.jdbc.PreparedStatement.setObject(PreparedStatement.java:2683) 01:02:18,232 ERROR [STDERR]     at com.mysql.jdbc.PreparedStatement.setObject(PreparedStatement.java:2403) 01:02:18,232 ERROR [STDERR]     at org.jboss.resource.adapter.jdbc.WrappedPreparedStatement.setObject(WrappedPreparedStatem                                    ent.java:465) 01:02:18,232 ERROR [STDERR]     at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementC                                    reatorUtils.java:330) 01:02:18,232 ERROR [STDERR]     at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUt                                    ils.java:141) 01:02:18,232 ERROR [STDERR]     at org.springframework.jdbc.core.simple.AbstractJdbcInsert.setParameterValues(AbstractJdbcI                                    nsert.java:595) 01:02:18,232 ERROR [STDERR]     at org.springframework.jdbc.core.simple.AbstractJdbcInsert.access$100(AbstractJdbcInsert.ja                                    va:61) 01:02:18,232 ERROR [STDERR]     at org.springframework.jdbc.core.simple.AbstractJdbcInsert$1.createPreparedStatement(Abstra                                    ctJdbcInsert.java:425) 01:02:18,233 ERROR [STDERR]     at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:584) 01:02:18,233 ERROR [STDERR]     ... 79 more   ---  **Affects:** 2.5.3","closed","type: bug,","spring-projects-issues","2008-04-21T18:18:02Z","2012-06-19T03:46:57Z"
"","8918","ResourceBundleMessageSource looking for files of a certain type in a directory tree [SPR-4240]","**[Daniel Henriksson](https://jira.spring.io/secure/ViewProfile.jspa?name=setomidor)** opened **[SPR-4240](https://jira.spring.io/browse/SPR-4240?redirect=false)** and commented  I've implemented a ResourceBundleMessageSource that looks for files of a certain type in a subdirectory in the servletContext, and then adds the discovered files as basenames in a ReloadableResourceBundleMessageSource.  The class can be used to have a bundle per .jsp file, for example. These bundles are automatically detected and loaded when the application is loaded.  ---- Sample configuration ----                     	      	       ---- Sourcecode ----  package org.springframework.web.context.support;  import java.text.MessageFormat; import java.util.Locale; import java.util.Set; import java.util.Vector;  import javax.servlet.ServletContext;  import org.springframework.context.support.ReloadableResourceBundleMessageSource; import org.springframework.util.StringUtils; import org.springframework.web.context.ServletContextAware;  /** * ReloadableResourceBundleMessageSource that checks a directory * tree structure for files of a certain filetype, and then attempts * to load bundles with the same filename as the discovered files, * but with .properties or .xml file extensions. *  * For example, setting the filetype to "".jsp"" and the directory * to ""/WEB-INF/jsp/"" will make the system look for .jsp files in * that directory. For every discovered .jsp file, the system will attempt * to load a property or XML file with the same filename as the discovered * .jsp file. *  * In practise, the ReloadableResourceBundleMessageSource class will * have a basename property per file found with the specified extension. *  * Discovered files (for example .jsp's) without messageBundles are * simply ignored. *  * The system can therefore detect changes in existing resource bundles * without a restart, but new files can not be detected automatically. *  * A new scan can be forced by calling ""forceNewScan()"". A scan will then * be rerun the next time a key is requested. *  * `@author` Daniel Henriksson, mail@setomidor.com *   */ public class FileFilterResourceBundleMessageSource extends ReloadableResourceBundleMessageSource implements ServletContextAware {      /**      * False if the system should scan for existing files      */     private boolean scanned = false;          /**      * Reference to ServletContext      */     private ServletContext context;          /**      * The directory where the scan starts      */     private String directory;          /**      * The filetype to look for      */     private String filetype;          public void setDirectory(String directory) {     this.directory = directory;     }          public void setServletContext(ServletContext context) {     this.context = context;     }          public void setFiletype(String filetype) {     this.filetype = filetype;     }          @Override     protected String resolveCodeWithoutArguments(String code, Locale locale) {     attemptScan();     return super.resolveCodeWithoutArguments(code, locale);     }          @Override     protected MessageFormat resolveCode(String code, Locale locale) {     attemptScan();     return super.resolveCode(code, locale);     }          @Override     protected PropertiesHolder getMergedProperties(Locale locale) {     attemptScan();     return super.getMergedProperties(locale);     }          /**      * Forces a new scan the next time a key is requested.      */     protected synchronized void forceNewScan() {     scanned = false;     }          /**      * Checks if a scan is required.      */     private synchronized void attemptScan() {     if (scanned) {         return;     }     scanDirectory();     scanned = true;     }          /**      * Scans the directory specified in this bean.      */     private void scanDirectory() {          if (context == null) {         throw new IllegalStateException(""ServletContext not set for ""     	    + this.getClass().getName());     }          Vector baseNames = new Vector();     traverse(directory, baseNames);          String[] generatedBasenames = new String[baseNames.size()];     baseNames.toArray(generatedBasenames);          if (logger.isDebugEnabled()) {         logger.debug(""Runnig with bundles:"");         logger.debug(StringUtils     	    .arrayToCommaDelimitedString(generatedBasenames));     }          super.setBasenames(generatedBasenames);     }          /**      * Traverse an url, and all discovered subpaths of this url recursivly.      */     private void traverse(String url, Vector baseNames) {          if (logger.isDebugEnabled()) {         logger.debug(""Traversing: "" + url);     }          Set paths = context.getResourcePaths(url);          if (paths != null) {         for (Object path : paths) {     	traverse((String) path, baseNames);         }     }          addFile(url, baseNames);     }          /**      * Adds a filename (minus suffix) to the list of baseNames,      * if the file ends with the expected ending.      */     private void addFile(String url, Vector baseNames) {     if (!url.endsWith(filetype)) {         return;     }          baseNames.add(removeFileType(url));          }          /**      * Removes the file ending      */     private String removeFileType(String filename) {     int index = filename.lastIndexOf('.');     if (index == -1) {         throw new IllegalArgumentException(""Filename without '.' ""     	    + ""character: '"" + filename + ""'"");     }          return filename.substring(0, index);     }  }   ---  **Attachments:** - [FileFilterResourceBundleMessageSource.java](https://jira.spring.io/secure/attachment/13191/FileFilterResourceBundleMessageSource.java) (_4.61 kB_)","closed","type: enhancement,","spring-projects-issues","2007-12-11T01:44:07Z","2012-06-19T09:36:28Z"
"","9005","Minor inconsistency in documentation - section 3.2.3.2.3. (instance factory method name) [SPR-4326]","**[Daniel Farinha](https://jira.spring.io/secure/ViewProfile.jspa?name=farinhdf)** opened **[SPR-4326](https://jira.spring.io/browse/SPR-4326?redirect=false)** and commented  In section 3.2.3.2.3. ""Instantiation using an instance factory method"", of the Spring 2.5 reference docs (http://static.springframework.org/spring/docs/2.5.x/reference/beans.html) the attribute factory-method=""createService"" should probably read factory-method=""createInstance"" to keep consistency with the comment at the top of that code snippet.   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-01-12T17:05:50Z","2012-06-19T03:47:23Z"
"","9077","MethodInvokingFactoryBean collection arguments [SPR-4398]","**[dan wilkin](https://jira.spring.io/secure/ViewProfile.jspa?name=deecojkus)** opened **[SPR-4398](https://jira.spring.io/browse/SPR-4398?redirect=false)** and commented  Specific version of 2.5 uncertain.  When configuring a MethodInvokingFactoryBean to invoke a static method with arguments, the usual configuration for lists is non-conventional for typical Spring property configuration.  The following configuration will cause a NoSuchMethodException for the following class when the ""configurator"" bean is retrieved from either a BeanFactory or an ApplicationContext:  public class DoStartup { public static MyConfig loadConfig(final List\ filenames) {  ....  } }  \ \\home.DoStartup\\ \\loadConfig\\ \ \ \baseconfig.xml\ \testconfig.xml\ \ \ \  In fact, Spring looks for DoWork.loadConfig(String, String) when loading this bean.  Also, overloading the static method with a varargs version does not workaround this problem (i.e. public static MyConfig DoWork.loadConfig(final String... configs) { .... } ).  The required (yet incorrect) configuration as determined from the referenced unit test at: http://kickjava.com/src/org/springframework/beans/factory/config/MethodInvokingFactoryBeanTests.java.htm is as follows:  \ \\home.DoStartup\\ \\loadConfig\\ \ \ \ \baseconfig.xml\ \testconfig.xml\ \ \ \ \  This may also be the behavior for non-static method invocations.  If MethodInvokingFactoryBean is supposed to operate this way, please express why.   Thank you.  ~ dan   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-01-26T14:47:57Z","2012-06-19T03:47:21Z"
"","9581","PropertyOverrideConfigurer does not follow bean reference [SPR-4905]","**[Dan Turkenkopf](https://jira.spring.io/secure/ViewProfile.jspa?name=dturkenk)** opened **[SPR-4905](https://jira.spring.io/browse/SPR-4905?redirect=false)** and commented  When PropertyOverrideConfigurer attempts to override a property that is a bean reference, it appears to replace with a String rather than following the bean reference.  I have a jar with an embedded application-context.xml that configures a default delegate for the authorizationChecker bean.  In the application that uses that jar, I'd like to override that default.  The base application-context.xml:  ---  \ \ \ \  \ \  \ \ \  ---  The application specific application-context.xml (uses PropertyOverrideConfigurer)  ---  \ \ \ \ databaseAuthorizationDelegate \ \ \ \  ---  Trying to start the application, I run into this exception:  ---  java.lang.IllegalArgumentException: Cannot convert value of type [java.lang.String] to required type [authorization.AuthorizationDelegate] for property 'delegate': no matching editors or conversion strategy found at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:219) at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:138) at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:386) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1287) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1248)  ---  If I do the same thing but use a PropertyPlaceholderConfigurer and don't specify a default in the jar-enclosed definition, everything seems to work.  Looking at the source, it looks like PropertyPlaceholderConfigurer uses a BeanDefinitionVisitor to resolve the runtime bean references, but the PropertyOverrideConfigurer stores the String value as a property rather than resolving it into a bean reference, even if it's originally defined as a ref.  ---  **Affects:** 2.5.4  1 votes, 5 watchers","closed","status: bulk-closed,","spring-projects-issues","2008-06-10T01:35:45Z","2019-01-13T21:52:13Z"
"","9124","Autowired annotation to affect base class properties [SPR-4446]","**[Dan Luputan](https://jira.spring.io/secure/ViewProfile.jspa?name=dl_dan)** opened **[SPR-4446](https://jira.spring.io/browse/SPR-4446?redirect=false)** and commented  The `@Autowired` annotation is not as flexible as the corresponding schema setting because it can be applied on methods only and not for class. The side effect is that redundant declaration is needed both in xml and class.  When it is useful: Ex. I have a `@Service` controller extending WebServiceGatewaySupport. With `@Autowired` on method level I cannot set the dependencies of the base class. So I am forced to use an external(schema) declaration for my controller: \    ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-10T23:30:31Z","2012-06-19T09:36:14Z"
"","9525","Safari 3.x problem with redirect after file upload [SPR-4849]","**[Dan Hwang](https://jira.spring.io/secure/ViewProfile.jspa?name=dhwang)** opened **[SPR-4849](https://jira.spring.io/browse/SPR-4849?redirect=false)** and commented  Currently, our email form's content-type is set to multipart/form-data. After the form has been posted, we redirect the user to either thank you page or error page.  The safari for some reason sets the content-type to multipart/form-data on the redirect. The server processes the request and sees that Content Length is not set and throws a exception.  This only happens on Mac OS and does not happen for Safari on PC.  ---  **Affects:** 2.0 final  **Attachments:** - [CustomDispatcherServlet.java](https://jira.spring.io/secure/attachment/14084/CustomDispatcherServlet.java) (_1.43 kB_)  **Issue Links:** - #8906 CommonsMultipartResolver should call ServletFileUpload.isMultipartContent(HttpServletRequest)  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-05-22T07:44:23Z","2019-01-13T21:52:26Z"
"","9442","[Osgi] ClassNotFoundException: org.hibernate.loader.custom.CustomQuery -  spring-orm: missing DynamicImport-Package: * in manifest [SPR-4765]","**[Damian Gołda](https://jira.spring.io/secure/ViewProfile.jspa?name=dgolda)** opened **[SPR-4765](https://jira.spring.io/browse/SPR-4765?redirect=false)** and commented  After upgrade from 2.5.2 to 2.5.4 I have ClassNotFoundException: org.hibernate.loader.custom.CustomQuery - see log below. In 2.5.2 there was DynamicImport-Package: * which is no more in 2.5.4.  See #8748  Log (with equinox loader traces):  BundleClassLoader[org.springframework.bundle.spring.orm_2.5.4].loadClass(org.hibernate.loader.custom.CustomQuery) BundleLoader[org.springframework.bundle.spring.orm_2.5.4].loadBundleClass(org.hibernate.loader.custom.CustomQuery) BundleLoader[org.springframework.bundle.spring.orm_2.5.4].findLocalClass(org.hibernate.loader.custom.CustomQuery) BundleClassLoader[org.springframework.bundle.spring.orm_2.5.4].findClass(org.hibernate.loader.custom.CustomQuery) BundleClassLoader[org.springframework.bundle.spring.orm_2.5.4].loadClass(org.hibernate.loader.custom.CustomQuery) failed. java.lang.ClassNotFoundException: org.hibernate.loader.custom.CustomQuery at java.lang.ClassLoader.findClass(ClassLoader.java:358) at java.lang.ClassLoader.loadClass(ClassLoader.java:306) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal(BundleLoader.java:429) at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:369) at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:357) at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:169) at $Proxy67.\(Unknown Source) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(NativeMethod) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:513) at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:588) at org.springframework.orm.hibernate3.HibernateTemplate.createSessionProxy(HibernateTemplate.java:505) at org.springframework.orm.hibernate3.HibernateTemplate.doExecute(HibernateTemplate.java:417) at org.springframework.orm.hibernate3.HibernateTemplate.execute(HibernateTemplate.java:339) at myapp.HibernateObjectStore.getHQLCount(HibernateObjectStore.java:122)  ---  **Affects:** 2.5.4","closed","type: bug,","spring-projects-issues","2008-04-29T21:39:37Z","2019-01-11T17:44:18Z"
"","9392","NullPointerException thrown from RowMapperResultSetExtractor when an empty cursor is returned [SPR-4715]","**[Dagmar Timler](https://jira.spring.io/secure/ViewProfile.jspa?name=dtimler)** opened **[SPR-4715](https://jira.spring.io/browse/SPR-4715?redirect=false)** and commented  When I upgraded to Spring 2.5.2 I have encountered an issue when an Oracle procedure returns a cursor with 0 rows. With version 1.2.6 this was not a problem. I have tested with 2.5.3 and I get the same problem.  java.lang.NullPointerException          at org.springframework.jdbc.core.RowMapperResultSetExtractor.extractData(RowMapperResultSetExtractor.java:91)              at org.springframework.jdbc.core.JdbcTemplate.processResultSet(JdbcTemplate.java:1118)              at org.springframework.jdbc.core.JdbcTemplate.extractOutputParameters(JdbcTemplate.java:1087)              at org.springframework.jdbc.core.JdbcTemplate$5.doInCallableStatement(JdbcTemplate.java:994)              at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:933)              at org.springframework.jdbc.core.JdbcTemplate.call(JdbcTemplate.java:982)              at org.springframework.jdbc.object.StoredProcedure.execute(StoredProcedure.java:113)  \   ---  **Affects:** 2.5.2, 2.5.3","closed","type: bug,","spring-projects-issues","2008-04-16T19:42:06Z","2012-06-19T03:47:24Z"
"","8890","Add support for session scoped JNDI proxies (an sample usage is EJB3 SFSB) [SPR-4212]","**[Cédric Vidal](https://jira.spring.io/secure/ViewProfile.jspa?name=c.vidal)** opened **[SPR-4212](https://jira.spring.io/browse/SPR-4212?redirect=false)** and commented  Hi guys,  I want to inject remote EJB3 Session Beans into some web components. It works fine with remote SLSB but I can't figure out how to inject a remote SFSB.  For the SLSB, I use the following configuration which works fine:        I naturally need my remote SFSB session to last as long as my HTTP session lasts, and the session of the remote SFSB lasts as long as I hold a reference to the EJB proxy obtained from JNDI, so I guess I need to scope my JndiObjectFactoryBean to the web session.  Since, the  element doesn't allow to configure the scope, I use the old fashioned JndiObjectFactoryBean configuration style.                                                          It fails with the following exception:  Exception in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mock' defined in class path resource [com/foo/bar/services/functional/impl/remote-ejb-context.xml]: Cannot resolve reference to bean 'userService' while setting bean property 'userService'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userService': Initialization of bean failed; nested exception is java.lang.IllegalStateException: Cannot create scoped proxy for bean 'scopedTarget.userService': Target type could not be determined at the time of proxy creation. at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:274) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1274) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1042) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:485) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:455) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:413) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:735) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:122) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:66) at com.foo.bar.services.functional.impl.SpringTestFunctionalServiceClient.test(SpringTestFunctionalServiceClient.java:19) at com.foo.bar.services.functional.impl.SpringTestFunctionalServiceClient.main(SpringTestFunctionalServiceClient.java:15) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userService': Initialization of bean failed; nested exception is java.lang.IllegalStateException: Cannot create scoped proxy for bean 'scopedTarget.userService': Target type could not be determined at the time of proxy creation. at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:485) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:455) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:170) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:268) ... 18 more Caused by: java.lang.IllegalStateException: Cannot create scoped proxy for bean 'scopedTarget.userService': Target type could not be determined at the time of proxy creation. at org.springframework.aop.scope.ScopedProxyFactoryBean.setBeanFactory(ScopedProxyFactoryBean.java:94) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1350) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:540) ... 26 more  As far as I understand, this is because, when the ScopedProxyFactoryBean.setBeanFactory is called, JndiObjectFactoryBean's underlying proxy has not been instanciated yet and ScopedProxyFactoryBean's beanFactory cannot figure out what the type of the target bean is. This is normal since we actually don't want the JNDI Proxy to be instanciated at this point. But JndiObjectFactoryBean actually knows what the type of the target bean is, through its proxyInterfaces property, and the AbstractBeanFactory.getType(String name) actually falls back to the JndiObjectFactoryBean.getObjectType method which eventually checks the proxyInterfaces so it should work !  The problem is that when the JndiObjectFactoryBean.getObjectType is called, the proxyInterfaces is null even if it has been properly configured on the BeanDefinition.  I don't know Spring AOP and Spring's lifecycle well enough to figure out what a possible solution might be. I tried moving the setBeanFactory body to the afterPropertiesSet method but it didn't change anything.  This problem might be related to a double proxy issue, which is mentionned here: http://forum.springframework.org/showthread.php?t=32645&highlight=ScopedProxyFactoryBean  Jörg Heinicke mentions that a possible solution might be to move the scoping behavior to an interceptor (or an Advice i guess) so as to avoid the double proxy problem.  Any help would be appreciated,  Kind regards,  Cédric   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-04T07:33:57Z","2012-06-19T09:36:13Z"
"","9565","Lost fields in multipart request [SPR-4889]","**[Cédric Laruelle](https://jira.spring.io/secure/ViewProfile.jspa?name=chtig)** opened **[SPR-4889](https://jira.spring.io/browse/SPR-4889?redirect=false)** and commented  We were using CommonsMultipartResolver to handle form/multipart posts. With this resolver, it actually happens to ""lose"" a field. The behavior is really random, not only depending on the data posted in the form (multiple successive posts do not all cause the problem).  Digging a bit, it seems that the problem happens on the field on which a buffer is cut. To be more precised, we looked in a filter into requestFacade.request.inputBuffer.bb.buff where requestFacade is the request object we have in the filter. We looked into it using reflection.  Here are two examples of what we found in this buffer. With the first one, the field ""signatoryFirstName"" was missing, with the second it was ok.  I'm sorry I do not really have time to try and create a reproductible sample. It is really totally random and I have no clue on what's creating it.  BUFFER1  -----------------------------167452979616721 Content-Disposition: form-data; name=""signatoryLastName""  Mourot -----------------------------167452979616721 Content-Disposition: form-data; name=""signatoryResponsability""  PrÃ©sident -----------------------------167452979616721 Content-Disposition: form-data; name=""signature""; filename="""" Content-Type: application/octet-stream  -----------------------------167452979616721 Content-Disposition: form-data; name=""siteUrl""  www.sportsansfrontieres.org -----------------------------167452979616721 Content-Disposition: form-data; name=""thanksEmail""  Merci de soutenir l'action de Sport Sans FrontiÃ¨res. Votre don permettra Ã  l'association de dÃ©velopper des programmes d'Ã©ducation par le sport pour des populations marginalisÃ©es.  -----------------------------167452979616721 Content-Disposition: form-data; name=""thanksEmailFromAddress""  noreply@aiderdonner.com -----------------------------167452979616721 Content-Disposition: form-data; name=""unescapeDescription""  Sports Sans FrontiÃ¨res est une association de SolidaritÃ© Internationale crÃ©Ã©e en 1999. Elle dÃ©veloppe des programmes dâ€™Ã©ducation par le sport pour des populations marginalisÃ©es Ã  travers le monde (Bolivie, SÃ©nÃ©gal, France, Burundi, Kosovo, Afghanistan, Inde et Sri Lanka). Elle utilise le sport comme outil Ã©ducatif et thÃ©rapeutique. -----------------------------167452979616721 Content-Disposition: form-data; name=""defaultTextSupportPage""  Merci de vous connecter Ã  ma page de collecte!  Je vous invite Ã  faire un don Ã  l'association Sport Sans FrontiÃ¨res. 66% de son montant vous sera remboursÃ© en rÃ©duction d'impÃ´t. C'est simple et 100% sÃ©curisÃ©. Votre don sera reversÃ© par Aiderdonner et un reÃ§u fiscal sera immÃ©diatement mis Ã  votre disposition.  Merci de votre aide! -----------------------------167452979616721 Content-Disposition: form-data; name=""unescapeDescriptionSupportPage""  Sports Sans FrontiÃ¨res est une association de SolidaritÃ© Internationale crÃ©Ã©e en 1999. Elle dÃ©veloppe des programmes dâ€™Ã©ducation par le sport pour des populations marginalisÃ©es Ã  travers le monde (Bolivie, SÃ©nÃ©gal, France, Burundi, Kosovo, Afghanistan, Inde et Sri Lanka). Elle utilise le sport comme outil Ã©ducatif et thÃ©rapeutique. -----------------------------167452979616721 Content-Disposition: form-data; name=""unescapeEntryPageDescription""  \CrÃ©ez gratuitement votre page de collecte en quelques clics !\ \ \DÃ©finissez Ã  quelle occasion vous souhaitez crÃ©er votre page : dÃ©fi sportif, cÃ©lÃ©brationâ€¦\ \Personnalisez votre page en dÃ©crivant votre action de soutien\ \Invitez vos amis Ã  consulter votre page et collectez des dons !\\ \Vos amis donneront via votre page en toute sÃ©curitÃ©. Un reÃ§u fiscal sera mis Ã  leur disposition et le don sera reversÃ© Ã  Sport Sans FrontiÃ¨res.\  -----------------------------167452979616721 Content-Disposition: form-data; name=""logoAsso""; filename="""" Content-Type: application/octet-stream  -----------------------------167452979616721 Content-Disposition: form-data; name=""banner""; filename="""" Content-Type: application/octet-stream  -----------------------------167452979616721 Content-Disposition: form-data; name=""entryPageImageTop""; filename="""" Content-Type: application/octet-stream  -----------------------------167452979616721 Content-Disposition: form-data; name=""entryPageImageBottom""; filename="""" Content-Type: application/octet-stream  -----------------------------167452979616721 Content-Disposition: form-data; name=""url""  sportsansfrontieres -----------------------------167452979616721 Content-Disposition: form-data; name=""submit""  submit -----------------------------167452979616721-- orm-data; name=""numeroAssociationJO""  -----------------------------167452979616721 Content-Disposition: form-data; name=""receiptCity""  Paris -----------------------------167452979616721 Content-Disposition: form-data; name=""signa  BUFFER2 4•""rm-data; name=""signatoryLastName""  Mourot -----------------------------2693239209257 Content-Disposition: form-data; name=""signatoryResponsability""  PrÃ©sident -----------------------------2693239209257 Content-Disposition: form-data; name=""signature""; filename="""" Content-Type: application/octet-stream  -----------------------------2693239209257 Content-Disposition: form-data; name=""siteUrl""  www.sportsansfrontieres.org -----------------------------2693239209257 Content-Disposition: form-data; name=""thanksEmail""  Merci de soutenir l'action de Sport Sans FrontiÃ¨res. Votre don permettra Ã  l'association de dÃ©velopper des programmes d'Ã©ducation par le sport pour des populations marginalisÃ©es.  -----------------------------2693239209257 Content-Disposition: form-data; name=""thanksEmailFromAddress""  noreply@aiderdonner.com -----------------------------2693239209257 Content-Disposition: form-data; name=""unescapeDescription""  Sports Sans FrontiÃ¨res est une association de SolidaritÃ© Internationale crÃ©Ã©e en 1999. Elle dÃ©veloppe des programmes dâ€™Ã©ducation par le sport pour des populations marginalisÃ©es Ã  travers le monde (Bolivie, SÃ©nÃ©gal, France, Burundi, Kosovo, Afghanistan, Inde et Sri Lanka). Elle utilise le sport comme outil Ã©ducatif et thÃ©rapeutique. -----------------------------2693239209257 Content-Disposition: form-data; name=""defaultTextSupportPage""  Merci de vous connecter Ã  ma page de collecte!  Je vous invite Ã  faire un don Ã  l'association Sport Sans FrontiÃ¨res. 66% de son montant vous sera remboursÃ© en rÃ©duction d'impÃ´t. C'est simple et 100% sÃ©curisÃ©. Votre don sera reversÃ© par Aiderdonner et un reÃ§u fiscal sera immÃ©diatement mis Ã  votre disposition.  Merci de votre aide! -----------------------------2693239209257 Content-Disposition: form-data; name=""unescapeDescriptionSupportPage""  Sports Sans FrontiÃ¨res est une association de SolidaritÃ© Internationale crÃ©Ã©e en 1999. Elle dÃ©veloppe des programmes dâ€™Ã©ducation par le sport pour des populations marginalisÃ©es Ã  travers le monde (Bolivie, SÃ©nÃ©gal, France, Burundi, Kosovo, Afghanistan, Inde et Sri Lanka). Elle utilise le sport comme outil Ã©ducatif et thÃ©rapeutique. -----------------------------2693239209257 Content-Disposition: form-data; name=""unescapeEntryPageDescription""  \CrÃ©ez gratuitement votre page de collecte en quelques clics !\ \ \DÃ©finissez Ã  quelle occasion vous souhaitez crÃ©er votre page : dÃ©fi sportif, cÃ©lÃ©brationâ€¦\ \Personnalisez votre page en dÃ©crivant votre action de soutien\ \Invitez vos amis Ã  consulter votre page et collectez des dons !\\ \Vos amis donneront via votre page en toute sÃ©curitÃ©. Un reÃ§u fiscal sera mis Ã  leur disposition et le don sera reversÃ© Ã  Sport Sans FrontiÃ¨res.\  -----------------------------2693239209257 Content-Disposition: form-data; name=""logoAsso""; filename="""" Content-Type: application/octet-stream  -----------------------------2693239209257 Content-Disposition: form-data; name=""banner""; filename="""" Content-Type: application/octet-stream  -----------------------------2693239209257 Content-Disposition: form-data; name=""entryPageImageTop""; filename="""" Content-Type: application/octet-stream  -----------------------------2693239209257 Content-Disposition: form-data; name=""entryPageImageBottom""; filename="""" Content-Type: application/octet-stream  -----------------------------2693239209257 Content-Disposition: form-data; name=""url""  sportsansfrontieres -----------------------------2693239209257 Content-Disposition: form-data; name=""submit""  submit -----------------------------2693239209257-- 2693239209257 Content-Disposition: form-data; name=""numeroAssociationJO""  -----------------------------2693239209257 Content-Disposition: form-data; name=""receiptCity""  Paris -----------------------------2693239209257 Content-Disposition: form-data; name=""signatoryFirstName""  Patrick -----------------------------2693239209257   ---  **Affects:** 2.5.1","closed","in: web,","spring-projects-issues","2008-06-04T01:05:28Z","2019-01-11T19:08:44Z"
"","9324","Support ""request message id as response correlation id"" in MessageListenerAdapter  [SPR-4647]","**[Cyrille Le Clerc](https://jira.spring.io/secure/ViewProfile.jspa?name=cyrille.leclerc@pobox.com)** opened **[SPR-4647](https://jira.spring.io/browse/SPR-4647?redirect=false)** and commented  Enhance MessageListenerAdapter to support ""request message id as response correlation id"" in addition to the current behavior that use ""request correlation id as response correlation id"".  ""Request JMSMessageID as response JMSCorrelationID"" becomes a kind of de-facto standard implementation of the JMS Request/Reply pattern : * Enterprise Integration Patterns : JMS Request/Reply Example [1] * Spring WS's JMS transport (see JmsReceiverConnection) * SOAP over Java Message Service 1.0 RC1 : specification proposal by BEA, IBM, Sonic Software and Tibco [2] * CXF, Axis2, JAXWS-RI, Websphere, etc use it for their JMS transport  [1] http://enterpriseintegrationpatterns.com/RequestReplyJmsExample.html [2] http://mail-archives.apache.org/mod_mbox/ws-axis-dev/200701.mbox/raw/%3C80A43FC052CE3949A327527DCD5D6B27020FB65C@MAIL01.bedford.progress.com%3E/3  ---  **Affects:** 2.5.2  **Attachments:** - [SPR-4647.patch](https://jira.spring.io/secure/attachment/13877/SPR-4647.patch) (_14.19 kB_)  **Issue Links:** - #8017 Implement synchronous request / response logic in JmsTemplate  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-03-31T08:48:31Z","2019-01-11T18:14:11Z"
"","9635","make RedirectView.renderMergedOutputModel not final [SPR-4960]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-4960](https://jira.spring.io/browse/SPR-4960?redirect=false)** and commented  I recently wanted to make a slight change to RedirectView's renderMergedOutputModel implementation. But, since renderMergedOutputModel is final, I had to create a new class that verbatim copied RedirectView's source code, and make my small change in renderMergedOutputModel. It would be far cleaner to have just been able to extend RedirectView.  Can you make renderMergedOutputModel not final?   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-06-25T23:53:01Z","2012-06-19T03:47:50Z"
"","9488","Easy way to have ResourceLoader use Commons.HttpClient for URL resolution [SPR-4812]","**[Craig](https://jira.spring.io/secure/ViewProfile.jspa?name=candrews)** opened **[SPR-4812](https://jira.spring.io/browse/SPR-4812?redirect=false)** and commented  In a web app, it's common to have a class implement ResourceLoaderAware to get the resource loader, then use that to get an http(s) resource. That will return a UrlResource instance, which uses Java's URL classes to resolve the URL and get the data.  Commons HttpClient allows the use of connection pooling, configurable timeouts, and other such features. It would be great if Spring can take advantage of this easily.  Presently, to do this, you need to extend the application context class (for example, XmlWebApplicationContext), override the getResource method to use a class other than UrlResource, and have that class use Commons HttpClient (I'm presently doing this).   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-14T03:55:43Z","2015-09-22T17:34:37Z"
"","9037","Configuration namespace for scheduling [SPR-4359]","**[Craig Walls](https://jira.spring.io/secure/ViewProfile.jspa?name=habuma)** opened **[SPR-4359](https://jira.spring.io/browse/SPR-4359?redirect=false)** and commented  A new configuration namespace that simplifies configuration of scheduled jobs. Includes support for interval-based jobs and cron-based jobs.   ---  **Affects:** 2.5.1  **Attachments:** - [AbstractScheduledJobElementParser.java](https://jira.spring.io/secure/attachment/13291/AbstractScheduledJobElementParser.java) (_5.48 kB_) - [CronJobElementParser.java](https://jira.spring.io/secure/attachment/13292/CronJobElementParser.java) (_2.43 kB_) - [SchedNamespaceHandler.java](https://jira.spring.io/secure/attachment/13293/SchedNamespaceHandler.java) (_1.48 kB_) - [spring-sched-2.5.xsd](https://jira.spring.io/secure/attachment/13294/spring-sched-2.5.xsd) (_4.76 kB_) - [TimerJobElementParser.java](https://jira.spring.io/secure/attachment/13295/TimerJobElementParser.java) (_3.61 kB_)  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1b302b70d0559a3ad98c9f5701d9ffda9e918828, https://github.com/spring-projects/spring-framework/commit/ff36a31874df101f081a65b099de030d7406db0e, https://github.com/spring-projects/spring-framework/commit/3e9b9a8a2a17b3f4173e42113913caeaa4cb064c, https://github.com/spring-projects/spring-framework/commit/0007643af9963deb79657488747b75e54f9d7426  26 votes, 13 watchers","closed","has: votes-jira,","spring-projects-issues","2008-01-19T15:40:50Z","2012-06-19T03:47:00Z"
"","9428","Spring 2.5.3 does not work with ehcache 1.30 or 1.41 [SPR-4751]","**[Craig newlander](https://jira.spring.io/secure/ViewProfile.jspa?name=cnewlander)** opened **[SPR-4751](https://jira.spring.io/browse/SPR-4751?redirect=false)** and commented  The error below is received when using the following spring configuration.           	     		/WEB-INF/ehcache.xml     	                    	     		     	     	     		METHOD_ARG_CACHE     	       org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'cacheManager' defined in ServletContext resource [/WEB-INF/applicationContext.xml]: Invocation of init method failed; nested exception is java.lang.IllegalAccessError: tried to access method net.sf.ehcache.CacheManager.\(Ljava/io/InputStream;)V from class org.springframework.cache.ehcache.EhCacheManagerFactoryBean at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1336) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:471) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:217) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)   ---  **Affects:** 2.0.8, 2.5.3","closed","in: core,","spring-projects-issues","2008-04-24T06:58:00Z","2019-01-11T17:59:55Z"
"","9791","SQLErrorCodesFactory should use its classloader when loading the default codes [SPR-5118]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5118](https://jira.spring.io/browse/SPR-5118?redirect=false)** and commented  SQLErrorCodesFactory uses a ClassPathResource (which in this case relies on the TCCL) to load both custom and default codes. Since the default codes are specified in the Spring jar, the factory could use its classloader to load these resources and then use the client classloader (if available instead of the TCCL) to load the custom codes. In OSGi this makes a difference as it doesn't require users to import various jdbc packages. (see http://tinyurl.com/5cle3n).   ---  **Affects:** 2.5.5  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-26T18:30:59Z","2012-06-19T03:47:13Z"
"","9711","org.hibernate.jdbc.ConnectionWrapper visibility and OSGi [SPR-5036]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-5036](https://jira.spring.io/browse/SPR-5036?redirect=false)** and commented  The following bug has been reported in the Spring-DM mailing list (sorry for the nasty copy paste).  This is quite strange since Hibernate classloader is used for creating the session proxy so the ConnectionWrapper class should be visible. I assume the problem is fairly simple but deeply nested inside the stack.  The original post is here: http://tinyurl.com/6jbm88  > Caused by: > org.springframework.transaction.CannotCreateTransactionException: > Could not open Hibernate Session for transaction; nested except > ion is java.lang.IllegalArgumentException: interface > org.hibernate.jdbc.ConnectionWrapper is not visible from class loader > at > org.springframework.orm.hibernate3.HibernateTransactionManager.doBegin(HibernateTransactionManager.java: > 599) > at > org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java: > 377) > at sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source) > at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) > at java.lang.reflect.Method.invoke(Unknown Source) > at > org.springframework.osgi.service.importer.internal.aop.ServiceInvoker.doInvoke(ServiceInvoker.java: > 59) > at > org.springframework.osgi.service.importer.internal.aop.ServiceInvoker.invoke(ServiceInvoker.java: > 67) > at > org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java: > 171) > at > org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java: > 131) > at > org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java: > 119) > at > org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java: > 171) > at > org.springframework.osgi.service.importer.internal.aop.ServiceTCCLInterceptor.invoke(ServiceTCCLInterceptor.java: > 36) > at > org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java: > 171) > at > org.springframework.osgi.service.importer.support.LocalBundleContextAdvice.invoke(LocalBundleContextAdvice.java: > 59) > at > org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java: > 171) > at > org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java: > 131) > at > org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java: > 119) > at > org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java: > 171) > at > org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java: > 204) > at $Proxy120.getTransaction(Unknown Source) > at > org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java: > 263) > at > org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java: > 101) > at > org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java: > 171) > at > org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java: > 204) > at $Proxy124.findLovNodeByName(Unknown Source) > at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) > at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) > at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) > at java.lang.reflect.Method.invoke(Unknown Source) > at > org.springframework.osgi.service.importer.internal.aop.ServiceInvoker.doInvoke(ServiceInvoker.java: > 59) > at > org.springframework.osgi.service.importer.internal.aop.ServiceInvoker.invoke(ServiceInvoker.java: > 67) > at > org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java: > 171) > at > org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java: > 131) > at > org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java: > 119) > at > org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java: > 171) > at > org.springframework.osgi.service.importer.internal.aop.ServiceTCCLInterceptor.invoke(ServiceTCCLInterceptor.java: > 36) > at > org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java: > 171) > at > org.springframework.osgi.service.importer.support.LocalBundleContextAdvice.invoke(LocalBundleContextAdvice.java: > 59) > at > org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java: > 171) > at > org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java: > 131) > at > org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java: > 119) > at > org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java: > 171) > at > org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java: > 204) > at $Proxy67.findLovNodeByName(Unknown Source)    ---  **Affects:** 2.5.5","closed","status: declined,","spring-projects-issues","2008-07-24T03:01:12Z","2019-01-12T16:28:06Z"
"","9644","replace non-osgi maven dependencies with BRITS artifacts [SPR-4969]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-4969](https://jira.spring.io/browse/SPR-4969?redirect=false)** and commented  While the code has been osgified the dependencies still refer to the Maven artifacts which are not osgi enabled. Two commons cases are commons-logging and aopalliance. In Spring-DM for example, we need to add exclusion clauses when importing springframework modules to remove these dependencies and only pull in the osgi ones: \ \org.springframework\ \spring-core\ \${spring.maven.artifact.version}\ \       \ \commons-logging\ \commons-logging\ \ \         \ \ \org.slf4j\ \com.springsource.slf4j.org.apache.commons.logging\ \${slf4j.version}\ \provided\ \ \ \org.slf4j\ \com.springsource.slf4j.api\ \${slf4j.version}\ \provided\ \  I propose to update the existing maven artifacts so that proper osgi dependencies are used instead. Note that the dependencies themselves need to be JDK 1.4 compatible as well.   ---  **Affects:** 2.5.5  **Issue Links:** - [OSGI-550](https://jira.spring.io/browse/OSGI-550) 1.1 RC1 uses spring 2.5.4  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-06-30T01:19:29Z","2012-06-19T09:36:31Z"
"","9634","classpath scanning logging [SPR-4959]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-4959](https://jira.spring.io/browse/SPR-4959?redirect=false)** and commented  Currently there is no logging for classpath scanning which makes things hard to debug in new environments (such as OSGi). Things would be easier if there would some information (on TRACE level even) from ClassPathBeanDefinitionScanner indicating what classes are being analyzed and what's the result - this at least would make it clear what components are scanned in the first place and then which ones are filtered out. Thanks,   ---  **Affects:** 2.5.5  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-06-25T18:53:55Z","2012-06-19T03:46:44Z"
"","9599","NPE in AbstractCachingLabeledEnumResolver [SPR-4924]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-4924](https://jira.spring.io/browse/SPR-4924?redirect=false)** and commented  Probably the error is caused by the usage of a WeakHashMap..  Below is the stacktrace:  java.lang.NullPointerException at org.springframework.core.enums.AbstractCachingLabeledEnumResolver.get LabeledEnumByLabel(AbstractCachingLabeledEnumResolver.java:105) at org.springframework.osgi.config.AbstractReferenceDefinitionParser.pro cessCardinalityString(AbstractReferenceDefinitionParser.java:300) at org.springframework.osgi.config.AbstractReferenceDefinitionParser.det ermineCardinality(AbstractReferenceDefinitionParser.java:288) at org.springframework.osgi.config.AbstractReferenceDefinitionParser.app lyDefaultCardinality(AbstractReferenceDefinitionParser.java:311) at org.springframework.osgi.config.AbstractReferenceDefinitionParser.doP arse(AbstractReferenceDefinitionParser.java:223) at org.springframework.osgi.config.AbstractReferenceDefinitionParser.par seInternal(AbstractReferenceDefinitionParser.java:181) at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.pa rse(AbstractBeanDefinitionParser.java:56) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(N amespaceHandlerSupport.java:69)  ---  **Affects:** 2.5.4  **Issue Links:** - #9598 NPE in AbstractCachingLabeledEnumResolver during namespace parsing (_**""duplicates""**_)","closed","in: core,","spring-projects-issues","2008-06-16T00:32:14Z","2019-01-12T16:50:50Z"
"","9479","cycles between various modules manifests [SPR-4802]","**[Costin Leau](https://jira.spring.io/secure/ViewProfile.jspa?name=costin)** opened **[SPR-4802](https://jira.spring.io/browse/SPR-4802?redirect=false)** and commented  As a user reported on the forums, the distribution bundles contains cycles between their osgi manifest which caused tools such as Eclipse PDE to not compile or deploy the projects. See: http://forum.springframework.org/showthread.php?t=54115 Ideally, the cycles should be removed probably by using finer-grained archives.  ---  **Affects:** 2.5.4  **Issue Links:** - #9611 Cyclical dependency between orm and context (_**""is duplicated by""**_)  8 votes, 6 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-12T20:01:19Z","2019-01-11T19:03:19Z"
"","9295","SimpleJdbcCall is not building the right call string (misses one parameter) when calling an oracle function returning a ref cursor [SPR-4618]","**[Costa Basil](https://jira.spring.io/secure/ViewProfile.jspa?name=costa_basil)** opened **[SPR-4618](https://jira.spring.io/browse/SPR-4618?redirect=false)** and commented  I created the following oracle function:  CREATE OR REPLACE FUNCTION test_function (p_p1 VARCHAR2, p_p2 VARCHAR2, p_p3 VARCHAR2) RETURN SYS_REFCURSOR AS l_result SYS_REFCURSOR; BEGIN  OPEN l_result FOR SELECT p_p1 || ' ' ||  p_p2 || ' ' || p_p3; FROM sys.dual; RETURN l_result;  END;  Now here is the java code:  public static void main(String[] args) throws Exception { oracle.jdbc.pool.OracleDataSource ods = new oracle.jdbc.pool.OracleDataSource(); // replace the settings below in the url with the ones specific to your environment ods.setURL(""jdbc:oracle:thin:\/\@\:1521:\"");  //    DefaultPlSqlProcedureMetaDataProvider metaDataProvider = new DefaultPlSqlProcedureMetaDataProvider(ods); //    System.out.printf(""List %s"", String.valueOf( //            metaDataProvider.getProcedureParameters(""utils_pkg"", ""get_procedure_parameters"", null)));      SimpleJdbcCall procedureParametersCall = new SimpleJdbcCall(ods);     procedureParametersCall              .withFunctionName(""test_function"")              .withoutProcedureColumnMetaDataAccess()              .declareParameters(new SqlReturnResultSet(""return"", new RowMapper()                                 {                                   public Object mapRow(ResultSet rs, int rowNum)                                           throws SQLException                                   {                                     return rs.getString(1);                                   }                                 })                                 , new SqlParameter(""p1"", Types.VARCHAR)                               , new SqlParameter(""p2"", Types.VARCHAR)                               , new SqlParameter(""p3"", Types.VARCHAR));               Map result = procedureParametersCall.execute(new MapSqlParameterSource()             .addValue(""p1"", ""p1value"")             .addValue(""p2"", ""p2value"")             .addValue(""p3"", ""p3value""));     System.out.println(result);  }  The exception that I get is below. Please note the call string. I think the bug is in the CallMetaDataContext.java, createCallString. In the loop at line 542 parameterCount is not incremented if parameter.isResultsParameter() is true.  Exception in thread ""Main Thread"" org.springframework.jdbc.BadSqlGrammarException: CallableStatementCallback; bad SQL grammar [{? = call TEST_FUNCTION(?, ?)}]; nested exception is java.sql.SQLException: ORA-06550: line 1, column 13: PLS-00905: object TEST.TEST_FUNCTION is invalid ORA-06550: line 1, column 7: PL/SQL: Statement ignored      at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.translate(SQLStateSQLExceptionTranslator.java:111)     at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.translate(SQLErrorCodeSQLExceptionTranslator.java:322)     at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:949)     at org.springframework.jdbc.core.JdbcTemplate.call(JdbcTemplate.java:982)     at org.springframework.jdbc.core.simple.AbstractJdbcCall.executeCallInternal(AbstractJdbcCall.java:362)     at org.springframework.jdbc.core.simple.AbstractJdbcCall.doExecute(AbstractJdbcCall.java:336)     at org.springframework.jdbc.core.simple.SimpleJdbcCall.execute(SimpleJdbcCall.java:166)     at org.bchousing.common.jdbc.spring.DefaultPlSqlProcedureMetaDataProvider.main(DefaultPlSqlProcedureMetaDataProvider.java:194)  Caused by: java.sql.SQLException: ORA-06550: line 1, column 13: PLS-00905: object BOGDA.TEST_FUNCTION is invalid ORA-06550: line 1, column 7: PL/SQL: Statement ignored      at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:125)     at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:305)     at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:272)     at oracle.jdbc.driver.T4C8Oall.receive(T4C8Oall.java:626)     at oracle.jdbc.driver.T4CCallableStatement.doOall8(T4CCallableStatement.java:184)     at oracle.jdbc.driver.T4CCallableStatement.execute_for_rows(T4CCallableStatement.java:873)     at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1090)     at oracle.jdbc.driver.OraclePreparedStatement.executeInternal(OraclePreparedStatement.java:2905)     at oracle.jdbc.driver.OraclePreparedStatement.execute(OraclePreparedStatement.java:2996)     at oracle.jdbc.driver.OracleCallableStatement.execute(OracleCallableStatement.java:4120)     at org.springframework.jdbc.core.JdbcTemplate$5.doInCallableStatement(JdbcTemplate.java:984)     at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:933)     ... 5 more  Now, if I use this call instead - this time I used SqlOutParameter instead of  SqlReturnResultSet - it works fine:  public static void main(String[] args) throws Exception { oracle.jdbc.pool.OracleDataSource ods = new oracle.jdbc.pool.OracleDataSource(); ods.setURL(""jdbc:oracle:thin:bogda/sara@genie01:1521:orcl"");  //    DefaultPlSqlProcedureMetaDataProvider metaDataProvider = new DefaultPlSqlProcedureMetaDataProvider(ods); //    System.out.printf(""List %s"", String.valueOf( //            metaDataProvider.getProcedureParameters(""utils_pkg"", ""get_procedure_parameters"", null)));      SimpleJdbcCall procedureParametersCall = new SimpleJdbcCall(ods);     procedureParametersCall              .withFunctionName(""test_function"")              .withoutProcedureColumnMetaDataAccess()              .declareParameters(new SqlOutParameter(""return"", OracleTypes.CURSOR, new RowMapper()                                 {                                   public Object mapRow(ResultSet rs, int rowNum)                                           throws SQLException                                   {                                     return rs.getString(1);                                   }                                 })                                 , new SqlParameter(""p1"", Types.VARCHAR)                               , new SqlParameter(""p2"", Types.VARCHAR)                               , new SqlParameter(""p3"", Types.VARCHAR));               Map result = procedureParametersCall.execute(new MapSqlParameterSource()             .addValue(""p1"", ""p1value"")             .addValue(""p2"", ""p2value"")             .addValue(""p3"", ""p3value""));     System.out.println(result);  }  I am not too sure what is the semantics of the SqlReturnResultSet parameter, but I thought it can be used to for returning resultsets or cursors.   ---  **Affects:** 2.5.2","closed","in: core,","spring-projects-issues","2008-03-23T19:38:36Z","2019-01-12T16:28:25Z"
"","9070","Doc: Support for dynamic job scheduling with Quartz [SPR-4391]","**[Colbert Philippe](https://jira.spring.io/secure/ViewProfile.jspa?name=colbert_philippe)** opened **[SPR-4391](https://jira.spring.io/browse/SPR-4391?redirect=false)** and commented  My application uses Spring Framework and also Quartz Timer Scheduler framework.  I find the current implementation of Quartz under Spring is poor and assumes static job scheduling.   My application uses dynamic job scheduling, meaning that the time and duration of the jobs are not known prior to starting the program.   The times and durations of jobs are known only on the fly during the execution of the program.  Furthermore, I find that the current implement of Quartz under Spring kills and eliminates many of the powerful features of Quartz such as JobFactory and many other concepts.   It would be nice to have an interfacing with Quartz that preserves and respects all these powerful features.  I strongly suggest that the design of the interfacing with Quartz be reviewed and changes be made to accomodate Quartz better.   Additionally, it is not mentioned in the documentation whether one can use Quartz directly, thus bypassing the Spring interface to Quartz.   Some precisions on this topic would be appreciated.   ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2008-01-25T03:43:29Z","2015-09-22T18:20:30Z"
"","9675","EhCacheFactoryBean should use CacheManager#getEhcache(String) instead of CacheManager#getCache(String) [SPR-5000]","**[Clemens Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=clemens%20schneider)** opened **[SPR-5000](https://jira.spring.io/browse/SPR-5000?redirect=false)** and commented  EhCacheFactoryBean uses CacheManager#getCache(String) to get hold of a Cache instance.      Cache rawCache = null;     if (this.cacheManager.cacheExists(this.cacheName)) {         if (logger.isDebugEnabled()) {     	logger.debug(""Using existing EHCache cache region '"" + this.cacheName + ""'"");     }     rawCache = this.cacheManager.getCache(this.cacheName);     }  When a CacheExceptionHandler is configured via ehcache-config.xml as decorator for a cache, CacheManager#cacheExists(String) will return true, but CacheManager#getCache(String) will return null. The javadoc of CacheManager#getCache(String) says:  ""Returns a concrete implementation of Cache, it it is available in the CacheManager. Consider using getEhcache(String name) instead, which will return decorated caches that are registered.""  Through calling CacheManager#getEhcache(String) you get hold of every registered cache, whilst through CacheManager#getCache(String) you get the undecorated caches only.  Modified code would be  Ehcache rawCache = null; if (this.cacheManager.cacheExists(this.cacheName)) { if (logger.isDebugEnabled()) { logger.debug(""Using existing EHCache cache region '"" + this.cacheName + ""'""); } rawCache = this.cacheManager.getEhcache(this.cacheName); }   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-11T03:10:28Z","2012-06-19T03:46:52Z"
"","9319","PropertyPlaceholderConfigurer should support nested keys in placeholder key [SPR-4642]","**[clay@izones.net](https://jira.spring.io/secure/ViewProfile.jspa?name=spoticus1000)** opened **[SPR-4642](https://jira.spring.io/browse/SPR-4642?redirect=false)** and commented  Example properties:  environment=workstation bo.username=${${environment}.bo.username} workstation.bo.username=webservice  In method parseStringValue, it starts by searching for ""${"" then for ""}"" and using those indexes as the boundary for the recursive replacement parameter, which in this example, becomes ""${environment"".  My quick-fix will be to extend the class and override the method and change the logic to search the string backwards for the start prefix then forward from there for the closing suffix.  I can send the temp fix class is you want, (we're not allowed to change open source).  ---  **Affects:** 2.5.2  **Issue Links:** - #6073 Enhance the PropertyPlaceholderConfigurer to support nested properties. (_**""is duplicated by""**_)","closed","type: enhancement,","spring-projects-issues","2008-03-29T14:07:02Z","2019-01-11T18:14:19Z"
"","9158","Tomcat Hanging with ""Cancelling Timer"" [SPR-4481]","**[Chuck Irvine](https://jira.spring.io/secure/ViewProfile.jspa?name=chuckatembarq)** opened **[SPR-4481](https://jira.spring.io/browse/SPR-4481?redirect=false)** and commented  I'm using the Tomcat Manager WebApp to deploy and undeploy my Spring based application. Frequently, after doing an undeploy using the Tomcat manager, I am not able to do a successful redeployment. Both the undeployment and redeployment seem to work ok from the from the Tomcat GUI. However my WebApp fails to load and the last log message I see in my Spring logs is:  ---  [ INFO] 01/07/08 11:42:51 :      Cancelling Timer  ---  At this point, my only option seems to be bouncing Tomcat, which works around the stuck timer. I've posted an article to the forum and no one had any  ideas that effectively worked around the problem.  ---  **Affects:** 2.0.8, 2.5.1","closed","","spring-projects-issues","2008-02-19T04:45:06Z","2019-01-13T21:53:24Z"
"","9185","Better support of CLOB when using NamedParameterJdbcTemplate and MapSqlParameterSource [SPR-4508]","**[Chua Chee Seng](https://jira.spring.io/secure/ViewProfile.jspa?name=quai83)** opened **[SPR-4508](https://jira.spring.io/browse/SPR-4508?redirect=false)** and commented  I am having problem to insert CLOB data using NamedParameterJdbcTemplate with Oracle.  DB table schema :- create table TestInsertClob ( id varchar(13) not null, long_text clob not null );  And the following test program failed:-  DriverManagerDataSource dataSource = new DriverManagerDataSource(); dataSource.setDriverClassName(""oracle.jdbc.driver. OracleDriver""); dataSource.setUrl(""jdbcracle:thin:`@localhost`:152 1:dbname""); dataSource.setUsername(""xxxx""); dataSource.setPassword(""xxxx"");  NamedParameterJdbcTemplate template = new NamedParameterJdbcTemplate(dataSource); MapSqlParameterSource paramSource = new MapSqlParameterSource(); paramSource.addValue(""id"", ""1"", Types.VARCHAR); paramSource.addValue(""long_text"", ""This is a very long text"", Types.CLOB);  template.update(""insert into TestInsertClob (id, long_text) values (:id, :long_text)"", paramSource);  The error track when runs :  Exception in thread ""main"" java.lang.ClassCastException: java.lang.String cannot be cast to oracle.sql.CLOB at oracle.jdbc.driver.OraclePreparedStatement.setObje ctCritical(OraclePreparedStatement.java:7898) at oracle.jdbc.driver.OraclePreparedStatement.setObje ctInternal(OraclePreparedStatement.java:7511) at oracle.jdbc.driver.OraclePreparedStatement.setObje ct(OraclePreparedStatement.java:7984) at oracle.jdbc.driver.OraclePreparedStatementWrapper. setObject(OraclePreparedStatementWrapper.java:237) at org.springframework.jdbc.core.StatementCreatorUtil s.setParameterValueInternal(StatementCreatorUtils. java:271) at org.springframework.jdbc.core.StatementCreatorUtil s.setParameterValue(StatementCreatorUtils.java:71) at org.springframework.jdbc.core.PreparedStatementCre atorFactory$PreparedStatementCreatorImpl.setValues (PreparedStatementCreatorFactory.java:282) at org.springframework.jdbc.core.PreparedStatementCre atorFactory$PreparedStatementCreatorImpl.createPre paredStatement(PreparedStatementCreatorFactory.jav a:239) at org.springframework.jdbc.core.JdbcTemplate.execute (JdbcTemplate.java:560) at org.springframework.jdbc.core.JdbcTemplate.update( JdbcTemplate.java:767) at org.springframework.jdbc.core.JdbcTemplate.update( JdbcTemplate.java:790) at org.springframework.jdbc.core.namedparam.NamedPara meterJdbcTemplate.update(NamedParameterJdbcTemplat e.java:214) at com.test.TestInsertClob.main(TestInsertClob.java:2 5)  This code works if using Apache Derby database. If we change to use:-  paramSource.addValue(""long_text"", ""This is a very long text"", Types.VARCHAR);  in Oracle works as well.  After some investigation to org.springframework.jdbc.core.StatementCreatorUtil s.setParameterValueInternal() method, it seems like CLOB is not handled and is delegated to setObject() of PreparedStatement, which means it will depends on the driver implementation of setObject() to do the conversion. I believe the Oracle driver implementation of setObject() is trying to cast the passed in String to CLOB type and raised the above exception.  Just my little suggestion, in setParameterValueInternal() method, would it make sense to rewrite the following:-  ... else if (sqlType == Types.VARCHAR) { ps.setString(paramIndex, inValue.toString()); } ...  to :-  ... else if (sqlType == Types.VARCHAR || sqlType == Types.CLOB) { ps.setString(paramIndex, inValue.toString()); } ...  So that for CLOB it is delegate to setString() instead of setObject(). I am not sure if it's the correct way of setting CLOB with setString(), or setCharacterStream() or setClob() is the better choice?  Thanks.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-26T20:27:41Z","2012-06-19T03:47:22Z"
"","9394","Either comment or code in LazyConnectionDataSourceProxy is wrong... [SPR-4717]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-4717](https://jira.spring.io/browse/SPR-4717?redirect=false)** and commented  Here's some code from LazyConnectionDataSourceProxy.LazyConnectionInvocationHandler  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { // Invocation on ConnectionProxy interface coming in...      if (method.getName().equals(""equals"")) {     	// We must avoid fetching a target Connection for ""equals"".     	// Only consider equal when proxies are identical.     	return (proxy == args[0] ? Boolean.TRUE : Boolean.FALSE);     }     else if (method.getName().equals(""hashCode"")) {     	// We must avoid fetching a target Connection for ""hashCode"",     	// and we must return the same hash code even when the target     	// Connection has been fetched: use hashCode of Connection proxy.     	return new Integer(hashCode());     }  The comment says ""use hashCode of Connection proxy"", but the code uses the hashCode of the InvocationHandler. This means that equals() and hashCode() are inconsistent. In this case, this can never lead to problems, but for the sake of correctness (if just of the comment), or for the sake of very picky people like me, the line  return new Integer(hashCode());  should be changed to  return new Integer(System.identityHashCode(proxy));    --- No further details from [SPR-4717](https://jira.spring.io/browse/SPR-4717?redirect=false)","closed","in: core,","spring-projects-issues","2008-04-17T02:05:57Z","2012-06-19T03:47:11Z"
"","9259","ClassPathResource.getURL() and getFile() should work for non-existing resources [SPR-4582]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-4582](https://jira.spring.io/browse/SPR-4582?redirect=false)** and commented  Most implementations of Resource.getFile() don't care if the file exists or not, only ClassPathResource.getFile() throws an exception if the file does not exist. (I guess that behavior was introduced because Class.getResource() returns null for non-existing resources.)  It would probably many make things easier if ClassPathResource.getFile() also worked for non-existing files. It would also make the implementations of Resource.getFile() more consistent.  The main problem with this change would probably be backward compatibility. That may not be a big issue - the change would only cause problems for code that expects that ClassPathResource.getFile() throws an exception if the file does not exist. Otherwise, everything that worked before will still work, but some additional uses will become possible.   --- No further details from [SPR-4582](https://jira.spring.io/browse/SPR-4582?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-03-13T11:22:39Z","2019-01-11T17:16:38Z"
"","9258","FileEditor not backward compatible with 2.0.x version vis-a-vis relative servlet context paths [SPR-4581]","**[Christopher Sahnwaldt](https://jira.spring.io/secure/ViewProfile.jspa?name=jcsahnwaldt)** opened **[SPR-4581](https://jira.spring.io/browse/SPR-4581?redirect=false)** and commented  The fix for #7524 leads to new problems...  I'm using Spring in a webapp that generates some files into a directory in WEB-INF. This directory usually does not exist when the webapp starts. In Spring 2.0.x, I could configure that directory like this, where `targetDir` is a propery of type `java.io.File`:  ```  ```  A ServletContextResource was created for this path, and ServletContextResource.getFile() resolved the path relative to the webapp directory, no matter if the directory existed or not.  In Spring 2.5.x, this has changed: if `WEB-INF/generated` does not exist, FileEditor treats it as a path relative to the current directory, which depends on how the webapp container was started and is generally unpredictable.  This makes it extremely cumbersome if not impossible to reference directories inside a webapp that may not exist on startup.  ---  **Affects:** 2.5 RC1, 2.5 RC2, 2.5 final, 2.5.1, 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-13T10:09:29Z","2019-01-11T17:16:36Z"
"","9763","runningAllowed() in AbstractJmsListeningContainer not called once this method returned false [SPR-5090]","**[christophe verhue](https://jira.spring.io/secure/ViewProfile.jspa?name=christophe.verhue)** opened **[SPR-5090](https://jira.spring.io/browse/SPR-5090?redirect=false)** and commented  MyDefaultMessageListenerContainer extends DefaultMessageListenerContainer.  MyDefaultMessageListenerContainer overrides the runningAllowed() method it inherits from AbstractJmsListeningContainer.  As long as the runningAllowed() in MyDefaultMessageListenerContainer returns true, the runningAllowed() method is called regularly.  Once the runningAllowed() in MyDefaultMessageListenerContainer returns false, that runningAllowed() method is not called anymore.  (It seems like the polling feature of the container disappears as of the runningAllowed() method returns false).   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-08-18T00:20:20Z","2015-09-22T17:34:32Z"
"","8934","mark VelocityEngineUtils.mergeTemplate method without the encoding parameter deprecated [SPR-4256]","**[christophe blin](https://jira.spring.io/secure/ViewProfile.jspa?name=cblin)** opened **[SPR-4256](https://jira.spring.io/browse/SPR-4256?redirect=false)** and commented  the velocity project marked the method mergeTemplate that do not  take the encoding parameter as deprecated but the VelocityEngineUtils did not catch up   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-13T21:46:38Z","2012-06-18T12:44:54Z"
"","9856","JMSTemplate should support setting QoS settings on send [SPR-5183]","**[Christian Schneider](https://jira.spring.io/secure/ViewProfile.jspa?name=chris@die-schneider.net)** opened **[SPR-5183](https://jira.spring.io/browse/SPR-5183?redirect=false)** and commented  JMSTemplate currently supports QoS settings like: deliveryMode, priority, timeToLive  While this is ok if you want to set these only once it makes some problems if you want to set them new for each message. If you set the properties before doing the send the code is not threadsafe anymore. See http://fisheye6.atlassian.com/browse/cxf/trunk/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSDestination.java?r=700236#l251  I have currently ignored the threading problem but I have to correct this before the new CXF version is released.  So what I would like to have is a send method that allows setting the QoS stuff like in producer. Alternatively I would be happy if there is some easy workaround.  This is the code that decides about QoS  protected void doSend(MessageProducer producer, Message message) throws JMSException { if (isExplicitQosEnabled()) { producer.send(message, getDeliveryMode(), getPriority(), getTimeToLive()); } else { producer.send(message); } }   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-09-29T09:27:38Z","2019-08-12T10:47:17Z"
"","9280","imports in InventoryControllerTests.java (section 6.2) not complete [SPR-4603]","**[Christian Delfs](https://jira.spring.io/secure/ViewProfile.jspa?name=cdelfs)** opened **[SPR-4603](https://jira.spring.io/browse/SPR-4603?redirect=false)** and commented  Hi, in section 6.2 of MVC-tutorial the import statements are not complete for InventoryControllerTests.java . I needed to include  import java.util.Map; import java.util.ArrayList;  instead of  (only):  import java.util.Map;    ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-03-19T05:05:33Z","2012-06-19T03:46:52Z"
"","9277","MVC step-by-step tutorial: JdbcProductDaoTests.java in section 5.5 does not work [SPR-4600]","**[Christian Delfs](https://jira.spring.io/secure/ViewProfile.jspa?name=cdelfs)** opened **[SPR-4600](https://jira.spring.io/browse/SPR-4600?redirect=false)** and commented  JdbcProductDaoTests.java from section 5.5 could not be compiled without errors, e.g. AbstractTransactionalDataSourceSpringContextTests was not accepted by the compiler.  I needed to include  import java.util.List; import org.springframework.test.AbstractTransactionalDataSourceSpringContextTests; import springapp.domain.Product;  in the beginning, instead of: (only):  import java.util.List;    ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-03-19T01:39:08Z","2012-06-19T03:47:00Z"
"","9628","Support escaping placeholder prefix in property placeholders [SPR-4953]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4953](https://jira.spring.io/browse/SPR-4953?redirect=false)** and commented  There is presently no way to inject a placeholder expression (`${...}`) that won't be picked up by `PropertyPlaceholderConfigurer`. Ideally we should be able to inject a string that contains `${...}` for later use in its target bean without involvement from `PropertyPlaceholderConfigurer`.  Perhaps a simple escape mechanism using the conventional backslash, such as `""The current value is \\${...}""` would suffice.  ---  **Affects:** 2.5.4, 2.5.5  11 votes, 5 watchers","open","status: pending-design-work,","spring-projects-issues","2008-06-25T09:07:48Z","2022-06-22T10:22:01Z"
"","9195","@RequestMapping methods returning null have an implicit ModelAndView created [SPR-4518]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4518](https://jira.spring.io/browse/SPR-4518?redirect=false)** and commented  It isn't clear that this is necessarily a bug.  When annotating a 'void' method with `@RequestParam`, and that method does not take the Response (or any output construct therein, i.e. PrintWriter),  an implicit ModelAndView is created in AnnotationMethodHandlerAdapter.  In the case where there was no intent to have a MAV returned (and hence no view resolvers were configured), this results in a circular view path error (stack trace below).  The method definition looks like: `@Controller` `@RequestMethod`(value=""/BCMinistryBillingServer/*,method=RequestMethod.POST) public class TestMethod { `@RequestParam` public void handleBill( `@RequestParam`(""data"") String data ) { // some code here } }  In this case, there is no return value and the method does not write anything back - nor is anything expected back in the response body (it is a system interface).  09:04:19,990 DEBUG [org.springframework.beans.factory.support.DefaultListableBeanFactory] Invoking afterPropertiesSet() on bean with name 'handleBill' 09:04:19,990 DEBUG [org.springframework.web.servlet.view.InternalResourceViewResolver] Cached view [handleBill] 09:04:19,990 DEBUG [org.springframework.web.servlet.DispatcherServlet] Rendering view [org.springframework.web.servlet.view.JstlView: name 'handleBill'; URL [handleBill]] in DispatcherServlet with name 'springDispatcherServlet' 09:04:19,990 DEBUG [org.springframework.web.servlet.view.JstlView] Rendering view with name 'handleBill' with model {} and static attributes {} 09:04:20,006 DEBUG [org.springframework.web.servlet.DispatcherServlet] Cleared thread-bound request context: org.apache.catalina.connector.RequestFacade@ee50b4 09:04:20,006 DEBUG [org.springframework.web.servlet.DispatcherServlet] Could not complete request 09:04:20,022 ERROR [[springDispatcherServlet]] Servlet.service() for servlet springDispatcherServlet threw exception javax.servlet.ServletException: Circular view path [handleBill]: would dispatch back to the current handler URL [/BCMinistryBillingServer/handleBill] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.) at org.springframework.web.servlet.view.InternalResourceView.prepareForRendering(InternalResourceView.java:261) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:192) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:252) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1162) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:900) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:808) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:523) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:463)    ---  **Affects:** 2.5.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6fbd1984208be1810b9e3a8388431a0296ef6391  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-02-28T04:36:02Z","2012-06-19T03:47:12Z"
"","9193","@RequestMapping invokes incorrent handler method [SPR-4516]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4516](https://jira.spring.io/browse/SPR-4516?redirect=false)** and commented  The below test case (created after experiencing the problem in a full blown app) contains two methods - one annotated `@RequestMapping`, the second `@RequestMapping`( method=RequestMethod.POST) - this is causing requests for the first method to be incorrectly dispatched to the second method.  import java.io.PrintWriter;  import javax.servlet.http.HttpServletResponse;  import junit.framework.TestCase;  import org.springframework.mock.web.MockHttpServletRequest; import org.springframework.mock.web.MockHttpServletResponse; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter;  public class SpringAnnotationMethodHandlerAdapterParameterTest extends TestCase {      public void testSingleMethod() throws Exception     {         executeTest( ""/foo/handleBill?"", new MultiMethodController() );         executeTest( ""/foo/generateFromReconciliation"", new MultiMethodController() );     }          private void executeTest( String url, Object handler ) throws Exception     {         AnnotationMethodHandlerAdapter amha = new AnnotationMethodHandlerAdapter();              MockHttpServletRequest request = new MockHttpServletRequest( ""POST"", url );         request.addParameter( ""data"", ""foo"" );         HttpServletResponse response = new MockHttpServletResponse();              amha.handle( request, response, handler );     }          @Controller     @RequestMapping( value = { ""/foo/*"", ""/bar/*"" }, method = RequestMethod.POST )     public static class MultiMethodController     {         @RequestMapping         public void handleBill( @RequestParam( ""data"" )         String data, PrintWriter out ) throws Exception         {             System.out.println( ""handleBill"" );         }              @RequestMapping( method = RequestMethod.POST )         public void generateFromReconciliation( @RequestParam( ""data"" )         String data ) throws Exception         {             System.out.println( ""generateFromReconciliation"" );         }          }  }   ---  **Affects:** 2.5.2","closed","type: bug,","spring-projects-issues","2008-02-28T04:19:32Z","2012-06-19T03:47:39Z"
"","9151","@RequestMapping has no means to default the request method at the type level [SPR-4474]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4474](https://jira.spring.io/browse/SPR-4474?redirect=false)** and commented  Consider the below controller; the goal is to map multiple methods, accessible via POST only, using the naming scheme from InternalPathMethodNameResolver.  This does not work because:  1) The naming scheme from InternalPathMethodNameResolver is only invoked is the `@RequestParam` is empty (no value, method, or parameters); 2) The request method cannot be specified at the type level (explicitly prohibited by DefaultAnnotationHandlerMapping)  Our use case for this is converting several legacy Servlets that do an if/else match on the URL in doPost() - it would be trivial to convert these if the POST could be combined with the InternalPathMethodNameResolver (ideally the POST could be defaulted at the type level).  `@Controller` `@RequestMapping`(""/foo/*.do"") public static class MultiMethodController { `@RequestMapping`(method = RequestMethod.POST) public void withWriter( Writer w ) { System.out.println( ""writWriter invoked"" ); }          @RequestMapping(method = RequestMethod.POST)         public void withWriter2( Writer w )         {             System.out.println( ""writWriter2 invoked"" );         }     }  ---  **Issue Links:** - #9147 `@RequestMapping` has no means to combine method-name-based invocation with a request method","closed","type: enhancement,","spring-projects-issues","2008-02-17T22:44:55Z","2019-01-13T08:05:17Z"
"","9150","JavaDoc: @RequestMapping does not mention support for wildcards or InternalPathMethodNameResolver-based invocation [SPR-4473]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4473](https://jira.spring.io/browse/SPR-4473?redirect=false)** and commented  Symmetrical to #9149 for the JavaDoc of `@RequestMapping`  ---  **Affects:** 2.5.2  **Issue Links:** - #9149 Reference manual: `@RequestMapping` (section 13.12.3) does not mention support for wildcards and InternalPathMethodNameResolver invocation","closed","type: documentation,","spring-projects-issues","2008-02-17T06:43:59Z","2019-01-13T08:05:18Z"
"","9149","Reference manual: @RequestMapping (section 13.12.3) does not mention support for wildcards and InternalPathMethodNameResolver invocation [SPR-4472]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4472](https://jira.spring.io/browse/SPR-4472?redirect=false)** and commented  The Spring reference manual does not presently describe that the `@RequestMapping` annotation supports wildcards and that method-level mappings can use the method name as their mapping via InternalPathMethodNameResolver.  The conditions under which InternalPathMethodNameResolver should also be mentioned - specifically, that (at least presently) an empty `@RequestMapping` annotation is required  ---  **Affects:** 2.5.2  **Issue Links:** - #9150 JavaDoc: `@RequestMapping` does not mention support for wildcards or InternalPathMethodNameResolver-based invocation","closed","type: task,","spring-projects-issues","2008-02-17T06:42:33Z","2019-01-13T08:05:20Z"
"","9148","Reference manual - literal markup null in section 13.12.3 [SPR-4471]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4471](https://jira.spring.io/browse/SPR-4471?redirect=false)** and commented  Spring 2.5.2 reference manual, section 13.12.3 has literal markup imbedded in the text (its also colored red)  Session object (Servlet API or Portlet API): either HttpSession or PortletSession. An argument of this type will enforce the presence of a corresponding session. As a consequence, such an argument will never be \null\. Note that session access may not be thread-safe, in particular in a Servlet environment: Consider switching the AnnotationMethodHandlerAdapter's ""synchronizeOnSession"" flag to ""true"" if multiple requests are allowed to access a session concurrently.   ---  **Affects:** 2.5.2","closed","type: bug,","spring-projects-issues","2008-02-17T06:38:46Z","2012-06-19T03:46:56Z"
"","9147","@RequestMapping has no means to combine method-name-based invocation with a request method [SPR-4470]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4470](https://jira.spring.io/browse/SPR-4470?redirect=false)** and commented  Consider the below controller; the goal is to map multiple methods, accessible via POST only, using the naming scheme from InternalPathMethodNameResolver.  This does not work because:  1) The naming scheme from InternalPathMethodNameResolver is only invoked is the `@RequestParam` is empty (no value, method, or parameters); 2) The request method cannot be specified at the type level (explicitly prohibited by DefaultAnnotationHandlerMapping)  Our use case for this is converting several legacy Servlets that do an if/else match on the URL in doPost() - it would be trivial to convert these if the POST could be combined with the InternalPathMethodNameResolver (ideally the POST could be defaulted at the type level).  `@Controller` `@RequestMapping`(""/foo/*.do"") public static class MultiMethodController { `@RequestMapping`(method = RequestMethod.POST) public void withWriter( Writer w ) { System.out.println( ""writWriter invoked"" ); }          @RequestMapping(method = RequestMethod.POST)         public void withWriter2( Writer w )         {             System.out.println( ""writWriter2 invoked"" );         }     }  ---  **Issue Links:** - #9151 `@RequestMapping` has no means to default the request method at the type level","closed","type: enhancement,","spring-projects-issues","2008-02-17T06:31:20Z","2019-01-13T08:05:22Z"
"","9146","@RequestMapping behaves differently for a single handler method versus multiple [SPR-4469]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4469](https://jira.spring.io/browse/SPR-4469?redirect=false)** and commented  When using a type-level wildcard pattern, e.g. `@RequestMapping`(""/foo/*.do"") and empty `@RequestMapping` on the method(s), the method resolution behaviour differs from one method to > 1 method.  Specifically, on a controller with a single method, any URL that matches the wildcard pattern is mapped onto the single method (expected that only URLs matching the method name would match).  On a controller with multiple methods, an exact match on the method name is required (this is the expected behaviour).  Attaching a test case demonstrating the issue.   ---  **Affects:** 2.5.2  **Attachments:** - [SpringAnnotationMethodHandlerAdapterParameterTest.java](https://jira.spring.io/secure/attachment/13652/SpringAnnotationMethodHandlerAdapterParameterTest.java) (_2.29 kB_)","closed","type: enhancement,","spring-projects-issues","2008-02-17T06:20:36Z","2019-01-11T17:32:24Z"
"","9145","AnnotationMethodHandlerAdapter.ServletHandlerMethodInvoker.resolveStandardArgument() does not allow actual return types from ServletRequest & ServletResponse (e.g. BufferedReader, PrintWriter) [SPR-4468]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4468](https://jira.spring.io/browse/SPR-4468?redirect=false)** and commented  Handler methods that declare the actual return types from:  ServletInputStream ServletRequest.getInputStream() BufferedReader ServletRequest.getReader() PrintWriter ServetResponse.getWriter() ServletOutputStream ServletResponse.getOutputStream()  ...fail during invocation, as the method AnnotationMethodHandlerAdapter.ServletHandlerMethodInvoker.resolveStandardArgument() is checking for an exact class match against the supertype:  else if (InputStream.class.equals(parameterType)) { return request.getInputStream(); } else if (Reader.class.equals(parameterType)) { return request.getReader(); } else if (OutputStream.class.equals(parameterType)) { this.responseArgumentUsed = true; return response.getOutputStream(); } else if (Writer.class.equals(parameterType)) { this.responseArgumentUsed = true; return response.getWriter(); }  Attaching a test case demonstrating this.   ---  **Affects:** 2.5.2  **Attachments:** - [SpringAnnotationMethodHandlerAdapterParameterTest.java](https://jira.spring.io/secure/attachment/13651/SpringAnnotationMethodHandlerAdapterParameterTest.java) (_3.47 kB_)","closed","type: enhancement,","spring-projects-issues","2008-02-17T05:29:04Z","2012-06-19T03:47:27Z"
"","9104","JavaDoc - trailing '}' in AbstractRoutingDataSource [SPR-4426]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4426](https://jira.spring.io/browse/SPR-4426?redirect=false)** and commented  The JavaDoc for AbstractRoutingDataSource.setDefaultTargetDataSource has a trailing '}' on the final sentence:  This DataSource will be used as target if none of the keyed targetDataSources match the determineCurrentLookupKey() current lookup key}.   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-02-05T09:17:00Z","2012-06-19T03:46:46Z"
"","9094","Ref. Manual - literal html markup in Table 9.2 [SPR-4416]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4416](https://jira.spring.io/browse/SPR-4416?redirect=false)** and commented  Spring reference manual, 2.5.1 (online version), Table 9.2 - the 'order' attribute's description contains the literal string '\`@Transactional`\'   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-02-03T01:23:48Z","2012-06-19T03:47:41Z"
"","9093","Ref. Manual - unclear sentence in 9.6 Programmatic transaction management [SPR-4415]","**[Chris Lee](https://jira.spring.io/secure/ViewProfile.jspa?name=chrislee)** opened **[SPR-4415](https://jira.spring.io/browse/SPR-4415?redirect=false)** and commented  Spring reference manual, 2.5.1 (online version), has a poorly worded sentence with an unmatched closing parenthesis:  If you are going to use programmatic transaction management, the Spring team generally recommend, namely that of using the TransactionTemplate).   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-02-03T01:08:10Z","2012-06-19T03:46:39Z"
"","9786","Duplicate JavaDoc paragraph in AbstractMessageListenerContainer [SPR-5113]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5113](https://jira.spring.io/browse/SPR-5113?redirect=false)** and commented  The following paragraph is repeated twice in the javadoc for AbstractMessageListenerContainer:  * \NOTE:\ The default behavior of this message listener container is to * \never\ propagate an exception thrown by a message listener up to the * JMS provider. Instead, it will log any such exception at the error level and * rollback the active transaction if there is one. This means that from the * perspective of the attendant JMS provider no listener will ever fail.    ---  **Affects:** 2.0.8, 2.5.5  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-08-23T07:36:08Z","2012-06-19T03:47:02Z"
"","9775","Decouple XML parsing from bean registration in BeanDefinitionParsers [SPR-5102]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5102](https://jira.spring.io/browse/SPR-5102?redirect=false)** and commented  The BeanDefinitionParser API specifies #parse(Element, ParserContext).  This is fine, however, in most BeanDefinitionParser implementations (see ComponentScanBeanDefinitionParser, AnnotationDrivenBeanDefinitionParser) complex logic relating to which beans to register is tangled up with parsing the XML Element object passed in.  Ideally, we should decouple XML parsing from bean registration logic, probably through a simple delegation model.  The BeanDefinitionParser SPI (and all of our existing internal implementations' public interfaces) can remain the same.  parse() will continue to take an Element and a ParserContext.  However, parse() should be limited to parsing the XML Element into a object specific to the metadata contained in that element (see below in open issues regarding naming of those objects).  Once parsing is complete, the BeanDefinitionParser should delegate to an object that understands how to read that now-abstract metadata and register bean definitions that are appropriate given its values.  (naming: BeanDefinitionRegistrar?)  Open issues:  1) What do we call the abstract representation of the metadata coming from the namespace elements (or annotations in the JavaConfig case)?  For example, when parsing  it will be parsed into an object that looks something like:  public class XXX { private String[] basePackages; private boolean annotationConfig;      public void setBasePackages(String[] basePackages) {         this.basePackages = basePackages;     }          public String[] getBasePackages() {         return basePackages;     }          // other accessors ...  }  The question is, what should class XXX above be called?  What, fundamentally, **is** a namespace representing with regard to the Spring configuration model as a whole?   Consider the following - today in Spring XML we have what are simply referred to as 'namespaces':        JavaConfig, on the other hand, expresses this same metadata through a type-level annotation:      @ComponentScan(value=""..."", annotationConfig=false);  Same metadata, different vehicles for its transmission.  In the abstract, then, what is this metadata?  We could call XXX any of the following:  ComponentScanDescriptor ComponentScanDeclaration ComponentScanPlugin ComponentScanModule ComponentScanExtension  In some ways, I like 'descriptor': it connotes that the object is little more than a data holder, a struct if you will.  It is not expressive, however, about its role or purpose in the larger model.  Currently JavaConfig is referring to these things in the abstract as 'ConfigurationPlugin' instances, where ConfigurationPlugin is an interface.  2) ParserContext  We will also need to consider ParserContext, and any ties it has to XML.  JavaConfig will also need to make use of ParserContext (or something like it) in order to communicate bean/component registrations to Spring IDE.  ---  **Issue Links:** - [SJC-161](https://jira.spring.io/browse/SJC-161) Provide support equivalent to  (_**""is depended on by""**_) - [SJC-96](https://jira.spring.io/browse/SJC-96) `@AnnotationDrivenTx` - support equivalent to  (_**""is depended on by""**_) - [SJC-97](https://jira.spring.io/browse/SJC-97) Provide `@ComponentScan` annotation for support equivalent to  (_**""is depended on by""**_) - #12694 Introduce FeatureSpecifications for BeanDefinitionParsers as appropriate - #12078 Support Java-Based Application Configuration","closed","in: core,","spring-projects-issues","2008-08-19T06:34:35Z","2019-01-13T08:02:49Z"
"","9768","Add CUSTOM enum to FilterType [SPR-5095]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5095](https://jira.spring.io/browse/SPR-5095?redirect=false)** and commented  Spring's context schema now supports 'custom' as a value for the includes-filter and excludes-filter elements' 'type' attribute.  org.springframework.context.annotation.FilterType should be updated to include this fifth option.  Note: FilterType is not currently used anywhere in the Spring codebase, but could be in the implementation ComponentScanBeanDefinitionParser#createTypeFilter.  Spring JavaConfig is also in the process of making use of this as part of its public API.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-08-18T10:01:31Z","2012-06-19T03:46:50Z"
"","9762","Provide schema documentation for attributes of  element [SPR-5089]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5089](https://jira.spring.io/browse/SPR-5089?redirect=false)** and commented  http://springframework.org/schema/context/spring-context-2.5.xsd currently does not provide documentation for elements of component-scan.  Most other Spring namespaces are fully documented.  Let's fill in this gap.   ---  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-17T03:48:27Z","2012-06-19T03:47:43Z"
"","9761","Improve JavaDoc readability using {@code}, {@literal}, {@value} [SPR-5088]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-5088](https://jira.spring.io/browse/SPR-5088?redirect=false)** and commented  Let's take advantage of the features that came along in JavaDoc during the 1.5 release to improve readability:  For example, instead of      <some-xml/>  We can now say:      {@code }  Much better, no?  Documentation on the features:  http://java.sun.com/j2se/1.5.0/docs/guide/javadoc/whatsnew-1.5.0.html http://blogs.sun.com/darcy/entry/javadoc_tip_code_and_literal  This work seems well-suited for the general overhaul that will be happening in the 3.0 timeline.   --- No further details from [SPR-5088](https://jira.spring.io/browse/SPR-5088?redirect=false)","closed","","spring-projects-issues","2008-08-16T13:47:07Z","2019-01-11T15:27:10Z"
"","9650","Provide integrated support for validation within @MVC lifecycle [SPR-4975]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-4975](https://jira.spring.io/browse/SPR-4975?redirect=false)** and commented  Today the `@MVC` programming model requires manual instantiation and invocation of Validator classes:  public String onSubmit(`@ModelAttribute` Customer customer, BindingResult result) { new CustomerValidator().validate(customer, result); if(result.hasErrors()) { return ""editAccount""; } return ""...""; }  It would be preferable to have validation be an integrated part of the `@MVC` lifecycle.  For instance, Validator instances could be annotated as `@Component` and be subject to component scanning.  At any rate, whether declared via bean definitions or component scanned, registered Validator instances should be iterated through, and any returning true from Validator#supports() should be used to validate candidate objects.  Additionally, I believe the interface-based approach is preferable here, vs a `@Validator` approach, because the strong contract of supports()->validate() is a useful and expressive one.  It would be sufficient to simply allow Validator instances to be component scanned.  We just need to add iterating through and invoking registered validators to the lifecycle.  ---  **Issue Links:** - #4803 Support for declarative validation (Hibernate Validator, anticipating JSR 303) (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-07-02T16:12:53Z","2019-01-11T18:33:12Z"
"","9647","Document behavior when AnnotationUtils.findAnnotation(Class, Class) encounters a type hierarchy containing multiple interfaces / superclasses annotated with target annotation [SPR-4972]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-4972](https://jira.spring.io/browse/SPR-4972?redirect=false)** and commented  Currently, one must look at the implementation of findAnnotation(Class, Class\) in order to understand how multiple target-annotation annotated supertypes will be handled.  The algorithm is:  first search the implemented interfaces and return the annotation from the first matching candidate  second, assuming none found above, recurse up the supertype hierarchy and return the annotation from the first matching candidate.  It would be good to have the JavaDoc be explicit about this.  This came up when considering the fact that `@Inherited` is not supported on interfaces, and that the reason for this is that it avoids a 'multiple annotation inheritance' problem (if you will).  Given that spring provides support that gets around this limitation, we should address the semantics explicitly.   --- No further details from [SPR-4972](https://jira.spring.io/browse/SPR-4972?redirect=false)","closed","type: documentation,","spring-projects-issues","2008-07-01T11:49:18Z","2012-06-19T03:47:08Z"
"","9631","Give ApplicationContextAwareProcessor public visibility [SPR-4956]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-4956](https://jira.spring.io/browse/SPR-4956?redirect=false)** and commented  Currently, JavaConfig's ConfigurationSupport#getConfigured() uses code copied from ApplicationContextAwareProcessor#postProcessBeforeInitialization().  Were this class public, JavaConfig could use it directly.   ---  **Issue Links:** - [SJC-149](https://jira.spring.io/browse/SJC-149) Eliminate code copied from ApplicationContextAwareProcessor (_**""is depended on by""**_)","closed","type: enhancement,","spring-projects-issues","2008-06-25T13:08:42Z","2012-06-19T09:36:29Z"
"","9630","Add generics support to AutowireCapableBeanFactory [SPR-4955]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-4955](https://jira.spring.io/browse/SPR-4955?redirect=false)** and commented  For example:      Object initializeBean(Object existingBean, String beanName)  becomes       T initializeBean(T existingBean, String beanName)  And so on - other methods would be candidates for similar updates.   ---  **Issue Links:** - [SJC-148](https://jira.spring.io/browse/SJC-148) Support generic parameter and return type for ConfigurationSupport#getConfigured()","closed","type: enhancement,","spring-projects-issues","2008-06-25T13:00:40Z","2012-06-19T09:36:31Z"
"","9407","AbstractBeanDefinition#equals() should compare the value of 'primary' field  [SPR-4730]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-4730](https://jira.spring.io/browse/SPR-4730?redirect=false)** and commented  See attached patch.   ---  **Affects:** 2.5.3  **Attachments:** - [AbstractBeanDefinition.patch](https://jira.spring.io/secure/attachment/13980/AbstractBeanDefinition.patch) (_2.39 kB_)  **Issue Links:** - [SJC-87](https://jira.spring.io/browse/SJC-87) Provide first-class integration support for Spring IDE (_**""is depended on by""**_)","closed","in: core,","spring-projects-issues","2008-04-19T07:54:56Z","2012-06-19T03:47:15Z"
"","8974","Underline and color internal links () in docbook PDF output [SPR-4296]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-4296](https://jira.spring.io/browse/SPR-4296?redirect=false)** and commented  Currently the PDF documentation does not underline and color blue internal links declared with the \ element.  The HTML output does do this, and it makes the PDF documentation less usable, as users of the PDF won't know that links exist unless they happen to mouse over the words.  Example:  Compare section 3.2.3.2.3 in the HTML (http://static.springframework.org/spring/docs/2.5.x/reference/beans.html#beans-factory-class) with the same section in the PDF.  notice that there are 5 internal links underlined and colored blue in the HTML output, while there are none in the PDF.  Indeed, the same links do exist and are clickable in the PDF output -- they just aren't visually 'discoverable'.  I've attached a patch that fixes this issue in the spring/docs/reference/styles/fopdf.xsl stylesheet.   ---  **Attachments:** - [underline-internal-links.patch](https://jira.spring.io/secure/attachment/13244/underline-internal-links.patch) (_896 bytes_)","closed","type: enhancement,","spring-projects-issues","2008-01-03T05:20:48Z","2012-06-19T03:47:07Z"
"","8973","Avoid undesirable newlines in PDF table of contents [SPR-4295]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-4295](https://jira.spring.io/browse/SPR-4295?redirect=false)** and commented  spring/docs/reference/styles/fopdf.xsl is currently configured (by default) to preserve newlines when generating the table of contents.  Because of the way that XMLMind formats literals like \, this results in undesirable newlines in the PDF TOC.  For example, take a look at the TOC, section 3.8.1. It reads as follows:      3.8.1. BeanFactory or            ApplicationContext? ................................................ 85  It would be ideal to have this read      3.8.1. BeanFactory or ApplicationContext? ............... 85  I've attached a patch that fixes this issue by ignoring all whitespace and ignoring all newlines when generating the TOC.   ---  **Attachments:** - [eliminate-toc-newlines.patch](https://jira.spring.io/secure/attachment/13243/eliminate-toc-newlines.patch) (_1.56 kB_)","closed","type: enhancement,","spring-projects-issues","2008-01-03T05:03:32Z","2012-06-19T03:47:34Z"
"","8941","Support introspection for class nesting via the ClassMetadata interface [SPR-4263]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-4263](https://jira.spring.io/browse/SPR-4263?redirect=false)** and commented  Currently org.springframework.core.type.ClassMetadata has, amongst other methods, the following:      boolean hasSuperClass();     String getSuperClassName();  In similar fashion, I'm suggesting the addition of methods for discovering whether the underlying class is a nested class:      /**      * Return whether the underlying class is nested within another class.      */     boolean hasDeclaringClass();          /**      * Return the name of the class that declares the underlying class,      * null if the underlying class is top-level.      */     String getDeclaringClassName();  The 'declaringClass' nomenclature is for consistency with java.lang.Class#getDeclaringClass().  Implementing this looks like it will involve overriding visitOuterClass() within ClassMetadataReadingVisitor.  Here's an oversimplified example:      public void visitOuterClass(String owner, String name, String desc) {     	this.declaringClassName = ClassUtils.convertResourcePathToClassName(owner);     }  It's incomplete because it doesn't consider name and desc.  These params are non-null only if the underlying class is a local or anonymous inner class.  I haven't thought out what to do in this case -- perhaps nothing different at all.  This feature is needed by JavaConfig in order to eliminate use of Class.forName() internally. (See [SJC-53](https://jira.spring.io/browse/SJC-53) for more detail).  However, it is not urgent.  I have a workaround for this, if an ugly one:      public class NestedClassTypeFilter implements TypeFilter {     	public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) {                         // when encountering class names like com.foo.Outer$Inner, assume that it is a nested class.     		return metadataReader.getClassMetadata().getClassName().contains(""$"");     	}     }  (Technically, someone could define a top level class with '$' in the name, and this implementation would produce a false positive.  I'm okay with that being a known issue in the meantime)  If and when this feature implemented, I'll be able to change the implementation to the following:      public class NestedClassTypeFilter implements TypeFilter {     	public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) {     		return metadataReader.getClassMetadata().hasDeclaringClass();     	}     }  Of course, NestedClassTypeFilter could be added to core as well if it looks generally useful.  Thanks,  - Chris    ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-16T08:54:05Z","2012-06-19T03:46:47Z"
"","8878","Refactor out duplicated conditional logic in AbstractBeanFactory [SPR-4200]","**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** opened **[SPR-4200](https://jira.spring.io/browse/SPR-4200?redirect=false)** and commented  The implementation of AbstractBeanFactory#containsBean() first checks to see if the bean is defined locally, and if not checks factory ancestry.  The local check logic is identical to that implemented in #containsLocalBean(), and so can be eliminated and replaced with a call to that method.  Patch is attached and inline below.  It's a very minor change, but does eliminate some duplicate code and help the user understand what's going on.  Index: ./src/org/springframework/beans/factory/support/AbstractBeanFactory.java  ---  RCS file: /cvsroot/springframework/spring/src/org/springframework/beans/factory/support/AbstractBeanFactory.java,v retrieving revision 1.194 diff -r1.194 AbstractBeanFactory.java 315,317c315,316 <               String beanName = transformedBeanName(name); <               if (containsSingleton(beanName) || containsBeanDefinition(beanName)) { <                       return (!BeanFactoryUtils.isFactoryDereference(name) || isFactoryBean(name)); —  > if (containsLocalBean(name)) { > return true;  ---  **Affects:** 2.5 final  **Attachments:** - [patch.diff](https://jira.spring.io/secure/attachment/13171/patch.diff) (_607 bytes_)","closed","type: enhancement,","spring-projects-issues","2007-11-30T19:10:00Z","2019-01-13T22:41:01Z"
"","9463","Equivalent @RequestMapping on overloaded methods leads to 404 instead of ambiguity exception [SPR-4786]","**[chris alme](https://jira.spring.io/secure/ViewProfile.jspa?name=almeitus)** opened **[SPR-4786](https://jira.spring.io/browse/SPR-4786?redirect=false)** and commented  I'm creating RESTful webservices via SpringMVC. Here is a test case that works in 2.5, but does NOT work with 2.5.4  public class ParentController {      RequestMapping(method = RequestMethod.GET)     public void doGet(                     HttpServletRequest req,                      HttpServletResponse resp                 ) throws IOException, ServletException {                  resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED,             ""GET is NOT allowed"");     }  }  Point here is that parent would have a default impl for all HTTP methods, like not allowed, and children can implement supported methods as appropriate. Here is an example child:  Code:  `@Controller` `@RequestMapping`(""/child/test"") public class ChildController extends ParentController {      @RequestMapping(method = RequestMethod.GET)     public void doGet(                 HttpServletRequest req,                 HttpServletResponse resp,                 @RequestParam(""childId"") String childId             ) throws IOException, ServletException {                  resp.getWriter().write(             ""I am GET for childId: "" + childId + """");     }  }  You'll notice that ""child"" also uses `@RequestParam` which is really slick for grabbing req params, which is one of the reasons I went this route as opposed to using something like SimpleServletHandlerAdapter and manually pulling the param(s) out of the req.  When I deploy this controller and navigate to it with something like: http://localhost:8080/bug-test/child/test?childId=99  I get a 404 error, and a log message of: [WARN] PageNotFound - No matching handler method found for servlet request: path '/child/test', method 'GET', parameters map['childId' -> array\['99']]  This same configuration works in 2.5 final. Also, if I take out the `@RequestParam` in child, it works under 2.5.4. The addition of `@RequestParam` is what makes it break in 2.5.4.  -Chris   ---  **Affects:** 2.5 final, 2.5.4  **Attachments:** - [testcase.jar](https://jira.spring.io/secure/attachment/14068/testcase.jar) (_12.20 kB_)","closed","type: bug,","spring-projects-issues","2008-05-06T09:42:26Z","2012-06-19T03:47:08Z"
"","9348","Eclipse JFace application now requires OSGi classes at run-time [SPR-4671]","**[Chin Huang](https://jira.spring.io/secure/ViewProfile.jspa?name=cthuang)** opened **[SPR-4671](https://jira.spring.io/browse/SPR-4671?redirect=false)** and commented  I have an SWT and JFace desktop application working with Spring Framework 2.5.2.  JFace depends on classes from org.eclipse.equinox.common_*.jar and the application includes this JAR file in the class path.  In Spring Framework 2.5.3, org.springframework.core.io.support.PathMatchingResourcePatternResolver detects Equinox OSGi by loading the class org.eclipse.core.runtime.FileLocator which is found in this JAR file.  When it attempts to get the ""resolve"" method by reflection, the following Error is thrown because the application does not include any OSGi classes in the class path:  Exception in thread ""main"" java.lang.NoClassDefFoundError: org/osgi/framework/Bundle at java.lang.Class.getDeclaredMethods0(Native Method) at java.lang.Class.privateGetDeclaredMethods(Unknown Source) at java.lang.Class.getMethod0(Unknown Source) at java.lang.Class.getMethod(Unknown Source) at org.springframework.core.io.support.PathMatchingResourcePatternResolver.\(PathMatchingResourcePatternResolver.java:174) at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.\(AbstractBeanDefinitionReader.java:78) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.\(XmlBeanDefinitionReader.java:137) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.createDefinition(SingletonBeanFactoryLocator.java:435) at org.springframework.beans.factory.access.SingletonBeanFactoryLocator.useBeanFactory(SingletonBeanFactoryLocator.java:370)  The PathMatchingResourcePatternResolver code has a ""catch (Exception ex)"" statement, but NoClassDefFoundError extends java.lang.Error not java.lang.Exception.   ---  **Affects:** 2.5.3  **Attachments:** - [PathMatchingResourcePatternResolver.java.diff](https://jira.spring.io/secure/attachment/13910/PathMatchingResourcePatternResolver.java.diff) (_466 bytes_)","closed","in: core,","spring-projects-issues","2008-04-07T10:11:48Z","2012-06-19T03:47:20Z"
"","9642","Spring 2.x doesn't resume after DataAccessResourceFailureException on begin of inner transaction [SPR-4967]","**[Chen Wen](https://jira.spring.io/secure/ViewProfile.jspa?name=spring_sakai)** opened **[SPR-4967](https://jira.spring.io/browse/SPR-4967?redirect=false)** and commented  we upgraded Spring from 1.2.8 to 2.0.6 and encountered problems because DataSourceTransactionManager.doBegin(Object transaction, TransactionDefinition definition) doesn't catch DataAccessResourceFailureException which causes AbstractPlatformTransactionManager.getTransaction() can't catch TransactionException and resumes transaction synchronization. this will cause ""Pre-bound JDBC connection"" afterwards. there are a lot of differences in AbstractPlatformTransactionManager.getTransaction() between the two versions of Spring. the following try/catch block was the cause of our particular problem: try { doBegin(transaction, definition); } catch (TransactionException ex) { resume(null, suspendedResources); throw ex; } doBegin(transaction, definition) catches only SQLException then re-throws TransactionException that will resume transaction. we were throwing DataAccessResourceFailureException instead of SQLException when database was not accessible. it worked well with 1.2.8. changing DataAccessResourceFailureException by SQLException solved our problems. but this failure probably shouldn't have happened if Spring upgrade handled DataAccessResourceFailureException nicer.   ---  **Affects:** 2.0.6  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-06-30T01:09:17Z","2012-06-19T03:47:29Z"
"","9118","Log completion of bean creation [SPR-4440]","**[Chad La Joie](https://jira.spring.io/secure/ViewProfile.jspa?name=lajoie)** opened **[SPR-4440](https://jira.spring.io/browse/SPR-4440?redirect=false)** and commented  While trying to debug an odd dependency graph between nesting beans I was really hampered by not being able to tell when spring had finished creating bean.  It would be nice to have a debug log message that indicated when the bean creation had been completed.   ---  **Affects:** 2.5 final  **Attachments:** - [patch_log_finished_bean_creation.txt](https://jira.spring.io/secure/attachment/13632/patch_log_finished_bean_creation.txt) (_965 bytes_)","closed","type: enhancement,","spring-projects-issues","2008-02-08T20:40:31Z","2012-06-19T03:47:12Z"
"","9810","JdbcTemplate conflicts with statement-caching [SPR-5137]","**[Celal Ziftci](https://jira.spring.io/secure/ViewProfile.jspa?name=celal)** opened **[SPR-5137](https://jira.spring.io/browse/SPR-5137?redirect=false)** and commented  This is a continuation of #6739. (Please ignore the issue #9809, I tried cloning #6739 and changing the Spring versionm, but apparently I'm not allowed to move it once I clone. So I've created this brand new issue)  I want to re-open this issue as it has more bugs in my opinion. CallableStatementCreatorFactory.CallableStatementCreatorImpl.createCallableStatement(Connection) has the following lines:  if ((declaredParameter).isInputValueProvided() || inValue != null) { StatementCreatorUtils.setParameterValue(csToUse, sqlColIndx, declaredParameter, inValue); }  As one would expect, SqlOutParameter returns false for isInputValueProvided(), whereas SqlInOutParameter returns true for it. Now the problem is with the second part of the if check: ... || inValue != null)  I think this is defying the whole purpose of SqlOutParameter class and its isInputValueProvided() method, because even though that method is returning false (implying that no value should be set on a strictly output parameter), we go ahead and set it.  This causes issue on a next call which actually passes in NULL as a value of the parameter, at which time Spring doesn't honor the value and set it on the statement. And this causes issues with the value that is passed in to the stored procedure later on since we use the same statement due to statement caching and we don't set the value to NULL.  What is the purpose of that (inValue != null) check? I think ANY value should be delegated to the statement to avoid issues. Was this done to keep backwards compatibility? I find this quite dangerous if it's done for that purpose. Can we get this fixed?  (Please see the original issue #6739 to see the sample test attached to it).  ---  **Affects:** 2.5.5","closed","type: bug,","spring-projects-issues","2008-09-02T08:08:42Z","2019-01-13T08:02:42Z"
"","9809","CLONE -JdbcTemplate conflicts with Oracle10g statement caching (ORA-17041) [SPR-5136]","**[Celal Ziftci](https://jira.spring.io/secure/ViewProfile.jspa?name=celal)** opened **[SPR-5136](https://jira.spring.io/browse/SPR-5136?redirect=false)** and commented  Enabling statement caching with Oracle 10g JDBC drivers may result in difficult to track exceptions (ORA-17041).  I was not able to investigate the problem fully, but after a full sunday afternoon of debugging, I am able to attach a JUnit repeatable test case.  The test case is artificially simple, I experienced the bug in a much more complex situation in a production web application.  I used Oracle JDBC thin driver version 10.2 (10.2.0.4 I think).  Ciao, FG.  ---  **Affects:** 1.2.8  **Issue Links:** - #6739 JdbcTemplate conflicts with Oracle10g statement caching (ORA-17041)","closed","status: duplicate,","spring-projects-issues","2008-09-02T07:53:31Z","2019-01-12T16:50:47Z"
"","9080","provide getter (and possibly setter) for RowMapperResultSetExtractor's internal RowMapper [SPR-4402]","**[Celal Ziftci](https://jira.spring.io/secure/ViewProfile.jspa?name=celal)** opened **[SPR-4402](https://jira.spring.io/browse/SPR-4402?redirect=false)** and commented  When extending RowMapperResultSetExtractor, we can pass in a RowMapper implementation in the constructor, however we cannot change some settings on the RowMapper once we call the ""super constructor"" (currently only way of doing this is to have a static RowMapper). An example is:  public class SomeResultSetExtractor extends RowMapperResultSetExtractor { public XMLResultSetExtractor() { super(new SomeRowMapperImpl()); // we need to do some more setting on the SomeRowMapperImpl instance... } }  Having RowMapperResultSetExtractor#getRowMapper() would allow us to do changes later on.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-28T06:01:55Z","2012-06-18T12:44:23Z"
"","9234","Spring AOP using aop:autoproxy and annotation pointcuts poor performance [SPR-4557]","**[Catalin Boloaja](https://jira.spring.io/secure/ViewProfile.jspa?name=catalinb)** opened **[SPR-4557](https://jira.spring.io/browse/SPR-4557?redirect=false)** and commented  A very simple test  using Spring AOP for a singleton bean invoking an advised method shows a 900 times performance penalty compared to a normal bean invocation. A similar method interception using Java Dynamic Proxy shows a smaller penalty , just 18 times. The test is using the  and a pointcut definition based on annotations.   ---  **Affects:** 2.5.2  **Attachments:** - [src.zip](https://jira.spring.io/secure/attachment/13750/src.zip) (_3.35 kB_)","closed","type: enhancement,","spring-projects-issues","2008-03-08T04:06:37Z","2015-09-22T17:34:37Z"
"","9162","Javadoc and implementation of MBeanExporter.setExposeManagedResourceClassLoader do not match [SPR-4484]","**[Casey Hadden](https://jira.spring.io/secure/ViewProfile.jspa?name=casey.hadden)** opened **[SPR-4484](https://jira.spring.io/browse/SPR-4484?redirect=false)** and commented  The javadoc for setExposedManagedResourceClassLoader states that the default value is true, while the actual default value is false.  javadoc:  Indicates whether or not the managed resource should be exposed on the thread context ClassLoader before allowing any invocations on the MBean to occur. The default value is true, exposing a SpringModelMBean  which performs thread context ClassLoader management. Switch this flag off to expose a standard JMX RequiredModelMBean.  variable declaration in MBeanExporter:  /** Indicates whether Spring should expose the managed resource ClassLoader in the MBean */ private boolean exposeManagedResourceClassLoader = false;   ---  **Affects:** 2.5 final, 2.5.1","closed","in: core,","spring-projects-issues","2008-02-20T22:10:30Z","2012-06-19T03:46:35Z"
"","9865","@LookupMethod annotation for use with component scanning [SPR-5192]","**[Casey Butterworth](https://jira.spring.io/secure/ViewProfile.jspa?name=casey.butterworth)** opened **[SPR-5192](https://jira.spring.io/browse/SPR-5192?redirect=false)** and commented  I have recently started some work on an `@LookupMethod` annotation to be used in the following situation:  * A prototype scoped bean needs to be used within a singleton * The singleton was created using component scanning  Currently the most obvious solution would be to forgo component scanning for the singleton and define the lookup-method in the ApplicationContext XML or using spring-java-config, e.g:  ```xml         ```  However, since I've been using component scanning with 2.5, it doesn't feel right defining the wiring outside of the components, and it would be ideal if we could do something like the following:  ``` @Component public abstract class MySingleton {    @LookupMethod(beanRef = ""myPrototype"")    protected abstract MyPrototype createMyPrototype(); }  @Component public class MyPrototype {} ```  It would be even better if `@LookupMethod` could work in conjunction with autowiring (by type), but that can be a subsequent feature request.  I've started to implement a solution and will attach shortly.  ---  **Attachments:** - [LookupMethod.java](https://jira.spring.io/secure/attachment/14732/LookupMethod.java) (_348 bytes_) - [LookupMethod.java](https://jira.spring.io/secure/attachment/14730/LookupMethod.java) (_394 bytes_) - [lookup-method.zip](https://jira.spring.io/secure/attachment/15723/lookup-method.zip) (_10.43 kB_) - [LookupMethodAnnotationBeanPostProcessor.java](https://jira.spring.io/secure/attachment/14731/LookupMethodAnnotationBeanPostProcessor.java) (_2.14 kB_)  **Issue Links:** - #12089 Passing lookup-method arguments to created bean constructor - #15860 BeanFactory lacks method for getting bean by type with specified constructor arguments  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/eb0ab8431bc967aff0f186a4b0bc4562e073fd01  37 votes, 33 watchers","closed","has: votes-jira,","spring-projects-issues","2008-10-01T03:46:14Z","2019-01-14T06:19:19Z"
"","9418","form:errors tag returning incorrect value from doStartTag [SPR-4741]","**[Casey Butterworth](https://jira.spring.io/secure/ViewProfile.jspa?name=casey.butterworth)** opened **[SPR-4741](https://jira.spring.io/browse/SPR-4741?redirect=false)** and commented  The  tag is returning javax.servlet.jsp.tagext.Tag.EVAL_PAGE from it's doStartTag method which is giving inconsistent behaviour between containers. This method should only ever return EVAL_BODY_INCLUDE, SKIP_BODY, or EVAL_BODY_BUFFERED.  To fix the problem simply modify Line 51 of org.springframework.web.servlet.tags.form.AbstractHtmlElementBodyTag from ""return EVAL_PAGE;"" to ""return SKIP_BODY;"", as I am pretty sure this is the behaviour that the author was going for.  This defect results in inconsistent behaviour about how nested contents of the tag are handled. For example, consider the following code:   Do something to indicate an error ocurred, e.g. wrap an entire section with a div   In jetty, this will only display the contents of the tag if an error is bound to bean.property. In weblogic, we've found that the contents always display, regardless of whether an error has occurred or not.  This inconsistency is fair enough as the spec doesn't mandate how the container should handle unknown responses from the doStartTag method of a custom tag and obviously jetty and weblogic have different default behaviour.  We orginally found the error in Spring 2.0.8 however updating to newer versions didn't help, and I've confirmed in the codebase that this problem still exists.   ---  **Affects:** 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.5.1, 2.5.2, 2.5.3  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-04-22T10:24:18Z","2012-06-19T03:47:32Z"
"","9862","Upgrade jets3t in spring-aws-maven [SPR-5189]","**[Carlos Sanchez](https://jira.spring.io/secure/ViewProfile.jspa?name=carlos)** opened **[SPR-5189](https://jira.spring.io/browse/SPR-5189?redirect=false)** and commented  http://repo1.maven.org/maven2/org/springframework/aws/spring-aws-maven/1.2.3/spring-aws-maven-1.2.3.pom  spring-aws-maven 1.2.2 and 1.2.3 depend on a custom built version of jets3t 0.5.1  jets3t 0.6.0 has been already released http://repo1.maven.org/maven2/net/java/dev/jets3t/jets3t/0.6.0/  this is the only dependency of spring-security that is not in the central maven repository (and can't be as it is a custom build by spring) and all of them must be there   ---  **Issue Links:** - [SEC-997](https://jira.spring.io/browse/SEC-997) Upgrade spring-aws-maven and remove extra repository (_**""is depended on by""**_)  **Referenced from:** commits https://github.com/spring-projects/spring-ldap/commit/499d07fdce4756e89642ff59d13102ac0815a60f","closed","type: enhancement,","spring-projects-issues","2008-09-30T11:47:42Z","2009-04-15T16:35:34Z"
"","8981","Repeated configuration for @Configurable with preConstruction [SPR-4303]","**[Carlos Pita](https://jira.spring.io/secure/ViewProfile.jspa?name=memeplex)** opened **[SPR-4303](https://jira.spring.io/browse/SPR-4303?redirect=false)** and commented  Although beanCreation pointcut cares not to configure the bean more than once, requiring mostSpecificInitializer pointcut to be true, the same is not true for beanInitialization, which matches a joinpoint for a constructor in any class that has a `@Configurable` superclass, thus reconfiguring the bean potentially more than once (for diferent constructors invoked during instance initialization). I've tested this with a simple example and it happens just as I've described. I think the right thing to do is to require that thisJoinPoint isn't an instance of a class that has a `@Configurable` superclass. This way, just the top most `@Configurable` in the hierarchy will fullfill the pointcut condition.  ---  **Affects:** 2.5 final  **Issue Links:** - #8985 Refactor domain object dependency injection aspect","closed","type: enhancement,","spring-projects-issues","2008-01-05T05:08:58Z","2019-01-11T16:29:54Z"
"","8980","Deserialization not reinjecting for @Configurable with preConstruction [SPR-4302]","**[Carlos Pita](https://jira.spring.io/secure/ViewProfile.jspa?name=memeplex)** opened **[SPR-4302](https://jira.spring.io/browse/SPR-4302?redirect=false)** and commented  When preConstruction = true the pointcut that has effect is beanInitialization, not beanCreation (this logic is in AbstractBeanConfigurerAspect). But beanInitialization doesn't include configurableObjectResolution as beanCreation does. But then it's configurableObjectResolution that takes care of injecting the bean during deserialization. I've tested this and in fact the `@Configurable` beans with preConstruction = true are not being reinjected after restored from serialized state. Is this intended or a bug in the pointcuts logic? (this applies to spring 2.5)  ---  **Affects:** 2.5 final  **Issue Links:** - #8985 Refactor domain object dependency injection aspect","closed","type: enhancement,","spring-projects-issues","2008-01-05T05:07:32Z","2019-01-11T16:30:02Z"
"","9137","Incompatible AopNamespaceUtils signature change in Spring 2.5 [SPR-4459]","**[Cameron Braid](https://jira.spring.io/secure/ViewProfile.jspa?name=cameronbraid)** opened **[SPR-4459](https://jira.spring.io/browse/SPR-4459?redirect=false)** and commented  Caused by: java.lang.NoSuchMethodError: org.springframework.aop.config.AopNamespaceUtils.registerAutoProxyCreatorIfNecessary(Lorg/springframework/beans/factory/xml/ParserContext;Ljava/lang/Object;)V at org.springframework.security.config.AnnotationDrivenBeanDefinitionParser.parse(AnnotationDrivenBeanDefinitionParser.java:70) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1246) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1236) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:133) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:90) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:468) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:363)  ---  **Affects:** 2.5 final, 2.5.1  **Issue Links:** - [SEC-646](https://jira.spring.io/browse/SEC-646) can't get `@Secured` annotations to work  using spring-security in a spring-2.5 app (_**""is depended on by""**_)  4 votes, 4 watchers","closed","in: core,","spring-projects-issues","2008-01-08T08:56:10Z","2019-01-13T08:05:25Z"
"","9081","context:load-time-weaver seems to prevent PropertyOverrideConfigurer from being applied [SPR-4403]","**[Cameron Braid](https://jira.spring.io/secure/ViewProfile.jspa?name=cameronbraid)** opened **[SPR-4403](https://jira.spring.io/browse/SPR-4403?redirect=false)** and commented  I'm using 2.5.2-SNAPSHOT due to http://jira.springframework.org/browse/SPR-4324  When I configure load time weaving, my custom PropertyOverrideConfigurer isn't applied before afterPropertiesSet is called on my beans.  here are two log extracts from the same app both without, and with  enabled  without  :  19:05:49 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [XX.xml] 19:05:49 INFO  [XmlWebApplicationContext] Bean factory for application context [org.springframework.web.context.support.XmlWebApplicationContext@6d6aa0]: org.springframework.beans.factory.support.DefaultListableBeanFactory@19478c7 19:05:49 INFO  [EnvironmentPropertyOverrideConfigurer] Loading properties file from class path resource [XX.properties] 19:05:50 INFO  [Version] Hibernate Annotations 3.3.0.GA  with   :  19:05:20 INFO  [XmlBeanDefinitionReader] Loading XML bean definitions from class path resource [XX.xml] 19:05:20 INFO  [XmlWebApplicationContext] Bean factory for application context [org.springframework.web.context.support.XmlWebApplicationContext@19067e5]: org.springframework.beans.factory.support.DefaultListableBeanFactory@1959352 19:05:21 INFO  [DefaultListableBeanFactory] Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1959352: defining beans [.,..]; root of factory hierarchy 19:05:21 INFO  [DefaultContextLoadTimeWeaver] Using a reflective load-time weaver for class loader: org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader 19:05:21 INFO  [Version] Hibernate Annotations 3.3.0.GA   ---  **Affects:** 2.5.1, 2.5.2","closed","type: bug,","spring-projects-issues","2008-01-28T06:09:38Z","2012-06-19T03:46:47Z"
"","9460","Add name attribute to XML namespaces that want to support it (through parser base class) [SPR-4783]","**[Caleb Phillips](https://jira.spring.io/secure/ViewProfile.jspa?name=calebphillips)** opened **[SPR-4783](https://jira.spring.io/browse/SPR-4783?redirect=false)** and commented  Was: ""Add name attribute to  so it can be used to declare controllers useable by BeanNameUrlHandlerMapping ""  It would be nice if I could declare my groovy controller beans with ""/"" in the names so that I could continue to use BeanNameUrlHandlerMapping:  http://forum.springframework.org/showthread.php?t=51284   ---  **Affects:** 2.5.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0cf31f012d59c07c8cb4b1edbdba8bc501d09ee6, https://github.com/spring-projects/spring-framework/commit/57afe3baab5adde998794a4129acc21a9701d7c4, https://github.com/spring-projects/spring-framework/commit/dec2ca30c20c15a47f76d53f32d5f8c048391958, https://github.com/spring-projects/spring-framework/commit/092a25d0d86516bddc8bceff67ef24389cb1abaa  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-05T04:32:31Z","2012-06-19T03:47:00Z"
"","9281","OracleLobHandler works on physical connection, but not proxy/stub [SPR-4604]","**[Caesar Loh](https://jira.spring.io/secure/ViewProfile.jspa?name=cae29)** opened **[SPR-4604](https://jira.spring.io/browse/SPR-4604?redirect=false)** and commented  OracleLobHandler$OracleLobCreator.prepareLob need to work on a physical connection, rather than a proxy/stub.  For eg, if a application retrieve a datasource remotely (from another jvm), the connection being passed to it is a proxy/stub. This will lead to a exception of java.io.NotSerializableException.  Is there any way to change it so that it will work on a proxy/stub rather than a physical connection.   --- No further details from [SPR-4604](https://jira.spring.io/browse/SPR-4604?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-03-19T14:13:51Z","2008-03-22T05:15:35Z"
"","9274","NativeJdbcExtractorAdapter .getNativeConnectionConnection() returning a null [SPR-4597]","**[Caesar Loh](https://jira.spring.io/secure/ViewProfile.jspa?name=cae29)** opened **[SPR-4597](https://jira.spring.io/browse/SPR-4597?redirect=false)** and commented  In line 108 of NativeJdbcExtractorAdapter, it will return a null for connection.  This occur when the datasource is being retrieved from another server rather than the holding server. The metadata.getConnection() will return a null, and obviously by comparing it with the original connection, it will be different. Thus, this method will return a null.  How about doing a simple check for null before returning the connection? In any case, metadataConnection will simply return the same connection.  ---  **Affects:** 2.0.6, 2.0.7, 2.0.8, 2.5.1, 2.5.2  **Issue Links:** - #9273 NativeJdbcExtractorAdapter .getNativeConnectionConnection (_**""is duplicated by""**_)  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-03-18T19:40:53Z","2019-01-11T17:18:50Z"
"","9273","NativeJdbcExtractorAdapter .getNativeConnectionConnection [SPR-4596]","**[Caesar Loh](https://jira.spring.io/secure/ViewProfile.jspa?name=cae29)** opened **[SPR-4596](https://jira.spring.io/browse/SPR-4596?redirect=false)** and commented  ---  **Issue Links:** - #9274 NativeJdbcExtractorAdapter .getNativeConnectionConnection() returning a null (_**""duplicates""**_)","closed","","spring-projects-issues","2008-03-18T19:34:32Z","2019-01-11T17:18:46Z"
"","9459","SimpleJdbcInsert needs to understand synonyms! [SPR-4782]","**[C N](https://jira.spring.io/secure/ViewProfile.jspa?name=cbngspring)** opened **[SPR-4782](https://jira.spring.io/browse/SPR-4782?redirect=false)** and commented  I'm using Spring 2.5.2 and Oracle 10g jdbc drive. This fails  SimpleJdbcInsert x = new SimpleJdbcInsert(dataSource).withTableName('ABC'); x.execute( ... );  when tableName is a synonym to a table in another schema. It won't follow the synonym!  Prepending the schema name to the table name doesn't work either.  org.springframework.dao.InvalidDataAccessApiUsageE xception: Unable to locate columns for table 'ABC' so an insert statement can't be generated org.springframework.jdbc.core.metadata.TableMetaDa taContext.createInsertString(TableMetaDataContext. java:299) org.springframework.jdbc.core.simple.AbstractJdbcI nsert.compileInternal(AbstractJdbcInsert.java:257) org.springframework.jdbc.core.simple.AbstractJdbcI nsert.compile(AbstractJdbcInsert.java:240) org.springframework.jdbc.core.simple.AbstractJdbcI nsert.checkCompiled(AbstractJdbcInsert.java:291) org.springframework.jdbc.core.simple.AbstractJdbcI nsert.doExecute(AbstractJdbcInsert.java:329) org.springframework.jdbc.core.simple.SimpleJdbcIns ert.execute(SimpleJdbcInsert.java:102)  If you can cast java.sql.Connection to oracle.jdbc.OracleConnection, you can setIncludeSynonyms(true) which will cause DatabaseMetadata to understand synonyms.   ---  **Affects:** 2.5.2  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f70d14e2c2ccc5215f2c0e3571064e2a2362a156  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-05T01:58:38Z","2019-01-11T17:43:16Z"
"","8919","It would be nice for UrlParameterMapping to be able to resolve to a Controller bean and not just a methodName [SPR-4241]","**[Budd Kopman](https://jira.spring.io/secure/ViewProfile.jspa?name=budd)** opened **[SPR-4241](https://jira.spring.io/browse/SPR-4241?redirect=false)** and commented  I am porting an app to Spring.  The main servlet is 2,000+ lines long with many if/else if clauses that depend on a parameter in the URL.  There are close to 250 separate commands.  My first pass before Spring was to pull out if/else code into about 40 objects grouped by command type and have the servlet become a dispatcher, meaning I had a mappingObject that took in a value and returned a CommandObject which was then executed - worked fine.  The initial change to Spring was not much.  My servlet entry in web.xml became a DispatcherServlet.  My servlet became an AbstractController and WebApplicationContext mapped everything to this one Controller.  Everything still worked, but I am essentially being a dispatcher  However, when I started to try to get Spring to do the dispatching I do not see a HandlerMapping object that will mapping a request parameter value to a Controller bean.  All I see is the MultiActionController with a methodNameResolver and a delegate object.  Implementing this would end up with a delegate object as large as the original servlet.  I think what I want is something named UrlParameterHandlerMapping, here looking for the parameter 'command' and mapping values to Controllers                                                         loginController                    userEditController                              Thus, this functionality is analogous to SimpleUrlHandlerMapping, but on a parameter, and seems to be a reasonable thing to do.  Now, I understand that changing the app to use URL path extensions would allow the existing HandlerMapping to work.  Thanks, Budd Kopman   --- No further details from [SPR-4241](https://jira.spring.io/browse/SPR-4241?redirect=false)","closed","type: enhancement,","spring-projects-issues","2007-12-11T06:58:46Z","2014-09-19T11:39:51Z"
"","8996","WebSphereUowTransactionManager does not support WebSphere v6.x APIs [SPR-4317]","**[Bryan Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=bryan.n.jones)** opened **[SPR-4317](https://jira.spring.io/browse/SPR-4317?redirect=false)** and commented  We are running WASv6.1, and it seems the WebSphere APIs that the new WebSphereUowTransactionManager class is importing, are not in the same java package as the bundled WebSphere jars.  Included in the WASv6.1 bundled com.ibm.ws.runtime-6.1.0.jar are the API classes referenced in the WebSphereUowTransactionManager, but under different java packages. For example, WebSphereUowTransactionManager imports com.ibm.wsspi.uow.UOWManager, but com.ibm.ws.runtime-6.1.0.jar has this packaged under the slightly different com.ibm.ws.uow.UOWManager.  Spring 2.5.1 includes a supporting WebSphere API jar for these interfaces, included in the 'with-dependencies' download (websphere/websphere_uow_apis.jar). Again, these interfaces are packaged in a location inconsistent with our WASv6.1 libraries. I also looked closely at the WASv6.0 libraries a few weeks ago. If I remember correctly, these interfaces were packaged differently again in that release... Specifically, a different jar, but in the same java package as WASv6.1, thus inconsistent still with the WebSphereUowTransactionManager.  The JavaDoc for the WebSphereUowTransactionManager class specifies it supports WASv7.0, v6.1, and v6.0: ""This transaction manager is compatible with WebSphere 7.0 as well as recent WebSphere 6.0.x and 6.1.x versions.""  So it seems as though the WebSphereUowTransactionManager only supports WASv7.0, which is not yet final, and not WASv6.x.  See thread http://forum.springframework.org/showthread.php?p=159432#post159432    ---  **Affects:** 2.5 final","closed","in: data,","spring-projects-issues","2008-01-10T00:21:39Z","2019-01-11T16:35:21Z"
"","9760","expose ServletHandlerMethodInvoker/Resolver to application code [SPR-5087]","**[Bruno Navert](https://jira.spring.io/secure/ViewProfile.jspa?name=mycroft)** opened **[SPR-5087](https://jira.spring.io/browse/SPR-5087?redirect=false)** and commented  It would be useful to expose ServletHandlerMethodInvoker and ServletHandlerMethodResolver as public classes, rather than private inner classes. This would allow application code to call this directly to mimick the behaviour of Spring when calling handler methods.  I have one such use case in my application, and ended up copy/pasting the invoker class, which is far from ideal.  ---  **Affects:** 2.5.4  **Sub-tasks:** - #14048 expose ServletHandlerMethodResolver AnnotationMethodHandlerAdapter.getMethodResolver(Object handler) to application code  7 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-15T01:34:22Z","2019-01-11T15:27:08Z"
"","9758","AnnotationUtils.findAnnotation() should look for annotations on annotations [SPR-5085]","**[Bruno Navert](https://jira.spring.io/secure/ViewProfile.jspa?name=mycroft)** opened **[SPR-5085](https://jira.spring.io/browse/SPR-5085?redirect=false)** and commented  When searching for annotations using AnnotationUtils.findAnnotation(), it should be possible to detect annotations that are present on other annotations.  For instance, imagine a controller class annotated with `@MyController`, where `@MyController` is a custom annotation that I created. `@MyController` is itself annotated with `@Controller` (it is a specialization of controller). It would be nice if the call AnnotationUtils.findAnnotation(handlerType, Controller.class) could, in addition to searching interfaces and super-classes, also look at the annotations (MyController) and look for the requested `@Controller` annotation there.   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-08-14T05:11:07Z","2012-06-19T03:47:12Z"
"","9757","@RequestMapping-based controllers do not work for JDK proxies with annotated interfaces [SPR-5084]","**[Bruno Navert](https://jira.spring.io/secure/ViewProfile.jspa?name=mycroft)** opened **[SPR-5084](https://jira.spring.io/browse/SPR-5084?redirect=false)** and commented  When using JDK proxies (proxy-target-class=false), it is not possible to use `@RequestMapping` to automatically define controllers.  This works very well if no proxying is involved. However, when AOP is used and a proxy of the controller is created (implementing the appropriate interface, where the interface has `@RequestMapping` at type and method level), then it fails.  The code in DefaultAnnotationHandlerMapping properly finds `@RequestMapping` at type level in the interface (since it uses AnnotationUtils.findAnnotation), but then it looks for method-level annotations in DefaultAnnotationHandlerMapping.determineUrlsForHandlerMethods()  This method only looks at the implementation class (the proxy), and finds no such annotation.  It should use the same kind of logic that AnnotationUtils does, and check the method declaration in the relevant interface(s) for any annotation there. Alternatively, perhaps declaring `@RequestMapping` as `@Inheritable` would suffice? Not sure. In any case, it should be simple to find the interfaces, get the right method, and check for annotations there.  The reason I prefer JDK proxies to CGLIB-based ones is because when we use CGLIB, it creates memory leaks when the application is reloaded in Tomcat, while JDK proxies don't have this problem.   ---  **Affects:** 2.5.4  1 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-14T04:51:29Z","2019-01-11T15:27:15Z"
"","9183","autoStartup false causes init exception in ServerSessionMessageListenerContainer [SPR-4506]","**[Brice Ruth](https://jira.spring.io/secure/ViewProfile.jspa?name=bdruth)** opened **[SPR-4506](https://jira.spring.io/browse/SPR-4506?redirect=false)** and commented  Setting 'autoStartup' property to 'false' on ServerSessionMessageListenerContainer causes an exception during initialization of the MDP container. Basically, autoStartup prevents the Connection from being setup, but something else in ServerSessionMessageListenerContainer#doInitialize needs (or expects) that Connection to be valid.  Can provide full stack, if needed.  ---  **Affects:** 2.0.5  **Issue Links:** - #8948 ServerSessionMessageListenerContainer102 cannot be initialized with autoStart=false (_**""duplicates""**_)","closed","status: duplicate,","spring-projects-issues","2008-02-26T14:36:16Z","2019-01-12T16:51:00Z"
"","9655","Generic CRUD Controller [SPR-4980]","**[Brian Sanders](https://jira.spring.io/secure/ViewProfile.jspa?name=bsanders1979)** opened **[SPR-4980](https://jira.spring.io/browse/SPR-4980?redirect=false)** and commented  This is actually a code submission. I made a crud/list controller following the implementation pattern of the simple/cancellable form controllers. Not sure where else I could submit the code, but if someone wants to point me in the right directions, then by all means do so. By default, the controller supports 5(_list,_create,_retrieve,_update,_delete) additional configurable paramKeys (like the cancellable controller) that control which views you see and provides function chains (on\) to add your own form processing code. It's not complete, but it works.   ---  **Attachments:** - [GenericFormController.java](https://jira.spring.io/secure/attachment/14328/GenericFormController.java) (_9.23 kB_)","closed","type: enhancement,","spring-projects-issues","2008-07-03T04:23:52Z","2012-06-19T09:36:30Z"
"","9679","The URL matching in spring-security's FilterChainProxy is very handy, and the functionality could be refactored into the GenericFilterBean or DelegatingFilterProxy [SPR-5004]","**[Brian Relph](https://jira.spring.io/secure/ViewProfile.jspa?name=relphie)** opened **[SPR-5004](https://jira.spring.io/browse/SPR-5004?redirect=false)** and commented  The URL matching is very handy and could be refactored into the GenericFilterBean or DelegatingFilterProxy.  Right now, I am pulling in spring-security as a dependency and creating a filter chain proxy for a single spring-managed filter so that I can take advantage of the URL matching.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-14T09:59:00Z","2015-09-22T17:34:35Z"
"","9083","MIsmatch between dynamic-language FortuneController.groovy and doco example [SPR-4405]","**[Brett Randall](https://jira.spring.io/secure/ViewProfile.jspa?name=javabrett)** opened **[SPR-4405](https://jira.spring.io/browse/SPR-4405?redirect=false)** and commented  Documentation version of FortuneController.groovy differs from source code.  Patch follows:      1. Eclipse Workspace Patch 1.0  #P spring Index: docs/reference/src/dynamic-languages.xml  ---  RCS file: /cvsroot/springframework/spring/docs/reference/src/dynamic-languages.xml,v retrieving revision 1.28 diff -u -r1.28 dynamic-languages.xml --- docs/reference/src/dynamic-languages.xml	19 Oct 2007 14:09:55 -0000	1.28 +++ docs/reference/src/dynamic-languages.xml	29 Jan 2008 04:40:27 -0000 @@ -918,7 +918,7 @@  class FortuneController implements Controller {  - FortuneService fortuneService  + `@Property` FortuneService fortuneService    ModelAndView handleRequest(   HttpServletRequest request, HttpServletResponse httpServletResponse) {  ---  **Affects:** 2.0.8, 2.5 final, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: task,","spring-projects-issues","2008-01-28T14:43:58Z","2019-01-13T08:05:40Z"
"","9743","PropertiesLoaderSupport.loadProperties() fails with ByteArrayResource [SPR-5068]","**[Brett Johnson](https://jira.spring.io/secure/ViewProfile.jspa?name=brettmjohnson)** opened **[SPR-5068](https://jira.spring.io/browse/SPR-5068?redirect=false)** and commented  PropertiesLoaderSupport.loadProperties() fails with ByteArrayResource because it expects the resource to have a filename.  It calls location.getFilename() which throws  ""java.lang.IllegalStateException: resource loaded from byte array does not carry a filename"".  It doesn't really need the filename (it already has an inputStream), but uses the filename extension to try to determine whether to call the plain property loader or the XML property loader.  [Why couldn't Sun figure that out inside java.util.Properties.load()?]  This code makes two poor assumptions: - That a Resource has a filename (not true in the case of ByteArrayResource). - That xml format properties files have a .xml filename extension (witness Mac OS X .plist xml property files).  The problem that the code tries to solve can be handled in several different ways: - Try loadFromXML(), catch InvalidPropertiesFormatException, and try load().  - Peek into the stream to see if it looks like XML  (this is what I implemented in another project):    ....   InputStream is = new BufferedInputStream(originalInputStream);        // Peek at the first line of the Properties stream to determine                                                                                      // if it is in XML format or Traditional format.                                                                                                   byte[] buffer = new byte[256];       is.mark(4096);       int bytesRead = is.read(buffer, 0, buffer.length);       String propHeader = new String(buffer, 0, bytesRead);       is.reset();              // Determine which Properties loader method to use.                                                                                                // [Why can't java.util.Properties.load() figure this out itself?]                                                                              if (propHeader.indexOf(""","closed","type: enhancement,","spring-projects-issues","2008-08-06T12:20:58Z","2015-09-22T17:34:35Z"
"","9171","Improve AOP documentation to include configuring classloader LTW in Jetty [SPR-4493]","**[Bob Tiernay](https://jira.spring.io/secure/ViewProfile.jspa?name=btiernay)** opened **[SPR-4493](https://jira.spring.io/browse/SPR-4493?redirect=false)** and commented  The following (unanswered) forums indicate a need by the community to understand how to configure Jetty to use classloader based LTW:  http://archive.grails.codehaus.org/user/541148.119.qm%40web36605.mail.mud.yahoo.com http://www.nabble.com/LWT-with-Jetty-%28AspetJ-ower-spring-agent%29-tt15571526.html#a15571526 http://forum.springframework.org/showthread.php?t=45236  http://static.springframework.org/spring/docs/2.5.x/reference/aop.html, 6.8.4.5. Spring configuration details how to configure LTW for BEA's Weblogic 10, Oracle's OC4J, GlassFish, Tomcat and Resin, but does not mention how to configurethe very popular Jetty server.  It would be very instructive to add similiar documentation for Jetty.  Thanks   ---  **Affects:** 2.5.1  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bc37c509726ab8ee5cfb4a33cd280bc3d25072d4, https://github.com/spring-projects/spring-framework/commit/1152d51c6f0ec31146d3f31d181c7295d7dfef28  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2008-02-24T11:37:53Z","2012-06-19T03:47:21Z"
"","9170","Doc: @Autowired does not support Collection and Map as actual bean types [SPR-4492]","**[Bob Tiernay](https://jira.spring.io/secure/ViewProfile.jspa?name=btiernay)** opened **[SPR-4492](https://jira.spring.io/browse/SPR-4492?redirect=false)** and commented  The following branch in DefaultListableBeanFactory.resolveDependency requires that a dependency of interface type java.util.Map have java.lang.String as it's key type or it will fail:  ... else if (Map.class.isAssignableFrom(type) && type.isInterface()) { Class keyType = descriptor.getMapKeyType(); if (keyType == null || !String.class.isAssignableFrom(keyType)) { if (descriptor.isRequired()) { throw new FatalBeanException(""Key type ["" + keyType + ""] of map ["" + type.getName() + 							""] must be assignable to [java.lang.String]""); } return null; } ...  This seems overly restrictive and is evinced when using `@Autowire`.  Is there some rationale for this contraint?  ---  **Affects:** 2.5.1  **Issue Links:** - #13164 Support injection of collection-typed beans using `@Autowired`+`@Qualifier` or `@Inject`+`@Named`","closed","in: core,","spring-projects-issues","2008-02-24T03:48:37Z","2019-01-13T08:05:11Z"
"","9125","@Autowired dependencies and external configuration [SPR-4447]","**[Bob Tiernay](https://jira.spring.io/secure/ViewProfile.jspa?name=btiernay)** opened **[SPR-4447](https://jira.spring.io/browse/SPR-4447?redirect=false)** and commented  Some great ideas about how to improve Spring's annotation based configuration is mentioned in the following article:  http://www.jroller.com/Solomon/entry/guice_and_spring_2_51  One of the stumbling blocks with a prodominantly annotation based configuration is the setup and injection of external configuration (the kind of stuff you want externalized in an XML file or a property file, such as connection information, file names, counts and Controller view names. Most of the time, those kinds of values are primitives).  Typically, such configuration values come from properties files and are made available via variants of PropertyPlaceholderConfigurer.  However, in such an environment this is difficult to achieve since Strings, Integers, etc are not considered component types (see http://jira.springframework.org/browse/SPR-3744).  One solution to this issue is what Solomon writes about:  An `@Value` annotation with property resolution... For example:  `@Autowire`  public void setI(`@Value`(""${i}"") int i)  With a property file entry:  i=5  This seems very natural and seems to be the annotation configuration based version of Java Config's `@ExternalValue` (see http://www.thespringexperience.com/blog/rod_johnson/2007/11/spring_java_configuration_moving_ahead.html)  If this is a sensible approach, consider unifying the two annontations to be common.   ---  **Attachments:** - [spring2.5-configuration.zip](https://jira.spring.io/secure/attachment/13738/spring2.5-configuration.zip) (_17.52 kB_)  3 votes, 7 watchers","closed","type: enhancement,","spring-projects-issues","2008-02-11T00:42:01Z","2012-06-19T03:46:38Z"
"","8885","No Hibernate Session when specifying current_session_context_class=""thread"" [SPR-4207]","**[Björn Voß](https://jira.spring.io/secure/ViewProfile.jspa?name=bjoern.voss)** opened **[SPR-4207](https://jira.spring.io/browse/SPR-4207?redirect=false)** and commented  If you use spring 2.5 as a drop in replacement `@Transactional` isn't working any more. They HibernateSession you get through a currentSession() has no active transaction and result in the following stack trace  Exception in thread ""main"" org.hibernate.HibernateException: createSQLQuery is not valid without active transaction at org.hibernate.context.ThreadLocalSessionContext$TransactionProtectionWrapper.invoke(ThreadLocalSessionContext.java:297) at $Proxy7.createSQLQuery(Unknown Source) at ag.pinguin.myservice.impl.MyService.doSomething(MyService.java:30) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:301) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149) at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:106) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) at $Proxy5.doSomething(Unknown Source) at test.SpringTestMain.main(SpringTestMain.java:16)  With spring 2.0.7 the exact same code/config works fine    ---  **Affects:** 2.5 final  **Attachments:** - [springtest.zip](https://jira.spring.io/secure/attachment/13181/springtest.zip) (_19.32 kB_)","closed","status: declined,","spring-projects-issues","2007-12-04T01:49:11Z","2019-01-12T16:39:28Z"
"","9419","Support for custom TypeFilters in the component scanner [SPR-4742]","**[Bernhard Huemer](https://jira.spring.io/secure/ViewProfile.jspa?name=bhuemer)** opened **[SPR-4742](https://jira.spring.io/browse/SPR-4742?redirect=false)** and commented  Admittedly, it's possible to modify and extend the component scanning behaviour using one of the four built-in TypeFilters (http://static.springframework.org/spring/docs/2.5.x/reference/beans.html#beans-scanning-filters), but I'd like to use a custom TypeFilter. This seems to be supported by the implementing class itself (org.springframework.context.annotation.ClassPathBeanDefinitionScanner), but the configuration parser, however, doesn't. Currently, an exception will be thrown if I'm trying to register my TypeFilter in the following way:      I think that's rather easy to fix as it would work by introducing an additional else block within the method ""ComponentScanBeanDefinitionParser#createTypeFilter()"".  ---  **Affects:** 2.5.3  **Sub-tasks:** - #10213 An option to allow overriding behavior in case of scanned beans  **Issue Links:** - #8856 ComponentScanBeanDefinitionParser: multiple BeanNameGenerators and BeanDefinitionDecorators","closed","type: enhancement,","spring-projects-issues","2008-04-22T21:15:02Z","2019-01-11T17:42:38Z"
"","9298","OncePerRequestFilter should clean up its request attribute [SPR-4621]","**[Bernhard Huemer](https://jira.spring.io/secure/ViewProfile.jspa?name=bhuemer)** opened **[SPR-4621](https://jira.spring.io/browse/SPR-4621?redirect=false)** and commented  Currently I'm developing a portal application using IBM WebSphere Portal Server 6.0 and in doing so I've faced a ""difficulty"" when two or more portlets using the Spring framework are placed on the same page. The problem is that only the first portlet being rendered gets access to the scopes ""request"" and ""session"" and all the portlets being rendered afterwards terminate rendering due to an IllegalStateException (RequestContextHolder.currentRequestAttributes(), line 120). However, as it worked perfectly when there was only one portlet I didn't thought of a configuration error but rather a bug in either the portal server or Spring itself (I've used the RequestContextFilter with the dispatcher methods ""REQUEST"", ""INCLUDE"" and ""FORWARD"" being mapped).  Now, according to the exception stack trace the portal server executes this filter for each portlet (just as I would have expected), but the filter proceeds without ""invoking itself"", i.e. the OncePerRequestFilter thinks that it already has been executed. Note that there is a different request object for each portlet (i.e. there is a different request object for each time the filter is executed), but it seems that the portal server passes request attributes on even though the filter is provided with different request objects. However, by using a rewritten version of the RequestContextFilter that cleans up the request attributes afterwards, everything works fine and therefore I'd suggest to patch the OncePerRequestFilter class accordingly.   ---  **Affects:** 2.0.8, 2.5.2  **Attachments:** - [SPR-4621.patch](https://jira.spring.io/secure/attachment/13825/SPR-4621.patch) (_932 bytes_)  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-03-24T04:45:07Z","2012-06-19T03:46:52Z"
"","9659","Ordering JMX managed operations [SPR-4983]","**[Bernard Macours](https://jira.spring.io/secure/ViewProfile.jspa?name=bmacours)** opened **[SPR-4983](https://jira.spring.io/browse/SPR-4983?redirect=false)** and commented  The display order of exposed managed operations in JMX console is not configurable (is in fact unpredictable) when using .  Proposals: - Have an option to automatically sort by alphabetical order in  - Have an additional annotation attribute for ManagedOperation (=order?) - ...?    ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-03T20:42:51Z","2012-06-19T09:36:18Z"
"","8958","MVC step-by-step: build-scripts link is missing [SPR-4280]","**[BeomJin Park](https://jira.spring.io/secure/ViewProfile.jspa?name=bumjin)** opened **[SPR-4280](https://jira.spring.io/browse/SPR-4280?redirect=false)** and commented  in http://www.springframework.org/docs/Spring-MVC-step-by-step/index.html  the las link build-scripts.html is broken  A. Build Scripts      link is missing  Not Found  The requested URL /docs/Spring-MVC-step-by-step/build-scripts.html was not found on this server.   --- No further details from [SPR-4280](https://jira.spring.io/browse/SPR-4280?redirect=false)","closed","type: task,","spring-projects-issues","2007-12-23T17:59:22Z","2012-06-19T03:46:46Z"
"","9827","Please make it possible to pull bean definitions from more XML sources [SPR-5154]","**[Benson Margulies](https://jira.spring.io/secure/ViewProfile.jspa?name=bimargulies)** opened **[SPR-5154](https://jira.spring.io/browse/SPR-5154?redirect=false)** and commented  The XmlBeanDefinitionReader only reads from InputSource and related things.  How about accepting a DOM tree? Would you see that as a job for a sibling class to XmlBeanDefinitionReader? Or rather for that class to accept the more general Source base class instead of InputSource?    ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-09-14T11:48:05Z","2019-01-12T05:34:03Z"
"","9261","XmlBeanDefinitionReader resistant to subclassing to control validation [SPR-4584]","**[Benson Margulies](https://jira.spring.io/secure/ViewProfile.jspa?name=bimargulies)** opened **[SPR-4584](https://jira.spring.io/browse/SPR-4584?redirect=false)** and commented  There are two issues with XmlBeanDefinitionReader that make it hard to subclass to control validation.  First: getValidationModeForResource is private. Could it please be protected? Making it protected allows a subclass to have opinions about validation based on the resource.  Second: there is a setValidationMode, but no getValidationMode, and of course the int field is private, not protected. It's not terribly hard to work around this by overriding setValidationMode and maintaining a private copy, but it's a big ugly.  I said that there were two, but while you are in the neighborhood you could also consider allowing protected access to the documentLoader, so that subclasses could override doLoadBeanDefinitions and make small tweaks.   ---  **Affects:** 2.0.8  **Attachments:** - [ControlledValidationXmlBeanDefinitionReader.java](https://jira.spring.io/secure/attachment/13796/ControlledValidationXmlBeanDefinitionReader.java) (_2.78 kB_)  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-03-13T22:03:25Z","2012-06-19T03:47:04Z"
"","9079","AbstractCheckedElementTag should properly pre-check items from a map or collection item source [SPR-4401]","**[Benjamin Hoffmann](https://jira.spring.io/secure/ViewProfile.jspa?name=benjamin.hoffmann)** opened **[SPR-4401](https://jira.spring.io/browse/SPR-4401?redirect=false)** and commented  When using an collection or map as item source for radioButtons or checkboxes, the AbstractCheckedElementTags method renderFromValue() should not only check if the resolvedKey is in the bound collection, but also if the currently renderedItem is contained in it. With the current implementation, preselection of cheked will only work with primitives, enums or valueBeans where the toString() method returns the identifier.  ---  **Affects:** 2.5.1  **Attachments:** - [SPRING_PATCH_SPR-4401](https://jira.spring.io/secure/attachment/13570/SPRING_PATCH_SPR-4401) (_18.02 kB_)  **Issue Links:** - #9064 OptionWriter renders item Maps incorrectly (no preselection) - #8842 form:checkboxes and form:radiobuttons should use registered property editor","closed","type: enhancement,","spring-projects-issues","2008-01-28T01:12:10Z","2019-01-11T17:31:39Z"
"","9064","OptionWriter renders item Maps incorrectly (no preselection) [SPR-4385]","**[Benjamin Hoffmann](https://jira.spring.io/secure/ViewProfile.jspa?name=benjamin.hoffmann)** opened **[SPR-4385](https://jira.spring.io/browse/SPR-4385?redirect=false)** and commented  When rendering an Option, renderFromMap() passes the HashMap Entry to the renderOption Method instead of the keyObject itself.  ``` private void renderFromMap(final TagWriter tagWriter) throws JspException {      final Map optionMap = (Map) this.optionSource;      for (Iterator iterator = optionMap.entrySet().iterator(); iterator.hasNext();) {           Map.Entry entry = (Map.Entry) iterator.next();           Object mapKey = entry.getKey();           Object mapValue = entry.getValue();           BeanWrapper mapKeyWrapper = new BeanWrapperImpl(mapKey);           BeanWrapper mapValueWrapper = new BeanWrapperImpl(mapValue);           Object renderValue = (this.valueProperty != null ? mapKeyWrapper.getPropertyValue(this.valueProperty)                         : mapKey.toString());           Object renderLabel = (this.labelProperty != null ? mapValueWrapper.getPropertyValue(this.labelProperty)                         : mapValue.toString());           renderOption(tagWriter, entry, renderValue, renderLabel);      } } ```  The renderOption Method compares the item as well as the textual representation to determine the selection state of the specific option. The MapEntry will never match in this case, so the mapEntry.getKey() should be passed to renderOption instead.  ---  **Affects:** 2.0.8, 2.5.1  **Issue Links:** - #9079 AbstractCheckedElementTag should properly pre-check items from a map or collection item source  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-01-24T03:04:32Z","2019-01-11T16:35:53Z"
"","9066","Maven2 repository version of Spring 2.5.1 seem to lack package org.springframework.web.servlet.* [SPR-4387]","**[Bengt-Erik Fröberg](https://jira.spring.io/secure/ViewProfile.jspa?name=kantorn)** opened **[SPR-4387](https://jira.spring.io/browse/SPR-4387?redirect=false)** and commented  Using Maven2 to handle dependencies, and suddenly IDE reports that SimpleFormController cannot be found on classpath. The package should be there......(?)  Check out for example http://ftp.cica.es/mirrors/maven2/org/springframework/spring/2.5.1/ directory, ibiblio.org/maven2 is too damn slow, but the mentioned should be a full mirror to it.   ---  **Affects:** 2.5.1","closed","status: declined,","spring-projects-issues","2008-01-24T06:23:37Z","2019-01-12T16:39:20Z"
"","9875","Idle DMLC keeps creating debug logs every second (with default poll interval) [SPR-5202]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-5202](https://jira.spring.io/browse/SPR-5202?redirect=false)** and commented  An idle DMLC keeps generating logs as each poll of the queue is done in a new transaction (once each second by default). These are logged at debug level logs so arguably a production system should filter them out however we occasionally run with debug logging enabled to track down issues and a DMLC left idle overnight will generate vast amounts of logs!  Reducing the poll interval is not really a solution as a poll interval of say 1 minute would mean the DMLC could take up to 1 minute to shutdown!  For example, these logs are emitted every second:      19:07:58.301 [DefaultMessageListenerContainer-1] DEBUG o.s.j.c.JmsTransactionManager - Using transaction object [org.springframework.jms.connection.JmsTransactionManager$JmsTransactionObject@3820e]     19:07:58.301 [DefaultMessageListenerContainer-1] DEBUG o.s.j.c.JmsTransactionManager - Creating new transaction with name [null]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT     19:07:58.301 [DefaultMessageListenerContainer-1] DEBUG o.s.j.c.JmsTransactionManager - Created JMS transaction on Session [MockSession(0x193722c)]     19:07:58.301 [DefaultMessageListenerContainer-1] DEBUG o.s.t.s.TransactionSynchronizationManager - Bound value [org.springframework.jms.connection.JmsResourceHolder@12cc95d] for key [MockConnectionFactory(0xa31e1b)] to thread [DefaultMessageListenerContainer-1]     19:07:58.301 [DefaultMessageListenerContainer-1] DEBUG o.s.t.s.TransactionSynchronizationManager - Retrieved value [org.springframework.jms.connection.JmsResourceHolder@12cc95d] for key [MockConnectionFactory(0xa31e1b)] bound to thread [DefaultMessageListenerContainer-1]     19:07:59.301 [DefaultMessageListenerContainer-1] DEBUG o.s.j.l.DefaultMessageListenerContainer - Consumer [MockSession(0x193722c)]     19:07:59.301 [DefaultMessageListenerContainer-1] DEBUG o.s.j.c.JmsTransactionManager - Initiating transaction commit     19:07:59.301 [DefaultMessageListenerContainer-1] DEBUG o.s.j.c.JmsTransactionManager - Committing JMS transaction on Session [MockSession(0x193722c)]     19:07:59.301 [DefaultMessageListenerContainer-1] DEBUG o.s.t.s.TransactionSynchronizationManager - Removed value [org.springframework.jms.connection.JmsResourceHolder@12cc95d] for key [MockConnectionFactory(0xa31e1b)] from thread [DefaultMessageListenerContainer-1]  A simple local workaround is to override receiveMessage() however I think it would be generally useful if the DMLC polled inside the transaction? Whilst this keeps the transaction open, there is nothing else in the transaction at this point in time so we are not consuming any resources.  public class MyDMLC extends DefaultMessageListenerContainer { // polls until a message is read or a stop requested `@Override` protected Message receiveMessage(MessageConsumer consumer) throws JMSException { Message msg = null; do { msg = super.receiveMessage(consumer); } while (msg == null && isRunning()); return msg; } }   ---  **Affects:** 2.5.5  1 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-10-06T05:30:29Z","2012-06-19T03:46:45Z"
"","9871","DMLC async stop notification is not fired after calls to stop() [SPR-5198]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-5198](https://jira.spring.io/browse/SPR-5198?redirect=false)** and commented  The async stop listener provided in #9092 is not actually fired after a call to stop().  Once stop is called() the DMLC threads notice isRunning is false and park themselves inside waitWhileNotRunning(). This method blocks until the DMLC is de-actived (as a result of calling shutdown) or the DMLC is re-started.  The attached test case demonstrates the issue.  It looks like waitWhileNotRunning() should probably call the async-stop runnable once all processor threads get to that point or isActive() should return false after a call to stop()?  ---  **Affects:** 2.5.5  **Attachments:** - [DMLCAsyncStopCallbackTest.java](https://jira.spring.io/secure/attachment/14736/DMLCAsyncStopCallbackTest.java) (_1.95 kB_)  **Issue Links:** - #9092 Add async stop notification API to DefaultMessageListenerContainer  2 votes, 4 watchers","closed","type: bug,","spring-projects-issues","2008-10-03T05:05:24Z","2019-01-11T15:39:42Z"
"","9799","Add DuplicateKeyException to DAO exception hierachy [SPR-5126]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-5126](https://jira.spring.io/browse/SPR-5126?redirect=false)** and commented  The Spring DAO exception hierarchy is not fine grained enough to isolate duplicate key errors. A duplicate key error is an example of where an application may catch the exception and invoke alternative logic instead of just letting it fall down the stack.  For example, we read messages from a queue and insert the data into a database. We explicitly catch a duplicate key insert exception as this indicates we've processed the same message earlier. This is more efficient than a guarding the update with a check-then-act (which also introduces a race condition that may lead to dup-key exception anyway).  Additionally, if we use single-phase commit for our JMS and DB transactions (commit DB first then JMS) a failure scenario is that the DB transaction commits but the JMS transaction rollsback. In this case the message is delivered again and we get a dup-key exception. We can then safely ignore such duplicate messages.  A dup-key error is currently classified as a DataIntegrityViolationException along with other errors such as a data bounds error so we can't simply catch this exception type. We could work around this be checking the vendor error-code/state however this is not portable and cumbersome.  Ideally an exception like:  public class DuplicateKeyException extends DataIntegrityViolationException { }  Spring already provides mappings from vendor specific codes so it would be very powerful if it could provide a fine grained exception to allow this common duplicate-key handling pattern to be detected just using exception type.  We currently use the following SQLExceptions to detect a dup-key:  * Sybase: error-state=23000 * DB2: error-state=23505  ---  **Issue Links:** - #9798 Add DuplicateKeyException to DAO exception hierachy (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-08-29T03:25:34Z","2019-01-11T15:39:27Z"
"","9798","Add DuplicateKeyException to DAO exception hierachy [SPR-5125]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-5125](https://jira.spring.io/browse/SPR-5125?redirect=false)** and commented  The Spring DAO exception hierarchy is not fine grained enough to isolate duplicate key errors. A duplicate key error is an example of where an application may catch the exception and invoke alternative logic instead of just letting it fall down the stack.  For example, we read messages from a queue and insert the data into a database. We explicitly catch a duplicate key insert exception as this indicates we've processed the same message earlier. This is more efficient than a guarding the update with a check-then-act (which also introduces a race condition that may lead to dup-key exception anyway).  Additionally, if we use single-phase commit for our JMS and DB transactions (commit DB first then JMS) a failure scenario is that the DB transaction commits but the JMS transaction rollsback. In this case the message is delivered again and we get a dup-key exception. We can then safely ignore such duplicate messages.  A dup-key error is currently classified as a DataIntegrityViolationException along with other errors such as a data bounds error so we can't simply catch this exception type. We could work around this be checking the vendor error-code/state however this is not portable and cumbersome.  Ideally an exception like:  public class DuplicateKeyException extends DataIntegrityViolationException { }  Spring already provides mappings from vendor specific codes so it would be very powerful if it could provide a fine grained exception to allow this common duplicate-key handling pattern to be detected just using exception type.  We currently use the following SQLExceptions to detect a dup-key:  * Sybase: error-state=23000 * DB2: error-state=23505  ---  **Issue Links:** - [SPRNET-1215](https://jira.spring.io/browse/SPRNET-1215) Add DuplicateKeyException to DAO exception hierachy (_**""is depended on by""**_) - [SPRNET-1216](https://jira.spring.io/browse/SPRNET-1216) Change exception translation mappings to throw DuplicateKeyException (_**""is depended on by""**_) - #9799 Add DuplicateKeyException to DAO exception hierachy (_**""is duplicated by""**_) - #7663 Subclass DataIntegrityViolationException to represent main constraint types and translate SQL exceptons into appropriate subclass  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a0139abf1e4088e60ae6cd56bbc4779dd522cfde  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-29T03:15:59Z","2019-01-11T15:39:00Z"
"","9710","Add extension to TransactionSynchronizationManager to allow custom resolution of unbound transaction resources to allow ""lazy-enlistment"" TransactionManagers [SPR-5035]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-5035](https://jira.spring.io/browse/SPR-5035?redirect=false)** and commented  Spring has no extension point to provide custom resolution of transaction resources. This hook is required to implement a ""lazy enlistment"" transaction manager.  A ""lazy-enlistement"" transaction manager differs from Springs ""out-the-box"" single resource transaction managers in that transaction resources (JMS connections or JDBC connections) are bound to the transaction when they are first used. The transaction manager collects resources during the life of the transaction rather than forcing developers to declare the resources they anticipate they will use upfront. Our developers find this programming model simpler and vastly reduces configuration overhead. Once a transaction manager is defined and code executed inside the transaction boundary any resources used are implicitly bound to the transaction.  The following pattern is used extensively throughout Springs resource handling code, for example in DataSourceUtils and ConnectionFactoryUtils:  public Resource doGetResource(ResourceFactory factory) {  Resource resource = getResourceFromTSM(factory);  // (1) resource found in transaction if (resource != null){ return resource; }  // (2) resource not found, create a new resource resource = factory.getResource();  if (isSynchronizationActive()) { addResourceToTSM(factory,resource); addSynchronizationToCleanupResource(resource); }  return resource; }  Branch (2) may appear to show lazy creation of the resource however this can't be used for the following reasons:      * No mechanism exists to get notified of the resource's addition to the TransactionSynchronizationManager.     * The resource cleanup synchronization may cleanup the resource before the transaction manager enters the commit phase (as a result of closing of the connection in beforeCompletion). There is no way to disable this synchronization from been added.     * There is no control over configuration of the resource, for example, after getting a JDBC Connection (the Resource) from a DataSource (the ResourceFacotry?) one must disable auto-commit in addition to other connection preparation such as configuring the isolation level.   Spring's transaction managers pre-populate the TransactionSynchronizationManager with the resource(s) they will manage so transactional resources are always found and branch (1) is taken.  A transaction manager supporting ""lazy enlistment"" would need to plug in its own resource resolution strategy before Spring takes its fallback logic in (2).  We propose an extension point to be added to TransactionSynchronizationManager. A sketch of the extension point API is shown below:  interface TransactionResourceResolver { public Object resolveResource(Object key); }  The following API would be used to register a custom strategy with the current transaction:  TransactionSynchronizationManager.setResourceResolver( resolver );  resolveResource() is invoked from TransactionSynchronizationManager#getResource(key) when the key is unbound. To clarify, the logic in getResource() would follow this pattern:  public Object getResource(Object key) {  // 1) Check resources map Object resource = resources.get(key);  if (resource != null){ return resource; }  // 2) Consult custom strategy Object resource = resolver.resolveResource(key); if (resource != null) { resources.put(key, resource); return resource; }  // 3) Give up return null; }  This small extension enables the implementation of the ""lazy enlistment"" Transaction Manager. Note, this is similar to the request in #7996. This new issue clarifies the requests made in the comments with a focus on lazy enlistment.  ---  **Issue Links:** - #7996 Provide listener for TransactionSynchronizationManager  6 votes, 10 watchers","closed","type: enhancement,","spring-projects-issues","2008-07-23T20:50:40Z","2019-01-11T14:33:42Z"
"","9300","Spurious ""Is there an unresolvable circular reference"" logs when creating autowired factory beans [SPR-4623]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-4623](https://jira.spring.io/browse/SPR-4623?redirect=false)** and commented  Spring logs (at debug) the full stack trace of a suspected circular bean dependency when attempting to resolve auto-wire candidates for itself (a FactoryBean).  Arguably this isn't a huge problem but it could be avoided and does cause unnecessary noise in the logs which causes some confusion to developers (the issue is quite intricate to follow). Perhaps under these circumstances (resolving autowire candidates for a FactoryBean) this log can be suppressed or replaced with a 1-liner and not the entire stack-trace?  The issue can be reproduced with a simple autowired FactoryBean example (run with debug logging enabled):      public static void main(String[] args) {         GenericApplicationContext ctx = new GenericApplicationContext();         RootBeanDefinition rbd = new RootBeanDefinition(ListFB.class, AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR);         ctx.registerBeanDefinition(""fb"", rbd);         ctx.refresh();     }          public static class Widget {     }          public static class ListFB implements FactoryBean {              public ListFB() {         }              // spring tries to satisfy this ctor first, ends up checking itself as a candidate          // it then gets the exception and falls back on the 0-arg ctor         public ListFB(Widget w) {         }              public Object getObject() throws Exception {             return new ArrayList();         }              public Class getObjectType() {             return List.class;         }              public boolean isSingleton() {             return true;         }     }  The offending logs are:  [org.springframework.beans.factory.support.DefaultListableBeanFactory] Debug : Ignoring bean creation exception on FactoryBean type check","closed","type: enhancement,","spring-projects-issues","2008-03-25T05:37:10Z","2012-06-19T03:47:10Z"
"","9135","Provide API to remove a bean alias before BF refresh [SPR-4457]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-4457](https://jira.spring.io/browse/SPR-4457?redirect=false)** and commented  Once an alias is registered it cannot be redefined or removed.  We make use of aliases to assign different roles to beans in cases where a single bean is providing multiple roles, for example:  \  This is convenient as we can later remove the alias if we decide we need to use a different implementation for 'db_a'.  During high level testing we'd like to mock out 1 or more of these roles. For example, we'd like to say anything that uses bean 'db_a' should use this mock instead. Our framework loads the real production XML configuration file and using a BFPP we massage the container to swap out some beans for mocks. If 'db_a' was a regular bean we could quite easily remove its definition from the registry and just register our mock as a singleton with the BF. However if we are using aliases this isn't possible as no API exists to remove from the alias map.  Could a public API be added to AbstractBeanFactorty to manage this map? Something like:  void removeAlias(String beanName) void isAlias(String beanName)  With the usual caveats that once the factory is refreshed any mutation of aliases may lead to an inconsistent state?  The alternatives we've found - extending AbstractBeanFactory to intercept calls to regsiterAlias(), caching, then flushing once we have made our modifications - seem a bit fragile.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-12T04:46:37Z","2012-06-19T03:47:17Z"
"","9099","Custom TypeConverter isn't used for adapting bean references [SPR-4421]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-4421](https://jira.spring.io/browse/SPR-4421?redirect=false)** and commented  A registered custom TypeConvertor (#7997) doesn't appear to be used when converting bean properties.  The BeanWrapper implementation delegates back onto the set of registered PropertyEditors rather than using the custom type converter strategy. So if I inject a bean of Type A into a setter that expects an instance of Type B (and my type convertor **can** adapt between these types) then I still get an exception:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testBean' defined in class path resource [beans.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are: PropertyAccessException 1: org.springframework.beans.TypeMismatchException: Failed to convert property value of type [bugs.typeconvertor.A] to required type [bugs.typeconvertor.B] for property 'b'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [bugs.typeconvertor.A] to required type [bugs.typeconvertor.B] for property 'b': no matching editors or conversion strategy found at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1201) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:400) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:736) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:369)  ---  **Affects:** 2.5.1  **Attachments:** - [type_convertor_bug.zip](https://jira.spring.io/secure/attachment/13600/type_convertor_bug.zip) (_3.19 kB_)","closed","in: core,","spring-projects-issues","2008-02-04T04:21:01Z","2019-01-11T17:30:36Z"
"","9092","Add async stop notification API to DefaultMessageListenerContainer [SPR-4414]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-4414](https://jira.spring.io/browse/SPR-4414?redirect=false)** and commented  DMLC has 2 options to quiesce the containers threads.  * Stop(): notifies the threads to stop * Shutdown(): notifies the threads to stop and then waits for all the threads to stop.  We need to wait for all the threads to stop so we can then shutdown dependent components in the application (we don't want to shut these down until all message processing is complete). So we used shutdown(), however after shutdown the container can't be re-started!. So we use stop() but then we don't know when the stop is complete.  A simple option would be adding a stopAndWait() API that would block the calling thread until the containers threads are stopped. But we'd like to stop all our containers (we may have >10 in the application) concurrently. A nice way to do this is to give a callback to stop() to be invoked on completion.  // notifies the containers threads to stop, invokes the callback when all threads are done. void stop( CompletionCallback completionCallback )  Where CompletionCallback is (could use Runnable?):  interface CompletionCallback { public void complete(); }  We can then await stopping something like:  final CountDownLatch latch = new CountDownLatch( containers.size ) CompletionCallback callback = new CompletionCallback()   {    void complete() { latch.countDown(); } };  for( DMLC container : containers )  { container.stop( callback ); }  latch.await();  If this API doesn't seem generally useful would it be possible to provide a subclass hook to allow this as the monitor & counters are not visible (looks like something that could be easily refactored out of doShutdown()).  Thanks  ---  **Affects:** 2.5.1  **Issue Links:** - #9871 DMLC async stop notification is not fired after calls to stop()","closed","type: enhancement,","spring-projects-issues","2008-02-01T02:31:05Z","2019-01-11T17:31:13Z"
"","9025","Thread interrupt can lead to deadlock in ConcurrencyThrottleSupport [SPR-4346]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-4346](https://jira.spring.io/browse/SPR-4346?redirect=false)** and commented  ConcurrencyThrottleSupport#beforeAccess() waits in a loop until a resource is available but it catches IE and re-interupts the current thread **inside** of the loop. If a thread has its interrupt flag set any calls to wait() fail immediatly with another IE, as we are in a loop this goes on and on. And the looping thread owns the lock so it prevents any other threads returning their resource resulting in deadlock.  We hit a related bug in our own library and whilst searching for other occurrences I noticed this in Spring.  The IE would seem to indicate that someone wants the thread to stop waiting for a resource so perhaps the IE or a wrapped exception should be rethrown from beforeAccess() (if we just re-interrupt the current thread then the client might assume they have access to the resource when in fact the method only returned because of the interruption)..   ---  **Affects:** 2.0.8, 2.5 final, 2.5.1  **Attachments:** - [ConcurrencyThrottleSupportTest.java](https://jira.spring.io/secure/attachment/13284/ConcurrencyThrottleSupportTest.java) (_2.54 kB_)  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-01-16T10:23:54Z","2019-01-11T16:32:29Z"
"","9024","NPE in AbstractAutowireCapableBeanFactory#populateBean() if bean wrapper is null and InstantiationAwareBeanPostProcessor are registered [SPR-4345]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-4345](https://jira.spring.io/browse/SPR-4345?redirect=false)** and commented  The rest of the bean creation code guards against a null bean instance (we are using a null bean as a placeholder to delay creation of heavy weight objects when all we want is to create a skeleton layout of our application) .  NPE occurs when request the wrapped instance from the BeanWrapper (which may be null) in populateBean() :  ... if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) ...  ---  **Affects:** 2.5 final  **Issue Links:** - #9045 Autowiring failed when one of the bean contains factory-method (_**""is duplicated by""**_) - #9075 CLONE -Autowiring failed when one of the bean contains factory-method (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2008-01-16T05:24:52Z","2019-01-11T16:32:33Z"
"","9022","MergedBeanDefinitionPostProcessor#postProcessMergedBeanDefinition fired after bean creation [SPR-4343]","**[Ben Rowlands](https://jira.spring.io/secure/ViewProfile.jspa?name=benrowlands)** opened **[SPR-4343](https://jira.spring.io/browse/SPR-4343?redirect=false)** and commented  The postProcessMergedBeanDefinition() hook to process the bean definition is fired after bean creation (in AbstractAutowireCapableBeanFactory#doCreateBean()).  Its not clear if this is a bug or intentional. It feels more intuitive (and powerful) to fire the call **before** bean creation allowing processors to transform the bean definition as required.   ---  **Affects:** 2.5 final  **Attachments:** - [beans.xml](https://jira.spring.io/secure/attachment/13283/beans.xml) (_365 bytes_) - [MergedBeanDefinitionPostProcessorTest.java](https://jira.spring.io/secure/attachment/13282/MergedBeanDefinitionPostProcessorTest.java) (_1.78 kB_)","closed","in: core,","spring-projects-issues","2008-01-16T01:39:10Z","2019-01-12T16:39:21Z"
"","8925","Easily allow substitution of trained mock objects into an application context [SPR-4247]","**[Ben Hutchison](https://jira.spring.io/secure/ViewProfile.jspa?name=ben_hutchison)** opened **[SPR-4247](https://jira.spring.io/browse/SPR-4247?redirect=false)** and commented  There are times when it is desirable to load a graph of Spring beans, but substitute a mock object (with expectations set on it) for one of the beans, then put a call through and verify the mock was called. The intent is to test the Spring wiring & post-processing (which in many Spring apps provides a great deal of functionality beyond dependency injection, eg AOP, WebServices) so manual wiring is not sufficient.  A current example faced by the reporter is interaction-testing web service beans exposed via XFire/Spring using JSR181 `@WebService`. We want to test the web services but mock out the backing business logic components.  The solution I envisage would be to support binding of the trained mock object into the context under a given bean Id, at a defined lifecycle point before normal bean instantiation proceeds.  However, there appears to be no such facility in the spring architecture. This is presumably a deliberate, considered decision and there may be significant obstacles to the above outlined solution.  See also this description of the only  solution to this problem Im currently aware of (which seems too complex for general use):  http://sourceforge.net/mailarchive/message.php?msg_name=E8E30CC0F0A6F8419BEE9D77B604BC5CA3A5C4%40zissou.forwardfunds.com   ---  **Affects:** 2.0.7","closed","type: enhancement,","spring-projects-issues","2007-12-12T08:51:21Z","2012-06-19T09:36:27Z"
"","9381","Use of factory-method caused application to fail in 2.5.3 but worked under all other previous 2.5 versions. [SPR-4704]","**[Ben Greenway](https://jira.spring.io/secure/ViewProfile.jspa?name=greenwayb)** opened **[SPR-4704](https://jira.spring.io/browse/SPR-4704?redirect=false)** and commented  An exception occurred when using the factory-method call.  2008-04-15 16:54:18,854 ERROR [org.springframework.web.context.ContextLoader] Context initialization failed java.lang.NullPointerException at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.getCacheKey(AbstractAutoProxyCreator.java:322) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.predictBeanType(AbstractAutoProxyCreator.java:245) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:531) at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1174) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:222) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:303) at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:948) at org.springframework.context.support.AbstractApplicationContext.registerListeners(AbstractApplicationContext.java:702) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:378)  The debugger was run with a conditional breakpoint placed in the class AbstractAutowireCapableBeanFactory at line 530 with the condition ""beanClass==null"".  This allowed us to identify the offending config. (The reduced) Bean config was:  \ \ \\\\\\ \ \ \ \\PREMIUM_RESEARCH\\ \  This problem may be averting by using (the better) use of","closed","in: core,","spring-projects-issues","2008-04-14T20:15:13Z","2019-01-12T16:50:54Z"
"","9364","Adding scope to a bean definition created by FactoryBean places the FactoryBean in the scope and not the underlying bean [SPR-4687]","**[Ben Buckley](https://jira.spring.io/secure/ViewProfile.jspa?name=benbuckley)** opened **[SPR-4687](https://jira.spring.io/browse/SPR-4687?redirect=false)** and commented  When a scope is added to a bean that is created by a FactoryBean implementation, it is the FactoryBean that gets added to the scope object and not the underlying bean.                      For example given the configuration above, SimpleFactoryBean gets added to the scope rather than the instance created by SimpleFactoryBean's getObject() method.   ---  **Affects:** 2.5.3","closed","in: core,","spring-projects-issues","2008-04-10T00:26:33Z","2019-01-12T16:28:22Z"
"","9693","Creating a mock for SqlMapClientTemplate and setting it to SqlMapClientDaoSupport is not possible. [SPR-5018]","**[Behrang Noroozinia](https://jira.spring.io/secure/ViewProfile.jspa?name=behrangn)** opened **[SPR-5018](https://jira.spring.io/browse/SPR-5018?redirect=false)** and commented  SqlMapClientDaoSupport has a method ""setSqlMapClientTemplate"" for setting SqlMapClientTemplate.  As SqlMapClientTemplate is a concrete class, it's hard to creating a mock object from it for using in unit tests of DAOs. However SqlMapClientTemplate implements SqlMapClientOperations and if that setter method would get a parameter of type SqlMapClientOperations instead of SqlMapClientTemplate, then it would be easy to create a mock object and set it on SqlMapClientDaoSupport.  So here is the possible code. Instead of : public final void setSqlMapClientTemplate(SqlMapClientTemplate sqlMapClientTemplate) ... use: public final void setSqlMapClientTemplate(SqlMapClientOperations sqlMapClientTemplate) ...  and instead of: public final SqlMapClientTemplate getSqlMapClientTemplate() ... use: public final SqlMapClientOperations getSqlMapClientTemplate() ...  Thanks   --- No further details from [SPR-5018](https://jira.spring.io/browse/SPR-5018?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-07-19T20:12:04Z","2012-06-19T09:36:31Z"
"","9051","PersistenceExceptionTranslationPostProcessor should support proxy-target-class [SPR-4373]","**[Barry Kaplan](https://jira.spring.io/secure/ViewProfile.jspa?name=memelet)** opened **[SPR-4373](https://jira.spring.io/browse/SPR-4373?redirect=false)** and commented  When classes are proxied in postProcessAfterInitialization(), this class creates a concrete ProxyFactory:  [code] ProxyFactory pf = new ProxyFactory(bean); pf.addAdvisor(this.persistenceExceptionTranslationAdvisor); return pf.getProxy(this.beanClassLoader); [/code]  There is no opportunity to set ProxyFactory.proxyTargetClass to true.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-01-22T12:49:30Z","2012-06-19T03:47:10Z"
"","8948","ServerSessionMessageListenerContainer102 cannot be initialized with autoStart=false [SPR-4270]","**[Balasubramaniam C R](https://jira.spring.io/secure/ViewProfile.jspa?name=bala)** opened **[SPR-4270](https://jira.spring.io/browse/SPR-4270?redirect=false)** and commented  ServerSessionMessageListenerContainer102 has to be  ""autoStart=true"",  Else it throws org.springframework.jms.listener.AbstractJmsListen ingContainer$SharedConnectionNotInitializedExcepti on initialize.  It seems that shared connection is established only if autostart is on. But the doInitialize requires the shared Connection to be started.  ---  **Affects:** 2.0.7, 2.5 final  **Issue Links:** - #9183 autoStartup false causes init exception in ServerSessionMessageListenerContainer (_**""is duplicated by""**_)  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: bug,","spring-projects-issues","2007-12-18T13:27:40Z","2019-01-11T17:08:34Z"
"","8947","CommonsPoolServerSessionFactory.close does not remove the ObjectPool from cache [SPR-4269]","**[Balasubramaniam C R](https://jira.spring.io/secure/ViewProfile.jspa?name=bala)** opened **[SPR-4269](https://jira.spring.io/browse/SPR-4269?redirect=false)** and commented  We have a ServerSessionMessageListenerContainer102 wired with a CommonsPoolServerSessionFactory and a SingleConnectionFactory102 (all are singleton beans).The message listner works when I start the container for the first time. But, when I stop and start the listener, no more messages are processed even tough the listner is running.  We found that the CommonsPoolServerSessionFactory.close doesnot remove the object pool from the cache (serverSessionPools HashMap) when the close(ListenerSessionManager) method is invoked. So the next time the listnercontainer is started the pool returned is a closed pool, and the consumer cannot consume any more messages.  Is this the expected behaviour of the CommonsPoolServerSessionFactory?  Attempting to solve the problem, I extended the class CommonsPoolServerSessionFactory, overrode the methods  close(ListenerSessionManager) getServerSession(ListenerSessionManager) serverSessionFinished(ServerSession, ListenerSessionManager)  This new class maintains its own cache of objectpools. On close it adds a call to remove the ObjectPool from serverSessionPools HashMap this seems to be solve the problem of getting a closed pool.   ---  **Affects:** 2.0 final, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.5 final  **Backported to:** [2.0.8](https://github.com/spring-projects/spring-framework/milestone/45?closed=1)","closed","type: bug,","spring-projects-issues","2007-12-18T13:16:25Z","2012-06-19T03:47:22Z"
"","8899","2.0.x reference documentation - Section 3.2.2: remove unneeded cast (Bean Factory) [SPR-4221]","**[Babak Farhang](https://jira.spring.io/secure/ViewProfile.jspa?name=babak)** opened **[SPR-4221](https://jira.spring.io/browse/SPR-4221?redirect=false)** and commented  First off, great job w/ the documentation!  In the last code snippet in the introduction to section 3.2.2 it would be clearer if the explicit (and unneeded) cast used in following widening conversion were removed:  ApplicationContext context = new ClassPathXmlApplicationContext( new String[] {""applicationContext.xml"", ""applicationContext-part2.xml""});  // of course, an ApplicationContext is just a BeanFactory BeanFactory factory = (BeanFactory) context;   //","closed","type: enhancement,","spring-projects-issues","2007-12-06T06:17:48Z","2012-06-19T03:47:17Z"
"","9213","Upload 2.5.2 to maven repo [SPR-4536]","**[Axel Gross](https://jira.spring.io/secure/ViewProfile.jspa?name=ag)** opened **[SPR-4536](https://jira.spring.io/browse/SPR-4536?redirect=false)** and commented  2.5.2 is missing in http://repo1.maven.org/maven2/org/springframework/spring/   ---  **Affects:** 2.5.2  11 votes, 5 watchers","closed","has: votes-jira,","spring-projects-issues","2008-03-04T01:27:18Z","2008-03-05T18:23:39Z"
"","9776","Memory leak in web.filter.Log4jNestedDiagnosticContextFilter and web.context.request.Log4jNestedDiagnosticContextInterceptor, because never calling org.apache.log4j.NDC.remove() [SPR-5103]","**[Attila Király](https://jira.spring.io/secure/ViewProfile.jspa?name=akiraly)** opened **[SPR-5103](https://jira.spring.io/browse/SPR-5103?redirect=false)** and commented  Using org.springframework.web.filter.Log4jNestedDiagnosticContextFilter or org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor can easily lead to severe memory leak.  These classes use org.apache.log4j.NDC (http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/NDC.html) to store thread specific logging data (like url, client info).  NDC holds these diagnostic information in a static Hashtable. The entries in these table have the current Thread as key and a Stack as value. Calling NDC's push() can create a new entry in the table if there were none, and push the parameter into the Stack. However pop() only removes elements from the Stack, and does not remove the whole entry. That's why NDC's api states that users should call NDC.remove(), to remove the entry from the static Hashtable. However Spring is not calling that method (only push, pop). This is the reason why a reference is kept in the entries key to the Thread objects and this leads to OutOfMemory pretty fast (application servers with Thread pooling could be not affected but those creating new Thread objects are).  Log4j api says that the best place to call NDC.remove(), would be at the end of the Thread run, but thats not configable in case of an application server.  So there could be more possibility to fix this: 1. Never call NDC.remove() but state in the api that user should be aware of this. 2. Call NDC.remove() always (this is not appropiate for those who use NDC before Log4jNestedDiagnosticContextFilter too). 3. Call NDC.remove() if NDC.getDepth() returns the same in beforeRequest, afterRequest (could still lead to memory leak, if someone uses push without a pairing pop). 4. Make it configable in the filter if it should call NDC.remove() or not (making the removal the default option). 5. Make a cleaning thread and call NDC.remove() there because NDC.remove() removes all not alive Thread objects also from the Hashtable (this could be an overkill for this).    ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-08-19T18:47:20Z","2012-06-19T03:46:51Z"
"","9041","Unintended whitespace preserved for  element [SPR-4363]","**[Armen Sahag Sarkis Demirjian](https://jira.spring.io/secure/ViewProfile.jspa?name=armen)** opened **[SPR-4363](https://jira.spring.io/browse/SPR-4363?redirect=false)** and commented  While setting a beans' property as follows:  \ \ jdbc:mysql://localhost/test \"" \  and after the creation process of the bean, when i use the property connectionURL in my code to let's say obtain a database connection, i get an exception because the value of the property connectionURL is being assigned as a bunch of \t's followed by jdbc:mysql://localhost/test and then one more time followed by a bunch of \t's in which case i'm not being able to obtain my connection.  I know that i can simply write the property as \jdbc:mysql://localhost/test\ but the issue is that why to have such a bug ?  I have been revising my code thousands and thousands of times until finding this bug!  The code formatter shortcut in Eclipse (Ctrl+Shit+F) formats source code and XML files in a very nice way, but i think such bugs must not appear according to code formatting!  Please issue if this bug has been solved in the newer versions of spring.  Also note that it is not possible to migrate to a newer version of the spring framework easily.  Thanks for reading.   ---  **Affects:** 2.0.3","closed","type: enhancement,","spring-projects-issues","2008-01-21T02:35:40Z","2008-02-14T23:34:10Z"
"","9373","Falling back to saxp parser schema validation in PersistenceUnitReader fails when using Hibernate JPA and Netbeans RCP [SPR-4696]","**[Arkadiusz Świerczek](https://jira.spring.io/secure/ViewProfile.jspa?name=swirek)** opened **[SPR-4696](https://jira.spring.io/browse/SPR-4696?redirect=false)** and commented  Loading persistence.xml file fails because of validating problems. I'm getting following exception:  Caused by: java.lang.IllegalArgumentException: jaxp-order-not-supported: Property 'http://java.sun.com/xml/jaxp/properties/schemaLanguage' must be set before setting property 'http://java.sun.com/xml/jaxp/properties/schemaSource'. at org.apache.xerces.jaxp.DocumentBuilderFactoryImpl.setAttribute(Unknown Source) at org.netbeans.core.startup.DOMFactoryImpl.tryCreate(DOMFactoryImpl.java:150) at org.netbeans.core.startup.DOMFactoryImpl.tryCreate(DOMFactoryImpl.java:126) at org.netbeans.core.startup.DOMFactoryImpl.setAttribute(DOMFactoryImpl.java:117) at org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.validateResource(PersistenceUnitReader.java:178) at org.springframework.orm.jpa.persistenceunit.PersistenceUnitReader.readPersistenceUnitInfos(PersistenceUnitReader.java:138) at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.readPersistenceUnitInfos(DefaultPersistenceUnitManager.java:295) at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.preparePersistenceUnitInfos(DefaultPersistenceUnitManager.java:267) at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.afterPropertiesSet(DefaultPersistenceUnitManager.java:252) at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:194) at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:251) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1390) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1359)  PersistenceUnitReader tries probably to locate xsd, but in Hibernate case it's not in classpath's root. So it's falling back to jaxp validation, but haven't set schemaLanguage first. This scenario works fine in standalone Java application (not Netbeans RCP), actually I don't know why. I've seen many issues with persistence.xml validation solved here, but with Netbeans RCP it still fails.   ---  **Affects:** 2.5.2","closed","status: declined,","spring-projects-issues","2008-04-12T19:06:06Z","2019-01-12T16:28:19Z"
"","9396","CharsetEditor [SPR-4719]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-4719](https://jira.spring.io/browse/SPR-4719?redirect=false)** and commented  A PropertyEditor for java.nio.charset.Charset.   ---  **Attachments:** - [CharsetEditor.java](https://jira.spring.io/secure/attachment/13964/CharsetEditor.java) (_1.47 kB_) - [CharsetEditorTest.java](https://jira.spring.io/secure/attachment/13965/CharsetEditorTest.java) (_1.39 kB_)","closed","type: enhancement,","spring-projects-issues","2008-04-17T09:39:49Z","2012-06-19T03:47:44Z"
"","9267","MessageListenerAdapter is too eager when adapting (SessionAware)MessageListeners [SPR-4590]","**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** opened **[SPR-4590](https://jira.spring.io/browse/SPR-4590?redirect=false)** and commented  When using the jms namespace to configure a message-listener container, a MessageListenerAdapter is created for each configured listener, including (SessionAware)MessageListeners. In the onMessage() method of the adapter, the message is converted to an object using a MessageConverter. This works fine for Text, Map, and ObjectMessages, but not for BytesMessages, which only provide streaming access to the contents.  Thus, when a messagelistener wants to read the bytes stream from the message, the message payload has already been read, resulting in MessageEOFExceptions.  The fix would be to check whether the delegate is a (SessionAware)MessageListener first, and only if it's not do the conversion.   ---  **Affects:** 2.5.2  **Issue Links:** - [SWS-313](https://jira.spring.io/browse/SWS-313) Rewrite Airline sample to use Spring 2.5 features (_**""is depended on by""**_)","closed","type: bug,","spring-projects-issues","2008-03-16T01:48:05Z","2012-06-19T03:47:23Z"
"","9076","CustomDateEditor should provide cause exception when a ParseException is thrown by its dateFormat [SPR-4397]","**[Arik Kfir](https://jira.spring.io/secure/ViewProfile.jspa?name=arikkfir)** opened **[SPR-4397](https://jira.spring.io/browse/SPR-4397?redirect=false)** and commented  When CustomDateEditor receives an illegal date via 'setAsText', a ParseException is thrown from its underlying DateFormat. Currently, CustomDateEditor throws an IllegalArgumentException, ignoring the cause exception. It might be useful to wrap the ParseException as a cause exception in the (wrapping) IllegalArgumentException.   ---  **Affects:** 2.0.8","closed","type: enhancement,","spring-projects-issues","2008-01-26T09:05:30Z","2012-06-19T03:47:49Z"
"","9228","@RequestMapping method resolution is not deterministic [SPR-4551]","**[Ari Miller](https://jira.spring.io/secure/ViewProfile.jspa?name=ari1974)** opened **[SPR-4551](https://jira.spring.io/browse/SPR-4551?redirect=false)** and commented  My description of the problem below uses the 2.5.2 version of the classes described.  Note the problem also occurs in 2.5.1.  We believe we have discovered an issue with the RequestMapping method resolution logic, that can cause particular requests to be handled by the wrong RequestMapping method based on the order in which the controller methods are returned by Class.getDeclaredMethods() (which is not deterministic).  The AnnotationMethodHandlerAdapter.ServletHandlerMethodResolver.resolveHandlerMethod will return the appropriate method to invoke for a given request.  It starts with a series of methods that might potentially be used to handle the request, based on the `@RequestMapping` annotating those methods in the target handler.  The problems stems from the dependency on initial order in the logic used to select from multiple potential methods:  Lines 452 - 472 of AnnotationMethodHandlerAdapter: [CODE] else if (!targetHandlerMethods.isEmpty()) { RequestMappingInfo bestMappingMatch = null; String bestPathMatch = null; for (RequestMappingInfo mapping : targetHandlerMethods.keySet()) { String mappedPath = targetPathMatches.get(mapping); if (bestMappingMatch == null) { bestMappingMatch = mapping; bestPathMatch = mappedPath; } else { if ((mappedPath != null && (bestPathMatch == null || mappedPath.equals(lookupPath) || bestPathMatch.length() < mappedPath.length())) || (bestMappingMatch.methods.length == 0 && mapping.methods.length > 0) || bestMappingMatch.params.length < mapping.params.length) { bestMappingMatch = mapping; bestPathMatch = mappedPath; } } } return targetHandlerMethods.get(bestMappingMatch); } [/CODE] Note that the if((mappedPath != null ... )  logic gives multiple possible opportunities for a method to be deemed a betterMappingMatch than the current best match.  Given certain requestMapping annotations, this results in whichever method is last in the LinkedHashMap targetHandlerMethods being returned, because the last method will meet one of the || conditions in that if statement.  Here is a specific example, with two methods on a single controller that could handle an incoming request with the path /enterAccessCode.do:  `@RequestMapping`(""/**/enterAccessCode.do"") public ModelAndView methodWithPathMapping      -- this is the method we want to handle the request  `@RequestMapping`(method = {RequestMethod.GET, RequestMethod.POST}) public ModelAndView methodWithMethodMapping()  Say the LinkedHashMap targetHandlerMethods has the following order: 1. methodWithPathMapping 2. methodWithMethodMapping  Initially, the bestMappingMatch starts with methodWithPathMapping. When it gets to the if statement, methodWithMethodMapping becomes the bestMappingMatch, because this part of the statement is true: (bestMappingMatch.methods.length == 0 && mapping.methods.length > 0) This is not the desired behavior.  If you have the reverse order: 1. methodWithMethodMapping 2. methodWithPathMapping  methodWithMethodMapping starts out as the bestMappingMatch, but know the first part of the if statement is true, so methodWithPathMapping becomes the best match.  As to this not being deterministic: HandlerMethodResolver.handlerMethods is a LinkedHashSet created based on ReflectionUtils.doWithMethods, which in turn depends on the result of targetClass.getDeclaredMethods() (Javadoc declares:  The elements in the array returned are not sorted and are not in any particular order).   HandlerMethodResolver.handlerMethods is iterated through to create targetHandlerMethods, which is once again then not in a deterministic order.  We've seen this result in different behavior depending on the JVM (and I think hardware) -- some hardware consistently uses the appropriate method to handle the incoming request, some hardware, because of the different method order, uses the inappropriate methodWithMethodMapping. Our workaround for this is to avoid having our general handler use method = {RequestMethod.GET, RequestMethod.POST} for the methodWithMethodMapping -- this makes all of the if statement || blocks false. My claim is that the logic to determine the best mapping match in the if block should be insensitive to initial order when finding the bestMappingMatch.  Here is a crude and untested way to accomplish that: Replace: [CODE] if ((mappedPath != null && (bestPathMatch == null || mappedPath.equals(lookupPath) || bestPathMatch.length() < mappedPath.length())) || (bestMappingMatch.methods.length == 0 && mapping.methods.length > 0) || bestMappingMatch.params.length < mapping.params.length) { bestMappingMatch = mapping; bestPathMatch = mappedPath; } [/CODE] with  [CODE] private boolean isBetterPathMatch(String mappedPath, String mappedPathToCompare, String lookupPath) { return (mappedPath != null && (mappedPathToCompare == null || mappedPath.equals(lookupPath) || mappedPathToCompare.length() < mappedPath.length())); }  private boolean isBetterMethodMatch(RequestMappingInfo mapping, RequestMappingInfo mappingToCompare) { return mappingToCompare.methods.length == 0 && mapping.methods.length > 0; }  private boolean isBetterParamMatch(RequestMappingInfo mapping, RequestMappingInfo mappingToCompare) { return mappingToCompare.params.length < mapping.params.length; }  if (isBetterPathMatch(mapppedPath, bestPathMatch, lookupPath) || (! isBetterPathMatch(bestPathMatch, mappedPath, lookupPath) && isBetterMethodMatch(mapping, bestMappingMatch)) || (! isBetterPathMatch(bestPathMatch, mappedPath, lookupPath) && ! isBetterMethodMatch(bestMappingMatch, mapping) && isBetterParamMatch(mapping, bestMappingMatch)) { bestMappingMatch = mapping; bestPathMatch = mappedPath; } [/CODE]  ---  **Affects:** 2.5.1, 2.5.2  **Attachments:** - [4551Fix.diff](https://jira.spring.io/secure/attachment/13743/4551Fix.diff) (_2.63 kB_) - [AnnotationMethodHandlerAdapter.java](https://jira.spring.io/secure/attachment/13745/AnnotationMethodHandlerAdapter.java) (_29.97 kB_) - [SpringAnnotationMethodHandlerAdapterNotDeterministicTest.java](https://jira.spring.io/secure/attachment/13744/SpringAnnotationMethodHandlerAdapterNotDeterministicTest.java) (_3.74 kB_)  **Issue Links:** - #9744 `@RequestMapping` method resolution issue with duplicate paths","closed","type: bug,","spring-projects-issues","2008-03-06T04:32:16Z","2019-01-13T08:04:54Z"
"","9526","Document that  doesn't work unless JAR file contains directories [SPR-4850]","**[Archie Cobbs](https://jira.spring.io/secure/ViewProfile.jspa?name=archie172)** opened **[SPR-4850](https://jira.spring.io/browse/SPR-4850?redirect=false)** and commented  I spent a BUNCH of time wondering why my   was not auto-detecting beans as it should.  It turns out that that I was building my JAR using the \ ant task with the filesonly=""true"" attribute set, which causes the directory entries to be omitted from the JAR file. Doing so totally breaks Spring's classpath scanning because it relies on ClassLoader.getResource() returning these entries.  So this is an enhancement request simply to document this ""gotcha"" somewhere in the Spring documentation. It may already be documented, but if so at least one person completely missed it and paid dearly :-)    ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-05-22T07:49:48Z","2012-06-19T03:47:45Z"
"","9476","Allow  DispatcherServlet/ServletWrappingController to work with the extended WebDAV methods [SPR-4799]","**[Antonio Mota](https://jira.spring.io/secure/ViewProfile.jspa?name=amsmota)** opened **[SPR-4799](https://jira.spring.io/browse/SPR-4799?redirect=false)** and commented  The DispatcherServlet doesn't allow methods beside HTTP one's, thus disabling the use in WebDAV contexts. This can be corrected by override one method in DispatcherServlet, as discussed in http://forum.springframework.org/showthread.php?t=53472 :      protected void service(HttpServletRequest req, HttpServletResponse resp)     		throws ServletException, java.io.IOException {     	try {     		doService(req, resp);     	} catch (Exception e) {     		// TODO      	}     }  Also, ServletWrappingController could have a constructor to allow the WebDAV methods to be forward to a WevDAV servlet:      public ServletWrappingController() {          	String[] m = { ""OPTIONS"", ""GET"", ""HEAD"", ""POST"", ""TRACE"", ""PROPFIND"",     			""PROPPATCH"", ""MKCOL"", ""COPY"", ""PUT"", ""DELETE"", ""MOVE"", ""LOCK"",     			""UNLOCK"", ""VERSION-CONTROL"" };          	setSupportedMethods(m);          }  or even better, issuing a OPTIONS to the wrapped servlet and setting the supported methods to it's result .  ---  **Issue Links:** - #18350 Regression: HttpEntityMethodProcessor does not allow other Http methods than defined in the HttpMethod Enum  (_**""depends on""**_) - #12640 Add support for the HTTP PATCH method - #14448 RequestMethodsRequestCondition fails on unsupported method types  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3d87718fc6d14a9638682317121f9647e0441cc3  2 votes, 5 watchers","closed","type: enhancement,","spring-projects-issues","2008-05-12T02:52:56Z","2019-01-11T18:01:33Z"
"","9797","HibernateTemplate.bulkUpdate when some parameter is a collection [SPR-5124]","**[Antonio Martinez](https://jira.spring.io/secure/ViewProfile.jspa?name=wackyworm)** opened **[SPR-5124](https://jira.spring.io/browse/SPR-5124?redirect=false)** and commented  Hello.  I'm trying to execute a query using the in clause, something like: ""delete from table where name = ? and id in (?)"".  When I execute getHibernateTemplate().bulkUpdate(""delete from table where name = ? and id in (?)"", new Object[]{""name"", new Object[]{1, 2, 3}});  I get and error because the second element in the array is an array. This is because in the bulkUpdate method the parameters are inserted in this code:  for (int i = 0; i < values.length; i++) { queryObject.setParameter(i, values[i]); }  There colud be a comprobation of the type of the value, and if it is a Collection or an array (Object[]) use setParemeterList method instead.  I think it's importar because it is a limitation of the framework.  Many thanks, Antonio.   ---  **Affects:** 2.5.5  1 votes, 2 watchers","closed","type: enhancement,","spring-projects-issues","2008-08-28T21:19:32Z","2012-06-19T09:36:29Z"
"","9529","Missing EclipseLink import in the ORM bundle [SPR-4853]","**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-4853](https://jira.spring.io/browse/SPR-4853?redirect=false)** and commented  The 2.5.4 ORM bundle needs an import of org.eclipse.persistence.expressions so that it'll work with EclipseLink in an OSGi environment. Adding the following to its Import-Package header should do the trick:  org.eclipse.persistence.expressions;version=""[1.0.0.M5, 2.0.0)"";resolution:=optional  It may also need one for the equivalent TopLink package. It has such an import in the SpringSource Bundle Repo, but may not as standard. (I'd check, but SourceForge is inaccessible from Southampton).   ---  **Affects:** 2.5.4","closed","type: bug,","spring-projects-issues","2008-05-22T20:09:01Z","2012-06-19T03:47:37Z"
"","9328","TransactionManager not correctly configured after tests with @DirtiesContext [SPR-4651]","**[Andy Schäfer](https://jira.spring.io/secure/ViewProfile.jspa?name=gomil)** opened **[SPR-4651](https://jira.spring.io/browse/SPR-4651?redirect=false)** and commented  I'm using the Spring 2.5 support-class for TestNG in conjunction with `@DirtiesContext`. Expected behavior for the sample below is, that no testdata will be left in the database after testexecution because of the default rollback. Without `@DirtiesContext`  on method test1() this works fine as exptected. In conjunction with `@DirtiesContext` the data isn't cleaned up. I assume that reinitialization of the applicationContext for test2() leaves the newly created transactionManager in commit-mode.  Thanks in advance Andy  ---  `@ContextConfiguration`(locations = ""/spring-configs/application.spring.xml"") `@TransactionConfiguration`(transactionManager = ""transactionManager"", defaultRollback = true) public class MyTest extends AbstractTransactionalTestNGSpringContextTests { `@Test` `@DirtiesContext` public void test1() { }      @Test(dependsOnMethods = ""test1"")     public void test2() throws Exception     {         String sql = ""INSERT INTO TEST_TABLE VALUES(?)"";         simpleJdbcTemplate.update(sql, 444);     }  }  ---  **Affects:** 2.5 final  **Attachments:** - [spr4651.zip](https://jira.spring.io/secure/attachment/14086/spr4651.zip) (_2.57 kB_)","closed","type: bug,","spring-projects-issues","2008-04-02T02:56:23Z","2019-01-13T08:04:35Z"
"","9826","Superclasses not considered in property name determination [SPR-5153]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-5153](https://jira.spring.io/browse/SPR-5153?redirect=false)** and commented  Consider  public interface A {} public interface B extends A {}  public class Bean { private B myB; public A getB() { return myB; } public void setB(B b) { myB = b; } }  In a bean post processor the passed in PropertyDescriptor for property ""b"" contains a read method called getB(), but the write method is null. If I change getB() to return type B then the write method is non-null. At the very least this seems counter-intuitive, I would argue that it is actually a bug.   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-09-12T01:39:37Z","2012-06-19T09:36:12Z"
"","9681","Expose Enhancer.setUseFactory() [SPR-5006]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-5006](https://jira.spring.io/browse/SPR-5006?redirect=false)** and commented  The use of Factory in cglib causes a chain of OSGi import problems. It would be great if this could be disable through the use of Enhancer.setUseFactory().   ---  **Affects:** 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-14T20:46:00Z","2008-10-21T22:03:18Z"
"","9598","NPE in AbstractCachingLabeledEnumResolver during namespace parsing [SPR-4923]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4923](https://jira.spring.io/browse/SPR-4923?redirect=false)** and commented  This is using version of 2.5.5 from CVS  org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected excep tion parsing XML document from URL [bundleentry://124/META-INF/spring/configurat ion.xml]; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadB eanDefinitions(XmlBeanDefinitionReader.java:420) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBea nDefinitions(XmlBeanDefinitionReader.java:342) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBea nDefinitions(XmlBeanDefinitionReader.java:310) at org.springframework.beans.factory.support.AbstractBeanDefinitionReade r.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143) at org.springframework.beans.factory.support.AbstractBeanDefinitionReade r.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178) at org.springframework.beans.factory.support.AbstractBeanDefinitionReade r.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149) at org.springframework.osgi.context.support.OsgiBundleXmlApplicationCont ext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:166) at org.springframework.osgi.context.support.OsgiBundleXmlApplicationCont ext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:132) at org.springframework.context.support.AbstractRefreshableApplicationCon text.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123) at org.springframework.context.support.AbstractApplicationContext.obtain FreshBeanFactory(AbstractApplicationContext.java:423) at org.springframework.osgi.context.support.AbstractDelegatedExecutionAp plicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java: 211) at org.springframework.osgi.extender.internal.dependencies.startup.Depen dencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContex tExecutor.java:222) at org.springframework.osgi.extender.internal.dependencies.startup.Depen dencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContext Executor.java:173) at org.springframework.osgi.context.support.AbstractDelegatedExecutionAp plicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:136) at org.springframework.osgi.extender.internal.activator.ContextLoaderLis tener$2.run(ContextLoaderListener.java:749) at java.lang.Thread.run(Thread.java:595) java.lang.NullPointerException at org.springframework.core.enums.AbstractCachingLabeledEnumResolver.get LabeledEnumByLabel(AbstractCachingLabeledEnumResolver.java:105) at org.springframework.osgi.config.AbstractReferenceDefinitionParser.pro cessCardinalityString(AbstractReferenceDefinitionParser.java:300) at org.springframework.osgi.config.AbstractReferenceDefinitionParser.det ermineCardinality(AbstractReferenceDefinitionParser.java:288) at org.springframework.osgi.config.AbstractReferenceDefinitionParser.app lyDefaultCardinality(AbstractReferenceDefinitionParser.java:311) at org.springframework.osgi.config.AbstractReferenceDefinitionParser.doP arse(AbstractReferenceDefinitionParser.java:223) at org.springframework.osgi.config.AbstractReferenceDefinitionParser.par seInternal(AbstractReferenceDefinitionParser.java:181) at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.pa rse(AbstractBeanDefinitionParser.java:56) at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(N amespaceHandlerSupport.java:69) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.pa rseCustomElement(BeanDefinitionParserDelegate.java:1255) at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.pa rseCustomElement(BeanDefinitionParserDelegate.java:1245) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentRe ader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135) at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentRe ader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registe rBeanDefinitions(XmlBeanDefinitionReader.java:507) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadB eanDefinitions(XmlBeanDefinitionReader.java:398) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBea nDefinitions(XmlBeanDefinitionReader.java:342) at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBea nDefinitions(XmlBeanDefinitionReader.java:310) at org.springframework.beans.factory.support.AbstractBeanDefinitionReade r.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143) at org.springframework.beans.factory.support.AbstractBeanDefinitionReade r.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178) at org.springframework.beans.factory.support.AbstractBeanDefinitionReade r.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149) at org.springframework.osgi.context.support.OsgiBundleXmlApplicationCont ext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:166) at org.springframework.osgi.context.support.OsgiBundleXmlApplicationCont ext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:132) at org.springframework.context.support.AbstractRefreshableApplicationCon text.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123) at org.springframework.context.support.AbstractApplicationContext.obtain FreshBeanFactory(AbstractApplicationContext.java:423) at org.springframework.osgi.context.support.AbstractDelegatedExecutionAp plicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java: 211) at org.springframework.osgi.extender.internal.dependencies.startup.Depen dencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContex tExecutor.java:222) at org.springframework.osgi.extender.internal.dependencies.startup.Depen dencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContext Executor.java:173) at org.springframework.osgi.context.support.AbstractDelegatedExecutionAp plicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:136) at org.springframework.osgi.extender.internal.activator.ContextLoaderLis tener$2.run(ContextLoaderListener.java:749) at java.lang.Thread.run(Thread.java:595)  ---  **Affects:** 2.5.4  **Issue Links:** - #9599 NPE in AbstractCachingLabeledEnumResolver (_**""is duplicated by""**_)","closed","in: core,","spring-projects-issues","2008-06-16T00:20:00Z","2019-01-11T18:29:51Z"
"","9530","Add secondary BFPP processing so that Spring-DM can process the context in stageTwo() [SPR-4854]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4854](https://jira.spring.io/browse/SPR-4854?redirect=false)** and commented  The ApplicationContext lifecycle starts like this:      				postProcessBeanFactory(beanFactory);          				invokeBeanFactoryPostProcessors(beanFactory);          				registerBeanPostProcessors(beanFactory);  In Spring-DM we then block here until all dependencies are satisified. Unfortunately this means that no BFPP's can be run after dependencies are satisfied. What I would like is some extra step in the lifecycle that runs special BFPP's in stage two. The easiest way to do this might be to create an new BFPP interface that gets run in stageTwo(). Unfortunately doing stuff in BPP's (which are run in stageTwo()) is too late because you can't modify the wiring model at this point very easily.   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-22T21:26:40Z","2012-06-19T09:36:29Z"
"","9507","ConfigurableBeanFactory.addBeanPostProcessor() does not observe Ordered [SPR-4831]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4831](https://jira.spring.io/browse/SPR-4831?redirect=false)** and commented  BPP's created by being present as bean definitions in the application context are ordered according to their PriorityOrdered precedence. However, BPP's added programmatically are not ordered in any way. At a minimum their should probably be an alternative fn that adds BPP's in an ordered fashion.  I also wonder whether AbstractApplicationContext.registerBeanPostProcessors() should perhaps take into account BPP's that have already been added - rather than simply use getBeanNamesForType().   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-18T20:22:20Z","2008-10-28T01:27:39Z"
"","9385","Need a ContextErrorEvent [SPR-4708]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4708](https://jira.spring.io/browse/SPR-4708?redirect=false)** and commented  We get events for successful ApplicationContext refresh and closure but nothing if there is a problem. This makes custom error handling very difficult. A simple solution would be to post a ContextErrorEvent if the ApplicationContext failed to initialize for any reason.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-04-15T02:21:53Z","2008-07-01T22:53:59Z"
"","9216","JndiObjectFactoryBean does not push the ContextClassLoader [SPR-4539]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4539](https://jira.spring.io/browse/SPR-4539?redirect=false)** and commented  We are seeing the following error:   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-04T18:43:49Z","2012-06-19T03:46:55Z"
"","9189","NPE in AspectJ [SPR-4512]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4512](https://jira.spring.io/browse/SPR-4512?redirect=false)** and commented  We see this exception intermittently in our tests. Let me know if I can provide any more information  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.osgi.service.exporter.support.OsgiServiceFactoryBean#0': Cannot create inner bean 'wlevs:stream#3e3672' of type [com.bea.wlevs.spring.StreamFactoryBean] while setting bean property 'target'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'wlevs:stream#3e3672': Cannot resolve reference to bean 'monitor' while setting bean property 'listeners' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'monitor' defined in URL [bundleentry://135/META-INF/spring/com.bea.wlevs.monitor.xml]: Cannot create inner bean 'wlevs:processor#958f49' of type [com.bea.wlevs.spring.ProcessorFactoryBean] while setting bean property 'processor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'wlevs:processor#958f49': Invocation of init method failed; nested exception is java.lang.NullPointerException [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:230) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) [java] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) [java] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:394) [java] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:736) [java] 	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:248) [java] 	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136) [java] 	at java.lang.Thread.run()V(Unknown Source) [java] org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'wlevs:stream#3e3672': Cannot resolve reference to bean 'monitor' while setting bean property 'listeners' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'monitor' defined in URL [bundleentry://135/META-INF/spring/com.bea.wlevs.monitor.xml]: Cannot create inner bean 'wlevs:processor#958f49' of type [com.bea.wlevs.spring.ProcessorFactoryBean] while setting bean property 'processor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'wlevs:processor#958f49': Invocation of init method failed; nested exception is java.lang.NullPointerException [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:287) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:126) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:219) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) [java] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) [java] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:394) [java] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:736) [java] 	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:248) [java] 	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136) [java] 	at java.lang.Thread.run()V(Unknown Source) [java] org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'monitor' defined in URL [bundleentry://135/META-INF/spring/com.bea.wlevs.monitor.xml]: Cannot create inner bean 'wlevs:processor#958f49' of type [com.bea.wlevs.spring.ProcessorFactoryBean] while setting bean property 'processor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'wlevs:processor#958f49': Invocation of init method failed; nested exception is java.lang.NullPointerException [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:230) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) [java] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:287) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:126) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'wlevs:processor#958f49': Invocation of init method failed; nested exception is java.lang.NullPointerException [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1260) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:438) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:219) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) [java] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:287) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:126) [java] java.lang.NullPointerException [java] 	at org.aspectj.lang.reflect.AjTypeSystem.getAjType(AjTypeSystem.java:39) [java] 	at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.initialize(Java15ReflectionBasedReferenceTypeDelegate.java:63) [java] 	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.create15Delegate(ReflectionBasedReferenceTypeDelegateFactory.java:56) [java] 	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:42) [java] 	at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:110) [java] 	at org.aspectj.weaver.World.resolveToReferenceType(World.java:378) [java] 	at org.aspectj.weaver.World.resolve(World.java:271) [java] 	at org.aspectj.weaver.World.resolve(World.java:191) [java] 	at org.aspectj.weaver.BoundedReferenceType.\(BoundedReferenceType.java:75) [java] 	at org.aspectj.weaver.TypeVariableReferenceType.\(TypeVariableReferenceType.java:35) [java] 	at org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter.fromType(JavaLangTypeToResolvedTypeConverter.java:82) [java] 	at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getTypeVariables(Java15ReflectionBasedReferenceTypeDelegate.java:153) [java] 	at org.aspectj.weaver.World.makeGenericTypeFrom(World.java:449) [java] 	at org.aspectj.weaver.World.resolveToReferenceType(World.java:386) [java] 	at org.aspectj.weaver.World.resolve(World.java:271) [java] 	at org.aspectj.weaver.World.resolve(World.java:191) [java] 	at org.aspectj.weaver.World.resolve(World.java:338) [java] 	at org.aspectj.weaver.reflect.ReflectionWorld.resolve(ReflectionWorld.java:102) [java] 	at org.aspectj.weaver.reflect.ReflectionWorld.resolve(ReflectionWorld.java:92) [java] 	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.toResolvedTypeArray(ReflectionBasedReferenceTypeDelegateFactory.java:214) [java] 	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createResolvedMethod(ReflectionBasedReferenceTypeDelegateFactory.java:107) [java] 	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createResolvedMember(ReflectionBasedReferenceTypeDelegateFactory.java:98) [java] 	at org.aspectj.weaver.reflect.ReflectionShadow.makeExecutionShadow(ReflectionShadow.java:53) [java] 	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution(PointcutExpressionImpl.java:100) [java] 	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution(PointcutExpressionImpl.java:92) [java] 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch(AspectJExpressionPointcut.java:362) [java] 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:239) [java] 	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:205) [java] 	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:244) [java] 	at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:278) [java] 	at org.springframework.aop.aspectj.annotation.AspectJProxyFactory.addAdvisorsFromAspectInstanceFactory(AspectJProxyFactory.java:120) [java] 	at org.springframework.aop.aspectj.annotation.AspectJProxyFactory.addAspect(AspectJProxyFactory.java:97) [java] > [java] Exception in thread ""SpringOsgiExtenderThread-30"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.osgi.service.exporter.support.OsgiServiceFactoryBean#0': Cannot create inner bean 'wlevs:stream#3e3672' of type [com.bea.wlevs.spring.StreamFactoryBean] while setting bean property 'target'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'wlevs:stream#3e3672': Cannot resolve reference to bean 'monitor' while setting bean property 'listeners' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'monitor' defined in URL [bundleentry://135/META-INF/spring/com.bea.wlevs.monitor.xml]: Cannot create inner bean 'wlevs:processor#958f49' of type [com.bea.wlevs.spring.ProcessorFactoryBean] while setting bean property 'processor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'wlevs:processor#958f49': Invocation of init method failed; nested exception is java.lang.NullPointerException [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:230) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) [java] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) [java] 	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:394) [java] 	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:736) [java] 	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:248) [java] 	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136) [java] 	at java.lang.Thread.run()V(Unknown Source) [java] Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'wlevs:stream#3e3672': Cannot resolve reference to bean 'monitor' while setting bean property 'listeners' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'monitor' defined in URL [bundleentry://135/META-INF/spring/com.bea.wlevs.monitor.xml]: Cannot create inner bean 'wlevs:processor#958f49' of type [com.bea.wlevs.spring.ProcessorFactoryBean] while setting bean property 'processor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'wlevs:processor#958f49': Invocation of init method failed; nested exception is java.lang.NullPointerException [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:287) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:126) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:219) [java] 	... 15 more [java] Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'monitor' defined in URL [bundleentry://135/META-INF/spring/com.bea.wlevs.monitor.xml]: Cannot create inner bean 'wlevs:processor#958f49' of type [com.bea.wlevs.spring.ProcessorFactoryBean] while setting bean property 'processor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'wlevs:processor#958f49': Invocation of init method failed; nested exception is java.lang.NullPointerException [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:230) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) [java] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:287) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:126) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'wlevs:processor#958f49': Invocation of init method failed; nested exception is java.lang.NullPointerException [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1260) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:438) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:219) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383) [java] 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245) [java] 	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242) [java] 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:287) [java] 	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:126) [java] Caused by: java.lang.NullPointerException [java] 	at org.aspectj.lang.reflect.AjTypeSystem.getAjType(AjTypeSystem.java:39) [java] 	at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.initialize(Java15ReflectionBasedReferenceTypeDelegate.java:63) [java] 	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.create15Delegate(ReflectionBasedReferenceTypeDelegateFactory.java:56) [java] 	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate(ReflectionBasedReferenceTypeDelegateFactory.java:42) [java] 	at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate(ReflectionWorld.java:110) [java] 	at org.aspectj.weaver.World.resolveToReferenceType(World.java:378) [java] 	at org.aspectj.weaver.World.resolve(World.java:271) [java] 	at org.aspectj.weaver.World.resolve(World.java:191) [java] 	at org.aspectj.weaver.BoundedReferenceType.\(BoundedReferenceType.java:75) [java] 	at org.aspectj.weaver.TypeVariableReferenceType.\(TypeVariableReferenceType.java:35) [java] 	at org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter.fromType(JavaLangTypeToResolvedTypeConverter.java:82) [java] 	at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getTypeVariables(Java15ReflectionBasedReferenceTypeDelegate.java:153) [java] 	at org.aspectj.weaver.World.makeGenericTypeFrom(World.java:449) [java] 	at org.aspectj.weaver.World.resolveToReferenceType(World.java:386) [java] 	at org.aspectj.weaver.World.resolve(World.java:271) [java] 	at org.aspectj.weaver.World.resolve(World.java:191) [java] 	at org.aspectj.weaver.World.resolve(World.java:338) [java] 	at org.aspectj.weaver.reflect.ReflectionWorld.resolve(ReflectionWorld.java:102) [java] 	at org.aspectj.weaver.reflect.ReflectionWorld.resolve(ReflectionWorld.java:92) [java] 	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.toResolvedTypeArray(ReflectionBasedReferenceTypeDelegateFactory.java:214) [java] 	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createResolvedMethod(ReflectionBasedReferenceTypeDelegateFactory.java:107) [java] 	at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createResolvedMember(ReflectionBasedReferenceTypeDelegateFactory.java:98) [java] 	at org.aspectj.weaver.reflect.ReflectionShadow.makeExecutionShadow(ReflectionShadow.java:53) [java] 	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution(PointcutExpressionImpl.java:100) [java] 	at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution(PointcutExpressionImpl.java:92) [java] 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch(AspectJExpressionPointcut.java:362) [java] 	at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:239) [java] 	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:205) [java] 	at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:244) [java] 	at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:278) [java] 	at org.springframework.aop.aspectj.annotation.AspectJProxyFactory.addAdvisorsFromAspectInstanceFactory(AspectJProxyFactory.java:120) [java] 	at org.springframework.aop.aspectj.annotation.AspectJProxyFactory.addAspect(AspectJProxyFactory.java:97)   ---  **Affects:** 2.5.1","closed","in: core,","spring-projects-issues","2008-02-27T21:35:02Z","2012-06-19T03:46:38Z"
"","9160","ClassUtils.getAllInterfacesForClass() does not consider interface hierarchy [SPR-4483]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4483](https://jira.spring.io/browse/SPR-4483?redirect=false)** and commented  Costin apparently raised this a while ago, but it just bit me.  Given the hierarchy C -> I1 -> I2, where C is a class and I{1,2} are interfaces, ClassUtils.getAllInterfacesForClass() returns I1 but not I2. I believe it should return both.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-20T21:11:11Z","2008-03-18T11:54:23Z"
"","9114","HessianClientInterceptor does not set context classloader during invoke() [SPR-4436]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4436](https://jira.spring.io/browse/SPR-4436?redirect=false)** and commented  This is the same problem that Juergen fixed on the server-side. Hessian relies on the context classloader for loading impl classes for serialization, but HessianClientInterceptor does not push the context classloader with the bean class loader during invoke(). It should :)   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-07T06:04:53Z","2012-06-19T03:46:55Z"
"","8895","HessianServiceExporter does not set CCL [SPR-4217]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4217](https://jira.spring.io/browse/SPR-4217?redirect=false)** and commented  I noticed this while doing some debugging. I can't convince myself whether this is a bug or not. Basically Hessian makes extensive use of the ContextClassLoader to load serialized types. However, the HessianServiceExporter does not do anything with the CCL. To my mind the CCL should be set to the bean classloader around each invoke. This is especially important in OSGi where the client Classloader might be something different to the bundle classloader.  But I could be wrong. Whaddaya think?   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-05T19:06:08Z","2012-06-19T03:47:12Z"
"","8886","Support Hessian debug on Hessian 3.1.3+ as well as on Hessian 3.0.20+ [SPR-4208]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4208](https://jira.spring.io/browse/SPR-4208?redirect=false)** and commented  Hessian 3.1.3 has a nice debug feature in its HessianServlet, which we do not use. We should upgrade to Hessian 3.1.3 and support setting debug on our exporter. The attached patch does this.  ---  **Affects:** 2.5 final  **Attachments:** - [hessian.patch](https://jira.spring.io/secure/attachment/13182/hessian.patch) (_8.39 kB_)  **Issue Links:** - #8884 Hessian client version defaults to 1 and there is no easy way to change it","closed","type: enhancement,","spring-projects-issues","2007-12-04T03:55:01Z","2019-01-11T17:01:21Z"
"","8884","Hessian client version defaults to 1 and there is no easy way to change it [SPR-4206]","**[Andy Piper](https://jira.spring.io/secure/ViewProfile.jspa?name=andypiper)** opened **[SPR-4206](https://jira.spring.io/browse/SPR-4206?redirect=false)** and commented  The HessianProxyFactoryBean deafults to Hessian protocol version 1 and there is no easy way to change it (HessianProxyFactory supports the methods setHessian2Request and setHessian2Reply but these are not exposed in the HPFB). I would suggest that these are exposed in some easy-to-use version property.  ---  **Affects:** 2.5 final  **Issue Links:** - #8886 Support Hessian debug on Hessian 3.1.3+ as well as on Hessian 3.0.20+","closed","type: enhancement,","spring-projects-issues","2007-12-03T22:12:34Z","2019-01-11T17:01:27Z"
"","9218","Transactional JUnit test with timeout does not create a transaction [SPR-4541]","**[Andy Kriger](https://jira.spring.io/secure/ViewProfile.jspa?name=kokaku)** opened **[SPR-4541](https://jira.spring.io/browse/SPR-4541?redirect=false)** and commented  Create a class for this source and run it as a unit test.  - EXPECT: Both tests pass - ACTUAL: withTimeout fails  ```java import org.junit.*; import org.junit.runner.RunWith; import org.springframework.test.context.transaction.TransactionConfiguration; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import org.springframework.transaction.annotation.Transactional; import org.springframework.beans.factory.annotation.Autowired; import org.hibernate.SessionFactory;  @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations = {  /* !!! YOU NEED A SPRING CONFIG THAT DEFINES A SESSIONFACTORY & TXMANAGER !!! */ }) @Transactional public class SpringBug {     @Autowired    protected SessionFactory sessionFactory;        @Test    public void withoutTimeout() {       sessionFactory.getCurrentSession();    }     @Test(timeout = 60000)    public void withTimeout() {       sessionFactory.getCurrentSession();    }  } ```  ---  **Affects:** 2.5.1  **Issue Links:** - #9753 Support programmatic starting and stopping of transactions in the TestContext framework","closed","type: enhancement,","spring-projects-issues","2008-03-05T00:15:53Z","2019-01-11T17:14:46Z"
"","9470","MBeanExporter with only notification listeners should look up server if null when registering listeners [SPR-4793]","**[Andy Goldstein](https://jira.spring.io/secure/ViewProfile.jspa?name=agoldstein)** opened **[SPR-4793](https://jira.spring.io/browse/SPR-4793?redirect=false)** and commented  When defining an MBeanExporter that only sets up notification listeners, I get an NPE on line 941 in MBeanExporter.java in registerNotificationListeners() because server is null.  registerBeans() behaves differently - on line 519, it checks to see if the server is null, and then tries to locate the MBean server if it is null.  In my case, I am not exporting any beans; I am only trying to register a notification listener.  Would it be possible to provide the same behavior for registerNotificationListeners()?  (My workaround is to configure the mbeanServer property of my MBeanExporter in my app context to be an MBeanServerFactoryBean with locateExistingServerIfPossible set to true.)   ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-05-09T01:40:49Z","2012-06-19T03:46:56Z"
"","9184","CustomizableTraceInterceptor does not escape '$' while logging exception information [SPR-4507]","**[Andrzej Więcław](https://jira.spring.io/secure/ViewProfile.jspa?name=jedrekwie)** opened **[SPR-4507](https://jira.spring.io/browse/SPR-4507?redirect=false)** and commented  CustomizableTraceInterceptor contains a bug. In specific situation, when exception has been thrown and it need to be logged in, interceptor tries to print string representation of the Throwable. In most cases Throwable.toString() method returns _detailsMessage_. If _detailsMessage_ contains '$' sign then Matcher throws following exception:  ``` java.lang.IllegalArgumentException: Illegal group reference  java.util.regex.Matcher.appendReplacement(Matcher.java:561) org.springframework.aop.interceptor.CustomizableTraceInterceptor.replacePlaceholders(CustomizableTraceInterceptor.java:360) org.springframework.aop.interceptor.CustomizableTraceInterceptor.invokeUnderTrace(CustomizableTraceInterceptor.java:278) org.springframework.aop.interceptor.AbstractTraceInterceptor.invoke(AbstractTraceInterceptor.java:113) org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:176) org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:615) ... ```  It seems like there is a need to call private _escape()_ method before passing _throwable.toString()_ to _Matcher.appendReplacement()_ method.   ---  **Affects:** 1.2.7, 2.0.7, 2.0.8  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-02-26T17:26:09Z","2012-06-19T03:46:55Z"
"","9699","Introspection problem: setter not found when corresponding getter uses a covariant return type [SPR-5024]","**[Andruschuk Borislav](https://jira.spring.io/secure/ViewProfile.jspa?name=borislav.andruschuk)** opened **[SPR-5024](https://jira.spring.io/browse/SPR-5024?redirect=false)** and commented  Spring overrides property descriptors during introspection, i.e. in a case when: 1. you have abstract class with declared abstract generic getter method (for example: abstract IDao getDao() or abstract \ T getDao() ) 2. you redefine return type of this method in nested class (for example IExtendedDao extends IDao: IExtendedDao getDao()) 3. add corresponding setter to nested class (i.e.: void setDao(IExtendedDao dao)) 4. try to set this dao field using Spring (via xml configuration or Autowire annotation)  Result: context initialization fails with the follwoing error:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'facade' defined in class path resource [ac-test.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'dao' of bean class [TestFacade]: Bean property 'dao' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?  Expected result: nested class contains correctly defined setter and getter methods with necessary return and method parameters (i.e. the parameter type of the setter matches the return type of the getter) - thus context should be initialized well (in spite of the fact that abstract class contains getter as described above, because the return type of this getter is supertype of return type of getter from nested class -  return type doesn't break hierarchy of types (i.e. IDao","closed","type: enhancement,","spring-projects-issues","2008-07-21T17:24:03Z","2012-06-19T03:47:03Z"
"","9142","Problem with SimpleJdbcTemplate#update with null values in DB2 [SPR-4465]","**[Andrew Wright](https://jira.spring.io/secure/ViewProfile.jspa?name=ayax79)** opened **[SPR-4465](https://jira.spring.io/browse/SPR-4465?redirect=false)** and commented  When trying to make updates with SimpleJdbcTemplate:  getSimpleJdbcTemplate().update(""INSERT INTO jiveGroup (name, description, groupID, creationDate, modificationDate) VALUES (?, ?, ?, ?, ?)"", group.getName(), group.getDescription(), id, group.getCreationDate().getTime(), group.getModificationDate().getTime());  when the value of group.getDescription() is null I receive the following exception:  Caused by: com.ibm.db2.jcc.b.SqlException: [jcc][10271][10295][3.50.152] Unrecognized JDBC type: 0. ERRORCODE=-4228, SQLSTATE=null at com.ibm.db2.jcc.b.wc.a(wc.java:55) at com.ibm.db2.jcc.b.wc.a(wc.java:102) at com.ibm.db2.jcc.b.cb.i(cb.java:1219) at com.ibm.db2.jcc.b.uk.b(uk.java:612) at com.ibm.db2.jcc.b.uk.setNull(uk.java:584) at org.springframework.jdbc.core.StatementCreatorUtil s.setParameterValueInternal(StatementCreatorUtils. java:173) at org.springframework.jdbc.core.StatementCreatorUtil s.setParameterValue(StatementCreatorUtils.java:88) at org.springframework.jdbc.core.ArgPreparedStatement Setter.setValues(ArgPreparedStatementSetter.java:5 1) at org.springframework.jdbc.core.JdbcTemplate$2.doInP reparedStatement(JdbcTemplate.java:771) at org.springframework.jdbc.core.JdbcTemplate.execute (JdbcTemplate.java:566)  The issue was due to the following line inside oforg.springframework.jdbc.core.StatementCreatorUtils:180  setNull(paramIndex, sqlTypeToUse);  where sqlTypeToUse is equal to java.sql.Types.NULL. DB2 does not like receiving Types.NULL on update. I discovered that if you use Types.VARCHAR it works, even if the type is not a varchar type (tested with BIGINT).  As a work around in my app I subclasses SimpleJdbcTemplate and added the following check in my update method: // test for db2 (jive specific) if (ConnectionManager.getDatabaseType() == ConnectionManager.DatabaseType.DB2) { List\ list = asList(args); // check for null values and insert a SqlParameter value in place (using google collections) List\ transformed = transform(list, new Function() { public Object apply(`@Nullable` Object o) { if (o == null) { return new SqlParameterValue(Types.VARCHAR, null); } return o; } });  It would be great StatementCreatorUtils could handle DB2 in similiar way with nulls, so I can get rid of the above hack.  ---  **Issue Links:** - #9485 Problem with SimpleJdbcTemplate#update with null values in Derby","closed","type: enhancement,","spring-projects-issues","2008-02-14T04:43:36Z","2019-01-11T17:32:01Z"
"","9263","Ref Docs Section 8.3.7.3 should suggest using @Qualifier annotation to auto-wire by name [SPR-4586]","**[Andrew Swan](https://jira.spring.io/secure/ViewProfile.jspa?name=aswan)** opened **[SPR-4586](https://jira.spring.io/browse/SPR-4586?redirect=false)** and commented  Section 8.3.7.3 of the Reference Docs talks about various alternatives to autowiring tests by type, namely:  * looking up the required bean by name, * using the `@Resource` annotation, * disabling DI altogether by explicitly configuring the test class with `@TestExecutionListeners` and omitting DependencyInjectionTestExecutionListener  This is all very well unless the relevant setter is in a Spring class and has a hard-coded `@Autowired` annotation (for example, AbstractTransactionalTestNGSpringContextTests#setDataSource). In such cases, there is a fourth solution:  * override the setter and use the `@Qualifier` annotation as follows (where ""myDataSource"" is the bean id of the desired DataSource):    `@Override`   `@Autowired`   public void setDataSource(`@Qualifier`(""myDataSource"") DataSource dataSource) {   super.setDataSource(dataSource);   }  This solution is currently documented on the support forum at least twice: http://forum.springframework.org/showthread.php?t=48997 http://forum.springframework.org/showthread.php?t=47468  It therefore sounds like something that needs to be in the Reference Docs, right in para 2 of Section 8.3.7.3 (""Dependency Injection of test fixtures"") where it's needed.   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-14T17:27:11Z","2012-06-19T03:46:36Z"
"","9604","Bean instantiation infinite loop in case of classes not found [SPR-4929]","**[Andrei Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=shadow)** opened **[SPR-4929](https://jira.spring.io/browse/SPR-4929?redirect=false)** and commented  While trying to setup a test environment, I forgot to add some jars to the classpath. When Spring starts instantating beans, it is ignoring ClassNotFoundException and then it enters in an infinite loop, from what I see: [factory.support.DefaultListableBeanFactory] Ignoring bean class loading failure for bean 'cacheManager' org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find class [org.springframework.cache.ehcache.EhCacheManagerFactoryBean] for bean with name 'cacheManager' defined in class path resource [security/../applicationContext-cache.xml]; nested exception is java.lang.ClassNotFoundException: org.springframework.cache.ehcache.EhCacheManagerFactoryBean at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass(AbstractBeanFactory.java:1138) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:522) at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1174) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:222) at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:506) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:363)    ---  **Affects:** 2.5.5  **Attachments:** - [com.webmedia.fresh.TestAction-output.rar](https://jira.spring.io/secure/attachment/14192/com.webmedia.fresh.TestAction-output.rar) (_1.50 MB_)","closed","in: core,","spring-projects-issues","2008-06-17T22:20:30Z","2019-01-11T18:28:48Z"
"","9478","jee:remote-slsb does not work for EJB3 beans on WebSphere 6.1 [SPR-4801]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-4801](https://jira.spring.io/browse/SPR-4801?redirect=false)** and commented  See http://forum.springframework.org/showthread.php?p=165620  I could reproduce the issue and found out that the problem is the instanceof-check in org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor (line 227). There is a check whether the resolved object is of type EJBObject, which is not the case for a plain EJB3 instance.    ---  **Affects:** 2.5.4","closed","in: core,","spring-projects-issues","2008-05-12T18:05:09Z","2012-06-19T03:47:45Z"
"","9387","Improve TypeMismatchException message for proxies [SPR-4710]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-4710](https://jira.spring.io/browse/SPR-4710?redirect=false)** and commented  In case of proxies the message of TypeMismatchException usually states incompatibilities concerning $ProxySomething which is not very informative. I suggest to improve the message to provide more details (e.g. superclass/ implemented interfaces) of the proxy to facilitate finding the problem.  Regards, Andreas  P.S.: Reported against 2.5.2 as I have not upgraded to 2.5.3 yet.   ---  **Affects:** 2.5.2  **Attachments:** - [SPR-4710.zip](https://jira.spring.io/secure/attachment/13950/SPR-4710.zip) (_4.16 kB_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-15T19:46:14Z","2012-06-19T03:46:47Z"
"","9208","NPE in AbstractRefreshableConfigApplicationContext#setConfigLocations [SPR-4531]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-4531](https://jira.spring.io/browse/SPR-4531?redirect=false)** and commented  The method setConfigLocations(String[]) has a problem which causes an NPE when the passed in array is null. First a check is made whether the array contains nulls (correctly skipping processing if the array itself is null). After that a String-array is created using the size of the passed in array. If that is null, an NPE results.  In conjunction with Apache CXF this is a problem as the SpringBusFactory#createBus() method of CXF does provide null as argument. This worked in Spring 2.5.1 as the class AbstractRefreshableConfigApplicationContext didn't exist there and the location setting has been handled differently.   ---  **Affects:** 2.5.2  1 votes, 1 watchers","closed","in: core,","spring-projects-issues","2008-03-03T19:55:55Z","2012-06-19T03:46:50Z"
"","8923","Improve context:mbean-export with more properties [SPR-4245]","**[Andreas Senft](https://jira.spring.io/secure/ViewProfile.jspa?name=asenft)** opened **[SPR-4245](https://jira.spring.io/browse/SPR-4245?redirect=false)** and commented  The context:mbean-export element doesn't have much configuration options. It provides only ""defaultDomain"" and ""server"" properties. I suggest to provide at least the possibility to configure the ""registrationBehavior"" and the ""autodetectionMode"" which are present in the MBeanExporter.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-11T23:49:29Z","2012-06-19T03:47:22Z"
"","9310","AbstractTransactionalJUnit4SpringContextTests (or subclass) need a means to flush the session [SPR-4633]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4633](https://jira.spring.io/browse/SPR-4633?redirect=false)** and commented  AbstractTransactionalJUnit4SpringContextTests (or a Hibernate specific subclass) should provide a method that flushes the hibernate session. If you do not explicitely flush the session, AbstractTransactionalJUnit4SpringContextTests.countRowsInTable() is meaningless when called before the session is closed.  I will attach a subclass that I have made for my own purposes. Feel free to use!   ---  **Affects:** 2.5.2  **Attachments:** - [AbstractDaoTest.java](https://jira.spring.io/secure/attachment/13847/AbstractDaoTest.java) (_276 bytes_)  1 votes, 1 watchers","closed","type: enhancement,","spring-projects-issues","2008-03-27T00:12:50Z","2009-02-17T19:39:46Z"
"","9100","uniqueResult() companion to HibernateTemplate.findByCriteria() [SPR-4422]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4422](https://jira.spring.io/browse/SPR-4422?redirect=false)** and commented  The HibernateTemplate.findByCriteria() detached criteria convenience method is very useful, especially to prevent the HibernateCallback pattern in your DAO.  However, there is no means to access the (executable) Criteria.uniqueResult() method - the findByCriteria() implementation always uses and returns Criteria.list().  I'd propose to add a second convenience method that would use uniqueResult() and return an Object rather than a Collection.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-02-04T21:01:16Z","2008-02-05T06:22:58Z"
"","9086","implicit creation of model (session) attribute [SPR-4408]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4408](https://jira.spring.io/browse/SPR-4408?redirect=false)** and commented  If you declare a model attribute with `@ModelAttribute` in a handler method (parameter annotation), it would be convenient if the framework would construct an empty attribute for you, if there isn't one already and there is a no-arg constructor on the attribute's class.  Instead of code like this  `@RequestMapping` public String setupForm(ModelMap model) { Command command = new Command(); command.setXyz(defaultValue); model.addAttribute(""command"", command); return view; }  you could just write  `@RequestMapping` public String setupForm(`@ModelAttribute` Command command) { command.setXyz(defaultValue); return view; }  This feature would of course apply to `@SessionAttributes`, too.  If this feature looks too magical, you could also introduce a boolean parameter on the `@ModelAttribute` annotation, saying whether implicit creation is allowed or not.   ---  **Affects:** 2.5.1  9 votes, 10 watchers","closed","in: web,","spring-projects-issues","2008-01-30T06:34:39Z","2019-01-11T17:31:16Z"
"","9065","Extension mechanism for flexible request handling method signature [SPR-4386]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4386](https://jira.spring.io/browse/SPR-4386?redirect=false)** and commented  I have several use cases that I cannot use the current injection mechanism for. Most of those cases are far to special (to my application), so a generic Spring built-in will most probably not happen. An extension mechanism would be nice.  Let's have a look at some examples:  1) public String handleRequest(User user)  User is an custom application domain class that extends javax.security.Principal. I'd like to get injected the logged-in user from request.getPrincipal(), cast appropriately. A variation of this usecase would be to get the logged-in user from an application-specific session attribute.  2) public String handleRequest(`@IsParameterPresent`(""parameterName"") boolean isPresent)  Sometimes, I just want to check if a specific request parameter is present. I'm not interested in the actual value.  3) public String handleRequest(`@PathPart` int articleId)  This idea is probably generic enough to qualify for a built-in solution. But for the sake of an example, I'll list it nevertheless. `@PathPart` would extract one of the matched wildcards in a path mapping, which can be aquired with request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE). Full parameter binding similar to `@RequestParam` should happen here.  To sum it up:  - extension implementations need access to WebRequest, or maybe HttpServletRequest/Response - own annotations should be possible, but not mandatory (in unambiguous cases) - the standard binding mechanism should be available    ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-24T06:22:01Z","2012-06-19T03:47:46Z"
"","9046","@RequestMapping narrowing based on presence of command object [SPR-4368]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4368](https://jira.spring.io/browse/SPR-4368?redirect=false)** and commented  `@RequestMapping` largely takes the responsibilities of the former AbstractFormController.isFormSubmission().  Unfortunately, I stumbled upon some cases that are not handled yet by `@RequestMapping` (well).  1) Mapping only matches if command object is present / not present  I use this frequently if a have a form with http-method GET (e.g. read-only search forms). In this case, I cannot distinguish by method, and I do not want to distinguish by parameter (the naming of the parameters is up to Spring Binding / Tag Library).  2) Mapping only matches if parameter is not present  Although not needed as urgently as 1), it would make `@RequestMappings` easier to formulate and a bit more robust. For example, I see some cases where you want a parameter to be present, and on the other related mapping you want the parameter to not be present.  ---  **Affects:** 2.5.1  **Issue Links:** - #10360 Request header filtering in `@RequestMapping` (_**""duplicates""**_)","closed","type: enhancement,","spring-projects-issues","2008-01-21T23:06:43Z","2019-01-13T08:05:46Z"
"","9036","Annotation-style controllers: Injected Principal causes BeanInstantiationException if no user logged in [SPR-4358]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4358](https://jira.spring.io/browse/SPR-4358?redirect=false)** and commented  My handler method signature is like this:  `@RequestMapping`(method = RequestMethod.GET) public String setupForm(Principal user, Model model)  If this method is invoked when no user is logged in, the following exception happens:  org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [java.security.Principal]: Specified class is an interface at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:58) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter$ArgumentsResolver.resolveArguments(AnnotationMethodHandlerAdapter.java:634) at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:254) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:809) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:476) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:431)  I would expect the Principal types variable be null, so I can check for login in the handler method.  I have investigated into the code and found that ArgumentsResolver.resolveStandardArgument() cannot differentiate between the ""is no standard argument"" and ""is a standard argument, but the value is null"" cases. Both return null from the method.   ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-01-19T06:31:25Z","2012-06-19T03:47:27Z"
"","8982","@AccessRestrictions for Controllers [SPR-4353]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4353](https://jira.spring.io/browse/SPR-4353?redirect=false)** and commented  It would be great if Spring-MVC would provide a simple-to-use annotation for the most common access restrictions:  1) User must be logged in  `@AccessRestriction`(mustBeLoggedIn = true)  would be equivalent to  public String handle(Principal user, ...) { if (user == null) throw new RuntimeException(); [...] }  2) User must be in Role(s)  `@AccessRestriction`(roles = { ""moderator"", ""admin })  would be equivalent to  public String handle(WebRequest request, ...) { if (!(request.isUserInRole(""moderator"") || request.isUserInRole(""admin""))) throw new RuntimeException()  I'm not entirely sure if semantics of an enumeration of roles should be ""and"" or ""or"". I'm biased towards ""or"", because it's more likely to grant an access to multiple roles than to require multiple roles in combination (I could be wrong).  General considerations:  - Instead of throwing the exception, something like response.setStatus(HttpServletResponse.SC_FORBIDDEN) could be more appropriate.  - `@AccessRestriction` should be allowed at Method-level and Class-level, perhaps even Package-level would make sense. Restrictions should be inherited, just like with `@RequestMappings`.  - more ideas for Access Restrictions, but not that common: Needs HttpSession, Host names/IPs.    ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-17T21:08:08Z","2012-06-19T09:36:31Z"
"","9007","@RequestMapping annotated methods: Are sessions auto-created and are they synchronized? [SPR-4328]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4328](https://jira.spring.io/browse/SPR-4328?redirect=false)** and commented  From the documentation, it is not clear if injected sessions are auto-created, or if null is injected in case of no session. It is also not clear if sessions are already synchronized. I think this bits of information should be added to the documentation.  I vote for auto-creating sessions, because this is the default for request.getSession(). Also, I think sessions should be synchronized by default.  Furthermore, I propose to perhaps provide an argument-level annotation to control this behaviour: `@Session`(create = true|false, synchronized = true|false)  I don't know about the Portlet API but I guess it is very similar.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-12T22:35:44Z","2012-06-19T03:47:22Z"
"","9006","Inject WebRequest.userPrincipal into @RequestMapping annotated method [SPR-4327]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4327](https://jira.spring.io/browse/SPR-4327?redirect=false)** and commented  If there is a javax.security.Principal on the handler method signature, WebRequest.userPrincipal should be injected.   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-12T22:24:44Z","2012-06-19T03:46:39Z"
"","8995","Maven2-POMs: Upgrade commons-logging to 1.1.1 [SPR-4316]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4316](https://jira.spring.io/browse/SPR-4316?redirect=false)** and commented  Instead of depending on commons-logging 1.1 with exclusions for every logging facility, it would be cleaner to depend on version 1.1.1, which has transitive dependencies declared as optional.  From the release notes: ""This release [1.1.1] is a minor update to the 1.1 release that fixes a number of bugs, and resolves packaging issues for maven 1.x and maven 2.x users.""   ---  **Affects:** 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-09T23:36:22Z","2012-06-19T03:46:53Z"
"","8959","if-modified-since support for annotation-based controller configuration [SPR-4281]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4281](https://jira.spring.io/browse/SPR-4281?redirect=false)** and commented  By reading the reference manual, I cannot find any information about support for the if-modified-since mechanism in the new annotation-based controller configuration style.  Implementing an interface like LastModified would be old-style (no subclassing). Thus, I'd like to propose passing the if-modified-since date into the request handling method either as a java.util.Date or a long, tagged with an annotation such as `@IfModifiedSince`. The handling method can then decide either to handle the request as usual, or to return a 304 (Not Modified) response. The 304 could perhaps be abstracted away by just returning null or something.  The aggregation of getLastModified() and handleRequest*() into one method has several advantages:  - You only need to call your service method(s) once. With the old-style, you had to either buffer service results in request scope (awkward), or call services twice and rely on efficient caching (awkward, too).  - You can use binding mechanisms. Old-style, if you extend BaseCommandController (or subclass), binding would not happen on getLastModified(), only on handleRequestInternal().  - You do not need to catch exceptions. Old-style, getLastModified() does not allow any exceptions to be thrown, while handleRequest*() allows every Exception (which is very convenient in the web layer).    ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-25T07:29:43Z","2012-06-19T03:47:26Z"
"","8953","Monitoring Framework - Monitor names to stem from the implementing classes, rather than their interfaces [SPR-4275]","**[Andreas Schildbach](https://jira.spring.io/secure/ViewProfile.jspa?name=goonie)** opened **[SPR-4275](https://jira.spring.io/browse/SPR-4275?redirect=false)** and commented  Consider the following example. I'm applying a profiling aspect to my annotated services like this:      \ \ \ \ \ \  Problem is, the names of the Jamon Monitors (as per AbstractTraceInterceptor.createInvocationTraceName ()) stem from the names of the interfaces (or abstract classes), not from the actual implementation classes. This is particularly annoying for interface methods that are inherited from a 'common' interface: Those only get one monitor for all implementations together - there is no way to distinguish.  My proposal is to find a way (via Spring configuration) so that the monitor names always stem from the implementing classes.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-20T21:05:25Z","2012-06-19T03:47:28Z"
"","9701","SingleConnectionFactory should support obtaining Queue/TopicConnections even for JMS 1.1 provider [SPR-5026]","**[Andreas Loew](https://jira.spring.io/secure/ViewProfile.jspa?name=aloew)** opened **[SPR-5026](https://jira.spring.io/browse/SPR-5026?redirect=false)** and commented  Summary:  When creating the underlying physical JMS connection, SingleConnectionFactory should call the appropriate createXXXConnection method properly reflecting the type of the target XXXConnectionFactory:  - for a target QueueConnectionFactory, call createQueueConnection() - for a target TopicConnectionFactory, call createTopicConnection() - for a target ConnectionFactory, call createTopicConnection()  Details:  The exception I get looks like the following:  22.07.2008 12:14:52 org.springframework.jms.connection.SingleConnectionFactory initConnection INFO: Established shared JMS Connection: com.spirit.wave.jms.WaveConnection@e79839 Exception in thread ""main"" javax.jms.IllegalStateException: This SingleConnectionFactory does not hold a QueueConnection but rather: com.spirit.wave.jms.WaveConnection@e79839 at org.springframework.jms.connection.SingleConnectionFactory.createQueueConnection(SingleConnectionFactory.java:229) at testcase.MessageRequestor.main(MessageRequestor.java:47)  But my targetConnectionFactory indeed is a JMS 1.1-compliant com.spirit.wave.jms.WaveQueueConnectionFactory.  The real root cause for seeing this issue is that, with ""my"" JMS provider, calling qcf.createConnection() on a WaveQueueConnectionFactory instance qcf only creates a WaveConnection (which only implements connection, but not QueueConnection), but calling qcf.createQueueConnection() creates a WaveQueueConnection (which implements both).  I would propose to fix this with the following if ... then ... else in SingleConnectionFactory#doCreateConnection() that ensures that the appropriate create method is being called:      protected Connection doCreateConnection() throws JMSException {                 ConnectionFactory connfac = getTargetConnectionFactory();                 Connection conn = null;                 if (connfac instanceof QueueConnectionFactory) {                     conn = ((QueueConnectionFactory) connfac).createQueueConnection();                 } else if (connfac instanceof TopicConnectionFactory) {                     conn = ((TopicConnectionFactory) connfac).createTopicConnection();                 } else {                     conn = connfac.createConnection();                 }     	return conn;     }  I do perfectly know that a SingleConnectionFactory102 exists which properly handles this, but (a) my provider is JMS 1.1 compliant and (b) I would rather like to use CachedConnectionFactory (not directly SingleConnectionFactory).  I admit that, if you prefer, this issue could also be resolved by adding a CachedConnectionFactory102 that extends SingleConnectionFactory102.  Many thanks for considering this fix for the Spring 2.5.x series! :-)  Best regards,  Andreas   ---  **Affects:** 2.5.3, 2.5.4, 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-07-21T21:58:37Z","2012-06-19T03:46:56Z"
"","9376","Specify class returned by factory-method [SPR-4699]","**[Andreas Benneke](https://jira.spring.io/secure/ViewProfile.jspa?name=abeani)** opened **[SPR-4699](https://jira.spring.io/browse/SPR-4699?redirect=false)** and commented  Spring uses reflection on the factory method to determine the type of the returned object. This will lead to the iFace-bean being treated as Object (e. g. for autowiring by type), because createMock returns Object:  \ \ \  There should be a way to override this to improve the autowiring capabilities of Spring:  \ \ \  or by triggering eager creation of the iFace bean and using reflection to determine the type of the bean.  For a small test case (including a unit test) see http://forum.springframework.org/showthread.php?t=52375  Thanks!   ---  **Affects:** 2.5.3  2 votes, 3 watchers","closed","type: enhancement,","spring-projects-issues","2008-04-14T00:44:32Z","2012-06-19T09:36:29Z"
"","9332","NullPointerException in  RedirectView.appendQueryProperties(...) during URL encoding   [SPR-4655]","**[Andre Teshler](https://jira.spring.io/secure/ViewProfile.jspa?name=letstry)** opened **[SPR-4655](https://jira.spring.io/browse/SPR-4655?redirect=false)** and commented  following code fragment from RedirectView.appendQueryProperties(...)  String encodedValue = entry.getValue() != null ? urlEncode(entry.getValue().toString(), encodingScheme) : """";  leads to NullPointerException inside the urlEncode method in the case when entry.getValue() != null     but  at the same time  entry.getValue().toString() == null  Obviously the case entry.getValue().toString() == null  should be checked as well:  String encodedValue = (entry.getValue() != null  && entry.getValue().toString() != null) ? urlEncode(entry.getValue().toString(), encodingScheme) : """";    ---  **Affects:** 2.5.2","closed","in: web,","spring-projects-issues","2008-04-02T23:56:11Z","2019-01-11T18:13:58Z"
"","9720","Allow transparent subclassing for org.springframework.beans.factory.xml.BeanDefinitionParserDelegate [SPR-5045]","**[andre silva](https://jira.spring.io/secure/ViewProfile.jspa?name=cattox)** opened **[SPR-5045](https://jira.spring.io/browse/SPR-5045?redirect=false)** and commented  The original request that originated the problem is to deny eager loading of bean classes, using a custom Class loader to resolve xml references.  the implementation / subclassing was easy till I reached  BeanDefinitionParserDelegate. Here I only needed to override the ""parseBeanDefinitionElement( Element ele, String beanName, BeanDefinition containingBean)"" method in the part ""AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition( parent, className, this.readerContext.getBeanClassLoader());""  So this code could be extracted to a method.  I guess this is quick refactor that give us, programmers, more flexibility to extend this functionality   --- No further details from [SPR-5045](https://jira.spring.io/browse/SPR-5045?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-07-29T22:24:26Z","2012-06-19T03:46:57Z"
"","9669","Providing a default scope for autodetected components [SPR-4994]","**[Andor Greißl](https://jira.spring.io/secure/ViewProfile.jspa?name=andor)** opened **[SPR-4994](https://jira.spring.io/browse/SPR-4994?redirect=false)** and commented  Please consider adding a default scope for autodetected component. You can implement this functionality now with ""scope-resolver"", but it would make the ""include-filter"" more powerful.      And more, maybe it would be useful to add the capability of specifying a default autowire behaviour for the detected components      Would it make more sense to add the attributes to the filter, like ?         Maybe this would be a step closer to 'Convention over Configuration'.   ---  **Affects:** 2.5.6","closed","type: enhancement,","spring-projects-issues","2008-07-08T16:28:43Z","2012-06-19T09:36:30Z"
"","9656","spring-context-2.5.xsd needs to be updated on springframework.org [SPR-4993]","**[Andor Greißl](https://jira.spring.io/secure/ViewProfile.jspa?name=andor)** opened **[SPR-4993](https://jira.spring.io/browse/SPR-4993?redirect=false)** and commented  Section 3.12.3. Using filters to customize scanning states that it is possible to define a custom TypeFilter using type=""custom"" but spring-context-2.5.xsd lists         value   is missing.    ---  **Affects:** 2.5.5","closed","in: core,","spring-projects-issues","2008-07-08T09:52:56Z","2012-06-19T03:46:56Z"
"","9467","DefaultSingletonBeanRegistry change in 2.5.4 causes BeanCurrentlyInCreationException on context that loads fine in 2.5.3 [SPR-4790]","**[Anders Wallgren](https://jira.spring.io/secure/ViewProfile.jspa?name=anders)** opened **[SPR-4790](https://jira.spring.io/browse/SPR-4790?redirect=false)** and commented  After updating from 2.5.3 to 2.5.4, I get an error while loading my context during unit tests.  After some debugging, I narrowed it down to this delta: http://fisheye1.cenqua.com/browse/springframework/spring/src/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java?r1=1.22&r2=1.23  If I remove that delta, my context loads.  Put it back in, and it fails.  My context and classpath are quite extensive, so I don't have a simple test case, unfortunately.  In case it's helpful, the stack trace for the error is:  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'bootstrapCommanderServer' defined in class path resource [bootstrapContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'databaseConfigurationValidator' defined in class path resource [bootstrapContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'setDatabaseConfigurationOperation' defined in class path resource [apiContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commanderDao' defined in class path resource [hibernateContext.xml]: Cannot create inner bean 'com.electriccloud.dao.HibernateDao#15d17d7' of type [com.electriccloud.dao.HibernateDao] while setting bean property 'dao'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.electriccloud.dao.HibernateDao#15d17d7' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAspect' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAttributeSource' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'setDatabaseConfigurationOperation': Requested bean is currently in creation: Is there an unresolvable circular reference? at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:478) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:308) at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:948) at org.springframework.context.support.AbstractApplicationContext.registerListeners(AbstractApplicationContext.java:702) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:378) at org.springframework.test.AbstractSingleSpringContextTests.createApplicationContext(AbstractSingleSpringContextTests.java:243) at org.springframework.test.AbstractSingleSpringContextTests.loadContextLocations(AbstractSingleSpringContextTests.java:212) at org.springframework.test.AbstractSingleSpringContextTests.loadContext(AbstractSingleSpringContextTests.java:187) at org.springframework.test.AbstractSpringContextTests.getContext(AbstractSpringContextTests.java:140) at org.springframework.test.AbstractSingleSpringContextTests.setUp(AbstractSingleSpringContextTests.java:100) at org.springframework.test.ConditionalTestCase.runBare(ConditionalTestCase.java:76) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.access$001(AbstractAnnotationAwareTransactionalTests.java:71) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests$1.run(AbstractAnnotationAwareTransactionalTests.java:175) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runTest(AbstractAnnotationAwareTransactionalTests.java:283) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runTestTimed(AbstractAnnotationAwareTransactionalTests.java:254) at org.springframework.test.annotation.AbstractAnnotationAwareTransactionalTests.runBare(AbstractAnnotationAwareTransactionalTests.java:172) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'databaseConfigurationValidator' defined in class path resource [bootstrapContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'setDatabaseConfigurationOperation' defined in class path resource [apiContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commanderDao' defined in class path resource [hibernateContext.xml]: Cannot create inner bean 'com.electriccloud.dao.HibernateDao#15d17d7' of type [com.electriccloud.dao.HibernateDao] while setting bean property 'dao'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.electriccloud.dao.HibernateDao#15d17d7' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAspect' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAttributeSource' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'setDatabaseConfigurationOperation': Requested bean is currently in creation: Is there an unresolvable circular reference? at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:478) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:1027) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:975) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) ... 39 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'setDatabaseConfigurationOperation' defined in class path resource [apiContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commanderDao' defined in class path resource [hibernateContext.xml]: Cannot create inner bean 'com.electriccloud.dao.HibernateDao#15d17d7' of type [com.electriccloud.dao.HibernateDao] while setting bean property 'dao'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.electriccloud.dao.HibernateDao#15d17d7' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAspect' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAttributeSource' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'setDatabaseConfigurationOperation': Requested bean is currently in creation: Is there an unresolvable circular reference? at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:478) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:1027) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:975) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) ... 50 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commanderDao' defined in class path resource [hibernateContext.xml]: Cannot create inner bean 'com.electriccloud.dao.HibernateDao#15d17d7' of type [com.electriccloud.dao.HibernateDao] while setting bean property 'dao'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.electriccloud.dao.HibernateDao#15d17d7' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAspect' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAttributeSource' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'setDatabaseConfigurationOperation': Requested bean is currently in creation: Is there an unresolvable circular reference? at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:230) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1244) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1008) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:1027) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:975) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) ... 61 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.electriccloud.dao.HibernateDao#15d17d7' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAspect' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAttributeSource' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'setDatabaseConfigurationOperation': Requested bean is currently in creation: Is there an unresolvable circular reference? at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:478) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:219) ... 76 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAspect' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAttributeSource' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'setDatabaseConfigurationOperation': Requested bean is currently in creation: Is there an unresolvable circular reference? at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:478) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory.getOrder(BeanFactoryAspectInstanceFactory.java:106) at org.springframework.aop.aspectj.annotation.LazySingletonAspectInstanceFactoryDecorator.getOrder(LazySingletonAspectInstanceFactoryDecorator.java:66) at org.springframework.aop.aspectj.annotation.InstantiationModelAwarePointcutAdvisorImpl.getOrder(InstantiationModelAwarePointcutAdvisorImpl.java:158) at org.springframework.core.OrderComparator.getOrder(OrderComparator.java:61) at org.springframework.core.OrderComparator.compare(OrderComparator.java:48) at org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator.compare(AspectJPrecedenceComparator.java:97) at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder.compareTo(AspectJAwareAdvisorAutoProxyCreator.java:133) at org.aspectj.util.PartialOrder$SortObject.addDirectedLinks(PartialOrder.java:68) at org.aspectj.util.PartialOrder.addNewPartialComparable(PartialOrder.java:88) at org.aspectj.util.PartialOrder.sort(PartialOrder.java:121) at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.sortAdvisors(AspectJAwareAdvisorAutoProxyCreator.java:78) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:87) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:66) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:345) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.getEarlyBeanReference(AbstractAutoProxyCreator.java:256) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getEarlyBeanReference(AbstractAutowireCapableBeanFactory.java:643) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$2.getObject(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:184) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:165) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:206) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:1027) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:975) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) ... 80 more Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'transactionAttributeSource' defined in class path resource [hibernateContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'setDatabaseConfigurationOperation': Requested bean is currently in creation: Is there an unresolvable circular reference? at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:478) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:1027) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:975) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) ... 113 more Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'setDatabaseConfigurationOperation': Requested bean is currently in creation: Is there an unresolvable circular reference? at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.beforeSingletonCreation(DefaultSingletonBeanRegistry.java:293) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:214) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByName(AbstractAutowireCapableBeanFactory.java:1027) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:975) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) ... 124 more   ---  **Affects:** 2.5.4  **Attachments:** - [SPR-4790.patch](https://jira.spring.io/secure/attachment/14042/SPR-4790.patch) (_1021 bytes_)","closed","in: core,","spring-projects-issues","2008-05-08T12:42:12Z","2012-06-19T03:47:36Z"
"","8989","There are some issues we face using spring hibernate. I made a utility to solve these. [SPR-4310]","**[Amit Khosla](https://jira.spring.io/secure/ViewProfile.jspa?name=amit.khosla)** opened **[SPR-4310](https://jira.spring.io/browse/SPR-4310?redirect=false)** and commented  Hibernate Utility The utility is an attempt to solve issues we face daily while using hibernate. Currently we are solving these four problems:  1) Updating an object:    Problem:    If we are saving an object which has some properties which are null, if we update the object, we will find that in the database it remove those values from database.     Example:    In a student table, having fields: name, address, roll no & standard. Now, suppose, if admin of this school, wants to update address. For doing so, we are displaying a form where the admin changes the address & submit the page. At server, we get id of the student & address of the student. Now, to save this information, either we need to load an object of student (means retrieving all the info which we don't want & unnecessary hit to database) or creating new object of student setting id & address. In the second approach we didn't set values for name, roll no & standard. So while updating we will loss this information.     Solution:    Call method of the the tool, update (student, ""studentId""); student is the object of Student class having just studentId & address set.This is all you need to do.  2) Projections:    Problem:    If we are using projections (selection of selective columns), hibernate will return you list of object array or list of object.     Example:    If we want to retrieve name & roll no. from the student table, what we will receive will be list. Each item in list will be array of object, whose 0th index will have name as String & 1st index will have roll no. as long. It is difficult to parse this data & we have to send this data in form of objects from dao layer to manager layer.     Sample:    Instead of parsing this list containing name & roll no, we will get student object using a method of the utility.  3) Writing HQL    Problem:    We often need to write HQL of same pattern. Like selecting these fields from this table, for some conditions & then we need to order them as well. It takes some amount of time to do this again & again.     Sample:    Just call method smartList (student.class, ""name"", where array, orderby array) will return list of students.  4) Paging code:    Problem:    We have to use paging in each of application we work. Again we need to do the same kind of effort again & again for each different paging data we want.     Sample:    We just need to call the method to get the list of pojos for a page & the total number of records in the table.  If it make sense to use this kind of utility please reply.   --- No further details from [SPR-4310](https://jira.spring.io/browse/SPR-4310?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-01-09T02:29:12Z","2012-06-19T09:36:22Z"
"","9651","custom stereotypes using a FactoryBean to generate them [SPR-4976]","**[Amir Kibbar](https://jira.spring.io/secure/ViewProfile.jspa?name=amirkibbar)** opened **[SPR-4976](https://jira.spring.io/browse/SPR-4976?redirect=false)** and commented  I'd like to be able to create custom stereotypes and have spring create their beans using a FactoryBean.  My scenario is as follows - I'd like to create a Facade bean. This bean only delegates activity to other (service) beans. I'd like the Facade to only be an interface, and at runtime glue an invocation handler to it using a proxy. To do this I have to create the Facade by using a FactoryBean.  What I'd like to be able to do is to define my Facade interface using annotations only, for example:  `@Facade`(delegates={""a"",""b""}) `@FactoryBean`(name=""facadeFactory"") public interface MyFacade { ... }  the ""`@Facade`"" is my custom stereotype, and I expect that `@FactoryBean` would be a spring annotation.  thanks, Amir   --- No further details from [SPR-4976](https://jira.spring.io/browse/SPR-4976?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-07-02T19:41:11Z","2012-06-19T09:36:25Z"
"","8950","Anotation-driven handler methods cannot return View. [SPR-4272]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-4272](https://jira.spring.io/browse/SPR-4272?redirect=false)** and commented  But they can return String. This is kinda unfair.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-19T01:42:19Z","2012-06-19T03:46:42Z"
"","8949","introduce @RequestAttribute [SPR-4271]","**[allnightlong](https://jira.spring.io/secure/ViewProfile.jspa?name=allnightlong)** opened **[SPR-4271](https://jira.spring.io/browse/SPR-4271?redirect=false)** and commented  My project have meaningfull url strategy i.e. it looks like: example.org/user/1234/ instead of example/?user=1234. I've got filter wich redirects each request to DispatcherServlet and put id (1234) in request as attribute. But i can't access to this attributes throw annotation-based controller in a way I can access request parameters. So I think introducing `@RequestAttribute` is a decision:  public void showUser(`@RequestAttribute`  in userId){ ... }   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2007-12-18T23:23:32Z","2009-02-17T18:55:58Z"
"","9624","add HibernateCallbackWithoutResult convenience class [SPR-4949]","**[Alison Winters](https://jira.spring.io/secure/ViewProfile.jspa?name=alisonatwork)** opened **[SPR-4949](https://jira.spring.io/browse/SPR-4949?redirect=false)** and commented  It would be nice to have a HibernateCallbackWithoutResult to match the pattern precedent laid down by TransactionCallbackWithoutResult.  When performing a bulk execute HQL query (e.g. UPDATE) we are usually not interested in the return value.  Adding this class makes it clearer what the intention is in calling code, as well as removing a redundant ""return null"" line.   ---  **Affects:** 2.0.8, 2.5.5  **Attachments:** - [HibernateCallbackWithoutResult.java](https://jira.spring.io/secure/attachment/14249/HibernateCallbackWithoutResult.java) (_1.97 kB_)","closed","type: enhancement,","spring-projects-issues","2008-06-24T11:19:31Z","2019-01-11T18:34:40Z"
"","9596","MessageSourceResourceBundle should override getLocale() [SPR-4921]","**[Alison Winters](https://jira.spring.io/secure/ViewProfile.jspa?name=alisonatwork)** opened **[SPR-4921](https://jira.spring.io/browse/SPR-4921?redirect=false)** and commented  MessageSourceResourceBundle should override getLocale() from Sun's ResourceBundle class so that users can inspect the current locale.  Currently you can set up a configuration that fails with NullPointerExceptions as follows:  1. Set up a Spring MessageSource as per normal 2. Set up a custom JSTL BundleSupport tag that gets the bundle from the page LocalizationContext  and calls bundle.getLocale() to do something 3. Use the Spring JstlView to forward to a page containing above tag  It sounds a little convoluted on paper, but it can be useful to inspect the locale set on the bundle.  In our case, we have an translator development mode setting where we can set our JSTL tags to print out additional information if the locale of the bundle is equal to a specified development locale.  The only addition required to the MessageSourceResourceBundle class is as follows:  `@Override` public Locale getLocale() { return locale; }   ---  **Affects:** 2.0.7, 2.5.4  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-06-15T17:45:47Z","2012-06-19T03:47:38Z"
"","9818","Spring TestContext Framework not compatible with JUnit 4.5 [SPR-5145]","**[Alison Rosewarne](https://jira.spring.io/secure/ViewProfile.jspa?name=alisonr)** opened **[SPR-5145](https://jira.spring.io/browse/SPR-5145?redirect=false)** and commented  After upgrading to junit 4.5 my test class which uses the SpringJUnit4ClassRunner gets a NoClassDefFoundError:  org.apache.maven.surefire.booter.SurefireExecutionException: org/junit/Assume$AssumptionViolatedException; nested exception is java.lang.NoClassDefFoundError: org/junit/Assume$AssumptionViolatedException java.lang.NoClassDefFoundError: org/junit/Assume$AssumptionViolatedException at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:240) at org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333) at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217) at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197) at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:142) at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:59)  etc.  This is a Junit 4.5 issue.  The static class AssumptionViolatedException within org.junit.Assume that existed in 4.4 has become org.junit.internal.AssumptionViolatedException.  The file tiger/mock/org/springframework/test/context/junit4/SpringMethodRoadie.java imports org.junit.Assume.AssumptionViolatedException which is why my test is failing.  Workaround is to stick with Junit 4.4.  (Aside: are there plans to create a ""SpringTEST"" component?).  ---  **Affects:** 2.5.5  **Attachments:** - [junit4.5.patch](https://jira.spring.io/secure/attachment/14674/junit4.5.patch) (_43.97 kB_)  **Issue Links:** - #9844 Incompatible with JUnit 4.5 (_**""is duplicated by""**_) - #10557 Upgrade the Spring TestContext Framework to JUnit 4.6  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d159195b79ab02c25217e0503e804e53dff28b43, https://github.com/spring-projects/spring-framework/commit/c0c9501005750f06f4cac355ef576a3730665b2c, https://github.com/spring-projects/spring-framework/commit/9daae23e17c4294af5fdbf9dc10a0ce959534a24, https://github.com/spring-projects/spring-framework/commit/e5d2570c8d9a005a7f9e0dd5b667528895ef4321, https://github.com/spring-projects/spring-framework/commit/751e0f0eb77f5330169cf0fd6c046e5bbfb23af4, https://github.com/spring-projects/spring-framework/commit/62c991f9d6ebaa404d71ac1fad84c8128fd47ca0, https://github.com/spring-projects/spring-framework/commit/6327b3484b2fe34bacc85b4e70641a6baec5274e  3 votes, 11 watchers","closed","type: enhancement,","spring-projects-issues","2008-09-08T12:16:48Z","2019-01-11T15:37:19Z"
"","9350","Spring Core jar 2.5.3 has invalid OSGi Import-Package manifest entry [SPR-4673]","**[Alin Dreghiciu](https://jira.spring.io/secure/ViewProfile.jspa?name=adreghiciu)** opened **[SPR-4673](https://jira.spring.io/browse/SPR-4673?redirect=false)** and commented  Released spring core jar has an invalid OSGi manifest entry for Import-Package, which makes release 2.5.3 not runnable under osgi:  Import-Package: org.apache.commons.logging,org.eclipse.core.runtime;co mmon=split,resolution:  This is far away from the previous value from 2.5.2:  Import-Package: edu.emory.mathcs.backport.java.util.concurrent;resolut ion:=optional,javax.xml.transform;resolution:=optional,org.apache.com mons.attributes;resolution:=optional,org.apache.commons.collections;r esolution:=optional,org.apache.commons.collections.map;resolution:=op tional,org.apache.commons.logging,org.apache.log4j;resolution:=option al,org.apache.log4j.xml;resolution:=optional,org.aspectj.bridge;resol ution:=optional,org.aspectj.weaver;resolution:=optional,org.aspectj.w eaver.bcel;resolution:=optional,org.aspectj.weaver.patterns;resolutio n:=optional,org.springframework.asm;resolution:=optional;version=2.5. 2,org.springframework.asm.commons;resolution:=optional;version=2.5.2, org.springframework.asm.signature;resolution:=optional;version=2.5.2, org.springframework.core;resolution:=optional;version=2.5.2,org.sprin gframework.core.annotation;resolution:=optional;version=2.5.2,org.spr ingframework.core.enums;resolution:=optional;version=2.5.2,org.spring framework.core.io;resolution:=optional;version=2.5.2,org.springframew ork.core.io.support;resolution:=optional;version=2.5.2,org.springfram ework.core.style;resolution:=optional;version=2.5.2,org.springframewo rk.core.task;resolution:=optional;version=2.5.2,org.springframework.c ore.task.support;resolution:=optional;version=2.5.2,org.springframewo rk.core.type;resolution:=optional;version=2.5.2,org.springframework.c ore.type.classreading;resolution:=optional;version=2.5.2,org.springfr amework.core.type.filter;resolution:=optional;version=2.5.2,org.sprin gframework.metadata;resolution:=optional;version=2.5.2,org.springfram ework.metadata.commons;resolution:=optional;version=2.5.2,org.springf ramework.util;resolution:=optional;version=2.5.2,org.springframework. util.comparator;resolution:=optional;version=2.5.2,org.springframewor k.util.xml;resolution:=optional;version=2.5.2,org.w3c.dom;resolution: =optional,org.xml.sax;resolution:=optional   ---  **Affects:** 2.5.3  2 votes, 4 watchers","closed","in: core,","spring-projects-issues","2008-04-08T01:24:52Z","2012-06-19T03:47:39Z"
"","9293","Changes done in @Transactinal service in @Before method is not rolled-back [SPR-4616]","**[Alexey Kakunin](https://jira.spring.io/secure/ViewProfile.jspa?name=akakunin)** opened **[SPR-4616](https://jira.spring.io/browse/SPR-4616?redirect=false)** and commented  I have transactional unit-test:  `@RunWith`(SpringJUnit4ClassRunner.class) `@TransactionConfiguration`(transactionManager=""txManager"", defaultRollback=true) `@Transactional`(propagation=Propagation.REQUIRES_NEW)  This test is used `@Transactional` service for testing:  `@Transactional`(propagation=Propagation.REQUIRES_NEW, rollbackFor=EmForgeException.class) public class BpmServiceImpl extends JbpmTemplate implements BpmService, ApplicationContextAware {  Everything works fine - all data created inside this service during testing, as well as other data created outside this service rolled-back correctly at the end of test.  But - if I will call this service in `@Before` method - changes done inside this service and commited (even if it was done in new, nested  transaction) are not rolled-back by outer, test's transaction.    ---  **Affects:** 2.5.1","closed","status: declined,","spring-projects-issues","2008-03-23T10:41:42Z","2019-01-12T16:28:27Z"
"","9279","Add an annotation @Inject (like Guice) or a @Configurable for a property to inject a spring bean. [SPR-4602]","**[Alexandre Navarro](https://jira.spring.io/secure/ViewProfile.jspa?name=schumnana)** opened **[SPR-4602](https://jira.spring.io/browse/SPR-4602?redirect=false)** and commented  Add an annotation `@Inject` (like Guice) or a `@Configurable` for a property to inject a spring bean.  It is like the `@Configurable` not for a class but for a property or it is like `@Inject` annotation in Guice Framework. The mecanism might be like `@Configurable` (with aspect) at the creation of the class. It is not like `@Autowired` because the bean is not instanciated by the application Context.    ---  **Affects:** 2.5.2  **Attachments:** - [spring-test.zip](https://jira.spring.io/secure/attachment/13814/spring-test.zip) (_6.93 kB_) - [spring-test.zip](https://jira.spring.io/secure/attachment/13811/spring-test.zip) (_6.37 kB_)","closed","in: core,","spring-projects-issues","2008-03-19T02:49:13Z","2019-01-11T18:12:41Z"
"","9579","Circular Reference Exception while using AOP and Groovy Language Support [SPR-4903]","**[Alexander Kleymenov](https://jira.spring.io/secure/ViewProfile.jspa?name=san)** opened **[SPR-4903](https://jira.spring.io/browse/SPR-4903?redirect=false)** and commented  While trying to use Dynamic Language Support and AOP together I've got unexpected ""circular reference"" exception. This situation seems to be reproducible when AOP and Groovy bean customizer are used simultaneously in one configuration. So the supplied test code works fine after eliminating whether '' or 'customizer-ref=""customizer""' from spring-config.xml file:  \  \                           \                                     \                 \ To execute test code and reproduce the problem, please, supply proper values to environment variables in run.bat script.   ---  **Affects:** 2.5.4  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/14168/test.zip) (_1.41 kB_)","closed","in: core,","spring-projects-issues","2008-06-09T17:46:28Z","2012-06-19T03:46:57Z"
"","9237","DefaultMessageListenerContainer scales concurrent invokers too lazily if they were idle [SPR-4560]","**[Alexander K.](https://jira.spring.io/secure/ViewProfile.jspa?name=alexkra)** opened **[SPR-4560](https://jira.spring.io/browse/SPR-4560?redirect=false)** and commented  When maxConcurrentConsumers is greater than 1, DefaultMessageListenerContainer does not invoke new listeners when there are new messages in a queue as long as the first listener is busy. This behavior cancels parallel processing functionality especially when message handling takes some time. The problem is that an idle setting of AsyncMessageListenerInvoker done incorrectly. • AsyncMessageListenerInvoker should become not idle in messageReceived method before call to scheduleNewInvokerIfAppropriate(). • In invokeListener(), AsyncMessageListenerInvoker should become idle without relation to messageReceived variable because message handling was already ended in receiveAndExecute().   ---  **Affects:** 2.0.8","closed","type: enhancement,","spring-projects-issues","2008-03-08T23:33:26Z","2012-06-19T03:46:49Z"
"","9264","@Configurable beans do not waved by AnnotationBeanConfigurerAspect.aj  [SPR-4587]","**[Alexander Gavrilov](https://jira.spring.io/secure/ViewProfile.jspa?name=lucker)** opened **[SPR-4587](https://jira.spring.io/browse/SPR-4587?redirect=false)** and commented  After updating to 2.5.2 release my `@Configurable` annotated beans do not configured more. If i set preConstruction parameter of annotation to true, configuration still performing well. But i do not want to change all my beans. I beleave there is error in mostSpecificSubTypeConstruction pointcut definition of  AbstractDependencyInjectionAspect, becouse in the current implementation thisJoinPoint.getSignature().getDeclaringType() always returns org.springframework.beans.factory.aspectj.ConfigurableObject, but thisJoinPoint.getThis().getClass() is always the class taht implements ConfigurableObject interface, but not the ConfigurableObject interface. I'm changed definition of mostSpecificSubTypeConstruction to the next jp.getSourceLocation().getWithinType() == jp.getThis().getClass() and after rebuilding of spring-aspects module from source all continue performed well for me.  ---  **Affects:** 2.5.2  **Attachments:** - [test-apsectj.zip](https://jira.spring.io/secure/attachment/13808/test-apsectj.zip) (_1.68 MB_)  **Issue Links:** - #9292 Update AspectJ to 1.6 (_**""depends on""**_)","closed","in: core,","spring-projects-issues","2008-03-15T01:09:32Z","2019-01-11T17:16:51Z"
"","9103","Add doOptions handling to FrameworkServlet [SPR-4425]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-4425](https://jira.spring.io/browse/SPR-4425?redirect=false)** and commented  Enhance FrameworkServlet class to enable handling of OPTIONS HTTP request. According to http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.2 OPTIONS request returns a 200 OK response with an accompanying body content.  ``` /**  * Delegate OPTIONS requests to {@link #processRequest}.  * @see #doService  */ protected void doOptions(HttpServletRequest request, HttpServletResponse response)         throws ServletException, IOException {     processRequest(request, response); } ```    ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-02-05T06:44:20Z","2012-06-19T03:47:01Z"
"","8978","Add an ability to AnnotationMethodHandlerAdapter to specify your own implementation of a DataBinder [SPR-4300]","**[Alex Antonov](https://jira.spring.io/secure/ViewProfile.jspa?name=aantono)** opened **[SPR-4300](https://jira.spring.io/browse/SPR-4300?redirect=false)** and commented  It would be beneficial to have an ability to provide a custom implementation of a DataBinder to AnnotationMethodHandlerAdapter.  Currently it is being hard-coded to be instantiated as ServletRequestDataBinder, which does not allow one to implement a custom handling of data binding from the request. A proposed improvement would be to move the creation of a DataBinder into an overwritable method which would create an appropriate implementation. This would allow one to extend AnnotationMethodHandlerAdapter and supply its own implementation of the DataBinder.   ---  **Affects:** 2.5 final  **Attachments:** - [file.diff](https://jira.spring.io/secure/attachment/13249/file.diff) (_1.39 kB_)","closed","type: enhancement,","spring-projects-issues","2008-01-04T06:42:45Z","2012-06-19T03:46:56Z"
"","9770","with missing ref attribute gives error, should not [SPR-5097]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-5097](https://jira.spring.io/browse/SPR-5097?redirect=false)** and commented  If I define an aspect with just an  elements but without an ref attribute in the  element, Spring AOP gives me an error, while I think it should not. An introduction without a backing Java class is perfectly okay, I would say.  I've attached a test project   ---  **Affects:** 2.5.5  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/14555/test.zip) (_3.23 kB_)","closed","in: core,","spring-projects-issues","2008-08-18T17:05:26Z","2012-06-19T03:46:55Z"
"","9769","Improve error message for unbound pointcut formals [SPR-5096]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-5096](https://jira.spring.io/browse/SPR-5096?redirect=false)** and commented  I've attached a ZIP file with a test project that shows the error messages. Consider the following setup  class FlightService { void checkin() {} } class Tracing { void trace(FlightService service) {} }    The advice parameter service will be unbound in this case, as we're calling it 'ser' in the pointcut expression and it's 'service' in the actual advice itself. The error message we're getting from this is horrible and does not provide me any insight into what's wrong... This should be improved.  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'service' defined in class path resource [applicationContext.xml]: BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.aop.aspectj.AspectJPointcutAdvisor#0': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.aop.aspectj.AspectJPointcutAdvisor]: Constructor threw exception; nested exception is java.lang.IllegalArgumentException: warning no match for this type name: ser [Xlint:invalidAbsoluteTypeName] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:405) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:729) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:381) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.\(ClassPathXmlApplicationContext.java:83) at TracingAspectTest.testTracing(TracingAspectTest.java:9) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:168) at junit.framework.TestCase.runBare(TestCase.java:134) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:124) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:45) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.aop.aspectj.AspectJPointcutAdvisor#0': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.aop.aspectj.AspectJPointcutAdvisor]: Constructor threw exception; nested exception is java.lang.IllegalArgumentException: warning no match for this type name: ser [Xlint:invalidAbsoluteTypeName] at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:243) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:923) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:833) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) at org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper.findAdvisorBeans(BeanFactoryAdvisorRetrievalHelper.java:87) at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findCandidateAdvisors(AbstractAdvisorAutoProxyCreator.java:98) at org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator.shouldSkip(AspectJAwareAdvisorAutoProxyCreator.java:105) at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessBeforeInstantiation(AbstractAutoProxyCreator.java:266) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:789) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.resolveBeforeInstantiation(AbstractAutowireCapableBeanFactory.java:760) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:399) ... 32 more Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.aop.aspectj.AspectJPointcutAdvisor]: Constructor threw exception; nested exception is java.lang.IllegalArgumentException: warning no match for this type name: ser [Xlint:invalidAbsoluteTypeName] at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:111) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87) at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237) ... 50 more Caused by: java.lang.IllegalArgumentException: warning no match for this type name: ser [Xlint:invalidAbsoluteTypeName] at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression(PointcutParser.java:316) at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression(AspectJExpressionPointcut.java:205) at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch(AspectJExpressionPointcut.java:192) at org.springframework.aop.aspectj.AspectJExpressionPointcut.getMethodMatcher(AspectJExpressionPointcut.java:178) at org.springframework.aop.aspectj.AbstractAspectJAdvice.buildSafePointcut(AbstractAspectJAdvice.java:189) at org.springframework.aop.aspectj.AspectJPointcutAdvisor.\(AspectJPointcutAdvisor.java:51) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:494) at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:96) ... 52 more    ---  **Affects:** 2.5.4  **Attachments:** - [test.zip](https://jira.spring.io/secure/attachment/14554/test.zip) (_2.24 kB_)","closed","type: enhancement,","spring-projects-issues","2008-08-18T16:44:06Z","2015-09-09T11:28:48Z"
"","9680","getBean(String, Object[]) does not throw BeanDefinitionStoreException when bean in creation is a singleton [SPR-5005]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-5005](https://jira.spring.io/browse/SPR-5005?redirect=false)** and commented  I'm sorry for not having searched JIRA and filing a bug against 2.5.4A.  The scenario I'm running into is the following:  \ 	\ \  ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(""bean-definitions.xml""); Person p = (Person)ctx.getBean(""p""); System.out.println(p.getName());  p = (Person)ctx.getBean(""p"", new Object[] {""Blah""}); System.out.println(p.getName());  The documented behavior here is for the getBean(String,Object[]) method to throw a BeanDefinitionStoreException whereas it doesn't at the moment! It just returns the singleton which has been configured in the application context, ignoring the arguments passed into the getBean() method   ---  **Affects:** 2.0.8, 2.5.4, 2.5.5  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-07-14T20:10:34Z","2012-06-19T03:47:14Z"
"","9673","Possible property matches don't show up in BeanFactory error messages anymore [SPR-4998]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4998](https://jira.spring.io/browse/SPR-4998?redirect=false)** and commented  Now the test (see code below) raises an exception, which used to have possible property matches in there. Now this is not the case anymore...  I want my functionality back ;-).  package com.carplant.inventory;  import junit.framework.TestCase;  import org.springframework.beans.InvalidPropertyException; import org.springframework.beans.factory.config.BeanDefinition; import org.springframework.beans.factory.support.RootBeanDefinition; import org.springframework.context.support.StaticApplicationContext;  public class WhatDidYouMeanTest extends TestCase {      public void testWhatDidYouMean() {     	BeanDefinition def = new RootBeanDefinition();     	def.getPropertyValues().addPropertyValue(""persom"", ""B. Obama"");     	def.setBeanClassName(""com.carplant.inventory.Person"");     	StaticApplicationContext ctx = new StaticApplicationContext();     	ctx.registerBeanDefinition(""obama"", def);     	ctx.refresh();     }  }  class Person { String person;      public void setPerson(String person) {     	this.person = person;     }  }    ---  **Affects:** 2.0.8, 2.5.5  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","in: core,","spring-projects-issues","2008-07-10T20:20:43Z","2012-06-19T03:47:13Z"
"","9297","@Autowired in combination with @Required gives confusing behavior [SPR-4620]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4620](https://jira.spring.io/browse/SPR-4620?redirect=false)** and commented  `@Autowired` `@Required` public void setDataSource(DataSource ds) { }  gives an exception because the dependency has not been injected. Now while theoretically this is correct (`@Required` specifies an injection should be present), it still is very confusing the to user. Would it be an idea to ignore the `@Required` once `@Autowired`(required=true) is present? Obviously, this woud tightly couple the two... I'll leave it up to you to...   ---  **Affects:** 2.5.2","closed","type: enhancement,","spring-projects-issues","2008-03-24T01:43:03Z","2012-06-19T03:47:20Z"
"","9257","Tiny improvement in JavaDOC for ContextLoader [SPR-4580]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4580](https://jira.spring.io/browse/SPR-4580?redirect=false)** and commented  http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/web/context/ContextLoader.html  The first configurable parameter (contextClass) that is mentioned in the class description is NOT  linked to the actual description of the field name. The second parameter (contextConfigLocation) is.  Okay, I admit, it's VERY tiny, but it still did bother me (I had to look twice to find the contextClass parameter whereas I immediately spotted the contextConfiguration link). Getting used to TOO good a quality documentation I guess :).  cheers, Alef    ---  **Affects:** 2.0.8, 2.5.2  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-03-13T08:43:12Z","2012-06-19T03:46:52Z"
"","9217","Introduce 're-connect proxy' for JndiObjects [SPR-4540]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4540](https://jira.spring.io/browse/SPR-4540?redirect=false)** and commented  Would it be an idea to introduce a proxy facility that would detect JndiObjects gone stale and do an automatic reconnect? I have a client that wants to reconfigure his JNDI-based DataSource at runtime. Introducing some kind of reconnect-proxy=""true"" on the  level?   --- No further details from [SPR-4540](https://jira.spring.io/browse/SPR-4540?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-03-04T19:53:16Z","2009-03-23T03:28:04Z"
"","9067","Property equivalent namespace element for override configurer [SPR-4388]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4388](https://jira.spring.io/browse/SPR-4388?redirect=false)** and commented  Currently, there is a  element. For users it is confusing there is not  element as an equivalent of this. In our trainings, we also mention both, and its strange that there is no context element for the one while there is for the other.  So: can we add one :)  (forgive me if it is already there, I'm in a rush at the moment and only took 2 minutes to search through JIRA)   --- No further details from [SPR-4388](https://jira.spring.io/browse/SPR-4388?redirect=false)","closed","type: enhancement,","spring-projects-issues","2008-01-24T21:50:47Z","2012-06-19T03:47:37Z"
"","9021","Improve error message when sending a non-Serializable message using the JmsTemplate [SPR-4342]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4342](https://jira.spring.io/browse/SPR-4342?redirect=false)** and commented  Currently, if I'm sending a non-Serializable object using the convertAndSend() method of the JmsTemplate, I'm getting a rather generic message (Cannot convert object [com.carplant.CarModel@1f437e] to JMS message).  Can this be improved to hint at the possible cause (non-Serializable object), somewhere in the MessageConvertor or so?   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: enhancement,","spring-projects-issues","2008-01-15T22:50:14Z","2012-06-19T03:47:17Z"
"","9000","Doc: MessageSource is identified by bean name, this is very confusing [SPR-4321]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4321](https://jira.spring.io/browse/SPR-4321?redirect=false)** and commented  MessageSource is (AFAIK) one of the few beans that are NOT automatically picked up by type by the application context. In the past ViewResolver and HandlerMapping were picked up by id too, but not anymore.  Can we change MessageSource to by picked up by type too instead of by name? It's **very** confusing to people right now I just learned...   ---  **Affects:** 2.0.8, 2.5.1","closed","type: enhancement,","spring-projects-issues","2008-01-10T18:27:41Z","2008-10-21T18:41:50Z"
"","8997","Trim whitespace in bean name registered with SimpleUrlHAndlerMapping [SPR-4318]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4318](https://jira.spring.io/browse/SPR-4318?redirect=false)** and commented  With the SimpleUrlHandlerMapping is the mappings (as properties) contain a bean name that has white space at the end, the resolution of the controller fails:  \ \ \ myurl.htm=blaController     (with whitespaces at the end) \ \ \ I think the bean name should be trimmed of any whitespace before being used to resolve the actual controller bean.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-01-10T00:47:15Z","2012-06-19T03:47:06Z"
"","8988","Typo in JavaDoc (thrown should be throw) [SPR-4309]","**[Alef Arendsen](https://jira.spring.io/secure/ViewProfile.jspa?name=alef.arendsen)** opened **[SPR-4309](https://jira.spring.io/browse/SPR-4309?redirect=false)** and commented  Small typo in JavaDoc: http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/transaction/PlatformTransactionManager.html#getTransaction(org.springframework.transaction.TransactionDefinition)  mentioned thrown which should be throw  okay, I admit, a little detailed, but anyway...   ---  **Affects:** 2.0.8, 2.5.1  **Backported to:** [2.0.9](https://github.com/spring-projects/spring-framework/milestone/46?closed=1)","closed","type: bug,","spring-projects-issues","2008-01-09T01:33:03Z","2012-06-19T03:46:59Z"
"","9484","Support placeholders in URL-based views [SPR-4808]","**[Alberto Mozzone](https://jira.spring.io/secure/ViewProfile.jspa?name=albert2springjira)** opened **[SPR-4808](https://jira.spring.io/browse/SPR-4808?redirect=false)** and commented  We'd like to use the ""XsltView"", but the XSLT file to use is replicated in different directories: one per language. Every file has the same name, but the folder is called according the language of the user interface (i. e.: ""/ENG/xxx.xsl"", ""/FRE/xxx.xsl"", etc.) and the contents are localized. The language is detected by the controller, which stores it in the model. This is passed to a custom view, derived from AbstractView, which loads the localized XSLT file every time it's called. If the ""XsltView"" would allow a placeholder in the Url property, the view could substitute it with a parameter in the model which stores the language and then the view could select the XSLT file and cache the right XSLT source. In this way, the view could store a map of (lang, XSLT) to use for the presentation. Obviously, the language is just a possibility of the use of the placeholder.  Thanks for your attention.   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-13T20:25:35Z","2015-09-22T18:20:32Z"
"","9461","SqlCall and CallableStatementCreatorFactory.CallableStatementCreatorImpl do not support procedures with return value and parameters [SPR-4784]","**[Alberto Mozzone](https://jira.spring.io/secure/ViewProfile.jspa?name=albert2springjira)** opened **[SPR-4784](https://jira.spring.io/browse/SPR-4784?redirect=false)** and commented  In the class ""SqlCall"", the method ""compileInternal()"" does not allow a stored function to have parameters: see line 136, where the ""parameterCount"" variable is set to ""-1"", preventing the loop at line 141 to create the proper ""callString"". I also think that the following statement is wrong:  this.callString = ""{? = call "" + getSql() + ""("";  because the ""="" should be precedeed with "":"", i. e.:  this.callString = ""{? := call "" + getSql() + ""("";  Moreover, the last ""("" sholud be present only if there is at least one parameter passed: if none is provided then the ""("" should not be written to the ""callString"". This problem occurs when I specify the name of the stored proc only and so ""compileInternal()"" is called. If I call ""setSql()"" and ""setSqlReadyForUse(true)"" then the method is skipped.  In the class ""CallableStatementCreatorFactory.CallableStatementCreatorImpl"", the method ""createCallableStatement"" does not call ""registerOutParameter"" for the return value: see line 185, in the loop to register parameters, where, if the parameter is a result then it's skipped, but, at line 189 there is a test with ""instanceof"" to check if the parameter is a result (!). This always occurs.  I detected these problems with the following code.  TestStoredProcedure toTest = new TestStoredProcedure(my_datasource, ""package.function""); SqlParameter[] parameters = new SqlParameter[2]; Map inParams = new HashMap(); Map result = null;  /* * The SQL function returns a SYS_REFCURSOR: JDBC can only handle it as ""Object"" and then I have to cast it to ""ResultSet""; * anyway I wanted to try if Spring has any automations about it; you can use a normal ""SqlOutParameter"" of type ""Types.OTHER"" if this is not the case.   */   parameters[0] = new SqlReturnResultSet(""my_result"", new BeanPropertyRowMapper(SomeClassWithProperties.class));   parameters[1] = new SqlParameter(""only_parameter_for_function"", Types.INTEGER);   inParams.put(""my_result"", null);   inParams.put(""only_parameter_for_function"", new Integer(1));   toTest.setFunction(true);   toTest.setParameters(parameters);   // the two following lines are activated to avoid problem in SqlCall, just comment them to detect it   toTest.setSql(""{call ? := package.function(?)}"");   toTest.setSqlReadyForUse(true);   toTest.afterPropertiesSet();   result = toTest.execute(inParams);  I obtain the following exception from Oracle: java.sql.SQLException: ORA-01008: not all variables bound  I didn't find anything about calling stored functions (neither in Google nor in Spring-Jira) so I posted here my investigations.  Thanks for your attention.   ---  **Affects:** 2.5.4","closed","status: declined,","spring-projects-issues","2008-05-05T20:48:13Z","2019-01-12T16:28:16Z"
"","9123","No local JMS transaction in DefaultMessageListenerContainer with sessionTransacted is true and no external transaction manager [SPR-4445]","**[Albert van 't Hart](https://jira.spring.io/secure/ViewProfile.jspa?name=avthart)** opened **[SPR-4445](https://jira.spring.io/browse/SPR-4445?redirect=false)** and commented  There is no local JMS transaction (commit) in the DefaultMessageListenerContainer after upgrading the Spring Framework to 2.5.1 Messages stays in the queue after the MessageListener.onMessage(...) It seems that there is no commit on the session in a setup with no transactionManager and sessionTransacted is set to true.  \ 	\ 	\ 	\ 	\ 	\ 	\ 	\ 	\ 		\ 			\ 		\ 	\				 \   ---  **Affects:** 2.5.1","closed","type: bug,","spring-projects-issues","2008-02-10T22:35:58Z","2012-06-19T03:46:59Z"
"","9360","NullPointerException in org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator [SPR-4683]","**[Alan Stewart (personal account)](https://jira.spring.io/secure/ViewProfile.jspa?name=alankstewart)** opened **[SPR-4683](https://jira.spring.io/browse/SPR-4683?redirect=false)** and commented  Since upgrading from 2.5.2 to 2.5.3 I am getting a NullPointerException when attempting to load a org.springframework.context.support.ResourceBundleMessageSource in  a context file that is imported by a parent context file, eg.","closed","type: bug,","spring-projects-issues","2008-04-09T14:33:18Z","2019-01-13T21:52:49Z"
"","9369","StackOverFlowError when using @PersistenceContext for default EntityManagerFactory [SPR-4692]","**[Alan Cheung](https://jira.spring.io/secure/ViewProfile.jspa?name=klcheung)** opened **[SPR-4692](https://jira.spring.io/browse/SPR-4692?redirect=false)** and commented  We have created an AbstractGenericDAO which implements GenericDAO interface. A finder introduction interceptor is also implemented to intercept all the ""find*(..)"" functions of the divided class. The annotation ""`@PersistenceContext`"" is added to the AbstractGenericDAO. DAOs are created with the ""ProxyFactoryBean"" with the ""AbstractGenericDao"" as the target parent. Some of the DAOs are referring to other DAOs too.  A bunch of StackOverFlowError(s) occur from the DefaultListableBeanFactory when we start the application. All the available memory and CPU cycles will be used up until OutOfMemoryError occurs. It seems like there is something being invoked recurrsively.  The problem occurs in Windows too, but, the problem is gone when the VM options ""-XX:ThreadStackSize=256"" is added. However, the solution doesn't work on HP-UX or even on eclipse 3.3 in Windows.  The stack trace is as follow...  16:40:22,727 DEBUG [DefaultListableBeanFactory] Creating shared instance of singleton bean 'risk.dao.riskCompanyParameterVersionDao' 16:40:22,727 DEBUG [DefaultListableBeanFactory] Creating instance of bean 'risk.dao.riskCompanyParameterVersionDao' 16:40:22,727 DEBUG [DefaultListableBeanFactory] Eagerly caching bean 'risk.dao.riskCompanyParameterVersionDao' to allow for resolving potential circular references 16:40:22,727 DEBUG [DefaultListableBeanFactory] Creating instance of bean 'abstractVersionDaoTarget$child#192c766' 16:40:22,727 DEBUG [DefaultListableBeanFactory] Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor' 16:40:22,727 DEBUG [DefaultListableBeanFactory] Returning cached instance of singleton bean 'org.springframework.aop.aspectj.AspectJPointcutAdvisor#0' 16:40:22,727 DEBUG [DefaultListableBeanFactory] Returning cached instance of singleton bean 'org.springframework.aop.aspectj.AspectJPointcutAdvisor#1' 16:40:22,727 DEBUG [InjectionMetadata] Processing injected field of bean 'abstractVersionDaoTarget$child#192c766': PersistenceElement for protected javax.persistence.EntityManager com.taifook.mtss.mss.framework.app.dao.impl.GenericDaoHibernateJpaImpl.entityManager 16:40:22,727 DEBUG [DefaultListableBeanFactory] Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor' 16:40:22,727 DEBUG [DefaultListableBeanFactory] Returning cached instance of singleton bean 'org.springframework.aop.aspectj.AspectJPointcutAdvisor#0' 16:40:22,727 DEBUG [DefaultListableBeanFactory] Returning cached instance of singleton bean 'org.springframework.aop.aspectj.AspectJPointcutAdvisor#1' 16:40:22,727 DEBUG [DefaultListableBeanFactory] Creating shared instance of singleton bean 'risk.dao.riskMarketParameterDao' 16:40:22,727 DEBUG [DefaultListableBeanFactory] Creating instance of bean 'risk.dao.riskMarketParameterDao' 16:40:22,727 DEBUG [DefaultListableBeanFactory] Eagerly caching bean 'risk.dao.riskMarketParameterDao' to allow for resolving potential circular references 16:40:22,743 DEBUG [DefaultListableBeanFactory] Ignoring bean creation exception on FactoryBean type check org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'risk.dao.riskMarketParameterDao' defined in class path resource [appctx-mss-app-main-risk-dao.xml]: Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type [java.lang.String] to required type [java.lang.Class[]] for property 'proxyInterfaces'; nested exception is java.lang.IllegalArgumentException: Cannot find class []. Root cause: java.lang.ClassNotFoundException: at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:470) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:263) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:170) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1187) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:617) at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:456) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:224) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:304) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:298) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:224) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:501) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:471) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:596) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:567) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:182) at org.springframework.beans.factory.annotation.InjectionMetadata.injectFields(InjectionMetadata.java:104) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessAfterInstantiation(PersistenceAnnotationBeanPostProcessor.java:307) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:927) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:219) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1210) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:978) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:263) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:170) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1187) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:617) at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:456) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:224) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:304) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:298) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:224) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:501) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:471) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:596) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:567) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:182) at org.springframework.beans.factory.annotation.InjectionMetadata.injectFields(InjectionMetadata.java:104) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessAfterInstantiation(PersistenceAnnotationBeanPostProcessor.java:307) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:927) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:219) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1210) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:978) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:263) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:170) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1187) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:617) at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:456) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:224) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:304) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:298) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:224) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:501) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:471) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:596) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:567) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:182) at org.springframework.beans.factory.annotation.InjectionMetadata.injectFields(InjectionMetadata.java:104) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessAfterInstantiation(PersistenceAnnotationBeanPostProcessor.java:307) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:927) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:219) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1210) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:978) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:263) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:170) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1187) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:617) at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:456) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:224) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:304) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:298) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:224) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:501) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:471) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:596) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:567) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:182) at org.springframework.beans.factory.annotation.InjectionMetadata.injectFields(InjectionMetadata.java:104) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessAfterInstantiation(PersistenceAnnotationBeanPostProcessor.java:307) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:927) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:219) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1210) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:978) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:263) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:170) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1187) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:617) at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:456) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:224) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:304) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:298) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:224) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:501) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:471) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:596) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:567) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:182) at org.springframework.beans.factory.annotation.InjectionMetadata.injectFields(InjectionMetadata.java:104) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessAfterInstantiation(PersistenceAnnotationBeanPostProcessor.java:307) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:927) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:219) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1210) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:978) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:263) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:170) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1187) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:617) at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:456) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:224) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:304) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:298) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:224) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:501) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:471) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:596) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:567) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:182) at org.springframework.beans.factory.annotation.InjectionMetadata.injectFields(InjectionMetadata.java:104) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessAfterInstantiation(PersistenceAnnotationBeanPostProcessor.java:307) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:927) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:219) at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:117) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1210) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:978) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:375) at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:263) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:170) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260) at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1187) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:617) at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:456) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:224) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:304) at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:298) at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:224) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findDefaultEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:501) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findEntityManagerFactory(PersistenceAnnotationBeanPostProcessor.java:471) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.resolveEntityManager(PersistenceAnnotationBeanPostProcessor.java:596) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor$PersistenceElement.getResourceToInject(PersistenceAnnotationBeanPostProcessor.java:567) at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:182) at org.springframework.beans.factory.annotation.InjectionMetadata.injectFields(InjectionMetadata.java:104) at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessAfterInstantiation(PersistenceAnnotationBeanPostProcessor.java:307) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:927) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:462) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:404)    ---  **Affects:** 2.5.2","closed","in: core,","spring-projects-issues","2008-04-10T20:39:46Z","2019-01-12T16:28:21Z"
"","9609","problem with 'SimpleJdbcTemplate.update'  [SPR-4934]","**[Ahsan Mahboob](https://jira.spring.io/secure/ViewProfile.jspa?name=ahsanmahboob)** opened **[SPR-4934](https://jira.spring.io/browse/SPR-4934?redirect=false)** and commented  Hello,  I am facing problem with 'SimpleJdbcTemplate.update' used in a realtime multi-threaded application. Sometimes not working properly with updating records (3% updates found  improper), specialyl 'datetime' field. Following are the details of Spring/MySQL versions used:  => Spring-Version: 2.0-m5  => MySQL Version: 5.0.18  => Code snippet is as follows:  SimpleJdbcTemplate jdbcTemplate = new SimpleJdbcTemplate( dataSource );  return jdbcTemplate.update( ""update call_agent_detail set end_time=?, flag=? "" + ""where id=? and init_time=?"",   new Object[] { 	detail.getEndTime(),   detail.getFlag(),   detail.getId(),   detail.getInitTime()   } );  Help in this regard will be highly appreciated.  Thanks,  Ahsan Mahboob Sr. SE i2c Inc.   ---  **Affects:** 2.0 M5","closed","","spring-projects-issues","2008-06-18T20:47:56Z","2019-01-11T18:28:38Z"
"","9556","Wrong Java doc sample for org.springframework.web.bind.support.WebArgumentResolver [SPR-4880]","**[Agim Emruli](https://jira.spring.io/secure/ViewProfile.jspa?name=agim)** opened **[SPR-4880](https://jira.spring.io/browse/SPR-4880?redirect=false)** and commented  There is an outdated code sample inside the java doc for the interface org.springframework.web.bind.support.WebArgumentResolver   ---  **Affects:** 2.5.4  **Attachments:** - [patch.txt](https://jira.spring.io/secure/attachment/14140/patch.txt) (_1.38 kB_)","closed","type: enhancement,","spring-projects-issues","2008-06-01T20:58:33Z","2012-06-19T03:46:49Z"
"","8887","AbstractionApplicationContext detection of LoadTimeWeaverAwareProcessor can fail under OSGi [SPR-4209]","**[Adrian Colyer](https://jira.spring.io/secure/ViewProfile.jspa?name=adrian.colyer)** opened **[SPR-4209](https://jira.spring.io/browse/SPR-4209?redirect=false)** and commented  The following code in AbstractApplicationContext relies on the type of ""this"" to get the class loader to load the LoadTimeWeaverAwareProcessor:  // Detect a LoadTimeWeaver and prepare for weaving, if found. if (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME) && JdkVersion.isAtLeastJava15()) { // Register the (JDK 1.5 specific) LoadTimeWeaverAwareProcessor. try { Class ltwapClass = ClassUtils.forName( ""org.springframework.context.weaving.LoadTimeWeaverAwareProcessor"", getClass().getClassLoader()); BeanPostProcessor ltwap = (BeanPostProcessor) BeanUtils.instantiateClass(ltwapClass); ((BeanFactoryAware) ltwap).setBeanFactory(beanFactory); beanFactory.addBeanPostProcessor(ltwap); } catch (ClassNotFoundException ex) { throw new IllegalStateException(""Spring's LoadTimeWeaverAwareProcessor class is not available""); } // Set a temporary ClassLoader for type matching. beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader())); }  AbstractApplicationContext and LoadTimeWeaverAwareProcessor are packaged in the same bundle (and hence accessible via the same bundle class loader). So the code:  Class ltwapClass = ClassUtils.forName( ""org.springframework.context.weaving.LoadTimeWeaverAwareProcessor"", AbstractApplicationContext.class.getClassLoader());  is guaranteed to work (I verified this change under OSGi).  Whereas in my case the runtime type of 'this' was OsgiBundleXmlApplicationContext, which cannot see the LoadTimeWeaverAwareProcessor type.  We should do a quick code base search for this coding pattern and be sure we really intend to use the runtime type everywhere we call getClass().   ---  **Affects:** 2.5 final","closed","in: core,","spring-projects-issues","2007-12-04T04:10:58Z","2012-06-19T03:47:28Z"
"","9513","BeanPropertyRowMapper: map aliases ending with underscore [SPR-4837]","**[Adelino Rodrigues](https://jira.spring.io/secure/ViewProfile.jspa?name=adelinor)** opened **[SPR-4837](https://jira.spring.io/browse/SPR-4837?redirect=false)** and commented  The proposed enhancement to BeanPropertyRowMapper class is to deal with cases where the java property is actually a reserved keyword in SQL. For instance 'date'.  This would allow to define an alias with \_ and will map it to the java corresponding property. For instance column date_ will be mapped to the java bean property date.  One possible implementation, tested and running successfully in our environment is to add the following 3 lines of code to the method initialize(Class):      String underscoredNameSuffixed = underscoredName + ""_"";     if (!pd.getName().toLowerCase().equals(underscoredNameSuffixed)) {     	this.mappedFields.put(underscoredNameSuffixed, pd);     }  These lines were added directly added after the following piece of code: String underscoredName = underscoreName(pd.getName()); if (!pd.getName().toLowerCase().equals(underscoredName)) { this.mappedFields.put(underscoredName, pd); }  I hope this small enhancement will be added.  Cheers, Adelino.  The only change (3 lines in bold have added) is: /** * Initialize the mapping metadata for the given class. * `@param` mappedClass the mapped class.   */   protected void initialize(Class mappedClass) {   this.mappedClass = mappedClass;   this.mappedFields = new HashMap();   PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass);   for (int i = 0; i < pds.length; i++) {   PropertyDescriptor pd = pds[i];   if (pd.getWriteMethod() != null) {   this.mappedFields.put(pd.getName().toLowerCase(), pd);   String underscoredName = underscoreName(pd.getName());   if (!pd.getName().toLowerCase().equals(underscoredName)) {   this.mappedFields.put(underscoredName, pd);   }   String underscoredNameSuffixed = underscoredName + ""_"";   if (!pd.getName().toLowerCase().equals(underscoredNameSuffixed)) {   this.mappedFields.put(underscoredNameSuffixed, pd);   }   }   }   }  I hope this small enhancement will be added.  Cheers, Adelino.   ---  **Affects:** 2.5.4","closed","type: enhancement,","spring-projects-issues","2008-05-19T20:17:12Z","2013-05-09T19:21:59Z"
"","9289","PostgreSQL Named Parameters and Casting [SPR-4612]","**[Adam Taft](https://jira.spring.io/secure/ViewProfile.jspa?name=bobsledbob)** opened **[SPR-4612](https://jira.spring.io/browse/SPR-4612?redirect=false)** and commented  If creating a named parameter query with a Postgresql backend, and an SQL cast is specified in the query, the named parameter matching attempts to match the casted parameter.  For example, with this query:  SELECT foo FROM bar WHERE baz = :baz::timestamp;  Note the ""::timestamp"" is attempting to cast the 'baz' parameter (presumably an integer type) to the Postgresql timestamp type.  The likely correct solution for this would be for the parameter matching to not match on :: (two colons).  Albeit, this is a relatively easy to work around issue, because one can always use the traditional question mark syntax and not named parameters, like:  SELECT foo FROM bar WHERE baz = ?::timestamp;  However, for large queries, it's convenient to use named parameters and sometimes a type cast is needed for complex or custom Postgresql data types.   ---  **Affects:** 2.5 final","closed","type: enhancement,","spring-projects-issues","2008-03-21T18:06:47Z","2012-06-19T03:47:45Z"
"","9575","Adding hook into SQL State based exception translation [SPR-4899]","**[Abhishek Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=gupabhi)** opened **[SPR-4899](https://jira.spring.io/browse/SPR-4899?redirect=false)** and commented  REF:  #9549 http://jira.springframework.org/browse/SPR-4873  Futher to jira:SPR-4873, there is a need to provide a hook for being able to add new SQL States that might be needed to classify exceptions.  * Currently, the logic is hardcoded in the SQLStateSQLExceptionTranslator class and if a new SQLState needs to be classified there is no extensible way of doing this. Every database tends to have its own set of SQLStates (eg. Sybase sql-states mentioned in #9549)  * A file based approach to override existing SQLState based classification and add new ones would be very useful (The same way it is currently provided for in SQL error-code based classification)  * Currently the SQLStateSQLExceptionTranslator class classifies into four types of exceptions viz. BadSqlGrammarException, DataIntegrityViolationException, DataAccessResourceFailureException and ConcurrencyFailureException.   All the exception categories provided in SQLErrorCodeSQLExceptionTranslator need to be provided for SQL State based classification as well.  * There is no classification for TransientDataAccessResourceException. This needs to be added as well.  ---  **Affects:** 2.5.2, 2.5.3, 2.5.4  **Issue Links:** - #9549 Improve classification of DB2 and Sybase exceptions by adding new error-state classifications  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b1edea8a0b2be4244d03c8a7846475054af970b, https://github.com/spring-projects/spring-framework/commit/49549d66aee3ee27d271196d8a667fab2c7e6e65","closed","type: enhancement,","spring-projects-issues","2008-06-08T12:20:12Z","2019-01-11T19:08:22Z"
"","9549","Improve classification of DB2 and Sybase exceptions by adding new error-state classifications  [SPR-4873]","**[Abhishek Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=gupabhi)** opened **[SPR-4873](https://jira.spring.io/browse/SPR-4873?redirect=false)** and commented  Sub: Additional sql-state classification required for  Sybase and DB2  We currently classify SQLExceptions as Transient or Non-Transient based on SQL-States we provide in a configuration file. Following are the SQL-States for DB2 and Sybase that we use:  SQLStates for DB2,DB2UDB: * 08001     Transient Exception           No Connection  (application requester could not connect to the target.) * 40003    Transient Exception            No Connection * S1000    Transient Exception             Communication Failure * 57011     Transient Exception             Out of virtual memory * 57019     Transient Exception             DB currently in use * 40001     Transient Exception             Deadlock detected * 23505     Non-Transient Exception    Duplicate Key  SQLStates for Sybase: * JZ006     Transient Exception            Unexpected I/O error * JW0I0     Transient Exception            Internal error with a timed I/O stream * JZ0I1      Transient Exception            I/O timeout * JZ0I2      Transient Exception            I/O timeout * JZ0C0    Transient Exception            Connecton already closed * JZ0P1    Transient Exception            Unexptected result type * JZ0EM   Transient Exception             End of Data * JZ0P4    Transient Exception             Protocol Error * 40001    Transient Exception            Deadlock detected * 23000     Non-Transient                    Data Integrity Violated  The descriptions for the above sybase sql-states can be found here: http://manuals.sybase.com/onlinebooks/group-jcarc/jcg0400e/jcrg/`@Generic__BookTextView`/7402  Not all of the above given error-states are supported in spring's SQLExceptionTranslator. It would be nice to have these available out of the box in spring, so we can completely replace our sql-state based error-handling with that of spring's.  ---  **Affects:** 2.5.2, 2.5.3, 2.5.4  **Issue Links:** - #9575 Adding hook into SQL State based exception translation","closed","type: enhancement,","spring-projects-issues","2008-05-28T23:56:17Z","2019-01-11T19:09:11Z"
"","9548","Improve handling of Sybase/DB2 SQLExceptions [SPR-4872]","**[Abhishek Gupta](https://jira.spring.io/secure/ViewProfile.jspa?name=gupabhi)** opened **[SPR-4872](https://jira.spring.io/browse/SPR-4872?redirect=false)** and commented  Sub: Additional error-cores  requried to be added in ""sql-error-codes.xml""  for Sybase and DB2  We currently use our own mappings of sql error-codes and sql-states to map exceptions as Transient or Non-Transient and find the following error codes from DB2 and Sybase missing in spring's  ""sql-error-codes.xml""  file.  DB2 error-codes that should map to a TransientDataAccessException type: * -30080  [Communication Error](https://publib.boulder.ibm.com/infocenter/db2luw/v9r5/index.jsp?topic=/com.ibm.db2.luw.messages.sql.doc/doc/msql30080n.html)  * -30081 [Communication Error](https://publib.boulder.ibm.com/infocenter/db2luw/v9r5/index.jsp?topic=/com.ibm.db2.luw.messages.sql.doc/doc/msql30081n.html)  * -1035 [DB currently in use](https://publib.boulder.ibm.com/infocenter/db2luw/v9r5/index.jsp?topic=/com.ibm.db2.luw.messages.sql.doc/doc/msql01035n.html)  Sybase error-codes that should map to a TransientDataAccessException type: * 1105 [Out of space](http://manuals.sybase.com/onlinebooks/group-as/asg1250e/svrtsg/@Generic__BookTextView/22674;pt=22666)  * 921 [DB not Recovered](http://manuals.sybase.com/onlinebooks/group-as/asg1250e/svrtsg/@Generic__BookTextView/21571;hf=0)  Sybase error-codes that should map to a NonTransientDataAccessException type:  * 515 [Null values not allowed](http://manuals.sybase.com/onlinebooks/group-as/asg1250e/svrtsg/@Generic__BookTextView/15380)  It would be nice to have these in available out of the box in spring, so we can completely replace our sql error-handling with that of spring's.   ---  **Affects:** 2.5.2, 2.5.3, 2.5.4  **Attachments:** - [sql-error-codes.xml](https://jira.spring.io/secure/attachment/14156/sql-error-codes.xml) (_2.26 kB_)","closed","type: enhancement,","spring-projects-issues","2008-05-28T20:37:13Z","2012-06-19T03:47:43Z"
"","9455","setBeanClassLoader in AbstractSingletonProxyFactoryBean is ineffective because the value is lost [SPR-4778]","**[Aaron Zeckoski](https://jira.spring.io/secure/ViewProfile.jspa?name=azeckoski)** opened **[SPR-4778](https://jira.spring.io/browse/SPR-4778?redirect=false)** and commented  org.springframework.aop.framework.AbstractSingletonProxyFactoryBean.java Creating a bean definition which uses the setBeanClassLoader method is ineffective because after it is set the value is overwritten by the value determined by the initializeBean method which is triggered because the bean is BeanClassLoaderAware. Anyone wanting to set the classloader seems to have no alternative but to override the setter on classes like TransactionProxyFactoryBean in order to force the classloader to be set to what they want and not allow the initializeBean method to change it.  The initializaion method is this one in org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.java protected Object initializeBean(String beanName, Object bean, RootBeanDefinition mbd) { if (bean instanceof BeanNameAware) { ((BeanNameAware) bean).setBeanName(beanName); }      	if (bean instanceof BeanClassLoaderAware) {     		((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader());     	}          	if (bean instanceof BeanFactoryAware) {     		((BeanFactoryAware) bean).setBeanFactory(this);     	}  I am guessing the desired behavior here is probably to allow the value that is set via the setter to remain but allow the initializeBean method to change it if it was not set but I am not sure if this would cause a problem with other code that expects the current behavior. If the current behavior is correct then there might need to be some extra documentation or perhaps a change in the visiblity of the setter. Also, if the current behvaior remains then it would be nice to have a class which would allow the setting of the classloader for proxying.   ---  **Affects:** 2.0.6","closed","type: enhancement,","spring-projects-issues","2008-05-04T08:44:53Z","2012-06-19T03:47:25Z"
"","9619","Use Java Collections in SQL WHERE ... IN (...) clause [SPR-4944]","**[Aaron Moss](https://jira.spring.io/secure/ViewProfile.jspa?name=bruceiv)** opened **[SPR-4944](https://jira.spring.io/browse/SPR-4944?redirect=false)** and commented  A useful feature for JdbcTemplate (and its derivatives) would be the ability to pass a Java collection as an argument to the query*(), and update*() methods, in such a way that all of the elements of the collection are substituted in for a single placeholder (to allow something similar to the following code snippet:)  Set\ baz = new Set\(); // ... load baz ... SimpleJdbcTemplate template = new SimpleJdbcTemplate(datasource);  List\ result = template.query( ""SELECT * FROM foo AS f WHERE f.bar IN (?)"", new FooRowMapper(), baz);  (this may need a different placeholder than ? to implement)  (this can currently be done using code somewhat like the following, so is a minor request, but would be useful:)  Set\ baz = new Set\(); // ... load baz ... SimpleJdbcTemplate template = new SimpleJdbcTemplate(datasource);  //check baz non-empty  String sql = ""SELECT * FROM foo AS f WHERE f.bar IN (?"";  for (int i = 1; i < baz.size(); i++) { sql += "", ?""; }  sql += "")""  List result = template.getJdbcOperations().query( sql, baz.toArray(), new FooRowMapper());   ---  **Affects:** 1.0 RC1, 1.0 RC2, 1.0 final, 1.0.1, 1.0.2, 1.1 RC1, 1.1 RC2, 1.1 final, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5, 1.2 RC1, 1.2 RC2, 1.2 final, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.2.8, 2.0 M1, 2.0 M2, 2.0 M3, 2.0 M4, 2.0 M5, 2.0 RC1, 2.0 RC2, 2.0 RC3, 2.0 RC4, 2.0 final, 2.0.1, 2.0.2, 1.2.9, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.1 M1, 2.1 M2, 2.1 M3, 2.1 M4, 2.5 RC1, 2.5 RC2, 2.5 final, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.5.5","closed","type: enhancement,","spring-projects-issues","2008-06-23T05:26:49Z","2012-06-19T09:36:23Z"
"","10718","ApplicationListener callbacks to be supported for inner beans as well [SPR-6049]","**[aaron gaalswyk](https://jira.spring.io/secure/ViewProfile.jspa?name=agaalswyk)** opened **[SPR-6049](https://jira.spring.io/browse/SPR-6049?redirect=false)** and commented  I have a bean definition like this:  \      \  The MyBeanImpl bean implements both the MyBean interface and the Spring ApplicationListener interface, because it needs the ContextRefreshedEvent to complete some configuration.  With the definition done as above, security gets applied correctly, but the ApplicationListener.onApplicationEvent callback fails to ever get invoked.  If I comment out the intercept-methods decorator, the callback works again.  If I delete the intercept-methods decorator and replace it with a stand-alone global-method-security element, I'm in good shape with both security and the onApplicationEvent callback:                      ---  **Affects:** 3.0 M4  **Issue Links:** - #19349 Inner bean behind BeanFactoryPostProcessor should be able to receive application events  **Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0e1b04d0829caa3a64ccab655c971312491f46ba","closed","type: enhancement,","spring-projects-issues","2008-09-24T13:53:25Z","2019-01-11T14:22:28Z"
"","9726","CachedMessageProducer does not use the Message's priority, TTL, or delivery mode [SPR-5051]","**[Aaron Baff](https://jira.spring.io/secure/ViewProfile.jspa?name=drizzt321)** opened **[SPR-5051](https://jira.spring.io/browse/SPR-5051?redirect=false)** and commented  I have been using the CachedMessageProducer with ActiveMQ via JmsTemplate to send JMS Messages. I have recently tried to implement a priority based scheme, and since JMS offers this in the spec (via setJMSPriority() on a Message object), I would use this functionality. Unfortunately, I discovered that if I set the priority via Message.setJMSPriority(), it does not send that Message with the priority I set on it. Instead, the CachedMessageProducer either is given the priority by the JmsTemplate if it has been administratively set, or it uses the defaults that are received taken from the MessageProducer that is passed in when the CachedMessageProducer is instantiated.  I can understand JmsTemplate overriding the Message's values if desired, but if I set a priority (or TTL/delivery mode) on the Message I feel that I should be able to assume that the producer will use those values to send the Message to the broker. Perhaps I am mistaken about how this should work, but this behavior is not mentioned at all in the documentation (including JavaDoc), and I had to trace it down via debugging my application to figure out why my Message's weren't being sent with the correct priority.   ---  **Affects:** 2.5.4","closed","status: declined,","spring-projects-issues","2008-07-31T02:40:29Z","2019-01-12T16:28:04Z"